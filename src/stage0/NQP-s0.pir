.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'
.include 'libpaths.pasm'
.loadlib "nqp_group"
.loadlib "nqp_ops"
.loadlib "nqp_bigint_ops"
.loadlib "trans_ops"
.loadlib "io_ops"
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_371_1359292300.247") :anon :lex
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc _lex_param_0 :slurpy 
    .const 'Sub' $P5064 = 'cuid_370_1359292300.247' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_372_1359292300.247' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_374_1359292300.247' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_391_1359292300.247' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_410_1359292300.247' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_411_1359292300.247' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_412_1359292300.247' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_413_1359292300.247' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_414_1359292300.247' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_415_1359292300.247' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_416_1359292300.247' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_417_1359292300.247' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_418_1359292300.247' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_420_1359292300.247' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_492_1359292300.247' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_496_1359292300.247' 
    capture_lex $P5064 
    .lex "GLOBALish", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "EXPORT", $P103 
    .lex "$ops", $P104 
    .lex "$nqpcomp", $P105 
    .lex "@clo", $P106 
    .lex "&MAIN", $P107 
    .lex "&hll-config", $P108 
    .lex "@ARGS", _lex_param_0 
    .local pmc ctxsave 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P104, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P105, $P5002
    new $P5003, 'ResizablePMCArray'
    set $P106, $P5003
    .const 'Sub' $P5004 = 'cuid_370_1359292300.247' 
    capture_lex $P5004
    set $P107, $P5004
    .const 'Sub' $P5005 = 'cuid_372_1359292300.247' 
    capture_lex $P5005
    set $P108, $P5005
    find_dynamic_lex $P5006, "$*CTXSAVE"
    set ctxsave, $P5006
    isnull $I5001, ctxsave
    if $I5001 goto unless10_end11 
    can $I5002, ctxsave, "ctxsave"
    box $P5009, $I5002
    set $P5008, $P5009
    unless $I5002 goto if11_end13 
    $P5007 = ctxsave."ctxsave"()
    set $P5008, $P5007
  if11_end13:
  unless10_end11:
.annotate 'line', 1
    .const 'Sub' $P5010 = 'cuid_374_1359292300.247' 
    capture_lex $P5010
    $P5011 = $P5010()
    .const 'Sub' $P5012 = 'cuid_391_1359292300.247' 
    capture_lex $P5012
    $P5013 = $P5012()
    .const 'Sub' $P5014 = 'cuid_410_1359292300.247' 
    capture_lex $P5014
    $P5015 = $P5014()
.annotate 'line', 1437
    nqp_get_sc_object $P5019, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Compiler"]
    unless_null $P5016, fallback3780
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5016, $P5020
  fallback3780:
    $P5021 = $P5016."operations"()
    set $P104, $P5021
.annotate 'line', 1439
    $P104."add_hll_pirop_mapping"("nqp", "nqpmultidispatch", "multi_dispatch_over_lexical_candidates", "P")
.annotate 'line', 1441
    .const 'Sub' $P5023 = 'cuid_411_1359292300.247' 
    capture_lex $P5023
    newclosure $P5022, $P5023
    $P104."add_hll_op"("nqp", "preinc", $P5022)
.annotate 'line', 1456
    .const 'Sub' $P5025 = 'cuid_412_1359292300.247' 
    capture_lex $P5025
    newclosure $P5024, $P5025
    $P104."add_hll_op"("nqp", "predec", $P5024)
.annotate 'line', 1471
    .const 'Sub' $P5027 = 'cuid_413_1359292300.247' 
    capture_lex $P5027
    newclosure $P5026, $P5027
    $P104."add_hll_op"("nqp", "postinc", $P5026)
.annotate 'line', 1495
    .const 'Sub' $P5029 = 'cuid_414_1359292300.247' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    $P104."add_hll_op"("nqp", "postdec", $P5028)
.annotate 'line', 1519
    .const 'Sub' $P5031 = 'cuid_415_1359292300.247' 
    capture_lex $P5031
    newclosure $P5030, $P5031
    $P104."add_hll_op"("nqp", "numify", $P5030)
.annotate 'line', 1523
    .const 'Sub' $P5033 = 'cuid_416_1359292300.247' 
    capture_lex $P5033
    newclosure $P5032, $P5033
    $P104."add_hll_op"("nqp", "stringify", $P5032)
.annotate 'line', 1527
    .const 'Sub' $P5035 = 'cuid_417_1359292300.247' 
    capture_lex $P5035
    newclosure $P5034, $P5035
    $P104."add_hll_op"("nqp", "eqaddr", $P5034)
.annotate 'line', 1535
    .const 'Sub' $P5037 = 'cuid_418_1359292300.247' 
    capture_lex $P5037
    newclosure $P5036, $P5037
    $P104."add_hll_op"("nqp", "falsey", $P5036)
    .const 'Sub' $P5038 = 'cuid_420_1359292300.247' 
    capture_lex $P5038
    $P5039 = $P5038()
    .const 'Sub' $P5040 = 'cuid_492_1359292300.247' 
    capture_lex $P5040
    $P5041 = $P5040()
    .const 'Sub' $P5042 = 'cuid_496_1359292300.247' 
    capture_lex $P5042
    $P5043 = $P5042()
.annotate 'line', 3218
    nqp_get_sc_object $P5047, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5046, $P5047, "NQP"
    get_who $P5045, $P5046
    set $P5044, $P5045["Compiler"]
    unless_null $P5044, fallback5761
    nqp_get_sc_object $P5048, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5044, $P5048
  fallback5761:
    $P5049 = $P5044."new"()
    set $P105, $P5049
.annotate 'line', 3219
    $P105."language"("nqp")
.annotate 'line', 3220
    nqp_get_sc_object $P5053, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5052, $P5053, "NQP"
    get_who $P5051, $P5052
    set $P5050, $P5051["Grammar"]
    unless_null $P5050, fallback5762
    nqp_get_sc_object $P5054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5050, $P5054
  fallback5762:
    $P105."parsegrammar"($P5050)
.annotate 'line', 3221
    nqp_get_sc_object $P5058, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5057, $P5058, "NQP"
    get_who $P5056, $P5057
    set $P5055, $P5056["Actions"]
    unless_null $P5055, fallback5763
    nqp_get_sc_object $P5059, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5055, $P5059
  fallback5763:
    $P105."parseactions"($P5055)
.annotate 'line', 3222
    $P5060 = $P105."config"()
    "&hll-config"($P5060)
.annotate 'line', 3225
    $P5061 = $P105."commandline_options"()
    set $P106, $P5061
.annotate 'line', 3226
    $P106."push"("parsetrace")
.annotate 'line', 3227
    $P106."push"("setting=s")
.annotate 'line', 3228
    $P106."push"("setting-path=s")
.annotate 'line', 3229
    $P106."push"("module-path=s")
.annotate 'line', 3230
    $P106."push"("vmlibs=s")
.annotate 'line', 3231
    $P106."push"("no-regex-lib")
.annotate 'line', 3232
    $P106."push"("old-regex-lib")
.annotate 'line', 3233
    $P106."push"("dynext=s")
    unless _lex_param_0 goto if1762_end5765 
    .const 'Sub' $P5062 = "cuid_370_1359292300.247" 
    $P5063 = $P5062(_lex_param_0 :flat)
  if1762_end5765:
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "MAIN" :subid("cuid_370_1359292300.247") :anon :lex :outer("cuid_371_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3235
    .param pmc _lex_param_0 
    .lex "@ARGS", _lex_param_0 
.annotate 'line', 3237
    find_lex $P5001, "$nqpcomp"
    $P5001."command_line"(_lex_param_0, "utf8" :named("encoding"), "ascii iso-8859-1" :named("transcode"))
.annotate 'line', 3240
    find_lex $P5002, "$nqpcomp"
    $P5003 = $P5002."nqpevent"()
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "hll-config" :subid("cuid_372_1359292300.247") :anon :lex :outer("cuid_371_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3244
    .param pmc _lex_param_0 
    .lex "$config", _lex_param_0 
    box $P5001, "2013.01-24-g8658578"
    set _lex_param_0["version"], $P5001
    box $P5002, "2013-01-27T13:11:40Z"
    set _lex_param_0["build-date"], $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_374_1359292300.247") :anon :lex :outer("cuid_371_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 8
    .const 'Sub' $P5031 = 'cuid_1_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_2_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_3_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_4_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_5_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_6_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_7_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_8_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_9_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_10_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_11_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_15_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_16_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_17_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_18_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_19_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_20_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_21_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_22_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_23_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_24_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_25_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_26_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_27_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_28_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_29_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_30_1359292300.247' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_31_1359292300.247' 
    capture_lex $P5031 
    .lex "$loader", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "$?CLASS", $P103 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_1_1359292300.247' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_2_1359292300.247' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_3_1359292300.247' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_4_1359292300.247' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_5_1359292300.247' 
    capture_lex $P5006
    get_hll_global $P5007, "ModuleLoader"
    set $P101, $P5007
    .const 'Sub' $P5008 = 'cuid_6_1359292300.247' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_7_1359292300.247' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_8_1359292300.247' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_9_1359292300.247' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_10_1359292300.247' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_11_1359292300.247' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_15_1359292300.247' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_16_1359292300.247' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_17_1359292300.247' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_18_1359292300.247' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_19_1359292300.247' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_20_1359292300.247' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_21_1359292300.247' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_22_1359292300.247' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_23_1359292300.247' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_24_1359292300.247' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_25_1359292300.247' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_26_1359292300.247' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_27_1359292300.247' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_28_1359292300.247' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_29_1359292300.247' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_30_1359292300.247' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_31_1359292300.247' 
    capture_lex $P5030
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "BUILD" :subid("cuid_1_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 30
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :slurpy :named 
    .const 'Sub' $P5032 = 'cuid_373_1359292300.247' 
    capture_lex $P5032 
    .lex "self", _lex_param_0 
    .lex "%opts", _lex_param_1 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    new $P5003, 'ResizablePMCArray'
    repr_bind_attr_obj $P5001, $P5002, "@!BLOCKS", $P5003
    nqp_decontainerize $P5004, _lex_param_0
    nqp_get_sc_object $P5005, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    new $P5006, 'Hash'
    repr_bind_attr_obj $P5004, $P5005, "%!code_objects_to_fix_up", $P5006
    nqp_decontainerize $P5007, _lex_param_0
    nqp_get_sc_object $P5008, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    new $P5009, 'Hash'
    repr_bind_attr_obj $P5007, $P5008, "%!code_object_types", $P5009
    nqp_decontainerize $P5010, _lex_param_0
    nqp_get_sc_object $P5011, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    new $P5012, 'Hash'
    repr_bind_attr_obj $P5010, $P5011, "%!code_object_fixup_list", $P5012
    nqp_decontainerize $P5013, _lex_param_0
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    new $P5015, 'Hash'
    repr_bind_attr_obj $P5013, $P5014, "%!code_stub_sc_idx", $P5015
    find_dynamic_lex $P5018, "%*COMPILING"
    unless_null $P5018, fallback16
    nqp_get_sc_object $P5021, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["%COMPILING"]
    unless_null $P5019, fallback17
    nqp_get_sc_object $P5023, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5022, $P5023
    new $P5024, 'Hash'
    set $P5022["%COMPILING"], $P5024
    set $P5019, $P5024
  fallback17:
    unless_null $P5019, vivi_1318
    die "Contextual %*COMPILING not found"
    box $P5025, "Contextual %*COMPILING not found"
    set $P5019, $P5025
  vivi_1318:
    set $P5018, $P5019
  fallback16:
    set $P5017, $P5018["%?OPTIONS"]
    unless_null $P5017, fallback19
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5017, $P5026
  fallback19:
    set $P5016, $P5017["dynext"]
    unless_null $P5016, fallback20
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5016, $P5027
  fallback20:
    defined $I5001, $P5016
    box $P5031, $I5001
    set $P5030, $P5031
    unless $I5001 goto if12_end15 
    .const 'Sub' $P5028 = 'cuid_373_1359292300.247' 
    capture_lex $P5028
    $P5029 = $P5028()
    set $P5030, $P5029
  if12_end15:
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_373_1359292300.247") :anon :lex :outer("cuid_1_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 37
    .lex "$dynext_path", $P101 
    .lex "@dynext_paths", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    find_dynamic_lex $P5005, "%*COMPILING"
    unless_null $P5005, fallback21
    nqp_get_sc_object $P5008, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["%COMPILING"]
    unless_null $P5006, fallback22
    nqp_get_sc_object $P5010, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5009, $P5010
    new $P5011, 'Hash'
    set $P5009["%COMPILING"], $P5011
    set $P5006, $P5011
  fallback22:
    unless_null $P5006, vivi_1423
    die "Contextual %*COMPILING not found"
    box $P5012, "Contextual %*COMPILING not found"
    set $P5006, $P5012
  vivi_1423:
    set $P5005, $P5006
  fallback21:
    set $P5004, $P5005["%?OPTIONS"]
    unless_null $P5004, fallback24
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5013
  fallback24:
    set $P5003, $P5004["dynext"]
    unless_null $P5003, fallback25
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5014
  fallback25:
    set $P101, $P5003
    getinterp $P5017
    set $P5016, $P5017[.IGLOBALS_LIB_PATHS]
    unless_null $P5016, fallback26
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5016, $P5018
  fallback26:
    set $P5015, $P5016[.PARROT_LIB_PATH_DYNEXT]
    unless_null $P5015, fallback27
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5015, $P5019
  fallback27:
    set $P102, $P5015
.annotate 'line', 41
    $P5020 = $P102."push"($P101)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "push_lexpad" :subid("cuid_2_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 46
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$pad", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 48
    nqp_get_sc_object $P5005, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Block"]
    unless_null $P5002, fallback28
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5006
  fallback28:
    nqp_get_sc_object $P5010, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback29
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5011
  fallback29:
    $P5012 = $P5007."new"()
    $P5013 = $P5002."new"($P5012, _lex_param_1 :named("node"))
    set $P101, $P5013
    nqp_decontainerize $P5014, _lex_param_0
    nqp_get_sc_object $P5015, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5016, $P5014, $P5015, "@!BLOCKS"
    set $N5001, $P5016
    unless $N5001 goto if15_end31 
.annotate 'line', 49
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    nqp_decontainerize $P5021, _lex_param_0
    nqp_get_sc_object $P5022, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5023, $P5021, $P5022, "@!BLOCKS"
    set $N5003, $P5023
    set $N5004, 1
    sub $N5002, $N5003, $N5004
    set $I5001, $N5002
    set $P5017, $P5020[$I5001]
    unless_null $P5017, fallback32
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5017, $P5024
  fallback32:
    set $P101["outer"], $P5017
  if15_end31:
    nqp_decontainerize $P5025, _lex_param_0
    nqp_get_sc_object $P5026, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5027, $P5025, $P5026, "@!BLOCKS"
    nqp_decontainerize $P5028, _lex_param_0
    nqp_get_sc_object $P5029, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5030, $P5028, $P5029, "@!BLOCKS"
    set $N5005, $P5030
    set $I5002, $N5005
    set $P5027[$I5002], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pop_lexpad" :subid("cuid_3_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 57
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 58
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5003, $P5001, $P5002, "@!BLOCKS"
    $P5004 = $P5003."pop"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "cur_lexpad" :subid("cuid_4_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 62
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5007, $P5005, $P5006, "@!BLOCKS"
    set $N5002, $P5007
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    set $I5001, $N5001
    set $P5001, $P5004[$I5001]
    unless_null $P5001, fallback33
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5008
  fallback33:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "get_legacy_block_list" :subid("cuid_5_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 67
    .param pmc _lex_param_0 
    .lex "@x", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5005, $P5003, $P5004, "@!BLOCKS"
    clone $P5002, $P5005
    set $P101, $P5002
.annotate 'line', 69
    $P101."reverse"()
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "load_setting" :subid("cuid_6_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 80
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5005 = 'cuid_375_1359292300.247' 
    capture_lex $P5005 
    .lex "self", _lex_param_0 
    .lex "$setting_name", _lex_param_1 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_34
    .lex "RETURN", $P101
    set $S5001, _lex_param_1
    isne $I5001, $S5001, "NULL"
    box $P5004, $I5001
    set $P5003, $P5004
    unless $I5001 goto if16_end37 
    .const 'Sub' $P5001 = 'cuid_375_1359292300.247' 
    capture_lex $P5001
    $P5002 = $P5001()
    set $P5003, $P5002
  if16_end37:
    goto lexotic_35
  lexotic_34:
    .get_results ($P5003)
  lexotic_35:
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_375_1359292300.247") :anon :lex :outer("cuid_6_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 82
    .lex "$setting", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback38
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback39
    nqp_get_sc_object $P5008, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback39:
    unless_null $P5004, vivi_1740
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_1740:
    set $P5003, $P5004
  fallback38:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback41
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5011
  fallback41:
.annotate 'line', 87
    find_lex $P5012, "$loader"
    find_lex $P5013, "$setting_name"
    $P5014 = $P5012."load_setting"($P5013)
    set $P5002["outer_ctx"], $P5014
    set $P101, $P5014
.annotate 'line', 90
    find_lex $P5016, "self"
    nqp_decontainerize $P5015, $P5016
    $P5017 = $P5015."is_precompilation_mode"()
    unless $P5017 goto if18_else42 
.annotate 'line', 91
    find_lex $P5019, "self"
    nqp_decontainerize $P5018, $P5019
    nqp_get_sc_object $P5023, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Stmts"]
    unless_null $P5020, fallback44
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5020, $P5024
  fallback44:
.annotate 'line', 92
    nqp_get_sc_object $P5028, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["VM"]
    unless_null $P5025, fallback45
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5025, $P5029
  fallback45:
.annotate 'line', 94
    nqp_get_sc_object $P5033, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback46
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5030, $P5034
  fallback46:
    $P5035 = $P5030."new"("ModuleLoader.pbc" :named("value"))
    $P5036 = $P5025."new"($P5035, "load_bytecode vs" :named("pirop"))
.annotate 'line', 96
    nqp_get_sc_object $P5040, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback47
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5037, $P5041
  fallback47:
.annotate 'line', 98
    nqp_get_sc_object $P5045, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["BVal"]
    unless_null $P5042, fallback48
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5042, $P5046
  fallback48:
    find_dynamic_lex $P5047, "$*UNIT"
    unless_null $P5047, fallback49
    nqp_get_sc_object $P5050, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$UNIT"]
    unless_null $P5048, fallback50
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5048, $P5051
  fallback50:
    unless_null $P5048, vivi_1951
    die "Contextual $*UNIT not found"
    box $P5052, "Contextual $*UNIT not found"
    set $P5048, $P5052
  vivi_1951:
    set $P5047, $P5048
  fallback49:
    $P5053 = $P5042."new"($P5047 :named("value"))
.annotate 'line', 99
    nqp_get_sc_object $P5057, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Op"]
    unless_null $P5054, fallback52
    nqp_get_sc_object $P5058, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5054, $P5058
  fallback52:
.annotate 'line', 101
    nqp_get_sc_object $P5062, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5061, $P5062, "QAST"
    get_who $P5060, $P5061
    set $P5059, $P5060["VM"]
    unless_null $P5059, fallback53
    nqp_get_sc_object $P5063, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5059, $P5063
  fallback53:
.annotate 'line', 103
    nqp_get_sc_object $P5067, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["SVal"]
    unless_null $P5064, fallback54
    nqp_get_sc_object $P5068, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5064, $P5068
  fallback54:
    $P5069 = $P5064."new"("ModuleLoader" :named("value"))
    $P5070 = $P5059."new"($P5069, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 105
    nqp_get_sc_object $P5074, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5073, $P5074, "QAST"
    get_who $P5072, $P5073
    set $P5071, $P5072["SVal"]
    unless_null $P5071, fallback55
    nqp_get_sc_object $P5075, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5071, $P5075
  fallback55:
    find_lex $P5076, "$setting_name"
    $P5077 = $P5071."new"($P5076 :named("value"))
    $P5078 = $P5054."new"($P5070, $P5077, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5079 = $P5037."new"($P5053, $P5078, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
    $P5080 = $P5020."new"($P5036, $P5079)
    $P5081 = $P5018."add_load_dependency_task"($P5080 :named("deserialize_past"))
    goto if18_end43
  if18_else42:
.annotate 'line', 110
.annotate 'line', 112
    find_lex $P5083, "self"
    nqp_decontainerize $P5082, $P5083
    nqp_get_sc_object $P5087, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5086, $P5087, "QAST"
    get_who $P5085, $P5086
    set $P5084, $P5085["Op"]
    unless_null $P5084, fallback56
    nqp_get_sc_object $P5088, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5084, $P5088
  fallback56:
.annotate 'line', 114
    nqp_get_sc_object $P5092, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5091, $P5092, "QAST"
    get_who $P5090, $P5091
    set $P5089, $P5090["BVal"]
    unless_null $P5089, fallback57
    nqp_get_sc_object $P5093, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5089, $P5093
  fallback57:
    find_dynamic_lex $P5094, "$*UNIT"
    unless_null $P5094, fallback58
    nqp_get_sc_object $P5097, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5096, $P5097
    set $P5095, $P5096["$UNIT"]
    unless_null $P5095, fallback59
    nqp_get_sc_object $P5098, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5095, $P5098
  fallback59:
    unless_null $P5095, vivi_2060
    die "Contextual $*UNIT not found"
    box $P5099, "Contextual $*UNIT not found"
    set $P5095, $P5099
  vivi_2060:
    set $P5094, $P5095
  fallback58:
    $P5100 = $P5089."new"($P5094 :named("value"))
.annotate 'line', 115
    nqp_get_sc_object $P5104, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5103, $P5104, "QAST"
    get_who $P5102, $P5103
    set $P5101, $P5102["Op"]
    unless_null $P5101, fallback61
    nqp_get_sc_object $P5105, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5101, $P5105
  fallback61:
.annotate 'line', 117
    nqp_get_sc_object $P5109, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5108, $P5109, "QAST"
    get_who $P5107, $P5108
    set $P5106, $P5107["VM"]
    unless_null $P5106, fallback62
    nqp_get_sc_object $P5110, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5106, $P5110
  fallback62:
.annotate 'line', 119
    nqp_get_sc_object $P5114, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5113, $P5114, "QAST"
    get_who $P5112, $P5113
    set $P5111, $P5112["SVal"]
    unless_null $P5111, fallback63
    nqp_get_sc_object $P5115, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5111, $P5115
  fallback63:
    $P5116 = $P5111."new"("ModuleLoader" :named("value"))
    $P5117 = $P5106."new"($P5116, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 121
    nqp_get_sc_object $P5121, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5120, $P5121, "QAST"
    get_who $P5119, $P5120
    set $P5118, $P5119["SVal"]
    unless_null $P5118, fallback64
    nqp_get_sc_object $P5122, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5118, $P5122
  fallback64:
    find_lex $P5123, "$setting_name"
    $P5124 = $P5118."new"($P5123 :named("value"))
    $P5125 = $P5101."new"($P5117, $P5124, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5126 = $P5084."new"($P5100, $P5125, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
    $P5127 = $P5082."add_fixup_task"($P5126 :named("fixup_past"))
  if18_end43:
    getattribute $P5129, $P101, "lex_pad"
    find_lex $P5128, "RETURN"
    $P5130 = $P5128($P5129)
    .return ($P5130) 
.end
.HLL "nqp"
.namespace []
.sub "load_module" :subid("cuid_7_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 132
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$module_name", _lex_param_1 
    .lex "$cur_GLOBALish", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_65
    .lex "RETURN", $P102
.annotate 'line', 134
    find_lex $P5002, "$loader"
    $P5003 = $P5002."load_module"(_lex_param_1, _lex_param_2)
    set $P101, $P5003
.annotate 'line', 137
    nqp_decontainerize $P5004, _lex_param_0
    $P5005 = $P5004."is_precompilation_mode"()
    unless $P5005 goto if21_end68 
.annotate 'line', 138
    nqp_decontainerize $P5006, _lex_param_0
    nqp_get_sc_object $P5010, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback69
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5011
  fallback69:
.annotate 'line', 139
    nqp_get_sc_object $P5015, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["VM"]
    unless_null $P5012, fallback70
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5012, $P5016
  fallback70:
.annotate 'line', 141
    nqp_get_sc_object $P5020, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["SVal"]
    unless_null $P5017, fallback71
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5017, $P5021
  fallback71:
    $P5022 = $P5017."new"("ModuleLoader.pbc" :named("value"))
    $P5023 = $P5012."new"($P5022, "load_bytecode vs" :named("pirop"))
.annotate 'line', 143
    nqp_get_sc_object $P5027, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback72
    nqp_get_sc_object $P5028, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5024, $P5028
  fallback72:
.annotate 'line', 145
    nqp_get_sc_object $P5032, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["VM"]
    unless_null $P5029, fallback73
    nqp_get_sc_object $P5033, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5029, $P5033
  fallback73:
.annotate 'line', 147
    nqp_get_sc_object $P5037, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["SVal"]
    unless_null $P5034, fallback74
    nqp_get_sc_object $P5038, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5034, $P5038
  fallback74:
    $P5039 = $P5034."new"("ModuleLoader" :named("value"))
    $P5040 = $P5029."new"($P5039, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 149
    nqp_get_sc_object $P5044, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["SVal"]
    unless_null $P5041, fallback75
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5041, $P5045
  fallback75:
    $P5046 = $P5041."new"(_lex_param_1 :named("value"))
    $P5047 = $P5024."new"($P5040, $P5046, "callmethod" :named("op"), "load_module" :named("name"))
    $P5048 = $P5007."new"($P5023, $P5047)
    $P5049 = $P5006."add_load_dependency_task"($P5048 :named("deserialize_past"))
  if21_end68:
    getattribute $P5051, $P101, "lex_pad"
    find_lex $P5050, "RETURN"
    $P5052 = $P5050($P5051)
    goto lexotic_66
  lexotic_65:
    .get_results ($P5052)
  lexotic_66:
    .return ($P5052) 
.end
.HLL "nqp"
.namespace []
.sub "import" :subid("cuid_8_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 156
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5009 = 'cuid_376_1359292300.247' 
    capture_lex $P5009 
    .lex "$target", $P101 
    .lex "self", _lex_param_0 
    .lex "$stash", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 157
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = $P5002."cur_lexpad"()
    set $P101, $P5003
    set $P5004, _lex_param_1
    iter $P5006, _lex_param_1
  for_next76:
    unless $P5006, for_done78
    shift $P5008, $P5006
  for_redo77:
    .const 'Sub' $P5007 = 'cuid_376_1359292300.247' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next76
  for_done78:
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_376_1359292300.247") :anon :lex :outer("cuid_8_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 158
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 159
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$target"
    $P5004 = _lex_param_0."key"()
    $P5005 = _lex_param_0."value"()
    $P5006 = $P5001."install_lexical_symbol"($P5003, $P5004, $P5005)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_symbol" :subid("cuid_9_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 165
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5012 = 'cuid_377_1359292300.247' 
    capture_lex $P5012 
    .lex "$name", $P101 
    .lex "$target", $P102 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "@sym", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    clone $P5003, _lex_param_2
    set _lex_param_2, $P5003
.annotate 'line', 167
    $P5004 = _lex_param_2."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    set $P102, _lex_param_1
    set $P5006, _lex_param_2
    iter $P5008, _lex_param_2
  for_next79:
    unless $P5008, for_done81
    shift $P5010, $P5008
  for_redo80:
    .const 'Sub' $P5009 = 'cuid_377_1359292300.247' 
    capture_lex $P5009
    $P5006 = $P5009($P5010)
    goto for_next79
  for_done81:
    get_who $P5011, $P102
    set $S5002, $P101
    set $P5011[$S5002], _lex_param_3
    .return (_lex_param_3) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_377_1359292300.247") :anon :lex :outer("cuid_9_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 171
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$target"
    set $S5001, _lex_param_0
    nqp_get_package_through_who $P5001, $P5002, $S5001
    store_lex "$target", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "install_lexical_symbol" :subid("cuid_10_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 181
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 183
    _lex_param_1."symbol"(_lex_param_2, "lexical" :named("scope"), _lex_param_3 :named("value"))
.annotate 'line', 184
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback82
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5003
  fallback82:
    nqp_get_sc_object $P5007, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback83
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5008
  fallback83:
    $P5009 = $P5004."new"("lexical" :named("scope"), _lex_param_2 :named("name"), "var" :named("decl"))
    $P5002."push"($P5009)
.annotate 'line', 187
    nqp_get_sc_object $P5013, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback84
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5014
  fallback84:
.annotate 'line', 190
    nqp_get_sc_object $P5018, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["SVal"]
    unless_null $P5015, fallback85
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5015, $P5019
  fallback85:
    $P5020 = $P5015."new"(_lex_param_2 :named("value"))
.annotate 'line', 191
    nqp_get_sc_object $P5024, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["WVal"]
    unless_null $P5021, fallback86
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5021, $P5025
  fallback86:
    $P5026 = $P5021."new"(_lex_param_3 :named("value"))
    $P5027 = $P5010."new"(_lex_param_1, $P5020, $P5026, "setstaticlex" :named("op"))
    set $P101, $P5027
.annotate 'line', 193
    nqp_decontainerize $P5028, _lex_param_0
    $P5029 = $P5028."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_routine" :subid("cuid_11_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 198
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$past_block", _lex_param_3 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 199
    nqp_get_sc_object $P5005, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback87
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5006
  fallback87:
.annotate 'line', 201
    nqp_get_sc_object $P5010, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback88
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5011
  fallback88:
    nqp_get_sc_object $P5015, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["WVal"]
    unless_null $P5012, fallback89
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5012, $P5016
  fallback89:
    $P5017 = $P5012."new"(_lex_param_1 :named("value"))
    $P5018 = $P5007."new"($P5017, "who" :named("op"))
.annotate 'line', 202
    nqp_get_sc_object $P5022, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["SVal"]
    unless_null $P5019, fallback90
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5019, $P5023
  fallback90:
    set $S5001, _lex_param_2
    $P5024 = $P5019."new"($S5001 :named("value"))
.annotate 'line', 203
    nqp_get_sc_object $P5028, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["BVal"]
    unless_null $P5025, fallback91
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5025, $P5029
  fallback91:
    $P5030 = $P5025."new"(_lex_param_3 :named("value"))
    $P5031 = $P5002."new"($P5018, $P5024, $P5030, "bindkey" :named("op"))
    set $P101, $P5031
.annotate 'line', 205
    nqp_decontainerize $P5032, _lex_param_0
    $P5033 = $P5032."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "create_code" :subid("cuid_15_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 210
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 :named("code_type_name") :optional 
    .param int haz_param_1 :opt_flag 
    .const 'Sub' $P5098 = 'cuid_12_1359292300.247' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_13_1359292300.247' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_14_1359292300.247' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_381_1359292300.247' 
    capture_lex $P5098 
    if haz_param_1, default169
    box $P5097, "NQPRoutine"
    set _lex_param_4, $P5097
  default169:
    .lex "$code_type", $P101 
    .lex "$have_code_type", $P102 
    .lex "$stub_code", $P103 
    .lex "$fixups", $P104 
    .lex "$dummy", $P105 
    .lex "$code_ref_idx", $P106 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$is_dispatcher", _lex_param_3 
    .lex "$code_type_name", _lex_param_4 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P106, $P5006
    root_new $P107, ['parrot';'Continuation']
    set_label $P107, lexotic_92
    .lex "RETURN", $P107
    box $P5007, 0
    set $P102, $P5007
    new $P5026, 'ExceptionHandler'
    set_label $P5026, catch_handler_25101
    $P5026.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5026
.annotate 'line', 214
.annotate 'line', 215
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    push $P5009, _lex_param_4
    $P5010 = $P5008."find_sym"($P5009)
    set $P101, $P5010
.annotate 'line', 216
    find_dynamic_lex $P5012, "$*PACKAGE"
    unless_null $P5012, fallback94
    nqp_get_sc_object $P5015, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$PACKAGE"]
    unless_null $P5013, fallback95
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5013, $P5016
  fallback95:
    unless_null $P5013, vivi_2296
    die "Contextual $*PACKAGE not found"
    box $P5017, "Contextual $*PACKAGE not found"
    set $P5013, $P5017
  vivi_2296:
    set $P5012, $P5013
  fallback94:
    get_how $P5011, $P5012
    find_dynamic_lex $P5018, "$*PACKAGE"
    unless_null $P5018, fallback97
    nqp_get_sc_object $P5021, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$PACKAGE"]
    unless_null $P5019, fallback98
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5019, $P5022
  fallback98:
    unless_null $P5019, vivi_2399
    die "Contextual $*PACKAGE not found"
    box $P5023, "Contextual $*PACKAGE not found"
    set $P5019, $P5023
  vivi_2399:
    set $P5018, $P5019
  fallback97:
    $P5024 = $P5011."name"($P5018)
    set $S5001, $P5024
    set $S5002, _lex_param_4
    isne $I5001, $S5001, $S5002
    box $P5025, $I5001
    set $P102, $P5025
    set $P5027, $P102
    pop_eh 
    goto skip_handler_24100
  catch_handler_25101:
    .get_results ($P5026) 
    set $I10001, 1
    set $P5026["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    finalize $P5026
    pop_upto_eh $P5026
    pop_eh 
    set $P5027, $P10001
    goto skip_handler_24100
  skip_handler_24100:
    .const 'Sub' $P5029 = 'cuid_12_1359292300.247' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    set $P103, $P5028
.annotate 'line', 259
    nqp_get_sc_object $P5033, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["Stmts"]
    unless_null $P5030, fallback130
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5030, $P5034
  fallback130:
    $P5035 = $P5030."new"()
    set $P104, $P5035
    set $P5036, _lex_param_1["compile_time_dummy"]
    unless_null $P5036, fallback133
    nqp_get_sc_object $P5037, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5036, $P5037
  fallback133:
    defined $I5002, $P5036
    unless $I5002 goto if29_else131 
.annotate 'line', 262
    set $P5038, _lex_param_1["compile_time_dummy"]
    unless_null $P5038, fallback134
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5038, $P5039
  fallback134:
    set $P105, $P5038
    goto if29_end132
  if29_else131:
.annotate 'line', 265
    nqp_fresh_stub $P5040, $P103
    set $P105, $P5040
    set $S5003, _lex_param_2
    assign $P105, $S5003
    setprop $P105, "STATIC_CODE_REF", $P105
.annotate 'line', 272
    nqp_decontainerize $P5041, _lex_param_0
    $P5042 = $P5041."add_root_code_ref"($P105, _lex_param_1)
    set $P106, $P5042
    nqp_decontainerize $P5043, _lex_param_0
    nqp_get_sc_object $P5044, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5045, $P5043, $P5044, "%!code_stub_sc_idx"
.annotate 'line', 273
    $P5046 = _lex_param_1."cuid"()
    set $S5004, $P5046
    set $P5045[$S5004], $P106
    set _lex_param_1["compile_time_dummy"], $P105
    set $P5058, $P102
    unless $P102 goto if30_end136 
.annotate 'line', 279
    nqp_decontainerize $P5047, _lex_param_0
    nqp_get_sc_object $P5048, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5049, $P5047, $P5048, "%!code_object_fixup_list"
.annotate 'line', 280
    $P5050 = _lex_param_1."cuid"()
    set $S5005, $P5050
    set $P5049[$S5005], $P104
.annotate 'line', 281
    nqp_decontainerize $P5051, _lex_param_0
    $P5052 = $P5051."is_precompilation_mode"()
    unless $P5052 goto if31_else137 
    .const 'Sub' $P5054 = 'cuid_13_1359292300.247' 
    capture_lex $P5054
    newclosure $P5053, $P5054
    setprop $P105, "CLONE_CALLBACK", $P5053
    set $P5057, $P105
    goto if31_end138
  if31_else137:
.annotate 'line', 286
    .const 'Sub' $P5056 = 'cuid_14_1359292300.247' 
    capture_lex $P5056
    newclosure $P5055, $P5056
    setprop $P105, "CLONE_CALLBACK", $P5055
    set $P5057, $P105
  if31_end138:
    set $P5058, $P5057
  if30_end136:
  if29_end132:
.annotate 'line', 310
    nqp_decontainerize $P5059, _lex_param_0
    $P5059."add_fixup_task"($P104 :named("fixup_past"))
    unless $P102 goto if32_else149 
    .const 'Sub' $P5060 = 'cuid_381_1359292300.247' 
    capture_lex $P5060
    $P5061 = $P5060()
    set $P5096, $P5061
    goto if32_end150
  if32_else149:
.annotate 'line', 350
.annotate 'line', 353
    nqp_get_sc_object $P5065, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5064, $P5065, "QAST"
    get_who $P5063, $P5064
    set $P5062, $P5063["VM"]
    unless_null $P5062, fallback164
    nqp_get_sc_object $P5066, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5062, $P5066
  fallback164:
.annotate 'line', 355
    nqp_get_sc_object $P5070, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5069, $P5070, "QAST"
    get_who $P5068, $P5069
    set $P5067, $P5068["VM"]
    unless_null $P5067, fallback165
    nqp_get_sc_object $P5071, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5067, $P5071
  fallback165:
.annotate 'line', 357
    nqp_get_sc_object $P5075, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5074, $P5075, "QAST"
    get_who $P5073, $P5074
    set $P5072, $P5073["SVal"]
    unless_null $P5072, fallback166
    nqp_get_sc_object $P5076, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5072, $P5076
  fallback166:
    nqp_decontainerize $P5077, _lex_param_0
    $P5078 = $P5077."handle"()
    $P5079 = $P5072."new"($P5078 :named("value"))
.annotate 'line', 358
    nqp_get_sc_object $P5083, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["IVal"]
    unless_null $P5080, fallback167
    nqp_get_sc_object $P5084, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5080, $P5084
  fallback167:
    $P5085 = $P5080."new"($P106 :named("value"))
    $P5086 = $P5067."new"($P5079, $P5085, "nqp_get_sc_code_ref Psi" :named("pirop"))
.annotate 'line', 360
    nqp_get_sc_object $P5090, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5089, $P5090, "QAST"
    get_who $P5088, $P5089
    set $P5087, $P5088["BVal"]
    unless_null $P5087, fallback168
    nqp_get_sc_object $P5091, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5087, $P5091
  fallback168:
    $P5092 = $P5087."new"(_lex_param_1 :named("value"))
    $P5093 = $P5062."new"($P5086, $P5092, "assign vPP" :named("pirop"))
    $P104."push"($P5093)
    find_lex $P5094, "RETURN"
    $P5095 = $P5094($P105)
    set $P5096, $P5095
  if32_end150:
    goto lexotic_93
  lexotic_92:
    .get_results ($P5096)
  lexotic_93:
    .return ($P5096) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_12_1359292300.247") :anon :lex :outer("cuid_15_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 223
    .param pmc _lex_param_0 :slurpy 
    .param pmc _lex_param_1 :slurpy :named 
    .const 'Sub' $P5029 = 'cuid_380_1359292300.247' 
    capture_lex $P5029 
    .lex "$nqpcomp", $P101 
    .lex "$post", $P102 
    .lex "$pir", $P103 
    .lex "$compiled", $P104 
    .lex "$c", $P105 
    .lex "$i", $P106 
    .lex "@args", _lex_param_0 
    .lex "%named", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P106, $P5006
.annotate 'line', 225
    find_lex $P5007, "$past"
    find_lex $P5009, "self"
    nqp_decontainerize $P5008, $P5009
    $P5010 = $P5008."libs"()
    $P5007."unshift"($P5010)
    compreg $P5011, "nqp"
    set $P101, $P5011
.annotate 'line', 227
    nqp_get_sc_object $P5015, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["CompUnit"]
    unless_null $P5012, fallback102
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5012, $P5016
  fallback102:
    find_lex $P5017, "$past"
    $P5018 = $P5012."new"($P5017, "nqp" :named("hll"))
    $P5019 = $P101."post"($P5018)
    set $P102, $P5019
.annotate 'line', 228
    $P5020 = $P101."pir"($P102)
    set $P103, $P5020
.annotate 'line', 229
    $P5021 = $P101."evalpmc"($P103)
    set $P104, $P5021
    elements $I5001, $P104
    box $P5022, $I5001
    set $P105, $P5022
    box $P5023, 0
    set $P106, $P5023
  while26_test103:
    set $N5001, $P106
    set $N5002, $P105
    islt $I5002, $N5001, $N5002
    box $P5027, $I5002
    set $P5026, $P5027
    unless $I5002 goto while26_done107 
  while26_redo105:
    .const 'Sub' $P5024 = 'cuid_380_1359292300.247' 
    capture_lex $P5024
    $P5025 = $P5024()
    set $P5026, $P5025
    goto while26_test103 
  while26_done107:
.annotate 'line', 255
    $P5028 = $P104(_lex_param_0 :flat, _lex_param_1 :flat :named)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_380_1359292300.247") :anon :lex :outer("cuid_12_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 234
    .const 'Sub' $P5015 = 'cuid_379_1359292300.247' 
    capture_lex $P5015 
    .lex "$subid", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 235
    find_lex $P5003, "$compiled"
    find_lex $P5004, "$i"
    set $I5001, $P5004
    set $P5002, $P5003[$I5001]
    unless_null $P5002, fallback108
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5005
  fallback108:
    $P5006 = $P5002."get_subid"()
    set $P101, $P5006
    find_lex $P5008, "self"
    nqp_decontainerize $P5007, $P5008
    nqp_get_sc_object $P5009, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5010, $P5007, $P5009, "%!code_objects_to_fix_up"
    set $S5001, $P101
    exists $I5002, $P5010[$S5001]
    unless $I5002 goto if27_end110 
    .const 'Sub' $P5011 = 'cuid_379_1359292300.247' 
    capture_lex $P5011
    $P5012 = $P5011()
  if27_end110:
    find_lex $P5013, "$i"
    set $N5002, $P5013
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5014, $N5001
    store_lex "$i", $P5014
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_379_1359292300.247") :anon :lex :outer("cuid_380_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 236
    .const 'Sub' $P5067 = 'cuid_378_1359292300.247' 
    capture_lex $P5067 
    .lex "$static", $P101 
    .lex "$fixup_stmts", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
.annotate 'line', 240
    find_lex $P5005, "self"
    nqp_decontainerize $P5004, $P5005
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5007, $P5004, $P5006, "%!code_objects_to_fix_up"
    find_lex $P5008, "$subid"
    set $S5001, $P5008
    set $P5003, $P5007[$S5001]
    unless_null $P5003, fallback111
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5009
  fallback111:
    $P5010 = $P5003."shift"()
    set $P101, $P5010
    find_lex $P5013, "self"
    nqp_decontainerize $P5012, $P5013
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5015, $P5012, $P5014, "%!code_object_types"
    find_lex $P5016, "$subid"
    set $S5002, $P5016
    set $P5011, $P5015[$S5002]
    unless_null $P5011, fallback112
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5017
  fallback112:
    find_lex $P5019, "$compiled"
    find_lex $P5020, "$i"
    set $I5001, $P5020
    set $P5018, $P5019[$I5001]
    unless_null $P5018, fallback113
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5018, $P5021
  fallback113:
    setattribute $P101, $P5011, "$!do", $P5018
    find_lex $P5027, "self"
    nqp_decontainerize $P5026, $P5027
    nqp_get_sc_object $P5028, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5029, $P5026, $P5028, "%!code_objects_to_fix_up"
    find_lex $P5030, "$subid"
    set $S5003, $P5030
    set $P5025, $P5029[$S5003]
    unless_null $P5025, fallback114
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5025, $P5031
  fallback114:
    set $P5022, $P5025
    iter $P5024, $P5025
  for_next117:
    unless $P5024, for_done119
    shift $P5033, $P5024
  for_redo118:
    .const 'Sub' $P5032 = 'cuid_378_1359292300.247' 
    capture_lex $P5032
    $P5022 = $P5032($P5033)
    goto for_next117
  for_done119:
    find_lex $P5035, "$compiled"
    find_lex $P5036, "$i"
    set $I5002, $P5036
    set $P5034, $P5035[$I5002]
    unless_null $P5034, fallback120
    nqp_get_sc_object $P5037, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5034, $P5037
  fallback120:
    find_lex $P5039, "$compiled"
    find_lex $P5040, "$i"
    set $I5003, $P5040
    set $P5038, $P5039[$I5003]
    unless_null $P5038, fallback121
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5038, $P5041
  fallback121:
    setprop $P5034, "STATIC_CODE_REF", $P5038
.annotate 'line', 246
    find_lex $P5043, "self"
    nqp_decontainerize $P5042, $P5043
    find_lex $P5046, "self"
    nqp_decontainerize $P5045, $P5046
    nqp_get_sc_object $P5047, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5048, $P5045, $P5047, "%!code_stub_sc_idx"
    find_lex $P5049, "$subid"
    set $S5004, $P5049
    set $P5044, $P5048[$S5004]
    unless_null $P5044, fallback122
    nqp_get_sc_object $P5050, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5044, $P5050
  fallback122:
    find_lex $P5052, "$compiled"
    find_lex $P5053, "$i"
    set $I5004, $P5053
    set $P5051, $P5052[$I5004]
    unless_null $P5051, fallback123
    nqp_get_sc_object $P5054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5051, $P5054
  fallback123:
    $P5042."update_root_code_ref"($P5044, $P5051)
    find_lex $P5057, "self"
    nqp_decontainerize $P5056, $P5057
    nqp_get_sc_object $P5058, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5059, $P5056, $P5058, "%!code_object_fixup_list"
    find_lex $P5060, "$subid"
    set $S5005, $P5060
    set $P5055, $P5059[$S5005]
    unless_null $P5055, fallback124
    nqp_get_sc_object $P5061, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5055, $P5061
  fallback124:
    set $P102, $P5055
    new $P5065, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5065, while28_handlers128
    push_eh $P5065
  while28_test125:
    $P5062 = $P102."list"()
    set $N5001, $P5062
    box $P5066, $N5001
    set $P5064, $P5066
    unless $N5001 goto while28_done129 
  while28_redo127:
.annotate 'line', 250
    $P5063 = $P102."shift"()
    set $P5064, $P5063
    goto while28_test125 
  while28_handlers128:
    .get_results ($P5065)
    pop_upto_eh $P5065
    getattribute $P5065, $P5065, 'type'
    eq $P5065, .CONTROL_LOOP_NEXT, while28_test125
    eq $P5065, .CONTROL_LOOP_REDO, while28_redo127
  while28_done129:
    pop_eh 
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_378_1359292300.247") :anon :lex :outer("cuid_379_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 242
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5005, $P5002, $P5004, "%!code_object_types"
    find_lex $P5006, "$subid"
    set $S5001, $P5006
    set $P5001, $P5005[$S5001]
    unless_null $P5001, fallback115
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5007
  fallback115:
    find_lex $P5010, "$compiled"
    find_lex $P5011, "$i"
    set $I5001, $P5011
    set $P5009, $P5010[$I5001]
    unless_null $P5009, fallback116
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5012
  fallback116:
    clone $P5008, $P5009
    setattribute _lex_param_0, $P5001, "$!do", $P5008
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_13_1359292300.247") :anon :lex :outer("cuid_15_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 282
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 283
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5005, $P5002, $P5004, "%!code_objects_to_fix_up"
    find_lex $P5006, "$past"
    $P5007 = $P5006."cuid"()
    set $S5001, $P5007
    set $P5001, $P5005[$S5001]
    unless_null $P5001, fallback139
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5008
  fallback139:
    $P5009 = $P5001."push"(_lex_param_2)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_14_1359292300.247") :anon :lex :outer("cuid_15_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 287
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 289
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    $P5001."add_object"(_lex_param_2)
.annotate 'line', 290
    find_lex $P5003, "$fixups"
    nqp_get_sc_object $P5007, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Op"]
    unless_null $P5004, fallback140
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5008
  fallback140:
.annotate 'line', 292
    nqp_get_sc_object $P5012, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["WVal"]
    unless_null $P5009, fallback141
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5013
  fallback141:
    $P5014 = $P5009."new"(_lex_param_2 :named("value"))
.annotate 'line', 293
    nqp_get_sc_object $P5018, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["WVal"]
    unless_null $P5015, fallback142
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5015, $P5019
  fallback142:
    find_lex $P5020, "$code_type"
    $P5021 = $P5015."new"($P5020 :named("value"))
.annotate 'line', 294
    nqp_get_sc_object $P5025, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["SVal"]
    unless_null $P5022, fallback143
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5022, $P5026
  fallback143:
    $P5027 = $P5022."new"("$!do" :named("value"))
.annotate 'line', 295
    nqp_get_sc_object $P5031, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["VM"]
    unless_null $P5028, fallback144
    nqp_get_sc_object $P5032, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5028, $P5032
  fallback144:
.annotate 'line', 297
    nqp_get_sc_object $P5036, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Op"]
    unless_null $P5033, fallback145
    nqp_get_sc_object $P5037, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5033, $P5037
  fallback145:
    nqp_get_sc_object $P5041, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["BVal"]
    unless_null $P5038, fallback146
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5038, $P5042
  fallback146:
    find_lex $P5043, "$past"
    $P5044 = $P5038."new"($P5043 :named("value"))
    $P5045 = $P5033."new"($P5044, "clone" :named("op"))
.annotate 'line', 298
    nqp_get_sc_object $P5049, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["WVal"]
    unless_null $P5046, fallback147
    nqp_get_sc_object $P5050, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5046, $P5050
  fallback147:
    $P5051 = $P5046."new"(_lex_param_2 :named("value"))
    $P5052 = $P5028."new"($P5045, $P5051, "set_sub_code_object 0PP" :named("pirop"))
    $P5053 = $P5004."new"($P5014, $P5021, $P5027, $P5052, "bindattr" :named("op"))
    $P5003."push"($P5053)
.annotate 'line', 303
    find_lex $P5056, "self"
    nqp_decontainerize $P5055, $P5056
    nqp_get_sc_object $P5057, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5058, $P5055, $P5057, "%!code_objects_to_fix_up"
    find_lex $P5059, "$past"
    $P5060 = $P5059."cuid"()
    set $S5001, $P5060
    set $P5054, $P5058[$S5001]
    unless_null $P5054, fallback148
    nqp_get_sc_object $P5061, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5054, $P5061
  fallback148:
    $P5062 = $P5054."push"(_lex_param_2)
    .return ($P5062) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_381_1359292300.247") :anon :lex :outer("cuid_15_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 314
    .lex "$code_obj", $P101 
    .lex "$slot", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    find_lex $P5004, "$code_type"
    repr_instance_of $P5003, $P5004
    set $P101, $P5003
    find_lex $P5005, "$code_type"
    find_lex $P5006, "$dummy"
    setattribute $P101, $P5005, "$!do", $P5006
    find_lex $P5007, "$is_dispatcher"
    unless $P5007 goto if33_end152 
    find_lex $P5008, "$code_type"
    new $P5009, 'ResizablePMCArray'
    setattribute $P101, $P5008, "$!dispatchees", $P5009
  if33_end152:
.annotate 'line', 320
    find_lex $P5011, "self"
    nqp_decontainerize $P5010, $P5011
    $P5012 = $P5010."add_object"($P101)
    set $P102, $P5012
.annotate 'line', 323
    find_lex $P5014, "self"
    nqp_decontainerize $P5013, $P5014
.annotate 'line', 324
    nqp_get_sc_object $P5018, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback153
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5015, $P5019
  fallback153:
.annotate 'line', 326
    nqp_get_sc_object $P5023, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["BVal"]
    unless_null $P5020, fallback154
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5020, $P5024
  fallback154:
    find_lex $P5025, "$past"
    $P5026 = $P5020."new"($P5025 :named("value"))
.annotate 'line', 327
    nqp_get_sc_object $P5030, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["WVal"]
    unless_null $P5027, fallback155
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5027, $P5031
  fallback155:
    $P5032 = $P5027."new"($P101 :named("value"))
    $P5033 = $P5015."new"($P5026, $P5032, "setcodeobj" :named("op"))
    $P5013."add_fixup_task"($P5033 :named("deserialize_past"))
.annotate 'line', 331
    find_lex $P5034, "$fixups"
    nqp_get_sc_object $P5038, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Op"]
    unless_null $P5035, fallback156
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5035, $P5039
  fallback156:
.annotate 'line', 333
    nqp_get_sc_object $P5043, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["WVal"]
    unless_null $P5040, fallback157
    nqp_get_sc_object $P5044, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5040, $P5044
  fallback157:
    $P5045 = $P5040."new"($P101 :named("value"))
.annotate 'line', 334
    nqp_get_sc_object $P5049, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["WVal"]
    unless_null $P5046, fallback158
    nqp_get_sc_object $P5050, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5046, $P5050
  fallback158:
    find_lex $P5051, "$code_type"
    $P5052 = $P5046."new"($P5051 :named("value"))
.annotate 'line', 335
    nqp_get_sc_object $P5056, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["SVal"]
    unless_null $P5053, fallback159
    nqp_get_sc_object $P5057, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5053, $P5057
  fallback159:
    $P5058 = $P5053."new"("$!do" :named("value"))
.annotate 'line', 336
    nqp_get_sc_object $P5062, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5061, $P5062, "QAST"
    get_who $P5060, $P5061
    set $P5059, $P5060["BVal"]
    unless_null $P5059, fallback160
    nqp_get_sc_object $P5063, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5059, $P5063
  fallback160:
    find_lex $P5064, "$past"
    $P5065 = $P5059."new"($P5064 :named("value"))
    $P5066 = $P5035."new"($P5045, $P5052, $P5058, $P5065, "bindattr" :named("op"))
    $P5034."push"($P5066)
.annotate 'line', 338
    find_lex $P5067, "$fixups"
    nqp_get_sc_object $P5071, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5070, $P5071, "QAST"
    get_who $P5069, $P5070
    set $P5068, $P5069["Op"]
    unless_null $P5068, fallback161
    nqp_get_sc_object $P5072, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5068, $P5072
  fallback161:
.annotate 'line', 340
    nqp_get_sc_object $P5076, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5075, $P5076, "QAST"
    get_who $P5074, $P5075
    set $P5073, $P5074["BVal"]
    unless_null $P5073, fallback162
    nqp_get_sc_object $P5077, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5073, $P5077
  fallback162:
    find_lex $P5078, "$past"
    $P5079 = $P5073."new"($P5078 :named("value"))
.annotate 'line', 341
    nqp_get_sc_object $P5083, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["WVal"]
    unless_null $P5080, fallback163
    nqp_get_sc_object $P5084, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5080, $P5084
  fallback163:
    $P5085 = $P5080."new"($P101 :named("value"))
    $P5086 = $P5068."new"($P5079, $P5085, "setcodeobj" :named("op"))
    $P5067."push"($P5086)
    find_lex $P5088, "self"
    nqp_decontainerize $P5087, $P5088
    nqp_get_sc_object $P5089, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5090, $P5087, $P5089, "%!code_objects_to_fix_up"
.annotate 'line', 345
    find_lex $P5091, "$past"
    $P5092 = $P5091."cuid"()
    set $S5001, $P5092
    new $P5093, 'ResizablePMCArray'
    push $P5093, $P101
    set $P5090[$S5001], $P5093
    find_lex $P5095, "self"
    nqp_decontainerize $P5094, $P5095
    nqp_get_sc_object $P5096, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5097, $P5094, $P5096, "%!code_object_types"
.annotate 'line', 346
    find_lex $P5098, "$past"
    $P5099 = $P5098."cuid"()
    set $S5002, $P5099
    find_lex $P5100, "$code_type"
    set $P5097[$S5002], $P5100
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_create_mo" :subid("cuid_16_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 368
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("name") :optional 
    .param int haz_param_2 :opt_flag 
    .param pmc _lex_param_3 :named("repr") :optional 
    .param int haz_param_3 :opt_flag 
    if haz_param_2, default176
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_2, $P5007
  default176:
    if haz_param_3, default177
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_3, $P5008
  default177:
    .lex "%args", $P101 
    .lex "$mo", $P102 
    .lex "self", _lex_param_0 
    .lex "$how", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$repr", _lex_param_3 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_170
    .lex "RETURN", $P103
    defined $I5001, _lex_param_2
    unless $I5001 goto if34_end173 
.annotate 'line', 371
    set $P101["name"], _lex_param_2
  if34_end173:
    defined $I5002, _lex_param_3
    unless $I5002 goto if35_end175 
.annotate 'line', 372
    set $P101["repr"], _lex_param_3
  if35_end175:
.annotate 'line', 373
    $P5003 = _lex_param_1."new_type"($P101 :flat :named)
    set $P102, $P5003
.annotate 'line', 374
    nqp_decontainerize $P5004, _lex_param_0
    $P5004."add_object"($P102)
    find_lex $P5005, "RETURN"
    $P5006 = $P5005($P102)
    goto lexotic_171
  lexotic_170:
    .get_results ($P5006)
  lexotic_171:
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_attribute" :subid("cuid_17_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 385
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "$attr", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_attr", _lex_param_2 
    .lex "%lit_args", _lex_param_3 
    .lex "%obj_args", _lex_param_4 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 386
    $P5002 = _lex_param_2."new"(_lex_param_3 :flat :named, _lex_param_4 :flat :named)
    set $P101, $P5002
.annotate 'line', 387
    get_how $P5003, _lex_param_1
    $P5004 = $P5003."add_attribute"(_lex_param_1, $P101)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_method" :subid("cuid_18_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 391
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$name", _lex_param_3 
    .lex "$code", _lex_param_4 
.annotate 'line', 392
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3, _lex_param_4)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "set_routine_signature" :subid("cuid_19_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 396
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$sig_type", $P101 
    .lex "$code_type", $P102 
    .lex "$sig_obj", $P103 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$types", _lex_param_2 
    .lex "$definednesses", _lex_param_3 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P103, $P5003
.annotate 'line', 397
    nqp_decontainerize $P5004, _lex_param_0
    new $P5005, 'ResizablePMCArray'
    box $P5006, "NQPSignature"
    push $P5005, $P5006
    $P5007 = $P5004."find_sym"($P5005)
    set $P101, $P5007
.annotate 'line', 398
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    box $P5010, "NQPRoutine"
    push $P5009, $P5010
    $P5011 = $P5008."find_sym"($P5009)
    set $P102, $P5011
    repr_instance_of $P5012, $P101
    set $P103, $P5012
    setattribute $P103, $P101, "$!types", _lex_param_2
    setattribute $P103, $P101, "$!definednesses", _lex_param_3
    setattribute _lex_param_1, $P102, "$!signature", $P103
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_set_body_block" :subid("cuid_20_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 406
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$body_code_obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$body_past", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 408
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = _lex_param_2."name"()
    $P5004 = $P5002."create_code"(_lex_param_2, $P5003, 0)
    set $P101, $P5004
.annotate 'line', 411
    get_how $P5005, _lex_param_1
    $P5006 = $P5005."set_body_block"(_lex_param_1, $P101)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parent_or_role" :subid("cuid_21_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 415
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$to_add", _lex_param_3 
.annotate 'line', 416
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parrot_vtable_handler_mapping" :subid("cuid_22_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 419
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$att_name", _lex_param_3 
.annotate 'line', 420
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."add_parrot_vtable_handler_mapping"(_lex_param_1, _lex_param_2, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_compose" :subid("cuid_23_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 424
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
.annotate 'line', 425
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."compose"(_lex_param_1)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "run_begin_block" :subid("cuid_24_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 429
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5040 = 'cuid_383_1359292300.247' 
    capture_lex $P5040 
    .lex "$wrapper", $P101 
    .lex "%seen", $P102 
    .lex "$i", $P103 
    .lex "$code", $P104 
    .lex "$old_global", $P105 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P105, $P5005
    root_new $P106, ['parrot';'Continuation']
    set_label $P106, lexotic_178
    .lex "RETURN", $P106
.annotate 'line', 431
    nqp_get_sc_object $P5009, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback180
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5010
  fallback180:
.annotate 'line', 432
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Stmts"]
    unless_null $P5011, fallback181
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5015
  fallback181:
    $P5016 = $P5011."new"()
    $P5017 = $P5006."new"($P5016, _lex_param_1)
    set $P101, $P5017
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    set $N5001, $P5020
    box $P5021, $N5001
    set $P103, $P5021
  while36_test182:
    set $N5002, $P103
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5025, $I5001
    set $P5024, $P5025
    unless $I5001 goto while36_done186 
  while36_redo184:
    .const 'Sub' $P5022 = 'cuid_383_1359292300.247' 
    capture_lex $P5022
    $P5023 = $P5022()
    set $P5024, $P5023
    goto while36_test182 
  while36_done186:
.annotate 'line', 455
    nqp_decontainerize $P5026, _lex_param_0
    $P5027 = $P5026."create_code"($P101, "BEGIN block", 0)
    set $P104, $P5027
    new $P5029, 'ResizablePMCArray'
    get_hll_global $P5028, $P5029, "GLOBAL"
    set $P105, $P5028
    new $P5030, 'ResizablePMCArray'
    find_dynamic_lex $P5031, "$*GLOBALish"
    unless_null $P5031, fallback203
    nqp_get_sc_object $P5034, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$GLOBALish"]
    unless_null $P5032, fallback204
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5032, $P5035
  fallback204:
    unless_null $P5032, vivi_41205
    die "Contextual $*GLOBALish not found"
    box $P5036, "Contextual $*GLOBALish not found"
    set $P5032, $P5036
  vivi_41205:
    set $P5031, $P5032
  fallback203:
    set_hll_global $P5030, "GLOBAL", $P5031
.annotate 'line', 458
    $P104()
    new $P5037, 'ResizablePMCArray'
    set_hll_global $P5037, "GLOBAL", $P105
.annotate 'line', 463
    $P101."shift"()
    find_lex $P5038, "RETURN"
    $P5039 = $P5038($P101)
    goto lexotic_179
  lexotic_178:
    .get_results ($P5039)
  lexotic_179:
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_383_1359292300.247") :anon :lex :outer("cuid_24_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 437
    .const 'Sub' $P5017 = 'cuid_382_1359292300.247' 
    capture_lex $P5017 
    .lex "%symbols", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 439
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback187
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5010
  fallback187:
    $P5011 = $P5004."symtable"()
    set $P101, $P5011
    set $P5012, $P101
    iter $P5014, $P101
  for_next200:
    unless $P5014, for_done202
    shift $P5016, $P5014
  for_redo201:
    .const 'Sub' $P5015 = 'cuid_382_1359292300.247' 
    capture_lex $P5015
    $P5012 = $P5015($P5016)
    goto for_next200
  for_done202:
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_382_1359292300.247") :anon :lex :outer("cuid_383_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 440
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "%seen"
.annotate 'line', 441
    $P5003 = _lex_param_0."key"()
    set $S5001, $P5003
    set $P5001, $P5002[$S5001]
    unless_null $P5001, fallback192
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5004
  fallback192:
    isfalse $I5001, $P5001
    set $I5003, $I5001
    unless $I5001 goto if38_end191 
    $P5005 = _lex_param_0."value"()
    exists $I5002, $P5005["value"]
    set $I5003, $I5002
  if38_end191:
    box $P5038, $I5003
    set $P5037, $P5038
    unless $I5003 goto if37_end189 
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_40199
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 442
.annotate 'line', 443
    find_lex $P5007, "$wrapper"
    set $P5006, $P5007[0]
    unless_null $P5006, fallback193
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5008
  fallback193:
    nqp_get_sc_object $P5012, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback194
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5013
  fallback194:
.annotate 'line', 445
    nqp_get_sc_object $P5017, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Var"]
    unless_null $P5014, fallback195
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5014, $P5018
  fallback195:
    $P5019 = _lex_param_0."key"()
    $P5020 = $P5014."new"($P5019 :named("name"), "lexical" :named("scope"), "var" :named("isdecl"))
.annotate 'line', 446
    nqp_get_sc_object $P5024, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["WVal"]
    unless_null $P5021, fallback196
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5021, $P5025
  fallback196:
    $P5027 = _lex_param_0."value"()
    set $P5026, $P5027["value"]
    unless_null $P5026, fallback197
    nqp_get_sc_object $P5028, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5026, $P5028
  fallback197:
    $P5029 = $P5021."new"($P5026 :named("value"))
    $P5030 = $P5009."new"($P5020, $P5029, "bind" :named("op"))
    $P5031 = $P5006."push"($P5030)
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_39198
  catch_handler_40199:
    .get_results ($P5032) 
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10001
    goto skip_handler_39198
  skip_handler_39198:
    find_lex $P5034, "%seen"
.annotate 'line', 449
    $P5035 = _lex_param_0."key"()
    set $S5002, $P5035
    box $P5036, 1
    set $P5034[$S5002], $P5036
    set $P5037, $P5036
  if37_end189:
    .return ($P5037) 
.end
.HLL "nqp"
.namespace []
.sub "libs" :subid("cuid_25_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 468
    .param pmc _lex_param_0 
    .const 'Sub' $P5050 = 'cuid_384_1359292300.247' 
    capture_lex $P5050 
    .lex "@loadlibs", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    box $P5003, "nqp_group"
    push $P5002, $P5003
    box $P5004, "nqp_ops"
    push $P5002, $P5004
    box $P5005, "nqp_bigint_ops"
    push $P5002, $P5005
    box $P5006, "trans_ops"
    push $P5002, $P5006
    box $P5007, "io_ops"
    push $P5002, $P5007
    set $P101, $P5002
    find_dynamic_lex $P5010, "%*COMPILING"
    unless_null $P5010, fallback208
    nqp_get_sc_object $P5013, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["%COMPILING"]
    unless_null $P5011, fallback209
    nqp_get_sc_object $P5015, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5014, $P5015
    new $P5016, 'Hash'
    set $P5014["%COMPILING"], $P5016
    set $P5011, $P5016
  fallback209:
    unless_null $P5011, vivi_43210
    die "Contextual %*COMPILING not found"
    box $P5017, "Contextual %*COMPILING not found"
    set $P5011, $P5017
  vivi_43210:
    set $P5010, $P5011
  fallback208:
    set $P5009, $P5010["%?OPTIONS"]
    unless_null $P5009, fallback211
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5018
  fallback211:
    set $P5008, $P5009["vmlibs"]
    unless_null $P5008, fallback212
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5019
  fallback212:
    unless $P5008 goto if42_end207 
.annotate 'line', 471
    find_dynamic_lex $P5026, "%*COMPILING"
    unless_null $P5026, fallback213
    nqp_get_sc_object $P5029, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["%COMPILING"]
    unless_null $P5027, fallback214
    nqp_get_sc_object $P5031, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%COMPILING"], $P5032
    set $P5027, $P5032
  fallback214:
    unless_null $P5027, vivi_44215
    die "Contextual %*COMPILING not found"
    box $P5033, "Contextual %*COMPILING not found"
    set $P5027, $P5033
  vivi_44215:
    set $P5026, $P5027
  fallback213:
    set $P5025, $P5026["%?OPTIONS"]
    unless_null $P5025, fallback216
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5025, $P5034
  fallback216:
    set $P5024, $P5025["vmlibs"]
    unless_null $P5024, fallback217
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5024, $P5035
  fallback217:
    set $S5001, $P5024
    split $P5023, ",", $S5001
    set $P5020, $P5023
    iter $P5022, $P5023
  for_next218:
    unless $P5022, for_done220
    shift $P5037, $P5022
  for_redo219:
    .const 'Sub' $P5036 = 'cuid_384_1359292300.247' 
    capture_lex $P5036
    $P5020 = $P5036($P5037)
    goto for_next218
  for_done220:
  if42_end207:
.annotate 'line', 476
    nqp_get_sc_object $P5041, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["VM"]
    unless_null $P5038, fallback221
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5038, $P5042
  fallback221:
.annotate 'line', 478
    nqp_get_sc_object $P5046, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Op"]
    unless_null $P5043, fallback222
    nqp_get_sc_object $P5047, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5043, $P5047
  fallback222:
    $P5048 = $P5043."new"("null" :named("op"))
    $P5049 = $P5038."new"($P101 :named("loadlibs"), $P5048 :named("jvm"))
    .return ($P5049) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_384_1359292300.247") :anon :lex :outer("cuid_25_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 472
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 473
    find_lex $P5001, "@loadlibs"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "add_initializations" :subid("cuid_26_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 482
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 483
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5005, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["VM"]
    unless_null $P5002, fallback223
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5006
  fallback223:
.annotate 'line', 484
    nqp_get_sc_object $P5010, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback224
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5011
  fallback224:
.annotate 'line', 485
    nqp_get_sc_object $P5015, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["VM"]
    unless_null $P5012, fallback225
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5012, $P5016
  fallback225:
    $P5017 = $P5012."new"("nqp_dynop_setup v" :named("pirop"))
.annotate 'line', 486
    nqp_get_sc_object $P5021, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["VM"]
    unless_null $P5018, fallback226
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5018, $P5022
  fallback226:
    $P5023 = $P5018."new"("nqp_bigint_setup v" :named("pirop"))
.annotate 'line', 487
    nqp_get_sc_object $P5027, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback227
    nqp_get_sc_object $P5028, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5024, $P5028
  fallback227:
.annotate 'line', 489
    nqp_get_sc_object $P5032, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["VM"]
    unless_null $P5029, fallback228
    nqp_get_sc_object $P5033, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5029, $P5033
  fallback228:
    $P5034 = $P5029."new"("getinterp P" :named("pirop"))
.annotate 'line', 490
    nqp_get_sc_object $P5038, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["VM"]
    unless_null $P5035, fallback229
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5035, $P5039
  fallback229:
    nqp_get_sc_object $P5043, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["SVal"]
    unless_null $P5040, fallback230
    nqp_get_sc_object $P5044, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5040, $P5044
  fallback230:
    $P5045 = $P5040."new"("LexPad" :named("value"))
    $P5046 = $P5035."new"($P5045, "get_class Ps" :named("pirop"))
.annotate 'line', 491
    nqp_get_sc_object $P5050, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["VM"]
    unless_null $P5047, fallback231
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5047, $P5051
  fallback231:
    nqp_get_sc_object $P5055, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["SVal"]
    unless_null $P5052, fallback232
    nqp_get_sc_object $P5056, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5052, $P5056
  fallback232:
    $P5057 = $P5052."new"("NQPLexPad" :named("value"))
    $P5058 = $P5047."new"($P5057, "get_class Ps" :named("pirop"))
    $P5059 = $P5024."new"($P5034, $P5046, $P5058, "callmethod" :named("op"), "hll_map" :named("name"))
    $P5060 = $P5007."new"($P5017, $P5023, $P5059)
.annotate 'line', 493
    nqp_get_sc_object $P5064, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["Op"]
    unless_null $P5061, fallback233
    nqp_get_sc_object $P5065, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5061, $P5065
  fallback233:
    $P5066 = $P5061."new"("null" :named("op"))
    $P5067 = $P5002."new"($P5060 :named("parrot"), $P5066 :named("jvm"))
    $P5068 = $P5001."add_load_dependency_task"($P5067 :named("deserialize_past"))
    .return ($P5068) 
.end
.HLL "nqp"
.namespace []
.sub "is_lexical" :subid("cuid_27_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 499
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 500
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "lexical")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_package" :subid("cuid_28_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 505
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 506
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "package")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_scope" :subid("cuid_29_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 511
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P5011 = 'cuid_385_1359292300.247' 
    capture_lex $P5011 
    .lex "$i", $P101 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
    .lex "$wanted_scope", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_234
    .lex "RETURN", $P102
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    set $N5001, $P5004
    box $P5005, $N5001
    set $P101, $P5005
  while45_test236:
    set $N5002, $P101
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5009, $I5001
    set $P5008, $P5009
    unless $I5001 goto while45_done240 
  while45_redo238:
    .const 'Sub' $P5006 = 'cuid_385_1359292300.247' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5008, $P5007
    goto while45_test236 
  while45_done240:
    box $P5010, 0
    goto lexotic_235
  lexotic_234:
    .get_results ($P5010)
  lexotic_235:
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_385_1359292300.247") :anon :lex :outer("cuid_29_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 513
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 515
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback241
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5010
  fallback241:
    find_lex $P5011, "$name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5019, $N5004
    set $P5018, $P5019
    unless $N5004 goto if46_end243 
.annotate 'line', 516
    set $P5014, $P101["scope"]
    unless_null $P5014, fallback244
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5014, $P5015
  fallback244:
    set $S5001, $P5014
    find_lex $P5016, "$wanted_scope"
    set $S5002, $P5016
    iseq $I5002, $S5001, $S5002
    find_lex $P5013, "RETURN"
    $P5017 = $P5013($I5002)
    set $P5018, $P5017
  if46_end243:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "known_sym" :subid("cuid_30_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 524
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$known", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "@name", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    box $P5002, 0
    set $P101, $P5002
    new $P5005, 'ExceptionHandler'
    set_label $P5005, catch_handler_48246
    $P5005.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5005
.annotate 'line', 526
.annotate 'line', 527
    nqp_decontainerize $P5003, _lex_param_0
    $P5003."find_sym"(_lex_param_2)
    box $P5004, 1
    set $P101, $P5004
    set $P5006, $P101
    pop_eh 
    goto skip_handler_47245
  catch_handler_48246:
    .get_results ($P5005) 
    set $I10001, 1
    set $P5005["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    finalize $P5005
    pop_upto_eh $P5005
    pop_eh 
    set $P5006, $P10001
    goto skip_handler_47245
  skip_handler_47245:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "find_sym" :subid("cuid_31_1359292300.247") :anon :lex :outer("cuid_374_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 536
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5018 = 'cuid_387_1359292300.247' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_389_1359292300.247' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_390_1359292300.247' 
    capture_lex $P5018 
    .lex "$result", $P101 
    .lex "self", _lex_param_0 
    .lex "@name", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_247
    .lex "RETURN", $P102
    set $N5001, _lex_param_1
    if $N5001 goto unless49_end250 
.annotate 'line', 538
    box $P5002, "Cannot look up empty name"
    die $P5002
  unless49_end250:
    set $N5002, _lex_param_1
    set $N5003, 1
    iseq $I5001, $N5002, $N5003
    unless $I5001 goto if50_end252 
    .const 'Sub' $P5003 = 'cuid_387_1359292300.247' 
    capture_lex $P5003
    $P5004 = $P5003()
  if50_end252:
    find_dynamic_lex $P5005, "$*GLOBALish"
    unless_null $P5005, fallback265
    nqp_get_sc_object $P5008, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$GLOBALish"]
    unless_null $P5006, fallback266
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5009
  fallback266:
    unless_null $P5006, vivi_54267
    die "Contextual $*GLOBALish not found"
    box $P5010, "Contextual $*GLOBALish not found"
    set $P5006, $P5010
  vivi_54267:
    set $P5005, $P5006
  fallback265:
    set $P101, $P5005
    set $N5004, _lex_param_1
    set $N5005, 2
    isge $I5002, $N5004, $N5005
    unless $I5002 goto if55_end269 
    .const 'Sub' $P5011 = 'cuid_389_1359292300.247' 
    capture_lex $P5011
    $P5012 = $P5011()
  if55_end269:
    set $P5013, _lex_param_1
    iter $P5015, _lex_param_1
  for_next285:
    unless $P5015, for_done287
    shift $P5017, $P5015
  for_redo286:
    .const 'Sub' $P5016 = 'cuid_390_1359292300.247' 
    capture_lex $P5016
    $P5013 = $P5016($P5017)
    goto for_next285
  for_done287:
    goto lexotic_248
  lexotic_247:
    .get_results ($P101)
  lexotic_248:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_387_1359292300.247") :anon :lex :outer("cuid_31_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 542
    .const 'Sub' $P5015 = 'cuid_386_1359292300.247' 
    capture_lex $P5015 
    .lex "$final_name", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback253
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5005
  fallback253:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while51_test254:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while51_done258 
  while51_redo256:
    .const 'Sub' $P5011 = 'cuid_386_1359292300.247' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while51_test254 
  while51_done258:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_386_1359292300.247") :anon :lex :outer("cuid_387_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 545
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 547
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback259
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5010
  fallback259:
    find_lex $P5011, "$final_name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5021, $N5004
    set $P5020, $P5021
    unless $N5004 goto if52_end261 
.annotate 'line', 548
    exists $I5002, $P101["value"]
    unless $I5002 goto if53_else262 
.annotate 'line', 549
    set $P5014, $P101["value"]
    unless_null $P5014, fallback264
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5014, $P5015
  fallback264:
    find_lex $P5013, "RETURN"
    $P5016 = $P5013($P5014)
    set $P5019, $P5016
    goto if53_end263
  if53_else262:
.annotate 'line', 552
    find_lex $P5017, "$final_name"
    set $S5002, $P5017
    concat $S5001, "No compile-time value for ", $S5002
    box $P5018, $S5001
    die $P5018
    set $P5019, $P5018
  if53_end263:
    set $P5020, $P5019
  if52_end261:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_389_1359292300.247") :anon :lex :outer("cuid_31_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 563
    .const 'Sub' $P5015 = 'cuid_388_1359292300.247' 
    capture_lex $P5015 
    .lex "$first", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback270
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5005
  fallback270:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while56_test271:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while56_done275 
  while56_redo273:
    .const 'Sub' $P5011 = 'cuid_388_1359292300.247' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while56_test271 
  while56_done275:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_388_1359292300.247") :anon :lex :outer("cuid_389_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 566
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 568
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback276
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5010
  fallback276:
    find_lex $P5011, "$first"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5021, $N5004
    set $P5020, $P5021
    unless $N5004 goto if57_end278 
.annotate 'line', 569
    exists $I5002, $P101["value"]
    unless $I5002 goto if58_else279 
.annotate 'line', 570
    set $P5013, $P101["value"]
    unless_null $P5013, fallback281
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5013, $P5014
  fallback281:
    store_lex "$result", $P5013
.annotate 'line', 572
    find_lex $P5015, "@name"
    $P5015."shift"()
    box $P5016, 0
    store_lex "$i", $P5016
    set $P5019, $P5016
    goto if58_end280
  if58_else279:
.annotate 'line', 575
    find_lex $P5017, "$first"
    set $S5002, $P5017
    concat $S5001, "No compile-time value for ", $S5002
    box $P5018, $S5001
    die $P5018
    set $P5019, $P5018
  if58_end280:
    set $P5020, $P5019
  if57_end278:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_390_1359292300.247") :anon :lex :outer("cuid_31_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 583
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$result"
    get_who $P5001, $P5002
    set $S5001, _lex_param_0
    exists $I5001, $P5001[$S5001]
    unless $I5001 goto if59_else282 
.annotate 'line', 584
    find_lex $P5005, "$result"
    get_who $P5004, $P5005
    set $S5002, _lex_param_0
    set $P5003, $P5004[$S5002]
    unless_null $P5003, fallback284
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5006
  fallback284:
    store_lex "$result", $P5003
    set $P5009, $P5003
    goto if59_end283
  if59_else282:
.annotate 'line', 587
    find_lex $P5007, "@name"
    join $S5004, "::", $P5007
    concat $S5003, "Could not locate compile-time value for symbol ", $S5004
    box $P5008, $S5003
    die $P5008
    set $P5009, $P5008
  if59_end283:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_391_1359292300.247") :anon :lex :outer("cuid_371_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 598
    .const 'Sub' $P5259 = 'cuid_32_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_33_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_34_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_35_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_36_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_37_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_38_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_40_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_42_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_43_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_44_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_46_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_47_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_48_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_49_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_50_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_51_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_52_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_53_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_54_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_55_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_56_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_57_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_58_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_59_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_60_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_61_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_62_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_64_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_65_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_66_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_67_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_68_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_69_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_70_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_71_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_72_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_73_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_74_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_75_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_76_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_77_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_78_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_79_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_80_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_81_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_82_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_83_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_84_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_85_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_86_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_87_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_90_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_91_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_92_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_93_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_94_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_95_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_96_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_97_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_98_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_99_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_100_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_101_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_102_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_103_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_104_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_105_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_106_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_107_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_108_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_109_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_110_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_111_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_112_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_113_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_114_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_115_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_116_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_117_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_118_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_119_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_120_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_121_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_122_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_123_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_124_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_125_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_126_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_128_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_129_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_130_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_131_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_132_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_133_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_134_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_135_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_136_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_137_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_138_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_139_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_140_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_141_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_142_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_143_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_144_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_145_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_146_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_147_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_148_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_149_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_150_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_151_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_152_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_153_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_154_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_155_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_156_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_157_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_158_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_159_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_160_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_161_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_162_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_163_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_164_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_165_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_166_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_167_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_168_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_169_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_170_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_171_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_172_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_173_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_174_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_175_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_176_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_177_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_178_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_179_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_180_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_181_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_182_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_183_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_184_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_185_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_186_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_187_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_188_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_189_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_190_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_191_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_192_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_193_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_194_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_195_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_196_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_197_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_198_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_199_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_200_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_201_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_202_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_203_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_204_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_205_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_206_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_207_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_208_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_209_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_210_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_211_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_212_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_213_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_214_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_215_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_216_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_217_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_218_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_220_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_222_1359292300.247' 
    capture_lex $P5259 
    .const 'Sub' $P5259 = 'cuid_224_1359292300.247' 
    capture_lex $P5259 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
.annotate 'line', 1264
.annotate 'line', 1265
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "NQP"
    get_who $P5002, $P5003
    set $P5001, $P5002["Grammar"]
    unless_null $P5001, fallback288
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback288:
    $P5001."O"(":prec<y=>, :assoc<unary>", "%methodop")
.annotate 'line', 1266
    nqp_get_sc_object $P5009, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5008, $P5009, "NQP"
    get_who $P5007, $P5008
    set $P5006, $P5007["Grammar"]
    unless_null $P5006, fallback289
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5010
  fallback289:
    $P5006."O"(":prec<x=>, :assoc<unary>", "%autoincrement")
.annotate 'line', 1267
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5013, $P5014, "NQP"
    get_who $P5012, $P5013
    set $P5011, $P5012["Grammar"]
    unless_null $P5011, fallback290
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5015
  fallback290:
    $P5011."O"(":prec<w=>, :assoc<left>", "%exponentiation")
.annotate 'line', 1268
    nqp_get_sc_object $P5019, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5018, $P5019, "NQP"
    get_who $P5017, $P5018
    set $P5016, $P5017["Grammar"]
    unless_null $P5016, fallback291
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5016, $P5020
  fallback291:
    $P5016."O"(":prec<v=>, :assoc<unary>", "%symbolic_unary")
.annotate 'line', 1269
    nqp_get_sc_object $P5024, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5023, $P5024, "NQP"
    get_who $P5022, $P5023
    set $P5021, $P5022["Grammar"]
    unless_null $P5021, fallback292
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5021, $P5025
  fallback292:
    $P5021."O"(":prec<u=>, :assoc<left>", "%multiplicative")
.annotate 'line', 1270
    nqp_get_sc_object $P5029, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5028, $P5029, "NQP"
    get_who $P5027, $P5028
    set $P5026, $P5027["Grammar"]
    unless_null $P5026, fallback293
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5026, $P5030
  fallback293:
    $P5026."O"(":prec<t=>, :assoc<left>", "%additive")
.annotate 'line', 1271
    nqp_get_sc_object $P5034, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5033, $P5034, "NQP"
    get_who $P5032, $P5033
    set $P5031, $P5032["Grammar"]
    unless_null $P5031, fallback294
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5031, $P5035
  fallback294:
    $P5031."O"(":prec<r=>, :assoc<left>", "%concatenation")
.annotate 'line', 1272
    nqp_get_sc_object $P5039, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5038, $P5039, "NQP"
    get_who $P5037, $P5038
    set $P5036, $P5037["Grammar"]
    unless_null $P5036, fallback295
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5036, $P5040
  fallback295:
    $P5036."O"(":prec<m=>, :assoc<left>", "%relational")
.annotate 'line', 1273
    nqp_get_sc_object $P5044, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5043, $P5044, "NQP"
    get_who $P5042, $P5043
    set $P5041, $P5042["Grammar"]
    unless_null $P5041, fallback296
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5041, $P5045
  fallback296:
    $P5041."O"(":prec<l=>, :assoc<left>", "%tight_and")
.annotate 'line', 1274
    nqp_get_sc_object $P5049, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5048, $P5049, "NQP"
    get_who $P5047, $P5048
    set $P5046, $P5047["Grammar"]
    unless_null $P5046, fallback297
    nqp_get_sc_object $P5050, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5046, $P5050
  fallback297:
    $P5046."O"(":prec<k=>, :assoc<left>", "%tight_or")
.annotate 'line', 1275
    nqp_get_sc_object $P5054, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5053, $P5054, "NQP"
    get_who $P5052, $P5053
    set $P5051, $P5052["Grammar"]
    unless_null $P5051, fallback298
    nqp_get_sc_object $P5055, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5051, $P5055
  fallback298:
    $P5051."O"(":prec<j=>, :assoc<right>", "%conditional")
.annotate 'line', 1276
    nqp_get_sc_object $P5059, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5058, $P5059, "NQP"
    get_who $P5057, $P5058
    set $P5056, $P5057["Grammar"]
    unless_null $P5056, fallback299
    nqp_get_sc_object $P5060, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5056, $P5060
  fallback299:
    $P5056."O"(":prec<i=>, :assoc<right>", "%assignment")
.annotate 'line', 1277
    nqp_get_sc_object $P5064, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5063, $P5064, "NQP"
    get_who $P5062, $P5063
    set $P5061, $P5062["Grammar"]
    unless_null $P5061, fallback300
    nqp_get_sc_object $P5065, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5061, $P5065
  fallback300:
    $P5061."O"(":prec<g=>, :assoc<list>, :nextterm<nulltermish>", "%comma")
.annotate 'line', 1278
    nqp_get_sc_object $P5069, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5068, $P5069, "NQP"
    get_who $P5067, $P5068
    set $P5066, $P5067["Grammar"]
    unless_null $P5066, fallback301
    nqp_get_sc_object $P5070, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5066, $P5070
  fallback301:
    $P5066."O"(":prec<f=>, :assoc<list>", "%list_infix")
.annotate 'line', 1279
    nqp_get_sc_object $P5074, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5073, $P5074, "NQP"
    get_who $P5072, $P5073
    set $P5071, $P5072["Grammar"]
    unless_null $P5071, fallback302
    nqp_get_sc_object $P5075, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5071, $P5075
  fallback302:
    $P5071."O"(":prec<e=>, :assoc<unary>", "%list_prefix")
.annotate 'line', 598
    .const 'Sub' $P5076 = 'cuid_32_1359292300.247' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_33_1359292300.247' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_34_1359292300.247' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_35_1359292300.247' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_36_1359292300.247' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_37_1359292300.247' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_38_1359292300.247' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_40_1359292300.247' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_42_1359292300.247' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_43_1359292300.247' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_44_1359292300.247' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_46_1359292300.247' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_47_1359292300.247' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_48_1359292300.247' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_49_1359292300.247' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_50_1359292300.247' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_51_1359292300.247' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_52_1359292300.247' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_53_1359292300.247' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_54_1359292300.247' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_55_1359292300.247' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_56_1359292300.247' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_57_1359292300.247' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_58_1359292300.247' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_59_1359292300.247' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_60_1359292300.247' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_61_1359292300.247' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_62_1359292300.247' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_64_1359292300.247' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_65_1359292300.247' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_66_1359292300.247' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_67_1359292300.247' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_68_1359292300.247' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_69_1359292300.247' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_70_1359292300.247' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_71_1359292300.247' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_72_1359292300.247' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_73_1359292300.247' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_74_1359292300.247' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_75_1359292300.247' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_76_1359292300.247' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_77_1359292300.247' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_78_1359292300.247' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_79_1359292300.247' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_80_1359292300.247' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_81_1359292300.247' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_82_1359292300.247' 
    capture_lex $P5122
    .const 'Sub' $P5123 = 'cuid_83_1359292300.247' 
    capture_lex $P5123
    .const 'Sub' $P5124 = 'cuid_84_1359292300.247' 
    capture_lex $P5124
    .const 'Sub' $P5125 = 'cuid_85_1359292300.247' 
    capture_lex $P5125
    .const 'Sub' $P5126 = 'cuid_86_1359292300.247' 
    capture_lex $P5126
    .const 'Sub' $P5127 = 'cuid_87_1359292300.247' 
    capture_lex $P5127
    .const 'Sub' $P5128 = 'cuid_90_1359292300.247' 
    capture_lex $P5128
    .const 'Sub' $P5129 = 'cuid_91_1359292300.247' 
    capture_lex $P5129
    .const 'Sub' $P5130 = 'cuid_92_1359292300.247' 
    capture_lex $P5130
    .const 'Sub' $P5131 = 'cuid_93_1359292300.247' 
    capture_lex $P5131
    .const 'Sub' $P5132 = 'cuid_94_1359292300.247' 
    capture_lex $P5132
    .const 'Sub' $P5133 = 'cuid_95_1359292300.247' 
    capture_lex $P5133
    .const 'Sub' $P5134 = 'cuid_96_1359292300.247' 
    capture_lex $P5134
    .const 'Sub' $P5135 = 'cuid_97_1359292300.247' 
    capture_lex $P5135
    .const 'Sub' $P5136 = 'cuid_98_1359292300.247' 
    capture_lex $P5136
    .const 'Sub' $P5137 = 'cuid_99_1359292300.247' 
    capture_lex $P5137
    .const 'Sub' $P5138 = 'cuid_100_1359292300.247' 
    capture_lex $P5138
    .const 'Sub' $P5139 = 'cuid_101_1359292300.247' 
    capture_lex $P5139
    .const 'Sub' $P5140 = 'cuid_102_1359292300.247' 
    capture_lex $P5140
    .const 'Sub' $P5141 = 'cuid_103_1359292300.247' 
    capture_lex $P5141
    .const 'Sub' $P5142 = 'cuid_104_1359292300.247' 
    capture_lex $P5142
    .const 'Sub' $P5143 = 'cuid_105_1359292300.247' 
    capture_lex $P5143
    .const 'Sub' $P5144 = 'cuid_106_1359292300.247' 
    capture_lex $P5144
    .const 'Sub' $P5145 = 'cuid_107_1359292300.247' 
    capture_lex $P5145
    .const 'Sub' $P5146 = 'cuid_108_1359292300.247' 
    capture_lex $P5146
    .const 'Sub' $P5147 = 'cuid_109_1359292300.247' 
    capture_lex $P5147
    .const 'Sub' $P5148 = 'cuid_110_1359292300.247' 
    capture_lex $P5148
    .const 'Sub' $P5149 = 'cuid_111_1359292300.247' 
    capture_lex $P5149
    .const 'Sub' $P5150 = 'cuid_112_1359292300.247' 
    capture_lex $P5150
    .const 'Sub' $P5151 = 'cuid_113_1359292300.247' 
    capture_lex $P5151
    .const 'Sub' $P5152 = 'cuid_114_1359292300.247' 
    capture_lex $P5152
    .const 'Sub' $P5153 = 'cuid_115_1359292300.247' 
    capture_lex $P5153
    .const 'Sub' $P5154 = 'cuid_116_1359292300.247' 
    capture_lex $P5154
    .const 'Sub' $P5155 = 'cuid_117_1359292300.247' 
    capture_lex $P5155
    .const 'Sub' $P5156 = 'cuid_118_1359292300.247' 
    capture_lex $P5156
    .const 'Sub' $P5157 = 'cuid_119_1359292300.247' 
    capture_lex $P5157
    .const 'Sub' $P5158 = 'cuid_120_1359292300.247' 
    capture_lex $P5158
    .const 'Sub' $P5159 = 'cuid_121_1359292300.247' 
    capture_lex $P5159
    .const 'Sub' $P5160 = 'cuid_122_1359292300.247' 
    capture_lex $P5160
    .const 'Sub' $P5161 = 'cuid_123_1359292300.247' 
    capture_lex $P5161
    .const 'Sub' $P5162 = 'cuid_124_1359292300.247' 
    capture_lex $P5162
    .const 'Sub' $P5163 = 'cuid_125_1359292300.247' 
    capture_lex $P5163
    .const 'Sub' $P5164 = 'cuid_126_1359292300.247' 
    capture_lex $P5164
    .const 'Sub' $P5165 = 'cuid_128_1359292300.247' 
    capture_lex $P5165
    .const 'Sub' $P5166 = 'cuid_129_1359292300.247' 
    capture_lex $P5166
    .const 'Sub' $P5167 = 'cuid_130_1359292300.247' 
    capture_lex $P5167
    .const 'Sub' $P5168 = 'cuid_131_1359292300.247' 
    capture_lex $P5168
    .const 'Sub' $P5169 = 'cuid_132_1359292300.247' 
    capture_lex $P5169
    .const 'Sub' $P5170 = 'cuid_133_1359292300.247' 
    capture_lex $P5170
    .const 'Sub' $P5171 = 'cuid_134_1359292300.247' 
    capture_lex $P5171
    .const 'Sub' $P5172 = 'cuid_135_1359292300.247' 
    capture_lex $P5172
    .const 'Sub' $P5173 = 'cuid_136_1359292300.247' 
    capture_lex $P5173
    .const 'Sub' $P5174 = 'cuid_137_1359292300.247' 
    capture_lex $P5174
    .const 'Sub' $P5175 = 'cuid_138_1359292300.247' 
    capture_lex $P5175
    .const 'Sub' $P5176 = 'cuid_139_1359292300.247' 
    capture_lex $P5176
    .const 'Sub' $P5177 = 'cuid_140_1359292300.247' 
    capture_lex $P5177
    .const 'Sub' $P5178 = 'cuid_141_1359292300.247' 
    capture_lex $P5178
    .const 'Sub' $P5179 = 'cuid_142_1359292300.247' 
    capture_lex $P5179
    .const 'Sub' $P5180 = 'cuid_143_1359292300.247' 
    capture_lex $P5180
    .const 'Sub' $P5181 = 'cuid_144_1359292300.247' 
    capture_lex $P5181
    .const 'Sub' $P5182 = 'cuid_145_1359292300.247' 
    capture_lex $P5182
    .const 'Sub' $P5183 = 'cuid_146_1359292300.247' 
    capture_lex $P5183
    .const 'Sub' $P5184 = 'cuid_147_1359292300.247' 
    capture_lex $P5184
    .const 'Sub' $P5185 = 'cuid_148_1359292300.247' 
    capture_lex $P5185
    .const 'Sub' $P5186 = 'cuid_149_1359292300.247' 
    capture_lex $P5186
    .const 'Sub' $P5187 = 'cuid_150_1359292300.247' 
    capture_lex $P5187
    .const 'Sub' $P5188 = 'cuid_151_1359292300.247' 
    capture_lex $P5188
    .const 'Sub' $P5189 = 'cuid_152_1359292300.247' 
    capture_lex $P5189
    .const 'Sub' $P5190 = 'cuid_153_1359292300.247' 
    capture_lex $P5190
    .const 'Sub' $P5191 = 'cuid_154_1359292300.247' 
    capture_lex $P5191
    .const 'Sub' $P5192 = 'cuid_155_1359292300.247' 
    capture_lex $P5192
    .const 'Sub' $P5193 = 'cuid_156_1359292300.247' 
    capture_lex $P5193
    .const 'Sub' $P5194 = 'cuid_157_1359292300.247' 
    capture_lex $P5194
    .const 'Sub' $P5195 = 'cuid_158_1359292300.247' 
    capture_lex $P5195
    .const 'Sub' $P5196 = 'cuid_159_1359292300.247' 
    capture_lex $P5196
    .const 'Sub' $P5197 = 'cuid_160_1359292300.247' 
    capture_lex $P5197
    .const 'Sub' $P5198 = 'cuid_161_1359292300.247' 
    capture_lex $P5198
    .const 'Sub' $P5199 = 'cuid_162_1359292300.247' 
    capture_lex $P5199
    .const 'Sub' $P5200 = 'cuid_163_1359292300.247' 
    capture_lex $P5200
    .const 'Sub' $P5201 = 'cuid_164_1359292300.247' 
    capture_lex $P5201
    .const 'Sub' $P5202 = 'cuid_165_1359292300.247' 
    capture_lex $P5202
    .const 'Sub' $P5203 = 'cuid_166_1359292300.247' 
    capture_lex $P5203
    .const 'Sub' $P5204 = 'cuid_167_1359292300.247' 
    capture_lex $P5204
    .const 'Sub' $P5205 = 'cuid_168_1359292300.247' 
    capture_lex $P5205
    .const 'Sub' $P5206 = 'cuid_169_1359292300.247' 
    capture_lex $P5206
    .const 'Sub' $P5207 = 'cuid_170_1359292300.247' 
    capture_lex $P5207
    .const 'Sub' $P5208 = 'cuid_171_1359292300.247' 
    capture_lex $P5208
    .const 'Sub' $P5209 = 'cuid_172_1359292300.247' 
    capture_lex $P5209
    .const 'Sub' $P5210 = 'cuid_173_1359292300.247' 
    capture_lex $P5210
    .const 'Sub' $P5211 = 'cuid_174_1359292300.247' 
    capture_lex $P5211
    .const 'Sub' $P5212 = 'cuid_175_1359292300.247' 
    capture_lex $P5212
    .const 'Sub' $P5213 = 'cuid_176_1359292300.247' 
    capture_lex $P5213
    .const 'Sub' $P5214 = 'cuid_177_1359292300.247' 
    capture_lex $P5214
    .const 'Sub' $P5215 = 'cuid_178_1359292300.247' 
    capture_lex $P5215
    .const 'Sub' $P5216 = 'cuid_179_1359292300.247' 
    capture_lex $P5216
    .const 'Sub' $P5217 = 'cuid_180_1359292300.247' 
    capture_lex $P5217
    .const 'Sub' $P5218 = 'cuid_181_1359292300.247' 
    capture_lex $P5218
    .const 'Sub' $P5219 = 'cuid_182_1359292300.247' 
    capture_lex $P5219
    .const 'Sub' $P5220 = 'cuid_183_1359292300.247' 
    capture_lex $P5220
    .const 'Sub' $P5221 = 'cuid_184_1359292300.247' 
    capture_lex $P5221
    .const 'Sub' $P5222 = 'cuid_185_1359292300.247' 
    capture_lex $P5222
    .const 'Sub' $P5223 = 'cuid_186_1359292300.247' 
    capture_lex $P5223
    .const 'Sub' $P5224 = 'cuid_187_1359292300.247' 
    capture_lex $P5224
    .const 'Sub' $P5225 = 'cuid_188_1359292300.247' 
    capture_lex $P5225
    .const 'Sub' $P5226 = 'cuid_189_1359292300.247' 
    capture_lex $P5226
    .const 'Sub' $P5227 = 'cuid_190_1359292300.247' 
    capture_lex $P5227
    .const 'Sub' $P5228 = 'cuid_191_1359292300.247' 
    capture_lex $P5228
    .const 'Sub' $P5229 = 'cuid_192_1359292300.247' 
    capture_lex $P5229
    .const 'Sub' $P5230 = 'cuid_193_1359292300.247' 
    capture_lex $P5230
    .const 'Sub' $P5231 = 'cuid_194_1359292300.247' 
    capture_lex $P5231
    .const 'Sub' $P5232 = 'cuid_195_1359292300.247' 
    capture_lex $P5232
    .const 'Sub' $P5233 = 'cuid_196_1359292300.247' 
    capture_lex $P5233
    .const 'Sub' $P5234 = 'cuid_197_1359292300.247' 
    capture_lex $P5234
    .const 'Sub' $P5235 = 'cuid_198_1359292300.247' 
    capture_lex $P5235
    .const 'Sub' $P5236 = 'cuid_199_1359292300.247' 
    capture_lex $P5236
    .const 'Sub' $P5237 = 'cuid_200_1359292300.247' 
    capture_lex $P5237
    .const 'Sub' $P5238 = 'cuid_201_1359292300.247' 
    capture_lex $P5238
    .const 'Sub' $P5239 = 'cuid_202_1359292300.247' 
    capture_lex $P5239
    .const 'Sub' $P5240 = 'cuid_203_1359292300.247' 
    capture_lex $P5240
    .const 'Sub' $P5241 = 'cuid_204_1359292300.247' 
    capture_lex $P5241
    .const 'Sub' $P5242 = 'cuid_205_1359292300.247' 
    capture_lex $P5242
    .const 'Sub' $P5243 = 'cuid_206_1359292300.247' 
    capture_lex $P5243
    .const 'Sub' $P5244 = 'cuid_207_1359292300.247' 
    capture_lex $P5244
    .const 'Sub' $P5245 = 'cuid_208_1359292300.247' 
    capture_lex $P5245
    .const 'Sub' $P5246 = 'cuid_209_1359292300.247' 
    capture_lex $P5246
    .const 'Sub' $P5247 = 'cuid_210_1359292300.247' 
    capture_lex $P5247
    .const 'Sub' $P5248 = 'cuid_211_1359292300.247' 
    capture_lex $P5248
    .const 'Sub' $P5249 = 'cuid_212_1359292300.247' 
    capture_lex $P5249
    .const 'Sub' $P5250 = 'cuid_213_1359292300.247' 
    capture_lex $P5250
    .const 'Sub' $P5251 = 'cuid_214_1359292300.247' 
    capture_lex $P5251
    .const 'Sub' $P5252 = 'cuid_215_1359292300.247' 
    capture_lex $P5252
    .const 'Sub' $P5253 = 'cuid_216_1359292300.247' 
    capture_lex $P5253
    .const 'Sub' $P5254 = 'cuid_217_1359292300.247' 
    capture_lex $P5254
    .const 'Sub' $P5255 = 'cuid_218_1359292300.247' 
    capture_lex $P5255
    .const 'Sub' $P5256 = 'cuid_220_1359292300.247' 
    capture_lex $P5256
    .const 'Sub' $P5257 = 'cuid_222_1359292300.247' 
    capture_lex $P5257
    .const 'Sub' $P5258 = 'cuid_224_1359292300.247' 
    capture_lex $P5258
    .return ($P5258) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_32_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 599
    .param pmc _lex_param_0 
    .lex "%*LANG", $P101 
    .lex "%*HOW", $P102 
    .lex "$file", $P103 
    .lex "$source_id", $P104 
    .lex "$*W", $P105 
    .lex "$*SCOPE", $P106 
    .lex "$*MULTINESS", $P107 
    .lex "$*PKGDECL", $P108 
    .lex "$*INVOCANT_OK", $P109 
    .lex "$*RETURN_USED", $P110 
    .lex "$*CONTROL_USED", $P111 
    .lex "%*HANDLERS", $P112 
    .lex "self", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P106, $P5006
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P107, $P5007
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P108, $P5008
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P109, $P5009
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P110, $P5010
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P111, $P5011
    new $P5012, 'Hash'
    set $P112, $P5012
    unless_null $P101, fallback306
    nqp_get_sc_object $P5022, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["%LANG"]
    unless_null $P5020, fallback307
    nqp_get_sc_object $P5024, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5023, $P5024
    new $P5025, 'Hash'
    set $P5023["%LANG"], $P5025
    set $P5020, $P5025
  fallback307:
    unless_null $P5020, vivi_61308
    die "Contextual %*LANG not found"
    box $P5026, "Contextual %*LANG not found"
    set $P5020, $P5026
  vivi_61308:
    set $P101, $P5020
  fallback306:
    nqp_get_sc_object $P5030, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5029, $P5030, "NQP"
    get_who $P5028, $P5029
    set $P5027, $P5028["Regex"]
    unless_null $P5027, fallback309
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5027, $P5031
  fallback309:
    set $P101["Regex"], $P5027
    unless_null $P101, fallback310
    nqp_get_sc_object $P5034, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%LANG"]
    unless_null $P5032, fallback311
    nqp_get_sc_object $P5036, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%LANG"], $P5037
    set $P5032, $P5037
  fallback311:
    unless_null $P5032, vivi_62312
    die "Contextual %*LANG not found"
    box $P5038, "Contextual %*LANG not found"
    set $P5032, $P5038
  vivi_62312:
    set $P101, $P5032
  fallback310:
    nqp_get_sc_object $P5042, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5041, $P5042, "NQP"
    get_who $P5040, $P5041
    set $P5039, $P5040["RegexActions"]
    unless_null $P5039, fallback313
    nqp_get_sc_object $P5043, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5039, $P5043
  fallback313:
    set $P101["Regex-actions"], $P5039
    unless_null $P101, fallback314
    nqp_get_sc_object $P5046, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["%LANG"]
    unless_null $P5044, fallback315
    nqp_get_sc_object $P5048, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5047, $P5048
    new $P5049, 'Hash'
    set $P5047["%LANG"], $P5049
    set $P5044, $P5049
  fallback315:
    unless_null $P5044, vivi_63316
    die "Contextual %*LANG not found"
    box $P5050, "Contextual %*LANG not found"
    set $P5044, $P5050
  vivi_63316:
    set $P101, $P5044
  fallback314:
    nqp_get_sc_object $P5054, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5053, $P5054, "NQP"
    get_who $P5052, $P5053
    set $P5051, $P5052["Grammar"]
    unless_null $P5051, fallback317
    nqp_get_sc_object $P5055, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5051, $P5055
  fallback317:
    set $P101["MAIN"], $P5051
    unless_null $P101, fallback318
    nqp_get_sc_object $P5058, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5057, $P5058
    set $P5056, $P5057["%LANG"]
    unless_null $P5056, fallback319
    nqp_get_sc_object $P5060, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5059, $P5060
    new $P5061, 'Hash'
    set $P5059["%LANG"], $P5061
    set $P5056, $P5061
  fallback319:
    unless_null $P5056, vivi_64320
    die "Contextual %*LANG not found"
    box $P5062, "Contextual %*LANG not found"
    set $P5056, $P5062
  vivi_64320:
    set $P101, $P5056
  fallback318:
    nqp_get_sc_object $P5066, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5065, $P5066, "NQP"
    get_who $P5064, $P5065
    set $P5063, $P5064["Actions"]
    unless_null $P5063, fallback321
    nqp_get_sc_object $P5067, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5063, $P5067
  fallback321:
    set $P101["MAIN-actions"], $P5063
    unless_null $P102, fallback325
    nqp_get_sc_object $P5077, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["%HOW"]
    unless_null $P5075, fallback326
    nqp_get_sc_object $P5079, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5078, $P5079
    new $P5080, 'Hash'
    set $P5078["%HOW"], $P5080
    set $P5075, $P5080
  fallback326:
    unless_null $P5075, vivi_66327
    die "Contextual %*HOW not found"
    box $P5081, "Contextual %*HOW not found"
    set $P5075, $P5081
  vivi_66327:
    set $P102, $P5075
  fallback325:
    get_knowhow $P5082
    set $P102["knowhow"], $P5082
    unless_null $P102, fallback328
    nqp_get_sc_object $P5085, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["%HOW"]
    unless_null $P5083, fallback329
    nqp_get_sc_object $P5087, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5086, $P5087
    new $P5088, 'Hash'
    set $P5086["%HOW"], $P5088
    set $P5083, $P5088
  fallback329:
    unless_null $P5083, vivi_67330
    die "Contextual %*HOW not found"
    box $P5089, "Contextual %*HOW not found"
    set $P5083, $P5089
  vivi_67330:
    set $P102, $P5083
  fallback328:
    get_knowhow_attribute $P5090
    set $P102["knowhow-attr"], $P5090
    find_caller_lex $P5091, "$?FILES"
    set $P103, $P5091
.annotate 'line', 618
    nqp_decontainerize $P5092, _lex_param_0
    $P5093 = $P5092."target"()
    set $S5004, $P5093
    nqp_sha1 $S5003, $S5004
    concat $S5002, $S5003, "-"
    time $N5001
    set $S5005, $N5001
    concat $S5001, $S5002, $S5005
    box $P5094, $S5001
    set $P104, $P5094
    isnull $I5001, $P103
    unless $I5001 goto if68_else331 
.annotate 'line', 621
    nqp_get_sc_object $P5098, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5097, $P5098, "NQP"
    get_who $P5096, $P5097
    set $P5095, $P5096["World"]
    unless_null $P5095, fallback333
    nqp_get_sc_object $P5099, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5095, $P5099
  fallback333:
    $P5100 = $P5095."new"($P104 :named("handle"))
    set $P5107, $P5100
    goto if68_end332
  if68_else331:
.annotate 'line', 622
    nqp_get_sc_object $P5104, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5103, $P5104, "NQP"
    get_who $P5102, $P5103
    set $P5101, $P5102["World"]
    unless_null $P5101, fallback334
    nqp_get_sc_object $P5105, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5101, $P5105
  fallback334:
    $P5106 = $P5101."new"($P104 :named("handle"), $P103 :named("description"))
    set $P5107, $P5106
  if68_end332:
    set $P105, $P5107
    box $P5108, ""
    set $P106, $P5108
    box $P5109, ""
    set $P107, $P5109
    box $P5110, ""
    set $P108, $P5110
    box $P5111, 0
    set $P109, $P5111
    box $P5112, 0
    set $P110, $P5112
    box $P5113, 0
    set $P111, $P5113
.annotate 'line', 631
    nqp_decontainerize $P5121, _lex_param_0
    $P5122 = $P5121."comp_unit"()
    .return ($P5122) 
.end
.HLL "nqp"
.namespace []
.sub "identifier" :subid("cuid_33_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 636
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx70_tgt
    .local int rx70_pos
    .local int rx70_off
    .local int rx70_eos
    .local int rx70_rep
    .local pmc rx70_cur
    .local pmc rx70_curclass
    .local pmc rx70_bstack
    .local pmc rx70_cstack
    (rx70_cur, rx70_tgt, rx70_pos, rx70_curclass, rx70_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx70_cur
    length rx70_eos, rx70_tgt
    eq $I19, 1, rx70_restart340
    gt rx70_pos, rx70_eos, rx70_fail341
    repr_get_attr_int $I11, self, rx70_curclass, "$!from"
    ne $I11, -1, rxscan71_done347
    goto rxscan71_scan346
  rxscan71_loop345:
    inc rx70_pos
    gt rx70_pos, rx70_eos, rx70_fail341
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!from", rx70_pos
  rxscan71_scan346:
    nqp_rxmark rx70_bstack, rxscan71_loop345, rx70_pos, 0
  rxscan71_done347:
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!pos", rx70_pos
    $P11 = rx70_cur."ident"()
    repr_get_attr_int $I11, $P11, rx70_curclass, "$!pos"
    lt $I11, 0, rx70_fail341
    repr_get_attr_int rx70_pos, $P11, rx70_curclass, "$!pos"
    nqp_rxmark rx70_bstack, rxquantr73_done350, rx70_pos, 0
  rxquantr73_loop349:
  alt74_0352:
    nqp_rxmark rx70_bstack, alt74_1353, rx70_pos, 0
    add $I11, rx70_pos, 1
    gt $I11, rx70_eos, rx70_fail341
    substr $S10, rx70_tgt, rx70_pos, 1
    ne $S10, ucs4:"-", rx70_fail341
    add rx70_pos, 1
    goto alt74_end351
  alt74_1353:
    ge rx70_pos, rx70_eos, rx70_fail341
    substr $S11, rx70_tgt, rx70_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx70_fail341
    inc rx70_pos
  alt74_end351:
    repr_bind_attr_int rx70_cur, rx70_curclass, "$!pos", rx70_pos
    $P11 = rx70_cur."ident"()
    repr_get_attr_int $I11, $P11, rx70_curclass, "$!pos"
    lt $I11, 0, rx70_fail341
    repr_get_attr_int rx70_pos, $P11, rx70_curclass, "$!pos"
    nqp_rxpeek $I19, rx70_bstack, rxquantr73_done350
    inc $I19
    inc $I19
    set rx70_rep, rx70_bstack[$I19]
    nqp_rxcommit rx70_bstack, rxquantr73_done350
    inc rx70_rep
    nqp_rxmark rx70_bstack, rxquantr73_done350, rx70_pos, rx70_rep
    goto rxquantr73_loop349
  rxquantr73_done350:
    rx70_cur."!cursor_pass"(rx70_pos, "identifier", 'backtrack'=>1)
    .return (rx70_cur)
  rx70_restart340:
    repr_get_attr_obj rx70_cstack, rx70_cur, rx70_curclass, "$!cstack"
  rx70_fail341:
    unless rx70_bstack, rx70_done339
    pop $I19, rx70_bstack
    if_null rx70_cstack, rx70_cstack_done344
    unless rx70_cstack, rx70_cstack_done344
    dec $I19
    set $P11, rx70_cstack[$I19]
  rx70_cstack_done344:
    pop rx70_rep, rx70_bstack
    pop rx70_pos, rx70_bstack
    pop $I19, rx70_bstack
    lt rx70_pos, -1, rx70_done339
    lt rx70_pos, 0, rx70_fail341
    eq $I19, 0, rx70_fail341
    nqp_islist $I20, rx70_cstack
    unless $I20, rx70_jump342
    elements $I18, rx70_bstack
    le $I18, 0, rx70_cut343
    dec $I18
    set $I18, rx70_bstack[$I18]
  rx70_cut343:
    assign rx70_cstack, $I18
  rx70_jump342:
    jump $I19
  rx70_done339:
    rx70_cur."!cursor_fail"()
    .return (rx70_cur) 
.end
.HLL "nqp"
.namespace []
.sub "name" :subid("cuid_34_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 638
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx76_tgt
    .local int rx76_pos
    .local int rx76_off
    .local int rx76_eos
    .local int rx76_rep
    .local pmc rx76_cur
    .local pmc rx76_curclass
    .local pmc rx76_bstack
    .local pmc rx76_cstack
    (rx76_cur, rx76_tgt, rx76_pos, rx76_curclass, rx76_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx76_cur
    length rx76_eos, rx76_tgt
    eq $I19, 1, rx76_restart357
    gt rx76_pos, rx76_eos, rx76_fail358
    repr_get_attr_int $I11, self, rx76_curclass, "$!from"
    ne $I11, -1, rxscan77_done364
    goto rxscan77_scan363
  rxscan77_loop362:
    inc rx76_pos
    gt rx76_pos, rx76_eos, rx76_fail358
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!from", rx76_pos
  rxscan77_scan363:
    nqp_rxmark rx76_bstack, rxscan77_loop362, rx76_pos, 0
  rxscan77_done364:
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!pos", rx76_pos
    $P11 = rx76_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx76_curclass, "$!pos"
    lt $I11, 0, rx76_fail358
    nqp_rxmark rx76_bstack, rxsubrule78_pass365, -1, 0
  rxsubrule78_pass365:
    rx76_cstack = rx76_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx76_pos, $P11, rx76_curclass, "$!pos"
    nqp_rxmark rx76_bstack, rxquantr79_done367, rx76_pos, 0
  rxquantr79_loop366:
    add $I11, rx76_pos, 2
    gt $I11, rx76_eos, rx76_fail358
    substr $S10, rx76_tgt, rx76_pos, 2
    ne $S10, ucs4:"::", rx76_fail358
    add rx76_pos, 2
    repr_bind_attr_int rx76_cur, rx76_curclass, "$!pos", rx76_pos
    $P11 = rx76_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx76_curclass, "$!pos"
    lt $I11, 0, rx76_fail358
    nqp_rxmark rx76_bstack, rxsubrule80_pass368, -1, 0
  rxsubrule80_pass368:
    rx76_cstack = rx76_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx76_pos, $P11, rx76_curclass, "$!pos"
    nqp_rxpeek $I19, rx76_bstack, rxquantr79_done367
    inc $I19
    inc $I19
    set rx76_rep, rx76_bstack[$I19]
    nqp_rxcommit rx76_bstack, rxquantr79_done367
    inc rx76_rep
    nqp_rxmark rx76_bstack, rxquantr79_done367, rx76_pos, rx76_rep
    goto rxquantr79_loop366
  rxquantr79_done367:
    rx76_cur."!cursor_pass"(rx76_pos, "name", 'backtrack'=>1)
    .return (rx76_cur)
  rx76_restart357:
    repr_get_attr_obj rx76_cstack, rx76_cur, rx76_curclass, "$!cstack"
  rx76_fail358:
    unless rx76_bstack, rx76_done356
    pop $I19, rx76_bstack
    if_null rx76_cstack, rx76_cstack_done361
    unless rx76_cstack, rx76_cstack_done361
    dec $I19
    set $P11, rx76_cstack[$I19]
  rx76_cstack_done361:
    pop rx76_rep, rx76_bstack
    pop rx76_pos, rx76_bstack
    pop $I19, rx76_bstack
    lt rx76_pos, -1, rx76_done356
    lt rx76_pos, 0, rx76_fail358
    eq $I19, 0, rx76_fail358
    nqp_islist $I20, rx76_cstack
    unless $I20, rx76_jump359
    elements $I18, rx76_bstack
    le $I18, 0, rx76_cut360
    dec $I18
    set $I18, rx76_bstack[$I18]
  rx76_cut360:
    assign rx76_cstack, $I18
  rx76_jump359:
    jump $I19
  rx76_done356:
    rx76_cur."!cursor_fail"()
    .return (rx76_cur) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_35_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 640
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx81_tgt
    .local int rx81_pos
    .local int rx81_off
    .local int rx81_eos
    .local int rx81_rep
    .local pmc rx81_cur
    .local pmc rx81_curclass
    .local pmc rx81_bstack
    .local pmc rx81_cstack
    (rx81_cur, rx81_tgt, rx81_pos, rx81_curclass, rx81_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx81_cur
    length rx81_eos, rx81_tgt
    eq $I19, 1, rx81_restart371
    gt rx81_pos, rx81_eos, rx81_fail372
    repr_get_attr_int $I11, self, rx81_curclass, "$!from"
    ne $I11, -1, rxscan82_done378
    goto rxscan82_scan377
  rxscan82_loop376:
    inc rx81_pos
    gt rx81_pos, rx81_eos, rx81_fail372
    repr_bind_attr_int rx81_cur, rx81_curclass, "$!from", rx81_pos
  rxscan82_scan377:
    nqp_rxmark rx81_bstack, rxscan82_loop376, rx81_pos, 0
  rxscan82_done378:
    repr_bind_attr_int rx81_cur, rx81_curclass, "$!pos", rx81_pos
    $P11 = rx81_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx81_curclass, "$!pos"
    lt $I11, 0, rx81_fail372
    nqp_rxmark rx81_bstack, rxsubrule83_pass379, -1, 0
  rxsubrule83_pass379:
    rx81_cstack = rx81_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx81_pos, $P11, rx81_curclass, "$!pos"
    nqp_rxmark rx81_bstack, rxquantr84_done381, rx81_pos, 0
  rxquantr84_loop380:
    repr_bind_attr_int rx81_cur, rx81_curclass, "$!pos", rx81_pos
    $P11 = rx81_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx81_curclass, "$!pos"
    lt $I11, 0, rx81_fail372
    goto rxsubrule85_pass382
  rxsubrule85_back383:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx81_curclass, "$!pos"
    lt $I11, 0, rx81_fail372
  rxsubrule85_pass382:
    rx81_cstack = rx81_cur."!cursor_capture"($P11, "colonpair")
    set_addr $I11, rxsubrule85_back383
    push rx81_bstack, $I11
    push rx81_bstack, 0
    push rx81_bstack, rx81_pos
    elements $I11, rx81_cstack
    push rx81_bstack, $I11
    repr_get_attr_int rx81_pos, $P11, rx81_curclass, "$!pos"
    nqp_rxpeek $I19, rx81_bstack, rxquantr84_done381
    inc $I19
    inc $I19
    set rx81_rep, rx81_bstack[$I19]
    nqp_rxcommit rx81_bstack, rxquantr84_done381
    inc rx81_rep
  rxquantr84_done381:
    rx81_cur."!cursor_pass"(rx81_pos, "deflongname", 'backtrack'=>1)
    .return (rx81_cur)
  rx81_restart371:
    repr_get_attr_obj rx81_cstack, rx81_cur, rx81_curclass, "$!cstack"
  rx81_fail372:
    unless rx81_bstack, rx81_done370
    pop $I19, rx81_bstack
    if_null rx81_cstack, rx81_cstack_done375
    unless rx81_cstack, rx81_cstack_done375
    dec $I19
    set $P11, rx81_cstack[$I19]
  rx81_cstack_done375:
    pop rx81_rep, rx81_bstack
    pop rx81_pos, rx81_bstack
    pop $I19, rx81_bstack
    lt rx81_pos, -1, rx81_done370
    lt rx81_pos, 0, rx81_fail372
    eq $I19, 0, rx81_fail372
    nqp_islist $I20, rx81_cstack
    unless $I20, rx81_jump373
    elements $I18, rx81_bstack
    le $I18, 0, rx81_cut374
    dec $I18
    set $I18, rx81_bstack[$I18]
  rx81_cut374:
    assign rx81_cstack, $I18
  rx81_jump373:
    jump $I19
  rx81_done370:
    rx81_cur."!cursor_fail"()
    .return (rx81_cur) 
.end
.HLL "nqp"
.namespace []
.sub "ENDSTMT" :subid("cuid_36_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 644
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx86_tgt
    .local int rx86_pos
    .local int rx86_off
    .local int rx86_eos
    .local int rx86_rep
    .local pmc rx86_cur
    .local pmc rx86_curclass
    .local pmc rx86_bstack
    .local pmc rx86_cstack
    (rx86_cur, rx86_tgt, rx86_pos, rx86_curclass, rx86_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx86_cur
    length rx86_eos, rx86_tgt
    eq $I19, 1, rx86_restart386
    gt rx86_pos, rx86_eos, rx86_fail387
    repr_get_attr_int $I11, self, rx86_curclass, "$!from"
    ne $I11, -1, rxscan87_done393
    goto rxscan87_scan392
  rxscan87_loop391:
    inc rx86_pos
    gt rx86_pos, rx86_eos, rx86_fail387
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!from", rx86_pos
  rxscan87_scan392:
    nqp_rxmark rx86_bstack, rxscan87_loop391, rx86_pos, 0
  rxscan87_done393:
    nqp_rxmark rx86_bstack, rxquantr88_done395, rx86_pos, 0
  rxquantr88_loop394:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt89_0397
    nqp_push_label $P11, alt89_1402
    nqp_rxmark rx86_bstack, alt89_end396, -1, 0
    rx86_cur."!alt"(rx86_pos, "alt_nfa__1_1359292301.404", $P11)
    goto rx86_fail387
  alt89_0397:
    nqp_rxmark rx86_bstack, rxquantr90_done399, rx86_pos, 0
  rxquantr90_loop398:
    ge rx86_pos, rx86_eos, rx86_fail387
    substr $S11, rx86_tgt, rx86_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx86_fail387
    inc rx86_pos
    nqp_rxpeek $I19, rx86_bstack, rxquantr90_done399
    inc $I19
    inc $I19
    set rx86_rep, rx86_bstack[$I19]
    nqp_rxcommit rx86_bstack, rxquantr90_done399
    inc rx86_rep
    nqp_rxmark rx86_bstack, rxquantr90_done399, rx86_pos, rx86_rep
    goto rxquantr90_loop398
  rxquantr90_done399:
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, rx86_pos
    if $I11, rxanchor91_done400
    ne rx86_pos, rx86_eos, rx86_fail387
    eq rx86_pos, 0, rxanchor91_done400
    sub $I11, rx86_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, $I11
    if $I11, rx86_fail387
  rxanchor91_done400:
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."ws"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail387
    repr_get_attr_int rx86_pos, $P11, rx86_curclass, "$!pos"
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail387
    goto alt89_end396
  alt89_1402:
    nqp_rxmark rx86_bstack, rxquantr93_done404, rx86_pos, 0
  rxquantr93_loop403:
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."unv"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail387
    goto rxsubrule94_pass405
  rxsubrule94_back406:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail387
  rxsubrule94_pass405:
    rx86_cstack = rx86_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule94_back406
    push rx86_bstack, $I11
    push rx86_bstack, 0
    push rx86_bstack, rx86_pos
    elements $I11, rx86_cstack
    push rx86_bstack, $I11
    repr_get_attr_int rx86_pos, $P11, rx86_curclass, "$!pos"
    nqp_rxpeek $I19, rx86_bstack, rxquantr93_done404
    inc $I19
    inc $I19
    set rx86_rep, rx86_bstack[$I19]
    nqp_rxcommit rx86_bstack, rxquantr93_done404
    inc rx86_rep
  rxquantr93_done404:
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, rx86_pos
    if $I11, rxanchor95_done407
    ne rx86_pos, rx86_eos, rx86_fail387
    eq rx86_pos, 0, rxanchor95_done407
    sub $I11, rx86_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx86_tgt, $I11
    if $I11, rx86_fail387
  rxanchor95_done407:
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."ws"()
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail387
    repr_get_attr_int rx86_pos, $P11, rx86_curclass, "$!pos"
    repr_bind_attr_int rx86_cur, rx86_curclass, "$!pos", rx86_pos
    $P11 = rx86_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx86_curclass, "$!pos"
    lt $I11, 0, rx86_fail387
    goto alt89_end396
  alt89_end396:
    nqp_rxpeek $I19, rx86_bstack, rxquantr88_done395
    inc $I19
    inc $I19
    set rx86_rep, rx86_bstack[$I19]
    nqp_rxcommit rx86_bstack, rxquantr88_done395
    inc rx86_rep
  rxquantr88_done395:
    rx86_cur."!cursor_pass"(rx86_pos, "ENDSTMT", 'backtrack'=>1)
    .return (rx86_cur)
  rx86_restart386:
    repr_get_attr_obj rx86_cstack, rx86_cur, rx86_curclass, "$!cstack"
  rx86_fail387:
    unless rx86_bstack, rx86_done385
    pop $I19, rx86_bstack
    if_null rx86_cstack, rx86_cstack_done390
    unless rx86_cstack, rx86_cstack_done390
    dec $I19
    set $P11, rx86_cstack[$I19]
  rx86_cstack_done390:
    pop rx86_rep, rx86_bstack
    pop rx86_pos, rx86_bstack
    pop $I19, rx86_bstack
    lt rx86_pos, -1, rx86_done385
    lt rx86_pos, 0, rx86_fail387
    eq $I19, 0, rx86_fail387
    nqp_islist $I20, rx86_cstack
    unless $I20, rx86_jump388
    elements $I18, rx86_bstack
    le $I18, 0, rx86_cut389
    dec $I18
    set $I18, rx86_bstack[$I18]
  rx86_cut389:
    assign rx86_cstack, $I18
  rx86_jump388:
    jump $I19
  rx86_done385:
    rx86_cur."!cursor_fail"()
    .return (rx86_cur) 
.end
.HLL "nqp"
.namespace []
.sub "ws" :subid("cuid_37_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 651
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx97_tgt
    .local int rx97_pos
    .local int rx97_off
    .local int rx97_eos
    .local int rx97_rep
    .local pmc rx97_cur
    .local pmc rx97_curclass
    .local pmc rx97_bstack
    .local pmc rx97_cstack
    (rx97_cur, rx97_tgt, rx97_pos, rx97_curclass, rx97_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx97_cur
    length rx97_eos, rx97_tgt
    eq $I19, 1, rx97_restart411
    gt rx97_pos, rx97_eos, rx97_fail412
    repr_get_attr_int $I11, self, rx97_curclass, "$!from"
    ne $I11, -1, rxscan98_done418
    goto rxscan98_scan417
  rxscan98_loop416:
    inc rx97_pos
    gt rx97_pos, rx97_eos, rx97_fail412
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!from", rx97_pos
  rxscan98_scan417:
    nqp_rxmark rx97_bstack, rxscan98_loop416, rx97_pos, 0
  rxscan98_done418:
  alt99_0420:
    nqp_rxmark rx97_bstack, alt99_1421, rx97_pos, 0
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."MARKED"("ws")
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail412
    goto alt99_end419
  alt99_1421:
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."ww"()
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    ge $I11, 0, rx97_fail412
    nqp_rxmark rx97_bstack, rxquantr100_done423, rx97_pos, 0
  rxquantr100_loop422:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt101_0425
    nqp_push_label $P11, alt101_1428
    nqp_push_label $P11, alt101_2431
    nqp_push_label $P11, alt101_3434
    nqp_rxmark rx97_bstack, alt101_end424, -1, 0
    rx97_cur."!alt"(rx97_pos, "alt_nfa__2_1359292301.42", $P11)
    goto rx97_fail412
  alt101_0425:
    nqp_rxmark rx97_bstack, rxquantr102_done427, -1, 0
  rxquantr102_loop426:
    ge rx97_pos, rx97_eos, rx97_fail412
    substr $S11, rx97_tgt, rx97_pos, 1
    index $I11, ucs4:"\n\x{b}\f\r\x{85}\u2028\u2029", $S11
    lt $I11, 0, rx97_fail412
    inc rx97_pos
    nqp_rxpeek $I19, rx97_bstack, rxquantr102_done427
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr102_done427
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr102_done427, rx97_pos, rx97_rep
    goto rxquantr102_loop426
  rxquantr102_done427:
    goto alt101_end424
  alt101_1428:
    add $I11, rx97_pos, 1
    gt $I11, rx97_eos, rx97_fail412
    substr $S10, rx97_tgt, rx97_pos, 1
    ne $S10, ucs4:"#", rx97_fail412
    add rx97_pos, 1
    nqp_rxmark rx97_bstack, rxquantr103_done430, rx97_pos, 0
  rxquantr103_loop429:
    ge rx97_pos, rx97_eos, rx97_fail412
    is_cclass $I11, .CCLASS_NEWLINE, rx97_tgt, rx97_pos
    if $I11, rx97_fail412
    add rx97_pos, 1
    nqp_rxpeek $I19, rx97_bstack, rxquantr103_done430
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr103_done430
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr103_done430, rx97_pos, rx97_rep
    goto rxquantr103_loop429
  rxquantr103_done430:
    goto alt101_end424
  alt101_2431:
    eq rx97_pos, 0, rxanchor104_done432
    ge rx97_pos, rx97_eos, rx97_fail412
    sub $I11, rx97_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx97_tgt, $I11
    unless $I11, rx97_fail412
  rxanchor104_done432:
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail412
    repr_get_attr_int rx97_pos, $P11, rx97_curclass, "$!pos"
    goto alt101_end424
  alt101_3434:
    nqp_rxmark rx97_bstack, rxquantr106_done436, -1, 0
  rxquantr106_loop435:
    ge rx97_pos, rx97_eos, rx97_fail412
    substr $S11, rx97_tgt, rx97_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx97_fail412
    inc rx97_pos
    nqp_rxpeek $I19, rx97_bstack, rxquantr106_done436
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr106_done436
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr106_done436, rx97_pos, rx97_rep
    goto rxquantr106_loop435
  rxquantr106_done436:
    goto alt101_end424
  alt101_end424:
    nqp_rxpeek $I19, rx97_bstack, rxquantr100_done423
    inc $I19
    inc $I19
    set rx97_rep, rx97_bstack[$I19]
    nqp_rxcommit rx97_bstack, rxquantr100_done423
    inc rx97_rep
    nqp_rxmark rx97_bstack, rxquantr100_done423, rx97_pos, rx97_rep
    goto rxquantr100_loop422
  rxquantr100_done423:
    repr_bind_attr_int rx97_cur, rx97_curclass, "$!pos", rx97_pos
    $P11 = rx97_cur."MARKER"("ws")
    repr_get_attr_int $I11, $P11, rx97_curclass, "$!pos"
    lt $I11, 0, rx97_fail412
  alt99_end419:
    rx97_cur."!cursor_pass"(rx97_pos, "ws", 'backtrack'=>1)
    .return (rx97_cur)
  rx97_restart411:
    repr_get_attr_obj rx97_cstack, rx97_cur, rx97_curclass, "$!cstack"
  rx97_fail412:
    unless rx97_bstack, rx97_done410
    pop $I19, rx97_bstack
    if_null rx97_cstack, rx97_cstack_done415
    unless rx97_cstack, rx97_cstack_done415
    dec $I19
    set $P11, rx97_cstack[$I19]
  rx97_cstack_done415:
    pop rx97_rep, rx97_bstack
    pop rx97_pos, rx97_bstack
    pop $I19, rx97_bstack
    lt rx97_pos, -1, rx97_done410
    lt rx97_pos, 0, rx97_fail412
    eq $I19, 0, rx97_fail412
    nqp_islist $I20, rx97_cstack
    unless $I20, rx97_jump413
    elements $I18, rx97_bstack
    le $I18, 0, rx97_cut414
    dec $I18
    set $I18, rx97_bstack[$I18]
  rx97_cut414:
    assign rx97_cstack, $I18
  rx97_jump413:
    jump $I19
  rx97_done410:
    rx97_cur."!cursor_fail"()
    .return (rx97_cur) 
.end
.HLL "nqp"
.namespace []
.sub "unv" :subid("cuid_38_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 662
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_39_1359292300.247' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx107_tgt
    .local int rx107_pos
    .local int rx107_off
    .local int rx107_eos
    .local int rx107_rep
    .local pmc rx107_cur
    .local pmc rx107_curclass
    .local pmc rx107_bstack
    .local pmc rx107_cstack
    (rx107_cur, rx107_tgt, rx107_pos, rx107_curclass, rx107_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx107_cur
    length rx107_eos, rx107_tgt
    eq $I19, 1, rx107_restart439
    gt rx107_pos, rx107_eos, rx107_fail440
    repr_get_attr_int $I11, self, rx107_curclass, "$!from"
    ne $I11, -1, rxscan108_done446
    goto rxscan108_scan445
  rxscan108_loop444:
    inc rx107_pos
    gt rx107_pos, rx107_eos, rx107_fail440
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!from", rx107_pos
  rxscan108_scan445:
    nqp_rxmark rx107_bstack, rxscan108_loop444, rx107_pos, 0
  rxscan108_done446:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt109_0448
    nqp_push_label $P11, alt109_1466
    nqp_push_label $P11, alt109_2471
    nqp_rxmark rx107_bstack, alt109_end447, -1, 0
    rx107_cur."!alt"(rx107_pos, "alt_nfa__4_1359292301.438", $P11)
    goto rx107_fail440
  alt109_0448:
    eq rx107_pos, 0, rxanchor110_done449
    ge rx107_pos, rx107_eos, rx107_fail440
    sub $I11, rx107_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx107_tgt, $I11
    unless $I11, rx107_fail440
  rxanchor110_done449:
    .const 'Sub' $P5001 = 'cuid_39_1359292300.247' 
    capture_lex $P5001
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    $P11 = rx107_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx107_curclass, "$!pos"
    lt $I11, 0, rx107_fail440
    repr_bind_attr_int rx107_cur, rx107_curclass, "$!pos", rx107_pos
    $P11 = rx107_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx107_curclass, "$!pos"
    lt $I11, 0, rx107_fail440
    repr_get_attr_int rx107_pos, $P11, rx107_curclass, "$!pos"
    goto alt109_end447
  alt109_1466:
    nqp_rxmark rx107_bstack, rxquantr116_done468, rx107_pos, 0
  rxquantr116_loop467:
    ge rx107_pos, rx107_eos, rx107_fail440
    substr $S11, rx107_tgt, rx107_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx107_fail440
    inc rx107_pos
    nqp_rxpeek $I19, rx107_bstack, rxquantr116_done468
    inc $I19
    inc $I19
    set rx107_rep, rx107_bstack[$I19]
    nqp_rxcommit rx107_bstack, rxquantr116_done468
    inc rx107_rep
    nqp_rxmark rx107_bstack, rxquantr116_done468, rx107_pos, rx107_rep
    goto rxquantr116_loop467
  rxquantr116_done468:
    add $I11, rx107_pos, 1
    gt $I11, rx107_eos, rx107_fail440
    substr $S10, rx107_tgt, rx107_pos, 1
    ne $S10, ucs4:"#", rx107_fail440
    add rx107_pos, 1
    nqp_rxmark rx107_bstack, rxquantr117_done470, rx107_pos, 0
  rxquantr117_loop469:
    ge rx107_pos, rx107_eos, rx107_fail440
    is_cclass $I11, .CCLASS_NEWLINE, rx107_tgt, rx107_pos
    if $I11, rx107_fail440
    add rx107_pos, 1
    nqp_rxpeek $I19, rx107_bstack, rxquantr117_done470
    inc $I19
    inc $I19
    set rx107_rep, rx107_bstack[$I19]
    nqp_rxcommit rx107_bstack, rxquantr117_done470
    inc rx107_rep
    nqp_rxmark rx107_bstack, rxquantr117_done470, rx107_pos, rx107_rep
    goto rxquantr117_loop469
  rxquantr117_done470:
    goto alt109_end447
  alt109_2471:
    nqp_rxmark rx107_bstack, rxquantr118_done473, -1, 0
  rxquantr118_loop472:
    ge rx107_pos, rx107_eos, rx107_fail440
    substr $S11, rx107_tgt, rx107_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx107_fail440
    inc rx107_pos
    nqp_rxpeek $I19, rx107_bstack, rxquantr118_done473
    inc $I19
    inc $I19
    set rx107_rep, rx107_bstack[$I19]
    nqp_rxcommit rx107_bstack, rxquantr118_done473
    inc rx107_rep
    nqp_rxmark rx107_bstack, rxquantr118_done473, rx107_pos, rx107_rep
    goto rxquantr118_loop472
  rxquantr118_done473:
    goto alt109_end447
  alt109_end447:
    nqp_rxcommit rx107_bstack, alt109_end447
    rx107_cur."!cursor_pass"(rx107_pos, "unv", 'backtrack'=>1)
    .return (rx107_cur)
  rx107_restart439:
    repr_get_attr_obj rx107_cstack, rx107_cur, rx107_curclass, "$!cstack"
  rx107_fail440:
    unless rx107_bstack, rx107_done438
    pop $I19, rx107_bstack
    if_null rx107_cstack, rx107_cstack_done443
    unless rx107_cstack, rx107_cstack_done443
    dec $I19
    set $P11, rx107_cstack[$I19]
  rx107_cstack_done443:
    pop rx107_rep, rx107_bstack
    pop rx107_pos, rx107_bstack
    pop $I19, rx107_bstack
    lt rx107_pos, -1, rx107_done438
    lt rx107_pos, 0, rx107_fail440
    eq $I19, 0, rx107_fail440
    nqp_islist $I20, rx107_cstack
    unless $I20, rx107_jump441
    elements $I18, rx107_bstack
    le $I18, 0, rx107_cut442
    dec $I18
    set $I18, rx107_bstack[$I18]
  rx107_cut442:
    assign rx107_cstack, $I18
  rx107_jump441:
    jump $I19
  rx107_done438:
    rx107_cur."!cursor_fail"()
    .return (rx107_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_39_1359292300.247") :anon :lex :outer("cuid_38_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx111_tgt
    .local int rx111_pos
    .local int rx111_off
    .local int rx111_eos
    .local int rx111_rep
    .local pmc rx111_cur
    .local pmc rx111_curclass
    .local pmc rx111_bstack
    .local pmc rx111_cstack
    (rx111_cur, rx111_tgt, rx111_pos, rx111_curclass, rx111_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx111_cur
    length rx111_eos, rx111_tgt
    eq $I19, 1, rx111_restart452
    gt rx111_pos, rx111_eos, rx111_fail453
    repr_get_attr_int $I11, self, rx111_curclass, "$!from"
    ne $I11, -1, rxscan112_done459
    goto rxscan112_scan458
  rxscan112_loop457:
    inc rx111_pos
    gt rx111_pos, rx111_eos, rx111_fail453
    repr_bind_attr_int rx111_cur, rx111_curclass, "$!from", rx111_pos
  rxscan112_scan458:
    nqp_rxmark rx111_bstack, rxscan112_loop457, rx111_pos, 0
  rxscan112_done459:
    nqp_rxmark rx111_bstack, rxquantr113_done461, rx111_pos, 0
  rxquantr113_loop460:
    ge rx111_pos, rx111_eos, rx111_fail453
    substr $S11, rx111_tgt, rx111_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx111_fail453
    inc rx111_pos
    nqp_rxpeek $I19, rx111_bstack, rxquantr113_done461
    inc $I19
    inc $I19
    set rx111_rep, rx111_bstack[$I19]
    nqp_rxcommit rx111_bstack, rxquantr113_done461
    inc rx111_rep
    nqp_rxmark rx111_bstack, rxquantr113_done461, rx111_pos, rx111_rep
    goto rxquantr113_loop460
  rxquantr113_done461:
    add $I11, rx111_pos, 1
    gt $I11, rx111_eos, rx111_fail453
    substr $S10, rx111_tgt, rx111_pos, 1
    ne $S10, ucs4:"=", rx111_fail453
    add rx111_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt114_0463
    nqp_push_label $P11, alt114_1464
    nqp_rxmark rx111_bstack, alt114_end462, -1, 0
    rx111_cur."!alt"(rx111_pos, "alt_nfa__3_1359292301.429", $P11)
    goto rx111_fail453
  alt114_0463:
    ge rx111_pos, rx111_eos, rx111_fail453
    is_cclass $I11, .CCLASS_WORD, rx111_tgt, rx111_pos
    unless $I11, rx111_fail453
    add rx111_pos, 1
    goto alt114_end462
  alt114_1464:
    add $I11, rx111_pos, 1
    gt $I11, rx111_eos, rx111_fail453
    substr $S10, rx111_tgt, rx111_pos, 1
    ne $S10, ucs4:"\\", rx111_fail453
    add rx111_pos, 1
    goto alt114_end462
  alt114_end462:
    nqp_rxcommit rx111_bstack, alt114_end462
    rx111_cur."!cursor_pass"(rx111_pos, 'backtrack'=>1)
    .return (rx111_cur)
  rx111_restart452:
    repr_get_attr_obj rx111_cstack, rx111_cur, rx111_curclass, "$!cstack"
  rx111_fail453:
    unless rx111_bstack, rx111_done451
    pop $I19, rx111_bstack
    if_null rx111_cstack, rx111_cstack_done456
    unless rx111_cstack, rx111_cstack_done456
    dec $I19
    set $P11, rx111_cstack[$I19]
  rx111_cstack_done456:
    pop rx111_rep, rx111_bstack
    pop rx111_pos, rx111_bstack
    pop $I19, rx111_bstack
    lt rx111_pos, -1, rx111_done451
    lt rx111_pos, 0, rx111_fail453
    eq $I19, 0, rx111_fail453
    nqp_islist $I20, rx111_cstack
    unless $I20, rx111_jump454
    elements $I18, rx111_bstack
    le $I18, 0, rx111_cut455
    dec $I18
    set $I18, rx111_bstack[$I18]
  rx111_cut455:
    assign rx111_cstack, $I18
  rx111_jump454:
    jump $I19
  rx111_done451:
    rx111_cur."!cursor_fail"()
    .return (rx111_cur) 
.end
.HLL "nqp"
.namespace []
.sub "pod_comment" :subid("cuid_40_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 671
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_41_1359292300.247' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx119_tgt
    .local int rx119_pos
    .local int rx119_off
    .local int rx119_eos
    .local int rx119_rep
    .local pmc rx119_cur
    .local pmc rx119_curclass
    .local pmc rx119_bstack
    .local pmc rx119_cstack
    (rx119_cur, rx119_tgt, rx119_pos, rx119_curclass, rx119_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx119_cur
    length rx119_eos, rx119_tgt
    eq $I19, 1, rx119_restart476
    gt rx119_pos, rx119_eos, rx119_fail477
    repr_get_attr_int $I11, self, rx119_curclass, "$!from"
    ne $I11, -1, rxscan120_done483
    goto rxscan120_scan482
  rxscan120_loop481:
    inc rx119_pos
    gt rx119_pos, rx119_eos, rx119_fail477
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!from", rx119_pos
  rxscan120_scan482:
    nqp_rxmark rx119_bstack, rxscan120_loop481, rx119_pos, 0
  rxscan120_done483:
    eq rx119_pos, 0, rxanchor121_done484
    ge rx119_pos, rx119_eos, rx119_fail477
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, $I11
    unless $I11, rx119_fail477
  rxanchor121_done484:
    nqp_rxmark rx119_bstack, rxquantr122_done486, rx119_pos, 0
  rxquantr122_loop485:
    ge rx119_pos, rx119_eos, rx119_fail477
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail477
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr122_done486
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr122_done486
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr122_done486, rx119_pos, rx119_rep
    goto rxquantr122_loop485
  rxquantr122_done486:
    add $I11, rx119_pos, 1
    gt $I11, rx119_eos, rx119_fail477
    substr $S10, rx119_tgt, rx119_pos, 1
    ne $S10, ucs4:"=", rx119_fail477
    add rx119_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt123_0488
    nqp_push_label $P11, alt123_1507
    nqp_push_label $P11, alt123_2526
    nqp_push_label $P11, alt123_3548
    nqp_push_label $P11, alt123_4573
    nqp_rxmark rx119_bstack, alt123_end487, -1, 0
    rx119_cur."!alt"(rx119_pos, "alt_nfa__6_1359292301.517", $P11)
    goto rx119_fail477
  alt123_0488:
    add $I11, rx119_pos, 5
    gt $I11, rx119_eos, rx119_fail477
    substr $S10, rx119_tgt, rx119_pos, 5
    ne $S10, ucs4:"begin", rx119_fail477
    add rx119_pos, 5
    nqp_rxmark rx119_bstack, rxquantr124_done490, -1, 0
  rxquantr124_loop489:
    ge rx119_pos, rx119_eos, rx119_fail477
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail477
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr124_done490
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr124_done490
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr124_done490, rx119_pos, rx119_rep
    goto rxquantr124_loop489
  rxquantr124_done490:
    add $I11, rx119_pos, 3
    gt $I11, rx119_eos, rx119_fail477
    substr $S10, rx119_tgt, rx119_pos, 3
    ne $S10, ucs4:"END", rx119_fail477
    add rx119_pos, 3
    le rx119_pos, 0, rx119_fail477
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail477
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail477
  alt126_0493:
    nqp_rxmark rx119_bstack, alt126_1504, rx119_pos, 0
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf127_loop494, rx119_pos, rx119_rep
    goto rxquantf127_done495
  rxquantf127_loop494:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail477
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf127_loop494, rx119_pos, rx119_rep
  rxquantf127_done495:
    ge rx119_pos, rx119_eos, rx119_fail477
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail477
    substr $S10, rx119_tgt, rx119_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx119_pos, $I11
    add rx119_pos, 1
    nqp_rxmark rx119_bstack, rxquantr128_done498, rx119_pos, 0
  rxquantr128_loop497:
    ge rx119_pos, rx119_eos, rx119_fail477
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail477
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr128_done498
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr128_done498
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr128_done498, rx119_pos, rx119_rep
    goto rxquantr128_loop497
  rxquantr128_done498:
    add $I11, rx119_pos, 4
    gt $I11, rx119_eos, rx119_fail477
    substr $S10, rx119_tgt, rx119_pos, 4
    ne $S10, ucs4:"=end", rx119_fail477
    add rx119_pos, 4
    nqp_rxmark rx119_bstack, rxquantr129_done500, -1, 0
  rxquantr129_loop499:
    ge rx119_pos, rx119_eos, rx119_fail477
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail477
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr129_done500
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr129_done500
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr129_done500, rx119_pos, rx119_rep
    goto rxquantr129_loop499
  rxquantr129_done500:
    add $I11, rx119_pos, 3
    gt $I11, rx119_eos, rx119_fail477
    substr $S10, rx119_tgt, rx119_pos, 3
    ne $S10, ucs4:"END", rx119_fail477
    add rx119_pos, 3
    le rx119_pos, 0, rx119_fail477
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail477
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail477
    nqp_rxmark rx119_bstack, rxquantr131_done503, rx119_pos, 0
  rxquantr131_loop502:
    ge rx119_pos, rx119_eos, rx119_fail477
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail477
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr131_done503
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr131_done503
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr131_done503, rx119_pos, rx119_rep
    goto rxquantr131_loop502
  rxquantr131_done503:
    goto alt126_end492
  alt126_1504:
    nqp_rxmark rx119_bstack, rxquantr132_done506, rx119_pos, 0
  rxquantr132_loop505:
    ge rx119_pos, rx119_eos, rx119_fail477
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr132_done506
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr132_done506
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr132_done506, rx119_pos, rx119_rep
    goto rxquantr132_loop505
  rxquantr132_done506:
  alt126_end492:
    goto alt123_end487
  alt123_1507:
    add $I11, rx119_pos, 5
    gt $I11, rx119_eos, rx119_fail477
    substr $S10, rx119_tgt, rx119_pos, 5
    ne $S10, ucs4:"begin", rx119_fail477
    add rx119_pos, 5
    nqp_rxmark rx119_bstack, rxquantr133_done509, -1, 0
  rxquantr133_loop508:
    ge rx119_pos, rx119_eos, rx119_fail477
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail477
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr133_done509
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr133_done509
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr133_done509, rx119_pos, rx119_rep
    goto rxquantr133_loop508
  rxquantr133_done509:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail477
    nqp_rxmark rx119_bstack, rxsubrule134_pass510, -1, 0
  rxsubrule134_pass510:
    rx119_cstack = rx119_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt135_0512:
    nqp_rxmark rx119_bstack, alt135_1524, rx119_pos, 0
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf136_loop513, rx119_pos, rx119_rep
    goto rxquantf136_done514
  rxquantf136_loop513:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail477
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf136_loop513, rx119_pos, rx119_rep
  rxquantf136_done514:
    ge rx119_pos, rx119_eos, rx119_fail477
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail477
    substr $S10, rx119_tgt, rx119_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx119_pos, $I11
    add rx119_pos, 1
    nqp_rxmark rx119_bstack, rxquantr137_done517, rx119_pos, 0
  rxquantr137_loop516:
    ge rx119_pos, rx119_eos, rx119_fail477
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail477
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr137_done517
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr137_done517
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr137_done517, rx119_pos, rx119_rep
    goto rxquantr137_loop516
  rxquantr137_done517:
    add $I11, rx119_pos, 4
    gt $I11, rx119_eos, rx119_fail477
    substr $S10, rx119_tgt, rx119_pos, 4
    ne $S10, ucs4:"=end", rx119_fail477
    add rx119_pos, 4
    nqp_rxmark rx119_bstack, rxquantr138_done519, -1, 0
  rxquantr138_loop518:
    ge rx119_pos, rx119_eos, rx119_fail477
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail477
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr138_done519
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr138_done519
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr138_done519, rx119_pos, rx119_rep
    goto rxquantr138_loop518
  rxquantr138_done519:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."!BACKREF"("identifier")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail477
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
    le rx119_pos, 0, rx119_fail477
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail477
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail477
    nqp_rxmark rx119_bstack, rxquantr141_done523, rx119_pos, 0
  rxquantr141_loop522:
    ge rx119_pos, rx119_eos, rx119_fail477
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail477
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr141_done523
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr141_done523
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr141_done523, rx119_pos, rx119_rep
    goto rxquantr141_loop522
  rxquantr141_done523:
    goto alt135_end511
  alt135_1524:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail477
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt135_end511:
    goto alt123_end487
  alt123_2526:
    add $I11, rx119_pos, 5
    gt $I11, rx119_eos, rx119_fail477
    substr $S10, rx119_tgt, rx119_pos, 5
    ne $S10, ucs4:"begin", rx119_fail477
    add rx119_pos, 5
    le rx119_pos, 0, rx119_fail477
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail477
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail477
    nqp_rxmark rx119_bstack, rxquantr144_done529, rx119_pos, 0
  rxquantr144_loop528:
    ge rx119_pos, rx119_eos, rx119_fail477
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail477
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr144_done529
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr144_done529
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr144_done529, rx119_pos, rx119_rep
    goto rxquantr144_loop528
  rxquantr144_done529:
  alt145_0531:
    nqp_rxmark rx119_bstack, alt145_1533, rx119_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rxanchor146_done532
    ne rx119_pos, rx119_eos, rx119_fail477
    eq rx119_pos, 0, rxanchor146_done532
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, $I11
    if $I11, rx119_fail477
  rxanchor146_done532:
    goto alt145_end530
  alt145_1533:
    nqp_rxmark rx119_bstack, alt145_2534, rx119_pos, 0
    add $I11, rx119_pos, 1
    gt $I11, rx119_eos, rx119_fail477
    substr $S10, rx119_tgt, rx119_pos, 1
    ne $S10, ucs4:"#", rx119_fail477
    add rx119_pos, 1
    goto alt145_end530
  alt145_2534:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("Unrecognized token after =begin")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail477
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt145_end530:
  alt148_0537:
    nqp_rxmark rx119_bstack, alt148_1546, rx119_pos, 0
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf149_loop538, rx119_pos, rx119_rep
    goto rxquantf149_done539
  rxquantf149_loop538:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail477
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf149_loop538, rx119_pos, rx119_rep
  rxquantf149_done539:
    ge rx119_pos, rx119_eos, rx119_fail477
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail477
    substr $S10, rx119_tgt, rx119_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx119_pos, $I11
    add rx119_pos, 1
    nqp_rxmark rx119_bstack, rxquantr150_done542, rx119_pos, 0
  rxquantr150_loop541:
    ge rx119_pos, rx119_eos, rx119_fail477
    substr $S11, rx119_tgt, rx119_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx119_fail477
    inc rx119_pos
    nqp_rxpeek $I19, rx119_bstack, rxquantr150_done542
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr150_done542
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr150_done542, rx119_pos, rx119_rep
    goto rxquantr150_loop541
  rxquantr150_done542:
    add $I11, rx119_pos, 4
    gt $I11, rx119_eos, rx119_fail477
    substr $S10, rx119_tgt, rx119_pos, 4
    ne $S10, ucs4:"=end", rx119_fail477
    add rx119_pos, 4
    le rx119_pos, 0, rx119_fail477
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, rx119_pos
    if $I11, rx119_fail477
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx119_tgt, $I11
    unless $I11, rx119_fail477
    nqp_rxmark rx119_bstack, rxquantr152_done545, rx119_pos, 0
  rxquantr152_loop544:
    ge rx119_pos, rx119_eos, rx119_fail477
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail477
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr152_done545
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr152_done545
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr152_done545, rx119_pos, rx119_rep
    goto rxquantr152_loop544
  rxquantr152_done545:
    goto alt148_end536
  alt148_1546:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail477
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt148_end536:
    goto alt123_end487
  alt123_3548:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail477
    nqp_rxmark rx119_bstack, rxsubrule154_pass549, -1, 0
  rxsubrule154_pass549:
    rx119_cstack = rx119_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
    set rx119_rep, 0
    nqp_rxmark rx119_bstack, rxquantf155_loop550, rx119_pos, rx119_rep
    goto rxquantf155_done551
  rxquantf155_loop550:
    set $I12, rx119_rep
    ge rx119_pos, rx119_eos, rx119_fail477
    add rx119_pos, 1
    set rx119_rep, $I12
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantf155_loop550, rx119_pos, rx119_rep
  rxquantf155_done551:
    eq rx119_pos, 0, rxanchor156_done553
    ge rx119_pos, rx119_eos, rx119_fail477
    sub $I11, rx119_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, $I11
    unless $I11, rx119_fail477
  rxanchor156_done553:
    .const 'Sub' $P5001 = 'cuid_41_1359292300.247' 
    capture_lex $P5001
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail477
    goto alt123_end487
  alt123_4573:
  alt164_0575:
    nqp_rxmark rx119_bstack, alt164_1576, rx119_pos, 0
    ge rx119_pos, rx119_eos, rx119_fail477
    is_cclass $I11, .CCLASS_WHITESPACE, rx119_tgt, rx119_pos
    unless $I11, rx119_fail477
    add rx119_pos, 1
    goto alt164_end574
  alt164_1576:
    repr_bind_attr_int rx119_cur, rx119_curclass, "$!pos", rx119_pos
    $P11 = rx119_cur."panic"("Illegal pod directive")
    repr_get_attr_int $I11, $P11, rx119_curclass, "$!pos"
    lt $I11, 0, rx119_fail477
    repr_get_attr_int rx119_pos, $P11, rx119_curclass, "$!pos"
  alt164_end574:
    nqp_rxmark rx119_bstack, rxquantr166_done579, rx119_pos, 0
  rxquantr166_loop578:
    ge rx119_pos, rx119_eos, rx119_fail477
    is_cclass $I11, .CCLASS_NEWLINE, rx119_tgt, rx119_pos
    if $I11, rx119_fail477
    add rx119_pos, 1
    nqp_rxpeek $I19, rx119_bstack, rxquantr166_done579
    inc $I19
    inc $I19
    set rx119_rep, rx119_bstack[$I19]
    nqp_rxcommit rx119_bstack, rxquantr166_done579
    inc rx119_rep
    nqp_rxmark rx119_bstack, rxquantr166_done579, rx119_pos, rx119_rep
    goto rxquantr166_loop578
  rxquantr166_done579:
    goto alt123_end487
  alt123_end487:
    nqp_rxcommit rx119_bstack, alt123_end487
    rx119_cur."!cursor_pass"(rx119_pos, "pod_comment", 'backtrack'=>1)
    .return (rx119_cur)
  rx119_restart476:
    repr_get_attr_obj rx119_cstack, rx119_cur, rx119_curclass, "$!cstack"
  rx119_fail477:
    unless rx119_bstack, rx119_done475
    pop $I19, rx119_bstack
    if_null rx119_cstack, rx119_cstack_done480
    unless rx119_cstack, rx119_cstack_done480
    dec $I19
    set $P11, rx119_cstack[$I19]
  rx119_cstack_done480:
    pop rx119_rep, rx119_bstack
    pop rx119_pos, rx119_bstack
    pop $I19, rx119_bstack
    lt rx119_pos, -1, rx119_done475
    lt rx119_pos, 0, rx119_fail477
    eq $I19, 0, rx119_fail477
    nqp_islist $I20, rx119_cstack
    unless $I20, rx119_jump478
    elements $I18, rx119_bstack
    le $I18, 0, rx119_cut479
    dec $I18
    set $I18, rx119_bstack[$I18]
  rx119_cut479:
    assign rx119_cstack, $I18
  rx119_jump478:
    jump $I19
  rx119_done475:
    rx119_cur."!cursor_fail"()
    .return (rx119_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_41_1359292300.247") :anon :lex :outer("cuid_40_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx157_tgt
    .local int rx157_pos
    .local int rx157_off
    .local int rx157_eos
    .local int rx157_rep
    .local pmc rx157_cur
    .local pmc rx157_curclass
    .local pmc rx157_bstack
    .local pmc rx157_cstack
    (rx157_cur, rx157_tgt, rx157_pos, rx157_curclass, rx157_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx157_cur
    length rx157_eos, rx157_tgt
    eq $I19, 1, rx157_restart556
    gt rx157_pos, rx157_eos, rx157_fail557
    repr_get_attr_int $I11, self, rx157_curclass, "$!from"
    ne $I11, -1, rxscan158_done563
    goto rxscan158_scan562
  rxscan158_loop561:
    inc rx157_pos
    gt rx157_pos, rx157_eos, rx157_fail557
    repr_bind_attr_int rx157_cur, rx157_curclass, "$!from", rx157_pos
  rxscan158_scan562:
    nqp_rxmark rx157_bstack, rxscan158_loop561, rx157_pos, 0
  rxscan158_done563:
    nqp_rxmark rx157_bstack, rxquantr159_done565, rx157_pos, 0
  rxquantr159_loop564:
    ge rx157_pos, rx157_eos, rx157_fail557
    substr $S11, rx157_tgt, rx157_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx157_fail557
    inc rx157_pos
    nqp_rxpeek $I19, rx157_bstack, rxquantr159_done565
    inc $I19
    inc $I19
    set rx157_rep, rx157_bstack[$I19]
    nqp_rxcommit rx157_bstack, rxquantr159_done565
    inc rx157_rep
    nqp_rxmark rx157_bstack, rxquantr159_done565, rx157_pos, rx157_rep
    goto rxquantr159_loop564
  rxquantr159_done565:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt160_0567
    nqp_push_label $P11, alt160_1572
    nqp_rxmark rx157_bstack, alt160_end566, -1, 0
    rx157_cur."!alt"(rx157_pos, "alt_nfa__5_1359292301.505", $P11)
    goto rx157_fail557
  alt160_0567:
    add $I11, rx157_pos, 1
    gt $I11, rx157_eos, rx157_fail557
    substr $S10, rx157_tgt, rx157_pos, 1
    ne $S10, ucs4:"=", rx157_fail557
    add rx157_pos, 1
    nqp_rxmark rx157_bstack, rxquantr161_done569, rx157_pos, 0
  rxquantr161_loop568:
    add $I11, rx157_pos, 3
    gt $I11, rx157_eos, rx157_fail557
    substr $S10, rx157_tgt, rx157_pos, 3
    ne $S10, ucs4:"cut", rx157_fail557
    add rx157_pos, 3
    le rx157_pos, 0, rx157_fail557
    is_cclass $I11, .CCLASS_WORD, rx157_tgt, rx157_pos
    if $I11, rx157_fail557
    sub $I11, rx157_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx157_tgt, $I11
    unless $I11, rx157_fail557
    repr_bind_attr_int rx157_cur, rx157_curclass, "$!pos", rx157_pos
    $P11 = rx157_cur."panic"("Obsolete pod format, please use =begin/=end instead")
    repr_get_attr_int $I11, $P11, rx157_curclass, "$!pos"
    lt $I11, 0, rx157_fail557
    repr_get_attr_int rx157_pos, $P11, rx157_curclass, "$!pos"
    nqp_rxpeek $I19, rx157_bstack, rxquantr161_done569
    inc $I19
    inc $I19
    set rx157_rep, rx157_bstack[$I19]
    nqp_rxcommit rx157_bstack, rxquantr161_done569
    inc rx157_rep
  rxquantr161_done569:
    goto alt160_end566
  alt160_1572:
    ge rx157_pos, rx157_eos, rx157_fail557
    is_cclass $I11, .CCLASS_NEWLINE, rx157_tgt, rx157_pos
    unless $I11, rx157_fail557
    substr $S10, rx157_tgt, rx157_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx157_pos, $I11
    add rx157_pos, 1
    goto alt160_end566
  alt160_end566:
    nqp_rxcommit rx157_bstack, alt160_end566
    rx157_cur."!cursor_pass"(rx157_pos, 'backtrack'=>1)
    .return (rx157_cur)
  rx157_restart556:
    repr_get_attr_obj rx157_cstack, rx157_cur, rx157_curclass, "$!cstack"
  rx157_fail557:
    unless rx157_bstack, rx157_done555
    pop $I19, rx157_bstack
    if_null rx157_cstack, rx157_cstack_done560
    unless rx157_cstack, rx157_cstack_done560
    dec $I19
    set $P11, rx157_cstack[$I19]
  rx157_cstack_done560:
    pop rx157_rep, rx157_bstack
    pop rx157_pos, rx157_bstack
    pop $I19, rx157_bstack
    lt rx157_pos, -1, rx157_done555
    lt rx157_pos, 0, rx157_fail557
    eq $I19, 0, rx157_fail557
    nqp_islist $I20, rx157_cstack
    unless $I20, rx157_jump558
    elements $I18, rx157_bstack
    le $I18, 0, rx157_cut559
    dec $I18
    set $I18, rx157_bstack[$I18]
  rx157_cut559:
    assign rx157_cstack, $I18
  rx157_jump558:
    jump $I19
  rx157_done555:
    rx157_cur."!cursor_fail"()
    .return (rx157_cur) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_42_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 702
    .param pmc _lex_param_0 
    .const 'Sub' $P5061 = 'cuid_392_1359292300.247' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_393_1359292300.247' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_395_1359292300.247' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_396_1359292300.247' 
    capture_lex $P5061 
    .lex "$*IN_DECL", $P101 
    .lex "$*HAS_YOU_ARE_HERE", $P102 
    .lex "$*MAIN_SUB", $P103 
    .lex "$*UNIT", $P104 
    .lex "$*GLOBALish", $P105 
    .lex "$*PACKAGE", $P106 
    .lex "$*EXPORT", $P107 
    .lex utf8:"$\x{a2}", $P108 
    .lex "$/", $P109 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P104, $P5004
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P105, $P5005
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P106, $P5006
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P107, $P5007
    set self, _lex_param_0
    .local string rx167_tgt
    .local int rx167_pos
    .local int rx167_off
    .local int rx167_eos
    .local int rx167_rep
    .local pmc rx167_cur
    .local pmc rx167_curclass
    .local pmc rx167_bstack
    .local pmc rx167_cstack
    (rx167_cur, rx167_tgt, rx167_pos, rx167_curclass, rx167_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx167_cur
    length rx167_eos, rx167_tgt
    eq $I19, 1, rx167_restart582
    gt rx167_pos, rx167_eos, rx167_fail583
    repr_get_attr_int $I11, self, rx167_curclass, "$!from"
    ne $I11, -1, rxscan168_done589
    goto rxscan168_scan588
  rxscan168_loop587:
    inc rx167_pos
    gt rx167_pos, rx167_eos, rx167_fail583
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!from", rx167_pos
  rxscan168_scan588:
    nqp_rxmark rx167_bstack, rxscan168_loop587, rx167_pos, 0
  rxscan168_done589:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    box $P5008, ""
    set $P101, $P5008
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    box $P5009, 0
    set $P102, $P5009
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    unless_null $P103, fallback590
    nqp_get_sc_object $P5012, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$MAIN_SUB"]
    unless_null $P5010, fallback591
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5013
  fallback591:
    unless_null $P5010, vivi_169592
    die "Contextual $*MAIN_SUB not found"
    box $P5014, "Contextual $*MAIN_SUB not found"
    set $P5010, $P5014
  vivi_169592:
    set $P103, $P5010
  fallback590:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
.annotate 'line', 707
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback593
    nqp_get_sc_object $P5018, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback594
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5016, $P5019
  fallback594:
    unless_null $P5016, vivi_170595
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_170595:
    set $P5015, $P5016
  fallback593:
    $P5021 = $P5015."push_lexpad"($P109)
    set $P104, $P5021
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
.annotate 'line', 711
    find_dynamic_lex $P5022, "$*W"
    unless_null $P5022, fallback596
    nqp_get_sc_object $P5025, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$W"]
    unless_null $P5023, fallback597
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5023, $P5026
  fallback597:
    unless_null $P5023, vivi_171598
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5023, $P5027
  vivi_171598:
    set $P5022, $P5023
  fallback596:
    find_dynamic_lex $P5029, "%*HOW"
    unless_null $P5029, fallback599
    nqp_get_sc_object $P5032, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["%HOW"]
    unless_null $P5030, fallback600
    nqp_get_sc_object $P5034, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5033, $P5034
    new $P5035, 'Hash'
    set $P5033["%HOW"], $P5035
    set $P5030, $P5035
  fallback600:
    unless_null $P5030, vivi_172601
    die "Contextual %*HOW not found"
    box $P5036, "Contextual %*HOW not found"
    set $P5030, $P5036
  vivi_172601:
    set $P5029, $P5030
  fallback599:
    set $P5028, $P5029["knowhow"]
    unless_null $P5028, fallback602
    nqp_get_sc_object $P5037, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5028, $P5037
  fallback602:
    $P5038 = $P5022."pkg_create_mo"($P5028, "GLOBALish" :named("name"))
    set $P105, $P5038
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    $P5039 = $P108."MATCH"()
    set $P109, $P5039
    .const 'Sub' $P5040 = 'cuid_392_1359292300.247' 
    capture_lex $P5040
    $P5041 = $P5040()
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    unless_null $P105, fallback618
    nqp_get_sc_object $P5044, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5043, $P5044
    set $P5042, $P5043["$GLOBALish"]
    unless_null $P5042, fallback619
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5042, $P5045
  fallback619:
    unless_null $P5042, vivi_178620
    die "Contextual $*GLOBALish not found"
    box $P5046, "Contextual $*GLOBALish not found"
    set $P5042, $P5046
  vivi_178620:
    set $P105, $P5042
  fallback618:
    set $P106, $P105
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    $P5047 = $P108."MATCH"()
    set $P109, $P5047
    .const 'Sub' $P5048 = 'cuid_393_1359292300.247' 
    capture_lex $P5048
    $P5049 = $P5048()
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    unless_null $P107, fallback630
    nqp_get_sc_object $P5052, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5051, $P5052
    set $P5050, $P5051["$EXPORT"]
    unless_null $P5050, fallback631
    nqp_get_sc_object $P5053, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5050, $P5053
  fallback631:
    unless_null $P5050, vivi_182632
    die "Contextual $*EXPORT not found"
    box $P5054, "Contextual $*EXPORT not found"
    set $P5050, $P5054
  vivi_182632:
    set $P107, $P5050
  fallback630:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    $P5055 = $P108."MATCH"()
    set $P109, $P5055
    .const 'Sub' $P5056 = 'cuid_395_1359292300.247' 
    capture_lex $P5056
    $P5057 = $P5056()
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    store_lex unicode:"$\x{a2}", rx167_cur
    $P5058 = $P108."MATCH"()
    set $P109, $P5058
    .const 'Sub' $P5059 = 'cuid_396_1359292300.247' 
    capture_lex $P5059
    $P5060 = $P5059()
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."outerctx"()
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail583
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail583
    nqp_rxmark rx167_bstack, rxsubrule197_pass676, -1, 0
  rxsubrule197_pass676:
    rx167_cstack = rx167_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
  alt198_0678:
    nqp_rxmark rx167_bstack, alt198_1680, rx167_pos, 0
    lt rx167_pos, rx167_eos, rx167_fail583
    goto alt198_end677
  alt198_1680:
    repr_bind_attr_int rx167_cur, rx167_curclass, "$!pos", rx167_pos
    $P11 = rx167_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx167_curclass, "$!pos"
    lt $I11, 0, rx167_fail583
    repr_get_attr_int rx167_pos, $P11, rx167_curclass, "$!pos"
  alt198_end677:
    rx167_cur."!cursor_pass"(rx167_pos, "comp_unit", 'backtrack'=>1)
    .return (rx167_cur)
  rx167_restart582:
    repr_get_attr_obj rx167_cstack, rx167_cur, rx167_curclass, "$!cstack"
  rx167_fail583:
    unless rx167_bstack, rx167_done581
    pop $I19, rx167_bstack
    if_null rx167_cstack, rx167_cstack_done586
    unless rx167_cstack, rx167_cstack_done586
    dec $I19
    set $P11, rx167_cstack[$I19]
  rx167_cstack_done586:
    pop rx167_rep, rx167_bstack
    pop rx167_pos, rx167_bstack
    pop $I19, rx167_bstack
    lt rx167_pos, -1, rx167_done581
    lt rx167_pos, 0, rx167_fail583
    eq $I19, 0, rx167_fail583
    nqp_islist $I20, rx167_cstack
    unless $I20, rx167_jump584
    elements $I18, rx167_bstack
    le $I18, 0, rx167_cut585
    dec $I18
    set $I18, rx167_bstack[$I18]
  rx167_cut585:
    assign rx167_cstack, $I18
  rx167_jump584:
    jump $I19
  rx167_done581:
    rx167_cur."!cursor_fail"()
    .return (rx167_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_392_1359292300.247") :anon :lex :outer("cuid_42_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 712

.annotate 'line', 713
    find_dynamic_lex $P5002, "$*GLOBALish"
    unless_null $P5002, fallback603
    nqp_get_sc_object $P5005, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$GLOBALish"]
    unless_null $P5003, fallback604
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5006
  fallback604:
    unless_null $P5003, vivi_173605
    die "Contextual $*GLOBALish not found"
    box $P5007, "Contextual $*GLOBALish not found"
    set $P5003, $P5007
  vivi_173605:
    set $P5002, $P5003
  fallback603:
    get_how $P5001, $P5002
    find_dynamic_lex $P5008, "$*GLOBALish"
    unless_null $P5008, fallback606
    nqp_get_sc_object $P5011, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$GLOBALish"]
    unless_null $P5009, fallback607
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5012
  fallback607:
    unless_null $P5009, vivi_174608
    die "Contextual $*GLOBALish not found"
    box $P5013, "Contextual $*GLOBALish not found"
    set $P5009, $P5013
  vivi_174608:
    set $P5008, $P5009
  fallback606:
    $P5001."compose"($P5008)
.annotate 'line', 714
    find_dynamic_lex $P5014, "$*W"
    unless_null $P5014, fallback609
    nqp_get_sc_object $P5017, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["$W"]
    unless_null $P5015, fallback610
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5015, $P5018
  fallback610:
    unless_null $P5015, vivi_175611
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5015, $P5019
  vivi_175611:
    set $P5014, $P5015
  fallback609:
    find_dynamic_lex $P5020, "$*UNIT"
    unless_null $P5020, fallback612
    nqp_get_sc_object $P5023, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$UNIT"]
    unless_null $P5021, fallback613
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5021, $P5024
  fallback613:
    unless_null $P5021, vivi_176614
    die "Contextual $*UNIT not found"
    box $P5025, "Contextual $*UNIT not found"
    set $P5021, $P5025
  vivi_176614:
    set $P5020, $P5021
  fallback612:
    find_dynamic_lex $P5026, "$*GLOBALish"
    unless_null $P5026, fallback615
    nqp_get_sc_object $P5029, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$GLOBALish"]
    unless_null $P5027, fallback616
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5027, $P5030
  fallback616:
    unless_null $P5027, vivi_177617
    die "Contextual $*GLOBALish not found"
    box $P5031, "Contextual $*GLOBALish not found"
    set $P5027, $P5031
  vivi_177617:
    set $P5026, $P5027
  fallback615:
    $P5032 = $P5014."install_lexical_symbol"($P5020, "GLOBALish", $P5026)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_393_1359292300.247") :anon :lex :outer("cuid_42_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 719

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback621
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback622
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5005
  fallback622:
    unless_null $P5002, vivi_179623
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_179623:
    set $P5001, $P5002
  fallback621:
    find_dynamic_lex $P5007, "$*UNIT"
    unless_null $P5007, fallback624
    nqp_get_sc_object $P5010, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$UNIT"]
    unless_null $P5008, fallback625
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5011
  fallback625:
    unless_null $P5008, vivi_180626
    die "Contextual $*UNIT not found"
    box $P5012, "Contextual $*UNIT not found"
    set $P5008, $P5012
  vivi_180626:
    set $P5007, $P5008
  fallback624:
    find_dynamic_lex $P5013, "$*PACKAGE"
    unless_null $P5013, fallback627
    nqp_get_sc_object $P5016, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$PACKAGE"]
    unless_null $P5014, fallback628
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5014, $P5017
  fallback628:
    unless_null $P5014, vivi_181629
    die "Contextual $*PACKAGE not found"
    box $P5018, "Contextual $*PACKAGE not found"
    set $P5014, $P5018
  vivi_181629:
    set $P5013, $P5014
  fallback627:
    $P5019 = $P5001."install_lexical_symbol"($P5007, "$?PACKAGE", $P5013)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_395_1359292300.247") :anon :lex :outer("cuid_42_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 723
    .const 'Sub' $P5017 = 'cuid_394_1359292300.247' 
    capture_lex $P5017 
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback635
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback636
    nqp_get_sc_object $P5008, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback636:
    unless_null $P5004, vivi_184637
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_184637:
    set $P5003, $P5004
  fallback635:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback638
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5011
  fallback638:
    set $P5001, $P5002["setting"]
    unless_null $P5001, fallback639
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5012
  fallback639:
    set $S5001, $P5001
    iseq $I5001, $S5001, "NULL"
    box $P5016, $I5001
    set $P5015, $P5016
    if $I5001 goto unless183_end634 
    .const 'Sub' $P5013 = 'cuid_394_1359292300.247' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  unless183_end634:
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_394_1359292300.247") :anon :lex :outer("cuid_395_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 724
    .lex "$DEFAULT", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 725
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback640
    nqp_get_sc_object $P5005, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback641
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5006
  fallback641:
    unless_null $P5003, vivi_185642
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_185642:
    set $P5002, $P5003
  fallback640:
    find_dynamic_lex $P5009, "%*HOW"
    unless_null $P5009, fallback643
    nqp_get_sc_object $P5012, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["%HOW"]
    unless_null $P5010, fallback644
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5013, $P5014
    new $P5015, 'Hash'
    set $P5013["%HOW"], $P5015
    set $P5010, $P5015
  fallback644:
    unless_null $P5010, vivi_186645
    die "Contextual %*HOW not found"
    box $P5016, "Contextual %*HOW not found"
    set $P5010, $P5016
  vivi_186645:
    set $P5009, $P5010
  fallback643:
    set $P5008, $P5009["knowhow"]
    unless_null $P5008, fallback646
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5017
  fallback646:
    $P5018 = $P5002."pkg_create_mo"($P5008, "EXPORT" :named("name"))
    store_dynamic_lex "$*EXPORT", $P5018
.annotate 'line', 726
    find_dynamic_lex $P5020, "$*EXPORT"
    unless_null $P5020, fallback647
    nqp_get_sc_object $P5023, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$EXPORT"]
    unless_null $P5021, fallback648
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5021, $P5024
  fallback648:
    unless_null $P5021, vivi_187649
    die "Contextual $*EXPORT not found"
    box $P5025, "Contextual $*EXPORT not found"
    set $P5021, $P5025
  vivi_187649:
    set $P5020, $P5021
  fallback647:
    get_how $P5019, $P5020
    find_dynamic_lex $P5026, "$*EXPORT"
    unless_null $P5026, fallback650
    nqp_get_sc_object $P5029, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$EXPORT"]
    unless_null $P5027, fallback651
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5027, $P5030
  fallback651:
    unless_null $P5027, vivi_188652
    die "Contextual $*EXPORT not found"
    box $P5031, "Contextual $*EXPORT not found"
    set $P5027, $P5031
  vivi_188652:
    set $P5026, $P5027
  fallback650:
    $P5019."compose"($P5026)
.annotate 'line', 727
    find_dynamic_lex $P5032, "$*W"
    unless_null $P5032, fallback653
    nqp_get_sc_object $P5035, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["$W"]
    unless_null $P5033, fallback654
    nqp_get_sc_object $P5036, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5033, $P5036
  fallback654:
    unless_null $P5033, vivi_189655
    die "Contextual $*W not found"
    box $P5037, "Contextual $*W not found"
    set $P5033, $P5037
  vivi_189655:
    set $P5032, $P5033
  fallback653:
    find_dynamic_lex $P5038, "$*UNIT"
    unless_null $P5038, fallback656
    nqp_get_sc_object $P5041, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5040, $P5041
    set $P5039, $P5040["$UNIT"]
    unless_null $P5039, fallback657
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5039, $P5042
  fallback657:
    unless_null $P5039, vivi_190658
    die "Contextual $*UNIT not found"
    box $P5043, "Contextual $*UNIT not found"
    set $P5039, $P5043
  vivi_190658:
    set $P5038, $P5039
  fallback656:
    find_dynamic_lex $P5044, "$*EXPORT"
    unless_null $P5044, fallback659
    nqp_get_sc_object $P5047, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5046, $P5047
    set $P5045, $P5046["$EXPORT"]
    unless_null $P5045, fallback660
    nqp_get_sc_object $P5048, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5045, $P5048
  fallback660:
    unless_null $P5045, vivi_191661
    die "Contextual $*EXPORT not found"
    box $P5049, "Contextual $*EXPORT not found"
    set $P5045, $P5049
  vivi_191661:
    set $P5044, $P5045
  fallback659:
    $P5032."install_lexical_symbol"($P5038, "EXPORT", $P5044)
.annotate 'line', 728
    find_dynamic_lex $P5050, "$*W"
    unless_null $P5050, fallback662
    nqp_get_sc_object $P5053, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$W"]
    unless_null $P5051, fallback663
    nqp_get_sc_object $P5054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5051, $P5054
  fallback663:
    unless_null $P5051, vivi_192664
    die "Contextual $*W not found"
    box $P5055, "Contextual $*W not found"
    set $P5051, $P5055
  vivi_192664:
    set $P5050, $P5051
  fallback662:
    find_dynamic_lex $P5057, "%*HOW"
    unless_null $P5057, fallback665
    nqp_get_sc_object $P5060, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["%HOW"]
    unless_null $P5058, fallback666
    nqp_get_sc_object $P5062, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5061, $P5062
    new $P5063, 'Hash'
    set $P5061["%HOW"], $P5063
    set $P5058, $P5063
  fallback666:
    unless_null $P5058, vivi_193667
    die "Contextual %*HOW not found"
    box $P5064, "Contextual %*HOW not found"
    set $P5058, $P5064
  vivi_193667:
    set $P5057, $P5058
  fallback665:
    set $P5056, $P5057["knowhow"]
    unless_null $P5056, fallback668
    nqp_get_sc_object $P5065, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5056, $P5065
  fallback668:
    $P5066 = $P5050."pkg_create_mo"($P5056, "DEFAULT" :named("name"))
    set $P101, $P5066
.annotate 'line', 729
    get_how $P5067, $P101
    $P5067."compose"($P101)
    find_dynamic_lex $P5069, "$*EXPORT"
    unless_null $P5069, fallback669
    nqp_get_sc_object $P5072, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5071, $P5072
    set $P5070, $P5071["$EXPORT"]
    unless_null $P5070, fallback670
    nqp_get_sc_object $P5073, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5070, $P5073
  fallback670:
    unless_null $P5070, vivi_194671
    die "Contextual $*EXPORT not found"
    box $P5074, "Contextual $*EXPORT not found"
    set $P5070, $P5074
  vivi_194671:
    set $P5069, $P5070
  fallback669:
    get_who $P5068, $P5069
    set $P5068["DEFAULT"], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_396_1359292300.247") :anon :lex :outer("cuid_42_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 734

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback672
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback673
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5005
  fallback673:
    unless_null $P5002, vivi_195674
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_195674:
    set $P5001, $P5002
  fallback672:
    $P5007 = $P5001."add_initializations"()
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_43_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 742
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx201_tgt
    .local int rx201_pos
    .local int rx201_off
    .local int rx201_eos
    .local int rx201_rep
    .local pmc rx201_cur
    .local pmc rx201_curclass
    .local pmc rx201_bstack
    .local pmc rx201_cstack
    (rx201_cur, rx201_tgt, rx201_pos, rx201_curclass, rx201_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx201_cur
    length rx201_eos, rx201_tgt
    eq $I19, 1, rx201_restart684
    gt rx201_pos, rx201_eos, rx201_fail685
    repr_get_attr_int $I11, self, rx201_curclass, "$!from"
    ne $I11, -1, rxscan202_done691
    goto rxscan202_scan690
  rxscan202_loop689:
    inc rx201_pos
    gt rx201_pos, rx201_eos, rx201_fail685
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!from", rx201_pos
  rxscan202_scan690:
    nqp_rxmark rx201_bstack, rxscan202_loop689, rx201_pos, 0
  rxscan202_done691:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt203_0693
    nqp_push_label $P11, alt203_1697
    nqp_rxmark rx201_bstack, alt203_end692, -1, 0
    rx201_cur."!alt"(rx201_pos, "alt_nfa__7_1359292301.601", $P11)
    goto rx201_fail685
  alt203_0693:
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail685
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    lt rx201_pos, rx201_eos, rx201_fail685
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail685
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    goto alt203_end692
  alt203_1697:
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail685
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    nqp_rxmark rx201_bstack, rxquantr208_done700, rx201_pos, 0
  rxquantr208_loop699:
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."statement"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail685
    nqp_rxmark rx201_bstack, rxsubrule209_pass701, -1, 0
  rxsubrule209_pass701:
    rx201_cstack = rx201_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."eat_terminator"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail685
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail685
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    nqp_rxpeek $I19, rx201_bstack, rxquantr208_done700
    inc $I19
    inc $I19
    set rx201_rep, rx201_bstack[$I19]
    nqp_rxcommit rx201_bstack, rxquantr208_done700
    inc rx201_rep
    nqp_rxmark rx201_bstack, rxquantr208_done700, rx201_pos, rx201_rep
    goto rxquantr208_loop699
  rxquantr208_done700:
    repr_bind_attr_int rx201_cur, rx201_curclass, "$!pos", rx201_pos
    $P11 = rx201_cur."ws"()
    repr_get_attr_int $I11, $P11, rx201_curclass, "$!pos"
    lt $I11, 0, rx201_fail685
    repr_get_attr_int rx201_pos, $P11, rx201_curclass, "$!pos"
    goto alt203_end692
  alt203_end692:
    rx201_cur."!cursor_pass"(rx201_pos, "statementlist", 'backtrack'=>1)
    .return (rx201_cur)
  rx201_restart684:
    repr_get_attr_obj rx201_cstack, rx201_cur, rx201_curclass, "$!cstack"
  rx201_fail685:
    unless rx201_bstack, rx201_done683
    pop $I19, rx201_bstack
    if_null rx201_cstack, rx201_cstack_done688
    unless rx201_cstack, rx201_cstack_done688
    dec $I19
    set $P11, rx201_cstack[$I19]
  rx201_cstack_done688:
    pop rx201_rep, rx201_bstack
    pop rx201_pos, rx201_bstack
    pop $I19, rx201_bstack
    lt rx201_pos, -1, rx201_done683
    lt rx201_pos, 0, rx201_fail685
    eq $I19, 0, rx201_fail685
    nqp_islist $I20, rx201_cstack
    unless $I20, rx201_jump686
    elements $I18, rx201_bstack
    le $I18, 0, rx201_cut687
    dec $I18
    set $I18, rx201_bstack[$I18]
  rx201_cut687:
    assign rx201_cstack, $I18
  rx201_jump686:
    jump $I19
  rx201_done683:
    rx201_cur."!cursor_fail"()
    .return (rx201_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_44_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 747
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_45_1359292300.247' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx213_tgt
    .local int rx213_pos
    .local int rx213_off
    .local int rx213_eos
    .local int rx213_rep
    .local pmc rx213_cur
    .local pmc rx213_curclass
    .local pmc rx213_bstack
    .local pmc rx213_cstack
    (rx213_cur, rx213_tgt, rx213_pos, rx213_curclass, rx213_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx213_cur
    length rx213_eos, rx213_tgt
    eq $I19, 1, rx213_restart707
    gt rx213_pos, rx213_eos, rx213_fail708
    repr_get_attr_int $I11, self, rx213_curclass, "$!from"
    ne $I11, -1, rxscan214_done714
    goto rxscan214_scan713
  rxscan214_loop712:
    inc rx213_pos
    gt rx213_pos, rx213_eos, rx213_fail708
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!from", rx213_pos
  rxscan214_scan713:
    nqp_rxmark rx213_bstack, rxscan214_loop712, rx213_pos, 0
  rxscan214_done714:
    .const 'Sub' $P5001 = 'cuid_45_1359292300.247' 
    capture_lex $P5001
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    ge $I11, 0, rx213_fail708
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt220_0733
    nqp_push_label $P11, alt220_1735
    nqp_rxmark rx213_bstack, alt220_end732, -1, 0
    rx213_cur."!alt"(rx213_pos, "alt_nfa__9_1359292301.62", $P11)
    goto rx213_fail708
  alt220_0733:
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."statement_control"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail708
    nqp_rxmark rx213_bstack, rxsubrule221_pass734, -1, 0
  rxsubrule221_pass734:
    rx213_cstack = rx213_cur."!cursor_capture"($P11, "statement_control")
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    goto alt220_end732
  alt220_1735:
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail708
    nqp_rxmark rx213_bstack, rxsubrule222_pass736, -1, 0
  rxsubrule222_pass736:
    rx213_cstack = rx213_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."ws"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail708
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    nqp_rxmark rx213_bstack, rxquantr224_done739, rx213_pos, 0
  rxquantr224_loop738:
  alt225_0741:
    nqp_rxmark rx213_bstack, alt225_1742, rx213_pos, 0
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail708
    goto alt225_end740
  alt225_1742:
    nqp_rxmark rx213_bstack, alt225_2748, rx213_pos, 0
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."statement_mod_cond"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail708
    nqp_rxmark rx213_bstack, rxsubrule226_pass743, -1, 0
  rxsubrule226_pass743:
    rx213_cstack = rx213_cur."!cursor_capture"($P11, "statement_mod_cond")
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    nqp_rxmark rx213_bstack, rxquantr227_done745, rx213_pos, 0
  rxquantr227_loop744:
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail708
    goto rxsubrule228_pass746
  rxsubrule228_back747:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail708
  rxsubrule228_pass746:
    rx213_cstack = rx213_cur."!cursor_capture"($P11, "statement_mod_loop")
    set_addr $I11, rxsubrule228_back747
    push rx213_bstack, $I11
    push rx213_bstack, 0
    push rx213_bstack, rx213_pos
    elements $I11, rx213_cstack
    push rx213_bstack, $I11
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
    nqp_rxpeek $I19, rx213_bstack, rxquantr227_done745
    inc $I19
    inc $I19
    set rx213_rep, rx213_bstack[$I19]
    nqp_rxcommit rx213_bstack, rxquantr227_done745
    inc rx213_rep
  rxquantr227_done745:
    goto alt225_end740
  alt225_2748:
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!pos", rx213_pos
    $P11 = rx213_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx213_curclass, "$!pos"
    lt $I11, 0, rx213_fail708
    nqp_rxmark rx213_bstack, rxsubrule229_pass749, -1, 0
  rxsubrule229_pass749:
    rx213_cstack = rx213_cur."!cursor_capture"($P11, "statement_mod_loop")
    repr_get_attr_int rx213_pos, $P11, rx213_curclass, "$!pos"
  alt225_end740:
    nqp_rxpeek $I19, rx213_bstack, rxquantr224_done739
    inc $I19
    inc $I19
    set rx213_rep, rx213_bstack[$I19]
    nqp_rxcommit rx213_bstack, rxquantr224_done739
    inc rx213_rep
  rxquantr224_done739:
    goto alt220_end732
  alt220_end732:
    nqp_rxcommit rx213_bstack, alt220_end732
    rx213_cur."!cursor_pass"(rx213_pos, "statement", 'backtrack'=>1)
    .return (rx213_cur)
  rx213_restart707:
    repr_get_attr_obj rx213_cstack, rx213_cur, rx213_curclass, "$!cstack"
  rx213_fail708:
    unless rx213_bstack, rx213_done706
    pop $I19, rx213_bstack
    if_null rx213_cstack, rx213_cstack_done711
    unless rx213_cstack, rx213_cstack_done711
    dec $I19
    set $P11, rx213_cstack[$I19]
  rx213_cstack_done711:
    pop rx213_rep, rx213_bstack
    pop rx213_pos, rx213_bstack
    pop $I19, rx213_bstack
    lt rx213_pos, -1, rx213_done706
    lt rx213_pos, 0, rx213_fail708
    eq $I19, 0, rx213_fail708
    nqp_islist $I20, rx213_cstack
    unless $I20, rx213_jump709
    elements $I18, rx213_bstack
    le $I18, 0, rx213_cut710
    dec $I18
    set $I18, rx213_bstack[$I18]
  rx213_cut710:
    assign rx213_cstack, $I18
  rx213_jump709:
    jump $I19
  rx213_done706:
    rx213_cur."!cursor_fail"()
    .return (rx213_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_45_1359292300.247") :anon :lex :outer("cuid_44_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx215_tgt
    .local int rx215_pos
    .local int rx215_off
    .local int rx215_eos
    .local int rx215_rep
    .local pmc rx215_cur
    .local pmc rx215_curclass
    .local pmc rx215_bstack
    .local pmc rx215_cstack
    (rx215_cur, rx215_tgt, rx215_pos, rx215_curclass, rx215_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx215_cur
    length rx215_eos, rx215_tgt
    eq $I19, 1, rx215_restart717
    gt rx215_pos, rx215_eos, rx215_fail718
    repr_get_attr_int $I11, self, rx215_curclass, "$!from"
    ne $I11, -1, rxscan216_done724
    goto rxscan216_scan723
  rxscan216_loop722:
    inc rx215_pos
    gt rx215_pos, rx215_eos, rx215_fail718
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!from", rx215_pos
  rxscan216_scan723:
    nqp_rxmark rx215_bstack, rxscan216_loop722, rx215_pos, 0
  rxscan216_done724:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt217_0726
    nqp_push_label $P11, alt217_1730
    nqp_rxmark rx215_bstack, alt217_end725, -1, 0
    rx215_cur."!alt"(rx215_pos, "alt_nfa__8_1359292301.607", $P11)
    goto rx215_fail718
  alt217_0726:
  alt218_0728:
    nqp_rxmark rx215_bstack, alt218_1729, rx215_pos, 0
    add $I11, rx215_pos, 1
    gt $I11, rx215_eos, rx215_fail718
    substr $S10, rx215_tgt, rx215_pos, 1
    ne $S10, ucs4:"]", rx215_fail718
    add rx215_pos, 1
    goto alt218_end727
  alt218_1729:
    ge rx215_pos, rx215_eos, rx215_fail718
    substr $S11, rx215_tgt, rx215_pos, 1
    index $I11, ucs4:")}", $S11
    lt $I11, 0, rx215_fail718
    inc rx215_pos
  alt218_end727:
    goto alt217_end725
  alt217_1730:
    lt rx215_pos, rx215_eos, rx215_fail718
    goto alt217_end725
  alt217_end725:
    rx215_cur."!cursor_pass"(rx215_pos, 'backtrack'=>1)
    .return (rx215_cur)
  rx215_restart717:
    repr_get_attr_obj rx215_cstack, rx215_cur, rx215_curclass, "$!cstack"
  rx215_fail718:
    unless rx215_bstack, rx215_done716
    pop $I19, rx215_bstack
    if_null rx215_cstack, rx215_cstack_done721
    unless rx215_cstack, rx215_cstack_done721
    dec $I19
    set $P11, rx215_cstack[$I19]
  rx215_cstack_done721:
    pop rx215_rep, rx215_bstack
    pop rx215_pos, rx215_bstack
    pop $I19, rx215_bstack
    lt rx215_pos, -1, rx215_done716
    lt rx215_pos, 0, rx215_fail718
    eq $I19, 0, rx215_fail718
    nqp_islist $I20, rx215_cstack
    unless $I20, rx215_jump719
    elements $I18, rx215_bstack
    le $I18, 0, rx215_cut720
    dec $I18
    set $I18, rx215_bstack[$I18]
  rx215_cut720:
    assign rx215_cstack, $I18
  rx215_jump719:
    jump $I19
  rx215_done716:
    rx215_cur."!cursor_fail"()
    .return (rx215_cur) 
.end
.HLL "nqp"
.namespace []
.sub "eat_terminator" :subid("cuid_46_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 760
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx230_tgt
    .local int rx230_pos
    .local int rx230_off
    .local int rx230_eos
    .local int rx230_rep
    .local pmc rx230_cur
    .local pmc rx230_curclass
    .local pmc rx230_bstack
    .local pmc rx230_cstack
    (rx230_cur, rx230_tgt, rx230_pos, rx230_curclass, rx230_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx230_cur
    length rx230_eos, rx230_tgt
    eq $I19, 1, rx230_restart752
    gt rx230_pos, rx230_eos, rx230_fail753
    repr_get_attr_int $I11, self, rx230_curclass, "$!from"
    ne $I11, -1, rxscan231_done759
    goto rxscan231_scan758
  rxscan231_loop757:
    inc rx230_pos
    gt rx230_pos, rx230_eos, rx230_fail753
    repr_bind_attr_int rx230_cur, rx230_curclass, "$!from", rx230_pos
  rxscan231_scan758:
    nqp_rxmark rx230_bstack, rxscan231_loop757, rx230_pos, 0
  rxscan231_done759:
  alt232_0761:
    nqp_rxmark rx230_bstack, alt232_1762, rx230_pos, 0
    add $I11, rx230_pos, 1
    gt $I11, rx230_eos, rx230_fail753
    substr $S10, rx230_tgt, rx230_pos, 1
    ne $S10, ucs4:";", rx230_fail753
    add rx230_pos, 1
    goto alt232_end760
  alt232_1762:
    nqp_rxmark rx230_bstack, alt232_2763, rx230_pos, 0
    repr_bind_attr_int rx230_cur, rx230_curclass, "$!pos", rx230_pos
    $P11 = rx230_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx230_curclass, "$!pos"
    lt $I11, 0, rx230_fail753
    goto alt232_end760
  alt232_2763:
    nqp_rxmark rx230_bstack, alt232_3764, rx230_pos, 0
    repr_bind_attr_int rx230_cur, rx230_curclass, "$!pos", rx230_pos
    $P11 = rx230_cur."terminator"()
    repr_get_attr_int $I11, $P11, rx230_curclass, "$!pos"
    lt $I11, 0, rx230_fail753
    goto alt232_end760
  alt232_3764:
    lt rx230_pos, rx230_eos, rx230_fail753
  alt232_end760:
    rx230_cur."!cursor_pass"(rx230_pos, "eat_terminator", 'backtrack'=>1)
    .return (rx230_cur)
  rx230_restart752:
    repr_get_attr_obj rx230_cstack, rx230_cur, rx230_curclass, "$!cstack"
  rx230_fail753:
    unless rx230_bstack, rx230_done751
    pop $I19, rx230_bstack
    if_null rx230_cstack, rx230_cstack_done756
    unless rx230_cstack, rx230_cstack_done756
    dec $I19
    set $P11, rx230_cstack[$I19]
  rx230_cstack_done756:
    pop rx230_rep, rx230_bstack
    pop rx230_pos, rx230_bstack
    pop $I19, rx230_bstack
    lt rx230_pos, -1, rx230_done751
    lt rx230_pos, 0, rx230_fail753
    eq $I19, 0, rx230_fail753
    nqp_islist $I20, rx230_cstack
    unless $I20, rx230_jump754
    elements $I18, rx230_bstack
    le $I18, 0, rx230_cut755
    dec $I18
    set $I18, rx230_bstack[$I18]
  rx230_cut755:
    assign rx230_cstack, $I18
  rx230_jump754:
    jump $I19
  rx230_done751:
    rx230_cur."!cursor_fail"()
    .return (rx230_cur) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_47_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 767
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx234_tgt
    .local int rx234_pos
    .local int rx234_off
    .local int rx234_eos
    .local int rx234_rep
    .local pmc rx234_cur
    .local pmc rx234_curclass
    .local pmc rx234_bstack
    .local pmc rx234_cstack
    (rx234_cur, rx234_tgt, rx234_pos, rx234_curclass, rx234_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx234_cur
    length rx234_eos, rx234_tgt
    eq $I19, 1, rx234_restart768
    gt rx234_pos, rx234_eos, rx234_fail769
    repr_get_attr_int $I11, self, rx234_curclass, "$!from"
    ne $I11, -1, rxscan235_done775
    goto rxscan235_scan774
  rxscan235_loop773:
    inc rx234_pos
    gt rx234_pos, rx234_eos, rx234_fail769
    repr_bind_attr_int rx234_cur, rx234_curclass, "$!from", rx234_pos
  rxscan235_scan774:
    nqp_rxmark rx234_bstack, rxscan235_loop773, rx234_pos, 0
  rxscan235_done775:
    repr_bind_attr_int rx234_cur, rx234_curclass, "$!pos", rx234_pos
    $P11 = rx234_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx234_curclass, "$!pos"
    lt $I11, 0, rx234_fail769
    nqp_rxmark rx234_bstack, rxsubrule236_pass776, -1, 0
  rxsubrule236_pass776:
    rx234_cstack = rx234_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx234_pos, $P11, rx234_curclass, "$!pos"
    repr_bind_attr_int rx234_cur, rx234_curclass, "$!pos", rx234_pos
    $P11 = rx234_cur."ws"()
    repr_get_attr_int $I11, $P11, rx234_curclass, "$!pos"
    lt $I11, 0, rx234_fail769
    repr_get_attr_int rx234_pos, $P11, rx234_curclass, "$!pos"
    repr_bind_attr_int rx234_cur, rx234_curclass, "$!pos", rx234_pos
    $P11 = rx234_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx234_curclass, "$!pos"
    lt $I11, 0, rx234_fail769
    nqp_rxmark rx234_bstack, rxsubrule238_pass778, -1, 0
  rxsubrule238_pass778:
    rx234_cstack = rx234_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx234_pos, $P11, rx234_curclass, "$!pos"
    rx234_cur."!cursor_pass"(rx234_pos, "xblock", 'backtrack'=>1)
    .return (rx234_cur)
  rx234_restart768:
    repr_get_attr_obj rx234_cstack, rx234_cur, rx234_curclass, "$!cstack"
  rx234_fail769:
    unless rx234_bstack, rx234_done767
    pop $I19, rx234_bstack
    if_null rx234_cstack, rx234_cstack_done772
    unless rx234_cstack, rx234_cstack_done772
    dec $I19
    set $P11, rx234_cstack[$I19]
  rx234_cstack_done772:
    pop rx234_rep, rx234_bstack
    pop rx234_pos, rx234_bstack
    pop $I19, rx234_bstack
    lt rx234_pos, -1, rx234_done767
    lt rx234_pos, 0, rx234_fail769
    eq $I19, 0, rx234_fail769
    nqp_islist $I20, rx234_cstack
    unless $I20, rx234_jump770
    elements $I18, rx234_bstack
    le $I18, 0, rx234_cut771
    dec $I18
    set $I18, rx234_bstack[$I18]
  rx234_cut771:
    assign rx234_cstack, $I18
  rx234_jump770:
    jump $I19
  rx234_done767:
    rx234_cur."!cursor_fail"()
    .return (rx234_cur) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_48_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 771
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx239_tgt
    .local int rx239_pos
    .local int rx239_off
    .local int rx239_eos
    .local int rx239_rep
    .local pmc rx239_cur
    .local pmc rx239_curclass
    .local pmc rx239_bstack
    .local pmc rx239_cstack
    (rx239_cur, rx239_tgt, rx239_pos, rx239_curclass, rx239_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx239_cur
    length rx239_eos, rx239_tgt
    eq $I19, 1, rx239_restart781
    gt rx239_pos, rx239_eos, rx239_fail782
    repr_get_attr_int $I11, self, rx239_curclass, "$!from"
    ne $I11, -1, rxscan240_done788
    goto rxscan240_scan787
  rxscan240_loop786:
    inc rx239_pos
    gt rx239_pos, rx239_eos, rx239_fail782
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!from", rx239_pos
  rxscan240_scan787:
    nqp_rxmark rx239_bstack, rxscan240_loop786, rx239_pos, 0
  rxscan240_done788:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt241_0790
    nqp_push_label $P11, alt241_1796
    nqp_push_label $P11, alt241_2799
    nqp_rxmark rx239_bstack, alt241_end789, -1, 0
    rx239_cur."!alt"(rx239_pos, "alt_nfa__10_1359292301.646", $P11)
    goto rx239_fail782
  alt241_0790:
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail782
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail782
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."signature"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail782
    nqp_rxmark rx239_bstack, rxsubrule244_pass793, -1, 0
  rxsubrule244_pass793:
    rx239_cstack = rx239_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."ws"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail782
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail782
    nqp_rxmark rx239_bstack, rxsubrule246_pass795, -1, 0
  rxsubrule246_pass795:
    rx239_cstack = rx239_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    goto alt241_end789
  alt241_1796:
    ge rx239_pos, rx239_eos, rx239_fail782
    substr $S11, rx239_tgt, rx239_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx239_fail782
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail782
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail782
    nqp_rxmark rx239_bstack, rxsubrule248_pass798, -1, 0
  rxsubrule248_pass798:
    rx239_cstack = rx239_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    goto alt241_end789
  alt241_2799:
    repr_bind_attr_int rx239_cur, rx239_curclass, "$!pos", rx239_pos
    $P11 = rx239_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx239_curclass, "$!pos"
    lt $I11, 0, rx239_fail782
    repr_get_attr_int rx239_pos, $P11, rx239_curclass, "$!pos"
    goto alt241_end789
  alt241_end789:
    rx239_cur."!cursor_pass"(rx239_pos, "pblock", 'backtrack'=>1)
    .return (rx239_cur)
  rx239_restart781:
    repr_get_attr_obj rx239_cstack, rx239_cur, rx239_curclass, "$!cstack"
  rx239_fail782:
    unless rx239_bstack, rx239_done780
    pop $I19, rx239_bstack
    if_null rx239_cstack, rx239_cstack_done785
    unless rx239_cstack, rx239_cstack_done785
    dec $I19
    set $P11, rx239_cstack[$I19]
  rx239_cstack_done785:
    pop rx239_rep, rx239_bstack
    pop rx239_pos, rx239_bstack
    pop $I19, rx239_bstack
    lt rx239_pos, -1, rx239_done780
    lt rx239_pos, 0, rx239_fail782
    eq $I19, 0, rx239_fail782
    nqp_islist $I20, rx239_cstack
    unless $I20, rx239_jump783
    elements $I18, rx239_bstack
    le $I18, 0, rx239_cut784
    dec $I18
    set $I18, rx239_bstack[$I18]
  rx239_cut784:
    assign rx239_cstack, $I18
  rx239_jump783:
    jump $I19
  rx239_done780:
    rx239_cur."!cursor_fail"()
    .return (rx239_cur) 
.end
.HLL "nqp"
.namespace []
.sub "lambda" :subid("cuid_49_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 782
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx250_tgt
    .local int rx250_pos
    .local int rx250_off
    .local int rx250_eos
    .local int rx250_rep
    .local pmc rx250_cur
    .local pmc rx250_curclass
    .local pmc rx250_bstack
    .local pmc rx250_cstack
    (rx250_cur, rx250_tgt, rx250_pos, rx250_curclass, rx250_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx250_cur
    length rx250_eos, rx250_tgt
    eq $I19, 1, rx250_restart803
    gt rx250_pos, rx250_eos, rx250_fail804
    repr_get_attr_int $I11, self, rx250_curclass, "$!from"
    ne $I11, -1, rxscan251_done810
    goto rxscan251_scan809
  rxscan251_loop808:
    inc rx250_pos
    gt rx250_pos, rx250_eos, rx250_fail804
    repr_bind_attr_int rx250_cur, rx250_curclass, "$!from", rx250_pos
  rxscan251_scan809:
    nqp_rxmark rx250_bstack, rxscan251_loop808, rx250_pos, 0
  rxscan251_done810:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt252_0812
    nqp_push_label $P11, alt252_1813
    nqp_rxmark rx250_bstack, alt252_end811, -1, 0
    rx250_cur."!alt"(rx250_pos, "alt_nfa__11_1359292301.651", $P11)
    goto rx250_fail804
  alt252_0812:
    add $I11, rx250_pos, 2
    gt $I11, rx250_eos, rx250_fail804
    substr $S10, rx250_tgt, rx250_pos, 2
    ne $S10, ucs4:"->", rx250_fail804
    add rx250_pos, 2
    goto alt252_end811
  alt252_1813:
    add $I11, rx250_pos, 3
    gt $I11, rx250_eos, rx250_fail804
    substr $S10, rx250_tgt, rx250_pos, 3
    ne $S10, ucs4:"<->", rx250_fail804
    add rx250_pos, 3
    goto alt252_end811
  alt252_end811:
    rx250_cur."!cursor_pass"(rx250_pos, "lambda", 'backtrack'=>1)
    .return (rx250_cur)
  rx250_restart803:
    repr_get_attr_obj rx250_cstack, rx250_cur, rx250_curclass, "$!cstack"
  rx250_fail804:
    unless rx250_bstack, rx250_done802
    pop $I19, rx250_bstack
    if_null rx250_cstack, rx250_cstack_done807
    unless rx250_cstack, rx250_cstack_done807
    dec $I19
    set $P11, rx250_cstack[$I19]
  rx250_cstack_done807:
    pop rx250_rep, rx250_bstack
    pop rx250_pos, rx250_bstack
    pop $I19, rx250_bstack
    lt rx250_pos, -1, rx250_done802
    lt rx250_pos, 0, rx250_fail804
    eq $I19, 0, rx250_fail804
    nqp_islist $I20, rx250_cstack
    unless $I20, rx250_jump805
    elements $I18, rx250_bstack
    le $I18, 0, rx250_cut806
    dec $I18
    set $I18, rx250_bstack[$I18]
  rx250_cut806:
    assign rx250_cstack, $I18
  rx250_jump805:
    jump $I19
  rx250_done802:
    rx250_cur."!cursor_fail"()
    .return (rx250_cur) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_50_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 784
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx253_tgt
    .local int rx253_pos
    .local int rx253_off
    .local int rx253_eos
    .local int rx253_rep
    .local pmc rx253_cur
    .local pmc rx253_curclass
    .local pmc rx253_bstack
    .local pmc rx253_cstack
    (rx253_cur, rx253_tgt, rx253_pos, rx253_curclass, rx253_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx253_cur
    length rx253_eos, rx253_tgt
    eq $I19, 1, rx253_restart816
    gt rx253_pos, rx253_eos, rx253_fail817
    repr_get_attr_int $I11, self, rx253_curclass, "$!from"
    ne $I11, -1, rxscan254_done823
    goto rxscan254_scan822
  rxscan254_loop821:
    inc rx253_pos
    gt rx253_pos, rx253_eos, rx253_fail817
    repr_bind_attr_int rx253_cur, rx253_curclass, "$!from", rx253_pos
  rxscan254_scan822:
    nqp_rxmark rx253_bstack, rxscan254_loop821, rx253_pos, 0
  rxscan254_done823:
  alt255_0825:
    nqp_rxmark rx253_bstack, alt255_1826, rx253_pos, 0
    ge rx253_pos, rx253_eos, rx253_fail817
    substr $S11, rx253_tgt, rx253_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx253_fail817
    goto alt255_end824
  alt255_1826:
    repr_bind_attr_int rx253_cur, rx253_curclass, "$!pos", rx253_pos
    $P11 = rx253_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx253_curclass, "$!pos"
    lt $I11, 0, rx253_fail817
    repr_get_attr_int rx253_pos, $P11, rx253_curclass, "$!pos"
  alt255_end824:
    repr_bind_attr_int rx253_cur, rx253_curclass, "$!pos", rx253_pos
    $P11 = rx253_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx253_curclass, "$!pos"
    lt $I11, 0, rx253_fail817
    repr_get_attr_int rx253_pos, $P11, rx253_curclass, "$!pos"
    repr_bind_attr_int rx253_cur, rx253_curclass, "$!pos", rx253_pos
    $P11 = rx253_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx253_curclass, "$!pos"
    lt $I11, 0, rx253_fail817
    nqp_rxmark rx253_bstack, rxsubrule258_pass829, -1, 0
  rxsubrule258_pass829:
    rx253_cstack = rx253_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx253_pos, $P11, rx253_curclass, "$!pos"
    rx253_cur."!cursor_pass"(rx253_pos, "block", 'backtrack'=>1)
    .return (rx253_cur)
  rx253_restart816:
    repr_get_attr_obj rx253_cstack, rx253_cur, rx253_curclass, "$!cstack"
  rx253_fail817:
    unless rx253_bstack, rx253_done815
    pop $I19, rx253_bstack
    if_null rx253_cstack, rx253_cstack_done820
    unless rx253_cstack, rx253_cstack_done820
    dec $I19
    set $P11, rx253_cstack[$I19]
  rx253_cstack_done820:
    pop rx253_rep, rx253_bstack
    pop rx253_pos, rx253_bstack
    pop $I19, rx253_bstack
    lt rx253_pos, -1, rx253_done815
    lt rx253_pos, 0, rx253_fail817
    eq $I19, 0, rx253_fail817
    nqp_islist $I20, rx253_cstack
    unless $I20, rx253_jump818
    elements $I18, rx253_bstack
    le $I18, 0, rx253_cut819
    dec $I18
    set $I18, rx253_bstack[$I18]
  rx253_cut819:
    assign rx253_cstack, $I18
  rx253_jump818:
    jump $I19
  rx253_done815:
    rx253_cur."!cursor_fail"()
    .return (rx253_cur) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_51_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 790
    .param pmc _lex_param_0 
    .lex "%*HANDLERS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx259_tgt
    .local int rx259_pos
    .local int rx259_off
    .local int rx259_eos
    .local int rx259_rep
    .local pmc rx259_cur
    .local pmc rx259_curclass
    .local pmc rx259_bstack
    .local pmc rx259_cstack
    (rx259_cur, rx259_tgt, rx259_pos, rx259_curclass, rx259_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx259_cur
    length rx259_eos, rx259_tgt
    eq $I19, 1, rx259_restart832
    gt rx259_pos, rx259_eos, rx259_fail833
    repr_get_attr_int $I11, self, rx259_curclass, "$!from"
    ne $I11, -1, rxscan260_done839
    goto rxscan260_scan838
  rxscan260_loop837:
    inc rx259_pos
    gt rx259_pos, rx259_eos, rx259_fail833
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!from", rx259_pos
  rxscan260_scan838:
    nqp_rxmark rx259_bstack, rxscan260_loop837, rx259_pos, 0
  rxscan260_done839:
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!pos", rx259_pos
    store_lex unicode:"$\x{a2}", rx259_cur
    unless_null $P101, fallback840
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback841
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback841:
    unless_null $P5002, vivi_261842
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_261842:
    set $P101, $P5002
  fallback840:
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!pos", rx259_pos
    $P11 = rx259_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx259_curclass, "$!pos"
    lt $I11, 0, rx259_fail833
    repr_get_attr_int rx259_pos, $P11, rx259_curclass, "$!pos"
  alt263_0845:
    nqp_rxmark rx259_bstack, alt263_1847, rx259_pos, 0
    add $I11, rx259_pos, 14
    gt $I11, rx259_eos, rx259_fail833
    substr $S10, rx259_tgt, rx259_pos, 14
    ne $S10, ucs4:"{YOU_ARE_HERE}", rx259_fail833
    add rx259_pos, 14
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!pos", rx259_pos
    $P11 = rx259_cur."you_are_here"()
    repr_get_attr_int $I11, $P11, rx259_curclass, "$!pos"
    lt $I11, 0, rx259_fail833
    nqp_rxmark rx259_bstack, rxsubrule264_pass846, -1, 0
  rxsubrule264_pass846:
    rx259_cstack = rx259_cur."!cursor_capture"($P11, "you_are_here")
    repr_get_attr_int rx259_pos, $P11, rx259_curclass, "$!pos"
    goto alt263_end844
  alt263_1847:
    add $I11, rx259_pos, 1
    gt $I11, rx259_eos, rx259_fail833
    substr $S10, rx259_tgt, rx259_pos, 1
    ne $S10, ucs4:"{", rx259_fail833
    add rx259_pos, 1
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!pos", rx259_pos
    $P11 = rx259_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx259_curclass, "$!pos"
    lt $I11, 0, rx259_fail833
    nqp_rxmark rx259_bstack, rxsubrule265_pass848, -1, 0
  rxsubrule265_pass848:
    rx259_cstack = rx259_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx259_pos, $P11, rx259_curclass, "$!pos"
  alt266_0850:
    nqp_rxmark rx259_bstack, alt266_1851, rx259_pos, 0
    add $I11, rx259_pos, 1
    gt $I11, rx259_eos, rx259_fail833
    substr $S10, rx259_tgt, rx259_pos, 1
    ne $S10, ucs4:"}", rx259_fail833
    add rx259_pos, 1
    goto alt266_end849
  alt266_1851:
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!pos", rx259_pos
    $P11 = rx259_cur."FAILGOAL"("'}'")
    repr_get_attr_int $I11, $P11, rx259_curclass, "$!pos"
    lt $I11, 0, rx259_fail833
    goto rxsubrule267_pass852
  rxsubrule267_back853:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx259_curclass, "$!pos"
    lt $I11, 0, rx259_fail833
  rxsubrule267_pass852:
    rx259_cstack = rx259_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule267_back853
    push rx259_bstack, $I11
    push rx259_bstack, 0
    push rx259_bstack, rx259_pos
    elements $I11, rx259_cstack
    push rx259_bstack, $I11
    repr_get_attr_int rx259_pos, $P11, rx259_curclass, "$!pos"
  alt266_end849:
  alt263_end844:
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!pos", rx259_pos
    $P11 = rx259_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx259_curclass, "$!pos"
    lt $I11, 0, rx259_fail833
    rx259_cur."!cursor_pass"(rx259_pos, "blockoid", 'backtrack'=>1)
    .return (rx259_cur)
  rx259_restart832:
    repr_get_attr_obj rx259_cstack, rx259_cur, rx259_curclass, "$!cstack"
  rx259_fail833:
    unless rx259_bstack, rx259_done831
    pop $I19, rx259_bstack
    if_null rx259_cstack, rx259_cstack_done836
    unless rx259_cstack, rx259_cstack_done836
    dec $I19
    set $P11, rx259_cstack[$I19]
  rx259_cstack_done836:
    pop rx259_rep, rx259_bstack
    pop rx259_pos, rx259_bstack
    pop $I19, rx259_bstack
    lt rx259_pos, -1, rx259_done831
    lt rx259_pos, 0, rx259_fail833
    eq $I19, 0, rx259_fail833
    nqp_islist $I20, rx259_cstack
    unless $I20, rx259_jump834
    elements $I18, rx259_bstack
    le $I18, 0, rx259_cut835
    dec $I18
    set $I18, rx259_bstack[$I18]
  rx259_cut835:
    assign rx259_cstack, $I18
  rx259_jump834:
    jump $I19
  rx259_done831:
    rx259_cur."!cursor_fail"()
    .return (rx259_cur) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_52_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 800
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx268_tgt
    .local int rx268_pos
    .local int rx268_off
    .local int rx268_eos
    .local int rx268_rep
    .local pmc rx268_cur
    .local pmc rx268_curclass
    .local pmc rx268_bstack
    .local pmc rx268_cstack
    (rx268_cur, rx268_tgt, rx268_pos, rx268_curclass, rx268_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx268_cur
    length rx268_eos, rx268_tgt
    eq $I19, 1, rx268_restart856
    gt rx268_pos, rx268_eos, rx268_fail857
    repr_get_attr_int $I11, self, rx268_curclass, "$!from"
    ne $I11, -1, rxscan269_done863
    goto rxscan269_scan862
  rxscan269_loop861:
    inc rx268_pos
    gt rx268_pos, rx268_eos, rx268_fail857
    repr_bind_attr_int rx268_cur, rx268_curclass, "$!from", rx268_pos
  rxscan269_scan862:
    nqp_rxmark rx268_bstack, rxscan269_loop861, rx268_pos, 0
  rxscan269_done863:
    rx268_cur."!cursor_pass"(rx268_pos, "newpad", 'backtrack'=>1)
    .return (rx268_cur)
  rx268_restart856:
    repr_get_attr_obj rx268_cstack, rx268_cur, rx268_curclass, "$!cstack"
  rx268_fail857:
    unless rx268_bstack, rx268_done855
    pop $I19, rx268_bstack
    if_null rx268_cstack, rx268_cstack_done860
    unless rx268_cstack, rx268_cstack_done860
    dec $I19
    set $P11, rx268_cstack[$I19]
  rx268_cstack_done860:
    pop rx268_rep, rx268_bstack
    pop rx268_pos, rx268_bstack
    pop $I19, rx268_bstack
    lt rx268_pos, -1, rx268_done855
    lt rx268_pos, 0, rx268_fail857
    eq $I19, 0, rx268_fail857
    nqp_islist $I20, rx268_cstack
    unless $I20, rx268_jump858
    elements $I18, rx268_bstack
    le $I18, 0, rx268_cut859
    dec $I18
    set $I18, rx268_bstack[$I18]
  rx268_cut859:
    assign rx268_cstack, $I18
  rx268_jump858:
    jump $I19
  rx268_done855:
    rx268_cur."!cursor_fail"()
    .return (rx268_cur) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_53_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 801
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx271_tgt
    .local int rx271_pos
    .local int rx271_off
    .local int rx271_eos
    .local int rx271_rep
    .local pmc rx271_cur
    .local pmc rx271_curclass
    .local pmc rx271_bstack
    .local pmc rx271_cstack
    (rx271_cur, rx271_tgt, rx271_pos, rx271_curclass, rx271_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx271_cur
    length rx271_eos, rx271_tgt
    eq $I19, 1, rx271_restart867
    gt rx271_pos, rx271_eos, rx271_fail868
    repr_get_attr_int $I11, self, rx271_curclass, "$!from"
    ne $I11, -1, rxscan272_done874
    goto rxscan272_scan873
  rxscan272_loop872:
    inc rx271_pos
    gt rx271_pos, rx271_eos, rx271_fail868
    repr_bind_attr_int rx271_cur, rx271_curclass, "$!from", rx271_pos
  rxscan272_scan873:
    nqp_rxmark rx271_bstack, rxscan272_loop872, rx271_pos, 0
  rxscan272_done874:
    rx271_cur."!cursor_pass"(rx271_pos, "outerctx", 'backtrack'=>1)
    .return (rx271_cur)
  rx271_restart867:
    repr_get_attr_obj rx271_cstack, rx271_cur, rx271_curclass, "$!cstack"
  rx271_fail868:
    unless rx271_bstack, rx271_done866
    pop $I19, rx271_bstack
    if_null rx271_cstack, rx271_cstack_done871
    unless rx271_cstack, rx271_cstack_done871
    dec $I19
    set $P11, rx271_cstack[$I19]
  rx271_cstack_done871:
    pop rx271_rep, rx271_bstack
    pop rx271_pos, rx271_bstack
    pop $I19, rx271_bstack
    lt rx271_pos, -1, rx271_done866
    lt rx271_pos, 0, rx271_fail868
    eq $I19, 0, rx271_fail868
    nqp_islist $I20, rx271_cstack
    unless $I20, rx271_jump869
    elements $I18, rx271_bstack
    le $I18, 0, rx271_cut870
    dec $I18
    set $I18, rx271_bstack[$I18]
  rx271_cut870:
    assign rx271_cstack, $I18
  rx271_jump869:
    jump $I19
  rx271_done866:
    rx271_cur."!cursor_fail"()
    .return (rx271_cur) 
.end
.HLL "nqp"
.namespace []
.sub "finishpad" :subid("cuid_54_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 802
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx274_tgt
    .local int rx274_pos
    .local int rx274_off
    .local int rx274_eos
    .local int rx274_rep
    .local pmc rx274_cur
    .local pmc rx274_curclass
    .local pmc rx274_bstack
    .local pmc rx274_cstack
    (rx274_cur, rx274_tgt, rx274_pos, rx274_curclass, rx274_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx274_cur
    length rx274_eos, rx274_tgt
    eq $I19, 1, rx274_restart878
    gt rx274_pos, rx274_eos, rx274_fail879
    repr_get_attr_int $I11, self, rx274_curclass, "$!from"
    ne $I11, -1, rxscan275_done885
    goto rxscan275_scan884
  rxscan275_loop883:
    inc rx274_pos
    gt rx274_pos, rx274_eos, rx274_fail879
    repr_bind_attr_int rx274_cur, rx274_curclass, "$!from", rx274_pos
  rxscan275_scan884:
    nqp_rxmark rx274_bstack, rxscan275_loop883, rx274_pos, 0
  rxscan275_done885:
    rx274_cur."!cursor_pass"(rx274_pos, "finishpad", 'backtrack'=>1)
    .return (rx274_cur)
  rx274_restart878:
    repr_get_attr_obj rx274_cstack, rx274_cur, rx274_curclass, "$!cstack"
  rx274_fail879:
    unless rx274_bstack, rx274_done877
    pop $I19, rx274_bstack
    if_null rx274_cstack, rx274_cstack_done882
    unless rx274_cstack, rx274_cstack_done882
    dec $I19
    set $P11, rx274_cstack[$I19]
  rx274_cstack_done882:
    pop rx274_rep, rx274_bstack
    pop rx274_pos, rx274_bstack
    pop $I19, rx274_bstack
    lt rx274_pos, -1, rx274_done877
    lt rx274_pos, 0, rx274_fail879
    eq $I19, 0, rx274_fail879
    nqp_islist $I20, rx274_cstack
    unless $I20, rx274_jump880
    elements $I18, rx274_bstack
    le $I18, 0, rx274_cut881
    dec $I18
    set $I18, rx274_bstack[$I18]
  rx274_cut881:
    assign rx274_cstack, $I18
  rx274_jump880:
    jump $I19
  rx274_done877:
    rx274_cur."!cursor_fail"()
    .return (rx274_cur) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_55_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 803
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx277_tgt
    .local int rx277_pos
    .local int rx277_off
    .local int rx277_eos
    .local int rx277_rep
    .local pmc rx277_cur
    .local pmc rx277_curclass
    .local pmc rx277_bstack
    .local pmc rx277_cstack
    (rx277_cur, rx277_tgt, rx277_pos, rx277_curclass, rx277_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx277_cur
    length rx277_eos, rx277_tgt
    eq $I19, 1, rx277_restart889
    gt rx277_pos, rx277_eos, rx277_fail890
    repr_get_attr_int $I11, self, rx277_curclass, "$!from"
    ne $I11, -1, rxscan278_done896
    goto rxscan278_scan895
  rxscan278_loop894:
    inc rx277_pos
    gt rx277_pos, rx277_eos, rx277_fail890
    repr_bind_attr_int rx277_cur, rx277_curclass, "$!from", rx277_pos
  rxscan278_scan895:
    nqp_rxmark rx277_bstack, rxscan278_loop894, rx277_pos, 0
  rxscan278_done896:
    rx277_cur."!cursor_pass"(rx277_pos, "you_are_here", 'backtrack'=>1)
    .return (rx277_cur)
  rx277_restart889:
    repr_get_attr_obj rx277_cstack, rx277_cur, rx277_curclass, "$!cstack"
  rx277_fail890:
    unless rx277_bstack, rx277_done888
    pop $I19, rx277_bstack
    if_null rx277_cstack, rx277_cstack_done893
    unless rx277_cstack, rx277_cstack_done893
    dec $I19
    set $P11, rx277_cstack[$I19]
  rx277_cstack_done893:
    pop rx277_rep, rx277_bstack
    pop rx277_pos, rx277_bstack
    pop $I19, rx277_bstack
    lt rx277_pos, -1, rx277_done888
    lt rx277_pos, 0, rx277_fail890
    eq $I19, 0, rx277_fail890
    nqp_islist $I20, rx277_cstack
    unless $I20, rx277_jump891
    elements $I18, rx277_bstack
    le $I18, 0, rx277_cut892
    dec $I18
    set $I18, rx277_bstack[$I18]
  rx277_cut892:
    assign rx277_cstack, $I18
  rx277_jump891:
    jump $I19
  rx277_done888:
    rx277_cur."!cursor_fail"()
    .return (rx277_cur) 
.end
.HLL "nqp"
.namespace []
.sub "terminator" :subid("cuid_56_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 805
    .param pmc self 
    $P5001 = self."!protoregex"("terminator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<;>" :subid("cuid_57_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 807
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx280_tgt
    .local int rx280_pos
    .local int rx280_off
    .local int rx280_eos
    .local int rx280_rep
    .local pmc rx280_cur
    .local pmc rx280_curclass
    .local pmc rx280_bstack
    .local pmc rx280_cstack
    (rx280_cur, rx280_tgt, rx280_pos, rx280_curclass, rx280_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx280_cur
    length rx280_eos, rx280_tgt
    eq $I19, 1, rx280_restart900
    gt rx280_pos, rx280_eos, rx280_fail901
    repr_get_attr_int $I11, self, rx280_curclass, "$!from"
    ne $I11, -1, rxscan281_done907
    goto rxscan281_scan906
  rxscan281_loop905:
    inc rx280_pos
    gt rx280_pos, rx280_eos, rx280_fail901
    repr_bind_attr_int rx280_cur, rx280_curclass, "$!from", rx280_pos
  rxscan281_scan906:
    nqp_rxmark rx280_bstack, rxscan281_loop905, rx280_pos, 0
  rxscan281_done907:
    ge rx280_pos, rx280_eos, rx280_fail901
    substr $S11, rx280_tgt, rx280_pos, 1
    index $I11, ucs4:";", $S11
    lt $I11, 0, rx280_fail901
    rx280_cur."!cursor_pass"(rx280_pos, "terminator:sym<;>", 'backtrack'=>1)
    .return (rx280_cur)
  rx280_restart900:
    repr_get_attr_obj rx280_cstack, rx280_cur, rx280_curclass, "$!cstack"
  rx280_fail901:
    unless rx280_bstack, rx280_done899
    pop $I19, rx280_bstack
    if_null rx280_cstack, rx280_cstack_done904
    unless rx280_cstack, rx280_cstack_done904
    dec $I19
    set $P11, rx280_cstack[$I19]
  rx280_cstack_done904:
    pop rx280_rep, rx280_bstack
    pop rx280_pos, rx280_bstack
    pop $I19, rx280_bstack
    lt rx280_pos, -1, rx280_done899
    lt rx280_pos, 0, rx280_fail901
    eq $I19, 0, rx280_fail901
    nqp_islist $I20, rx280_cstack
    unless $I20, rx280_jump902
    elements $I18, rx280_bstack
    le $I18, 0, rx280_cut903
    dec $I18
    set $I18, rx280_bstack[$I18]
  rx280_cut903:
    assign rx280_cstack, $I18
  rx280_jump902:
    jump $I19
  rx280_done899:
    rx280_cur."!cursor_fail"()
    .return (rx280_cur) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<}>" :subid("cuid_58_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 808
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx282_tgt
    .local int rx282_pos
    .local int rx282_off
    .local int rx282_eos
    .local int rx282_rep
    .local pmc rx282_cur
    .local pmc rx282_curclass
    .local pmc rx282_bstack
    .local pmc rx282_cstack
    (rx282_cur, rx282_tgt, rx282_pos, rx282_curclass, rx282_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx282_cur
    length rx282_eos, rx282_tgt
    eq $I19, 1, rx282_restart910
    gt rx282_pos, rx282_eos, rx282_fail911
    repr_get_attr_int $I11, self, rx282_curclass, "$!from"
    ne $I11, -1, rxscan283_done917
    goto rxscan283_scan916
  rxscan283_loop915:
    inc rx282_pos
    gt rx282_pos, rx282_eos, rx282_fail911
    repr_bind_attr_int rx282_cur, rx282_curclass, "$!from", rx282_pos
  rxscan283_scan916:
    nqp_rxmark rx282_bstack, rxscan283_loop915, rx282_pos, 0
  rxscan283_done917:
    ge rx282_pos, rx282_eos, rx282_fail911
    substr $S11, rx282_tgt, rx282_pos, 1
    index $I11, ucs4:"}", $S11
    lt $I11, 0, rx282_fail911
    rx282_cur."!cursor_pass"(rx282_pos, "terminator:sym<}>", 'backtrack'=>1)
    .return (rx282_cur)
  rx282_restart910:
    repr_get_attr_obj rx282_cstack, rx282_cur, rx282_curclass, "$!cstack"
  rx282_fail911:
    unless rx282_bstack, rx282_done909
    pop $I19, rx282_bstack
    if_null rx282_cstack, rx282_cstack_done914
    unless rx282_cstack, rx282_cstack_done914
    dec $I19
    set $P11, rx282_cstack[$I19]
  rx282_cstack_done914:
    pop rx282_rep, rx282_bstack
    pop rx282_pos, rx282_bstack
    pop $I19, rx282_bstack
    lt rx282_pos, -1, rx282_done909
    lt rx282_pos, 0, rx282_fail911
    eq $I19, 0, rx282_fail911
    nqp_islist $I20, rx282_cstack
    unless $I20, rx282_jump912
    elements $I18, rx282_bstack
    le $I18, 0, rx282_cut913
    dec $I18
    set $I18, rx282_bstack[$I18]
  rx282_cut913:
    assign rx282_cstack, $I18
  rx282_jump912:
    jump $I19
  rx282_done909:
    rx282_cur."!cursor_fail"()
    .return (rx282_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control" :subid("cuid_59_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 812
    .param pmc self 
    $P5001 = self."!protoregex"("statement_control")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_60_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 814
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx284_tgt
    .local int rx284_pos
    .local int rx284_off
    .local int rx284_eos
    .local int rx284_rep
    .local pmc rx284_cur
    .local pmc rx284_curclass
    .local pmc rx284_bstack
    .local pmc rx284_cstack
    (rx284_cur, rx284_tgt, rx284_pos, rx284_curclass, rx284_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx284_cur
    length rx284_eos, rx284_tgt
    eq $I19, 1, rx284_restart920
    gt rx284_pos, rx284_eos, rx284_fail921
    repr_get_attr_int $I11, self, rx284_curclass, "$!from"
    ne $I11, -1, rxscan285_done927
    goto rxscan285_scan926
  rxscan285_loop925:
    inc rx284_pos
    gt rx284_pos, rx284_eos, rx284_fail921
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!from", rx284_pos
  rxscan285_scan926:
    nqp_rxmark rx284_bstack, rxscan285_loop925, rx284_pos, 0
  rxscan285_done927:
    nqp_rxmark rx284_bstack, rxcap286_fail929, rx284_pos, 0
    add $I11, rx284_pos, 3
    gt $I11, rx284_eos, rx284_fail921
    substr $S10, rx284_tgt, rx284_pos, 3
    ne $S10, ucs4:"use", rx284_fail921
    add rx284_pos, 3
    nqp_rxpeek $I19, rx284_bstack, rxcap286_fail929
    inc $I19
    set $I11, rx284_bstack[$I19]
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!pos", rx284_pos
    $P11 = rx284_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx284_pos)
    rx284_cstack = rx284_cur."!cursor_capture"($P11, "sym")
    goto rxcap286_done928
  rxcap286_fail929:
    goto rx284_fail921
  rxcap286_done928:
    ge rx284_pos, rx284_eos, rx284_fail921
    is_cclass $I11, .CCLASS_WHITESPACE, rx284_tgt, rx284_pos
    unless $I11, rx284_fail921
    add rx284_pos, 1
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!pos", rx284_pos
    $P11 = rx284_cur."ws"()
    repr_get_attr_int $I11, $P11, rx284_curclass, "$!pos"
    lt $I11, 0, rx284_fail921
    repr_get_attr_int rx284_pos, $P11, rx284_curclass, "$!pos"
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!pos", rx284_pos
    $P11 = rx284_cur."name"()
    repr_get_attr_int $I11, $P11, rx284_curclass, "$!pos"
    lt $I11, 0, rx284_fail921
    nqp_rxmark rx284_bstack, rxsubrule288_pass931, -1, 0
  rxsubrule288_pass931:
    rx284_cstack = rx284_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx284_pos, $P11, rx284_curclass, "$!pos"
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!pos", rx284_pos
    $P11 = rx284_cur."ws"()
    repr_get_attr_int $I11, $P11, rx284_curclass, "$!pos"
    lt $I11, 0, rx284_fail921
    repr_get_attr_int rx284_pos, $P11, rx284_curclass, "$!pos"
    rx284_cur."!cursor_pass"(rx284_pos, "statement_control:sym<use>", 'backtrack'=>1)
    .return (rx284_cur)
  rx284_restart920:
    repr_get_attr_obj rx284_cstack, rx284_cur, rx284_curclass, "$!cstack"
  rx284_fail921:
    unless rx284_bstack, rx284_done919
    pop $I19, rx284_bstack
    if_null rx284_cstack, rx284_cstack_done924
    unless rx284_cstack, rx284_cstack_done924
    dec $I19
    set $P11, rx284_cstack[$I19]
  rx284_cstack_done924:
    pop rx284_rep, rx284_bstack
    pop rx284_pos, rx284_bstack
    pop $I19, rx284_bstack
    lt rx284_pos, -1, rx284_done919
    lt rx284_pos, 0, rx284_fail921
    eq $I19, 0, rx284_fail921
    nqp_islist $I20, rx284_cstack
    unless $I20, rx284_jump922
    elements $I18, rx284_bstack
    le $I18, 0, rx284_cut923
    dec $I18
    set $I18, rx284_bstack[$I18]
  rx284_cut923:
    assign rx284_cstack, $I18
  rx284_jump922:
    jump $I19
  rx284_done919:
    rx284_cur."!cursor_fail"()
    .return (rx284_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_61_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 818
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx290_tgt
    .local int rx290_pos
    .local int rx290_off
    .local int rx290_eos
    .local int rx290_rep
    .local pmc rx290_cur
    .local pmc rx290_curclass
    .local pmc rx290_bstack
    .local pmc rx290_cstack
    (rx290_cur, rx290_tgt, rx290_pos, rx290_curclass, rx290_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx290_cur
    length rx290_eos, rx290_tgt
    eq $I19, 1, rx290_restart935
    gt rx290_pos, rx290_eos, rx290_fail936
    repr_get_attr_int $I11, self, rx290_curclass, "$!from"
    ne $I11, -1, rxscan291_done942
    goto rxscan291_scan941
  rxscan291_loop940:
    inc rx290_pos
    gt rx290_pos, rx290_eos, rx290_fail936
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!from", rx290_pos
  rxscan291_scan941:
    nqp_rxmark rx290_bstack, rxscan291_loop940, rx290_pos, 0
  rxscan291_done942:
    nqp_rxmark rx290_bstack, rxcap292_fail944, rx290_pos, 0
    add $I11, rx290_pos, 2
    gt $I11, rx290_eos, rx290_fail936
    substr $S10, rx290_tgt, rx290_pos, 2
    ne $S10, ucs4:"if", rx290_fail936
    add rx290_pos, 2
    nqp_rxpeek $I19, rx290_bstack, rxcap292_fail944
    inc $I19
    set $I11, rx290_bstack[$I19]
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx290_pos)
    rx290_cstack = rx290_cur."!cursor_capture"($P11, "sym")
    goto rxcap292_done943
  rxcap292_fail944:
    goto rx290_fail936
  rxcap292_done943:
    ge rx290_pos, rx290_eos, rx290_fail936
    is_cclass $I11, .CCLASS_WHITESPACE, rx290_tgt, rx290_pos
    unless $I11, rx290_fail936
    add rx290_pos, 1
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail936
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail936
    nqp_rxmark rx290_bstack, rxsubrule294_pass946, -1, 0
  rxsubrule294_pass946:
    rx290_cstack = rx290_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail936
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    nqp_rxmark rx290_bstack, rxquantr296_done949, rx290_pos, 0
  rxquantr296_loop948:
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail936
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    add $I11, rx290_pos, 5
    gt $I11, rx290_eos, rx290_fail936
    substr $S10, rx290_tgt, rx290_pos, 5
    ne $S10, ucs4:"elsif", rx290_fail936
    add rx290_pos, 5
    ge rx290_pos, rx290_eos, rx290_fail936
    is_cclass $I11, .CCLASS_WHITESPACE, rx290_tgt, rx290_pos
    unless $I11, rx290_fail936
    add rx290_pos, 1
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail936
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail936
    nqp_rxmark rx290_bstack, rxsubrule299_pass952, -1, 0
  rxsubrule299_pass952:
    rx290_cstack = rx290_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail936
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    nqp_rxpeek $I19, rx290_bstack, rxquantr296_done949
    inc $I19
    inc $I19
    set rx290_rep, rx290_bstack[$I19]
    nqp_rxcommit rx290_bstack, rxquantr296_done949
    inc rx290_rep
    nqp_rxmark rx290_bstack, rxquantr296_done949, rx290_pos, rx290_rep
    goto rxquantr296_loop948
  rxquantr296_done949:
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail936
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    nqp_rxmark rx290_bstack, rxquantr302_done956, rx290_pos, 0
  rxquantr302_loop955:
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail936
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    add $I11, rx290_pos, 4
    gt $I11, rx290_eos, rx290_fail936
    substr $S10, rx290_tgt, rx290_pos, 4
    ne $S10, ucs4:"else", rx290_fail936
    add rx290_pos, 4
    ge rx290_pos, rx290_eos, rx290_fail936
    is_cclass $I11, .CCLASS_WHITESPACE, rx290_tgt, rx290_pos
    unless $I11, rx290_fail936
    add rx290_pos, 1
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail936
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail936
    nqp_rxmark rx290_bstack, rxsubrule305_pass959, -1, 0
  rxsubrule305_pass959:
    rx290_cstack = rx290_cur."!cursor_capture"($P11, "else")
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail936
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    nqp_rxpeek $I19, rx290_bstack, rxquantr302_done956
    inc $I19
    inc $I19
    set rx290_rep, rx290_bstack[$I19]
    nqp_rxcommit rx290_bstack, rxquantr302_done956
    inc rx290_rep
  rxquantr302_done956:
    repr_bind_attr_int rx290_cur, rx290_curclass, "$!pos", rx290_pos
    $P11 = rx290_cur."ws"()
    repr_get_attr_int $I11, $P11, rx290_curclass, "$!pos"
    lt $I11, 0, rx290_fail936
    repr_get_attr_int rx290_pos, $P11, rx290_curclass, "$!pos"
    rx290_cur."!cursor_pass"(rx290_pos, "statement_control:sym<if>", 'backtrack'=>1)
    .return (rx290_cur)
  rx290_restart935:
    repr_get_attr_obj rx290_cstack, rx290_cur, rx290_curclass, "$!cstack"
  rx290_fail936:
    unless rx290_bstack, rx290_done934
    pop $I19, rx290_bstack
    if_null rx290_cstack, rx290_cstack_done939
    unless rx290_cstack, rx290_cstack_done939
    dec $I19
    set $P11, rx290_cstack[$I19]
  rx290_cstack_done939:
    pop rx290_rep, rx290_bstack
    pop rx290_pos, rx290_bstack
    pop $I19, rx290_bstack
    lt rx290_pos, -1, rx290_done934
    lt rx290_pos, 0, rx290_fail936
    eq $I19, 0, rx290_fail936
    nqp_islist $I20, rx290_cstack
    unless $I20, rx290_jump937
    elements $I18, rx290_bstack
    le $I18, 0, rx290_cut938
    dec $I18
    set $I18, rx290_bstack[$I18]
  rx290_cut938:
    assign rx290_cstack, $I18
  rx290_jump937:
    jump $I19
  rx290_done934:
    rx290_cur."!cursor_fail"()
    .return (rx290_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_62_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 825
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_63_1359292300.247' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx308_tgt
    .local int rx308_pos
    .local int rx308_off
    .local int rx308_eos
    .local int rx308_rep
    .local pmc rx308_cur
    .local pmc rx308_curclass
    .local pmc rx308_bstack
    .local pmc rx308_cstack
    (rx308_cur, rx308_tgt, rx308_pos, rx308_curclass, rx308_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx308_cur
    length rx308_eos, rx308_tgt
    eq $I19, 1, rx308_restart964
    gt rx308_pos, rx308_eos, rx308_fail965
    repr_get_attr_int $I11, self, rx308_curclass, "$!from"
    ne $I11, -1, rxscan309_done971
    goto rxscan309_scan970
  rxscan309_loop969:
    inc rx308_pos
    gt rx308_pos, rx308_eos, rx308_fail965
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!from", rx308_pos
  rxscan309_scan970:
    nqp_rxmark rx308_bstack, rxscan309_loop969, rx308_pos, 0
  rxscan309_done971:
    nqp_rxmark rx308_bstack, rxcap310_fail973, rx308_pos, 0
    add $I11, rx308_pos, 6
    gt $I11, rx308_eos, rx308_fail965
    substr $S10, rx308_tgt, rx308_pos, 6
    ne $S10, ucs4:"unless", rx308_fail965
    add rx308_pos, 6
    nqp_rxpeek $I19, rx308_bstack, rxcap310_fail973
    inc $I19
    set $I11, rx308_bstack[$I19]
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx308_pos)
    rx308_cstack = rx308_cur."!cursor_capture"($P11, "sym")
    goto rxcap310_done972
  rxcap310_fail973:
    goto rx308_fail965
  rxcap310_done972:
    ge rx308_pos, rx308_eos, rx308_fail965
    is_cclass $I11, .CCLASS_WHITESPACE, rx308_tgt, rx308_pos
    unless $I11, rx308_fail965
    add rx308_pos, 1
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."ws"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail965
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail965
    nqp_rxmark rx308_bstack, rxsubrule312_pass975, -1, 0
  rxsubrule312_pass975:
    rx308_cstack = rx308_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."ws"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail965
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
  alt314_0978:
    nqp_rxmark rx308_bstack, alt314_1991, rx308_pos, 0
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."ws"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail965
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    .const 'Sub' $P5001 = 'cuid_63_1359292300.247' 
    capture_lex $P5001
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    ge $I11, 0, rx308_fail965
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."ws"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail965
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    goto alt314_end977
  alt314_1991:
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."ws"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail965
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."panic"("unless does not take \"else\", please rewrite using \"if\"")
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail965
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."ws"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail965
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
  alt314_end977:
    repr_bind_attr_int rx308_cur, rx308_curclass, "$!pos", rx308_pos
    $P11 = rx308_cur."ws"()
    repr_get_attr_int $I11, $P11, rx308_curclass, "$!pos"
    lt $I11, 0, rx308_fail965
    repr_get_attr_int rx308_pos, $P11, rx308_curclass, "$!pos"
    rx308_cur."!cursor_pass"(rx308_pos, "statement_control:sym<unless>", 'backtrack'=>1)
    .return (rx308_cur)
  rx308_restart964:
    repr_get_attr_obj rx308_cstack, rx308_cur, rx308_curclass, "$!cstack"
  rx308_fail965:
    unless rx308_bstack, rx308_done963
    pop $I19, rx308_bstack
    if_null rx308_cstack, rx308_cstack_done968
    unless rx308_cstack, rx308_cstack_done968
    dec $I19
    set $P11, rx308_cstack[$I19]
  rx308_cstack_done968:
    pop rx308_rep, rx308_bstack
    pop rx308_pos, rx308_bstack
    pop $I19, rx308_bstack
    lt rx308_pos, -1, rx308_done963
    lt rx308_pos, 0, rx308_fail965
    eq $I19, 0, rx308_fail965
    nqp_islist $I20, rx308_cstack
    unless $I20, rx308_jump966
    elements $I18, rx308_bstack
    le $I18, 0, rx308_cut967
    dec $I18
    set $I18, rx308_bstack[$I18]
  rx308_cut967:
    assign rx308_cstack, $I18
  rx308_jump966:
    jump $I19
  rx308_done963:
    rx308_cur."!cursor_fail"()
    .return (rx308_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_63_1359292300.247") :anon :lex :outer("cuid_62_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx316_tgt
    .local int rx316_pos
    .local int rx316_off
    .local int rx316_eos
    .local int rx316_rep
    .local pmc rx316_cur
    .local pmc rx316_curclass
    .local pmc rx316_bstack
    .local pmc rx316_cstack
    (rx316_cur, rx316_tgt, rx316_pos, rx316_curclass, rx316_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx316_cur
    length rx316_eos, rx316_tgt
    eq $I19, 1, rx316_restart982
    gt rx316_pos, rx316_eos, rx316_fail983
    repr_get_attr_int $I11, self, rx316_curclass, "$!from"
    ne $I11, -1, rxscan317_done989
    goto rxscan317_scan988
  rxscan317_loop987:
    inc rx316_pos
    gt rx316_pos, rx316_eos, rx316_fail983
    repr_bind_attr_int rx316_cur, rx316_curclass, "$!from", rx316_pos
  rxscan317_scan988:
    nqp_rxmark rx316_bstack, rxscan317_loop987, rx316_pos, 0
  rxscan317_done989:
    add $I11, rx316_pos, 4
    gt $I11, rx316_eos, rx316_fail983
    substr $S10, rx316_tgt, rx316_pos, 4
    ne $S10, ucs4:"else", rx316_fail983
    add rx316_pos, 4
    rx316_cur."!cursor_pass"(rx316_pos, 'backtrack'=>1)
    .return (rx316_cur)
  rx316_restart982:
    repr_get_attr_obj rx316_cstack, rx316_cur, rx316_curclass, "$!cstack"
  rx316_fail983:
    unless rx316_bstack, rx316_done981
    pop $I19, rx316_bstack
    if_null rx316_cstack, rx316_cstack_done986
    unless rx316_cstack, rx316_cstack_done986
    dec $I19
    set $P11, rx316_cstack[$I19]
  rx316_cstack_done986:
    pop rx316_rep, rx316_bstack
    pop rx316_pos, rx316_bstack
    pop $I19, rx316_bstack
    lt rx316_pos, -1, rx316_done981
    lt rx316_pos, 0, rx316_fail983
    eq $I19, 0, rx316_fail983
    nqp_islist $I20, rx316_cstack
    unless $I20, rx316_jump984
    elements $I18, rx316_bstack
    le $I18, 0, rx316_cut985
    dec $I18
    set $I18, rx316_bstack[$I18]
  rx316_cut985:
    assign rx316_cstack, $I18
  rx316_jump984:
    jump $I19
  rx316_done981:
    rx316_cur."!cursor_fail"()
    .return (rx316_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_64_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 831
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx323_tgt
    .local int rx323_pos
    .local int rx323_off
    .local int rx323_eos
    .local int rx323_rep
    .local pmc rx323_cur
    .local pmc rx323_curclass
    .local pmc rx323_bstack
    .local pmc rx323_cstack
    (rx323_cur, rx323_tgt, rx323_pos, rx323_curclass, rx323_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx323_cur
    length rx323_eos, rx323_tgt
    eq $I19, 1, rx323_restart998
    gt rx323_pos, rx323_eos, rx323_fail999
    repr_get_attr_int $I11, self, rx323_curclass, "$!from"
    ne $I11, -1, rxscan324_done1005
    goto rxscan324_scan1004
  rxscan324_loop1003:
    inc rx323_pos
    gt rx323_pos, rx323_eos, rx323_fail999
    repr_bind_attr_int rx323_cur, rx323_curclass, "$!from", rx323_pos
  rxscan324_scan1004:
    nqp_rxmark rx323_bstack, rxscan324_loop1003, rx323_pos, 0
  rxscan324_done1005:
    repr_bind_attr_int rx323_cur, rx323_curclass, "$!pos", rx323_pos
    store_lex unicode:"$\x{a2}", rx323_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx323_bstack, rxcap325_fail1007, rx323_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt326_01009
    nqp_push_label $P11, alt326_11010
    nqp_rxmark rx323_bstack, alt326_end1008, -1, 0
    rx323_cur."!alt"(rx323_pos, "alt_nfa__12_1359292301.747", $P11)
    goto rx323_fail999
  alt326_01009:
    add $I11, rx323_pos, 5
    gt $I11, rx323_eos, rx323_fail999
    substr $S10, rx323_tgt, rx323_pos, 5
    ne $S10, ucs4:"while", rx323_fail999
    add rx323_pos, 5
    goto alt326_end1008
  alt326_11010:
    add $I11, rx323_pos, 5
    gt $I11, rx323_eos, rx323_fail999
    substr $S10, rx323_tgt, rx323_pos, 5
    ne $S10, ucs4:"until", rx323_fail999
    add rx323_pos, 5
    goto alt326_end1008
  alt326_end1008:
    nqp_rxcommit rx323_bstack, alt326_end1008
    nqp_rxpeek $I19, rx323_bstack, rxcap325_fail1007
    inc $I19
    set $I11, rx323_bstack[$I19]
    repr_bind_attr_int rx323_cur, rx323_curclass, "$!pos", rx323_pos
    $P11 = rx323_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx323_pos)
    rx323_cstack = rx323_cur."!cursor_capture"($P11, "sym")
    goto rxcap325_done1006
  rxcap325_fail1007:
    goto rx323_fail999
  rxcap325_done1006:
    ge rx323_pos, rx323_eos, rx323_fail999
    is_cclass $I11, .CCLASS_WHITESPACE, rx323_tgt, rx323_pos
    unless $I11, rx323_fail999
    add rx323_pos, 1
    repr_bind_attr_int rx323_cur, rx323_curclass, "$!pos", rx323_pos
    $P11 = rx323_cur."ws"()
    repr_get_attr_int $I11, $P11, rx323_curclass, "$!pos"
    lt $I11, 0, rx323_fail999
    repr_get_attr_int rx323_pos, $P11, rx323_curclass, "$!pos"
    repr_bind_attr_int rx323_cur, rx323_curclass, "$!pos", rx323_pos
    $P11 = rx323_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx323_curclass, "$!pos"
    lt $I11, 0, rx323_fail999
    nqp_rxmark rx323_bstack, rxsubrule328_pass1012, -1, 0
  rxsubrule328_pass1012:
    rx323_cstack = rx323_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx323_pos, $P11, rx323_curclass, "$!pos"
    repr_bind_attr_int rx323_cur, rx323_curclass, "$!pos", rx323_pos
    $P11 = rx323_cur."ws"()
    repr_get_attr_int $I11, $P11, rx323_curclass, "$!pos"
    lt $I11, 0, rx323_fail999
    repr_get_attr_int rx323_pos, $P11, rx323_curclass, "$!pos"
    rx323_cur."!cursor_pass"(rx323_pos, "statement_control:sym<while>", 'backtrack'=>1)
    .return (rx323_cur)
  rx323_restart998:
    repr_get_attr_obj rx323_cstack, rx323_cur, rx323_curclass, "$!cstack"
  rx323_fail999:
    unless rx323_bstack, rx323_done997
    pop $I19, rx323_bstack
    if_null rx323_cstack, rx323_cstack_done1002
    unless rx323_cstack, rx323_cstack_done1002
    dec $I19
    set $P11, rx323_cstack[$I19]
  rx323_cstack_done1002:
    pop rx323_rep, rx323_bstack
    pop rx323_pos, rx323_bstack
    pop $I19, rx323_bstack
    lt rx323_pos, -1, rx323_done997
    lt rx323_pos, 0, rx323_fail999
    eq $I19, 0, rx323_fail999
    nqp_islist $I20, rx323_cstack
    unless $I20, rx323_jump1000
    elements $I18, rx323_bstack
    le $I18, 0, rx323_cut1001
    dec $I18
    set $I18, rx323_bstack[$I18]
  rx323_cut1001:
    assign rx323_cstack, $I18
  rx323_jump1000:
    jump $I19
  rx323_done997:
    rx323_cur."!cursor_fail"()
    .return (rx323_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_65_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 837
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx330_tgt
    .local int rx330_pos
    .local int rx330_off
    .local int rx330_eos
    .local int rx330_rep
    .local pmc rx330_cur
    .local pmc rx330_curclass
    .local pmc rx330_bstack
    .local pmc rx330_cstack
    (rx330_cur, rx330_tgt, rx330_pos, rx330_curclass, rx330_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx330_cur
    length rx330_eos, rx330_tgt
    eq $I19, 1, rx330_restart1016
    gt rx330_pos, rx330_eos, rx330_fail1017
    repr_get_attr_int $I11, self, rx330_curclass, "$!from"
    ne $I11, -1, rxscan331_done1023
    goto rxscan331_scan1022
  rxscan331_loop1021:
    inc rx330_pos
    gt rx330_pos, rx330_eos, rx330_fail1017
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!from", rx330_pos
  rxscan331_scan1022:
    nqp_rxmark rx330_bstack, rxscan331_loop1021, rx330_pos, 0
  rxscan331_done1023:
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    store_lex unicode:"$\x{a2}", rx330_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx330_bstack, rxcap332_fail1025, rx330_pos, 0
    add $I11, rx330_pos, 6
    gt $I11, rx330_eos, rx330_fail1017
    substr $S10, rx330_tgt, rx330_pos, 6
    ne $S10, ucs4:"repeat", rx330_fail1017
    add rx330_pos, 6
    nqp_rxpeek $I19, rx330_bstack, rxcap332_fail1025
    inc $I19
    set $I11, rx330_bstack[$I19]
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx330_pos)
    rx330_cstack = rx330_cur."!cursor_capture"($P11, "sym")
    goto rxcap332_done1024
  rxcap332_fail1025:
    goto rx330_fail1017
  rxcap332_done1024:
    ge rx330_pos, rx330_eos, rx330_fail1017
    is_cclass $I11, .CCLASS_WHITESPACE, rx330_tgt, rx330_pos
    unless $I11, rx330_fail1017
    add rx330_pos, 1
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1017
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt334_01028
    nqp_push_label $P11, alt334_11038
    nqp_rxmark rx330_bstack, alt334_end1027, -1, 0
    rx330_cur."!alt"(rx330_pos, "alt_nfa__15_1359292301.767", $P11)
    goto rx330_fail1017
  alt334_01028:
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1017
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    nqp_rxmark rx330_bstack, rxcap336_fail1031, rx330_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt337_01033
    nqp_push_label $P11, alt337_11034
    nqp_rxmark rx330_bstack, alt337_end1032, -1, 0
    rx330_cur."!alt"(rx330_pos, "alt_nfa__13_1359292301.766", $P11)
    goto rx330_fail1017
  alt337_01033:
    add $I11, rx330_pos, 5
    gt $I11, rx330_eos, rx330_fail1017
    substr $S10, rx330_tgt, rx330_pos, 5
    ne $S10, ucs4:"while", rx330_fail1017
    add rx330_pos, 5
    goto alt337_end1032
  alt337_11034:
    add $I11, rx330_pos, 5
    gt $I11, rx330_eos, rx330_fail1017
    substr $S10, rx330_tgt, rx330_pos, 5
    ne $S10, ucs4:"until", rx330_fail1017
    add rx330_pos, 5
    goto alt337_end1032
  alt337_end1032:
    nqp_rxcommit rx330_bstack, alt337_end1032
    nqp_rxpeek $I19, rx330_bstack, rxcap336_fail1031
    inc $I19
    set $I11, rx330_bstack[$I19]
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx330_pos)
    rx330_cstack = rx330_cur."!cursor_capture"($P11, "wu")
    goto rxcap336_done1030
  rxcap336_fail1031:
    goto rx330_fail1017
  rxcap336_done1030:
    ge rx330_pos, rx330_eos, rx330_fail1017
    is_cclass $I11, .CCLASS_WHITESPACE, rx330_tgt, rx330_pos
    unless $I11, rx330_fail1017
    add rx330_pos, 1
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1017
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1017
    nqp_rxmark rx330_bstack, rxsubrule339_pass1036, -1, 0
  rxsubrule339_pass1036:
    rx330_cstack = rx330_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1017
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    goto alt334_end1027
  alt334_11038:
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1017
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1017
    nqp_rxmark rx330_bstack, rxsubrule342_pass1040, -1, 0
  rxsubrule342_pass1040:
    rx330_cstack = rx330_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1017
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    nqp_rxmark rx330_bstack, rxcap344_fail1043, rx330_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt345_01045
    nqp_push_label $P11, alt345_11046
    nqp_rxmark rx330_bstack, alt345_end1044, -1, 0
    rx330_cur."!alt"(rx330_pos, "alt_nfa__14_1359292301.766", $P11)
    goto rx330_fail1017
  alt345_01045:
    add $I11, rx330_pos, 5
    gt $I11, rx330_eos, rx330_fail1017
    substr $S10, rx330_tgt, rx330_pos, 5
    ne $S10, ucs4:"while", rx330_fail1017
    add rx330_pos, 5
    goto alt345_end1044
  alt345_11046:
    add $I11, rx330_pos, 5
    gt $I11, rx330_eos, rx330_fail1017
    substr $S10, rx330_tgt, rx330_pos, 5
    ne $S10, ucs4:"until", rx330_fail1017
    add rx330_pos, 5
    goto alt345_end1044
  alt345_end1044:
    nqp_rxcommit rx330_bstack, alt345_end1044
    nqp_rxpeek $I19, rx330_bstack, rxcap344_fail1043
    inc $I19
    set $I11, rx330_bstack[$I19]
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx330_pos)
    rx330_cstack = rx330_cur."!cursor_capture"($P11, "wu")
    goto rxcap344_done1042
  rxcap344_fail1043:
    goto rx330_fail1017
  rxcap344_done1042:
    ge rx330_pos, rx330_eos, rx330_fail1017
    is_cclass $I11, .CCLASS_WHITESPACE, rx330_tgt, rx330_pos
    unless $I11, rx330_fail1017
    add rx330_pos, 1
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1017
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1017
    nqp_rxmark rx330_bstack, rxsubrule347_pass1048, -1, 0
  rxsubrule347_pass1048:
    rx330_cstack = rx330_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1017
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    goto alt334_end1027
  alt334_end1027:
    nqp_rxcommit rx330_bstack, alt334_end1027
    repr_bind_attr_int rx330_cur, rx330_curclass, "$!pos", rx330_pos
    $P11 = rx330_cur."ws"()
    repr_get_attr_int $I11, $P11, rx330_curclass, "$!pos"
    lt $I11, 0, rx330_fail1017
    repr_get_attr_int rx330_pos, $P11, rx330_curclass, "$!pos"
    rx330_cur."!cursor_pass"(rx330_pos, "statement_control:sym<repeat>", 'backtrack'=>1)
    .return (rx330_cur)
  rx330_restart1016:
    repr_get_attr_obj rx330_cstack, rx330_cur, rx330_curclass, "$!cstack"
  rx330_fail1017:
    unless rx330_bstack, rx330_done1015
    pop $I19, rx330_bstack
    if_null rx330_cstack, rx330_cstack_done1020
    unless rx330_cstack, rx330_cstack_done1020
    dec $I19
    set $P11, rx330_cstack[$I19]
  rx330_cstack_done1020:
    pop rx330_rep, rx330_bstack
    pop rx330_pos, rx330_bstack
    pop $I19, rx330_bstack
    lt rx330_pos, -1, rx330_done1015
    lt rx330_pos, 0, rx330_fail1017
    eq $I19, 0, rx330_fail1017
    nqp_islist $I20, rx330_cstack
    unless $I20, rx330_jump1018
    elements $I18, rx330_bstack
    le $I18, 0, rx330_cut1019
    dec $I18
    set $I18, rx330_bstack[$I18]
  rx330_cut1019:
    assign rx330_cstack, $I18
  rx330_jump1018:
    jump $I19
  rx330_done1015:
    rx330_cur."!cursor_fail"()
    .return (rx330_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_66_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 846
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx350_tgt
    .local int rx350_pos
    .local int rx350_off
    .local int rx350_eos
    .local int rx350_rep
    .local pmc rx350_cur
    .local pmc rx350_curclass
    .local pmc rx350_bstack
    .local pmc rx350_cstack
    (rx350_cur, rx350_tgt, rx350_pos, rx350_curclass, rx350_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx350_cur
    length rx350_eos, rx350_tgt
    eq $I19, 1, rx350_restart1053
    gt rx350_pos, rx350_eos, rx350_fail1054
    repr_get_attr_int $I11, self, rx350_curclass, "$!from"
    ne $I11, -1, rxscan351_done1060
    goto rxscan351_scan1059
  rxscan351_loop1058:
    inc rx350_pos
    gt rx350_pos, rx350_eos, rx350_fail1054
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!from", rx350_pos
  rxscan351_scan1059:
    nqp_rxmark rx350_bstack, rxscan351_loop1058, rx350_pos, 0
  rxscan351_done1060:
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!pos", rx350_pos
    store_lex unicode:"$\x{a2}", rx350_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx350_bstack, rxcap352_fail1062, rx350_pos, 0
    add $I11, rx350_pos, 3
    gt $I11, rx350_eos, rx350_fail1054
    substr $S10, rx350_tgt, rx350_pos, 3
    ne $S10, ucs4:"for", rx350_fail1054
    add rx350_pos, 3
    nqp_rxpeek $I19, rx350_bstack, rxcap352_fail1062
    inc $I19
    set $I11, rx350_bstack[$I19]
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!pos", rx350_pos
    $P11 = rx350_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx350_pos)
    rx350_cstack = rx350_cur."!cursor_capture"($P11, "sym")
    goto rxcap352_done1061
  rxcap352_fail1062:
    goto rx350_fail1054
  rxcap352_done1061:
    ge rx350_pos, rx350_eos, rx350_fail1054
    is_cclass $I11, .CCLASS_WHITESPACE, rx350_tgt, rx350_pos
    unless $I11, rx350_fail1054
    add rx350_pos, 1
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!pos", rx350_pos
    $P11 = rx350_cur."ws"()
    repr_get_attr_int $I11, $P11, rx350_curclass, "$!pos"
    lt $I11, 0, rx350_fail1054
    repr_get_attr_int rx350_pos, $P11, rx350_curclass, "$!pos"
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!pos", rx350_pos
    $P11 = rx350_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx350_curclass, "$!pos"
    lt $I11, 0, rx350_fail1054
    nqp_rxmark rx350_bstack, rxsubrule354_pass1064, -1, 0
  rxsubrule354_pass1064:
    rx350_cstack = rx350_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx350_pos, $P11, rx350_curclass, "$!pos"
    repr_bind_attr_int rx350_cur, rx350_curclass, "$!pos", rx350_pos
    $P11 = rx350_cur."ws"()
    repr_get_attr_int $I11, $P11, rx350_curclass, "$!pos"
    lt $I11, 0, rx350_fail1054
    repr_get_attr_int rx350_pos, $P11, rx350_curclass, "$!pos"
    rx350_cur."!cursor_pass"(rx350_pos, "statement_control:sym<for>", 'backtrack'=>1)
    .return (rx350_cur)
  rx350_restart1053:
    repr_get_attr_obj rx350_cstack, rx350_cur, rx350_curclass, "$!cstack"
  rx350_fail1054:
    unless rx350_bstack, rx350_done1052
    pop $I19, rx350_bstack
    if_null rx350_cstack, rx350_cstack_done1057
    unless rx350_cstack, rx350_cstack_done1057
    dec $I19
    set $P11, rx350_cstack[$I19]
  rx350_cstack_done1057:
    pop rx350_rep, rx350_bstack
    pop rx350_pos, rx350_bstack
    pop $I19, rx350_bstack
    lt rx350_pos, -1, rx350_done1052
    lt rx350_pos, 0, rx350_fail1054
    eq $I19, 0, rx350_fail1054
    nqp_islist $I20, rx350_cstack
    unless $I20, rx350_jump1055
    elements $I18, rx350_bstack
    le $I18, 0, rx350_cut1056
    dec $I18
    set $I18, rx350_bstack[$I18]
  rx350_cut1056:
    assign rx350_cstack, $I18
  rx350_jump1055:
    jump $I19
  rx350_done1052:
    rx350_cur."!cursor_fail"()
    .return (rx350_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_67_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 852
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx356_tgt
    .local int rx356_pos
    .local int rx356_off
    .local int rx356_eos
    .local int rx356_rep
    .local pmc rx356_cur
    .local pmc rx356_curclass
    .local pmc rx356_bstack
    .local pmc rx356_cstack
    (rx356_cur, rx356_tgt, rx356_pos, rx356_curclass, rx356_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx356_cur
    length rx356_eos, rx356_tgt
    eq $I19, 1, rx356_restart1068
    gt rx356_pos, rx356_eos, rx356_fail1069
    repr_get_attr_int $I11, self, rx356_curclass, "$!from"
    ne $I11, -1, rxscan357_done1075
    goto rxscan357_scan1074
  rxscan357_loop1073:
    inc rx356_pos
    gt rx356_pos, rx356_eos, rx356_fail1069
    repr_bind_attr_int rx356_cur, rx356_curclass, "$!from", rx356_pos
  rxscan357_scan1074:
    nqp_rxmark rx356_bstack, rxscan357_loop1073, rx356_pos, 0
  rxscan357_done1075:
    nqp_rxmark rx356_bstack, rxcap358_fail1077, rx356_pos, 0
    add $I11, rx356_pos, 5
    gt $I11, rx356_eos, rx356_fail1069
    substr $S10, rx356_tgt, rx356_pos, 5
    ne $S10, ucs4:"CATCH", rx356_fail1069
    add rx356_pos, 5
    nqp_rxpeek $I19, rx356_bstack, rxcap358_fail1077
    inc $I19
    set $I11, rx356_bstack[$I19]
    repr_bind_attr_int rx356_cur, rx356_curclass, "$!pos", rx356_pos
    $P11 = rx356_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx356_pos)
    rx356_cstack = rx356_cur."!cursor_capture"($P11, "sym")
    goto rxcap358_done1076
  rxcap358_fail1077:
    goto rx356_fail1069
  rxcap358_done1076:
    ge rx356_pos, rx356_eos, rx356_fail1069
    is_cclass $I11, .CCLASS_WHITESPACE, rx356_tgt, rx356_pos
    unless $I11, rx356_fail1069
    add rx356_pos, 1
    repr_bind_attr_int rx356_cur, rx356_curclass, "$!pos", rx356_pos
    $P11 = rx356_cur."ws"()
    repr_get_attr_int $I11, $P11, rx356_curclass, "$!pos"
    lt $I11, 0, rx356_fail1069
    repr_get_attr_int rx356_pos, $P11, rx356_curclass, "$!pos"
    repr_bind_attr_int rx356_cur, rx356_curclass, "$!pos", rx356_pos
    $P11 = rx356_cur."block"()
    repr_get_attr_int $I11, $P11, rx356_curclass, "$!pos"
    lt $I11, 0, rx356_fail1069
    nqp_rxmark rx356_bstack, rxsubrule360_pass1079, -1, 0
  rxsubrule360_pass1079:
    rx356_cstack = rx356_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx356_pos, $P11, rx356_curclass, "$!pos"
    repr_bind_attr_int rx356_cur, rx356_curclass, "$!pos", rx356_pos
    $P11 = rx356_cur."ws"()
    repr_get_attr_int $I11, $P11, rx356_curclass, "$!pos"
    lt $I11, 0, rx356_fail1069
    repr_get_attr_int rx356_pos, $P11, rx356_curclass, "$!pos"
    rx356_cur."!cursor_pass"(rx356_pos, "statement_control:sym<CATCH>", 'backtrack'=>1)
    .return (rx356_cur)
  rx356_restart1068:
    repr_get_attr_obj rx356_cstack, rx356_cur, rx356_curclass, "$!cstack"
  rx356_fail1069:
    unless rx356_bstack, rx356_done1067
    pop $I19, rx356_bstack
    if_null rx356_cstack, rx356_cstack_done1072
    unless rx356_cstack, rx356_cstack_done1072
    dec $I19
    set $P11, rx356_cstack[$I19]
  rx356_cstack_done1072:
    pop rx356_rep, rx356_bstack
    pop rx356_pos, rx356_bstack
    pop $I19, rx356_bstack
    lt rx356_pos, -1, rx356_done1067
    lt rx356_pos, 0, rx356_fail1069
    eq $I19, 0, rx356_fail1069
    nqp_islist $I20, rx356_cstack
    unless $I20, rx356_jump1070
    elements $I18, rx356_bstack
    le $I18, 0, rx356_cut1071
    dec $I18
    set $I18, rx356_bstack[$I18]
  rx356_cut1071:
    assign rx356_cstack, $I18
  rx356_jump1070:
    jump $I19
  rx356_done1067:
    rx356_cur."!cursor_fail"()
    .return (rx356_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_68_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 857
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx362_tgt
    .local int rx362_pos
    .local int rx362_off
    .local int rx362_eos
    .local int rx362_rep
    .local pmc rx362_cur
    .local pmc rx362_curclass
    .local pmc rx362_bstack
    .local pmc rx362_cstack
    (rx362_cur, rx362_tgt, rx362_pos, rx362_curclass, rx362_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx362_cur
    length rx362_eos, rx362_tgt
    eq $I19, 1, rx362_restart1083
    gt rx362_pos, rx362_eos, rx362_fail1084
    repr_get_attr_int $I11, self, rx362_curclass, "$!from"
    ne $I11, -1, rxscan363_done1090
    goto rxscan363_scan1089
  rxscan363_loop1088:
    inc rx362_pos
    gt rx362_pos, rx362_eos, rx362_fail1084
    repr_bind_attr_int rx362_cur, rx362_curclass, "$!from", rx362_pos
  rxscan363_scan1089:
    nqp_rxmark rx362_bstack, rxscan363_loop1088, rx362_pos, 0
  rxscan363_done1090:
    nqp_rxmark rx362_bstack, rxcap364_fail1092, rx362_pos, 0
    add $I11, rx362_pos, 7
    gt $I11, rx362_eos, rx362_fail1084
    substr $S10, rx362_tgt, rx362_pos, 7
    ne $S10, ucs4:"CONTROL", rx362_fail1084
    add rx362_pos, 7
    nqp_rxpeek $I19, rx362_bstack, rxcap364_fail1092
    inc $I19
    set $I11, rx362_bstack[$I19]
    repr_bind_attr_int rx362_cur, rx362_curclass, "$!pos", rx362_pos
    $P11 = rx362_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx362_pos)
    rx362_cstack = rx362_cur."!cursor_capture"($P11, "sym")
    goto rxcap364_done1091
  rxcap364_fail1092:
    goto rx362_fail1084
  rxcap364_done1091:
    ge rx362_pos, rx362_eos, rx362_fail1084
    is_cclass $I11, .CCLASS_WHITESPACE, rx362_tgt, rx362_pos
    unless $I11, rx362_fail1084
    add rx362_pos, 1
    repr_bind_attr_int rx362_cur, rx362_curclass, "$!pos", rx362_pos
    $P11 = rx362_cur."ws"()
    repr_get_attr_int $I11, $P11, rx362_curclass, "$!pos"
    lt $I11, 0, rx362_fail1084
    repr_get_attr_int rx362_pos, $P11, rx362_curclass, "$!pos"
    repr_bind_attr_int rx362_cur, rx362_curclass, "$!pos", rx362_pos
    $P11 = rx362_cur."block"()
    repr_get_attr_int $I11, $P11, rx362_curclass, "$!pos"
    lt $I11, 0, rx362_fail1084
    nqp_rxmark rx362_bstack, rxsubrule366_pass1094, -1, 0
  rxsubrule366_pass1094:
    rx362_cstack = rx362_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx362_pos, $P11, rx362_curclass, "$!pos"
    repr_bind_attr_int rx362_cur, rx362_curclass, "$!pos", rx362_pos
    $P11 = rx362_cur."ws"()
    repr_get_attr_int $I11, $P11, rx362_curclass, "$!pos"
    lt $I11, 0, rx362_fail1084
    repr_get_attr_int rx362_pos, $P11, rx362_curclass, "$!pos"
    rx362_cur."!cursor_pass"(rx362_pos, "statement_control:sym<CONTROL>", 'backtrack'=>1)
    .return (rx362_cur)
  rx362_restart1083:
    repr_get_attr_obj rx362_cstack, rx362_cur, rx362_curclass, "$!cstack"
  rx362_fail1084:
    unless rx362_bstack, rx362_done1082
    pop $I19, rx362_bstack
    if_null rx362_cstack, rx362_cstack_done1087
    unless rx362_cstack, rx362_cstack_done1087
    dec $I19
    set $P11, rx362_cstack[$I19]
  rx362_cstack_done1087:
    pop rx362_rep, rx362_bstack
    pop rx362_pos, rx362_bstack
    pop $I19, rx362_bstack
    lt rx362_pos, -1, rx362_done1082
    lt rx362_pos, 0, rx362_fail1084
    eq $I19, 0, rx362_fail1084
    nqp_islist $I20, rx362_cstack
    unless $I20, rx362_jump1085
    elements $I18, rx362_bstack
    le $I18, 0, rx362_cut1086
    dec $I18
    set $I18, rx362_bstack[$I18]
  rx362_cut1086:
    assign rx362_cstack, $I18
  rx362_jump1085:
    jump $I19
  rx362_done1082:
    rx362_cur."!cursor_fail"()
    .return (rx362_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix" :subid("cuid_69_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 862
    .param pmc self 
    $P5001 = self."!protoregex"("statement_prefix")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_70_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 863
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx368_tgt
    .local int rx368_pos
    .local int rx368_off
    .local int rx368_eos
    .local int rx368_rep
    .local pmc rx368_cur
    .local pmc rx368_curclass
    .local pmc rx368_bstack
    .local pmc rx368_cstack
    (rx368_cur, rx368_tgt, rx368_pos, rx368_curclass, rx368_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx368_cur
    length rx368_eos, rx368_tgt
    eq $I19, 1, rx368_restart1098
    gt rx368_pos, rx368_eos, rx368_fail1099
    repr_get_attr_int $I11, self, rx368_curclass, "$!from"
    ne $I11, -1, rxscan369_done1105
    goto rxscan369_scan1104
  rxscan369_loop1103:
    inc rx368_pos
    gt rx368_pos, rx368_eos, rx368_fail1099
    repr_bind_attr_int rx368_cur, rx368_curclass, "$!from", rx368_pos
  rxscan369_scan1104:
    nqp_rxmark rx368_bstack, rxscan369_loop1103, rx368_pos, 0
  rxscan369_done1105:
    nqp_rxmark rx368_bstack, rxcap370_fail1107, rx368_pos, 0
    add $I11, rx368_pos, 5
    gt $I11, rx368_eos, rx368_fail1099
    substr $S10, rx368_tgt, rx368_pos, 5
    ne $S10, ucs4:"BEGIN", rx368_fail1099
    add rx368_pos, 5
    nqp_rxpeek $I19, rx368_bstack, rxcap370_fail1107
    inc $I19
    set $I11, rx368_bstack[$I19]
    repr_bind_attr_int rx368_cur, rx368_curclass, "$!pos", rx368_pos
    $P11 = rx368_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx368_pos)
    rx368_cstack = rx368_cur."!cursor_capture"($P11, "sym")
    goto rxcap370_done1106
  rxcap370_fail1107:
    goto rx368_fail1099
  rxcap370_done1106:
    repr_bind_attr_int rx368_cur, rx368_curclass, "$!pos", rx368_pos
    $P11 = rx368_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx368_curclass, "$!pos"
    lt $I11, 0, rx368_fail1099
    nqp_rxmark rx368_bstack, rxsubrule371_pass1108, -1, 0
  rxsubrule371_pass1108:
    rx368_cstack = rx368_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx368_pos, $P11, rx368_curclass, "$!pos"
    rx368_cur."!cursor_pass"(rx368_pos, "statement_prefix:sym<BEGIN>", 'backtrack'=>1)
    .return (rx368_cur)
  rx368_restart1098:
    repr_get_attr_obj rx368_cstack, rx368_cur, rx368_curclass, "$!cstack"
  rx368_fail1099:
    unless rx368_bstack, rx368_done1097
    pop $I19, rx368_bstack
    if_null rx368_cstack, rx368_cstack_done1102
    unless rx368_cstack, rx368_cstack_done1102
    dec $I19
    set $P11, rx368_cstack[$I19]
  rx368_cstack_done1102:
    pop rx368_rep, rx368_bstack
    pop rx368_pos, rx368_bstack
    pop $I19, rx368_bstack
    lt rx368_pos, -1, rx368_done1097
    lt rx368_pos, 0, rx368_fail1099
    eq $I19, 0, rx368_fail1099
    nqp_islist $I20, rx368_cstack
    unless $I20, rx368_jump1100
    elements $I18, rx368_bstack
    le $I18, 0, rx368_cut1101
    dec $I18
    set $I18, rx368_bstack[$I18]
  rx368_cut1101:
    assign rx368_cstack, $I18
  rx368_jump1100:
    jump $I19
  rx368_done1097:
    rx368_cur."!cursor_fail"()
    .return (rx368_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_71_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 864
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx372_tgt
    .local int rx372_pos
    .local int rx372_off
    .local int rx372_eos
    .local int rx372_rep
    .local pmc rx372_cur
    .local pmc rx372_curclass
    .local pmc rx372_bstack
    .local pmc rx372_cstack
    (rx372_cur, rx372_tgt, rx372_pos, rx372_curclass, rx372_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx372_cur
    length rx372_eos, rx372_tgt
    eq $I19, 1, rx372_restart1111
    gt rx372_pos, rx372_eos, rx372_fail1112
    repr_get_attr_int $I11, self, rx372_curclass, "$!from"
    ne $I11, -1, rxscan373_done1118
    goto rxscan373_scan1117
  rxscan373_loop1116:
    inc rx372_pos
    gt rx372_pos, rx372_eos, rx372_fail1112
    repr_bind_attr_int rx372_cur, rx372_curclass, "$!from", rx372_pos
  rxscan373_scan1117:
    nqp_rxmark rx372_bstack, rxscan373_loop1116, rx372_pos, 0
  rxscan373_done1118:
    nqp_rxmark rx372_bstack, rxcap374_fail1120, rx372_pos, 0
    add $I11, rx372_pos, 4
    gt $I11, rx372_eos, rx372_fail1112
    substr $S10, rx372_tgt, rx372_pos, 4
    ne $S10, ucs4:"INIT", rx372_fail1112
    add rx372_pos, 4
    nqp_rxpeek $I19, rx372_bstack, rxcap374_fail1120
    inc $I19
    set $I11, rx372_bstack[$I19]
    repr_bind_attr_int rx372_cur, rx372_curclass, "$!pos", rx372_pos
    $P11 = rx372_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx372_pos)
    rx372_cstack = rx372_cur."!cursor_capture"($P11, "sym")
    goto rxcap374_done1119
  rxcap374_fail1120:
    goto rx372_fail1112
  rxcap374_done1119:
    repr_bind_attr_int rx372_cur, rx372_curclass, "$!pos", rx372_pos
    $P11 = rx372_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx372_curclass, "$!pos"
    lt $I11, 0, rx372_fail1112
    nqp_rxmark rx372_bstack, rxsubrule375_pass1121, -1, 0
  rxsubrule375_pass1121:
    rx372_cstack = rx372_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx372_pos, $P11, rx372_curclass, "$!pos"
    rx372_cur."!cursor_pass"(rx372_pos, "statement_prefix:sym<INIT>", 'backtrack'=>1)
    .return (rx372_cur)
  rx372_restart1111:
    repr_get_attr_obj rx372_cstack, rx372_cur, rx372_curclass, "$!cstack"
  rx372_fail1112:
    unless rx372_bstack, rx372_done1110
    pop $I19, rx372_bstack
    if_null rx372_cstack, rx372_cstack_done1115
    unless rx372_cstack, rx372_cstack_done1115
    dec $I19
    set $P11, rx372_cstack[$I19]
  rx372_cstack_done1115:
    pop rx372_rep, rx372_bstack
    pop rx372_pos, rx372_bstack
    pop $I19, rx372_bstack
    lt rx372_pos, -1, rx372_done1110
    lt rx372_pos, 0, rx372_fail1112
    eq $I19, 0, rx372_fail1112
    nqp_islist $I20, rx372_cstack
    unless $I20, rx372_jump1113
    elements $I18, rx372_bstack
    le $I18, 0, rx372_cut1114
    dec $I18
    set $I18, rx372_bstack[$I18]
  rx372_cut1114:
    assign rx372_cstack, $I18
  rx372_jump1113:
    jump $I19
  rx372_done1110:
    rx372_cur."!cursor_fail"()
    .return (rx372_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_72_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 866
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx376_tgt
    .local int rx376_pos
    .local int rx376_off
    .local int rx376_eos
    .local int rx376_rep
    .local pmc rx376_cur
    .local pmc rx376_curclass
    .local pmc rx376_bstack
    .local pmc rx376_cstack
    (rx376_cur, rx376_tgt, rx376_pos, rx376_curclass, rx376_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx376_cur
    length rx376_eos, rx376_tgt
    eq $I19, 1, rx376_restart1124
    gt rx376_pos, rx376_eos, rx376_fail1125
    repr_get_attr_int $I11, self, rx376_curclass, "$!from"
    ne $I11, -1, rxscan377_done1131
    goto rxscan377_scan1130
  rxscan377_loop1129:
    inc rx376_pos
    gt rx376_pos, rx376_eos, rx376_fail1125
    repr_bind_attr_int rx376_cur, rx376_curclass, "$!from", rx376_pos
  rxscan377_scan1130:
    nqp_rxmark rx376_bstack, rxscan377_loop1129, rx376_pos, 0
  rxscan377_done1131:
    nqp_rxmark rx376_bstack, rxcap378_fail1133, rx376_pos, 0
    add $I11, rx376_pos, 3
    gt $I11, rx376_eos, rx376_fail1125
    substr $S10, rx376_tgt, rx376_pos, 3
    ne $S10, ucs4:"try", rx376_fail1125
    add rx376_pos, 3
    nqp_rxpeek $I19, rx376_bstack, rxcap378_fail1133
    inc $I19
    set $I11, rx376_bstack[$I19]
    repr_bind_attr_int rx376_cur, rx376_curclass, "$!pos", rx376_pos
    $P11 = rx376_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx376_pos)
    rx376_cstack = rx376_cur."!cursor_capture"($P11, "sym")
    goto rxcap378_done1132
  rxcap378_fail1133:
    goto rx376_fail1125
  rxcap378_done1132:
    repr_bind_attr_int rx376_cur, rx376_curclass, "$!pos", rx376_pos
    $P11 = rx376_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx376_curclass, "$!pos"
    lt $I11, 0, rx376_fail1125
    nqp_rxmark rx376_bstack, rxsubrule379_pass1134, -1, 0
  rxsubrule379_pass1134:
    rx376_cstack = rx376_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx376_pos, $P11, rx376_curclass, "$!pos"
    rx376_cur."!cursor_pass"(rx376_pos, "statement_prefix:sym<try>", 'backtrack'=>1)
    .return (rx376_cur)
  rx376_restart1124:
    repr_get_attr_obj rx376_cstack, rx376_cur, rx376_curclass, "$!cstack"
  rx376_fail1125:
    unless rx376_bstack, rx376_done1123
    pop $I19, rx376_bstack
    if_null rx376_cstack, rx376_cstack_done1128
    unless rx376_cstack, rx376_cstack_done1128
    dec $I19
    set $P11, rx376_cstack[$I19]
  rx376_cstack_done1128:
    pop rx376_rep, rx376_bstack
    pop rx376_pos, rx376_bstack
    pop $I19, rx376_bstack
    lt rx376_pos, -1, rx376_done1123
    lt rx376_pos, 0, rx376_fail1125
    eq $I19, 0, rx376_fail1125
    nqp_islist $I20, rx376_cstack
    unless $I20, rx376_jump1126
    elements $I18, rx376_bstack
    le $I18, 0, rx376_cut1127
    dec $I18
    set $I18, rx376_bstack[$I18]
  rx376_cut1127:
    assign rx376_cstack, $I18
  rx376_jump1126:
    jump $I19
  rx376_done1123:
    rx376_cur."!cursor_fail"()
    .return (rx376_cur) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_73_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 871
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx380_tgt
    .local int rx380_pos
    .local int rx380_off
    .local int rx380_eos
    .local int rx380_rep
    .local pmc rx380_cur
    .local pmc rx380_curclass
    .local pmc rx380_bstack
    .local pmc rx380_cstack
    (rx380_cur, rx380_tgt, rx380_pos, rx380_curclass, rx380_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx380_cur
    length rx380_eos, rx380_tgt
    eq $I19, 1, rx380_restart1137
    gt rx380_pos, rx380_eos, rx380_fail1138
    repr_get_attr_int $I11, self, rx380_curclass, "$!from"
    ne $I11, -1, rxscan381_done1144
    goto rxscan381_scan1143
  rxscan381_loop1142:
    inc rx380_pos
    gt rx380_pos, rx380_eos, rx380_fail1138
    repr_bind_attr_int rx380_cur, rx380_curclass, "$!from", rx380_pos
  rxscan381_scan1143:
    nqp_rxmark rx380_bstack, rxscan381_loop1142, rx380_pos, 0
  rxscan381_done1144:
    ge rx380_pos, rx380_eos, rx380_fail1138
    is_cclass $I11, .CCLASS_WHITESPACE, rx380_tgt, rx380_pos
    unless $I11, rx380_fail1138
    add rx380_pos, 1
    repr_bind_attr_int rx380_cur, rx380_curclass, "$!pos", rx380_pos
    $P11 = rx380_cur."ws"()
    repr_get_attr_int $I11, $P11, rx380_curclass, "$!pos"
    lt $I11, 0, rx380_fail1138
    repr_get_attr_int rx380_pos, $P11, rx380_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt383_01147
    nqp_push_label $P11, alt383_11149
    nqp_rxmark rx380_bstack, alt383_end1146, -1, 0
    rx380_cur."!alt"(rx380_pos, "alt_nfa__16_1359292301.815", $P11)
    goto rx380_fail1138
  alt383_01147:
    ge rx380_pos, rx380_eos, rx380_fail1138
    substr $S11, rx380_tgt, rx380_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx380_fail1138
    repr_bind_attr_int rx380_cur, rx380_curclass, "$!pos", rx380_pos
    $P11 = rx380_cur."block"()
    repr_get_attr_int $I11, $P11, rx380_curclass, "$!pos"
    lt $I11, 0, rx380_fail1138
    nqp_rxmark rx380_bstack, rxsubrule384_pass1148, -1, 0
  rxsubrule384_pass1148:
    rx380_cstack = rx380_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx380_pos, $P11, rx380_curclass, "$!pos"
    goto alt383_end1146
  alt383_11149:
    repr_bind_attr_int rx380_cur, rx380_curclass, "$!pos", rx380_pos
    $P11 = rx380_cur."statement"()
    repr_get_attr_int $I11, $P11, rx380_curclass, "$!pos"
    lt $I11, 0, rx380_fail1138
    nqp_rxmark rx380_bstack, rxsubrule385_pass1150, -1, 0
  rxsubrule385_pass1150:
    rx380_cstack = rx380_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx380_pos, $P11, rx380_curclass, "$!pos"
    goto alt383_end1146
  alt383_end1146:
    nqp_rxcommit rx380_bstack, alt383_end1146
    rx380_cur."!cursor_pass"(rx380_pos, "blorst", 'backtrack'=>1)
    .return (rx380_cur)
  rx380_restart1137:
    repr_get_attr_obj rx380_cstack, rx380_cur, rx380_curclass, "$!cstack"
  rx380_fail1138:
    unless rx380_bstack, rx380_done1136
    pop $I19, rx380_bstack
    if_null rx380_cstack, rx380_cstack_done1141
    unless rx380_cstack, rx380_cstack_done1141
    dec $I19
    set $P11, rx380_cstack[$I19]
  rx380_cstack_done1141:
    pop rx380_rep, rx380_bstack
    pop rx380_pos, rx380_bstack
    pop $I19, rx380_bstack
    lt rx380_pos, -1, rx380_done1136
    lt rx380_pos, 0, rx380_fail1138
    eq $I19, 0, rx380_fail1138
    nqp_islist $I20, rx380_cstack
    unless $I20, rx380_jump1139
    elements $I18, rx380_bstack
    le $I18, 0, rx380_cut1140
    dec $I18
    set $I18, rx380_bstack[$I18]
  rx380_cut1140:
    assign rx380_cstack, $I18
  rx380_jump1139:
    jump $I19
  rx380_done1136:
    rx380_cur."!cursor_fail"()
    .return (rx380_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond" :subid("cuid_74_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 877
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_cond")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_75_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 879
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx386_tgt
    .local int rx386_pos
    .local int rx386_off
    .local int rx386_eos
    .local int rx386_rep
    .local pmc rx386_cur
    .local pmc rx386_curclass
    .local pmc rx386_bstack
    .local pmc rx386_cstack
    (rx386_cur, rx386_tgt, rx386_pos, rx386_curclass, rx386_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx386_cur
    length rx386_eos, rx386_tgt
    eq $I19, 1, rx386_restart1153
    gt rx386_pos, rx386_eos, rx386_fail1154
    repr_get_attr_int $I11, self, rx386_curclass, "$!from"
    ne $I11, -1, rxscan387_done1160
    goto rxscan387_scan1159
  rxscan387_loop1158:
    inc rx386_pos
    gt rx386_pos, rx386_eos, rx386_fail1154
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!from", rx386_pos
  rxscan387_scan1159:
    nqp_rxmark rx386_bstack, rxscan387_loop1158, rx386_pos, 0
  rxscan387_done1160:
    nqp_rxmark rx386_bstack, rxcap388_fail1162, rx386_pos, 0
    add $I11, rx386_pos, 2
    gt $I11, rx386_eos, rx386_fail1154
    substr $S10, rx386_tgt, rx386_pos, 2
    ne $S10, ucs4:"if", rx386_fail1154
    add rx386_pos, 2
    nqp_rxpeek $I19, rx386_bstack, rxcap388_fail1162
    inc $I19
    set $I11, rx386_bstack[$I19]
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!pos", rx386_pos
    $P11 = rx386_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx386_pos)
    rx386_cstack = rx386_cur."!cursor_capture"($P11, "sym")
    goto rxcap388_done1161
  rxcap388_fail1162:
    goto rx386_fail1154
  rxcap388_done1161:
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!pos", rx386_pos
    $P11 = rx386_cur."ws"()
    repr_get_attr_int $I11, $P11, rx386_curclass, "$!pos"
    lt $I11, 0, rx386_fail1154
    repr_get_attr_int rx386_pos, $P11, rx386_curclass, "$!pos"
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!pos", rx386_pos
    $P11 = rx386_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx386_curclass, "$!pos"
    lt $I11, 0, rx386_fail1154
    nqp_rxmark rx386_bstack, rxsubrule390_pass1164, -1, 0
  rxsubrule390_pass1164:
    rx386_cstack = rx386_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx386_pos, $P11, rx386_curclass, "$!pos"
    repr_bind_attr_int rx386_cur, rx386_curclass, "$!pos", rx386_pos
    $P11 = rx386_cur."ws"()
    repr_get_attr_int $I11, $P11, rx386_curclass, "$!pos"
    lt $I11, 0, rx386_fail1154
    repr_get_attr_int rx386_pos, $P11, rx386_curclass, "$!pos"
    rx386_cur."!cursor_pass"(rx386_pos, "statement_mod_cond:sym<if>", 'backtrack'=>1)
    .return (rx386_cur)
  rx386_restart1153:
    repr_get_attr_obj rx386_cstack, rx386_cur, rx386_curclass, "$!cstack"
  rx386_fail1154:
    unless rx386_bstack, rx386_done1152
    pop $I19, rx386_bstack
    if_null rx386_cstack, rx386_cstack_done1157
    unless rx386_cstack, rx386_cstack_done1157
    dec $I19
    set $P11, rx386_cstack[$I19]
  rx386_cstack_done1157:
    pop rx386_rep, rx386_bstack
    pop rx386_pos, rx386_bstack
    pop $I19, rx386_bstack
    lt rx386_pos, -1, rx386_done1152
    lt rx386_pos, 0, rx386_fail1154
    eq $I19, 0, rx386_fail1154
    nqp_islist $I20, rx386_cstack
    unless $I20, rx386_jump1155
    elements $I18, rx386_bstack
    le $I18, 0, rx386_cut1156
    dec $I18
    set $I18, rx386_bstack[$I18]
  rx386_cut1156:
    assign rx386_cstack, $I18
  rx386_jump1155:
    jump $I19
  rx386_done1152:
    rx386_cur."!cursor_fail"()
    .return (rx386_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_76_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 880
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx392_tgt
    .local int rx392_pos
    .local int rx392_off
    .local int rx392_eos
    .local int rx392_rep
    .local pmc rx392_cur
    .local pmc rx392_curclass
    .local pmc rx392_bstack
    .local pmc rx392_cstack
    (rx392_cur, rx392_tgt, rx392_pos, rx392_curclass, rx392_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx392_cur
    length rx392_eos, rx392_tgt
    eq $I19, 1, rx392_restart1168
    gt rx392_pos, rx392_eos, rx392_fail1169
    repr_get_attr_int $I11, self, rx392_curclass, "$!from"
    ne $I11, -1, rxscan393_done1175
    goto rxscan393_scan1174
  rxscan393_loop1173:
    inc rx392_pos
    gt rx392_pos, rx392_eos, rx392_fail1169
    repr_bind_attr_int rx392_cur, rx392_curclass, "$!from", rx392_pos
  rxscan393_scan1174:
    nqp_rxmark rx392_bstack, rxscan393_loop1173, rx392_pos, 0
  rxscan393_done1175:
    nqp_rxmark rx392_bstack, rxcap394_fail1177, rx392_pos, 0
    add $I11, rx392_pos, 6
    gt $I11, rx392_eos, rx392_fail1169
    substr $S10, rx392_tgt, rx392_pos, 6
    ne $S10, ucs4:"unless", rx392_fail1169
    add rx392_pos, 6
    nqp_rxpeek $I19, rx392_bstack, rxcap394_fail1177
    inc $I19
    set $I11, rx392_bstack[$I19]
    repr_bind_attr_int rx392_cur, rx392_curclass, "$!pos", rx392_pos
    $P11 = rx392_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx392_pos)
    rx392_cstack = rx392_cur."!cursor_capture"($P11, "sym")
    goto rxcap394_done1176
  rxcap394_fail1177:
    goto rx392_fail1169
  rxcap394_done1176:
    repr_bind_attr_int rx392_cur, rx392_curclass, "$!pos", rx392_pos
    $P11 = rx392_cur."ws"()
    repr_get_attr_int $I11, $P11, rx392_curclass, "$!pos"
    lt $I11, 0, rx392_fail1169
    repr_get_attr_int rx392_pos, $P11, rx392_curclass, "$!pos"
    repr_bind_attr_int rx392_cur, rx392_curclass, "$!pos", rx392_pos
    $P11 = rx392_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx392_curclass, "$!pos"
    lt $I11, 0, rx392_fail1169
    nqp_rxmark rx392_bstack, rxsubrule396_pass1179, -1, 0
  rxsubrule396_pass1179:
    rx392_cstack = rx392_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx392_pos, $P11, rx392_curclass, "$!pos"
    repr_bind_attr_int rx392_cur, rx392_curclass, "$!pos", rx392_pos
    $P11 = rx392_cur."ws"()
    repr_get_attr_int $I11, $P11, rx392_curclass, "$!pos"
    lt $I11, 0, rx392_fail1169
    repr_get_attr_int rx392_pos, $P11, rx392_curclass, "$!pos"
    rx392_cur."!cursor_pass"(rx392_pos, "statement_mod_cond:sym<unless>", 'backtrack'=>1)
    .return (rx392_cur)
  rx392_restart1168:
    repr_get_attr_obj rx392_cstack, rx392_cur, rx392_curclass, "$!cstack"
  rx392_fail1169:
    unless rx392_bstack, rx392_done1167
    pop $I19, rx392_bstack
    if_null rx392_cstack, rx392_cstack_done1172
    unless rx392_cstack, rx392_cstack_done1172
    dec $I19
    set $P11, rx392_cstack[$I19]
  rx392_cstack_done1172:
    pop rx392_rep, rx392_bstack
    pop rx392_pos, rx392_bstack
    pop $I19, rx392_bstack
    lt rx392_pos, -1, rx392_done1167
    lt rx392_pos, 0, rx392_fail1169
    eq $I19, 0, rx392_fail1169
    nqp_islist $I20, rx392_cstack
    unless $I20, rx392_jump1170
    elements $I18, rx392_bstack
    le $I18, 0, rx392_cut1171
    dec $I18
    set $I18, rx392_bstack[$I18]
  rx392_cut1171:
    assign rx392_cstack, $I18
  rx392_jump1170:
    jump $I19
  rx392_done1167:
    rx392_cur."!cursor_fail"()
    .return (rx392_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop" :subid("cuid_77_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 882
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_loop")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_78_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 884
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx398_tgt
    .local int rx398_pos
    .local int rx398_off
    .local int rx398_eos
    .local int rx398_rep
    .local pmc rx398_cur
    .local pmc rx398_curclass
    .local pmc rx398_bstack
    .local pmc rx398_cstack
    (rx398_cur, rx398_tgt, rx398_pos, rx398_curclass, rx398_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx398_cur
    length rx398_eos, rx398_tgt
    eq $I19, 1, rx398_restart1183
    gt rx398_pos, rx398_eos, rx398_fail1184
    repr_get_attr_int $I11, self, rx398_curclass, "$!from"
    ne $I11, -1, rxscan399_done1190
    goto rxscan399_scan1189
  rxscan399_loop1188:
    inc rx398_pos
    gt rx398_pos, rx398_eos, rx398_fail1184
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!from", rx398_pos
  rxscan399_scan1189:
    nqp_rxmark rx398_bstack, rxscan399_loop1188, rx398_pos, 0
  rxscan399_done1190:
    nqp_rxmark rx398_bstack, rxcap400_fail1192, rx398_pos, 0
    add $I11, rx398_pos, 5
    gt $I11, rx398_eos, rx398_fail1184
    substr $S10, rx398_tgt, rx398_pos, 5
    ne $S10, ucs4:"while", rx398_fail1184
    add rx398_pos, 5
    nqp_rxpeek $I19, rx398_bstack, rxcap400_fail1192
    inc $I19
    set $I11, rx398_bstack[$I19]
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!pos", rx398_pos
    $P11 = rx398_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx398_pos)
    rx398_cstack = rx398_cur."!cursor_capture"($P11, "sym")
    goto rxcap400_done1191
  rxcap400_fail1192:
    goto rx398_fail1184
  rxcap400_done1191:
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!pos", rx398_pos
    $P11 = rx398_cur."ws"()
    repr_get_attr_int $I11, $P11, rx398_curclass, "$!pos"
    lt $I11, 0, rx398_fail1184
    repr_get_attr_int rx398_pos, $P11, rx398_curclass, "$!pos"
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!pos", rx398_pos
    $P11 = rx398_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx398_curclass, "$!pos"
    lt $I11, 0, rx398_fail1184
    nqp_rxmark rx398_bstack, rxsubrule402_pass1194, -1, 0
  rxsubrule402_pass1194:
    rx398_cstack = rx398_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx398_pos, $P11, rx398_curclass, "$!pos"
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!pos", rx398_pos
    $P11 = rx398_cur."ws"()
    repr_get_attr_int $I11, $P11, rx398_curclass, "$!pos"
    lt $I11, 0, rx398_fail1184
    repr_get_attr_int rx398_pos, $P11, rx398_curclass, "$!pos"
    rx398_cur."!cursor_pass"(rx398_pos, "statement_mod_loop:sym<while>", 'backtrack'=>1)
    .return (rx398_cur)
  rx398_restart1183:
    repr_get_attr_obj rx398_cstack, rx398_cur, rx398_curclass, "$!cstack"
  rx398_fail1184:
    unless rx398_bstack, rx398_done1182
    pop $I19, rx398_bstack
    if_null rx398_cstack, rx398_cstack_done1187
    unless rx398_cstack, rx398_cstack_done1187
    dec $I19
    set $P11, rx398_cstack[$I19]
  rx398_cstack_done1187:
    pop rx398_rep, rx398_bstack
    pop rx398_pos, rx398_bstack
    pop $I19, rx398_bstack
    lt rx398_pos, -1, rx398_done1182
    lt rx398_pos, 0, rx398_fail1184
    eq $I19, 0, rx398_fail1184
    nqp_islist $I20, rx398_cstack
    unless $I20, rx398_jump1185
    elements $I18, rx398_bstack
    le $I18, 0, rx398_cut1186
    dec $I18
    set $I18, rx398_bstack[$I18]
  rx398_cut1186:
    assign rx398_cstack, $I18
  rx398_jump1185:
    jump $I19
  rx398_done1182:
    rx398_cur."!cursor_fail"()
    .return (rx398_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_79_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 885
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx404_tgt
    .local int rx404_pos
    .local int rx404_off
    .local int rx404_eos
    .local int rx404_rep
    .local pmc rx404_cur
    .local pmc rx404_curclass
    .local pmc rx404_bstack
    .local pmc rx404_cstack
    (rx404_cur, rx404_tgt, rx404_pos, rx404_curclass, rx404_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx404_cur
    length rx404_eos, rx404_tgt
    eq $I19, 1, rx404_restart1198
    gt rx404_pos, rx404_eos, rx404_fail1199
    repr_get_attr_int $I11, self, rx404_curclass, "$!from"
    ne $I11, -1, rxscan405_done1205
    goto rxscan405_scan1204
  rxscan405_loop1203:
    inc rx404_pos
    gt rx404_pos, rx404_eos, rx404_fail1199
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!from", rx404_pos
  rxscan405_scan1204:
    nqp_rxmark rx404_bstack, rxscan405_loop1203, rx404_pos, 0
  rxscan405_done1205:
    nqp_rxmark rx404_bstack, rxcap406_fail1207, rx404_pos, 0
    add $I11, rx404_pos, 5
    gt $I11, rx404_eos, rx404_fail1199
    substr $S10, rx404_tgt, rx404_pos, 5
    ne $S10, ucs4:"until", rx404_fail1199
    add rx404_pos, 5
    nqp_rxpeek $I19, rx404_bstack, rxcap406_fail1207
    inc $I19
    set $I11, rx404_bstack[$I19]
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!pos", rx404_pos
    $P11 = rx404_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx404_pos)
    rx404_cstack = rx404_cur."!cursor_capture"($P11, "sym")
    goto rxcap406_done1206
  rxcap406_fail1207:
    goto rx404_fail1199
  rxcap406_done1206:
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!pos", rx404_pos
    $P11 = rx404_cur."ws"()
    repr_get_attr_int $I11, $P11, rx404_curclass, "$!pos"
    lt $I11, 0, rx404_fail1199
    repr_get_attr_int rx404_pos, $P11, rx404_curclass, "$!pos"
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!pos", rx404_pos
    $P11 = rx404_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx404_curclass, "$!pos"
    lt $I11, 0, rx404_fail1199
    nqp_rxmark rx404_bstack, rxsubrule408_pass1209, -1, 0
  rxsubrule408_pass1209:
    rx404_cstack = rx404_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx404_pos, $P11, rx404_curclass, "$!pos"
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!pos", rx404_pos
    $P11 = rx404_cur."ws"()
    repr_get_attr_int $I11, $P11, rx404_curclass, "$!pos"
    lt $I11, 0, rx404_fail1199
    repr_get_attr_int rx404_pos, $P11, rx404_curclass, "$!pos"
    rx404_cur."!cursor_pass"(rx404_pos, "statement_mod_loop:sym<until>", 'backtrack'=>1)
    .return (rx404_cur)
  rx404_restart1198:
    repr_get_attr_obj rx404_cstack, rx404_cur, rx404_curclass, "$!cstack"
  rx404_fail1199:
    unless rx404_bstack, rx404_done1197
    pop $I19, rx404_bstack
    if_null rx404_cstack, rx404_cstack_done1202
    unless rx404_cstack, rx404_cstack_done1202
    dec $I19
    set $P11, rx404_cstack[$I19]
  rx404_cstack_done1202:
    pop rx404_rep, rx404_bstack
    pop rx404_pos, rx404_bstack
    pop $I19, rx404_bstack
    lt rx404_pos, -1, rx404_done1197
    lt rx404_pos, 0, rx404_fail1199
    eq $I19, 0, rx404_fail1199
    nqp_islist $I20, rx404_cstack
    unless $I20, rx404_jump1200
    elements $I18, rx404_bstack
    le $I18, 0, rx404_cut1201
    dec $I18
    set $I18, rx404_bstack[$I18]
  rx404_cut1201:
    assign rx404_cstack, $I18
  rx404_jump1200:
    jump $I19
  rx404_done1197:
    rx404_cur."!cursor_fail"()
    .return (rx404_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<for>" :subid("cuid_80_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 886
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx410_tgt
    .local int rx410_pos
    .local int rx410_off
    .local int rx410_eos
    .local int rx410_rep
    .local pmc rx410_cur
    .local pmc rx410_curclass
    .local pmc rx410_bstack
    .local pmc rx410_cstack
    (rx410_cur, rx410_tgt, rx410_pos, rx410_curclass, rx410_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx410_cur
    length rx410_eos, rx410_tgt
    eq $I19, 1, rx410_restart1213
    gt rx410_pos, rx410_eos, rx410_fail1214
    repr_get_attr_int $I11, self, rx410_curclass, "$!from"
    ne $I11, -1, rxscan411_done1220
    goto rxscan411_scan1219
  rxscan411_loop1218:
    inc rx410_pos
    gt rx410_pos, rx410_eos, rx410_fail1214
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!from", rx410_pos
  rxscan411_scan1219:
    nqp_rxmark rx410_bstack, rxscan411_loop1218, rx410_pos, 0
  rxscan411_done1220:
    nqp_rxmark rx410_bstack, rxcap412_fail1222, rx410_pos, 0
    add $I11, rx410_pos, 3
    gt $I11, rx410_eos, rx410_fail1214
    substr $S10, rx410_tgt, rx410_pos, 3
    ne $S10, ucs4:"for", rx410_fail1214
    add rx410_pos, 3
    nqp_rxpeek $I19, rx410_bstack, rxcap412_fail1222
    inc $I19
    set $I11, rx410_bstack[$I19]
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!pos", rx410_pos
    $P11 = rx410_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx410_pos)
    rx410_cstack = rx410_cur."!cursor_capture"($P11, "sym")
    goto rxcap412_done1221
  rxcap412_fail1222:
    goto rx410_fail1214
  rxcap412_done1221:
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!pos", rx410_pos
    $P11 = rx410_cur."ws"()
    repr_get_attr_int $I11, $P11, rx410_curclass, "$!pos"
    lt $I11, 0, rx410_fail1214
    repr_get_attr_int rx410_pos, $P11, rx410_curclass, "$!pos"
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!pos", rx410_pos
    $P11 = rx410_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx410_curclass, "$!pos"
    lt $I11, 0, rx410_fail1214
    nqp_rxmark rx410_bstack, rxsubrule414_pass1224, -1, 0
  rxsubrule414_pass1224:
    rx410_cstack = rx410_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx410_pos, $P11, rx410_curclass, "$!pos"
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!pos", rx410_pos
    $P11 = rx410_cur."ws"()
    repr_get_attr_int $I11, $P11, rx410_curclass, "$!pos"
    lt $I11, 0, rx410_fail1214
    repr_get_attr_int rx410_pos, $P11, rx410_curclass, "$!pos"
    rx410_cur."!cursor_pass"(rx410_pos, "statement_mod_loop:sym<for>", 'backtrack'=>1)
    .return (rx410_cur)
  rx410_restart1213:
    repr_get_attr_obj rx410_cstack, rx410_cur, rx410_curclass, "$!cstack"
  rx410_fail1214:
    unless rx410_bstack, rx410_done1212
    pop $I19, rx410_bstack
    if_null rx410_cstack, rx410_cstack_done1217
    unless rx410_cstack, rx410_cstack_done1217
    dec $I19
    set $P11, rx410_cstack[$I19]
  rx410_cstack_done1217:
    pop rx410_rep, rx410_bstack
    pop rx410_pos, rx410_bstack
    pop $I19, rx410_bstack
    lt rx410_pos, -1, rx410_done1212
    lt rx410_pos, 0, rx410_fail1214
    eq $I19, 0, rx410_fail1214
    nqp_islist $I20, rx410_cstack
    unless $I20, rx410_jump1215
    elements $I18, rx410_bstack
    le $I18, 0, rx410_cut1216
    dec $I18
    set $I18, rx410_bstack[$I18]
  rx410_cut1216:
    assign rx410_cstack, $I18
  rx410_jump1215:
    jump $I19
  rx410_done1212:
    rx410_cur."!cursor_fail"()
    .return (rx410_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_81_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 890
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx416_tgt
    .local int rx416_pos
    .local int rx416_off
    .local int rx416_eos
    .local int rx416_rep
    .local pmc rx416_cur
    .local pmc rx416_curclass
    .local pmc rx416_bstack
    .local pmc rx416_cstack
    (rx416_cur, rx416_tgt, rx416_pos, rx416_curclass, rx416_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx416_cur
    length rx416_eos, rx416_tgt
    eq $I19, 1, rx416_restart1228
    gt rx416_pos, rx416_eos, rx416_fail1229
    repr_get_attr_int $I11, self, rx416_curclass, "$!from"
    ne $I11, -1, rxscan417_done1235
    goto rxscan417_scan1234
  rxscan417_loop1233:
    inc rx416_pos
    gt rx416_pos, rx416_eos, rx416_fail1229
    repr_bind_attr_int rx416_cur, rx416_curclass, "$!from", rx416_pos
  rxscan417_scan1234:
    nqp_rxmark rx416_bstack, rxscan417_loop1233, rx416_pos, 0
  rxscan417_done1235:
    repr_bind_attr_int rx416_cur, rx416_curclass, "$!pos", rx416_pos
    $P11 = rx416_cur."fatarrow"()
    repr_get_attr_int $I11, $P11, rx416_curclass, "$!pos"
    lt $I11, 0, rx416_fail1229
    nqp_rxmark rx416_bstack, rxsubrule418_pass1236, -1, 0
  rxsubrule418_pass1236:
    rx416_cstack = rx416_cur."!cursor_capture"($P11, "fatarrow")
    repr_get_attr_int rx416_pos, $P11, rx416_curclass, "$!pos"
    rx416_cur."!cursor_pass"(rx416_pos, "term:sym<fatarrow>", 'backtrack'=>1)
    .return (rx416_cur)
  rx416_restart1228:
    repr_get_attr_obj rx416_cstack, rx416_cur, rx416_curclass, "$!cstack"
  rx416_fail1229:
    unless rx416_bstack, rx416_done1227
    pop $I19, rx416_bstack
    if_null rx416_cstack, rx416_cstack_done1232
    unless rx416_cstack, rx416_cstack_done1232
    dec $I19
    set $P11, rx416_cstack[$I19]
  rx416_cstack_done1232:
    pop rx416_rep, rx416_bstack
    pop rx416_pos, rx416_bstack
    pop $I19, rx416_bstack
    lt rx416_pos, -1, rx416_done1227
    lt rx416_pos, 0, rx416_fail1229
    eq $I19, 0, rx416_fail1229
    nqp_islist $I20, rx416_cstack
    unless $I20, rx416_jump1230
    elements $I18, rx416_bstack
    le $I18, 0, rx416_cut1231
    dec $I18
    set $I18, rx416_bstack[$I18]
  rx416_cut1231:
    assign rx416_cstack, $I18
  rx416_jump1230:
    jump $I19
  rx416_done1227:
    rx416_cur."!cursor_fail"()
    .return (rx416_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_82_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 891
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx419_tgt
    .local int rx419_pos
    .local int rx419_off
    .local int rx419_eos
    .local int rx419_rep
    .local pmc rx419_cur
    .local pmc rx419_curclass
    .local pmc rx419_bstack
    .local pmc rx419_cstack
    (rx419_cur, rx419_tgt, rx419_pos, rx419_curclass, rx419_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx419_cur
    length rx419_eos, rx419_tgt
    eq $I19, 1, rx419_restart1239
    gt rx419_pos, rx419_eos, rx419_fail1240
    repr_get_attr_int $I11, self, rx419_curclass, "$!from"
    ne $I11, -1, rxscan420_done1246
    goto rxscan420_scan1245
  rxscan420_loop1244:
    inc rx419_pos
    gt rx419_pos, rx419_eos, rx419_fail1240
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!from", rx419_pos
  rxscan420_scan1245:
    nqp_rxmark rx419_bstack, rxscan420_loop1244, rx419_pos, 0
  rxscan420_done1246:
    repr_bind_attr_int rx419_cur, rx419_curclass, "$!pos", rx419_pos
    $P11 = rx419_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx419_curclass, "$!pos"
    lt $I11, 0, rx419_fail1240
    nqp_rxmark rx419_bstack, rxsubrule421_pass1247, -1, 0
  rxsubrule421_pass1247:
    rx419_cstack = rx419_cur."!cursor_capture"($P11, "colonpair")
    repr_get_attr_int rx419_pos, $P11, rx419_curclass, "$!pos"
    rx419_cur."!cursor_pass"(rx419_pos, "term:sym<colonpair>", 'backtrack'=>1)
    .return (rx419_cur)
  rx419_restart1239:
    repr_get_attr_obj rx419_cstack, rx419_cur, rx419_curclass, "$!cstack"
  rx419_fail1240:
    unless rx419_bstack, rx419_done1238
    pop $I19, rx419_bstack
    if_null rx419_cstack, rx419_cstack_done1243
    unless rx419_cstack, rx419_cstack_done1243
    dec $I19
    set $P11, rx419_cstack[$I19]
  rx419_cstack_done1243:
    pop rx419_rep, rx419_bstack
    pop rx419_pos, rx419_bstack
    pop $I19, rx419_bstack
    lt rx419_pos, -1, rx419_done1238
    lt rx419_pos, 0, rx419_fail1240
    eq $I19, 0, rx419_fail1240
    nqp_islist $I20, rx419_cstack
    unless $I20, rx419_jump1241
    elements $I18, rx419_bstack
    le $I18, 0, rx419_cut1242
    dec $I18
    set $I18, rx419_bstack[$I18]
  rx419_cut1242:
    assign rx419_cstack, $I18
  rx419_jump1241:
    jump $I19
  rx419_done1238:
    rx419_cur."!cursor_fail"()
    .return (rx419_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_83_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 892
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx422_tgt
    .local int rx422_pos
    .local int rx422_off
    .local int rx422_eos
    .local int rx422_rep
    .local pmc rx422_cur
    .local pmc rx422_curclass
    .local pmc rx422_bstack
    .local pmc rx422_cstack
    (rx422_cur, rx422_tgt, rx422_pos, rx422_curclass, rx422_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx422_cur
    length rx422_eos, rx422_tgt
    eq $I19, 1, rx422_restart1250
    gt rx422_pos, rx422_eos, rx422_fail1251
    repr_get_attr_int $I11, self, rx422_curclass, "$!from"
    ne $I11, -1, rxscan423_done1257
    goto rxscan423_scan1256
  rxscan423_loop1255:
    inc rx422_pos
    gt rx422_pos, rx422_eos, rx422_fail1251
    repr_bind_attr_int rx422_cur, rx422_curclass, "$!from", rx422_pos
  rxscan423_scan1256:
    nqp_rxmark rx422_bstack, rxscan423_loop1255, rx422_pos, 0
  rxscan423_done1257:
    repr_bind_attr_int rx422_cur, rx422_curclass, "$!pos", rx422_pos
    $P11 = rx422_cur."variable"()
    repr_get_attr_int $I11, $P11, rx422_curclass, "$!pos"
    lt $I11, 0, rx422_fail1251
    nqp_rxmark rx422_bstack, rxsubrule424_pass1258, -1, 0
  rxsubrule424_pass1258:
    rx422_cstack = rx422_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx422_pos, $P11, rx422_curclass, "$!pos"
    rx422_cur."!cursor_pass"(rx422_pos, "term:sym<variable>", 'backtrack'=>1)
    .return (rx422_cur)
  rx422_restart1250:
    repr_get_attr_obj rx422_cstack, rx422_cur, rx422_curclass, "$!cstack"
  rx422_fail1251:
    unless rx422_bstack, rx422_done1249
    pop $I19, rx422_bstack
    if_null rx422_cstack, rx422_cstack_done1254
    unless rx422_cstack, rx422_cstack_done1254
    dec $I19
    set $P11, rx422_cstack[$I19]
  rx422_cstack_done1254:
    pop rx422_rep, rx422_bstack
    pop rx422_pos, rx422_bstack
    pop $I19, rx422_bstack
    lt rx422_pos, -1, rx422_done1249
    lt rx422_pos, 0, rx422_fail1251
    eq $I19, 0, rx422_fail1251
    nqp_islist $I20, rx422_cstack
    unless $I20, rx422_jump1252
    elements $I18, rx422_bstack
    le $I18, 0, rx422_cut1253
    dec $I18
    set $I18, rx422_bstack[$I18]
  rx422_cut1253:
    assign rx422_cstack, $I18
  rx422_jump1252:
    jump $I19
  rx422_done1249:
    rx422_cur."!cursor_fail"()
    .return (rx422_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_84_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 893
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx425_tgt
    .local int rx425_pos
    .local int rx425_off
    .local int rx425_eos
    .local int rx425_rep
    .local pmc rx425_cur
    .local pmc rx425_curclass
    .local pmc rx425_bstack
    .local pmc rx425_cstack
    (rx425_cur, rx425_tgt, rx425_pos, rx425_curclass, rx425_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx425_cur
    length rx425_eos, rx425_tgt
    eq $I19, 1, rx425_restart1261
    gt rx425_pos, rx425_eos, rx425_fail1262
    repr_get_attr_int $I11, self, rx425_curclass, "$!from"
    ne $I11, -1, rxscan426_done1268
    goto rxscan426_scan1267
  rxscan426_loop1266:
    inc rx425_pos
    gt rx425_pos, rx425_eos, rx425_fail1262
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!from", rx425_pos
  rxscan426_scan1267:
    nqp_rxmark rx425_bstack, rxscan426_loop1266, rx425_pos, 0
  rxscan426_done1268:
    repr_bind_attr_int rx425_cur, rx425_curclass, "$!pos", rx425_pos
    $P11 = rx425_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx425_curclass, "$!pos"
    lt $I11, 0, rx425_fail1262
    nqp_rxmark rx425_bstack, rxsubrule427_pass1269, -1, 0
  rxsubrule427_pass1269:
    rx425_cstack = rx425_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx425_pos, $P11, rx425_curclass, "$!pos"
    rx425_cur."!cursor_pass"(rx425_pos, "term:sym<package_declarator>", 'backtrack'=>1)
    .return (rx425_cur)
  rx425_restart1261:
    repr_get_attr_obj rx425_cstack, rx425_cur, rx425_curclass, "$!cstack"
  rx425_fail1262:
    unless rx425_bstack, rx425_done1260
    pop $I19, rx425_bstack
    if_null rx425_cstack, rx425_cstack_done1265
    unless rx425_cstack, rx425_cstack_done1265
    dec $I19
    set $P11, rx425_cstack[$I19]
  rx425_cstack_done1265:
    pop rx425_rep, rx425_bstack
    pop rx425_pos, rx425_bstack
    pop $I19, rx425_bstack
    lt rx425_pos, -1, rx425_done1260
    lt rx425_pos, 0, rx425_fail1262
    eq $I19, 0, rx425_fail1262
    nqp_islist $I20, rx425_cstack
    unless $I20, rx425_jump1263
    elements $I18, rx425_bstack
    le $I18, 0, rx425_cut1264
    dec $I18
    set $I18, rx425_bstack[$I18]
  rx425_cut1264:
    assign rx425_cstack, $I18
  rx425_jump1263:
    jump $I19
  rx425_done1260:
    rx425_cur."!cursor_fail"()
    .return (rx425_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_85_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 894
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx428_tgt
    .local int rx428_pos
    .local int rx428_off
    .local int rx428_eos
    .local int rx428_rep
    .local pmc rx428_cur
    .local pmc rx428_curclass
    .local pmc rx428_bstack
    .local pmc rx428_cstack
    (rx428_cur, rx428_tgt, rx428_pos, rx428_curclass, rx428_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx428_cur
    length rx428_eos, rx428_tgt
    eq $I19, 1, rx428_restart1272
    gt rx428_pos, rx428_eos, rx428_fail1273
    repr_get_attr_int $I11, self, rx428_curclass, "$!from"
    ne $I11, -1, rxscan429_done1279
    goto rxscan429_scan1278
  rxscan429_loop1277:
    inc rx428_pos
    gt rx428_pos, rx428_eos, rx428_fail1273
    repr_bind_attr_int rx428_cur, rx428_curclass, "$!from", rx428_pos
  rxscan429_scan1278:
    nqp_rxmark rx428_bstack, rxscan429_loop1277, rx428_pos, 0
  rxscan429_done1279:
    repr_bind_attr_int rx428_cur, rx428_curclass, "$!pos", rx428_pos
    $P11 = rx428_cur."scope_declarator"()
    repr_get_attr_int $I11, $P11, rx428_curclass, "$!pos"
    lt $I11, 0, rx428_fail1273
    nqp_rxmark rx428_bstack, rxsubrule430_pass1280, -1, 0
  rxsubrule430_pass1280:
    rx428_cstack = rx428_cur."!cursor_capture"($P11, "scope_declarator")
    repr_get_attr_int rx428_pos, $P11, rx428_curclass, "$!pos"
    rx428_cur."!cursor_pass"(rx428_pos, "term:sym<scope_declarator>", 'backtrack'=>1)
    .return (rx428_cur)
  rx428_restart1272:
    repr_get_attr_obj rx428_cstack, rx428_cur, rx428_curclass, "$!cstack"
  rx428_fail1273:
    unless rx428_bstack, rx428_done1271
    pop $I19, rx428_bstack
    if_null rx428_cstack, rx428_cstack_done1276
    unless rx428_cstack, rx428_cstack_done1276
    dec $I19
    set $P11, rx428_cstack[$I19]
  rx428_cstack_done1276:
    pop rx428_rep, rx428_bstack
    pop rx428_pos, rx428_bstack
    pop $I19, rx428_bstack
    lt rx428_pos, -1, rx428_done1271
    lt rx428_pos, 0, rx428_fail1273
    eq $I19, 0, rx428_fail1273
    nqp_islist $I20, rx428_cstack
    unless $I20, rx428_jump1274
    elements $I18, rx428_bstack
    le $I18, 0, rx428_cut1275
    dec $I18
    set $I18, rx428_bstack[$I18]
  rx428_cut1275:
    assign rx428_cstack, $I18
  rx428_jump1274:
    jump $I19
  rx428_done1271:
    rx428_cur."!cursor_fail"()
    .return (rx428_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_86_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 895
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx431_tgt
    .local int rx431_pos
    .local int rx431_off
    .local int rx431_eos
    .local int rx431_rep
    .local pmc rx431_cur
    .local pmc rx431_curclass
    .local pmc rx431_bstack
    .local pmc rx431_cstack
    (rx431_cur, rx431_tgt, rx431_pos, rx431_curclass, rx431_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx431_cur
    length rx431_eos, rx431_tgt
    eq $I19, 1, rx431_restart1283
    gt rx431_pos, rx431_eos, rx431_fail1284
    repr_get_attr_int $I11, self, rx431_curclass, "$!from"
    ne $I11, -1, rxscan432_done1290
    goto rxscan432_scan1289
  rxscan432_loop1288:
    inc rx431_pos
    gt rx431_pos, rx431_eos, rx431_fail1284
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!from", rx431_pos
  rxscan432_scan1289:
    nqp_rxmark rx431_bstack, rxscan432_loop1288, rx431_pos, 0
  rxscan432_done1290:
    repr_bind_attr_int rx431_cur, rx431_curclass, "$!pos", rx431_pos
    $P11 = rx431_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx431_curclass, "$!pos"
    lt $I11, 0, rx431_fail1284
    nqp_rxmark rx431_bstack, rxsubrule433_pass1291, -1, 0
  rxsubrule433_pass1291:
    rx431_cstack = rx431_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx431_pos, $P11, rx431_curclass, "$!pos"
    rx431_cur."!cursor_pass"(rx431_pos, "term:sym<routine_declarator>", 'backtrack'=>1)
    .return (rx431_cur)
  rx431_restart1283:
    repr_get_attr_obj rx431_cstack, rx431_cur, rx431_curclass, "$!cstack"
  rx431_fail1284:
    unless rx431_bstack, rx431_done1282
    pop $I19, rx431_bstack
    if_null rx431_cstack, rx431_cstack_done1287
    unless rx431_cstack, rx431_cstack_done1287
    dec $I19
    set $P11, rx431_cstack[$I19]
  rx431_cstack_done1287:
    pop rx431_rep, rx431_bstack
    pop rx431_pos, rx431_bstack
    pop $I19, rx431_bstack
    lt rx431_pos, -1, rx431_done1282
    lt rx431_pos, 0, rx431_fail1284
    eq $I19, 0, rx431_fail1284
    nqp_islist $I20, rx431_cstack
    unless $I20, rx431_jump1285
    elements $I18, rx431_bstack
    le $I18, 0, rx431_cut1286
    dec $I18
    set $I18, rx431_bstack[$I18]
  rx431_cut1286:
    assign rx431_cstack, $I18
  rx431_jump1285:
    jump $I19
  rx431_done1282:
    rx431_cur."!cursor_fail"()
    .return (rx431_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_87_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 896
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_88_1359292300.247' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_89_1359292300.247' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx434_tgt
    .local int rx434_pos
    .local int rx434_off
    .local int rx434_eos
    .local int rx434_rep
    .local pmc rx434_cur
    .local pmc rx434_curclass
    .local pmc rx434_bstack
    .local pmc rx434_cstack
    (rx434_cur, rx434_tgt, rx434_pos, rx434_curclass, rx434_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx434_cur
    length rx434_eos, rx434_tgt
    eq $I19, 1, rx434_restart1294
    gt rx434_pos, rx434_eos, rx434_fail1295
    repr_get_attr_int $I11, self, rx434_curclass, "$!from"
    ne $I11, -1, rxscan435_done1301
    goto rxscan435_scan1300
  rxscan435_loop1299:
    inc rx434_pos
    gt rx434_pos, rx434_eos, rx434_fail1295
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!from", rx434_pos
  rxscan435_scan1300:
    nqp_rxmark rx434_bstack, rxscan435_loop1299, rx434_pos, 0
  rxscan435_done1301:
    .const 'Sub' $P5001 = 'cuid_88_1359292300.247' 
    capture_lex $P5001
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1295
    .const 'Sub' $P5002 = 'cuid_89_1359292300.247' 
    capture_lex $P5002
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    ge $I11, 0, rx434_fail1295
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!pos", rx434_pos
    $P11 = rx434_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx434_curclass, "$!pos"
    lt $I11, 0, rx434_fail1295
    nqp_rxmark rx434_bstack, rxsubrule443_pass1331, -1, 0
  rxsubrule443_pass1331:
    rx434_cstack = rx434_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx434_pos, $P11, rx434_curclass, "$!pos"
    rx434_cur."!cursor_pass"(rx434_pos, "term:sym<multi_declarator>", 'backtrack'=>1)
    .return (rx434_cur)
  rx434_restart1294:
    repr_get_attr_obj rx434_cstack, rx434_cur, rx434_curclass, "$!cstack"
  rx434_fail1295:
    unless rx434_bstack, rx434_done1293
    pop $I19, rx434_bstack
    if_null rx434_cstack, rx434_cstack_done1298
    unless rx434_cstack, rx434_cstack_done1298
    dec $I19
    set $P11, rx434_cstack[$I19]
  rx434_cstack_done1298:
    pop rx434_rep, rx434_bstack
    pop rx434_pos, rx434_bstack
    pop $I19, rx434_bstack
    lt rx434_pos, -1, rx434_done1293
    lt rx434_pos, 0, rx434_fail1295
    eq $I19, 0, rx434_fail1295
    nqp_islist $I20, rx434_cstack
    unless $I20, rx434_jump1296
    elements $I18, rx434_bstack
    le $I18, 0, rx434_cut1297
    dec $I18
    set $I18, rx434_bstack[$I18]
  rx434_cut1297:
    assign rx434_cstack, $I18
  rx434_jump1296:
    jump $I19
  rx434_done1293:
    rx434_cur."!cursor_fail"()
    .return (rx434_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_88_1359292300.247") :anon :lex :outer("cuid_87_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx436_tgt
    .local int rx436_pos
    .local int rx436_off
    .local int rx436_eos
    .local int rx436_rep
    .local pmc rx436_cur
    .local pmc rx436_curclass
    .local pmc rx436_bstack
    .local pmc rx436_cstack
    (rx436_cur, rx436_tgt, rx436_pos, rx436_curclass, rx436_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx436_cur
    length rx436_eos, rx436_tgt
    eq $I19, 1, rx436_restart1304
    gt rx436_pos, rx436_eos, rx436_fail1305
    repr_get_attr_int $I11, self, rx436_curclass, "$!from"
    ne $I11, -1, rxscan437_done1311
    goto rxscan437_scan1310
  rxscan437_loop1309:
    inc rx436_pos
    gt rx436_pos, rx436_eos, rx436_fail1305
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!from", rx436_pos
  rxscan437_scan1310:
    nqp_rxmark rx436_bstack, rxscan437_loop1309, rx436_pos, 0
  rxscan437_done1311:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt438_01313
    nqp_push_label $P11, alt438_11314
    nqp_push_label $P11, alt438_21315
    nqp_rxmark rx436_bstack, alt438_end1312, -1, 0
    rx436_cur."!alt"(rx436_pos, "alt_nfa__17_1359292301.888", $P11)
    goto rx436_fail1305
  alt438_01313:
    add $I11, rx436_pos, 5
    gt $I11, rx436_eos, rx436_fail1305
    substr $S10, rx436_tgt, rx436_pos, 5
    ne $S10, ucs4:"multi", rx436_fail1305
    add rx436_pos, 5
    goto alt438_end1312
  alt438_11314:
    add $I11, rx436_pos, 5
    gt $I11, rx436_eos, rx436_fail1305
    substr $S10, rx436_tgt, rx436_pos, 5
    ne $S10, ucs4:"proto", rx436_fail1305
    add rx436_pos, 5
    goto alt438_end1312
  alt438_21315:
    add $I11, rx436_pos, 4
    gt $I11, rx436_eos, rx436_fail1305
    substr $S10, rx436_tgt, rx436_pos, 4
    ne $S10, ucs4:"only", rx436_fail1305
    add rx436_pos, 4
    goto alt438_end1312
  alt438_end1312:
    rx436_cur."!cursor_pass"(rx436_pos, 'backtrack'=>1)
    .return (rx436_cur)
  rx436_restart1304:
    repr_get_attr_obj rx436_cstack, rx436_cur, rx436_curclass, "$!cstack"
  rx436_fail1305:
    unless rx436_bstack, rx436_done1303
    pop $I19, rx436_bstack
    if_null rx436_cstack, rx436_cstack_done1308
    unless rx436_cstack, rx436_cstack_done1308
    dec $I19
    set $P11, rx436_cstack[$I19]
  rx436_cstack_done1308:
    pop rx436_rep, rx436_bstack
    pop rx436_pos, rx436_bstack
    pop $I19, rx436_bstack
    lt rx436_pos, -1, rx436_done1303
    lt rx436_pos, 0, rx436_fail1305
    eq $I19, 0, rx436_fail1305
    nqp_islist $I20, rx436_cstack
    unless $I20, rx436_jump1306
    elements $I18, rx436_bstack
    le $I18, 0, rx436_cut1307
    dec $I18
    set $I18, rx436_bstack[$I18]
  rx436_cut1307:
    assign rx436_cstack, $I18
  rx436_jump1306:
    jump $I19
  rx436_done1303:
    rx436_cur."!cursor_fail"()
    .return (rx436_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_89_1359292300.247") :anon :lex :outer("cuid_87_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx439_tgt
    .local int rx439_pos
    .local int rx439_off
    .local int rx439_eos
    .local int rx439_rep
    .local pmc rx439_cur
    .local pmc rx439_curclass
    .local pmc rx439_bstack
    .local pmc rx439_cstack
    (rx439_cur, rx439_tgt, rx439_pos, rx439_curclass, rx439_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx439_cur
    length rx439_eos, rx439_tgt
    eq $I19, 1, rx439_restart1318
    gt rx439_pos, rx439_eos, rx439_fail1319
    repr_get_attr_int $I11, self, rx439_curclass, "$!from"
    ne $I11, -1, rxscan440_done1325
    goto rxscan440_scan1324
  rxscan440_loop1323:
    inc rx439_pos
    gt rx439_pos, rx439_eos, rx439_fail1319
    repr_bind_attr_int rx439_cur, rx439_curclass, "$!from", rx439_pos
  rxscan440_scan1324:
    nqp_rxmark rx439_bstack, rxscan440_loop1323, rx439_pos, 0
  rxscan440_done1325:
    add $I11, rx439_pos, 5
    gt $I11, rx439_eos, rx439_fail1319
    substr $S10, rx439_tgt, rx439_pos, 5
    ne $S10, ucs4:"proto", rx439_fail1319
    add rx439_pos, 5
    repr_bind_attr_int rx439_cur, rx439_curclass, "$!pos", rx439_pos
    $P11 = rx439_cur."ws"()
    repr_get_attr_int $I11, $P11, rx439_curclass, "$!pos"
    lt $I11, 0, rx439_fail1319
    repr_get_attr_int rx439_pos, $P11, rx439_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt442_01328
    nqp_push_label $P11, alt442_11329
    nqp_push_label $P11, alt442_21330
    nqp_rxmark rx439_bstack, alt442_end1327, -1, 0
    rx439_cur."!alt"(rx439_pos, "alt_nfa__18_1359292301.896", $P11)
    goto rx439_fail1319
  alt442_01328:
    add $I11, rx439_pos, 5
    gt $I11, rx439_eos, rx439_fail1319
    substr $S10, rx439_tgt, rx439_pos, 5
    ne $S10, ucs4:"regex", rx439_fail1319
    add rx439_pos, 5
    goto alt442_end1327
  alt442_11329:
    add $I11, rx439_pos, 5
    gt $I11, rx439_eos, rx439_fail1319
    substr $S10, rx439_tgt, rx439_pos, 5
    ne $S10, ucs4:"token", rx439_fail1319
    add rx439_pos, 5
    goto alt442_end1327
  alt442_21330:
    add $I11, rx439_pos, 4
    gt $I11, rx439_eos, rx439_fail1319
    substr $S10, rx439_tgt, rx439_pos, 4
    ne $S10, ucs4:"rule", rx439_fail1319
    add rx439_pos, 4
    goto alt442_end1327
  alt442_end1327:
    nqp_rxcommit rx439_bstack, alt442_end1327
    rx439_cur."!cursor_pass"(rx439_pos, 'backtrack'=>1)
    .return (rx439_cur)
  rx439_restart1318:
    repr_get_attr_obj rx439_cstack, rx439_cur, rx439_curclass, "$!cstack"
  rx439_fail1319:
    unless rx439_bstack, rx439_done1317
    pop $I19, rx439_bstack
    if_null rx439_cstack, rx439_cstack_done1322
    unless rx439_cstack, rx439_cstack_done1322
    dec $I19
    set $P11, rx439_cstack[$I19]
  rx439_cstack_done1322:
    pop rx439_rep, rx439_bstack
    pop rx439_pos, rx439_bstack
    pop $I19, rx439_bstack
    lt rx439_pos, -1, rx439_done1317
    lt rx439_pos, 0, rx439_fail1319
    eq $I19, 0, rx439_fail1319
    nqp_islist $I20, rx439_cstack
    unless $I20, rx439_jump1320
    elements $I18, rx439_bstack
    le $I18, 0, rx439_cut1321
    dec $I18
    set $I18, rx439_bstack[$I18]
  rx439_cut1321:
    assign rx439_cstack, $I18
  rx439_jump1320:
    jump $I19
  rx439_done1317:
    rx439_cur."!cursor_fail"()
    .return (rx439_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_90_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 901
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx444_tgt
    .local int rx444_pos
    .local int rx444_off
    .local int rx444_eos
    .local int rx444_rep
    .local pmc rx444_cur
    .local pmc rx444_curclass
    .local pmc rx444_bstack
    .local pmc rx444_cstack
    (rx444_cur, rx444_tgt, rx444_pos, rx444_curclass, rx444_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx444_cur
    length rx444_eos, rx444_tgt
    eq $I19, 1, rx444_restart1334
    gt rx444_pos, rx444_eos, rx444_fail1335
    repr_get_attr_int $I11, self, rx444_curclass, "$!from"
    ne $I11, -1, rxscan445_done1341
    goto rxscan445_scan1340
  rxscan445_loop1339:
    inc rx444_pos
    gt rx444_pos, rx444_eos, rx444_fail1335
    repr_bind_attr_int rx444_cur, rx444_curclass, "$!from", rx444_pos
  rxscan445_scan1340:
    nqp_rxmark rx444_bstack, rxscan445_loop1339, rx444_pos, 0
  rxscan445_done1341:
    repr_bind_attr_int rx444_cur, rx444_curclass, "$!pos", rx444_pos
    $P11 = rx444_cur."regex_declarator"()
    repr_get_attr_int $I11, $P11, rx444_curclass, "$!pos"
    lt $I11, 0, rx444_fail1335
    nqp_rxmark rx444_bstack, rxsubrule446_pass1342, -1, 0
  rxsubrule446_pass1342:
    rx444_cstack = rx444_cur."!cursor_capture"($P11, "regex_declarator")
    repr_get_attr_int rx444_pos, $P11, rx444_curclass, "$!pos"
    rx444_cur."!cursor_pass"(rx444_pos, "term:sym<regex_declarator>", 'backtrack'=>1)
    .return (rx444_cur)
  rx444_restart1334:
    repr_get_attr_obj rx444_cstack, rx444_cur, rx444_curclass, "$!cstack"
  rx444_fail1335:
    unless rx444_bstack, rx444_done1333
    pop $I19, rx444_bstack
    if_null rx444_cstack, rx444_cstack_done1338
    unless rx444_cstack, rx444_cstack_done1338
    dec $I19
    set $P11, rx444_cstack[$I19]
  rx444_cstack_done1338:
    pop rx444_rep, rx444_bstack
    pop rx444_pos, rx444_bstack
    pop $I19, rx444_bstack
    lt rx444_pos, -1, rx444_done1333
    lt rx444_pos, 0, rx444_fail1335
    eq $I19, 0, rx444_fail1335
    nqp_islist $I20, rx444_cstack
    unless $I20, rx444_jump1336
    elements $I18, rx444_bstack
    le $I18, 0, rx444_cut1337
    dec $I18
    set $I18, rx444_bstack[$I18]
  rx444_cut1337:
    assign rx444_cstack, $I18
  rx444_jump1336:
    jump $I19
  rx444_done1333:
    rx444_cur."!cursor_fail"()
    .return (rx444_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_91_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 902
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx447_tgt
    .local int rx447_pos
    .local int rx447_off
    .local int rx447_eos
    .local int rx447_rep
    .local pmc rx447_cur
    .local pmc rx447_curclass
    .local pmc rx447_bstack
    .local pmc rx447_cstack
    (rx447_cur, rx447_tgt, rx447_pos, rx447_curclass, rx447_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx447_cur
    length rx447_eos, rx447_tgt
    eq $I19, 1, rx447_restart1345
    gt rx447_pos, rx447_eos, rx447_fail1346
    repr_get_attr_int $I11, self, rx447_curclass, "$!from"
    ne $I11, -1, rxscan448_done1352
    goto rxscan448_scan1351
  rxscan448_loop1350:
    inc rx447_pos
    gt rx447_pos, rx447_eos, rx447_fail1346
    repr_bind_attr_int rx447_cur, rx447_curclass, "$!from", rx447_pos
  rxscan448_scan1351:
    nqp_rxmark rx447_bstack, rxscan448_loop1350, rx447_pos, 0
  rxscan448_done1352:
    repr_bind_attr_int rx447_cur, rx447_curclass, "$!pos", rx447_pos
    $P11 = rx447_cur."statement_prefix"()
    repr_get_attr_int $I11, $P11, rx447_curclass, "$!pos"
    lt $I11, 0, rx447_fail1346
    nqp_rxmark rx447_bstack, rxsubrule449_pass1353, -1, 0
  rxsubrule449_pass1353:
    rx447_cstack = rx447_cur."!cursor_capture"($P11, "statement_prefix")
    repr_get_attr_int rx447_pos, $P11, rx447_curclass, "$!pos"
    rx447_cur."!cursor_pass"(rx447_pos, "term:sym<statement_prefix>", 'backtrack'=>1)
    .return (rx447_cur)
  rx447_restart1345:
    repr_get_attr_obj rx447_cstack, rx447_cur, rx447_curclass, "$!cstack"
  rx447_fail1346:
    unless rx447_bstack, rx447_done1344
    pop $I19, rx447_bstack
    if_null rx447_cstack, rx447_cstack_done1349
    unless rx447_cstack, rx447_cstack_done1349
    dec $I19
    set $P11, rx447_cstack[$I19]
  rx447_cstack_done1349:
    pop rx447_rep, rx447_bstack
    pop rx447_pos, rx447_bstack
    pop $I19, rx447_bstack
    lt rx447_pos, -1, rx447_done1344
    lt rx447_pos, 0, rx447_fail1346
    eq $I19, 0, rx447_fail1346
    nqp_islist $I20, rx447_cstack
    unless $I20, rx447_jump1347
    elements $I18, rx447_bstack
    le $I18, 0, rx447_cut1348
    dec $I18
    set $I18, rx447_bstack[$I18]
  rx447_cut1348:
    assign rx447_cstack, $I18
  rx447_jump1347:
    jump $I19
  rx447_done1344:
    rx447_cur."!cursor_fail"()
    .return (rx447_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_92_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 903
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx450_tgt
    .local int rx450_pos
    .local int rx450_off
    .local int rx450_eos
    .local int rx450_rep
    .local pmc rx450_cur
    .local pmc rx450_curclass
    .local pmc rx450_bstack
    .local pmc rx450_cstack
    (rx450_cur, rx450_tgt, rx450_pos, rx450_curclass, rx450_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx450_cur
    length rx450_eos, rx450_tgt
    eq $I19, 1, rx450_restart1356
    gt rx450_pos, rx450_eos, rx450_fail1357
    repr_get_attr_int $I11, self, rx450_curclass, "$!from"
    ne $I11, -1, rxscan451_done1363
    goto rxscan451_scan1362
  rxscan451_loop1361:
    inc rx450_pos
    gt rx450_pos, rx450_eos, rx450_fail1357
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!from", rx450_pos
  rxscan451_scan1362:
    nqp_rxmark rx450_bstack, rxscan451_loop1361, rx450_pos, 0
  rxscan451_done1363:
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!pos", rx450_pos
    $P11 = rx450_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1357
    repr_bind_attr_int rx450_cur, rx450_curclass, "$!pos", rx450_pos
    $P11 = rx450_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx450_curclass, "$!pos"
    lt $I11, 0, rx450_fail1357
    nqp_rxmark rx450_bstack, rxsubrule452_pass1364, -1, 0
  rxsubrule452_pass1364:
    rx450_cstack = rx450_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx450_pos, $P11, rx450_curclass, "$!pos"
    rx450_cur."!cursor_pass"(rx450_pos, "term:sym<lambda>", 'backtrack'=>1)
    .return (rx450_cur)
  rx450_restart1356:
    repr_get_attr_obj rx450_cstack, rx450_cur, rx450_curclass, "$!cstack"
  rx450_fail1357:
    unless rx450_bstack, rx450_done1355
    pop $I19, rx450_bstack
    if_null rx450_cstack, rx450_cstack_done1360
    unless rx450_cstack, rx450_cstack_done1360
    dec $I19
    set $P11, rx450_cstack[$I19]
  rx450_cstack_done1360:
    pop rx450_rep, rx450_bstack
    pop rx450_pos, rx450_bstack
    pop $I19, rx450_bstack
    lt rx450_pos, -1, rx450_done1355
    lt rx450_pos, 0, rx450_fail1357
    eq $I19, 0, rx450_fail1357
    nqp_islist $I20, rx450_cstack
    unless $I20, rx450_jump1358
    elements $I18, rx450_bstack
    le $I18, 0, rx450_cut1359
    dec $I18
    set $I18, rx450_bstack[$I18]
  rx450_cut1359:
    assign rx450_cstack, $I18
  rx450_jump1358:
    jump $I19
  rx450_done1355:
    rx450_cur."!cursor_fail"()
    .return (rx450_cur) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_93_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 905
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx453_tgt
    .local int rx453_pos
    .local int rx453_off
    .local int rx453_eos
    .local int rx453_rep
    .local pmc rx453_cur
    .local pmc rx453_curclass
    .local pmc rx453_bstack
    .local pmc rx453_cstack
    (rx453_cur, rx453_tgt, rx453_pos, rx453_curclass, rx453_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx453_cur
    length rx453_eos, rx453_tgt
    eq $I19, 1, rx453_restart1367
    gt rx453_pos, rx453_eos, rx453_fail1368
    repr_get_attr_int $I11, self, rx453_curclass, "$!from"
    ne $I11, -1, rxscan454_done1374
    goto rxscan454_scan1373
  rxscan454_loop1372:
    inc rx453_pos
    gt rx453_pos, rx453_eos, rx453_fail1368
    repr_bind_attr_int rx453_cur, rx453_curclass, "$!from", rx453_pos
  rxscan454_scan1373:
    nqp_rxmark rx453_bstack, rxscan454_loop1372, rx453_pos, 0
  rxscan454_done1374:
    repr_bind_attr_int rx453_cur, rx453_curclass, "$!pos", rx453_pos
    $P11 = rx453_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx453_curclass, "$!pos"
    lt $I11, 0, rx453_fail1368
    nqp_rxmark rx453_bstack, rxsubrule455_pass1375, -1, 0
  rxsubrule455_pass1375:
    rx453_cstack = rx453_cur."!cursor_capture"($P11, "key")
    repr_get_attr_int rx453_pos, $P11, rx453_curclass, "$!pos"
    nqp_rxmark rx453_bstack, rxquantr456_done1377, rx453_pos, 0
  rxquantr456_loop1376:
    ge rx453_pos, rx453_eos, rx453_fail1368
    substr $S11, rx453_tgt, rx453_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx453_fail1368
    inc rx453_pos
    nqp_rxpeek $I19, rx453_bstack, rxquantr456_done1377
    inc $I19
    inc $I19
    set rx453_rep, rx453_bstack[$I19]
    nqp_rxcommit rx453_bstack, rxquantr456_done1377
    inc rx453_rep
    nqp_rxmark rx453_bstack, rxquantr456_done1377, rx453_pos, rx453_rep
    goto rxquantr456_loop1376
  rxquantr456_done1377:
    add $I11, rx453_pos, 2
    gt $I11, rx453_eos, rx453_fail1368
    substr $S10, rx453_tgt, rx453_pos, 2
    ne $S10, ucs4:"=>", rx453_fail1368
    add rx453_pos, 2
    repr_bind_attr_int rx453_cur, rx453_curclass, "$!pos", rx453_pos
    $P11 = rx453_cur."ws"()
    repr_get_attr_int $I11, $P11, rx453_curclass, "$!pos"
    lt $I11, 0, rx453_fail1368
    repr_get_attr_int rx453_pos, $P11, rx453_curclass, "$!pos"
    repr_bind_attr_int rx453_cur, rx453_curclass, "$!pos", rx453_pos
    $P11 = rx453_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx453_curclass, "$!pos"
    lt $I11, 0, rx453_fail1368
    nqp_rxmark rx453_bstack, rxsubrule458_pass1379, -1, 0
  rxsubrule458_pass1379:
    rx453_cstack = rx453_cur."!cursor_capture"($P11, "val")
    repr_get_attr_int rx453_pos, $P11, rx453_curclass, "$!pos"
    rx453_cur."!cursor_pass"(rx453_pos, "fatarrow", 'backtrack'=>1)
    .return (rx453_cur)
  rx453_restart1367:
    repr_get_attr_obj rx453_cstack, rx453_cur, rx453_curclass, "$!cstack"
  rx453_fail1368:
    unless rx453_bstack, rx453_done1366
    pop $I19, rx453_bstack
    if_null rx453_cstack, rx453_cstack_done1371
    unless rx453_cstack, rx453_cstack_done1371
    dec $I19
    set $P11, rx453_cstack[$I19]
  rx453_cstack_done1371:
    pop rx453_rep, rx453_bstack
    pop rx453_pos, rx453_bstack
    pop $I19, rx453_bstack
    lt rx453_pos, -1, rx453_done1366
    lt rx453_pos, 0, rx453_fail1368
    eq $I19, 0, rx453_fail1368
    nqp_islist $I20, rx453_cstack
    unless $I20, rx453_jump1369
    elements $I18, rx453_bstack
    le $I18, 0, rx453_cut1370
    dec $I18
    set $I18, rx453_bstack[$I18]
  rx453_cut1370:
    assign rx453_cstack, $I18
  rx453_jump1369:
    jump $I19
  rx453_done1366:
    rx453_cur."!cursor_fail"()
    .return (rx453_cur) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_94_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 909
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx459_tgt
    .local int rx459_pos
    .local int rx459_off
    .local int rx459_eos
    .local int rx459_rep
    .local pmc rx459_cur
    .local pmc rx459_curclass
    .local pmc rx459_bstack
    .local pmc rx459_cstack
    (rx459_cur, rx459_tgt, rx459_pos, rx459_curclass, rx459_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx459_cur
    length rx459_eos, rx459_tgt
    eq $I19, 1, rx459_restart1382
    gt rx459_pos, rx459_eos, rx459_fail1383
    repr_get_attr_int $I11, self, rx459_curclass, "$!from"
    ne $I11, -1, rxscan460_done1389
    goto rxscan460_scan1388
  rxscan460_loop1387:
    inc rx459_pos
    gt rx459_pos, rx459_eos, rx459_fail1383
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!from", rx459_pos
  rxscan460_scan1388:
    nqp_rxmark rx459_bstack, rxscan460_loop1387, rx459_pos, 0
  rxscan460_done1389:
    add $I11, rx459_pos, 1
    gt $I11, rx459_eos, rx459_fail1383
    substr $S10, rx459_tgt, rx459_pos, 1
    ne $S10, ucs4:":", rx459_fail1383
    add rx459_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt461_01391
    nqp_push_label $P11, alt461_11395
    nqp_push_label $P11, alt461_21401
    nqp_push_label $P11, alt461_31403
    nqp_rxmark rx459_bstack, alt461_end1390, -1, 0
    rx459_cur."!alt"(rx459_pos, "alt_nfa__19_1359292301.933", $P11)
    goto rx459_fail1383
  alt461_01391:
    nqp_rxmark rx459_bstack, rxcap462_fail1393, rx459_pos, 0
    add $I11, rx459_pos, 1
    gt $I11, rx459_eos, rx459_fail1383
    substr $S10, rx459_tgt, rx459_pos, 1
    ne $S10, ucs4:"!", rx459_fail1383
    add rx459_pos, 1
    nqp_rxpeek $I19, rx459_bstack, rxcap462_fail1393
    inc $I19
    set $I11, rx459_bstack[$I19]
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!pos", rx459_pos
    $P11 = rx459_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx459_pos)
    rx459_cstack = rx459_cur."!cursor_capture"($P11, "not")
    goto rxcap462_done1392
  rxcap462_fail1393:
    goto rx459_fail1383
  rxcap462_done1392:
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!pos", rx459_pos
    $P11 = rx459_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx459_curclass, "$!pos"
    lt $I11, 0, rx459_fail1383
    nqp_rxmark rx459_bstack, rxsubrule463_pass1394, -1, 0
  rxsubrule463_pass1394:
    rx459_cstack = rx459_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx459_pos, $P11, rx459_curclass, "$!pos"
    goto alt461_end1390
  alt461_11395:
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!pos", rx459_pos
    $P11 = rx459_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx459_curclass, "$!pos"
    lt $I11, 0, rx459_fail1383
    nqp_rxmark rx459_bstack, rxsubrule464_pass1396, -1, 0
  rxsubrule464_pass1396:
    rx459_cstack = rx459_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx459_pos, $P11, rx459_curclass, "$!pos"
    nqp_rxmark rx459_bstack, rxquantr465_done1398, rx459_pos, 0
  rxquantr465_loop1397:
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!pos", rx459_pos
    $P11 = rx459_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx459_curclass, "$!pos"
    lt $I11, 0, rx459_fail1383
    goto rxsubrule466_pass1399
  rxsubrule466_back1400:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx459_curclass, "$!pos"
    lt $I11, 0, rx459_fail1383
  rxsubrule466_pass1399:
    rx459_cstack = rx459_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule466_back1400
    push rx459_bstack, $I11
    push rx459_bstack, 0
    push rx459_bstack, rx459_pos
    elements $I11, rx459_cstack
    push rx459_bstack, $I11
    repr_get_attr_int rx459_pos, $P11, rx459_curclass, "$!pos"
    nqp_rxpeek $I19, rx459_bstack, rxquantr465_done1398
    inc $I19
    inc $I19
    set rx459_rep, rx459_bstack[$I19]
    nqp_rxcommit rx459_bstack, rxquantr465_done1398
    inc rx459_rep
  rxquantr465_done1398:
    goto alt461_end1390
  alt461_21401:
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!pos", rx459_pos
    $P11 = rx459_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx459_curclass, "$!pos"
    lt $I11, 0, rx459_fail1383
    nqp_rxmark rx459_bstack, rxsubrule467_pass1402, -1, 0
  rxsubrule467_pass1402:
    rx459_cstack = rx459_cur."!cursor_capture"($P11, "circumfix")
    repr_get_attr_int rx459_pos, $P11, rx459_curclass, "$!pos"
    goto alt461_end1390
  alt461_31403:
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!pos", rx459_pos
    $P11 = rx459_cur."variable"()
    repr_get_attr_int $I11, $P11, rx459_curclass, "$!pos"
    lt $I11, 0, rx459_fail1383
    nqp_rxmark rx459_bstack, rxsubrule468_pass1404, -1, 0
  rxsubrule468_pass1404:
    rx459_cstack = rx459_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx459_pos, $P11, rx459_curclass, "$!pos"
    goto alt461_end1390
  alt461_end1390:
    nqp_rxcommit rx459_bstack, alt461_end1390
    rx459_cur."!cursor_pass"(rx459_pos, "colonpair", 'backtrack'=>1)
    .return (rx459_cur)
  rx459_restart1382:
    repr_get_attr_obj rx459_cstack, rx459_cur, rx459_curclass, "$!cstack"
  rx459_fail1383:
    unless rx459_bstack, rx459_done1381
    pop $I19, rx459_bstack
    if_null rx459_cstack, rx459_cstack_done1386
    unless rx459_cstack, rx459_cstack_done1386
    dec $I19
    set $P11, rx459_cstack[$I19]
  rx459_cstack_done1386:
    pop rx459_rep, rx459_bstack
    pop rx459_pos, rx459_bstack
    pop $I19, rx459_bstack
    lt rx459_pos, -1, rx459_done1381
    lt rx459_pos, 0, rx459_fail1383
    eq $I19, 0, rx459_fail1383
    nqp_islist $I20, rx459_cstack
    unless $I20, rx459_jump1384
    elements $I18, rx459_bstack
    le $I18, 0, rx459_cut1385
    dec $I18
    set $I18, rx459_bstack[$I18]
  rx459_cut1385:
    assign rx459_cstack, $I18
  rx459_jump1384:
    jump $I19
  rx459_done1381:
    rx459_cur."!cursor_fail"()
    .return (rx459_cur) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_95_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 919
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx469_tgt
    .local int rx469_pos
    .local int rx469_off
    .local int rx469_eos
    .local int rx469_rep
    .local pmc rx469_cur
    .local pmc rx469_curclass
    .local pmc rx469_bstack
    .local pmc rx469_cstack
    (rx469_cur, rx469_tgt, rx469_pos, rx469_curclass, rx469_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx469_cur
    length rx469_eos, rx469_tgt
    eq $I19, 1, rx469_restart1407
    gt rx469_pos, rx469_eos, rx469_fail1408
    repr_get_attr_int $I11, self, rx469_curclass, "$!from"
    ne $I11, -1, rxscan470_done1414
    goto rxscan470_scan1413
  rxscan470_loop1412:
    inc rx469_pos
    gt rx469_pos, rx469_eos, rx469_fail1408
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!from", rx469_pos
  rxscan470_scan1413:
    nqp_rxmark rx469_bstack, rxscan470_loop1412, rx469_pos, 0
  rxscan470_done1414:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt471_01416
    nqp_push_label $P11, alt471_11423
    nqp_push_label $P11, alt471_21426
    nqp_rxmark rx469_bstack, alt471_end1415, -1, 0
    rx469_cur."!alt"(rx469_pos, "alt_nfa__20_1359292301.947", $P11)
    goto rx469_fail1408
  alt471_01416:
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!pos", rx469_pos
    $P11 = rx469_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx469_curclass, "$!pos"
    lt $I11, 0, rx469_fail1408
    nqp_rxmark rx469_bstack, rxsubrule472_pass1417, -1, 0
  rxsubrule472_pass1417:
    rx469_cstack = rx469_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx469_pos, $P11, rx469_curclass, "$!pos"
    nqp_rxmark rx469_bstack, rxquantr473_done1419, rx469_pos, 0
  rxquantr473_loop1418:
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!pos", rx469_pos
    $P11 = rx469_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx469_curclass, "$!pos"
    lt $I11, 0, rx469_fail1408
    goto rxsubrule474_pass1420
  rxsubrule474_back1421:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx469_curclass, "$!pos"
    lt $I11, 0, rx469_fail1408
  rxsubrule474_pass1420:
    rx469_cstack = rx469_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule474_back1421
    push rx469_bstack, $I11
    push rx469_bstack, 0
    push rx469_bstack, rx469_pos
    elements $I11, rx469_cstack
    push rx469_bstack, $I11
    repr_get_attr_int rx469_pos, $P11, rx469_curclass, "$!pos"
    nqp_rxpeek $I19, rx469_bstack, rxquantr473_done1419
    inc $I19
    inc $I19
    set rx469_rep, rx469_bstack[$I19]
    nqp_rxcommit rx469_bstack, rxquantr473_done1419
    inc rx469_rep
  rxquantr473_done1419:
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!pos", rx469_pos
    $P11 = rx469_cur."name"()
    repr_get_attr_int $I11, $P11, rx469_curclass, "$!pos"
    lt $I11, 0, rx469_fail1408
    nqp_rxmark rx469_bstack, rxsubrule475_pass1422, -1, 0
  rxsubrule475_pass1422:
    rx469_cstack = rx469_cur."!cursor_capture"($P11, "desigilname")
    repr_get_attr_int rx469_pos, $P11, rx469_curclass, "$!pos"
    goto alt471_end1415
  alt471_11423:
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!pos", rx469_pos
    $P11 = rx469_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx469_curclass, "$!pos"
    lt $I11, 0, rx469_fail1408
    nqp_rxmark rx469_bstack, rxsubrule476_pass1424, -1, 0
  rxsubrule476_pass1424:
    rx469_cstack = rx469_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx469_pos, $P11, rx469_curclass, "$!pos"
    ge rx469_pos, rx469_eos, rx469_fail1408
    substr $S11, rx469_tgt, rx469_pos, 1
    index $I11, ucs4:"<[", $S11
    lt $I11, 0, rx469_fail1408
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!pos", rx469_pos
    $P11 = rx469_cur."postcircumfix"()
    repr_get_attr_int $I11, $P11, rx469_curclass, "$!pos"
    lt $I11, 0, rx469_fail1408
    nqp_rxmark rx469_bstack, rxsubrule477_pass1425, -1, 0
  rxsubrule477_pass1425:
    rx469_cstack = rx469_cur."!cursor_capture"($P11, "postcircumfix")
    repr_get_attr_int rx469_pos, $P11, rx469_curclass, "$!pos"
    goto alt471_end1415
  alt471_21426:
    nqp_rxmark rx469_bstack, rxcap478_fail1428, rx469_pos, 0
    add $I11, rx469_pos, 1
    gt $I11, rx469_eos, rx469_fail1408
    substr $S10, rx469_tgt, rx469_pos, 1
    ne $S10, ucs4:"$", rx469_fail1408
    add rx469_pos, 1
    nqp_rxpeek $I19, rx469_bstack, rxcap478_fail1428
    inc $I19
    set $I11, rx469_bstack[$I19]
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!pos", rx469_pos
    $P11 = rx469_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx469_pos)
    rx469_cstack = rx469_cur."!cursor_capture"($P11, "sigil")
    goto rxcap478_done1427
  rxcap478_fail1428:
    goto rx469_fail1408
  rxcap478_done1427:
    nqp_rxmark rx469_bstack, rxcap479_fail1430, rx469_pos, 0
    ge rx469_pos, rx469_eos, rx469_fail1408
    substr $S11, rx469_tgt, rx469_pos, 1
    index $I11, ucs4:"/_!", $S11
    lt $I11, 0, rx469_fail1408
    inc rx469_pos
    nqp_rxpeek $I19, rx469_bstack, rxcap479_fail1430
    inc $I19
    set $I11, rx469_bstack[$I19]
    repr_bind_attr_int rx469_cur, rx469_curclass, "$!pos", rx469_pos
    $P11 = rx469_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx469_pos)
    rx469_cstack = rx469_cur."!cursor_capture"($P11, "desigilname")
    goto rxcap479_done1429
  rxcap479_fail1430:
    goto rx469_fail1408
  rxcap479_done1429:
    goto alt471_end1415
  alt471_end1415:
    rx469_cur."!cursor_pass"(rx469_pos, "variable", 'backtrack'=>1)
    .return (rx469_cur)
  rx469_restart1407:
    repr_get_attr_obj rx469_cstack, rx469_cur, rx469_curclass, "$!cstack"
  rx469_fail1408:
    unless rx469_bstack, rx469_done1406
    pop $I19, rx469_bstack
    if_null rx469_cstack, rx469_cstack_done1411
    unless rx469_cstack, rx469_cstack_done1411
    dec $I19
    set $P11, rx469_cstack[$I19]
  rx469_cstack_done1411:
    pop rx469_rep, rx469_bstack
    pop rx469_pos, rx469_bstack
    pop $I19, rx469_bstack
    lt rx469_pos, -1, rx469_done1406
    lt rx469_pos, 0, rx469_fail1408
    eq $I19, 0, rx469_fail1408
    nqp_islist $I20, rx469_cstack
    unless $I20, rx469_jump1409
    elements $I18, rx469_bstack
    le $I18, 0, rx469_cut1410
    dec $I18
    set $I18, rx469_bstack[$I18]
  rx469_cut1410:
    assign rx469_cstack, $I18
  rx469_jump1409:
    jump $I19
  rx469_done1406:
    rx469_cur."!cursor_fail"()
    .return (rx469_cur) 
.end
.HLL "nqp"
.namespace []
.sub "sigil" :subid("cuid_96_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 925
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx480_tgt
    .local int rx480_pos
    .local int rx480_off
    .local int rx480_eos
    .local int rx480_rep
    .local pmc rx480_cur
    .local pmc rx480_curclass
    .local pmc rx480_bstack
    .local pmc rx480_cstack
    (rx480_cur, rx480_tgt, rx480_pos, rx480_curclass, rx480_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx480_cur
    length rx480_eos, rx480_tgt
    eq $I19, 1, rx480_restart1433
    gt rx480_pos, rx480_eos, rx480_fail1434
    repr_get_attr_int $I11, self, rx480_curclass, "$!from"
    ne $I11, -1, rxscan481_done1440
    goto rxscan481_scan1439
  rxscan481_loop1438:
    inc rx480_pos
    gt rx480_pos, rx480_eos, rx480_fail1434
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!from", rx480_pos
  rxscan481_scan1439:
    nqp_rxmark rx480_bstack, rxscan481_loop1438, rx480_pos, 0
  rxscan481_done1440:
    ge rx480_pos, rx480_eos, rx480_fail1434
    substr $S11, rx480_tgt, rx480_pos, 1
    index $I11, ucs4:"$@%&", $S11
    lt $I11, 0, rx480_fail1434
    inc rx480_pos
    rx480_cur."!cursor_pass"(rx480_pos, "sigil", 'backtrack'=>1)
    .return (rx480_cur)
  rx480_restart1433:
    repr_get_attr_obj rx480_cstack, rx480_cur, rx480_curclass, "$!cstack"
  rx480_fail1434:
    unless rx480_bstack, rx480_done1432
    pop $I19, rx480_bstack
    if_null rx480_cstack, rx480_cstack_done1437
    unless rx480_cstack, rx480_cstack_done1437
    dec $I19
    set $P11, rx480_cstack[$I19]
  rx480_cstack_done1437:
    pop rx480_rep, rx480_bstack
    pop rx480_pos, rx480_bstack
    pop $I19, rx480_bstack
    lt rx480_pos, -1, rx480_done1432
    lt rx480_pos, 0, rx480_fail1434
    eq $I19, 0, rx480_fail1434
    nqp_islist $I20, rx480_cstack
    unless $I20, rx480_jump1435
    elements $I18, rx480_bstack
    le $I18, 0, rx480_cut1436
    dec $I18
    set $I18, rx480_bstack[$I18]
  rx480_cut1436:
    assign rx480_cstack, $I18
  rx480_jump1435:
    jump $I19
  rx480_done1432:
    rx480_cur."!cursor_fail"()
    .return (rx480_cur) 
.end
.HLL "nqp"
.namespace []
.sub "twigil" :subid("cuid_97_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 927
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx482_tgt
    .local int rx482_pos
    .local int rx482_off
    .local int rx482_eos
    .local int rx482_rep
    .local pmc rx482_cur
    .local pmc rx482_curclass
    .local pmc rx482_bstack
    .local pmc rx482_cstack
    (rx482_cur, rx482_tgt, rx482_pos, rx482_curclass, rx482_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx482_cur
    length rx482_eos, rx482_tgt
    eq $I19, 1, rx482_restart1443
    gt rx482_pos, rx482_eos, rx482_fail1444
    repr_get_attr_int $I11, self, rx482_curclass, "$!from"
    ne $I11, -1, rxscan483_done1450
    goto rxscan483_scan1449
  rxscan483_loop1448:
    inc rx482_pos
    gt rx482_pos, rx482_eos, rx482_fail1444
    repr_bind_attr_int rx482_cur, rx482_curclass, "$!from", rx482_pos
  rxscan483_scan1449:
    nqp_rxmark rx482_bstack, rxscan483_loop1448, rx482_pos, 0
  rxscan483_done1450:
    ge rx482_pos, rx482_eos, rx482_fail1444
    substr $S11, rx482_tgt, rx482_pos, 1
    index $I11, ucs4:"*!?", $S11
    lt $I11, 0, rx482_fail1444
    inc rx482_pos
    rx482_cur."!cursor_pass"(rx482_pos, "twigil", 'backtrack'=>1)
    .return (rx482_cur)
  rx482_restart1443:
    repr_get_attr_obj rx482_cstack, rx482_cur, rx482_curclass, "$!cstack"
  rx482_fail1444:
    unless rx482_bstack, rx482_done1442
    pop $I19, rx482_bstack
    if_null rx482_cstack, rx482_cstack_done1447
    unless rx482_cstack, rx482_cstack_done1447
    dec $I19
    set $P11, rx482_cstack[$I19]
  rx482_cstack_done1447:
    pop rx482_rep, rx482_bstack
    pop rx482_pos, rx482_bstack
    pop $I19, rx482_bstack
    lt rx482_pos, -1, rx482_done1442
    lt rx482_pos, 0, rx482_fail1444
    eq $I19, 0, rx482_fail1444
    nqp_islist $I20, rx482_cstack
    unless $I20, rx482_jump1445
    elements $I18, rx482_bstack
    le $I18, 0, rx482_cut1446
    dec $I18
    set $I18, rx482_bstack[$I18]
  rx482_cut1446:
    assign rx482_cstack, $I18
  rx482_jump1445:
    jump $I19
  rx482_done1442:
    rx482_cur."!cursor_fail"()
    .return (rx482_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator" :subid("cuid_98_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 929
    .param pmc self 
    $P5001 = self."!protoregex"("package_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_99_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 930
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx484_tgt
    .local int rx484_pos
    .local int rx484_off
    .local int rx484_eos
    .local int rx484_rep
    .local pmc rx484_cur
    .local pmc rx484_curclass
    .local pmc rx484_bstack
    .local pmc rx484_cstack
    (rx484_cur, rx484_tgt, rx484_pos, rx484_curclass, rx484_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx484_cur
    length rx484_eos, rx484_tgt
    eq $I19, 1, rx484_restart1453
    gt rx484_pos, rx484_eos, rx484_fail1454
    repr_get_attr_int $I11, self, rx484_curclass, "$!from"
    ne $I11, -1, rxscan485_done1460
    goto rxscan485_scan1459
  rxscan485_loop1458:
    inc rx484_pos
    gt rx484_pos, rx484_eos, rx484_fail1454
    repr_bind_attr_int rx484_cur, rx484_curclass, "$!from", rx484_pos
  rxscan485_scan1459:
    nqp_rxmark rx484_bstack, rxscan485_loop1458, rx484_pos, 0
  rxscan485_done1460:
    repr_bind_attr_int rx484_cur, rx484_curclass, "$!pos", rx484_pos
    store_lex unicode:"$\x{a2}", rx484_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1461
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1462
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5007
  fallback1462:
    unless_null $P5004, vivi_4861463
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4861463:
    set $P5003, $P5004
  fallback1461:
    set $P101, $P5003
    repr_bind_attr_int rx484_cur, rx484_curclass, "$!pos", rx484_pos
    store_lex unicode:"$\x{a2}", rx484_cur
    box $P5009, "module"
    set $P102, $P5009
    nqp_rxmark rx484_bstack, rxcap487_fail1465, rx484_pos, 0
    add $I11, rx484_pos, 6
    gt $I11, rx484_eos, rx484_fail1454
    substr $S10, rx484_tgt, rx484_pos, 6
    ne $S10, ucs4:"module", rx484_fail1454
    add rx484_pos, 6
    nqp_rxpeek $I19, rx484_bstack, rxcap487_fail1465
    inc $I19
    set $I11, rx484_bstack[$I19]
    repr_bind_attr_int rx484_cur, rx484_curclass, "$!pos", rx484_pos
    $P11 = rx484_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx484_pos)
    rx484_cstack = rx484_cur."!cursor_capture"($P11, "sym")
    goto rxcap487_done1464
  rxcap487_fail1465:
    goto rx484_fail1454
  rxcap487_done1464:
    repr_bind_attr_int rx484_cur, rx484_curclass, "$!pos", rx484_pos
    $P11 = rx484_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx484_curclass, "$!pos"
    lt $I11, 0, rx484_fail1454
    nqp_rxmark rx484_bstack, rxsubrule488_pass1466, -1, 0
  rxsubrule488_pass1466:
    rx484_cstack = rx484_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx484_pos, $P11, rx484_curclass, "$!pos"
    rx484_cur."!cursor_pass"(rx484_pos, "package_declarator:sym<module>", 'backtrack'=>1)
    .return (rx484_cur)
  rx484_restart1453:
    repr_get_attr_obj rx484_cstack, rx484_cur, rx484_curclass, "$!cstack"
  rx484_fail1454:
    unless rx484_bstack, rx484_done1452
    pop $I19, rx484_bstack
    if_null rx484_cstack, rx484_cstack_done1457
    unless rx484_cstack, rx484_cstack_done1457
    dec $I19
    set $P11, rx484_cstack[$I19]
  rx484_cstack_done1457:
    pop rx484_rep, rx484_bstack
    pop rx484_pos, rx484_bstack
    pop $I19, rx484_bstack
    lt rx484_pos, -1, rx484_done1452
    lt rx484_pos, 0, rx484_fail1454
    eq $I19, 0, rx484_fail1454
    nqp_islist $I20, rx484_cstack
    unless $I20, rx484_jump1455
    elements $I18, rx484_bstack
    le $I18, 0, rx484_cut1456
    dec $I18
    set $I18, rx484_bstack[$I18]
  rx484_cut1456:
    assign rx484_cstack, $I18
  rx484_jump1455:
    jump $I19
  rx484_done1452:
    rx484_cur."!cursor_fail"()
    .return (rx484_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_100_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 935
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx489_tgt
    .local int rx489_pos
    .local int rx489_off
    .local int rx489_eos
    .local int rx489_rep
    .local pmc rx489_cur
    .local pmc rx489_curclass
    .local pmc rx489_bstack
    .local pmc rx489_cstack
    (rx489_cur, rx489_tgt, rx489_pos, rx489_curclass, rx489_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx489_cur
    length rx489_eos, rx489_tgt
    eq $I19, 1, rx489_restart1469
    gt rx489_pos, rx489_eos, rx489_fail1470
    repr_get_attr_int $I11, self, rx489_curclass, "$!from"
    ne $I11, -1, rxscan490_done1476
    goto rxscan490_scan1475
  rxscan490_loop1474:
    inc rx489_pos
    gt rx489_pos, rx489_eos, rx489_fail1470
    repr_bind_attr_int rx489_cur, rx489_curclass, "$!from", rx489_pos
  rxscan490_scan1475:
    nqp_rxmark rx489_bstack, rxscan490_loop1474, rx489_pos, 0
  rxscan490_done1476:
    repr_bind_attr_int rx489_cur, rx489_curclass, "$!pos", rx489_pos
    store_lex unicode:"$\x{a2}", rx489_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1477
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1478
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5007
  fallback1478:
    unless_null $P5004, vivi_4911479
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4911479:
    set $P5003, $P5004
  fallback1477:
    set $P101, $P5003
    repr_bind_attr_int rx489_cur, rx489_curclass, "$!pos", rx489_pos
    store_lex unicode:"$\x{a2}", rx489_cur
    box $P5009, "knowhow"
    set $P102, $P5009
    nqp_rxmark rx489_bstack, rxcap492_fail1481, rx489_pos, 0
    add $I11, rx489_pos, 7
    gt $I11, rx489_eos, rx489_fail1470
    substr $S10, rx489_tgt, rx489_pos, 7
    ne $S10, ucs4:"knowhow", rx489_fail1470
    add rx489_pos, 7
    nqp_rxpeek $I19, rx489_bstack, rxcap492_fail1481
    inc $I19
    set $I11, rx489_bstack[$I19]
    repr_bind_attr_int rx489_cur, rx489_curclass, "$!pos", rx489_pos
    $P11 = rx489_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx489_pos)
    rx489_cstack = rx489_cur."!cursor_capture"($P11, "sym")
    goto rxcap492_done1480
  rxcap492_fail1481:
    goto rx489_fail1470
  rxcap492_done1480:
    repr_bind_attr_int rx489_cur, rx489_curclass, "$!pos", rx489_pos
    $P11 = rx489_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx489_curclass, "$!pos"
    lt $I11, 0, rx489_fail1470
    nqp_rxmark rx489_bstack, rxsubrule493_pass1482, -1, 0
  rxsubrule493_pass1482:
    rx489_cstack = rx489_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx489_pos, $P11, rx489_curclass, "$!pos"
    rx489_cur."!cursor_pass"(rx489_pos, "package_declarator:sym<knowhow>", 'backtrack'=>1)
    .return (rx489_cur)
  rx489_restart1469:
    repr_get_attr_obj rx489_cstack, rx489_cur, rx489_curclass, "$!cstack"
  rx489_fail1470:
    unless rx489_bstack, rx489_done1468
    pop $I19, rx489_bstack
    if_null rx489_cstack, rx489_cstack_done1473
    unless rx489_cstack, rx489_cstack_done1473
    dec $I19
    set $P11, rx489_cstack[$I19]
  rx489_cstack_done1473:
    pop rx489_rep, rx489_bstack
    pop rx489_pos, rx489_bstack
    pop $I19, rx489_bstack
    lt rx489_pos, -1, rx489_done1468
    lt rx489_pos, 0, rx489_fail1470
    eq $I19, 0, rx489_fail1470
    nqp_islist $I20, rx489_cstack
    unless $I20, rx489_jump1471
    elements $I18, rx489_bstack
    le $I18, 0, rx489_cut1472
    dec $I18
    set $I18, rx489_bstack[$I18]
  rx489_cut1472:
    assign rx489_cstack, $I18
  rx489_jump1471:
    jump $I19
  rx489_done1468:
    rx489_cur."!cursor_fail"()
    .return (rx489_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_101_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 940
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx494_tgt
    .local int rx494_pos
    .local int rx494_off
    .local int rx494_eos
    .local int rx494_rep
    .local pmc rx494_cur
    .local pmc rx494_curclass
    .local pmc rx494_bstack
    .local pmc rx494_cstack
    (rx494_cur, rx494_tgt, rx494_pos, rx494_curclass, rx494_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx494_cur
    length rx494_eos, rx494_tgt
    eq $I19, 1, rx494_restart1485
    gt rx494_pos, rx494_eos, rx494_fail1486
    repr_get_attr_int $I11, self, rx494_curclass, "$!from"
    ne $I11, -1, rxscan495_done1492
    goto rxscan495_scan1491
  rxscan495_loop1490:
    inc rx494_pos
    gt rx494_pos, rx494_eos, rx494_fail1486
    repr_bind_attr_int rx494_cur, rx494_curclass, "$!from", rx494_pos
  rxscan495_scan1491:
    nqp_rxmark rx494_bstack, rxscan495_loop1490, rx494_pos, 0
  rxscan495_done1492:
    repr_bind_attr_int rx494_cur, rx494_curclass, "$!pos", rx494_pos
    store_lex unicode:"$\x{a2}", rx494_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1493
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1494
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5007
  fallback1494:
    unless_null $P5004, vivi_4961495
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4961495:
    set $P5003, $P5004
  fallback1493:
    set $P101, $P5003
    repr_bind_attr_int rx494_cur, rx494_curclass, "$!pos", rx494_pos
    store_lex unicode:"$\x{a2}", rx494_cur
    box $P5009, "class"
    set $P102, $P5009
    nqp_rxmark rx494_bstack, rxcap497_fail1497, rx494_pos, 0
    add $I11, rx494_pos, 5
    gt $I11, rx494_eos, rx494_fail1486
    substr $S10, rx494_tgt, rx494_pos, 5
    ne $S10, ucs4:"class", rx494_fail1486
    add rx494_pos, 5
    nqp_rxpeek $I19, rx494_bstack, rxcap497_fail1497
    inc $I19
    set $I11, rx494_bstack[$I19]
    repr_bind_attr_int rx494_cur, rx494_curclass, "$!pos", rx494_pos
    $P11 = rx494_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx494_pos)
    rx494_cstack = rx494_cur."!cursor_capture"($P11, "sym")
    goto rxcap497_done1496
  rxcap497_fail1497:
    goto rx494_fail1486
  rxcap497_done1496:
    repr_bind_attr_int rx494_cur, rx494_curclass, "$!pos", rx494_pos
    $P11 = rx494_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx494_curclass, "$!pos"
    lt $I11, 0, rx494_fail1486
    nqp_rxmark rx494_bstack, rxsubrule498_pass1498, -1, 0
  rxsubrule498_pass1498:
    rx494_cstack = rx494_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx494_pos, $P11, rx494_curclass, "$!pos"
    rx494_cur."!cursor_pass"(rx494_pos, "package_declarator:sym<class>", 'backtrack'=>1)
    .return (rx494_cur)
  rx494_restart1485:
    repr_get_attr_obj rx494_cstack, rx494_cur, rx494_curclass, "$!cstack"
  rx494_fail1486:
    unless rx494_bstack, rx494_done1484
    pop $I19, rx494_bstack
    if_null rx494_cstack, rx494_cstack_done1489
    unless rx494_cstack, rx494_cstack_done1489
    dec $I19
    set $P11, rx494_cstack[$I19]
  rx494_cstack_done1489:
    pop rx494_rep, rx494_bstack
    pop rx494_pos, rx494_bstack
    pop $I19, rx494_bstack
    lt rx494_pos, -1, rx494_done1484
    lt rx494_pos, 0, rx494_fail1486
    eq $I19, 0, rx494_fail1486
    nqp_islist $I20, rx494_cstack
    unless $I20, rx494_jump1487
    elements $I18, rx494_bstack
    le $I18, 0, rx494_cut1488
    dec $I18
    set $I18, rx494_bstack[$I18]
  rx494_cut1488:
    assign rx494_cstack, $I18
  rx494_jump1487:
    jump $I19
  rx494_done1484:
    rx494_cur."!cursor_fail"()
    .return (rx494_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_102_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 945
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx499_tgt
    .local int rx499_pos
    .local int rx499_off
    .local int rx499_eos
    .local int rx499_rep
    .local pmc rx499_cur
    .local pmc rx499_curclass
    .local pmc rx499_bstack
    .local pmc rx499_cstack
    (rx499_cur, rx499_tgt, rx499_pos, rx499_curclass, rx499_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx499_cur
    length rx499_eos, rx499_tgt
    eq $I19, 1, rx499_restart1501
    gt rx499_pos, rx499_eos, rx499_fail1502
    repr_get_attr_int $I11, self, rx499_curclass, "$!from"
    ne $I11, -1, rxscan500_done1508
    goto rxscan500_scan1507
  rxscan500_loop1506:
    inc rx499_pos
    gt rx499_pos, rx499_eos, rx499_fail1502
    repr_bind_attr_int rx499_cur, rx499_curclass, "$!from", rx499_pos
  rxscan500_scan1507:
    nqp_rxmark rx499_bstack, rxscan500_loop1506, rx499_pos, 0
  rxscan500_done1508:
    repr_bind_attr_int rx499_cur, rx499_curclass, "$!pos", rx499_pos
    store_lex unicode:"$\x{a2}", rx499_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1509
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1510
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5007
  fallback1510:
    unless_null $P5004, vivi_5011511
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5011511:
    set $P5003, $P5004
  fallback1509:
    set $P101, $P5003
    repr_bind_attr_int rx499_cur, rx499_curclass, "$!pos", rx499_pos
    store_lex unicode:"$\x{a2}", rx499_cur
    box $P5009, "grammar"
    set $P102, $P5009
    nqp_rxmark rx499_bstack, rxcap502_fail1513, rx499_pos, 0
    add $I11, rx499_pos, 7
    gt $I11, rx499_eos, rx499_fail1502
    substr $S10, rx499_tgt, rx499_pos, 7
    ne $S10, ucs4:"grammar", rx499_fail1502
    add rx499_pos, 7
    nqp_rxpeek $I19, rx499_bstack, rxcap502_fail1513
    inc $I19
    set $I11, rx499_bstack[$I19]
    repr_bind_attr_int rx499_cur, rx499_curclass, "$!pos", rx499_pos
    $P11 = rx499_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx499_pos)
    rx499_cstack = rx499_cur."!cursor_capture"($P11, "sym")
    goto rxcap502_done1512
  rxcap502_fail1513:
    goto rx499_fail1502
  rxcap502_done1512:
    repr_bind_attr_int rx499_cur, rx499_curclass, "$!pos", rx499_pos
    $P11 = rx499_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx499_curclass, "$!pos"
    lt $I11, 0, rx499_fail1502
    nqp_rxmark rx499_bstack, rxsubrule503_pass1514, -1, 0
  rxsubrule503_pass1514:
    rx499_cstack = rx499_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx499_pos, $P11, rx499_curclass, "$!pos"
    rx499_cur."!cursor_pass"(rx499_pos, "package_declarator:sym<grammar>", 'backtrack'=>1)
    .return (rx499_cur)
  rx499_restart1501:
    repr_get_attr_obj rx499_cstack, rx499_cur, rx499_curclass, "$!cstack"
  rx499_fail1502:
    unless rx499_bstack, rx499_done1500
    pop $I19, rx499_bstack
    if_null rx499_cstack, rx499_cstack_done1505
    unless rx499_cstack, rx499_cstack_done1505
    dec $I19
    set $P11, rx499_cstack[$I19]
  rx499_cstack_done1505:
    pop rx499_rep, rx499_bstack
    pop rx499_pos, rx499_bstack
    pop $I19, rx499_bstack
    lt rx499_pos, -1, rx499_done1500
    lt rx499_pos, 0, rx499_fail1502
    eq $I19, 0, rx499_fail1502
    nqp_islist $I20, rx499_cstack
    unless $I20, rx499_jump1503
    elements $I18, rx499_bstack
    le $I18, 0, rx499_cut1504
    dec $I18
    set $I18, rx499_bstack[$I18]
  rx499_cut1504:
    assign rx499_cstack, $I18
  rx499_jump1503:
    jump $I19
  rx499_done1500:
    rx499_cur."!cursor_fail"()
    .return (rx499_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_103_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 950
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx504_tgt
    .local int rx504_pos
    .local int rx504_off
    .local int rx504_eos
    .local int rx504_rep
    .local pmc rx504_cur
    .local pmc rx504_curclass
    .local pmc rx504_bstack
    .local pmc rx504_cstack
    (rx504_cur, rx504_tgt, rx504_pos, rx504_curclass, rx504_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx504_cur
    length rx504_eos, rx504_tgt
    eq $I19, 1, rx504_restart1517
    gt rx504_pos, rx504_eos, rx504_fail1518
    repr_get_attr_int $I11, self, rx504_curclass, "$!from"
    ne $I11, -1, rxscan505_done1524
    goto rxscan505_scan1523
  rxscan505_loop1522:
    inc rx504_pos
    gt rx504_pos, rx504_eos, rx504_fail1518
    repr_bind_attr_int rx504_cur, rx504_curclass, "$!from", rx504_pos
  rxscan505_scan1523:
    nqp_rxmark rx504_bstack, rxscan505_loop1522, rx504_pos, 0
  rxscan505_done1524:
    repr_bind_attr_int rx504_cur, rx504_curclass, "$!pos", rx504_pos
    store_lex unicode:"$\x{a2}", rx504_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1525
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1526
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5007
  fallback1526:
    unless_null $P5004, vivi_5061527
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5061527:
    set $P5003, $P5004
  fallback1525:
    set $P101, $P5003
    repr_bind_attr_int rx504_cur, rx504_curclass, "$!pos", rx504_pos
    store_lex unicode:"$\x{a2}", rx504_cur
    box $P5009, "role"
    set $P102, $P5009
    nqp_rxmark rx504_bstack, rxcap507_fail1529, rx504_pos, 0
    add $I11, rx504_pos, 4
    gt $I11, rx504_eos, rx504_fail1518
    substr $S10, rx504_tgt, rx504_pos, 4
    ne $S10, ucs4:"role", rx504_fail1518
    add rx504_pos, 4
    nqp_rxpeek $I19, rx504_bstack, rxcap507_fail1529
    inc $I19
    set $I11, rx504_bstack[$I19]
    repr_bind_attr_int rx504_cur, rx504_curclass, "$!pos", rx504_pos
    $P11 = rx504_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx504_pos)
    rx504_cstack = rx504_cur."!cursor_capture"($P11, "sym")
    goto rxcap507_done1528
  rxcap507_fail1529:
    goto rx504_fail1518
  rxcap507_done1528:
    repr_bind_attr_int rx504_cur, rx504_curclass, "$!pos", rx504_pos
    $P11 = rx504_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx504_curclass, "$!pos"
    lt $I11, 0, rx504_fail1518
    nqp_rxmark rx504_bstack, rxsubrule508_pass1530, -1, 0
  rxsubrule508_pass1530:
    rx504_cstack = rx504_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx504_pos, $P11, rx504_curclass, "$!pos"
    rx504_cur."!cursor_pass"(rx504_pos, "package_declarator:sym<role>", 'backtrack'=>1)
    .return (rx504_cur)
  rx504_restart1517:
    repr_get_attr_obj rx504_cstack, rx504_cur, rx504_curclass, "$!cstack"
  rx504_fail1518:
    unless rx504_bstack, rx504_done1516
    pop $I19, rx504_bstack
    if_null rx504_cstack, rx504_cstack_done1521
    unless rx504_cstack, rx504_cstack_done1521
    dec $I19
    set $P11, rx504_cstack[$I19]
  rx504_cstack_done1521:
    pop rx504_rep, rx504_bstack
    pop rx504_pos, rx504_bstack
    pop $I19, rx504_bstack
    lt rx504_pos, -1, rx504_done1516
    lt rx504_pos, 0, rx504_fail1518
    eq $I19, 0, rx504_fail1518
    nqp_islist $I20, rx504_cstack
    unless $I20, rx504_jump1519
    elements $I18, rx504_bstack
    le $I18, 0, rx504_cut1520
    dec $I18
    set $I18, rx504_bstack[$I18]
  rx504_cut1520:
    assign rx504_cstack, $I18
  rx504_jump1519:
    jump $I19
  rx504_done1516:
    rx504_cur."!cursor_fail"()
    .return (rx504_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_104_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 955
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx509_tgt
    .local int rx509_pos
    .local int rx509_off
    .local int rx509_eos
    .local int rx509_rep
    .local pmc rx509_cur
    .local pmc rx509_curclass
    .local pmc rx509_bstack
    .local pmc rx509_cstack
    (rx509_cur, rx509_tgt, rx509_pos, rx509_curclass, rx509_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx509_cur
    length rx509_eos, rx509_tgt
    eq $I19, 1, rx509_restart1533
    gt rx509_pos, rx509_eos, rx509_fail1534
    repr_get_attr_int $I11, self, rx509_curclass, "$!from"
    ne $I11, -1, rxscan510_done1540
    goto rxscan510_scan1539
  rxscan510_loop1538:
    inc rx509_pos
    gt rx509_pos, rx509_eos, rx509_fail1534
    repr_bind_attr_int rx509_cur, rx509_curclass, "$!from", rx509_pos
  rxscan510_scan1539:
    nqp_rxmark rx509_bstack, rxscan510_loop1538, rx509_pos, 0
  rxscan510_done1540:
    repr_bind_attr_int rx509_cur, rx509_curclass, "$!pos", rx509_pos
    store_lex unicode:"$\x{a2}", rx509_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1541
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1542
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5007
  fallback1542:
    unless_null $P5004, vivi_5111543
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5111543:
    set $P5003, $P5004
  fallback1541:
    set $P101, $P5003
    repr_bind_attr_int rx509_cur, rx509_curclass, "$!pos", rx509_pos
    store_lex unicode:"$\x{a2}", rx509_cur
    box $P5009, "native"
    set $P102, $P5009
    nqp_rxmark rx509_bstack, rxcap512_fail1545, rx509_pos, 0
    add $I11, rx509_pos, 6
    gt $I11, rx509_eos, rx509_fail1534
    substr $S10, rx509_tgt, rx509_pos, 6
    ne $S10, ucs4:"native", rx509_fail1534
    add rx509_pos, 6
    nqp_rxpeek $I19, rx509_bstack, rxcap512_fail1545
    inc $I19
    set $I11, rx509_bstack[$I19]
    repr_bind_attr_int rx509_cur, rx509_curclass, "$!pos", rx509_pos
    $P11 = rx509_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx509_pos)
    rx509_cstack = rx509_cur."!cursor_capture"($P11, "sym")
    goto rxcap512_done1544
  rxcap512_fail1545:
    goto rx509_fail1534
  rxcap512_done1544:
    repr_bind_attr_int rx509_cur, rx509_curclass, "$!pos", rx509_pos
    $P11 = rx509_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx509_curclass, "$!pos"
    lt $I11, 0, rx509_fail1534
    nqp_rxmark rx509_bstack, rxsubrule513_pass1546, -1, 0
  rxsubrule513_pass1546:
    rx509_cstack = rx509_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx509_pos, $P11, rx509_curclass, "$!pos"
    rx509_cur."!cursor_pass"(rx509_pos, "package_declarator:sym<native>", 'backtrack'=>1)
    .return (rx509_cur)
  rx509_restart1533:
    repr_get_attr_obj rx509_cstack, rx509_cur, rx509_curclass, "$!cstack"
  rx509_fail1534:
    unless rx509_bstack, rx509_done1532
    pop $I19, rx509_bstack
    if_null rx509_cstack, rx509_cstack_done1537
    unless rx509_cstack, rx509_cstack_done1537
    dec $I19
    set $P11, rx509_cstack[$I19]
  rx509_cstack_done1537:
    pop rx509_rep, rx509_bstack
    pop rx509_pos, rx509_bstack
    pop $I19, rx509_bstack
    lt rx509_pos, -1, rx509_done1532
    lt rx509_pos, 0, rx509_fail1534
    eq $I19, 0, rx509_fail1534
    nqp_islist $I20, rx509_cstack
    unless $I20, rx509_jump1535
    elements $I18, rx509_bstack
    le $I18, 0, rx509_cut1536
    dec $I18
    set $I18, rx509_bstack[$I18]
  rx509_cut1536:
    assign rx509_cstack, $I18
  rx509_jump1535:
    jump $I19
  rx509_done1532:
    rx509_cur."!cursor_fail"()
    .return (rx509_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_105_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 960
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx514_tgt
    .local int rx514_pos
    .local int rx514_off
    .local int rx514_eos
    .local int rx514_rep
    .local pmc rx514_cur
    .local pmc rx514_curclass
    .local pmc rx514_bstack
    .local pmc rx514_cstack
    (rx514_cur, rx514_tgt, rx514_pos, rx514_curclass, rx514_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx514_cur
    length rx514_eos, rx514_tgt
    eq $I19, 1, rx514_restart1549
    gt rx514_pos, rx514_eos, rx514_fail1550
    repr_get_attr_int $I11, self, rx514_curclass, "$!from"
    ne $I11, -1, rxscan515_done1556
    goto rxscan515_scan1555
  rxscan515_loop1554:
    inc rx514_pos
    gt rx514_pos, rx514_eos, rx514_fail1550
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!from", rx514_pos
  rxscan515_scan1555:
    nqp_rxmark rx514_bstack, rxscan515_loop1554, rx514_pos, 0
  rxscan515_done1556:
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    store_lex unicode:"$\x{a2}", rx514_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1557
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1558
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5007
  fallback1558:
    unless_null $P5004, vivi_5161559
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5161559:
    set $P5003, $P5004
  fallback1557:
    set $P101, $P5003
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    store_lex unicode:"$\x{a2}", rx514_cur
    box $P5009, "stub"
    set $P102, $P5009
    nqp_rxmark rx514_bstack, rxcap517_fail1561, rx514_pos, 0
    add $I11, rx514_pos, 4
    gt $I11, rx514_eos, rx514_fail1550
    substr $S10, rx514_tgt, rx514_pos, 4
    ne $S10, ucs4:"stub", rx514_fail1550
    add rx514_pos, 4
    nqp_rxpeek $I19, rx514_bstack, rxcap517_fail1561
    inc $I19
    set $I11, rx514_bstack[$I19]
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx514_pos)
    rx514_cstack = rx514_cur."!cursor_capture"($P11, "sym")
    goto rxcap517_done1560
  rxcap517_fail1561:
    goto rx514_fail1550
  rxcap517_done1560:
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."ws"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1550
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."name"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1550
    nqp_rxmark rx514_bstack, rxsubrule519_pass1563, -1, 0
  rxsubrule519_pass1563:
    rx514_cstack = rx514_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."ws"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1550
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    add $I11, rx514_pos, 9
    gt $I11, rx514_eos, rx514_fail1550
    substr $S10, rx514_tgt, rx514_pos, 9
    ne $S10, ucs4:"metaclass", rx514_fail1550
    add rx514_pos, 9
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."ws"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1550
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."name"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1550
    nqp_rxmark rx514_bstack, rxsubrule522_pass1566, -1, 0
  rxsubrule522_pass1566:
    rx514_cstack = rx514_cur."!cursor_capture"($P11, "metaclass")
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."ws"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1550
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    add $I11, rx514_pos, 1
    gt $I11, rx514_eos, rx514_fail1550
    substr $S10, rx514_tgt, rx514_pos, 1
    ne $S10, ucs4:"{", rx514_fail1550
    add rx514_pos, 1
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."ws"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1550
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    add $I11, rx514_pos, 3
    gt $I11, rx514_eos, rx514_fail1550
    substr $S10, rx514_tgt, rx514_pos, 3
    ne $S10, ucs4:"...", rx514_fail1550
    add rx514_pos, 3
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."ws"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1550
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    add $I11, rx514_pos, 1
    gt $I11, rx514_eos, rx514_fail1550
    substr $S10, rx514_tgt, rx514_pos, 1
    ne $S10, ucs4:"}", rx514_fail1550
    add rx514_pos, 1
    repr_bind_attr_int rx514_cur, rx514_curclass, "$!pos", rx514_pos
    $P11 = rx514_cur."ws"()
    repr_get_attr_int $I11, $P11, rx514_curclass, "$!pos"
    lt $I11, 0, rx514_fail1550
    repr_get_attr_int rx514_pos, $P11, rx514_curclass, "$!pos"
    rx514_cur."!cursor_pass"(rx514_pos, "package_declarator:sym<stub>", 'backtrack'=>1)
    .return (rx514_cur)
  rx514_restart1549:
    repr_get_attr_obj rx514_cstack, rx514_cur, rx514_curclass, "$!cstack"
  rx514_fail1550:
    unless rx514_bstack, rx514_done1548
    pop $I19, rx514_bstack
    if_null rx514_cstack, rx514_cstack_done1553
    unless rx514_cstack, rx514_cstack_done1553
    dec $I19
    set $P11, rx514_cstack[$I19]
  rx514_cstack_done1553:
    pop rx514_rep, rx514_bstack
    pop rx514_pos, rx514_bstack
    pop $I19, rx514_bstack
    lt rx514_pos, -1, rx514_done1548
    lt rx514_pos, 0, rx514_fail1550
    eq $I19, 0, rx514_fail1550
    nqp_islist $I20, rx514_cstack
    unless $I20, rx514_jump1551
    elements $I18, rx514_bstack
    le $I18, 0, rx514_cut1552
    dec $I18
    set $I18, rx514_bstack[$I18]
  rx514_cut1552:
    assign rx514_cstack, $I18
  rx514_jump1551:
    jump $I19
  rx514_done1548:
    rx514_cur."!cursor_fail"()
    .return (rx514_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_106_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 968
    .param pmc _lex_param_0 
    .const 'Sub' $P5021 = 'cuid_397_1359292300.247' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_398_1359292300.247' 
    capture_lex $P5021 
    .lex "$*PACKAGE", $P101 
    .lex "$OUTER", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx527_tgt
    .local int rx527_pos
    .local int rx527_off
    .local int rx527_eos
    .local int rx527_rep
    .local pmc rx527_cur
    .local pmc rx527_curclass
    .local pmc rx527_bstack
    .local pmc rx527_cstack
    (rx527_cur, rx527_tgt, rx527_pos, rx527_curclass, rx527_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx527_cur
    length rx527_eos, rx527_tgt
    eq $I19, 1, rx527_restart1573
    gt rx527_pos, rx527_eos, rx527_fail1574
    repr_get_attr_int $I11, self, rx527_curclass, "$!from"
    ne $I11, -1, rxscan528_done1580
    goto rxscan528_scan1579
  rxscan528_loop1578:
    inc rx527_pos
    gt rx527_pos, rx527_eos, rx527_fail1574
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!from", rx527_pos
  rxscan528_scan1579:
    nqp_rxmark rx527_bstack, rxscan528_loop1578, rx527_pos, 0
  rxscan528_done1580:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    store_lex unicode:"$\x{a2}", rx527_cur
    unless_null $P101, fallback1582
    nqp_get_sc_object $P5005, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$PACKAGE"]
    unless_null $P5003, fallback1583
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5006
  fallback1583:
    unless_null $P5003, vivi_5301584
    die "Contextual $*PACKAGE not found"
    box $P5007, "Contextual $*PACKAGE not found"
    set $P5003, $P5007
  vivi_5301584:
    set $P101, $P5003
  fallback1582:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    store_lex unicode:"$\x{a2}", rx527_cur
.annotate 'line', 970
    find_dynamic_lex $P5008, "$*W"
    unless_null $P5008, fallback1586
    nqp_get_sc_object $P5011, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$W"]
    unless_null $P5009, fallback1587
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5012
  fallback1587:
    unless_null $P5009, vivi_5321588
    die "Contextual $*W not found"
    box $P5013, "Contextual $*W not found"
    set $P5009, $P5013
  vivi_5321588:
    set $P5008, $P5009
  fallback1586:
    $P5014 = $P5008."cur_lexpad"()
    set $P102, $P5014
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."name"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    nqp_rxmark rx527_bstack, rxsubrule534_pass1590, -1, 0
  rxsubrule534_pass1590:
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxmark rx527_bstack, rxquantr538_done1595, rx527_pos, 0
  rxquantr538_loop1594:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    store_lex unicode:"$\x{a2}", rx527_cur
    $P5015 = $P103."MATCH"()
    set $P104, $P5015
    .const 'Sub' $P5016 = 'cuid_397_1359292300.247' 
    capture_lex $P5016
    $P5017 = $P5016()
    unless $P5017, rx527_fail1574
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    add $I11, rx527_pos, 1
    gt $I11, rx527_eos, rx527_fail1574
    substr $S10, rx527_tgt, rx527_pos, 1
    ne $S10, ucs4:"[", rx527_fail1574
    add rx527_pos, 1
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."role_params"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    nqp_rxmark rx527_bstack, rxsubrule543_pass1602, -1, 0
  rxsubrule543_pass1602:
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "role_params")
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
  alt544_01604:
    nqp_rxmark rx527_bstack, alt544_11605, rx527_pos, 0
    add $I11, rx527_pos, 1
    gt $I11, rx527_eos, rx527_fail1574
    substr $S10, rx527_tgt, rx527_pos, 1
    ne $S10, ucs4:"]", rx527_fail1574
    add rx527_pos, 1
    goto alt544_end1603
  alt544_11605:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."FAILGOAL"("']'")
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    goto rxsubrule545_pass1606
  rxsubrule545_back1607:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
  rxsubrule545_pass1606:
    rx527_cstack = rx527_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule545_back1607
    push rx527_bstack, $I11
    push rx527_bstack, 0
    push rx527_bstack, rx527_pos
    elements $I11, rx527_cstack
    push rx527_bstack, $I11
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
  alt544_end1603:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxpeek $I19, rx527_bstack, rxquantr538_done1595
    inc $I19
    inc $I19
    set rx527_rep, rx527_bstack[$I19]
    nqp_rxcommit rx527_bstack, rxquantr538_done1595
    inc rx527_rep
  rxquantr538_done1595:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxmark rx527_bstack, rxquantr548_done1611, rx527_pos, 0
  rxquantr548_loop1610:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    add $I11, rx527_pos, 2
    gt $I11, rx527_eos, rx527_fail1574
    substr $S10, rx527_tgt, rx527_pos, 2
    ne $S10, ucs4:"is", rx527_fail1574
    add rx527_pos, 2
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    add $I11, rx527_pos, 5
    gt $I11, rx527_eos, rx527_fail1574
    substr $S10, rx527_tgt, rx527_pos, 5
    ne $S10, ucs4:"repr(", rx527_fail1574
    add rx527_pos, 5
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    nqp_rxmark rx527_bstack, rxsubrule552_pass1615, -1, 0
  rxsubrule552_pass1615:
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "repr")
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    add $I11, rx527_pos, 1
    gt $I11, rx527_eos, rx527_fail1574
    substr $S10, rx527_tgt, rx527_pos, 1
    ne $S10, ucs4:")", rx527_fail1574
    add rx527_pos, 1
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxpeek $I19, rx527_bstack, rxquantr548_done1611
    inc $I19
    inc $I19
    set rx527_rep, rx527_bstack[$I19]
    nqp_rxcommit rx527_bstack, rxquantr548_done1611
    inc rx527_rep
  rxquantr548_done1611:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    store_lex unicode:"$\x{a2}", rx527_cur
    $P5018 = $P103."MATCH"()
    set $P104, $P5018
    .const 'Sub' $P5019 = 'cuid_398_1359292300.247' 
    capture_lex $P5019
    $P5020 = $P5019()
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxmark rx527_bstack, rxquantr577_done1705, rx527_pos, 0
  rxquantr577_loop1704:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxmark rx527_bstack, rxcap579_fail1708, rx527_pos, 0
    add $I11, rx527_pos, 9
    gt $I11, rx527_eos, rx527_fail1574
    substr $S10, rx527_tgt, rx527_pos, 9
    ne $S10, ucs4:"is export", rx527_fail1574
    add rx527_pos, 9
    nqp_rxpeek $I19, rx527_bstack, rxcap579_fail1708
    inc $I19
    set $I11, rx527_bstack[$I19]
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx527_pos)
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "export")
    goto rxcap579_done1707
  rxcap579_fail1708:
    goto rx527_fail1574
  rxcap579_done1707:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxpeek $I19, rx527_bstack, rxquantr577_done1705
    inc $I19
    inc $I19
    set rx527_rep, rx527_bstack[$I19]
    nqp_rxcommit rx527_bstack, rxquantr577_done1705
    inc rx527_rep
  rxquantr577_done1705:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxmark rx527_bstack, rxquantr582_done1712, rx527_pos, 0
  rxquantr582_loop1711:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    add $I11, rx527_pos, 2
    gt $I11, rx527_eos, rx527_fail1574
    substr $S10, rx527_tgt, rx527_pos, 2
    ne $S10, ucs4:"is", rx527_fail1574
    add rx527_pos, 2
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."name"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    nqp_rxmark rx527_bstack, rxsubrule585_pass1715, -1, 0
  rxsubrule585_pass1715:
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "parent")
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxpeek $I19, rx527_bstack, rxquantr582_done1712
    inc $I19
    inc $I19
    set rx527_rep, rx527_bstack[$I19]
    nqp_rxcommit rx527_bstack, rxquantr582_done1712
    inc rx527_rep
  rxquantr582_done1712:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxmark rx527_bstack, rxquantr588_done1719, rx527_pos, 0
  rxquantr588_loop1718:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    add $I11, rx527_pos, 4
    gt $I11, rx527_eos, rx527_fail1574
    substr $S10, rx527_tgt, rx527_pos, 4
    ne $S10, ucs4:"does", rx527_fail1574
    add rx527_pos, 4
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."name"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    nqp_rxmark rx527_bstack, rxsubrule591_pass1722, -1, 0
  rxsubrule591_pass1722:
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "role")
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    nqp_rxpeek $I19, rx527_bstack, rxquantr588_done1719
    inc $I19
    inc $I19
    set rx527_rep, rx527_bstack[$I19]
    nqp_rxcommit rx527_bstack, rxquantr588_done1719
    inc rx527_rep
    nqp_rxmark rx527_bstack, rxquantr588_done1719, rx527_pos, rx527_rep
    goto rxquantr588_loop1718
  rxquantr588_done1719:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
  alt594_01726:
    nqp_rxmark rx527_bstack, alt594_11741, rx527_pos, 0
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    add $I11, rx527_pos, 1
    gt $I11, rx527_eos, rx527_fail1574
    substr $S10, rx527_tgt, rx527_pos, 1
    ne $S10, ucs4:";", rx527_fail1574
    add rx527_pos, 1
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    nqp_rxmark rx527_bstack, rxsubrule597_pass1729, -1, 0
  rxsubrule597_pass1729:
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
  alt599_01732:
    nqp_rxmark rx527_bstack, alt599_11736, rx527_pos, 0
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    lt rx527_pos, rx527_eos, rx527_fail1574
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    goto alt599_end1731
  alt599_11736:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
  alt599_end1731:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    goto alt594_end1725
  alt594_11741:
    nqp_rxmark rx527_bstack, alt594_21746, rx527_pos, 0
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    ge rx527_pos, rx527_eos, rx527_fail1574
    substr $S11, rx527_tgt, rx527_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx527_fail1574
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    nqp_rxmark rx527_bstack, rxsubrule609_pass1744, -1, 0
  rxsubrule609_pass1744:
    rx527_cstack = rx527_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    goto alt594_end1725
  alt594_21746:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."panic"("Malformed package declaration")
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
  alt594_end1725:
    repr_bind_attr_int rx527_cur, rx527_curclass, "$!pos", rx527_pos
    $P11 = rx527_cur."ws"()
    repr_get_attr_int $I11, $P11, rx527_curclass, "$!pos"
    lt $I11, 0, rx527_fail1574
    repr_get_attr_int rx527_pos, $P11, rx527_curclass, "$!pos"
    rx527_cur."!cursor_pass"(rx527_pos, "package_def", 'backtrack'=>1)
    .return (rx527_cur)
  rx527_restart1573:
    repr_get_attr_obj rx527_cstack, rx527_cur, rx527_curclass, "$!cstack"
  rx527_fail1574:
    unless rx527_bstack, rx527_done1572
    pop $I19, rx527_bstack
    if_null rx527_cstack, rx527_cstack_done1577
    unless rx527_cstack, rx527_cstack_done1577
    dec $I19
    set $P11, rx527_cstack[$I19]
  rx527_cstack_done1577:
    pop rx527_rep, rx527_bstack
    pop rx527_pos, rx527_bstack
    pop $I19, rx527_bstack
    lt rx527_pos, -1, rx527_done1572
    lt rx527_pos, 0, rx527_fail1574
    eq $I19, 0, rx527_fail1574
    nqp_islist $I20, rx527_cstack
    unless $I20, rx527_jump1575
    elements $I18, rx527_bstack
    le $I18, 0, rx527_cut1576
    dec $I18
    set $I18, rx527_bstack[$I18]
  rx527_cut1576:
    assign rx527_cstack, $I18
  rx527_jump1575:
    jump $I19
  rx527_done1572:
    rx527_cur."!cursor_fail"()
    .return (rx527_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_397_1359292300.247") :anon :lex :outer("cuid_106_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 974

    find_dynamic_lex $P5001, "$*PKGDECL"
    unless_null $P5001, fallback1597
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$PKGDECL"]
    unless_null $P5002, fallback1598
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5005
  fallback1598:
    unless_null $P5002, vivi_5401599
    die "Contextual $*PKGDECL not found"
    box $P5006, "Contextual $*PKGDECL not found"
    set $P5002, $P5006
  vivi_5401599:
    set $P5001, $P5002
  fallback1597:
    set $S5001, $P5001
    iseq $I5001, $S5001, "role"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_398_1359292300.247") :anon :lex :outer("cuid_106_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 977
    .lex "%args", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback1619
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5004
  fallback1619:
    set $P5002, $P5003["name"]
    unless_null $P5002, fallback1620
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5005
  fallback1620:
    set $S5001, $P5002
    box $P5006, $S5001
    set $P101["name"], $P5006
    find_lex $P5008, "$/"
    unless_null $P5008, fallback1623
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5009
  fallback1623:
    set $P5007, $P5008["repr"]
    unless_null $P5007, fallback1624
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5010
  fallback1624:
    unless $P5007 goto if556_end1622 
.annotate 'line', 982
    find_lex $P5016, "$/"
    unless_null $P5016, fallback1625
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5016, $P5017
  fallback1625:
    set $P5015, $P5016["repr"]
    unless_null $P5015, fallback1626
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5015, $P5018
  fallback1626:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback1627
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5014, $P5019
  fallback1627:
    set $P5013, $P5014["quote_delimited"]
    unless_null $P5013, fallback1628
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5013, $P5020
  fallback1628:
    set $P5012, $P5013["quote_atom"]
    unless_null $P5012, fallback1629
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5012, $P5021
  fallback1629:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback1630
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5022
  fallback1630:
    set $S5002, $P5011
    box $P5023, $S5002
    set $P101["repr"], $P5023
  if556_end1622:
.annotate 'line', 985
    find_dynamic_lex $P5024, "$*W"
    unless_null $P5024, fallback1631
    nqp_get_sc_object $P5027, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["$W"]
    unless_null $P5025, fallback1632
    nqp_get_sc_object $P5028, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5025, $P5028
  fallback1632:
    unless_null $P5025, vivi_5571633
    die "Contextual $*W not found"
    box $P5029, "Contextual $*W not found"
    set $P5025, $P5029
  vivi_5571633:
    set $P5024, $P5025
  fallback1631:
    find_dynamic_lex $P5031, "%*HOW"
    unless_null $P5031, fallback1634
    nqp_get_sc_object $P5034, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%HOW"]
    unless_null $P5032, fallback1635
    nqp_get_sc_object $P5036, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%HOW"], $P5037
    set $P5032, $P5037
  fallback1635:
    unless_null $P5032, vivi_5581636
    die "Contextual %*HOW not found"
    box $P5038, "Contextual %*HOW not found"
    set $P5032, $P5038
  vivi_5581636:
    set $P5031, $P5032
  fallback1634:
    find_dynamic_lex $P5039, "$*PKGDECL"
    unless_null $P5039, fallback1637
    nqp_get_sc_object $P5042, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5041, $P5042
    set $P5040, $P5041["$PKGDECL"]
    unless_null $P5040, fallback1638
    nqp_get_sc_object $P5043, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5040, $P5043
  fallback1638:
    unless_null $P5040, vivi_5591639
    die "Contextual $*PKGDECL not found"
    box $P5044, "Contextual $*PKGDECL not found"
    set $P5040, $P5044
  vivi_5591639:
    set $P5039, $P5040
  fallback1637:
    set $S5003, $P5039
    set $P5030, $P5031[$S5003]
    unless_null $P5030, fallback1640
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5030, $P5045
  fallback1640:
    $P5046 = $P5024."pkg_create_mo"($P5030, $P101 :flat :named)
    store_dynamic_lex "$*PACKAGE", $P5046
    find_dynamic_lex $P5047, "$*SCOPE"
    unless_null $P5047, fallback1645
    nqp_get_sc_object $P5050, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$SCOPE"]
    unless_null $P5048, fallback1646
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5048, $P5051
  fallback1646:
    unless_null $P5048, vivi_5621647
    die "Contextual $*SCOPE not found"
    box $P5052, "Contextual $*SCOPE not found"
    set $P5048, $P5052
  vivi_5621647:
    set $P5047, $P5048
  fallback1645:
    set $S5004, $P5047
    iseq $I5001, $S5004, "our"
    set $I5003, $I5001
    if $I5001 goto unless561_end1644 
    find_dynamic_lex $P5053, "$*SCOPE"
    unless_null $P5053, fallback1648
    nqp_get_sc_object $P5056, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$SCOPE"]
    unless_null $P5054, fallback1649
    nqp_get_sc_object $P5057, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5054, $P5057
  fallback1649:
    unless_null $P5054, vivi_5631650
    die "Contextual $*SCOPE not found"
    box $P5058, "Contextual $*SCOPE not found"
    set $P5054, $P5058
  vivi_5631650:
    set $P5053, $P5054
  fallback1648:
    set $S5005, $P5053
    iseq $I5002, $S5005, ""
    set $I5003, $I5002
  unless561_end1644:
    unless $I5003 goto if560_else1641 
.annotate 'line', 988
.annotate 'line', 989
    find_dynamic_lex $P5059, "$*W"
    unless_null $P5059, fallback1651
    nqp_get_sc_object $P5062, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$W"]
    unless_null $P5060, fallback1652
    nqp_get_sc_object $P5063, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5060, $P5063
  fallback1652:
    unless_null $P5060, vivi_5641653
    die "Contextual $*W not found"
    box $P5064, "Contextual $*W not found"
    set $P5060, $P5064
  vivi_5641653:
    set $P5059, $P5060
  fallback1651:
    find_dynamic_lex $P5065, "$*OUTERPACKAGE"
    unless_null $P5065, fallback1654
    nqp_get_sc_object $P5068, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$OUTERPACKAGE"]
    unless_null $P5066, fallback1655
    nqp_get_sc_object $P5069, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5066, $P5069
  fallback1655:
    unless_null $P5066, vivi_5651656
    die "Contextual $*OUTERPACKAGE not found"
    box $P5070, "Contextual $*OUTERPACKAGE not found"
    set $P5066, $P5070
  vivi_5651656:
    set $P5065, $P5066
  fallback1654:
    find_lex $P5073, "$/"
    unless_null $P5073, fallback1657
    nqp_get_sc_object $P5074, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5073, $P5074
  fallback1657:
    set $P5072, $P5073["name"]
    unless_null $P5072, fallback1658
    nqp_get_sc_object $P5075, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5072, $P5075
  fallback1658:
    set $P5071, $P5072["identifier"]
    unless_null $P5071, fallback1659
    nqp_get_sc_object $P5076, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5071, $P5076
  fallback1659:
    find_dynamic_lex $P5077, "$*PACKAGE"
    unless_null $P5077, fallback1660
    nqp_get_sc_object $P5080, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5079, $P5080
    set $P5078, $P5079["$PACKAGE"]
    unless_null $P5078, fallback1661
    nqp_get_sc_object $P5081, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5078, $P5081
  fallback1661:
    unless_null $P5078, vivi_5661662
    die "Contextual $*PACKAGE not found"
    box $P5082, "Contextual $*PACKAGE not found"
    set $P5078, $P5082
  vivi_5661662:
    set $P5077, $P5078
  fallback1660:
    $P5059."install_package_symbol"($P5065, $P5071, $P5077)
    find_lex $P5085, "$/"
    unless_null $P5085, fallback1665
    nqp_get_sc_object $P5086, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5085, $P5086
  fallback1665:
    set $P5084, $P5085["name"]
    unless_null $P5084, fallback1666
    nqp_get_sc_object $P5087, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5084, $P5087
  fallback1666:
    set $P5083, $P5084["identifier"]
    unless_null $P5083, fallback1667
    nqp_get_sc_object $P5088, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5083, $P5088
  fallback1667:
    set $N5001, $P5083
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5112, $I5004
    set $P5111, $P5112
    unless $I5004 goto if567_end1664 
.annotate 'line', 990
.annotate 'line', 991
    find_dynamic_lex $P5089, "$*W"
    unless_null $P5089, fallback1668
    nqp_get_sc_object $P5092, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5091, $P5092
    set $P5090, $P5091["$W"]
    unless_null $P5090, fallback1669
    nqp_get_sc_object $P5093, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5090, $P5093
  fallback1669:
    unless_null $P5090, vivi_5681670
    die "Contextual $*W not found"
    box $P5094, "Contextual $*W not found"
    set $P5090, $P5094
  vivi_5681670:
    set $P5089, $P5090
  fallback1668:
    find_lex $P5095, "$OUTER"
    find_lex $P5099, "$/"
    unless_null $P5099, fallback1671
    nqp_get_sc_object $P5100, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5099, $P5100
  fallback1671:
    set $P5098, $P5099["name"]
    unless_null $P5098, fallback1672
    nqp_get_sc_object $P5101, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5098, $P5101
  fallback1672:
    set $P5097, $P5098["identifier"]
    unless_null $P5097, fallback1673
    nqp_get_sc_object $P5102, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5097, $P5102
  fallback1673:
    set $P5096, $P5097[0]
    unless_null $P5096, fallback1674
    nqp_get_sc_object $P5103, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5096, $P5103
  fallback1674:
    find_dynamic_lex $P5104, "$*PACKAGE"
    unless_null $P5104, fallback1675
    nqp_get_sc_object $P5107, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$PACKAGE"]
    unless_null $P5105, fallback1676
    nqp_get_sc_object $P5108, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5105, $P5108
  fallback1676:
    unless_null $P5105, vivi_5691677
    die "Contextual $*PACKAGE not found"
    box $P5109, "Contextual $*PACKAGE not found"
    set $P5105, $P5109
  vivi_5691677:
    set $P5104, $P5105
  fallback1675:
    $P5110 = $P5089."install_lexical_symbol"($P5095, $P5096, $P5104)
    set $P5111, $P5110
  if567_end1664:
    set $P5163, $P5111
    goto if560_end1642
  if560_else1641:
    find_dynamic_lex $P5113, "$*SCOPE"
    unless_null $P5113, fallback1680
    nqp_get_sc_object $P5116, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5115, $P5116
    set $P5114, $P5115["$SCOPE"]
    unless_null $P5114, fallback1681
    nqp_get_sc_object $P5117, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5114, $P5117
  fallback1681:
    unless_null $P5114, vivi_5711682
    die "Contextual $*SCOPE not found"
    box $P5118, "Contextual $*SCOPE not found"
    set $P5114, $P5118
  vivi_5711682:
    set $P5113, $P5114
  fallback1680:
    set $S5006, $P5113
    iseq $I5005, $S5006, "my"
    unless $I5005 goto if570_else1678 
.annotate 'line', 994
    find_lex $P5121, "$/"
    unless_null $P5121, fallback1685
    nqp_get_sc_object $P5122, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5121, $P5122
  fallback1685:
    set $P5120, $P5121["name"]
    unless_null $P5120, fallback1686
    nqp_get_sc_object $P5123, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5120, $P5123
  fallback1686:
    set $P5119, $P5120["identifier"]
    unless_null $P5119, fallback1687
    nqp_get_sc_object $P5124, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5119, $P5124
  fallback1687:
    set $N5003, $P5119
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    unless $I5006 goto if572_end1684 
.annotate 'line', 995
.annotate 'line', 996
    find_lex $P5126, "$/"
    unless_null $P5126, fallback1688
    nqp_get_sc_object $P5127, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5126, $P5127
  fallback1688:
    set $P5125, $P5126["name"]
    unless_null $P5125, fallback1689
    nqp_get_sc_object $P5128, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5125, $P5128
  fallback1689:
    $P5129 = $P5125."CURSOR"()
    $P5130 = $P5129."panic"("A my scoped package cannot have a multi-part name yet")
  if572_end1684:
.annotate 'line', 998
    find_dynamic_lex $P5131, "$*W"
    unless_null $P5131, fallback1690
    nqp_get_sc_object $P5134, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5133, $P5134
    set $P5132, $P5133["$W"]
    unless_null $P5132, fallback1691
    nqp_get_sc_object $P5135, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5132, $P5135
  fallback1691:
    unless_null $P5132, vivi_5731692
    die "Contextual $*W not found"
    box $P5136, "Contextual $*W not found"
    set $P5132, $P5136
  vivi_5731692:
    set $P5131, $P5132
  fallback1690:
    find_lex $P5137, "$OUTER"
    find_lex $P5141, "$/"
    unless_null $P5141, fallback1693
    nqp_get_sc_object $P5142, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5141, $P5142
  fallback1693:
    set $P5140, $P5141["name"]
    unless_null $P5140, fallback1694
    nqp_get_sc_object $P5143, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5140, $P5143
  fallback1694:
    set $P5139, $P5140["identifier"]
    unless_null $P5139, fallback1695
    nqp_get_sc_object $P5144, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5139, $P5144
  fallback1695:
    set $P5138, $P5139[0]
    unless_null $P5138, fallback1696
    nqp_get_sc_object $P5145, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5138, $P5145
  fallback1696:
    find_dynamic_lex $P5146, "$*PACKAGE"
    unless_null $P5146, fallback1697
    nqp_get_sc_object $P5149, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5148, $P5149
    set $P5147, $P5148["$PACKAGE"]
    unless_null $P5147, fallback1698
    nqp_get_sc_object $P5150, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5147, $P5150
  fallback1698:
    unless_null $P5147, vivi_5741699
    die "Contextual $*PACKAGE not found"
    box $P5151, "Contextual $*PACKAGE not found"
    set $P5147, $P5151
  vivi_5741699:
    set $P5146, $P5147
  fallback1697:
    $P5152 = $P5131."install_lexical_symbol"($P5137, $P5138, $P5146)
    set $P5162, $P5152
    goto if570_end1679
  if570_else1678:
.annotate 'line', 1000
.annotate 'line', 1001
    find_lex $P5153, "$/"
    $P5154 = $P5153."CURSOR"()
    find_dynamic_lex $P5155, "$*SCOPE"
    unless_null $P5155, fallback1700
    nqp_get_sc_object $P5158, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5157, $P5158
    set $P5156, $P5157["$SCOPE"]
    unless_null $P5156, fallback1701
    nqp_get_sc_object $P5159, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5156, $P5159
  fallback1701:
    unless_null $P5156, vivi_5751702
    die "Contextual $*SCOPE not found"
    box $P5160, "Contextual $*SCOPE not found"
    set $P5156, $P5160
  vivi_5751702:
    set $P5155, $P5156
  fallback1700:
    set $S5008, $P5155
    concat $S5007, $S5008, " scoped packages are not supported"
    $P5161 = $P5154."panic"($S5007)
    set $P5162, $P5161
  if570_end1679:
    set $P5163, $P5162
  if560_end1642:
    .return ($P5163) 
.end
.HLL "nqp"
.namespace []
.sub "role_params" :subid("cuid_107_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1015
    .param pmc _lex_param_0 
    .lex "$*SCOPE", $P101 
    .lex "$*IN_DECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx615_tgt
    .local int rx615_pos
    .local int rx615_off
    .local int rx615_eos
    .local int rx615_rep
    .local pmc rx615_cur
    .local pmc rx615_curclass
    .local pmc rx615_bstack
    .local pmc rx615_cstack
    (rx615_cur, rx615_tgt, rx615_pos, rx615_curclass, rx615_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx615_cur
    length rx615_eos, rx615_tgt
    eq $I19, 1, rx615_restart1753
    gt rx615_pos, rx615_eos, rx615_fail1754
    repr_get_attr_int $I11, self, rx615_curclass, "$!from"
    ne $I11, -1, rxscan616_done1760
    goto rxscan616_scan1759
  rxscan616_loop1758:
    inc rx615_pos
    gt rx615_pos, rx615_eos, rx615_fail1754
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!from", rx615_pos
  rxscan616_scan1759:
    nqp_rxmark rx615_bstack, rxscan616_loop1758, rx615_pos, 0
  rxscan616_done1760:
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1754
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    store_lex unicode:"$\x{a2}", rx615_cur
    box $P5003, "my"
    set $P101, $P5003
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1754
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    store_lex unicode:"$\x{a2}", rx615_cur
    box $P5004, "variable"
    set $P102, $P5004
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1754
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    nqp_rxmark rx615_bstack, rxquantr620_done1765, -1, 0
  rxquantr620_loop1764:
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1754
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."variable"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1754
    nqp_rxmark rx615_bstack, rxsubrule622_pass1767, -1, 0
  rxsubrule622_pass1767:
    rx615_cstack = rx615_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1754
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    nqp_rxpeek $I19, rx615_bstack, rxquantr620_done1765
    inc $I19
    inc $I19
    set rx615_rep, rx615_bstack[$I19]
    nqp_rxcommit rx615_bstack, rxquantr620_done1765
    inc rx615_rep
    nqp_rxmark rx615_bstack, rxquantr620_done1765, rx615_pos, rx615_rep
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1754
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    add $I11, rx615_pos, 1
    gt $I11, rx615_eos, rx615_fail1754
    substr $S10, rx615_tgt, rx615_pos, 1
    ne $S10, ucs4:",", rx615_fail1754
    add rx615_pos, 1
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1754
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    goto rxquantr620_loop1764
  rxquantr620_done1765:
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."ws"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1754
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    rx615_cur."!cursor_pass"(rx615_pos, "role_params", 'backtrack'=>1)
    .return (rx615_cur)
  rx615_restart1753:
    repr_get_attr_obj rx615_cstack, rx615_cur, rx615_curclass, "$!cstack"
  rx615_fail1754:
    unless rx615_bstack, rx615_done1752
    pop $I19, rx615_bstack
    if_null rx615_cstack, rx615_cstack_done1757
    unless rx615_cstack, rx615_cstack_done1757
    dec $I19
    set $P11, rx615_cstack[$I19]
  rx615_cstack_done1757:
    pop rx615_rep, rx615_bstack
    pop rx615_pos, rx615_bstack
    pop $I19, rx615_bstack
    lt rx615_pos, -1, rx615_done1752
    lt rx615_pos, 0, rx615_fail1754
    eq $I19, 0, rx615_fail1754
    nqp_islist $I20, rx615_cstack
    unless $I20, rx615_jump1755
    elements $I18, rx615_bstack
    le $I18, 0, rx615_cut1756
    dec $I18
    set $I18, rx615_bstack[$I18]
  rx615_cut1756:
    assign rx615_cstack, $I18
  rx615_jump1755:
    jump $I19
  rx615_done1752:
    rx615_cur."!cursor_fail"()
    .return (rx615_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator" :subid("cuid_108_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1021
    .param pmc self 
    $P5001 = self."!protoregex"("scope_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_109_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1022
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx627_tgt
    .local int rx627_pos
    .local int rx627_off
    .local int rx627_eos
    .local int rx627_rep
    .local pmc rx627_cur
    .local pmc rx627_curclass
    .local pmc rx627_bstack
    .local pmc rx627_cstack
    (rx627_cur, rx627_tgt, rx627_pos, rx627_curclass, rx627_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx627_cur
    length rx627_eos, rx627_tgt
    eq $I19, 1, rx627_restart1774
    gt rx627_pos, rx627_eos, rx627_fail1775
    repr_get_attr_int $I11, self, rx627_curclass, "$!from"
    ne $I11, -1, rxscan628_done1781
    goto rxscan628_scan1780
  rxscan628_loop1779:
    inc rx627_pos
    gt rx627_pos, rx627_eos, rx627_fail1775
    repr_bind_attr_int rx627_cur, rx627_curclass, "$!from", rx627_pos
  rxscan628_scan1780:
    nqp_rxmark rx627_bstack, rxscan628_loop1779, rx627_pos, 0
  rxscan628_done1781:
    nqp_rxmark rx627_bstack, rxcap629_fail1783, rx627_pos, 0
    add $I11, rx627_pos, 2
    gt $I11, rx627_eos, rx627_fail1775
    substr $S10, rx627_tgt, rx627_pos, 2
    ne $S10, ucs4:"my", rx627_fail1775
    add rx627_pos, 2
    nqp_rxpeek $I19, rx627_bstack, rxcap629_fail1783
    inc $I19
    set $I11, rx627_bstack[$I19]
    repr_bind_attr_int rx627_cur, rx627_curclass, "$!pos", rx627_pos
    $P11 = rx627_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx627_pos)
    rx627_cstack = rx627_cur."!cursor_capture"($P11, "sym")
    goto rxcap629_done1782
  rxcap629_fail1783:
    goto rx627_fail1775
  rxcap629_done1782:
    repr_bind_attr_int rx627_cur, rx627_curclass, "$!pos", rx627_pos
    $P11 = rx627_cur."scoped"("my")
    repr_get_attr_int $I11, $P11, rx627_curclass, "$!pos"
    lt $I11, 0, rx627_fail1775
    nqp_rxmark rx627_bstack, rxsubrule630_pass1784, -1, 0
  rxsubrule630_pass1784:
    rx627_cstack = rx627_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx627_pos, $P11, rx627_curclass, "$!pos"
    rx627_cur."!cursor_pass"(rx627_pos, "scope_declarator:sym<my>", 'backtrack'=>1)
    .return (rx627_cur)
  rx627_restart1774:
    repr_get_attr_obj rx627_cstack, rx627_cur, rx627_curclass, "$!cstack"
  rx627_fail1775:
    unless rx627_bstack, rx627_done1773
    pop $I19, rx627_bstack
    if_null rx627_cstack, rx627_cstack_done1778
    unless rx627_cstack, rx627_cstack_done1778
    dec $I19
    set $P11, rx627_cstack[$I19]
  rx627_cstack_done1778:
    pop rx627_rep, rx627_bstack
    pop rx627_pos, rx627_bstack
    pop $I19, rx627_bstack
    lt rx627_pos, -1, rx627_done1773
    lt rx627_pos, 0, rx627_fail1775
    eq $I19, 0, rx627_fail1775
    nqp_islist $I20, rx627_cstack
    unless $I20, rx627_jump1776
    elements $I18, rx627_bstack
    le $I18, 0, rx627_cut1777
    dec $I18
    set $I18, rx627_bstack[$I18]
  rx627_cut1777:
    assign rx627_cstack, $I18
  rx627_jump1776:
    jump $I19
  rx627_done1773:
    rx627_cur."!cursor_fail"()
    .return (rx627_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_110_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1023
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx631_tgt
    .local int rx631_pos
    .local int rx631_off
    .local int rx631_eos
    .local int rx631_rep
    .local pmc rx631_cur
    .local pmc rx631_curclass
    .local pmc rx631_bstack
    .local pmc rx631_cstack
    (rx631_cur, rx631_tgt, rx631_pos, rx631_curclass, rx631_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx631_cur
    length rx631_eos, rx631_tgt
    eq $I19, 1, rx631_restart1787
    gt rx631_pos, rx631_eos, rx631_fail1788
    repr_get_attr_int $I11, self, rx631_curclass, "$!from"
    ne $I11, -1, rxscan632_done1794
    goto rxscan632_scan1793
  rxscan632_loop1792:
    inc rx631_pos
    gt rx631_pos, rx631_eos, rx631_fail1788
    repr_bind_attr_int rx631_cur, rx631_curclass, "$!from", rx631_pos
  rxscan632_scan1793:
    nqp_rxmark rx631_bstack, rxscan632_loop1792, rx631_pos, 0
  rxscan632_done1794:
    nqp_rxmark rx631_bstack, rxcap633_fail1796, rx631_pos, 0
    add $I11, rx631_pos, 3
    gt $I11, rx631_eos, rx631_fail1788
    substr $S10, rx631_tgt, rx631_pos, 3
    ne $S10, ucs4:"our", rx631_fail1788
    add rx631_pos, 3
    nqp_rxpeek $I19, rx631_bstack, rxcap633_fail1796
    inc $I19
    set $I11, rx631_bstack[$I19]
    repr_bind_attr_int rx631_cur, rx631_curclass, "$!pos", rx631_pos
    $P11 = rx631_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx631_pos)
    rx631_cstack = rx631_cur."!cursor_capture"($P11, "sym")
    goto rxcap633_done1795
  rxcap633_fail1796:
    goto rx631_fail1788
  rxcap633_done1795:
    repr_bind_attr_int rx631_cur, rx631_curclass, "$!pos", rx631_pos
    $P11 = rx631_cur."scoped"("our")
    repr_get_attr_int $I11, $P11, rx631_curclass, "$!pos"
    lt $I11, 0, rx631_fail1788
    nqp_rxmark rx631_bstack, rxsubrule634_pass1797, -1, 0
  rxsubrule634_pass1797:
    rx631_cstack = rx631_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx631_pos, $P11, rx631_curclass, "$!pos"
    rx631_cur."!cursor_pass"(rx631_pos, "scope_declarator:sym<our>", 'backtrack'=>1)
    .return (rx631_cur)
  rx631_restart1787:
    repr_get_attr_obj rx631_cstack, rx631_cur, rx631_curclass, "$!cstack"
  rx631_fail1788:
    unless rx631_bstack, rx631_done1786
    pop $I19, rx631_bstack
    if_null rx631_cstack, rx631_cstack_done1791
    unless rx631_cstack, rx631_cstack_done1791
    dec $I19
    set $P11, rx631_cstack[$I19]
  rx631_cstack_done1791:
    pop rx631_rep, rx631_bstack
    pop rx631_pos, rx631_bstack
    pop $I19, rx631_bstack
    lt rx631_pos, -1, rx631_done1786
    lt rx631_pos, 0, rx631_fail1788
    eq $I19, 0, rx631_fail1788
    nqp_islist $I20, rx631_cstack
    unless $I20, rx631_jump1789
    elements $I18, rx631_bstack
    le $I18, 0, rx631_cut1790
    dec $I18
    set $I18, rx631_bstack[$I18]
  rx631_cut1790:
    assign rx631_cstack, $I18
  rx631_jump1789:
    jump $I19
  rx631_done1786:
    rx631_cur."!cursor_fail"()
    .return (rx631_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_111_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1024
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx635_tgt
    .local int rx635_pos
    .local int rx635_off
    .local int rx635_eos
    .local int rx635_rep
    .local pmc rx635_cur
    .local pmc rx635_curclass
    .local pmc rx635_bstack
    .local pmc rx635_cstack
    (rx635_cur, rx635_tgt, rx635_pos, rx635_curclass, rx635_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx635_cur
    length rx635_eos, rx635_tgt
    eq $I19, 1, rx635_restart1800
    gt rx635_pos, rx635_eos, rx635_fail1801
    repr_get_attr_int $I11, self, rx635_curclass, "$!from"
    ne $I11, -1, rxscan636_done1807
    goto rxscan636_scan1806
  rxscan636_loop1805:
    inc rx635_pos
    gt rx635_pos, rx635_eos, rx635_fail1801
    repr_bind_attr_int rx635_cur, rx635_curclass, "$!from", rx635_pos
  rxscan636_scan1806:
    nqp_rxmark rx635_bstack, rxscan636_loop1805, rx635_pos, 0
  rxscan636_done1807:
    nqp_rxmark rx635_bstack, rxcap637_fail1809, rx635_pos, 0
    add $I11, rx635_pos, 3
    gt $I11, rx635_eos, rx635_fail1801
    substr $S10, rx635_tgt, rx635_pos, 3
    ne $S10, ucs4:"has", rx635_fail1801
    add rx635_pos, 3
    nqp_rxpeek $I19, rx635_bstack, rxcap637_fail1809
    inc $I19
    set $I11, rx635_bstack[$I19]
    repr_bind_attr_int rx635_cur, rx635_curclass, "$!pos", rx635_pos
    $P11 = rx635_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx635_pos)
    rx635_cstack = rx635_cur."!cursor_capture"($P11, "sym")
    goto rxcap637_done1808
  rxcap637_fail1809:
    goto rx635_fail1801
  rxcap637_done1808:
    repr_bind_attr_int rx635_cur, rx635_curclass, "$!pos", rx635_pos
    $P11 = rx635_cur."scoped"("has")
    repr_get_attr_int $I11, $P11, rx635_curclass, "$!pos"
    lt $I11, 0, rx635_fail1801
    nqp_rxmark rx635_bstack, rxsubrule638_pass1810, -1, 0
  rxsubrule638_pass1810:
    rx635_cstack = rx635_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx635_pos, $P11, rx635_curclass, "$!pos"
    rx635_cur."!cursor_pass"(rx635_pos, "scope_declarator:sym<has>", 'backtrack'=>1)
    .return (rx635_cur)
  rx635_restart1800:
    repr_get_attr_obj rx635_cstack, rx635_cur, rx635_curclass, "$!cstack"
  rx635_fail1801:
    unless rx635_bstack, rx635_done1799
    pop $I19, rx635_bstack
    if_null rx635_cstack, rx635_cstack_done1804
    unless rx635_cstack, rx635_cstack_done1804
    dec $I19
    set $P11, rx635_cstack[$I19]
  rx635_cstack_done1804:
    pop rx635_rep, rx635_bstack
    pop rx635_pos, rx635_bstack
    pop $I19, rx635_bstack
    lt rx635_pos, -1, rx635_done1799
    lt rx635_pos, 0, rx635_fail1801
    eq $I19, 0, rx635_fail1801
    nqp_islist $I20, rx635_cstack
    unless $I20, rx635_jump1802
    elements $I18, rx635_bstack
    le $I18, 0, rx635_cut1803
    dec $I18
    set $I18, rx635_bstack[$I18]
  rx635_cut1803:
    assign rx635_cstack, $I18
  rx635_jump1802:
    jump $I19
  rx635_done1799:
    rx635_cur."!cursor_fail"()
    .return (rx635_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_112_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1026
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .lex "$*SCOPE", _lex_param_1 
    .local pmc self 
    set self, _lex_param_0
    .local string rx639_tgt
    .local int rx639_pos
    .local int rx639_off
    .local int rx639_eos
    .local int rx639_rep
    .local pmc rx639_cur
    .local pmc rx639_curclass
    .local pmc rx639_bstack
    .local pmc rx639_cstack
    (rx639_cur, rx639_tgt, rx639_pos, rx639_curclass, rx639_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx639_cur
    length rx639_eos, rx639_tgt
    eq $I19, 1, rx639_restart1813
    gt rx639_pos, rx639_eos, rx639_fail1814
    repr_get_attr_int $I11, self, rx639_curclass, "$!from"
    ne $I11, -1, rxscan640_done1820
    goto rxscan640_scan1819
  rxscan640_loop1818:
    inc rx639_pos
    gt rx639_pos, rx639_eos, rx639_fail1814
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!from", rx639_pos
  rxscan640_scan1819:
    nqp_rxmark rx639_bstack, rxscan640_loop1818, rx639_pos, 0
  rxscan640_done1820:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt641_01822
    nqp_push_label $P11, alt641_11826
    nqp_push_label $P11, alt641_21830
    nqp_rxmark rx639_bstack, alt641_end1821, -1, 0
    rx639_cur."!alt"(rx639_pos, "alt_nfa__21_1359292302.194", $P11)
    goto rx639_fail1814
  alt641_01822:
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."ws"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1814
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1814
    nqp_rxmark rx639_bstack, rxsubrule643_pass1824, -1, 0
  rxsubrule643_pass1824:
    rx639_cstack = rx639_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."ws"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1814
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    goto alt641_end1821
  alt641_11826:
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."ws"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1814
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1814
    nqp_rxmark rx639_bstack, rxsubrule646_pass1828, -1, 0
  rxsubrule646_pass1828:
    rx639_cstack = rx639_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."ws"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1814
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    goto alt641_end1821
  alt641_21830:
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."ws"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1814
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1814
    nqp_rxmark rx639_bstack, rxsubrule649_pass1832, -1, 0
  rxsubrule649_pass1832:
    rx639_cstack = rx639_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."ws"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1814
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    goto alt641_end1821
  alt641_end1821:
    rx639_cur."!cursor_pass"(rx639_pos, "scoped", 'backtrack'=>1)
    .return (rx639_cur)
  rx639_restart1813:
    repr_get_attr_obj rx639_cstack, rx639_cur, rx639_curclass, "$!cstack"
  rx639_fail1814:
    unless rx639_bstack, rx639_done1812
    pop $I19, rx639_bstack
    if_null rx639_cstack, rx639_cstack_done1817
    unless rx639_cstack, rx639_cstack_done1817
    dec $I19
    set $P11, rx639_cstack[$I19]
  rx639_cstack_done1817:
    pop rx639_rep, rx639_bstack
    pop rx639_pos, rx639_bstack
    pop $I19, rx639_bstack
    lt rx639_pos, -1, rx639_done1812
    lt rx639_pos, 0, rx639_fail1814
    eq $I19, 0, rx639_fail1814
    nqp_islist $I20, rx639_cstack
    unless $I20, rx639_jump1815
    elements $I18, rx639_bstack
    le $I18, 0, rx639_cut1816
    dec $I18
    set $I18, rx639_bstack[$I18]
  rx639_cut1816:
    assign rx639_cstack, $I18
  rx639_jump1815:
    jump $I19
  rx639_done1812:
    rx639_cur."!cursor_fail"()
    .return (rx639_cur) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_113_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1032
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_399_1359292300.247' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx651_tgt
    .local int rx651_pos
    .local int rx651_off
    .local int rx651_eos
    .local int rx651_rep
    .local pmc rx651_cur
    .local pmc rx651_curclass
    .local pmc rx651_bstack
    .local pmc rx651_cstack
    (rx651_cur, rx651_tgt, rx651_pos, rx651_curclass, rx651_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx651_cur
    length rx651_eos, rx651_tgt
    eq $I19, 1, rx651_restart1836
    gt rx651_pos, rx651_eos, rx651_fail1837
    repr_get_attr_int $I11, self, rx651_curclass, "$!from"
    ne $I11, -1, rxscan652_done1843
    goto rxscan652_scan1842
  rxscan652_loop1841:
    inc rx651_pos
    gt rx651_pos, rx651_eos, rx651_fail1837
    repr_bind_attr_int rx651_cur, rx651_curclass, "$!from", rx651_pos
  rxscan652_scan1842:
    nqp_rxmark rx651_bstack, rxscan652_loop1841, rx651_pos, 0
  rxscan652_done1843:
    repr_bind_attr_int rx651_cur, rx651_curclass, "$!pos", rx651_pos
    $P11 = rx651_cur."name"()
    repr_get_attr_int $I11, $P11, rx651_curclass, "$!pos"
    lt $I11, 0, rx651_fail1837
    nqp_rxmark rx651_bstack, rxsubrule653_pass1844, -1, 0
  rxsubrule653_pass1844:
    rx651_cstack = rx651_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx651_pos, $P11, rx651_curclass, "$!pos"
    repr_bind_attr_int rx651_cur, rx651_curclass, "$!pos", rx651_pos
    store_lex unicode:"$\x{a2}", rx651_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_399_1359292300.247' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx651_fail1837
    rx651_cur."!cursor_pass"(rx651_pos, "typename", 'backtrack'=>1)
    .return (rx651_cur)
  rx651_restart1836:
    repr_get_attr_obj rx651_cstack, rx651_cur, rx651_curclass, "$!cstack"
  rx651_fail1837:
    unless rx651_bstack, rx651_done1835
    pop $I19, rx651_bstack
    if_null rx651_cstack, rx651_cstack_done1840
    unless rx651_cstack, rx651_cstack_done1840
    dec $I19
    set $P11, rx651_cstack[$I19]
  rx651_cstack_done1840:
    pop rx651_rep, rx651_bstack
    pop rx651_pos, rx651_bstack
    pop $I19, rx651_bstack
    lt rx651_pos, -1, rx651_done1835
    lt rx651_pos, 0, rx651_fail1837
    eq $I19, 0, rx651_fail1837
    nqp_islist $I20, rx651_cstack
    unless $I20, rx651_jump1838
    elements $I18, rx651_bstack
    le $I18, 0, rx651_cut1839
    dec $I18
    set $I18, rx651_bstack[$I18]
  rx651_cut1839:
    assign rx651_cstack, $I18
  rx651_jump1838:
    jump $I19
  rx651_done1835:
    rx651_cur."!cursor_fail"()
    .return (rx651_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_399_1359292300.247") :anon :lex :outer("cuid_113_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1034

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback1845
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback1846
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5005
  fallback1846:
    unless_null $P5002, vivi_6541847
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_6541847:
    set $P5001, $P5002
  fallback1845:
    find_lex $P5007, "$/"
    find_lex $P5010, "$/"
    unless_null $P5010, fallback1848
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5011
  fallback1848:
    set $P5009, $P5010["name"]
    unless_null $P5009, fallback1849
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5012
  fallback1849:
    set $P5008, $P5009["identifier"]
    unless_null $P5008, fallback1850
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5013
  fallback1850:
    $P5014 = $P5001."known_sym"($P5007, $P5008)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_114_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1037
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx655_tgt
    .local int rx655_pos
    .local int rx655_off
    .local int rx655_eos
    .local int rx655_rep
    .local pmc rx655_cur
    .local pmc rx655_curclass
    .local pmc rx655_bstack
    .local pmc rx655_cstack
    (rx655_cur, rx655_tgt, rx655_pos, rx655_curclass, rx655_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx655_cur
    length rx655_eos, rx655_tgt
    eq $I19, 1, rx655_restart1853
    gt rx655_pos, rx655_eos, rx655_fail1854
    repr_get_attr_int $I11, self, rx655_curclass, "$!from"
    ne $I11, -1, rxscan656_done1860
    goto rxscan656_scan1859
  rxscan656_loop1858:
    inc rx655_pos
    gt rx655_pos, rx655_eos, rx655_fail1854
    repr_bind_attr_int rx655_cur, rx655_curclass, "$!from", rx655_pos
  rxscan656_scan1859:
    nqp_rxmark rx655_bstack, rxscan656_loop1858, rx655_pos, 0
  rxscan656_done1860:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt657_01862
    nqp_push_label $P11, alt657_11864
    nqp_rxmark rx655_bstack, alt657_end1861, -1, 0
    rx655_cur."!alt"(rx655_pos, "alt_nfa__22_1359292302.209", $P11)
    goto rx655_fail1854
  alt657_01862:
    repr_bind_attr_int rx655_cur, rx655_curclass, "$!pos", rx655_pos
    $P11 = rx655_cur."variable_declarator"()
    repr_get_attr_int $I11, $P11, rx655_curclass, "$!pos"
    lt $I11, 0, rx655_fail1854
    nqp_rxmark rx655_bstack, rxsubrule658_pass1863, -1, 0
  rxsubrule658_pass1863:
    rx655_cstack = rx655_cur."!cursor_capture"($P11, "variable_declarator")
    repr_get_attr_int rx655_pos, $P11, rx655_curclass, "$!pos"
    goto alt657_end1861
  alt657_11864:
    repr_bind_attr_int rx655_cur, rx655_curclass, "$!pos", rx655_pos
    $P11 = rx655_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx655_curclass, "$!pos"
    lt $I11, 0, rx655_fail1854
    nqp_rxmark rx655_bstack, rxsubrule659_pass1865, -1, 0
  rxsubrule659_pass1865:
    rx655_cstack = rx655_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx655_pos, $P11, rx655_curclass, "$!pos"
    goto alt657_end1861
  alt657_end1861:
    rx655_cur."!cursor_pass"(rx655_pos, "declarator", 'backtrack'=>1)
    .return (rx655_cur)
  rx655_restart1853:
    repr_get_attr_obj rx655_cstack, rx655_cur, rx655_curclass, "$!cstack"
  rx655_fail1854:
    unless rx655_bstack, rx655_done1852
    pop $I19, rx655_bstack
    if_null rx655_cstack, rx655_cstack_done1857
    unless rx655_cstack, rx655_cstack_done1857
    dec $I19
    set $P11, rx655_cstack[$I19]
  rx655_cstack_done1857:
    pop rx655_rep, rx655_bstack
    pop rx655_pos, rx655_bstack
    pop $I19, rx655_bstack
    lt rx655_pos, -1, rx655_done1852
    lt rx655_pos, 0, rx655_fail1854
    eq $I19, 0, rx655_fail1854
    nqp_islist $I20, rx655_cstack
    unless $I20, rx655_jump1855
    elements $I18, rx655_bstack
    le $I18, 0, rx655_cut1856
    dec $I18
    set $I18, rx655_bstack[$I18]
  rx655_cut1856:
    assign rx655_cstack, $I18
  rx655_jump1855:
    jump $I19
  rx655_done1852:
    rx655_cur."!cursor_fail"()
    .return (rx655_cur) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_115_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1042
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_400_1359292300.247' 
    capture_lex $P5006 
    .lex "$*IN_DECL", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx660_tgt
    .local int rx660_pos
    .local int rx660_off
    .local int rx660_eos
    .local int rx660_rep
    .local pmc rx660_cur
    .local pmc rx660_curclass
    .local pmc rx660_bstack
    .local pmc rx660_cstack
    (rx660_cur, rx660_tgt, rx660_pos, rx660_curclass, rx660_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx660_cur
    length rx660_eos, rx660_tgt
    eq $I19, 1, rx660_restart1868
    gt rx660_pos, rx660_eos, rx660_fail1869
    repr_get_attr_int $I11, self, rx660_curclass, "$!from"
    ne $I11, -1, rxscan661_done1875
    goto rxscan661_scan1874
  rxscan661_loop1873:
    inc rx660_pos
    gt rx660_pos, rx660_eos, rx660_fail1869
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!from", rx660_pos
  rxscan661_scan1874:
    nqp_rxmark rx660_bstack, rxscan661_loop1873, rx660_pos, 0
  rxscan661_done1875:
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."ws"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1869
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    nqp_rxmark rx660_bstack, rxquantr663_done1878, rx660_pos, 0
  rxquantr663_loop1877:
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."typename"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1869
    goto rxsubrule664_pass1879
  rxsubrule664_back1880:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1869
  rxsubrule664_pass1879:
    rx660_cstack = rx660_cur."!cursor_capture"($P11, "typename")
    set_addr $I11, rxsubrule664_back1880
    push rx660_bstack, $I11
    push rx660_bstack, 0
    push rx660_bstack, rx660_pos
    elements $I11, rx660_cstack
    push rx660_bstack, $I11
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    nqp_rxpeek $I19, rx660_bstack, rxquantr663_done1878
    inc $I19
    inc $I19
    set rx660_rep, rx660_bstack[$I19]
    nqp_rxcommit rx660_bstack, rxquantr663_done1878
    inc rx660_rep
  rxquantr663_done1878:
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."ws"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1869
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    store_lex unicode:"$\x{a2}", rx660_cur
    box $P5002, "variable"
    set $P101, $P5002
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."ws"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1869
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."variable"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1869
    nqp_rxmark rx660_bstack, rxsubrule667_pass1883, -1, 0
  rxsubrule667_pass1883:
    rx660_cstack = rx660_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."ws"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1869
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    store_lex unicode:"$\x{a2}", rx660_cur
    $P5003 = $P102."MATCH"()
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_400_1359292300.247' 
    capture_lex $P5004
    $P5005 = $P5004()
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."ws"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1869
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    nqp_rxmark rx660_bstack, rxquantr670_done1887, rx660_pos, 0
  rxquantr670_loop1886:
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."trait"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1869
    goto rxsubrule671_pass1888
  rxsubrule671_back1889:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1869
  rxsubrule671_pass1888:
    rx660_cstack = rx660_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule671_back1889
    push rx660_bstack, $I11
    push rx660_bstack, 0
    push rx660_bstack, rx660_pos
    elements $I11, rx660_cstack
    push rx660_bstack, $I11
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    nqp_rxpeek $I19, rx660_bstack, rxquantr670_done1887
    inc $I19
    inc $I19
    set rx660_rep, rx660_bstack[$I19]
    nqp_rxcommit rx660_bstack, rxquantr670_done1887
    inc rx660_rep
    nqp_rxmark rx660_bstack, rxquantr670_done1887, rx660_pos, rx660_rep
    goto rxquantr670_loop1886
  rxquantr670_done1887:
    repr_bind_attr_int rx660_cur, rx660_curclass, "$!pos", rx660_pos
    $P11 = rx660_cur."ws"()
    repr_get_attr_int $I11, $P11, rx660_curclass, "$!pos"
    lt $I11, 0, rx660_fail1869
    repr_get_attr_int rx660_pos, $P11, rx660_curclass, "$!pos"
    rx660_cur."!cursor_pass"(rx660_pos, "variable_declarator", 'backtrack'=>1)
    .return (rx660_cur)
  rx660_restart1868:
    repr_get_attr_obj rx660_cstack, rx660_cur, rx660_curclass, "$!cstack"
  rx660_fail1869:
    unless rx660_bstack, rx660_done1867
    pop $I19, rx660_bstack
    if_null rx660_cstack, rx660_cstack_done1872
    unless rx660_cstack, rx660_cstack_done1872
    dec $I19
    set $P11, rx660_cstack[$I19]
  rx660_cstack_done1872:
    pop rx660_rep, rx660_bstack
    pop rx660_pos, rx660_bstack
    pop $I19, rx660_bstack
    lt rx660_pos, -1, rx660_done1867
    lt rx660_pos, 0, rx660_fail1869
    eq $I19, 0, rx660_fail1869
    nqp_islist $I20, rx660_cstack
    unless $I20, rx660_jump1870
    elements $I18, rx660_bstack
    le $I18, 0, rx660_cut1871
    dec $I18
    set $I18, rx660_bstack[$I18]
  rx660_cut1871:
    assign rx660_cstack, $I18
  rx660_jump1870:
    jump $I19
  rx660_done1867:
    rx660_cur."!cursor_fail"()
    .return (rx660_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_400_1359292300.247") :anon :lex :outer("cuid_115_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1046

    box $P5001, 0
    store_dynamic_lex "$*IN_DECL", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator" :subid("cuid_116_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1050
    .param pmc self 
    $P5001 = self."!protoregex"("routine_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_117_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1051
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx673_tgt
    .local int rx673_pos
    .local int rx673_off
    .local int rx673_eos
    .local int rx673_rep
    .local pmc rx673_cur
    .local pmc rx673_curclass
    .local pmc rx673_bstack
    .local pmc rx673_cstack
    (rx673_cur, rx673_tgt, rx673_pos, rx673_curclass, rx673_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx673_cur
    length rx673_eos, rx673_tgt
    eq $I19, 1, rx673_restart1893
    gt rx673_pos, rx673_eos, rx673_fail1894
    repr_get_attr_int $I11, self, rx673_curclass, "$!from"
    ne $I11, -1, rxscan674_done1900
    goto rxscan674_scan1899
  rxscan674_loop1898:
    inc rx673_pos
    gt rx673_pos, rx673_eos, rx673_fail1894
    repr_bind_attr_int rx673_cur, rx673_curclass, "$!from", rx673_pos
  rxscan674_scan1899:
    nqp_rxmark rx673_bstack, rxscan674_loop1898, rx673_pos, 0
  rxscan674_done1900:
    nqp_rxmark rx673_bstack, rxcap675_fail1902, rx673_pos, 0
    add $I11, rx673_pos, 3
    gt $I11, rx673_eos, rx673_fail1894
    substr $S10, rx673_tgt, rx673_pos, 3
    ne $S10, ucs4:"sub", rx673_fail1894
    add rx673_pos, 3
    nqp_rxpeek $I19, rx673_bstack, rxcap675_fail1902
    inc $I19
    set $I11, rx673_bstack[$I19]
    repr_bind_attr_int rx673_cur, rx673_curclass, "$!pos", rx673_pos
    $P11 = rx673_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx673_pos)
    rx673_cstack = rx673_cur."!cursor_capture"($P11, "sym")
    goto rxcap675_done1901
  rxcap675_fail1902:
    goto rx673_fail1894
  rxcap675_done1901:
    repr_bind_attr_int rx673_cur, rx673_curclass, "$!pos", rx673_pos
    $P11 = rx673_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx673_curclass, "$!pos"
    lt $I11, 0, rx673_fail1894
    nqp_rxmark rx673_bstack, rxsubrule676_pass1903, -1, 0
  rxsubrule676_pass1903:
    rx673_cstack = rx673_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx673_pos, $P11, rx673_curclass, "$!pos"
    rx673_cur."!cursor_pass"(rx673_pos, "routine_declarator:sym<sub>", 'backtrack'=>1)
    .return (rx673_cur)
  rx673_restart1893:
    repr_get_attr_obj rx673_cstack, rx673_cur, rx673_curclass, "$!cstack"
  rx673_fail1894:
    unless rx673_bstack, rx673_done1892
    pop $I19, rx673_bstack
    if_null rx673_cstack, rx673_cstack_done1897
    unless rx673_cstack, rx673_cstack_done1897
    dec $I19
    set $P11, rx673_cstack[$I19]
  rx673_cstack_done1897:
    pop rx673_rep, rx673_bstack
    pop rx673_pos, rx673_bstack
    pop $I19, rx673_bstack
    lt rx673_pos, -1, rx673_done1892
    lt rx673_pos, 0, rx673_fail1894
    eq $I19, 0, rx673_fail1894
    nqp_islist $I20, rx673_cstack
    unless $I20, rx673_jump1895
    elements $I18, rx673_bstack
    le $I18, 0, rx673_cut1896
    dec $I18
    set $I18, rx673_bstack[$I18]
  rx673_cut1896:
    assign rx673_cstack, $I18
  rx673_jump1895:
    jump $I19
  rx673_done1892:
    rx673_cur."!cursor_fail"()
    .return (rx673_cur) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_118_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1052
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx677_tgt
    .local int rx677_pos
    .local int rx677_off
    .local int rx677_eos
    .local int rx677_rep
    .local pmc rx677_cur
    .local pmc rx677_curclass
    .local pmc rx677_bstack
    .local pmc rx677_cstack
    (rx677_cur, rx677_tgt, rx677_pos, rx677_curclass, rx677_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx677_cur
    length rx677_eos, rx677_tgt
    eq $I19, 1, rx677_restart1906
    gt rx677_pos, rx677_eos, rx677_fail1907
    repr_get_attr_int $I11, self, rx677_curclass, "$!from"
    ne $I11, -1, rxscan678_done1913
    goto rxscan678_scan1912
  rxscan678_loop1911:
    inc rx677_pos
    gt rx677_pos, rx677_eos, rx677_fail1907
    repr_bind_attr_int rx677_cur, rx677_curclass, "$!from", rx677_pos
  rxscan678_scan1912:
    nqp_rxmark rx677_bstack, rxscan678_loop1911, rx677_pos, 0
  rxscan678_done1913:
    nqp_rxmark rx677_bstack, rxcap679_fail1915, rx677_pos, 0
    add $I11, rx677_pos, 6
    gt $I11, rx677_eos, rx677_fail1907
    substr $S10, rx677_tgt, rx677_pos, 6
    ne $S10, ucs4:"method", rx677_fail1907
    add rx677_pos, 6
    nqp_rxpeek $I19, rx677_bstack, rxcap679_fail1915
    inc $I19
    set $I11, rx677_bstack[$I19]
    repr_bind_attr_int rx677_cur, rx677_curclass, "$!pos", rx677_pos
    $P11 = rx677_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx677_pos)
    rx677_cstack = rx677_cur."!cursor_capture"($P11, "sym")
    goto rxcap679_done1914
  rxcap679_fail1915:
    goto rx677_fail1907
  rxcap679_done1914:
    repr_bind_attr_int rx677_cur, rx677_curclass, "$!pos", rx677_pos
    $P11 = rx677_cur."method_def"()
    repr_get_attr_int $I11, $P11, rx677_curclass, "$!pos"
    lt $I11, 0, rx677_fail1907
    nqp_rxmark rx677_bstack, rxsubrule680_pass1916, -1, 0
  rxsubrule680_pass1916:
    rx677_cstack = rx677_cur."!cursor_capture"($P11, "method_def")
    repr_get_attr_int rx677_pos, $P11, rx677_curclass, "$!pos"
    rx677_cur."!cursor_pass"(rx677_pos, "routine_declarator:sym<method>", 'backtrack'=>1)
    .return (rx677_cur)
  rx677_restart1906:
    repr_get_attr_obj rx677_cstack, rx677_cur, rx677_curclass, "$!cstack"
  rx677_fail1907:
    unless rx677_bstack, rx677_done1905
    pop $I19, rx677_bstack
    if_null rx677_cstack, rx677_cstack_done1910
    unless rx677_cstack, rx677_cstack_done1910
    dec $I19
    set $P11, rx677_cstack[$I19]
  rx677_cstack_done1910:
    pop rx677_rep, rx677_bstack
    pop rx677_pos, rx677_bstack
    pop $I19, rx677_bstack
    lt rx677_pos, -1, rx677_done1905
    lt rx677_pos, 0, rx677_fail1907
    eq $I19, 0, rx677_fail1907
    nqp_islist $I20, rx677_cstack
    unless $I20, rx677_jump1908
    elements $I18, rx677_bstack
    le $I18, 0, rx677_cut1909
    dec $I18
    set $I18, rx677_bstack[$I18]
  rx677_cut1909:
    assign rx677_cstack, $I18
  rx677_jump1908:
    jump $I19
  rx677_done1905:
    rx677_cur."!cursor_fail"()
    .return (rx677_cur) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_119_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1054
    .param pmc _lex_param_0 
    .lex "$*RETURN_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx681_tgt
    .local int rx681_pos
    .local int rx681_off
    .local int rx681_eos
    .local int rx681_rep
    .local pmc rx681_cur
    .local pmc rx681_curclass
    .local pmc rx681_bstack
    .local pmc rx681_cstack
    (rx681_cur, rx681_tgt, rx681_pos, rx681_curclass, rx681_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx681_cur
    length rx681_eos, rx681_tgt
    eq $I19, 1, rx681_restart1919
    gt rx681_pos, rx681_eos, rx681_fail1920
    repr_get_attr_int $I11, self, rx681_curclass, "$!from"
    ne $I11, -1, rxscan682_done1926
    goto rxscan682_scan1925
  rxscan682_loop1924:
    inc rx681_pos
    gt rx681_pos, rx681_eos, rx681_fail1920
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!from", rx681_pos
  rxscan682_scan1925:
    nqp_rxmark rx681_bstack, rxscan682_loop1924, rx681_pos, 0
  rxscan682_done1926:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    store_lex unicode:"$\x{a2}", rx681_cur
    box $P5002, 0
    set $P101, $P5002
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxmark rx681_bstack, rxquantr685_done1930, rx681_pos, 0
  rxquantr685_loop1929:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxmark rx681_bstack, rxcap687_fail1933, rx681_pos, 0
    nqp_rxmark rx681_bstack, rxquantr688_done1935, rx681_pos, 0
  rxquantr688_loop1934:
    add $I11, rx681_pos, 1
    gt $I11, rx681_eos, rx681_fail1920
    substr $S10, rx681_tgt, rx681_pos, 1
    ne $S10, ucs4:"&", rx681_fail1920
    add rx681_pos, 1
    nqp_rxpeek $I19, rx681_bstack, rxquantr688_done1935
    inc $I19
    inc $I19
    set rx681_rep, rx681_bstack[$I19]
    nqp_rxcommit rx681_bstack, rxquantr688_done1935
    inc rx681_rep
  rxquantr688_done1935:
    nqp_rxpeek $I19, rx681_bstack, rxcap687_fail1933
    inc $I19
    set $I11, rx681_bstack[$I19]
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx681_pos)
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "sigil")
    goto rxcap687_done1932
  rxcap687_fail1933:
    goto rx681_fail1920
  rxcap687_done1932:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    nqp_rxmark rx681_bstack, rxsubrule689_pass1936, -1, 0
  rxsubrule689_pass1936:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxpeek $I19, rx681_bstack, rxquantr685_done1930
    inc $I19
    inc $I19
    set rx681_rep, rx681_bstack[$I19]
    nqp_rxcommit rx681_bstack, rxquantr685_done1930
    inc rx681_rep
  rxquantr685_done1930:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
  alt694_01942:
    nqp_rxmark rx681_bstack, alt694_11948, rx681_pos, 0
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    add $I11, rx681_pos, 1
    gt $I11, rx681_eos, rx681_fail1920
    substr $S10, rx681_tgt, rx681_pos, 1
    ne $S10, ucs4:"(", rx681_fail1920
    add rx681_pos, 1
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."signature"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    nqp_rxmark rx681_bstack, rxsubrule697_pass1945, -1, 0
  rxsubrule697_pass1945:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    add $I11, rx681_pos, 1
    gt $I11, rx681_eos, rx681_fail1920
    substr $S10, rx681_tgt, rx681_pos, 1
    ne $S10, ucs4:")", rx681_fail1920
    add rx681_pos, 1
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    goto alt694_end1941
  alt694_11948:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
  alt694_end1941:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxmark rx681_bstack, rxquantr704_done1954, rx681_pos, 0
  rxquantr704_loop1953:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."trait"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    goto rxsubrule705_pass1955
  rxsubrule705_back1956:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
  rxsubrule705_pass1955:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule705_back1956
    push rx681_bstack, $I11
    push rx681_bstack, 0
    push rx681_bstack, rx681_pos
    elements $I11, rx681_cstack
    push rx681_bstack, $I11
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxpeek $I19, rx681_bstack, rxquantr704_done1954
    inc $I19
    inc $I19
    set rx681_rep, rx681_bstack[$I19]
    nqp_rxcommit rx681_bstack, rxquantr704_done1954
    inc rx681_rep
    nqp_rxmark rx681_bstack, rxquantr704_done1954, rx681_pos, rx681_rep
    goto rxquantr704_loop1953
  rxquantr704_done1954:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt707_01959
    nqp_push_label $P11, alt707_11963
    nqp_rxmark rx681_bstack, alt707_end1958, -1, 0
    rx681_cur."!alt"(rx681_pos, "alt_nfa__23_1359292302.258", $P11)
    goto rx681_fail1920
  alt707_01959:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    nqp_rxmark rx681_bstack, rxsubrule709_pass1961, -1, 0
  rxsubrule709_pass1961:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    goto alt707_end1958
  alt707_11963:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    nqp_rxmark rx681_bstack, rxsubrule712_pass1965, -1, 0
  rxsubrule712_pass1965:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    goto alt707_end1958
  alt707_end1958:
    nqp_rxcommit rx681_bstack, alt707_end1958
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1920
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    rx681_cur."!cursor_pass"(rx681_pos, "routine_def", 'backtrack'=>1)
    .return (rx681_cur)
  rx681_restart1919:
    repr_get_attr_obj rx681_cstack, rx681_cur, rx681_curclass, "$!cstack"
  rx681_fail1920:
    unless rx681_bstack, rx681_done1918
    pop $I19, rx681_bstack
    if_null rx681_cstack, rx681_cstack_done1923
    unless rx681_cstack, rx681_cstack_done1923
    dec $I19
    set $P11, rx681_cstack[$I19]
  rx681_cstack_done1923:
    pop rx681_rep, rx681_bstack
    pop rx681_pos, rx681_bstack
    pop $I19, rx681_bstack
    lt rx681_pos, -1, rx681_done1918
    lt rx681_pos, 0, rx681_fail1920
    eq $I19, 0, rx681_fail1920
    nqp_islist $I20, rx681_cstack
    unless $I20, rx681_jump1921
    elements $I18, rx681_bstack
    le $I18, 0, rx681_cut1922
    dec $I18
    set $I18, rx681_bstack[$I18]
  rx681_cut1922:
    assign rx681_cstack, $I18
  rx681_jump1921:
    jump $I19
  rx681_done1918:
    rx681_cur."!cursor_fail"()
    .return (rx681_cur) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_120_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1067
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_401_1359292300.247' 
    capture_lex $P5008 
    .lex "$*RETURN_USED", $P101 
    .lex "$*INVOCANT_OK", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx715_tgt
    .local int rx715_pos
    .local int rx715_off
    .local int rx715_eos
    .local int rx715_rep
    .local pmc rx715_cur
    .local pmc rx715_curclass
    .local pmc rx715_bstack
    .local pmc rx715_cstack
    (rx715_cur, rx715_tgt, rx715_pos, rx715_curclass, rx715_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx715_cur
    length rx715_eos, rx715_tgt
    eq $I19, 1, rx715_restart1970
    gt rx715_pos, rx715_eos, rx715_fail1971
    repr_get_attr_int $I11, self, rx715_curclass, "$!from"
    ne $I11, -1, rxscan716_done1977
    goto rxscan716_scan1976
  rxscan716_loop1975:
    inc rx715_pos
    gt rx715_pos, rx715_eos, rx715_fail1971
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!from", rx715_pos
  rxscan716_scan1976:
    nqp_rxmark rx715_bstack, rxscan716_loop1975, rx715_pos, 0
  rxscan716_done1977:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    store_lex unicode:"$\x{a2}", rx715_cur
    box $P5003, 0
    set $P101, $P5003
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    store_lex unicode:"$\x{a2}", rx715_cur
    box $P5004, 1
    set $P102, $P5004
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
  alt720_01982:
    nqp_rxmark rx715_bstack, alt720_11988, rx715_pos, 0
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    add $I11, rx715_pos, 3
    gt $I11, rx715_eos, rx715_fail1971
    substr $S10, rx715_tgt, rx715_pos, 3
    ne $S10, ucs4:"::(", rx715_fail1971
    add rx715_pos, 3
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."variable"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    nqp_rxmark rx715_bstack, rxsubrule723_pass1985, -1, 0
  rxsubrule723_pass1985:
    rx715_cstack = rx715_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    add $I11, rx715_pos, 1
    gt $I11, rx715_eos, rx715_fail1971
    substr $S10, rx715_tgt, rx715_pos, 1
    ne $S10, ucs4:")", rx715_fail1971
    add rx715_pos, 1
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    goto alt720_end1981
  alt720_11988:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    nqp_rxmark rx715_bstack, rxcap727_fail1991, rx715_pos, 0
    nqp_rxmark rx715_bstack, rxquantr728_done1993, rx715_pos, 0
  rxquantr728_loop1992:
    add $I11, rx715_pos, 1
    gt $I11, rx715_eos, rx715_fail1971
    substr $S10, rx715_tgt, rx715_pos, 1
    ne $S10, ucs4:"!", rx715_fail1971
    add rx715_pos, 1
    nqp_rxpeek $I19, rx715_bstack, rxquantr728_done1993
    inc $I19
    inc $I19
    set rx715_rep, rx715_bstack[$I19]
    nqp_rxcommit rx715_bstack, rxquantr728_done1993
    inc rx715_rep
  rxquantr728_done1993:
    nqp_rxpeek $I19, rx715_bstack, rxcap727_fail1991
    inc $I19
    set $I11, rx715_bstack[$I19]
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx715_pos)
    rx715_cstack = rx715_cur."!cursor_capture"($P11, "private")
    goto rxcap727_done1990
  rxcap727_fail1991:
    goto rx715_fail1971
  rxcap727_done1990:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    nqp_rxmark rx715_bstack, rxquantr730_done1996, rx715_pos, 0
  rxquantr730_loop1995:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    goto rxsubrule731_pass1997
  rxsubrule731_back1998:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
  rxsubrule731_pass1997:
    rx715_cstack = rx715_cur."!cursor_capture"($P11, "deflongname")
    set_addr $I11, rxsubrule731_back1998
    push rx715_bstack, $I11
    push rx715_bstack, 0
    push rx715_bstack, rx715_pos
    elements $I11, rx715_cstack
    push rx715_bstack, $I11
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    nqp_rxpeek $I19, rx715_bstack, rxquantr730_done1996
    inc $I19
    inc $I19
    set rx715_rep, rx715_bstack[$I19]
    nqp_rxcommit rx715_bstack, rxquantr730_done1996
    inc rx715_rep
  rxquantr730_done1996:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
  alt720_end1981:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
  alt736_02004:
    nqp_rxmark rx715_bstack, alt736_12010, rx715_pos, 0
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    add $I11, rx715_pos, 1
    gt $I11, rx715_eos, rx715_fail1971
    substr $S10, rx715_tgt, rx715_pos, 1
    ne $S10, ucs4:"(", rx715_fail1971
    add rx715_pos, 1
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."signature"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    nqp_rxmark rx715_bstack, rxsubrule739_pass2007, -1, 0
  rxsubrule739_pass2007:
    rx715_cstack = rx715_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    add $I11, rx715_pos, 1
    gt $I11, rx715_eos, rx715_fail1971
    substr $S10, rx715_tgt, rx715_pos, 1
    ne $S10, ucs4:")", rx715_fail1971
    add rx715_pos, 1
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    goto alt736_end2003
  alt736_12010:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
  alt736_end2003:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    store_lex unicode:"$\x{a2}", rx715_cur
    $P5005 = $P103."MATCH"()
    set $P104, $P5005
    .const 'Sub' $P5006 = 'cuid_401_1359292300.247' 
    capture_lex $P5006
    $P5007 = $P5006()
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    nqp_rxmark rx715_bstack, rxquantr747_done2017, rx715_pos, 0
  rxquantr747_loop2016:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."trait"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    goto rxsubrule748_pass2018
  rxsubrule748_back2019:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
  rxsubrule748_pass2018:
    rx715_cstack = rx715_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule748_back2019
    push rx715_bstack, $I11
    push rx715_bstack, 0
    push rx715_bstack, rx715_pos
    elements $I11, rx715_cstack
    push rx715_bstack, $I11
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    nqp_rxpeek $I19, rx715_bstack, rxquantr747_done2017
    inc $I19
    inc $I19
    set rx715_rep, rx715_bstack[$I19]
    nqp_rxcommit rx715_bstack, rxquantr747_done2017
    inc rx715_rep
    nqp_rxmark rx715_bstack, rxquantr747_done2017, rx715_pos, rx715_rep
    goto rxquantr747_loop2016
  rxquantr747_done2017:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt750_02022
    nqp_push_label $P11, alt750_12026
    nqp_rxmark rx715_bstack, alt750_end2021, -1, 0
    rx715_cur."!alt"(rx715_pos, "alt_nfa__24_1359292302.389", $P11)
    goto rx715_fail1971
  alt750_02022:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    nqp_rxmark rx715_bstack, rxsubrule752_pass2024, -1, 0
  rxsubrule752_pass2024:
    rx715_cstack = rx715_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    goto alt750_end2021
  alt750_12026:
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    nqp_rxmark rx715_bstack, rxsubrule755_pass2028, -1, 0
  rxsubrule755_pass2028:
    rx715_cstack = rx715_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    goto alt750_end2021
  alt750_end2021:
    nqp_rxcommit rx715_bstack, alt750_end2021
    repr_bind_attr_int rx715_cur, rx715_curclass, "$!pos", rx715_pos
    $P11 = rx715_cur."ws"()
    repr_get_attr_int $I11, $P11, rx715_curclass, "$!pos"
    lt $I11, 0, rx715_fail1971
    repr_get_attr_int rx715_pos, $P11, rx715_curclass, "$!pos"
    rx715_cur."!cursor_pass"(rx715_pos, "method_def", 'backtrack'=>1)
    .return (rx715_cur)
  rx715_restart1970:
    repr_get_attr_obj rx715_cstack, rx715_cur, rx715_curclass, "$!cstack"
  rx715_fail1971:
    unless rx715_bstack, rx715_done1969
    pop $I19, rx715_bstack
    if_null rx715_cstack, rx715_cstack_done1974
    unless rx715_cstack, rx715_cstack_done1974
    dec $I19
    set $P11, rx715_cstack[$I19]
  rx715_cstack_done1974:
    pop rx715_rep, rx715_bstack
    pop rx715_pos, rx715_bstack
    pop $I19, rx715_bstack
    lt rx715_pos, -1, rx715_done1969
    lt rx715_pos, 0, rx715_fail1971
    eq $I19, 0, rx715_fail1971
    nqp_islist $I20, rx715_cstack
    unless $I20, rx715_jump1972
    elements $I18, rx715_bstack
    le $I18, 0, rx715_cut1973
    dec $I18
    set $I18, rx715_bstack[$I18]
  rx715_cut1973:
    assign rx715_cstack, $I18
  rx715_jump1972:
    jump $I19
  rx715_done1969:
    rx715_cur."!cursor_fail"()
    .return (rx715_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_401_1359292300.247") :anon :lex :outer("cuid_120_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1077

    box $P5001, 0
    store_dynamic_lex "$*INVOCANT_OK", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "onlystar" :subid("cuid_121_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1085
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_402_1359292300.247' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx758_tgt
    .local int rx758_pos
    .local int rx758_off
    .local int rx758_eos
    .local int rx758_rep
    .local pmc rx758_cur
    .local pmc rx758_curclass
    .local pmc rx758_bstack
    .local pmc rx758_cstack
    (rx758_cur, rx758_tgt, rx758_pos, rx758_curclass, rx758_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx758_cur
    length rx758_eos, rx758_tgt
    eq $I19, 1, rx758_restart2033
    gt rx758_pos, rx758_eos, rx758_fail2034
    repr_get_attr_int $I11, self, rx758_curclass, "$!from"
    ne $I11, -1, rxscan759_done2040
    goto rxscan759_scan2039
  rxscan759_loop2038:
    inc rx758_pos
    gt rx758_pos, rx758_eos, rx758_fail2034
    repr_bind_attr_int rx758_cur, rx758_curclass, "$!from", rx758_pos
  rxscan759_scan2039:
    nqp_rxmark rx758_bstack, rxscan759_loop2038, rx758_pos, 0
  rxscan759_done2040:
    repr_bind_attr_int rx758_cur, rx758_curclass, "$!pos", rx758_pos
    store_lex unicode:"$\x{a2}", rx758_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_402_1359292300.247' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx758_fail2034
    add $I11, rx758_pos, 1
    gt $I11, rx758_eos, rx758_fail2034
    substr $S10, rx758_tgt, rx758_pos, 1
    ne $S10, ucs4:"{", rx758_fail2034
    add rx758_pos, 1
    repr_bind_attr_int rx758_cur, rx758_curclass, "$!pos", rx758_pos
    $P11 = rx758_cur."ws"()
    repr_get_attr_int $I11, $P11, rx758_curclass, "$!pos"
    lt $I11, 0, rx758_fail2034
    repr_get_attr_int rx758_pos, $P11, rx758_curclass, "$!pos"
    add $I11, rx758_pos, 1
    gt $I11, rx758_eos, rx758_fail2034
    substr $S10, rx758_tgt, rx758_pos, 1
    ne $S10, ucs4:"*", rx758_fail2034
    add rx758_pos, 1
    repr_bind_attr_int rx758_cur, rx758_curclass, "$!pos", rx758_pos
    $P11 = rx758_cur."ws"()
    repr_get_attr_int $I11, $P11, rx758_curclass, "$!pos"
    lt $I11, 0, rx758_fail2034
    repr_get_attr_int rx758_pos, $P11, rx758_curclass, "$!pos"
    add $I11, rx758_pos, 1
    gt $I11, rx758_eos, rx758_fail2034
    substr $S10, rx758_tgt, rx758_pos, 1
    ne $S10, ucs4:"}", rx758_fail2034
    add rx758_pos, 1
    repr_bind_attr_int rx758_cur, rx758_curclass, "$!pos", rx758_pos
    $P11 = rx758_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx758_curclass, "$!pos"
    lt $I11, 0, rx758_fail2034
    repr_bind_attr_int rx758_cur, rx758_curclass, "$!pos", rx758_pos
    $P11 = rx758_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx758_curclass, "$!pos"
    lt $I11, 0, rx758_fail2034
    repr_get_attr_int rx758_pos, $P11, rx758_curclass, "$!pos"
    rx758_cur."!cursor_pass"(rx758_pos, "onlystar", 'backtrack'=>1)
    .return (rx758_cur)
  rx758_restart2033:
    repr_get_attr_obj rx758_cstack, rx758_cur, rx758_curclass, "$!cstack"
  rx758_fail2034:
    unless rx758_bstack, rx758_done2032
    pop $I19, rx758_bstack
    if_null rx758_cstack, rx758_cstack_done2037
    unless rx758_cstack, rx758_cstack_done2037
    dec $I19
    set $P11, rx758_cstack[$I19]
  rx758_cstack_done2037:
    pop rx758_rep, rx758_bstack
    pop rx758_pos, rx758_bstack
    pop $I19, rx758_bstack
    lt rx758_pos, -1, rx758_done2032
    lt rx758_pos, 0, rx758_fail2034
    eq $I19, 0, rx758_fail2034
    nqp_islist $I20, rx758_cstack
    unless $I20, rx758_jump2035
    elements $I18, rx758_bstack
    le $I18, 0, rx758_cut2036
    dec $I18
    set $I18, rx758_bstack[$I18]
  rx758_cut2036:
    assign rx758_cstack, $I18
  rx758_jump2035:
    jump $I19
  rx758_done2032:
    rx758_cur."!cursor_fail"()
    .return (rx758_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_402_1359292300.247") :anon :lex :outer("cuid_121_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1086

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback2041
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback2042
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5005
  fallback2042:
    unless_null $P5002, vivi_7602043
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_7602043:
    set $P5001, $P5002
  fallback2041:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator" :subid("cuid_122_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1092
    .param pmc self 
    $P5001 = self."!protoregex"("multi_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_123_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1093
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx764_tgt
    .local int rx764_pos
    .local int rx764_off
    .local int rx764_eos
    .local int rx764_rep
    .local pmc rx764_cur
    .local pmc rx764_curclass
    .local pmc rx764_bstack
    .local pmc rx764_cstack
    (rx764_cur, rx764_tgt, rx764_pos, rx764_curclass, rx764_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx764_cur
    length rx764_eos, rx764_tgt
    eq $I19, 1, rx764_restart2049
    gt rx764_pos, rx764_eos, rx764_fail2050
    repr_get_attr_int $I11, self, rx764_curclass, "$!from"
    ne $I11, -1, rxscan765_done2056
    goto rxscan765_scan2055
  rxscan765_loop2054:
    inc rx764_pos
    gt rx764_pos, rx764_eos, rx764_fail2050
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!from", rx764_pos
  rxscan765_scan2055:
    nqp_rxmark rx764_bstack, rxscan765_loop2054, rx764_pos, 0
  rxscan765_done2056:
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    store_lex unicode:"$\x{a2}", rx764_cur
    box $P5002, "multi"
    set $P101, $P5002
    nqp_rxmark rx764_bstack, rxcap766_fail2058, rx764_pos, 0
    add $I11, rx764_pos, 5
    gt $I11, rx764_eos, rx764_fail2050
    substr $S10, rx764_tgt, rx764_pos, 5
    ne $S10, ucs4:"multi", rx764_fail2050
    add rx764_pos, 5
    nqp_rxpeek $I19, rx764_bstack, rxcap766_fail2058
    inc $I19
    set $I11, rx764_bstack[$I19]
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    $P11 = rx764_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx764_pos)
    rx764_cstack = rx764_cur."!cursor_capture"($P11, "sym")
    goto rxcap766_done2057
  rxcap766_fail2058:
    goto rx764_fail2050
  rxcap766_done2057:
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    $P11 = rx764_cur."ws"()
    repr_get_attr_int $I11, $P11, rx764_curclass, "$!pos"
    lt $I11, 0, rx764_fail2050
    repr_get_attr_int rx764_pos, $P11, rx764_curclass, "$!pos"
  alt768_02061:
    nqp_rxmark rx764_bstack, alt768_12063, rx764_pos, 0
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    $P11 = rx764_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx764_curclass, "$!pos"
    lt $I11, 0, rx764_fail2050
    nqp_rxmark rx764_bstack, rxsubrule769_pass2062, -1, 0
  rxsubrule769_pass2062:
    rx764_cstack = rx764_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx764_pos, $P11, rx764_curclass, "$!pos"
    goto alt768_end2060
  alt768_12063:
    nqp_rxmark rx764_bstack, alt768_22065, rx764_pos, 0
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    $P11 = rx764_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx764_curclass, "$!pos"
    lt $I11, 0, rx764_fail2050
    nqp_rxmark rx764_bstack, rxsubrule770_pass2064, -1, 0
  rxsubrule770_pass2064:
    rx764_cstack = rx764_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx764_pos, $P11, rx764_curclass, "$!pos"
    goto alt768_end2060
  alt768_22065:
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    $P11 = rx764_cur."panic"("Malformed multi")
    repr_get_attr_int $I11, $P11, rx764_curclass, "$!pos"
    lt $I11, 0, rx764_fail2050
    repr_get_attr_int rx764_pos, $P11, rx764_curclass, "$!pos"
  alt768_end2060:
    rx764_cur."!cursor_pass"(rx764_pos, "multi_declarator:sym<multi>", 'backtrack'=>1)
    .return (rx764_cur)
  rx764_restart2049:
    repr_get_attr_obj rx764_cstack, rx764_cur, rx764_curclass, "$!cstack"
  rx764_fail2050:
    unless rx764_bstack, rx764_done2048
    pop $I19, rx764_bstack
    if_null rx764_cstack, rx764_cstack_done2053
    unless rx764_cstack, rx764_cstack_done2053
    dec $I19
    set $P11, rx764_cstack[$I19]
  rx764_cstack_done2053:
    pop rx764_rep, rx764_bstack
    pop rx764_pos, rx764_bstack
    pop $I19, rx764_bstack
    lt rx764_pos, -1, rx764_done2048
    lt rx764_pos, 0, rx764_fail2050
    eq $I19, 0, rx764_fail2050
    nqp_islist $I20, rx764_cstack
    unless $I20, rx764_jump2051
    elements $I18, rx764_bstack
    le $I18, 0, rx764_cut2052
    dec $I18
    set $I18, rx764_bstack[$I18]
  rx764_cut2052:
    assign rx764_cstack, $I18
  rx764_jump2051:
    jump $I19
  rx764_done2048:
    rx764_cur."!cursor_fail"()
    .return (rx764_cur) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_124_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1098
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx772_tgt
    .local int rx772_pos
    .local int rx772_off
    .local int rx772_eos
    .local int rx772_rep
    .local pmc rx772_cur
    .local pmc rx772_curclass
    .local pmc rx772_bstack
    .local pmc rx772_cstack
    (rx772_cur, rx772_tgt, rx772_pos, rx772_curclass, rx772_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx772_cur
    length rx772_eos, rx772_tgt
    eq $I19, 1, rx772_restart2069
    gt rx772_pos, rx772_eos, rx772_fail2070
    repr_get_attr_int $I11, self, rx772_curclass, "$!from"
    ne $I11, -1, rxscan773_done2076
    goto rxscan773_scan2075
  rxscan773_loop2074:
    inc rx772_pos
    gt rx772_pos, rx772_eos, rx772_fail2070
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!from", rx772_pos
  rxscan773_scan2075:
    nqp_rxmark rx772_bstack, rxscan773_loop2074, rx772_pos, 0
  rxscan773_done2076:
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    store_lex unicode:"$\x{a2}", rx772_cur
    box $P5002, "proto"
    set $P101, $P5002
    nqp_rxmark rx772_bstack, rxcap774_fail2078, rx772_pos, 0
    add $I11, rx772_pos, 5
    gt $I11, rx772_eos, rx772_fail2070
    substr $S10, rx772_tgt, rx772_pos, 5
    ne $S10, ucs4:"proto", rx772_fail2070
    add rx772_pos, 5
    nqp_rxpeek $I19, rx772_bstack, rxcap774_fail2078
    inc $I19
    set $I11, rx772_bstack[$I19]
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx772_pos)
    rx772_cstack = rx772_cur."!cursor_capture"($P11, "sym")
    goto rxcap774_done2077
  rxcap774_fail2078:
    goto rx772_fail2070
  rxcap774_done2077:
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."ws"()
    repr_get_attr_int $I11, $P11, rx772_curclass, "$!pos"
    lt $I11, 0, rx772_fail2070
    repr_get_attr_int rx772_pos, $P11, rx772_curclass, "$!pos"
  alt776_02081:
    nqp_rxmark rx772_bstack, alt776_12083, rx772_pos, 0
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx772_curclass, "$!pos"
    lt $I11, 0, rx772_fail2070
    nqp_rxmark rx772_bstack, rxsubrule777_pass2082, -1, 0
  rxsubrule777_pass2082:
    rx772_cstack = rx772_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx772_pos, $P11, rx772_curclass, "$!pos"
    goto alt776_end2080
  alt776_12083:
    nqp_rxmark rx772_bstack, alt776_22085, rx772_pos, 0
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx772_curclass, "$!pos"
    lt $I11, 0, rx772_fail2070
    nqp_rxmark rx772_bstack, rxsubrule778_pass2084, -1, 0
  rxsubrule778_pass2084:
    rx772_cstack = rx772_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx772_pos, $P11, rx772_curclass, "$!pos"
    goto alt776_end2080
  alt776_22085:
    repr_bind_attr_int rx772_cur, rx772_curclass, "$!pos", rx772_pos
    $P11 = rx772_cur."panic"("Malformed proto")
    repr_get_attr_int $I11, $P11, rx772_curclass, "$!pos"
    lt $I11, 0, rx772_fail2070
    repr_get_attr_int rx772_pos, $P11, rx772_curclass, "$!pos"
  alt776_end2080:
    rx772_cur."!cursor_pass"(rx772_pos, "multi_declarator:sym<proto>", 'backtrack'=>1)
    .return (rx772_cur)
  rx772_restart2069:
    repr_get_attr_obj rx772_cstack, rx772_cur, rx772_curclass, "$!cstack"
  rx772_fail2070:
    unless rx772_bstack, rx772_done2068
    pop $I19, rx772_bstack
    if_null rx772_cstack, rx772_cstack_done2073
    unless rx772_cstack, rx772_cstack_done2073
    dec $I19
    set $P11, rx772_cstack[$I19]
  rx772_cstack_done2073:
    pop rx772_rep, rx772_bstack
    pop rx772_pos, rx772_bstack
    pop $I19, rx772_bstack
    lt rx772_pos, -1, rx772_done2068
    lt rx772_pos, 0, rx772_fail2070
    eq $I19, 0, rx772_fail2070
    nqp_islist $I20, rx772_cstack
    unless $I20, rx772_jump2071
    elements $I18, rx772_bstack
    le $I18, 0, rx772_cut2072
    dec $I18
    set $I18, rx772_bstack[$I18]
  rx772_cut2072:
    assign rx772_cstack, $I18
  rx772_jump2071:
    jump $I19
  rx772_done2068:
    rx772_cur."!cursor_fail"()
    .return (rx772_cur) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_125_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1103
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx780_tgt
    .local int rx780_pos
    .local int rx780_off
    .local int rx780_eos
    .local int rx780_rep
    .local pmc rx780_cur
    .local pmc rx780_curclass
    .local pmc rx780_bstack
    .local pmc rx780_cstack
    (rx780_cur, rx780_tgt, rx780_pos, rx780_curclass, rx780_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx780_cur
    length rx780_eos, rx780_tgt
    eq $I19, 1, rx780_restart2089
    gt rx780_pos, rx780_eos, rx780_fail2090
    repr_get_attr_int $I11, self, rx780_curclass, "$!from"
    ne $I11, -1, rxscan781_done2096
    goto rxscan781_scan2095
  rxscan781_loop2094:
    inc rx780_pos
    gt rx780_pos, rx780_eos, rx780_fail2090
    repr_bind_attr_int rx780_cur, rx780_curclass, "$!from", rx780_pos
  rxscan781_scan2095:
    nqp_rxmark rx780_bstack, rxscan781_loop2094, rx780_pos, 0
  rxscan781_done2096:
    repr_bind_attr_int rx780_cur, rx780_curclass, "$!pos", rx780_pos
    store_lex unicode:"$\x{a2}", rx780_cur
    box $P5002, ""
    set $P101, $P5002
    repr_bind_attr_int rx780_cur, rx780_curclass, "$!pos", rx780_pos
    $P11 = rx780_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx780_curclass, "$!pos"
    lt $I11, 0, rx780_fail2090
    nqp_rxmark rx780_bstack, rxsubrule782_pass2097, -1, 0
  rxsubrule782_pass2097:
    rx780_cstack = rx780_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx780_pos, $P11, rx780_curclass, "$!pos"
    rx780_cur."!cursor_pass"(rx780_pos, "multi_declarator:sym<null>", 'backtrack'=>1)
    .return (rx780_cur)
  rx780_restart2089:
    repr_get_attr_obj rx780_cstack, rx780_cur, rx780_curclass, "$!cstack"
  rx780_fail2090:
    unless rx780_bstack, rx780_done2088
    pop $I19, rx780_bstack
    if_null rx780_cstack, rx780_cstack_done2093
    unless rx780_cstack, rx780_cstack_done2093
    dec $I19
    set $P11, rx780_cstack[$I19]
  rx780_cstack_done2093:
    pop rx780_rep, rx780_bstack
    pop rx780_pos, rx780_bstack
    pop $I19, rx780_bstack
    lt rx780_pos, -1, rx780_done2088
    lt rx780_pos, 0, rx780_fail2090
    eq $I19, 0, rx780_fail2090
    nqp_islist $I20, rx780_cstack
    unless $I20, rx780_jump2091
    elements $I18, rx780_bstack
    le $I18, 0, rx780_cut2092
    dec $I18
    set $I18, rx780_bstack[$I18]
  rx780_cut2092:
    assign rx780_cstack, $I18
  rx780_jump2091:
    jump $I19
  rx780_done2088:
    rx780_cur."!cursor_fail"()
    .return (rx780_cur) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_126_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1108
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_403_1359292300.247' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_127_1359292300.247' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx783_tgt
    .local int rx783_pos
    .local int rx783_off
    .local int rx783_eos
    .local int rx783_rep
    .local pmc rx783_cur
    .local pmc rx783_curclass
    .local pmc rx783_bstack
    .local pmc rx783_cstack
    (rx783_cur, rx783_tgt, rx783_pos, rx783_curclass, rx783_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx783_cur
    length rx783_eos, rx783_tgt
    eq $I19, 1, rx783_restart2100
    gt rx783_pos, rx783_eos, rx783_fail2101
    repr_get_attr_int $I11, self, rx783_curclass, "$!from"
    ne $I11, -1, rxscan784_done2107
    goto rxscan784_scan2106
  rxscan784_loop2105:
    inc rx783_pos
    gt rx783_pos, rx783_eos, rx783_fail2101
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!from", rx783_pos
  rxscan784_scan2106:
    nqp_rxmark rx783_bstack, rxscan784_loop2105, rx783_pos, 0
  rxscan784_done2107:
    nqp_rxmark rx783_bstack, rxquantr785_done2109, rx783_pos, 0
  rxquantr785_loop2108:
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    store_lex unicode:"$\x{a2}", rx783_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_403_1359292300.247' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx783_fail2101
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2101
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2101
    nqp_rxmark rx783_bstack, rxsubrule788_pass2114, -1, 0
  rxsubrule788_pass2114:
    rx783_cstack = rx783_cur."!cursor_capture"($P11, "invocant")
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2101
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    add $I11, rx783_pos, 1
    gt $I11, rx783_eos, rx783_fail2101
    substr $S10, rx783_tgt, rx783_pos, 1
    ne $S10, ucs4:":", rx783_fail2101
    add rx783_pos, 1
    nqp_rxpeek $I19, rx783_bstack, rxquantr785_done2109
    inc $I19
    inc $I19
    set rx783_rep, rx783_bstack[$I19]
    nqp_rxcommit rx783_bstack, rxquantr785_done2109
    inc rx783_rep
  rxquantr785_done2109:
    nqp_rxmark rx783_bstack, rxquantr790_done2117, rx783_pos, 0
  rxquantr790_loop2116:
    nqp_rxmark rx783_bstack, rxquantr791_done2119, rx783_pos, 0
  rxquantr791_loop2118:
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2101
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2101
    nqp_rxmark rx783_bstack, rxsubrule793_pass2121, -1, 0
  rxsubrule793_pass2121:
    rx783_cstack = rx783_cur."!cursor_capture"($P11, "parameter")
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2101
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt795_02124
    nqp_push_label $P11, alt795_12125
    nqp_rxmark rx783_bstack, alt795_end2123, -1, 0
    rx783_cur."!alt"(rx783_pos, "alt_nfa__26_1359292302.461", $P11)
    goto rx783_fail2101
  alt795_02124:
    add $I11, rx783_pos, 1
    gt $I11, rx783_eos, rx783_fail2101
    substr $S10, rx783_tgt, rx783_pos, 1
    ne $S10, ucs4:",", rx783_fail2101
    add rx783_pos, 1
    goto alt795_end2123
  alt795_12125:
    .const 'Sub' $P5004 = 'cuid_127_1359292300.247' 
    capture_lex $P5004
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."before"($P5004)
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2101
    nqp_rxmark rx783_bstack, rxsubrule800_pass2141, -1, 0
  rxsubrule800_pass2141:
    rx783_cstack = rx783_cur."!cursor_capture"($P11, "before")
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    goto alt795_end2123
  alt795_end2123:
    nqp_rxcommit rx783_bstack, alt795_end2123
    nqp_rxpeek $I19, rx783_bstack, rxquantr791_done2119
    inc $I19
    inc $I19
    set rx783_rep, rx783_bstack[$I19]
    nqp_rxcommit rx783_bstack, rxquantr791_done2119
    inc rx783_rep
    nqp_rxmark rx783_bstack, rxquantr791_done2119, rx783_pos, rx783_rep
    goto rxquantr791_loop2118
  rxquantr791_done2119:
    nqp_rxpeek $I19, rx783_bstack, rxquantr790_done2117
    inc $I19
    inc $I19
    set rx783_rep, rx783_bstack[$I19]
    nqp_rxcommit rx783_bstack, rxquantr790_done2117
    inc rx783_rep
  rxquantr790_done2117:
    rx783_cur."!cursor_pass"(rx783_pos, "signature", 'backtrack'=>1)
    .return (rx783_cur)
  rx783_restart2100:
    repr_get_attr_obj rx783_cstack, rx783_cur, rx783_curclass, "$!cstack"
  rx783_fail2101:
    unless rx783_bstack, rx783_done2099
    pop $I19, rx783_bstack
    if_null rx783_cstack, rx783_cstack_done2104
    unless rx783_cstack, rx783_cstack_done2104
    dec $I19
    set $P11, rx783_cstack[$I19]
  rx783_cstack_done2104:
    pop rx783_rep, rx783_bstack
    pop rx783_pos, rx783_bstack
    pop $I19, rx783_bstack
    lt rx783_pos, -1, rx783_done2099
    lt rx783_pos, 0, rx783_fail2101
    eq $I19, 0, rx783_fail2101
    nqp_islist $I20, rx783_cstack
    unless $I20, rx783_jump2102
    elements $I18, rx783_bstack
    le $I18, 0, rx783_cut2103
    dec $I18
    set $I18, rx783_bstack[$I18]
  rx783_cut2103:
    assign rx783_cstack, $I18
  rx783_jump2102:
    jump $I19
  rx783_done2099:
    rx783_cur."!cursor_fail"()
    .return (rx783_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_403_1359292300.247") :anon :lex :outer("cuid_126_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1109

    find_dynamic_lex $P5001, "$*INVOCANT_OK"
    unless_null $P5001, fallback2110
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$INVOCANT_OK"]
    unless_null $P5002, fallback2111
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5005
  fallback2111:
    unless_null $P5002, vivi_7862112
    die "Contextual $*INVOCANT_OK not found"
    box $P5006, "Contextual $*INVOCANT_OK not found"
    set $P5002, $P5006
  vivi_7862112:
    set $P5001, $P5002
  fallback2110:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_127_1359292300.247") :anon :lex :outer("cuid_126_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx796_tgt
    .local int rx796_pos
    .local int rx796_off
    .local int rx796_eos
    .local int rx796_rep
    .local pmc rx796_cur
    .local pmc rx796_curclass
    .local pmc rx796_bstack
    .local pmc rx796_cstack
    (rx796_cur, rx796_tgt, rx796_pos, rx796_curclass, rx796_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx796_cur
    length rx796_eos, rx796_tgt
    eq $I19, 1, rx796_restart2128
    gt rx796_pos, rx796_eos, rx796_fail2129
    repr_get_attr_int $I11, self, rx796_curclass, "$!from"
    ne $I11, -1, rxscan797_done2135
    goto rxscan797_scan2134
  rxscan797_loop2133:
    inc rx796_pos
    gt rx796_pos, rx796_eos, rx796_fail2129
    repr_bind_attr_int rx796_cur, rx796_curclass, "$!from", rx796_pos
  rxscan797_scan2134:
    nqp_rxmark rx796_bstack, rxscan797_loop2133, rx796_pos, 0
  rxscan797_done2135:
    nqp_rxmark rx796_bstack, rxquantr798_done2137, rx796_pos, 0
  rxquantr798_loop2136:
    ge rx796_pos, rx796_eos, rx796_fail2129
    is_cclass $I11, .CCLASS_WHITESPACE, rx796_tgt, rx796_pos
    unless $I11, rx796_fail2129
    add rx796_pos, 1
    nqp_rxpeek $I19, rx796_bstack, rxquantr798_done2137
    inc $I19
    inc $I19
    set rx796_rep, rx796_bstack[$I19]
    nqp_rxcommit rx796_bstack, rxquantr798_done2137
    inc rx796_rep
    nqp_rxmark rx796_bstack, rxquantr798_done2137, rx796_pos, rx796_rep
    goto rxquantr798_loop2136
  rxquantr798_done2137:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt799_02139
    nqp_push_label $P11, alt799_12140
    nqp_rxmark rx796_bstack, alt799_end2138, -1, 0
    rx796_cur."!alt"(rx796_pos, "alt_nfa__25_1359292302.456", $P11)
    goto rx796_fail2129
  alt799_02139:
    add $I11, rx796_pos, 1
    gt $I11, rx796_eos, rx796_fail2129
    substr $S10, rx796_tgt, rx796_pos, 1
    ne $S10, ucs4:")", rx796_fail2129
    add rx796_pos, 1
    goto alt799_end2138
  alt799_12140:
    add $I11, rx796_pos, 1
    gt $I11, rx796_eos, rx796_fail2129
    substr $S10, rx796_tgt, rx796_pos, 1
    ne $S10, ucs4:"{", rx796_fail2129
    add rx796_pos, 1
    goto alt799_end2138
  alt799_end2138:
    nqp_rxcommit rx796_bstack, alt799_end2138
    rx796_cur."!cursor_pass"(rx796_pos, 'backtrack'=>1)
    .return (rx796_cur)
  rx796_restart2128:
    repr_get_attr_obj rx796_cstack, rx796_cur, rx796_curclass, "$!cstack"
  rx796_fail2129:
    unless rx796_bstack, rx796_done2127
    pop $I19, rx796_bstack
    if_null rx796_cstack, rx796_cstack_done2132
    unless rx796_cstack, rx796_cstack_done2132
    dec $I19
    set $P11, rx796_cstack[$I19]
  rx796_cstack_done2132:
    pop rx796_rep, rx796_bstack
    pop rx796_pos, rx796_bstack
    pop $I19, rx796_bstack
    lt rx796_pos, -1, rx796_done2127
    lt rx796_pos, 0, rx796_fail2129
    eq $I19, 0, rx796_fail2129
    nqp_islist $I20, rx796_cstack
    unless $I20, rx796_jump2130
    elements $I18, rx796_bstack
    le $I18, 0, rx796_cut2131
    dec $I18
    set $I18, rx796_bstack[$I18]
  rx796_cut2131:
    assign rx796_cstack, $I18
  rx796_jump2130:
    jump $I19
  rx796_done2127:
    rx796_cur."!cursor_fail"()
    .return (rx796_cur) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_128_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1113
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx801_tgt
    .local int rx801_pos
    .local int rx801_off
    .local int rx801_eos
    .local int rx801_rep
    .local pmc rx801_cur
    .local pmc rx801_curclass
    .local pmc rx801_bstack
    .local pmc rx801_cstack
    (rx801_cur, rx801_tgt, rx801_pos, rx801_curclass, rx801_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx801_cur
    length rx801_eos, rx801_tgt
    eq $I19, 1, rx801_restart2144
    gt rx801_pos, rx801_eos, rx801_fail2145
    repr_get_attr_int $I11, self, rx801_curclass, "$!from"
    ne $I11, -1, rxscan802_done2151
    goto rxscan802_scan2150
  rxscan802_loop2149:
    inc rx801_pos
    gt rx801_pos, rx801_eos, rx801_fail2145
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!from", rx801_pos
  rxscan802_scan2150:
    nqp_rxmark rx801_bstack, rxscan802_loop2149, rx801_pos, 0
  rxscan802_done2151:
    nqp_rxmark rx801_bstack, rxquantr803_done2153, rx801_pos, 0
  rxquantr803_loop2152:
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."typename"()
    repr_get_attr_int $I11, $P11, rx801_curclass, "$!pos"
    lt $I11, 0, rx801_fail2145
    nqp_rxmark rx801_bstack, rxsubrule804_pass2154, -1, 0
  rxsubrule804_pass2154:
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "typename")
    repr_get_attr_int rx801_pos, $P11, rx801_curclass, "$!pos"
    nqp_rxmark rx801_bstack, rxquantr805_done2156, rx801_pos, 0
  rxquantr805_loop2155:
    add $I11, rx801_pos, 1
    gt $I11, rx801_eos, rx801_fail2145
    substr $S10, rx801_tgt, rx801_pos, 1
    ne $S10, ucs4:":", rx801_fail2145
    add rx801_pos, 1
    nqp_rxmark rx801_bstack, rxcap806_fail2158, rx801_pos, 0
    ge rx801_pos, rx801_eos, rx801_fail2145
    substr $S11, rx801_tgt, rx801_pos, 1
    index $I11, ucs4:"_DU", $S11
    lt $I11, 0, rx801_fail2145
    inc rx801_pos
    nqp_rxpeek $I19, rx801_bstack, rxcap806_fail2158
    inc $I19
    set $I11, rx801_bstack[$I19]
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx801_pos)
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "definedness")
    goto rxcap806_done2157
  rxcap806_fail2158:
    goto rx801_fail2145
  rxcap806_done2157:
    nqp_rxpeek $I19, rx801_bstack, rxquantr805_done2156
    inc $I19
    inc $I19
    set rx801_rep, rx801_bstack[$I19]
    nqp_rxcommit rx801_bstack, rxquantr805_done2156
    inc rx801_rep
  rxquantr805_done2156:
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."ws"()
    repr_get_attr_int $I11, $P11, rx801_curclass, "$!pos"
    lt $I11, 0, rx801_fail2145
    repr_get_attr_int rx801_pos, $P11, rx801_curclass, "$!pos"
    nqp_rxpeek $I19, rx801_bstack, rxquantr803_done2153
    inc $I19
    inc $I19
    set rx801_rep, rx801_bstack[$I19]
    nqp_rxcommit rx801_bstack, rxquantr803_done2153
    inc rx801_rep
    nqp_rxmark rx801_bstack, rxquantr803_done2153, rx801_pos, rx801_rep
    goto rxquantr803_loop2152
  rxquantr803_done2153:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt808_02161
    nqp_push_label $P11, alt808_12165
    nqp_rxmark rx801_bstack, alt808_end2160, -1, 0
    rx801_cur."!alt"(rx801_pos, "alt_nfa__29_1359292302.484", $P11)
    goto rx801_fail2145
  alt808_02161:
    nqp_rxmark rx801_bstack, rxcap809_fail2163, rx801_pos, 0
    add $I11, rx801_pos, 1
    gt $I11, rx801_eos, rx801_fail2145
    substr $S10, rx801_tgt, rx801_pos, 1
    ne $S10, ucs4:"*", rx801_fail2145
    add rx801_pos, 1
    nqp_rxpeek $I19, rx801_bstack, rxcap809_fail2163
    inc $I19
    set $I11, rx801_bstack[$I19]
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx801_pos)
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "quant")
    goto rxcap809_done2162
  rxcap809_fail2163:
    goto rx801_fail2145
  rxcap809_done2162:
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx801_curclass, "$!pos"
    lt $I11, 0, rx801_fail2145
    nqp_rxmark rx801_bstack, rxsubrule810_pass2164, -1, 0
  rxsubrule810_pass2164:
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx801_pos, $P11, rx801_curclass, "$!pos"
    goto alt808_end2160
  alt808_12165:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt811_02167
    nqp_push_label $P11, alt811_12169
    nqp_rxmark rx801_bstack, alt811_end2166, -1, 0
    rx801_cur."!alt"(rx801_pos, "alt_nfa__27_1359292302.484", $P11)
    goto rx801_fail2145
  alt811_02167:
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx801_curclass, "$!pos"
    lt $I11, 0, rx801_fail2145
    nqp_rxmark rx801_bstack, rxsubrule812_pass2168, -1, 0
  rxsubrule812_pass2168:
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx801_pos, $P11, rx801_curclass, "$!pos"
    goto alt811_end2166
  alt811_12169:
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."named_param"()
    repr_get_attr_int $I11, $P11, rx801_curclass, "$!pos"
    lt $I11, 0, rx801_fail2145
    nqp_rxmark rx801_bstack, rxsubrule813_pass2170, -1, 0
  rxsubrule813_pass2170:
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "named_param")
    repr_get_attr_int rx801_pos, $P11, rx801_curclass, "$!pos"
    goto alt811_end2166
  alt811_end2166:
    nqp_rxcommit rx801_bstack, alt811_end2166
    nqp_rxmark rx801_bstack, rxcap814_fail2172, rx801_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt815_02174
    nqp_push_label $P11, alt815_12175
    nqp_push_label $P11, alt815_22176
    nqp_rxmark rx801_bstack, alt815_end2173, -1, 0
    rx801_cur."!alt"(rx801_pos, "alt_nfa__28_1359292302.484", $P11)
    goto rx801_fail2145
  alt815_02174:
    add $I11, rx801_pos, 1
    gt $I11, rx801_eos, rx801_fail2145
    substr $S10, rx801_tgt, rx801_pos, 1
    ne $S10, ucs4:"?", rx801_fail2145
    add rx801_pos, 1
    goto alt815_end2173
  alt815_12175:
    add $I11, rx801_pos, 1
    gt $I11, rx801_eos, rx801_fail2145
    substr $S10, rx801_tgt, rx801_pos, 1
    ne $S10, ucs4:"!", rx801_fail2145
    add rx801_pos, 1
    goto alt815_end2173
  alt815_22176:
    goto alt815_end2173
  alt815_end2173:
    nqp_rxcommit rx801_bstack, alt815_end2173
    nqp_rxpeek $I19, rx801_bstack, rxcap814_fail2172
    inc $I19
    set $I11, rx801_bstack[$I19]
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx801_pos)
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "quant")
    goto rxcap814_done2171
  rxcap814_fail2172:
    goto rx801_fail2145
  rxcap814_done2171:
    goto alt808_end2160
  alt808_end2160:
    nqp_rxcommit rx801_bstack, alt808_end2160
    nqp_rxmark rx801_bstack, rxquantr817_done2179, rx801_pos, 0
  rxquantr817_loop2178:
    repr_bind_attr_int rx801_cur, rx801_curclass, "$!pos", rx801_pos
    $P11 = rx801_cur."default_value"()
    repr_get_attr_int $I11, $P11, rx801_curclass, "$!pos"
    lt $I11, 0, rx801_fail2145
    goto rxsubrule818_pass2180
  rxsubrule818_back2181:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx801_curclass, "$!pos"
    lt $I11, 0, rx801_fail2145
  rxsubrule818_pass2180:
    rx801_cstack = rx801_cur."!cursor_capture"($P11, "default_value")
    set_addr $I11, rxsubrule818_back2181
    push rx801_bstack, $I11
    push rx801_bstack, 0
    push rx801_bstack, rx801_pos
    elements $I11, rx801_cstack
    push rx801_bstack, $I11
    repr_get_attr_int rx801_pos, $P11, rx801_curclass, "$!pos"
    nqp_rxpeek $I19, rx801_bstack, rxquantr817_done2179
    inc $I19
    inc $I19
    set rx801_rep, rx801_bstack[$I19]
    nqp_rxcommit rx801_bstack, rxquantr817_done2179
    inc rx801_rep
  rxquantr817_done2179:
    rx801_cur."!cursor_pass"(rx801_pos, "parameter", 'backtrack'=>1)
    .return (rx801_cur)
  rx801_restart2144:
    repr_get_attr_obj rx801_cstack, rx801_cur, rx801_curclass, "$!cstack"
  rx801_fail2145:
    unless rx801_bstack, rx801_done2143
    pop $I19, rx801_bstack
    if_null rx801_cstack, rx801_cstack_done2148
    unless rx801_cstack, rx801_cstack_done2148
    dec $I19
    set $P11, rx801_cstack[$I19]
  rx801_cstack_done2148:
    pop rx801_rep, rx801_bstack
    pop rx801_pos, rx801_bstack
    pop $I19, rx801_bstack
    lt rx801_pos, -1, rx801_done2143
    lt rx801_pos, 0, rx801_fail2145
    eq $I19, 0, rx801_fail2145
    nqp_islist $I20, rx801_cstack
    unless $I20, rx801_jump2146
    elements $I18, rx801_bstack
    le $I18, 0, rx801_cut2147
    dec $I18
    set $I18, rx801_bstack[$I18]
  rx801_cut2147:
    assign rx801_cstack, $I18
  rx801_jump2146:
    jump $I19
  rx801_done2143:
    rx801_cur."!cursor_fail"()
    .return (rx801_cur) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_129_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1122
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx819_tgt
    .local int rx819_pos
    .local int rx819_off
    .local int rx819_eos
    .local int rx819_rep
    .local pmc rx819_cur
    .local pmc rx819_curclass
    .local pmc rx819_bstack
    .local pmc rx819_cstack
    (rx819_cur, rx819_tgt, rx819_pos, rx819_curclass, rx819_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx819_cur
    length rx819_eos, rx819_tgt
    eq $I19, 1, rx819_restart2184
    gt rx819_pos, rx819_eos, rx819_fail2185
    repr_get_attr_int $I11, self, rx819_curclass, "$!from"
    ne $I11, -1, rxscan820_done2191
    goto rxscan820_scan2190
  rxscan820_loop2189:
    inc rx819_pos
    gt rx819_pos, rx819_eos, rx819_fail2185
    repr_bind_attr_int rx819_cur, rx819_curclass, "$!from", rx819_pos
  rxscan820_scan2190:
    nqp_rxmark rx819_bstack, rxscan820_loop2189, rx819_pos, 0
  rxscan820_done2191:
    repr_bind_attr_int rx819_cur, rx819_curclass, "$!pos", rx819_pos
    $P11 = rx819_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx819_curclass, "$!pos"
    lt $I11, 0, rx819_fail2185
    nqp_rxmark rx819_bstack, rxsubrule821_pass2192, -1, 0
  rxsubrule821_pass2192:
    rx819_cstack = rx819_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx819_pos, $P11, rx819_curclass, "$!pos"
    nqp_rxmark rx819_bstack, rxquantr822_done2194, rx819_pos, 0
  rxquantr822_loop2193:
    repr_bind_attr_int rx819_cur, rx819_curclass, "$!pos", rx819_pos
    $P11 = rx819_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx819_curclass, "$!pos"
    lt $I11, 0, rx819_fail2185
    goto rxsubrule823_pass2195
  rxsubrule823_back2196:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx819_curclass, "$!pos"
    lt $I11, 0, rx819_fail2185
  rxsubrule823_pass2195:
    rx819_cstack = rx819_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule823_back2196
    push rx819_bstack, $I11
    push rx819_bstack, 0
    push rx819_bstack, rx819_pos
    elements $I11, rx819_cstack
    push rx819_bstack, $I11
    repr_get_attr_int rx819_pos, $P11, rx819_curclass, "$!pos"
    nqp_rxpeek $I19, rx819_bstack, rxquantr822_done2194
    inc $I19
    inc $I19
    set rx819_rep, rx819_bstack[$I19]
    nqp_rxcommit rx819_bstack, rxquantr822_done2194
    inc rx819_rep
  rxquantr822_done2194:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt824_02198
    nqp_push_label $P11, alt824_12200
    nqp_rxmark rx819_bstack, alt824_end2197, -1, 0
    rx819_cur."!alt"(rx819_pos, "alt_nfa__30_1359292302.494", $P11)
    goto rx819_fail2185
  alt824_02198:
    repr_bind_attr_int rx819_cur, rx819_curclass, "$!pos", rx819_pos
    $P11 = rx819_cur."ident"()
    repr_get_attr_int $I11, $P11, rx819_curclass, "$!pos"
    lt $I11, 0, rx819_fail2185
    nqp_rxmark rx819_bstack, rxsubrule825_pass2199, -1, 0
  rxsubrule825_pass2199:
    rx819_cstack = rx819_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx819_pos, $P11, rx819_curclass, "$!pos"
    goto alt824_end2197
  alt824_12200:
    nqp_rxmark rx819_bstack, rxcap826_fail2202, rx819_pos, 0
    ge rx819_pos, rx819_eos, rx819_fail2185
    substr $S11, rx819_tgt, rx819_pos, 1
    index $I11, ucs4:"/!", $S11
    lt $I11, 0, rx819_fail2185
    inc rx819_pos
    nqp_rxpeek $I19, rx819_bstack, rxcap826_fail2202
    inc $I19
    set $I11, rx819_bstack[$I19]
    repr_bind_attr_int rx819_cur, rx819_curclass, "$!pos", rx819_pos
    $P11 = rx819_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx819_pos)
    rx819_cstack = rx819_cur."!cursor_capture"($P11, "name")
    goto rxcap826_done2201
  rxcap826_fail2202:
    goto rx819_fail2185
  rxcap826_done2201:
    goto alt824_end2197
  alt824_end2197:
    nqp_rxcommit rx819_bstack, alt824_end2197
    rx819_cur."!cursor_pass"(rx819_pos, "param_var", 'backtrack'=>1)
    .return (rx819_cur)
  rx819_restart2184:
    repr_get_attr_obj rx819_cstack, rx819_cur, rx819_curclass, "$!cstack"
  rx819_fail2185:
    unless rx819_bstack, rx819_done2183
    pop $I19, rx819_bstack
    if_null rx819_cstack, rx819_cstack_done2188
    unless rx819_cstack, rx819_cstack_done2188
    dec $I19
    set $P11, rx819_cstack[$I19]
  rx819_cstack_done2188:
    pop rx819_rep, rx819_bstack
    pop rx819_pos, rx819_bstack
    pop $I19, rx819_bstack
    lt rx819_pos, -1, rx819_done2183
    lt rx819_pos, 0, rx819_fail2185
    eq $I19, 0, rx819_fail2185
    nqp_islist $I20, rx819_cstack
    unless $I20, rx819_jump2186
    elements $I18, rx819_bstack
    le $I18, 0, rx819_cut2187
    dec $I18
    set $I18, rx819_bstack[$I18]
  rx819_cut2187:
    assign rx819_cstack, $I18
  rx819_jump2186:
    jump $I19
  rx819_done2183:
    rx819_cur."!cursor_fail"()
    .return (rx819_cur) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_130_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1127
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx827_tgt
    .local int rx827_pos
    .local int rx827_off
    .local int rx827_eos
    .local int rx827_rep
    .local pmc rx827_cur
    .local pmc rx827_curclass
    .local pmc rx827_bstack
    .local pmc rx827_cstack
    (rx827_cur, rx827_tgt, rx827_pos, rx827_curclass, rx827_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx827_cur
    length rx827_eos, rx827_tgt
    eq $I19, 1, rx827_restart2205
    gt rx827_pos, rx827_eos, rx827_fail2206
    repr_get_attr_int $I11, self, rx827_curclass, "$!from"
    ne $I11, -1, rxscan828_done2212
    goto rxscan828_scan2211
  rxscan828_loop2210:
    inc rx827_pos
    gt rx827_pos, rx827_eos, rx827_fail2206
    repr_bind_attr_int rx827_cur, rx827_curclass, "$!from", rx827_pos
  rxscan828_scan2211:
    nqp_rxmark rx827_bstack, rxscan828_loop2210, rx827_pos, 0
  rxscan828_done2212:
    add $I11, rx827_pos, 1
    gt $I11, rx827_eos, rx827_fail2206
    substr $S10, rx827_tgt, rx827_pos, 1
    ne $S10, ucs4:":", rx827_fail2206
    add rx827_pos, 1
    repr_bind_attr_int rx827_cur, rx827_curclass, "$!pos", rx827_pos
    $P11 = rx827_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx827_curclass, "$!pos"
    lt $I11, 0, rx827_fail2206
    nqp_rxmark rx827_bstack, rxsubrule829_pass2213, -1, 0
  rxsubrule829_pass2213:
    rx827_cstack = rx827_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx827_pos, $P11, rx827_curclass, "$!pos"
    rx827_cur."!cursor_pass"(rx827_pos, "named_param", 'backtrack'=>1)
    .return (rx827_cur)
  rx827_restart2205:
    repr_get_attr_obj rx827_cstack, rx827_cur, rx827_curclass, "$!cstack"
  rx827_fail2206:
    unless rx827_bstack, rx827_done2204
    pop $I19, rx827_bstack
    if_null rx827_cstack, rx827_cstack_done2209
    unless rx827_cstack, rx827_cstack_done2209
    dec $I19
    set $P11, rx827_cstack[$I19]
  rx827_cstack_done2209:
    pop rx827_rep, rx827_bstack
    pop rx827_pos, rx827_bstack
    pop $I19, rx827_bstack
    lt rx827_pos, -1, rx827_done2204
    lt rx827_pos, 0, rx827_fail2206
    eq $I19, 0, rx827_fail2206
    nqp_islist $I20, rx827_cstack
    unless $I20, rx827_jump2207
    elements $I18, rx827_bstack
    le $I18, 0, rx827_cut2208
    dec $I18
    set $I18, rx827_bstack[$I18]
  rx827_cut2208:
    assign rx827_cstack, $I18
  rx827_jump2207:
    jump $I19
  rx827_done2204:
    rx827_cur."!cursor_fail"()
    .return (rx827_cur) 
.end
.HLL "nqp"
.namespace []
.sub "default_value" :subid("cuid_131_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1131
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx830_tgt
    .local int rx830_pos
    .local int rx830_off
    .local int rx830_eos
    .local int rx830_rep
    .local pmc rx830_cur
    .local pmc rx830_curclass
    .local pmc rx830_bstack
    .local pmc rx830_cstack
    (rx830_cur, rx830_tgt, rx830_pos, rx830_curclass, rx830_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx830_cur
    length rx830_eos, rx830_tgt
    eq $I19, 1, rx830_restart2216
    gt rx830_pos, rx830_eos, rx830_fail2217
    repr_get_attr_int $I11, self, rx830_curclass, "$!from"
    ne $I11, -1, rxscan831_done2223
    goto rxscan831_scan2222
  rxscan831_loop2221:
    inc rx830_pos
    gt rx830_pos, rx830_eos, rx830_fail2217
    repr_bind_attr_int rx830_cur, rx830_curclass, "$!from", rx830_pos
  rxscan831_scan2222:
    nqp_rxmark rx830_bstack, rxscan831_loop2221, rx830_pos, 0
  rxscan831_done2223:
    repr_bind_attr_int rx830_cur, rx830_curclass, "$!pos", rx830_pos
    $P11 = rx830_cur."ws"()
    repr_get_attr_int $I11, $P11, rx830_curclass, "$!pos"
    lt $I11, 0, rx830_fail2217
    repr_get_attr_int rx830_pos, $P11, rx830_curclass, "$!pos"
    add $I11, rx830_pos, 1
    gt $I11, rx830_eos, rx830_fail2217
    substr $S10, rx830_tgt, rx830_pos, 1
    ne $S10, ucs4:"=", rx830_fail2217
    add rx830_pos, 1
    repr_bind_attr_int rx830_cur, rx830_curclass, "$!pos", rx830_pos
    $P11 = rx830_cur."ws"()
    repr_get_attr_int $I11, $P11, rx830_curclass, "$!pos"
    lt $I11, 0, rx830_fail2217
    repr_get_attr_int rx830_pos, $P11, rx830_curclass, "$!pos"
    repr_bind_attr_int rx830_cur, rx830_curclass, "$!pos", rx830_pos
    $P11 = rx830_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx830_curclass, "$!pos"
    lt $I11, 0, rx830_fail2217
    nqp_rxmark rx830_bstack, rxsubrule834_pass2226, -1, 0
  rxsubrule834_pass2226:
    rx830_cstack = rx830_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx830_pos, $P11, rx830_curclass, "$!pos"
    repr_bind_attr_int rx830_cur, rx830_curclass, "$!pos", rx830_pos
    $P11 = rx830_cur."ws"()
    repr_get_attr_int $I11, $P11, rx830_curclass, "$!pos"
    lt $I11, 0, rx830_fail2217
    repr_get_attr_int rx830_pos, $P11, rx830_curclass, "$!pos"
    rx830_cur."!cursor_pass"(rx830_pos, "default_value", 'backtrack'=>1)
    .return (rx830_cur)
  rx830_restart2216:
    repr_get_attr_obj rx830_cstack, rx830_cur, rx830_curclass, "$!cstack"
  rx830_fail2217:
    unless rx830_bstack, rx830_done2215
    pop $I19, rx830_bstack
    if_null rx830_cstack, rx830_cstack_done2220
    unless rx830_cstack, rx830_cstack_done2220
    dec $I19
    set $P11, rx830_cstack[$I19]
  rx830_cstack_done2220:
    pop rx830_rep, rx830_bstack
    pop rx830_pos, rx830_bstack
    pop $I19, rx830_bstack
    lt rx830_pos, -1, rx830_done2215
    lt rx830_pos, 0, rx830_fail2217
    eq $I19, 0, rx830_fail2217
    nqp_islist $I20, rx830_cstack
    unless $I20, rx830_jump2218
    elements $I18, rx830_bstack
    le $I18, 0, rx830_cut2219
    dec $I18
    set $I18, rx830_bstack[$I18]
  rx830_cut2219:
    assign rx830_cstack, $I18
  rx830_jump2218:
    jump $I19
  rx830_done2215:
    rx830_cur."!cursor_fail"()
    .return (rx830_cur) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_132_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1133
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx836_tgt
    .local int rx836_pos
    .local int rx836_off
    .local int rx836_eos
    .local int rx836_rep
    .local pmc rx836_cur
    .local pmc rx836_curclass
    .local pmc rx836_bstack
    .local pmc rx836_cstack
    (rx836_cur, rx836_tgt, rx836_pos, rx836_curclass, rx836_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx836_cur
    length rx836_eos, rx836_tgt
    eq $I19, 1, rx836_restart2230
    gt rx836_pos, rx836_eos, rx836_fail2231
    repr_get_attr_int $I11, self, rx836_curclass, "$!from"
    ne $I11, -1, rxscan837_done2237
    goto rxscan837_scan2236
  rxscan837_loop2235:
    inc rx836_pos
    gt rx836_pos, rx836_eos, rx836_fail2231
    repr_bind_attr_int rx836_cur, rx836_curclass, "$!from", rx836_pos
  rxscan837_scan2236:
    nqp_rxmark rx836_bstack, rxscan837_loop2235, rx836_pos, 0
  rxscan837_done2237:
    repr_bind_attr_int rx836_cur, rx836_curclass, "$!pos", rx836_pos
    $P11 = rx836_cur."ws"()
    repr_get_attr_int $I11, $P11, rx836_curclass, "$!pos"
    lt $I11, 0, rx836_fail2231
    repr_get_attr_int rx836_pos, $P11, rx836_curclass, "$!pos"
    repr_bind_attr_int rx836_cur, rx836_curclass, "$!pos", rx836_pos
    $P11 = rx836_cur."trait_mod"()
    repr_get_attr_int $I11, $P11, rx836_curclass, "$!pos"
    lt $I11, 0, rx836_fail2231
    nqp_rxmark rx836_bstack, rxsubrule839_pass2239, -1, 0
  rxsubrule839_pass2239:
    rx836_cstack = rx836_cur."!cursor_capture"($P11, "trait_mod")
    repr_get_attr_int rx836_pos, $P11, rx836_curclass, "$!pos"
    repr_bind_attr_int rx836_cur, rx836_curclass, "$!pos", rx836_pos
    $P11 = rx836_cur."ws"()
    repr_get_attr_int $I11, $P11, rx836_curclass, "$!pos"
    lt $I11, 0, rx836_fail2231
    repr_get_attr_int rx836_pos, $P11, rx836_curclass, "$!pos"
    rx836_cur."!cursor_pass"(rx836_pos, "trait", 'backtrack'=>1)
    .return (rx836_cur)
  rx836_restart2230:
    repr_get_attr_obj rx836_cstack, rx836_cur, rx836_curclass, "$!cstack"
  rx836_fail2231:
    unless rx836_bstack, rx836_done2229
    pop $I19, rx836_bstack
    if_null rx836_cstack, rx836_cstack_done2234
    unless rx836_cstack, rx836_cstack_done2234
    dec $I19
    set $P11, rx836_cstack[$I19]
  rx836_cstack_done2234:
    pop rx836_rep, rx836_bstack
    pop rx836_pos, rx836_bstack
    pop $I19, rx836_bstack
    lt rx836_pos, -1, rx836_done2229
    lt rx836_pos, 0, rx836_fail2231
    eq $I19, 0, rx836_fail2231
    nqp_islist $I20, rx836_cstack
    unless $I20, rx836_jump2232
    elements $I18, rx836_bstack
    le $I18, 0, rx836_cut2233
    dec $I18
    set $I18, rx836_bstack[$I18]
  rx836_cut2233:
    assign rx836_cstack, $I18
  rx836_jump2232:
    jump $I19
  rx836_done2229:
    rx836_cur."!cursor_fail"()
    .return (rx836_cur) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod" :subid("cuid_133_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1135
    .param pmc self 
    $P5001 = self."!protoregex"("trait_mod")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_134_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1136
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx841_tgt
    .local int rx841_pos
    .local int rx841_off
    .local int rx841_eos
    .local int rx841_rep
    .local pmc rx841_cur
    .local pmc rx841_curclass
    .local pmc rx841_bstack
    .local pmc rx841_cstack
    (rx841_cur, rx841_tgt, rx841_pos, rx841_curclass, rx841_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx841_cur
    length rx841_eos, rx841_tgt
    eq $I19, 1, rx841_restart2243
    gt rx841_pos, rx841_eos, rx841_fail2244
    repr_get_attr_int $I11, self, rx841_curclass, "$!from"
    ne $I11, -1, rxscan842_done2250
    goto rxscan842_scan2249
  rxscan842_loop2248:
    inc rx841_pos
    gt rx841_pos, rx841_eos, rx841_fail2244
    repr_bind_attr_int rx841_cur, rx841_curclass, "$!from", rx841_pos
  rxscan842_scan2249:
    nqp_rxmark rx841_bstack, rxscan842_loop2248, rx841_pos, 0
  rxscan842_done2250:
    nqp_rxmark rx841_bstack, rxcap843_fail2252, rx841_pos, 0
    add $I11, rx841_pos, 2
    gt $I11, rx841_eos, rx841_fail2244
    substr $S10, rx841_tgt, rx841_pos, 2
    ne $S10, ucs4:"is", rx841_fail2244
    add rx841_pos, 2
    nqp_rxpeek $I19, rx841_bstack, rxcap843_fail2252
    inc $I19
    set $I11, rx841_bstack[$I19]
    repr_bind_attr_int rx841_cur, rx841_curclass, "$!pos", rx841_pos
    $P11 = rx841_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx841_pos)
    rx841_cstack = rx841_cur."!cursor_capture"($P11, "sym")
    goto rxcap843_done2251
  rxcap843_fail2252:
    goto rx841_fail2244
  rxcap843_done2251:
    repr_bind_attr_int rx841_cur, rx841_curclass, "$!pos", rx841_pos
    $P11 = rx841_cur."ws"()
    repr_get_attr_int $I11, $P11, rx841_curclass, "$!pos"
    lt $I11, 0, rx841_fail2244
    repr_get_attr_int rx841_pos, $P11, rx841_curclass, "$!pos"
    repr_bind_attr_int rx841_cur, rx841_curclass, "$!pos", rx841_pos
    $P11 = rx841_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx841_curclass, "$!pos"
    lt $I11, 0, rx841_fail2244
    nqp_rxmark rx841_bstack, rxsubrule845_pass2254, -1, 0
  rxsubrule845_pass2254:
    rx841_cstack = rx841_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx841_pos, $P11, rx841_curclass, "$!pos"
    nqp_rxmark rx841_bstack, rxquantr846_done2256, rx841_pos, 0
  rxquantr846_loop2255:
    repr_bind_attr_int rx841_cur, rx841_curclass, "$!pos", rx841_pos
    $P11 = rx841_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx841_curclass, "$!pos"
    lt $I11, 0, rx841_fail2244
    goto rxsubrule847_pass2257
  rxsubrule847_back2258:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx841_curclass, "$!pos"
    lt $I11, 0, rx841_fail2244
  rxsubrule847_pass2257:
    rx841_cstack = rx841_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule847_back2258
    push rx841_bstack, $I11
    push rx841_bstack, 0
    push rx841_bstack, rx841_pos
    elements $I11, rx841_cstack
    push rx841_bstack, $I11
    repr_get_attr_int rx841_pos, $P11, rx841_curclass, "$!pos"
    nqp_rxpeek $I19, rx841_bstack, rxquantr846_done2256
    inc $I19
    inc $I19
    set rx841_rep, rx841_bstack[$I19]
    nqp_rxcommit rx841_bstack, rxquantr846_done2256
    inc rx841_rep
  rxquantr846_done2256:
    repr_bind_attr_int rx841_cur, rx841_curclass, "$!pos", rx841_pos
    $P11 = rx841_cur."ws"()
    repr_get_attr_int $I11, $P11, rx841_curclass, "$!pos"
    lt $I11, 0, rx841_fail2244
    repr_get_attr_int rx841_pos, $P11, rx841_curclass, "$!pos"
    rx841_cur."!cursor_pass"(rx841_pos, "trait_mod:sym<is>", 'backtrack'=>1)
    .return (rx841_cur)
  rx841_restart2243:
    repr_get_attr_obj rx841_cstack, rx841_cur, rx841_curclass, "$!cstack"
  rx841_fail2244:
    unless rx841_bstack, rx841_done2242
    pop $I19, rx841_bstack
    if_null rx841_cstack, rx841_cstack_done2247
    unless rx841_cstack, rx841_cstack_done2247
    dec $I19
    set $P11, rx841_cstack[$I19]
  rx841_cstack_done2247:
    pop rx841_rep, rx841_bstack
    pop rx841_pos, rx841_bstack
    pop $I19, rx841_bstack
    lt rx841_pos, -1, rx841_done2242
    lt rx841_pos, 0, rx841_fail2244
    eq $I19, 0, rx841_fail2244
    nqp_islist $I20, rx841_cstack
    unless $I20, rx841_jump2245
    elements $I18, rx841_bstack
    le $I18, 0, rx841_cut2246
    dec $I18
    set $I18, rx841_bstack[$I18]
  rx841_cut2246:
    assign rx841_cstack, $I18
  rx841_jump2245:
    jump $I19
  rx841_done2242:
    rx841_cur."!cursor_fail"()
    .return (rx841_cur) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_135_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1138
    .param pmc _lex_param_0 
    .const 'Sub' $P5012 = 'cuid_404_1359292300.247' 
    capture_lex $P5012 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx849_tgt
    .local int rx849_pos
    .local int rx849_off
    .local int rx849_eos
    .local int rx849_rep
    .local pmc rx849_cur
    .local pmc rx849_curclass
    .local pmc rx849_bstack
    .local pmc rx849_cstack
    (rx849_cur, rx849_tgt, rx849_pos, rx849_curclass, rx849_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx849_cur
    length rx849_eos, rx849_tgt
    eq $I19, 1, rx849_restart2262
    gt rx849_pos, rx849_eos, rx849_fail2263
    repr_get_attr_int $I11, self, rx849_curclass, "$!from"
    ne $I11, -1, rxscan850_done2269
    goto rxscan850_scan2268
  rxscan850_loop2267:
    inc rx849_pos
    gt rx849_pos, rx849_eos, rx849_fail2263
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!from", rx849_pos
  rxscan850_scan2268:
    nqp_rxmark rx849_bstack, rxscan850_loop2267, rx849_pos, 0
  rxscan850_done2269:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt851_02271
    nqp_push_label $P11, alt851_12311
    nqp_rxmark rx849_bstack, alt851_end2270, -1, 0
    rx849_cur."!alt"(rx849_pos, "alt_nfa__33_1359292302.6", $P11)
    goto rx849_fail2263
  alt851_02271:
    nqp_rxmark rx849_bstack, rxcap852_fail2273, rx849_pos, 0
    add $I11, rx849_pos, 5
    gt $I11, rx849_eos, rx849_fail2263
    substr $S10, rx849_tgt, rx849_pos, 5
    ne $S10, ucs4:"proto", rx849_fail2263
    add rx849_pos, 5
    nqp_rxpeek $I19, rx849_bstack, rxcap852_fail2273
    inc $I19
    set $I11, rx849_bstack[$I19]
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx849_pos)
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "proto")
    goto rxcap852_done2272
  rxcap852_fail2273:
    goto rx849_fail2263
  rxcap852_done2272:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt854_02276
    nqp_push_label $P11, alt854_12277
    nqp_push_label $P11, alt854_22278
    nqp_rxmark rx849_bstack, alt854_end2275, -1, 0
    rx849_cur."!alt"(rx849_pos, "alt_nfa__31_1359292302.599", $P11)
    goto rx849_fail2263
  alt854_02276:
    add $I11, rx849_pos, 5
    gt $I11, rx849_eos, rx849_fail2263
    substr $S10, rx849_tgt, rx849_pos, 5
    ne $S10, ucs4:"regex", rx849_fail2263
    add rx849_pos, 5
    goto alt854_end2275
  alt854_12277:
    add $I11, rx849_pos, 5
    gt $I11, rx849_eos, rx849_fail2263
    substr $S10, rx849_tgt, rx849_pos, 5
    ne $S10, ucs4:"token", rx849_fail2263
    add rx849_pos, 5
    goto alt854_end2275
  alt854_22278:
    add $I11, rx849_pos, 4
    gt $I11, rx849_eos, rx849_fail2263
    substr $S10, rx849_tgt, rx849_pos, 4
    ne $S10, ucs4:"rule", rx849_fail2263
    add rx849_pos, 4
    goto alt854_end2275
  alt854_end2275:
    nqp_rxcommit rx849_bstack, alt854_end2275
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
  alt856_02281:
    nqp_rxmark rx849_bstack, alt856_12287, rx849_pos, 0
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 3
    gt $I11, rx849_eos, rx849_fail2263
    substr $S10, rx849_tgt, rx849_pos, 3
    ne $S10, ucs4:"::(", rx849_fail2263
    add rx849_pos, 3
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."variable"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    nqp_rxmark rx849_bstack, rxsubrule859_pass2284, -1, 0
  rxsubrule859_pass2284:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2263
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:")", rx849_fail2263
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    goto alt856_end2280
  alt856_12287:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    nqp_rxmark rx849_bstack, rxsubrule863_pass2289, -1, 0
  rxsubrule863_pass2289:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
  alt856_end2280:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
  alt866_02293:
    nqp_rxmark rx849_bstack, alt866_12296, rx849_pos, 0
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 3
    gt $I11, rx849_eos, rx849_fail2263
    substr $S10, rx849_tgt, rx849_pos, 3
    ne $S10, ucs4:"{*}", rx849_fail2263
    add rx849_pos, 3
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    goto alt866_end2292
  alt866_12296:
    nqp_rxmark rx849_bstack, alt866_22301, rx849_pos, 0
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2263
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:"{", rx849_fail2263
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 5
    gt $I11, rx849_eos, rx849_fail2263
    substr $S10, rx849_tgt, rx849_pos, 5
    ne $S10, ucs4:"<...>", rx849_fail2263
    add rx849_pos, 5
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2263
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:"}", rx849_fail2263
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    goto alt866_end2292
  alt866_22301:
    nqp_rxmark rx849_bstack, alt866_32306, rx849_pos, 0
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2263
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:"{", rx849_fail2263
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 3
    gt $I11, rx849_eos, rx849_fail2263
    substr $S10, rx849_tgt, rx849_pos, 3
    ne $S10, ucs4:"<*>", rx849_fail2263
    add rx849_pos, 3
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2263
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:"}", rx849_fail2263
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    goto alt866_end2292
  alt866_32306:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."panic"("Proto regex body must be \\{*\\} (or <*> or <...>, which are deprecated)")
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
  alt866_end2292:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    goto alt851_end2270
  alt851_12311:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    nqp_rxmark rx849_bstack, rxcap882_fail2314, rx849_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt883_02316
    nqp_push_label $P11, alt883_12317
    nqp_push_label $P11, alt883_22318
    nqp_rxmark rx849_bstack, alt883_end2315, -1, 0
    rx849_cur."!alt"(rx849_pos, "alt_nfa__32_1359292302.6", $P11)
    goto rx849_fail2263
  alt883_02316:
    add $I11, rx849_pos, 5
    gt $I11, rx849_eos, rx849_fail2263
    substr $S10, rx849_tgt, rx849_pos, 5
    ne $S10, ucs4:"regex", rx849_fail2263
    add rx849_pos, 5
    goto alt883_end2315
  alt883_12317:
    add $I11, rx849_pos, 5
    gt $I11, rx849_eos, rx849_fail2263
    substr $S10, rx849_tgt, rx849_pos, 5
    ne $S10, ucs4:"token", rx849_fail2263
    add rx849_pos, 5
    goto alt883_end2315
  alt883_22318:
    add $I11, rx849_pos, 4
    gt $I11, rx849_eos, rx849_fail2263
    substr $S10, rx849_tgt, rx849_pos, 4
    ne $S10, ucs4:"rule", rx849_fail2263
    add rx849_pos, 4
    goto alt883_end2315
  alt883_end2315:
    nqp_rxcommit rx849_bstack, alt883_end2315
    nqp_rxpeek $I19, rx849_bstack, rxcap882_fail2314
    inc $I19
    set $I11, rx849_bstack[$I19]
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx849_pos)
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "sym")
    goto rxcap882_done2313
  rxcap882_fail2314:
    goto rx849_fail2263
  rxcap882_done2313:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
  alt886_02322:
    nqp_rxmark rx849_bstack, alt886_12328, rx849_pos, 0
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 3
    gt $I11, rx849_eos, rx849_fail2263
    substr $S10, rx849_tgt, rx849_pos, 3
    ne $S10, ucs4:"::(", rx849_fail2263
    add rx849_pos, 3
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."variable"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    nqp_rxmark rx849_bstack, rxsubrule889_pass2325, -1, 0
  rxsubrule889_pass2325:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2263
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:")", rx849_fail2263
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    goto alt886_end2321
  alt886_12328:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    nqp_rxmark rx849_bstack, rxsubrule893_pass2330, -1, 0
  rxsubrule893_pass2330:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
  alt886_end2321:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    nqp_rxmark rx849_bstack, rxquantr898_done2336, rx849_pos, 0
  rxquantr898_loop2335:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2263
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:"(", rx849_fail2263
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."signature"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    nqp_rxmark rx849_bstack, rxsubrule901_pass2339, -1, 0
  rxsubrule901_pass2339:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2263
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:")", rx849_fail2263
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    nqp_rxpeek $I19, rx849_bstack, rxquantr898_done2336
    inc $I19
    inc $I19
    set rx849_rep, rx849_bstack[$I19]
    nqp_rxcommit rx849_bstack, rxquantr898_done2336
    inc rx849_rep
  rxquantr898_done2336:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    store_lex unicode:"$\x{a2}", rx849_cur
    unless_null $P101, fallback2343
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2344
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2344:
    unless_null $P5002, vivi_9052345
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_9052345:
    set $P101, $P5002
  fallback2343:
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    store_lex unicode:"$\x{a2}", rx849_cur
    $P5009 = $P102."MATCH"()
    set $P103, $P5009
    .const 'Sub' $P5010 = 'cuid_404_1359292300.247' 
    capture_lex $P5010
    $P5011 = $P5010()
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2263
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:"{", rx849_fail2263
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    nqp_rxmark rx849_bstack, rxsubrule917_pass2386, -1, 0
  rxsubrule917_pass2386:
    rx849_cstack = rx849_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    add $I11, rx849_pos, 1
    gt $I11, rx849_eos, rx849_fail2263
    substr $S10, rx849_tgt, rx849_pos, 1
    ne $S10, ucs4:"}", rx849_fail2263
    add rx849_pos, 1
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_bind_attr_int rx849_cur, rx849_curclass, "$!pos", rx849_pos
    $P11 = rx849_cur."ws"()
    repr_get_attr_int $I11, $P11, rx849_curclass, "$!pos"
    lt $I11, 0, rx849_fail2263
    repr_get_attr_int rx849_pos, $P11, rx849_curclass, "$!pos"
    goto alt851_end2270
  alt851_end2270:
    nqp_rxcommit rx849_bstack, alt851_end2270
    rx849_cur."!cursor_pass"(rx849_pos, "regex_declarator", 'backtrack'=>1)
    .return (rx849_cur)
  rx849_restart2262:
    repr_get_attr_obj rx849_cstack, rx849_cur, rx849_curclass, "$!cstack"
  rx849_fail2263:
    unless rx849_bstack, rx849_done2261
    pop $I19, rx849_bstack
    if_null rx849_cstack, rx849_cstack_done2266
    unless rx849_cstack, rx849_cstack_done2266
    dec $I19
    set $P11, rx849_cstack[$I19]
  rx849_cstack_done2266:
    pop rx849_rep, rx849_bstack
    pop rx849_pos, rx849_bstack
    pop $I19, rx849_bstack
    lt rx849_pos, -1, rx849_done2261
    lt rx849_pos, 0, rx849_fail2263
    eq $I19, 0, rx849_fail2263
    nqp_islist $I20, rx849_cstack
    unless $I20, rx849_jump2264
    elements $I18, rx849_bstack
    le $I18, 0, rx849_cut2265
    dec $I18
    set $I18, rx849_bstack[$I18]
  rx849_cut2265:
    assign rx849_cstack, $I18
  rx849_jump2264:
    jump $I19
  rx849_done2261:
    rx849_cur."!cursor_fail"()
    .return (rx849_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_404_1359292300.247") :anon :lex :outer("cuid_135_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1159

    find_dynamic_lex $P5001, "%*RX"
    unless_null $P5001, fallback2347
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2348
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2348:
    unless_null $P5002, vivi_9072349
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_9072349:
    set $P5001, $P5002
  fallback2347:
    find_lex $P5010, "$/"
    unless_null $P5010, fallback2350
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5011
  fallback2350:
    set $P5009, $P5010["sym"]
    unless_null $P5009, fallback2351
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5012
  fallback2351:
    set $S5001, $P5009
    iseq $I5001, $S5001, "rule"
    box $P5013, $I5001
    set $P5001["s"], $P5013
    find_dynamic_lex $P5014, "%*RX"
    unless_null $P5014, fallback2352
    nqp_get_sc_object $P5017, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["%RX"]
    unless_null $P5015, fallback2353
    nqp_get_sc_object $P5019, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%RX"], $P5020
    set $P5015, $P5020
  fallback2353:
    unless_null $P5015, vivi_9082354
    die "Contextual %*RX not found"
    box $P5021, "Contextual %*RX not found"
    set $P5015, $P5021
  vivi_9082354:
    set $P5014, $P5015
  fallback2352:
    find_lex $P5023, "$/"
    unless_null $P5023, fallback2357
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5023, $P5024
  fallback2357:
    set $P5022, $P5023["sym"]
    unless_null $P5022, fallback2358
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5022, $P5025
  fallback2358:
    set $S5002, $P5022
    iseq $I5002, $S5002, "token"
    set $I5004, $I5002
    if $I5002 goto unless909_end2356 
    find_lex $P5027, "$/"
    unless_null $P5027, fallback2359
    nqp_get_sc_object $P5028, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5027, $P5028
  fallback2359:
    set $P5026, $P5027["sym"]
    unless_null $P5026, fallback2360
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5026, $P5029
  fallback2360:
    set $S5003, $P5026
    iseq $I5003, $S5003, "rule"
    set $I5004, $I5003
  unless909_end2356:
    box $P5030, $I5004
    set $P5014["r"], $P5030
    find_dynamic_lex $P5031, "%*RX"
    unless_null $P5031, fallback2361
    nqp_get_sc_object $P5034, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%RX"]
    unless_null $P5032, fallback2362
    nqp_get_sc_object $P5036, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%RX"], $P5037
    set $P5032, $P5037
  fallback2362:
    unless_null $P5032, vivi_9102363
    die "Contextual %*RX not found"
    box $P5038, "Contextual %*RX not found"
    set $P5032, $P5038
  vivi_9102363:
    set $P5031, $P5032
  fallback2361:
    find_lex $P5040, "$/"
    unless_null $P5040, fallback2366
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5040, $P5041
  fallback2366:
    set $P5039, $P5040["deflongname"]
    unless_null $P5039, fallback2367
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5039, $P5042
  fallback2367:
    unless $P5039 goto if911_else2364 
.annotate 'line', 1162
    find_lex $P5044, "$/"
    unless_null $P5044, fallback2368
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5044, $P5045
  fallback2368:
    set $P5043, $P5044["deflongname"]
    unless_null $P5043, fallback2369
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5043, $P5046
  fallback2369:
    $P5047 = $P5043."ast"()
    set $P5052, $P5047
    goto if911_end2365
  if911_else2364:
    find_lex $P5049, "$/"
    unless_null $P5049, fallback2370
    nqp_get_sc_object $P5050, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5049, $P5050
  fallback2370:
    set $P5048, $P5049["latename"]
    unless_null $P5048, fallback2371
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5048, $P5051
  fallback2371:
    set $S5005, $P5048
    concat $S5004, "!!LATENAME!!", $S5005
    box $P5053, $S5004
    set $P5052, $P5053
  if911_end2365:
    set $P5031["name"], $P5052
    find_dynamic_lex $P5054, "%*RX"
    unless_null $P5054, fallback2372
    nqp_get_sc_object $P5057, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["%RX"]
    unless_null $P5055, fallback2373
    nqp_get_sc_object $P5059, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5058, $P5059
    new $P5060, 'Hash'
    set $P5058["%RX"], $P5060
    set $P5055, $P5060
  fallback2373:
    unless_null $P5055, vivi_9122374
    die "Contextual %*RX not found"
    box $P5061, "Contextual %*RX not found"
    set $P5055, $P5061
  vivi_9122374:
    set $P5054, $P5055
  fallback2372:
.annotate 'line', 1163
    find_dynamic_lex $P5062, "$*W"
    unless_null $P5062, fallback2375
    nqp_get_sc_object $P5065, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$W"]
    unless_null $P5063, fallback2376
    nqp_get_sc_object $P5066, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5063, $P5066
  fallback2376:
    unless_null $P5063, vivi_9132377
    die "Contextual $*W not found"
    box $P5067, "Contextual $*W not found"
    set $P5063, $P5067
  vivi_9132377:
    set $P5062, $P5063
  fallback2375:
    find_dynamic_lex $P5068, "$*W"
    unless_null $P5068, fallback2378
    nqp_get_sc_object $P5071, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5070, $P5071
    set $P5069, $P5070["$W"]
    unless_null $P5069, fallback2379
    nqp_get_sc_object $P5072, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5069, $P5072
  fallback2379:
    unless_null $P5069, vivi_9142380
    die "Contextual $*W not found"
    box $P5073, "Contextual $*W not found"
    set $P5069, $P5073
  vivi_9142380:
    set $P5068, $P5069
  fallback2378:
    $P5074 = $P5068."cur_lexpad"()
    find_dynamic_lex $P5076, "%*RX"
    unless_null $P5076, fallback2381
    nqp_get_sc_object $P5079, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5078, $P5079
    set $P5077, $P5078["%RX"]
    unless_null $P5077, fallback2382
    nqp_get_sc_object $P5081, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5080, $P5081
    new $P5082, 'Hash'
    set $P5080["%RX"], $P5082
    set $P5077, $P5082
  fallback2382:
    unless_null $P5077, vivi_9152383
    die "Contextual %*RX not found"
    box $P5083, "Contextual %*RX not found"
    set $P5077, $P5083
  vivi_9152383:
    set $P5076, $P5077
  fallback2381:
    set $P5075, $P5076["name"]
    unless_null $P5075, fallback2384
    nqp_get_sc_object $P5084, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5075, $P5084
  fallback2384:
    $P5085 = $P5062."create_code"($P5074, $P5075, 0, "NQPRegex" :named("code_type_name"))
    set $P5054["code"], $P5085
    .return ($P5085) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_136_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1169
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx919_tgt
    .local int rx919_pos
    .local int rx919_off
    .local int rx919_eos
    .local int rx919_rep
    .local pmc rx919_cur
    .local pmc rx919_curclass
    .local pmc rx919_bstack
    .local pmc rx919_cstack
    (rx919_cur, rx919_tgt, rx919_pos, rx919_curclass, rx919_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx919_cur
    length rx919_eos, rx919_tgt
    eq $I19, 1, rx919_restart2390
    gt rx919_pos, rx919_eos, rx919_fail2391
    repr_get_attr_int $I11, self, rx919_curclass, "$!from"
    ne $I11, -1, rxscan920_done2397
    goto rxscan920_scan2396
  rxscan920_loop2395:
    inc rx919_pos
    gt rx919_pos, rx919_eos, rx919_fail2391
    repr_bind_attr_int rx919_cur, rx919_curclass, "$!from", rx919_pos
  rxscan920_scan2396:
    nqp_rxmark rx919_bstack, rxscan920_loop2395, rx919_pos, 0
  rxscan920_done2397:
    add $I11, rx919_pos, 1
    gt $I11, rx919_eos, rx919_fail2391
    substr $S10, rx919_tgt, rx919_pos, 1
    ne $S10, ucs4:".", rx919_fail2391
    add rx919_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt921_02399
    nqp_push_label $P11, alt921_12401
    nqp_rxmark rx919_bstack, alt921_end2398, -1, 0
    rx919_cur."!alt"(rx919_pos, "alt_nfa__34_1359292302.623", $P11)
    goto rx919_fail2391
  alt921_02399:
    repr_bind_attr_int rx919_cur, rx919_curclass, "$!pos", rx919_pos
    $P11 = rx919_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx919_curclass, "$!pos"
    lt $I11, 0, rx919_fail2391
    nqp_rxmark rx919_bstack, rxsubrule922_pass2400, -1, 0
  rxsubrule922_pass2400:
    rx919_cstack = rx919_cur."!cursor_capture"($P11, "longname=deflongname")
    repr_get_attr_int rx919_pos, $P11, rx919_curclass, "$!pos"
    goto alt921_end2398
  alt921_12401:
    ge rx919_pos, rx919_eos, rx919_fail2391
    substr $S11, rx919_tgt, rx919_pos, 1
    index $I11, ucs4:"'\"", $S11
    lt $I11, 0, rx919_fail2391
    repr_bind_attr_int rx919_cur, rx919_curclass, "$!pos", rx919_pos
    $P11 = rx919_cur."quote"()
    repr_get_attr_int $I11, $P11, rx919_curclass, "$!pos"
    lt $I11, 0, rx919_fail2391
    nqp_rxmark rx919_bstack, rxsubrule923_pass2402, -1, 0
  rxsubrule923_pass2402:
    rx919_cstack = rx919_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx919_pos, $P11, rx919_curclass, "$!pos"
  alt924_02404:
    nqp_rxmark rx919_bstack, alt924_12405, rx919_pos, 0
    ge rx919_pos, rx919_eos, rx919_fail2391
    substr $S11, rx919_tgt, rx919_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx919_fail2391
    goto alt924_end2403
  alt924_12405:
    repr_bind_attr_int rx919_cur, rx919_curclass, "$!pos", rx919_pos
    $P11 = rx919_cur."panic"("Quoted method name requires parenthesized arguments")
    repr_get_attr_int $I11, $P11, rx919_curclass, "$!pos"
    lt $I11, 0, rx919_fail2391
    repr_get_attr_int rx919_pos, $P11, rx919_curclass, "$!pos"
  alt924_end2403:
    goto alt921_end2398
  alt921_end2398:
    nqp_rxcommit rx919_bstack, alt921_end2398
    nqp_rxmark rx919_bstack, rxquantr926_done2408, rx919_pos, 0
  rxquantr926_loop2407:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt927_02410
    nqp_push_label $P11, alt927_12412
    nqp_rxmark rx919_bstack, alt927_end2409, -1, 0
    rx919_cur."!alt"(rx919_pos, "alt_nfa__35_1359292302.623", $P11)
    goto rx919_fail2391
  alt927_02410:
    ge rx919_pos, rx919_eos, rx919_fail2391
    substr $S11, rx919_tgt, rx919_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx919_fail2391
    repr_bind_attr_int rx919_cur, rx919_curclass, "$!pos", rx919_pos
    $P11 = rx919_cur."args"()
    repr_get_attr_int $I11, $P11, rx919_curclass, "$!pos"
    lt $I11, 0, rx919_fail2391
    nqp_rxmark rx919_bstack, rxsubrule928_pass2411, -1, 0
  rxsubrule928_pass2411:
    rx919_cstack = rx919_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx919_pos, $P11, rx919_curclass, "$!pos"
    goto alt927_end2409
  alt927_12412:
    add $I11, rx919_pos, 1
    gt $I11, rx919_eos, rx919_fail2391
    substr $S10, rx919_tgt, rx919_pos, 1
    ne $S10, ucs4:":", rx919_fail2391
    add rx919_pos, 1
    ge rx919_pos, rx919_eos, rx919_fail2391
    is_cclass $I11, .CCLASS_WHITESPACE, rx919_tgt, rx919_pos
    unless $I11, rx919_fail2391
    add rx919_pos, 1
    repr_bind_attr_int rx919_cur, rx919_curclass, "$!pos", rx919_pos
    $P11 = rx919_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx919_curclass, "$!pos"
    lt $I11, 0, rx919_fail2391
    nqp_rxmark rx919_bstack, rxsubrule929_pass2413, -1, 0
  rxsubrule929_pass2413:
    rx919_cstack = rx919_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx919_pos, $P11, rx919_curclass, "$!pos"
    goto alt927_end2409
  alt927_end2409:
    nqp_rxpeek $I19, rx919_bstack, rxquantr926_done2408
    inc $I19
    inc $I19
    set rx919_rep, rx919_bstack[$I19]
    nqp_rxcommit rx919_bstack, rxquantr926_done2408
    inc rx919_rep
  rxquantr926_done2408:
    rx919_cur."!cursor_pass"(rx919_pos, "dotty", 'backtrack'=>1)
    .return (rx919_cur)
  rx919_restart2390:
    repr_get_attr_obj rx919_cstack, rx919_cur, rx919_curclass, "$!cstack"
  rx919_fail2391:
    unless rx919_bstack, rx919_done2389
    pop $I19, rx919_bstack
    if_null rx919_cstack, rx919_cstack_done2394
    unless rx919_cstack, rx919_cstack_done2394
    dec $I19
    set $P11, rx919_cstack[$I19]
  rx919_cstack_done2394:
    pop rx919_rep, rx919_bstack
    pop rx919_pos, rx919_bstack
    pop $I19, rx919_bstack
    lt rx919_pos, -1, rx919_done2389
    lt rx919_pos, 0, rx919_fail2391
    eq $I19, 0, rx919_fail2391
    nqp_islist $I20, rx919_cstack
    unless $I20, rx919_jump2392
    elements $I18, rx919_bstack
    le $I18, 0, rx919_cut2393
    dec $I18
    set $I18, rx919_bstack[$I18]
  rx919_cut2393:
    assign rx919_cstack, $I18
  rx919_jump2392:
    jump $I19
  rx919_done2389:
    rx919_cur."!cursor_fail"()
    .return (rx919_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_137_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1182
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx930_tgt
    .local int rx930_pos
    .local int rx930_off
    .local int rx930_eos
    .local int rx930_rep
    .local pmc rx930_cur
    .local pmc rx930_curclass
    .local pmc rx930_bstack
    .local pmc rx930_cstack
    (rx930_cur, rx930_tgt, rx930_pos, rx930_curclass, rx930_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx930_cur
    length rx930_eos, rx930_tgt
    eq $I19, 1, rx930_restart2416
    gt rx930_pos, rx930_eos, rx930_fail2417
    repr_get_attr_int $I11, self, rx930_curclass, "$!from"
    ne $I11, -1, rxscan931_done2423
    goto rxscan931_scan2422
  rxscan931_loop2421:
    inc rx930_pos
    gt rx930_pos, rx930_eos, rx930_fail2417
    repr_bind_attr_int rx930_cur, rx930_curclass, "$!from", rx930_pos
  rxscan931_scan2422:
    nqp_rxmark rx930_bstack, rxscan931_loop2421, rx930_pos, 0
  rxscan931_done2423:
    nqp_rxmark rx930_bstack, rxcap932_fail2425, rx930_pos, 0
    add $I11, rx930_pos, 4
    gt $I11, rx930_eos, rx930_fail2417
    substr $S10, rx930_tgt, rx930_pos, 4
    ne $S10, ucs4:"self", rx930_fail2417
    add rx930_pos, 4
    nqp_rxpeek $I19, rx930_bstack, rxcap932_fail2425
    inc $I19
    set $I11, rx930_bstack[$I19]
    repr_bind_attr_int rx930_cur, rx930_curclass, "$!pos", rx930_pos
    $P11 = rx930_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx930_pos)
    rx930_cstack = rx930_cur."!cursor_capture"($P11, "sym")
    goto rxcap932_done2424
  rxcap932_fail2425:
    goto rx930_fail2417
  rxcap932_done2424:
    le rx930_pos, 0, rx930_fail2417
    is_cclass $I11, .CCLASS_WORD, rx930_tgt, rx930_pos
    if $I11, rx930_fail2417
    sub $I11, rx930_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx930_tgt, $I11
    unless $I11, rx930_fail2417
    rx930_cur."!cursor_pass"(rx930_pos, "term:sym<self>", 'backtrack'=>1)
    .return (rx930_cur)
  rx930_restart2416:
    repr_get_attr_obj rx930_cstack, rx930_cur, rx930_curclass, "$!cstack"
  rx930_fail2417:
    unless rx930_bstack, rx930_done2415
    pop $I19, rx930_bstack
    if_null rx930_cstack, rx930_cstack_done2420
    unless rx930_cstack, rx930_cstack_done2420
    dec $I19
    set $P11, rx930_cstack[$I19]
  rx930_cstack_done2420:
    pop rx930_rep, rx930_bstack
    pop rx930_pos, rx930_bstack
    pop $I19, rx930_bstack
    lt rx930_pos, -1, rx930_done2415
    lt rx930_pos, 0, rx930_fail2417
    eq $I19, 0, rx930_fail2417
    nqp_islist $I20, rx930_cstack
    unless $I20, rx930_jump2418
    elements $I18, rx930_bstack
    le $I18, 0, rx930_cut2419
    dec $I18
    set $I18, rx930_bstack[$I18]
  rx930_cut2419:
    assign rx930_cstack, $I18
  rx930_jump2418:
    jump $I19
  rx930_done2415:
    rx930_cur."!cursor_fail"()
    .return (rx930_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_138_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1184
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx934_tgt
    .local int rx934_pos
    .local int rx934_off
    .local int rx934_eos
    .local int rx934_rep
    .local pmc rx934_cur
    .local pmc rx934_curclass
    .local pmc rx934_bstack
    .local pmc rx934_cstack
    (rx934_cur, rx934_tgt, rx934_pos, rx934_curclass, rx934_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx934_cur
    length rx934_eos, rx934_tgt
    eq $I19, 1, rx934_restart2429
    gt rx934_pos, rx934_eos, rx934_fail2430
    repr_get_attr_int $I11, self, rx934_curclass, "$!from"
    ne $I11, -1, rxscan935_done2436
    goto rxscan935_scan2435
  rxscan935_loop2434:
    inc rx934_pos
    gt rx934_pos, rx934_eos, rx934_fail2430
    repr_bind_attr_int rx934_cur, rx934_curclass, "$!from", rx934_pos
  rxscan935_scan2435:
    nqp_rxmark rx934_bstack, rxscan935_loop2434, rx934_pos, 0
  rxscan935_done2436:
    repr_bind_attr_int rx934_cur, rx934_curclass, "$!pos", rx934_pos
    $P11 = rx934_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx934_curclass, "$!pos"
    lt $I11, 0, rx934_fail2430
    nqp_rxmark rx934_bstack, rxsubrule936_pass2437, -1, 0
  rxsubrule936_pass2437:
    rx934_cstack = rx934_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx934_pos, $P11, rx934_curclass, "$!pos"
    ge rx934_pos, rx934_eos, rx934_fail2430
    substr $S11, rx934_tgt, rx934_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx934_fail2430
    repr_bind_attr_int rx934_cur, rx934_curclass, "$!pos", rx934_pos
    $P11 = rx934_cur."args"()
    repr_get_attr_int $I11, $P11, rx934_curclass, "$!pos"
    lt $I11, 0, rx934_fail2430
    nqp_rxmark rx934_bstack, rxsubrule937_pass2438, -1, 0
  rxsubrule937_pass2438:
    rx934_cstack = rx934_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx934_pos, $P11, rx934_curclass, "$!pos"
    rx934_cur."!cursor_pass"(rx934_pos, "term:sym<identifier>", 'backtrack'=>1)
    .return (rx934_cur)
  rx934_restart2429:
    repr_get_attr_obj rx934_cstack, rx934_cur, rx934_curclass, "$!cstack"
  rx934_fail2430:
    unless rx934_bstack, rx934_done2428
    pop $I19, rx934_bstack
    if_null rx934_cstack, rx934_cstack_done2433
    unless rx934_cstack, rx934_cstack_done2433
    dec $I19
    set $P11, rx934_cstack[$I19]
  rx934_cstack_done2433:
    pop rx934_rep, rx934_bstack
    pop rx934_pos, rx934_bstack
    pop $I19, rx934_bstack
    lt rx934_pos, -1, rx934_done2428
    lt rx934_pos, 0, rx934_fail2430
    eq $I19, 0, rx934_fail2430
    nqp_islist $I20, rx934_cstack
    unless $I20, rx934_jump2431
    elements $I18, rx934_bstack
    le $I18, 0, rx934_cut2432
    dec $I18
    set $I18, rx934_bstack[$I18]
  rx934_cut2432:
    assign rx934_cstack, $I18
  rx934_jump2431:
    jump $I19
  rx934_done2428:
    rx934_cur."!cursor_fail"()
    .return (rx934_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_139_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1188
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx938_tgt
    .local int rx938_pos
    .local int rx938_off
    .local int rx938_eos
    .local int rx938_rep
    .local pmc rx938_cur
    .local pmc rx938_curclass
    .local pmc rx938_bstack
    .local pmc rx938_cstack
    (rx938_cur, rx938_tgt, rx938_pos, rx938_curclass, rx938_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx938_cur
    length rx938_eos, rx938_tgt
    eq $I19, 1, rx938_restart2441
    gt rx938_pos, rx938_eos, rx938_fail2442
    repr_get_attr_int $I11, self, rx938_curclass, "$!from"
    ne $I11, -1, rxscan939_done2448
    goto rxscan939_scan2447
  rxscan939_loop2446:
    inc rx938_pos
    gt rx938_pos, rx938_eos, rx938_fail2442
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!from", rx938_pos
  rxscan939_scan2447:
    nqp_rxmark rx938_bstack, rxscan939_loop2446, rx938_pos, 0
  rxscan939_done2448:
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!pos", rx938_pos
    $P11 = rx938_cur."name"()
    repr_get_attr_int $I11, $P11, rx938_curclass, "$!pos"
    lt $I11, 0, rx938_fail2442
    nqp_rxmark rx938_bstack, rxsubrule940_pass2449, -1, 0
  rxsubrule940_pass2449:
    rx938_cstack = rx938_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx938_pos, $P11, rx938_curclass, "$!pos"
    nqp_rxmark rx938_bstack, rxquantr941_done2451, rx938_pos, 0
  rxquantr941_loop2450:
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!pos", rx938_pos
    $P11 = rx938_cur."args"()
    repr_get_attr_int $I11, $P11, rx938_curclass, "$!pos"
    lt $I11, 0, rx938_fail2442
    goto rxsubrule942_pass2452
  rxsubrule942_back2453:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx938_curclass, "$!pos"
    lt $I11, 0, rx938_fail2442
  rxsubrule942_pass2452:
    rx938_cstack = rx938_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule942_back2453
    push rx938_bstack, $I11
    push rx938_bstack, 0
    push rx938_bstack, rx938_pos
    elements $I11, rx938_cstack
    push rx938_bstack, $I11
    repr_get_attr_int rx938_pos, $P11, rx938_curclass, "$!pos"
    nqp_rxpeek $I19, rx938_bstack, rxquantr941_done2451
    inc $I19
    inc $I19
    set rx938_rep, rx938_bstack[$I19]
    nqp_rxcommit rx938_bstack, rxquantr941_done2451
    inc rx938_rep
  rxquantr941_done2451:
    rx938_cur."!cursor_pass"(rx938_pos, "term:sym<name>", 'backtrack'=>1)
    .return (rx938_cur)
  rx938_restart2441:
    repr_get_attr_obj rx938_cstack, rx938_cur, rx938_curclass, "$!cstack"
  rx938_fail2442:
    unless rx938_bstack, rx938_done2440
    pop $I19, rx938_bstack
    if_null rx938_cstack, rx938_cstack_done2445
    unless rx938_cstack, rx938_cstack_done2445
    dec $I19
    set $P11, rx938_cstack[$I19]
  rx938_cstack_done2445:
    pop rx938_rep, rx938_bstack
    pop rx938_pos, rx938_bstack
    pop $I19, rx938_bstack
    lt rx938_pos, -1, rx938_done2440
    lt rx938_pos, 0, rx938_fail2442
    eq $I19, 0, rx938_fail2442
    nqp_islist $I20, rx938_cstack
    unless $I20, rx938_jump2443
    elements $I18, rx938_bstack
    le $I18, 0, rx938_cut2444
    dec $I18
    set $I18, rx938_bstack[$I18]
  rx938_cut2444:
    assign rx938_cstack, $I18
  rx938_jump2443:
    jump $I19
  rx938_done2440:
    rx938_cur."!cursor_fail"()
    .return (rx938_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_140_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1192
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx943_tgt
    .local int rx943_pos
    .local int rx943_off
    .local int rx943_eos
    .local int rx943_rep
    .local pmc rx943_cur
    .local pmc rx943_curclass
    .local pmc rx943_bstack
    .local pmc rx943_cstack
    (rx943_cur, rx943_tgt, rx943_pos, rx943_curclass, rx943_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx943_cur
    length rx943_eos, rx943_tgt
    eq $I19, 1, rx943_restart2456
    gt rx943_pos, rx943_eos, rx943_fail2457
    repr_get_attr_int $I11, self, rx943_curclass, "$!from"
    ne $I11, -1, rxscan944_done2463
    goto rxscan944_scan2462
  rxscan944_loop2461:
    inc rx943_pos
    gt rx943_pos, rx943_eos, rx943_fail2457
    repr_bind_attr_int rx943_cur, rx943_curclass, "$!from", rx943_pos
  rxscan944_scan2462:
    nqp_rxmark rx943_bstack, rxscan944_loop2461, rx943_pos, 0
  rxscan944_done2463:
    add $I11, rx943_pos, 5
    gt $I11, rx943_eos, rx943_fail2457
    substr $S10, rx943_tgt, rx943_pos, 5
    ne $S10, ucs4:"pir::", rx943_fail2457
    add rx943_pos, 5
    nqp_rxmark rx943_bstack, rxcap945_fail2465, rx943_pos, 0
    nqp_rxmark rx943_bstack, rxquantr946_done2467, -1, 0
  rxquantr946_loop2466:
    ge rx943_pos, rx943_eos, rx943_fail2457
    is_cclass $I11, .CCLASS_WORD, rx943_tgt, rx943_pos
    unless $I11, rx943_fail2457
    add rx943_pos, 1
    nqp_rxpeek $I19, rx943_bstack, rxquantr946_done2467
    inc $I19
    inc $I19
    set rx943_rep, rx943_bstack[$I19]
    nqp_rxcommit rx943_bstack, rxquantr946_done2467
    inc rx943_rep
    nqp_rxmark rx943_bstack, rxquantr946_done2467, rx943_pos, rx943_rep
    goto rxquantr946_loop2466
  rxquantr946_done2467:
    nqp_rxpeek $I19, rx943_bstack, rxcap945_fail2465
    inc $I19
    set $I11, rx943_bstack[$I19]
    repr_bind_attr_int rx943_cur, rx943_curclass, "$!pos", rx943_pos
    $P11 = rx943_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx943_pos)
    rx943_cstack = rx943_cur."!cursor_capture"($P11, "op")
    goto rxcap945_done2464
  rxcap945_fail2465:
    goto rx943_fail2457
  rxcap945_done2464:
    nqp_rxmark rx943_bstack, rxquantr947_done2469, rx943_pos, 0
  rxquantr947_loop2468:
    repr_bind_attr_int rx943_cur, rx943_curclass, "$!pos", rx943_pos
    $P11 = rx943_cur."args"()
    repr_get_attr_int $I11, $P11, rx943_curclass, "$!pos"
    lt $I11, 0, rx943_fail2457
    goto rxsubrule948_pass2470
  rxsubrule948_back2471:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx943_curclass, "$!pos"
    lt $I11, 0, rx943_fail2457
  rxsubrule948_pass2470:
    rx943_cstack = rx943_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule948_back2471
    push rx943_bstack, $I11
    push rx943_bstack, 0
    push rx943_bstack, rx943_pos
    elements $I11, rx943_cstack
    push rx943_bstack, $I11
    repr_get_attr_int rx943_pos, $P11, rx943_curclass, "$!pos"
    nqp_rxpeek $I19, rx943_bstack, rxquantr947_done2469
    inc $I19
    inc $I19
    set rx943_rep, rx943_bstack[$I19]
    nqp_rxcommit rx943_bstack, rxquantr947_done2469
    inc rx943_rep
  rxquantr947_done2469:
    rx943_cur."!cursor_pass"(rx943_pos, "term:sym<pir::op>", 'backtrack'=>1)
    .return (rx943_cur)
  rx943_restart2456:
    repr_get_attr_obj rx943_cstack, rx943_cur, rx943_curclass, "$!cstack"
  rx943_fail2457:
    unless rx943_bstack, rx943_done2455
    pop $I19, rx943_bstack
    if_null rx943_cstack, rx943_cstack_done2460
    unless rx943_cstack, rx943_cstack_done2460
    dec $I19
    set $P11, rx943_cstack[$I19]
  rx943_cstack_done2460:
    pop rx943_rep, rx943_bstack
    pop rx943_pos, rx943_bstack
    pop $I19, rx943_bstack
    lt rx943_pos, -1, rx943_done2455
    lt rx943_pos, 0, rx943_fail2457
    eq $I19, 0, rx943_fail2457
    nqp_islist $I20, rx943_cstack
    unless $I20, rx943_jump2458
    elements $I18, rx943_bstack
    le $I18, 0, rx943_cut2459
    dec $I18
    set $I18, rx943_bstack[$I18]
  rx943_cut2459:
    assign rx943_cstack, $I18
  rx943_jump2458:
    jump $I19
  rx943_done2455:
    rx943_cur."!cursor_fail"()
    .return (rx943_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_141_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1196
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx949_tgt
    .local int rx949_pos
    .local int rx949_off
    .local int rx949_eos
    .local int rx949_rep
    .local pmc rx949_cur
    .local pmc rx949_curclass
    .local pmc rx949_bstack
    .local pmc rx949_cstack
    (rx949_cur, rx949_tgt, rx949_pos, rx949_curclass, rx949_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx949_cur
    length rx949_eos, rx949_tgt
    eq $I19, 1, rx949_restart2474
    gt rx949_pos, rx949_eos, rx949_fail2475
    repr_get_attr_int $I11, self, rx949_curclass, "$!from"
    ne $I11, -1, rxscan950_done2481
    goto rxscan950_scan2480
  rxscan950_loop2479:
    inc rx949_pos
    gt rx949_pos, rx949_eos, rx949_fail2475
    repr_bind_attr_int rx949_cur, rx949_curclass, "$!from", rx949_pos
  rxscan950_scan2480:
    nqp_rxmark rx949_bstack, rxscan950_loop2479, rx949_pos, 0
  rxscan950_done2481:
    add $I11, rx949_pos, 12
    gt $I11, rx949_eos, rx949_fail2475
    substr $S10, rx949_tgt, rx949_pos, 12
    ne $S10, ucs4:"pir::const::", rx949_fail2475
    add rx949_pos, 12
    nqp_rxmark rx949_bstack, rxcap951_fail2483, rx949_pos, 0
    nqp_rxmark rx949_bstack, rxquantr952_done2485, -1, 0
  rxquantr952_loop2484:
    ge rx949_pos, rx949_eos, rx949_fail2475
    is_cclass $I11, .CCLASS_WORD, rx949_tgt, rx949_pos
    unless $I11, rx949_fail2475
    add rx949_pos, 1
    nqp_rxpeek $I19, rx949_bstack, rxquantr952_done2485
    inc $I19
    inc $I19
    set rx949_rep, rx949_bstack[$I19]
    nqp_rxcommit rx949_bstack, rxquantr952_done2485
    inc rx949_rep
    nqp_rxmark rx949_bstack, rxquantr952_done2485, rx949_pos, rx949_rep
    goto rxquantr952_loop2484
  rxquantr952_done2485:
    nqp_rxpeek $I19, rx949_bstack, rxcap951_fail2483
    inc $I19
    set $I11, rx949_bstack[$I19]
    repr_bind_attr_int rx949_cur, rx949_curclass, "$!pos", rx949_pos
    $P11 = rx949_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx949_pos)
    rx949_cstack = rx949_cur."!cursor_capture"($P11, "const")
    goto rxcap951_done2482
  rxcap951_fail2483:
    goto rx949_fail2475
  rxcap951_done2482:
    rx949_cur."!cursor_pass"(rx949_pos, "term:sym<pir::const>", 'backtrack'=>1)
    .return (rx949_cur)
  rx949_restart2474:
    repr_get_attr_obj rx949_cstack, rx949_cur, rx949_curclass, "$!cstack"
  rx949_fail2475:
    unless rx949_bstack, rx949_done2473
    pop $I19, rx949_bstack
    if_null rx949_cstack, rx949_cstack_done2478
    unless rx949_cstack, rx949_cstack_done2478
    dec $I19
    set $P11, rx949_cstack[$I19]
  rx949_cstack_done2478:
    pop rx949_rep, rx949_bstack
    pop rx949_pos, rx949_bstack
    pop $I19, rx949_bstack
    lt rx949_pos, -1, rx949_done2473
    lt rx949_pos, 0, rx949_fail2475
    eq $I19, 0, rx949_fail2475
    nqp_islist $I20, rx949_cstack
    unless $I20, rx949_jump2476
    elements $I18, rx949_bstack
    le $I18, 0, rx949_cut2477
    dec $I18
    set $I18, rx949_bstack[$I18]
  rx949_cut2477:
    assign rx949_cstack, $I18
  rx949_jump2476:
    jump $I19
  rx949_done2473:
    rx949_cur."!cursor_fail"()
    .return (rx949_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_142_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1200
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx953_tgt
    .local int rx953_pos
    .local int rx953_off
    .local int rx953_eos
    .local int rx953_rep
    .local pmc rx953_cur
    .local pmc rx953_curclass
    .local pmc rx953_bstack
    .local pmc rx953_cstack
    (rx953_cur, rx953_tgt, rx953_pos, rx953_curclass, rx953_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx953_cur
    length rx953_eos, rx953_tgt
    eq $I19, 1, rx953_restart2488
    gt rx953_pos, rx953_eos, rx953_fail2489
    repr_get_attr_int $I11, self, rx953_curclass, "$!from"
    ne $I11, -1, rxscan954_done2495
    goto rxscan954_scan2494
  rxscan954_loop2493:
    inc rx953_pos
    gt rx953_pos, rx953_eos, rx953_fail2489
    repr_bind_attr_int rx953_cur, rx953_curclass, "$!from", rx953_pos
  rxscan954_scan2494:
    nqp_rxmark rx953_bstack, rxscan954_loop2493, rx953_pos, 0
  rxscan954_done2495:
    add $I11, rx953_pos, 5
    gt $I11, rx953_eos, rx953_fail2489
    substr $S10, rx953_tgt, rx953_pos, 5
    ne $S10, ucs4:"nqp::", rx953_fail2489
    add rx953_pos, 5
    nqp_rxmark rx953_bstack, rxcap955_fail2497, rx953_pos, 0
    nqp_rxmark rx953_bstack, rxquantr956_done2499, -1, 0
  rxquantr956_loop2498:
    ge rx953_pos, rx953_eos, rx953_fail2489
    is_cclass $I11, .CCLASS_WORD, rx953_tgt, rx953_pos
    unless $I11, rx953_fail2489
    add rx953_pos, 1
    nqp_rxpeek $I19, rx953_bstack, rxquantr956_done2499
    inc $I19
    inc $I19
    set rx953_rep, rx953_bstack[$I19]
    nqp_rxcommit rx953_bstack, rxquantr956_done2499
    inc rx953_rep
    nqp_rxmark rx953_bstack, rxquantr956_done2499, rx953_pos, rx953_rep
    goto rxquantr956_loop2498
  rxquantr956_done2499:
    nqp_rxpeek $I19, rx953_bstack, rxcap955_fail2497
    inc $I19
    set $I11, rx953_bstack[$I19]
    repr_bind_attr_int rx953_cur, rx953_curclass, "$!pos", rx953_pos
    $P11 = rx953_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx953_pos)
    rx953_cstack = rx953_cur."!cursor_capture"($P11, "op")
    goto rxcap955_done2496
  rxcap955_fail2497:
    goto rx953_fail2489
  rxcap955_done2496:
    nqp_rxmark rx953_bstack, rxquantr957_done2501, rx953_pos, 0
  rxquantr957_loop2500:
    repr_bind_attr_int rx953_cur, rx953_curclass, "$!pos", rx953_pos
    $P11 = rx953_cur."args"()
    repr_get_attr_int $I11, $P11, rx953_curclass, "$!pos"
    lt $I11, 0, rx953_fail2489
    goto rxsubrule958_pass2502
  rxsubrule958_back2503:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx953_curclass, "$!pos"
    lt $I11, 0, rx953_fail2489
  rxsubrule958_pass2502:
    rx953_cstack = rx953_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule958_back2503
    push rx953_bstack, $I11
    push rx953_bstack, 0
    push rx953_bstack, rx953_pos
    elements $I11, rx953_cstack
    push rx953_bstack, $I11
    repr_get_attr_int rx953_pos, $P11, rx953_curclass, "$!pos"
    nqp_rxpeek $I19, rx953_bstack, rxquantr957_done2501
    inc $I19
    inc $I19
    set rx953_rep, rx953_bstack[$I19]
    nqp_rxcommit rx953_bstack, rxquantr957_done2501
    inc rx953_rep
  rxquantr957_done2501:
    rx953_cur."!cursor_pass"(rx953_pos, "term:sym<nqp::op>", 'backtrack'=>1)
    .return (rx953_cur)
  rx953_restart2488:
    repr_get_attr_obj rx953_cstack, rx953_cur, rx953_curclass, "$!cstack"
  rx953_fail2489:
    unless rx953_bstack, rx953_done2487
    pop $I19, rx953_bstack
    if_null rx953_cstack, rx953_cstack_done2492
    unless rx953_cstack, rx953_cstack_done2492
    dec $I19
    set $P11, rx953_cstack[$I19]
  rx953_cstack_done2492:
    pop rx953_rep, rx953_bstack
    pop rx953_pos, rx953_bstack
    pop $I19, rx953_bstack
    lt rx953_pos, -1, rx953_done2487
    lt rx953_pos, 0, rx953_fail2489
    eq $I19, 0, rx953_fail2489
    nqp_islist $I20, rx953_cstack
    unless $I20, rx953_jump2490
    elements $I18, rx953_bstack
    le $I18, 0, rx953_cut2491
    dec $I18
    set $I18, rx953_bstack[$I18]
  rx953_cut2491:
    assign rx953_cstack, $I18
  rx953_jump2490:
    jump $I19
  rx953_done2487:
    rx953_cur."!cursor_fail"()
    .return (rx953_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_143_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1204
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_405_1359292300.247' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx959_tgt
    .local int rx959_pos
    .local int rx959_off
    .local int rx959_eos
    .local int rx959_rep
    .local pmc rx959_cur
    .local pmc rx959_curclass
    .local pmc rx959_bstack
    .local pmc rx959_cstack
    (rx959_cur, rx959_tgt, rx959_pos, rx959_curclass, rx959_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx959_cur
    length rx959_eos, rx959_tgt
    eq $I19, 1, rx959_restart2506
    gt rx959_pos, rx959_eos, rx959_fail2507
    repr_get_attr_int $I11, self, rx959_curclass, "$!from"
    ne $I11, -1, rxscan960_done2513
    goto rxscan960_scan2512
  rxscan960_loop2511:
    inc rx959_pos
    gt rx959_pos, rx959_eos, rx959_fail2507
    repr_bind_attr_int rx959_cur, rx959_curclass, "$!from", rx959_pos
  rxscan960_scan2512:
    nqp_rxmark rx959_bstack, rxscan960_loop2511, rx959_pos, 0
  rxscan960_done2513:
    add $I11, rx959_pos, 3
    gt $I11, rx959_eos, rx959_fail2507
    substr $S10, rx959_tgt, rx959_pos, 3
    ne $S10, ucs4:"{*}", rx959_fail2507
    add rx959_pos, 3
    repr_bind_attr_int rx959_cur, rx959_curclass, "$!pos", rx959_pos
    $P11 = rx959_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx959_curclass, "$!pos"
    lt $I11, 0, rx959_fail2507
  alt961_02515:
    nqp_rxmark rx959_bstack, alt961_12519, rx959_pos, 0
    repr_bind_attr_int rx959_cur, rx959_curclass, "$!pos", rx959_pos
    store_lex unicode:"$\x{a2}", rx959_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_405_1359292300.247' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx959_fail2507
    goto alt961_end2514
  alt961_12519:
    repr_bind_attr_int rx959_cur, rx959_curclass, "$!pos", rx959_pos
    $P11 = rx959_cur."panic"("{*} may only appear in proto")
    repr_get_attr_int $I11, $P11, rx959_curclass, "$!pos"
    lt $I11, 0, rx959_fail2507
    repr_get_attr_int rx959_pos, $P11, rx959_curclass, "$!pos"
  alt961_end2514:
    rx959_cur."!cursor_pass"(rx959_pos, "term:sym<onlystar>", 'backtrack'=>1)
    .return (rx959_cur)
  rx959_restart2506:
    repr_get_attr_obj rx959_cstack, rx959_cur, rx959_curclass, "$!cstack"
  rx959_fail2507:
    unless rx959_bstack, rx959_done2505
    pop $I19, rx959_bstack
    if_null rx959_cstack, rx959_cstack_done2510
    unless rx959_cstack, rx959_cstack_done2510
    dec $I19
    set $P11, rx959_cstack[$I19]
  rx959_cstack_done2510:
    pop rx959_rep, rx959_bstack
    pop rx959_pos, rx959_bstack
    pop $I19, rx959_bstack
    lt rx959_pos, -1, rx959_done2505
    lt rx959_pos, 0, rx959_fail2507
    eq $I19, 0, rx959_fail2507
    nqp_islist $I20, rx959_cstack
    unless $I20, rx959_jump2508
    elements $I18, rx959_bstack
    le $I18, 0, rx959_cut2509
    dec $I18
    set $I18, rx959_bstack[$I18]
  rx959_cut2509:
    assign rx959_cstack, $I18
  rx959_jump2508:
    jump $I19
  rx959_done2505:
    rx959_cur."!cursor_fail"()
    .return (rx959_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_405_1359292300.247") :anon :lex :outer("cuid_143_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1206

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback2516
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback2517
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5005
  fallback2517:
    unless_null $P5002, vivi_9622518
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_9622518:
    set $P5001, $P5002
  fallback2516:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_144_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1209
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx964_tgt
    .local int rx964_pos
    .local int rx964_off
    .local int rx964_eos
    .local int rx964_rep
    .local pmc rx964_cur
    .local pmc rx964_curclass
    .local pmc rx964_bstack
    .local pmc rx964_cstack
    (rx964_cur, rx964_tgt, rx964_pos, rx964_curclass, rx964_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx964_cur
    length rx964_eos, rx964_tgt
    eq $I19, 1, rx964_restart2523
    gt rx964_pos, rx964_eos, rx964_fail2524
    repr_get_attr_int $I11, self, rx964_curclass, "$!from"
    ne $I11, -1, rxscan965_done2530
    goto rxscan965_scan2529
  rxscan965_loop2528:
    inc rx964_pos
    gt rx964_pos, rx964_eos, rx964_fail2524
    repr_bind_attr_int rx964_cur, rx964_curclass, "$!from", rx964_pos
  rxscan965_scan2529:
    nqp_rxmark rx964_bstack, rxscan965_loop2528, rx964_pos, 0
  rxscan965_done2530:
    add $I11, rx964_pos, 1
    gt $I11, rx964_eos, rx964_fail2524
    substr $S10, rx964_tgt, rx964_pos, 1
    ne $S10, ucs4:"(", rx964_fail2524
    add rx964_pos, 1
    repr_bind_attr_int rx964_cur, rx964_curclass, "$!pos", rx964_pos
    $P11 = rx964_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx964_curclass, "$!pos"
    lt $I11, 0, rx964_fail2524
    nqp_rxmark rx964_bstack, rxsubrule966_pass2531, -1, 0
  rxsubrule966_pass2531:
    rx964_cstack = rx964_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx964_pos, $P11, rx964_curclass, "$!pos"
    add $I11, rx964_pos, 1
    gt $I11, rx964_eos, rx964_fail2524
    substr $S10, rx964_tgt, rx964_pos, 1
    ne $S10, ucs4:")", rx964_fail2524
    add rx964_pos, 1
    rx964_cur."!cursor_pass"(rx964_pos, "args", 'backtrack'=>1)
    .return (rx964_cur)
  rx964_restart2523:
    repr_get_attr_obj rx964_cstack, rx964_cur, rx964_curclass, "$!cstack"
  rx964_fail2524:
    unless rx964_bstack, rx964_done2522
    pop $I19, rx964_bstack
    if_null rx964_cstack, rx964_cstack_done2527
    unless rx964_cstack, rx964_cstack_done2527
    dec $I19
    set $P11, rx964_cstack[$I19]
  rx964_cstack_done2527:
    pop rx964_rep, rx964_bstack
    pop rx964_pos, rx964_bstack
    pop $I19, rx964_bstack
    lt rx964_pos, -1, rx964_done2522
    lt rx964_pos, 0, rx964_fail2524
    eq $I19, 0, rx964_fail2524
    nqp_islist $I20, rx964_cstack
    unless $I20, rx964_jump2525
    elements $I18, rx964_bstack
    le $I18, 0, rx964_cut2526
    dec $I18
    set $I18, rx964_bstack[$I18]
  rx964_cut2526:
    assign rx964_cstack, $I18
  rx964_jump2525:
    jump $I19
  rx964_done2522:
    rx964_cur."!cursor_fail"()
    .return (rx964_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_145_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1213
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx967_tgt
    .local int rx967_pos
    .local int rx967_off
    .local int rx967_eos
    .local int rx967_rep
    .local pmc rx967_cur
    .local pmc rx967_curclass
    .local pmc rx967_bstack
    .local pmc rx967_cstack
    (rx967_cur, rx967_tgt, rx967_pos, rx967_curclass, rx967_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx967_cur
    length rx967_eos, rx967_tgt
    eq $I19, 1, rx967_restart2534
    gt rx967_pos, rx967_eos, rx967_fail2535
    repr_get_attr_int $I11, self, rx967_curclass, "$!from"
    ne $I11, -1, rxscan968_done2541
    goto rxscan968_scan2540
  rxscan968_loop2539:
    inc rx967_pos
    gt rx967_pos, rx967_eos, rx967_fail2535
    repr_bind_attr_int rx967_cur, rx967_curclass, "$!from", rx967_pos
  rxscan968_scan2540:
    nqp_rxmark rx967_bstack, rxscan968_loop2539, rx967_pos, 0
  rxscan968_done2541:
    repr_bind_attr_int rx967_cur, rx967_curclass, "$!pos", rx967_pos
    $P11 = rx967_cur."ws"()
    repr_get_attr_int $I11, $P11, rx967_curclass, "$!pos"
    lt $I11, 0, rx967_fail2535
    repr_get_attr_int rx967_pos, $P11, rx967_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt970_02544
    nqp_push_label $P11, alt970_12546
    nqp_rxmark rx967_bstack, alt970_end2543, -1, 0
    rx967_cur."!alt"(rx967_pos, "alt_nfa__36_1359292302.688", $P11)
    goto rx967_fail2535
  alt970_02544:
    repr_bind_attr_int rx967_cur, rx967_curclass, "$!pos", rx967_pos
    $P11 = rx967_cur."EXPR"("f=")
    repr_get_attr_int $I11, $P11, rx967_curclass, "$!pos"
    lt $I11, 0, rx967_fail2535
    nqp_rxmark rx967_bstack, rxsubrule971_pass2545, -1, 0
  rxsubrule971_pass2545:
    rx967_cstack = rx967_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx967_pos, $P11, rx967_curclass, "$!pos"
    goto alt970_end2543
  alt970_12546:
    goto alt970_end2543
  alt970_end2543:
    nqp_rxcommit rx967_bstack, alt970_end2543
    rx967_cur."!cursor_pass"(rx967_pos, "arglist", 'backtrack'=>1)
    .return (rx967_cur)
  rx967_restart2534:
    repr_get_attr_obj rx967_cstack, rx967_cur, rx967_curclass, "$!cstack"
  rx967_fail2535:
    unless rx967_bstack, rx967_done2533
    pop $I19, rx967_bstack
    if_null rx967_cstack, rx967_cstack_done2538
    unless rx967_cstack, rx967_cstack_done2538
    dec $I19
    set $P11, rx967_cstack[$I19]
  rx967_cstack_done2538:
    pop rx967_rep, rx967_bstack
    pop rx967_pos, rx967_bstack
    pop $I19, rx967_bstack
    lt rx967_pos, -1, rx967_done2533
    lt rx967_pos, 0, rx967_fail2535
    eq $I19, 0, rx967_fail2535
    nqp_islist $I20, rx967_cstack
    unless $I20, rx967_jump2536
    elements $I18, rx967_bstack
    le $I18, 0, rx967_cut2537
    dec $I18
    set $I18, rx967_bstack[$I18]
  rx967_cut2537:
    assign rx967_cstack, $I18
  rx967_jump2536:
    jump $I19
  rx967_done2533:
    rx967_cur."!cursor_fail"()
    .return (rx967_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_146_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1222
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx973_tgt
    .local int rx973_pos
    .local int rx973_off
    .local int rx973_eos
    .local int rx973_rep
    .local pmc rx973_cur
    .local pmc rx973_curclass
    .local pmc rx973_bstack
    .local pmc rx973_cstack
    (rx973_cur, rx973_tgt, rx973_pos, rx973_curclass, rx973_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx973_cur
    length rx973_eos, rx973_tgt
    eq $I19, 1, rx973_restart2550
    gt rx973_pos, rx973_eos, rx973_fail2551
    repr_get_attr_int $I11, self, rx973_curclass, "$!from"
    ne $I11, -1, rxscan974_done2557
    goto rxscan974_scan2556
  rxscan974_loop2555:
    inc rx973_pos
    gt rx973_pos, rx973_eos, rx973_fail2551
    repr_bind_attr_int rx973_cur, rx973_curclass, "$!from", rx973_pos
  rxscan974_scan2556:
    nqp_rxmark rx973_bstack, rxscan974_loop2555, rx973_pos, 0
  rxscan974_done2557:
    repr_bind_attr_int rx973_cur, rx973_curclass, "$!pos", rx973_pos
    $P11 = rx973_cur."value"()
    repr_get_attr_int $I11, $P11, rx973_curclass, "$!pos"
    lt $I11, 0, rx973_fail2551
    nqp_rxmark rx973_bstack, rxsubrule975_pass2558, -1, 0
  rxsubrule975_pass2558:
    rx973_cstack = rx973_cur."!cursor_capture"($P11, "value")
    repr_get_attr_int rx973_pos, $P11, rx973_curclass, "$!pos"
    rx973_cur."!cursor_pass"(rx973_pos, "term:sym<value>", 'backtrack'=>1)
    .return (rx973_cur)
  rx973_restart2550:
    repr_get_attr_obj rx973_cstack, rx973_cur, rx973_curclass, "$!cstack"
  rx973_fail2551:
    unless rx973_bstack, rx973_done2549
    pop $I19, rx973_bstack
    if_null rx973_cstack, rx973_cstack_done2554
    unless rx973_cstack, rx973_cstack_done2554
    dec $I19
    set $P11, rx973_cstack[$I19]
  rx973_cstack_done2554:
    pop rx973_rep, rx973_bstack
    pop rx973_pos, rx973_bstack
    pop $I19, rx973_bstack
    lt rx973_pos, -1, rx973_done2549
    lt rx973_pos, 0, rx973_fail2551
    eq $I19, 0, rx973_fail2551
    nqp_islist $I20, rx973_cstack
    unless $I20, rx973_jump2552
    elements $I18, rx973_bstack
    le $I18, 0, rx973_cut2553
    dec $I18
    set $I18, rx973_bstack[$I18]
  rx973_cut2553:
    assign rx973_cstack, $I18
  rx973_jump2552:
    jump $I19
  rx973_done2549:
    rx973_cur."!cursor_fail"()
    .return (rx973_cur) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_147_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1224
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx976_tgt
    .local int rx976_pos
    .local int rx976_off
    .local int rx976_eos
    .local int rx976_rep
    .local pmc rx976_cur
    .local pmc rx976_curclass
    .local pmc rx976_bstack
    .local pmc rx976_cstack
    (rx976_cur, rx976_tgt, rx976_pos, rx976_curclass, rx976_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx976_cur
    length rx976_eos, rx976_tgt
    eq $I19, 1, rx976_restart2561
    gt rx976_pos, rx976_eos, rx976_fail2562
    repr_get_attr_int $I11, self, rx976_curclass, "$!from"
    ne $I11, -1, rxscan977_done2568
    goto rxscan977_scan2567
  rxscan977_loop2566:
    inc rx976_pos
    gt rx976_pos, rx976_eos, rx976_fail2562
    repr_bind_attr_int rx976_cur, rx976_curclass, "$!from", rx976_pos
  rxscan977_scan2567:
    nqp_rxmark rx976_bstack, rxscan977_loop2566, rx976_pos, 0
  rxscan977_done2568:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt978_02570
    nqp_push_label $P11, alt978_12572
    nqp_rxmark rx976_bstack, alt978_end2569, -1, 0
    rx976_cur."!alt"(rx976_pos, "alt_nfa__37_1359292302.697", $P11)
    goto rx976_fail2562
  alt978_02570:
    repr_bind_attr_int rx976_cur, rx976_curclass, "$!pos", rx976_pos
    $P11 = rx976_cur."quote"()
    repr_get_attr_int $I11, $P11, rx976_curclass, "$!pos"
    lt $I11, 0, rx976_fail2562
    nqp_rxmark rx976_bstack, rxsubrule979_pass2571, -1, 0
  rxsubrule979_pass2571:
    rx976_cstack = rx976_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx976_pos, $P11, rx976_curclass, "$!pos"
    goto alt978_end2569
  alt978_12572:
    repr_bind_attr_int rx976_cur, rx976_curclass, "$!pos", rx976_pos
    $P11 = rx976_cur."number"()
    repr_get_attr_int $I11, $P11, rx976_curclass, "$!pos"
    lt $I11, 0, rx976_fail2562
    nqp_rxmark rx976_bstack, rxsubrule980_pass2573, -1, 0
  rxsubrule980_pass2573:
    rx976_cstack = rx976_cur."!cursor_capture"($P11, "number")
    repr_get_attr_int rx976_pos, $P11, rx976_curclass, "$!pos"
    goto alt978_end2569
  alt978_end2569:
    rx976_cur."!cursor_pass"(rx976_pos, "value", 'backtrack'=>1)
    .return (rx976_cur)
  rx976_restart2561:
    repr_get_attr_obj rx976_cstack, rx976_cur, rx976_curclass, "$!cstack"
  rx976_fail2562:
    unless rx976_bstack, rx976_done2560
    pop $I19, rx976_bstack
    if_null rx976_cstack, rx976_cstack_done2565
    unless rx976_cstack, rx976_cstack_done2565
    dec $I19
    set $P11, rx976_cstack[$I19]
  rx976_cstack_done2565:
    pop rx976_rep, rx976_bstack
    pop rx976_pos, rx976_bstack
    pop $I19, rx976_bstack
    lt rx976_pos, -1, rx976_done2560
    lt rx976_pos, 0, rx976_fail2562
    eq $I19, 0, rx976_fail2562
    nqp_islist $I20, rx976_cstack
    unless $I20, rx976_jump2563
    elements $I18, rx976_bstack
    le $I18, 0, rx976_cut2564
    dec $I18
    set $I18, rx976_bstack[$I18]
  rx976_cut2564:
    assign rx976_cstack, $I18
  rx976_jump2563:
    jump $I19
  rx976_done2560:
    rx976_cur."!cursor_fail"()
    .return (rx976_cur) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_148_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1229
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx981_tgt
    .local int rx981_pos
    .local int rx981_off
    .local int rx981_eos
    .local int rx981_rep
    .local pmc rx981_cur
    .local pmc rx981_curclass
    .local pmc rx981_bstack
    .local pmc rx981_cstack
    (rx981_cur, rx981_tgt, rx981_pos, rx981_curclass, rx981_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx981_cur
    length rx981_eos, rx981_tgt
    eq $I19, 1, rx981_restart2576
    gt rx981_pos, rx981_eos, rx981_fail2577
    repr_get_attr_int $I11, self, rx981_curclass, "$!from"
    ne $I11, -1, rxscan982_done2583
    goto rxscan982_scan2582
  rxscan982_loop2581:
    inc rx981_pos
    gt rx981_pos, rx981_eos, rx981_fail2577
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!from", rx981_pos
  rxscan982_scan2582:
    nqp_rxmark rx981_bstack, rxscan982_loop2581, rx981_pos, 0
  rxscan982_done2583:
    nqp_rxmark rx981_bstack, rxcap983_fail2585, rx981_pos, 0
    nqp_rxmark rx981_bstack, rxquantr984_done2587, rx981_pos, 0
  rxquantr984_loop2586:
  alt985_02589:
    nqp_rxmark rx981_bstack, alt985_12590, rx981_pos, 0
    add $I11, rx981_pos, 1
    gt $I11, rx981_eos, rx981_fail2577
    substr $S10, rx981_tgt, rx981_pos, 1
    ne $S10, ucs4:"-", rx981_fail2577
    add rx981_pos, 1
    goto alt985_end2588
  alt985_12590:
    ge rx981_pos, rx981_eos, rx981_fail2577
    substr $S11, rx981_tgt, rx981_pos, 1
    index $I11, ucs4:"+", $S11
    lt $I11, 0, rx981_fail2577
    inc rx981_pos
  alt985_end2588:
    nqp_rxpeek $I19, rx981_bstack, rxquantr984_done2587
    inc $I19
    inc $I19
    set rx981_rep, rx981_bstack[$I19]
    nqp_rxcommit rx981_bstack, rxquantr984_done2587
    inc rx981_rep
  rxquantr984_done2587:
    nqp_rxpeek $I19, rx981_bstack, rxcap983_fail2585
    inc $I19
    set $I11, rx981_bstack[$I19]
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!pos", rx981_pos
    $P11 = rx981_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx981_pos)
    rx981_cstack = rx981_cur."!cursor_capture"($P11, "sign")
    goto rxcap983_done2584
  rxcap983_fail2585:
    goto rx981_fail2577
  rxcap983_done2584:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt986_02592
    nqp_push_label $P11, alt986_12594
    nqp_rxmark rx981_bstack, alt986_end2591, -1, 0
    rx981_cur."!alt"(rx981_pos, "alt_nfa__38_1359292302.706", $P11)
    goto rx981_fail2577
  alt986_02592:
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!pos", rx981_pos
    $P11 = rx981_cur."dec_number"()
    repr_get_attr_int $I11, $P11, rx981_curclass, "$!pos"
    lt $I11, 0, rx981_fail2577
    nqp_rxmark rx981_bstack, rxsubrule987_pass2593, -1, 0
  rxsubrule987_pass2593:
    rx981_cstack = rx981_cur."!cursor_capture"($P11, "dec_number")
    repr_get_attr_int rx981_pos, $P11, rx981_curclass, "$!pos"
    goto alt986_end2591
  alt986_12594:
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!pos", rx981_pos
    $P11 = rx981_cur."integer"()
    repr_get_attr_int $I11, $P11, rx981_curclass, "$!pos"
    lt $I11, 0, rx981_fail2577
    nqp_rxmark rx981_bstack, rxsubrule988_pass2595, -1, 0
  rxsubrule988_pass2595:
    rx981_cstack = rx981_cur."!cursor_capture"($P11, "integer")
    repr_get_attr_int rx981_pos, $P11, rx981_curclass, "$!pos"
    goto alt986_end2591
  alt986_end2591:
    nqp_rxcommit rx981_bstack, alt986_end2591
    rx981_cur."!cursor_pass"(rx981_pos, "number", 'backtrack'=>1)
    .return (rx981_cur)
  rx981_restart2576:
    repr_get_attr_obj rx981_cstack, rx981_cur, rx981_curclass, "$!cstack"
  rx981_fail2577:
    unless rx981_bstack, rx981_done2575
    pop $I19, rx981_bstack
    if_null rx981_cstack, rx981_cstack_done2580
    unless rx981_cstack, rx981_cstack_done2580
    dec $I19
    set $P11, rx981_cstack[$I19]
  rx981_cstack_done2580:
    pop rx981_rep, rx981_bstack
    pop rx981_pos, rx981_bstack
    pop $I19, rx981_bstack
    lt rx981_pos, -1, rx981_done2575
    lt rx981_pos, 0, rx981_fail2577
    eq $I19, 0, rx981_fail2577
    nqp_islist $I20, rx981_cstack
    unless $I20, rx981_jump2578
    elements $I18, rx981_bstack
    le $I18, 0, rx981_cut2579
    dec $I18
    set $I18, rx981_bstack[$I18]
  rx981_cut2579:
    assign rx981_cstack, $I18
  rx981_jump2578:
    jump $I19
  rx981_done2575:
    rx981_cur."!cursor_fail"()
    .return (rx981_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote" :subid("cuid_149_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1234
    .param pmc self 
    $P5001 = self."!protoregex"("quote")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_150_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1235
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx989_tgt
    .local int rx989_pos
    .local int rx989_off
    .local int rx989_eos
    .local int rx989_rep
    .local pmc rx989_cur
    .local pmc rx989_curclass
    .local pmc rx989_bstack
    .local pmc rx989_cstack
    (rx989_cur, rx989_tgt, rx989_pos, rx989_curclass, rx989_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx989_cur
    length rx989_eos, rx989_tgt
    eq $I19, 1, rx989_restart2598
    gt rx989_pos, rx989_eos, rx989_fail2599
    repr_get_attr_int $I11, self, rx989_curclass, "$!from"
    ne $I11, -1, rxscan990_done2605
    goto rxscan990_scan2604
  rxscan990_loop2603:
    inc rx989_pos
    gt rx989_pos, rx989_eos, rx989_fail2599
    repr_bind_attr_int rx989_cur, rx989_curclass, "$!from", rx989_pos
  rxscan990_scan2604:
    nqp_rxmark rx989_bstack, rxscan990_loop2603, rx989_pos, 0
  rxscan990_done2605:
    ge rx989_pos, rx989_eos, rx989_fail2599
    substr $S11, rx989_tgt, rx989_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx989_fail2599
    repr_bind_attr_int rx989_cur, rx989_curclass, "$!pos", rx989_pos
    $P11 = rx989_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx989_curclass, "$!pos"
    lt $I11, 0, rx989_fail2599
    nqp_rxmark rx989_bstack, rxsubrule991_pass2606, -1, 0
  rxsubrule991_pass2606:
    rx989_cstack = rx989_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx989_pos, $P11, rx989_curclass, "$!pos"
    rx989_cur."!cursor_pass"(rx989_pos, "quote:sym<apos>", 'backtrack'=>1)
    .return (rx989_cur)
  rx989_restart2598:
    repr_get_attr_obj rx989_cstack, rx989_cur, rx989_curclass, "$!cstack"
  rx989_fail2599:
    unless rx989_bstack, rx989_done2597
    pop $I19, rx989_bstack
    if_null rx989_cstack, rx989_cstack_done2602
    unless rx989_cstack, rx989_cstack_done2602
    dec $I19
    set $P11, rx989_cstack[$I19]
  rx989_cstack_done2602:
    pop rx989_rep, rx989_bstack
    pop rx989_pos, rx989_bstack
    pop $I19, rx989_bstack
    lt rx989_pos, -1, rx989_done2597
    lt rx989_pos, 0, rx989_fail2599
    eq $I19, 0, rx989_fail2599
    nqp_islist $I20, rx989_cstack
    unless $I20, rx989_jump2600
    elements $I18, rx989_bstack
    le $I18, 0, rx989_cut2601
    dec $I18
    set $I18, rx989_bstack[$I18]
  rx989_cut2601:
    assign rx989_cstack, $I18
  rx989_jump2600:
    jump $I19
  rx989_done2597:
    rx989_cur."!cursor_fail"()
    .return (rx989_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_151_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1236
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx992_tgt
    .local int rx992_pos
    .local int rx992_off
    .local int rx992_eos
    .local int rx992_rep
    .local pmc rx992_cur
    .local pmc rx992_curclass
    .local pmc rx992_bstack
    .local pmc rx992_cstack
    (rx992_cur, rx992_tgt, rx992_pos, rx992_curclass, rx992_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx992_cur
    length rx992_eos, rx992_tgt
    eq $I19, 1, rx992_restart2609
    gt rx992_pos, rx992_eos, rx992_fail2610
    repr_get_attr_int $I11, self, rx992_curclass, "$!from"
    ne $I11, -1, rxscan993_done2616
    goto rxscan993_scan2615
  rxscan993_loop2614:
    inc rx992_pos
    gt rx992_pos, rx992_eos, rx992_fail2610
    repr_bind_attr_int rx992_cur, rx992_curclass, "$!from", rx992_pos
  rxscan993_scan2615:
    nqp_rxmark rx992_bstack, rxscan993_loop2614, rx992_pos, 0
  rxscan993_done2616:
    ge rx992_pos, rx992_eos, rx992_fail2610
    substr $S11, rx992_tgt, rx992_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx992_fail2610
    repr_bind_attr_int rx992_cur, rx992_curclass, "$!pos", rx992_pos
    $P11 = rx992_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx992_curclass, "$!pos"
    lt $I11, 0, rx992_fail2610
    nqp_rxmark rx992_bstack, rxsubrule994_pass2617, -1, 0
  rxsubrule994_pass2617:
    rx992_cstack = rx992_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx992_pos, $P11, rx992_curclass, "$!pos"
    rx992_cur."!cursor_pass"(rx992_pos, "quote:sym<dblq>", 'backtrack'=>1)
    .return (rx992_cur)
  rx992_restart2609:
    repr_get_attr_obj rx992_cstack, rx992_cur, rx992_curclass, "$!cstack"
  rx992_fail2610:
    unless rx992_bstack, rx992_done2608
    pop $I19, rx992_bstack
    if_null rx992_cstack, rx992_cstack_done2613
    unless rx992_cstack, rx992_cstack_done2613
    dec $I19
    set $P11, rx992_cstack[$I19]
  rx992_cstack_done2613:
    pop rx992_rep, rx992_bstack
    pop rx992_pos, rx992_bstack
    pop $I19, rx992_bstack
    lt rx992_pos, -1, rx992_done2608
    lt rx992_pos, 0, rx992_fail2610
    eq $I19, 0, rx992_fail2610
    nqp_islist $I20, rx992_cstack
    unless $I20, rx992_jump2611
    elements $I18, rx992_bstack
    le $I18, 0, rx992_cut2612
    dec $I18
    set $I18, rx992_bstack[$I18]
  rx992_cut2612:
    assign rx992_cstack, $I18
  rx992_jump2611:
    jump $I19
  rx992_done2608:
    rx992_cur."!cursor_fail"()
    .return (rx992_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_152_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1237
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx995_tgt
    .local int rx995_pos
    .local int rx995_off
    .local int rx995_eos
    .local int rx995_rep
    .local pmc rx995_cur
    .local pmc rx995_curclass
    .local pmc rx995_bstack
    .local pmc rx995_cstack
    (rx995_cur, rx995_tgt, rx995_pos, rx995_curclass, rx995_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx995_cur
    length rx995_eos, rx995_tgt
    eq $I19, 1, rx995_restart2620
    gt rx995_pos, rx995_eos, rx995_fail2621
    repr_get_attr_int $I11, self, rx995_curclass, "$!from"
    ne $I11, -1, rxscan996_done2627
    goto rxscan996_scan2626
  rxscan996_loop2625:
    inc rx995_pos
    gt rx995_pos, rx995_eos, rx995_fail2621
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!from", rx995_pos
  rxscan996_scan2626:
    nqp_rxmark rx995_bstack, rxscan996_loop2625, rx995_pos, 0
  rxscan996_done2627:
    nqp_rxmark rx995_bstack, rxcap997_fail2629, rx995_pos, 0
    add $I11, rx995_pos, 1
    gt $I11, rx995_eos, rx995_fail2621
    substr $S10, rx995_tgt, rx995_pos, 1
    ne $S10, ucs4:"q", rx995_fail2621
    add rx995_pos, 1
    nqp_rxpeek $I19, rx995_bstack, rxcap997_fail2629
    inc $I19
    set $I11, rx995_bstack[$I19]
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!pos", rx995_pos
    $P11 = rx995_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx995_pos)
    rx995_cstack = rx995_cur."!cursor_capture"($P11, "sym")
    goto rxcap997_done2628
  rxcap997_fail2629:
    goto rx995_fail2621
  rxcap997_done2628:
    le rx995_pos, 0, rx995_fail2621
    is_cclass $I11, .CCLASS_WORD, rx995_tgt, rx995_pos
    if $I11, rx995_fail2621
    sub $I11, rx995_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx995_tgt, $I11
    unless $I11, rx995_fail2621
    ge rx995_pos, rx995_eos, rx995_fail2621
    substr $S11, rx995_tgt, rx995_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx995_fail2621
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!pos", rx995_pos
    $P11 = rx995_cur."ws"()
    repr_get_attr_int $I11, $P11, rx995_curclass, "$!pos"
    lt $I11, 0, rx995_fail2621
    repr_get_attr_int rx995_pos, $P11, rx995_curclass, "$!pos"
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!pos", rx995_pos
    $P11 = rx995_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx995_curclass, "$!pos"
    lt $I11, 0, rx995_fail2621
    nqp_rxmark rx995_bstack, rxsubrule1000_pass2632, -1, 0
  rxsubrule1000_pass2632:
    rx995_cstack = rx995_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx995_pos, $P11, rx995_curclass, "$!pos"
    rx995_cur."!cursor_pass"(rx995_pos, "quote:sym<q>", 'backtrack'=>1)
    .return (rx995_cur)
  rx995_restart2620:
    repr_get_attr_obj rx995_cstack, rx995_cur, rx995_curclass, "$!cstack"
  rx995_fail2621:
    unless rx995_bstack, rx995_done2619
    pop $I19, rx995_bstack
    if_null rx995_cstack, rx995_cstack_done2624
    unless rx995_cstack, rx995_cstack_done2624
    dec $I19
    set $P11, rx995_cstack[$I19]
  rx995_cstack_done2624:
    pop rx995_rep, rx995_bstack
    pop rx995_pos, rx995_bstack
    pop $I19, rx995_bstack
    lt rx995_pos, -1, rx995_done2619
    lt rx995_pos, 0, rx995_fail2621
    eq $I19, 0, rx995_fail2621
    nqp_islist $I20, rx995_cstack
    unless $I20, rx995_jump2622
    elements $I18, rx995_bstack
    le $I18, 0, rx995_cut2623
    dec $I18
    set $I18, rx995_bstack[$I18]
  rx995_cut2623:
    assign rx995_cstack, $I18
  rx995_jump2622:
    jump $I19
  rx995_done2619:
    rx995_cur."!cursor_fail"()
    .return (rx995_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_153_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1238
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1001_tgt
    .local int rx1001_pos
    .local int rx1001_off
    .local int rx1001_eos
    .local int rx1001_rep
    .local pmc rx1001_cur
    .local pmc rx1001_curclass
    .local pmc rx1001_bstack
    .local pmc rx1001_cstack
    (rx1001_cur, rx1001_tgt, rx1001_pos, rx1001_curclass, rx1001_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1001_cur
    length rx1001_eos, rx1001_tgt
    eq $I19, 1, rx1001_restart2635
    gt rx1001_pos, rx1001_eos, rx1001_fail2636
    repr_get_attr_int $I11, self, rx1001_curclass, "$!from"
    ne $I11, -1, rxscan1002_done2642
    goto rxscan1002_scan2641
  rxscan1002_loop2640:
    inc rx1001_pos
    gt rx1001_pos, rx1001_eos, rx1001_fail2636
    repr_bind_attr_int rx1001_cur, rx1001_curclass, "$!from", rx1001_pos
  rxscan1002_scan2641:
    nqp_rxmark rx1001_bstack, rxscan1002_loop2640, rx1001_pos, 0
  rxscan1002_done2642:
    nqp_rxmark rx1001_bstack, rxcap1003_fail2644, rx1001_pos, 0
    add $I11, rx1001_pos, 2
    gt $I11, rx1001_eos, rx1001_fail2636
    substr $S10, rx1001_tgt, rx1001_pos, 2
    ne $S10, ucs4:"qq", rx1001_fail2636
    add rx1001_pos, 2
    nqp_rxpeek $I19, rx1001_bstack, rxcap1003_fail2644
    inc $I19
    set $I11, rx1001_bstack[$I19]
    repr_bind_attr_int rx1001_cur, rx1001_curclass, "$!pos", rx1001_pos
    $P11 = rx1001_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1001_pos)
    rx1001_cstack = rx1001_cur."!cursor_capture"($P11, "sym")
    goto rxcap1003_done2643
  rxcap1003_fail2644:
    goto rx1001_fail2636
  rxcap1003_done2643:
    le rx1001_pos, 0, rx1001_fail2636
    is_cclass $I11, .CCLASS_WORD, rx1001_tgt, rx1001_pos
    if $I11, rx1001_fail2636
    sub $I11, rx1001_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx1001_tgt, $I11
    unless $I11, rx1001_fail2636
    ge rx1001_pos, rx1001_eos, rx1001_fail2636
    substr $S11, rx1001_tgt, rx1001_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx1001_fail2636
    repr_bind_attr_int rx1001_cur, rx1001_curclass, "$!pos", rx1001_pos
    $P11 = rx1001_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1001_curclass, "$!pos"
    lt $I11, 0, rx1001_fail2636
    repr_get_attr_int rx1001_pos, $P11, rx1001_curclass, "$!pos"
    repr_bind_attr_int rx1001_cur, rx1001_curclass, "$!pos", rx1001_pos
    $P11 = rx1001_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx1001_curclass, "$!pos"
    lt $I11, 0, rx1001_fail2636
    nqp_rxmark rx1001_bstack, rxsubrule1006_pass2647, -1, 0
  rxsubrule1006_pass2647:
    rx1001_cstack = rx1001_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1001_pos, $P11, rx1001_curclass, "$!pos"
    rx1001_cur."!cursor_pass"(rx1001_pos, "quote:sym<qq>", 'backtrack'=>1)
    .return (rx1001_cur)
  rx1001_restart2635:
    repr_get_attr_obj rx1001_cstack, rx1001_cur, rx1001_curclass, "$!cstack"
  rx1001_fail2636:
    unless rx1001_bstack, rx1001_done2634
    pop $I19, rx1001_bstack
    if_null rx1001_cstack, rx1001_cstack_done2639
    unless rx1001_cstack, rx1001_cstack_done2639
    dec $I19
    set $P11, rx1001_cstack[$I19]
  rx1001_cstack_done2639:
    pop rx1001_rep, rx1001_bstack
    pop rx1001_pos, rx1001_bstack
    pop $I19, rx1001_bstack
    lt rx1001_pos, -1, rx1001_done2634
    lt rx1001_pos, 0, rx1001_fail2636
    eq $I19, 0, rx1001_fail2636
    nqp_islist $I20, rx1001_cstack
    unless $I20, rx1001_jump2637
    elements $I18, rx1001_bstack
    le $I18, 0, rx1001_cut2638
    dec $I18
    set $I18, rx1001_bstack[$I18]
  rx1001_cut2638:
    assign rx1001_cstack, $I18
  rx1001_jump2637:
    jump $I19
  rx1001_done2634:
    rx1001_cur."!cursor_fail"()
    .return (rx1001_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_154_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1239
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1007_tgt
    .local int rx1007_pos
    .local int rx1007_off
    .local int rx1007_eos
    .local int rx1007_rep
    .local pmc rx1007_cur
    .local pmc rx1007_curclass
    .local pmc rx1007_bstack
    .local pmc rx1007_cstack
    (rx1007_cur, rx1007_tgt, rx1007_pos, rx1007_curclass, rx1007_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1007_cur
    length rx1007_eos, rx1007_tgt
    eq $I19, 1, rx1007_restart2650
    gt rx1007_pos, rx1007_eos, rx1007_fail2651
    repr_get_attr_int $I11, self, rx1007_curclass, "$!from"
    ne $I11, -1, rxscan1008_done2657
    goto rxscan1008_scan2656
  rxscan1008_loop2655:
    inc rx1007_pos
    gt rx1007_pos, rx1007_eos, rx1007_fail2651
    repr_bind_attr_int rx1007_cur, rx1007_curclass, "$!from", rx1007_pos
  rxscan1008_scan2656:
    nqp_rxmark rx1007_bstack, rxscan1008_loop2655, rx1007_pos, 0
  rxscan1008_done2657:
    nqp_rxmark rx1007_bstack, rxcap1009_fail2659, rx1007_pos, 0
    add $I11, rx1007_pos, 1
    gt $I11, rx1007_eos, rx1007_fail2651
    substr $S10, rx1007_tgt, rx1007_pos, 1
    ne $S10, ucs4:"Q", rx1007_fail2651
    add rx1007_pos, 1
    nqp_rxpeek $I19, rx1007_bstack, rxcap1009_fail2659
    inc $I19
    set $I11, rx1007_bstack[$I19]
    repr_bind_attr_int rx1007_cur, rx1007_curclass, "$!pos", rx1007_pos
    $P11 = rx1007_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1007_pos)
    rx1007_cstack = rx1007_cur."!cursor_capture"($P11, "sym")
    goto rxcap1009_done2658
  rxcap1009_fail2659:
    goto rx1007_fail2651
  rxcap1009_done2658:
    le rx1007_pos, 0, rx1007_fail2651
    is_cclass $I11, .CCLASS_WORD, rx1007_tgt, rx1007_pos
    if $I11, rx1007_fail2651
    sub $I11, rx1007_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx1007_tgt, $I11
    unless $I11, rx1007_fail2651
    ge rx1007_pos, rx1007_eos, rx1007_fail2651
    substr $S11, rx1007_tgt, rx1007_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx1007_fail2651
    repr_bind_attr_int rx1007_cur, rx1007_curclass, "$!pos", rx1007_pos
    $P11 = rx1007_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1007_curclass, "$!pos"
    lt $I11, 0, rx1007_fail2651
    repr_get_attr_int rx1007_pos, $P11, rx1007_curclass, "$!pos"
    repr_bind_attr_int rx1007_cur, rx1007_curclass, "$!pos", rx1007_pos
    $P11 = rx1007_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx1007_curclass, "$!pos"
    lt $I11, 0, rx1007_fail2651
    nqp_rxmark rx1007_bstack, rxsubrule1012_pass2662, -1, 0
  rxsubrule1012_pass2662:
    rx1007_cstack = rx1007_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1007_pos, $P11, rx1007_curclass, "$!pos"
    rx1007_cur."!cursor_pass"(rx1007_pos, "quote:sym<Q>", 'backtrack'=>1)
    .return (rx1007_cur)
  rx1007_restart2650:
    repr_get_attr_obj rx1007_cstack, rx1007_cur, rx1007_curclass, "$!cstack"
  rx1007_fail2651:
    unless rx1007_bstack, rx1007_done2649
    pop $I19, rx1007_bstack
    if_null rx1007_cstack, rx1007_cstack_done2654
    unless rx1007_cstack, rx1007_cstack_done2654
    dec $I19
    set $P11, rx1007_cstack[$I19]
  rx1007_cstack_done2654:
    pop rx1007_rep, rx1007_bstack
    pop rx1007_pos, rx1007_bstack
    pop $I19, rx1007_bstack
    lt rx1007_pos, -1, rx1007_done2649
    lt rx1007_pos, 0, rx1007_fail2651
    eq $I19, 0, rx1007_fail2651
    nqp_islist $I20, rx1007_cstack
    unless $I20, rx1007_jump2652
    elements $I18, rx1007_bstack
    le $I18, 0, rx1007_cut2653
    dec $I18
    set $I18, rx1007_bstack[$I18]
  rx1007_cut2653:
    assign rx1007_cstack, $I18
  rx1007_jump2652:
    jump $I19
  rx1007_done2649:
    rx1007_cur."!cursor_fail"()
    .return (rx1007_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_155_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1240
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1013_tgt
    .local int rx1013_pos
    .local int rx1013_off
    .local int rx1013_eos
    .local int rx1013_rep
    .local pmc rx1013_cur
    .local pmc rx1013_curclass
    .local pmc rx1013_bstack
    .local pmc rx1013_cstack
    (rx1013_cur, rx1013_tgt, rx1013_pos, rx1013_curclass, rx1013_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1013_cur
    length rx1013_eos, rx1013_tgt
    eq $I19, 1, rx1013_restart2665
    gt rx1013_pos, rx1013_eos, rx1013_fail2666
    repr_get_attr_int $I11, self, rx1013_curclass, "$!from"
    ne $I11, -1, rxscan1014_done2672
    goto rxscan1014_scan2671
  rxscan1014_loop2670:
    inc rx1013_pos
    gt rx1013_pos, rx1013_eos, rx1013_fail2666
    repr_bind_attr_int rx1013_cur, rx1013_curclass, "$!from", rx1013_pos
  rxscan1014_scan2671:
    nqp_rxmark rx1013_bstack, rxscan1014_loop2670, rx1013_pos, 0
  rxscan1014_done2672:
    nqp_rxmark rx1013_bstack, rxcap1015_fail2674, rx1013_pos, 0
    add $I11, rx1013_pos, 5
    gt $I11, rx1013_eos, rx1013_fail2666
    substr $S10, rx1013_tgt, rx1013_pos, 5
    ne $S10, ucs4:"Q:PIR", rx1013_fail2666
    add rx1013_pos, 5
    nqp_rxpeek $I19, rx1013_bstack, rxcap1015_fail2674
    inc $I19
    set $I11, rx1013_bstack[$I19]
    repr_bind_attr_int rx1013_cur, rx1013_curclass, "$!pos", rx1013_pos
    $P11 = rx1013_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1013_pos)
    rx1013_cstack = rx1013_cur."!cursor_capture"($P11, "sym")
    goto rxcap1015_done2673
  rxcap1015_fail2674:
    goto rx1013_fail2666
  rxcap1015_done2673:
    repr_bind_attr_int rx1013_cur, rx1013_curclass, "$!pos", rx1013_pos
    $P11 = rx1013_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1013_curclass, "$!pos"
    lt $I11, 0, rx1013_fail2666
    repr_get_attr_int rx1013_pos, $P11, rx1013_curclass, "$!pos"
    repr_bind_attr_int rx1013_cur, rx1013_curclass, "$!pos", rx1013_pos
    $P11 = rx1013_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx1013_curclass, "$!pos"
    lt $I11, 0, rx1013_fail2666
    nqp_rxmark rx1013_bstack, rxsubrule1017_pass2676, -1, 0
  rxsubrule1017_pass2676:
    rx1013_cstack = rx1013_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1013_pos, $P11, rx1013_curclass, "$!pos"
    rx1013_cur."!cursor_pass"(rx1013_pos, "quote:sym<Q:PIR>", 'backtrack'=>1)
    .return (rx1013_cur)
  rx1013_restart2665:
    repr_get_attr_obj rx1013_cstack, rx1013_cur, rx1013_curclass, "$!cstack"
  rx1013_fail2666:
    unless rx1013_bstack, rx1013_done2664
    pop $I19, rx1013_bstack
    if_null rx1013_cstack, rx1013_cstack_done2669
    unless rx1013_cstack, rx1013_cstack_done2669
    dec $I19
    set $P11, rx1013_cstack[$I19]
  rx1013_cstack_done2669:
    pop rx1013_rep, rx1013_bstack
    pop rx1013_pos, rx1013_bstack
    pop $I19, rx1013_bstack
    lt rx1013_pos, -1, rx1013_done2664
    lt rx1013_pos, 0, rx1013_fail2666
    eq $I19, 0, rx1013_fail2666
    nqp_islist $I20, rx1013_cstack
    unless $I20, rx1013_jump2667
    elements $I18, rx1013_bstack
    le $I18, 0, rx1013_cut2668
    dec $I18
    set $I18, rx1013_bstack[$I18]
  rx1013_cut2668:
    assign rx1013_cstack, $I18
  rx1013_jump2667:
    jump $I19
  rx1013_done2664:
    rx1013_cur."!cursor_fail"()
    .return (rx1013_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_156_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1241
    .param pmc _lex_param_0 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx1018_tgt
    .local int rx1018_pos
    .local int rx1018_off
    .local int rx1018_eos
    .local int rx1018_rep
    .local pmc rx1018_cur
    .local pmc rx1018_curclass
    .local pmc rx1018_bstack
    .local pmc rx1018_cstack
    (rx1018_cur, rx1018_tgt, rx1018_pos, rx1018_curclass, rx1018_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1018_cur
    length rx1018_eos, rx1018_tgt
    eq $I19, 1, rx1018_restart2679
    gt rx1018_pos, rx1018_eos, rx1018_fail2680
    repr_get_attr_int $I11, self, rx1018_curclass, "$!from"
    ne $I11, -1, rxscan1019_done2686
    goto rxscan1019_scan2685
  rxscan1019_loop2684:
    inc rx1018_pos
    gt rx1018_pos, rx1018_eos, rx1018_fail2680
    repr_bind_attr_int rx1018_cur, rx1018_curclass, "$!from", rx1018_pos
  rxscan1019_scan2685:
    nqp_rxmark rx1018_bstack, rxscan1019_loop2684, rx1018_pos, 0
  rxscan1019_done2686:
    add $I11, rx1018_pos, 1
    gt $I11, rx1018_eos, rx1018_fail2680
    substr $S10, rx1018_tgt, rx1018_pos, 1
    ne $S10, ucs4:"/", rx1018_fail2680
    add rx1018_pos, 1
    repr_bind_attr_int rx1018_cur, rx1018_curclass, "$!pos", rx1018_pos
    $P11 = rx1018_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx1018_curclass, "$!pos"
    lt $I11, 0, rx1018_fail2680
    repr_get_attr_int rx1018_pos, $P11, rx1018_curclass, "$!pos"
    repr_bind_attr_int rx1018_cur, rx1018_curclass, "$!pos", rx1018_pos
    store_lex unicode:"$\x{a2}", rx1018_cur
    unless_null $P101, fallback2688
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2689
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2689:
    unless_null $P5002, vivi_10212690
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_10212690:
    set $P101, $P5002
  fallback2688:
    repr_bind_attr_int rx1018_cur, rx1018_curclass, "$!pos", rx1018_pos
    $P11 = rx1018_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx1018_curclass, "$!pos"
    lt $I11, 0, rx1018_fail2680
    nqp_rxmark rx1018_bstack, rxsubrule1022_pass2691, -1, 0
  rxsubrule1022_pass2691:
    rx1018_cstack = rx1018_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx1018_pos, $P11, rx1018_curclass, "$!pos"
    add $I11, rx1018_pos, 1
    gt $I11, rx1018_eos, rx1018_fail2680
    substr $S10, rx1018_tgt, rx1018_pos, 1
    ne $S10, ucs4:"/", rx1018_fail2680
    add rx1018_pos, 1
    rx1018_cur."!cursor_pass"(rx1018_pos, "quote:sym</ />", 'backtrack'=>1)
    .return (rx1018_cur)
  rx1018_restart2679:
    repr_get_attr_obj rx1018_cstack, rx1018_cur, rx1018_curclass, "$!cstack"
  rx1018_fail2680:
    unless rx1018_bstack, rx1018_done2678
    pop $I19, rx1018_bstack
    if_null rx1018_cstack, rx1018_cstack_done2683
    unless rx1018_cstack, rx1018_cstack_done2683
    dec $I19
    set $P11, rx1018_cstack[$I19]
  rx1018_cstack_done2683:
    pop rx1018_rep, rx1018_bstack
    pop rx1018_pos, rx1018_bstack
    pop $I19, rx1018_bstack
    lt rx1018_pos, -1, rx1018_done2678
    lt rx1018_pos, 0, rx1018_fail2680
    eq $I19, 0, rx1018_fail2680
    nqp_islist $I20, rx1018_cstack
    unless $I20, rx1018_jump2681
    elements $I18, rx1018_bstack
    le $I18, 0, rx1018_cut2682
    dec $I18
    set $I18, rx1018_bstack[$I18]
  rx1018_cut2682:
    assign rx1018_cstack, $I18
  rx1018_jump2681:
    jump $I19
  rx1018_done2678:
    rx1018_cur."!cursor_fail"()
    .return (rx1018_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_157_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1249
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1023_tgt
    .local int rx1023_pos
    .local int rx1023_off
    .local int rx1023_eos
    .local int rx1023_rep
    .local pmc rx1023_cur
    .local pmc rx1023_curclass
    .local pmc rx1023_bstack
    .local pmc rx1023_cstack
    (rx1023_cur, rx1023_tgt, rx1023_pos, rx1023_curclass, rx1023_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1023_cur
    length rx1023_eos, rx1023_tgt
    eq $I19, 1, rx1023_restart2694
    gt rx1023_pos, rx1023_eos, rx1023_fail2695
    repr_get_attr_int $I11, self, rx1023_curclass, "$!from"
    ne $I11, -1, rxscan1024_done2701
    goto rxscan1024_scan2700
  rxscan1024_loop2699:
    inc rx1023_pos
    gt rx1023_pos, rx1023_eos, rx1023_fail2695
    repr_bind_attr_int rx1023_cur, rx1023_curclass, "$!from", rx1023_pos
  rxscan1024_scan2700:
    nqp_rxmark rx1023_bstack, rxscan1024_loop2699, rx1023_pos, 0
  rxscan1024_done2701:
    ge rx1023_pos, rx1023_eos, rx1023_fail2695
    substr $S11, rx1023_tgt, rx1023_pos, 1
    index $I11, ucs4:"$", $S11
    lt $I11, 0, rx1023_fail2695
    repr_bind_attr_int rx1023_cur, rx1023_curclass, "$!pos", rx1023_pos
    $P11 = rx1023_cur."quotemod_check"("s")
    repr_get_attr_int $I11, $P11, rx1023_curclass, "$!pos"
    lt $I11, 0, rx1023_fail2695
    repr_bind_attr_int rx1023_cur, rx1023_curclass, "$!pos", rx1023_pos
    $P11 = rx1023_cur."variable"()
    repr_get_attr_int $I11, $P11, rx1023_curclass, "$!pos"
    lt $I11, 0, rx1023_fail2695
    nqp_rxmark rx1023_bstack, rxsubrule1025_pass2702, -1, 0
  rxsubrule1025_pass2702:
    rx1023_cstack = rx1023_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx1023_pos, $P11, rx1023_curclass, "$!pos"
    rx1023_cur."!cursor_pass"(rx1023_pos, "quote_escape:sym<$>", 'backtrack'=>1)
    .return (rx1023_cur)
  rx1023_restart2694:
    repr_get_attr_obj rx1023_cstack, rx1023_cur, rx1023_curclass, "$!cstack"
  rx1023_fail2695:
    unless rx1023_bstack, rx1023_done2693
    pop $I19, rx1023_bstack
    if_null rx1023_cstack, rx1023_cstack_done2698
    unless rx1023_cstack, rx1023_cstack_done2698
    dec $I19
    set $P11, rx1023_cstack[$I19]
  rx1023_cstack_done2698:
    pop rx1023_rep, rx1023_bstack
    pop rx1023_pos, rx1023_bstack
    pop $I19, rx1023_bstack
    lt rx1023_pos, -1, rx1023_done2693
    lt rx1023_pos, 0, rx1023_fail2695
    eq $I19, 0, rx1023_fail2695
    nqp_islist $I20, rx1023_cstack
    unless $I20, rx1023_jump2696
    elements $I18, rx1023_bstack
    le $I18, 0, rx1023_cut2697
    dec $I18
    set $I18, rx1023_bstack[$I18]
  rx1023_cut2697:
    assign rx1023_cstack, $I18
  rx1023_jump2696:
    jump $I19
  rx1023_done2693:
    rx1023_cur."!cursor_fail"()
    .return (rx1023_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_158_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1250
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1026_tgt
    .local int rx1026_pos
    .local int rx1026_off
    .local int rx1026_eos
    .local int rx1026_rep
    .local pmc rx1026_cur
    .local pmc rx1026_curclass
    .local pmc rx1026_bstack
    .local pmc rx1026_cstack
    (rx1026_cur, rx1026_tgt, rx1026_pos, rx1026_curclass, rx1026_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1026_cur
    length rx1026_eos, rx1026_tgt
    eq $I19, 1, rx1026_restart2705
    gt rx1026_pos, rx1026_eos, rx1026_fail2706
    repr_get_attr_int $I11, self, rx1026_curclass, "$!from"
    ne $I11, -1, rxscan1027_done2712
    goto rxscan1027_scan2711
  rxscan1027_loop2710:
    inc rx1026_pos
    gt rx1026_pos, rx1026_eos, rx1026_fail2706
    repr_bind_attr_int rx1026_cur, rx1026_curclass, "$!from", rx1026_pos
  rxscan1027_scan2711:
    nqp_rxmark rx1026_bstack, rxscan1027_loop2710, rx1026_pos, 0
  rxscan1027_done2712:
    ge rx1026_pos, rx1026_eos, rx1026_fail2706
    substr $S11, rx1026_tgt, rx1026_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1026_fail2706
    repr_bind_attr_int rx1026_cur, rx1026_curclass, "$!pos", rx1026_pos
    $P11 = rx1026_cur."quotemod_check"("c")
    repr_get_attr_int $I11, $P11, rx1026_curclass, "$!pos"
    lt $I11, 0, rx1026_fail2706
    repr_bind_attr_int rx1026_cur, rx1026_curclass, "$!pos", rx1026_pos
    $P11 = rx1026_cur."block"()
    repr_get_attr_int $I11, $P11, rx1026_curclass, "$!pos"
    lt $I11, 0, rx1026_fail2706
    nqp_rxmark rx1026_bstack, rxsubrule1028_pass2713, -1, 0
  rxsubrule1028_pass2713:
    rx1026_cstack = rx1026_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1026_pos, $P11, rx1026_curclass, "$!pos"
    rx1026_cur."!cursor_pass"(rx1026_pos, "quote_escape:sym<{ }>", 'backtrack'=>1)
    .return (rx1026_cur)
  rx1026_restart2705:
    repr_get_attr_obj rx1026_cstack, rx1026_cur, rx1026_curclass, "$!cstack"
  rx1026_fail2706:
    unless rx1026_bstack, rx1026_done2704
    pop $I19, rx1026_bstack
    if_null rx1026_cstack, rx1026_cstack_done2709
    unless rx1026_cstack, rx1026_cstack_done2709
    dec $I19
    set $P11, rx1026_cstack[$I19]
  rx1026_cstack_done2709:
    pop rx1026_rep, rx1026_bstack
    pop rx1026_pos, rx1026_bstack
    pop $I19, rx1026_bstack
    lt rx1026_pos, -1, rx1026_done2704
    lt rx1026_pos, 0, rx1026_fail2706
    eq $I19, 0, rx1026_fail2706
    nqp_islist $I20, rx1026_cstack
    unless $I20, rx1026_jump2707
    elements $I18, rx1026_bstack
    le $I18, 0, rx1026_cut2708
    dec $I18
    set $I18, rx1026_bstack[$I18]
  rx1026_cut2708:
    assign rx1026_cstack, $I18
  rx1026_jump2707:
    jump $I19
  rx1026_done2704:
    rx1026_cur."!cursor_fail"()
    .return (rx1026_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_159_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1251
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1029_tgt
    .local int rx1029_pos
    .local int rx1029_off
    .local int rx1029_eos
    .local int rx1029_rep
    .local pmc rx1029_cur
    .local pmc rx1029_curclass
    .local pmc rx1029_bstack
    .local pmc rx1029_cstack
    (rx1029_cur, rx1029_tgt, rx1029_pos, rx1029_curclass, rx1029_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1029_cur
    length rx1029_eos, rx1029_tgt
    eq $I19, 1, rx1029_restart2716
    gt rx1029_pos, rx1029_eos, rx1029_fail2717
    repr_get_attr_int $I11, self, rx1029_curclass, "$!from"
    ne $I11, -1, rxscan1030_done2723
    goto rxscan1030_scan2722
  rxscan1030_loop2721:
    inc rx1029_pos
    gt rx1029_pos, rx1029_eos, rx1029_fail2717
    repr_bind_attr_int rx1029_cur, rx1029_curclass, "$!from", rx1029_pos
  rxscan1030_scan2722:
    nqp_rxmark rx1029_bstack, rxscan1030_loop2721, rx1029_pos, 0
  rxscan1030_done2723:
    add $I11, rx1029_pos, 2
    gt $I11, rx1029_eos, rx1029_fail2717
    substr $S10, rx1029_tgt, rx1029_pos, 2
    ne $S10, ucs4:"\\e", rx1029_fail2717
    add rx1029_pos, 2
    repr_bind_attr_int rx1029_cur, rx1029_curclass, "$!pos", rx1029_pos
    $P11 = rx1029_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx1029_curclass, "$!pos"
    lt $I11, 0, rx1029_fail2717
    rx1029_cur."!cursor_pass"(rx1029_pos, "quote_escape:sym<esc>", 'backtrack'=>1)
    .return (rx1029_cur)
  rx1029_restart2716:
    repr_get_attr_obj rx1029_cstack, rx1029_cur, rx1029_curclass, "$!cstack"
  rx1029_fail2717:
    unless rx1029_bstack, rx1029_done2715
    pop $I19, rx1029_bstack
    if_null rx1029_cstack, rx1029_cstack_done2720
    unless rx1029_cstack, rx1029_cstack_done2720
    dec $I19
    set $P11, rx1029_cstack[$I19]
  rx1029_cstack_done2720:
    pop rx1029_rep, rx1029_bstack
    pop rx1029_pos, rx1029_bstack
    pop $I19, rx1029_bstack
    lt rx1029_pos, -1, rx1029_done2715
    lt rx1029_pos, 0, rx1029_fail2717
    eq $I19, 0, rx1029_fail2717
    nqp_islist $I20, rx1029_cstack
    unless $I20, rx1029_jump2718
    elements $I18, rx1029_bstack
    le $I18, 0, rx1029_cut2719
    dec $I18
    set $I18, rx1029_bstack[$I18]
  rx1029_cut2719:
    assign rx1029_cstack, $I18
  rx1029_jump2718:
    jump $I19
  rx1029_done2715:
    rx1029_cur."!cursor_fail"()
    .return (rx1029_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_160_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1253
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1031_tgt
    .local int rx1031_pos
    .local int rx1031_off
    .local int rx1031_eos
    .local int rx1031_rep
    .local pmc rx1031_cur
    .local pmc rx1031_curclass
    .local pmc rx1031_bstack
    .local pmc rx1031_cstack
    (rx1031_cur, rx1031_tgt, rx1031_pos, rx1031_curclass, rx1031_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1031_cur
    length rx1031_eos, rx1031_tgt
    eq $I19, 1, rx1031_restart2726
    gt rx1031_pos, rx1031_eos, rx1031_fail2727
    repr_get_attr_int $I11, self, rx1031_curclass, "$!from"
    ne $I11, -1, rxscan1032_done2733
    goto rxscan1032_scan2732
  rxscan1032_loop2731:
    inc rx1031_pos
    gt rx1031_pos, rx1031_eos, rx1031_fail2727
    repr_bind_attr_int rx1031_cur, rx1031_curclass, "$!from", rx1031_pos
  rxscan1032_scan2732:
    nqp_rxmark rx1031_bstack, rxscan1032_loop2731, rx1031_pos, 0
  rxscan1032_done2733:
    add $I11, rx1031_pos, 1
    gt $I11, rx1031_eos, rx1031_fail2727
    substr $S10, rx1031_tgt, rx1031_pos, 1
    ne $S10, ucs4:"(", rx1031_fail2727
    add rx1031_pos, 1
    repr_bind_attr_int rx1031_cur, rx1031_curclass, "$!pos", rx1031_pos
    $P11 = rx1031_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1031_curclass, "$!pos"
    lt $I11, 0, rx1031_fail2727
    repr_get_attr_int rx1031_pos, $P11, rx1031_curclass, "$!pos"
    nqp_rxmark rx1031_bstack, rxquantr1034_done2736, rx1031_pos, 0
  rxquantr1034_loop2735:
    repr_bind_attr_int rx1031_cur, rx1031_curclass, "$!pos", rx1031_pos
    $P11 = rx1031_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1031_curclass, "$!pos"
    lt $I11, 0, rx1031_fail2727
    goto rxsubrule1035_pass2737
  rxsubrule1035_back2738:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx1031_curclass, "$!pos"
    lt $I11, 0, rx1031_fail2727
  rxsubrule1035_pass2737:
    rx1031_cstack = rx1031_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule1035_back2738
    push rx1031_bstack, $I11
    push rx1031_bstack, 0
    push rx1031_bstack, rx1031_pos
    elements $I11, rx1031_cstack
    push rx1031_bstack, $I11
    repr_get_attr_int rx1031_pos, $P11, rx1031_curclass, "$!pos"
    nqp_rxpeek $I19, rx1031_bstack, rxquantr1034_done2736
    inc $I19
    inc $I19
    set rx1031_rep, rx1031_bstack[$I19]
    nqp_rxcommit rx1031_bstack, rxquantr1034_done2736
    inc rx1031_rep
  rxquantr1034_done2736:
    add $I11, rx1031_pos, 1
    gt $I11, rx1031_eos, rx1031_fail2727
    substr $S10, rx1031_tgt, rx1031_pos, 1
    ne $S10, ucs4:")", rx1031_fail2727
    add rx1031_pos, 1
    rx1031_cur."!cursor_pass"(rx1031_pos, "circumfix:sym<( )>", 'backtrack'=>1)
    .return (rx1031_cur)
  rx1031_restart2726:
    repr_get_attr_obj rx1031_cstack, rx1031_cur, rx1031_curclass, "$!cstack"
  rx1031_fail2727:
    unless rx1031_bstack, rx1031_done2725
    pop $I19, rx1031_bstack
    if_null rx1031_cstack, rx1031_cstack_done2730
    unless rx1031_cstack, rx1031_cstack_done2730
    dec $I19
    set $P11, rx1031_cstack[$I19]
  rx1031_cstack_done2730:
    pop rx1031_rep, rx1031_bstack
    pop rx1031_pos, rx1031_bstack
    pop $I19, rx1031_bstack
    lt rx1031_pos, -1, rx1031_done2725
    lt rx1031_pos, 0, rx1031_fail2727
    eq $I19, 0, rx1031_fail2727
    nqp_islist $I20, rx1031_cstack
    unless $I20, rx1031_jump2728
    elements $I18, rx1031_bstack
    le $I18, 0, rx1031_cut2729
    dec $I18
    set $I18, rx1031_bstack[$I18]
  rx1031_cut2729:
    assign rx1031_cstack, $I18
  rx1031_jump2728:
    jump $I19
  rx1031_done2725:
    rx1031_cur."!cursor_fail"()
    .return (rx1031_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_161_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1254
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1036_tgt
    .local int rx1036_pos
    .local int rx1036_off
    .local int rx1036_eos
    .local int rx1036_rep
    .local pmc rx1036_cur
    .local pmc rx1036_curclass
    .local pmc rx1036_bstack
    .local pmc rx1036_cstack
    (rx1036_cur, rx1036_tgt, rx1036_pos, rx1036_curclass, rx1036_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1036_cur
    length rx1036_eos, rx1036_tgt
    eq $I19, 1, rx1036_restart2741
    gt rx1036_pos, rx1036_eos, rx1036_fail2742
    repr_get_attr_int $I11, self, rx1036_curclass, "$!from"
    ne $I11, -1, rxscan1037_done2748
    goto rxscan1037_scan2747
  rxscan1037_loop2746:
    inc rx1036_pos
    gt rx1036_pos, rx1036_eos, rx1036_fail2742
    repr_bind_attr_int rx1036_cur, rx1036_curclass, "$!from", rx1036_pos
  rxscan1037_scan2747:
    nqp_rxmark rx1036_bstack, rxscan1037_loop2746, rx1036_pos, 0
  rxscan1037_done2748:
    add $I11, rx1036_pos, 1
    gt $I11, rx1036_eos, rx1036_fail2742
    substr $S10, rx1036_tgt, rx1036_pos, 1
    ne $S10, ucs4:"[", rx1036_fail2742
    add rx1036_pos, 1
    repr_bind_attr_int rx1036_cur, rx1036_curclass, "$!pos", rx1036_pos
    $P11 = rx1036_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1036_curclass, "$!pos"
    lt $I11, 0, rx1036_fail2742
    repr_get_attr_int rx1036_pos, $P11, rx1036_curclass, "$!pos"
    nqp_rxmark rx1036_bstack, rxquantr1039_done2751, rx1036_pos, 0
  rxquantr1039_loop2750:
    repr_bind_attr_int rx1036_cur, rx1036_curclass, "$!pos", rx1036_pos
    $P11 = rx1036_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1036_curclass, "$!pos"
    lt $I11, 0, rx1036_fail2742
    goto rxsubrule1040_pass2752
  rxsubrule1040_back2753:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx1036_curclass, "$!pos"
    lt $I11, 0, rx1036_fail2742
  rxsubrule1040_pass2752:
    rx1036_cstack = rx1036_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule1040_back2753
    push rx1036_bstack, $I11
    push rx1036_bstack, 0
    push rx1036_bstack, rx1036_pos
    elements $I11, rx1036_cstack
    push rx1036_bstack, $I11
    repr_get_attr_int rx1036_pos, $P11, rx1036_curclass, "$!pos"
    nqp_rxpeek $I19, rx1036_bstack, rxquantr1039_done2751
    inc $I19
    inc $I19
    set rx1036_rep, rx1036_bstack[$I19]
    nqp_rxcommit rx1036_bstack, rxquantr1039_done2751
    inc rx1036_rep
  rxquantr1039_done2751:
    add $I11, rx1036_pos, 1
    gt $I11, rx1036_eos, rx1036_fail2742
    substr $S10, rx1036_tgt, rx1036_pos, 1
    ne $S10, ucs4:"]", rx1036_fail2742
    add rx1036_pos, 1
    rx1036_cur."!cursor_pass"(rx1036_pos, "circumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx1036_cur)
  rx1036_restart2741:
    repr_get_attr_obj rx1036_cstack, rx1036_cur, rx1036_curclass, "$!cstack"
  rx1036_fail2742:
    unless rx1036_bstack, rx1036_done2740
    pop $I19, rx1036_bstack
    if_null rx1036_cstack, rx1036_cstack_done2745
    unless rx1036_cstack, rx1036_cstack_done2745
    dec $I19
    set $P11, rx1036_cstack[$I19]
  rx1036_cstack_done2745:
    pop rx1036_rep, rx1036_bstack
    pop rx1036_pos, rx1036_bstack
    pop $I19, rx1036_bstack
    lt rx1036_pos, -1, rx1036_done2740
    lt rx1036_pos, 0, rx1036_fail2742
    eq $I19, 0, rx1036_fail2742
    nqp_islist $I20, rx1036_cstack
    unless $I20, rx1036_jump2743
    elements $I18, rx1036_bstack
    le $I18, 0, rx1036_cut2744
    dec $I18
    set $I18, rx1036_bstack[$I18]
  rx1036_cut2744:
    assign rx1036_cstack, $I18
  rx1036_jump2743:
    jump $I19
  rx1036_done2740:
    rx1036_cur."!cursor_fail"()
    .return (rx1036_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_162_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1255
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1041_tgt
    .local int rx1041_pos
    .local int rx1041_off
    .local int rx1041_eos
    .local int rx1041_rep
    .local pmc rx1041_cur
    .local pmc rx1041_curclass
    .local pmc rx1041_bstack
    .local pmc rx1041_cstack
    (rx1041_cur, rx1041_tgt, rx1041_pos, rx1041_curclass, rx1041_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1041_cur
    length rx1041_eos, rx1041_tgt
    eq $I19, 1, rx1041_restart2756
    gt rx1041_pos, rx1041_eos, rx1041_fail2757
    repr_get_attr_int $I11, self, rx1041_curclass, "$!from"
    ne $I11, -1, rxscan1042_done2763
    goto rxscan1042_scan2762
  rxscan1042_loop2761:
    inc rx1041_pos
    gt rx1041_pos, rx1041_eos, rx1041_fail2757
    repr_bind_attr_int rx1041_cur, rx1041_curclass, "$!from", rx1041_pos
  rxscan1042_scan2762:
    nqp_rxmark rx1041_bstack, rxscan1042_loop2761, rx1041_pos, 0
  rxscan1042_done2763:
    ge rx1041_pos, rx1041_eos, rx1041_fail2757
    substr $S11, rx1041_tgt, rx1041_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx1041_fail2757
    repr_bind_attr_int rx1041_cur, rx1041_curclass, "$!pos", rx1041_pos
    $P11 = rx1041_cur."quote_EXPR"(":q", ":w")
    repr_get_attr_int $I11, $P11, rx1041_curclass, "$!pos"
    lt $I11, 0, rx1041_fail2757
    nqp_rxmark rx1041_bstack, rxsubrule1043_pass2764, -1, 0
  rxsubrule1043_pass2764:
    rx1041_cstack = rx1041_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1041_pos, $P11, rx1041_curclass, "$!pos"
    rx1041_cur."!cursor_pass"(rx1041_pos, "circumfix:sym<ang>", 'backtrack'=>1)
    .return (rx1041_cur)
  rx1041_restart2756:
    repr_get_attr_obj rx1041_cstack, rx1041_cur, rx1041_curclass, "$!cstack"
  rx1041_fail2757:
    unless rx1041_bstack, rx1041_done2755
    pop $I19, rx1041_bstack
    if_null rx1041_cstack, rx1041_cstack_done2760
    unless rx1041_cstack, rx1041_cstack_done2760
    dec $I19
    set $P11, rx1041_cstack[$I19]
  rx1041_cstack_done2760:
    pop rx1041_rep, rx1041_bstack
    pop rx1041_pos, rx1041_bstack
    pop $I19, rx1041_bstack
    lt rx1041_pos, -1, rx1041_done2755
    lt rx1041_pos, 0, rx1041_fail2757
    eq $I19, 0, rx1041_fail2757
    nqp_islist $I20, rx1041_cstack
    unless $I20, rx1041_jump2758
    elements $I18, rx1041_bstack
    le $I18, 0, rx1041_cut2759
    dec $I18
    set $I18, rx1041_bstack[$I18]
  rx1041_cut2759:
    assign rx1041_cstack, $I18
  rx1041_jump2758:
    jump $I19
  rx1041_done2755:
    rx1041_cur."!cursor_fail"()
    .return (rx1041_cur) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_163_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1256
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1044_tgt
    .local int rx1044_pos
    .local int rx1044_off
    .local int rx1044_eos
    .local int rx1044_rep
    .local pmc rx1044_cur
    .local pmc rx1044_curclass
    .local pmc rx1044_bstack
    .local pmc rx1044_cstack
    (rx1044_cur, rx1044_tgt, rx1044_pos, rx1044_curclass, rx1044_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1044_cur
    length rx1044_eos, rx1044_tgt
    eq $I19, 1, rx1044_restart2767
    gt rx1044_pos, rx1044_eos, rx1044_fail2768
    repr_get_attr_int $I11, self, rx1044_curclass, "$!from"
    ne $I11, -1, rxscan1045_done2774
    goto rxscan1045_scan2773
  rxscan1045_loop2772:
    inc rx1044_pos
    gt rx1044_pos, rx1044_eos, rx1044_fail2768
    repr_bind_attr_int rx1044_cur, rx1044_curclass, "$!from", rx1044_pos
  rxscan1045_scan2773:
    nqp_rxmark rx1044_bstack, rxscan1045_loop2772, rx1044_pos, 0
  rxscan1045_done2774:
    ge rx1044_pos, rx1044_eos, rx1044_fail2768
    substr $S11, rx1044_tgt, rx1044_pos, 1
    index $I11, ucs4:"\x{ab}", $S11
    lt $I11, 0, rx1044_fail2768
    repr_bind_attr_int rx1044_cur, rx1044_curclass, "$!pos", rx1044_pos
    $P11 = rx1044_cur."quote_EXPR"(":qq", ":w")
    repr_get_attr_int $I11, $P11, rx1044_curclass, "$!pos"
    lt $I11, 0, rx1044_fail2768
    nqp_rxmark rx1044_bstack, rxsubrule1046_pass2775, -1, 0
  rxsubrule1046_pass2775:
    rx1044_cstack = rx1044_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1044_pos, $P11, rx1044_curclass, "$!pos"
    rx1044_cur."!cursor_pass"(rx1044_pos, utf8:"circumfix:sym<\x{ab} \x{bb}>", 'backtrack'=>1)
    .return (rx1044_cur)
  rx1044_restart2767:
    repr_get_attr_obj rx1044_cstack, rx1044_cur, rx1044_curclass, "$!cstack"
  rx1044_fail2768:
    unless rx1044_bstack, rx1044_done2766
    pop $I19, rx1044_bstack
    if_null rx1044_cstack, rx1044_cstack_done2771
    unless rx1044_cstack, rx1044_cstack_done2771
    dec $I19
    set $P11, rx1044_cstack[$I19]
  rx1044_cstack_done2771:
    pop rx1044_rep, rx1044_bstack
    pop rx1044_pos, rx1044_bstack
    pop $I19, rx1044_bstack
    lt rx1044_pos, -1, rx1044_done2766
    lt rx1044_pos, 0, rx1044_fail2768
    eq $I19, 0, rx1044_fail2768
    nqp_islist $I20, rx1044_cstack
    unless $I20, rx1044_jump2769
    elements $I18, rx1044_bstack
    le $I18, 0, rx1044_cut2770
    dec $I18
    set $I18, rx1044_bstack[$I18]
  rx1044_cut2770:
    assign rx1044_cstack, $I18
  rx1044_jump2769:
    jump $I19
  rx1044_done2766:
    rx1044_cur."!cursor_fail"()
    .return (rx1044_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_164_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1257
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1047_tgt
    .local int rx1047_pos
    .local int rx1047_off
    .local int rx1047_eos
    .local int rx1047_rep
    .local pmc rx1047_cur
    .local pmc rx1047_curclass
    .local pmc rx1047_bstack
    .local pmc rx1047_cstack
    (rx1047_cur, rx1047_tgt, rx1047_pos, rx1047_curclass, rx1047_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1047_cur
    length rx1047_eos, rx1047_tgt
    eq $I19, 1, rx1047_restart2778
    gt rx1047_pos, rx1047_eos, rx1047_fail2779
    repr_get_attr_int $I11, self, rx1047_curclass, "$!from"
    ne $I11, -1, rxscan1048_done2785
    goto rxscan1048_scan2784
  rxscan1048_loop2783:
    inc rx1047_pos
    gt rx1047_pos, rx1047_eos, rx1047_fail2779
    repr_bind_attr_int rx1047_cur, rx1047_curclass, "$!from", rx1047_pos
  rxscan1048_scan2784:
    nqp_rxmark rx1047_bstack, rxscan1048_loop2783, rx1047_pos, 0
  rxscan1048_done2785:
    ge rx1047_pos, rx1047_eos, rx1047_fail2779
    substr $S11, rx1047_tgt, rx1047_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1047_fail2779
    repr_bind_attr_int rx1047_cur, rx1047_curclass, "$!pos", rx1047_pos
    $P11 = rx1047_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx1047_curclass, "$!pos"
    lt $I11, 0, rx1047_fail2779
    nqp_rxmark rx1047_bstack, rxsubrule1049_pass2786, -1, 0
  rxsubrule1049_pass2786:
    rx1047_cstack = rx1047_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx1047_pos, $P11, rx1047_curclass, "$!pos"
    rx1047_cur."!cursor_pass"(rx1047_pos, "circumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx1047_cur)
  rx1047_restart2778:
    repr_get_attr_obj rx1047_cstack, rx1047_cur, rx1047_curclass, "$!cstack"
  rx1047_fail2779:
    unless rx1047_bstack, rx1047_done2777
    pop $I19, rx1047_bstack
    if_null rx1047_cstack, rx1047_cstack_done2782
    unless rx1047_cstack, rx1047_cstack_done2782
    dec $I19
    set $P11, rx1047_cstack[$I19]
  rx1047_cstack_done2782:
    pop rx1047_rep, rx1047_bstack
    pop rx1047_pos, rx1047_bstack
    pop $I19, rx1047_bstack
    lt rx1047_pos, -1, rx1047_done2777
    lt rx1047_pos, 0, rx1047_fail2779
    eq $I19, 0, rx1047_fail2779
    nqp_islist $I20, rx1047_cstack
    unless $I20, rx1047_jump2780
    elements $I18, rx1047_bstack
    le $I18, 0, rx1047_cut2781
    dec $I18
    set $I18, rx1047_bstack[$I18]
  rx1047_cut2781:
    assign rx1047_cstack, $I18
  rx1047_jump2780:
    jump $I19
  rx1047_done2777:
    rx1047_cur."!cursor_fail"()
    .return (rx1047_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<sigil>" :subid("cuid_165_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1258
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1050_tgt
    .local int rx1050_pos
    .local int rx1050_off
    .local int rx1050_eos
    .local int rx1050_rep
    .local pmc rx1050_cur
    .local pmc rx1050_curclass
    .local pmc rx1050_bstack
    .local pmc rx1050_cstack
    (rx1050_cur, rx1050_tgt, rx1050_pos, rx1050_curclass, rx1050_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1050_cur
    length rx1050_eos, rx1050_tgt
    eq $I19, 1, rx1050_restart2789
    gt rx1050_pos, rx1050_eos, rx1050_fail2790
    repr_get_attr_int $I11, self, rx1050_curclass, "$!from"
    ne $I11, -1, rxscan1051_done2796
    goto rxscan1051_scan2795
  rxscan1051_loop2794:
    inc rx1050_pos
    gt rx1050_pos, rx1050_eos, rx1050_fail2790
    repr_bind_attr_int rx1050_cur, rx1050_curclass, "$!from", rx1050_pos
  rxscan1051_scan2795:
    nqp_rxmark rx1050_bstack, rxscan1051_loop2794, rx1050_pos, 0
  rxscan1051_done2796:
    repr_bind_attr_int rx1050_cur, rx1050_curclass, "$!pos", rx1050_pos
    $P11 = rx1050_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx1050_curclass, "$!pos"
    lt $I11, 0, rx1050_fail2790
    nqp_rxmark rx1050_bstack, rxsubrule1052_pass2797, -1, 0
  rxsubrule1052_pass2797:
    rx1050_cstack = rx1050_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx1050_pos, $P11, rx1050_curclass, "$!pos"
    add $I11, rx1050_pos, 1
    gt $I11, rx1050_eos, rx1050_fail2790
    substr $S10, rx1050_tgt, rx1050_pos, 1
    ne $S10, ucs4:"(", rx1050_fail2790
    add rx1050_pos, 1
    repr_bind_attr_int rx1050_cur, rx1050_curclass, "$!pos", rx1050_pos
    $P11 = rx1050_cur."semilist"()
    repr_get_attr_int $I11, $P11, rx1050_curclass, "$!pos"
    lt $I11, 0, rx1050_fail2790
    nqp_rxmark rx1050_bstack, rxsubrule1053_pass2798, -1, 0
  rxsubrule1053_pass2798:
    rx1050_cstack = rx1050_cur."!cursor_capture"($P11, "semilist")
    repr_get_attr_int rx1050_pos, $P11, rx1050_curclass, "$!pos"
  alt1054_02800:
    nqp_rxmark rx1050_bstack, alt1054_12801, rx1050_pos, 0
    add $I11, rx1050_pos, 1
    gt $I11, rx1050_eos, rx1050_fail2790
    substr $S10, rx1050_tgt, rx1050_pos, 1
    ne $S10, ucs4:")", rx1050_fail2790
    add rx1050_pos, 1
    goto alt1054_end2799
  alt1054_12801:
    repr_bind_attr_int rx1050_cur, rx1050_curclass, "$!pos", rx1050_pos
    $P11 = rx1050_cur."FAILGOAL"("')'")
    repr_get_attr_int $I11, $P11, rx1050_curclass, "$!pos"
    lt $I11, 0, rx1050_fail2790
    goto rxsubrule1055_pass2802
  rxsubrule1055_back2803:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx1050_curclass, "$!pos"
    lt $I11, 0, rx1050_fail2790
  rxsubrule1055_pass2802:
    rx1050_cstack = rx1050_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule1055_back2803
    push rx1050_bstack, $I11
    push rx1050_bstack, 0
    push rx1050_bstack, rx1050_pos
    elements $I11, rx1050_cstack
    push rx1050_bstack, $I11
    repr_get_attr_int rx1050_pos, $P11, rx1050_curclass, "$!pos"
  alt1054_end2799:
    rx1050_cur."!cursor_pass"(rx1050_pos, "circumfix:sym<sigil>", 'backtrack'=>1)
    .return (rx1050_cur)
  rx1050_restart2789:
    repr_get_attr_obj rx1050_cstack, rx1050_cur, rx1050_curclass, "$!cstack"
  rx1050_fail2790:
    unless rx1050_bstack, rx1050_done2788
    pop $I19, rx1050_bstack
    if_null rx1050_cstack, rx1050_cstack_done2793
    unless rx1050_cstack, rx1050_cstack_done2793
    dec $I19
    set $P11, rx1050_cstack[$I19]
  rx1050_cstack_done2793:
    pop rx1050_rep, rx1050_bstack
    pop rx1050_pos, rx1050_bstack
    pop $I19, rx1050_bstack
    lt rx1050_pos, -1, rx1050_done2788
    lt rx1050_pos, 0, rx1050_fail2790
    eq $I19, 0, rx1050_fail2790
    nqp_islist $I20, rx1050_cstack
    unless $I20, rx1050_jump2791
    elements $I18, rx1050_bstack
    le $I18, 0, rx1050_cut2792
    dec $I18
    set $I18, rx1050_bstack[$I18]
  rx1050_cut2792:
    assign rx1050_cstack, $I18
  rx1050_jump2791:
    jump $I19
  rx1050_done2788:
    rx1050_cur."!cursor_fail"()
    .return (rx1050_cur) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_166_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1260
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1056_tgt
    .local int rx1056_pos
    .local int rx1056_off
    .local int rx1056_eos
    .local int rx1056_rep
    .local pmc rx1056_cur
    .local pmc rx1056_curclass
    .local pmc rx1056_bstack
    .local pmc rx1056_cstack
    (rx1056_cur, rx1056_tgt, rx1056_pos, rx1056_curclass, rx1056_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1056_cur
    length rx1056_eos, rx1056_tgt
    eq $I19, 1, rx1056_restart2806
    gt rx1056_pos, rx1056_eos, rx1056_fail2807
    repr_get_attr_int $I11, self, rx1056_curclass, "$!from"
    ne $I11, -1, rxscan1057_done2813
    goto rxscan1057_scan2812
  rxscan1057_loop2811:
    inc rx1056_pos
    gt rx1056_pos, rx1056_eos, rx1056_fail2807
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!from", rx1056_pos
  rxscan1057_scan2812:
    nqp_rxmark rx1056_bstack, rxscan1057_loop2811, rx1056_pos, 0
  rxscan1057_done2813:
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!pos", rx1056_pos
    $P11 = rx1056_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1056_curclass, "$!pos"
    lt $I11, 0, rx1056_fail2807
    repr_get_attr_int rx1056_pos, $P11, rx1056_curclass, "$!pos"
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!pos", rx1056_pos
    $P11 = rx1056_cur."statement"()
    repr_get_attr_int $I11, $P11, rx1056_curclass, "$!pos"
    lt $I11, 0, rx1056_fail2807
    nqp_rxmark rx1056_bstack, rxsubrule1059_pass2815, -1, 0
  rxsubrule1059_pass2815:
    rx1056_cstack = rx1056_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1056_pos, $P11, rx1056_curclass, "$!pos"
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!pos", rx1056_pos
    $P11 = rx1056_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1056_curclass, "$!pos"
    lt $I11, 0, rx1056_fail2807
    repr_get_attr_int rx1056_pos, $P11, rx1056_curclass, "$!pos"
    rx1056_cur."!cursor_pass"(rx1056_pos, "semilist", 'backtrack'=>1)
    .return (rx1056_cur)
  rx1056_restart2806:
    repr_get_attr_obj rx1056_cstack, rx1056_cur, rx1056_curclass, "$!cstack"
  rx1056_fail2807:
    unless rx1056_bstack, rx1056_done2805
    pop $I19, rx1056_bstack
    if_null rx1056_cstack, rx1056_cstack_done2810
    unless rx1056_cstack, rx1056_cstack_done2810
    dec $I19
    set $P11, rx1056_cstack[$I19]
  rx1056_cstack_done2810:
    pop rx1056_rep, rx1056_bstack
    pop rx1056_pos, rx1056_bstack
    pop $I19, rx1056_bstack
    lt rx1056_pos, -1, rx1056_done2805
    lt rx1056_pos, 0, rx1056_fail2807
    eq $I19, 0, rx1056_fail2807
    nqp_islist $I20, rx1056_cstack
    unless $I20, rx1056_jump2808
    elements $I18, rx1056_bstack
    le $I18, 0, rx1056_cut2809
    dec $I18
    set $I18, rx1056_bstack[$I18]
  rx1056_cut2809:
    assign rx1056_cstack, $I18
  rx1056_jump2808:
    jump $I19
  rx1056_done2805:
    rx1056_cur."!cursor_fail"()
    .return (rx1056_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infixish" :subid("cuid_167_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1283
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1061_tgt
    .local int rx1061_pos
    .local int rx1061_off
    .local int rx1061_eos
    .local int rx1061_rep
    .local pmc rx1061_cur
    .local pmc rx1061_curclass
    .local pmc rx1061_bstack
    .local pmc rx1061_cstack
    (rx1061_cur, rx1061_tgt, rx1061_pos, rx1061_curclass, rx1061_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1061_cur
    length rx1061_eos, rx1061_tgt
    eq $I19, 1, rx1061_restart2819
    gt rx1061_pos, rx1061_eos, rx1061_fail2820
    repr_get_attr_int $I11, self, rx1061_curclass, "$!from"
    ne $I11, -1, rxscan1062_done2826
    goto rxscan1062_scan2825
  rxscan1062_loop2824:
    inc rx1061_pos
    gt rx1061_pos, rx1061_eos, rx1061_fail2820
    repr_bind_attr_int rx1061_cur, rx1061_curclass, "$!from", rx1061_pos
  rxscan1062_scan2825:
    nqp_rxmark rx1061_bstack, rxscan1062_loop2824, rx1061_pos, 0
  rxscan1062_done2826:
    repr_bind_attr_int rx1061_cur, rx1061_curclass, "$!pos", rx1061_pos
    $P11 = rx1061_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx1061_curclass, "$!pos"
    ge $I11, 0, rx1061_fail2820
    repr_bind_attr_int rx1061_cur, rx1061_curclass, "$!pos", rx1061_pos
    $P11 = rx1061_cur."infix"()
    repr_get_attr_int $I11, $P11, rx1061_curclass, "$!pos"
    lt $I11, 0, rx1061_fail2820
    nqp_rxmark rx1061_bstack, rxsubrule1063_pass2827, -1, 0
  rxsubrule1063_pass2827:
    rx1061_cstack = rx1061_cur."!cursor_capture"($P11, "OPER=infix")
    repr_get_attr_int rx1061_pos, $P11, rx1061_curclass, "$!pos"
    rx1061_cur."!cursor_pass"(rx1061_pos, "infixish", 'backtrack'=>1)
    .return (rx1061_cur)
  rx1061_restart2819:
    repr_get_attr_obj rx1061_cstack, rx1061_cur, rx1061_curclass, "$!cstack"
  rx1061_fail2820:
    unless rx1061_bstack, rx1061_done2818
    pop $I19, rx1061_bstack
    if_null rx1061_cstack, rx1061_cstack_done2823
    unless rx1061_cstack, rx1061_cstack_done2823
    dec $I19
    set $P11, rx1061_cstack[$I19]
  rx1061_cstack_done2823:
    pop rx1061_rep, rx1061_bstack
    pop rx1061_pos, rx1061_bstack
    pop $I19, rx1061_bstack
    lt rx1061_pos, -1, rx1061_done2818
    lt rx1061_pos, 0, rx1061_fail2820
    eq $I19, 0, rx1061_fail2820
    nqp_islist $I20, rx1061_cstack
    unless $I20, rx1061_jump2821
    elements $I18, rx1061_bstack
    le $I18, 0, rx1061_cut2822
    dec $I18
    set $I18, rx1061_bstack[$I18]
  rx1061_cut2822:
    assign rx1061_cstack, $I18
  rx1061_jump2821:
    jump $I19
  rx1061_done2818:
    rx1061_cur."!cursor_fail"()
    .return (rx1061_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infixstopper" :subid("cuid_168_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1284
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1064_tgt
    .local int rx1064_pos
    .local int rx1064_off
    .local int rx1064_eos
    .local int rx1064_rep
    .local pmc rx1064_cur
    .local pmc rx1064_curclass
    .local pmc rx1064_bstack
    .local pmc rx1064_cstack
    (rx1064_cur, rx1064_tgt, rx1064_pos, rx1064_curclass, rx1064_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1064_cur
    length rx1064_eos, rx1064_tgt
    eq $I19, 1, rx1064_restart2830
    gt rx1064_pos, rx1064_eos, rx1064_fail2831
    repr_get_attr_int $I11, self, rx1064_curclass, "$!from"
    ne $I11, -1, rxscan1065_done2837
    goto rxscan1065_scan2836
  rxscan1065_loop2835:
    inc rx1064_pos
    gt rx1064_pos, rx1064_eos, rx1064_fail2831
    repr_bind_attr_int rx1064_cur, rx1064_curclass, "$!from", rx1064_pos
  rxscan1065_scan2836:
    nqp_rxmark rx1064_bstack, rxscan1065_loop2835, rx1064_pos, 0
  rxscan1065_done2837:
    repr_bind_attr_int rx1064_cur, rx1064_curclass, "$!pos", rx1064_pos
    $P11 = rx1064_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx1064_curclass, "$!pos"
    lt $I11, 0, rx1064_fail2831
    rx1064_cur."!cursor_pass"(rx1064_pos, "infixstopper", 'backtrack'=>1)
    .return (rx1064_cur)
  rx1064_restart2830:
    repr_get_attr_obj rx1064_cstack, rx1064_cur, rx1064_curclass, "$!cstack"
  rx1064_fail2831:
    unless rx1064_bstack, rx1064_done2829
    pop $I19, rx1064_bstack
    if_null rx1064_cstack, rx1064_cstack_done2834
    unless rx1064_cstack, rx1064_cstack_done2834
    dec $I19
    set $P11, rx1064_cstack[$I19]
  rx1064_cstack_done2834:
    pop rx1064_rep, rx1064_bstack
    pop rx1064_pos, rx1064_bstack
    pop $I19, rx1064_bstack
    lt rx1064_pos, -1, rx1064_done2829
    lt rx1064_pos, 0, rx1064_fail2831
    eq $I19, 0, rx1064_fail2831
    nqp_islist $I20, rx1064_cstack
    unless $I20, rx1064_jump2832
    elements $I18, rx1064_bstack
    le $I18, 0, rx1064_cut2833
    dec $I18
    set $I18, rx1064_bstack[$I18]
  rx1064_cut2833:
    assign rx1064_cstack, $I18
  rx1064_jump2832:
    jump $I19
  rx1064_done2829:
    rx1064_cur."!cursor_fail"()
    .return (rx1064_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_169_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1286
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1066_tgt
    .local int rx1066_pos
    .local int rx1066_off
    .local int rx1066_eos
    .local int rx1066_rep
    .local pmc rx1066_cur
    .local pmc rx1066_curclass
    .local pmc rx1066_bstack
    .local pmc rx1066_cstack
    (rx1066_cur, rx1066_tgt, rx1066_pos, rx1066_curclass, rx1066_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1066_cur
    length rx1066_eos, rx1066_tgt
    eq $I19, 1, rx1066_restart2840
    gt rx1066_pos, rx1066_eos, rx1066_fail2841
    repr_get_attr_int $I11, self, rx1066_curclass, "$!from"
    ne $I11, -1, rxscan1067_done2847
    goto rxscan1067_scan2846
  rxscan1067_loop2845:
    inc rx1066_pos
    gt rx1066_pos, rx1066_eos, rx1066_fail2841
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!from", rx1066_pos
  rxscan1067_scan2846:
    nqp_rxmark rx1066_bstack, rxscan1067_loop2845, rx1066_pos, 0
  rxscan1067_done2847:
    add $I11, rx1066_pos, 1
    gt $I11, rx1066_eos, rx1066_fail2841
    substr $S10, rx1066_tgt, rx1066_pos, 1
    ne $S10, ucs4:"[", rx1066_fail2841
    add rx1066_pos, 1
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!pos", rx1066_pos
    $P11 = rx1066_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1066_curclass, "$!pos"
    lt $I11, 0, rx1066_fail2841
    repr_get_attr_int rx1066_pos, $P11, rx1066_curclass, "$!pos"
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!pos", rx1066_pos
    $P11 = rx1066_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1066_curclass, "$!pos"
    lt $I11, 0, rx1066_fail2841
    nqp_rxmark rx1066_bstack, rxsubrule1069_pass2849, -1, 0
  rxsubrule1069_pass2849:
    rx1066_cstack = rx1066_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1066_pos, $P11, rx1066_curclass, "$!pos"
    add $I11, rx1066_pos, 1
    gt $I11, rx1066_eos, rx1066_fail2841
    substr $S10, rx1066_tgt, rx1066_pos, 1
    ne $S10, ucs4:"]", rx1066_fail2841
    add rx1066_pos, 1
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!pos", rx1066_pos
    $P11 = rx1066_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1066_curclass, "$!pos"
    lt $I11, 0, rx1066_fail2841
    nqp_rxmark rx1066_bstack, rxsubrule1070_pass2850, -1, 0
  rxsubrule1070_pass2850:
    rx1066_cstack = rx1066_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1066_pos, $P11, rx1066_curclass, "$!pos"
    rx1066_cur."!cursor_pass"(rx1066_pos, "postcircumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx1066_cur)
  rx1066_restart2840:
    repr_get_attr_obj rx1066_cstack, rx1066_cur, rx1066_curclass, "$!cstack"
  rx1066_fail2841:
    unless rx1066_bstack, rx1066_done2839
    pop $I19, rx1066_bstack
    if_null rx1066_cstack, rx1066_cstack_done2844
    unless rx1066_cstack, rx1066_cstack_done2844
    dec $I19
    set $P11, rx1066_cstack[$I19]
  rx1066_cstack_done2844:
    pop rx1066_rep, rx1066_bstack
    pop rx1066_pos, rx1066_bstack
    pop $I19, rx1066_bstack
    lt rx1066_pos, -1, rx1066_done2839
    lt rx1066_pos, 0, rx1066_fail2841
    eq $I19, 0, rx1066_fail2841
    nqp_islist $I20, rx1066_cstack
    unless $I20, rx1066_jump2842
    elements $I18, rx1066_bstack
    le $I18, 0, rx1066_cut2843
    dec $I18
    set $I18, rx1066_bstack[$I18]
  rx1066_cut2843:
    assign rx1066_cstack, $I18
  rx1066_jump2842:
    jump $I19
  rx1066_done2839:
    rx1066_cur."!cursor_fail"()
    .return (rx1066_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_170_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1291
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1071_tgt
    .local int rx1071_pos
    .local int rx1071_off
    .local int rx1071_eos
    .local int rx1071_rep
    .local pmc rx1071_cur
    .local pmc rx1071_curclass
    .local pmc rx1071_bstack
    .local pmc rx1071_cstack
    (rx1071_cur, rx1071_tgt, rx1071_pos, rx1071_curclass, rx1071_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1071_cur
    length rx1071_eos, rx1071_tgt
    eq $I19, 1, rx1071_restart2853
    gt rx1071_pos, rx1071_eos, rx1071_fail2854
    repr_get_attr_int $I11, self, rx1071_curclass, "$!from"
    ne $I11, -1, rxscan1072_done2860
    goto rxscan1072_scan2859
  rxscan1072_loop2858:
    inc rx1071_pos
    gt rx1071_pos, rx1071_eos, rx1071_fail2854
    repr_bind_attr_int rx1071_cur, rx1071_curclass, "$!from", rx1071_pos
  rxscan1072_scan2859:
    nqp_rxmark rx1071_bstack, rxscan1072_loop2858, rx1071_pos, 0
  rxscan1072_done2860:
    add $I11, rx1071_pos, 1
    gt $I11, rx1071_eos, rx1071_fail2854
    substr $S10, rx1071_tgt, rx1071_pos, 1
    ne $S10, ucs4:"{", rx1071_fail2854
    add rx1071_pos, 1
    repr_bind_attr_int rx1071_cur, rx1071_curclass, "$!pos", rx1071_pos
    $P11 = rx1071_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1071_curclass, "$!pos"
    lt $I11, 0, rx1071_fail2854
    repr_get_attr_int rx1071_pos, $P11, rx1071_curclass, "$!pos"
    repr_bind_attr_int rx1071_cur, rx1071_curclass, "$!pos", rx1071_pos
    $P11 = rx1071_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1071_curclass, "$!pos"
    lt $I11, 0, rx1071_fail2854
    nqp_rxmark rx1071_bstack, rxsubrule1074_pass2862, -1, 0
  rxsubrule1074_pass2862:
    rx1071_cstack = rx1071_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1071_pos, $P11, rx1071_curclass, "$!pos"
    add $I11, rx1071_pos, 1
    gt $I11, rx1071_eos, rx1071_fail2854
    substr $S10, rx1071_tgt, rx1071_pos, 1
    ne $S10, ucs4:"}", rx1071_fail2854
    add rx1071_pos, 1
    repr_bind_attr_int rx1071_cur, rx1071_curclass, "$!pos", rx1071_pos
    $P11 = rx1071_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1071_curclass, "$!pos"
    lt $I11, 0, rx1071_fail2854
    nqp_rxmark rx1071_bstack, rxsubrule1075_pass2863, -1, 0
  rxsubrule1075_pass2863:
    rx1071_cstack = rx1071_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1071_pos, $P11, rx1071_curclass, "$!pos"
    rx1071_cur."!cursor_pass"(rx1071_pos, "postcircumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx1071_cur)
  rx1071_restart2853:
    repr_get_attr_obj rx1071_cstack, rx1071_cur, rx1071_curclass, "$!cstack"
  rx1071_fail2854:
    unless rx1071_bstack, rx1071_done2852
    pop $I19, rx1071_bstack
    if_null rx1071_cstack, rx1071_cstack_done2857
    unless rx1071_cstack, rx1071_cstack_done2857
    dec $I19
    set $P11, rx1071_cstack[$I19]
  rx1071_cstack_done2857:
    pop rx1071_rep, rx1071_bstack
    pop rx1071_pos, rx1071_bstack
    pop $I19, rx1071_bstack
    lt rx1071_pos, -1, rx1071_done2852
    lt rx1071_pos, 0, rx1071_fail2854
    eq $I19, 0, rx1071_fail2854
    nqp_islist $I20, rx1071_cstack
    unless $I20, rx1071_jump2855
    elements $I18, rx1071_bstack
    le $I18, 0, rx1071_cut2856
    dec $I18
    set $I18, rx1071_bstack[$I18]
  rx1071_cut2856:
    assign rx1071_cstack, $I18
  rx1071_jump2855:
    jump $I19
  rx1071_done2852:
    rx1071_cur."!cursor_fail"()
    .return (rx1071_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_171_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1296
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1076_tgt
    .local int rx1076_pos
    .local int rx1076_off
    .local int rx1076_eos
    .local int rx1076_rep
    .local pmc rx1076_cur
    .local pmc rx1076_curclass
    .local pmc rx1076_bstack
    .local pmc rx1076_cstack
    (rx1076_cur, rx1076_tgt, rx1076_pos, rx1076_curclass, rx1076_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1076_cur
    length rx1076_eos, rx1076_tgt
    eq $I19, 1, rx1076_restart2866
    gt rx1076_pos, rx1076_eos, rx1076_fail2867
    repr_get_attr_int $I11, self, rx1076_curclass, "$!from"
    ne $I11, -1, rxscan1077_done2873
    goto rxscan1077_scan2872
  rxscan1077_loop2871:
    inc rx1076_pos
    gt rx1076_pos, rx1076_eos, rx1076_fail2867
    repr_bind_attr_int rx1076_cur, rx1076_curclass, "$!from", rx1076_pos
  rxscan1077_scan2872:
    nqp_rxmark rx1076_bstack, rxscan1077_loop2871, rx1076_pos, 0
  rxscan1077_done2873:
    ge rx1076_pos, rx1076_eos, rx1076_fail2867
    substr $S11, rx1076_tgt, rx1076_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx1076_fail2867
    repr_bind_attr_int rx1076_cur, rx1076_curclass, "$!pos", rx1076_pos
    $P11 = rx1076_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx1076_curclass, "$!pos"
    lt $I11, 0, rx1076_fail2867
    nqp_rxmark rx1076_bstack, rxsubrule1078_pass2874, -1, 0
  rxsubrule1078_pass2874:
    rx1076_cstack = rx1076_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1076_pos, $P11, rx1076_curclass, "$!pos"
    repr_bind_attr_int rx1076_cur, rx1076_curclass, "$!pos", rx1076_pos
    $P11 = rx1076_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1076_curclass, "$!pos"
    lt $I11, 0, rx1076_fail2867
    nqp_rxmark rx1076_bstack, rxsubrule1079_pass2875, -1, 0
  rxsubrule1079_pass2875:
    rx1076_cstack = rx1076_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1076_pos, $P11, rx1076_curclass, "$!pos"
    rx1076_cur."!cursor_pass"(rx1076_pos, "postcircumfix:sym<ang>", 'backtrack'=>1)
    .return (rx1076_cur)
  rx1076_restart2866:
    repr_get_attr_obj rx1076_cstack, rx1076_cur, rx1076_curclass, "$!cstack"
  rx1076_fail2867:
    unless rx1076_bstack, rx1076_done2865
    pop $I19, rx1076_bstack
    if_null rx1076_cstack, rx1076_cstack_done2870
    unless rx1076_cstack, rx1076_cstack_done2870
    dec $I19
    set $P11, rx1076_cstack[$I19]
  rx1076_cstack_done2870:
    pop rx1076_rep, rx1076_bstack
    pop rx1076_pos, rx1076_bstack
    pop $I19, rx1076_bstack
    lt rx1076_pos, -1, rx1076_done2865
    lt rx1076_pos, 0, rx1076_fail2867
    eq $I19, 0, rx1076_fail2867
    nqp_islist $I20, rx1076_cstack
    unless $I20, rx1076_jump2868
    elements $I18, rx1076_bstack
    le $I18, 0, rx1076_cut2869
    dec $I18
    set $I18, rx1076_bstack[$I18]
  rx1076_cut2869:
    assign rx1076_cstack, $I18
  rx1076_jump2868:
    jump $I19
  rx1076_done2865:
    rx1076_cur."!cursor_fail"()
    .return (rx1076_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_172_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1301
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1080_tgt
    .local int rx1080_pos
    .local int rx1080_off
    .local int rx1080_eos
    .local int rx1080_rep
    .local pmc rx1080_cur
    .local pmc rx1080_curclass
    .local pmc rx1080_bstack
    .local pmc rx1080_cstack
    (rx1080_cur, rx1080_tgt, rx1080_pos, rx1080_curclass, rx1080_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1080_cur
    length rx1080_eos, rx1080_tgt
    eq $I19, 1, rx1080_restart2878
    gt rx1080_pos, rx1080_eos, rx1080_fail2879
    repr_get_attr_int $I11, self, rx1080_curclass, "$!from"
    ne $I11, -1, rxscan1081_done2885
    goto rxscan1081_scan2884
  rxscan1081_loop2883:
    inc rx1080_pos
    gt rx1080_pos, rx1080_eos, rx1080_fail2879
    repr_bind_attr_int rx1080_cur, rx1080_curclass, "$!from", rx1080_pos
  rxscan1081_scan2884:
    nqp_rxmark rx1080_bstack, rxscan1081_loop2883, rx1080_pos, 0
  rxscan1081_done2885:
    add $I11, rx1080_pos, 1
    gt $I11, rx1080_eos, rx1080_fail2879
    substr $S10, rx1080_tgt, rx1080_pos, 1
    ne $S10, ucs4:"(", rx1080_fail2879
    add rx1080_pos, 1
    repr_bind_attr_int rx1080_cur, rx1080_curclass, "$!pos", rx1080_pos
    $P11 = rx1080_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1080_curclass, "$!pos"
    lt $I11, 0, rx1080_fail2879
    repr_get_attr_int rx1080_pos, $P11, rx1080_curclass, "$!pos"
    repr_bind_attr_int rx1080_cur, rx1080_curclass, "$!pos", rx1080_pos
    $P11 = rx1080_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1080_curclass, "$!pos"
    lt $I11, 0, rx1080_fail2879
    nqp_rxmark rx1080_bstack, rxsubrule1083_pass2887, -1, 0
  rxsubrule1083_pass2887:
    rx1080_cstack = rx1080_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1080_pos, $P11, rx1080_curclass, "$!pos"
    add $I11, rx1080_pos, 1
    gt $I11, rx1080_eos, rx1080_fail2879
    substr $S10, rx1080_tgt, rx1080_pos, 1
    ne $S10, ucs4:")", rx1080_fail2879
    add rx1080_pos, 1
    repr_bind_attr_int rx1080_cur, rx1080_curclass, "$!pos", rx1080_pos
    $P11 = rx1080_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1080_curclass, "$!pos"
    lt $I11, 0, rx1080_fail2879
    nqp_rxmark rx1080_bstack, rxsubrule1084_pass2888, -1, 0
  rxsubrule1084_pass2888:
    rx1080_cstack = rx1080_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1080_pos, $P11, rx1080_curclass, "$!pos"
    rx1080_cur."!cursor_pass"(rx1080_pos, "postcircumfix:sym<( )>", 'backtrack'=>1)
    .return (rx1080_cur)
  rx1080_restart2878:
    repr_get_attr_obj rx1080_cstack, rx1080_cur, rx1080_curclass, "$!cstack"
  rx1080_fail2879:
    unless rx1080_bstack, rx1080_done2877
    pop $I19, rx1080_bstack
    if_null rx1080_cstack, rx1080_cstack_done2882
    unless rx1080_cstack, rx1080_cstack_done2882
    dec $I19
    set $P11, rx1080_cstack[$I19]
  rx1080_cstack_done2882:
    pop rx1080_rep, rx1080_bstack
    pop rx1080_pos, rx1080_bstack
    pop $I19, rx1080_bstack
    lt rx1080_pos, -1, rx1080_done2877
    lt rx1080_pos, 0, rx1080_fail2879
    eq $I19, 0, rx1080_fail2879
    nqp_islist $I20, rx1080_cstack
    unless $I20, rx1080_jump2880
    elements $I18, rx1080_bstack
    le $I18, 0, rx1080_cut2881
    dec $I18
    set $I18, rx1080_bstack[$I18]
  rx1080_cut2881:
    assign rx1080_cstack, $I18
  rx1080_jump2880:
    jump $I19
  rx1080_done2877:
    rx1080_cur."!cursor_fail"()
    .return (rx1080_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_173_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1306
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1085_tgt
    .local int rx1085_pos
    .local int rx1085_off
    .local int rx1085_eos
    .local int rx1085_rep
    .local pmc rx1085_cur
    .local pmc rx1085_curclass
    .local pmc rx1085_bstack
    .local pmc rx1085_cstack
    (rx1085_cur, rx1085_tgt, rx1085_pos, rx1085_curclass, rx1085_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1085_cur
    length rx1085_eos, rx1085_tgt
    eq $I19, 1, rx1085_restart2891
    gt rx1085_pos, rx1085_eos, rx1085_fail2892
    repr_get_attr_int $I11, self, rx1085_curclass, "$!from"
    ne $I11, -1, rxscan1086_done2898
    goto rxscan1086_scan2897
  rxscan1086_loop2896:
    inc rx1085_pos
    gt rx1085_pos, rx1085_eos, rx1085_fail2892
    repr_bind_attr_int rx1085_cur, rx1085_curclass, "$!from", rx1085_pos
  rxscan1086_scan2897:
    nqp_rxmark rx1085_bstack, rxscan1086_loop2896, rx1085_pos, 0
  rxscan1086_done2898:
    repr_bind_attr_int rx1085_cur, rx1085_curclass, "$!pos", rx1085_pos
    $P11 = rx1085_cur."dotty"()
    repr_get_attr_int $I11, $P11, rx1085_curclass, "$!pos"
    lt $I11, 0, rx1085_fail2892
    nqp_rxmark rx1085_bstack, rxsubrule1087_pass2899, -1, 0
  rxsubrule1087_pass2899:
    rx1085_cstack = rx1085_cur."!cursor_capture"($P11, "dotty")
    repr_get_attr_int rx1085_pos, $P11, rx1085_curclass, "$!pos"
    repr_bind_attr_int rx1085_cur, rx1085_curclass, "$!pos", rx1085_pos
    $P11 = rx1085_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1085_curclass, "$!pos"
    lt $I11, 0, rx1085_fail2892
    nqp_rxmark rx1085_bstack, rxsubrule1088_pass2900, -1, 0
  rxsubrule1088_pass2900:
    rx1085_cstack = rx1085_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1085_pos, $P11, rx1085_curclass, "$!pos"
    rx1085_cur."!cursor_pass"(rx1085_pos, "postfix:sym<.>", 'backtrack'=>1)
    .return (rx1085_cur)
  rx1085_restart2891:
    repr_get_attr_obj rx1085_cstack, rx1085_cur, rx1085_curclass, "$!cstack"
  rx1085_fail2892:
    unless rx1085_bstack, rx1085_done2890
    pop $I19, rx1085_bstack
    if_null rx1085_cstack, rx1085_cstack_done2895
    unless rx1085_cstack, rx1085_cstack_done2895
    dec $I19
    set $P11, rx1085_cstack[$I19]
  rx1085_cstack_done2895:
    pop rx1085_rep, rx1085_bstack
    pop rx1085_pos, rx1085_bstack
    pop $I19, rx1085_bstack
    lt rx1085_pos, -1, rx1085_done2890
    lt rx1085_pos, 0, rx1085_fail2892
    eq $I19, 0, rx1085_fail2892
    nqp_islist $I20, rx1085_cstack
    unless $I20, rx1085_jump2893
    elements $I18, rx1085_bstack
    le $I18, 0, rx1085_cut2894
    dec $I18
    set $I18, rx1085_bstack[$I18]
  rx1085_cut2894:
    assign rx1085_cstack, $I18
  rx1085_jump2893:
    jump $I19
  rx1085_done2890:
    rx1085_cur."!cursor_fail"()
    .return (rx1085_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<++>" :subid("cuid_174_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1308
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1089_tgt
    .local int rx1089_pos
    .local int rx1089_off
    .local int rx1089_eos
    .local int rx1089_rep
    .local pmc rx1089_cur
    .local pmc rx1089_curclass
    .local pmc rx1089_bstack
    .local pmc rx1089_cstack
    (rx1089_cur, rx1089_tgt, rx1089_pos, rx1089_curclass, rx1089_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1089_cur
    length rx1089_eos, rx1089_tgt
    eq $I19, 1, rx1089_restart2903
    gt rx1089_pos, rx1089_eos, rx1089_fail2904
    repr_get_attr_int $I11, self, rx1089_curclass, "$!from"
    ne $I11, -1, rxscan1090_done2910
    goto rxscan1090_scan2909
  rxscan1090_loop2908:
    inc rx1089_pos
    gt rx1089_pos, rx1089_eos, rx1089_fail2904
    repr_bind_attr_int rx1089_cur, rx1089_curclass, "$!from", rx1089_pos
  rxscan1090_scan2909:
    nqp_rxmark rx1089_bstack, rxscan1090_loop2908, rx1089_pos, 0
  rxscan1090_done2910:
    nqp_rxmark rx1089_bstack, rxcap1091_fail2912, rx1089_pos, 0
    add $I11, rx1089_pos, 2
    gt $I11, rx1089_eos, rx1089_fail2904
    substr $S10, rx1089_tgt, rx1089_pos, 2
    ne $S10, ucs4:"++", rx1089_fail2904
    add rx1089_pos, 2
    nqp_rxpeek $I19, rx1089_bstack, rxcap1091_fail2912
    inc $I19
    set $I11, rx1089_bstack[$I19]
    repr_bind_attr_int rx1089_cur, rx1089_curclass, "$!pos", rx1089_pos
    $P11 = rx1089_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1089_pos)
    rx1089_cstack = rx1089_cur."!cursor_capture"($P11, "sym")
    goto rxcap1091_done2911
  rxcap1091_fail2912:
    goto rx1089_fail2904
  rxcap1091_done2911:
    repr_bind_attr_int rx1089_cur, rx1089_curclass, "$!pos", rx1089_pos
    $P11 = rx1089_cur."O"("%autoincrement, :op<preinc>")
    repr_get_attr_int $I11, $P11, rx1089_curclass, "$!pos"
    lt $I11, 0, rx1089_fail2904
    nqp_rxmark rx1089_bstack, rxsubrule1092_pass2913, -1, 0
  rxsubrule1092_pass2913:
    rx1089_cstack = rx1089_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1089_pos, $P11, rx1089_curclass, "$!pos"
    rx1089_cur."!cursor_pass"(rx1089_pos, "prefix:sym<++>", 'backtrack'=>1)
    .return (rx1089_cur)
  rx1089_restart2903:
    repr_get_attr_obj rx1089_cstack, rx1089_cur, rx1089_curclass, "$!cstack"
  rx1089_fail2904:
    unless rx1089_bstack, rx1089_done2902
    pop $I19, rx1089_bstack
    if_null rx1089_cstack, rx1089_cstack_done2907
    unless rx1089_cstack, rx1089_cstack_done2907
    dec $I19
    set $P11, rx1089_cstack[$I19]
  rx1089_cstack_done2907:
    pop rx1089_rep, rx1089_bstack
    pop rx1089_pos, rx1089_bstack
    pop $I19, rx1089_bstack
    lt rx1089_pos, -1, rx1089_done2902
    lt rx1089_pos, 0, rx1089_fail2904
    eq $I19, 0, rx1089_fail2904
    nqp_islist $I20, rx1089_cstack
    unless $I20, rx1089_jump2905
    elements $I18, rx1089_bstack
    le $I18, 0, rx1089_cut2906
    dec $I18
    set $I18, rx1089_bstack[$I18]
  rx1089_cut2906:
    assign rx1089_cstack, $I18
  rx1089_jump2905:
    jump $I19
  rx1089_done2902:
    rx1089_cur."!cursor_fail"()
    .return (rx1089_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<-->" :subid("cuid_175_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1309
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1093_tgt
    .local int rx1093_pos
    .local int rx1093_off
    .local int rx1093_eos
    .local int rx1093_rep
    .local pmc rx1093_cur
    .local pmc rx1093_curclass
    .local pmc rx1093_bstack
    .local pmc rx1093_cstack
    (rx1093_cur, rx1093_tgt, rx1093_pos, rx1093_curclass, rx1093_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1093_cur
    length rx1093_eos, rx1093_tgt
    eq $I19, 1, rx1093_restart2916
    gt rx1093_pos, rx1093_eos, rx1093_fail2917
    repr_get_attr_int $I11, self, rx1093_curclass, "$!from"
    ne $I11, -1, rxscan1094_done2923
    goto rxscan1094_scan2922
  rxscan1094_loop2921:
    inc rx1093_pos
    gt rx1093_pos, rx1093_eos, rx1093_fail2917
    repr_bind_attr_int rx1093_cur, rx1093_curclass, "$!from", rx1093_pos
  rxscan1094_scan2922:
    nqp_rxmark rx1093_bstack, rxscan1094_loop2921, rx1093_pos, 0
  rxscan1094_done2923:
    nqp_rxmark rx1093_bstack, rxcap1095_fail2925, rx1093_pos, 0
    add $I11, rx1093_pos, 2
    gt $I11, rx1093_eos, rx1093_fail2917
    substr $S10, rx1093_tgt, rx1093_pos, 2
    ne $S10, ucs4:"--", rx1093_fail2917
    add rx1093_pos, 2
    nqp_rxpeek $I19, rx1093_bstack, rxcap1095_fail2925
    inc $I19
    set $I11, rx1093_bstack[$I19]
    repr_bind_attr_int rx1093_cur, rx1093_curclass, "$!pos", rx1093_pos
    $P11 = rx1093_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1093_pos)
    rx1093_cstack = rx1093_cur."!cursor_capture"($P11, "sym")
    goto rxcap1095_done2924
  rxcap1095_fail2925:
    goto rx1093_fail2917
  rxcap1095_done2924:
    repr_bind_attr_int rx1093_cur, rx1093_curclass, "$!pos", rx1093_pos
    $P11 = rx1093_cur."O"("%autoincrement, :op<predec>")
    repr_get_attr_int $I11, $P11, rx1093_curclass, "$!pos"
    lt $I11, 0, rx1093_fail2917
    nqp_rxmark rx1093_bstack, rxsubrule1096_pass2926, -1, 0
  rxsubrule1096_pass2926:
    rx1093_cstack = rx1093_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1093_pos, $P11, rx1093_curclass, "$!pos"
    rx1093_cur."!cursor_pass"(rx1093_pos, "prefix:sym<-->", 'backtrack'=>1)
    .return (rx1093_cur)
  rx1093_restart2916:
    repr_get_attr_obj rx1093_cstack, rx1093_cur, rx1093_curclass, "$!cstack"
  rx1093_fail2917:
    unless rx1093_bstack, rx1093_done2915
    pop $I19, rx1093_bstack
    if_null rx1093_cstack, rx1093_cstack_done2920
    unless rx1093_cstack, rx1093_cstack_done2920
    dec $I19
    set $P11, rx1093_cstack[$I19]
  rx1093_cstack_done2920:
    pop rx1093_rep, rx1093_bstack
    pop rx1093_pos, rx1093_bstack
    pop $I19, rx1093_bstack
    lt rx1093_pos, -1, rx1093_done2915
    lt rx1093_pos, 0, rx1093_fail2917
    eq $I19, 0, rx1093_fail2917
    nqp_islist $I20, rx1093_cstack
    unless $I20, rx1093_jump2918
    elements $I18, rx1093_bstack
    le $I18, 0, rx1093_cut2919
    dec $I18
    set $I18, rx1093_bstack[$I18]
  rx1093_cut2919:
    assign rx1093_cstack, $I18
  rx1093_jump2918:
    jump $I19
  rx1093_done2915:
    rx1093_cur."!cursor_fail"()
    .return (rx1093_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<++>" :subid("cuid_176_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1311
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1097_tgt
    .local int rx1097_pos
    .local int rx1097_off
    .local int rx1097_eos
    .local int rx1097_rep
    .local pmc rx1097_cur
    .local pmc rx1097_curclass
    .local pmc rx1097_bstack
    .local pmc rx1097_cstack
    (rx1097_cur, rx1097_tgt, rx1097_pos, rx1097_curclass, rx1097_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1097_cur
    length rx1097_eos, rx1097_tgt
    eq $I19, 1, rx1097_restart2929
    gt rx1097_pos, rx1097_eos, rx1097_fail2930
    repr_get_attr_int $I11, self, rx1097_curclass, "$!from"
    ne $I11, -1, rxscan1098_done2936
    goto rxscan1098_scan2935
  rxscan1098_loop2934:
    inc rx1097_pos
    gt rx1097_pos, rx1097_eos, rx1097_fail2930
    repr_bind_attr_int rx1097_cur, rx1097_curclass, "$!from", rx1097_pos
  rxscan1098_scan2935:
    nqp_rxmark rx1097_bstack, rxscan1098_loop2934, rx1097_pos, 0
  rxscan1098_done2936:
    nqp_rxmark rx1097_bstack, rxcap1099_fail2938, rx1097_pos, 0
    add $I11, rx1097_pos, 2
    gt $I11, rx1097_eos, rx1097_fail2930
    substr $S10, rx1097_tgt, rx1097_pos, 2
    ne $S10, ucs4:"++", rx1097_fail2930
    add rx1097_pos, 2
    nqp_rxpeek $I19, rx1097_bstack, rxcap1099_fail2938
    inc $I19
    set $I11, rx1097_bstack[$I19]
    repr_bind_attr_int rx1097_cur, rx1097_curclass, "$!pos", rx1097_pos
    $P11 = rx1097_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1097_pos)
    rx1097_cstack = rx1097_cur."!cursor_capture"($P11, "sym")
    goto rxcap1099_done2937
  rxcap1099_fail2938:
    goto rx1097_fail2930
  rxcap1099_done2937:
    repr_bind_attr_int rx1097_cur, rx1097_curclass, "$!pos", rx1097_pos
    $P11 = rx1097_cur."O"("%autoincrement, :op<postinc>")
    repr_get_attr_int $I11, $P11, rx1097_curclass, "$!pos"
    lt $I11, 0, rx1097_fail2930
    nqp_rxmark rx1097_bstack, rxsubrule1100_pass2939, -1, 0
  rxsubrule1100_pass2939:
    rx1097_cstack = rx1097_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1097_pos, $P11, rx1097_curclass, "$!pos"
    rx1097_cur."!cursor_pass"(rx1097_pos, "postfix:sym<++>", 'backtrack'=>1)
    .return (rx1097_cur)
  rx1097_restart2929:
    repr_get_attr_obj rx1097_cstack, rx1097_cur, rx1097_curclass, "$!cstack"
  rx1097_fail2930:
    unless rx1097_bstack, rx1097_done2928
    pop $I19, rx1097_bstack
    if_null rx1097_cstack, rx1097_cstack_done2933
    unless rx1097_cstack, rx1097_cstack_done2933
    dec $I19
    set $P11, rx1097_cstack[$I19]
  rx1097_cstack_done2933:
    pop rx1097_rep, rx1097_bstack
    pop rx1097_pos, rx1097_bstack
    pop $I19, rx1097_bstack
    lt rx1097_pos, -1, rx1097_done2928
    lt rx1097_pos, 0, rx1097_fail2930
    eq $I19, 0, rx1097_fail2930
    nqp_islist $I20, rx1097_cstack
    unless $I20, rx1097_jump2931
    elements $I18, rx1097_bstack
    le $I18, 0, rx1097_cut2932
    dec $I18
    set $I18, rx1097_bstack[$I18]
  rx1097_cut2932:
    assign rx1097_cstack, $I18
  rx1097_jump2931:
    jump $I19
  rx1097_done2928:
    rx1097_cur."!cursor_fail"()
    .return (rx1097_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<-->" :subid("cuid_177_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1312
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1101_tgt
    .local int rx1101_pos
    .local int rx1101_off
    .local int rx1101_eos
    .local int rx1101_rep
    .local pmc rx1101_cur
    .local pmc rx1101_curclass
    .local pmc rx1101_bstack
    .local pmc rx1101_cstack
    (rx1101_cur, rx1101_tgt, rx1101_pos, rx1101_curclass, rx1101_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1101_cur
    length rx1101_eos, rx1101_tgt
    eq $I19, 1, rx1101_restart2942
    gt rx1101_pos, rx1101_eos, rx1101_fail2943
    repr_get_attr_int $I11, self, rx1101_curclass, "$!from"
    ne $I11, -1, rxscan1102_done2949
    goto rxscan1102_scan2948
  rxscan1102_loop2947:
    inc rx1101_pos
    gt rx1101_pos, rx1101_eos, rx1101_fail2943
    repr_bind_attr_int rx1101_cur, rx1101_curclass, "$!from", rx1101_pos
  rxscan1102_scan2948:
    nqp_rxmark rx1101_bstack, rxscan1102_loop2947, rx1101_pos, 0
  rxscan1102_done2949:
    nqp_rxmark rx1101_bstack, rxcap1103_fail2951, rx1101_pos, 0
    add $I11, rx1101_pos, 2
    gt $I11, rx1101_eos, rx1101_fail2943
    substr $S10, rx1101_tgt, rx1101_pos, 2
    ne $S10, ucs4:"--", rx1101_fail2943
    add rx1101_pos, 2
    nqp_rxpeek $I19, rx1101_bstack, rxcap1103_fail2951
    inc $I19
    set $I11, rx1101_bstack[$I19]
    repr_bind_attr_int rx1101_cur, rx1101_curclass, "$!pos", rx1101_pos
    $P11 = rx1101_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1101_pos)
    rx1101_cstack = rx1101_cur."!cursor_capture"($P11, "sym")
    goto rxcap1103_done2950
  rxcap1103_fail2951:
    goto rx1101_fail2943
  rxcap1103_done2950:
    repr_bind_attr_int rx1101_cur, rx1101_curclass, "$!pos", rx1101_pos
    $P11 = rx1101_cur."O"("%autoincrement, :op<postdec>")
    repr_get_attr_int $I11, $P11, rx1101_curclass, "$!pos"
    lt $I11, 0, rx1101_fail2943
    nqp_rxmark rx1101_bstack, rxsubrule1104_pass2952, -1, 0
  rxsubrule1104_pass2952:
    rx1101_cstack = rx1101_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1101_pos, $P11, rx1101_curclass, "$!pos"
    rx1101_cur."!cursor_pass"(rx1101_pos, "postfix:sym<-->", 'backtrack'=>1)
    .return (rx1101_cur)
  rx1101_restart2942:
    repr_get_attr_obj rx1101_cstack, rx1101_cur, rx1101_curclass, "$!cstack"
  rx1101_fail2943:
    unless rx1101_bstack, rx1101_done2941
    pop $I19, rx1101_bstack
    if_null rx1101_cstack, rx1101_cstack_done2946
    unless rx1101_cstack, rx1101_cstack_done2946
    dec $I19
    set $P11, rx1101_cstack[$I19]
  rx1101_cstack_done2946:
    pop rx1101_rep, rx1101_bstack
    pop rx1101_pos, rx1101_bstack
    pop $I19, rx1101_bstack
    lt rx1101_pos, -1, rx1101_done2941
    lt rx1101_pos, 0, rx1101_fail2943
    eq $I19, 0, rx1101_fail2943
    nqp_islist $I20, rx1101_cstack
    unless $I20, rx1101_jump2944
    elements $I18, rx1101_bstack
    le $I18, 0, rx1101_cut2945
    dec $I18
    set $I18, rx1101_bstack[$I18]
  rx1101_cut2945:
    assign rx1101_cstack, $I18
  rx1101_jump2944:
    jump $I19
  rx1101_done2941:
    rx1101_cur."!cursor_fail"()
    .return (rx1101_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<**>" :subid("cuid_178_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1314
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1105_tgt
    .local int rx1105_pos
    .local int rx1105_off
    .local int rx1105_eos
    .local int rx1105_rep
    .local pmc rx1105_cur
    .local pmc rx1105_curclass
    .local pmc rx1105_bstack
    .local pmc rx1105_cstack
    (rx1105_cur, rx1105_tgt, rx1105_pos, rx1105_curclass, rx1105_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1105_cur
    length rx1105_eos, rx1105_tgt
    eq $I19, 1, rx1105_restart2955
    gt rx1105_pos, rx1105_eos, rx1105_fail2956
    repr_get_attr_int $I11, self, rx1105_curclass, "$!from"
    ne $I11, -1, rxscan1106_done2962
    goto rxscan1106_scan2961
  rxscan1106_loop2960:
    inc rx1105_pos
    gt rx1105_pos, rx1105_eos, rx1105_fail2956
    repr_bind_attr_int rx1105_cur, rx1105_curclass, "$!from", rx1105_pos
  rxscan1106_scan2961:
    nqp_rxmark rx1105_bstack, rxscan1106_loop2960, rx1105_pos, 0
  rxscan1106_done2962:
    nqp_rxmark rx1105_bstack, rxcap1107_fail2964, rx1105_pos, 0
    add $I11, rx1105_pos, 2
    gt $I11, rx1105_eos, rx1105_fail2956
    substr $S10, rx1105_tgt, rx1105_pos, 2
    ne $S10, ucs4:"**", rx1105_fail2956
    add rx1105_pos, 2
    nqp_rxpeek $I19, rx1105_bstack, rxcap1107_fail2964
    inc $I19
    set $I11, rx1105_bstack[$I19]
    repr_bind_attr_int rx1105_cur, rx1105_curclass, "$!pos", rx1105_pos
    $P11 = rx1105_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1105_pos)
    rx1105_cstack = rx1105_cur."!cursor_capture"($P11, "sym")
    goto rxcap1107_done2963
  rxcap1107_fail2964:
    goto rx1105_fail2956
  rxcap1107_done2963:
    repr_bind_attr_int rx1105_cur, rx1105_curclass, "$!pos", rx1105_pos
    $P11 = rx1105_cur."O"("%exponentiation, :op<pow_n>")
    repr_get_attr_int $I11, $P11, rx1105_curclass, "$!pos"
    lt $I11, 0, rx1105_fail2956
    nqp_rxmark rx1105_bstack, rxsubrule1108_pass2965, -1, 0
  rxsubrule1108_pass2965:
    rx1105_cstack = rx1105_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1105_pos, $P11, rx1105_curclass, "$!pos"
    rx1105_cur."!cursor_pass"(rx1105_pos, "infix:sym<**>", 'backtrack'=>1)
    .return (rx1105_cur)
  rx1105_restart2955:
    repr_get_attr_obj rx1105_cstack, rx1105_cur, rx1105_curclass, "$!cstack"
  rx1105_fail2956:
    unless rx1105_bstack, rx1105_done2954
    pop $I19, rx1105_bstack
    if_null rx1105_cstack, rx1105_cstack_done2959
    unless rx1105_cstack, rx1105_cstack_done2959
    dec $I19
    set $P11, rx1105_cstack[$I19]
  rx1105_cstack_done2959:
    pop rx1105_rep, rx1105_bstack
    pop rx1105_pos, rx1105_bstack
    pop $I19, rx1105_bstack
    lt rx1105_pos, -1, rx1105_done2954
    lt rx1105_pos, 0, rx1105_fail2956
    eq $I19, 0, rx1105_fail2956
    nqp_islist $I20, rx1105_cstack
    unless $I20, rx1105_jump2957
    elements $I18, rx1105_bstack
    le $I18, 0, rx1105_cut2958
    dec $I18
    set $I18, rx1105_bstack[$I18]
  rx1105_cut2958:
    assign rx1105_cstack, $I18
  rx1105_jump2957:
    jump $I19
  rx1105_done2954:
    rx1105_cur."!cursor_fail"()
    .return (rx1105_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<+>" :subid("cuid_179_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1316
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1109_tgt
    .local int rx1109_pos
    .local int rx1109_off
    .local int rx1109_eos
    .local int rx1109_rep
    .local pmc rx1109_cur
    .local pmc rx1109_curclass
    .local pmc rx1109_bstack
    .local pmc rx1109_cstack
    (rx1109_cur, rx1109_tgt, rx1109_pos, rx1109_curclass, rx1109_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1109_cur
    length rx1109_eos, rx1109_tgt
    eq $I19, 1, rx1109_restart2968
    gt rx1109_pos, rx1109_eos, rx1109_fail2969
    repr_get_attr_int $I11, self, rx1109_curclass, "$!from"
    ne $I11, -1, rxscan1110_done2975
    goto rxscan1110_scan2974
  rxscan1110_loop2973:
    inc rx1109_pos
    gt rx1109_pos, rx1109_eos, rx1109_fail2969
    repr_bind_attr_int rx1109_cur, rx1109_curclass, "$!from", rx1109_pos
  rxscan1110_scan2974:
    nqp_rxmark rx1109_bstack, rxscan1110_loop2973, rx1109_pos, 0
  rxscan1110_done2975:
    nqp_rxmark rx1109_bstack, rxcap1111_fail2977, rx1109_pos, 0
    add $I11, rx1109_pos, 1
    gt $I11, rx1109_eos, rx1109_fail2969
    substr $S10, rx1109_tgt, rx1109_pos, 1
    ne $S10, ucs4:"+", rx1109_fail2969
    add rx1109_pos, 1
    nqp_rxpeek $I19, rx1109_bstack, rxcap1111_fail2977
    inc $I19
    set $I11, rx1109_bstack[$I19]
    repr_bind_attr_int rx1109_cur, rx1109_curclass, "$!pos", rx1109_pos
    $P11 = rx1109_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1109_pos)
    rx1109_cstack = rx1109_cur."!cursor_capture"($P11, "sym")
    goto rxcap1111_done2976
  rxcap1111_fail2977:
    goto rx1109_fail2969
  rxcap1111_done2976:
    repr_bind_attr_int rx1109_cur, rx1109_curclass, "$!pos", rx1109_pos
    $P11 = rx1109_cur."O"("%symbolic_unary, :op<numify>")
    repr_get_attr_int $I11, $P11, rx1109_curclass, "$!pos"
    lt $I11, 0, rx1109_fail2969
    nqp_rxmark rx1109_bstack, rxsubrule1112_pass2978, -1, 0
  rxsubrule1112_pass2978:
    rx1109_cstack = rx1109_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1109_pos, $P11, rx1109_curclass, "$!pos"
    rx1109_cur."!cursor_pass"(rx1109_pos, "prefix:sym<+>", 'backtrack'=>1)
    .return (rx1109_cur)
  rx1109_restart2968:
    repr_get_attr_obj rx1109_cstack, rx1109_cur, rx1109_curclass, "$!cstack"
  rx1109_fail2969:
    unless rx1109_bstack, rx1109_done2967
    pop $I19, rx1109_bstack
    if_null rx1109_cstack, rx1109_cstack_done2972
    unless rx1109_cstack, rx1109_cstack_done2972
    dec $I19
    set $P11, rx1109_cstack[$I19]
  rx1109_cstack_done2972:
    pop rx1109_rep, rx1109_bstack
    pop rx1109_pos, rx1109_bstack
    pop $I19, rx1109_bstack
    lt rx1109_pos, -1, rx1109_done2967
    lt rx1109_pos, 0, rx1109_fail2969
    eq $I19, 0, rx1109_fail2969
    nqp_islist $I20, rx1109_cstack
    unless $I20, rx1109_jump2970
    elements $I18, rx1109_bstack
    le $I18, 0, rx1109_cut2971
    dec $I18
    set $I18, rx1109_bstack[$I18]
  rx1109_cut2971:
    assign rx1109_cstack, $I18
  rx1109_jump2970:
    jump $I19
  rx1109_done2967:
    rx1109_cur."!cursor_fail"()
    .return (rx1109_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<~>" :subid("cuid_180_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1317
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1113_tgt
    .local int rx1113_pos
    .local int rx1113_off
    .local int rx1113_eos
    .local int rx1113_rep
    .local pmc rx1113_cur
    .local pmc rx1113_curclass
    .local pmc rx1113_bstack
    .local pmc rx1113_cstack
    (rx1113_cur, rx1113_tgt, rx1113_pos, rx1113_curclass, rx1113_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1113_cur
    length rx1113_eos, rx1113_tgt
    eq $I19, 1, rx1113_restart2981
    gt rx1113_pos, rx1113_eos, rx1113_fail2982
    repr_get_attr_int $I11, self, rx1113_curclass, "$!from"
    ne $I11, -1, rxscan1114_done2988
    goto rxscan1114_scan2987
  rxscan1114_loop2986:
    inc rx1113_pos
    gt rx1113_pos, rx1113_eos, rx1113_fail2982
    repr_bind_attr_int rx1113_cur, rx1113_curclass, "$!from", rx1113_pos
  rxscan1114_scan2987:
    nqp_rxmark rx1113_bstack, rxscan1114_loop2986, rx1113_pos, 0
  rxscan1114_done2988:
    nqp_rxmark rx1113_bstack, rxcap1115_fail2990, rx1113_pos, 0
    add $I11, rx1113_pos, 1
    gt $I11, rx1113_eos, rx1113_fail2982
    substr $S10, rx1113_tgt, rx1113_pos, 1
    ne $S10, ucs4:"~", rx1113_fail2982
    add rx1113_pos, 1
    nqp_rxpeek $I19, rx1113_bstack, rxcap1115_fail2990
    inc $I19
    set $I11, rx1113_bstack[$I19]
    repr_bind_attr_int rx1113_cur, rx1113_curclass, "$!pos", rx1113_pos
    $P11 = rx1113_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1113_pos)
    rx1113_cstack = rx1113_cur."!cursor_capture"($P11, "sym")
    goto rxcap1115_done2989
  rxcap1115_fail2990:
    goto rx1113_fail2982
  rxcap1115_done2989:
    repr_bind_attr_int rx1113_cur, rx1113_curclass, "$!pos", rx1113_pos
    $P11 = rx1113_cur."O"("%symbolic_unary, :op<stringify>")
    repr_get_attr_int $I11, $P11, rx1113_curclass, "$!pos"
    lt $I11, 0, rx1113_fail2982
    nqp_rxmark rx1113_bstack, rxsubrule1116_pass2991, -1, 0
  rxsubrule1116_pass2991:
    rx1113_cstack = rx1113_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1113_pos, $P11, rx1113_curclass, "$!pos"
    rx1113_cur."!cursor_pass"(rx1113_pos, "prefix:sym<~>", 'backtrack'=>1)
    .return (rx1113_cur)
  rx1113_restart2981:
    repr_get_attr_obj rx1113_cstack, rx1113_cur, rx1113_curclass, "$!cstack"
  rx1113_fail2982:
    unless rx1113_bstack, rx1113_done2980
    pop $I19, rx1113_bstack
    if_null rx1113_cstack, rx1113_cstack_done2985
    unless rx1113_cstack, rx1113_cstack_done2985
    dec $I19
    set $P11, rx1113_cstack[$I19]
  rx1113_cstack_done2985:
    pop rx1113_rep, rx1113_bstack
    pop rx1113_pos, rx1113_bstack
    pop $I19, rx1113_bstack
    lt rx1113_pos, -1, rx1113_done2980
    lt rx1113_pos, 0, rx1113_fail2982
    eq $I19, 0, rx1113_fail2982
    nqp_islist $I20, rx1113_cstack
    unless $I20, rx1113_jump2983
    elements $I18, rx1113_bstack
    le $I18, 0, rx1113_cut2984
    dec $I18
    set $I18, rx1113_bstack[$I18]
  rx1113_cut2984:
    assign rx1113_cstack, $I18
  rx1113_jump2983:
    jump $I19
  rx1113_done2980:
    rx1113_cur."!cursor_fail"()
    .return (rx1113_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<->" :subid("cuid_181_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1318
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1117_tgt
    .local int rx1117_pos
    .local int rx1117_off
    .local int rx1117_eos
    .local int rx1117_rep
    .local pmc rx1117_cur
    .local pmc rx1117_curclass
    .local pmc rx1117_bstack
    .local pmc rx1117_cstack
    (rx1117_cur, rx1117_tgt, rx1117_pos, rx1117_curclass, rx1117_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1117_cur
    length rx1117_eos, rx1117_tgt
    eq $I19, 1, rx1117_restart2994
    gt rx1117_pos, rx1117_eos, rx1117_fail2995
    repr_get_attr_int $I11, self, rx1117_curclass, "$!from"
    ne $I11, -1, rxscan1118_done3001
    goto rxscan1118_scan3000
  rxscan1118_loop2999:
    inc rx1117_pos
    gt rx1117_pos, rx1117_eos, rx1117_fail2995
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!from", rx1117_pos
  rxscan1118_scan3000:
    nqp_rxmark rx1117_bstack, rxscan1118_loop2999, rx1117_pos, 0
  rxscan1118_done3001:
    nqp_rxmark rx1117_bstack, rxcap1119_fail3003, rx1117_pos, 0
    add $I11, rx1117_pos, 1
    gt $I11, rx1117_eos, rx1117_fail2995
    substr $S10, rx1117_tgt, rx1117_pos, 1
    ne $S10, ucs4:"-", rx1117_fail2995
    add rx1117_pos, 1
    nqp_rxpeek $I19, rx1117_bstack, rxcap1119_fail3003
    inc $I19
    set $I11, rx1117_bstack[$I19]
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!pos", rx1117_pos
    $P11 = rx1117_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1117_pos)
    rx1117_cstack = rx1117_cur."!cursor_capture"($P11, "sym")
    goto rxcap1119_done3002
  rxcap1119_fail3003:
    goto rx1117_fail2995
  rxcap1119_done3002:
    ge rx1117_pos, rx1117_eos, rx1117_fail2995
    substr $S11, rx1117_tgt, rx1117_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx1117_fail2995
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!pos", rx1117_pos
    $P11 = rx1117_cur."number"()
    repr_get_attr_int $I11, $P11, rx1117_curclass, "$!pos"
    ge $I11, 0, rx1117_fail2995
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!pos", rx1117_pos
    $P11 = rx1117_cur."O"("%symbolic_unary, :op<neg_n>")
    repr_get_attr_int $I11, $P11, rx1117_curclass, "$!pos"
    lt $I11, 0, rx1117_fail2995
    nqp_rxmark rx1117_bstack, rxsubrule1120_pass3004, -1, 0
  rxsubrule1120_pass3004:
    rx1117_cstack = rx1117_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1117_pos, $P11, rx1117_curclass, "$!pos"
    rx1117_cur."!cursor_pass"(rx1117_pos, "prefix:sym<->", 'backtrack'=>1)
    .return (rx1117_cur)
  rx1117_restart2994:
    repr_get_attr_obj rx1117_cstack, rx1117_cur, rx1117_curclass, "$!cstack"
  rx1117_fail2995:
    unless rx1117_bstack, rx1117_done2993
    pop $I19, rx1117_bstack
    if_null rx1117_cstack, rx1117_cstack_done2998
    unless rx1117_cstack, rx1117_cstack_done2998
    dec $I19
    set $P11, rx1117_cstack[$I19]
  rx1117_cstack_done2998:
    pop rx1117_rep, rx1117_bstack
    pop rx1117_pos, rx1117_bstack
    pop $I19, rx1117_bstack
    lt rx1117_pos, -1, rx1117_done2993
    lt rx1117_pos, 0, rx1117_fail2995
    eq $I19, 0, rx1117_fail2995
    nqp_islist $I20, rx1117_cstack
    unless $I20, rx1117_jump2996
    elements $I18, rx1117_bstack
    le $I18, 0, rx1117_cut2997
    dec $I18
    set $I18, rx1117_bstack[$I18]
  rx1117_cut2997:
    assign rx1117_cstack, $I18
  rx1117_jump2996:
    jump $I19
  rx1117_done2993:
    rx1117_cur."!cursor_fail"()
    .return (rx1117_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<?>" :subid("cuid_182_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1319
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1121_tgt
    .local int rx1121_pos
    .local int rx1121_off
    .local int rx1121_eos
    .local int rx1121_rep
    .local pmc rx1121_cur
    .local pmc rx1121_curclass
    .local pmc rx1121_bstack
    .local pmc rx1121_cstack
    (rx1121_cur, rx1121_tgt, rx1121_pos, rx1121_curclass, rx1121_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1121_cur
    length rx1121_eos, rx1121_tgt
    eq $I19, 1, rx1121_restart3007
    gt rx1121_pos, rx1121_eos, rx1121_fail3008
    repr_get_attr_int $I11, self, rx1121_curclass, "$!from"
    ne $I11, -1, rxscan1122_done3014
    goto rxscan1122_scan3013
  rxscan1122_loop3012:
    inc rx1121_pos
    gt rx1121_pos, rx1121_eos, rx1121_fail3008
    repr_bind_attr_int rx1121_cur, rx1121_curclass, "$!from", rx1121_pos
  rxscan1122_scan3013:
    nqp_rxmark rx1121_bstack, rxscan1122_loop3012, rx1121_pos, 0
  rxscan1122_done3014:
    nqp_rxmark rx1121_bstack, rxcap1123_fail3016, rx1121_pos, 0
    add $I11, rx1121_pos, 1
    gt $I11, rx1121_eos, rx1121_fail3008
    substr $S10, rx1121_tgt, rx1121_pos, 1
    ne $S10, ucs4:"?", rx1121_fail3008
    add rx1121_pos, 1
    nqp_rxpeek $I19, rx1121_bstack, rxcap1123_fail3016
    inc $I19
    set $I11, rx1121_bstack[$I19]
    repr_bind_attr_int rx1121_cur, rx1121_curclass, "$!pos", rx1121_pos
    $P11 = rx1121_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1121_pos)
    rx1121_cstack = rx1121_cur."!cursor_capture"($P11, "sym")
    goto rxcap1123_done3015
  rxcap1123_fail3016:
    goto rx1121_fail3008
  rxcap1123_done3015:
    repr_bind_attr_int rx1121_cur, rx1121_curclass, "$!pos", rx1121_pos
    $P11 = rx1121_cur."O"("%symbolic_unary, :op<istrue>")
    repr_get_attr_int $I11, $P11, rx1121_curclass, "$!pos"
    lt $I11, 0, rx1121_fail3008
    nqp_rxmark rx1121_bstack, rxsubrule1124_pass3017, -1, 0
  rxsubrule1124_pass3017:
    rx1121_cstack = rx1121_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1121_pos, $P11, rx1121_curclass, "$!pos"
    rx1121_cur."!cursor_pass"(rx1121_pos, "prefix:sym<?>", 'backtrack'=>1)
    .return (rx1121_cur)
  rx1121_restart3007:
    repr_get_attr_obj rx1121_cstack, rx1121_cur, rx1121_curclass, "$!cstack"
  rx1121_fail3008:
    unless rx1121_bstack, rx1121_done3006
    pop $I19, rx1121_bstack
    if_null rx1121_cstack, rx1121_cstack_done3011
    unless rx1121_cstack, rx1121_cstack_done3011
    dec $I19
    set $P11, rx1121_cstack[$I19]
  rx1121_cstack_done3011:
    pop rx1121_rep, rx1121_bstack
    pop rx1121_pos, rx1121_bstack
    pop $I19, rx1121_bstack
    lt rx1121_pos, -1, rx1121_done3006
    lt rx1121_pos, 0, rx1121_fail3008
    eq $I19, 0, rx1121_fail3008
    nqp_islist $I20, rx1121_cstack
    unless $I20, rx1121_jump3009
    elements $I18, rx1121_bstack
    le $I18, 0, rx1121_cut3010
    dec $I18
    set $I18, rx1121_bstack[$I18]
  rx1121_cut3010:
    assign rx1121_cstack, $I18
  rx1121_jump3009:
    jump $I19
  rx1121_done3006:
    rx1121_cur."!cursor_fail"()
    .return (rx1121_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<!>" :subid("cuid_183_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1320
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1125_tgt
    .local int rx1125_pos
    .local int rx1125_off
    .local int rx1125_eos
    .local int rx1125_rep
    .local pmc rx1125_cur
    .local pmc rx1125_curclass
    .local pmc rx1125_bstack
    .local pmc rx1125_cstack
    (rx1125_cur, rx1125_tgt, rx1125_pos, rx1125_curclass, rx1125_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1125_cur
    length rx1125_eos, rx1125_tgt
    eq $I19, 1, rx1125_restart3020
    gt rx1125_pos, rx1125_eos, rx1125_fail3021
    repr_get_attr_int $I11, self, rx1125_curclass, "$!from"
    ne $I11, -1, rxscan1126_done3027
    goto rxscan1126_scan3026
  rxscan1126_loop3025:
    inc rx1125_pos
    gt rx1125_pos, rx1125_eos, rx1125_fail3021
    repr_bind_attr_int rx1125_cur, rx1125_curclass, "$!from", rx1125_pos
  rxscan1126_scan3026:
    nqp_rxmark rx1125_bstack, rxscan1126_loop3025, rx1125_pos, 0
  rxscan1126_done3027:
    nqp_rxmark rx1125_bstack, rxcap1127_fail3029, rx1125_pos, 0
    add $I11, rx1125_pos, 1
    gt $I11, rx1125_eos, rx1125_fail3021
    substr $S10, rx1125_tgt, rx1125_pos, 1
    ne $S10, ucs4:"!", rx1125_fail3021
    add rx1125_pos, 1
    nqp_rxpeek $I19, rx1125_bstack, rxcap1127_fail3029
    inc $I19
    set $I11, rx1125_bstack[$I19]
    repr_bind_attr_int rx1125_cur, rx1125_curclass, "$!pos", rx1125_pos
    $P11 = rx1125_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1125_pos)
    rx1125_cstack = rx1125_cur."!cursor_capture"($P11, "sym")
    goto rxcap1127_done3028
  rxcap1127_fail3029:
    goto rx1125_fail3021
  rxcap1127_done3028:
    repr_bind_attr_int rx1125_cur, rx1125_curclass, "$!pos", rx1125_pos
    $P11 = rx1125_cur."O"("%symbolic_unary, :op<falsey>")
    repr_get_attr_int $I11, $P11, rx1125_curclass, "$!pos"
    lt $I11, 0, rx1125_fail3021
    nqp_rxmark rx1125_bstack, rxsubrule1128_pass3030, -1, 0
  rxsubrule1128_pass3030:
    rx1125_cstack = rx1125_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1125_pos, $P11, rx1125_curclass, "$!pos"
    rx1125_cur."!cursor_pass"(rx1125_pos, "prefix:sym<!>", 'backtrack'=>1)
    .return (rx1125_cur)
  rx1125_restart3020:
    repr_get_attr_obj rx1125_cstack, rx1125_cur, rx1125_curclass, "$!cstack"
  rx1125_fail3021:
    unless rx1125_bstack, rx1125_done3019
    pop $I19, rx1125_bstack
    if_null rx1125_cstack, rx1125_cstack_done3024
    unless rx1125_cstack, rx1125_cstack_done3024
    dec $I19
    set $P11, rx1125_cstack[$I19]
  rx1125_cstack_done3024:
    pop rx1125_rep, rx1125_bstack
    pop rx1125_pos, rx1125_bstack
    pop $I19, rx1125_bstack
    lt rx1125_pos, -1, rx1125_done3019
    lt rx1125_pos, 0, rx1125_fail3021
    eq $I19, 0, rx1125_fail3021
    nqp_islist $I20, rx1125_cstack
    unless $I20, rx1125_jump3022
    elements $I18, rx1125_bstack
    le $I18, 0, rx1125_cut3023
    dec $I18
    set $I18, rx1125_bstack[$I18]
  rx1125_cut3023:
    assign rx1125_cstack, $I18
  rx1125_jump3022:
    jump $I19
  rx1125_done3019:
    rx1125_cur."!cursor_fail"()
    .return (rx1125_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<|>" :subid("cuid_184_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1321
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1129_tgt
    .local int rx1129_pos
    .local int rx1129_off
    .local int rx1129_eos
    .local int rx1129_rep
    .local pmc rx1129_cur
    .local pmc rx1129_curclass
    .local pmc rx1129_bstack
    .local pmc rx1129_cstack
    (rx1129_cur, rx1129_tgt, rx1129_pos, rx1129_curclass, rx1129_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1129_cur
    length rx1129_eos, rx1129_tgt
    eq $I19, 1, rx1129_restart3033
    gt rx1129_pos, rx1129_eos, rx1129_fail3034
    repr_get_attr_int $I11, self, rx1129_curclass, "$!from"
    ne $I11, -1, rxscan1130_done3040
    goto rxscan1130_scan3039
  rxscan1130_loop3038:
    inc rx1129_pos
    gt rx1129_pos, rx1129_eos, rx1129_fail3034
    repr_bind_attr_int rx1129_cur, rx1129_curclass, "$!from", rx1129_pos
  rxscan1130_scan3039:
    nqp_rxmark rx1129_bstack, rxscan1130_loop3038, rx1129_pos, 0
  rxscan1130_done3040:
    nqp_rxmark rx1129_bstack, rxcap1131_fail3042, rx1129_pos, 0
    add $I11, rx1129_pos, 1
    gt $I11, rx1129_eos, rx1129_fail3034
    substr $S10, rx1129_tgt, rx1129_pos, 1
    ne $S10, ucs4:"|", rx1129_fail3034
    add rx1129_pos, 1
    nqp_rxpeek $I19, rx1129_bstack, rxcap1131_fail3042
    inc $I19
    set $I11, rx1129_bstack[$I19]
    repr_bind_attr_int rx1129_cur, rx1129_curclass, "$!pos", rx1129_pos
    $P11 = rx1129_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1129_pos)
    rx1129_cstack = rx1129_cur."!cursor_capture"($P11, "sym")
    goto rxcap1131_done3041
  rxcap1131_fail3042:
    goto rx1129_fail3034
  rxcap1131_done3041:
    repr_bind_attr_int rx1129_cur, rx1129_curclass, "$!pos", rx1129_pos
    $P11 = rx1129_cur."O"("%symbolic_unary")
    repr_get_attr_int $I11, $P11, rx1129_curclass, "$!pos"
    lt $I11, 0, rx1129_fail3034
    nqp_rxmark rx1129_bstack, rxsubrule1132_pass3043, -1, 0
  rxsubrule1132_pass3043:
    rx1129_cstack = rx1129_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1129_pos, $P11, rx1129_curclass, "$!pos"
    rx1129_cur."!cursor_pass"(rx1129_pos, "prefix:sym<|>", 'backtrack'=>1)
    .return (rx1129_cur)
  rx1129_restart3033:
    repr_get_attr_obj rx1129_cstack, rx1129_cur, rx1129_curclass, "$!cstack"
  rx1129_fail3034:
    unless rx1129_bstack, rx1129_done3032
    pop $I19, rx1129_bstack
    if_null rx1129_cstack, rx1129_cstack_done3037
    unless rx1129_cstack, rx1129_cstack_done3037
    dec $I19
    set $P11, rx1129_cstack[$I19]
  rx1129_cstack_done3037:
    pop rx1129_rep, rx1129_bstack
    pop rx1129_pos, rx1129_bstack
    pop $I19, rx1129_bstack
    lt rx1129_pos, -1, rx1129_done3032
    lt rx1129_pos, 0, rx1129_fail3034
    eq $I19, 0, rx1129_fail3034
    nqp_islist $I20, rx1129_cstack
    unless $I20, rx1129_jump3035
    elements $I18, rx1129_bstack
    le $I18, 0, rx1129_cut3036
    dec $I18
    set $I18, rx1129_bstack[$I18]
  rx1129_cut3036:
    assign rx1129_cstack, $I18
  rx1129_jump3035:
    jump $I19
  rx1129_done3032:
    rx1129_cur."!cursor_fail"()
    .return (rx1129_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<*>" :subid("cuid_185_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1323
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1133_tgt
    .local int rx1133_pos
    .local int rx1133_off
    .local int rx1133_eos
    .local int rx1133_rep
    .local pmc rx1133_cur
    .local pmc rx1133_curclass
    .local pmc rx1133_bstack
    .local pmc rx1133_cstack
    (rx1133_cur, rx1133_tgt, rx1133_pos, rx1133_curclass, rx1133_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1133_cur
    length rx1133_eos, rx1133_tgt
    eq $I19, 1, rx1133_restart3046
    gt rx1133_pos, rx1133_eos, rx1133_fail3047
    repr_get_attr_int $I11, self, rx1133_curclass, "$!from"
    ne $I11, -1, rxscan1134_done3053
    goto rxscan1134_scan3052
  rxscan1134_loop3051:
    inc rx1133_pos
    gt rx1133_pos, rx1133_eos, rx1133_fail3047
    repr_bind_attr_int rx1133_cur, rx1133_curclass, "$!from", rx1133_pos
  rxscan1134_scan3052:
    nqp_rxmark rx1133_bstack, rxscan1134_loop3051, rx1133_pos, 0
  rxscan1134_done3053:
    nqp_rxmark rx1133_bstack, rxcap1135_fail3055, rx1133_pos, 0
    add $I11, rx1133_pos, 1
    gt $I11, rx1133_eos, rx1133_fail3047
    substr $S10, rx1133_tgt, rx1133_pos, 1
    ne $S10, ucs4:"*", rx1133_fail3047
    add rx1133_pos, 1
    nqp_rxpeek $I19, rx1133_bstack, rxcap1135_fail3055
    inc $I19
    set $I11, rx1133_bstack[$I19]
    repr_bind_attr_int rx1133_cur, rx1133_curclass, "$!pos", rx1133_pos
    $P11 = rx1133_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1133_pos)
    rx1133_cstack = rx1133_cur."!cursor_capture"($P11, "sym")
    goto rxcap1135_done3054
  rxcap1135_fail3055:
    goto rx1133_fail3047
  rxcap1135_done3054:
    repr_bind_attr_int rx1133_cur, rx1133_curclass, "$!pos", rx1133_pos
    $P11 = rx1133_cur."O"("%multiplicative, :op<mul_n>")
    repr_get_attr_int $I11, $P11, rx1133_curclass, "$!pos"
    lt $I11, 0, rx1133_fail3047
    nqp_rxmark rx1133_bstack, rxsubrule1136_pass3056, -1, 0
  rxsubrule1136_pass3056:
    rx1133_cstack = rx1133_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1133_pos, $P11, rx1133_curclass, "$!pos"
    rx1133_cur."!cursor_pass"(rx1133_pos, "infix:sym<*>", 'backtrack'=>1)
    .return (rx1133_cur)
  rx1133_restart3046:
    repr_get_attr_obj rx1133_cstack, rx1133_cur, rx1133_curclass, "$!cstack"
  rx1133_fail3047:
    unless rx1133_bstack, rx1133_done3045
    pop $I19, rx1133_bstack
    if_null rx1133_cstack, rx1133_cstack_done3050
    unless rx1133_cstack, rx1133_cstack_done3050
    dec $I19
    set $P11, rx1133_cstack[$I19]
  rx1133_cstack_done3050:
    pop rx1133_rep, rx1133_bstack
    pop rx1133_pos, rx1133_bstack
    pop $I19, rx1133_bstack
    lt rx1133_pos, -1, rx1133_done3045
    lt rx1133_pos, 0, rx1133_fail3047
    eq $I19, 0, rx1133_fail3047
    nqp_islist $I20, rx1133_cstack
    unless $I20, rx1133_jump3048
    elements $I18, rx1133_bstack
    le $I18, 0, rx1133_cut3049
    dec $I18
    set $I18, rx1133_bstack[$I18]
  rx1133_cut3049:
    assign rx1133_cstack, $I18
  rx1133_jump3048:
    jump $I19
  rx1133_done3045:
    rx1133_cur."!cursor_fail"()
    .return (rx1133_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym</>" :subid("cuid_186_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1324
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1137_tgt
    .local int rx1137_pos
    .local int rx1137_off
    .local int rx1137_eos
    .local int rx1137_rep
    .local pmc rx1137_cur
    .local pmc rx1137_curclass
    .local pmc rx1137_bstack
    .local pmc rx1137_cstack
    (rx1137_cur, rx1137_tgt, rx1137_pos, rx1137_curclass, rx1137_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1137_cur
    length rx1137_eos, rx1137_tgt
    eq $I19, 1, rx1137_restart3059
    gt rx1137_pos, rx1137_eos, rx1137_fail3060
    repr_get_attr_int $I11, self, rx1137_curclass, "$!from"
    ne $I11, -1, rxscan1138_done3066
    goto rxscan1138_scan3065
  rxscan1138_loop3064:
    inc rx1137_pos
    gt rx1137_pos, rx1137_eos, rx1137_fail3060
    repr_bind_attr_int rx1137_cur, rx1137_curclass, "$!from", rx1137_pos
  rxscan1138_scan3065:
    nqp_rxmark rx1137_bstack, rxscan1138_loop3064, rx1137_pos, 0
  rxscan1138_done3066:
    nqp_rxmark rx1137_bstack, rxcap1139_fail3068, rx1137_pos, 0
    add $I11, rx1137_pos, 1
    gt $I11, rx1137_eos, rx1137_fail3060
    substr $S10, rx1137_tgt, rx1137_pos, 1
    ne $S10, ucs4:"/", rx1137_fail3060
    add rx1137_pos, 1
    nqp_rxpeek $I19, rx1137_bstack, rxcap1139_fail3068
    inc $I19
    set $I11, rx1137_bstack[$I19]
    repr_bind_attr_int rx1137_cur, rx1137_curclass, "$!pos", rx1137_pos
    $P11 = rx1137_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1137_pos)
    rx1137_cstack = rx1137_cur."!cursor_capture"($P11, "sym")
    goto rxcap1139_done3067
  rxcap1139_fail3068:
    goto rx1137_fail3060
  rxcap1139_done3067:
    repr_bind_attr_int rx1137_cur, rx1137_curclass, "$!pos", rx1137_pos
    $P11 = rx1137_cur."O"("%multiplicative, :op<div_n>")
    repr_get_attr_int $I11, $P11, rx1137_curclass, "$!pos"
    lt $I11, 0, rx1137_fail3060
    nqp_rxmark rx1137_bstack, rxsubrule1140_pass3069, -1, 0
  rxsubrule1140_pass3069:
    rx1137_cstack = rx1137_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1137_pos, $P11, rx1137_curclass, "$!pos"
    rx1137_cur."!cursor_pass"(rx1137_pos, "infix:sym</>", 'backtrack'=>1)
    .return (rx1137_cur)
  rx1137_restart3059:
    repr_get_attr_obj rx1137_cstack, rx1137_cur, rx1137_curclass, "$!cstack"
  rx1137_fail3060:
    unless rx1137_bstack, rx1137_done3058
    pop $I19, rx1137_bstack
    if_null rx1137_cstack, rx1137_cstack_done3063
    unless rx1137_cstack, rx1137_cstack_done3063
    dec $I19
    set $P11, rx1137_cstack[$I19]
  rx1137_cstack_done3063:
    pop rx1137_rep, rx1137_bstack
    pop rx1137_pos, rx1137_bstack
    pop $I19, rx1137_bstack
    lt rx1137_pos, -1, rx1137_done3058
    lt rx1137_pos, 0, rx1137_fail3060
    eq $I19, 0, rx1137_fail3060
    nqp_islist $I20, rx1137_cstack
    unless $I20, rx1137_jump3061
    elements $I18, rx1137_bstack
    le $I18, 0, rx1137_cut3062
    dec $I18
    set $I18, rx1137_bstack[$I18]
  rx1137_cut3062:
    assign rx1137_cstack, $I18
  rx1137_jump3061:
    jump $I19
  rx1137_done3058:
    rx1137_cur."!cursor_fail"()
    .return (rx1137_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<%>" :subid("cuid_187_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1325
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1141_tgt
    .local int rx1141_pos
    .local int rx1141_off
    .local int rx1141_eos
    .local int rx1141_rep
    .local pmc rx1141_cur
    .local pmc rx1141_curclass
    .local pmc rx1141_bstack
    .local pmc rx1141_cstack
    (rx1141_cur, rx1141_tgt, rx1141_pos, rx1141_curclass, rx1141_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1141_cur
    length rx1141_eos, rx1141_tgt
    eq $I19, 1, rx1141_restart3072
    gt rx1141_pos, rx1141_eos, rx1141_fail3073
    repr_get_attr_int $I11, self, rx1141_curclass, "$!from"
    ne $I11, -1, rxscan1142_done3079
    goto rxscan1142_scan3078
  rxscan1142_loop3077:
    inc rx1141_pos
    gt rx1141_pos, rx1141_eos, rx1141_fail3073
    repr_bind_attr_int rx1141_cur, rx1141_curclass, "$!from", rx1141_pos
  rxscan1142_scan3078:
    nqp_rxmark rx1141_bstack, rxscan1142_loop3077, rx1141_pos, 0
  rxscan1142_done3079:
    nqp_rxmark rx1141_bstack, rxcap1143_fail3081, rx1141_pos, 0
    add $I11, rx1141_pos, 1
    gt $I11, rx1141_eos, rx1141_fail3073
    substr $S10, rx1141_tgt, rx1141_pos, 1
    ne $S10, ucs4:"%", rx1141_fail3073
    add rx1141_pos, 1
    nqp_rxpeek $I19, rx1141_bstack, rxcap1143_fail3081
    inc $I19
    set $I11, rx1141_bstack[$I19]
    repr_bind_attr_int rx1141_cur, rx1141_curclass, "$!pos", rx1141_pos
    $P11 = rx1141_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1141_pos)
    rx1141_cstack = rx1141_cur."!cursor_capture"($P11, "sym")
    goto rxcap1143_done3080
  rxcap1143_fail3081:
    goto rx1141_fail3073
  rxcap1143_done3080:
    repr_bind_attr_int rx1141_cur, rx1141_curclass, "$!pos", rx1141_pos
    $P11 = rx1141_cur."O"("%multiplicative, :op<mod_n>")
    repr_get_attr_int $I11, $P11, rx1141_curclass, "$!pos"
    lt $I11, 0, rx1141_fail3073
    nqp_rxmark rx1141_bstack, rxsubrule1144_pass3082, -1, 0
  rxsubrule1144_pass3082:
    rx1141_cstack = rx1141_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1141_pos, $P11, rx1141_curclass, "$!pos"
    rx1141_cur."!cursor_pass"(rx1141_pos, "infix:sym<%>", 'backtrack'=>1)
    .return (rx1141_cur)
  rx1141_restart3072:
    repr_get_attr_obj rx1141_cstack, rx1141_cur, rx1141_curclass, "$!cstack"
  rx1141_fail3073:
    unless rx1141_bstack, rx1141_done3071
    pop $I19, rx1141_bstack
    if_null rx1141_cstack, rx1141_cstack_done3076
    unless rx1141_cstack, rx1141_cstack_done3076
    dec $I19
    set $P11, rx1141_cstack[$I19]
  rx1141_cstack_done3076:
    pop rx1141_rep, rx1141_bstack
    pop rx1141_pos, rx1141_bstack
    pop $I19, rx1141_bstack
    lt rx1141_pos, -1, rx1141_done3071
    lt rx1141_pos, 0, rx1141_fail3073
    eq $I19, 0, rx1141_fail3073
    nqp_islist $I20, rx1141_cstack
    unless $I20, rx1141_jump3074
    elements $I18, rx1141_bstack
    le $I18, 0, rx1141_cut3075
    dec $I18
    set $I18, rx1141_bstack[$I18]
  rx1141_cut3075:
    assign rx1141_cstack, $I18
  rx1141_jump3074:
    jump $I19
  rx1141_done3071:
    rx1141_cur."!cursor_fail"()
    .return (rx1141_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+&>" :subid("cuid_188_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1326
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1145_tgt
    .local int rx1145_pos
    .local int rx1145_off
    .local int rx1145_eos
    .local int rx1145_rep
    .local pmc rx1145_cur
    .local pmc rx1145_curclass
    .local pmc rx1145_bstack
    .local pmc rx1145_cstack
    (rx1145_cur, rx1145_tgt, rx1145_pos, rx1145_curclass, rx1145_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1145_cur
    length rx1145_eos, rx1145_tgt
    eq $I19, 1, rx1145_restart3085
    gt rx1145_pos, rx1145_eos, rx1145_fail3086
    repr_get_attr_int $I11, self, rx1145_curclass, "$!from"
    ne $I11, -1, rxscan1146_done3092
    goto rxscan1146_scan3091
  rxscan1146_loop3090:
    inc rx1145_pos
    gt rx1145_pos, rx1145_eos, rx1145_fail3086
    repr_bind_attr_int rx1145_cur, rx1145_curclass, "$!from", rx1145_pos
  rxscan1146_scan3091:
    nqp_rxmark rx1145_bstack, rxscan1146_loop3090, rx1145_pos, 0
  rxscan1146_done3092:
    nqp_rxmark rx1145_bstack, rxcap1147_fail3094, rx1145_pos, 0
    add $I11, rx1145_pos, 2
    gt $I11, rx1145_eos, rx1145_fail3086
    substr $S10, rx1145_tgt, rx1145_pos, 2
    ne $S10, ucs4:"+&", rx1145_fail3086
    add rx1145_pos, 2
    nqp_rxpeek $I19, rx1145_bstack, rxcap1147_fail3094
    inc $I19
    set $I11, rx1145_bstack[$I19]
    repr_bind_attr_int rx1145_cur, rx1145_curclass, "$!pos", rx1145_pos
    $P11 = rx1145_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1145_pos)
    rx1145_cstack = rx1145_cur."!cursor_capture"($P11, "sym")
    goto rxcap1147_done3093
  rxcap1147_fail3094:
    goto rx1145_fail3086
  rxcap1147_done3093:
    repr_bind_attr_int rx1145_cur, rx1145_curclass, "$!pos", rx1145_pos
    $P11 = rx1145_cur."O"("%multiplicative, :op<bitand_i>")
    repr_get_attr_int $I11, $P11, rx1145_curclass, "$!pos"
    lt $I11, 0, rx1145_fail3086
    nqp_rxmark rx1145_bstack, rxsubrule1148_pass3095, -1, 0
  rxsubrule1148_pass3095:
    rx1145_cstack = rx1145_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1145_pos, $P11, rx1145_curclass, "$!pos"
    rx1145_cur."!cursor_pass"(rx1145_pos, "infix:sym<+&>", 'backtrack'=>1)
    .return (rx1145_cur)
  rx1145_restart3085:
    repr_get_attr_obj rx1145_cstack, rx1145_cur, rx1145_curclass, "$!cstack"
  rx1145_fail3086:
    unless rx1145_bstack, rx1145_done3084
    pop $I19, rx1145_bstack
    if_null rx1145_cstack, rx1145_cstack_done3089
    unless rx1145_cstack, rx1145_cstack_done3089
    dec $I19
    set $P11, rx1145_cstack[$I19]
  rx1145_cstack_done3089:
    pop rx1145_rep, rx1145_bstack
    pop rx1145_pos, rx1145_bstack
    pop $I19, rx1145_bstack
    lt rx1145_pos, -1, rx1145_done3084
    lt rx1145_pos, 0, rx1145_fail3086
    eq $I19, 0, rx1145_fail3086
    nqp_islist $I20, rx1145_cstack
    unless $I20, rx1145_jump3087
    elements $I18, rx1145_bstack
    le $I18, 0, rx1145_cut3088
    dec $I18
    set $I18, rx1145_bstack[$I18]
  rx1145_cut3088:
    assign rx1145_cstack, $I18
  rx1145_jump3087:
    jump $I19
  rx1145_done3084:
    rx1145_cur."!cursor_fail"()
    .return (rx1145_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+>" :subid("cuid_189_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1328
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1149_tgt
    .local int rx1149_pos
    .local int rx1149_off
    .local int rx1149_eos
    .local int rx1149_rep
    .local pmc rx1149_cur
    .local pmc rx1149_curclass
    .local pmc rx1149_bstack
    .local pmc rx1149_cstack
    (rx1149_cur, rx1149_tgt, rx1149_pos, rx1149_curclass, rx1149_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1149_cur
    length rx1149_eos, rx1149_tgt
    eq $I19, 1, rx1149_restart3098
    gt rx1149_pos, rx1149_eos, rx1149_fail3099
    repr_get_attr_int $I11, self, rx1149_curclass, "$!from"
    ne $I11, -1, rxscan1150_done3105
    goto rxscan1150_scan3104
  rxscan1150_loop3103:
    inc rx1149_pos
    gt rx1149_pos, rx1149_eos, rx1149_fail3099
    repr_bind_attr_int rx1149_cur, rx1149_curclass, "$!from", rx1149_pos
  rxscan1150_scan3104:
    nqp_rxmark rx1149_bstack, rxscan1150_loop3103, rx1149_pos, 0
  rxscan1150_done3105:
    nqp_rxmark rx1149_bstack, rxcap1151_fail3107, rx1149_pos, 0
    add $I11, rx1149_pos, 1
    gt $I11, rx1149_eos, rx1149_fail3099
    substr $S10, rx1149_tgt, rx1149_pos, 1
    ne $S10, ucs4:"+", rx1149_fail3099
    add rx1149_pos, 1
    nqp_rxpeek $I19, rx1149_bstack, rxcap1151_fail3107
    inc $I19
    set $I11, rx1149_bstack[$I19]
    repr_bind_attr_int rx1149_cur, rx1149_curclass, "$!pos", rx1149_pos
    $P11 = rx1149_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1149_pos)
    rx1149_cstack = rx1149_cur."!cursor_capture"($P11, "sym")
    goto rxcap1151_done3106
  rxcap1151_fail3107:
    goto rx1149_fail3099
  rxcap1151_done3106:
    repr_bind_attr_int rx1149_cur, rx1149_curclass, "$!pos", rx1149_pos
    $P11 = rx1149_cur."O"("%additive, :op<add_n>")
    repr_get_attr_int $I11, $P11, rx1149_curclass, "$!pos"
    lt $I11, 0, rx1149_fail3099
    nqp_rxmark rx1149_bstack, rxsubrule1152_pass3108, -1, 0
  rxsubrule1152_pass3108:
    rx1149_cstack = rx1149_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1149_pos, $P11, rx1149_curclass, "$!pos"
    rx1149_cur."!cursor_pass"(rx1149_pos, "infix:sym<+>", 'backtrack'=>1)
    .return (rx1149_cur)
  rx1149_restart3098:
    repr_get_attr_obj rx1149_cstack, rx1149_cur, rx1149_curclass, "$!cstack"
  rx1149_fail3099:
    unless rx1149_bstack, rx1149_done3097
    pop $I19, rx1149_bstack
    if_null rx1149_cstack, rx1149_cstack_done3102
    unless rx1149_cstack, rx1149_cstack_done3102
    dec $I19
    set $P11, rx1149_cstack[$I19]
  rx1149_cstack_done3102:
    pop rx1149_rep, rx1149_bstack
    pop rx1149_pos, rx1149_bstack
    pop $I19, rx1149_bstack
    lt rx1149_pos, -1, rx1149_done3097
    lt rx1149_pos, 0, rx1149_fail3099
    eq $I19, 0, rx1149_fail3099
    nqp_islist $I20, rx1149_cstack
    unless $I20, rx1149_jump3100
    elements $I18, rx1149_bstack
    le $I18, 0, rx1149_cut3101
    dec $I18
    set $I18, rx1149_bstack[$I18]
  rx1149_cut3101:
    assign rx1149_cstack, $I18
  rx1149_jump3100:
    jump $I19
  rx1149_done3097:
    rx1149_cur."!cursor_fail"()
    .return (rx1149_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<->" :subid("cuid_190_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1329
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1153_tgt
    .local int rx1153_pos
    .local int rx1153_off
    .local int rx1153_eos
    .local int rx1153_rep
    .local pmc rx1153_cur
    .local pmc rx1153_curclass
    .local pmc rx1153_bstack
    .local pmc rx1153_cstack
    (rx1153_cur, rx1153_tgt, rx1153_pos, rx1153_curclass, rx1153_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1153_cur
    length rx1153_eos, rx1153_tgt
    eq $I19, 1, rx1153_restart3111
    gt rx1153_pos, rx1153_eos, rx1153_fail3112
    repr_get_attr_int $I11, self, rx1153_curclass, "$!from"
    ne $I11, -1, rxscan1154_done3118
    goto rxscan1154_scan3117
  rxscan1154_loop3116:
    inc rx1153_pos
    gt rx1153_pos, rx1153_eos, rx1153_fail3112
    repr_bind_attr_int rx1153_cur, rx1153_curclass, "$!from", rx1153_pos
  rxscan1154_scan3117:
    nqp_rxmark rx1153_bstack, rxscan1154_loop3116, rx1153_pos, 0
  rxscan1154_done3118:
    nqp_rxmark rx1153_bstack, rxcap1155_fail3120, rx1153_pos, 0
    add $I11, rx1153_pos, 1
    gt $I11, rx1153_eos, rx1153_fail3112
    substr $S10, rx1153_tgt, rx1153_pos, 1
    ne $S10, ucs4:"-", rx1153_fail3112
    add rx1153_pos, 1
    nqp_rxpeek $I19, rx1153_bstack, rxcap1155_fail3120
    inc $I19
    set $I11, rx1153_bstack[$I19]
    repr_bind_attr_int rx1153_cur, rx1153_curclass, "$!pos", rx1153_pos
    $P11 = rx1153_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1153_pos)
    rx1153_cstack = rx1153_cur."!cursor_capture"($P11, "sym")
    goto rxcap1155_done3119
  rxcap1155_fail3120:
    goto rx1153_fail3112
  rxcap1155_done3119:
    repr_bind_attr_int rx1153_cur, rx1153_curclass, "$!pos", rx1153_pos
    $P11 = rx1153_cur."O"("%additive, :op<sub_n>")
    repr_get_attr_int $I11, $P11, rx1153_curclass, "$!pos"
    lt $I11, 0, rx1153_fail3112
    nqp_rxmark rx1153_bstack, rxsubrule1156_pass3121, -1, 0
  rxsubrule1156_pass3121:
    rx1153_cstack = rx1153_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1153_pos, $P11, rx1153_curclass, "$!pos"
    rx1153_cur."!cursor_pass"(rx1153_pos, "infix:sym<->", 'backtrack'=>1)
    .return (rx1153_cur)
  rx1153_restart3111:
    repr_get_attr_obj rx1153_cstack, rx1153_cur, rx1153_curclass, "$!cstack"
  rx1153_fail3112:
    unless rx1153_bstack, rx1153_done3110
    pop $I19, rx1153_bstack
    if_null rx1153_cstack, rx1153_cstack_done3115
    unless rx1153_cstack, rx1153_cstack_done3115
    dec $I19
    set $P11, rx1153_cstack[$I19]
  rx1153_cstack_done3115:
    pop rx1153_rep, rx1153_bstack
    pop rx1153_pos, rx1153_bstack
    pop $I19, rx1153_bstack
    lt rx1153_pos, -1, rx1153_done3110
    lt rx1153_pos, 0, rx1153_fail3112
    eq $I19, 0, rx1153_fail3112
    nqp_islist $I20, rx1153_cstack
    unless $I20, rx1153_jump3113
    elements $I18, rx1153_bstack
    le $I18, 0, rx1153_cut3114
    dec $I18
    set $I18, rx1153_bstack[$I18]
  rx1153_cut3114:
    assign rx1153_cstack, $I18
  rx1153_jump3113:
    jump $I19
  rx1153_done3110:
    rx1153_cur."!cursor_fail"()
    .return (rx1153_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+|>" :subid("cuid_191_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1330
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1157_tgt
    .local int rx1157_pos
    .local int rx1157_off
    .local int rx1157_eos
    .local int rx1157_rep
    .local pmc rx1157_cur
    .local pmc rx1157_curclass
    .local pmc rx1157_bstack
    .local pmc rx1157_cstack
    (rx1157_cur, rx1157_tgt, rx1157_pos, rx1157_curclass, rx1157_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1157_cur
    length rx1157_eos, rx1157_tgt
    eq $I19, 1, rx1157_restart3124
    gt rx1157_pos, rx1157_eos, rx1157_fail3125
    repr_get_attr_int $I11, self, rx1157_curclass, "$!from"
    ne $I11, -1, rxscan1158_done3131
    goto rxscan1158_scan3130
  rxscan1158_loop3129:
    inc rx1157_pos
    gt rx1157_pos, rx1157_eos, rx1157_fail3125
    repr_bind_attr_int rx1157_cur, rx1157_curclass, "$!from", rx1157_pos
  rxscan1158_scan3130:
    nqp_rxmark rx1157_bstack, rxscan1158_loop3129, rx1157_pos, 0
  rxscan1158_done3131:
    nqp_rxmark rx1157_bstack, rxcap1159_fail3133, rx1157_pos, 0
    add $I11, rx1157_pos, 2
    gt $I11, rx1157_eos, rx1157_fail3125
    substr $S10, rx1157_tgt, rx1157_pos, 2
    ne $S10, ucs4:"+|", rx1157_fail3125
    add rx1157_pos, 2
    nqp_rxpeek $I19, rx1157_bstack, rxcap1159_fail3133
    inc $I19
    set $I11, rx1157_bstack[$I19]
    repr_bind_attr_int rx1157_cur, rx1157_curclass, "$!pos", rx1157_pos
    $P11 = rx1157_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1157_pos)
    rx1157_cstack = rx1157_cur."!cursor_capture"($P11, "sym")
    goto rxcap1159_done3132
  rxcap1159_fail3133:
    goto rx1157_fail3125
  rxcap1159_done3132:
    repr_bind_attr_int rx1157_cur, rx1157_curclass, "$!pos", rx1157_pos
    $P11 = rx1157_cur."O"("%additive, :op<bitor_i>")
    repr_get_attr_int $I11, $P11, rx1157_curclass, "$!pos"
    lt $I11, 0, rx1157_fail3125
    nqp_rxmark rx1157_bstack, rxsubrule1160_pass3134, -1, 0
  rxsubrule1160_pass3134:
    rx1157_cstack = rx1157_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1157_pos, $P11, rx1157_curclass, "$!pos"
    rx1157_cur."!cursor_pass"(rx1157_pos, "infix:sym<+|>", 'backtrack'=>1)
    .return (rx1157_cur)
  rx1157_restart3124:
    repr_get_attr_obj rx1157_cstack, rx1157_cur, rx1157_curclass, "$!cstack"
  rx1157_fail3125:
    unless rx1157_bstack, rx1157_done3123
    pop $I19, rx1157_bstack
    if_null rx1157_cstack, rx1157_cstack_done3128
    unless rx1157_cstack, rx1157_cstack_done3128
    dec $I19
    set $P11, rx1157_cstack[$I19]
  rx1157_cstack_done3128:
    pop rx1157_rep, rx1157_bstack
    pop rx1157_pos, rx1157_bstack
    pop $I19, rx1157_bstack
    lt rx1157_pos, -1, rx1157_done3123
    lt rx1157_pos, 0, rx1157_fail3125
    eq $I19, 0, rx1157_fail3125
    nqp_islist $I20, rx1157_cstack
    unless $I20, rx1157_jump3126
    elements $I18, rx1157_bstack
    le $I18, 0, rx1157_cut3127
    dec $I18
    set $I18, rx1157_bstack[$I18]
  rx1157_cut3127:
    assign rx1157_cstack, $I18
  rx1157_jump3126:
    jump $I19
  rx1157_done3123:
    rx1157_cur."!cursor_fail"()
    .return (rx1157_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+^>" :subid("cuid_192_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1331
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1161_tgt
    .local int rx1161_pos
    .local int rx1161_off
    .local int rx1161_eos
    .local int rx1161_rep
    .local pmc rx1161_cur
    .local pmc rx1161_curclass
    .local pmc rx1161_bstack
    .local pmc rx1161_cstack
    (rx1161_cur, rx1161_tgt, rx1161_pos, rx1161_curclass, rx1161_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1161_cur
    length rx1161_eos, rx1161_tgt
    eq $I19, 1, rx1161_restart3137
    gt rx1161_pos, rx1161_eos, rx1161_fail3138
    repr_get_attr_int $I11, self, rx1161_curclass, "$!from"
    ne $I11, -1, rxscan1162_done3144
    goto rxscan1162_scan3143
  rxscan1162_loop3142:
    inc rx1161_pos
    gt rx1161_pos, rx1161_eos, rx1161_fail3138
    repr_bind_attr_int rx1161_cur, rx1161_curclass, "$!from", rx1161_pos
  rxscan1162_scan3143:
    nqp_rxmark rx1161_bstack, rxscan1162_loop3142, rx1161_pos, 0
  rxscan1162_done3144:
    nqp_rxmark rx1161_bstack, rxcap1163_fail3146, rx1161_pos, 0
    add $I11, rx1161_pos, 2
    gt $I11, rx1161_eos, rx1161_fail3138
    substr $S10, rx1161_tgt, rx1161_pos, 2
    ne $S10, ucs4:"+^", rx1161_fail3138
    add rx1161_pos, 2
    nqp_rxpeek $I19, rx1161_bstack, rxcap1163_fail3146
    inc $I19
    set $I11, rx1161_bstack[$I19]
    repr_bind_attr_int rx1161_cur, rx1161_curclass, "$!pos", rx1161_pos
    $P11 = rx1161_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1161_pos)
    rx1161_cstack = rx1161_cur."!cursor_capture"($P11, "sym")
    goto rxcap1163_done3145
  rxcap1163_fail3146:
    goto rx1161_fail3138
  rxcap1163_done3145:
    repr_bind_attr_int rx1161_cur, rx1161_curclass, "$!pos", rx1161_pos
    $P11 = rx1161_cur."O"("%additive, :op<bitxor_i>")
    repr_get_attr_int $I11, $P11, rx1161_curclass, "$!pos"
    lt $I11, 0, rx1161_fail3138
    nqp_rxmark rx1161_bstack, rxsubrule1164_pass3147, -1, 0
  rxsubrule1164_pass3147:
    rx1161_cstack = rx1161_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1161_pos, $P11, rx1161_curclass, "$!pos"
    rx1161_cur."!cursor_pass"(rx1161_pos, "infix:sym<+^>", 'backtrack'=>1)
    .return (rx1161_cur)
  rx1161_restart3137:
    repr_get_attr_obj rx1161_cstack, rx1161_cur, rx1161_curclass, "$!cstack"
  rx1161_fail3138:
    unless rx1161_bstack, rx1161_done3136
    pop $I19, rx1161_bstack
    if_null rx1161_cstack, rx1161_cstack_done3141
    unless rx1161_cstack, rx1161_cstack_done3141
    dec $I19
    set $P11, rx1161_cstack[$I19]
  rx1161_cstack_done3141:
    pop rx1161_rep, rx1161_bstack
    pop rx1161_pos, rx1161_bstack
    pop $I19, rx1161_bstack
    lt rx1161_pos, -1, rx1161_done3136
    lt rx1161_pos, 0, rx1161_fail3138
    eq $I19, 0, rx1161_fail3138
    nqp_islist $I20, rx1161_cstack
    unless $I20, rx1161_jump3139
    elements $I18, rx1161_bstack
    le $I18, 0, rx1161_cut3140
    dec $I18
    set $I18, rx1161_bstack[$I18]
  rx1161_cut3140:
    assign rx1161_cstack, $I18
  rx1161_jump3139:
    jump $I19
  rx1161_done3136:
    rx1161_cur."!cursor_fail"()
    .return (rx1161_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~>" :subid("cuid_193_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1333
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1165_tgt
    .local int rx1165_pos
    .local int rx1165_off
    .local int rx1165_eos
    .local int rx1165_rep
    .local pmc rx1165_cur
    .local pmc rx1165_curclass
    .local pmc rx1165_bstack
    .local pmc rx1165_cstack
    (rx1165_cur, rx1165_tgt, rx1165_pos, rx1165_curclass, rx1165_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1165_cur
    length rx1165_eos, rx1165_tgt
    eq $I19, 1, rx1165_restart3150
    gt rx1165_pos, rx1165_eos, rx1165_fail3151
    repr_get_attr_int $I11, self, rx1165_curclass, "$!from"
    ne $I11, -1, rxscan1166_done3157
    goto rxscan1166_scan3156
  rxscan1166_loop3155:
    inc rx1165_pos
    gt rx1165_pos, rx1165_eos, rx1165_fail3151
    repr_bind_attr_int rx1165_cur, rx1165_curclass, "$!from", rx1165_pos
  rxscan1166_scan3156:
    nqp_rxmark rx1165_bstack, rxscan1166_loop3155, rx1165_pos, 0
  rxscan1166_done3157:
    nqp_rxmark rx1165_bstack, rxcap1167_fail3159, rx1165_pos, 0
    add $I11, rx1165_pos, 1
    gt $I11, rx1165_eos, rx1165_fail3151
    substr $S10, rx1165_tgt, rx1165_pos, 1
    ne $S10, ucs4:"~", rx1165_fail3151
    add rx1165_pos, 1
    nqp_rxpeek $I19, rx1165_bstack, rxcap1167_fail3159
    inc $I19
    set $I11, rx1165_bstack[$I19]
    repr_bind_attr_int rx1165_cur, rx1165_curclass, "$!pos", rx1165_pos
    $P11 = rx1165_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1165_pos)
    rx1165_cstack = rx1165_cur."!cursor_capture"($P11, "sym")
    goto rxcap1167_done3158
  rxcap1167_fail3159:
    goto rx1165_fail3151
  rxcap1167_done3158:
    repr_bind_attr_int rx1165_cur, rx1165_curclass, "$!pos", rx1165_pos
    $P11 = rx1165_cur."O"("%concatenation , :op<concat>")
    repr_get_attr_int $I11, $P11, rx1165_curclass, "$!pos"
    lt $I11, 0, rx1165_fail3151
    nqp_rxmark rx1165_bstack, rxsubrule1168_pass3160, -1, 0
  rxsubrule1168_pass3160:
    rx1165_cstack = rx1165_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1165_pos, $P11, rx1165_curclass, "$!pos"
    rx1165_cur."!cursor_pass"(rx1165_pos, "infix:sym<~>", 'backtrack'=>1)
    .return (rx1165_cur)
  rx1165_restart3150:
    repr_get_attr_obj rx1165_cstack, rx1165_cur, rx1165_curclass, "$!cstack"
  rx1165_fail3151:
    unless rx1165_bstack, rx1165_done3149
    pop $I19, rx1165_bstack
    if_null rx1165_cstack, rx1165_cstack_done3154
    unless rx1165_cstack, rx1165_cstack_done3154
    dec $I19
    set $P11, rx1165_cstack[$I19]
  rx1165_cstack_done3154:
    pop rx1165_rep, rx1165_bstack
    pop rx1165_pos, rx1165_bstack
    pop $I19, rx1165_bstack
    lt rx1165_pos, -1, rx1165_done3149
    lt rx1165_pos, 0, rx1165_fail3151
    eq $I19, 0, rx1165_fail3151
    nqp_islist $I20, rx1165_cstack
    unless $I20, rx1165_jump3152
    elements $I18, rx1165_bstack
    le $I18, 0, rx1165_cut3153
    dec $I18
    set $I18, rx1165_bstack[$I18]
  rx1165_cut3153:
    assign rx1165_cstack, $I18
  rx1165_jump3152:
    jump $I19
  rx1165_done3149:
    rx1165_cur."!cursor_fail"()
    .return (rx1165_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<==>" :subid("cuid_194_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1335
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1169_tgt
    .local int rx1169_pos
    .local int rx1169_off
    .local int rx1169_eos
    .local int rx1169_rep
    .local pmc rx1169_cur
    .local pmc rx1169_curclass
    .local pmc rx1169_bstack
    .local pmc rx1169_cstack
    (rx1169_cur, rx1169_tgt, rx1169_pos, rx1169_curclass, rx1169_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1169_cur
    length rx1169_eos, rx1169_tgt
    eq $I19, 1, rx1169_restart3163
    gt rx1169_pos, rx1169_eos, rx1169_fail3164
    repr_get_attr_int $I11, self, rx1169_curclass, "$!from"
    ne $I11, -1, rxscan1170_done3170
    goto rxscan1170_scan3169
  rxscan1170_loop3168:
    inc rx1169_pos
    gt rx1169_pos, rx1169_eos, rx1169_fail3164
    repr_bind_attr_int rx1169_cur, rx1169_curclass, "$!from", rx1169_pos
  rxscan1170_scan3169:
    nqp_rxmark rx1169_bstack, rxscan1170_loop3168, rx1169_pos, 0
  rxscan1170_done3170:
    nqp_rxmark rx1169_bstack, rxcap1171_fail3172, rx1169_pos, 0
    add $I11, rx1169_pos, 2
    gt $I11, rx1169_eos, rx1169_fail3164
    substr $S10, rx1169_tgt, rx1169_pos, 2
    ne $S10, ucs4:"==", rx1169_fail3164
    add rx1169_pos, 2
    nqp_rxpeek $I19, rx1169_bstack, rxcap1171_fail3172
    inc $I19
    set $I11, rx1169_bstack[$I19]
    repr_bind_attr_int rx1169_cur, rx1169_curclass, "$!pos", rx1169_pos
    $P11 = rx1169_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1169_pos)
    rx1169_cstack = rx1169_cur."!cursor_capture"($P11, "sym")
    goto rxcap1171_done3171
  rxcap1171_fail3172:
    goto rx1169_fail3164
  rxcap1171_done3171:
    repr_bind_attr_int rx1169_cur, rx1169_curclass, "$!pos", rx1169_pos
    $P11 = rx1169_cur."O"("%relational, :op<iseq_n>")
    repr_get_attr_int $I11, $P11, rx1169_curclass, "$!pos"
    lt $I11, 0, rx1169_fail3164
    nqp_rxmark rx1169_bstack, rxsubrule1172_pass3173, -1, 0
  rxsubrule1172_pass3173:
    rx1169_cstack = rx1169_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1169_pos, $P11, rx1169_curclass, "$!pos"
    rx1169_cur."!cursor_pass"(rx1169_pos, "infix:sym<==>", 'backtrack'=>1)
    .return (rx1169_cur)
  rx1169_restart3163:
    repr_get_attr_obj rx1169_cstack, rx1169_cur, rx1169_curclass, "$!cstack"
  rx1169_fail3164:
    unless rx1169_bstack, rx1169_done3162
    pop $I19, rx1169_bstack
    if_null rx1169_cstack, rx1169_cstack_done3167
    unless rx1169_cstack, rx1169_cstack_done3167
    dec $I19
    set $P11, rx1169_cstack[$I19]
  rx1169_cstack_done3167:
    pop rx1169_rep, rx1169_bstack
    pop rx1169_pos, rx1169_bstack
    pop $I19, rx1169_bstack
    lt rx1169_pos, -1, rx1169_done3162
    lt rx1169_pos, 0, rx1169_fail3164
    eq $I19, 0, rx1169_fail3164
    nqp_islist $I20, rx1169_cstack
    unless $I20, rx1169_jump3165
    elements $I18, rx1169_bstack
    le $I18, 0, rx1169_cut3166
    dec $I18
    set $I18, rx1169_bstack[$I18]
  rx1169_cut3166:
    assign rx1169_cstack, $I18
  rx1169_jump3165:
    jump $I19
  rx1169_done3162:
    rx1169_cur."!cursor_fail"()
    .return (rx1169_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<!=>" :subid("cuid_195_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1336
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1173_tgt
    .local int rx1173_pos
    .local int rx1173_off
    .local int rx1173_eos
    .local int rx1173_rep
    .local pmc rx1173_cur
    .local pmc rx1173_curclass
    .local pmc rx1173_bstack
    .local pmc rx1173_cstack
    (rx1173_cur, rx1173_tgt, rx1173_pos, rx1173_curclass, rx1173_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1173_cur
    length rx1173_eos, rx1173_tgt
    eq $I19, 1, rx1173_restart3176
    gt rx1173_pos, rx1173_eos, rx1173_fail3177
    repr_get_attr_int $I11, self, rx1173_curclass, "$!from"
    ne $I11, -1, rxscan1174_done3183
    goto rxscan1174_scan3182
  rxscan1174_loop3181:
    inc rx1173_pos
    gt rx1173_pos, rx1173_eos, rx1173_fail3177
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!from", rx1173_pos
  rxscan1174_scan3182:
    nqp_rxmark rx1173_bstack, rxscan1174_loop3181, rx1173_pos, 0
  rxscan1174_done3183:
    nqp_rxmark rx1173_bstack, rxcap1175_fail3185, rx1173_pos, 0
    add $I11, rx1173_pos, 2
    gt $I11, rx1173_eos, rx1173_fail3177
    substr $S10, rx1173_tgt, rx1173_pos, 2
    ne $S10, ucs4:"!=", rx1173_fail3177
    add rx1173_pos, 2
    nqp_rxpeek $I19, rx1173_bstack, rxcap1175_fail3185
    inc $I19
    set $I11, rx1173_bstack[$I19]
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!pos", rx1173_pos
    $P11 = rx1173_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1173_pos)
    rx1173_cstack = rx1173_cur."!cursor_capture"($P11, "sym")
    goto rxcap1175_done3184
  rxcap1175_fail3185:
    goto rx1173_fail3177
  rxcap1175_done3184:
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!pos", rx1173_pos
    $P11 = rx1173_cur."O"("%relational, :op<isne_n>")
    repr_get_attr_int $I11, $P11, rx1173_curclass, "$!pos"
    lt $I11, 0, rx1173_fail3177
    nqp_rxmark rx1173_bstack, rxsubrule1176_pass3186, -1, 0
  rxsubrule1176_pass3186:
    rx1173_cstack = rx1173_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1173_pos, $P11, rx1173_curclass, "$!pos"
    rx1173_cur."!cursor_pass"(rx1173_pos, "infix:sym<!=>", 'backtrack'=>1)
    .return (rx1173_cur)
  rx1173_restart3176:
    repr_get_attr_obj rx1173_cstack, rx1173_cur, rx1173_curclass, "$!cstack"
  rx1173_fail3177:
    unless rx1173_bstack, rx1173_done3175
    pop $I19, rx1173_bstack
    if_null rx1173_cstack, rx1173_cstack_done3180
    unless rx1173_cstack, rx1173_cstack_done3180
    dec $I19
    set $P11, rx1173_cstack[$I19]
  rx1173_cstack_done3180:
    pop rx1173_rep, rx1173_bstack
    pop rx1173_pos, rx1173_bstack
    pop $I19, rx1173_bstack
    lt rx1173_pos, -1, rx1173_done3175
    lt rx1173_pos, 0, rx1173_fail3177
    eq $I19, 0, rx1173_fail3177
    nqp_islist $I20, rx1173_cstack
    unless $I20, rx1173_jump3178
    elements $I18, rx1173_bstack
    le $I18, 0, rx1173_cut3179
    dec $I18
    set $I18, rx1173_bstack[$I18]
  rx1173_cut3179:
    assign rx1173_cstack, $I18
  rx1173_jump3178:
    jump $I19
  rx1173_done3175:
    rx1173_cur."!cursor_fail"()
    .return (rx1173_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<=>" :subid("cuid_196_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1337
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1177_tgt
    .local int rx1177_pos
    .local int rx1177_off
    .local int rx1177_eos
    .local int rx1177_rep
    .local pmc rx1177_cur
    .local pmc rx1177_curclass
    .local pmc rx1177_bstack
    .local pmc rx1177_cstack
    (rx1177_cur, rx1177_tgt, rx1177_pos, rx1177_curclass, rx1177_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1177_cur
    length rx1177_eos, rx1177_tgt
    eq $I19, 1, rx1177_restart3189
    gt rx1177_pos, rx1177_eos, rx1177_fail3190
    repr_get_attr_int $I11, self, rx1177_curclass, "$!from"
    ne $I11, -1, rxscan1178_done3196
    goto rxscan1178_scan3195
  rxscan1178_loop3194:
    inc rx1177_pos
    gt rx1177_pos, rx1177_eos, rx1177_fail3190
    repr_bind_attr_int rx1177_cur, rx1177_curclass, "$!from", rx1177_pos
  rxscan1178_scan3195:
    nqp_rxmark rx1177_bstack, rxscan1178_loop3194, rx1177_pos, 0
  rxscan1178_done3196:
    nqp_rxmark rx1177_bstack, rxcap1179_fail3198, rx1177_pos, 0
    add $I11, rx1177_pos, 2
    gt $I11, rx1177_eos, rx1177_fail3190
    substr $S10, rx1177_tgt, rx1177_pos, 2
    ne $S10, ucs4:"<=", rx1177_fail3190
    add rx1177_pos, 2
    nqp_rxpeek $I19, rx1177_bstack, rxcap1179_fail3198
    inc $I19
    set $I11, rx1177_bstack[$I19]
    repr_bind_attr_int rx1177_cur, rx1177_curclass, "$!pos", rx1177_pos
    $P11 = rx1177_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1177_pos)
    rx1177_cstack = rx1177_cur."!cursor_capture"($P11, "sym")
    goto rxcap1179_done3197
  rxcap1179_fail3198:
    goto rx1177_fail3190
  rxcap1179_done3197:
    repr_bind_attr_int rx1177_cur, rx1177_curclass, "$!pos", rx1177_pos
    $P11 = rx1177_cur."O"("%relational, :op<isle_n>")
    repr_get_attr_int $I11, $P11, rx1177_curclass, "$!pos"
    lt $I11, 0, rx1177_fail3190
    nqp_rxmark rx1177_bstack, rxsubrule1180_pass3199, -1, 0
  rxsubrule1180_pass3199:
    rx1177_cstack = rx1177_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1177_pos, $P11, rx1177_curclass, "$!pos"
    rx1177_cur."!cursor_pass"(rx1177_pos, "infix:sym<<=>", 'backtrack'=>1)
    .return (rx1177_cur)
  rx1177_restart3189:
    repr_get_attr_obj rx1177_cstack, rx1177_cur, rx1177_curclass, "$!cstack"
  rx1177_fail3190:
    unless rx1177_bstack, rx1177_done3188
    pop $I19, rx1177_bstack
    if_null rx1177_cstack, rx1177_cstack_done3193
    unless rx1177_cstack, rx1177_cstack_done3193
    dec $I19
    set $P11, rx1177_cstack[$I19]
  rx1177_cstack_done3193:
    pop rx1177_rep, rx1177_bstack
    pop rx1177_pos, rx1177_bstack
    pop $I19, rx1177_bstack
    lt rx1177_pos, -1, rx1177_done3188
    lt rx1177_pos, 0, rx1177_fail3190
    eq $I19, 0, rx1177_fail3190
    nqp_islist $I20, rx1177_cstack
    unless $I20, rx1177_jump3191
    elements $I18, rx1177_bstack
    le $I18, 0, rx1177_cut3192
    dec $I18
    set $I18, rx1177_bstack[$I18]
  rx1177_cut3192:
    assign rx1177_cstack, $I18
  rx1177_jump3191:
    jump $I19
  rx1177_done3188:
    rx1177_cur."!cursor_fail"()
    .return (rx1177_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>=>" :subid("cuid_197_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1338
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1181_tgt
    .local int rx1181_pos
    .local int rx1181_off
    .local int rx1181_eos
    .local int rx1181_rep
    .local pmc rx1181_cur
    .local pmc rx1181_curclass
    .local pmc rx1181_bstack
    .local pmc rx1181_cstack
    (rx1181_cur, rx1181_tgt, rx1181_pos, rx1181_curclass, rx1181_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1181_cur
    length rx1181_eos, rx1181_tgt
    eq $I19, 1, rx1181_restart3202
    gt rx1181_pos, rx1181_eos, rx1181_fail3203
    repr_get_attr_int $I11, self, rx1181_curclass, "$!from"
    ne $I11, -1, rxscan1182_done3209
    goto rxscan1182_scan3208
  rxscan1182_loop3207:
    inc rx1181_pos
    gt rx1181_pos, rx1181_eos, rx1181_fail3203
    repr_bind_attr_int rx1181_cur, rx1181_curclass, "$!from", rx1181_pos
  rxscan1182_scan3208:
    nqp_rxmark rx1181_bstack, rxscan1182_loop3207, rx1181_pos, 0
  rxscan1182_done3209:
    nqp_rxmark rx1181_bstack, rxcap1183_fail3211, rx1181_pos, 0
    add $I11, rx1181_pos, 2
    gt $I11, rx1181_eos, rx1181_fail3203
    substr $S10, rx1181_tgt, rx1181_pos, 2
    ne $S10, ucs4:">=", rx1181_fail3203
    add rx1181_pos, 2
    nqp_rxpeek $I19, rx1181_bstack, rxcap1183_fail3211
    inc $I19
    set $I11, rx1181_bstack[$I19]
    repr_bind_attr_int rx1181_cur, rx1181_curclass, "$!pos", rx1181_pos
    $P11 = rx1181_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1181_pos)
    rx1181_cstack = rx1181_cur."!cursor_capture"($P11, "sym")
    goto rxcap1183_done3210
  rxcap1183_fail3211:
    goto rx1181_fail3203
  rxcap1183_done3210:
    repr_bind_attr_int rx1181_cur, rx1181_curclass, "$!pos", rx1181_pos
    $P11 = rx1181_cur."O"("%relational, :op<isge_n>")
    repr_get_attr_int $I11, $P11, rx1181_curclass, "$!pos"
    lt $I11, 0, rx1181_fail3203
    nqp_rxmark rx1181_bstack, rxsubrule1184_pass3212, -1, 0
  rxsubrule1184_pass3212:
    rx1181_cstack = rx1181_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1181_pos, $P11, rx1181_curclass, "$!pos"
    rx1181_cur."!cursor_pass"(rx1181_pos, "infix:sym<>=>", 'backtrack'=>1)
    .return (rx1181_cur)
  rx1181_restart3202:
    repr_get_attr_obj rx1181_cstack, rx1181_cur, rx1181_curclass, "$!cstack"
  rx1181_fail3203:
    unless rx1181_bstack, rx1181_done3201
    pop $I19, rx1181_bstack
    if_null rx1181_cstack, rx1181_cstack_done3206
    unless rx1181_cstack, rx1181_cstack_done3206
    dec $I19
    set $P11, rx1181_cstack[$I19]
  rx1181_cstack_done3206:
    pop rx1181_rep, rx1181_bstack
    pop rx1181_pos, rx1181_bstack
    pop $I19, rx1181_bstack
    lt rx1181_pos, -1, rx1181_done3201
    lt rx1181_pos, 0, rx1181_fail3203
    eq $I19, 0, rx1181_fail3203
    nqp_islist $I20, rx1181_cstack
    unless $I20, rx1181_jump3204
    elements $I18, rx1181_bstack
    le $I18, 0, rx1181_cut3205
    dec $I18
    set $I18, rx1181_bstack[$I18]
  rx1181_cut3205:
    assign rx1181_cstack, $I18
  rx1181_jump3204:
    jump $I19
  rx1181_done3201:
    rx1181_cur."!cursor_fail"()
    .return (rx1181_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<>" :subid("cuid_198_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1339
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1185_tgt
    .local int rx1185_pos
    .local int rx1185_off
    .local int rx1185_eos
    .local int rx1185_rep
    .local pmc rx1185_cur
    .local pmc rx1185_curclass
    .local pmc rx1185_bstack
    .local pmc rx1185_cstack
    (rx1185_cur, rx1185_tgt, rx1185_pos, rx1185_curclass, rx1185_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1185_cur
    length rx1185_eos, rx1185_tgt
    eq $I19, 1, rx1185_restart3215
    gt rx1185_pos, rx1185_eos, rx1185_fail3216
    repr_get_attr_int $I11, self, rx1185_curclass, "$!from"
    ne $I11, -1, rxscan1186_done3222
    goto rxscan1186_scan3221
  rxscan1186_loop3220:
    inc rx1185_pos
    gt rx1185_pos, rx1185_eos, rx1185_fail3216
    repr_bind_attr_int rx1185_cur, rx1185_curclass, "$!from", rx1185_pos
  rxscan1186_scan3221:
    nqp_rxmark rx1185_bstack, rxscan1186_loop3220, rx1185_pos, 0
  rxscan1186_done3222:
    nqp_rxmark rx1185_bstack, rxcap1187_fail3224, rx1185_pos, 0
    add $I11, rx1185_pos, 1
    gt $I11, rx1185_eos, rx1185_fail3216
    substr $S10, rx1185_tgt, rx1185_pos, 1
    ne $S10, ucs4:"<", rx1185_fail3216
    add rx1185_pos, 1
    nqp_rxpeek $I19, rx1185_bstack, rxcap1187_fail3224
    inc $I19
    set $I11, rx1185_bstack[$I19]
    repr_bind_attr_int rx1185_cur, rx1185_curclass, "$!pos", rx1185_pos
    $P11 = rx1185_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1185_pos)
    rx1185_cstack = rx1185_cur."!cursor_capture"($P11, "sym")
    goto rxcap1187_done3223
  rxcap1187_fail3224:
    goto rx1185_fail3216
  rxcap1187_done3223:
    repr_bind_attr_int rx1185_cur, rx1185_curclass, "$!pos", rx1185_pos
    $P11 = rx1185_cur."O"("%relational, :op<islt_n>")
    repr_get_attr_int $I11, $P11, rx1185_curclass, "$!pos"
    lt $I11, 0, rx1185_fail3216
    nqp_rxmark rx1185_bstack, rxsubrule1188_pass3225, -1, 0
  rxsubrule1188_pass3225:
    rx1185_cstack = rx1185_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1185_pos, $P11, rx1185_curclass, "$!pos"
    rx1185_cur."!cursor_pass"(rx1185_pos, "infix:sym<<>", 'backtrack'=>1)
    .return (rx1185_cur)
  rx1185_restart3215:
    repr_get_attr_obj rx1185_cstack, rx1185_cur, rx1185_curclass, "$!cstack"
  rx1185_fail3216:
    unless rx1185_bstack, rx1185_done3214
    pop $I19, rx1185_bstack
    if_null rx1185_cstack, rx1185_cstack_done3219
    unless rx1185_cstack, rx1185_cstack_done3219
    dec $I19
    set $P11, rx1185_cstack[$I19]
  rx1185_cstack_done3219:
    pop rx1185_rep, rx1185_bstack
    pop rx1185_pos, rx1185_bstack
    pop $I19, rx1185_bstack
    lt rx1185_pos, -1, rx1185_done3214
    lt rx1185_pos, 0, rx1185_fail3216
    eq $I19, 0, rx1185_fail3216
    nqp_islist $I20, rx1185_cstack
    unless $I20, rx1185_jump3217
    elements $I18, rx1185_bstack
    le $I18, 0, rx1185_cut3218
    dec $I18
    set $I18, rx1185_bstack[$I18]
  rx1185_cut3218:
    assign rx1185_cstack, $I18
  rx1185_jump3217:
    jump $I19
  rx1185_done3214:
    rx1185_cur."!cursor_fail"()
    .return (rx1185_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>>" :subid("cuid_199_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1340
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1189_tgt
    .local int rx1189_pos
    .local int rx1189_off
    .local int rx1189_eos
    .local int rx1189_rep
    .local pmc rx1189_cur
    .local pmc rx1189_curclass
    .local pmc rx1189_bstack
    .local pmc rx1189_cstack
    (rx1189_cur, rx1189_tgt, rx1189_pos, rx1189_curclass, rx1189_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1189_cur
    length rx1189_eos, rx1189_tgt
    eq $I19, 1, rx1189_restart3228
    gt rx1189_pos, rx1189_eos, rx1189_fail3229
    repr_get_attr_int $I11, self, rx1189_curclass, "$!from"
    ne $I11, -1, rxscan1190_done3235
    goto rxscan1190_scan3234
  rxscan1190_loop3233:
    inc rx1189_pos
    gt rx1189_pos, rx1189_eos, rx1189_fail3229
    repr_bind_attr_int rx1189_cur, rx1189_curclass, "$!from", rx1189_pos
  rxscan1190_scan3234:
    nqp_rxmark rx1189_bstack, rxscan1190_loop3233, rx1189_pos, 0
  rxscan1190_done3235:
    nqp_rxmark rx1189_bstack, rxcap1191_fail3237, rx1189_pos, 0
    add $I11, rx1189_pos, 1
    gt $I11, rx1189_eos, rx1189_fail3229
    substr $S10, rx1189_tgt, rx1189_pos, 1
    ne $S10, ucs4:">", rx1189_fail3229
    add rx1189_pos, 1
    nqp_rxpeek $I19, rx1189_bstack, rxcap1191_fail3237
    inc $I19
    set $I11, rx1189_bstack[$I19]
    repr_bind_attr_int rx1189_cur, rx1189_curclass, "$!pos", rx1189_pos
    $P11 = rx1189_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1189_pos)
    rx1189_cstack = rx1189_cur."!cursor_capture"($P11, "sym")
    goto rxcap1191_done3236
  rxcap1191_fail3237:
    goto rx1189_fail3229
  rxcap1191_done3236:
    repr_bind_attr_int rx1189_cur, rx1189_curclass, "$!pos", rx1189_pos
    $P11 = rx1189_cur."O"("%relational, :op<isgt_n>")
    repr_get_attr_int $I11, $P11, rx1189_curclass, "$!pos"
    lt $I11, 0, rx1189_fail3229
    nqp_rxmark rx1189_bstack, rxsubrule1192_pass3238, -1, 0
  rxsubrule1192_pass3238:
    rx1189_cstack = rx1189_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1189_pos, $P11, rx1189_curclass, "$!pos"
    rx1189_cur."!cursor_pass"(rx1189_pos, "infix:sym<>>", 'backtrack'=>1)
    .return (rx1189_cur)
  rx1189_restart3228:
    repr_get_attr_obj rx1189_cstack, rx1189_cur, rx1189_curclass, "$!cstack"
  rx1189_fail3229:
    unless rx1189_bstack, rx1189_done3227
    pop $I19, rx1189_bstack
    if_null rx1189_cstack, rx1189_cstack_done3232
    unless rx1189_cstack, rx1189_cstack_done3232
    dec $I19
    set $P11, rx1189_cstack[$I19]
  rx1189_cstack_done3232:
    pop rx1189_rep, rx1189_bstack
    pop rx1189_pos, rx1189_bstack
    pop $I19, rx1189_bstack
    lt rx1189_pos, -1, rx1189_done3227
    lt rx1189_pos, 0, rx1189_fail3229
    eq $I19, 0, rx1189_fail3229
    nqp_islist $I20, rx1189_cstack
    unless $I20, rx1189_jump3230
    elements $I18, rx1189_bstack
    le $I18, 0, rx1189_cut3231
    dec $I18
    set $I18, rx1189_bstack[$I18]
  rx1189_cut3231:
    assign rx1189_cstack, $I18
  rx1189_jump3230:
    jump $I19
  rx1189_done3227:
    rx1189_cur."!cursor_fail"()
    .return (rx1189_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<eq>" :subid("cuid_200_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1341
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1193_tgt
    .local int rx1193_pos
    .local int rx1193_off
    .local int rx1193_eos
    .local int rx1193_rep
    .local pmc rx1193_cur
    .local pmc rx1193_curclass
    .local pmc rx1193_bstack
    .local pmc rx1193_cstack
    (rx1193_cur, rx1193_tgt, rx1193_pos, rx1193_curclass, rx1193_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1193_cur
    length rx1193_eos, rx1193_tgt
    eq $I19, 1, rx1193_restart3241
    gt rx1193_pos, rx1193_eos, rx1193_fail3242
    repr_get_attr_int $I11, self, rx1193_curclass, "$!from"
    ne $I11, -1, rxscan1194_done3248
    goto rxscan1194_scan3247
  rxscan1194_loop3246:
    inc rx1193_pos
    gt rx1193_pos, rx1193_eos, rx1193_fail3242
    repr_bind_attr_int rx1193_cur, rx1193_curclass, "$!from", rx1193_pos
  rxscan1194_scan3247:
    nqp_rxmark rx1193_bstack, rxscan1194_loop3246, rx1193_pos, 0
  rxscan1194_done3248:
    nqp_rxmark rx1193_bstack, rxcap1195_fail3250, rx1193_pos, 0
    add $I11, rx1193_pos, 2
    gt $I11, rx1193_eos, rx1193_fail3242
    substr $S10, rx1193_tgt, rx1193_pos, 2
    ne $S10, ucs4:"eq", rx1193_fail3242
    add rx1193_pos, 2
    nqp_rxpeek $I19, rx1193_bstack, rxcap1195_fail3250
    inc $I19
    set $I11, rx1193_bstack[$I19]
    repr_bind_attr_int rx1193_cur, rx1193_curclass, "$!pos", rx1193_pos
    $P11 = rx1193_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1193_pos)
    rx1193_cstack = rx1193_cur."!cursor_capture"($P11, "sym")
    goto rxcap1195_done3249
  rxcap1195_fail3250:
    goto rx1193_fail3242
  rxcap1195_done3249:
    repr_bind_attr_int rx1193_cur, rx1193_curclass, "$!pos", rx1193_pos
    $P11 = rx1193_cur."O"("%relational, :op<iseq_s>")
    repr_get_attr_int $I11, $P11, rx1193_curclass, "$!pos"
    lt $I11, 0, rx1193_fail3242
    nqp_rxmark rx1193_bstack, rxsubrule1196_pass3251, -1, 0
  rxsubrule1196_pass3251:
    rx1193_cstack = rx1193_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1193_pos, $P11, rx1193_curclass, "$!pos"
    rx1193_cur."!cursor_pass"(rx1193_pos, "infix:sym<eq>", 'backtrack'=>1)
    .return (rx1193_cur)
  rx1193_restart3241:
    repr_get_attr_obj rx1193_cstack, rx1193_cur, rx1193_curclass, "$!cstack"
  rx1193_fail3242:
    unless rx1193_bstack, rx1193_done3240
    pop $I19, rx1193_bstack
    if_null rx1193_cstack, rx1193_cstack_done3245
    unless rx1193_cstack, rx1193_cstack_done3245
    dec $I19
    set $P11, rx1193_cstack[$I19]
  rx1193_cstack_done3245:
    pop rx1193_rep, rx1193_bstack
    pop rx1193_pos, rx1193_bstack
    pop $I19, rx1193_bstack
    lt rx1193_pos, -1, rx1193_done3240
    lt rx1193_pos, 0, rx1193_fail3242
    eq $I19, 0, rx1193_fail3242
    nqp_islist $I20, rx1193_cstack
    unless $I20, rx1193_jump3243
    elements $I18, rx1193_bstack
    le $I18, 0, rx1193_cut3244
    dec $I18
    set $I18, rx1193_bstack[$I18]
  rx1193_cut3244:
    assign rx1193_cstack, $I18
  rx1193_jump3243:
    jump $I19
  rx1193_done3240:
    rx1193_cur."!cursor_fail"()
    .return (rx1193_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ne>" :subid("cuid_201_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1342
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1197_tgt
    .local int rx1197_pos
    .local int rx1197_off
    .local int rx1197_eos
    .local int rx1197_rep
    .local pmc rx1197_cur
    .local pmc rx1197_curclass
    .local pmc rx1197_bstack
    .local pmc rx1197_cstack
    (rx1197_cur, rx1197_tgt, rx1197_pos, rx1197_curclass, rx1197_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1197_cur
    length rx1197_eos, rx1197_tgt
    eq $I19, 1, rx1197_restart3254
    gt rx1197_pos, rx1197_eos, rx1197_fail3255
    repr_get_attr_int $I11, self, rx1197_curclass, "$!from"
    ne $I11, -1, rxscan1198_done3261
    goto rxscan1198_scan3260
  rxscan1198_loop3259:
    inc rx1197_pos
    gt rx1197_pos, rx1197_eos, rx1197_fail3255
    repr_bind_attr_int rx1197_cur, rx1197_curclass, "$!from", rx1197_pos
  rxscan1198_scan3260:
    nqp_rxmark rx1197_bstack, rxscan1198_loop3259, rx1197_pos, 0
  rxscan1198_done3261:
    nqp_rxmark rx1197_bstack, rxcap1199_fail3263, rx1197_pos, 0
    add $I11, rx1197_pos, 2
    gt $I11, rx1197_eos, rx1197_fail3255
    substr $S10, rx1197_tgt, rx1197_pos, 2
    ne $S10, ucs4:"ne", rx1197_fail3255
    add rx1197_pos, 2
    nqp_rxpeek $I19, rx1197_bstack, rxcap1199_fail3263
    inc $I19
    set $I11, rx1197_bstack[$I19]
    repr_bind_attr_int rx1197_cur, rx1197_curclass, "$!pos", rx1197_pos
    $P11 = rx1197_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1197_pos)
    rx1197_cstack = rx1197_cur."!cursor_capture"($P11, "sym")
    goto rxcap1199_done3262
  rxcap1199_fail3263:
    goto rx1197_fail3255
  rxcap1199_done3262:
    repr_bind_attr_int rx1197_cur, rx1197_curclass, "$!pos", rx1197_pos
    $P11 = rx1197_cur."O"("%relational, :op<isne_s>")
    repr_get_attr_int $I11, $P11, rx1197_curclass, "$!pos"
    lt $I11, 0, rx1197_fail3255
    nqp_rxmark rx1197_bstack, rxsubrule1200_pass3264, -1, 0
  rxsubrule1200_pass3264:
    rx1197_cstack = rx1197_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1197_pos, $P11, rx1197_curclass, "$!pos"
    rx1197_cur."!cursor_pass"(rx1197_pos, "infix:sym<ne>", 'backtrack'=>1)
    .return (rx1197_cur)
  rx1197_restart3254:
    repr_get_attr_obj rx1197_cstack, rx1197_cur, rx1197_curclass, "$!cstack"
  rx1197_fail3255:
    unless rx1197_bstack, rx1197_done3253
    pop $I19, rx1197_bstack
    if_null rx1197_cstack, rx1197_cstack_done3258
    unless rx1197_cstack, rx1197_cstack_done3258
    dec $I19
    set $P11, rx1197_cstack[$I19]
  rx1197_cstack_done3258:
    pop rx1197_rep, rx1197_bstack
    pop rx1197_pos, rx1197_bstack
    pop $I19, rx1197_bstack
    lt rx1197_pos, -1, rx1197_done3253
    lt rx1197_pos, 0, rx1197_fail3255
    eq $I19, 0, rx1197_fail3255
    nqp_islist $I20, rx1197_cstack
    unless $I20, rx1197_jump3256
    elements $I18, rx1197_bstack
    le $I18, 0, rx1197_cut3257
    dec $I18
    set $I18, rx1197_bstack[$I18]
  rx1197_cut3257:
    assign rx1197_cstack, $I18
  rx1197_jump3256:
    jump $I19
  rx1197_done3253:
    rx1197_cur."!cursor_fail"()
    .return (rx1197_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<le>" :subid("cuid_202_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1343
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1201_tgt
    .local int rx1201_pos
    .local int rx1201_off
    .local int rx1201_eos
    .local int rx1201_rep
    .local pmc rx1201_cur
    .local pmc rx1201_curclass
    .local pmc rx1201_bstack
    .local pmc rx1201_cstack
    (rx1201_cur, rx1201_tgt, rx1201_pos, rx1201_curclass, rx1201_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1201_cur
    length rx1201_eos, rx1201_tgt
    eq $I19, 1, rx1201_restart3267
    gt rx1201_pos, rx1201_eos, rx1201_fail3268
    repr_get_attr_int $I11, self, rx1201_curclass, "$!from"
    ne $I11, -1, rxscan1202_done3274
    goto rxscan1202_scan3273
  rxscan1202_loop3272:
    inc rx1201_pos
    gt rx1201_pos, rx1201_eos, rx1201_fail3268
    repr_bind_attr_int rx1201_cur, rx1201_curclass, "$!from", rx1201_pos
  rxscan1202_scan3273:
    nqp_rxmark rx1201_bstack, rxscan1202_loop3272, rx1201_pos, 0
  rxscan1202_done3274:
    nqp_rxmark rx1201_bstack, rxcap1203_fail3276, rx1201_pos, 0
    add $I11, rx1201_pos, 2
    gt $I11, rx1201_eos, rx1201_fail3268
    substr $S10, rx1201_tgt, rx1201_pos, 2
    ne $S10, ucs4:"le", rx1201_fail3268
    add rx1201_pos, 2
    nqp_rxpeek $I19, rx1201_bstack, rxcap1203_fail3276
    inc $I19
    set $I11, rx1201_bstack[$I19]
    repr_bind_attr_int rx1201_cur, rx1201_curclass, "$!pos", rx1201_pos
    $P11 = rx1201_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1201_pos)
    rx1201_cstack = rx1201_cur."!cursor_capture"($P11, "sym")
    goto rxcap1203_done3275
  rxcap1203_fail3276:
    goto rx1201_fail3268
  rxcap1203_done3275:
    repr_bind_attr_int rx1201_cur, rx1201_curclass, "$!pos", rx1201_pos
    $P11 = rx1201_cur."O"("%relational, :op<isle_s>")
    repr_get_attr_int $I11, $P11, rx1201_curclass, "$!pos"
    lt $I11, 0, rx1201_fail3268
    nqp_rxmark rx1201_bstack, rxsubrule1204_pass3277, -1, 0
  rxsubrule1204_pass3277:
    rx1201_cstack = rx1201_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1201_pos, $P11, rx1201_curclass, "$!pos"
    rx1201_cur."!cursor_pass"(rx1201_pos, "infix:sym<le>", 'backtrack'=>1)
    .return (rx1201_cur)
  rx1201_restart3267:
    repr_get_attr_obj rx1201_cstack, rx1201_cur, rx1201_curclass, "$!cstack"
  rx1201_fail3268:
    unless rx1201_bstack, rx1201_done3266
    pop $I19, rx1201_bstack
    if_null rx1201_cstack, rx1201_cstack_done3271
    unless rx1201_cstack, rx1201_cstack_done3271
    dec $I19
    set $P11, rx1201_cstack[$I19]
  rx1201_cstack_done3271:
    pop rx1201_rep, rx1201_bstack
    pop rx1201_pos, rx1201_bstack
    pop $I19, rx1201_bstack
    lt rx1201_pos, -1, rx1201_done3266
    lt rx1201_pos, 0, rx1201_fail3268
    eq $I19, 0, rx1201_fail3268
    nqp_islist $I20, rx1201_cstack
    unless $I20, rx1201_jump3269
    elements $I18, rx1201_bstack
    le $I18, 0, rx1201_cut3270
    dec $I18
    set $I18, rx1201_bstack[$I18]
  rx1201_cut3270:
    assign rx1201_cstack, $I18
  rx1201_jump3269:
    jump $I19
  rx1201_done3266:
    rx1201_cur."!cursor_fail"()
    .return (rx1201_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ge>" :subid("cuid_203_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1344
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1205_tgt
    .local int rx1205_pos
    .local int rx1205_off
    .local int rx1205_eos
    .local int rx1205_rep
    .local pmc rx1205_cur
    .local pmc rx1205_curclass
    .local pmc rx1205_bstack
    .local pmc rx1205_cstack
    (rx1205_cur, rx1205_tgt, rx1205_pos, rx1205_curclass, rx1205_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1205_cur
    length rx1205_eos, rx1205_tgt
    eq $I19, 1, rx1205_restart3280
    gt rx1205_pos, rx1205_eos, rx1205_fail3281
    repr_get_attr_int $I11, self, rx1205_curclass, "$!from"
    ne $I11, -1, rxscan1206_done3287
    goto rxscan1206_scan3286
  rxscan1206_loop3285:
    inc rx1205_pos
    gt rx1205_pos, rx1205_eos, rx1205_fail3281
    repr_bind_attr_int rx1205_cur, rx1205_curclass, "$!from", rx1205_pos
  rxscan1206_scan3286:
    nqp_rxmark rx1205_bstack, rxscan1206_loop3285, rx1205_pos, 0
  rxscan1206_done3287:
    nqp_rxmark rx1205_bstack, rxcap1207_fail3289, rx1205_pos, 0
    add $I11, rx1205_pos, 2
    gt $I11, rx1205_eos, rx1205_fail3281
    substr $S10, rx1205_tgt, rx1205_pos, 2
    ne $S10, ucs4:"ge", rx1205_fail3281
    add rx1205_pos, 2
    nqp_rxpeek $I19, rx1205_bstack, rxcap1207_fail3289
    inc $I19
    set $I11, rx1205_bstack[$I19]
    repr_bind_attr_int rx1205_cur, rx1205_curclass, "$!pos", rx1205_pos
    $P11 = rx1205_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1205_pos)
    rx1205_cstack = rx1205_cur."!cursor_capture"($P11, "sym")
    goto rxcap1207_done3288
  rxcap1207_fail3289:
    goto rx1205_fail3281
  rxcap1207_done3288:
    repr_bind_attr_int rx1205_cur, rx1205_curclass, "$!pos", rx1205_pos
    $P11 = rx1205_cur."O"("%relational, :op<isge_s>")
    repr_get_attr_int $I11, $P11, rx1205_curclass, "$!pos"
    lt $I11, 0, rx1205_fail3281
    nqp_rxmark rx1205_bstack, rxsubrule1208_pass3290, -1, 0
  rxsubrule1208_pass3290:
    rx1205_cstack = rx1205_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1205_pos, $P11, rx1205_curclass, "$!pos"
    rx1205_cur."!cursor_pass"(rx1205_pos, "infix:sym<ge>", 'backtrack'=>1)
    .return (rx1205_cur)
  rx1205_restart3280:
    repr_get_attr_obj rx1205_cstack, rx1205_cur, rx1205_curclass, "$!cstack"
  rx1205_fail3281:
    unless rx1205_bstack, rx1205_done3279
    pop $I19, rx1205_bstack
    if_null rx1205_cstack, rx1205_cstack_done3284
    unless rx1205_cstack, rx1205_cstack_done3284
    dec $I19
    set $P11, rx1205_cstack[$I19]
  rx1205_cstack_done3284:
    pop rx1205_rep, rx1205_bstack
    pop rx1205_pos, rx1205_bstack
    pop $I19, rx1205_bstack
    lt rx1205_pos, -1, rx1205_done3279
    lt rx1205_pos, 0, rx1205_fail3281
    eq $I19, 0, rx1205_fail3281
    nqp_islist $I20, rx1205_cstack
    unless $I20, rx1205_jump3282
    elements $I18, rx1205_bstack
    le $I18, 0, rx1205_cut3283
    dec $I18
    set $I18, rx1205_bstack[$I18]
  rx1205_cut3283:
    assign rx1205_cstack, $I18
  rx1205_jump3282:
    jump $I19
  rx1205_done3279:
    rx1205_cur."!cursor_fail"()
    .return (rx1205_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<lt>" :subid("cuid_204_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1345
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1209_tgt
    .local int rx1209_pos
    .local int rx1209_off
    .local int rx1209_eos
    .local int rx1209_rep
    .local pmc rx1209_cur
    .local pmc rx1209_curclass
    .local pmc rx1209_bstack
    .local pmc rx1209_cstack
    (rx1209_cur, rx1209_tgt, rx1209_pos, rx1209_curclass, rx1209_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1209_cur
    length rx1209_eos, rx1209_tgt
    eq $I19, 1, rx1209_restart3293
    gt rx1209_pos, rx1209_eos, rx1209_fail3294
    repr_get_attr_int $I11, self, rx1209_curclass, "$!from"
    ne $I11, -1, rxscan1210_done3300
    goto rxscan1210_scan3299
  rxscan1210_loop3298:
    inc rx1209_pos
    gt rx1209_pos, rx1209_eos, rx1209_fail3294
    repr_bind_attr_int rx1209_cur, rx1209_curclass, "$!from", rx1209_pos
  rxscan1210_scan3299:
    nqp_rxmark rx1209_bstack, rxscan1210_loop3298, rx1209_pos, 0
  rxscan1210_done3300:
    nqp_rxmark rx1209_bstack, rxcap1211_fail3302, rx1209_pos, 0
    add $I11, rx1209_pos, 2
    gt $I11, rx1209_eos, rx1209_fail3294
    substr $S10, rx1209_tgt, rx1209_pos, 2
    ne $S10, ucs4:"lt", rx1209_fail3294
    add rx1209_pos, 2
    nqp_rxpeek $I19, rx1209_bstack, rxcap1211_fail3302
    inc $I19
    set $I11, rx1209_bstack[$I19]
    repr_bind_attr_int rx1209_cur, rx1209_curclass, "$!pos", rx1209_pos
    $P11 = rx1209_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1209_pos)
    rx1209_cstack = rx1209_cur."!cursor_capture"($P11, "sym")
    goto rxcap1211_done3301
  rxcap1211_fail3302:
    goto rx1209_fail3294
  rxcap1211_done3301:
    repr_bind_attr_int rx1209_cur, rx1209_curclass, "$!pos", rx1209_pos
    $P11 = rx1209_cur."O"("%relational, :op<islt_s>")
    repr_get_attr_int $I11, $P11, rx1209_curclass, "$!pos"
    lt $I11, 0, rx1209_fail3294
    nqp_rxmark rx1209_bstack, rxsubrule1212_pass3303, -1, 0
  rxsubrule1212_pass3303:
    rx1209_cstack = rx1209_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1209_pos, $P11, rx1209_curclass, "$!pos"
    rx1209_cur."!cursor_pass"(rx1209_pos, "infix:sym<lt>", 'backtrack'=>1)
    .return (rx1209_cur)
  rx1209_restart3293:
    repr_get_attr_obj rx1209_cstack, rx1209_cur, rx1209_curclass, "$!cstack"
  rx1209_fail3294:
    unless rx1209_bstack, rx1209_done3292
    pop $I19, rx1209_bstack
    if_null rx1209_cstack, rx1209_cstack_done3297
    unless rx1209_cstack, rx1209_cstack_done3297
    dec $I19
    set $P11, rx1209_cstack[$I19]
  rx1209_cstack_done3297:
    pop rx1209_rep, rx1209_bstack
    pop rx1209_pos, rx1209_bstack
    pop $I19, rx1209_bstack
    lt rx1209_pos, -1, rx1209_done3292
    lt rx1209_pos, 0, rx1209_fail3294
    eq $I19, 0, rx1209_fail3294
    nqp_islist $I20, rx1209_cstack
    unless $I20, rx1209_jump3295
    elements $I18, rx1209_bstack
    le $I18, 0, rx1209_cut3296
    dec $I18
    set $I18, rx1209_bstack[$I18]
  rx1209_cut3296:
    assign rx1209_cstack, $I18
  rx1209_jump3295:
    jump $I19
  rx1209_done3292:
    rx1209_cur."!cursor_fail"()
    .return (rx1209_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<gt>" :subid("cuid_205_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1346
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1213_tgt
    .local int rx1213_pos
    .local int rx1213_off
    .local int rx1213_eos
    .local int rx1213_rep
    .local pmc rx1213_cur
    .local pmc rx1213_curclass
    .local pmc rx1213_bstack
    .local pmc rx1213_cstack
    (rx1213_cur, rx1213_tgt, rx1213_pos, rx1213_curclass, rx1213_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1213_cur
    length rx1213_eos, rx1213_tgt
    eq $I19, 1, rx1213_restart3306
    gt rx1213_pos, rx1213_eos, rx1213_fail3307
    repr_get_attr_int $I11, self, rx1213_curclass, "$!from"
    ne $I11, -1, rxscan1214_done3313
    goto rxscan1214_scan3312
  rxscan1214_loop3311:
    inc rx1213_pos
    gt rx1213_pos, rx1213_eos, rx1213_fail3307
    repr_bind_attr_int rx1213_cur, rx1213_curclass, "$!from", rx1213_pos
  rxscan1214_scan3312:
    nqp_rxmark rx1213_bstack, rxscan1214_loop3311, rx1213_pos, 0
  rxscan1214_done3313:
    nqp_rxmark rx1213_bstack, rxcap1215_fail3315, rx1213_pos, 0
    add $I11, rx1213_pos, 2
    gt $I11, rx1213_eos, rx1213_fail3307
    substr $S10, rx1213_tgt, rx1213_pos, 2
    ne $S10, ucs4:"gt", rx1213_fail3307
    add rx1213_pos, 2
    nqp_rxpeek $I19, rx1213_bstack, rxcap1215_fail3315
    inc $I19
    set $I11, rx1213_bstack[$I19]
    repr_bind_attr_int rx1213_cur, rx1213_curclass, "$!pos", rx1213_pos
    $P11 = rx1213_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1213_pos)
    rx1213_cstack = rx1213_cur."!cursor_capture"($P11, "sym")
    goto rxcap1215_done3314
  rxcap1215_fail3315:
    goto rx1213_fail3307
  rxcap1215_done3314:
    repr_bind_attr_int rx1213_cur, rx1213_curclass, "$!pos", rx1213_pos
    $P11 = rx1213_cur."O"("%relational, :op<isgt_s>")
    repr_get_attr_int $I11, $P11, rx1213_curclass, "$!pos"
    lt $I11, 0, rx1213_fail3307
    nqp_rxmark rx1213_bstack, rxsubrule1216_pass3316, -1, 0
  rxsubrule1216_pass3316:
    rx1213_cstack = rx1213_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1213_pos, $P11, rx1213_curclass, "$!pos"
    rx1213_cur."!cursor_pass"(rx1213_pos, "infix:sym<gt>", 'backtrack'=>1)
    .return (rx1213_cur)
  rx1213_restart3306:
    repr_get_attr_obj rx1213_cstack, rx1213_cur, rx1213_curclass, "$!cstack"
  rx1213_fail3307:
    unless rx1213_bstack, rx1213_done3305
    pop $I19, rx1213_bstack
    if_null rx1213_cstack, rx1213_cstack_done3310
    unless rx1213_cstack, rx1213_cstack_done3310
    dec $I19
    set $P11, rx1213_cstack[$I19]
  rx1213_cstack_done3310:
    pop rx1213_rep, rx1213_bstack
    pop rx1213_pos, rx1213_bstack
    pop $I19, rx1213_bstack
    lt rx1213_pos, -1, rx1213_done3305
    lt rx1213_pos, 0, rx1213_fail3307
    eq $I19, 0, rx1213_fail3307
    nqp_islist $I20, rx1213_cstack
    unless $I20, rx1213_jump3308
    elements $I18, rx1213_bstack
    le $I18, 0, rx1213_cut3309
    dec $I18
    set $I18, rx1213_bstack[$I18]
  rx1213_cut3309:
    assign rx1213_cstack, $I18
  rx1213_jump3308:
    jump $I19
  rx1213_done3305:
    rx1213_cur."!cursor_fail"()
    .return (rx1213_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=:=>" :subid("cuid_206_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1347
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1217_tgt
    .local int rx1217_pos
    .local int rx1217_off
    .local int rx1217_eos
    .local int rx1217_rep
    .local pmc rx1217_cur
    .local pmc rx1217_curclass
    .local pmc rx1217_bstack
    .local pmc rx1217_cstack
    (rx1217_cur, rx1217_tgt, rx1217_pos, rx1217_curclass, rx1217_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1217_cur
    length rx1217_eos, rx1217_tgt
    eq $I19, 1, rx1217_restart3319
    gt rx1217_pos, rx1217_eos, rx1217_fail3320
    repr_get_attr_int $I11, self, rx1217_curclass, "$!from"
    ne $I11, -1, rxscan1218_done3326
    goto rxscan1218_scan3325
  rxscan1218_loop3324:
    inc rx1217_pos
    gt rx1217_pos, rx1217_eos, rx1217_fail3320
    repr_bind_attr_int rx1217_cur, rx1217_curclass, "$!from", rx1217_pos
  rxscan1218_scan3325:
    nqp_rxmark rx1217_bstack, rxscan1218_loop3324, rx1217_pos, 0
  rxscan1218_done3326:
    nqp_rxmark rx1217_bstack, rxcap1219_fail3328, rx1217_pos, 0
    add $I11, rx1217_pos, 3
    gt $I11, rx1217_eos, rx1217_fail3320
    substr $S10, rx1217_tgt, rx1217_pos, 3
    ne $S10, ucs4:"=:=", rx1217_fail3320
    add rx1217_pos, 3
    nqp_rxpeek $I19, rx1217_bstack, rxcap1219_fail3328
    inc $I19
    set $I11, rx1217_bstack[$I19]
    repr_bind_attr_int rx1217_cur, rx1217_curclass, "$!pos", rx1217_pos
    $P11 = rx1217_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1217_pos)
    rx1217_cstack = rx1217_cur."!cursor_capture"($P11, "sym")
    goto rxcap1219_done3327
  rxcap1219_fail3328:
    goto rx1217_fail3320
  rxcap1219_done3327:
    repr_bind_attr_int rx1217_cur, rx1217_curclass, "$!pos", rx1217_pos
    $P11 = rx1217_cur."O"("%relational, :op<eqaddr>")
    repr_get_attr_int $I11, $P11, rx1217_curclass, "$!pos"
    lt $I11, 0, rx1217_fail3320
    nqp_rxmark rx1217_bstack, rxsubrule1220_pass3329, -1, 0
  rxsubrule1220_pass3329:
    rx1217_cstack = rx1217_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1217_pos, $P11, rx1217_curclass, "$!pos"
    rx1217_cur."!cursor_pass"(rx1217_pos, "infix:sym<=:=>", 'backtrack'=>1)
    .return (rx1217_cur)
  rx1217_restart3319:
    repr_get_attr_obj rx1217_cstack, rx1217_cur, rx1217_curclass, "$!cstack"
  rx1217_fail3320:
    unless rx1217_bstack, rx1217_done3318
    pop $I19, rx1217_bstack
    if_null rx1217_cstack, rx1217_cstack_done3323
    unless rx1217_cstack, rx1217_cstack_done3323
    dec $I19
    set $P11, rx1217_cstack[$I19]
  rx1217_cstack_done3323:
    pop rx1217_rep, rx1217_bstack
    pop rx1217_pos, rx1217_bstack
    pop $I19, rx1217_bstack
    lt rx1217_pos, -1, rx1217_done3318
    lt rx1217_pos, 0, rx1217_fail3320
    eq $I19, 0, rx1217_fail3320
    nqp_islist $I20, rx1217_cstack
    unless $I20, rx1217_jump3321
    elements $I18, rx1217_bstack
    le $I18, 0, rx1217_cut3322
    dec $I18
    set $I18, rx1217_bstack[$I18]
  rx1217_cut3322:
    assign rx1217_cstack, $I18
  rx1217_jump3321:
    jump $I19
  rx1217_done3318:
    rx1217_cur."!cursor_fail"()
    .return (rx1217_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_207_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1348
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1221_tgt
    .local int rx1221_pos
    .local int rx1221_off
    .local int rx1221_eos
    .local int rx1221_rep
    .local pmc rx1221_cur
    .local pmc rx1221_curclass
    .local pmc rx1221_bstack
    .local pmc rx1221_cstack
    (rx1221_cur, rx1221_tgt, rx1221_pos, rx1221_curclass, rx1221_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1221_cur
    length rx1221_eos, rx1221_tgt
    eq $I19, 1, rx1221_restart3332
    gt rx1221_pos, rx1221_eos, rx1221_fail3333
    repr_get_attr_int $I11, self, rx1221_curclass, "$!from"
    ne $I11, -1, rxscan1222_done3339
    goto rxscan1222_scan3338
  rxscan1222_loop3337:
    inc rx1221_pos
    gt rx1221_pos, rx1221_eos, rx1221_fail3333
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!from", rx1221_pos
  rxscan1222_scan3338:
    nqp_rxmark rx1221_bstack, rxscan1222_loop3337, rx1221_pos, 0
  rxscan1222_done3339:
    nqp_rxmark rx1221_bstack, rxcap1223_fail3341, rx1221_pos, 0
    add $I11, rx1221_pos, 2
    gt $I11, rx1221_eos, rx1221_fail3333
    substr $S10, rx1221_tgt, rx1221_pos, 2
    ne $S10, ucs4:"~~", rx1221_fail3333
    add rx1221_pos, 2
    nqp_rxpeek $I19, rx1221_bstack, rxcap1223_fail3341
    inc $I19
    set $I11, rx1221_bstack[$I19]
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!pos", rx1221_pos
    $P11 = rx1221_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1221_pos)
    rx1221_cstack = rx1221_cur."!cursor_capture"($P11, "sym")
    goto rxcap1223_done3340
  rxcap1223_fail3341:
    goto rx1221_fail3333
  rxcap1223_done3340:
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!pos", rx1221_pos
    $P11 = rx1221_cur."O"("%relational, :reducecheck<smartmatch>")
    repr_get_attr_int $I11, $P11, rx1221_curclass, "$!pos"
    lt $I11, 0, rx1221_fail3333
    nqp_rxmark rx1221_bstack, rxsubrule1224_pass3342, -1, 0
  rxsubrule1224_pass3342:
    rx1221_cstack = rx1221_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1221_pos, $P11, rx1221_curclass, "$!pos"
    rx1221_cur."!cursor_pass"(rx1221_pos, "infix:sym<~~>", 'backtrack'=>1)
    .return (rx1221_cur)
  rx1221_restart3332:
    repr_get_attr_obj rx1221_cstack, rx1221_cur, rx1221_curclass, "$!cstack"
  rx1221_fail3333:
    unless rx1221_bstack, rx1221_done3331
    pop $I19, rx1221_bstack
    if_null rx1221_cstack, rx1221_cstack_done3336
    unless rx1221_cstack, rx1221_cstack_done3336
    dec $I19
    set $P11, rx1221_cstack[$I19]
  rx1221_cstack_done3336:
    pop rx1221_rep, rx1221_bstack
    pop rx1221_pos, rx1221_bstack
    pop $I19, rx1221_bstack
    lt rx1221_pos, -1, rx1221_done3331
    lt rx1221_pos, 0, rx1221_fail3333
    eq $I19, 0, rx1221_fail3333
    nqp_islist $I20, rx1221_cstack
    unless $I20, rx1221_jump3334
    elements $I18, rx1221_bstack
    le $I18, 0, rx1221_cut3335
    dec $I18
    set $I18, rx1221_bstack[$I18]
  rx1221_cut3335:
    assign rx1221_cstack, $I18
  rx1221_jump3334:
    jump $I19
  rx1221_done3331:
    rx1221_cur."!cursor_fail"()
    .return (rx1221_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<&&>" :subid("cuid_208_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1350
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1225_tgt
    .local int rx1225_pos
    .local int rx1225_off
    .local int rx1225_eos
    .local int rx1225_rep
    .local pmc rx1225_cur
    .local pmc rx1225_curclass
    .local pmc rx1225_bstack
    .local pmc rx1225_cstack
    (rx1225_cur, rx1225_tgt, rx1225_pos, rx1225_curclass, rx1225_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1225_cur
    length rx1225_eos, rx1225_tgt
    eq $I19, 1, rx1225_restart3345
    gt rx1225_pos, rx1225_eos, rx1225_fail3346
    repr_get_attr_int $I11, self, rx1225_curclass, "$!from"
    ne $I11, -1, rxscan1226_done3352
    goto rxscan1226_scan3351
  rxscan1226_loop3350:
    inc rx1225_pos
    gt rx1225_pos, rx1225_eos, rx1225_fail3346
    repr_bind_attr_int rx1225_cur, rx1225_curclass, "$!from", rx1225_pos
  rxscan1226_scan3351:
    nqp_rxmark rx1225_bstack, rxscan1226_loop3350, rx1225_pos, 0
  rxscan1226_done3352:
    nqp_rxmark rx1225_bstack, rxcap1227_fail3354, rx1225_pos, 0
    add $I11, rx1225_pos, 2
    gt $I11, rx1225_eos, rx1225_fail3346
    substr $S10, rx1225_tgt, rx1225_pos, 2
    ne $S10, ucs4:"&&", rx1225_fail3346
    add rx1225_pos, 2
    nqp_rxpeek $I19, rx1225_bstack, rxcap1227_fail3354
    inc $I19
    set $I11, rx1225_bstack[$I19]
    repr_bind_attr_int rx1225_cur, rx1225_curclass, "$!pos", rx1225_pos
    $P11 = rx1225_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1225_pos)
    rx1225_cstack = rx1225_cur."!cursor_capture"($P11, "sym")
    goto rxcap1227_done3353
  rxcap1227_fail3354:
    goto rx1225_fail3346
  rxcap1227_done3353:
    repr_bind_attr_int rx1225_cur, rx1225_curclass, "$!pos", rx1225_pos
    $P11 = rx1225_cur."O"("%tight_and, :op<if>")
    repr_get_attr_int $I11, $P11, rx1225_curclass, "$!pos"
    lt $I11, 0, rx1225_fail3346
    nqp_rxmark rx1225_bstack, rxsubrule1228_pass3355, -1, 0
  rxsubrule1228_pass3355:
    rx1225_cstack = rx1225_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1225_pos, $P11, rx1225_curclass, "$!pos"
    rx1225_cur."!cursor_pass"(rx1225_pos, "infix:sym<&&>", 'backtrack'=>1)
    .return (rx1225_cur)
  rx1225_restart3345:
    repr_get_attr_obj rx1225_cstack, rx1225_cur, rx1225_curclass, "$!cstack"
  rx1225_fail3346:
    unless rx1225_bstack, rx1225_done3344
    pop $I19, rx1225_bstack
    if_null rx1225_cstack, rx1225_cstack_done3349
    unless rx1225_cstack, rx1225_cstack_done3349
    dec $I19
    set $P11, rx1225_cstack[$I19]
  rx1225_cstack_done3349:
    pop rx1225_rep, rx1225_bstack
    pop rx1225_pos, rx1225_bstack
    pop $I19, rx1225_bstack
    lt rx1225_pos, -1, rx1225_done3344
    lt rx1225_pos, 0, rx1225_fail3346
    eq $I19, 0, rx1225_fail3346
    nqp_islist $I20, rx1225_cstack
    unless $I20, rx1225_jump3347
    elements $I18, rx1225_bstack
    le $I18, 0, rx1225_cut3348
    dec $I18
    set $I18, rx1225_bstack[$I18]
  rx1225_cut3348:
    assign rx1225_cstack, $I18
  rx1225_jump3347:
    jump $I19
  rx1225_done3344:
    rx1225_cur."!cursor_fail"()
    .return (rx1225_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<||>" :subid("cuid_209_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1352
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1229_tgt
    .local int rx1229_pos
    .local int rx1229_off
    .local int rx1229_eos
    .local int rx1229_rep
    .local pmc rx1229_cur
    .local pmc rx1229_curclass
    .local pmc rx1229_bstack
    .local pmc rx1229_cstack
    (rx1229_cur, rx1229_tgt, rx1229_pos, rx1229_curclass, rx1229_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1229_cur
    length rx1229_eos, rx1229_tgt
    eq $I19, 1, rx1229_restart3358
    gt rx1229_pos, rx1229_eos, rx1229_fail3359
    repr_get_attr_int $I11, self, rx1229_curclass, "$!from"
    ne $I11, -1, rxscan1230_done3365
    goto rxscan1230_scan3364
  rxscan1230_loop3363:
    inc rx1229_pos
    gt rx1229_pos, rx1229_eos, rx1229_fail3359
    repr_bind_attr_int rx1229_cur, rx1229_curclass, "$!from", rx1229_pos
  rxscan1230_scan3364:
    nqp_rxmark rx1229_bstack, rxscan1230_loop3363, rx1229_pos, 0
  rxscan1230_done3365:
    nqp_rxmark rx1229_bstack, rxcap1231_fail3367, rx1229_pos, 0
    add $I11, rx1229_pos, 2
    gt $I11, rx1229_eos, rx1229_fail3359
    substr $S10, rx1229_tgt, rx1229_pos, 2
    ne $S10, ucs4:"||", rx1229_fail3359
    add rx1229_pos, 2
    nqp_rxpeek $I19, rx1229_bstack, rxcap1231_fail3367
    inc $I19
    set $I11, rx1229_bstack[$I19]
    repr_bind_attr_int rx1229_cur, rx1229_curclass, "$!pos", rx1229_pos
    $P11 = rx1229_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1229_pos)
    rx1229_cstack = rx1229_cur."!cursor_capture"($P11, "sym")
    goto rxcap1231_done3366
  rxcap1231_fail3367:
    goto rx1229_fail3359
  rxcap1231_done3366:
    repr_bind_attr_int rx1229_cur, rx1229_curclass, "$!pos", rx1229_pos
    $P11 = rx1229_cur."O"("%tight_or, :op<unless>")
    repr_get_attr_int $I11, $P11, rx1229_curclass, "$!pos"
    lt $I11, 0, rx1229_fail3359
    nqp_rxmark rx1229_bstack, rxsubrule1232_pass3368, -1, 0
  rxsubrule1232_pass3368:
    rx1229_cstack = rx1229_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1229_pos, $P11, rx1229_curclass, "$!pos"
    rx1229_cur."!cursor_pass"(rx1229_pos, "infix:sym<||>", 'backtrack'=>1)
    .return (rx1229_cur)
  rx1229_restart3358:
    repr_get_attr_obj rx1229_cstack, rx1229_cur, rx1229_curclass, "$!cstack"
  rx1229_fail3359:
    unless rx1229_bstack, rx1229_done3357
    pop $I19, rx1229_bstack
    if_null rx1229_cstack, rx1229_cstack_done3362
    unless rx1229_cstack, rx1229_cstack_done3362
    dec $I19
    set $P11, rx1229_cstack[$I19]
  rx1229_cstack_done3362:
    pop rx1229_rep, rx1229_bstack
    pop rx1229_pos, rx1229_bstack
    pop $I19, rx1229_bstack
    lt rx1229_pos, -1, rx1229_done3357
    lt rx1229_pos, 0, rx1229_fail3359
    eq $I19, 0, rx1229_fail3359
    nqp_islist $I20, rx1229_cstack
    unless $I20, rx1229_jump3360
    elements $I18, rx1229_bstack
    le $I18, 0, rx1229_cut3361
    dec $I18
    set $I18, rx1229_bstack[$I18]
  rx1229_cut3361:
    assign rx1229_cstack, $I18
  rx1229_jump3360:
    jump $I19
  rx1229_done3357:
    rx1229_cur."!cursor_fail"()
    .return (rx1229_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<//>" :subid("cuid_210_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1353
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1233_tgt
    .local int rx1233_pos
    .local int rx1233_off
    .local int rx1233_eos
    .local int rx1233_rep
    .local pmc rx1233_cur
    .local pmc rx1233_curclass
    .local pmc rx1233_bstack
    .local pmc rx1233_cstack
    (rx1233_cur, rx1233_tgt, rx1233_pos, rx1233_curclass, rx1233_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1233_cur
    length rx1233_eos, rx1233_tgt
    eq $I19, 1, rx1233_restart3371
    gt rx1233_pos, rx1233_eos, rx1233_fail3372
    repr_get_attr_int $I11, self, rx1233_curclass, "$!from"
    ne $I11, -1, rxscan1234_done3378
    goto rxscan1234_scan3377
  rxscan1234_loop3376:
    inc rx1233_pos
    gt rx1233_pos, rx1233_eos, rx1233_fail3372
    repr_bind_attr_int rx1233_cur, rx1233_curclass, "$!from", rx1233_pos
  rxscan1234_scan3377:
    nqp_rxmark rx1233_bstack, rxscan1234_loop3376, rx1233_pos, 0
  rxscan1234_done3378:
    nqp_rxmark rx1233_bstack, rxcap1235_fail3380, rx1233_pos, 0
    add $I11, rx1233_pos, 2
    gt $I11, rx1233_eos, rx1233_fail3372
    substr $S10, rx1233_tgt, rx1233_pos, 2
    ne $S10, ucs4:"//", rx1233_fail3372
    add rx1233_pos, 2
    nqp_rxpeek $I19, rx1233_bstack, rxcap1235_fail3380
    inc $I19
    set $I11, rx1233_bstack[$I19]
    repr_bind_attr_int rx1233_cur, rx1233_curclass, "$!pos", rx1233_pos
    $P11 = rx1233_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1233_pos)
    rx1233_cstack = rx1233_cur."!cursor_capture"($P11, "sym")
    goto rxcap1235_done3379
  rxcap1235_fail3380:
    goto rx1233_fail3372
  rxcap1235_done3379:
    repr_bind_attr_int rx1233_cur, rx1233_curclass, "$!pos", rx1233_pos
    $P11 = rx1233_cur."O"("%tight_or, :op<defor>")
    repr_get_attr_int $I11, $P11, rx1233_curclass, "$!pos"
    lt $I11, 0, rx1233_fail3372
    nqp_rxmark rx1233_bstack, rxsubrule1236_pass3381, -1, 0
  rxsubrule1236_pass3381:
    rx1233_cstack = rx1233_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1233_pos, $P11, rx1233_curclass, "$!pos"
    rx1233_cur."!cursor_pass"(rx1233_pos, "infix:sym<//>", 'backtrack'=>1)
    .return (rx1233_cur)
  rx1233_restart3371:
    repr_get_attr_obj rx1233_cstack, rx1233_cur, rx1233_curclass, "$!cstack"
  rx1233_fail3372:
    unless rx1233_bstack, rx1233_done3370
    pop $I19, rx1233_bstack
    if_null rx1233_cstack, rx1233_cstack_done3375
    unless rx1233_cstack, rx1233_cstack_done3375
    dec $I19
    set $P11, rx1233_cstack[$I19]
  rx1233_cstack_done3375:
    pop rx1233_rep, rx1233_bstack
    pop rx1233_pos, rx1233_bstack
    pop $I19, rx1233_bstack
    lt rx1233_pos, -1, rx1233_done3370
    lt rx1233_pos, 0, rx1233_fail3372
    eq $I19, 0, rx1233_fail3372
    nqp_islist $I20, rx1233_cstack
    unless $I20, rx1233_jump3373
    elements $I18, rx1233_bstack
    le $I18, 0, rx1233_cut3374
    dec $I18
    set $I18, rx1233_bstack[$I18]
  rx1233_cut3374:
    assign rx1233_cstack, $I18
  rx1233_jump3373:
    jump $I19
  rx1233_done3370:
    rx1233_cur."!cursor_fail"()
    .return (rx1233_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<?? !!>" :subid("cuid_211_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1355
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1237_tgt
    .local int rx1237_pos
    .local int rx1237_off
    .local int rx1237_eos
    .local int rx1237_rep
    .local pmc rx1237_cur
    .local pmc rx1237_curclass
    .local pmc rx1237_bstack
    .local pmc rx1237_cstack
    (rx1237_cur, rx1237_tgt, rx1237_pos, rx1237_curclass, rx1237_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1237_cur
    length rx1237_eos, rx1237_tgt
    eq $I19, 1, rx1237_restart3384
    gt rx1237_pos, rx1237_eos, rx1237_fail3385
    repr_get_attr_int $I11, self, rx1237_curclass, "$!from"
    ne $I11, -1, rxscan1238_done3391
    goto rxscan1238_scan3390
  rxscan1238_loop3389:
    inc rx1237_pos
    gt rx1237_pos, rx1237_eos, rx1237_fail3385
    repr_bind_attr_int rx1237_cur, rx1237_curclass, "$!from", rx1237_pos
  rxscan1238_scan3390:
    nqp_rxmark rx1237_bstack, rxscan1238_loop3389, rx1237_pos, 0
  rxscan1238_done3391:
    add $I11, rx1237_pos, 2
    gt $I11, rx1237_eos, rx1237_fail3385
    substr $S10, rx1237_tgt, rx1237_pos, 2
    ne $S10, ucs4:"??", rx1237_fail3385
    add rx1237_pos, 2
    repr_bind_attr_int rx1237_cur, rx1237_curclass, "$!pos", rx1237_pos
    $P11 = rx1237_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1237_curclass, "$!pos"
    lt $I11, 0, rx1237_fail3385
    repr_get_attr_int rx1237_pos, $P11, rx1237_curclass, "$!pos"
    repr_bind_attr_int rx1237_cur, rx1237_curclass, "$!pos", rx1237_pos
    $P11 = rx1237_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx1237_curclass, "$!pos"
    lt $I11, 0, rx1237_fail3385
    nqp_rxmark rx1237_bstack, rxsubrule1240_pass3393, -1, 0
  rxsubrule1240_pass3393:
    rx1237_cstack = rx1237_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1237_pos, $P11, rx1237_curclass, "$!pos"
    add $I11, rx1237_pos, 2
    gt $I11, rx1237_eos, rx1237_fail3385
    substr $S10, rx1237_tgt, rx1237_pos, 2
    ne $S10, ucs4:"!!", rx1237_fail3385
    add rx1237_pos, 2
    repr_bind_attr_int rx1237_cur, rx1237_curclass, "$!pos", rx1237_pos
    $P11 = rx1237_cur."O"("%conditional, :reducecheck<ternary>, :op<if>")
    repr_get_attr_int $I11, $P11, rx1237_curclass, "$!pos"
    lt $I11, 0, rx1237_fail3385
    nqp_rxmark rx1237_bstack, rxsubrule1241_pass3394, -1, 0
  rxsubrule1241_pass3394:
    rx1237_cstack = rx1237_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1237_pos, $P11, rx1237_curclass, "$!pos"
    rx1237_cur."!cursor_pass"(rx1237_pos, "infix:sym<?? !!>", 'backtrack'=>1)
    .return (rx1237_cur)
  rx1237_restart3384:
    repr_get_attr_obj rx1237_cstack, rx1237_cur, rx1237_curclass, "$!cstack"
  rx1237_fail3385:
    unless rx1237_bstack, rx1237_done3383
    pop $I19, rx1237_bstack
    if_null rx1237_cstack, rx1237_cstack_done3388
    unless rx1237_cstack, rx1237_cstack_done3388
    dec $I19
    set $P11, rx1237_cstack[$I19]
  rx1237_cstack_done3388:
    pop rx1237_rep, rx1237_bstack
    pop rx1237_pos, rx1237_bstack
    pop $I19, rx1237_bstack
    lt rx1237_pos, -1, rx1237_done3383
    lt rx1237_pos, 0, rx1237_fail3385
    eq $I19, 0, rx1237_fail3385
    nqp_islist $I20, rx1237_cstack
    unless $I20, rx1237_jump3386
    elements $I18, rx1237_bstack
    le $I18, 0, rx1237_cut3387
    dec $I18
    set $I18, rx1237_bstack[$I18]
  rx1237_cut3387:
    assign rx1237_cstack, $I18
  rx1237_jump3386:
    jump $I19
  rx1237_done3383:
    rx1237_cur."!cursor_fail"()
    .return (rx1237_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=>" :subid("cuid_212_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1363
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1242_tgt
    .local int rx1242_pos
    .local int rx1242_off
    .local int rx1242_eos
    .local int rx1242_rep
    .local pmc rx1242_cur
    .local pmc rx1242_curclass
    .local pmc rx1242_bstack
    .local pmc rx1242_cstack
    (rx1242_cur, rx1242_tgt, rx1242_pos, rx1242_curclass, rx1242_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1242_cur
    length rx1242_eos, rx1242_tgt
    eq $I19, 1, rx1242_restart3397
    gt rx1242_pos, rx1242_eos, rx1242_fail3398
    repr_get_attr_int $I11, self, rx1242_curclass, "$!from"
    ne $I11, -1, rxscan1243_done3404
    goto rxscan1243_scan3403
  rxscan1243_loop3402:
    inc rx1242_pos
    gt rx1242_pos, rx1242_eos, rx1242_fail3398
    repr_bind_attr_int rx1242_cur, rx1242_curclass, "$!from", rx1242_pos
  rxscan1243_scan3403:
    nqp_rxmark rx1242_bstack, rxscan1243_loop3402, rx1242_pos, 0
  rxscan1243_done3404:
    nqp_rxmark rx1242_bstack, rxcap1244_fail3406, rx1242_pos, 0
    add $I11, rx1242_pos, 1
    gt $I11, rx1242_eos, rx1242_fail3398
    substr $S10, rx1242_tgt, rx1242_pos, 1
    ne $S10, ucs4:"=", rx1242_fail3398
    add rx1242_pos, 1
    nqp_rxpeek $I19, rx1242_bstack, rxcap1244_fail3406
    inc $I19
    set $I11, rx1242_bstack[$I19]
    repr_bind_attr_int rx1242_cur, rx1242_curclass, "$!pos", rx1242_pos
    $P11 = rx1242_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1242_pos)
    rx1242_cstack = rx1242_cur."!cursor_capture"($P11, "sym")
    goto rxcap1244_done3405
  rxcap1244_fail3406:
    goto rx1242_fail3398
  rxcap1244_done3405:
    repr_bind_attr_int rx1242_cur, rx1242_curclass, "$!pos", rx1242_pos
    $P11 = rx1242_cur."panic"("Assignment (\"=\") not supported in NQP, use \":=\" instead")
    repr_get_attr_int $I11, $P11, rx1242_curclass, "$!pos"
    lt $I11, 0, rx1242_fail3398
    repr_get_attr_int rx1242_pos, $P11, rx1242_curclass, "$!pos"
    rx1242_cur."!cursor_pass"(rx1242_pos, "infix:sym<=>", 'backtrack'=>1)
    .return (rx1242_cur)
  rx1242_restart3397:
    repr_get_attr_obj rx1242_cstack, rx1242_cur, rx1242_curclass, "$!cstack"
  rx1242_fail3398:
    unless rx1242_bstack, rx1242_done3396
    pop $I19, rx1242_bstack
    if_null rx1242_cstack, rx1242_cstack_done3401
    unless rx1242_cstack, rx1242_cstack_done3401
    dec $I19
    set $P11, rx1242_cstack[$I19]
  rx1242_cstack_done3401:
    pop rx1242_rep, rx1242_bstack
    pop rx1242_pos, rx1242_bstack
    pop $I19, rx1242_bstack
    lt rx1242_pos, -1, rx1242_done3396
    lt rx1242_pos, 0, rx1242_fail3398
    eq $I19, 0, rx1242_fail3398
    nqp_islist $I20, rx1242_cstack
    unless $I20, rx1242_jump3399
    elements $I18, rx1242_bstack
    le $I18, 0, rx1242_cut3400
    dec $I18
    set $I18, rx1242_bstack[$I18]
  rx1242_cut3400:
    assign rx1242_cstack, $I18
  rx1242_jump3399:
    jump $I19
  rx1242_done3396:
    rx1242_cur."!cursor_fail"()
    .return (rx1242_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<:=>" :subid("cuid_213_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1366
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1246_tgt
    .local int rx1246_pos
    .local int rx1246_off
    .local int rx1246_eos
    .local int rx1246_rep
    .local pmc rx1246_cur
    .local pmc rx1246_curclass
    .local pmc rx1246_bstack
    .local pmc rx1246_cstack
    (rx1246_cur, rx1246_tgt, rx1246_pos, rx1246_curclass, rx1246_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1246_cur
    length rx1246_eos, rx1246_tgt
    eq $I19, 1, rx1246_restart3410
    gt rx1246_pos, rx1246_eos, rx1246_fail3411
    repr_get_attr_int $I11, self, rx1246_curclass, "$!from"
    ne $I11, -1, rxscan1247_done3417
    goto rxscan1247_scan3416
  rxscan1247_loop3415:
    inc rx1246_pos
    gt rx1246_pos, rx1246_eos, rx1246_fail3411
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!from", rx1246_pos
  rxscan1247_scan3416:
    nqp_rxmark rx1246_bstack, rxscan1247_loop3415, rx1246_pos, 0
  rxscan1247_done3417:
    nqp_rxmark rx1246_bstack, rxcap1248_fail3419, rx1246_pos, 0
    add $I11, rx1246_pos, 2
    gt $I11, rx1246_eos, rx1246_fail3411
    substr $S10, rx1246_tgt, rx1246_pos, 2
    ne $S10, ucs4:":=", rx1246_fail3411
    add rx1246_pos, 2
    nqp_rxpeek $I19, rx1246_bstack, rxcap1248_fail3419
    inc $I19
    set $I11, rx1246_bstack[$I19]
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!pos", rx1246_pos
    $P11 = rx1246_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1246_pos)
    rx1246_cstack = rx1246_cur."!cursor_capture"($P11, "sym")
    goto rxcap1248_done3418
  rxcap1248_fail3419:
    goto rx1246_fail3411
  rxcap1248_done3418:
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!pos", rx1246_pos
    $P11 = rx1246_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1246_curclass, "$!pos"
    lt $I11, 0, rx1246_fail3411
    nqp_rxmark rx1246_bstack, rxsubrule1249_pass3420, -1, 0
  rxsubrule1249_pass3420:
    rx1246_cstack = rx1246_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1246_pos, $P11, rx1246_curclass, "$!pos"
    rx1246_cur."!cursor_pass"(rx1246_pos, "infix:sym<:=>", 'backtrack'=>1)
    .return (rx1246_cur)
  rx1246_restart3410:
    repr_get_attr_obj rx1246_cstack, rx1246_cur, rx1246_curclass, "$!cstack"
  rx1246_fail3411:
    unless rx1246_bstack, rx1246_done3409
    pop $I19, rx1246_bstack
    if_null rx1246_cstack, rx1246_cstack_done3414
    unless rx1246_cstack, rx1246_cstack_done3414
    dec $I19
    set $P11, rx1246_cstack[$I19]
  rx1246_cstack_done3414:
    pop rx1246_rep, rx1246_bstack
    pop rx1246_pos, rx1246_bstack
    pop $I19, rx1246_bstack
    lt rx1246_pos, -1, rx1246_done3409
    lt rx1246_pos, 0, rx1246_fail3411
    eq $I19, 0, rx1246_fail3411
    nqp_islist $I20, rx1246_cstack
    unless $I20, rx1246_jump3412
    elements $I18, rx1246_bstack
    le $I18, 0, rx1246_cut3413
    dec $I18
    set $I18, rx1246_bstack[$I18]
  rx1246_cut3413:
    assign rx1246_cstack, $I18
  rx1246_jump3412:
    jump $I19
  rx1246_done3409:
    rx1246_cur."!cursor_fail"()
    .return (rx1246_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<::=>" :subid("cuid_214_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1367
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1250_tgt
    .local int rx1250_pos
    .local int rx1250_off
    .local int rx1250_eos
    .local int rx1250_rep
    .local pmc rx1250_cur
    .local pmc rx1250_curclass
    .local pmc rx1250_bstack
    .local pmc rx1250_cstack
    (rx1250_cur, rx1250_tgt, rx1250_pos, rx1250_curclass, rx1250_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1250_cur
    length rx1250_eos, rx1250_tgt
    eq $I19, 1, rx1250_restart3423
    gt rx1250_pos, rx1250_eos, rx1250_fail3424
    repr_get_attr_int $I11, self, rx1250_curclass, "$!from"
    ne $I11, -1, rxscan1251_done3430
    goto rxscan1251_scan3429
  rxscan1251_loop3428:
    inc rx1250_pos
    gt rx1250_pos, rx1250_eos, rx1250_fail3424
    repr_bind_attr_int rx1250_cur, rx1250_curclass, "$!from", rx1250_pos
  rxscan1251_scan3429:
    nqp_rxmark rx1250_bstack, rxscan1251_loop3428, rx1250_pos, 0
  rxscan1251_done3430:
    nqp_rxmark rx1250_bstack, rxcap1252_fail3432, rx1250_pos, 0
    add $I11, rx1250_pos, 3
    gt $I11, rx1250_eos, rx1250_fail3424
    substr $S10, rx1250_tgt, rx1250_pos, 3
    ne $S10, ucs4:"::=", rx1250_fail3424
    add rx1250_pos, 3
    nqp_rxpeek $I19, rx1250_bstack, rxcap1252_fail3432
    inc $I19
    set $I11, rx1250_bstack[$I19]
    repr_bind_attr_int rx1250_cur, rx1250_curclass, "$!pos", rx1250_pos
    $P11 = rx1250_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1250_pos)
    rx1250_cstack = rx1250_cur."!cursor_capture"($P11, "sym")
    goto rxcap1252_done3431
  rxcap1252_fail3432:
    goto rx1250_fail3424
  rxcap1252_done3431:
    repr_bind_attr_int rx1250_cur, rx1250_curclass, "$!pos", rx1250_pos
    $P11 = rx1250_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1250_curclass, "$!pos"
    lt $I11, 0, rx1250_fail3424
    nqp_rxmark rx1250_bstack, rxsubrule1253_pass3433, -1, 0
  rxsubrule1253_pass3433:
    rx1250_cstack = rx1250_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1250_pos, $P11, rx1250_curclass, "$!pos"
    rx1250_cur."!cursor_pass"(rx1250_pos, "infix:sym<::=>", 'backtrack'=>1)
    .return (rx1250_cur)
  rx1250_restart3423:
    repr_get_attr_obj rx1250_cstack, rx1250_cur, rx1250_curclass, "$!cstack"
  rx1250_fail3424:
    unless rx1250_bstack, rx1250_done3422
    pop $I19, rx1250_bstack
    if_null rx1250_cstack, rx1250_cstack_done3427
    unless rx1250_cstack, rx1250_cstack_done3427
    dec $I19
    set $P11, rx1250_cstack[$I19]
  rx1250_cstack_done3427:
    pop rx1250_rep, rx1250_bstack
    pop rx1250_pos, rx1250_bstack
    pop $I19, rx1250_bstack
    lt rx1250_pos, -1, rx1250_done3422
    lt rx1250_pos, 0, rx1250_fail3424
    eq $I19, 0, rx1250_fail3424
    nqp_islist $I20, rx1250_cstack
    unless $I20, rx1250_jump3425
    elements $I18, rx1250_bstack
    le $I18, 0, rx1250_cut3426
    dec $I18
    set $I18, rx1250_bstack[$I18]
  rx1250_cut3426:
    assign rx1250_cstack, $I18
  rx1250_jump3425:
    jump $I19
  rx1250_done3422:
    rx1250_cur."!cursor_fail"()
    .return (rx1250_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<,>" :subid("cuid_215_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1369
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1254_tgt
    .local int rx1254_pos
    .local int rx1254_off
    .local int rx1254_eos
    .local int rx1254_rep
    .local pmc rx1254_cur
    .local pmc rx1254_curclass
    .local pmc rx1254_bstack
    .local pmc rx1254_cstack
    (rx1254_cur, rx1254_tgt, rx1254_pos, rx1254_curclass, rx1254_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1254_cur
    length rx1254_eos, rx1254_tgt
    eq $I19, 1, rx1254_restart3436
    gt rx1254_pos, rx1254_eos, rx1254_fail3437
    repr_get_attr_int $I11, self, rx1254_curclass, "$!from"
    ne $I11, -1, rxscan1255_done3443
    goto rxscan1255_scan3442
  rxscan1255_loop3441:
    inc rx1254_pos
    gt rx1254_pos, rx1254_eos, rx1254_fail3437
    repr_bind_attr_int rx1254_cur, rx1254_curclass, "$!from", rx1254_pos
  rxscan1255_scan3442:
    nqp_rxmark rx1254_bstack, rxscan1255_loop3441, rx1254_pos, 0
  rxscan1255_done3443:
    nqp_rxmark rx1254_bstack, rxcap1256_fail3445, rx1254_pos, 0
    add $I11, rx1254_pos, 1
    gt $I11, rx1254_eos, rx1254_fail3437
    substr $S10, rx1254_tgt, rx1254_pos, 1
    ne $S10, ucs4:",", rx1254_fail3437
    add rx1254_pos, 1
    nqp_rxpeek $I19, rx1254_bstack, rxcap1256_fail3445
    inc $I19
    set $I11, rx1254_bstack[$I19]
    repr_bind_attr_int rx1254_cur, rx1254_curclass, "$!pos", rx1254_pos
    $P11 = rx1254_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1254_pos)
    rx1254_cstack = rx1254_cur."!cursor_capture"($P11, "sym")
    goto rxcap1256_done3444
  rxcap1256_fail3445:
    goto rx1254_fail3437
  rxcap1256_done3444:
    repr_bind_attr_int rx1254_cur, rx1254_curclass, "$!pos", rx1254_pos
    $P11 = rx1254_cur."O"("%comma, :op<list>")
    repr_get_attr_int $I11, $P11, rx1254_curclass, "$!pos"
    lt $I11, 0, rx1254_fail3437
    nqp_rxmark rx1254_bstack, rxsubrule1257_pass3446, -1, 0
  rxsubrule1257_pass3446:
    rx1254_cstack = rx1254_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1254_pos, $P11, rx1254_curclass, "$!pos"
    rx1254_cur."!cursor_pass"(rx1254_pos, "infix:sym<,>", 'backtrack'=>1)
    .return (rx1254_cur)
  rx1254_restart3436:
    repr_get_attr_obj rx1254_cstack, rx1254_cur, rx1254_curclass, "$!cstack"
  rx1254_fail3437:
    unless rx1254_bstack, rx1254_done3435
    pop $I19, rx1254_bstack
    if_null rx1254_cstack, rx1254_cstack_done3440
    unless rx1254_cstack, rx1254_cstack_done3440
    dec $I19
    set $P11, rx1254_cstack[$I19]
  rx1254_cstack_done3440:
    pop rx1254_rep, rx1254_bstack
    pop rx1254_pos, rx1254_bstack
    pop $I19, rx1254_bstack
    lt rx1254_pos, -1, rx1254_done3435
    lt rx1254_pos, 0, rx1254_fail3437
    eq $I19, 0, rx1254_fail3437
    nqp_islist $I20, rx1254_cstack
    unless $I20, rx1254_jump3438
    elements $I18, rx1254_bstack
    le $I18, 0, rx1254_cut3439
    dec $I18
    set $I18, rx1254_bstack[$I18]
  rx1254_cut3439:
    assign rx1254_cstack, $I18
  rx1254_jump3438:
    jump $I19
  rx1254_done3435:
    rx1254_cur."!cursor_fail"()
    .return (rx1254_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_216_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1371
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_406_1359292300.247' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1258_tgt
    .local int rx1258_pos
    .local int rx1258_off
    .local int rx1258_eos
    .local int rx1258_rep
    .local pmc rx1258_cur
    .local pmc rx1258_curclass
    .local pmc rx1258_bstack
    .local pmc rx1258_cstack
    (rx1258_cur, rx1258_tgt, rx1258_pos, rx1258_curclass, rx1258_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1258_cur
    length rx1258_eos, rx1258_tgt
    eq $I19, 1, rx1258_restart3449
    gt rx1258_pos, rx1258_eos, rx1258_fail3450
    repr_get_attr_int $I11, self, rx1258_curclass, "$!from"
    ne $I11, -1, rxscan1259_done3456
    goto rxscan1259_scan3455
  rxscan1259_loop3454:
    inc rx1258_pos
    gt rx1258_pos, rx1258_eos, rx1258_fail3450
    repr_bind_attr_int rx1258_cur, rx1258_curclass, "$!from", rx1258_pos
  rxscan1259_scan3455:
    nqp_rxmark rx1258_bstack, rxscan1259_loop3454, rx1258_pos, 0
  rxscan1259_done3456:
    nqp_rxmark rx1258_bstack, rxcap1260_fail3458, rx1258_pos, 0
    add $I11, rx1258_pos, 6
    gt $I11, rx1258_eos, rx1258_fail3450
    substr $S10, rx1258_tgt, rx1258_pos, 6
    ne $S10, ucs4:"return", rx1258_fail3450
    add rx1258_pos, 6
    nqp_rxpeek $I19, rx1258_bstack, rxcap1260_fail3458
    inc $I19
    set $I11, rx1258_bstack[$I19]
    repr_bind_attr_int rx1258_cur, rx1258_curclass, "$!pos", rx1258_pos
    $P11 = rx1258_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1258_pos)
    rx1258_cstack = rx1258_cur."!cursor_capture"($P11, "sym")
    goto rxcap1260_done3457
  rxcap1260_fail3458:
    goto rx1258_fail3450
  rxcap1260_done3457:
    ge rx1258_pos, rx1258_eos, rx1258_fail3450
    is_cclass $I11, .CCLASS_WHITESPACE, rx1258_tgt, rx1258_pos
    unless $I11, rx1258_fail3450
    add rx1258_pos, 1
    repr_bind_attr_int rx1258_cur, rx1258_curclass, "$!pos", rx1258_pos
    $P11 = rx1258_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1258_curclass, "$!pos"
    lt $I11, 0, rx1258_fail3450
    nqp_rxmark rx1258_bstack, rxsubrule1261_pass3459, -1, 0
  rxsubrule1261_pass3459:
    rx1258_cstack = rx1258_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1258_pos, $P11, rx1258_curclass, "$!pos"
    repr_bind_attr_int rx1258_cur, rx1258_curclass, "$!pos", rx1258_pos
    store_lex unicode:"$\x{a2}", rx1258_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_406_1359292300.247' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1258_cur."!cursor_pass"(rx1258_pos, "prefix:sym<return>", 'backtrack'=>1)
    .return (rx1258_cur)
  rx1258_restart3449:
    repr_get_attr_obj rx1258_cstack, rx1258_cur, rx1258_curclass, "$!cstack"
  rx1258_fail3450:
    unless rx1258_bstack, rx1258_done3448
    pop $I19, rx1258_bstack
    if_null rx1258_cstack, rx1258_cstack_done3453
    unless rx1258_cstack, rx1258_cstack_done3453
    dec $I19
    set $P11, rx1258_cstack[$I19]
  rx1258_cstack_done3453:
    pop rx1258_rep, rx1258_bstack
    pop rx1258_pos, rx1258_bstack
    pop $I19, rx1258_bstack
    lt rx1258_pos, -1, rx1258_done3448
    lt rx1258_pos, 0, rx1258_fail3450
    eq $I19, 0, rx1258_fail3450
    nqp_islist $I20, rx1258_cstack
    unless $I20, rx1258_jump3451
    elements $I18, rx1258_bstack
    le $I18, 0, rx1258_cut3452
    dec $I18
    set $I18, rx1258_bstack[$I18]
  rx1258_cut3452:
    assign rx1258_cstack, $I18
  rx1258_jump3451:
    jump $I19
  rx1258_done3448:
    rx1258_cur."!cursor_fail"()
    .return (rx1258_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_406_1359292300.247") :anon :lex :outer("cuid_216_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1371

    box $P5001, 1
    store_dynamic_lex "$*RETURN_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_217_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1372
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1262_tgt
    .local int rx1262_pos
    .local int rx1262_off
    .local int rx1262_eos
    .local int rx1262_rep
    .local pmc rx1262_cur
    .local pmc rx1262_curclass
    .local pmc rx1262_bstack
    .local pmc rx1262_cstack
    (rx1262_cur, rx1262_tgt, rx1262_pos, rx1262_curclass, rx1262_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1262_cur
    length rx1262_eos, rx1262_tgt
    eq $I19, 1, rx1262_restart3462
    gt rx1262_pos, rx1262_eos, rx1262_fail3463
    repr_get_attr_int $I11, self, rx1262_curclass, "$!from"
    ne $I11, -1, rxscan1263_done3469
    goto rxscan1263_scan3468
  rxscan1263_loop3467:
    inc rx1262_pos
    gt rx1262_pos, rx1262_eos, rx1262_fail3463
    repr_bind_attr_int rx1262_cur, rx1262_curclass, "$!from", rx1262_pos
  rxscan1263_scan3468:
    nqp_rxmark rx1262_bstack, rxscan1263_loop3467, rx1262_pos, 0
  rxscan1263_done3469:
    nqp_rxmark rx1262_bstack, rxcap1264_fail3471, rx1262_pos, 0
    add $I11, rx1262_pos, 4
    gt $I11, rx1262_eos, rx1262_fail3463
    substr $S10, rx1262_tgt, rx1262_pos, 4
    ne $S10, ucs4:"make", rx1262_fail3463
    add rx1262_pos, 4
    nqp_rxpeek $I19, rx1262_bstack, rxcap1264_fail3471
    inc $I19
    set $I11, rx1262_bstack[$I19]
    repr_bind_attr_int rx1262_cur, rx1262_curclass, "$!pos", rx1262_pos
    $P11 = rx1262_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1262_pos)
    rx1262_cstack = rx1262_cur."!cursor_capture"($P11, "sym")
    goto rxcap1264_done3470
  rxcap1264_fail3471:
    goto rx1262_fail3463
  rxcap1264_done3470:
    ge rx1262_pos, rx1262_eos, rx1262_fail3463
    is_cclass $I11, .CCLASS_WHITESPACE, rx1262_tgt, rx1262_pos
    unless $I11, rx1262_fail3463
    add rx1262_pos, 1
    repr_bind_attr_int rx1262_cur, rx1262_curclass, "$!pos", rx1262_pos
    $P11 = rx1262_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1262_curclass, "$!pos"
    lt $I11, 0, rx1262_fail3463
    nqp_rxmark rx1262_bstack, rxsubrule1265_pass3472, -1, 0
  rxsubrule1265_pass3472:
    rx1262_cstack = rx1262_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1262_pos, $P11, rx1262_curclass, "$!pos"
    rx1262_cur."!cursor_pass"(rx1262_pos, "prefix:sym<make>", 'backtrack'=>1)
    .return (rx1262_cur)
  rx1262_restart3462:
    repr_get_attr_obj rx1262_cstack, rx1262_cur, rx1262_curclass, "$!cstack"
  rx1262_fail3463:
    unless rx1262_bstack, rx1262_done3461
    pop $I19, rx1262_bstack
    if_null rx1262_cstack, rx1262_cstack_done3466
    unless rx1262_cstack, rx1262_cstack_done3466
    dec $I19
    set $P11, rx1262_cstack[$I19]
  rx1262_cstack_done3466:
    pop rx1262_rep, rx1262_bstack
    pop rx1262_pos, rx1262_bstack
    pop $I19, rx1262_bstack
    lt rx1262_pos, -1, rx1262_done3461
    lt rx1262_pos, 0, rx1262_fail3463
    eq $I19, 0, rx1262_fail3463
    nqp_islist $I20, rx1262_cstack
    unless $I20, rx1262_jump3464
    elements $I18, rx1262_bstack
    le $I18, 0, rx1262_cut3465
    dec $I18
    set $I18, rx1262_bstack[$I18]
  rx1262_cut3465:
    assign rx1262_cstack, $I18
  rx1262_jump3464:
    jump $I19
  rx1262_done3461:
    rx1262_cur."!cursor_fail"()
    .return (rx1262_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_218_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1373
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_219_1359292300.247' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_407_1359292300.247' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1266_tgt
    .local int rx1266_pos
    .local int rx1266_off
    .local int rx1266_eos
    .local int rx1266_rep
    .local pmc rx1266_cur
    .local pmc rx1266_curclass
    .local pmc rx1266_bstack
    .local pmc rx1266_cstack
    (rx1266_cur, rx1266_tgt, rx1266_pos, rx1266_curclass, rx1266_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1266_cur
    length rx1266_eos, rx1266_tgt
    eq $I19, 1, rx1266_restart3475
    gt rx1266_pos, rx1266_eos, rx1266_fail3476
    repr_get_attr_int $I11, self, rx1266_curclass, "$!from"
    ne $I11, -1, rxscan1267_done3482
    goto rxscan1267_scan3481
  rxscan1267_loop3480:
    inc rx1266_pos
    gt rx1266_pos, rx1266_eos, rx1266_fail3476
    repr_bind_attr_int rx1266_cur, rx1266_curclass, "$!from", rx1266_pos
  rxscan1267_scan3481:
    nqp_rxmark rx1266_bstack, rxscan1267_loop3480, rx1266_pos, 0
  rxscan1267_done3482:
    nqp_rxmark rx1266_bstack, rxcap1268_fail3484, rx1266_pos, 0
    add $I11, rx1266_pos, 4
    gt $I11, rx1266_eos, rx1266_fail3476
    substr $S10, rx1266_tgt, rx1266_pos, 4
    ne $S10, ucs4:"last", rx1266_fail3476
    add rx1266_pos, 4
    nqp_rxpeek $I19, rx1266_bstack, rxcap1268_fail3484
    inc $I19
    set $I11, rx1266_bstack[$I19]
    repr_bind_attr_int rx1266_cur, rx1266_curclass, "$!pos", rx1266_pos
    $P11 = rx1266_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1266_pos)
    rx1266_cstack = rx1266_cur."!cursor_capture"($P11, "sym")
    goto rxcap1268_done3483
  rxcap1268_fail3484:
    goto rx1266_fail3476
  rxcap1268_done3483:
    .const 'Sub' $P5001 = 'cuid_219_1359292300.247' 
    capture_lex $P5001
    repr_bind_attr_int rx1266_cur, rx1266_curclass, "$!pos", rx1266_pos
    $P11 = rx1266_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1266_curclass, "$!pos"
    ge $I11, 0, rx1266_fail3476
    repr_bind_attr_int rx1266_cur, rx1266_curclass, "$!pos", rx1266_pos
    store_lex unicode:"$\x{a2}", rx1266_cur
    $P5002 = $P101."MATCH"()
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_407_1359292300.247' 
    capture_lex $P5003
    $P5004 = $P5003()
    rx1266_cur."!cursor_pass"(rx1266_pos, "term:sym<last>", 'backtrack'=>1)
    .return (rx1266_cur)
  rx1266_restart3475:
    repr_get_attr_obj rx1266_cstack, rx1266_cur, rx1266_curclass, "$!cstack"
  rx1266_fail3476:
    unless rx1266_bstack, rx1266_done3474
    pop $I19, rx1266_bstack
    if_null rx1266_cstack, rx1266_cstack_done3479
    unless rx1266_cstack, rx1266_cstack_done3479
    dec $I19
    set $P11, rx1266_cstack[$I19]
  rx1266_cstack_done3479:
    pop rx1266_rep, rx1266_bstack
    pop rx1266_pos, rx1266_bstack
    pop $I19, rx1266_bstack
    lt rx1266_pos, -1, rx1266_done3474
    lt rx1266_pos, 0, rx1266_fail3476
    eq $I19, 0, rx1266_fail3476
    nqp_islist $I20, rx1266_cstack
    unless $I20, rx1266_jump3477
    elements $I18, rx1266_bstack
    le $I18, 0, rx1266_cut3478
    dec $I18
    set $I18, rx1266_bstack[$I18]
  rx1266_cut3478:
    assign rx1266_cstack, $I18
  rx1266_jump3477:
    jump $I19
  rx1266_done3474:
    rx1266_cur."!cursor_fail"()
    .return (rx1266_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_219_1359292300.247") :anon :lex :outer("cuid_218_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1269_tgt
    .local int rx1269_pos
    .local int rx1269_off
    .local int rx1269_eos
    .local int rx1269_rep
    .local pmc rx1269_cur
    .local pmc rx1269_curclass
    .local pmc rx1269_bstack
    .local pmc rx1269_cstack
    (rx1269_cur, rx1269_tgt, rx1269_pos, rx1269_curclass, rx1269_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1269_cur
    length rx1269_eos, rx1269_tgt
    eq $I19, 1, rx1269_restart3487
    gt rx1269_pos, rx1269_eos, rx1269_fail3488
    repr_get_attr_int $I11, self, rx1269_curclass, "$!from"
    ne $I11, -1, rxscan1270_done3494
    goto rxscan1270_scan3493
  rxscan1270_loop3492:
    inc rx1269_pos
    gt rx1269_pos, rx1269_eos, rx1269_fail3488
    repr_bind_attr_int rx1269_cur, rx1269_curclass, "$!from", rx1269_pos
  rxscan1270_scan3493:
    nqp_rxmark rx1269_bstack, rxscan1270_loop3492, rx1269_pos, 0
  rxscan1270_done3494:
    repr_bind_attr_int rx1269_cur, rx1269_curclass, "$!pos", rx1269_pos
    $P11 = rx1269_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1269_curclass, "$!pos"
    lt $I11, 0, rx1269_fail3488
    nqp_rxmark rx1269_bstack, rxsubrule1271_pass3495, -1, 0
  rxsubrule1271_pass3495:
    rx1269_cstack = rx1269_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx1269_pos, $P11, rx1269_curclass, "$!pos"
    rx1269_cur."!cursor_pass"(rx1269_pos, 'backtrack'=>1)
    .return (rx1269_cur)
  rx1269_restart3487:
    repr_get_attr_obj rx1269_cstack, rx1269_cur, rx1269_curclass, "$!cstack"
  rx1269_fail3488:
    unless rx1269_bstack, rx1269_done3486
    pop $I19, rx1269_bstack
    if_null rx1269_cstack, rx1269_cstack_done3491
    unless rx1269_cstack, rx1269_cstack_done3491
    dec $I19
    set $P11, rx1269_cstack[$I19]
  rx1269_cstack_done3491:
    pop rx1269_rep, rx1269_bstack
    pop rx1269_pos, rx1269_bstack
    pop $I19, rx1269_bstack
    lt rx1269_pos, -1, rx1269_done3486
    lt rx1269_pos, 0, rx1269_fail3488
    eq $I19, 0, rx1269_fail3488
    nqp_islist $I20, rx1269_cstack
    unless $I20, rx1269_jump3489
    elements $I18, rx1269_bstack
    le $I18, 0, rx1269_cut3490
    dec $I18
    set $I18, rx1269_bstack[$I18]
  rx1269_cut3490:
    assign rx1269_cstack, $I18
  rx1269_jump3489:
    jump $I19
  rx1269_done3486:
    rx1269_cur."!cursor_fail"()
    .return (rx1269_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_407_1359292300.247") :anon :lex :outer("cuid_218_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1373

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_220_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1374
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_221_1359292300.247' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_408_1359292300.247' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1272_tgt
    .local int rx1272_pos
    .local int rx1272_off
    .local int rx1272_eos
    .local int rx1272_rep
    .local pmc rx1272_cur
    .local pmc rx1272_curclass
    .local pmc rx1272_bstack
    .local pmc rx1272_cstack
    (rx1272_cur, rx1272_tgt, rx1272_pos, rx1272_curclass, rx1272_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1272_cur
    length rx1272_eos, rx1272_tgt
    eq $I19, 1, rx1272_restart3498
    gt rx1272_pos, rx1272_eos, rx1272_fail3499
    repr_get_attr_int $I11, self, rx1272_curclass, "$!from"
    ne $I11, -1, rxscan1273_done3505
    goto rxscan1273_scan3504
  rxscan1273_loop3503:
    inc rx1272_pos
    gt rx1272_pos, rx1272_eos, rx1272_fail3499
    repr_bind_attr_int rx1272_cur, rx1272_curclass, "$!from", rx1272_pos
  rxscan1273_scan3504:
    nqp_rxmark rx1272_bstack, rxscan1273_loop3503, rx1272_pos, 0
  rxscan1273_done3505:
    nqp_rxmark rx1272_bstack, rxcap1274_fail3507, rx1272_pos, 0
    add $I11, rx1272_pos, 4
    gt $I11, rx1272_eos, rx1272_fail3499
    substr $S10, rx1272_tgt, rx1272_pos, 4
    ne $S10, ucs4:"next", rx1272_fail3499
    add rx1272_pos, 4
    nqp_rxpeek $I19, rx1272_bstack, rxcap1274_fail3507
    inc $I19
    set $I11, rx1272_bstack[$I19]
    repr_bind_attr_int rx1272_cur, rx1272_curclass, "$!pos", rx1272_pos
    $P11 = rx1272_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1272_pos)
    rx1272_cstack = rx1272_cur."!cursor_capture"($P11, "sym")
    goto rxcap1274_done3506
  rxcap1274_fail3507:
    goto rx1272_fail3499
  rxcap1274_done3506:
    .const 'Sub' $P5001 = 'cuid_221_1359292300.247' 
    capture_lex $P5001
    repr_bind_attr_int rx1272_cur, rx1272_curclass, "$!pos", rx1272_pos
    $P11 = rx1272_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1272_curclass, "$!pos"
    ge $I11, 0, rx1272_fail3499
    repr_bind_attr_int rx1272_cur, rx1272_curclass, "$!pos", rx1272_pos
    store_lex unicode:"$\x{a2}", rx1272_cur
    $P5002 = $P101."MATCH"()
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_408_1359292300.247' 
    capture_lex $P5003
    $P5004 = $P5003()
    rx1272_cur."!cursor_pass"(rx1272_pos, "term:sym<next>", 'backtrack'=>1)
    .return (rx1272_cur)
  rx1272_restart3498:
    repr_get_attr_obj rx1272_cstack, rx1272_cur, rx1272_curclass, "$!cstack"
  rx1272_fail3499:
    unless rx1272_bstack, rx1272_done3497
    pop $I19, rx1272_bstack
    if_null rx1272_cstack, rx1272_cstack_done3502
    unless rx1272_cstack, rx1272_cstack_done3502
    dec $I19
    set $P11, rx1272_cstack[$I19]
  rx1272_cstack_done3502:
    pop rx1272_rep, rx1272_bstack
    pop rx1272_pos, rx1272_bstack
    pop $I19, rx1272_bstack
    lt rx1272_pos, -1, rx1272_done3497
    lt rx1272_pos, 0, rx1272_fail3499
    eq $I19, 0, rx1272_fail3499
    nqp_islist $I20, rx1272_cstack
    unless $I20, rx1272_jump3500
    elements $I18, rx1272_bstack
    le $I18, 0, rx1272_cut3501
    dec $I18
    set $I18, rx1272_bstack[$I18]
  rx1272_cut3501:
    assign rx1272_cstack, $I18
  rx1272_jump3500:
    jump $I19
  rx1272_done3497:
    rx1272_cur."!cursor_fail"()
    .return (rx1272_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_221_1359292300.247") :anon :lex :outer("cuid_220_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1275_tgt
    .local int rx1275_pos
    .local int rx1275_off
    .local int rx1275_eos
    .local int rx1275_rep
    .local pmc rx1275_cur
    .local pmc rx1275_curclass
    .local pmc rx1275_bstack
    .local pmc rx1275_cstack
    (rx1275_cur, rx1275_tgt, rx1275_pos, rx1275_curclass, rx1275_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1275_cur
    length rx1275_eos, rx1275_tgt
    eq $I19, 1, rx1275_restart3510
    gt rx1275_pos, rx1275_eos, rx1275_fail3511
    repr_get_attr_int $I11, self, rx1275_curclass, "$!from"
    ne $I11, -1, rxscan1276_done3517
    goto rxscan1276_scan3516
  rxscan1276_loop3515:
    inc rx1275_pos
    gt rx1275_pos, rx1275_eos, rx1275_fail3511
    repr_bind_attr_int rx1275_cur, rx1275_curclass, "$!from", rx1275_pos
  rxscan1276_scan3516:
    nqp_rxmark rx1275_bstack, rxscan1276_loop3515, rx1275_pos, 0
  rxscan1276_done3517:
    repr_bind_attr_int rx1275_cur, rx1275_curclass, "$!pos", rx1275_pos
    $P11 = rx1275_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1275_curclass, "$!pos"
    lt $I11, 0, rx1275_fail3511
    nqp_rxmark rx1275_bstack, rxsubrule1277_pass3518, -1, 0
  rxsubrule1277_pass3518:
    rx1275_cstack = rx1275_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx1275_pos, $P11, rx1275_curclass, "$!pos"
    rx1275_cur."!cursor_pass"(rx1275_pos, 'backtrack'=>1)
    .return (rx1275_cur)
  rx1275_restart3510:
    repr_get_attr_obj rx1275_cstack, rx1275_cur, rx1275_curclass, "$!cstack"
  rx1275_fail3511:
    unless rx1275_bstack, rx1275_done3509
    pop $I19, rx1275_bstack
    if_null rx1275_cstack, rx1275_cstack_done3514
    unless rx1275_cstack, rx1275_cstack_done3514
    dec $I19
    set $P11, rx1275_cstack[$I19]
  rx1275_cstack_done3514:
    pop rx1275_rep, rx1275_bstack
    pop rx1275_pos, rx1275_bstack
    pop $I19, rx1275_bstack
    lt rx1275_pos, -1, rx1275_done3509
    lt rx1275_pos, 0, rx1275_fail3511
    eq $I19, 0, rx1275_fail3511
    nqp_islist $I20, rx1275_cstack
    unless $I20, rx1275_jump3512
    elements $I18, rx1275_bstack
    le $I18, 0, rx1275_cut3513
    dec $I18
    set $I18, rx1275_bstack[$I18]
  rx1275_cut3513:
    assign rx1275_cstack, $I18
  rx1275_jump3512:
    jump $I19
  rx1275_done3509:
    rx1275_cur."!cursor_fail"()
    .return (rx1275_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_408_1359292300.247") :anon :lex :outer("cuid_220_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1374

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_222_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1375
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_223_1359292300.247' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_409_1359292300.247' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1278_tgt
    .local int rx1278_pos
    .local int rx1278_off
    .local int rx1278_eos
    .local int rx1278_rep
    .local pmc rx1278_cur
    .local pmc rx1278_curclass
    .local pmc rx1278_bstack
    .local pmc rx1278_cstack
    (rx1278_cur, rx1278_tgt, rx1278_pos, rx1278_curclass, rx1278_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1278_cur
    length rx1278_eos, rx1278_tgt
    eq $I19, 1, rx1278_restart3521
    gt rx1278_pos, rx1278_eos, rx1278_fail3522
    repr_get_attr_int $I11, self, rx1278_curclass, "$!from"
    ne $I11, -1, rxscan1279_done3528
    goto rxscan1279_scan3527
  rxscan1279_loop3526:
    inc rx1278_pos
    gt rx1278_pos, rx1278_eos, rx1278_fail3522
    repr_bind_attr_int rx1278_cur, rx1278_curclass, "$!from", rx1278_pos
  rxscan1279_scan3527:
    nqp_rxmark rx1278_bstack, rxscan1279_loop3526, rx1278_pos, 0
  rxscan1279_done3528:
    nqp_rxmark rx1278_bstack, rxcap1280_fail3530, rx1278_pos, 0
    add $I11, rx1278_pos, 4
    gt $I11, rx1278_eos, rx1278_fail3522
    substr $S10, rx1278_tgt, rx1278_pos, 4
    ne $S10, ucs4:"redo", rx1278_fail3522
    add rx1278_pos, 4
    nqp_rxpeek $I19, rx1278_bstack, rxcap1280_fail3530
    inc $I19
    set $I11, rx1278_bstack[$I19]
    repr_bind_attr_int rx1278_cur, rx1278_curclass, "$!pos", rx1278_pos
    $P11 = rx1278_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1278_pos)
    rx1278_cstack = rx1278_cur."!cursor_capture"($P11, "sym")
    goto rxcap1280_done3529
  rxcap1280_fail3530:
    goto rx1278_fail3522
  rxcap1280_done3529:
    .const 'Sub' $P5001 = 'cuid_223_1359292300.247' 
    capture_lex $P5001
    repr_bind_attr_int rx1278_cur, rx1278_curclass, "$!pos", rx1278_pos
    $P11 = rx1278_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1278_curclass, "$!pos"
    ge $I11, 0, rx1278_fail3522
    repr_bind_attr_int rx1278_cur, rx1278_curclass, "$!pos", rx1278_pos
    store_lex unicode:"$\x{a2}", rx1278_cur
    $P5002 = $P101."MATCH"()
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_409_1359292300.247' 
    capture_lex $P5003
    $P5004 = $P5003()
    rx1278_cur."!cursor_pass"(rx1278_pos, "term:sym<redo>", 'backtrack'=>1)
    .return (rx1278_cur)
  rx1278_restart3521:
    repr_get_attr_obj rx1278_cstack, rx1278_cur, rx1278_curclass, "$!cstack"
  rx1278_fail3522:
    unless rx1278_bstack, rx1278_done3520
    pop $I19, rx1278_bstack
    if_null rx1278_cstack, rx1278_cstack_done3525
    unless rx1278_cstack, rx1278_cstack_done3525
    dec $I19
    set $P11, rx1278_cstack[$I19]
  rx1278_cstack_done3525:
    pop rx1278_rep, rx1278_bstack
    pop rx1278_pos, rx1278_bstack
    pop $I19, rx1278_bstack
    lt rx1278_pos, -1, rx1278_done3520
    lt rx1278_pos, 0, rx1278_fail3522
    eq $I19, 0, rx1278_fail3522
    nqp_islist $I20, rx1278_cstack
    unless $I20, rx1278_jump3523
    elements $I18, rx1278_bstack
    le $I18, 0, rx1278_cut3524
    dec $I18
    set $I18, rx1278_bstack[$I18]
  rx1278_cut3524:
    assign rx1278_cstack, $I18
  rx1278_jump3523:
    jump $I19
  rx1278_done3520:
    rx1278_cur."!cursor_fail"()
    .return (rx1278_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_223_1359292300.247") :anon :lex :outer("cuid_222_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1281_tgt
    .local int rx1281_pos
    .local int rx1281_off
    .local int rx1281_eos
    .local int rx1281_rep
    .local pmc rx1281_cur
    .local pmc rx1281_curclass
    .local pmc rx1281_bstack
    .local pmc rx1281_cstack
    (rx1281_cur, rx1281_tgt, rx1281_pos, rx1281_curclass, rx1281_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1281_cur
    length rx1281_eos, rx1281_tgt
    eq $I19, 1, rx1281_restart3533
    gt rx1281_pos, rx1281_eos, rx1281_fail3534
    repr_get_attr_int $I11, self, rx1281_curclass, "$!from"
    ne $I11, -1, rxscan1282_done3540
    goto rxscan1282_scan3539
  rxscan1282_loop3538:
    inc rx1281_pos
    gt rx1281_pos, rx1281_eos, rx1281_fail3534
    repr_bind_attr_int rx1281_cur, rx1281_curclass, "$!from", rx1281_pos
  rxscan1282_scan3539:
    nqp_rxmark rx1281_bstack, rxscan1282_loop3538, rx1281_pos, 0
  rxscan1282_done3540:
    repr_bind_attr_int rx1281_cur, rx1281_curclass, "$!pos", rx1281_pos
    $P11 = rx1281_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1281_curclass, "$!pos"
    lt $I11, 0, rx1281_fail3534
    nqp_rxmark rx1281_bstack, rxsubrule1283_pass3541, -1, 0
  rxsubrule1283_pass3541:
    rx1281_cstack = rx1281_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx1281_pos, $P11, rx1281_curclass, "$!pos"
    rx1281_cur."!cursor_pass"(rx1281_pos, 'backtrack'=>1)
    .return (rx1281_cur)
  rx1281_restart3533:
    repr_get_attr_obj rx1281_cstack, rx1281_cur, rx1281_curclass, "$!cstack"
  rx1281_fail3534:
    unless rx1281_bstack, rx1281_done3532
    pop $I19, rx1281_bstack
    if_null rx1281_cstack, rx1281_cstack_done3537
    unless rx1281_cstack, rx1281_cstack_done3537
    dec $I19
    set $P11, rx1281_cstack[$I19]
  rx1281_cstack_done3537:
    pop rx1281_rep, rx1281_bstack
    pop rx1281_pos, rx1281_bstack
    pop $I19, rx1281_bstack
    lt rx1281_pos, -1, rx1281_done3532
    lt rx1281_pos, 0, rx1281_fail3534
    eq $I19, 0, rx1281_fail3534
    nqp_islist $I20, rx1281_cstack
    unless $I20, rx1281_jump3535
    elements $I18, rx1281_bstack
    le $I18, 0, rx1281_cut3536
    dec $I18
    set $I18, rx1281_bstack[$I18]
  rx1281_cut3536:
    assign rx1281_cstack, $I18
  rx1281_jump3535:
    jump $I19
  rx1281_done3532:
    rx1281_cur."!cursor_fail"()
    .return (rx1281_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_409_1359292300.247") :anon :lex :outer("cuid_222_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1375

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "smartmatch" :subid("cuid_224_1359292300.247") :anon :lex :outer("cuid_391_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1377
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$t", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3542
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5003
  fallback3542:
    set $P101, $P5002
    set $P5004, _lex_param_1[1]
    unless_null $P5004, fallback3543
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5005
  fallback3543:
    set _lex_param_1[0], $P5004
    set _lex_param_1[1], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_410_1359292300.247") :anon :lex :outer("cuid_371_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1383
    .const 'Sub' $P5013 = 'cuid_225_1359292300.247' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_226_1359292300.247' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_228_1359292300.247' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_229_1359292300.247' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_231_1359292300.247' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_232_1359292300.247' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_235_1359292300.247' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_238_1359292300.247' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_240_1359292300.247' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_242_1359292300.247' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_243_1359292300.247' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_244_1359292300.247' 
    capture_lex $P5013 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_225_1359292300.247' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_226_1359292300.247' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_228_1359292300.247' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_229_1359292300.247' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_231_1359292300.247' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_232_1359292300.247' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_235_1359292300.247' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_238_1359292300.247' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_240_1359292300.247' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_242_1359292300.247' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_243_1359292300.247' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_244_1359292300.247' 
    capture_lex $P5012
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "rxstopper" :subid("cuid_225_1359292300.247") :anon :lex :outer("cuid_410_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1384
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1284_tgt
    .local int rx1284_pos
    .local int rx1284_off
    .local int rx1284_eos
    .local int rx1284_rep
    .local pmc rx1284_cur
    .local pmc rx1284_curclass
    .local pmc rx1284_bstack
    .local pmc rx1284_cstack
    (rx1284_cur, rx1284_tgt, rx1284_pos, rx1284_curclass, rx1284_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1284_cur
    length rx1284_eos, rx1284_tgt
    eq $I19, 1, rx1284_restart3546
    gt rx1284_pos, rx1284_eos, rx1284_fail3547
    repr_get_attr_int $I11, self, rx1284_curclass, "$!from"
    ne $I11, -1, rxscan1285_done3553
    goto rxscan1285_scan3552
  rxscan1285_loop3551:
    inc rx1284_pos
    gt rx1284_pos, rx1284_eos, rx1284_fail3547
    repr_bind_attr_int rx1284_cur, rx1284_curclass, "$!from", rx1284_pos
  rxscan1285_scan3552:
    nqp_rxmark rx1284_bstack, rxscan1285_loop3551, rx1284_pos, 0
  rxscan1285_done3553:
    ge rx1284_pos, rx1284_eos, rx1284_fail3547
    substr $S11, rx1284_tgt, rx1284_pos, 1
    index $I11, ucs4:"}/", $S11
    lt $I11, 0, rx1284_fail3547
    inc rx1284_pos
    rx1284_cur."!cursor_pass"(rx1284_pos, "rxstopper", 'backtrack'=>1)
    .return (rx1284_cur)
  rx1284_restart3546:
    repr_get_attr_obj rx1284_cstack, rx1284_cur, rx1284_curclass, "$!cstack"
  rx1284_fail3547:
    unless rx1284_bstack, rx1284_done3545
    pop $I19, rx1284_bstack
    if_null rx1284_cstack, rx1284_cstack_done3550
    unless rx1284_cstack, rx1284_cstack_done3550
    dec $I19
    set $P11, rx1284_cstack[$I19]
  rx1284_cstack_done3550:
    pop rx1284_rep, rx1284_bstack
    pop rx1284_pos, rx1284_bstack
    pop $I19, rx1284_bstack
    lt rx1284_pos, -1, rx1284_done3545
    lt rx1284_pos, 0, rx1284_fail3547
    eq $I19, 0, rx1284_fail3547
    nqp_islist $I20, rx1284_cstack
    unless $I20, rx1284_jump3548
    elements $I18, rx1284_bstack
    le $I18, 0, rx1284_cut3549
    dec $I18
    set $I18, rx1284_bstack[$I18]
  rx1284_cut3549:
    assign rx1284_cstack, $I18
  rx1284_jump3548:
    jump $I19
  rx1284_done3545:
    rx1284_cur."!cursor_fail"()
    .return (rx1284_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_226_1359292300.247") :anon :lex :outer("cuid_410_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1388
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_227_1359292300.247' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1286_tgt
    .local int rx1286_pos
    .local int rx1286_off
    .local int rx1286_eos
    .local int rx1286_rep
    .local pmc rx1286_cur
    .local pmc rx1286_curclass
    .local pmc rx1286_bstack
    .local pmc rx1286_cstack
    (rx1286_cur, rx1286_tgt, rx1286_pos, rx1286_curclass, rx1286_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1286_cur
    length rx1286_eos, rx1286_tgt
    eq $I19, 1, rx1286_restart3556
    gt rx1286_pos, rx1286_eos, rx1286_fail3557
    repr_get_attr_int $I11, self, rx1286_curclass, "$!from"
    ne $I11, -1, rxscan1287_done3563
    goto rxscan1287_scan3562
  rxscan1287_loop3561:
    inc rx1286_pos
    gt rx1286_pos, rx1286_eos, rx1286_fail3557
    repr_bind_attr_int rx1286_cur, rx1286_curclass, "$!from", rx1286_pos
  rxscan1287_scan3562:
    nqp_rxmark rx1286_bstack, rxscan1287_loop3561, rx1286_pos, 0
  rxscan1287_done3563:
    add $I11, rx1286_pos, 1
    gt $I11, rx1286_eos, rx1286_fail3557
    substr $S10, rx1286_tgt, rx1286_pos, 1
    ne $S10, ucs4:":", rx1286_fail3557
    add rx1286_pos, 1
    .const 'Sub' $P5001 = 'cuid_227_1359292300.247' 
    capture_lex $P5001
    repr_bind_attr_int rx1286_cur, rx1286_curclass, "$!pos", rx1286_pos
    $P11 = rx1286_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1286_curclass, "$!pos"
    lt $I11, 0, rx1286_fail3557
    repr_bind_attr_int rx1286_cur, rx1286_curclass, "$!pos", rx1286_pos
    $P11 = rx1286_cur."LANG"("MAIN", "statement")
    repr_get_attr_int $I11, $P11, rx1286_curclass, "$!pos"
    lt $I11, 0, rx1286_fail3557
    nqp_rxmark rx1286_bstack, rxsubrule1290_pass3574, -1, 0
  rxsubrule1290_pass3574:
    rx1286_cstack = rx1286_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1286_pos, $P11, rx1286_curclass, "$!pos"
    repr_bind_attr_int rx1286_cur, rx1286_curclass, "$!pos", rx1286_pos
    $P11 = rx1286_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1286_curclass, "$!pos"
    lt $I11, 0, rx1286_fail3557
    repr_get_attr_int rx1286_pos, $P11, rx1286_curclass, "$!pos"
    add $I11, rx1286_pos, 1
    gt $I11, rx1286_eos, rx1286_fail3557
    substr $S10, rx1286_tgt, rx1286_pos, 1
    ne $S10, ucs4:";", rx1286_fail3557
    add rx1286_pos, 1
    rx1286_cur."!cursor_pass"(rx1286_pos, "metachar:sym<:my>", 'backtrack'=>1)
    .return (rx1286_cur)
  rx1286_restart3556:
    repr_get_attr_obj rx1286_cstack, rx1286_cur, rx1286_curclass, "$!cstack"
  rx1286_fail3557:
    unless rx1286_bstack, rx1286_done3555
    pop $I19, rx1286_bstack
    if_null rx1286_cstack, rx1286_cstack_done3560
    unless rx1286_cstack, rx1286_cstack_done3560
    dec $I19
    set $P11, rx1286_cstack[$I19]
  rx1286_cstack_done3560:
    pop rx1286_rep, rx1286_bstack
    pop rx1286_pos, rx1286_bstack
    pop $I19, rx1286_bstack
    lt rx1286_pos, -1, rx1286_done3555
    lt rx1286_pos, 0, rx1286_fail3557
    eq $I19, 0, rx1286_fail3557
    nqp_islist $I20, rx1286_cstack
    unless $I20, rx1286_jump3558
    elements $I18, rx1286_bstack
    le $I18, 0, rx1286_cut3559
    dec $I18
    set $I18, rx1286_bstack[$I18]
  rx1286_cut3559:
    assign rx1286_cstack, $I18
  rx1286_jump3558:
    jump $I19
  rx1286_done3555:
    rx1286_cur."!cursor_fail"()
    .return (rx1286_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_227_1359292300.247") :anon :lex :outer("cuid_226_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1288_tgt
    .local int rx1288_pos
    .local int rx1288_off
    .local int rx1288_eos
    .local int rx1288_rep
    .local pmc rx1288_cur
    .local pmc rx1288_curclass
    .local pmc rx1288_bstack
    .local pmc rx1288_cstack
    (rx1288_cur, rx1288_tgt, rx1288_pos, rx1288_curclass, rx1288_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1288_cur
    length rx1288_eos, rx1288_tgt
    eq $I19, 1, rx1288_restart3566
    gt rx1288_pos, rx1288_eos, rx1288_fail3567
    repr_get_attr_int $I11, self, rx1288_curclass, "$!from"
    ne $I11, -1, rxscan1289_done3573
    goto rxscan1289_scan3572
  rxscan1289_loop3571:
    inc rx1288_pos
    gt rx1288_pos, rx1288_eos, rx1288_fail3567
    repr_bind_attr_int rx1288_cur, rx1288_curclass, "$!from", rx1288_pos
  rxscan1289_scan3572:
    nqp_rxmark rx1288_bstack, rxscan1289_loop3571, rx1288_pos, 0
  rxscan1289_done3573:
    add $I11, rx1288_pos, 2
    gt $I11, rx1288_eos, rx1288_fail3567
    substr $S10, rx1288_tgt, rx1288_pos, 2
    ne $S10, ucs4:"my", rx1288_fail3567
    add rx1288_pos, 2
    rx1288_cur."!cursor_pass"(rx1288_pos, 'backtrack'=>1)
    .return (rx1288_cur)
  rx1288_restart3566:
    repr_get_attr_obj rx1288_cstack, rx1288_cur, rx1288_curclass, "$!cstack"
  rx1288_fail3567:
    unless rx1288_bstack, rx1288_done3565
    pop $I19, rx1288_bstack
    if_null rx1288_cstack, rx1288_cstack_done3570
    unless rx1288_cstack, rx1288_cstack_done3570
    dec $I19
    set $P11, rx1288_cstack[$I19]
  rx1288_cstack_done3570:
    pop rx1288_rep, rx1288_bstack
    pop rx1288_pos, rx1288_bstack
    pop $I19, rx1288_bstack
    lt rx1288_pos, -1, rx1288_done3565
    lt rx1288_pos, 0, rx1288_fail3567
    eq $I19, 0, rx1288_fail3567
    nqp_islist $I20, rx1288_cstack
    unless $I20, rx1288_jump3568
    elements $I18, rx1288_bstack
    le $I18, 0, rx1288_cut3569
    dec $I18
    set $I18, rx1288_bstack[$I18]
  rx1288_cut3569:
    assign rx1288_cstack, $I18
  rx1288_jump3568:
    jump $I19
  rx1288_done3565:
    rx1288_cur."!cursor_fail"()
    .return (rx1288_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_228_1359292300.247") :anon :lex :outer("cuid_410_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1392
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1292_tgt
    .local int rx1292_pos
    .local int rx1292_off
    .local int rx1292_eos
    .local int rx1292_rep
    .local pmc rx1292_cur
    .local pmc rx1292_curclass
    .local pmc rx1292_bstack
    .local pmc rx1292_cstack
    (rx1292_cur, rx1292_tgt, rx1292_pos, rx1292_curclass, rx1292_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1292_cur
    length rx1292_eos, rx1292_tgt
    eq $I19, 1, rx1292_restart3578
    gt rx1292_pos, rx1292_eos, rx1292_fail3579
    repr_get_attr_int $I11, self, rx1292_curclass, "$!from"
    ne $I11, -1, rxscan1293_done3585
    goto rxscan1293_scan3584
  rxscan1293_loop3583:
    inc rx1292_pos
    gt rx1292_pos, rx1292_eos, rx1292_fail3579
    repr_bind_attr_int rx1292_cur, rx1292_curclass, "$!from", rx1292_pos
  rxscan1293_scan3584:
    nqp_rxmark rx1292_bstack, rxscan1293_loop3583, rx1292_pos, 0
  rxscan1293_done3585:
    ge rx1292_pos, rx1292_eos, rx1292_fail3579
    substr $S11, rx1292_tgt, rx1292_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1292_fail3579
    repr_bind_attr_int rx1292_cur, rx1292_curclass, "$!pos", rx1292_pos
    $P11 = rx1292_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1292_curclass, "$!pos"
    lt $I11, 0, rx1292_fail3579
    nqp_rxmark rx1292_bstack, rxsubrule1294_pass3586, -1, 0
  rxsubrule1294_pass3586:
    rx1292_cstack = rx1292_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1292_pos, $P11, rx1292_curclass, "$!pos"
    rx1292_cur."!cursor_pass"(rx1292_pos, "metachar:sym<{ }>", 'backtrack'=>1)
    .return (rx1292_cur)
  rx1292_restart3578:
    repr_get_attr_obj rx1292_cstack, rx1292_cur, rx1292_curclass, "$!cstack"
  rx1292_fail3579:
    unless rx1292_bstack, rx1292_done3577
    pop $I19, rx1292_bstack
    if_null rx1292_cstack, rx1292_cstack_done3582
    unless rx1292_cstack, rx1292_cstack_done3582
    dec $I19
    set $P11, rx1292_cstack[$I19]
  rx1292_cstack_done3582:
    pop rx1292_rep, rx1292_bstack
    pop rx1292_pos, rx1292_bstack
    pop $I19, rx1292_bstack
    lt rx1292_pos, -1, rx1292_done3577
    lt rx1292_pos, 0, rx1292_fail3579
    eq $I19, 0, rx1292_fail3579
    nqp_islist $I20, rx1292_cstack
    unless $I20, rx1292_jump3580
    elements $I18, rx1292_bstack
    le $I18, 0, rx1292_cut3581
    dec $I18
    set $I18, rx1292_bstack[$I18]
  rx1292_cut3581:
    assign rx1292_cstack, $I18
  rx1292_jump3580:
    jump $I19
  rx1292_done3577:
    rx1292_cur."!cursor_fail"()
    .return (rx1292_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_229_1359292300.247") :anon :lex :outer("cuid_410_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1396
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_230_1359292300.247' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1295_tgt
    .local int rx1295_pos
    .local int rx1295_off
    .local int rx1295_eos
    .local int rx1295_rep
    .local pmc rx1295_cur
    .local pmc rx1295_curclass
    .local pmc rx1295_bstack
    .local pmc rx1295_cstack
    (rx1295_cur, rx1295_tgt, rx1295_pos, rx1295_curclass, rx1295_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1295_cur
    length rx1295_eos, rx1295_tgt
    eq $I19, 1, rx1295_restart3589
    gt rx1295_pos, rx1295_eos, rx1295_fail3590
    repr_get_attr_int $I11, self, rx1295_curclass, "$!from"
    ne $I11, -1, rxscan1296_done3596
    goto rxscan1296_scan3595
  rxscan1296_loop3594:
    inc rx1295_pos
    gt rx1295_pos, rx1295_eos, rx1295_fail3590
    repr_bind_attr_int rx1295_cur, rx1295_curclass, "$!from", rx1295_pos
  rxscan1296_scan3595:
    nqp_rxmark rx1295_bstack, rxscan1296_loop3594, rx1295_pos, 0
  rxscan1296_done3596:
    .const 'Sub' $P5001 = 'cuid_230_1359292300.247' 
    capture_lex $P5001
    repr_bind_attr_int rx1295_cur, rx1295_curclass, "$!pos", rx1295_pos
    $P11 = rx1295_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1295_curclass, "$!pos"
    lt $I11, 0, rx1295_fail3590
    repr_bind_attr_int rx1295_cur, rx1295_curclass, "$!pos", rx1295_pos
    $P11 = rx1295_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1295_curclass, "$!pos"
    lt $I11, 0, rx1295_fail3590
    nqp_rxmark rx1295_bstack, rxsubrule1300_pass3610, -1, 0
  rxsubrule1300_pass3610:
    rx1295_cstack = rx1295_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1295_pos, $P11, rx1295_curclass, "$!pos"
    rx1295_cur."!cursor_pass"(rx1295_pos, "metachar:sym<nqpvar>", 'backtrack'=>1)
    .return (rx1295_cur)
  rx1295_restart3589:
    repr_get_attr_obj rx1295_cstack, rx1295_cur, rx1295_curclass, "$!cstack"
  rx1295_fail3590:
    unless rx1295_bstack, rx1295_done3588
    pop $I19, rx1295_bstack
    if_null rx1295_cstack, rx1295_cstack_done3593
    unless rx1295_cstack, rx1295_cstack_done3593
    dec $I19
    set $P11, rx1295_cstack[$I19]
  rx1295_cstack_done3593:
    pop rx1295_rep, rx1295_bstack
    pop rx1295_pos, rx1295_bstack
    pop $I19, rx1295_bstack
    lt rx1295_pos, -1, rx1295_done3588
    lt rx1295_pos, 0, rx1295_fail3590
    eq $I19, 0, rx1295_fail3590
    nqp_islist $I20, rx1295_cstack
    unless $I20, rx1295_jump3591
    elements $I18, rx1295_bstack
    le $I18, 0, rx1295_cut3592
    dec $I18
    set $I18, rx1295_bstack[$I18]
  rx1295_cut3592:
    assign rx1295_cstack, $I18
  rx1295_jump3591:
    jump $I19
  rx1295_done3588:
    rx1295_cur."!cursor_fail"()
    .return (rx1295_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_230_1359292300.247") :anon :lex :outer("cuid_229_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1297_tgt
    .local int rx1297_pos
    .local int rx1297_off
    .local int rx1297_eos
    .local int rx1297_rep
    .local pmc rx1297_cur
    .local pmc rx1297_curclass
    .local pmc rx1297_bstack
    .local pmc rx1297_cstack
    (rx1297_cur, rx1297_tgt, rx1297_pos, rx1297_curclass, rx1297_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1297_cur
    length rx1297_eos, rx1297_tgt
    eq $I19, 1, rx1297_restart3599
    gt rx1297_pos, rx1297_eos, rx1297_fail3600
    repr_get_attr_int $I11, self, rx1297_curclass, "$!from"
    ne $I11, -1, rxscan1298_done3606
    goto rxscan1298_scan3605
  rxscan1298_loop3604:
    inc rx1297_pos
    gt rx1297_pos, rx1297_eos, rx1297_fail3600
    repr_bind_attr_int rx1297_cur, rx1297_curclass, "$!from", rx1297_pos
  rxscan1298_scan3605:
    nqp_rxmark rx1297_bstack, rxscan1298_loop3604, rx1297_pos, 0
  rxscan1298_done3606:
    ge rx1297_pos, rx1297_eos, rx1297_fail3600
    substr $S11, rx1297_tgt, rx1297_pos, 1
    index $I11, ucs4:"$@&", $S11
    lt $I11, 0, rx1297_fail3600
    inc rx1297_pos
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1299_03608
    nqp_push_label $P11, alt1299_13609
    nqp_rxmark rx1297_bstack, alt1299_end3607, -1, 0
    rx1297_cur."!alt"(rx1297_pos, "alt_nfa__39_1359292303.469", $P11)
    goto rx1297_fail3600
  alt1299_03608:
    ge rx1297_pos, rx1297_eos, rx1297_fail3600
    is_cclass $I11, .CCLASS_WORD, rx1297_tgt, rx1297_pos
    if $I11, rx1297_fail3600
    add rx1297_pos, 1
    ge rx1297_pos, rx1297_eos, rx1297_fail3600
    is_cclass $I11, .CCLASS_WORD, rx1297_tgt, rx1297_pos
    unless $I11, rx1297_fail3600
    add rx1297_pos, 1
    goto alt1299_end3607
  alt1299_13609:
    ge rx1297_pos, rx1297_eos, rx1297_fail3600
    is_cclass $I11, .CCLASS_WORD, rx1297_tgt, rx1297_pos
    unless $I11, rx1297_fail3600
    add rx1297_pos, 1
    goto alt1299_end3607
  alt1299_end3607:
    nqp_rxcommit rx1297_bstack, alt1299_end3607
    rx1297_cur."!cursor_pass"(rx1297_pos, 'backtrack'=>1)
    .return (rx1297_cur)
  rx1297_restart3599:
    repr_get_attr_obj rx1297_cstack, rx1297_cur, rx1297_curclass, "$!cstack"
  rx1297_fail3600:
    unless rx1297_bstack, rx1297_done3598
    pop $I19, rx1297_bstack
    if_null rx1297_cstack, rx1297_cstack_done3603
    unless rx1297_cstack, rx1297_cstack_done3603
    dec $I19
    set $P11, rx1297_cstack[$I19]
  rx1297_cstack_done3603:
    pop rx1297_rep, rx1297_bstack
    pop rx1297_pos, rx1297_bstack
    pop $I19, rx1297_bstack
    lt rx1297_pos, -1, rx1297_done3598
    lt rx1297_pos, 0, rx1297_fail3600
    eq $I19, 0, rx1297_fail3600
    nqp_islist $I20, rx1297_cstack
    unless $I20, rx1297_jump3601
    elements $I18, rx1297_bstack
    le $I18, 0, rx1297_cut3602
    dec $I18
    set $I18, rx1297_bstack[$I18]
  rx1297_cut3602:
    assign rx1297_cstack, $I18
  rx1297_jump3601:
    jump $I19
  rx1297_done3598:
    rx1297_cur."!cursor_fail"()
    .return (rx1297_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_231_1359292300.247") :anon :lex :outer("cuid_410_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1400
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1301_tgt
    .local int rx1301_pos
    .local int rx1301_off
    .local int rx1301_eos
    .local int rx1301_rep
    .local pmc rx1301_cur
    .local pmc rx1301_curclass
    .local pmc rx1301_bstack
    .local pmc rx1301_cstack
    (rx1301_cur, rx1301_tgt, rx1301_pos, rx1301_curclass, rx1301_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1301_cur
    length rx1301_eos, rx1301_tgt
    eq $I19, 1, rx1301_restart3613
    gt rx1301_pos, rx1301_eos, rx1301_fail3614
    repr_get_attr_int $I11, self, rx1301_curclass, "$!from"
    ne $I11, -1, rxscan1302_done3620
    goto rxscan1302_scan3619
  rxscan1302_loop3618:
    inc rx1301_pos
    gt rx1301_pos, rx1301_eos, rx1301_fail3614
    repr_bind_attr_int rx1301_cur, rx1301_curclass, "$!from", rx1301_pos
  rxscan1302_scan3619:
    nqp_rxmark rx1301_bstack, rxscan1302_loop3618, rx1301_pos, 0
  rxscan1302_done3620:
    ge rx1301_pos, rx1301_eos, rx1301_fail3614
    substr $S11, rx1301_tgt, rx1301_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1301_fail3614
    repr_bind_attr_int rx1301_cur, rx1301_curclass, "$!pos", rx1301_pos
    $P11 = rx1301_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1301_curclass, "$!pos"
    lt $I11, 0, rx1301_fail3614
    nqp_rxmark rx1301_bstack, rxsubrule1303_pass3621, -1, 0
  rxsubrule1303_pass3621:
    rx1301_cstack = rx1301_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1301_pos, $P11, rx1301_curclass, "$!pos"
    rx1301_cur."!cursor_pass"(rx1301_pos, "assertion:sym<{ }>", 'backtrack'=>1)
    .return (rx1301_cur)
  rx1301_restart3613:
    repr_get_attr_obj rx1301_cstack, rx1301_cur, rx1301_curclass, "$!cstack"
  rx1301_fail3614:
    unless rx1301_bstack, rx1301_done3612
    pop $I19, rx1301_bstack
    if_null rx1301_cstack, rx1301_cstack_done3617
    unless rx1301_cstack, rx1301_cstack_done3617
    dec $I19
    set $P11, rx1301_cstack[$I19]
  rx1301_cstack_done3617:
    pop rx1301_rep, rx1301_bstack
    pop rx1301_pos, rx1301_bstack
    pop $I19, rx1301_bstack
    lt rx1301_pos, -1, rx1301_done3612
    lt rx1301_pos, 0, rx1301_fail3614
    eq $I19, 0, rx1301_fail3614
    nqp_islist $I20, rx1301_cstack
    unless $I20, rx1301_jump3615
    elements $I18, rx1301_bstack
    le $I18, 0, rx1301_cut3616
    dec $I18
    set $I18, rx1301_bstack[$I18]
  rx1301_cut3616:
    assign rx1301_cstack, $I18
  rx1301_jump3615:
    jump $I19
  rx1301_done3612:
    rx1301_cur."!cursor_fail"()
    .return (rx1301_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_232_1359292300.247") :anon :lex :outer("cuid_410_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1404
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_233_1359292300.247' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_234_1359292300.247' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1304_tgt
    .local int rx1304_pos
    .local int rx1304_off
    .local int rx1304_eos
    .local int rx1304_rep
    .local pmc rx1304_cur
    .local pmc rx1304_curclass
    .local pmc rx1304_bstack
    .local pmc rx1304_cstack
    (rx1304_cur, rx1304_tgt, rx1304_pos, rx1304_curclass, rx1304_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1304_cur
    length rx1304_eos, rx1304_tgt
    eq $I19, 1, rx1304_restart3624
    gt rx1304_pos, rx1304_eos, rx1304_fail3625
    repr_get_attr_int $I11, self, rx1304_curclass, "$!from"
    ne $I11, -1, rxscan1305_done3631
    goto rxscan1305_scan3630
  rxscan1305_loop3629:
    inc rx1304_pos
    gt rx1304_pos, rx1304_eos, rx1304_fail3625
    repr_bind_attr_int rx1304_cur, rx1304_curclass, "$!from", rx1304_pos
  rxscan1305_scan3630:
    nqp_rxmark rx1304_bstack, rxscan1305_loop3629, rx1304_pos, 0
  rxscan1305_done3631:
    add $I11, rx1304_pos, 1
    gt $I11, rx1304_eos, rx1304_fail3625
    substr $S10, rx1304_tgt, rx1304_pos, 1
    ne $S10, ucs4:"?", rx1304_fail3625
    add rx1304_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1306_03633
    nqp_push_label $P11, alt1306_13644
    nqp_rxmark rx1304_bstack, alt1306_end3632, -1, 0
    rx1304_cur."!alt"(rx1304_pos, "alt_nfa__40_1359292303.491", $P11)
    goto rx1304_fail3625
  alt1306_03633:
    .const 'Sub' $P5001 = 'cuid_233_1359292300.247' 
    capture_lex $P5001
    repr_bind_attr_int rx1304_cur, rx1304_curclass, "$!pos", rx1304_pos
    $P11 = rx1304_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1304_curclass, "$!pos"
    lt $I11, 0, rx1304_fail3625
    goto alt1306_end3632
  alt1306_13644:
    .const 'Sub' $P5002 = 'cuid_234_1359292300.247' 
    capture_lex $P5002
    repr_bind_attr_int rx1304_cur, rx1304_curclass, "$!pos", rx1304_pos
    $P11 = rx1304_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1304_curclass, "$!pos"
    ge $I11, 0, rx1304_fail3625
    repr_bind_attr_int rx1304_cur, rx1304_curclass, "$!pos", rx1304_pos
    $P11 = rx1304_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1304_curclass, "$!pos"
    lt $I11, 0, rx1304_fail3625
    nqp_rxmark rx1304_bstack, rxsubrule1311_pass3655, -1, 0
  rxsubrule1311_pass3655:
    rx1304_cstack = rx1304_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1304_pos, $P11, rx1304_curclass, "$!pos"
    goto alt1306_end3632
  alt1306_end3632:
    nqp_rxcommit rx1304_bstack, alt1306_end3632
    rx1304_cur."!cursor_pass"(rx1304_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx1304_cur)
  rx1304_restart3624:
    repr_get_attr_obj rx1304_cstack, rx1304_cur, rx1304_curclass, "$!cstack"
  rx1304_fail3625:
    unless rx1304_bstack, rx1304_done3623
    pop $I19, rx1304_bstack
    if_null rx1304_cstack, rx1304_cstack_done3628
    unless rx1304_cstack, rx1304_cstack_done3628
    dec $I19
    set $P11, rx1304_cstack[$I19]
  rx1304_cstack_done3628:
    pop rx1304_rep, rx1304_bstack
    pop rx1304_pos, rx1304_bstack
    pop $I19, rx1304_bstack
    lt rx1304_pos, -1, rx1304_done3623
    lt rx1304_pos, 0, rx1304_fail3625
    eq $I19, 0, rx1304_fail3625
    nqp_islist $I20, rx1304_cstack
    unless $I20, rx1304_jump3626
    elements $I18, rx1304_bstack
    le $I18, 0, rx1304_cut3627
    dec $I18
    set $I18, rx1304_bstack[$I18]
  rx1304_cut3627:
    assign rx1304_cstack, $I18
  rx1304_jump3626:
    jump $I19
  rx1304_done3623:
    rx1304_cur."!cursor_fail"()
    .return (rx1304_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_233_1359292300.247") :anon :lex :outer("cuid_232_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1307_tgt
    .local int rx1307_pos
    .local int rx1307_off
    .local int rx1307_eos
    .local int rx1307_rep
    .local pmc rx1307_cur
    .local pmc rx1307_curclass
    .local pmc rx1307_bstack
    .local pmc rx1307_cstack
    (rx1307_cur, rx1307_tgt, rx1307_pos, rx1307_curclass, rx1307_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1307_cur
    length rx1307_eos, rx1307_tgt
    eq $I19, 1, rx1307_restart3636
    gt rx1307_pos, rx1307_eos, rx1307_fail3637
    repr_get_attr_int $I11, self, rx1307_curclass, "$!from"
    ne $I11, -1, rxscan1308_done3643
    goto rxscan1308_scan3642
  rxscan1308_loop3641:
    inc rx1307_pos
    gt rx1307_pos, rx1307_eos, rx1307_fail3637
    repr_bind_attr_int rx1307_cur, rx1307_curclass, "$!from", rx1307_pos
  rxscan1308_scan3642:
    nqp_rxmark rx1307_bstack, rxscan1308_loop3641, rx1307_pos, 0
  rxscan1308_done3643:
    add $I11, rx1307_pos, 1
    gt $I11, rx1307_eos, rx1307_fail3637
    substr $S10, rx1307_tgt, rx1307_pos, 1
    ne $S10, ucs4:">", rx1307_fail3637
    add rx1307_pos, 1
    rx1307_cur."!cursor_pass"(rx1307_pos, 'backtrack'=>1)
    .return (rx1307_cur)
  rx1307_restart3636:
    repr_get_attr_obj rx1307_cstack, rx1307_cur, rx1307_curclass, "$!cstack"
  rx1307_fail3637:
    unless rx1307_bstack, rx1307_done3635
    pop $I19, rx1307_bstack
    if_null rx1307_cstack, rx1307_cstack_done3640
    unless rx1307_cstack, rx1307_cstack_done3640
    dec $I19
    set $P11, rx1307_cstack[$I19]
  rx1307_cstack_done3640:
    pop rx1307_rep, rx1307_bstack
    pop rx1307_pos, rx1307_bstack
    pop $I19, rx1307_bstack
    lt rx1307_pos, -1, rx1307_done3635
    lt rx1307_pos, 0, rx1307_fail3637
    eq $I19, 0, rx1307_fail3637
    nqp_islist $I20, rx1307_cstack
    unless $I20, rx1307_jump3638
    elements $I18, rx1307_bstack
    le $I18, 0, rx1307_cut3639
    dec $I18
    set $I18, rx1307_bstack[$I18]
  rx1307_cut3639:
    assign rx1307_cstack, $I18
  rx1307_jump3638:
    jump $I19
  rx1307_done3635:
    rx1307_cur."!cursor_fail"()
    .return (rx1307_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_234_1359292300.247") :anon :lex :outer("cuid_232_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1309_tgt
    .local int rx1309_pos
    .local int rx1309_off
    .local int rx1309_eos
    .local int rx1309_rep
    .local pmc rx1309_cur
    .local pmc rx1309_curclass
    .local pmc rx1309_bstack
    .local pmc rx1309_cstack
    (rx1309_cur, rx1309_tgt, rx1309_pos, rx1309_curclass, rx1309_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1309_cur
    length rx1309_eos, rx1309_tgt
    eq $I19, 1, rx1309_restart3647
    gt rx1309_pos, rx1309_eos, rx1309_fail3648
    repr_get_attr_int $I11, self, rx1309_curclass, "$!from"
    ne $I11, -1, rxscan1310_done3654
    goto rxscan1310_scan3653
  rxscan1310_loop3652:
    inc rx1309_pos
    gt rx1309_pos, rx1309_eos, rx1309_fail3648
    repr_bind_attr_int rx1309_cur, rx1309_curclass, "$!from", rx1309_pos
  rxscan1310_scan3653:
    nqp_rxmark rx1309_bstack, rxscan1310_loop3652, rx1309_pos, 0
  rxscan1310_done3654:
    add $I11, rx1309_pos, 1
    gt $I11, rx1309_eos, rx1309_fail3648
    substr $S10, rx1309_tgt, rx1309_pos, 1
    ne $S10, ucs4:"{", rx1309_fail3648
    add rx1309_pos, 1
    rx1309_cur."!cursor_pass"(rx1309_pos, 'backtrack'=>1)
    .return (rx1309_cur)
  rx1309_restart3647:
    repr_get_attr_obj rx1309_cstack, rx1309_cur, rx1309_curclass, "$!cstack"
  rx1309_fail3648:
    unless rx1309_bstack, rx1309_done3646
    pop $I19, rx1309_bstack
    if_null rx1309_cstack, rx1309_cstack_done3651
    unless rx1309_cstack, rx1309_cstack_done3651
    dec $I19
    set $P11, rx1309_cstack[$I19]
  rx1309_cstack_done3651:
    pop rx1309_rep, rx1309_bstack
    pop rx1309_pos, rx1309_bstack
    pop $I19, rx1309_bstack
    lt rx1309_pos, -1, rx1309_done3646
    lt rx1309_pos, 0, rx1309_fail3648
    eq $I19, 0, rx1309_fail3648
    nqp_islist $I20, rx1309_cstack
    unless $I20, rx1309_jump3649
    elements $I18, rx1309_bstack
    le $I18, 0, rx1309_cut3650
    dec $I18
    set $I18, rx1309_bstack[$I18]
  rx1309_cut3650:
    assign rx1309_cstack, $I18
  rx1309_jump3649:
    jump $I19
  rx1309_done3646:
    rx1309_cur."!cursor_fail"()
    .return (rx1309_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_235_1359292300.247") :anon :lex :outer("cuid_410_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1405
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_236_1359292300.247' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_237_1359292300.247' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1312_tgt
    .local int rx1312_pos
    .local int rx1312_off
    .local int rx1312_eos
    .local int rx1312_rep
    .local pmc rx1312_cur
    .local pmc rx1312_curclass
    .local pmc rx1312_bstack
    .local pmc rx1312_cstack
    (rx1312_cur, rx1312_tgt, rx1312_pos, rx1312_curclass, rx1312_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1312_cur
    length rx1312_eos, rx1312_tgt
    eq $I19, 1, rx1312_restart3658
    gt rx1312_pos, rx1312_eos, rx1312_fail3659
    repr_get_attr_int $I11, self, rx1312_curclass, "$!from"
    ne $I11, -1, rxscan1313_done3665
    goto rxscan1313_scan3664
  rxscan1313_loop3663:
    inc rx1312_pos
    gt rx1312_pos, rx1312_eos, rx1312_fail3659
    repr_bind_attr_int rx1312_cur, rx1312_curclass, "$!from", rx1312_pos
  rxscan1313_scan3664:
    nqp_rxmark rx1312_bstack, rxscan1313_loop3663, rx1312_pos, 0
  rxscan1313_done3665:
    add $I11, rx1312_pos, 1
    gt $I11, rx1312_eos, rx1312_fail3659
    substr $S10, rx1312_tgt, rx1312_pos, 1
    ne $S10, ucs4:"!", rx1312_fail3659
    add rx1312_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1314_03667
    nqp_push_label $P11, alt1314_13678
    nqp_rxmark rx1312_bstack, alt1314_end3666, -1, 0
    rx1312_cur."!alt"(rx1312_pos, "alt_nfa__41_1359292303.504", $P11)
    goto rx1312_fail3659
  alt1314_03667:
    .const 'Sub' $P5001 = 'cuid_236_1359292300.247' 
    capture_lex $P5001
    repr_bind_attr_int rx1312_cur, rx1312_curclass, "$!pos", rx1312_pos
    $P11 = rx1312_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1312_curclass, "$!pos"
    lt $I11, 0, rx1312_fail3659
    goto alt1314_end3666
  alt1314_13678:
    .const 'Sub' $P5002 = 'cuid_237_1359292300.247' 
    capture_lex $P5002
    repr_bind_attr_int rx1312_cur, rx1312_curclass, "$!pos", rx1312_pos
    $P11 = rx1312_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1312_curclass, "$!pos"
    ge $I11, 0, rx1312_fail3659
    repr_bind_attr_int rx1312_cur, rx1312_curclass, "$!pos", rx1312_pos
    $P11 = rx1312_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1312_curclass, "$!pos"
    lt $I11, 0, rx1312_fail3659
    nqp_rxmark rx1312_bstack, rxsubrule1319_pass3689, -1, 0
  rxsubrule1319_pass3689:
    rx1312_cstack = rx1312_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1312_pos, $P11, rx1312_curclass, "$!pos"
    goto alt1314_end3666
  alt1314_end3666:
    nqp_rxcommit rx1312_bstack, alt1314_end3666
    rx1312_cur."!cursor_pass"(rx1312_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx1312_cur)
  rx1312_restart3658:
    repr_get_attr_obj rx1312_cstack, rx1312_cur, rx1312_curclass, "$!cstack"
  rx1312_fail3659:
    unless rx1312_bstack, rx1312_done3657
    pop $I19, rx1312_bstack
    if_null rx1312_cstack, rx1312_cstack_done3662
    unless rx1312_cstack, rx1312_cstack_done3662
    dec $I19
    set $P11, rx1312_cstack[$I19]
  rx1312_cstack_done3662:
    pop rx1312_rep, rx1312_bstack
    pop rx1312_pos, rx1312_bstack
    pop $I19, rx1312_bstack
    lt rx1312_pos, -1, rx1312_done3657
    lt rx1312_pos, 0, rx1312_fail3659
    eq $I19, 0, rx1312_fail3659
    nqp_islist $I20, rx1312_cstack
    unless $I20, rx1312_jump3660
    elements $I18, rx1312_bstack
    le $I18, 0, rx1312_cut3661
    dec $I18
    set $I18, rx1312_bstack[$I18]
  rx1312_cut3661:
    assign rx1312_cstack, $I18
  rx1312_jump3660:
    jump $I19
  rx1312_done3657:
    rx1312_cur."!cursor_fail"()
    .return (rx1312_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_236_1359292300.247") :anon :lex :outer("cuid_235_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1315_tgt
    .local int rx1315_pos
    .local int rx1315_off
    .local int rx1315_eos
    .local int rx1315_rep
    .local pmc rx1315_cur
    .local pmc rx1315_curclass
    .local pmc rx1315_bstack
    .local pmc rx1315_cstack
    (rx1315_cur, rx1315_tgt, rx1315_pos, rx1315_curclass, rx1315_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1315_cur
    length rx1315_eos, rx1315_tgt
    eq $I19, 1, rx1315_restart3670
    gt rx1315_pos, rx1315_eos, rx1315_fail3671
    repr_get_attr_int $I11, self, rx1315_curclass, "$!from"
    ne $I11, -1, rxscan1316_done3677
    goto rxscan1316_scan3676
  rxscan1316_loop3675:
    inc rx1315_pos
    gt rx1315_pos, rx1315_eos, rx1315_fail3671
    repr_bind_attr_int rx1315_cur, rx1315_curclass, "$!from", rx1315_pos
  rxscan1316_scan3676:
    nqp_rxmark rx1315_bstack, rxscan1316_loop3675, rx1315_pos, 0
  rxscan1316_done3677:
    add $I11, rx1315_pos, 1
    gt $I11, rx1315_eos, rx1315_fail3671
    substr $S10, rx1315_tgt, rx1315_pos, 1
    ne $S10, ucs4:">", rx1315_fail3671
    add rx1315_pos, 1
    rx1315_cur."!cursor_pass"(rx1315_pos, 'backtrack'=>1)
    .return (rx1315_cur)
  rx1315_restart3670:
    repr_get_attr_obj rx1315_cstack, rx1315_cur, rx1315_curclass, "$!cstack"
  rx1315_fail3671:
    unless rx1315_bstack, rx1315_done3669
    pop $I19, rx1315_bstack
    if_null rx1315_cstack, rx1315_cstack_done3674
    unless rx1315_cstack, rx1315_cstack_done3674
    dec $I19
    set $P11, rx1315_cstack[$I19]
  rx1315_cstack_done3674:
    pop rx1315_rep, rx1315_bstack
    pop rx1315_pos, rx1315_bstack
    pop $I19, rx1315_bstack
    lt rx1315_pos, -1, rx1315_done3669
    lt rx1315_pos, 0, rx1315_fail3671
    eq $I19, 0, rx1315_fail3671
    nqp_islist $I20, rx1315_cstack
    unless $I20, rx1315_jump3672
    elements $I18, rx1315_bstack
    le $I18, 0, rx1315_cut3673
    dec $I18
    set $I18, rx1315_bstack[$I18]
  rx1315_cut3673:
    assign rx1315_cstack, $I18
  rx1315_jump3672:
    jump $I19
  rx1315_done3669:
    rx1315_cur."!cursor_fail"()
    .return (rx1315_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_237_1359292300.247") :anon :lex :outer("cuid_235_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1317_tgt
    .local int rx1317_pos
    .local int rx1317_off
    .local int rx1317_eos
    .local int rx1317_rep
    .local pmc rx1317_cur
    .local pmc rx1317_curclass
    .local pmc rx1317_bstack
    .local pmc rx1317_cstack
    (rx1317_cur, rx1317_tgt, rx1317_pos, rx1317_curclass, rx1317_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1317_cur
    length rx1317_eos, rx1317_tgt
    eq $I19, 1, rx1317_restart3681
    gt rx1317_pos, rx1317_eos, rx1317_fail3682
    repr_get_attr_int $I11, self, rx1317_curclass, "$!from"
    ne $I11, -1, rxscan1318_done3688
    goto rxscan1318_scan3687
  rxscan1318_loop3686:
    inc rx1317_pos
    gt rx1317_pos, rx1317_eos, rx1317_fail3682
    repr_bind_attr_int rx1317_cur, rx1317_curclass, "$!from", rx1317_pos
  rxscan1318_scan3687:
    nqp_rxmark rx1317_bstack, rxscan1318_loop3686, rx1317_pos, 0
  rxscan1318_done3688:
    add $I11, rx1317_pos, 1
    gt $I11, rx1317_eos, rx1317_fail3682
    substr $S10, rx1317_tgt, rx1317_pos, 1
    ne $S10, ucs4:"{", rx1317_fail3682
    add rx1317_pos, 1
    rx1317_cur."!cursor_pass"(rx1317_pos, 'backtrack'=>1)
    .return (rx1317_cur)
  rx1317_restart3681:
    repr_get_attr_obj rx1317_cstack, rx1317_cur, rx1317_curclass, "$!cstack"
  rx1317_fail3682:
    unless rx1317_bstack, rx1317_done3680
    pop $I19, rx1317_bstack
    if_null rx1317_cstack, rx1317_cstack_done3685
    unless rx1317_cstack, rx1317_cstack_done3685
    dec $I19
    set $P11, rx1317_cstack[$I19]
  rx1317_cstack_done3685:
    pop rx1317_rep, rx1317_bstack
    pop rx1317_pos, rx1317_bstack
    pop $I19, rx1317_bstack
    lt rx1317_pos, -1, rx1317_done3680
    lt rx1317_pos, 0, rx1317_fail3682
    eq $I19, 0, rx1317_fail3682
    nqp_islist $I20, rx1317_cstack
    unless $I20, rx1317_jump3683
    elements $I18, rx1317_bstack
    le $I18, 0, rx1317_cut3684
    dec $I18
    set $I18, rx1317_bstack[$I18]
  rx1317_cut3684:
    assign rx1317_cstack, $I18
  rx1317_jump3683:
    jump $I19
  rx1317_done3680:
    rx1317_cur."!cursor_fail"()
    .return (rx1317_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_238_1359292300.247") :anon :lex :outer("cuid_410_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1407
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_239_1359292300.247' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1320_tgt
    .local int rx1320_pos
    .local int rx1320_off
    .local int rx1320_eos
    .local int rx1320_rep
    .local pmc rx1320_cur
    .local pmc rx1320_curclass
    .local pmc rx1320_bstack
    .local pmc rx1320_cstack
    (rx1320_cur, rx1320_tgt, rx1320_pos, rx1320_curclass, rx1320_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1320_cur
    length rx1320_eos, rx1320_tgt
    eq $I19, 1, rx1320_restart3692
    gt rx1320_pos, rx1320_eos, rx1320_fail3693
    repr_get_attr_int $I11, self, rx1320_curclass, "$!from"
    ne $I11, -1, rxscan1321_done3699
    goto rxscan1321_scan3698
  rxscan1321_loop3697:
    inc rx1320_pos
    gt rx1320_pos, rx1320_eos, rx1320_fail3693
    repr_bind_attr_int rx1320_cur, rx1320_curclass, "$!from", rx1320_pos
  rxscan1321_scan3698:
    nqp_rxmark rx1320_bstack, rxscan1321_loop3697, rx1320_pos, 0
  rxscan1321_done3699:
    nqp_rxmark rx1320_bstack, rxcap1322_fail3701, rx1320_pos, 0
    ge rx1320_pos, rx1320_eos, rx1320_fail3693
    substr $S11, rx1320_tgt, rx1320_pos, 1
    index $I11, ucs4:"?!", $S11
    lt $I11, 0, rx1320_fail3693
    inc rx1320_pos
    .const 'Sub' $P5001 = 'cuid_239_1359292300.247' 
    capture_lex $P5001
    repr_bind_attr_int rx1320_cur, rx1320_curclass, "$!pos", rx1320_pos
    $P11 = rx1320_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1320_curclass, "$!pos"
    lt $I11, 0, rx1320_fail3693
    nqp_rxpeek $I19, rx1320_bstack, rxcap1322_fail3701
    inc $I19
    set $I11, rx1320_bstack[$I19]
    repr_bind_attr_int rx1320_cur, rx1320_curclass, "$!pos", rx1320_pos
    $P11 = rx1320_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1320_pos)
    rx1320_cstack = rx1320_cur."!cursor_capture"($P11, "zw")
    goto rxcap1322_done3700
  rxcap1322_fail3701:
    goto rx1320_fail3693
  rxcap1322_done3700:
    repr_bind_attr_int rx1320_cur, rx1320_curclass, "$!pos", rx1320_pos
    $P11 = rx1320_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1320_curclass, "$!pos"
    lt $I11, 0, rx1320_fail3693
    nqp_rxmark rx1320_bstack, rxsubrule1325_pass3712, -1, 0
  rxsubrule1325_pass3712:
    rx1320_cstack = rx1320_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1320_pos, $P11, rx1320_curclass, "$!pos"
    rx1320_cur."!cursor_pass"(rx1320_pos, "assertion:sym<?{ }>", 'backtrack'=>1)
    .return (rx1320_cur)
  rx1320_restart3692:
    repr_get_attr_obj rx1320_cstack, rx1320_cur, rx1320_curclass, "$!cstack"
  rx1320_fail3693:
    unless rx1320_bstack, rx1320_done3691
    pop $I19, rx1320_bstack
    if_null rx1320_cstack, rx1320_cstack_done3696
    unless rx1320_cstack, rx1320_cstack_done3696
    dec $I19
    set $P11, rx1320_cstack[$I19]
  rx1320_cstack_done3696:
    pop rx1320_rep, rx1320_bstack
    pop rx1320_pos, rx1320_bstack
    pop $I19, rx1320_bstack
    lt rx1320_pos, -1, rx1320_done3691
    lt rx1320_pos, 0, rx1320_fail3693
    eq $I19, 0, rx1320_fail3693
    nqp_islist $I20, rx1320_cstack
    unless $I20, rx1320_jump3694
    elements $I18, rx1320_bstack
    le $I18, 0, rx1320_cut3695
    dec $I18
    set $I18, rx1320_bstack[$I18]
  rx1320_cut3695:
    assign rx1320_cstack, $I18
  rx1320_jump3694:
    jump $I19
  rx1320_done3691:
    rx1320_cur."!cursor_fail"()
    .return (rx1320_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_239_1359292300.247") :anon :lex :outer("cuid_238_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1323_tgt
    .local int rx1323_pos
    .local int rx1323_off
    .local int rx1323_eos
    .local int rx1323_rep
    .local pmc rx1323_cur
    .local pmc rx1323_curclass
    .local pmc rx1323_bstack
    .local pmc rx1323_cstack
    (rx1323_cur, rx1323_tgt, rx1323_pos, rx1323_curclass, rx1323_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1323_cur
    length rx1323_eos, rx1323_tgt
    eq $I19, 1, rx1323_restart3704
    gt rx1323_pos, rx1323_eos, rx1323_fail3705
    repr_get_attr_int $I11, self, rx1323_curclass, "$!from"
    ne $I11, -1, rxscan1324_done3711
    goto rxscan1324_scan3710
  rxscan1324_loop3709:
    inc rx1323_pos
    gt rx1323_pos, rx1323_eos, rx1323_fail3705
    repr_bind_attr_int rx1323_cur, rx1323_curclass, "$!from", rx1323_pos
  rxscan1324_scan3710:
    nqp_rxmark rx1323_bstack, rxscan1324_loop3709, rx1323_pos, 0
  rxscan1324_done3711:
    add $I11, rx1323_pos, 1
    gt $I11, rx1323_eos, rx1323_fail3705
    substr $S10, rx1323_tgt, rx1323_pos, 1
    ne $S10, ucs4:"{", rx1323_fail3705
    add rx1323_pos, 1
    rx1323_cur."!cursor_pass"(rx1323_pos, 'backtrack'=>1)
    .return (rx1323_cur)
  rx1323_restart3704:
    repr_get_attr_obj rx1323_cstack, rx1323_cur, rx1323_curclass, "$!cstack"
  rx1323_fail3705:
    unless rx1323_bstack, rx1323_done3703
    pop $I19, rx1323_bstack
    if_null rx1323_cstack, rx1323_cstack_done3708
    unless rx1323_cstack, rx1323_cstack_done3708
    dec $I19
    set $P11, rx1323_cstack[$I19]
  rx1323_cstack_done3708:
    pop rx1323_rep, rx1323_bstack
    pop rx1323_pos, rx1323_bstack
    pop $I19, rx1323_bstack
    lt rx1323_pos, -1, rx1323_done3703
    lt rx1323_pos, 0, rx1323_fail3705
    eq $I19, 0, rx1323_fail3705
    nqp_islist $I20, rx1323_cstack
    unless $I20, rx1323_jump3706
    elements $I18, rx1323_bstack
    le $I18, 0, rx1323_cut3707
    dec $I18
    set $I18, rx1323_bstack[$I18]
  rx1323_cut3707:
    assign rx1323_cstack, $I18
  rx1323_jump3706:
    jump $I19
  rx1323_done3703:
    rx1323_cur."!cursor_fail"()
    .return (rx1323_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_240_1359292300.247") :anon :lex :outer("cuid_410_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1411
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_241_1359292300.247' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1326_tgt
    .local int rx1326_pos
    .local int rx1326_off
    .local int rx1326_eos
    .local int rx1326_rep
    .local pmc rx1326_cur
    .local pmc rx1326_curclass
    .local pmc rx1326_bstack
    .local pmc rx1326_cstack
    (rx1326_cur, rx1326_tgt, rx1326_pos, rx1326_curclass, rx1326_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1326_cur
    length rx1326_eos, rx1326_tgt
    eq $I19, 1, rx1326_restart3715
    gt rx1326_pos, rx1326_eos, rx1326_fail3716
    repr_get_attr_int $I11, self, rx1326_curclass, "$!from"
    ne $I11, -1, rxscan1327_done3722
    goto rxscan1327_scan3721
  rxscan1327_loop3720:
    inc rx1326_pos
    gt rx1326_pos, rx1326_eos, rx1326_fail3716
    repr_bind_attr_int rx1326_cur, rx1326_curclass, "$!from", rx1326_pos
  rxscan1327_scan3721:
    nqp_rxmark rx1326_bstack, rxscan1327_loop3720, rx1326_pos, 0
  rxscan1327_done3722:
    repr_bind_attr_int rx1326_cur, rx1326_curclass, "$!pos", rx1326_pos
    $P11 = rx1326_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1326_curclass, "$!pos"
    lt $I11, 0, rx1326_fail3716
    nqp_rxmark rx1326_bstack, rxsubrule1328_pass3723, -1, 0
  rxsubrule1328_pass3723:
    rx1326_cstack = rx1326_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx1326_pos, $P11, rx1326_curclass, "$!pos"
    nqp_rxmark rx1326_bstack, rxquantr1329_done3725, rx1326_pos, 0
  rxquantr1329_loop3724:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1330_03727
    nqp_push_label $P11, alt1330_13738
    nqp_push_label $P11, alt1330_23740
    nqp_push_label $P11, alt1330_33742
    nqp_push_label $P11, alt1330_43744
    nqp_rxmark rx1326_bstack, alt1330_end3726, -1, 0
    rx1326_cur."!alt"(rx1326_pos, "alt_nfa__42_1359292303.534", $P11)
    goto rx1326_fail3716
  alt1330_03727:
    .const 'Sub' $P5001 = 'cuid_241_1359292300.247' 
    capture_lex $P5001
    repr_bind_attr_int rx1326_cur, rx1326_curclass, "$!pos", rx1326_pos
    $P11 = rx1326_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1326_curclass, "$!pos"
    lt $I11, 0, rx1326_fail3716
    goto alt1330_end3726
  alt1330_13738:
    add $I11, rx1326_pos, 1
    gt $I11, rx1326_eos, rx1326_fail3716
    substr $S10, rx1326_tgt, rx1326_pos, 1
    ne $S10, ucs4:"=", rx1326_fail3716
    add rx1326_pos, 1
    repr_bind_attr_int rx1326_cur, rx1326_curclass, "$!pos", rx1326_pos
    $P11 = rx1326_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1326_curclass, "$!pos"
    lt $I11, 0, rx1326_fail3716
    nqp_rxmark rx1326_bstack, rxsubrule1333_pass3739, -1, 0
  rxsubrule1333_pass3739:
    rx1326_cstack = rx1326_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1326_pos, $P11, rx1326_curclass, "$!pos"
    goto alt1330_end3726
  alt1330_23740:
    add $I11, rx1326_pos, 1
    gt $I11, rx1326_eos, rx1326_fail3716
    substr $S10, rx1326_tgt, rx1326_pos, 1
    ne $S10, ucs4:":", rx1326_fail3716
    add rx1326_pos, 1
    repr_bind_attr_int rx1326_cur, rx1326_curclass, "$!pos", rx1326_pos
    $P11 = rx1326_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1326_curclass, "$!pos"
    lt $I11, 0, rx1326_fail3716
    nqp_rxmark rx1326_bstack, rxsubrule1334_pass3741, -1, 0
  rxsubrule1334_pass3741:
    rx1326_cstack = rx1326_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1326_pos, $P11, rx1326_curclass, "$!pos"
    goto alt1330_end3726
  alt1330_33742:
    add $I11, rx1326_pos, 1
    gt $I11, rx1326_eos, rx1326_fail3716
    substr $S10, rx1326_tgt, rx1326_pos, 1
    ne $S10, ucs4:"(", rx1326_fail3716
    add rx1326_pos, 1
    repr_bind_attr_int rx1326_cur, rx1326_curclass, "$!pos", rx1326_pos
    $P11 = rx1326_cur."LANG"("MAIN", "arglist")
    repr_get_attr_int $I11, $P11, rx1326_curclass, "$!pos"
    lt $I11, 0, rx1326_fail3716
    nqp_rxmark rx1326_bstack, rxsubrule1335_pass3743, -1, 0
  rxsubrule1335_pass3743:
    rx1326_cstack = rx1326_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1326_pos, $P11, rx1326_curclass, "$!pos"
    add $I11, rx1326_pos, 1
    gt $I11, rx1326_eos, rx1326_fail3716
    substr $S10, rx1326_tgt, rx1326_pos, 1
    ne $S10, ucs4:")", rx1326_fail3716
    add rx1326_pos, 1
    goto alt1330_end3726
  alt1330_43744:
    repr_bind_attr_int rx1326_cur, rx1326_curclass, "$!pos", rx1326_pos
    $P11 = rx1326_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx1326_curclass, "$!pos"
    lt $I11, 0, rx1326_fail3716
    repr_get_attr_int rx1326_pos, $P11, rx1326_curclass, "$!pos"
    repr_bind_attr_int rx1326_cur, rx1326_curclass, "$!pos", rx1326_pos
    $P11 = rx1326_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx1326_curclass, "$!pos"
    lt $I11, 0, rx1326_fail3716
    nqp_rxmark rx1326_bstack, rxsubrule1337_pass3746, -1, 0
  rxsubrule1337_pass3746:
    rx1326_cstack = rx1326_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx1326_pos, $P11, rx1326_curclass, "$!pos"
    goto alt1330_end3726
  alt1330_end3726:
    nqp_rxpeek $I19, rx1326_bstack, rxquantr1329_done3725
    inc $I19
    inc $I19
    set rx1326_rep, rx1326_bstack[$I19]
    nqp_rxcommit rx1326_bstack, rxquantr1329_done3725
    inc rx1326_rep
  rxquantr1329_done3725:
    rx1326_cur."!cursor_pass"(rx1326_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx1326_cur)
  rx1326_restart3715:
    repr_get_attr_obj rx1326_cstack, rx1326_cur, rx1326_curclass, "$!cstack"
  rx1326_fail3716:
    unless rx1326_bstack, rx1326_done3714
    pop $I19, rx1326_bstack
    if_null rx1326_cstack, rx1326_cstack_done3719
    unless rx1326_cstack, rx1326_cstack_done3719
    dec $I19
    set $P11, rx1326_cstack[$I19]
  rx1326_cstack_done3719:
    pop rx1326_rep, rx1326_bstack
    pop rx1326_pos, rx1326_bstack
    pop $I19, rx1326_bstack
    lt rx1326_pos, -1, rx1326_done3714
    lt rx1326_pos, 0, rx1326_fail3716
    eq $I19, 0, rx1326_fail3716
    nqp_islist $I20, rx1326_cstack
    unless $I20, rx1326_jump3717
    elements $I18, rx1326_bstack
    le $I18, 0, rx1326_cut3718
    dec $I18
    set $I18, rx1326_bstack[$I18]
  rx1326_cut3718:
    assign rx1326_cstack, $I18
  rx1326_jump3717:
    jump $I19
  rx1326_done3714:
    rx1326_cur."!cursor_fail"()
    .return (rx1326_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_241_1359292300.247") :anon :lex :outer("cuid_240_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1331_tgt
    .local int rx1331_pos
    .local int rx1331_off
    .local int rx1331_eos
    .local int rx1331_rep
    .local pmc rx1331_cur
    .local pmc rx1331_curclass
    .local pmc rx1331_bstack
    .local pmc rx1331_cstack
    (rx1331_cur, rx1331_tgt, rx1331_pos, rx1331_curclass, rx1331_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1331_cur
    length rx1331_eos, rx1331_tgt
    eq $I19, 1, rx1331_restart3730
    gt rx1331_pos, rx1331_eos, rx1331_fail3731
    repr_get_attr_int $I11, self, rx1331_curclass, "$!from"
    ne $I11, -1, rxscan1332_done3737
    goto rxscan1332_scan3736
  rxscan1332_loop3735:
    inc rx1331_pos
    gt rx1331_pos, rx1331_eos, rx1331_fail3731
    repr_bind_attr_int rx1331_cur, rx1331_curclass, "$!from", rx1331_pos
  rxscan1332_scan3736:
    nqp_rxmark rx1331_bstack, rxscan1332_loop3735, rx1331_pos, 0
  rxscan1332_done3737:
    add $I11, rx1331_pos, 1
    gt $I11, rx1331_eos, rx1331_fail3731
    substr $S10, rx1331_tgt, rx1331_pos, 1
    ne $S10, ucs4:">", rx1331_fail3731
    add rx1331_pos, 1
    rx1331_cur."!cursor_pass"(rx1331_pos, 'backtrack'=>1)
    .return (rx1331_cur)
  rx1331_restart3730:
    repr_get_attr_obj rx1331_cstack, rx1331_cur, rx1331_curclass, "$!cstack"
  rx1331_fail3731:
    unless rx1331_bstack, rx1331_done3729
    pop $I19, rx1331_bstack
    if_null rx1331_cstack, rx1331_cstack_done3734
    unless rx1331_cstack, rx1331_cstack_done3734
    dec $I19
    set $P11, rx1331_cstack[$I19]
  rx1331_cstack_done3734:
    pop rx1331_rep, rx1331_bstack
    pop rx1331_pos, rx1331_bstack
    pop $I19, rx1331_bstack
    lt rx1331_pos, -1, rx1331_done3729
    lt rx1331_pos, 0, rx1331_fail3731
    eq $I19, 0, rx1331_fail3731
    nqp_islist $I20, rx1331_cstack
    unless $I20, rx1331_jump3732
    elements $I18, rx1331_bstack
    le $I18, 0, rx1331_cut3733
    dec $I18
    set $I18, rx1331_bstack[$I18]
  rx1331_cut3733:
    assign rx1331_cstack, $I18
  rx1331_jump3732:
    jump $I19
  rx1331_done3729:
    rx1331_cur."!cursor_fail"()
    .return (rx1331_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_242_1359292300.247") :anon :lex :outer("cuid_410_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1422
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1338_tgt
    .local int rx1338_pos
    .local int rx1338_off
    .local int rx1338_eos
    .local int rx1338_rep
    .local pmc rx1338_cur
    .local pmc rx1338_curclass
    .local pmc rx1338_bstack
    .local pmc rx1338_cstack
    (rx1338_cur, rx1338_tgt, rx1338_pos, rx1338_curclass, rx1338_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1338_cur
    length rx1338_eos, rx1338_tgt
    eq $I19, 1, rx1338_restart3749
    gt rx1338_pos, rx1338_eos, rx1338_fail3750
    repr_get_attr_int $I11, self, rx1338_curclass, "$!from"
    ne $I11, -1, rxscan1339_done3756
    goto rxscan1339_scan3755
  rxscan1339_loop3754:
    inc rx1338_pos
    gt rx1338_pos, rx1338_eos, rx1338_fail3750
    repr_bind_attr_int rx1338_cur, rx1338_curclass, "$!from", rx1338_pos
  rxscan1339_scan3755:
    nqp_rxmark rx1338_bstack, rxscan1339_loop3754, rx1338_pos, 0
  rxscan1339_done3756:
    ge rx1338_pos, rx1338_eos, rx1338_fail3750
    substr $S11, rx1338_tgt, rx1338_pos, 1
    index $I11, ucs4:"$@", $S11
    lt $I11, 0, rx1338_fail3750
    repr_bind_attr_int rx1338_cur, rx1338_curclass, "$!pos", rx1338_pos
    $P11 = rx1338_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1338_curclass, "$!pos"
    lt $I11, 0, rx1338_fail3750
    nqp_rxmark rx1338_bstack, rxsubrule1340_pass3757, -1, 0
  rxsubrule1340_pass3757:
    rx1338_cstack = rx1338_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1338_pos, $P11, rx1338_curclass, "$!pos"
    rx1338_cur."!cursor_pass"(rx1338_pos, "assertion:sym<var>", 'backtrack'=>1)
    .return (rx1338_cur)
  rx1338_restart3749:
    repr_get_attr_obj rx1338_cstack, rx1338_cur, rx1338_curclass, "$!cstack"
  rx1338_fail3750:
    unless rx1338_bstack, rx1338_done3748
    pop $I19, rx1338_bstack
    if_null rx1338_cstack, rx1338_cstack_done3753
    unless rx1338_cstack, rx1338_cstack_done3753
    dec $I19
    set $P11, rx1338_cstack[$I19]
  rx1338_cstack_done3753:
    pop rx1338_rep, rx1338_bstack
    pop rx1338_pos, rx1338_bstack
    pop $I19, rx1338_bstack
    lt rx1338_pos, -1, rx1338_done3748
    lt rx1338_pos, 0, rx1338_fail3750
    eq $I19, 0, rx1338_fail3750
    nqp_islist $I20, rx1338_cstack
    unless $I20, rx1338_jump3751
    elements $I18, rx1338_bstack
    le $I18, 0, rx1338_cut3752
    dec $I18
    set $I18, rx1338_bstack[$I18]
  rx1338_cut3752:
    assign rx1338_cstack, $I18
  rx1338_jump3751:
    jump $I19
  rx1338_done3748:
    rx1338_cur."!cursor_fail"()
    .return (rx1338_cur) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_243_1359292300.247") :anon :lex :outer("cuid_410_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1426
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1341_tgt
    .local int rx1341_pos
    .local int rx1341_off
    .local int rx1341_eos
    .local int rx1341_rep
    .local pmc rx1341_cur
    .local pmc rx1341_curclass
    .local pmc rx1341_bstack
    .local pmc rx1341_cstack
    (rx1341_cur, rx1341_tgt, rx1341_pos, rx1341_curclass, rx1341_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1341_cur
    length rx1341_eos, rx1341_tgt
    eq $I19, 1, rx1341_restart3760
    gt rx1341_pos, rx1341_eos, rx1341_fail3761
    repr_get_attr_int $I11, self, rx1341_curclass, "$!from"
    ne $I11, -1, rxscan1342_done3767
    goto rxscan1342_scan3766
  rxscan1342_loop3765:
    inc rx1341_pos
    gt rx1341_pos, rx1341_eos, rx1341_fail3761
    repr_bind_attr_int rx1341_cur, rx1341_curclass, "$!from", rx1341_pos
  rxscan1342_scan3766:
    nqp_rxmark rx1341_bstack, rxscan1342_loop3765, rx1341_pos, 0
  rxscan1342_done3767:
    repr_bind_attr_int rx1341_cur, rx1341_curclass, "$!pos", rx1341_pos
    $P11 = rx1341_cur."LANG"("MAIN", "pblock")
    repr_get_attr_int $I11, $P11, rx1341_curclass, "$!pos"
    lt $I11, 0, rx1341_fail3761
    nqp_rxmark rx1341_bstack, rxsubrule1343_pass3768, -1, 0
  rxsubrule1343_pass3768:
    rx1341_cstack = rx1341_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1341_pos, $P11, rx1341_curclass, "$!pos"
    rx1341_cur."!cursor_pass"(rx1341_pos, "codeblock", 'backtrack'=>1)
    .return (rx1341_cur)
  rx1341_restart3760:
    repr_get_attr_obj rx1341_cstack, rx1341_cur, rx1341_curclass, "$!cstack"
  rx1341_fail3761:
    unless rx1341_bstack, rx1341_done3759
    pop $I19, rx1341_bstack
    if_null rx1341_cstack, rx1341_cstack_done3764
    unless rx1341_cstack, rx1341_cstack_done3764
    dec $I19
    set $P11, rx1341_cstack[$I19]
  rx1341_cstack_done3764:
    pop rx1341_rep, rx1341_bstack
    pop rx1341_pos, rx1341_bstack
    pop $I19, rx1341_bstack
    lt rx1341_pos, -1, rx1341_done3759
    lt rx1341_pos, 0, rx1341_fail3761
    eq $I19, 0, rx1341_fail3761
    nqp_islist $I20, rx1341_cstack
    unless $I20, rx1341_jump3762
    elements $I18, rx1341_bstack
    le $I18, 0, rx1341_cut3763
    dec $I18
    set $I18, rx1341_bstack[$I18]
  rx1341_cut3763:
    assign rx1341_cstack, $I18
  rx1341_jump3762:
    jump $I19
  rx1341_done3759:
    rx1341_cur."!cursor_fail"()
    .return (rx1341_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_244_1359292300.247") :anon :lex :outer("cuid_410_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1430
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1344_tgt
    .local int rx1344_pos
    .local int rx1344_off
    .local int rx1344_eos
    .local int rx1344_rep
    .local pmc rx1344_cur
    .local pmc rx1344_curclass
    .local pmc rx1344_bstack
    .local pmc rx1344_cstack
    (rx1344_cur, rx1344_tgt, rx1344_pos, rx1344_curclass, rx1344_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1344_cur
    length rx1344_eos, rx1344_tgt
    eq $I19, 1, rx1344_restart3771
    gt rx1344_pos, rx1344_eos, rx1344_fail3772
    repr_get_attr_int $I11, self, rx1344_curclass, "$!from"
    ne $I11, -1, rxscan1345_done3778
    goto rxscan1345_scan3777
  rxscan1345_loop3776:
    inc rx1344_pos
    gt rx1344_pos, rx1344_eos, rx1344_fail3772
    repr_bind_attr_int rx1344_cur, rx1344_curclass, "$!from", rx1344_pos
  rxscan1345_scan3777:
    nqp_rxmark rx1344_bstack, rxscan1345_loop3776, rx1344_pos, 0
  rxscan1345_done3778:
    repr_bind_attr_int rx1344_cur, rx1344_curclass, "$!pos", rx1344_pos
    $P11 = rx1344_cur."LANG"("MAIN", "quote_EXPR")
    repr_get_attr_int $I11, $P11, rx1344_curclass, "$!pos"
    lt $I11, 0, rx1344_fail3772
    nqp_rxmark rx1344_bstack, rxsubrule1346_pass3779, -1, 0
  rxsubrule1346_pass3779:
    rx1344_cstack = rx1344_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1344_pos, $P11, rx1344_curclass, "$!pos"
    rx1344_cur."!cursor_pass"(rx1344_pos, "arg", 'backtrack'=>1)
    .return (rx1344_cur)
  rx1344_restart3771:
    repr_get_attr_obj rx1344_cstack, rx1344_cur, rx1344_curclass, "$!cstack"
  rx1344_fail3772:
    unless rx1344_bstack, rx1344_done3770
    pop $I19, rx1344_bstack
    if_null rx1344_cstack, rx1344_cstack_done3775
    unless rx1344_cstack, rx1344_cstack_done3775
    dec $I19
    set $P11, rx1344_cstack[$I19]
  rx1344_cstack_done3775:
    pop rx1344_rep, rx1344_bstack
    pop rx1344_pos, rx1344_bstack
    pop $I19, rx1344_bstack
    lt rx1344_pos, -1, rx1344_done3770
    lt rx1344_pos, 0, rx1344_fail3772
    eq $I19, 0, rx1344_fail3772
    nqp_islist $I20, rx1344_cstack
    unless $I20, rx1344_jump3773
    elements $I18, rx1344_bstack
    le $I18, 0, rx1344_cut3774
    dec $I18
    set $I18, rx1344_bstack[$I18]
  rx1344_cut3774:
    assign rx1344_cstack, $I18
  rx1344_jump3773:
    jump $I19
  rx1344_done3770:
    rx1344_cur."!cursor_fail"()
    .return (rx1344_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_411_1359292300.247") :anon :lex :outer("cuid_371_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1441
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3781
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5003
  fallback3781:
    set $P101, $P5002
    nqp_get_sc_object $P5007, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3784
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5008
  fallback3784:
    type_check $I5001, $P101, $P5004
    if $I5001 goto unless1347_end3783 
.annotate 'line', 1443
    box $P5009, "Pre-increment can only work on a variable"
    die $P5009
  unless1347_end3783:
.annotate 'line', 1446
    nqp_get_sc_object $P5013, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback3785
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5014
  fallback3785:
.annotate 'line', 1449
    nqp_get_sc_object $P5018, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback3786
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5015, $P5019
  fallback3786:
.annotate 'line', 1452
    nqp_get_sc_object $P5023, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["IVal"]
    unless_null $P5020, fallback3787
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5020, $P5024
  fallback3787:
    $P5025 = $P5020."new"(1 :named("value"))
    $P5026 = $P5015."new"($P101, $P5025, "add_n" :named("op"))
    $P5027 = $P5010."new"($P101, $P5026, "bind" :named("op"))
    $P5028 = _lex_param_0."as_post"($P5027)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_412_1359292300.247") :anon :lex :outer("cuid_371_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1456
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3788
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5003
  fallback3788:
    set $P101, $P5002
    nqp_get_sc_object $P5007, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3791
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5008
  fallback3791:
    type_check $I5001, $P101, $P5004
    if $I5001 goto unless1348_end3790 
.annotate 'line', 1458
    box $P5009, "Pre-decrement can only work on a variable"
    die $P5009
  unless1348_end3790:
.annotate 'line', 1461
    nqp_get_sc_object $P5013, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback3792
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5014
  fallback3792:
.annotate 'line', 1464
    nqp_get_sc_object $P5018, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback3793
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5015, $P5019
  fallback3793:
.annotate 'line', 1467
    nqp_get_sc_object $P5023, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["IVal"]
    unless_null $P5020, fallback3794
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5020, $P5024
  fallback3794:
    $P5025 = $P5020."new"(1 :named("value"))
    $P5026 = $P5015."new"($P101, $P5025, "sub_n" :named("op"))
    $P5027 = $P5010."new"($P101, $P5026, "bind" :named("op"))
    $P5028 = _lex_param_0."as_post"($P5027)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_413_1359292300.247") :anon :lex :outer("cuid_371_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1471
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3795
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5004
  fallback3795:
    set $P101, $P5003
.annotate 'line', 1473
    nqp_get_sc_object $P5008, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3796
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5005, $P5009
  fallback3796:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3799
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5015
  fallback3799:
    type_check $I5001, $P101, $P5011
    if $I5001 goto unless1349_end3798 
.annotate 'line', 1474
    box $P5016, "Post-increment can only work on a variable"
    die $P5016
  unless1349_end3798:
.annotate 'line', 1477
    nqp_get_sc_object $P5020, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmt"]
    unless_null $P5017, fallback3800
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5017, $P5021
  fallback3800:
.annotate 'line', 1479
    nqp_get_sc_object $P5025, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Op"]
    unless_null $P5022, fallback3801
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5022, $P5026
  fallback3801:
.annotate 'line', 1481
    nqp_get_sc_object $P5030, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback3802
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5027, $P5031
  fallback3802:
    $P5032 = $P101."returns"()
    $P5033 = $P5027."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"), $P5032 :named("returns"))
    $P5034 = $P5022."new"($P5033, $P101, "bind" :named("op"))
.annotate 'line', 1484
    nqp_get_sc_object $P5038, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Op"]
    unless_null $P5035, fallback3803
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5035, $P5039
  fallback3803:
.annotate 'line', 1487
    nqp_get_sc_object $P5043, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Op"]
    unless_null $P5040, fallback3804
    nqp_get_sc_object $P5044, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5040, $P5044
  fallback3804:
.annotate 'line', 1489
    nqp_get_sc_object $P5048, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["Var"]
    unless_null $P5045, fallback3805
    nqp_get_sc_object $P5049, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5045, $P5049
  fallback3805:
    $P5050 = $P101."returns"()
    $P5051 = $P5045."new"($P102 :named("name"), "local" :named("scope"), $P5050 :named("returns"))
.annotate 'line', 1490
    nqp_get_sc_object $P5055, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["IVal"]
    unless_null $P5052, fallback3806
    nqp_get_sc_object $P5056, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5052, $P5056
  fallback3806:
    $P5057 = $P5052."new"(1 :named("value"))
    $P5058 = $P5040."new"($P5051, $P5057, "add_n" :named("op"))
    $P5059 = $P5035."new"($P101, $P5058, "bind" :named("op"))
    $P5060 = $P5017."new"($P5034, $P5059, 0 :named("resultchild"))
    $P5061 = _lex_param_0."as_post"($P5060)
    .return ($P5061) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_414_1359292300.247") :anon :lex :outer("cuid_371_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1495
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3807
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5004
  fallback3807:
    set $P101, $P5003
.annotate 'line', 1497
    nqp_get_sc_object $P5008, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3808
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5005, $P5009
  fallback3808:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3811
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5015
  fallback3811:
    type_check $I5001, $P101, $P5011
    if $I5001 goto unless1350_end3810 
.annotate 'line', 1498
    box $P5016, "Post-decrement can only work on a variable"
    die $P5016
  unless1350_end3810:
.annotate 'line', 1501
    nqp_get_sc_object $P5020, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmt"]
    unless_null $P5017, fallback3812
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5017, $P5021
  fallback3812:
.annotate 'line', 1503
    nqp_get_sc_object $P5025, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Op"]
    unless_null $P5022, fallback3813
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5022, $P5026
  fallback3813:
.annotate 'line', 1505
    nqp_get_sc_object $P5030, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback3814
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5027, $P5031
  fallback3814:
    $P5032 = $P5027."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"))
    $P5033 = $P5022."new"($P5032, $P101, "bind" :named("op"))
.annotate 'line', 1508
    nqp_get_sc_object $P5037, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback3815
    nqp_get_sc_object $P5038, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5034, $P5038
  fallback3815:
.annotate 'line', 1511
    nqp_get_sc_object $P5042, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["Op"]
    unless_null $P5039, fallback3816
    nqp_get_sc_object $P5043, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5039, $P5043
  fallback3816:
.annotate 'line', 1513
    nqp_get_sc_object $P5047, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["Var"]
    unless_null $P5044, fallback3817
    nqp_get_sc_object $P5048, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5044, $P5048
  fallback3817:
    $P5049 = $P5044."new"($P102 :named("name"), "local" :named("scope"))
.annotate 'line', 1514
    nqp_get_sc_object $P5053, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["IVal"]
    unless_null $P5050, fallback3818
    nqp_get_sc_object $P5054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5050, $P5054
  fallback3818:
    $P5055 = $P5050."new"(1 :named("value"))
    $P5056 = $P5039."new"($P5049, $P5055, "sub_n" :named("op"))
    $P5057 = $P5034."new"($P101, $P5056, "bind" :named("op"))
    $P5058 = $P5017."new"($P5033, $P5057, 0 :named("resultchild"))
    $P5059 = _lex_param_0."as_post"($P5058)
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_415_1359292300.247") :anon :lex :outer("cuid_371_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1519
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1520
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3819
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5002
  fallback3819:
    $P5003 = _lex_param_0."as_post"($P5001, "n" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_416_1359292300.247") :anon :lex :outer("cuid_371_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1523
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1524
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3820
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5002
  fallback3820:
    $P5003 = _lex_param_0."as_post"($P5001, "s" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_417_1359292300.247") :anon :lex :outer("cuid_371_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1527
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1528
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3821
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback3821:
.annotate 'line', 1530
    nqp_get_sc_object $P5009, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Op"]
    unless_null $P5006, fallback3822
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5010
  fallback3822:
    set $P5011, _lex_param_1[0]
    unless_null $P5011, fallback3823
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5012
  fallback3823:
    $P5013 = $P5006."new"($P5011, "where" :named("op"))
.annotate 'line', 1531
    nqp_get_sc_object $P5017, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Op"]
    unless_null $P5014, fallback3824
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5014, $P5018
  fallback3824:
    set $P5019, _lex_param_1[1]
    unless_null $P5019, fallback3825
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5019, $P5020
  fallback3825:
    $P5021 = $P5014."new"($P5019, "where" :named("op"))
    $P5022 = $P5001."new"($P5013, $P5021, "iseq_i" :named("op"))
    $P5023 = _lex_param_0."as_post"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_418_1359292300.247") :anon :lex :outer("cuid_371_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1535
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$res", $P101 
    .lex "$ops", $P102 
    .lex "$arg_post", $P103 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P103, $P5003
.annotate 'line', 1536
    find_dynamic_lex $P5004, "$*REGALLOC"
    unless_null $P5004, fallback3826
    nqp_get_sc_object $P5007, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$REGALLOC"]
    unless_null $P5005, fallback3827
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5005, $P5008
  fallback3827:
    unless_null $P5005, vivi_13513828
    die "Contextual $*REGALLOC not found"
    box $P5009, "Contextual $*REGALLOC not found"
    set $P5005, $P5009
  vivi_13513828:
    set $P5004, $P5005
  fallback3826:
    $P5010 = $P5004."fresh_i"()
    set $P101, $P5010
.annotate 'line', 1537
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5013, $P5014, "PIRT"
    get_who $P5012, $P5013
    set $P5011, $P5012["Ops"]
    unless_null $P5011, fallback3829
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5015
  fallback3829:
    $P5016 = $P5011."new"($P101 :named("result"))
    set $P102, $P5016
.annotate 'line', 1538
    set $P5017, _lex_param_1[0]
    unless_null $P5017, fallback3830
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5017, $P5018
  fallback3830:
    $P5019 = _lex_param_0."as_post"($P5017)
    set $P103, $P5019
.annotate 'line', 1539
    $P5020 = $P103."result"()
    $P5021 = _lex_param_0."infer_type"($P5020)
    set $S5002, $P5021
    downcase $S5001, $S5002
    iseq $I5001, $S5001, "i"
    unless $I5001 goto if1352_else3831 
.annotate 'line', 1540
    $P102."push"($P103)
.annotate 'line', 1541
    $P5022 = $P102."push_pirop"("not", $P101, $P103)
    goto if1352_end3832
  if1352_else3831:
.annotate 'line', 1543
.annotate 'line', 1544
    $P5023 = _lex_param_0."coerce"($P103, "P")
    set $P103, $P5023
.annotate 'line', 1545
    $P102."push"($P103)
.annotate 'line', 1546
    $P5024 = $P102."push_pirop"("isfalse", $P101, $P103)
  if1352_end3832:
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_420_1359292300.247") :anon :lex :outer("cuid_371_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1552
    .const 'Sub' $P5124 = 'cuid_419_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_423_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_426_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_427_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_430_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_432_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_433_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_434_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_436_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_437_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_442_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_245_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_246_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_247_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_248_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_249_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_250_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_251_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_252_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_253_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_254_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_255_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_256_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_257_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_258_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_259_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_260_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_261_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_262_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_263_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_264_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_265_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_266_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_267_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_268_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_269_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_270_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_271_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_272_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_273_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_274_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_275_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_276_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_277_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_278_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_279_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_280_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_281_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_282_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_283_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_284_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_285_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_286_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_287_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_288_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_289_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_290_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_291_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_292_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_293_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_294_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_295_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_296_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_297_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_298_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_299_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_300_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_301_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_302_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_303_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_304_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_305_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_306_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_307_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_308_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_309_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_310_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_311_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_312_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_313_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_314_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_315_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_316_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_317_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_318_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_319_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_320_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_321_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_322_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_323_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_324_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_325_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_326_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_327_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_328_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_329_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_330_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_331_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_332_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_333_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_334_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_335_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_336_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_337_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_338_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_339_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_340_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_341_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_342_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_343_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_344_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_345_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_346_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_347_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_348_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_349_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_350_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_351_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_352_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_353_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_354_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_355_1359292300.247' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_356_1359292300.247' 
    capture_lex $P5124 
    .lex "&xblock_immediate", $P101 
    .lex "&block_immediate", $P102 
    .lex "&default_for", $P103 
    .lex "&default_value_for_prim", $P104 
    .lex "&colonpair_str", $P105 
    .lex "&import_HOW_exports", $P106 
    .lex "&set_block_handler", $P107 
    .lex "&only_star_block", $P108 
    .lex "&attach_multi_signature", $P109 
    .lex "&wrap_return_handler", $P110 
    .lex "&lexical_package_lookup", $P111 
    .lex "$?PACKAGE", $P112 
    .lex "$?CLASS", $P113 
    .const 'Sub' $P5001 = 'cuid_419_1359292300.247' 
    capture_lex $P5001
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_423_1359292300.247' 
    capture_lex $P5002
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_426_1359292300.247' 
    capture_lex $P5003
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_427_1359292300.247' 
    capture_lex $P5004
    set $P104, $P5004
    .const 'Sub' $P5005 = 'cuid_430_1359292300.247' 
    capture_lex $P5005
    set $P105, $P5005
    .const 'Sub' $P5006 = 'cuid_432_1359292300.247' 
    capture_lex $P5006
    set $P106, $P5006
    .const 'Sub' $P5007 = 'cuid_433_1359292300.247' 
    capture_lex $P5007
    set $P107, $P5007
    .const 'Sub' $P5008 = 'cuid_434_1359292300.247' 
    capture_lex $P5008
    set $P108, $P5008
    .const 'Sub' $P5009 = 'cuid_436_1359292300.247' 
    capture_lex $P5009
    set $P109, $P5009
    .const 'Sub' $P5010 = 'cuid_437_1359292300.247' 
    capture_lex $P5010
    set $P110, $P5010
    .const 'Sub' $P5011 = 'cuid_442_1359292300.247' 
    capture_lex $P5011
    set $P111, $P5011
    .const 'Sub' $P5012 = 'cuid_245_1359292300.247' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_246_1359292300.247' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_247_1359292300.247' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_248_1359292300.247' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_249_1359292300.247' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_250_1359292300.247' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_251_1359292300.247' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_252_1359292300.247' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_253_1359292300.247' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_254_1359292300.247' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_255_1359292300.247' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_256_1359292300.247' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_257_1359292300.247' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_258_1359292300.247' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_259_1359292300.247' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_260_1359292300.247' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_261_1359292300.247' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_262_1359292300.247' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_263_1359292300.247' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_264_1359292300.247' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_265_1359292300.247' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_266_1359292300.247' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_267_1359292300.247' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_268_1359292300.247' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_269_1359292300.247' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_270_1359292300.247' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_271_1359292300.247' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_272_1359292300.247' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_273_1359292300.247' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_274_1359292300.247' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_275_1359292300.247' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_276_1359292300.247' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_277_1359292300.247' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_278_1359292300.247' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_279_1359292300.247' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_280_1359292300.247' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_281_1359292300.247' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_282_1359292300.247' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_283_1359292300.247' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_284_1359292300.247' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_285_1359292300.247' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_286_1359292300.247' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_287_1359292300.247' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_288_1359292300.247' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_289_1359292300.247' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_290_1359292300.247' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_291_1359292300.247' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_292_1359292300.247' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_293_1359292300.247' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_294_1359292300.247' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_295_1359292300.247' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_296_1359292300.247' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_297_1359292300.247' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_298_1359292300.247' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_299_1359292300.247' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_300_1359292300.247' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_301_1359292300.247' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_302_1359292300.247' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_303_1359292300.247' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_304_1359292300.247' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_305_1359292300.247' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_306_1359292300.247' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_307_1359292300.247' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_308_1359292300.247' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_309_1359292300.247' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_310_1359292300.247' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_311_1359292300.247' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_312_1359292300.247' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_313_1359292300.247' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_314_1359292300.247' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_315_1359292300.247' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_316_1359292300.247' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_317_1359292300.247' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_318_1359292300.247' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_319_1359292300.247' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_320_1359292300.247' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_321_1359292300.247' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_322_1359292300.247' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_323_1359292300.247' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_324_1359292300.247' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_325_1359292300.247' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_326_1359292300.247' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_327_1359292300.247' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_328_1359292300.247' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_329_1359292300.247' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_330_1359292300.247' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_331_1359292300.247' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_332_1359292300.247' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_333_1359292300.247' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_334_1359292300.247' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_335_1359292300.247' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_336_1359292300.247' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_337_1359292300.247' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_338_1359292300.247' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_339_1359292300.247' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_340_1359292300.247' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_341_1359292300.247' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_342_1359292300.247' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_343_1359292300.247' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_344_1359292300.247' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_345_1359292300.247' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_346_1359292300.247' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_347_1359292300.247' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_348_1359292300.247' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_349_1359292300.247' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_350_1359292300.247' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_351_1359292300.247' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_352_1359292300.247' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_353_1359292300.247' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_354_1359292300.247' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_355_1359292300.247' 
    capture_lex $P5122
    .const 'Sub' $P5123 = 'cuid_356_1359292300.247' 
    capture_lex $P5123
    .return ($P111) 
.end
.HLL "nqp"
.namespace []
.sub "xblock_immediate" :subid("cuid_419_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1553
    .param pmc _lex_param_0 
    .lex "$xblock", _lex_param_0 
.annotate 'line', 1554
    set $P5001, _lex_param_0[1]
    unless_null $P5001, fallback3833
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5002
  fallback3833:
    $P5003 = "&block_immediate"($P5001)
    set _lex_param_0[1], $P5003
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "block_immediate" :subid("cuid_423_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1558
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_422_1359292300.247' 
    capture_lex $P5004 
    .lex "$block", _lex_param_0 
.annotate 'line', 1559
    _lex_param_0."blocktype"("immediate")
.annotate 'line', 1560
    $P5001 = _lex_param_0."symtable"()
    if $P5001 goto unless1353_end3835 
    .const 'Sub' $P5002 = 'cuid_422_1359292300.247' 
    capture_lex $P5002
    $P5003 = $P5002()
  unless1353_end3835:
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_422_1359292300.247") :anon :lex :outer("cuid_423_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1560
    .const 'Sub' $P5017 = 'cuid_421_1359292300.247' 
    capture_lex $P5017 
    .lex "$stmts", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 1561
    nqp_get_sc_object $P5005, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback3836
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5006
  fallback3836:
    find_lex $P5007, "$block"
    $P5008 = $P5007."node"()
    $P5009 = $P5002."new"($P5008 :named("node"))
    set $P101, $P5009
.annotate 'line', 1562
    find_lex $P5013, "$block"
    $P5014 = $P5013."list"()
    set $P5010, $P5014
    iter $P5012, $P5014
  for_next3837:
    unless $P5012, for_done3839
    shift $P5016, $P5012
  for_redo3838:
    .const 'Sub' $P5015 = 'cuid_421_1359292300.247' 
    capture_lex $P5015
    $P5010 = $P5015($P5016)
    goto for_next3837
  for_done3839:
    store_lex "$block", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_421_1359292300.247") :anon :lex :outer("cuid_422_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1562
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$stmts"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "default_for" :subid("cuid_426_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1568
    .param pmc _lex_param_0 
    .const 'Sub' $P5017 = 'cuid_425_1359292300.247' 
    capture_lex $P5017 
    .lex "$sigil", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1354_else3840 
.annotate 'line', 1569
.annotate 'line', 1570
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3842
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback3842:
    $P5006 = $P5001."new"("list" :named("op"))
    set $P5016, $P5006
    goto if1354_end3841
  if1354_else3840:
    set $S5002, _lex_param_0
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1355_else3843 
.annotate 'line', 1572
.annotate 'line', 1573
    nqp_get_sc_object $P5010, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback3845
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5011
  fallback3845:
    $P5012 = $P5007."new"("hash" :named("op"))
    set $P5015, $P5012
    goto if1355_end3844
  if1355_else3843:
    .const 'Sub' $P5013 = 'cuid_425_1359292300.247' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  if1355_end3844:
    set $P5016, $P5015
  if1354_end3841:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_425_1359292300.247") :anon :lex :outer("cuid_426_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1575
    .const 'Sub' $P5022 = 'cuid_424_1359292300.247' 
    capture_lex $P5022 
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_13603854
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 1577
    new $P5018, 'ExceptionHandler'
    set_label $P5018, catch_handler_13583851
    $P5018.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5018
.annotate 'line', 1578
    nqp_get_sc_object $P5005, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["WVal"]
    unless_null $P5002, fallback3846
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5006
  fallback3846:
    find_dynamic_lex $P5007, "$*W"
    unless_null $P5007, fallback3847
    nqp_get_sc_object $P5010, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$W"]
    unless_null $P5008, fallback3848
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5011
  fallback3848:
    unless_null $P5008, vivi_13563849
    die "Contextual $*W not found"
    box $P5012, "Contextual $*W not found"
    set $P5008, $P5012
  vivi_13563849:
    set $P5007, $P5008
  fallback3847:
    new $P5013, 'ResizablePMCArray'
    box $P5014, "NQPMu"
    push $P5013, $P5014
    $P5015 = $P5007."find_sym"($P5013)
    $P5016 = $P5002."new"($P5015 :named("value"))
    set $P101, $P5016
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5019, $P5017
    pop_eh 
    goto skip_handler_13573850
  catch_handler_13583851:
    .get_results ($P5018) 
    .const 'Sub' $P10001 = 'cuid_424_1359292300.247' 
    capture_lex $P10001
    $P10001($P5018)
    set $I10001, 1
    set $P5018["handled"], $I10001
    nqp_get_sc_object $P10002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    finalize $P5018
    pop_upto_eh $P5018
    pop_eh 
    set $P5019, $P10002
    goto skip_handler_13573850
  skip_handler_13573850:
    set $P5021, $P5019
    pop_eh 
    goto skip_handler_13593853
  catch_handler_13603854:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_13593853
  skip_handler_13593853:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_424_1359292300.247") :anon :lex :outer("cuid_425_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1579
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3852
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback3852:
    $P5006 = $P5001."new"("null" :named("op"))
    store_lex "$default", $P5006
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "default_value_for_prim" :subid("cuid_427_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1585
    .param pmc _lex_param_0 
    .lex "$prim", _lex_param_0 
    set $N5001, _lex_param_0
    set $N5002, 1
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if1361_else3855 
.annotate 'line', 1586
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["IVal"]
    unless_null $P5001, fallback3857
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback3857:
    $P5006 = $P5001."new"(0 :named("value"))
    set $P5020, $P5006
    goto if1361_end3856
  if1361_else3855:
    set $N5003, _lex_param_0
    set $N5004, 2
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1362_else3858 
.annotate 'line', 1587
    nqp_get_sc_object $P5010, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["NVal"]
    unless_null $P5007, fallback3860
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5011
  fallback3860:
    $P5012 = $P5007."new"(0.0 :named("value"))
    set $P5019, $P5012
    goto if1362_end3859
  if1362_else3858:
.annotate 'line', 1588
    nqp_get_sc_object $P5016, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["SVal"]
    unless_null $P5013, fallback3861
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5013, $P5017
  fallback3861:
    $P5018 = $P5013."new"("" :named("value"))
    set $P5019, $P5018
  if1362_end3859:
    set $P5020, $P5019
  if1361_end3856:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair_str" :subid("cuid_430_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1600
    .param pmc _lex_param_0 
    .const 'Sub' $P5010 = 'cuid_429_1359292300.247' 
    capture_lex $P5010 
    .lex "$ast", _lex_param_0 
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3864
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback3864:
    type_check $I5001, _lex_param_0, $P5001
    unless $I5001 goto if1363_else3862 
    .const 'Sub' $P5006 = 'cuid_429_1359292300.247' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5009, $P5007
    goto if1363_end3863
  if1363_else3862:
.annotate 'line', 1605
.annotate 'line', 1606
    $P5008 = _lex_param_0."value"()
    set $P5009, $P5008
  if1363_end3863:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_429_1359292300.247") :anon :lex :outer("cuid_430_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1601
    .const 'Sub' $P5009 = 'cuid_428_1359292300.247' 
    capture_lex $P5009 
    .lex "@parts", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 1603
    find_lex $P5005, "$ast"
    $P5006 = $P5005."list"()
    set $P5002, $P5006
    iter $P5004, $P5006
  for_next3865:
    unless $P5004, for_done3867
    shift $P5008, $P5004
  for_redo3866:
    .const 'Sub' $P5007 = 'cuid_428_1359292300.247' 
    capture_lex $P5007
    $P5002 = $P5007($P5008)
    goto for_next3865
  for_done3867:
    join $S5001, " ", $P101
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_428_1359292300.247") :anon :lex :outer("cuid_429_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1603
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "@parts"
    $P5002 = _lex_param_0."value"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "import_HOW_exports" :subid("cuid_432_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1791
    .param pmc _lex_param_0 
    .const 'Sub' $P5011 = 'cuid_431_1359292300.247' 
    capture_lex $P5011 
    .lex "$UNIT", _lex_param_0 
    exists $I5001, _lex_param_0["EXPORTHOW"]
    box $P5010, $I5001
    set $P5009, $P5010
    unless $I5001 goto if1364_end3869 
.annotate 'line', 1793
    set $P5005, _lex_param_0["EXPORTHOW"]
    unless_null $P5005, fallback3870
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5005, $P5006
  fallback3870:
    get_who $P5004, $P5005
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next3874:
    unless $P5003, for_done3876
    shift $P5008, $P5003
  for_redo3875:
    .const 'Sub' $P5007 = 'cuid_431_1359292300.247' 
    capture_lex $P5007
    $P5001 = $P5007($P5008)
    goto for_next3874
  for_done3876:
    set $P5009, $P5001
  if1364_end3869:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_431_1359292300.247") :anon :lex :outer("cuid_432_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1794
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_dynamic_lex $P5001, "%*HOW"
    unless_null $P5001, fallback3871
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HOW"]
    unless_null $P5002, fallback3872
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HOW"], $P5007
    set $P5002, $P5007
  fallback3872:
    unless_null $P5002, vivi_13653873
    die "Contextual %*HOW not found"
    box $P5008, "Contextual %*HOW not found"
    set $P5002, $P5008
  vivi_13653873:
    set $P5001, $P5002
  fallback3871:
.annotate 'line', 1795
    $P5009 = _lex_param_0."key"()
    set $S5001, $P5009
    $P5010 = _lex_param_0."value"()
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "set_block_handler" :subid("cuid_433_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1893
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$/", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$type", _lex_param_2 
    find_dynamic_lex $P5001, "%*HANDLERS"
    unless_null $P5001, fallback3879
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback3880
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback3880:
    unless_null $P5002, vivi_13673881
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_13673881:
    set $P5001, $P5002
  fallback3879:
    set $S5001, _lex_param_2
    exists $I5001, $P5001[$S5001]
    unless $I5001 goto if1366_end3878 
.annotate 'line', 1894
    set $S5004, _lex_param_2
    concat $S5003, "Duplicate ", $S5004
    concat $S5002, $S5003, " handler in block"
    box $P5009, $S5002
    die $P5009
  if1366_end3878:
.annotate 'line', 1897
    $P5010 = _lex_param_1."arity"()
    if $P5010 goto unless1368_end3883 
.annotate 'line', 1898
.annotate 'line', 1899
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback3884
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5015
  fallback3884:
.annotate 'line', 1900
    nqp_get_sc_object $P5019, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback3885
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5016, $P5020
  fallback3885:
    $P5021 = $P5016."new"("lexical" :named("scope"), "$!" :named("name"), "var" :named("decl"))
.annotate 'line', 1901
    nqp_get_sc_object $P5025, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Var"]
    unless_null $P5022, fallback3886
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5022, $P5026
  fallback3886:
    $P5027 = $P5022."new"("lexical" :named("scope"), "$_" :named("name"))
    $P5028 = $P5011."new"($P5021, $P5027, "bind" :named("op"))
    _lex_param_1."unshift"($P5028)
.annotate 'line', 1904
    nqp_get_sc_object $P5032, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Var"]
    unless_null $P5029, fallback3887
    nqp_get_sc_object $P5033, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5029, $P5033
  fallback3887:
    $P5034 = $P5029."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    _lex_param_1."unshift"($P5034)
.annotate 'line', 1905
    _lex_param_1."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1906
    _lex_param_1."symbol"("$!", "lexical" :named("scope"))
.annotate 'line', 1907
    $P5035 = _lex_param_1."arity"(1)
  unless1368_end3883:
.annotate 'line', 1909
    _lex_param_1."blocktype"("declaration")
    find_dynamic_lex $P5036, "%*HANDLERS"
    unless_null $P5036, fallback3888
    nqp_get_sc_object $P5039, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5038, $P5039
    set $P5037, $P5038["%HANDLERS"]
    unless_null $P5037, fallback3889
    nqp_get_sc_object $P5041, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5040, $P5041
    new $P5042, 'Hash'
    set $P5040["%HANDLERS"], $P5042
    set $P5037, $P5042
  fallback3889:
    unless_null $P5037, vivi_13693890
    die "Contextual %*HANDLERS not found"
    box $P5043, "Contextual %*HANDLERS not found"
    set $P5037, $P5043
  vivi_13693890:
    set $P5036, $P5037
  fallback3888:
    set $S5005, _lex_param_2
.annotate 'line', 1910
    nqp_get_sc_object $P5047, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["Stmts"]
    unless_null $P5044, fallback3891
    nqp_get_sc_object $P5048, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5044, $P5048
  fallback3891:
.annotate 'line', 1911
    nqp_get_sc_object $P5052, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Op"]
    unless_null $P5049, fallback3892
    nqp_get_sc_object $P5053, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5049, $P5053
  fallback3892:
.annotate 'line', 1913
    nqp_get_sc_object $P5057, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Op"]
    unless_null $P5054, fallback3893
    nqp_get_sc_object $P5058, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5054, $P5058
  fallback3893:
    $P5059 = $P5054."new"("exception" :named("op"))
    $P5060 = $P5049."new"(_lex_param_1, $P5059, "call" :named("op"))
.annotate 'line', 1915
    nqp_get_sc_object $P5064, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["Op"]
    unless_null $P5061, fallback3894
    nqp_get_sc_object $P5065, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5061, $P5065
  fallback3894:
.annotate 'line', 1917
    nqp_get_sc_object $P5069, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5068, $P5069, "QAST"
    get_who $P5067, $P5068
    set $P5066, $P5067["Op"]
    unless_null $P5066, fallback3895
    nqp_get_sc_object $P5070, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5066, $P5070
  fallback3895:
    $P5071 = $P5066."new"("exception" :named("op"))
.annotate 'line', 1918
    nqp_get_sc_object $P5075, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5074, $P5075, "QAST"
    get_who $P5073, $P5074
    set $P5072, $P5073["SVal"]
    unless_null $P5072, fallback3896
    nqp_get_sc_object $P5076, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5072, $P5076
  fallback3896:
    $P5077 = $P5072."new"("handled" :named("value"))
.annotate 'line', 1919
    nqp_get_sc_object $P5081, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5080, $P5081, "QAST"
    get_who $P5079, $P5080
    set $P5078, $P5079["IVal"]
    unless_null $P5078, fallback3897
    nqp_get_sc_object $P5082, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5078, $P5082
  fallback3897:
    $P5083 = $P5078."new"(1 :named("value"))
    $P5084 = $P5061."new"($P5071, $P5077, $P5083, "bindkey_i" :named("op"))
.annotate 'line', 1921
    $P5085 = "&default_for"("$")
    $P5086 = $P5044."new"($P5060, $P5084, $P5085)
    set $P5036[$S5005], $P5086
    .return ($P5086) 
.end
.HLL "nqp"
.namespace []
.sub "only_star_block" :subid("cuid_434_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2524
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 2525
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback3898
    nqp_get_sc_object $P5005, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback3899
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5006
  fallback3899:
    unless_null $P5003, vivi_13703900
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13703900:
    set $P5002, $P5003
  fallback3898:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
.annotate 'line', 2526
    nqp_get_sc_object $P5012, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback3901
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5013
  fallback3901:
    $P5014 = $P5009."new"("nqpmultidispatch" :named("op"))
    $P101."push"($P5014)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "attach_multi_signature" :subid("cuid_436_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2530
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5020 = 'cuid_435_1359292300.247' 
    capture_lex $P5020 
    .lex "$types", $P101 
    .lex "$definednesses", $P102 
    .lex "$code_obj", _lex_param_0 
    .lex "$routine", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    new $P5003, 'ResizablePMCArray'
    set $P101, $P5003
    new $P5004, 'ResizablePMCArray'
    set $P102, $P5004
    set $P5008, _lex_param_1[0]
    unless_null $P5008, fallback3902
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5009
  fallback3902:
    $P5010 = $P5008."list"()
    set $P5005, $P5010
    iter $P5007, $P5010
  for_next3918:
    unless $P5007, for_done3920
    shift $P5012, $P5007
  for_redo3919:
    .const 'Sub' $P5011 = 'cuid_435_1359292300.247' 
    capture_lex $P5011
    $P5005 = $P5011($P5012)
    goto for_next3918
  for_done3920:
.annotate 'line', 2542
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback3921
    nqp_get_sc_object $P5016, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback3922
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5014, $P5017
  fallback3922:
    unless_null $P5014, vivi_13773923
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_13773923:
    set $P5013, $P5014
  fallback3921:
    $P5019 = $P5013."set_routine_signature"(_lex_param_0, $P101, $P102)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_435_1359292300.247") :anon :lex :outer("cuid_436_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2533
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3909
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback3909:
    type_check $I5001, _lex_param_0, $P5001
    set $I5003, $I5001
    unless $I5001 goto if1373_end3908 
.annotate 'line', 2534
    $P5006 = _lex_param_0."decl"()
    set $S5001, $P5006
    iseq $I5002, $S5001, "param"
    set $I5003, $I5002
  if1373_end3908:
    set $I5005, $I5003
    unless $I5003 goto if1372_end3906 
    $P5007 = _lex_param_0."named"()
    isfalse $I5004, $P5007
    set $I5005, $I5004
  if1372_end3906:
    box $P5021, $I5005
    set $P5020, $P5021
    unless $I5005 goto if1371_end3904 
.annotate 'line', 2535
    find_lex $P5008, "$types"
    $P5009 = _lex_param_0."returns"()
    get_id $I5007, $P5009
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    get_id $I5008, $P5010
    iseq $I5006, $I5007, $I5008
    unless $I5006 goto if1374_else3910 
    null $P5011
    set $P5013, $P5011
    goto if1374_end3911
  if1374_else3910:
.annotate 'line', 2537
    $P5012 = _lex_param_0."returns"()
    set $P5013, $P5012
  if1374_end3911:
    $P5008."push"($P5013)
.annotate 'line', 2538
    find_lex $P5014, "$definednesses"
    set $P5015, _lex_param_0["definedness"]
    unless_null $P5015, fallback3914
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5015, $P5016
  fallback3914:
    set $S5002, $P5015
    iseq $I5009, $S5002, "D"
    unless $I5009 goto if1375_else3912 
    set $I5012, 1
    goto if1375_end3913
  if1375_else3912:
    set $P5017, _lex_param_0["definedness"]
    unless_null $P5017, fallback3917
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5017, $P5018
  fallback3917:
    set $S5003, $P5017
    iseq $I5010, $S5003, "U"
    unless $I5010 goto if1376_else3915 
    set $I5011, 2
    goto if1376_end3916
  if1376_else3915:
    set $I5011, 0
  if1376_end3916:
    set $I5012, $I5011
  if1375_end3913:
    $P5019 = $P5014."push"($I5012)
    set $P5020, $P5019
  if1371_end3904:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "wrap_return_handler" :subid("cuid_437_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2545
    .param pmc _lex_param_0 
    .lex "$past", _lex_param_0 
.annotate 'line', 2546
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3924
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback3924:
    $P5006 = $P5001."new"(_lex_param_0, "lexotic" :named("op"), "RETURN" :named("name"))
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "lexical_package_lookup" :subid("cuid_442_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3018
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5072 = 'cuid_440_1359292300.247' 
    capture_lex $P5072 
    .lex "$final_name", $P101 
    .lex "$lookup", $P102 
    .lex "@name", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_3925
    .lex "RETURN", $P103
    set $N5001, _lex_param_0
    set $N5002, 0
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if1378_end3928 
.annotate 'line', 3020
    $P5003 = _lex_param_1."CURSOR"()
    $P5004 = $P5003."panic"("Cannot compile empty name")
  if1378_end3928:
.annotate 'line', 3024
    $P5005 = _lex_param_0."pop"()
    set $P101, $P5005
.annotate 'line', 3025
    nqp_get_sc_object $P5009, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["VarWithFallback"]
    unless_null $P5006, fallback3929
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5010
  fallback3929:
.annotate 'line', 3027
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback3930
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5015
  fallback3930:
    set $S5001, $P101
    $P5016 = $P5011."new"($S5001 :named("value"))
    $P5017 = $P5006."new"($P5016, "associative" :named("scope"))
    set $P102, $P5017
    set $N5003, _lex_param_0
    set $N5004, 0
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1379_else3931 
.annotate 'line', 3032
.annotate 'line', 3033
    nqp_get_sc_object $P5021, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["Op"]
    unless_null $P5018, fallback3933
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5018, $P5022
  fallback3933:
.annotate 'line', 3035
    nqp_get_sc_object $P5026, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["Var"]
    unless_null $P5023, fallback3934
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5023, $P5027
  fallback3934:
    $P5028 = $P5023."new"("$?PACKAGE" :named("name"), "lexical" :named("scope"))
    $P5029 = $P5018."new"($P5028, "who" :named("op"))
    $P102."unshift"($P5029)
.annotate 'line', 3037
    nqp_get_sc_object $P5033, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["Op"]
    unless_null $P5030, fallback3935
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5030, $P5034
  fallback3935:
.annotate 'line', 3039
    nqp_get_sc_object $P5038, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Op"]
    unless_null $P5035, fallback3936
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5035, $P5039
  fallback3936:
.annotate 'line', 3041
    nqp_get_sc_object $P5043, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Op"]
    unless_null $P5040, fallback3937
    nqp_get_sc_object $P5044, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5040, $P5044
  fallback3937:
.annotate 'line', 3043
    nqp_get_sc_object $P5048, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["WVal"]
    unless_null $P5045, fallback3938
    nqp_get_sc_object $P5049, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5045, $P5049
  fallback3938:
    find_dynamic_lex $P5050, "$*GLOBALish"
    unless_null $P5050, fallback3939
    nqp_get_sc_object $P5053, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$GLOBALish"]
    unless_null $P5051, fallback3940
    nqp_get_sc_object $P5054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5051, $P5054
  fallback3940:
    unless_null $P5051, vivi_13803941
    die "Contextual $*GLOBALish not found"
    box $P5055, "Contextual $*GLOBALish not found"
    set $P5051, $P5055
  vivi_13803941:
    set $P5050, $P5051
  fallback3939:
    $P5056 = $P5045."new"($P5050 :named("value"))
    $P5057 = $P5040."new"($P5056, "who" :named("op"))
.annotate 'line', 3045
    nqp_get_sc_object $P5061, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5060, $P5061, "QAST"
    get_who $P5059, $P5060
    set $P5058, $P5059["SVal"]
    unless_null $P5058, fallback3942
    nqp_get_sc_object $P5062, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5058, $P5062
  fallback3942:
    set $S5002, $P101
    $P5063 = $P5058."new"($S5002 :named("value"))
    $P5064 = $P5035."new"($P5057, $P5063, "atkey" :named("op"))
.annotate 'line', 3047
    set $S5004, $P101
    substr $S5003, $S5004, 0, 1
    $P5065 = "&default_for"($S5003)
    $P5066 = $P5030."new"($P5064, $P5065, "ifnull" :named("op"))
    $P5067 = $P102."fallback"($P5066)
    goto if1379_end3932
  if1379_else3931:
    .const 'Sub' $P5068 = 'cuid_440_1359292300.247' 
    capture_lex $P5068
    $P5069 = $P5068()
  if1379_end3932:
    find_lex $P5070, "RETURN"
    $P5071 = $P5070($P102)
    goto lexotic_3926
  lexotic_3925:
    .get_results ($P5071)
  lexotic_3926:
    .return ($P5071) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_440_1359292300.247") :anon :lex :outer("cuid_442_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3053
    .const 'Sub' $P5066 = 'cuid_439_1359292300.247' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_441_1359292300.247' 
    capture_lex $P5066 
    .lex "$path", $P101 
    .lex "$sigil", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
.annotate 'line', 3055
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback3945
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback3946
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5007
  fallback3946:
    unless_null $P5004, vivi_13823947
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_13823947:
    set $P5003, $P5004
  fallback3945:
    find_lex $P5010, "@name"
    set $P5009, $P5010[0]
    unless_null $P5009, fallback3948
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5011
  fallback3948:
    $P5012 = $P5003."is_lexical"($P5009)
    unless $P5012 goto if1381_else3943 
    .const 'Sub' $P5013 = 'cuid_439_1359292300.247' 
    capture_lex $P5013
    $P5014 = $P5013()
    goto if1381_end3944
  if1381_else3943:
.annotate 'line', 3064
.annotate 'line', 3065
    nqp_get_sc_object $P5018, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["WVal"]
    unless_null $P5015, fallback3956
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5015, $P5019
  fallback3956:
    find_dynamic_lex $P5020, "$*GLOBALish"
    unless_null $P5020, fallback3957
    nqp_get_sc_object $P5023, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$GLOBALish"]
    unless_null $P5021, fallback3958
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5021, $P5024
  fallback3958:
    unless_null $P5021, vivi_13863959
    die "Contextual $*GLOBALish not found"
    box $P5025, "Contextual $*GLOBALish not found"
    set $P5021, $P5025
  vivi_13863959:
    set $P5020, $P5021
  fallback3957:
    $P5026 = $P5015."new"($P5020 :named("value"))
    set $P101, $P5026
  if1381_end3944:
    find_lex $P5028, "@name"
    set $P5027, $P5028[0]
    unless_null $P5027, fallback3962
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5027, $P5029
  fallback3962:
    set $S5001, $P5027
    iseq $I5001, $S5001, "GLOBAL"
    unless $I5001 goto if1387_end3961 
.annotate 'line', 3067
.annotate 'line', 3068
    find_lex $P5030, "@name"
    $P5031 = $P5030."shift"()
  if1387_end3961:
    find_lex $P5035, "@name"
    set $P5032, $P5035
    iter $P5034, $P5035
  for_next3965:
    unless $P5034, for_done3967
    shift $P5037, $P5034
  for_redo3966:
    .const 'Sub' $P5036 = 'cuid_441_1359292300.247' 
    capture_lex $P5036
    $P5032 = $P5036($P5037)
    goto for_next3965
  for_done3967:
.annotate 'line', 3075
    find_lex $P5038, "$lookup"
    nqp_get_sc_object $P5042, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["Op"]
    unless_null $P5039, fallback3968
    nqp_get_sc_object $P5043, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5039, $P5043
  fallback3968:
    $P5044 = $P5039."new"($P101, "who" :named("op"))
    $P5038."unshift"($P5044)
    find_lex $P5045, "$final_name"
    set $S5003, $P5045
    substr $S5002, $S5003, 0, 1
    box $P5046, $S5002
    set $P102, $P5046
    set $S5004, $P102
    iseq $I5002, $S5004, "@"
    set $I5004, $I5002
    if $I5002 goto unless1389_end3972 
    set $S5005, $P102
    iseq $I5003, $S5005, "%"
    set $I5004, $I5003
  unless1389_end3972:
    unless $I5004 goto if1388_else3969 
.annotate 'line', 3077
.annotate 'line', 3078
    find_lex $P5047, "$lookup"
    nqp_get_sc_object $P5051, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Op"]
    unless_null $P5048, fallback3973
    nqp_get_sc_object $P5052, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5048, $P5052
  fallback3973:
    find_lex $P5054, "$lookup"
    set $P5053, $P5054[0]
    unless_null $P5053, fallback3974
    nqp_get_sc_object $P5055, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5053, $P5055
  fallback3974:
    find_lex $P5057, "$lookup"
    set $P5056, $P5057[1]
    unless_null $P5056, fallback3975
    nqp_get_sc_object $P5058, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5056, $P5058
  fallback3975:
.annotate 'line', 3082
    $P5059 = "&default_for"($P102)
    $P5060 = $P5048."new"($P5053, $P5056, $P5059, "bindkey" :named("op"))
    $P5061 = $P5047."fallback"($P5060)
    set $P5065, $P5061
    goto if1388_end3970
  if1388_else3969:
.annotate 'line', 3085
.annotate 'line', 3086
    find_lex $P5062, "$lookup"
    $P5063 = "&default_for"($P102)
    $P5064 = $P5062."fallback"($P5063)
    set $P5065, $P5064
  if1388_end3970:
    .return ($P5065) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_439_1359292300.247") :anon :lex :outer("cuid_440_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3056
    .const 'Sub' $P5021 = 'cuid_438_1359292300.247' 
    capture_lex $P5021 
    .lex "$first", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    new $P5019, 'ExceptionHandler'
    set_label $P5019, catch_handler_13853954
    $P5019.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5019
.annotate 'line', 3057
    find_lex $P5002, "@name"
    $P5003 = $P5002."shift"()
    set $P101, $P5003
.annotate 'line', 3058
    nqp_get_sc_object $P5007, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["WVal"]
    unless_null $P5004, fallback3949
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5008
  fallback3949:
    find_dynamic_lex $P5009, "$*W"
    unless_null $P5009, fallback3950
    nqp_get_sc_object $P5012, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$W"]
    unless_null $P5010, fallback3951
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5013
  fallback3951:
    unless_null $P5010, vivi_13833952
    die "Contextual $*W not found"
    box $P5014, "Contextual $*W not found"
    set $P5010, $P5014
  vivi_13833952:
    set $P5009, $P5010
  fallback3950:
    new $P5015, 'ResizablePMCArray'
    push $P5015, $P101
    $P5016 = $P5009."find_sym"($P5015)
    $P5017 = $P5004."new"($P5016 :named("value"))
    store_lex "$path", $P5017
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5020, $P5018
    pop_eh 
    goto skip_handler_13843953
  catch_handler_13853954:
    .get_results ($P5019) 
    .const 'Sub' $P10001 = 'cuid_438_1359292300.247' 
    capture_lex $P10001
    $P10001($P5019)
    set $I10001, 1
    set $P5019["handled"], $I10001
    nqp_get_sc_object $P10002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    finalize $P5019
    pop_upto_eh $P5019
    pop_eh 
    set $P5020, $P10002
    goto skip_handler_13843953
  skip_handler_13843953:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_438_1359292300.247") :anon :lex :outer("cuid_439_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3059
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 3060
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3955
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback3955:
    find_lex $P5006, "$first"
    $P5007 = $P5001."new"($P5006 :named("name"), "lexical" :named("scope"))
    store_lex "$path", $P5007
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_441_1359292300.247") :anon :lex :outer("cuid_440_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3070
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 3071
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback3963
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback3963:
    find_lex $P5006, "$path"
.annotate 'line', 3073
    nqp_get_sc_object $P5010, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["SVal"]
    unless_null $P5007, fallback3964
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5011
  fallback3964:
    set $S5001, _lex_param_0
    $P5012 = $P5007."new"($S5001 :named("value"))
    $P5013 = $P5001."new"($P5006, $P5012, "nqp_get_package_through_who PPs" :named("pirop"))
    store_lex "$path", $P5013
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_245_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1591
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback3976
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback3976:
    set $P5001, _lex_param_1["comp_unit"]
    unless_null $P5001, fallback3977
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback3977:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_246_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1593
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1594
    unless_null _lex_param_1, fallback3980
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback3980:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback3981
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback3981:
    unless $P5001 goto if1390_else3978 
    unless_null _lex_param_1, fallback3982
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5005
  fallback3982:
    set $P5004, _lex_param_1["identifier"]
    unless_null $P5004, fallback3983
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5006
  fallback3983:
    set $S5006, $P5004
    concat $S5005, $S5006, ":"
.annotate 'line', 1595
    unless_null _lex_param_1, fallback3984
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5009
  fallback3984:
    set $P5008, _lex_param_1["colonpair"]
    unless_null $P5008, fallback3985
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5010
  fallback3985:
    set $P5007, $P5008[0]
    unless_null $P5007, fallback3986
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5011
  fallback3986:
    $P5012 = $P5007."ast"()
    $P5013 = $P5012."named"()
    set $S5007, $P5013
    concat $S5004, $S5005, $S5007
    concat $S5003, $S5004, "<"
.annotate 'line', 1596
    unless_null _lex_param_1, fallback3987
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5016
  fallback3987:
    set $P5015, _lex_param_1["colonpair"]
    unless_null $P5015, fallback3988
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5015, $P5017
  fallback3988:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback3989
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5014, $P5018
  fallback3989:
    $P5019 = $P5014."ast"()
    $P5020 = "&colonpair_str"($P5019)
    set $S5008, $P5020
    concat $S5002, $S5003, $S5008
    concat $S5001, $S5002, ">"
    set $S5010, $S5001
    goto if1390_end3979
  if1390_else3978:
    set $S5009, _lex_param_1
    set $S5010, $S5009
  if1390_end3979:
    $P5021 = _lex_param_1."!make"($S5010)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_247_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1610
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$mainline", $P101 
    .lex "$unit", $P102 
    .lex "$compunit", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P103, $P5003
.annotate 'line', 1611
    unless_null _lex_param_1, fallback3990
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5005
  fallback3990:
    set $P5004, _lex_param_1["statementlist"]
    unless_null $P5004, fallback3991
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5006
  fallback3991:
    $P5007 = $P5004."ast"()
    set $P101, $P5007
.annotate 'line', 1612
    find_dynamic_lex $P5008, "$*W"
    unless_null $P5008, fallback3992
    nqp_get_sc_object $P5011, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$W"]
    unless_null $P5009, fallback3993
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5012
  fallback3993:
    unless_null $P5009, vivi_13913994
    die "Contextual $*W not found"
    box $P5013, "Contextual $*W not found"
    set $P5009, $P5013
  vivi_13913994:
    set $P5008, $P5009
  fallback3992:
    $P5014 = $P5008."pop_lexpad"()
    set $P102, $P5014
    find_dynamic_lex $P5015, "$*HAS_YOU_ARE_HERE"
    unless_null $P5015, fallback3997
    nqp_get_sc_object $P5018, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$HAS_YOU_ARE_HERE"]
    unless_null $P5016, fallback3998
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5016, $P5019
  fallback3998:
    unless_null $P5016, vivi_13933999
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5020, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5016, $P5020
  vivi_13933999:
    set $P5015, $P5016
  fallback3997:
    if $P5015 goto unless1392_end3996 
.annotate 'line', 1617
.annotate 'line', 1618
    nqp_decontainerize $P5021, _lex_param_0
    $P5022 = $P5021."CTXSAVE"()
    $P5023 = $P102."push"($P5022)
  unless1392_end3996:
.annotate 'line', 1625
    nqp_get_sc_object $P5027, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Var"]
    unless_null $P5024, fallback4000
    nqp_get_sc_object $P5028, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5024, $P5028
  fallback4000:
    $P5029 = $P5024."new"("lexical" :named("scope"), "@ARGS" :named("name"), "param" :named("decl"), 1 :named("slurpy"))
    $P102."unshift"($P5029)
    find_dynamic_lex $P5030, "$*MAIN_SUB"
    unless_null $P5030, fallback4003
    nqp_get_sc_object $P5033, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5032, $P5033
    set $P5031, $P5032["$MAIN_SUB"]
    unless_null $P5031, fallback4004
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5031, $P5034
  fallback4004:
    unless_null $P5031, vivi_13954005
    die "Contextual $*MAIN_SUB not found"
    box $P5035, "Contextual $*MAIN_SUB not found"
    set $P5031, $P5035
  vivi_13954005:
    set $P5030, $P5031
  fallback4003:
    unless $P5030 goto if1394_end4002 
.annotate 'line', 1626
.annotate 'line', 1627
    nqp_get_sc_object $P5039, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback4006
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5036, $P5040
  fallback4006:
.annotate 'line', 1629
    nqp_get_sc_object $P5044, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback4007
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5041, $P5045
  fallback4007:
    $P5046 = $P5041."new"("lexical" :named("scope"), "@ARGS" :named("name"))
.annotate 'line', 1630
    nqp_get_sc_object $P5050, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["Op"]
    unless_null $P5047, fallback4008
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5047, $P5051
  fallback4008:
.annotate 'line', 1631
    nqp_get_sc_object $P5055, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["BVal"]
    unless_null $P5052, fallback4009
    nqp_get_sc_object $P5056, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5052, $P5056
  fallback4009:
    find_dynamic_lex $P5057, "$*MAIN_SUB"
    unless_null $P5057, fallback4010
    nqp_get_sc_object $P5060, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["$MAIN_SUB"]
    unless_null $P5058, fallback4011
    nqp_get_sc_object $P5061, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5058, $P5061
  fallback4011:
    unless_null $P5058, vivi_13964012
    die "Contextual $*MAIN_SUB not found"
    box $P5062, "Contextual $*MAIN_SUB not found"
    set $P5058, $P5062
  vivi_13964012:
    set $P5057, $P5058
  fallback4010:
    $P5063 = $P5052."new"($P5057 :named("value"))
.annotate 'line', 1632
    nqp_get_sc_object $P5067, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["Var"]
    unless_null $P5064, fallback4013
    nqp_get_sc_object $P5068, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5064, $P5068
  fallback4013:
    $P5069 = $P5064."new"("lexical" :named("scope"), "@ARGS" :named("name"), 1 :named("flat"))
    $P5070 = $P5047."new"($P5063, $P5069, "call" :named("op"))
    $P5071 = $P5036."new"($P5046, $P5070, "if" :named("op"))
    $P5072 = $P101."push"($P5071)
  if1394_end4002:
.annotate 'line', 1638
    $P102."push"($P101)
.annotate 'line', 1641
    find_dynamic_lex $P5073, "$*W"
    unless_null $P5073, fallback4014
    nqp_get_sc_object $P5076, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5075, $P5076
    set $P5074, $P5075["$W"]
    unless_null $P5074, fallback4015
    nqp_get_sc_object $P5077, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5074, $P5077
  fallback4015:
    unless_null $P5074, vivi_13974016
    die "Contextual $*W not found"
    box $P5078, "Contextual $*W not found"
    set $P5074, $P5078
  vivi_13974016:
    set $P5073, $P5074
  fallback4014:
    $P5079 = $P5073."libs"()
    $P102."push"($P5079)
.annotate 'line', 1644
    nqp_get_sc_object $P5083, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["CompUnit"]
    unless_null $P5080, fallback4017
    nqp_get_sc_object $P5084, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5080, $P5084
  fallback4017:
.annotate 'line', 1648
    find_dynamic_lex $P5085, "$*W"
    unless_null $P5085, fallback4018
    nqp_get_sc_object $P5088, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5087, $P5088
    set $P5086, $P5087["$W"]
    unless_null $P5086, fallback4019
    nqp_get_sc_object $P5089, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5086, $P5089
  fallback4019:
    unless_null $P5086, vivi_13984020
    die "Contextual $*W not found"
    box $P5090, "Contextual $*W not found"
    set $P5086, $P5090
  vivi_13984020:
    set $P5085, $P5086
  fallback4018:
    $P5091 = $P5085."sc"()
.annotate 'line', 1649
    find_dynamic_lex $P5092, "$*W"
    unless_null $P5092, fallback4021
    nqp_get_sc_object $P5095, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5094, $P5095
    set $P5093, $P5094["$W"]
    unless_null $P5093, fallback4022
    nqp_get_sc_object $P5096, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5093, $P5096
  fallback4022:
    unless_null $P5093, vivi_13994023
    die "Contextual $*W not found"
    box $P5097, "Contextual $*W not found"
    set $P5093, $P5097
  vivi_13994023:
    set $P5092, $P5093
  fallback4021:
    $P5098 = $P5092."code_ref_blocks"()
.annotate 'line', 1650
    find_dynamic_lex $P5099, "$*W"
    unless_null $P5099, fallback4024
    nqp_get_sc_object $P5102, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5101, $P5102
    set $P5100, $P5101["$W"]
    unless_null $P5100, fallback4025
    nqp_get_sc_object $P5103, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5100, $P5103
  fallback4025:
    unless_null $P5100, vivi_14004026
    die "Contextual $*W not found"
    box $P5104, "Contextual $*W not found"
    set $P5100, $P5104
  vivi_14004026:
    set $P5099, $P5100
  fallback4024:
    $P5105 = $P5099."is_precompilation_mode"()
.annotate 'line', 1651
    find_dynamic_lex $P5106, "$*W"
    unless_null $P5106, fallback4027
    nqp_get_sc_object $P5109, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5108, $P5109
    set $P5107, $P5108["$W"]
    unless_null $P5107, fallback4028
    nqp_get_sc_object $P5110, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5107, $P5110
  fallback4028:
    unless_null $P5107, vivi_14014029
    die "Contextual $*W not found"
    box $P5111, "Contextual $*W not found"
    set $P5107, $P5111
  vivi_14014029:
    set $P5106, $P5107
  fallback4027:
    $P5112 = $P5106."load_dependency_tasks"()
.annotate 'line', 1652
    find_dynamic_lex $P5113, "$*W"
    unless_null $P5113, fallback4030
    nqp_get_sc_object $P5116, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5115, $P5116
    set $P5114, $P5115["$W"]
    unless_null $P5114, fallback4031
    nqp_get_sc_object $P5117, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5114, $P5117
  fallback4031:
    unless_null $P5114, vivi_14024032
    die "Contextual $*W not found"
    box $P5118, "Contextual $*W not found"
    set $P5114, $P5118
  vivi_14024032:
    set $P5113, $P5114
  fallback4030:
    $P5119 = $P5113."fixup_tasks"()
.annotate 'line', 1657
    nqp_get_sc_object $P5123, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5122, $P5123, "QAST"
    get_who $P5121, $P5122
    set $P5120, $P5121["Op"]
    unless_null $P5120, fallback4033
    nqp_get_sc_object $P5124, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5120, $P5124
  fallback4033:
.annotate 'line', 1659
    nqp_get_sc_object $P5128, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5127, $P5128, "QAST"
    get_who $P5126, $P5127
    set $P5125, $P5126["BVal"]
    unless_null $P5125, fallback4034
    nqp_get_sc_object $P5129, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5125, $P5129
  fallback4034:
    $P5130 = $P5125."new"($P102 :named("value"))
    $P5131 = $P5120."new"($P5130, "call" :named("op"))
.annotate 'line', 1664
    nqp_get_sc_object $P5135, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5134, $P5135, "QAST"
    get_who $P5133, $P5134
    set $P5132, $P5133["Stmts"]
    unless_null $P5132, fallback4035
    nqp_get_sc_object $P5136, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5132, $P5136
  fallback4035:
.annotate 'line', 1665
    nqp_get_sc_object $P5140, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5139, $P5140, "QAST"
    get_who $P5138, $P5139
    set $P5137, $P5138["Op"]
    unless_null $P5137, fallback4036
    nqp_get_sc_object $P5141, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5137, $P5141
  fallback4036:
.annotate 'line', 1667
    nqp_get_sc_object $P5145, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5144, $P5145, "QAST"
    get_who $P5143, $P5144
    set $P5142, $P5143["BVal"]
    unless_null $P5142, fallback4037
    nqp_get_sc_object $P5146, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5142, $P5146
  fallback4037:
    $P5147 = $P5142."new"($P102 :named("value"))
.annotate 'line', 1668
    nqp_get_sc_object $P5151, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5150, $P5151, "QAST"
    get_who $P5149, $P5150
    set $P5148, $P5149["Var"]
    unless_null $P5148, fallback4038
    nqp_get_sc_object $P5152, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5148, $P5152
  fallback4038:
    $P5153 = $P5148."new"("ARGS" :named("name"), "local" :named("scope"), "param" :named("decl"), 1 :named("slurpy"), 1 :named("flat"))
    $P5154 = $P5137."new"($P5147, $P5153, "call" :named("op"))
    $P5155 = $P5132."new"($P5154)
    $P5156 = $P5080."new"($P102, "nqp" :named("hll"), $P5091 :named("sc"), $P5098 :named("code_ref_blocks"), $P5105 :named("compilation_mode"), $P5112 :named("pre_deserialize"), $P5119 :named("post_deserialize"), $P5131 :named("load"), $P5155 :named("main"))
    set $P103, $P5156
.annotate 'line', 1677
    $P5157 = _lex_param_1."!make"($P103)
    .return ($P5157) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_248_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1680
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_443_1359292300.247' 
    capture_lex $P5022 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 1681
    nqp_get_sc_object $P5005, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback4039
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5006
  fallback4039:
    $P5007 = $P5002."new"(_lex_param_1 :named("node"))
    set $P101, $P5007
    unless_null _lex_param_1, fallback4042
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5009
  fallback4042:
    set $P5008, _lex_param_1["statement"]
    unless_null $P5008, fallback4043
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5010
  fallback4043:
    unless $P5008 goto if1403_else4040 
.annotate 'line', 1682
    unless_null _lex_param_1, fallback4044
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5015
  fallback4044:
    set $P5014, _lex_param_1["statement"]
    unless_null $P5014, fallback4045
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5014, $P5016
  fallback4045:
    set $P5011, $P5014
    iter $P5013, $P5014
  for_next4058:
    unless $P5013, for_done4060
    shift $P5018, $P5013
  for_redo4059:
    .const 'Sub' $P5017 = 'cuid_443_1359292300.247' 
    capture_lex $P5017
    $P5011 = $P5017($P5018)
    goto for_next4058
  for_done4060:
    goto if1403_end4041
  if1403_else4040:
.annotate 'line', 1691
.annotate 'line', 1692
    $P5019 = "&default_for"("$")
    $P5020 = $P101."push"($P5019)
  if1403_end4041:
.annotate 'line', 1694
    $P5021 = _lex_param_1."!make"($P101)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_443_1359292300.247") :anon :lex :outer("cuid_248_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1683
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 1684
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
    set $P5003, $P101["sink"]
    unless_null $P5003, fallback4048
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5004
  fallback4048:
    defined $I5001, $P5003
    unless $I5001 goto if1404_end4047 
    set $P5005, $P101["sink"]
    unless_null $P5005, fallback4049
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5005, $P5006
  fallback4049:
    set $P101, $P5005
  if1404_end4047:
    set $P5007, $P101["bareblock"]
    unless_null $P5007, fallback4052
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5008
  fallback4052:
    unless $P5007 goto if1405_end4051 
.annotate 'line', 1686
    set $P5009, $P101[0]
    unless_null $P5009, fallback4053
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5010
  fallback4053:
    $P5011 = "&block_immediate"($P5009)
    set $P101, $P5011
  if1405_end4051:
    nqp_get_sc_object $P5015, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Node"]
    unless_null $P5012, fallback4056
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5012, $P5016
  fallback4056:
    type_check $I5002, $P101, $P5012
    unless $I5002 goto if1406_end4055 
.annotate 'line', 1687
    nqp_get_sc_object $P5020, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmts"]
    unless_null $P5017, fallback4057
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5017, $P5021
  fallback4057:
    $P5022 = $P5017."new"($P101)
    set $P101, $P5022
  if1406_end4055:
.annotate 'line', 1688
    find_lex $P5023, "$past"
    $P5024 = $P5023."push"($P101)
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_249_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1697
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_4 :opt_flag 
    .const 'Sub' $P5018 = 'cuid_444_1359292300.247' 
    capture_lex $P5018 
    if haz_param_4, default4097
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_2, $P5017
  default4097:
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback4063
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5003
  fallback4063:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback4064
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5004
  fallback4064:
    unless $P5002 goto if1407_else4061 
    .const 'Sub' $P5005 = 'cuid_444_1359292300.247' 
    capture_lex $P5005
    $P5006 = $P5005()
    goto if1407_end4062
  if1407_else4061:
    unless_null _lex_param_1, fallback4093
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5008
  fallback4093:
    set $P5007, _lex_param_1["statement_control"]
    unless_null $P5007, fallback4094
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5009
  fallback4094:
    unless $P5007 goto if1411_else4091 
.annotate 'line', 1720
    unless_null _lex_param_1, fallback4095
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5011
  fallback4095:
    set $P5010, _lex_param_1["statement_control"]
    unless_null $P5010, fallback4096
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5012
  fallback4096:
    $P5013 = $P5010."ast"()
    set $P101, $P5013
    set $P5015, $P101
    goto if1411_end4092
  if1411_else4091:
.annotate 'line', 1721
    box $P5014, 0
    set $P101, $P5014
    set $P5015, $P101
  if1411_end4092:
  if1407_end4062:
.annotate 'line', 1722
    $P5016 = _lex_param_1."!make"($P101)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_444_1359292300.247") :anon :lex :outer("cuid_249_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1699
    .lex "$mc", $P101 
    .lex "$ml", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    find_lex $P5005, "$/"
    unless_null $P5005, fallback4065
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5005, $P5006
  fallback4065:
    set $P5004, $P5005["statement_mod_cond"]
    unless_null $P5004, fallback4066
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5007
  fallback4066:
    set $P5003, $P5004[0]
    unless_null $P5003, fallback4067
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5008
  fallback4067:
    set $P101, $P5003
    find_lex $P5011, "$/"
    unless_null $P5011, fallback4068
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5012
  fallback4068:
    set $P5010, $P5011["statement_mod_loop"]
    unless_null $P5010, fallback4069
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5013
  fallback4069:
    set $P5009, $P5010[0]
    unless_null $P5009, fallback4070
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5014
  fallback4070:
    set $P102, $P5009
.annotate 'line', 1702
    find_lex $P5016, "$/"
    unless_null $P5016, fallback4071
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5016, $P5017
  fallback4071:
    set $P5015, $P5016["EXPR"]
    unless_null $P5015, fallback4072
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5015, $P5018
  fallback4072:
    $P5019 = $P5015."ast"()
    store_lex "$past", $P5019
    unless $P101 goto if1408_end4074 
.annotate 'line', 1703
.annotate 'line', 1704
    nqp_get_sc_object $P5023, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback4075
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5020, $P5024
  fallback4075:
    set $P5025, $P101["cond"]
    unless_null $P5025, fallback4076
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5025, $P5026
  fallback4076:
    $P5027 = $P5025."ast"()
    find_lex $P5028, "$past"
    set $P5029, $P101["sym"]
    unless_null $P5029, fallback4077
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5029, $P5030
  fallback4077:
    set $S5001, $P5029
    find_lex $P5031, "$/"
    $P5032 = $P5020."new"($P5027, $P5028, $S5001 :named("op"), $P5031 :named("node"))
    store_lex "$past", $P5032
  if1408_end4074:
    set $P5077, $P102
    unless $P102 goto if1409_end4079 
.annotate 'line', 1706
    set $P5033, $P102["sym"]
    unless_null $P5033, fallback4082
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5033, $P5034
  fallback4082:
    set $S5002, $P5033
    iseq $I5001, $S5002, "for"
    unless $I5001 goto if1410_else4080 
.annotate 'line', 1707
.annotate 'line', 1708
    nqp_get_sc_object $P5038, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Block"]
    unless_null $P5035, fallback4083
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5035, $P5039
  fallback4083:
.annotate 'line', 1709
    nqp_get_sc_object $P5043, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Var"]
    unless_null $P5040, fallback4084
    nqp_get_sc_object $P5044, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5040, $P5044
  fallback4084:
    $P5045 = $P5040."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    find_lex $P5046, "$past"
    $P5047 = $P5035."new"($P5045, $P5046, "immediate" :named("blocktype"))
    store_lex "$past", $P5047
.annotate 'line', 1711
    find_lex $P5048, "$past"
    $P5048."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1712
    find_lex $P5049, "$past"
    $P5049."arity"(1)
.annotate 'line', 1713
    nqp_get_sc_object $P5053, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["Op"]
    unless_null $P5050, fallback4085
    nqp_get_sc_object $P5054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5050, $P5054
  fallback4085:
    set $P5055, $P102["cond"]
    unless_null $P5055, fallback4086
    nqp_get_sc_object $P5056, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5055, $P5056
  fallback4086:
    $P5057 = $P5055."ast"()
    find_lex $P5058, "$past"
    set $P5059, $P102["sym"]
    unless_null $P5059, fallback4087
    nqp_get_sc_object $P5060, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5059, $P5060
  fallback4087:
    set $S5003, $P5059
    find_lex $P5061, "$/"
    $P5062 = $P5050."new"($P5057, $P5058, $S5003 :named("op"), $P5061 :named("node"))
    store_lex "$past", $P5062
    set $P5076, $P5062
    goto if1410_end4081
  if1410_else4080:
.annotate 'line', 1715
.annotate 'line', 1716
    nqp_get_sc_object $P5066, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5065, $P5066, "QAST"
    get_who $P5064, $P5065
    set $P5063, $P5064["Op"]
    unless_null $P5063, fallback4088
    nqp_get_sc_object $P5067, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5063, $P5067
  fallback4088:
    set $P5068, $P102["cond"]
    unless_null $P5068, fallback4089
    nqp_get_sc_object $P5069, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5068, $P5069
  fallback4089:
    $P5070 = $P5068."ast"()
    find_lex $P5071, "$past"
    set $P5072, $P102["sym"]
    unless_null $P5072, fallback4090
    nqp_get_sc_object $P5073, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5072, $P5073
  fallback4090:
    set $S5004, $P5072
    find_lex $P5074, "$/"
    $P5075 = $P5063."new"($P5070, $P5071, $S5004 :named("op"), $P5074 :named("node"))
    store_lex "$past", $P5075
    set $P5076, $P5075
  if1410_end4081:
    set $P5077, $P5076
  if1409_end4079:
    .return ($P5077) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_250_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1725
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1726
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback4098
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback4098:
    unless_null _lex_param_1, fallback4099
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5007
  fallback4099:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback4100
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5008
  fallback4100:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback4101
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5011
  fallback4101:
    set $P5010, _lex_param_1["pblock"]
    unless_null $P5010, fallback4102
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5012
  fallback4102:
    $P5013 = $P5010."ast"()
    $P5014 = $P5001."new"($P5009, $P5013, "if" :named("op"), _lex_param_1 :named("node"))
    $P5015 = _lex_param_1."!make"($P5014)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_251_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1729
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1730
    unless_null _lex_param_1, fallback4103
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4103:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback4104
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4104:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_252_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1733
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1734
    unless_null _lex_param_1, fallback4105
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4105:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback4106
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4106:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_253_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1737
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5029 = 'cuid_446_1359292300.247' 
    capture_lex $P5029 
    .lex "$BLOCK", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 1738
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4107
    nqp_get_sc_object $P5005, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4108
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5006
  fallback4108:
    unless_null $P5003, vivi_14124109
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_14124109:
    set $P5002, $P5003
  fallback4107:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
    unless_null _lex_param_1, fallback4112
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5010
  fallback4112:
    set $P5009, _lex_param_1["statementlist"]
    unless_null $P5009, fallback4113
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5011
  fallback4113:
    unless $P5009 goto if1413_else4110 
    .const 'Sub' $P5012 = 'cuid_446_1359292300.247' 
    capture_lex $P5012
    $P5013 = $P5012()
    set $P5028, $P5013
    goto if1413_end4111
  if1413_else4110:
.annotate 'line', 1753
    find_dynamic_lex $P5014, "$*HAS_YOU_ARE_HERE"
    unless_null $P5014, fallback4138
    nqp_get_sc_object $P5017, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["$HAS_YOU_ARE_HERE"]
    unless_null $P5015, fallback4139
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5015, $P5018
  fallback4139:
    unless_null $P5015, vivi_14214140
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5019, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5015, $P5019
  vivi_14214140:
    set $P5014, $P5015
  fallback4138:
    unless $P5014 goto if1420_end4137 
.annotate 'line', 1754
.annotate 'line', 1755
    $P5020 = _lex_param_1."CURSOR"()
    $P5021 = $P5020."panic"("{YOU_ARE_HERE} may only appear once in a setting")
  if1420_end4137:
    box $P5022, 1
    store_dynamic_lex "$*HAS_YOU_ARE_HERE", $P5022
.annotate 'line', 1758
    unless_null _lex_param_1, fallback4141
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5024
  fallback4141:
    set $P5023, _lex_param_1["you_are_here"]
    unless_null $P5023, fallback4142
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5023, $P5025
  fallback4142:
    $P5026 = $P5023."ast"()
    $P5027 = _lex_param_1."!make"($P5026)
    set $P5028, $P5027
  if1413_end4111:
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_446_1359292300.247") :anon :lex :outer("cuid_253_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1739
    .const 'Sub' $P5057 = 'cuid_445_1359292300.247' 
    capture_lex $P5057 
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 1740
    find_lex $P5003, "$/"
    unless_null $P5003, fallback4114
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5004
  fallback4114:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback4115
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5005
  fallback4115:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    find_dynamic_lex $P5007, "%*HANDLERS"
    unless_null $P5007, fallback4118
    nqp_get_sc_object $P5010, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["%HANDLERS"]
    unless_null $P5008, fallback4119
    nqp_get_sc_object $P5012, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5011, $P5012
    new $P5013, 'Hash'
    set $P5011["%HANDLERS"], $P5013
    set $P5008, $P5013
  fallback4119:
    unless_null $P5008, vivi_14154120
    die "Contextual %*HANDLERS not found"
    box $P5014, "Contextual %*HANDLERS not found"
    set $P5008, $P5014
  vivi_14154120:
    set $P5007, $P5008
  fallback4118:
    unless $P5007 goto if1414_end4117 
.annotate 'line', 1741
.annotate 'line', 1742
    nqp_get_sc_object $P5018, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback4121
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5015, $P5019
  fallback4121:
    $P5020 = $P5015."new"($P101, "handle" :named("op"))
    set $P101, $P5020
    find_dynamic_lex $P5024, "%*HANDLERS"
    unless_null $P5024, fallback4122
    nqp_get_sc_object $P5027, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["%HANDLERS"]
    unless_null $P5025, fallback4123
    nqp_get_sc_object $P5029, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5028, $P5029
    new $P5030, 'Hash'
    set $P5028["%HANDLERS"], $P5030
    set $P5025, $P5030
  fallback4123:
    unless_null $P5025, vivi_14164124
    die "Contextual %*HANDLERS not found"
    box $P5031, "Contextual %*HANDLERS not found"
    set $P5025, $P5031
  vivi_14164124:
    set $P5024, $P5025
  fallback4122:
    set $P5021, $P5024
    iter $P5023, $P5024
  for_next4125:
    unless $P5023, for_done4127
    shift $P5033, $P5023
  for_redo4126:
    .const 'Sub' $P5032 = 'cuid_445_1359292300.247' 
    capture_lex $P5032
    $P5021 = $P5032($P5033)
    goto for_next4125
  for_done4127:
  if1414_end4117:
.annotate 'line', 1748
    find_lex $P5034, "$BLOCK"
    $P5034."push"($P101)
.annotate 'line', 1749
    find_lex $P5035, "$BLOCK"
    find_lex $P5036, "$/"
    $P5035."node"($P5036)
    find_dynamic_lex $P5037, "%*HANDLERS"
    unless_null $P5037, fallback4130
    nqp_get_sc_object $P5040, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["%HANDLERS"]
    unless_null $P5038, fallback4131
    nqp_get_sc_object $P5042, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5041, $P5042
    new $P5043, 'Hash'
    set $P5041["%HANDLERS"], $P5043
    set $P5038, $P5043
  fallback4131:
    unless_null $P5038, vivi_14184132
    die "Contextual %*HANDLERS not found"
    box $P5044, "Contextual %*HANDLERS not found"
    set $P5038, $P5044
  vivi_14184132:
    set $P5037, $P5038
  fallback4130:
    unless $P5037 goto if1417_end4129 
    find_lex $P5045, "$BLOCK"
    find_dynamic_lex $P5046, "%*HANDLERS"
    unless_null $P5046, fallback4133
    nqp_get_sc_object $P5049, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5048, $P5049
    set $P5047, $P5048["%HANDLERS"]
    unless_null $P5047, fallback4134
    nqp_get_sc_object $P5051, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5050, $P5051
    new $P5052, 'Hash'
    set $P5050["%HANDLERS"], $P5052
    set $P5047, $P5052
  fallback4134:
    unless_null $P5047, vivi_14194135
    die "Contextual %*HANDLERS not found"
    box $P5053, "Contextual %*HANDLERS not found"
    set $P5047, $P5053
  vivi_14194135:
    set $P5046, $P5047
  fallback4133:
    set $P5045["handlers"], $P5046
  if1417_end4129:
.annotate 'line', 1751
    find_dynamic_lex $P5054, "$/"
    find_lex $P5055, "$BLOCK"
    $P5056 = $P5054."!make"($P5055)
    .return ($P5056) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_445_1359292300.247") :anon :lex :outer("cuid_446_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1743
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1744
    find_lex $P5001, "$past"
    $P5002 = _lex_param_0."key"()
    $P5001."push"($P5002)
.annotate 'line', 1745
    find_lex $P5003, "$past"
    $P5004 = _lex_param_0."value"()
    $P5005 = $P5003."push"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_254_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1762
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1763
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4143
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4144
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5005
  fallback4144:
    unless_null $P5002, vivi_14224145
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14224145:
    set $P5001, $P5002
  fallback4143:
    $P5007 = $P5001."push_lexpad"(_lex_param_1)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_255_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1766
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_447_1359292300.247' 
    capture_lex $P5024 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback4148
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback4149
    nqp_get_sc_object $P5008, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback4149:
    unless_null $P5004, vivi_14244150
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_14244150:
    set $P5003, $P5004
  fallback4148:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback4151
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5011
  fallback4151:
    set $P5001, $P5002["outer_ctx"]
    unless_null $P5001, fallback4152
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5012
  fallback4152:
    defined $I5001, $P5001
    if $I5001 goto unless1423_end4147 
    .const 'Sub' $P5013 = 'cuid_447_1359292300.247' 
    capture_lex $P5013
    $P5014 = $P5013()
  unless1423_end4147:
.annotate 'line', 1788
    nqp_decontainerize $P5015, _lex_param_0
    find_dynamic_lex $P5016, "$*W"
    unless_null $P5016, fallback4208
    nqp_get_sc_object $P5019, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$W"]
    unless_null $P5017, fallback4209
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5017, $P5020
  fallback4209:
    unless_null $P5017, vivi_14414210
    die "Contextual $*W not found"
    box $P5021, "Contextual $*W not found"
    set $P5017, $P5021
  vivi_14414210:
    set $P5016, $P5017
  fallback4208:
    $P5022 = $P5016."cur_lexpad"()
    $P5023 = $P5015."SET_BLOCK_OUTER_CTX"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_447_1359292300.247") :anon :lex :outer("cuid_255_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1767
    .lex "$SETTING", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 1770
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4153
    nqp_get_sc_object $P5005, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4154
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5006
  fallback4154:
    unless_null $P5003, vivi_14254155
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_14254155:
    set $P5002, $P5003
  fallback4153:
    find_dynamic_lex $P5011, "%*COMPILING"
    unless_null $P5011, fallback4157
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["%COMPILING"]
    unless_null $P5012, fallback4158
    nqp_get_sc_object $P5016, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5015, $P5016
    new $P5017, 'Hash'
    set $P5015["%COMPILING"], $P5017
    set $P5012, $P5017
  fallback4158:
    unless_null $P5012, vivi_14264159
    die "Contextual %*COMPILING not found"
    box $P5018, "Contextual %*COMPILING not found"
    set $P5012, $P5018
  vivi_14264159:
    set $P5011, $P5012
  fallback4157:
    set $P5010, $P5011["%?OPTIONS"]
    unless_null $P5010, fallback4160
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5019
  fallback4160:
    set $P5009, $P5010["setting"]
    unless_null $P5009, fallback4161
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5020
  fallback4161:
    set $P5008, $P5009
    defined $I5001, $P5008
    if $I5001, defor4156
    box $P5021, "NQPCORE"
    set $P5008, $P5021
  defor4156:
    $P5022 = $P5002."load_setting"($P5008)
    set $P101, $P5022
    find_dynamic_lex $P5025, "%*COMPILING"
    unless_null $P5025, fallback4164
    nqp_get_sc_object $P5028, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["%COMPILING"]
    unless_null $P5026, fallback4165
    nqp_get_sc_object $P5030, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5029, $P5030
    new $P5031, 'Hash'
    set $P5029["%COMPILING"], $P5031
    set $P5026, $P5031
  fallback4165:
    unless_null $P5026, vivi_14284166
    die "Contextual %*COMPILING not found"
    box $P5032, "Contextual %*COMPILING not found"
    set $P5026, $P5032
  vivi_14284166:
    set $P5025, $P5026
  fallback4164:
    set $P5024, $P5025["%?OPTIONS"]
    unless_null $P5024, fallback4167
    nqp_get_sc_object $P5033, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5024, $P5033
  fallback4167:
    set $P5023, $P5024["setting"]
    unless_null $P5023, fallback4168
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5023, $P5034
  fallback4168:
    set $S5001, $P5023
    iseq $I5002, $S5001, "NULL"
    box $P5112, $I5002
    set $P5111, $P5112
    if $I5002 goto unless1427_end4163 
.annotate 'line', 1775
.annotate 'line', 1776
    "&import_HOW_exports"($P101)
    find_dynamic_lex $P5037, "%*COMPILING"
    unless_null $P5037, fallback4171
    nqp_get_sc_object $P5040, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["%COMPILING"]
    unless_null $P5038, fallback4172
    nqp_get_sc_object $P5042, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5041, $P5042
    new $P5043, 'Hash'
    set $P5041["%COMPILING"], $P5043
    set $P5038, $P5043
  fallback4172:
    unless_null $P5038, vivi_14304173
    die "Contextual %*COMPILING not found"
    box $P5044, "Contextual %*COMPILING not found"
    set $P5038, $P5044
  vivi_14304173:
    set $P5037, $P5038
  fallback4171:
    set $P5036, $P5037["%?OPTIONS"]
    unless_null $P5036, fallback4174
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5036, $P5045
  fallback4174:
    set $P5035, $P5036["old-regex-lib"]
    unless_null $P5035, fallback4175
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5035, $P5046
  fallback4175:
    unless $P5035 goto if1429_end4170 
.annotate 'line', 1777
.annotate 'line', 1778
    find_dynamic_lex $P5047, "$*W"
    unless_null $P5047, fallback4176
    nqp_get_sc_object $P5050, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$W"]
    unless_null $P5048, fallback4177
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5048, $P5051
  fallback4177:
    unless_null $P5048, vivi_14314178
    die "Contextual $*W not found"
    box $P5052, "Contextual $*W not found"
    set $P5048, $P5052
  vivi_14314178:
    set $P5047, $P5048
  fallback4176:
    find_dynamic_lex $P5053, "$*GLOBALish"
    unless_null $P5053, fallback4179
    nqp_get_sc_object $P5056, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$GLOBALish"]
    unless_null $P5054, fallback4180
    nqp_get_sc_object $P5057, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5054, $P5057
  fallback4180:
    unless_null $P5054, vivi_14324181
    die "Contextual $*GLOBALish not found"
    box $P5058, "Contextual $*GLOBALish not found"
    set $P5054, $P5058
  vivi_14324181:
    set $P5053, $P5054
  fallback4179:
    $P5059 = $P5047."load_module"("NQPRegex", $P5053)
  if1429_end4170:
    find_dynamic_lex $P5062, "%*COMPILING"
    unless_null $P5062, fallback4184
    nqp_get_sc_object $P5065, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["%COMPILING"]
    unless_null $P5063, fallback4185
    nqp_get_sc_object $P5067, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5066, $P5067
    new $P5068, 'Hash'
    set $P5066["%COMPILING"], $P5068
    set $P5063, $P5068
  fallback4185:
    unless_null $P5063, vivi_14344186
    die "Contextual %*COMPILING not found"
    box $P5069, "Contextual %*COMPILING not found"
    set $P5063, $P5069
  vivi_14344186:
    set $P5062, $P5063
  fallback4184:
    set $P5061, $P5062["%?OPTIONS"]
    unless_null $P5061, fallback4187
    nqp_get_sc_object $P5070, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5061, $P5070
  fallback4187:
    set $P5060, $P5061["no-regex-lib"]
    unless_null $P5060, fallback4188
    nqp_get_sc_object $P5071, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5060, $P5071
  fallback4188:
    set $P5110, $P5060
    if $P5060 goto unless1433_end4183 
.annotate 'line', 1780
.annotate 'line', 1781
    find_dynamic_lex $P5072, "$*W"
    unless_null $P5072, fallback4189
    nqp_get_sc_object $P5075, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5074, $P5075
    set $P5073, $P5074["$W"]
    unless_null $P5073, fallback4190
    nqp_get_sc_object $P5076, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5073, $P5076
  fallback4190:
    unless_null $P5073, vivi_14354191
    die "Contextual $*W not found"
    box $P5077, "Contextual $*W not found"
    set $P5073, $P5077
  vivi_14354191:
    set $P5072, $P5073
  fallback4189:
    find_dynamic_lex $P5078, "$*GLOBALish"
    unless_null $P5078, fallback4192
    nqp_get_sc_object $P5081, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5080, $P5081
    set $P5079, $P5080["$GLOBALish"]
    unless_null $P5079, fallback4193
    nqp_get_sc_object $P5082, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5079, $P5082
  fallback4193:
    unless_null $P5079, vivi_14364194
    die "Contextual $*GLOBALish not found"
    box $P5083, "Contextual $*GLOBALish not found"
    set $P5079, $P5083
  vivi_14364194:
    set $P5078, $P5079
  fallback4192:
    $P5072."load_module"("QRegex", $P5078)
    find_dynamic_lex $P5086, "%*COMPILING"
    unless_null $P5086, fallback4197
    nqp_get_sc_object $P5089, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5088, $P5089
    set $P5087, $P5088["%COMPILING"]
    unless_null $P5087, fallback4198
    nqp_get_sc_object $P5091, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5090, $P5091
    new $P5092, 'Hash'
    set $P5090["%COMPILING"], $P5092
    set $P5087, $P5092
  fallback4198:
    unless_null $P5087, vivi_14384199
    die "Contextual %*COMPILING not found"
    box $P5093, "Contextual %*COMPILING not found"
    set $P5087, $P5093
  vivi_14384199:
    set $P5086, $P5087
  fallback4197:
    set $P5085, $P5086["%?OPTIONS"]
    unless_null $P5085, fallback4200
    nqp_get_sc_object $P5094, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5085, $P5094
  fallback4200:
    set $P5084, $P5085["old-regex-lib"]
    unless_null $P5084, fallback4201
    nqp_get_sc_object $P5095, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5084, $P5095
  fallback4201:
    set $P5109, $P5084
    if $P5084 goto unless1437_end4196 
.annotate 'line', 1782
.annotate 'line', 1783
    find_dynamic_lex $P5096, "$*W"
    unless_null $P5096, fallback4202
    nqp_get_sc_object $P5099, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5098, $P5099
    set $P5097, $P5098["$W"]
    unless_null $P5097, fallback4203
    nqp_get_sc_object $P5100, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5097, $P5100
  fallback4203:
    unless_null $P5097, vivi_14394204
    die "Contextual $*W not found"
    box $P5101, "Contextual $*W not found"
    set $P5097, $P5101
  vivi_14394204:
    set $P5096, $P5097
  fallback4202:
    find_dynamic_lex $P5102, "$*GLOBALish"
    unless_null $P5102, fallback4205
    nqp_get_sc_object $P5105, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5104, $P5105
    set $P5103, $P5104["$GLOBALish"]
    unless_null $P5103, fallback4206
    nqp_get_sc_object $P5106, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5103, $P5106
  fallback4206:
    unless_null $P5103, vivi_14404207
    die "Contextual $*GLOBALish not found"
    box $P5107, "Contextual $*GLOBALish not found"
    set $P5103, $P5107
  vivi_14404207:
    set $P5102, $P5103
  fallback4205:
    $P5108 = $P5096."load_module"("NQPP6QRegex", $P5102)
    set $P5109, $P5108
  unless1437_end4196:
    set $P5110, $P5109
  unless1433_end4183:
    set $P5111, $P5110
  unless1427_end4163:
    .return ($P5111) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_256_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1800
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1801
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."CTXSAVE"()
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_257_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1806
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 1807
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4211
    nqp_get_sc_object $P5005, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4212
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5006
  fallback4212:
    unless_null $P5003, vivi_14424213
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_14424213:
    set $P5002, $P5003
  fallback4211:
    unless_null _lex_param_1, fallback4214
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5009
  fallback4214:
    set $P5008, _lex_param_1["name"]
    unless_null $P5008, fallback4215
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5010
  fallback4215:
    set $S5001, $P5008
    find_dynamic_lex $P5011, "$*GLOBALish"
    unless_null $P5011, fallback4216
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$GLOBALish"]
    unless_null $P5012, fallback4217
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5012, $P5015
  fallback4217:
    unless_null $P5012, vivi_14434218
    die "Contextual $*GLOBALish not found"
    box $P5016, "Contextual $*GLOBALish not found"
    set $P5012, $P5016
  vivi_14434218:
    set $P5011, $P5012
  fallback4216:
    $P5017 = $P5002."load_module"($S5001, $P5011)
    set $P101, $P5017
    defined $I5001, $P101
    unless $I5001 goto if1444_end4220 
.annotate 'line', 1808
    exists $I5002, $P101["EXPORT"]
    set $I5004, $I5002
    unless $I5002 goto if1446_end4224 
    set $P5019, $P101["EXPORT"]
    unless_null $P5019, fallback4225
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5019, $P5020
  fallback4225:
    get_who $P5018, $P5019
    exists $I5003, $P5018["DEFAULT"]
    set $I5004, $I5003
  if1446_end4224:
    unless $I5004 goto if1445_end4222 
.annotate 'line', 1809
    find_dynamic_lex $P5021, "$*W"
    unless_null $P5021, fallback4226
    nqp_get_sc_object $P5024, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["$W"]
    unless_null $P5022, fallback4227
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5022, $P5025
  fallback4227:
    unless_null $P5022, vivi_14474228
    die "Contextual $*W not found"
    box $P5026, "Contextual $*W not found"
    set $P5022, $P5026
  vivi_14474228:
    set $P5021, $P5022
  fallback4226:
    set $P5030, $P101["EXPORT"]
    unless_null $P5030, fallback4229
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5030, $P5031
  fallback4229:
    get_who $P5029, $P5030
    set $P5028, $P5029["DEFAULT"]
    unless_null $P5028, fallback4230
    nqp_get_sc_object $P5032, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5028, $P5032
  fallback4230:
    get_who $P5027, $P5028
    $P5033 = $P5021."import"($P5027)
  if1445_end4222:
.annotate 'line', 1812
    $P5034 = "&import_HOW_exports"($P101)
  if1444_end4220:
.annotate 'line', 1814
    nqp_get_sc_object $P5038, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Stmts"]
    unless_null $P5035, fallback4231
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5035, $P5039
  fallback4231:
    $P5040 = $P5035."new"()
    $P5041 = _lex_param_1."!make"($P5040)
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_258_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1817
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_448_1359292300.247' 
    capture_lex $P5030 
    .lex "$count", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback4232
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5004
  fallback4232:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4233
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5005
  fallback4233:
    set $N5002, $P5003
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5006, $N5001
    set $P101, $P5006
.annotate 'line', 1819
    unless_null _lex_param_1, fallback4234
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5009
  fallback4234:
    set $P5008, _lex_param_1["xblock"]
    unless_null $P5008, fallback4235
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5010
  fallback4235:
    set $I5001, $P101
    set $P5007, $P5008[$I5001]
    unless_null $P5007, fallback4236
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5011
  fallback4236:
    $P5012 = $P5007."ast"()
    $P5013 = "&xblock_immediate"($P5012)
    set $P102, $P5013
    unless_null _lex_param_1, fallback4239
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5015
  fallback4239:
    set $P5014, _lex_param_1["else"]
    unless_null $P5014, fallback4240
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5014, $P5016
  fallback4240:
    unless $P5014 goto if1448_end4238 
.annotate 'line', 1820
.annotate 'line', 1821
    unless_null _lex_param_1, fallback4241
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5019
  fallback4241:
    set $P5018, _lex_param_1["else"]
    unless_null $P5018, fallback4242
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5018, $P5020
  fallback4242:
    set $P5017, $P5018[0]
    unless_null $P5017, fallback4243
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5017, $P5021
  fallback4243:
    $P5022 = $P5017."ast"()
    $P5023 = "&block_immediate"($P5022)
    $P5024 = $P102."push"($P5023)
  if1448_end4238:
  while1449_test4244:
    set $N5004, $P101
    set $N5005, 0
    isgt $I5002, $N5004, $N5005
    box $P5028, $I5002
    set $P5027, $P5028
    unless $I5002 goto while1449_done4248 
  while1449_redo4246:
    .const 'Sub' $P5025 = 'cuid_448_1359292300.247' 
    capture_lex $P5025
    $P5026 = $P5025()
    set $P5027, $P5026
    goto while1449_test4244 
  while1449_done4248:
.annotate 'line', 1830
    $P5029 = _lex_param_1."!make"($P102)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_448_1359292300.247") :anon :lex :outer("cuid_258_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1824
    .lex "$else", $P101 
    .local pmc tmp_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    find_lex $P5002, "$count"
    set tmp_1, $P5002
    set $N5002, tmp_1
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$count", $P5003
    find_lex $P5002, "$past"
    set $P101, $P5002
.annotate 'line', 1827
    find_lex $P5005, "$/"
    unless_null $P5005, fallback4249
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5005, $P5006
  fallback4249:
    set $P5004, $P5005["xblock"]
    unless_null $P5004, fallback4250
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5007
  fallback4250:
    find_lex $P5008, "$count"
    set $I5001, $P5008
    set $P5003, $P5004[$I5001]
    unless_null $P5003, fallback4251
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5009
  fallback4251:
    $P5010 = $P5003."ast"()
    $P5011 = "&xblock_immediate"($P5010)
    store_lex "$past", $P5011
.annotate 'line', 1828
    find_lex $P5012, "$past"
    $P5013 = $P5012."push"($P101)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_259_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1833
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 1834
    unless_null _lex_param_1, fallback4252
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5003
  fallback4252:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4253
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5004
  fallback4253:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1835
    $P101."op"("unless")
.annotate 'line', 1836
    $P5007 = _lex_param_1."!make"($P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_260_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1839
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 1840
    unless_null _lex_param_1, fallback4254
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5003
  fallback4254:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4255
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5004
  fallback4255:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1841
    unless_null _lex_param_1, fallback4256
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5008
  fallback4256:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback4257
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5009
  fallback4257:
    set $S5001, $P5007
    $P101."op"($S5001)
    find_dynamic_lex $P5010, "$*CONTROL_USED"
    unless_null $P5010, fallback4260
    nqp_get_sc_object $P5013, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$CONTROL_USED"]
    unless_null $P5011, fallback4261
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5014
  fallback4261:
    unless_null $P5011, vivi_14514262
    die "Contextual $*CONTROL_USED not found"
    box $P5015, "Contextual $*CONTROL_USED not found"
    set $P5011, $P5015
  vivi_14514262:
    set $P5010, $P5011
  fallback4260:
    if $P5010 goto unless1450_end4259 
.annotate 'line', 1842
.annotate 'line', 1843
    nqp_get_sc_object $P5019, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["IVal"]
    unless_null $P5016, fallback4263
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5016, $P5020
  fallback4263:
    $P5021 = $P5016."new"(1 :named("value"), "nohandler" :named("named"))
    $P5022 = $P101."push"($P5021)
  unless1450_end4259:
.annotate 'line', 1845
    $P5023 = _lex_param_1."!make"($P101)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_261_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1848
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback4264
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5004
  fallback4264:
    set $P5003, _lex_param_1["wu"]
    unless_null $P5003, fallback4265
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5005
  fallback4265:
    set $S5002, $P5003
    concat $S5001, "repeat_", $S5002
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback4268
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5008
  fallback4268:
    set $P5007, _lex_param_1["xblock"]
    unless_null $P5007, fallback4269
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5009
  fallback4269:
    unless $P5007 goto if1452_else4266 
.annotate 'line', 1851
.annotate 'line', 1852
    unless_null _lex_param_1, fallback4270
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5011
  fallback4270:
    set $P5010, _lex_param_1["xblock"]
    unless_null $P5010, fallback4271
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5012
  fallback4271:
    $P5013 = $P5010."ast"()
    $P5014 = "&xblock_immediate"($P5013)
    set $P102, $P5014
.annotate 'line', 1853
    $P5015 = $P102."op"($P101)
    goto if1452_end4267
  if1452_else4266:
.annotate 'line', 1855
.annotate 'line', 1856
    nqp_get_sc_object $P5019, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Op"]
    unless_null $P5016, fallback4272
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5016, $P5020
  fallback4272:
    unless_null _lex_param_1, fallback4273
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5022
  fallback4273:
    set $P5021, _lex_param_1["EXPR"]
    unless_null $P5021, fallback4274
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5021, $P5023
  fallback4274:
    $P5024 = $P5021."ast"()
    unless_null _lex_param_1, fallback4275
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5026
  fallback4275:
    set $P5025, _lex_param_1["pblock"]
    unless_null $P5025, fallback4276
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5025, $P5027
  fallback4276:
    $P5028 = $P5025."ast"()
    $P5029 = "&block_immediate"($P5028)
    $P5030 = $P5016."new"($P5024, $P5029, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P102, $P5030
  if1452_end4267:
    find_dynamic_lex $P5031, "$*CONTROL_USED"
    unless_null $P5031, fallback4279
    nqp_get_sc_object $P5034, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$CONTROL_USED"]
    unless_null $P5032, fallback4280
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5032, $P5035
  fallback4280:
    unless_null $P5032, vivi_14544281
    die "Contextual $*CONTROL_USED not found"
    box $P5036, "Contextual $*CONTROL_USED not found"
    set $P5032, $P5036
  vivi_14544281:
    set $P5031, $P5032
  fallback4279:
    if $P5031 goto unless1453_end4278 
.annotate 'line', 1859
.annotate 'line', 1860
    nqp_get_sc_object $P5040, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["IVal"]
    unless_null $P5037, fallback4282
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5037, $P5041
  fallback4282:
    $P5042 = $P5037."new"(1 :named("value"), "nohandler" :named("named"))
    $P5043 = $P102."push"($P5042)
  unless1453_end4278:
.annotate 'line', 1862
    $P5044 = _lex_param_1."!make"($P102)
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_262_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1865
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
.annotate 'line', 1866
    unless_null _lex_param_1, fallback4283
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5004
  fallback4283:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4284
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5005
  fallback4284:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 1867
    $P101."op"("for")
    set $P5007, $P101[1]
    unless_null $P5007, fallback4285
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5008
  fallback4285:
    set $P102, $P5007
.annotate 'line', 1869
    $P5009 = $P102."arity"()
    if $P5009 goto unless1455_end4287 
.annotate 'line', 1870
    set $P5010, $P102[0]
    unless_null $P5010, fallback4288
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5011
  fallback4288:
    nqp_get_sc_object $P5015, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4289
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5012, $P5016
  fallback4289:
    $P5017 = $P5012."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5010."push"($P5017)
.annotate 'line', 1871
    $P102."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1872
    $P5018 = $P102."arity"(1)
  unless1455_end4287:
.annotate 'line', 1874
    $P102."blocktype"("immediate")
    find_dynamic_lex $P5019, "$*CONTROL_USED"
    unless_null $P5019, fallback4292
    nqp_get_sc_object $P5022, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$CONTROL_USED"]
    unless_null $P5020, fallback4293
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5020, $P5023
  fallback4293:
    unless_null $P5020, vivi_14574294
    die "Contextual $*CONTROL_USED not found"
    box $P5024, "Contextual $*CONTROL_USED not found"
    set $P5020, $P5024
  vivi_14574294:
    set $P5019, $P5020
  fallback4292:
    if $P5019 goto unless1456_end4291 
.annotate 'line', 1875
.annotate 'line', 1876
    nqp_get_sc_object $P5028, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["IVal"]
    unless_null $P5025, fallback4295
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5025, $P5029
  fallback4295:
    $P5030 = $P5025."new"(1 :named("value"), "nohandler" :named("named"))
    $P5031 = $P101."push"($P5030)
  unless1456_end4291:
.annotate 'line', 1878
    $P5032 = _lex_param_1."!make"($P101)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_263_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1881
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 1882
    unless_null _lex_param_1, fallback4296
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5003
  fallback4296:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4297
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5004
  fallback4297:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1883
    "&set_block_handler"(_lex_param_1, $P101, "CATCH")
.annotate 'line', 1884
    $P5006 = "&default_for"("$")
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_264_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1887
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 1888
    unless_null _lex_param_1, fallback4298
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5003
  fallback4298:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4299
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5004
  fallback4299:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1889
    "&set_block_handler"(_lex_param_1, $P101, "CONTROL")
.annotate 'line', 1890
    $P5006 = "&default_for"("$")
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_265_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1924
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1925
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4300
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4301
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5005
  fallback4301:
    unless_null $P5002, vivi_14584302
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14584302:
    set $P5001, $P5002
  fallback4300:
    unless_null _lex_param_1, fallback4303
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5008
  fallback4303:
    set $P5007, _lex_param_1["blorst"]
    unless_null $P5007, fallback4304
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5009
  fallback4304:
    $P5010 = $P5007."ast"()
    $P5011 = $P5001."run_begin_block"($P5010)
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_266_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1928
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1929
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4305
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4306
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5005
  fallback4306:
    unless_null $P5002, vivi_14594307
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14594307:
    set $P5001, $P5002
  fallback4305:
    $P5007 = $P5001."cur_lexpad"()
    unless_null _lex_param_1, fallback4308
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5009
  fallback4308:
    set $P5008, _lex_param_1["blorst"]
    unless_null $P5008, fallback4309
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5010
  fallback4309:
    $P5011 = $P5008."ast"()
    $P5007."push"($P5011)
.annotate 'line', 1930
    nqp_get_sc_object $P5015, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Stmts"]
    unless_null $P5012, fallback4310
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5012, $P5016
  fallback4310:
    $P5017 = $P5012."new"()
    $P5018 = _lex_param_1."!make"($P5017)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_267_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1933
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_4311
    .lex "RETURN", $P102
.annotate 'line', 1934
    unless_null _lex_param_1, fallback4313
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5003
  fallback4313:
    set $P5002, _lex_param_1["blorst"]
    unless_null $P5002, fallback4314
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5004
  fallback4314:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
    nqp_get_sc_object $P5009, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback4317
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5010
  fallback4317:
    type_check $I5001, $P101, $P5006
    unless $I5001 goto if1460_end4316 
.annotate 'line', 1935
    set $P5011, $P101["handlers"]
    unless_null $P5011, fallback4322
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5012
  fallback4322:
    set $P5015, $P5011
    unless $P5011 goto if1462_end4321 
    set $P5013, $P101["handlers"]
    unless_null $P5013, fallback4323
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5013, $P5014
  fallback4323:
    exists $I5002, $P5013["CATCH"]
    box $P5016, $I5002
    set $P5015, $P5016
  if1462_end4321:
    unless $P5015 goto if1461_else4318 
.annotate 'line', 1936
.annotate 'line', 1937
    _lex_param_1."!make"($P101)
    find_lex $P5017, "RETURN"
    $P5018 = $P5017(1)
    set $P5020, $P5018
    goto if1461_end4319
  if1461_else4318:
.annotate 'line', 1940
.annotate 'line', 1941
    $P5019 = $P101."blocktype"("immediate")
    set $P5020, $P5019
  if1461_end4319:
  if1460_end4316:
.annotate 'line', 1944
    nqp_get_sc_object $P5024, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback4324
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5021, $P5025
  fallback4324:
.annotate 'line', 1948
    nqp_get_sc_object $P5029, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Stmts"]
    unless_null $P5026, fallback4325
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5026, $P5030
  fallback4325:
.annotate 'line', 1949
    nqp_get_sc_object $P5034, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Op"]
    unless_null $P5031, fallback4326
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5031, $P5035
  fallback4326:
.annotate 'line', 1951
    nqp_get_sc_object $P5039, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback4327
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5036, $P5040
  fallback4327:
    $P5041 = $P5036."new"("exception" :named("op"))
.annotate 'line', 1952
    nqp_get_sc_object $P5045, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["SVal"]
    unless_null $P5042, fallback4328
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5042, $P5046
  fallback4328:
    $P5047 = $P5042."new"("handled" :named("value"))
.annotate 'line', 1953
    nqp_get_sc_object $P5051, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["IVal"]
    unless_null $P5048, fallback4329
    nqp_get_sc_object $P5052, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5048, $P5052
  fallback4329:
    $P5053 = $P5048."new"(1 :named("value"))
    $P5054 = $P5031."new"($P5041, $P5047, $P5053, "bindkey_i" :named("op"))
.annotate 'line', 1955
    $P5055 = "&default_for"("$")
    $P5056 = $P5026."new"($P5054, $P5055)
    $P5057 = $P5021."new"($P101, "CATCH", $P5056, "handle" :named("op"))
    $P5058 = _lex_param_1."!make"($P5057)
    goto lexotic_4312
  lexotic_4311:
    .get_results ($P5058)
  lexotic_4312:
    .return ($P5058) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_268_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1959
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1960
    unless_null _lex_param_1, fallback4332
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4332:
    set $P5001, _lex_param_1["block"]
    unless_null $P5001, fallback4333
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4333:
    unless $P5001 goto if1463_else4330 
.annotate 'line', 1961
    unless_null _lex_param_1, fallback4334
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5005
  fallback4334:
    set $P5004, _lex_param_1["block"]
    unless_null $P5004, fallback4335
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5006
  fallback4335:
    $P5007 = $P5004."ast"()
    $P5008 = "&block_immediate"($P5007)
    set $P5013, $P5008
    goto if1463_end4331
  if1463_else4330:
.annotate 'line', 1962
    unless_null _lex_param_1, fallback4336
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5010
  fallback4336:
    set $P5009, _lex_param_1["statement"]
    unless_null $P5009, fallback4337
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5011
  fallback4337:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1463_end4331:
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_269_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1967
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4338
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4338:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4339
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4339:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_270_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1968
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4340
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4340:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4341
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4341:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_271_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1970
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4342
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4342:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4343
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4343:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_272_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1971
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4344
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4344:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4345
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4345:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_273_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1975
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4346
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4346:
    set $P5001, _lex_param_1["fatarrow"]
    unless_null $P5001, fallback4347
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4347:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_274_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1976
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4348
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4348:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback4349
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4349:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_275_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1977
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4350
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4350:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4351
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4351:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_276_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1978
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4352
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4352:
    set $P5001, _lex_param_1["package_declarator"]
    unless_null $P5001, fallback4353
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4353:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_277_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1979
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4354
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4354:
    set $P5001, _lex_param_1["scope_declarator"]
    unless_null $P5001, fallback4355
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4355:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_278_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1980
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4356
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4356:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4357
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4357:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_279_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1981
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4358
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4358:
    set $P5001, _lex_param_1["regex_declarator"]
    unless_null $P5001, fallback4359
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4359:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_280_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1982
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4360
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4360:
    set $P5001, _lex_param_1["statement_prefix"]
    unless_null $P5001, fallback4361
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4361:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_281_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1983
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1984
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback4362
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback4362:
    unless_null _lex_param_1, fallback4363
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5007
  fallback4363:
    set $P5006, _lex_param_1["pblock"]
    unless_null $P5006, fallback4364
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5008
  fallback4364:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "takeclosure" :named("op"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_282_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1987
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 1988
    unless_null _lex_param_1, fallback4365
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5003
  fallback4365:
    set $P5002, _lex_param_1["val"]
    unless_null $P5002, fallback4366
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5004
  fallback4366:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1989
    unless_null _lex_param_1, fallback4367
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5007
  fallback4367:
    set $P5006, _lex_param_1["key"]
    unless_null $P5006, fallback4368
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5008
  fallback4368:
    $P5009 = $P5006."Str"()
    $P101."named"($P5009)
.annotate 'line', 1990
    $P5010 = _lex_param_1."!make"($P101)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_283_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1993
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5021 = 'cuid_449_1359292300.247' 
    capture_lex $P5021 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4371
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4371:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4372
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4372:
    unless $P5001 goto if1464_else4369 
.annotate 'line', 1994
.annotate 'line', 1995
    unless_null _lex_param_1, fallback4373
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5005
  fallback4373:
    set $P5004, _lex_param_1["variable"]
    unless_null $P5004, fallback4374
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5006
  fallback4374:
    $P5007 = $P5004."ast"()
    unless_null _lex_param_1, fallback4375
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5010
  fallback4375:
    set $P5009, _lex_param_1["variable"]
    unless_null $P5009, fallback4376
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5011
  fallback4376:
    set $P5008, $P5009["desigilname"]
    unless_null $P5008, fallback4377
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5012
  fallback4377:
    set $S5001, $P5008
    $P5007."named"($S5001)
.annotate 'line', 1996
    unless_null _lex_param_1, fallback4378
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5014
  fallback4378:
    set $P5013, _lex_param_1["variable"]
    unless_null $P5013, fallback4379
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5013, $P5015
  fallback4379:
    $P5016 = $P5013."ast"()
    $P5017 = _lex_param_1."!make"($P5016)
    set $P5020, $P5017
    goto if1464_end4370
  if1464_else4369:
    .const 'Sub' $P5018 = 'cuid_449_1359292300.247' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5020, $P5019
  if1464_end4370:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_449_1359292300.247") :anon :lex :outer("cuid_283_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1997
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback4382
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5004
  fallback4382:
    set $P5002, $P5003["circumfix"]
    unless_null $P5002, fallback4383
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5005
  fallback4383:
    unless $P5002 goto if1465_else4380 
.annotate 'line', 1999
    find_lex $P5008, "$/"
    unless_null $P5008, fallback4384
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5009
  fallback4384:
    set $P5007, $P5008["circumfix"]
    unless_null $P5007, fallback4385
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5010
  fallback4385:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback4386
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5011
  fallback4386:
    $P5012 = $P5006."ast"()
    set $P5023, $P5012
    goto if1465_end4381
  if1465_else4380:
.annotate 'line', 2000
    nqp_get_sc_object $P5016, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["IVal"]
    unless_null $P5013, fallback4387
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5013, $P5017
  fallback4387:
    find_lex $P5019, "$/"
    unless_null $P5019, fallback4388
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5019, $P5020
  fallback4388:
    set $P5018, $P5019["not"]
    unless_null $P5018, fallback4389
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5018, $P5021
  fallback4389:
    isfalse $I5001, $P5018
    $P5022 = $P5013."new"($I5001 :named("value"))
    set $P5023, $P5022
  if1465_end4381:
    set $P101, $P5023
.annotate 'line', 2001
    find_lex $P5025, "$/"
    unless_null $P5025, fallback4390
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5025, $P5026
  fallback4390:
    set $P5024, $P5025["identifier"]
    unless_null $P5024, fallback4391
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5024, $P5027
  fallback4391:
    set $S5001, $P5024
    $P101."named"($S5001)
.annotate 'line', 2002
    find_dynamic_lex $P5028, "$/"
    $P5029 = $P5028."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_284_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2006
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5020 = 'cuid_451_1359292300.247' 
    capture_lex $P5020 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback4394
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5003
  fallback4394:
    set $P5002, _lex_param_1["postcircumfix"]
    unless_null $P5002, fallback4395
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5004
  fallback4395:
    unless $P5002 goto if1466_else4392 
.annotate 'line', 2008
.annotate 'line', 2009
    unless_null _lex_param_1, fallback4396
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5006
  fallback4396:
    set $P5005, _lex_param_1["postcircumfix"]
    unless_null $P5005, fallback4397
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5005, $P5007
  fallback4397:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
.annotate 'line', 2010
    nqp_get_sc_object $P5012, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["VarWithFallback"]
    unless_null $P5009, fallback4398
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5013
  fallback4398:
.annotate 'line', 2011
    $P5014 = "&default_for"("$")
    $P5015 = $P5009."new"("$/" :named("name"), "lexical" :named("scope"), $P5014 :named("fallback"))
    $P5016 = $P101."unshift"($P5015)
    goto if1466_end4393
  if1466_else4392:
    .const 'Sub' $P5017 = 'cuid_451_1359292300.247' 
    capture_lex $P5017
    $P5018 = $P5017()
  if1466_end4393:
.annotate 'line', 2086
    $P5019 = _lex_param_1."!make"($P101)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_451_1359292300.247") :anon :lex :outer("cuid_284_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2014
    .const 'Sub' $P5058 = 'cuid_450_1359292300.247' 
    capture_lex $P5058 
    .const 'Sub' $P5058 = 'cuid_454_1359292300.247' 
    capture_lex $P5058 
    .const 'Sub' $P5058 = 'cuid_455_1359292300.247' 
    capture_lex $P5058 
    .lex "@name", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 2015
    nqp_get_sc_object $P5005, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5004, $P5005, "NQP"
    get_who $P5003, $P5004
    set $P5002, $P5003["Compiler"]
    unless_null $P5002, fallback4399
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5006
  fallback4399:
    find_lex $P5007, "$/"
    set $S5001, $P5007
    $P5008 = $P5002."parse_name"($S5001)
    set $P101, $P5008
    set $N5001, $P101
    set $N5002, 1
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1467_else4400 
.annotate 'line', 2016
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4404
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5011
  fallback4404:
    set $P5009, $P5010["twigil"]
    unless_null $P5009, fallback4405
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5012
  fallback4405:
    unless $P5009 goto if1468_end4403 
.annotate 'line', 2017
.annotate 'line', 2018
    find_lex $P5013, "$/"
    $P5014 = $P5013."CURSOR"()
    $P5015 = $P5014."panic"("Twigil not allowed on multi-part name")
  if1468_end4403:
.annotate 'line', 2020
    find_lex $P5016, "$/"
    $P5017 = "&lexical_package_lookup"($P101, $P5016)
    store_lex "$past", $P5017
    set $P5057, $P5017
    goto if1467_end4401
  if1467_else4400:
    find_lex $P5020, "$/"
    unless_null $P5020, fallback4408
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5020, $P5021
  fallback4408:
    set $P5019, $P5020["twigil"]
    unless_null $P5019, fallback4409
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5019, $P5022
  fallback4409:
    set $P5018, $P5019[0]
    unless_null $P5018, fallback4410
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5018, $P5023
  fallback4410:
    set $S5002, $P5018
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1469_else4406 
    .const 'Sub' $P5024 = 'cuid_450_1359292300.247' 
    capture_lex $P5024
    $P5025 = $P5024()
    set $P5056, $P5025
    goto if1469_end4407
  if1469_else4406:
    find_lex $P5028, "$/"
    unless_null $P5028, fallback4421
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5028, $P5029
  fallback4421:
    set $P5027, $P5028["twigil"]
    unless_null $P5027, fallback4422
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5027, $P5030
  fallback4422:
    set $P5026, $P5027[0]
    unless_null $P5026, fallback4423
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5026, $P5031
  fallback4423:
    set $S5003, $P5026
    iseq $I5003, $S5003, "!"
    unless $I5003 goto if1470_else4419 
    .const 'Sub' $P5032 = 'cuid_454_1359292300.247' 
    capture_lex $P5032
    $P5033 = $P5032()
    set $P5055, $P5033
    goto if1470_end4420
  if1470_else4419:
.annotate 'line', 2071
    find_dynamic_lex $P5034, "$*W"
    unless_null $P5034, fallback4463
    nqp_get_sc_object $P5037, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5036, $P5037
    set $P5035, $P5036["$W"]
    unless_null $P5035, fallback4464
    nqp_get_sc_object $P5038, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5035, $P5038
  fallback4464:
    unless_null $P5035, vivi_14834465
    die "Contextual $*W not found"
    box $P5039, "Contextual $*W not found"
    set $P5035, $P5039
  vivi_14834465:
    set $P5034, $P5035
  fallback4463:
    set $P5040, $P101[0]
    unless_null $P5040, fallback4466
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5040, $P5041
  fallback4466:
    set $S5004, $P5040
    $P5042 = $P5034."is_package"($S5004)
    unless $P5042 goto if1482_else4461 
.annotate 'line', 2072
    find_lex $P5043, "$/"
    $P5044 = "&lexical_package_lookup"($P101, $P5043)
    store_lex "$past", $P5044
.annotate 'line', 2073
    find_lex $P5045, "$past"
    find_lex $P5047, "$/"
    unless_null $P5047, fallback4467
    nqp_get_sc_object $P5048, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5047, $P5048
  fallback4467:
    set $P5046, $P5047["sigil"]
    unless_null $P5046, fallback4468
    nqp_get_sc_object $P5049, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5046, $P5049
  fallback4468:
    $P5050 = "&default_for"($P5046)
    $P5051 = $P5045."fallback"($P5050)
    set $P5054, $P5051
    goto if1482_end4462
  if1482_else4461:
    .const 'Sub' $P5052 = 'cuid_455_1359292300.247' 
    capture_lex $P5052
    $P5053 = $P5052()
    set $P5054, $P5053
  if1482_end4462:
    set $P5055, $P5054
  if1470_end4420:
    set $P5056, $P5055
  if1469_end4407:
    set $P5057, $P5056
  if1467_end4401:
    .return ($P5057) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_450_1359292300.247") :anon :lex :outer("cuid_451_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2022
    .lex "$global_fallback", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 2023
    nqp_get_sc_object $P5005, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback4411
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5006
  fallback4411:
.annotate 'line', 2025
    new $P5007, 'ResizablePMCArray'
    box $P5008, "GLOBAL"
    push $P5007, $P5008
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4412
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5011
  fallback4412:
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4413
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5012
  fallback4413:
    set $S5002, $P5009
    find_lex $P5014, "$/"
    unless_null $P5014, fallback4414
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5014, $P5015
  fallback4414:
    set $P5013, $P5014["desigilname"]
    unless_null $P5013, fallback4415
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5013, $P5016
  fallback4415:
    set $S5003, $P5013
    concat $S5001, $S5002, $S5003
    box $P5017, $S5001
    push $P5007, $P5017
    find_lex $P5018, "$/"
    $P5019 = "&lexical_package_lookup"($P5007, $P5018)
.annotate 'line', 2026
    nqp_get_sc_object $P5023, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback4416
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5020, $P5024
  fallback4416:
.annotate 'line', 2028
    nqp_get_sc_object $P5028, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["SVal"]
    unless_null $P5025, fallback4417
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5025, $P5029
  fallback4417:
    find_lex $P5030, "$/"
    set $S5006, $P5030
    concat $S5005, "Contextual ", $S5006
    concat $S5004, $S5005, " not found"
    $P5031 = $P5025."new"($S5004 :named("value"))
    $P5032 = $P5020."new"($P5031, "die_s" :named("op"))
    $P5033 = $P5002."new"($P5019, $P5032, "ifnull" :named("op"))
    set $P101, $P5033
.annotate 'line', 2030
    nqp_get_sc_object $P5037, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["VarWithFallback"]
    unless_null $P5034, fallback4418
    nqp_get_sc_object $P5038, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5034, $P5038
  fallback4418:
.annotate 'line', 2031
    find_lex $P5039, "@name"
    $P5040 = $P5039."pop"()
    set $S5007, $P5040
    $P5041 = $P5034."new"($S5007 :named("name"), "contextual" :named("scope"), $P101 :named("fallback"))
    store_lex "$past", $P5041
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_454_1359292300.247") :anon :lex :outer("cuid_451_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2035
    .const 'Sub' $P5064 = 'cuid_453_1359292300.247' 
    capture_lex $P5064 
    .lex "$name", $P101 
    .lex "$ch", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
.annotate 'line', 2036
    find_lex $P5003, "@name"
    $P5004 = $P5003."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    find_dynamic_lex $P5006, "$*PKGDECL"
    unless_null $P5006, fallback4426
    nqp_get_sc_object $P5009, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$PKGDECL"]
    unless_null $P5007, fallback4427
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5010
  fallback4427:
    unless_null $P5007, vivi_14724428
    die "Contextual $*PKGDECL not found"
    box $P5011, "Contextual $*PKGDECL not found"
    set $P5007, $P5011
  vivi_14724428:
    set $P5006, $P5007
  fallback4426:
    set $S5002, $P5006
    iseq $I5001, $S5002, "role"
    unless $I5001 goto if1471_else4424 
.annotate 'line', 2038
.annotate 'line', 2039
    nqp_get_sc_object $P5015, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4429
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5012, $P5016
  fallback4429:
    $P5017 = $P5012."new"("$?CLASS" :named("name"), "lexical" :named("scope"))
    set $P102, $P5017
.annotate 'line', 2040
    find_dynamic_lex $P5018, "$*PACKAGE"
    unless_null $P5018, fallback4430
    nqp_get_sc_object $P5021, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$PACKAGE"]
    unless_null $P5019, fallback4431
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5019, $P5022
  fallback4431:
    unless_null $P5019, vivi_14734432
    die "Contextual $*PACKAGE not found"
    box $P5023, "Contextual $*PACKAGE not found"
    set $P5019, $P5023
  vivi_14734432:
    set $P5018, $P5019
  fallback4430:
    $P5024 = $P102."set_compile_time_value"($P5018)
    goto if1471_end4425
  if1471_else4424:
.annotate 'line', 2042
.annotate 'line', 2043
    nqp_get_sc_object $P5028, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["WVal"]
    unless_null $P5025, fallback4433
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5025, $P5029
  fallback4433:
    find_dynamic_lex $P5030, "$*PACKAGE"
    unless_null $P5030, fallback4434
    nqp_get_sc_object $P5033, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5032, $P5033
    set $P5031, $P5032["$PACKAGE"]
    unless_null $P5031, fallback4435
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5031, $P5034
  fallback4435:
    unless_null $P5031, vivi_14744436
    die "Contextual $*PACKAGE not found"
    box $P5035, "Contextual $*PACKAGE not found"
    set $P5031, $P5035
  vivi_14744436:
    set $P5030, $P5031
  fallback4434:
    $P5036 = $P5025."new"($P5030 :named("value"))
    set $P102, $P5036
  if1471_end4425:
.annotate 'line', 2045
    nqp_get_sc_object $P5040, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Var"]
    unless_null $P5037, fallback4437
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5037, $P5041
  fallback4437:
.annotate 'line', 2047
    nqp_get_sc_object $P5045, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback4438
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5042, $P5046
  fallback4438:
.annotate 'line', 2048
    nqp_get_sc_object $P5050, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["Var"]
    unless_null $P5047, fallback4439
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5047, $P5051
  fallback4439:
    $P5052 = $P5047."new"("self" :named("name"), "lexical" :named("scope"))
    $P5053 = $P5042."new"($P5052, "decont" :named("op"))
    $P5054 = $P5037."new"($P5053, $P102, $P101 :named("name"), "attribute" :named("scope"))
    store_lex "$past", $P5054
    find_dynamic_lex $P5055, "$*IN_DECL"
    unless_null $P5055, fallback4442
    nqp_get_sc_object $P5058, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5057, $P5058
    set $P5056, $P5057["$IN_DECL"]
    unless_null $P5056, fallback4443
    nqp_get_sc_object $P5059, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5056, $P5059
  fallback4443:
    unless_null $P5056, vivi_14764444
    die "Contextual $*IN_DECL not found"
    box $P5060, "Contextual $*IN_DECL not found"
    set $P5056, $P5060
  vivi_14764444:
    set $P5055, $P5056
  fallback4442:
    set $P5063, $P5055
    if $P5055 goto unless1475_end4441 
    .const 'Sub' $P5061 = 'cuid_453_1359292300.247' 
    capture_lex $P5061
    $P5062 = $P5061()
    set $P5063, $P5062
  unless1475_end4441:
    .return ($P5063) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_453_1359292300.247") :anon :lex :outer("cuid_454_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2053
    .const 'Sub' $P5032 = 'cuid_452_1359292300.247' 
    capture_lex $P5032 
    .lex "$attr", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 2055
    find_dynamic_lex $P5006, "$*PACKAGE"
    unless_null $P5006, fallback4445
    nqp_get_sc_object $P5009, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$PACKAGE"]
    unless_null $P5007, fallback4446
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5010
  fallback4446:
    unless_null $P5007, vivi_14774447
    die "Contextual $*PACKAGE not found"
    box $P5011, "Contextual $*PACKAGE not found"
    set $P5007, $P5011
  vivi_14774447:
    set $P5006, $P5007
  fallback4445:
    get_how $P5005, $P5006
    find_dynamic_lex $P5012, "$*PACKAGE"
    unless_null $P5012, fallback4448
    nqp_get_sc_object $P5015, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$PACKAGE"]
    unless_null $P5013, fallback4449
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5013, $P5016
  fallback4449:
    unless_null $P5013, vivi_14784450
    die "Contextual $*PACKAGE not found"
    box $P5017, "Contextual $*PACKAGE not found"
    set $P5013, $P5017
  vivi_14784450:
    set $P5012, $P5013
  fallback4448:
    $P5018 = $P5005."attributes"($P5012, 1 :named("local"))
    set $P5002, $P5018
    iter $P5004, $P5018
    new $P5020, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5020, for_handlers4453
    push_eh $P5020
  for_next4454:
    unless $P5004, for_done4456
    shift $P5021, $P5004
  for_redo4455:
    .const 'Sub' $P5019 = 'cuid_452_1359292300.247' 
    capture_lex $P5019
    $P5002 = $P5019($P5021)
    goto for_next4454
  for_handlers4453:
    .get_results ($P5020)
    pop_upto_eh $P5020
    getattribute $P5020, $P5020, 'type'
    eq $P5020, .CONTROL_LOOP_NEXT, for_next4454
    eq $P5020, .CONTROL_LOOP_REDO, for_redo4455
  for_done4456:
    pop_eh 
    defined $I5001, $P101
    unless $I5001 goto if1480_else4457 
.annotate 'line', 2061
    can $I5002, $P101, "type"
    box $P5026, $I5002
    set $P5025, $P5026
    unless $I5002 goto if1481_end4460 
.annotate 'line', 2062
.annotate 'line', 2063
    find_lex $P5022, "$past"
    $P5023 = $P101."type"()
    $P5024 = $P5022."returns"($P5023)
    set $P5025, $P5024
  if1481_end4460:
    set $P5031, $P5025
    goto if1480_end4458
  if1480_else4457:
.annotate 'line', 2066
.annotate 'line', 2067
    find_lex $P5027, "$/"
    $P5028 = $P5027."CURSOR"()
    find_lex $P5029, "$name"
    set $S5003, $P5029
    concat $S5002, "Attribute '", $S5003
    concat $S5001, $S5002, "' not declared"
    $P5030 = $P5028."panic"($S5001)
    set $P5031, $P5030
  if1480_end4458:
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_452_1359292300.247") :anon :lex :outer("cuid_453_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2055
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2056
    $P5001 = _lex_param_0."name"()
    set $S5001, $P5001
    find_lex $P5002, "$name"
    set $S5002, $P5002
    iseq $I5001, $S5001, $S5002
    set $I5002, $I5001
    unless $I5001 goto if1479_end4452 
    store_lex "$attr", _lex_param_0
    die 0, .CONTROL_LOOP_LAST
    set $I5002, 0
  if1479_end4452:
    .return ($I5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_455_1359292300.247") :anon :lex :outer("cuid_451_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2075
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 2076
    find_lex $P5002, "@name"
    $P5003 = $P5002."pop"()
    set $S5001, $P5003
    box $P5004, $S5001
    set $P101, $P5004
    find_dynamic_lex $P5005, "$*IN_DECL"
    unless_null $P5005, fallback4481
    nqp_get_sc_object $P5008, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$IN_DECL"]
    unless_null $P5006, fallback4482
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5009
  fallback4482:
    unless_null $P5006, vivi_14904483
    die "Contextual $*IN_DECL not found"
    box $P5010, "Contextual $*IN_DECL not found"
    set $P5006, $P5010
  vivi_14904483:
    set $P5005, $P5006
  fallback4481:
    set $S5002, $P5005
    iseq $I5001, $S5002, "variable"
    set $I5003, $I5001
    if $I5001 goto unless1489_end4480 
    set $S5003, $P101
    iseq $I5002, $S5003, "$_"
    set $I5003, $I5002
  unless1489_end4480:
    set $I5005, $I5003
    if $I5003 goto unless1488_end4478 
    set $S5004, $P101
    iseq $I5004, $S5004, "$/"
    set $I5005, $I5004
  unless1488_end4478:
    set $I5007, $I5005
    if $I5005 goto unless1487_end4476 
    set $S5005, $P101
    iseq $I5006, $S5005, "$!"
    set $I5007, $I5006
  unless1487_end4476:
    set $I5009, $I5007
    if $I5007 goto unless1486_end4474 
    find_lex $P5013, "$/"
    unless_null $P5013, fallback4484
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5013, $P5014
  fallback4484:
    set $P5012, $P5013["twigil"]
    unless_null $P5012, fallback4485
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5012, $P5015
  fallback4485:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback4486
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5016
  fallback4486:
    set $S5006, $P5011
    iseq $I5008, $S5006, "?"
    set $I5009, $I5008
  unless1486_end4474:
    box $P5025, $I5009
    set $P5024, $P5025
    if $I5009 goto unless1485_end4472 
.annotate 'line', 2078
    find_dynamic_lex $P5017, "$*W"
    unless_null $P5017, fallback4487
    nqp_get_sc_object $P5020, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5019, $P5020
    set $P5018, $P5019["$W"]
    unless_null $P5018, fallback4488
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5018, $P5021
  fallback4488:
    unless_null $P5018, vivi_14914489
    die "Contextual $*W not found"
    box $P5022, "Contextual $*W not found"
    set $P5018, $P5022
  vivi_14914489:
    set $P5017, $P5018
  fallback4487:
    $P5023 = $P5017."is_lexical"($P101)
    set $P5024, $P5023
  unless1485_end4472:
    unless $P5024 goto if1484_else4469 
.annotate 'line', 2079
    nqp_get_sc_object $P5029, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback4490
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5026, $P5030
  fallback4490:
    $P5031 = $P5026."new"($P101 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5031
    set $P5035, $P5031
    goto if1484_end4470
  if1484_else4469:
.annotate 'line', 2081
.annotate 'line', 2082
    find_lex $P5032, "$/"
    $P5033 = $P5032."CURSOR"()
    set $S5009, $P101
    concat $S5008, "Use of undeclared variable '", $S5009
    concat $S5007, $S5008, "'"
    $P5034 = $P5033."panic"($S5007)
    set $P5035, $P5034
  if1484_end4470:
    .return ($P5035) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_285_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2089
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4491
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4491:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4492
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4492:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_286_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2090
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4493
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4493:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4494
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4494:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_287_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2091
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4495
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4495:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4496
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4496:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_288_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2092
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4497
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4497:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4498
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4498:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_289_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2093
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4499
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4499:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4500
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4500:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_290_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2094
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4501
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4501:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4502
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4502:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_291_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2096
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$HOW", $P101 
    .lex "$PACKAGE", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
.annotate 'line', 2099
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4503
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4504
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5007
  fallback4504:
    unless_null $P5004, vivi_14924505
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_14924505:
    set $P5003, $P5004
  fallback4503:
    unless_null _lex_param_1, fallback4506
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5011
  fallback4506:
    set $P5010, _lex_param_1["metaclass"]
    unless_null $P5010, fallback4507
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5012
  fallback4507:
    set $P5009, $P5010["identifier"]
    unless_null $P5009, fallback4508
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5013
  fallback4508:
    $P5014 = $P5003."find_sym"($P5009)
    set $P101, $P5014
.annotate 'line', 2100
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback4509
    nqp_get_sc_object $P5018, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback4510
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5016, $P5019
  fallback4510:
    unless_null $P5016, vivi_14934511
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_14934511:
    set $P5015, $P5016
  fallback4509:
    unless_null _lex_param_1, fallback4512
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5022
  fallback4512:
    set $P5021, _lex_param_1["name"]
    unless_null $P5021, fallback4513
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5021, $P5023
  fallback4513:
    set $S5001, $P5021
    $P5024 = $P5015."pkg_create_mo"($P101, $S5001 :named("name"))
    set $P102, $P5024
    find_dynamic_lex $P5025, "$*SCOPE"
    unless_null $P5025, fallback4518
    nqp_get_sc_object $P5028, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$SCOPE"]
    unless_null $P5026, fallback4519
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5026, $P5029
  fallback4519:
    unless_null $P5026, vivi_14964520
    die "Contextual $*SCOPE not found"
    box $P5030, "Contextual $*SCOPE not found"
    set $P5026, $P5030
  vivi_14964520:
    set $P5025, $P5026
  fallback4518:
    set $S5002, $P5025
    iseq $I5001, $S5002, "our"
    set $I5003, $I5001
    if $I5001 goto unless1495_end4517 
    find_dynamic_lex $P5031, "$*SCOPE"
    unless_null $P5031, fallback4521
    nqp_get_sc_object $P5034, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$SCOPE"]
    unless_null $P5032, fallback4522
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5032, $P5035
  fallback4522:
    unless_null $P5032, vivi_14974523
    die "Contextual $*SCOPE not found"
    box $P5036, "Contextual $*SCOPE not found"
    set $P5032, $P5036
  vivi_14974523:
    set $P5031, $P5032
  fallback4521:
    set $S5003, $P5031
    iseq $I5002, $S5003, ""
    set $I5003, $I5002
  unless1495_end4517:
    unless $I5003 goto if1494_else4514 
.annotate 'line', 2103
.annotate 'line', 2104
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback4524
    nqp_get_sc_object $P5040, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback4525
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5038, $P5041
  fallback4525:
    unless_null $P5038, vivi_14984526
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_14984526:
    set $P5037, $P5038
  fallback4524:
    find_dynamic_lex $P5043, "$*OUTERPACKAGE"
    unless_null $P5043, fallback4527
    nqp_get_sc_object $P5046, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$OUTERPACKAGE"]
    unless_null $P5044, fallback4528
    nqp_get_sc_object $P5047, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5044, $P5047
  fallback4528:
    unless_null $P5044, vivi_14994529
    die "Contextual $*OUTERPACKAGE not found"
    box $P5048, "Contextual $*OUTERPACKAGE not found"
    set $P5044, $P5048
  vivi_14994529:
    set $P5043, $P5044
  fallback4527:
    unless_null _lex_param_1, fallback4530
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5051
  fallback4530:
    set $P5050, _lex_param_1["name"]
    unless_null $P5050, fallback4531
    nqp_get_sc_object $P5052, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5050, $P5052
  fallback4531:
    set $P5049, $P5050["identifier"]
    unless_null $P5049, fallback4532
    nqp_get_sc_object $P5053, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5049, $P5053
  fallback4532:
    $P5037."install_package_symbol"($P5043, $P5049, $P102)
    unless_null _lex_param_1, fallback4535
    nqp_get_sc_object $P5056, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5056
  fallback4535:
    set $P5055, _lex_param_1["name"]
    unless_null $P5055, fallback4536
    nqp_get_sc_object $P5057, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5055, $P5057
  fallback4536:
    set $P5054, $P5055["identifier"]
    unless_null $P5054, fallback4537
    nqp_get_sc_object $P5058, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5054, $P5058
  fallback4537:
    set $N5001, $P5054
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5081, $I5004
    set $P5080, $P5081
    unless $I5004 goto if1500_end4534 
.annotate 'line', 2105
.annotate 'line', 2106
    find_dynamic_lex $P5059, "$*W"
    unless_null $P5059, fallback4538
    nqp_get_sc_object $P5062, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$W"]
    unless_null $P5060, fallback4539
    nqp_get_sc_object $P5063, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5060, $P5063
  fallback4539:
    unless_null $P5060, vivi_15014540
    die "Contextual $*W not found"
    box $P5064, "Contextual $*W not found"
    set $P5060, $P5064
  vivi_15014540:
    set $P5059, $P5060
  fallback4538:
    find_dynamic_lex $P5065, "$*W"
    unless_null $P5065, fallback4541
    nqp_get_sc_object $P5068, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$W"]
    unless_null $P5066, fallback4542
    nqp_get_sc_object $P5069, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5066, $P5069
  fallback4542:
    unless_null $P5066, vivi_15024543
    die "Contextual $*W not found"
    box $P5070, "Contextual $*W not found"
    set $P5066, $P5070
  vivi_15024543:
    set $P5065, $P5066
  fallback4541:
    $P5071 = $P5065."cur_lexpad"()
    unless_null _lex_param_1, fallback4544
    nqp_get_sc_object $P5075, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5075
  fallback4544:
    set $P5074, _lex_param_1["name"]
    unless_null $P5074, fallback4545
    nqp_get_sc_object $P5076, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5074, $P5076
  fallback4545:
    set $P5073, $P5074["identifier"]
    unless_null $P5073, fallback4546
    nqp_get_sc_object $P5077, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5073, $P5077
  fallback4546:
    set $P5072, $P5073[0]
    unless_null $P5072, fallback4547
    nqp_get_sc_object $P5078, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5072, $P5078
  fallback4547:
    $P5079 = $P5059."install_lexical_symbol"($P5071, $P5072, $P102)
    set $P5080, $P5079
  if1500_end4534:
    goto if1494_end4515
  if1494_else4514:
    find_dynamic_lex $P5082, "$*SCOPE"
    unless_null $P5082, fallback4550
    nqp_get_sc_object $P5085, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["$SCOPE"]
    unless_null $P5083, fallback4551
    nqp_get_sc_object $P5086, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5083, $P5086
  fallback4551:
    unless_null $P5083, vivi_15044552
    die "Contextual $*SCOPE not found"
    box $P5087, "Contextual $*SCOPE not found"
    set $P5083, $P5087
  vivi_15044552:
    set $P5082, $P5083
  fallback4550:
    set $S5004, $P5082
    iseq $I5005, $S5004, "my"
    unless $I5005 goto if1503_else4548 
.annotate 'line', 2109
    unless_null _lex_param_1, fallback4555
    nqp_get_sc_object $P5090, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5090
  fallback4555:
    set $P5089, _lex_param_1["name"]
    unless_null $P5089, fallback4556
    nqp_get_sc_object $P5091, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5089, $P5091
  fallback4556:
    set $P5088, $P5089["identifier"]
    unless_null $P5088, fallback4557
    nqp_get_sc_object $P5092, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5088, $P5092
  fallback4557:
    set $N5003, $P5088
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    unless $I5006 goto if1505_end4554 
.annotate 'line', 2110
.annotate 'line', 2111
    unless_null _lex_param_1, fallback4558
    nqp_get_sc_object $P5094, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5094
  fallback4558:
    set $P5093, _lex_param_1["name"]
    unless_null $P5093, fallback4559
    nqp_get_sc_object $P5095, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5093, $P5095
  fallback4559:
    $P5096 = $P5093."CURSOR"()
    $P5097 = $P5096."panic"("A my scoped package cannot have a multi-part name yet")
  if1505_end4554:
.annotate 'line', 2113
    find_dynamic_lex $P5098, "$*W"
    unless_null $P5098, fallback4560
    nqp_get_sc_object $P5101, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5100, $P5101
    set $P5099, $P5100["$W"]
    unless_null $P5099, fallback4561
    nqp_get_sc_object $P5102, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5099, $P5102
  fallback4561:
    unless_null $P5099, vivi_15064562
    die "Contextual $*W not found"
    box $P5103, "Contextual $*W not found"
    set $P5099, $P5103
  vivi_15064562:
    set $P5098, $P5099
  fallback4560:
    find_dynamic_lex $P5104, "$*W"
    unless_null $P5104, fallback4563
    nqp_get_sc_object $P5107, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$W"]
    unless_null $P5105, fallback4564
    nqp_get_sc_object $P5108, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5105, $P5108
  fallback4564:
    unless_null $P5105, vivi_15074565
    die "Contextual $*W not found"
    box $P5109, "Contextual $*W not found"
    set $P5105, $P5109
  vivi_15074565:
    set $P5104, $P5105
  fallback4563:
    $P5110 = $P5104."cur_lexpad"()
    unless_null _lex_param_1, fallback4566
    nqp_get_sc_object $P5114, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5114
  fallback4566:
    set $P5113, _lex_param_1["name"]
    unless_null $P5113, fallback4567
    nqp_get_sc_object $P5115, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5113, $P5115
  fallback4567:
    set $P5112, $P5113["identifier"]
    unless_null $P5112, fallback4568
    nqp_get_sc_object $P5116, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5112, $P5116
  fallback4568:
    set $P5111, $P5112[0]
    unless_null $P5111, fallback4569
    nqp_get_sc_object $P5117, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5111, $P5117
  fallback4569:
    $P5118 = $P5098."install_lexical_symbol"($P5110, $P5111, $P102)
    set $P5127, $P5118
    goto if1503_end4549
  if1503_else4548:
.annotate 'line', 2115
.annotate 'line', 2116
    $P5119 = _lex_param_1."CURSOR"()
    find_dynamic_lex $P5120, "$*SCOPE"
    unless_null $P5120, fallback4570
    nqp_get_sc_object $P5123, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5122, $P5123
    set $P5121, $P5122["$SCOPE"]
    unless_null $P5121, fallback4571
    nqp_get_sc_object $P5124, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5121, $P5124
  fallback4571:
    unless_null $P5121, vivi_15084572
    die "Contextual $*SCOPE not found"
    box $P5125, "Contextual $*SCOPE not found"
    set $P5121, $P5125
  vivi_15084572:
    set $P5120, $P5121
  fallback4570:
    set $S5006, $P5120
    concat $S5005, $S5006, " scoped packages are not supported"
    $P5126 = $P5119."panic"($S5005)
    set $P5127, $P5126
  if1503_end4549:
  if1494_end4515:
.annotate 'line', 2119
    nqp_get_sc_object $P5131, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5130, $P5131, "QAST"
    get_who $P5129, $P5130
    set $P5128, $P5129["Stmts"]
    unless_null $P5128, fallback4573
    nqp_get_sc_object $P5132, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5128, $P5132
  fallback4573:
    $P5133 = $P5128."new"()
    $P5134 = _lex_param_1."!make"($P5133)
    .return ($P5134) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_292_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2122
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5149 = 'cuid_457_1359292300.247' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_458_1359292300.247' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_459_1359292300.247' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_460_1359292300.247' 
    capture_lex $P5149 
    .lex "@ns", $P101 
    .lex "$name", $P102 
    .lex "$how", $P103 
    .lex "$past", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P104, $P5004
    unless_null _lex_param_1, fallback4574
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5008
  fallback4574:
    set $P5007, _lex_param_1["name"]
    unless_null $P5007, fallback4575
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5009
  fallback4575:
    set $P5006, $P5007["identifier"]
    unless_null $P5006, fallback4576
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5010
  fallback4576:
    clone $P5005, $P5006
    set $P101, $P5005
.annotate 'line', 2125
    $P5011 = $P101."pop"()
    set $S5001, $P5011
    box $P5012, $S5001
    set $P102, $P5012
    find_dynamic_lex $P5014, "%*HOW"
    unless_null $P5014, fallback4577
    nqp_get_sc_object $P5017, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["%HOW"]
    unless_null $P5015, fallback4578
    nqp_get_sc_object $P5019, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%HOW"], $P5020
    set $P5015, $P5020
  fallback4578:
    unless_null $P5015, vivi_15094579
    die "Contextual %*HOW not found"
    box $P5021, "Contextual %*HOW not found"
    set $P5015, $P5021
  vivi_15094579:
    set $P5014, $P5015
  fallback4577:
    find_dynamic_lex $P5022, "$*PKGDECL"
    unless_null $P5022, fallback4580
    nqp_get_sc_object $P5025, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PKGDECL"]
    unless_null $P5023, fallback4581
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5023, $P5026
  fallback4581:
    unless_null $P5023, vivi_15104582
    die "Contextual $*PKGDECL not found"
    box $P5027, "Contextual $*PKGDECL not found"
    set $P5023, $P5027
  vivi_15104582:
    set $P5022, $P5023
  fallback4580:
    set $S5002, $P5022
    set $P5013, $P5014[$S5002]
    unless_null $P5013, fallback4583
    nqp_get_sc_object $P5028, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5013, $P5028
  fallback4583:
    set $P103, $P5013
    unless_null _lex_param_1, fallback4586
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5030
  fallback4586:
    set $P5029, _lex_param_1["blockoid"]
    unless_null $P5029, fallback4587
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5029, $P5031
  fallback4587:
    unless $P5029 goto if1511_else4584 
.annotate 'line', 2130
.annotate 'line', 2131
    unless_null _lex_param_1, fallback4588
    nqp_get_sc_object $P5033, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5033
  fallback4588:
    set $P5032, _lex_param_1["blockoid"]
    unless_null $P5032, fallback4589
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5032, $P5034
  fallback4589:
    $P5035 = $P5032."ast"()
    set $P104, $P5035
    goto if1511_end4585
  if1511_else4584:
.annotate 'line', 2133
.annotate 'line', 2134
    find_dynamic_lex $P5036, "$*W"
    unless_null $P5036, fallback4590
    nqp_get_sc_object $P5039, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5038, $P5039
    set $P5037, $P5038["$W"]
    unless_null $P5037, fallback4591
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5037, $P5040
  fallback4591:
    unless_null $P5037, vivi_15124592
    die "Contextual $*W not found"
    box $P5041, "Contextual $*W not found"
    set $P5037, $P5041
  vivi_15124592:
    set $P5036, $P5037
  fallback4590:
    $P5042 = $P5036."pop_lexpad"()
    set $P104, $P5042
.annotate 'line', 2135
    unless_null _lex_param_1, fallback4593
    nqp_get_sc_object $P5044, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5044
  fallback4593:
    set $P5043, _lex_param_1["statementlist"]
    unless_null $P5043, fallback4594
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5043, $P5045
  fallback4594:
    $P5046 = $P5043."ast"()
    $P5047 = $P104."push"($P5046)
  if1511_end4585:
    can $I5001, $P103, "parametric"
    box $P5050, $I5001
    set $P5049, $P5050
    unless $I5001 goto if1514_end4598 
.annotate 'line', 2142
    $P5048 = $P103."parametric"($P103)
    set $P5049, $P5048
  if1514_end4598:
    unless $P5049 goto if1513_else4595 
    .const 'Sub' $P5051 = 'cuid_457_1359292300.247' 
    capture_lex $P5051
    $P5052 = $P5051()
    goto if1513_end4596
  if1513_else4595:
.annotate 'line', 2159
.annotate 'line', 2160
    $P104."blocktype"("immediate")
.annotate 'line', 2161
    find_dynamic_lex $P5053, "$*W"
    unless_null $P5053, fallback4631
    nqp_get_sc_object $P5056, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$W"]
    unless_null $P5054, fallback4632
    nqp_get_sc_object $P5057, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5054, $P5057
  fallback4632:
    unless_null $P5054, vivi_15224633
    die "Contextual $*W not found"
    box $P5058, "Contextual $*W not found"
    set $P5054, $P5058
  vivi_15224633:
    set $P5053, $P5054
  fallback4631:
    find_dynamic_lex $P5059, "$*PACKAGE"
    unless_null $P5059, fallback4634
    nqp_get_sc_object $P5062, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$PACKAGE"]
    unless_null $P5060, fallback4635
    nqp_get_sc_object $P5063, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5060, $P5063
  fallback4635:
    unless_null $P5060, vivi_15234636
    die "Contextual $*PACKAGE not found"
    box $P5064, "Contextual $*PACKAGE not found"
    set $P5060, $P5064
  vivi_15234636:
    set $P5059, $P5060
  fallback4634:
    $P5053."install_lexical_symbol"($P104, "$?PACKAGE", $P5059)
.annotate 'line', 2162
    find_dynamic_lex $P5065, "$*W"
    unless_null $P5065, fallback4637
    nqp_get_sc_object $P5068, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$W"]
    unless_null $P5066, fallback4638
    nqp_get_sc_object $P5069, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5066, $P5069
  fallback4638:
    unless_null $P5066, vivi_15244639
    die "Contextual $*W not found"
    box $P5070, "Contextual $*W not found"
    set $P5066, $P5070
  vivi_15244639:
    set $P5065, $P5066
  fallback4637:
    find_dynamic_lex $P5071, "$*PACKAGE"
    unless_null $P5071, fallback4640
    nqp_get_sc_object $P5074, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5073, $P5074
    set $P5072, $P5073["$PACKAGE"]
    unless_null $P5072, fallback4641
    nqp_get_sc_object $P5075, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5072, $P5075
  fallback4641:
    unless_null $P5072, vivi_15254642
    die "Contextual $*PACKAGE not found"
    box $P5076, "Contextual $*PACKAGE not found"
    set $P5072, $P5076
  vivi_15254642:
    set $P5071, $P5072
  fallback4640:
    $P5077 = $P5065."install_lexical_symbol"($P104, "$?CLASS", $P5071)
  if1513_end4596:
    unless_null _lex_param_1, fallback4645
    nqp_get_sc_object $P5079, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5079
  fallback4645:
    set $P5078, _lex_param_1["parent"]
    unless_null $P5078, fallback4646
    nqp_get_sc_object $P5080, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5078, $P5080
  fallback4646:
    unless $P5078 goto if1526_else4643 
    .const 'Sub' $P5081 = 'cuid_458_1359292300.247' 
    capture_lex $P5081
    $P5082 = $P5081()
    goto if1526_end4644
  if1526_else4643:
    can $I5002, $P103, "set_default_parent"
    box $P5086, $I5002
    set $P5085, $P5086
    unless $I5002 goto if1533_end4668 
    .const 'Sub' $P5083 = 'cuid_459_1359292300.247' 
    capture_lex $P5083
    $P5084 = $P5083()
    set $P5085, $P5084
  if1533_end4668:
  if1526_end4644:
    unless_null _lex_param_1, fallback4685
    nqp_get_sc_object $P5088, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5088
  fallback4685:
    set $P5087, _lex_param_1["role"]
    unless_null $P5087, fallback4686
    nqp_get_sc_object $P5089, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5087, $P5089
  fallback4686:
    unless $P5087 goto if1539_end4684 
.annotate 'line', 2187
    unless_null _lex_param_1, fallback4687
    nqp_get_sc_object $P5094, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5094
  fallback4687:
    set $P5093, _lex_param_1["role"]
    unless_null $P5093, fallback4688
    nqp_get_sc_object $P5095, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5093, $P5095
  fallback4688:
    set $P5090, $P5093
    iter $P5092, $P5093
  for_next4703:
    unless $P5092, for_done4705
    shift $P5097, $P5092
  for_redo4704:
    .const 'Sub' $P5096 = 'cuid_460_1359292300.247' 
    capture_lex $P5096
    $P5090 = $P5096($P5097)
    goto for_next4703
  for_done4705:
  if1539_end4684:
.annotate 'line', 2205
    find_dynamic_lex $P5098, "$*W"
    unless_null $P5098, fallback4706
    nqp_get_sc_object $P5101, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5100, $P5101
    set $P5099, $P5100["$W"]
    unless_null $P5099, fallback4707
    nqp_get_sc_object $P5102, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5099, $P5102
  fallback4707:
    unless_null $P5099, vivi_15464708
    die "Contextual $*W not found"
    box $P5103, "Contextual $*W not found"
    set $P5099, $P5103
  vivi_15464708:
    set $P5098, $P5099
  fallback4706:
    find_dynamic_lex $P5104, "$*PACKAGE"
    unless_null $P5104, fallback4709
    nqp_get_sc_object $P5107, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$PACKAGE"]
    unless_null $P5105, fallback4710
    nqp_get_sc_object $P5108, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5105, $P5108
  fallback4710:
    unless_null $P5105, vivi_15474711
    die "Contextual $*PACKAGE not found"
    box $P5109, "Contextual $*PACKAGE not found"
    set $P5105, $P5109
  vivi_15474711:
    set $P5104, $P5105
  fallback4709:
    $P5098."pkg_compose"($P5104)
    find_dynamic_lex $P5110, "$*PKGDECL"
    unless_null $P5110, fallback4716
    nqp_get_sc_object $P5113, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5112, $P5113
    set $P5111, $P5112["$PKGDECL"]
    unless_null $P5111, fallback4717
    nqp_get_sc_object $P5114, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5111, $P5114
  fallback4717:
    unless_null $P5111, vivi_15504718
    die "Contextual $*PKGDECL not found"
    box $P5115, "Contextual $*PKGDECL not found"
    set $P5111, $P5115
  vivi_15504718:
    set $P5110, $P5111
  fallback4716:
    set $S5003, $P5110
    iseq $I5003, $S5003, "grammar"
    set $I5005, $I5003
    unless $I5003 goto if1549_end4715 
    find_dynamic_lex $P5116, "$*PACKAGE"
    unless_null $P5116, fallback4719
    nqp_get_sc_object $P5119, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5118, $P5119
    set $P5117, $P5118["$PACKAGE"]
    unless_null $P5117, fallback4720
    nqp_get_sc_object $P5120, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5117, $P5120
  fallback4720:
    unless_null $P5117, vivi_15514721
    die "Contextual $*PACKAGE not found"
    box $P5121, "Contextual $*PACKAGE not found"
    set $P5117, $P5121
  vivi_15514721:
    set $P5116, $P5117
  fallback4719:
    can $I5004, $P5116, "!precompute_nfas"
    set $I5005, $I5004
  if1549_end4715:
    unless $I5005 goto if1548_end4713 
.annotate 'line', 2208
.annotate 'line', 2209
    find_dynamic_lex $P5122, "$*PACKAGE"
    unless_null $P5122, fallback4722
    nqp_get_sc_object $P5125, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5124, $P5125
    set $P5123, $P5124["$PACKAGE"]
    unless_null $P5123, fallback4723
    nqp_get_sc_object $P5126, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5123, $P5126
  fallback4723:
    unless_null $P5123, vivi_15524724
    die "Contextual $*PACKAGE not found"
    box $P5127, "Contextual $*PACKAGE not found"
    set $P5123, $P5127
  vivi_15524724:
    set $P5122, $P5123
  fallback4722:
    $P5128 = $P5122."!precompute_nfas"()
  if1548_end4713:
    unless_null _lex_param_1, fallback4727
    nqp_get_sc_object $P5130, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5130
  fallback4727:
    set $P5129, _lex_param_1["export"]
    unless_null $P5129, fallback4728
    nqp_get_sc_object $P5131, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5129, $P5131
  fallback4728:
    unless $P5129 goto if1553_end4726 
.annotate 'line', 2213
    find_dynamic_lex $P5135, "$*EXPORT"
    unless_null $P5135, fallback4729
    nqp_get_sc_object $P5138, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5137, $P5138
    set $P5136, $P5137["$EXPORT"]
    unless_null $P5136, fallback4730
    nqp_get_sc_object $P5139, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5136, $P5139
  fallback4730:
    unless_null $P5136, vivi_15544731
    die "Contextual $*EXPORT not found"
    box $P5140, "Contextual $*EXPORT not found"
    set $P5136, $P5140
  vivi_15544731:
    set $P5135, $P5136
  fallback4729:
    get_who $P5134, $P5135
    set $P5133, $P5134["DEFAULT"]
    unless_null $P5133, fallback4732
    nqp_get_sc_object $P5141, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5133, $P5141
  fallback4732:
    get_who $P5132, $P5133
    set $S5004, $P102
    find_dynamic_lex $P5142, "$*PACKAGE"
    unless_null $P5142, fallback4733
    nqp_get_sc_object $P5145, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5144, $P5145
    set $P5143, $P5144["$PACKAGE"]
    unless_null $P5143, fallback4734
    nqp_get_sc_object $P5146, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5143, $P5146
  fallback4734:
    unless_null $P5143, vivi_15554735
    die "Contextual $*PACKAGE not found"
    box $P5147, "Contextual $*PACKAGE not found"
    set $P5143, $P5147
  vivi_15554735:
    set $P5142, $P5143
  fallback4733:
    set $P5132[$S5004], $P5142
  if1553_end4726:
.annotate 'line', 2217
    $P5148 = _lex_param_1."!make"($P104)
    .return ($P5148) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_457_1359292300.247") :anon :lex :outer("cuid_292_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2142
    .const 'Sub' $P5081 = 'cuid_456_1359292300.247' 
    capture_lex $P5081 
    .lex "$params", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 2143
    find_lex $P5002, "$past"
    $P5002."blocktype"("declaration")
.annotate 'line', 2144
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Stmts"]
    unless_null $P5003, fallback4599
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5007
  fallback4599:
.annotate 'line', 2145
    nqp_get_sc_object $P5011, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["Var"]
    unless_null $P5008, fallback4600
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5012
  fallback4600:
    $P5013 = $P5008."new"("$?CLASS" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5014 = $P5003."new"($P5013)
    set $P101, $P5014
    find_lex $P5016, "$/"
    unless_null $P5016, fallback4603
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5016, $P5017
  fallback4603:
    set $P5015, $P5016["role_params"]
    unless_null $P5015, fallback4604
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5015, $P5018
  fallback4604:
    unless $P5015 goto if1515_end4602 
.annotate 'line', 2147
    find_lex $P5025, "$/"
    unless_null $P5025, fallback4605
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5025, $P5026
  fallback4605:
    set $P5024, $P5025["role_params"]
    unless_null $P5024, fallback4606
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5024, $P5027
  fallback4606:
    set $P5023, $P5024[0]
    unless_null $P5023, fallback4607
    nqp_get_sc_object $P5028, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5023, $P5028
  fallback4607:
    set $P5022, $P5023["variable"]
    unless_null $P5022, fallback4608
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5022, $P5029
  fallback4608:
    set $P5019, $P5022
    iter $P5021, $P5022
  for_next4609:
    unless $P5021, for_done4611
    shift $P5031, $P5021
  for_redo4610:
    .const 'Sub' $P5030 = 'cuid_456_1359292300.247' 
    capture_lex $P5030
    $P5019 = $P5030($P5031)
    goto for_next4609
  for_done4611:
  if1515_end4602:
.annotate 'line', 2152
    find_lex $P5032, "$past"
    $P5032."unshift"($P101)
.annotate 'line', 2153
    find_lex $P5033, "$past"
    nqp_get_sc_object $P5037, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback4612
    nqp_get_sc_object $P5038, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5034, $P5038
  fallback4612:
    $P5039 = $P5034."new"("curlexpad" :named("op"))
    $P5033."push"($P5039)
.annotate 'line', 2154
    find_lex $P5040, "$past"
    $P5040."symbol"("$?CLASS", "lexical" :named("scope"))
.annotate 'line', 2155
    find_dynamic_lex $P5041, "$*W"
    unless_null $P5041, fallback4613
    nqp_get_sc_object $P5044, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5043, $P5044
    set $P5042, $P5043["$W"]
    unless_null $P5042, fallback4614
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5042, $P5045
  fallback4614:
    unless_null $P5042, vivi_15164615
    die "Contextual $*W not found"
    box $P5046, "Contextual $*W not found"
    set $P5042, $P5046
  vivi_15164615:
    set $P5041, $P5042
  fallback4613:
    find_dynamic_lex $P5047, "$*PACKAGE"
    unless_null $P5047, fallback4616
    nqp_get_sc_object $P5050, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$PACKAGE"]
    unless_null $P5048, fallback4617
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5048, $P5051
  fallback4617:
    unless_null $P5048, vivi_15174618
    die "Contextual $*PACKAGE not found"
    box $P5052, "Contextual $*PACKAGE not found"
    set $P5048, $P5052
  vivi_15174618:
    set $P5047, $P5048
  fallback4616:
    find_lex $P5053, "$past"
    $P5041."pkg_set_body_block"($P5047, $P5053)
.annotate 'line', 2156
    find_dynamic_lex $P5054, "$*W"
    unless_null $P5054, fallback4619
    nqp_get_sc_object $P5057, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["$W"]
    unless_null $P5055, fallback4620
    nqp_get_sc_object $P5058, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5055, $P5058
  fallback4620:
    unless_null $P5055, vivi_15184621
    die "Contextual $*W not found"
    box $P5059, "Contextual $*W not found"
    set $P5055, $P5059
  vivi_15184621:
    set $P5054, $P5055
  fallback4619:
    find_lex $P5060, "$past"
    find_dynamic_lex $P5061, "$*PACKAGE"
    unless_null $P5061, fallback4622
    nqp_get_sc_object $P5064, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5063, $P5064
    set $P5062, $P5063["$PACKAGE"]
    unless_null $P5062, fallback4623
    nqp_get_sc_object $P5065, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5062, $P5065
  fallback4623:
    unless_null $P5062, vivi_15194624
    die "Contextual $*PACKAGE not found"
    box $P5066, "Contextual $*PACKAGE not found"
    set $P5062, $P5066
  vivi_15194624:
    set $P5061, $P5062
  fallback4622:
    $P5054."install_lexical_symbol"($P5060, "$?PACKAGE", $P5061)
.annotate 'line', 2157
    find_dynamic_lex $P5067, "$*W"
    unless_null $P5067, fallback4625
    nqp_get_sc_object $P5070, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5069, $P5070
    set $P5068, $P5069["$W"]
    unless_null $P5068, fallback4626
    nqp_get_sc_object $P5071, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5068, $P5071
  fallback4626:
    unless_null $P5068, vivi_15204627
    die "Contextual $*W not found"
    box $P5072, "Contextual $*W not found"
    set $P5068, $P5072
  vivi_15204627:
    set $P5067, $P5068
  fallback4625:
    find_lex $P5073, "$past"
    find_dynamic_lex $P5074, "$*PACKAGE"
    unless_null $P5074, fallback4628
    nqp_get_sc_object $P5077, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["$PACKAGE"]
    unless_null $P5075, fallback4629
    nqp_get_sc_object $P5078, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5075, $P5078
  fallback4629:
    unless_null $P5075, vivi_15214630
    die "Contextual $*PACKAGE not found"
    box $P5079, "Contextual $*PACKAGE not found"
    set $P5075, $P5079
  vivi_15214630:
    set $P5074, $P5075
  fallback4628:
    $P5080 = $P5067."install_lexical_symbol"($P5073, "$?ROLE", $P5074)
    .return ($P5080) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_456_1359292300.247") :anon :lex :outer("cuid_457_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2148
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2149
    find_lex $P5001, "$params"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_458_1359292300.247") :anon :lex :outer("cuid_292_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2166
    .lex "$parent", $P101 
    .lex "$parent_found", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_15294655
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 2169
.annotate 'line', 2170
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4647
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4648
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5007
  fallback4648:
    unless_null $P5004, vivi_15274649
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15274649:
    set $P5003, $P5004
  fallback4647:
    find_lex $P5013, "$/"
    unless_null $P5013, fallback4650
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5013, $P5014
  fallback4650:
    set $P5012, $P5013["parent"]
    unless_null $P5012, fallback4651
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5012, $P5015
  fallback4651:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback4652
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5016
  fallback4652:
    set $P5010, $P5011["identifier"]
    unless_null $P5010, fallback4653
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5017
  fallback4653:
    clone $P5009, $P5010
    $P5018 = $P5003."find_sym"($P5009)
    set $P101, $P5018
    box $P5019, 1
    set $P102, $P5019
    set $P5021, $P102
    pop_eh 
    goto skip_handler_15284654
  catch_handler_15294655:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_15284654
  skip_handler_15284654:
    unless $P102 goto if1530_else4656 
.annotate 'line', 2173
.annotate 'line', 2174
    find_dynamic_lex $P5022, "$*W"
    unless_null $P5022, fallback4658
    nqp_get_sc_object $P5025, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$W"]
    unless_null $P5023, fallback4659
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5023, $P5026
  fallback4659:
    unless_null $P5023, vivi_15314660
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5023, $P5027
  vivi_15314660:
    set $P5022, $P5023
  fallback4658:
    find_dynamic_lex $P5028, "$*PACKAGE"
    unless_null $P5028, fallback4661
    nqp_get_sc_object $P5031, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["$PACKAGE"]
    unless_null $P5029, fallback4662
    nqp_get_sc_object $P5032, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5029, $P5032
  fallback4662:
    unless_null $P5029, vivi_15324663
    die "Contextual $*PACKAGE not found"
    box $P5033, "Contextual $*PACKAGE not found"
    set $P5029, $P5033
  vivi_15324663:
    set $P5028, $P5029
  fallback4661:
    $P5034 = $P5022."pkg_add_parent_or_role"($P5028, "add_parent", $P101)
    set $P5044, $P5034
    goto if1530_end4657
  if1530_else4656:
.annotate 'line', 2176
.annotate 'line', 2177
    find_lex $P5035, "$/"
    $P5036 = $P5035."CURSOR"()
    find_lex $P5039, "$/"
    unless_null $P5039, fallback4664
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5039, $P5040
  fallback4664:
    set $P5038, $P5039["parent"]
    unless_null $P5038, fallback4665
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5038, $P5041
  fallback4665:
    set $P5037, $P5038[0]
    unless_null $P5037, fallback4666
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5037, $P5042
  fallback4666:
    set $S5003, $P5037
    concat $S5002, "Could not find parent class '", $S5003
    concat $S5001, $S5002, "'"
    $P5043 = $P5036."panic"($S5001)
    set $P5044, $P5043
  if1530_end4657:
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_459_1359292300.247") :anon :lex :outer("cuid_292_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2180
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    find_dynamic_lex $P5002, "$*PKGDECL"
    unless_null $P5002, fallback4671
    nqp_get_sc_object $P5005, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$PKGDECL"]
    unless_null $P5003, fallback4672
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5006
  fallback4672:
    unless_null $P5003, vivi_15354673
    die "Contextual $*PKGDECL not found"
    box $P5007, "Contextual $*PKGDECL not found"
    set $P5003, $P5007
  vivi_15354673:
    set $P5002, $P5003
  fallback4671:
    set $S5001, $P5002
    iseq $I5001, $S5001, "grammar"
    unless $I5001 goto if1534_else4669 
    new $P5008, 'ResizablePMCArray'
    box $P5009, "NQPCursor"
    push $P5008, $P5009
    set $P5012, $P5008
    goto if1534_end4670
  if1534_else4669:
    new $P5010, 'ResizablePMCArray'
    box $P5011, "NQPMu"
    push $P5010, $P5011
    set $P5012, $P5010
  if1534_end4670:
    set $P101, $P5012
.annotate 'line', 2182
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback4674
    nqp_get_sc_object $P5016, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback4675
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5014, $P5017
  fallback4675:
    unless_null $P5014, vivi_15364676
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_15364676:
    set $P5013, $P5014
  fallback4674:
    find_dynamic_lex $P5019, "$*PACKAGE"
    unless_null $P5019, fallback4677
    nqp_get_sc_object $P5022, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$PACKAGE"]
    unless_null $P5020, fallback4678
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5020, $P5023
  fallback4678:
    unless_null $P5020, vivi_15374679
    die "Contextual $*PACKAGE not found"
    box $P5024, "Contextual $*PACKAGE not found"
    set $P5020, $P5024
  vivi_15374679:
    set $P5019, $P5020
  fallback4677:
.annotate 'line', 2183
    find_dynamic_lex $P5025, "$*W"
    unless_null $P5025, fallback4680
    nqp_get_sc_object $P5028, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$W"]
    unless_null $P5026, fallback4681
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5026, $P5029
  fallback4681:
    unless_null $P5026, vivi_15384682
    die "Contextual $*W not found"
    box $P5030, "Contextual $*W not found"
    set $P5026, $P5030
  vivi_15384682:
    set $P5025, $P5026
  fallback4680:
    $P5031 = $P5025."find_sym"($P101)
    $P5032 = $P5013."pkg_add_parent_or_role"($P5019, "set_default_parent", $P5031)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_460_1359292300.247") :anon :lex :outer("cuid_292_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2188
    .param pmc _lex_param_0 
    .lex "$role", $P101 
    .lex "$role_found", $P102 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    new $P5014, 'ExceptionHandler'
    set_label $P5014, catch_handler_15424694
    $P5014.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5014
.annotate 'line', 2191
.annotate 'line', 2192
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4689
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4690
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5007
  fallback4690:
    unless_null $P5004, vivi_15404691
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15404691:
    set $P5003, $P5004
  fallback4689:
    set $P5010, _lex_param_0["identifier"]
    unless_null $P5010, fallback4692
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5011
  fallback4692:
    clone $P5009, $P5010
    $P5012 = $P5003."find_sym"($P5009)
    set $P101, $P5012
    box $P5013, 1
    set $P102, $P5013
    set $P5015, $P102
    pop_eh 
    goto skip_handler_15414693
  catch_handler_15424694:
    .get_results ($P5014) 
    set $I10001, 1
    set $P5014["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    finalize $P5014
    pop_upto_eh $P5014
    pop_eh 
    set $P5015, $P10001
    goto skip_handler_15414693
  skip_handler_15414693:
    unless $P102 goto if1543_else4695 
.annotate 'line', 2195
.annotate 'line', 2196
    find_dynamic_lex $P5016, "$*W"
    unless_null $P5016, fallback4697
    nqp_get_sc_object $P5019, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$W"]
    unless_null $P5017, fallback4698
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5017, $P5020
  fallback4698:
    unless_null $P5017, vivi_15444699
    die "Contextual $*W not found"
    box $P5021, "Contextual $*W not found"
    set $P5017, $P5021
  vivi_15444699:
    set $P5016, $P5017
  fallback4697:
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback4700
    nqp_get_sc_object $P5025, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback4701
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5023, $P5026
  fallback4701:
    unless_null $P5023, vivi_15454702
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_15454702:
    set $P5022, $P5023
  fallback4700:
    $P5028 = $P5016."pkg_add_parent_or_role"($P5022, "add_role", $P101)
    set $P5032, $P5028
    goto if1543_end4696
  if1543_else4695:
.annotate 'line', 2198
.annotate 'line', 2199
    find_lex $P5029, "$/"
    $P5030 = $P5029."CURSOR"()
    set $S5003, _lex_param_0
    concat $S5002, "Could not find role '", $S5003
    concat $S5001, $S5002, "'"
    $P5031 = $P5030."panic"($S5001)
    set $P5032, $P5031
  if1543_end4696:
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "role_params" :subid("cuid_293_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2220
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5009 = 'cuid_461_1359292300.247' 
    capture_lex $P5009 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4736
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5005
  fallback4736:
    set $P5004, _lex_param_1["variable"]
    unless_null $P5004, fallback4737
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5006
  fallback4737:
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next4741:
    unless $P5003, for_done4743
    shift $P5008, $P5003
  for_redo4742:
    .const 'Sub' $P5007 = 'cuid_461_1359292300.247' 
    capture_lex $P5007
    $P5001 = $P5007($P5008)
    goto for_next4741
  for_done4743:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_461_1359292300.247") :anon :lex :outer("cuid_293_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2221
    .param pmc _lex_param_0 
    .lex "$var", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 2222
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
.annotate 'line', 2223
    $P101."scope"("lexical")
.annotate 'line', 2224
    $P101."decl"("param")
.annotate 'line', 2225
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4738
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4739
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5007
  fallback4739:
    unless_null $P5004, vivi_15564740
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15564740:
    set $P5003, $P5004
  fallback4738:
    $P5009 = $P5003."cur_lexpad"()
    $P5010 = $P101."name"()
    $P5011 = $P5009."symbol"($P5010, "lexical" :named("scope"))
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_294_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2229
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4744
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4744:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4745
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4745:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_295_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2230
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4746
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4746:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4747
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4747:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_296_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2231
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4748
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4748:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4749
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4749:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_297_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2233
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2234
    unless_null _lex_param_1, fallback4752
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4752:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4753
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4753:
    unless $P5001 goto if1557_else4750 
    unless_null _lex_param_1, fallback4754
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5005
  fallback4754:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4755
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5006
  fallback4755:
    $P5007 = $P5004."ast"()
    set $P5020, $P5007
    goto if1557_end4751
  if1557_else4750:
    unless_null _lex_param_1, fallback4758
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5009
  fallback4758:
    set $P5008, _lex_param_1["multi_declarator"]
    unless_null $P5008, fallback4759
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5010
  fallback4759:
    unless $P5008 goto if1558_else4756 
.annotate 'line', 2235
    unless_null _lex_param_1, fallback4760
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5012
  fallback4760:
    set $P5011, _lex_param_1["multi_declarator"]
    unless_null $P5011, fallback4761
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5013
  fallback4761:
    $P5014 = $P5011."ast"()
    set $P5019, $P5014
    goto if1558_end4757
  if1558_else4756:
.annotate 'line', 2236
    unless_null _lex_param_1, fallback4762
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5016
  fallback4762:
    set $P5015, _lex_param_1["package_declarator"]
    unless_null $P5015, fallback4763
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5015, $P5017
  fallback4763:
    $P5018 = $P5015."ast"()
    set $P5019, $P5018
  if1558_end4757:
    set $P5020, $P5019
  if1557_end4751:
    $P5021 = _lex_param_1."!make"($P5020)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_298_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2239
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2240
    unless_null _lex_param_1, fallback4766
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4766:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4767
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4767:
    unless $P5001 goto if1559_else4764 
.annotate 'line', 2241
    unless_null _lex_param_1, fallback4768
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5005
  fallback4768:
    set $P5004, _lex_param_1["routine_declarator"]
    unless_null $P5004, fallback4769
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5006
  fallback4769:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1559_end4765
  if1559_else4764:
.annotate 'line', 2242
    unless_null _lex_param_1, fallback4770
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5009
  fallback4770:
    set $P5008, _lex_param_1["variable_declarator"]
    unless_null $P5008, fallback4771
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5010
  fallback4771:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1559_end4765:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_299_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2245
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4774
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4774:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4775
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4775:
    unless $P5001 goto if1560_else4772 
    unless_null _lex_param_1, fallback4776
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5005
  fallback4776:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4777
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5006
  fallback4777:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1560_end4773
  if1560_else4772:
    unless_null _lex_param_1, fallback4778
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5009
  fallback4778:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4779
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5010
  fallback4779:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1560_end4773:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_300_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2246
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4782
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4782:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4783
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4783:
    unless $P5001 goto if1561_else4780 
    unless_null _lex_param_1, fallback4784
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5005
  fallback4784:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4785
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5006
  fallback4785:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1561_end4781
  if1561_else4780:
    unless_null _lex_param_1, fallback4786
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5009
  fallback4786:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4787
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5010
  fallback4787:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1561_end4781:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_301_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2247
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4788
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4788:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4789
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4789:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_302_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2250
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5067 = 'cuid_462_1359292300.247' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_464_1359292300.247' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_465_1359292300.247' 
    capture_lex $P5067 
    .lex "$past", $P101 
    .lex "$sigil", $P102 
    .lex "$name", $P103 
    .lex "$BLOCK", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P104, $P5004
.annotate 'line', 2251
    unless_null _lex_param_1, fallback4790
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5006
  fallback4790:
    set $P5005, _lex_param_1["variable"]
    unless_null $P5005, fallback4791
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5005, $P5007
  fallback4791:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
    unless_null _lex_param_1, fallback4792
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5011
  fallback4792:
    set $P5010, _lex_param_1["variable"]
    unless_null $P5010, fallback4793
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5012
  fallback4793:
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4794
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5013
  fallback4794:
    set $P102, $P5009
.annotate 'line', 2253
    $P5014 = $P101."name"()
    set $P103, $P5014
.annotate 'line', 2254
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback4795
    nqp_get_sc_object $P5018, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback4796
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5016, $P5019
  fallback4796:
    unless_null $P5016, vivi_15624797
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_15624797:
    set $P5015, $P5016
  fallback4795:
    $P5021 = $P5015."cur_lexpad"()
    set $P104, $P5021
    set $P5023, $P103
    unless $P103 goto if1564_end4801 
.annotate 'line', 2255
    $P5022 = $P104."symbol"($P103)
    set $P5023, $P5022
  if1564_end4801:
    unless $P5023 goto if1563_end4799 
.annotate 'line', 2256
    $P5024 = _lex_param_1."CURSOR"()
    $P5025 = $P5024."panic"("Redeclaration of symbol ", $P103)
  if1563_end4799:
    find_dynamic_lex $P5026, "$*SCOPE"
    unless_null $P5026, fallback4804
    nqp_get_sc_object $P5029, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$SCOPE"]
    unless_null $P5027, fallback4805
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5027, $P5030
  fallback4805:
    unless_null $P5027, vivi_15664806
    die "Contextual $*SCOPE not found"
    box $P5031, "Contextual $*SCOPE not found"
    set $P5027, $P5031
  vivi_15664806:
    set $P5026, $P5027
  fallback4804:
    set $S5001, $P5026
    iseq $I5001, $S5001, "has"
    unless $I5001 goto if1565_else4802 
    .const 'Sub' $P5032 = 'cuid_462_1359292300.247' 
    capture_lex $P5032
    $P5033 = $P5032()
    goto if1565_end4803
  if1565_else4802:
    find_dynamic_lex $P5034, "$*SCOPE"
    unless_null $P5034, fallback4858
    nqp_get_sc_object $P5037, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5036, $P5037
    set $P5035, $P5036["$SCOPE"]
    unless_null $P5035, fallback4859
    nqp_get_sc_object $P5038, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5035, $P5038
  fallback4859:
    unless_null $P5035, vivi_15844860
    die "Contextual $*SCOPE not found"
    box $P5039, "Contextual $*SCOPE not found"
    set $P5035, $P5039
  vivi_15844860:
    set $P5034, $P5035
  fallback4858:
    set $S5002, $P5034
    iseq $I5002, $S5002, "our"
    unless $I5002 goto if1583_else4856 
.annotate 'line', 2286
    unless_null _lex_param_1, fallback4863
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5041
  fallback4863:
    set $P5040, _lex_param_1["typename"]
    unless_null $P5040, fallback4864
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5040, $P5042
  fallback4864:
    unless $P5040 goto if1585_end4862 
.annotate 'line', 2290
.annotate 'line', 2291
    $P5043 = _lex_param_1."CURSOR"()
    $P5044 = $P5043."panic"("Cannot put types on our-scoped variables")
  if1585_end4862:
    unless_null _lex_param_1, fallback4865
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5046
  fallback4865:
    set $P5045, _lex_param_1["variable"]
    unless_null $P5045, fallback4866
    nqp_get_sc_object $P5047, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5045, $P5047
  fallback4866:
    set $S5003, $P5045
    box $P5048, $S5003
    set $P103, $P5048
.annotate 'line', 2294
    new $P5049, 'ResizablePMCArray'
    push $P5049, $P103
    $P5050 = "&lexical_package_lookup"($P5049, _lex_param_1)
    set $P101, $P5050
.annotate 'line', 2295
    $P5051 = $P104."symbol"($P103, "package" :named("scope"))
    set $P5054, $P5051
    goto if1583_end4857
  if1583_else4856:
    .const 'Sub' $P5052 = 'cuid_464_1359292300.247' 
    capture_lex $P5052
    $P5053 = $P5052()
    set $P5054, $P5053
  if1583_end4857:
  if1565_end4803:
    unless_null _lex_param_1, fallback4886
    nqp_get_sc_object $P5056, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5056
  fallback4886:
    set $P5055, _lex_param_1["trait"]
    unless_null $P5055, fallback4887
    nqp_get_sc_object $P5057, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5055, $P5057
  fallback4887:
    unless $P5055 goto if1590_end4885 
.annotate 'line', 2324
    unless_null _lex_param_1, fallback4888
    nqp_get_sc_object $P5062, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5062
  fallback4888:
    set $P5061, _lex_param_1["trait"]
    unless_null $P5061, fallback4889
    nqp_get_sc_object $P5063, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5061, $P5063
  fallback4889:
    set $P5058, $P5061
    iter $P5060, $P5061
  for_next4890:
    unless $P5060, for_done4892
    shift $P5065, $P5060
  for_redo4891:
    .const 'Sub' $P5064 = 'cuid_465_1359292300.247' 
    capture_lex $P5064
    $P5058 = $P5064($P5065)
    goto for_next4890
  for_done4892:
  if1590_end4885:
.annotate 'line', 2328
    $P5066 = _lex_param_1."!make"($P101)
    .return ($P5066) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_462_1359292300.247") :anon :lex :outer("cuid_302_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2258
    .lex "%lit_args", $P101 
    .lex "%obj_args", $P102 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    find_dynamic_lex $P5003, "%*HOW"
    unless_null $P5003, fallback4809
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%HOW"]
    unless_null $P5004, fallback4810
    nqp_get_sc_object $P5008, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%HOW"], $P5009
    set $P5004, $P5009
  fallback4810:
    unless_null $P5004, vivi_15684811
    die "Contextual %*HOW not found"
    box $P5010, "Contextual %*HOW not found"
    set $P5004, $P5010
  vivi_15684811:
    set $P5003, $P5004
  fallback4809:
    find_dynamic_lex $P5011, "$*PKGDECL"
    unless_null $P5011, fallback4812
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$PKGDECL"]
    unless_null $P5012, fallback4813
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5012, $P5015
  fallback4813:
    unless_null $P5012, vivi_15694814
    die "Contextual $*PKGDECL not found"
    box $P5016, "Contextual $*PKGDECL not found"
    set $P5012, $P5016
  vivi_15694814:
    set $P5011, $P5012
  fallback4812:
    set $S5002, $P5011
    concat $S5001, $S5002, "-attr"
    exists $I5001, $P5003[$S5001]
    if $I5001 goto unless1567_end4808 
.annotate 'line', 2260
.annotate 'line', 2261
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    find_dynamic_lex $P5019, "$*PKGDECL"
    unless_null $P5019, fallback4815
    nqp_get_sc_object $P5022, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$PKGDECL"]
    unless_null $P5020, fallback4816
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5020, $P5023
  fallback4816:
    unless_null $P5020, vivi_15704817
    die "Contextual $*PKGDECL not found"
    box $P5024, "Contextual $*PKGDECL not found"
    set $P5020, $P5024
  vivi_15704817:
    set $P5019, $P5020
  fallback4815:
    set $S5004, $P5019
    concat $S5003, $S5004, " packages do not support attributes"
    $P5025 = $P5018."panic"($S5003)
  unless1567_end4808:
    find_lex $P5026, "$name"
    set $P101["name"], $P5026
    find_lex $P5028, "$/"
    unless_null $P5028, fallback4820
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5028, $P5029
  fallback4820:
    set $P5027, $P5028["typename"]
    unless_null $P5027, fallback4821
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5027, $P5030
  fallback4821:
    unless $P5027 goto if1571_end4819 
.annotate 'line', 2268
.annotate 'line', 2269
    find_dynamic_lex $P5031, "$*W"
    unless_null $P5031, fallback4822
    nqp_get_sc_object $P5034, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$W"]
    unless_null $P5032, fallback4823
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5032, $P5035
  fallback4823:
    unless_null $P5032, vivi_15724824
    die "Contextual $*W not found"
    box $P5036, "Contextual $*W not found"
    set $P5032, $P5036
  vivi_15724824:
    set $P5031, $P5032
  fallback4822:
    new $P5037, 'ResizablePMCArray'
    find_lex $P5040, "$/"
    unless_null $P5040, fallback4825
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5040, $P5041
  fallback4825:
    set $P5039, $P5040["typename"]
    unless_null $P5039, fallback4826
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5039, $P5042
  fallback4826:
    set $P5038, $P5039[0]
    unless_null $P5038, fallback4827
    nqp_get_sc_object $P5043, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5038, $P5043
  fallback4827:
    set $S5005, $P5038
    box $P5044, $S5005
    push $P5037, $P5044
    $P5045 = $P5031."find_sym"($P5037)
    set $P102["type"], $P5045
  if1571_end4819:
    find_lex $P5046, "$sigil"
    set $S5006, $P5046
    iseq $I5002, $S5006, "$"
    set $I5004, $I5002
    if $I5002 goto unless1574_end4831 
    find_lex $P5047, "$sigil"
    set $S5007, $P5047
    iseq $I5003, $S5007, "&"
    set $I5004, $I5003
  unless1574_end4831:
    unless $I5004 goto if1573_end4829 
.annotate 'line', 2271
    find_lex $P5049, "$/"
    unless_null $P5049, fallback4834
    nqp_get_sc_object $P5050, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5049, $P5050
  fallback4834:
    set $P5048, $P5049["typename"]
    unless_null $P5048, fallback4835
    nqp_get_sc_object $P5051, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5048, $P5051
  fallback4835:
    unless $P5048 goto if1575_else4832 
.annotate 'line', 2272
    set $P5052, $P102["type"]
    unless_null $P5052, fallback4836
    nqp_get_sc_object $P5053, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5052, $P5053
  fallback4836:
    set $P102["default"], $P5052
    set $P5065, $P5052
    goto if1575_end4833
  if1575_else4832:
.annotate 'line', 2275
    new $P5063, 'ExceptionHandler'
    set_label $P5063, catch_handler_15784841
    $P5063.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5063
.annotate 'line', 2276
    find_dynamic_lex $P5054, "$*W"
    unless_null $P5054, fallback4837
    nqp_get_sc_object $P5057, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["$W"]
    unless_null $P5055, fallback4838
    nqp_get_sc_object $P5058, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5055, $P5058
  fallback4838:
    unless_null $P5055, vivi_15764839
    die "Contextual $*W not found"
    box $P5059, "Contextual $*W not found"
    set $P5055, $P5059
  vivi_15764839:
    set $P5054, $P5055
  fallback4837:
    new $P5060, 'ResizablePMCArray'
    box $P5061, "NQPMu"
    push $P5060, $P5061
    $P5062 = $P5054."find_sym"($P5060)
    set $P102["default"], $P5062
    set $P5064, $P5062
    pop_eh 
    goto skip_handler_15774840
  catch_handler_15784841:
    .get_results ($P5063) 
    set $I10001, 1
    set $P5063["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    finalize $P5063
    pop_upto_eh $P5063
    pop_eh 
    set $P5064, $P10001
    goto skip_handler_15774840
  skip_handler_15774840:
    set $P5065, $P5064
  if1575_end4833:
  if1573_end4829:
.annotate 'line', 2281
    find_dynamic_lex $P5066, "$*W"
    unless_null $P5066, fallback4842
    nqp_get_sc_object $P5069, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["$W"]
    unless_null $P5067, fallback4843
    nqp_get_sc_object $P5070, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5067, $P5070
  fallback4843:
    unless_null $P5067, vivi_15794844
    die "Contextual $*W not found"
    box $P5071, "Contextual $*W not found"
    set $P5067, $P5071
  vivi_15794844:
    set $P5066, $P5067
  fallback4842:
    find_dynamic_lex $P5072, "$*PACKAGE"
    unless_null $P5072, fallback4845
    nqp_get_sc_object $P5075, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5074, $P5075
    set $P5073, $P5074["$PACKAGE"]
    unless_null $P5073, fallback4846
    nqp_get_sc_object $P5076, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5073, $P5076
  fallback4846:
    unless_null $P5073, vivi_15804847
    die "Contextual $*PACKAGE not found"
    box $P5077, "Contextual $*PACKAGE not found"
    set $P5073, $P5077
  vivi_15804847:
    set $P5072, $P5073
  fallback4845:
    find_dynamic_lex $P5079, "%*HOW"
    unless_null $P5079, fallback4848
    nqp_get_sc_object $P5082, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5081, $P5082
    set $P5080, $P5081["%HOW"]
    unless_null $P5080, fallback4849
    nqp_get_sc_object $P5084, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5083, $P5084
    new $P5085, 'Hash'
    set $P5083["%HOW"], $P5085
    set $P5080, $P5085
  fallback4849:
    unless_null $P5080, vivi_15814850
    die "Contextual %*HOW not found"
    box $P5086, "Contextual %*HOW not found"
    set $P5080, $P5086
  vivi_15814850:
    set $P5079, $P5080
  fallback4848:
    find_dynamic_lex $P5087, "$*PKGDECL"
    unless_null $P5087, fallback4851
    nqp_get_sc_object $P5090, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5089, $P5090
    set $P5088, $P5089["$PKGDECL"]
    unless_null $P5088, fallback4852
    nqp_get_sc_object $P5091, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5088, $P5091
  fallback4852:
    unless_null $P5088, vivi_15824853
    die "Contextual $*PKGDECL not found"
    box $P5092, "Contextual $*PKGDECL not found"
    set $P5088, $P5092
  vivi_15824853:
    set $P5087, $P5088
  fallback4851:
    set $S5009, $P5087
    concat $S5008, $S5009, "-attr"
    set $P5078, $P5079[$S5008]
    unless_null $P5078, fallback4854
    nqp_get_sc_object $P5093, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5078, $P5093
  fallback4854:
    $P5066."pkg_add_attribute"($P5072, $P5078, $P101, $P102)
.annotate 'line', 2284
    nqp_get_sc_object $P5097, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5096, $P5097, "QAST"
    get_who $P5095, $P5096
    set $P5094, $P5095["Stmts"]
    unless_null $P5094, fallback4855
    nqp_get_sc_object $P5098, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5094, $P5098
  fallback4855:
    $P5099 = $P5094."new"()
    store_lex "$past", $P5099
    .return ($P5099) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_464_1359292300.247") :anon :lex :outer("cuid_302_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2297
    .const 'Sub' $P5054 = 'cuid_463_1359292300.247' 
    capture_lex $P5054 
    .lex "$type", $P101 
    .lex "$default", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4869
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5005
  fallback4869:
    set $P5003, $P5004["typename"]
    unless_null $P5003, fallback4870
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5006
  fallback4870:
    unless $P5003 goto if1586_else4867 
.annotate 'line', 2300
    find_lex $P5007, "$sigil"
    set $S5001, $P5007
    iseq $I5001, $S5001, "$"
    if $I5001 goto unless1587_end4872 
.annotate 'line', 2301
.annotate 'line', 2302
    find_lex $P5008, "$/"
    $P5009 = $P5008."CURSOR"()
    $P5010 = $P5009."panic"("Only typed scalars are currently supported in NQP")
  unless1587_end4872:
.annotate 'line', 2304
    find_dynamic_lex $P5011, "$*W"
    unless_null $P5011, fallback4873
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$W"]
    unless_null $P5012, fallback4874
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5012, $P5015
  fallback4874:
    unless_null $P5012, vivi_15884875
    die "Contextual $*W not found"
    box $P5016, "Contextual $*W not found"
    set $P5012, $P5016
  vivi_15884875:
    set $P5011, $P5012
  fallback4873:
    new $P5017, 'ResizablePMCArray'
    find_lex $P5020, "$/"
    unless_null $P5020, fallback4876
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5020, $P5021
  fallback4876:
    set $P5019, $P5020["typename"]
    unless_null $P5019, fallback4877
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5019, $P5022
  fallback4877:
    set $P5018, $P5019[0]
    unless_null $P5018, fallback4878
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5018, $P5023
  fallback4878:
    set $S5002, $P5018
    box $P5024, $S5002
    push $P5017, $P5024
    $P5025 = $P5011."find_sym"($P5017)
    set $P101, $P5025
    repr_get_primitive_type_spec $I5002, $P101
    unless $I5002 goto if1589_else4879 
    .const 'Sub' $P5026 = 'cuid_463_1359292300.247' 
    capture_lex $P5026
    $P5027 = $P5026($I5002)
    set $P5031, $P5027
    goto if1589_end4880
  if1589_else4879:
.annotate 'line', 2308
.annotate 'line', 2309
    find_lex $P5028, "$/"
    $P5029 = $P5028."CURSOR"()
    $P5030 = $P5029."panic"("Only native types are currently supported/checked")
    set $P5031, $P5030
  if1589_end4880:
    goto if1586_end4868
  if1586_else4867:
.annotate 'line', 2312
.annotate 'line', 2313
    find_lex $P5032, "$sigil"
    $P5033 = "&default_for"($P5032)
    set $P102, $P5033
  if1586_end4868:
.annotate 'line', 2315
    find_lex $P5035, "$BLOCK"
    set $P5034, $P5035[0]
    unless_null $P5034, fallback4881
    nqp_get_sc_object $P5036, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5034, $P5036
  fallback4881:
    nqp_get_sc_object $P5040, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback4882
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5037, $P5041
  fallback4882:
    find_lex $P5042, "$/"
.annotate 'line', 2317
    nqp_get_sc_object $P5046, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Var"]
    unless_null $P5043, fallback4883
    nqp_get_sc_object $P5047, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5043, $P5047
  fallback4883:
    find_lex $P5048, "$name"
    $P5049 = $P5043."new"($P5048 :named("name"), "lexical" :named("scope"), "var" :named("decl"), $P101 :named("returns"))
    $P5050 = $P5037."new"($P5049, $P102, "bind" :named("op"), $P5042 :named("node"))
    $P5034."push"($P5050)
.annotate 'line', 2320
    find_lex $P5051, "$BLOCK"
    find_lex $P5052, "$name"
    $P5053 = $P5051."symbol"($P5052, "lexical" :named("scope"), $P101 :named("type"))
    .return ($P5053) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_463_1359292300.247") :anon :lex :outer("cuid_464_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2305
    .param pmc _lex_param_0 
    .lex "$prim_spec", _lex_param_0 
.annotate 'line', 2306
    $P5001 = "&default_value_for_prim"(_lex_param_0)
    store_lex "$default", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_465_1359292300.247") :anon :lex :outer("cuid_302_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2325
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_303_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2331
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4893
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4893:
    set $P5001, _lex_param_1["routine_def"]
    unless_null $P5001, fallback4894
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4894:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_304_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2332
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4895
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback4895:
    set $P5001, _lex_param_1["method_def"]
    unless_null $P5001, fallback4896
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback4896:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_305_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2334
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5060 = 'cuid_469_1359292300.247' 
    capture_lex $P5060 
    .const 'Sub' $P5060 = 'cuid_472_1359292300.247' 
    capture_lex $P5060 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "$lexpast", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P103, $P5003
    unless_null _lex_param_1, fallback4899
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5005
  fallback4899:
    set $P5004, _lex_param_1["onlystar"]
    unless_null $P5004, fallback4900
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5006
  fallback4900:
    unless $P5004 goto if1591_else4897 
.annotate 'line', 2338
.annotate 'line', 2339
    $P5007 = "&only_star_block"()
    set $P101, $P5007
    goto if1591_end4898
  if1591_else4897:
.annotate 'line', 2341
.annotate 'line', 2342
    unless_null _lex_param_1, fallback4901
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5009
  fallback4901:
    set $P5008, _lex_param_1["blockoid"]
    unless_null $P5008, fallback4902
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5010
  fallback4902:
    $P5011 = $P5008."ast"()
    set $P101, $P5011
.annotate 'line', 2343
    $P101."blocktype"("declaration")
    find_dynamic_lex $P5012, "$*RETURN_USED"
    unless_null $P5012, fallback4905
    nqp_get_sc_object $P5015, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$RETURN_USED"]
    unless_null $P5013, fallback4906
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5013, $P5016
  fallback4906:
    unless_null $P5013, vivi_15934907
    die "Contextual $*RETURN_USED not found"
    box $P5017, "Contextual $*RETURN_USED not found"
    set $P5013, $P5017
  vivi_15934907:
    set $P5012, $P5013
  fallback4905:
    set $P5021, $P5012
    unless $P5012 goto if1592_end4904 
.annotate 'line', 2344
.annotate 'line', 2345
    set $P5018, $P101[1]
    unless_null $P5018, fallback4908
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5018, $P5019
  fallback4908:
    $P5020 = "&wrap_return_handler"($P5018)
    set $P101[1], $P5020
    set $P5021, $P5020
  if1592_end4904:
  if1591_end4898:
    set $P102, $P101
    unless_null _lex_param_1, fallback4911
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5023
  fallback4911:
    set $P5022, _lex_param_1["deflongname"]
    unless_null $P5022, fallback4912
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5022, $P5024
  fallback4912:
    unless $P5022 goto if1594_else4909 
    .const 'Sub' $P5025 = 'cuid_469_1359292300.247' 
    capture_lex $P5025
    $P5026 = $P5025()
    goto if1594_end4910
  if1594_else4909:
.annotate 'line', 2442
.annotate 'line', 2443
    find_dynamic_lex $P5027, "$*W"
    unless_null $P5027, fallback5024
    nqp_get_sc_object $P5030, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$W"]
    unless_null $P5028, fallback5025
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5028, $P5031
  fallback5025:
    unless_null $P5028, vivi_16295026
    die "Contextual $*W not found"
    box $P5032, "Contextual $*W not found"
    set $P5028, $P5032
  vivi_16295026:
    set $P5027, $P5028
  fallback5024:
    $P5033 = $P5027."is_precompilation_mode"()
    set $P5041, $P5033
    unless $P5033 goto if1628_end5023 
.annotate 'line', 2444
    find_dynamic_lex $P5034, "$*W"
    unless_null $P5034, fallback5027
    nqp_get_sc_object $P5037, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5036, $P5037
    set $P5035, $P5036["$W"]
    unless_null $P5035, fallback5028
    nqp_get_sc_object $P5038, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5035, $P5038
  fallback5028:
    unless_null $P5035, vivi_16305029
    die "Contextual $*W not found"
    box $P5039, "Contextual $*W not found"
    set $P5035, $P5039
  vivi_16305029:
    set $P5034, $P5035
  fallback5027:
    $P5040 = $P5034."create_code"($P101, "<anon>", 0)
    set $P5041, $P5040
  if1628_end5023:
  if1594_end4910:
.annotate 'line', 2448
    nqp_get_sc_object $P5045, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback5030
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5042, $P5046
  fallback5030:
    $P5047 = $P5042."new"($P101, "takeclosure" :named("op"))
    set $P103, $P5047
    set $P103["sink"], $P101
    set $P103["block_past"], $P102
.annotate 'line', 2451
    _lex_param_1."!make"($P103)
    unless_null _lex_param_1, fallback5033
    nqp_get_sc_object $P5049, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5049
  fallback5033:
    set $P5048, _lex_param_1["trait"]
    unless_null $P5048, fallback5034
    nqp_get_sc_object $P5050, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5048, $P5050
  fallback5034:
    set $P5059, $P5048
    unless $P5048 goto if1631_end5032 
.annotate 'line', 2454
    unless_null _lex_param_1, fallback5035
    nqp_get_sc_object $P5055, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5055
  fallback5035:
    set $P5054, _lex_param_1["trait"]
    unless_null $P5054, fallback5036
    nqp_get_sc_object $P5056, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5054, $P5056
  fallback5036:
    set $P5051, $P5054
    iter $P5053, $P5054
  for_next5037:
    unless $P5053, for_done5039
    shift $P5058, $P5053
  for_redo5038:
    .const 'Sub' $P5057 = 'cuid_472_1359292300.247' 
    capture_lex $P5057
    $P5051 = $P5057($P5058)
    goto for_next5037
  for_done5039:
    set $P5059, $P5051
  if1631_end5032:
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_469_1359292300.247") :anon :lex :outer("cuid_305_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2350
    .const 'Sub' $P5078 = 'cuid_468_1359292300.247' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_470_1359292300.247' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_471_1359292300.247' 
    capture_lex $P5078 
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4913
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5005
  fallback4913:
    set $P5003, $P5004["sigil"]
    unless_null $P5003, fallback4914
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5006
  fallback4914:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback4915
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5007
  fallback4915:
    set $S5002, $P5002
.annotate 'line', 2351
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4916
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5011
  fallback4916:
    set $P5009, $P5010["deflongname"]
    unless_null $P5009, fallback4917
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5012
  fallback4917:
    set $P5008, $P5009[0]
    unless_null $P5008, fallback4918
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5013
  fallback4918:
    $P5014 = $P5008."ast"()
    set $S5003, $P5014
    concat $S5001, $S5002, $S5003
    box $P5015, $S5001
    set $P101, $P5015
.annotate 'line', 2352
    find_lex $P5016, "$past"
    $P5016."name"($P101)
    find_dynamic_lex $P5017, "$*SCOPE"
    unless_null $P5017, fallback4925
    nqp_get_sc_object $P5020, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5019, $P5020
    set $P5018, $P5019["$SCOPE"]
    unless_null $P5018, fallback4926
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5018, $P5021
  fallback4926:
    unless_null $P5018, vivi_15984927
    die "Contextual $*SCOPE not found"
    box $P5022, "Contextual $*SCOPE not found"
    set $P5018, $P5022
  vivi_15984927:
    set $P5017, $P5018
  fallback4925:
    set $S5004, $P5017
    iseq $I5001, $S5004, ""
    set $I5003, $I5001
    if $I5001 goto unless1597_end4924 
    find_dynamic_lex $P5023, "$*SCOPE"
    unless_null $P5023, fallback4928
    nqp_get_sc_object $P5026, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5025, $P5026
    set $P5024, $P5025["$SCOPE"]
    unless_null $P5024, fallback4929
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5024, $P5027
  fallback4929:
    unless_null $P5024, vivi_15994930
    die "Contextual $*SCOPE not found"
    box $P5028, "Contextual $*SCOPE not found"
    set $P5024, $P5028
  vivi_15994930:
    set $P5023, $P5024
  fallback4928:
    set $S5005, $P5023
    iseq $I5002, $S5005, "my"
    set $I5003, $I5002
  unless1597_end4924:
    set $I5005, $I5003
    if $I5003 goto unless1596_end4922 
    find_dynamic_lex $P5029, "$*SCOPE"
    unless_null $P5029, fallback4931
    nqp_get_sc_object $P5032, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["$SCOPE"]
    unless_null $P5030, fallback4932
    nqp_get_sc_object $P5033, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5030, $P5033
  fallback4932:
    unless_null $P5030, vivi_16004933
    die "Contextual $*SCOPE not found"
    box $P5034, "Contextual $*SCOPE not found"
    set $P5030, $P5034
  vivi_16004933:
    set $P5029, $P5030
  fallback4931:
    set $S5006, $P5029
    iseq $I5004, $S5006, "our"
    set $I5005, $I5004
  unless1596_end4922:
    unless $I5005 goto if1595_else4919 
.annotate 'line', 2353
    find_dynamic_lex $P5035, "$*MULTINESS"
    unless_null $P5035, fallback4936
    nqp_get_sc_object $P5038, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5037, $P5038
    set $P5036, $P5037["$MULTINESS"]
    unless_null $P5036, fallback4937
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5036, $P5039
  fallback4937:
    unless_null $P5036, vivi_16024938
    die "Contextual $*MULTINESS not found"
    box $P5040, "Contextual $*MULTINESS not found"
    set $P5036, $P5040
  vivi_16024938:
    set $P5035, $P5036
  fallback4936:
    set $S5007, $P5035
    iseq $I5006, $S5007, "multi"
    unless $I5006 goto if1601_else4934 
    .const 'Sub' $P5041 = 'cuid_468_1359292300.247' 
    capture_lex $P5041
    $P5042 = $P5041()
    goto if1601_end4935
  if1601_else4934:
    find_dynamic_lex $P5043, "$*MULTINESS"
    unless_null $P5043, fallback4974
    nqp_get_sc_object $P5046, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$MULTINESS"]
    unless_null $P5044, fallback4975
    nqp_get_sc_object $P5047, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5044, $P5047
  fallback4975:
    unless_null $P5044, vivi_16144976
    die "Contextual $*MULTINESS not found"
    box $P5048, "Contextual $*MULTINESS not found"
    set $P5044, $P5048
  vivi_16144976:
    set $P5043, $P5044
  fallback4974:
    set $S5008, $P5043
    iseq $I5007, $S5008, "proto"
    unless $I5007 goto if1613_else4972 
    .const 'Sub' $P5049 = 'cuid_470_1359292300.247' 
    capture_lex $P5049
    $P5050 = $P5049()
    set $P5053, $P5050
    goto if1613_end4973
  if1613_else4972:
    .const 'Sub' $P5051 = 'cuid_471_1359292300.247' 
    capture_lex $P5051
    $P5052 = $P5051()
    set $P5053, $P5052
  if1613_end4973:
  if1601_end4935:
.annotate 'line', 2431
    nqp_get_sc_object $P5057, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Var"]
    unless_null $P5054, fallback5011
    nqp_get_sc_object $P5058, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5054, $P5058
  fallback5011:
    set $S5010, $P101
    concat $S5009, "&", $S5010
    $P5059 = $P5054."new"($S5009 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5059
    goto if1595_end4920
  if1595_else4919:
.annotate 'line', 2433
.annotate 'line', 2434
    find_lex $P5060, "$/"
    $P5061 = $P5060."CURSOR"()
    find_dynamic_lex $P5062, "$*SCOPE"
    unless_null $P5062, fallback5012
    nqp_get_sc_object $P5065, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$SCOPE"]
    unless_null $P5063, fallback5013
    nqp_get_sc_object $P5066, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5063, $P5066
  fallback5013:
    unless_null $P5063, vivi_16245014
    die "Contextual $*SCOPE not found"
    box $P5067, "Contextual $*SCOPE not found"
    set $P5063, $P5067
  vivi_16245014:
    set $P5062, $P5063
  fallback5012:
    set $S5012, $P5062
    concat $S5011, $S5012, " scoped routines are not supported yet"
    $P5068 = $P5061."panic"($S5011)
  if1595_end4920:
    set $S5013, $P101
    iseq $I5008, $S5013, "MAIN"
    set $I5010, $I5008
    unless $I5008 goto if1626_end5018 
    find_dynamic_lex $P5069, "$*MULTINESS"
    unless_null $P5069, fallback5019
    nqp_get_sc_object $P5072, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5071, $P5072
    set $P5070, $P5071["$MULTINESS"]
    unless_null $P5070, fallback5020
    nqp_get_sc_object $P5073, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5070, $P5073
  fallback5020:
    unless_null $P5070, vivi_16275021
    die "Contextual $*MULTINESS not found"
    box $P5074, "Contextual $*MULTINESS not found"
    set $P5070, $P5074
  vivi_16275021:
    set $P5069, $P5070
  fallback5019:
    set $S5014, $P5069
    isne $I5009, $S5014, "multi"
    set $I5010, $I5009
  if1626_end5018:
    box $P5077, $I5010
    set $P5076, $P5077
    unless $I5010 goto if1625_end5016 
.annotate 'line', 2438
    find_lex $P5075, "$block"
    store_dynamic_lex "$*MAIN_SUB", $P5075
    set $P5076, $P5075
  if1625_end5016:
    .return ($P5076) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_468_1359292300.247") :anon :lex :outer("cuid_469_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2354
    .const 'Sub' $P5048 = 'cuid_467_1359292300.247' 
    capture_lex $P5048 
    .lex "$proto", $P101 
    .lex "%sym", $P102 
    .lex "$code", $P103 
    .lex "$BLOCK", $P104 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P104, $P5004
    find_dynamic_lex $P5005, "$*SCOPE"
    unless_null $P5005, fallback4941
    nqp_get_sc_object $P5008, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$SCOPE"]
    unless_null $P5006, fallback4942
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5009
  fallback4942:
    unless_null $P5006, vivi_16044943
    die "Contextual $*SCOPE not found"
    box $P5010, "Contextual $*SCOPE not found"
    set $P5006, $P5010
  vivi_16044943:
    set $P5005, $P5006
  fallback4941:
    set $S5001, $P5005
    iseq $I5001, $S5001, "our"
    unless $I5001 goto if1603_end4940 
.annotate 'line', 2356
    box $P5011, "a multi can not be our-scoped"
    die $P5011
  if1603_end4940:
.annotate 'line', 2358
    find_dynamic_lex $P5012, "$*W"
    unless_null $P5012, fallback4944
    nqp_get_sc_object $P5015, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$W"]
    unless_null $P5013, fallback4945
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5013, $P5016
  fallback4945:
    unless_null $P5013, vivi_16054946
    die "Contextual $*W not found"
    box $P5017, "Contextual $*W not found"
    set $P5013, $P5017
  vivi_16054946:
    set $P5012, $P5013
  fallback4944:
    $P5018 = $P5012."cur_lexpad"()
    find_lex $P5019, "$name"
    set $S5003, $P5019
    concat $S5002, "&", $S5003
    $P5020 = $P5018."symbol"($S5002)
    set $P102, $P5020
    set $P5021, $P102["proto"]
    unless_null $P5021, fallback4949
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5021, $P5022
  fallback4949:
    unless $P5021 goto if1606_else4947 
.annotate 'line', 2359
    set $P5023, $P102["value"]
    unless_null $P5023, fallback4950
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5023, $P5024
  fallback4950:
    set $P101, $P5023
    goto if1606_end4948
  if1606_else4947:
    .const 'Sub' $P5025 = 'cuid_467_1359292300.247' 
    capture_lex $P5025
    $P5026 = $P5025()
  if1606_end4948:
.annotate 'line', 2388
    find_dynamic_lex $P5027, "$*W"
    unless_null $P5027, fallback4965
    nqp_get_sc_object $P5030, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$W"]
    unless_null $P5028, fallback4966
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5028, $P5031
  fallback4966:
    unless_null $P5028, vivi_16114967
    die "Contextual $*W not found"
    box $P5032, "Contextual $*W not found"
    set $P5028, $P5032
  vivi_16114967:
    set $P5027, $P5028
  fallback4965:
    find_lex $P5033, "$past"
    find_lex $P5034, "$name"
    $P5035 = $P5027."create_code"($P5033, $P5034, 0)
    set $P103, $P5035
.annotate 'line', 2389
    find_lex $P5036, "$past"
    "&attach_multi_signature"($P103, $P5036)
.annotate 'line', 2392
    $P101."add_dispatchee"($P103)
.annotate 'line', 2395
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback4968
    nqp_get_sc_object $P5040, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback4969
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5038, $P5041
  fallback4969:
    unless_null $P5038, vivi_16124970
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_16124970:
    set $P5037, $P5038
  fallback4968:
    $P5043 = $P5037."cur_lexpad"()
    set $P104, $P5043
.annotate 'line', 2396
    set $P5044, $P104[0]
    unless_null $P5044, fallback4971
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5044, $P5045
  fallback4971:
    find_lex $P5046, "$past"
    $P5047 = $P5044."push"($P5046)
    .return ($P5047) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_467_1359292300.247") :anon :lex :outer("cuid_468_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2364
    .const 'Sub' $P5018 = 'cuid_466_1359292300.247' 
    capture_lex $P5018 
    .lex "$found_proto", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 2367
    find_dynamic_lex $P5005, "$*W"
    unless_null $P5005, fallback4951
    nqp_get_sc_object $P5008, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$W"]
    unless_null $P5006, fallback4952
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5009
  fallback4952:
    unless_null $P5006, vivi_16074953
    die "Contextual $*W not found"
    box $P5010, "Contextual $*W not found"
    set $P5006, $P5010
  vivi_16074953:
    set $P5005, $P5006
  fallback4951:
    $P5011 = $P5005."get_legacy_block_list"()
    set $P5002, $P5011
    iter $P5004, $P5011
  for_next4960:
    unless $P5004, for_done4962
    shift $P5013, $P5004
  for_redo4961:
    .const 'Sub' $P5012 = 'cuid_466_1359292300.247' 
    capture_lex $P5012
    $P5002 = $P5012($P5013)
    goto for_next4960
  for_done4962:
    if $P101 goto unless1610_end4964 
.annotate 'line', 2379
.annotate 'line', 2380
    find_lex $P5014, "$/"
    $P5015 = $P5014."CURSOR"()
    $P5016 = $P5015."panic"("Sorry, no proto sub in scope, and auto-generation of protos is not yet implemented.")
  unless1610_end4964:
    box $P5017, "Dispatcher derivation NYI"
    die $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_466_1359292300.247") :anon :lex :outer("cuid_467_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2367
    .param pmc _lex_param_0 
    .lex "%sym", $P101 
    .lex "$_", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 2368
    find_lex $P5002, "$name"
    set $S5002, $P5002
    concat $S5001, "&", $S5002
    $P5003 = _lex_param_0."symbol"($S5001)
    set $P101, $P5003
    set $P5004, $P101["proto"]
    unless_null $P5004, fallback4956
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5005
  fallback4956:
    unless $P5004 goto if1608_else4954 
.annotate 'line', 2369
    set $P5006, $P101["value"]
    unless_null $P5006, fallback4957
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5007
  fallback4957:
    store_lex "$proto", $P5006
    box $P5008, 1
    store_lex "$found_proto", $P5008
    set $P5013, $P5008
    goto if1608_end4955
  if1608_else4954:
    set $P5012, $P101
    unless $P101 goto if1609_end4959 
.annotate 'line', 2373
.annotate 'line', 2374
    find_lex $P5009, "$/"
    $P5010 = $P5009."CURSOR"()
    $P5011 = $P5010."panic"("Cannot declare a multi when an only is already in scope.")
    set $P5012, $P5011
  if1609_end4959:
    set $P5013, $P5012
  if1608_end4955:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_470_1359292300.247") :anon :lex :outer("cuid_469_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2398
    .lex "$code", $P101 
    .lex "$BLOCK", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    find_dynamic_lex $P5003, "$*SCOPE"
    unless_null $P5003, fallback4979
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$SCOPE"]
    unless_null $P5004, fallback4980
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5007
  fallback4980:
    unless_null $P5004, vivi_16164981
    die "Contextual $*SCOPE not found"
    box $P5008, "Contextual $*SCOPE not found"
    set $P5004, $P5008
  vivi_16164981:
    set $P5003, $P5004
  fallback4979:
    set $S5001, $P5003
    iseq $I5001, $S5001, "our"
    unless $I5001 goto if1615_end4978 
.annotate 'line', 2402
    box $P5009, "our-scoped protos not yet implemented"
    die $P5009
  if1615_end4978:
.annotate 'line', 2403
    find_dynamic_lex $P5010, "$*W"
    unless_null $P5010, fallback4982
    nqp_get_sc_object $P5013, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$W"]
    unless_null $P5011, fallback4983
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5014
  fallback4983:
    unless_null $P5011, vivi_16174984
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5011, $P5015
  vivi_16174984:
    set $P5010, $P5011
  fallback4982:
    find_lex $P5016, "$past"
    find_lex $P5017, "$name"
    $P5018 = $P5010."create_code"($P5016, $P5017, 1)
    set $P101, $P5018
.annotate 'line', 2404
    find_dynamic_lex $P5019, "$*W"
    unless_null $P5019, fallback4985
    nqp_get_sc_object $P5022, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$W"]
    unless_null $P5020, fallback4986
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5020, $P5023
  fallback4986:
    unless_null $P5020, vivi_16184987
    die "Contextual $*W not found"
    box $P5024, "Contextual $*W not found"
    set $P5020, $P5024
  vivi_16184987:
    set $P5019, $P5020
  fallback4985:
    $P5025 = $P5019."cur_lexpad"()
    set $P102, $P5025
.annotate 'line', 2405
    set $P5026, $P102[0]
    unless_null $P5026, fallback4988
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5026, $P5027
  fallback4988:
    nqp_get_sc_object $P5031, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["Op"]
    unless_null $P5028, fallback4989
    nqp_get_sc_object $P5032, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5028, $P5032
  fallback4989:
.annotate 'line', 2407
    nqp_get_sc_object $P5036, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Var"]
    unless_null $P5033, fallback4990
    nqp_get_sc_object $P5037, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5033, $P5037
  fallback4990:
    find_lex $P5038, "$name"
    set $S5003, $P5038
    concat $S5002, "&", $S5003
    $P5039 = $P5033."new"($S5002 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5040, "$past"
    $P5041 = $P5028."new"($P5039, $P5040, "bind" :named("op"))
    $P5026."push"($P5041)
.annotate 'line', 2410
    find_lex $P5042, "$name"
    set $S5005, $P5042
    concat $S5004, "&", $S5005
    $P5043 = $P102."symbol"($S5004, "lexical" :named("scope"), 1 :named("proto"), $P101 :named("value"))
    .return ($P5043) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_471_1359292300.247") :anon :lex :outer("cuid_469_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2412
    .lex "$BLOCK", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 2413
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4991
    nqp_get_sc_object $P5005, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4992
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5006
  fallback4992:
    unless_null $P5003, vivi_16194993
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_16194993:
    set $P5002, $P5003
  fallback4991:
    $P5008 = $P5002."cur_lexpad"()
    set $P101, $P5008
.annotate 'line', 2414
    set $P5009, $P101[0]
    unless_null $P5009, fallback4994
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5010
  fallback4994:
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback4995
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5015
  fallback4995:
.annotate 'line', 2416
    nqp_get_sc_object $P5019, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback4996
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5016, $P5020
  fallback4996:
    find_lex $P5021, "$name"
    set $S5002, $P5021
    concat $S5001, "&", $S5002
    $P5022 = $P5016."new"($S5001 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5023, "$past"
    $P5024 = $P5011."new"($P5022, $P5023, "bind" :named("op"))
    $P5009."push"($P5024)
.annotate 'line', 2419
    find_lex $P5025, "$name"
    set $S5004, $P5025
    concat $S5003, "&", $S5004
    $P101."symbol"($S5003, "lexical" :named("scope"))
    find_dynamic_lex $P5026, "$*SCOPE"
    unless_null $P5026, fallback4999
    nqp_get_sc_object $P5029, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$SCOPE"]
    unless_null $P5027, fallback5000
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5027, $P5030
  fallback5000:
    unless_null $P5027, vivi_16215001
    die "Contextual $*SCOPE not found"
    box $P5031, "Contextual $*SCOPE not found"
    set $P5027, $P5031
  vivi_16215001:
    set $P5026, $P5027
  fallback4999:
    set $S5005, $P5026
    iseq $I5001, $S5005, "our"
    box $P5067, $I5001
    set $P5066, $P5067
    unless $I5001 goto if1620_end4998 
.annotate 'line', 2420
.annotate 'line', 2423
    find_dynamic_lex $P5032, "$*W"
    unless_null $P5032, fallback5002
    nqp_get_sc_object $P5035, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["$W"]
    unless_null $P5033, fallback5003
    nqp_get_sc_object $P5036, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5033, $P5036
  fallback5003:
    unless_null $P5033, vivi_16225004
    die "Contextual $*W not found"
    box $P5037, "Contextual $*W not found"
    set $P5033, $P5037
  vivi_16225004:
    set $P5032, $P5033
  fallback5002:
    find_dynamic_lex $P5038, "$*PACKAGE"
    unless_null $P5038, fallback5005
    nqp_get_sc_object $P5041, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5040, $P5041
    set $P5039, $P5040["$PACKAGE"]
    unless_null $P5039, fallback5006
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5039, $P5042
  fallback5006:
    unless_null $P5039, vivi_16235007
    die "Contextual $*PACKAGE not found"
    box $P5043, "Contextual $*PACKAGE not found"
    set $P5039, $P5043
  vivi_16235007:
    set $P5038, $P5039
  fallback5005:
    find_lex $P5044, "$name"
    find_lex $P5045, "$past"
    $P5032."install_package_routine"($P5038, $P5044, $P5045)
.annotate 'line', 2424
    set $P5046, $P101[0]
    unless_null $P5046, fallback5008
    nqp_get_sc_object $P5047, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5046, $P5047
  fallback5008:
    nqp_get_sc_object $P5051, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Op"]
    unless_null $P5048, fallback5009
    nqp_get_sc_object $P5052, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5048, $P5052
  fallback5009:
.annotate 'line', 2426
    new $P5053, 'ResizablePMCArray'
    find_lex $P5054, "$name"
    push $P5053, $P5054
    find_lex $P5055, "$/"
    $P5056 = "&lexical_package_lookup"($P5053, $P5055)
.annotate 'line', 2427
    nqp_get_sc_object $P5060, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5059, $P5060, "QAST"
    get_who $P5058, $P5059
    set $P5057, $P5058["Var"]
    unless_null $P5057, fallback5010
    nqp_get_sc_object $P5061, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5057, $P5061
  fallback5010:
    find_lex $P5062, "$name"
    set $S5007, $P5062
    concat $S5006, "&", $S5007
    $P5063 = $P5057."new"($S5006 :named("name"), "lexical" :named("scope"))
    $P5064 = $P5048."new"($P5056, $P5063, "bind" :named("op"))
    $P5065 = $P5046."push"($P5064)
    set $P5066, $P5065
  if1620_end4998:
    .return ($P5066) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_472_1359292300.247") :anon :lex :outer("cuid_305_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2455
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_306_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2460
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5091 = 'cuid_473_1359292300.247' 
    capture_lex $P5091 
    .const 'Sub' $P5091 = 'cuid_474_1359292300.247' 
    capture_lex $P5091 
    .lex "$past", $P101 
    .lex "$name", $P102 
    .lex "$lexpast", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P103, $P5003
    unless_null _lex_param_1, fallback5042
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5005
  fallback5042:
    set $P5004, _lex_param_1["onlystar"]
    unless_null $P5004, fallback5043
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5006
  fallback5043:
    unless $P5004 goto if1632_else5040 
.annotate 'line', 2464
.annotate 'line', 2465
    $P5007 = "&only_star_block"()
    set $P101, $P5007
    goto if1632_end5041
  if1632_else5040:
.annotate 'line', 2467
.annotate 'line', 2468
    unless_null _lex_param_1, fallback5044
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5009
  fallback5044:
    set $P5008, _lex_param_1["blockoid"]
    unless_null $P5008, fallback5045
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5010
  fallback5045:
    $P5011 = $P5008."ast"()
    set $P101, $P5011
.annotate 'line', 2469
    $P101."blocktype"("declaration")
    find_dynamic_lex $P5012, "$*RETURN_USED"
    unless_null $P5012, fallback5048
    nqp_get_sc_object $P5015, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$RETURN_USED"]
    unless_null $P5013, fallback5049
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5013, $P5016
  fallback5049:
    unless_null $P5013, vivi_16345050
    die "Contextual $*RETURN_USED not found"
    box $P5017, "Contextual $*RETURN_USED not found"
    set $P5013, $P5017
  vivi_16345050:
    set $P5012, $P5013
  fallback5048:
    set $P5021, $P5012
    unless $P5012 goto if1633_end5047 
.annotate 'line', 2470
.annotate 'line', 2471
    set $P5018, $P101[1]
    unless_null $P5018, fallback5051
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5018, $P5019
  fallback5051:
    $P5020 = "&wrap_return_handler"($P5018)
    set $P101[1], $P5020
    set $P5021, $P5020
  if1633_end5047:
  if1632_end5041:
    set $P5022, $P101["signature_has_invocant"]
    unless_null $P5022, fallback5054
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5022, $P5023
  fallback5054:
    if $P5022 goto unless1635_end5053 
.annotate 'line', 2476
.annotate 'line', 2477
    set $P5024, $P101[0]
    unless_null $P5024, fallback5055
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5024, $P5025
  fallback5055:
    nqp_get_sc_object $P5029, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5056
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5026, $P5030
  fallback5056:
    find_dynamic_lex $P5031, "$*PACKAGE"
    unless_null $P5031, fallback5057
    nqp_get_sc_object $P5034, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$PACKAGE"]
    unless_null $P5032, fallback5058
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5032, $P5035
  fallback5058:
    unless_null $P5032, vivi_16365059
    die "Contextual $*PACKAGE not found"
    box $P5036, "Contextual $*PACKAGE not found"
    set $P5032, $P5036
  vivi_16365059:
    set $P5031, $P5032
  fallback5057:
    $P5037 = $P5026."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"), $P5031 :named("returns"))
    $P5038 = $P5024."unshift"($P5037)
  unless1635_end5053:
.annotate 'line', 2482
    $P101."symbol"("self", "lexical" :named("scope"))
    box $P5039, ""
    set $P102, $P5039
    unless_null _lex_param_1, fallback5062
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5041
  fallback5062:
    set $P5040, _lex_param_1["deflongname"]
    unless_null $P5040, fallback5063
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5040, $P5042
  fallback5063:
    unless $P5040 goto if1637_else5060 
.annotate 'line', 2486
    unless_null _lex_param_1, fallback5064
    nqp_get_sc_object $P5044, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5044
  fallback5064:
    set $P5043, _lex_param_1["private"]
    unless_null $P5043, fallback5065
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5043, $P5045
  fallback5065:
    set $S5002, $P5043
.annotate 'line', 2487
    unless_null _lex_param_1, fallback5066
    nqp_get_sc_object $P5048, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5048
  fallback5066:
    set $P5047, _lex_param_1["deflongname"]
    unless_null $P5047, fallback5067
    nqp_get_sc_object $P5049, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5047, $P5049
  fallback5067:
    set $P5046, $P5047[0]
    unless_null $P5046, fallback5068
    nqp_get_sc_object $P5050, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5046, $P5050
  fallback5068:
    $P5051 = $P5046."ast"()
    set $S5003, $P5051
    concat $S5001, $S5002, $S5003
    box $P5052, $S5001
    set $P102, $P5052
    goto if1637_end5061
  if1637_else5060:
    unless_null _lex_param_1, fallback5071
    nqp_get_sc_object $P5054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5054
  fallback5071:
    set $P5053, _lex_param_1["latename"]
    unless_null $P5053, fallback5072
    nqp_get_sc_object $P5055, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5053, $P5055
  fallback5072:
    set $P5068, $P5053
    unless $P5053 goto if1638_end5070 
.annotate 'line', 2489
    find_dynamic_lex $P5056, "$*PKGDECL"
    unless_null $P5056, fallback5075
    nqp_get_sc_object $P5059, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["$PKGDECL"]
    unless_null $P5057, fallback5076
    nqp_get_sc_object $P5060, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5057, $P5060
  fallback5076:
    unless_null $P5057, vivi_16405077
    die "Contextual $*PKGDECL not found"
    box $P5061, "Contextual $*PKGDECL not found"
    set $P5057, $P5061
  vivi_16405077:
    set $P5056, $P5057
  fallback5075:
    set $S5004, $P5056
    isne $I5001, $S5004, "role"
    unless $I5001 goto if1639_end5074 
.annotate 'line', 2490
.annotate 'line', 2491
    $P5062 = _lex_param_1."CURSOR"()
    $P5063 = $P5062."panic"("Late-bound method name only valid in role")
  if1639_end5074:
    unless_null _lex_param_1, fallback5078
    nqp_get_sc_object $P5065, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5065
  fallback5078:
    set $P5064, _lex_param_1["latename"]
    unless_null $P5064, fallback5079
    nqp_get_sc_object $P5066, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5064, $P5066
  fallback5079:
    set $S5006, $P5064
    concat $S5005, "!!LATENAME!!", $S5006
    box $P5067, $S5005
    set $P102, $P5067
    set $P5068, $P102
  if1638_end5070:
  if1637_end5061:
    set $S5007, $P102
    isne $I5002, $S5007, ""
    unless $I5002 goto if1641_end5081 
    .const 'Sub' $P5069 = 'cuid_473_1359292300.247' 
    capture_lex $P5069
    $P5070 = $P5069()
  if1641_end5081:
.annotate 'line', 2514
    nqp_get_sc_object $P5074, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5073, $P5074, "QAST"
    get_who $P5072, $P5073
    set $P5071, $P5072["Op"]
    unless_null $P5071, fallback5115
    nqp_get_sc_object $P5075, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5071, $P5075
  fallback5115:
    $P5076 = $P5071."new"($P101, "takeclosure" :named("op"))
    set $P103, $P5076
    set $P103["sink"], $P101
    set $P103["block_past"], $P101
    set $P5077, $P101["code_obj"]
    unless_null $P5077, fallback5116
    nqp_get_sc_object $P5078, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5077, $P5078
  fallback5116:
    set $P103["code_obj"], $P5077
.annotate 'line', 2518
    _lex_param_1."!make"($P103)
    unless_null _lex_param_1, fallback5119
    nqp_get_sc_object $P5080, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5080
  fallback5119:
    set $P5079, _lex_param_1["trait"]
    unless_null $P5079, fallback5120
    nqp_get_sc_object $P5081, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5079, $P5081
  fallback5120:
    set $P5090, $P5079
    unless $P5079 goto if1654_end5118 
.annotate 'line', 2519
    unless_null _lex_param_1, fallback5121
    nqp_get_sc_object $P5086, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5086
  fallback5121:
    set $P5085, _lex_param_1["trait"]
    unless_null $P5085, fallback5122
    nqp_get_sc_object $P5087, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5085, $P5087
  fallback5122:
    set $P5082, $P5085
    iter $P5084, $P5085
  for_next5123:
    unless $P5084, for_done5125
    shift $P5089, $P5084
  for_redo5124:
    .const 'Sub' $P5088 = 'cuid_474_1359292300.247' 
    capture_lex $P5088
    $P5082 = $P5088($P5089)
    goto for_next5123
  for_done5125:
    set $P5090, $P5082
  if1654_end5118:
    .return ($P5090) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_473_1359292300.247") :anon :lex :outer("cuid_306_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2495
    .lex "$meta_meth", $P101 
    .lex "$is_dispatcher", $P102 
    .lex "$code", $P103 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P103, $P5003
.annotate 'line', 2497
    find_lex $P5004, "$past"
    find_lex $P5005, "$name"
    $P5004."name"($P5005)
    find_dynamic_lex $P5006, "$*MULTINESS"
    unless_null $P5006, fallback5084
    nqp_get_sc_object $P5009, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$MULTINESS"]
    unless_null $P5007, fallback5085
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5010
  fallback5085:
    unless_null $P5007, vivi_16435086
    die "Contextual $*MULTINESS not found"
    box $P5011, "Contextual $*MULTINESS not found"
    set $P5007, $P5011
  vivi_16435086:
    set $P5006, $P5007
  fallback5084:
    set $S5001, $P5006
    iseq $I5001, $S5001, "multi"
    unless $I5001 goto if1642_else5082 
    set $S5002, "add_multi_method"
    goto if1642_end5083
  if1642_else5082:
    set $S5002, "add_method"
  if1642_end5083:
    box $P5012, $S5002
    set $P101, $P5012
    find_dynamic_lex $P5013, "$*MULTINESS"
    unless_null $P5013, fallback5087
    nqp_get_sc_object $P5016, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$MULTINESS"]
    unless_null $P5014, fallback5088
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5014, $P5017
  fallback5088:
    unless_null $P5014, vivi_16445089
    die "Contextual $*MULTINESS not found"
    box $P5018, "Contextual $*MULTINESS not found"
    set $P5014, $P5018
  vivi_16445089:
    set $P5013, $P5014
  fallback5087:
    set $S5003, $P5013
    iseq $I5002, $S5003, "proto"
    box $P5019, $I5002
    set $P102, $P5019
.annotate 'line', 2502
    find_dynamic_lex $P5020, "$*W"
    unless_null $P5020, fallback5090
    nqp_get_sc_object $P5023, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$W"]
    unless_null $P5021, fallback5091
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5021, $P5024
  fallback5091:
    unless_null $P5021, vivi_16455092
    die "Contextual $*W not found"
    box $P5025, "Contextual $*W not found"
    set $P5021, $P5025
  vivi_16455092:
    set $P5020, $P5021
  fallback5090:
    find_lex $P5026, "$past"
    find_lex $P5027, "$name"
    $P5028 = $P5020."create_code"($P5026, $P5027, $P102)
    set $P103, $P5028
    find_dynamic_lex $P5029, "$*MULTINESS"
    unless_null $P5029, fallback5095
    nqp_get_sc_object $P5032, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["$MULTINESS"]
    unless_null $P5030, fallback5096
    nqp_get_sc_object $P5033, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5030, $P5033
  fallback5096:
    unless_null $P5030, vivi_16475097
    die "Contextual $*MULTINESS not found"
    box $P5034, "Contextual $*MULTINESS not found"
    set $P5030, $P5034
  vivi_16475097:
    set $P5029, $P5030
  fallback5095:
    set $S5004, $P5029
    iseq $I5003, $S5004, "multi"
    unless $I5003 goto if1646_end5094 
.annotate 'line', 2503
    find_lex $P5035, "$past"
    $P5036 = "&attach_multi_signature"($P103, $P5035)
  if1646_end5094:
.annotate 'line', 2504
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback5098
    nqp_get_sc_object $P5040, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback5099
    nqp_get_sc_object $P5041, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5038, $P5041
  fallback5099:
    unless_null $P5038, vivi_16485100
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_16485100:
    set $P5037, $P5038
  fallback5098:
    find_dynamic_lex $P5043, "$*PACKAGE"
    unless_null $P5043, fallback5101
    nqp_get_sc_object $P5046, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$PACKAGE"]
    unless_null $P5044, fallback5102
    nqp_get_sc_object $P5047, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5044, $P5047
  fallback5102:
    unless_null $P5044, vivi_16495103
    die "Contextual $*PACKAGE not found"
    box $P5048, "Contextual $*PACKAGE not found"
    set $P5044, $P5048
  vivi_16495103:
    set $P5043, $P5044
  fallback5101:
    find_lex $P5049, "$name"
    $P5037."pkg_add_method"($P5043, $P101, $P5049, $P103)
    find_lex $P5050, "$past"
    set $P5050["code_obj"], $P103
    find_dynamic_lex $P5051, "$*SCOPE"
    unless_null $P5051, fallback5106
    nqp_get_sc_object $P5054, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5053, $P5054
    set $P5052, $P5053["$SCOPE"]
    unless_null $P5052, fallback5107
    nqp_get_sc_object $P5055, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5052, $P5055
  fallback5107:
    unless_null $P5052, vivi_16515108
    die "Contextual $*SCOPE not found"
    box $P5056, "Contextual $*SCOPE not found"
    set $P5052, $P5056
  vivi_16515108:
    set $P5051, $P5052
  fallback5106:
    set $S5005, $P5051
    iseq $I5004, $S5005, "our"
    box $P5073, $I5004
    set $P5072, $P5073
    unless $I5004 goto if1650_end5105 
.annotate 'line', 2508
.annotate 'line', 2509
    find_dynamic_lex $P5057, "$*W"
    unless_null $P5057, fallback5109
    nqp_get_sc_object $P5060, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["$W"]
    unless_null $P5058, fallback5110
    nqp_get_sc_object $P5061, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5058, $P5061
  fallback5110:
    unless_null $P5058, vivi_16525111
    die "Contextual $*W not found"
    box $P5062, "Contextual $*W not found"
    set $P5058, $P5062
  vivi_16525111:
    set $P5057, $P5058
  fallback5109:
    find_dynamic_lex $P5063, "$*PACKAGE"
    unless_null $P5063, fallback5112
    nqp_get_sc_object $P5066, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5065, $P5066
    set $P5064, $P5065["$PACKAGE"]
    unless_null $P5064, fallback5113
    nqp_get_sc_object $P5067, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5064, $P5067
  fallback5113:
    unless_null $P5064, vivi_16535114
    die "Contextual $*PACKAGE not found"
    box $P5068, "Contextual $*PACKAGE not found"
    set $P5064, $P5068
  vivi_16535114:
    set $P5063, $P5064
  fallback5112:
    find_lex $P5069, "$name"
    find_lex $P5070, "$past"
    $P5071 = $P5057."install_package_routine"($P5063, $P5069, $P5070)
    set $P5072, $P5071
  if1650_end5105:
    .return ($P5072) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_474_1359292300.247") :anon :lex :outer("cuid_306_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2520
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_307_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2552
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5025 = 'cuid_475_1359292300.247' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_476_1359292300.247' 
    capture_lex $P5025 
    .lex "$BLOCK", $P101 
    .lex "$BLOCKINIT", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
.annotate 'line', 2553
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback5126
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback5127
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5007
  fallback5127:
    unless_null $P5004, vivi_16555128
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_16555128:
    set $P5003, $P5004
  fallback5126:
    $P5009 = $P5003."cur_lexpad"()
    set $P101, $P5009
    set $P5010, $P101[0]
    unless_null $P5010, fallback5129
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5011
  fallback5129:
    set $P102, $P5010
    unless_null _lex_param_1, fallback5132
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5013
  fallback5132:
    set $P5012, _lex_param_1["invocant"]
    unless_null $P5012, fallback5133
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5012, $P5014
  fallback5133:
    unless $P5012 goto if1656_end5131 
    .const 'Sub' $P5015 = 'cuid_475_1359292300.247' 
    capture_lex $P5015
    $P5016 = $P5015()
  if1656_end5131:
    unless_null _lex_param_1, fallback5140
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5021
  fallback5140:
    set $P5020, _lex_param_1["parameter"]
    unless_null $P5020, fallback5141
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5020, $P5022
  fallback5141:
    set $P5017, $P5020
    iter $P5019, $P5020
  for_next5142:
    unless $P5019, for_done5144
    shift $P5024, $P5019
  for_redo5143:
    .const 'Sub' $P5023 = 'cuid_476_1359292300.247' 
    capture_lex $P5023
    $P5017 = $P5023($P5024)
    goto for_next5142
  for_done5144:
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_475_1359292300.247") :anon :lex :outer("cuid_307_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2555
    .lex "$inv", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 2556
    find_lex $P5004, "$/"
    unless_null $P5004, fallback5134
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5005
  fallback5134:
    set $P5003, $P5004["invocant"]
    unless_null $P5003, fallback5135
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5006
  fallback5135:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback5136
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5007
  fallback5136:
    $P5008 = $P5002."ast"()
    set $P101, $P5008
.annotate 'line', 2557
    find_lex $P5009, "$BLOCKINIT"
    $P5009."push"($P101)
.annotate 'line', 2558
    find_lex $P5010, "$BLOCKINIT"
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5137
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5015
  fallback5137:
.annotate 'line', 2560
    nqp_get_sc_object $P5019, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback5138
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5016, $P5020
  fallback5138:
    $P5021 = $P5016."new"("self" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2561
    nqp_get_sc_object $P5025, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Var"]
    unless_null $P5022, fallback5139
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5022, $P5026
  fallback5139:
    $P5027 = $P101."name"()
    $P5028 = $P5022."new"("lexical" :named("scope"), $P5027 :named("name"))
    $P5029 = $P5011."new"($P5021, $P5028, "bind" :named("op"))
    $P5010."push"($P5029)
    find_lex $P5030, "$BLOCK"
    box $P5031, 1
    set $P5030["signature_has_invocant"], $P5031
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_476_1359292300.247") :anon :lex :outer("cuid_307_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2565
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$BLOCKINIT"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_308_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2568
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5092 = 'cuid_478_1359292300.247' 
    capture_lex $P5092 
    .lex "$quant", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback5145
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5004
  fallback5145:
    set $P5003, _lex_param_1["quant"]
    unless_null $P5003, fallback5146
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5005
  fallback5146:
    set $P101, $P5003
    unless_null _lex_param_1, fallback5149
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5007
  fallback5149:
    set $P5006, _lex_param_1["named_param"]
    unless_null $P5006, fallback5150
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5008
  fallback5150:
    unless $P5006 goto if1657_else5147 
.annotate 'line', 2571
.annotate 'line', 2572
    unless_null _lex_param_1, fallback5151
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5010
  fallback5151:
    set $P5009, _lex_param_1["named_param"]
    unless_null $P5009, fallback5152
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5011
  fallback5152:
    $P5012 = $P5009."ast"()
    set $P102, $P5012
    set $S5001, $P101
    isne $I5001, $S5001, "!"
    box $P5023, $I5001
    set $P5022, $P5023
    unless $I5001 goto if1658_end5154 
.annotate 'line', 2573
.annotate 'line', 2574
    unless_null _lex_param_1, fallback5155
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5016
  fallback5155:
    set $P5015, _lex_param_1["named_param"]
    unless_null $P5015, fallback5156
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5015, $P5017
  fallback5156:
    set $P5014, $P5015["param_var"]
    unless_null $P5014, fallback5157
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5014, $P5018
  fallback5157:
    set $P5013, $P5014["sigil"]
    unless_null $P5013, fallback5158
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5013, $P5019
  fallback5158:
    $P5020 = "&default_for"($P5013)
    $P5021 = $P102."default"($P5020)
    set $P5022, $P5021
  if1658_end5154:
    goto if1657_end5148
  if1657_else5147:
.annotate 'line', 2577
.annotate 'line', 2578
    unless_null _lex_param_1, fallback5159
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5025
  fallback5159:
    set $P5024, _lex_param_1["param_var"]
    unless_null $P5024, fallback5160
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5024, $P5026
  fallback5160:
    $P5027 = $P5024."ast"()
    set $P102, $P5027
    set $S5002, $P101
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1659_else5161 
.annotate 'line', 2579
.annotate 'line', 2580
    $P102."slurpy"(1)
.annotate 'line', 2581
    unless_null _lex_param_1, fallback5163
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5030
  fallback5163:
    set $P5029, _lex_param_1["param_var"]
    unless_null $P5029, fallback5164
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5029, $P5031
  fallback5164:
    set $P5028, $P5029["sigil"]
    unless_null $P5028, fallback5165
    nqp_get_sc_object $P5032, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5028, $P5032
  fallback5165:
    set $S5003, $P5028
    iseq $I5003, $S5003, "%"
    $P5033 = $P102."named"($I5003)
    set $P5043, $P5033
    goto if1659_end5162
  if1659_else5161:
    set $S5004, $P101
    iseq $I5004, $S5004, "?"
    box $P5042, $I5004
    set $P5041, $P5042
    unless $I5004 goto if1660_end5167 
.annotate 'line', 2583
.annotate 'line', 2584
    unless_null _lex_param_1, fallback5168
    nqp_get_sc_object $P5036, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5036
  fallback5168:
    set $P5035, _lex_param_1["param_var"]
    unless_null $P5035, fallback5169
    nqp_get_sc_object $P5037, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5035, $P5037
  fallback5169:
    set $P5034, $P5035["sigil"]
    unless_null $P5034, fallback5170
    nqp_get_sc_object $P5038, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5034, $P5038
  fallback5170:
    $P5039 = "&default_for"($P5034)
    $P5040 = $P102."default"($P5039)
    set $P5041, $P5040
  if1660_end5167:
    set $P5043, $P5041
  if1659_end5162:
  if1657_end5148:
    unless_null _lex_param_1, fallback5173
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5045
  fallback5173:
    set $P5044, _lex_param_1["default_value"]
    unless_null $P5044, fallback5174
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5044, $P5046
  fallback5174:
    unless $P5044 goto if1661_end5172 
.annotate 'line', 2587
    set $S5005, $P101
    iseq $I5005, $S5005, "*"
    unless $I5005 goto if1662_end5176 
.annotate 'line', 2588
.annotate 'line', 2589
    $P5047 = _lex_param_1."CURSOR"()
    $P5048 = $P5047."panic"("Can't put default on slurpy parameter")
  if1662_end5176:
    set $S5006, $P101
    iseq $I5006, $S5006, "!"
    unless $I5006 goto if1663_end5178 
.annotate 'line', 2591
.annotate 'line', 2592
    $P5049 = _lex_param_1."CURSOR"()
    $P5050 = $P5049."panic"("Can't put default on required parameter")
  if1663_end5178:
.annotate 'line', 2594
    unless_null _lex_param_1, fallback5179
    nqp_get_sc_object $P5054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5054
  fallback5179:
    set $P5053, _lex_param_1["default_value"]
    unless_null $P5053, fallback5180
    nqp_get_sc_object $P5055, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5053, $P5055
  fallback5180:
    set $P5052, $P5053[0]
    unless_null $P5052, fallback5181
    nqp_get_sc_object $P5056, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5052, $P5056
  fallback5181:
    set $P5051, $P5052["EXPR"]
    unless_null $P5051, fallback5182
    nqp_get_sc_object $P5057, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5051, $P5057
  fallback5182:
    $P5058 = $P5051."ast"()
    $P5059 = $P102."default"($P5058)
  if1661_end5172:
.annotate 'line', 2596
    $P5060 = $P102."default"()
    if $P5060 goto unless1664_end5184 
    find_dynamic_lex $P5061, "$*W"
    unless_null $P5061, fallback5185
    nqp_get_sc_object $P5064, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5063, $P5064
    set $P5062, $P5063["$W"]
    unless_null $P5062, fallback5186
    nqp_get_sc_object $P5065, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5062, $P5065
  fallback5186:
    unless_null $P5062, vivi_16655187
    die "Contextual $*W not found"
    box $P5066, "Contextual $*W not found"
    set $P5062, $P5066
  vivi_16655187:
    set $P5061, $P5062
  fallback5185:
    $P5067 = $P5061."cur_lexpad"()
    find_dynamic_lex $P5068, "$*W"
    unless_null $P5068, fallback5188
    nqp_get_sc_object $P5071, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5070, $P5071
    set $P5069, $P5070["$W"]
    unless_null $P5069, fallback5189
    nqp_get_sc_object $P5072, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5069, $P5072
  fallback5189:
    unless_null $P5069, vivi_16665190
    die "Contextual $*W not found"
    box $P5073, "Contextual $*W not found"
    set $P5069, $P5073
  vivi_16665190:
    set $P5068, $P5069
  fallback5188:
    $P5074 = $P5068."cur_lexpad"()
    $P5075 = $P5074."arity"()
    set $N5002, $P5075
    set $N5003, 1
    add $N5001, $N5002, $N5003
    $P5076 = $P5067."arity"($N5001)
  unless1664_end5184:
    unless_null _lex_param_1, fallback5193
    nqp_get_sc_object $P5078, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5078
  fallback5193:
    set $P5077, _lex_param_1["typename"]
    unless_null $P5077, fallback5194
    nqp_get_sc_object $P5079, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5077, $P5079
  fallback5194:
    unless $P5077 goto if1667_end5192 
    .const 'Sub' $P5080 = 'cuid_478_1359292300.247' 
    capture_lex $P5080
    $P5081 = $P5080()
  if1667_end5192:
    unless_null _lex_param_1, fallback5211
    nqp_get_sc_object $P5083, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5083
  fallback5211:
    set $P5082, _lex_param_1["definedness"]
    unless_null $P5082, fallback5212
    nqp_get_sc_object $P5084, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5082, $P5084
  fallback5212:
    unless $P5082 goto if1672_end5210 
.annotate 'line', 2611
    unless_null _lex_param_1, fallback5213
    nqp_get_sc_object $P5087, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5087
  fallback5213:
    set $P5086, _lex_param_1["definedness"]
    unless_null $P5086, fallback5214
    nqp_get_sc_object $P5088, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5086, $P5088
  fallback5214:
    set $P5085, $P5086[0]
    unless_null $P5085, fallback5215
    nqp_get_sc_object $P5089, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5085, $P5089
  fallback5215:
    set $S5007, $P5085
    box $P5090, $S5007
    set $P102["definedness"], $P5090
  if1672_end5210:
.annotate 'line', 2615
    $P5091 = _lex_param_1."!make"($P102)
    .return ($P5091) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_478_1359292300.247") :anon :lex :outer("cuid_308_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2599
    .const 'Sub' $P5015 = 'cuid_477_1359292300.247' 
    capture_lex $P5015 
    .lex "$type", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 2600
    find_lex $P5004, "$/"
    unless_null $P5004, fallback5195
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5005
  fallback5195:
    set $P5003, $P5004["typename"]
    unless_null $P5003, fallback5196
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5006
  fallback5196:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback5197
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5007
  fallback5197:
    $P5008 = $P5002."ast"()
    $P5009 = $P5008."value"()
    set $P101, $P5009
.annotate 'line', 2601
    find_lex $P5010, "$past"
    $P5010."returns"($P101)
    repr_get_primitive_type_spec $I5001, $P101
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto if1668_end5199 
    .const 'Sub' $P5011 = 'cuid_477_1359292300.247' 
    capture_lex $P5011
    $P5012 = $P5011($P5014)
    set $P5013, $P5012
  if1668_end5199:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_477_1359292300.247") :anon :lex :outer("cuid_478_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2602
    .param pmc _lex_param_0 
    .lex "$prim", _lex_param_0 
.annotate 'line', 2603
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5200
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5201
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5005
  fallback5201:
    unless_null $P5002, vivi_16695202
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16695202:
    set $P5001, $P5002
  fallback5200:
    $P5007 = $P5001."cur_lexpad"()
    find_lex $P5008, "$past"
    $P5009 = $P5008."name"()
    find_lex $P5010, "$type"
    $P5007."symbol"($P5009, $P5010 :named("type"))
.annotate 'line', 2604
    find_lex $P5011, "$past"
    $P5012 = $P5011."default"()
    set $P5017, $P5012
    unless $P5012 goto if1671_end5206 
    find_lex $P5014, "$/"
    unless_null $P5014, fallback5207
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5014, $P5015
  fallback5207:
    set $P5013, $P5014["default_value"]
    unless_null $P5013, fallback5208
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5013, $P5016
  fallback5208:
    isfalse $I5001, $P5013
    box $P5018, $I5001
    set $P5017, $P5018
  if1671_end5206:
    set $P5022, $P5017
    unless $P5017 goto if1670_end5204 
.annotate 'line', 2605
    find_lex $P5019, "$past"
    $P5020 = "&default_value_for_prim"(_lex_param_0)
    $P5021 = $P5019."default"($P5020)
    set $P5022, $P5021
  if1670_end5204:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_309_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2618
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    set $S5001, _lex_param_1
    box $P5003, $S5001
    set $P101, $P5003
.annotate 'line', 2620
    nqp_get_sc_object $P5007, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback5216
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5008
  fallback5216:
    $P5009 = $P5004."new"($P101 :named("name"), "lexical" :named("scope"), "param" :named("decl"), _lex_param_1 :named("node"))
    set $P102, $P5009
.annotate 'line', 2622
    find_dynamic_lex $P5010, "$*W"
    unless_null $P5010, fallback5217
    nqp_get_sc_object $P5013, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$W"]
    unless_null $P5011, fallback5218
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5014
  fallback5218:
    unless_null $P5011, vivi_16735219
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5011, $P5015
  vivi_16735219:
    set $P5010, $P5011
  fallback5217:
    $P5016 = $P5010."cur_lexpad"()
    $P5016."symbol"($P101, "lexical" :named("scope"))
.annotate 'line', 2623
    $P5017 = _lex_param_1."!make"($P102)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_310_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2626
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 2627
    unless_null _lex_param_1, fallback5220
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5003
  fallback5220:
    set $P5002, _lex_param_1["param_var"]
    unless_null $P5002, fallback5221
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5004
  fallback5221:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2628
    unless_null _lex_param_1, fallback5222
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5008
  fallback5222:
    set $P5007, _lex_param_1["param_var"]
    unless_null $P5007, fallback5223
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5009
  fallback5223:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback5224
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5010
  fallback5224:
    set $S5001, $P5006
    $P101."named"($S5001)
.annotate 'line', 2629
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_311_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2632
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5017 = 'cuid_479_1359292300.247' 
    capture_lex $P5017 
    .lex "@name", $P101 
    .lex "$found", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
.annotate 'line', 2636
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5005, $P5006, "HLL"
    get_who $P5004, $P5005
    set $P5003, $P5004["Compiler"]
    unless_null $P5003, fallback5225
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5007
  fallback5225:
    set $S5001, _lex_param_1
    $P5008 = $P5003."parse_name"($S5001)
    set $P101, $P5008
    box $P5009, 0
    set $P102, $P5009
    new $P5012, 'ExceptionHandler'
    set_label $P5012, catch_handler_16765231
    $P5012.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5012
    .const 'Sub' $P5010 = 'cuid_479_1359292300.247' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5013, $P5011
    pop_eh 
    goto skip_handler_16755230
  catch_handler_16765231:
    .get_results ($P5012) 
    set $I10001, 1
    set $P5012["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    finalize $P5012
    pop_upto_eh $P5012
    pop_eh 
    set $P5013, $P10001
    goto skip_handler_16755230
  skip_handler_16755230:
    set $P5016, $P102
    if $P102 goto unless1677_end5233 
.annotate 'line', 2643
.annotate 'line', 2644
    $P5014 = _lex_param_1."CURSOR"()
    set $S5004, _lex_param_1
    concat $S5003, "Use of undeclared type '", $S5004
    concat $S5002, $S5003, "'"
    $P5015 = $P5014."panic"($S5002)
    set $P5016, $P5015
  unless1677_end5233:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_479_1359292300.247") :anon :lex :outer("cuid_311_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2638
    .lex "$sym", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 2639
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback5226
    nqp_get_sc_object $P5005, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback5227
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5006
  fallback5227:
    unless_null $P5003, vivi_16745228
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_16745228:
    set $P5002, $P5003
  fallback5226:
    find_lex $P5008, "@name"
    $P5009 = $P5002."find_sym"($P5008)
    set $P101, $P5009
.annotate 'line', 2640
    find_dynamic_lex $P5010, "$/"
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["WVal"]
    unless_null $P5011, fallback5229
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5015
  fallback5229:
    $P5016 = $P5011."new"($P101 :named("value"))
    $P5010."!make"($P5016)
    box $P5017, 1
    store_lex "$found", $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_312_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2648
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2649
    unless_null _lex_param_1, fallback5234
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback5234:
    set $P5001, _lex_param_1["trait_mod"]
    unless_null $P5001, fallback5235
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback5235:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_313_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2652
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5025 = 'cuid_481_1359292300.247' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_483_1359292300.247' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_484_1359292300.247' 
    capture_lex $P5025 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5238
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback5238:
    set $P5001, _lex_param_1["longname"]
    unless_null $P5001, fallback5239
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback5239:
    set $S5001, $P5001
    iseq $I5001, $S5001, "parrot_vtable"
    unless $I5001 goto if1678_else5236 
    .const 'Sub' $P5004 = 'cuid_481_1359292300.247' 
    capture_lex $P5004
    $P5005 = $P5004()
    set $P5024, $P5005
    goto if1678_end5237
  if1678_else5236:
    unless_null _lex_param_1, fallback5263
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5007
  fallback5263:
    set $P5006, _lex_param_1["longname"]
    unless_null $P5006, fallback5264
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5008
  fallback5264:
    set $S5002, $P5006
    iseq $I5002, $S5002, "parrot_vtable_handler"
    unless $I5002 goto if1684_else5261 
    .const 'Sub' $P5009 = 'cuid_483_1359292300.247' 
    capture_lex $P5009
    $P5010 = $P5009()
    set $P5023, $P5010
    goto if1684_end5262
  if1684_else5261:
    unless_null _lex_param_1, fallback5280
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5012
  fallback5280:
    set $P5011, _lex_param_1["longname"]
    unless_null $P5011, fallback5281
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5013
  fallback5281:
    set $S5003, $P5011
    iseq $I5003, $S5003, "export"
    unless $I5003 goto if1688_else5278 
.annotate 'line', 2678
.annotate 'line', 2679
    .const 'Sub' $P5015 = 'cuid_484_1359292300.247' 
    capture_lex $P5015
    newclosure $P5014, $P5015
    $P5016 = _lex_param_1."!make"($P5014)
    set $P5022, $P5016
    goto if1688_end5279
  if1688_else5278:
.annotate 'line', 2686
.annotate 'line', 2687
    $P5017 = _lex_param_1."CURSOR"()
    unless_null _lex_param_1, fallback5293
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5019
  fallback5293:
    set $P5018, _lex_param_1["longname"]
    unless_null $P5018, fallback5294
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5018, $P5020
  fallback5294:
    set $S5006, $P5018
    concat $S5005, "Trait '", $S5006
    concat $S5004, $S5005, "' not implemented"
    $P5021 = $P5017."panic"($S5004)
    set $P5022, $P5021
  if1688_end5279:
    set $P5023, $P5022
  if1684_end5262:
    set $P5024, $P5023
  if1678_end5237:
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_481_1359292300.247") :anon :lex :outer("cuid_313_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2653
    .const 'Sub' $P5039 = 'cuid_480_1359292300.247' 
    capture_lex $P5039 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    .lex "$is_dispatcher", $P104 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P103, $P5003
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P104, $P5004
.annotate 'line', 2655
    find_lex $P5007, "$/"
    unless_null $P5007, fallback5240
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5008
  fallback5240:
    set $P5006, $P5007["circumfix"]
    unless_null $P5006, fallback5241
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5009
  fallback5241:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5242
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5005, $P5010
  fallback5242:
    $P5011 = $P5005."ast"()
    set $P101, $P5011
.annotate 'line', 2657
    nqp_get_sc_object $P5015, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["SVal"]
    unless_null $P5012, fallback5245
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5012, $P5016
  fallback5245:
    $P5017 = $P5012."ACCEPTS"($P101)
    if $P5017 goto unless1679_end5244 
.annotate 'line', 2656
    find_lex $P5018, "$/"
    $P5019 = $P5018."CURSOR"()
    $P5020 = $P5019."panic"("Trait 'parrot_vtable' requires constant scalar argument")
  unless1679_end5244:
.annotate 'line', 2658
    $P5021 = $P101."value"()
    set $P102, $P5021
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback5246
    nqp_get_sc_object $P5025, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback5247
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5023, $P5026
  fallback5247:
    unless_null $P5023, vivi_16805248
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_16805248:
    set $P5022, $P5023
  fallback5246:
    set $P103, $P5022
    find_dynamic_lex $P5028, "$*SCOPE"
    unless_null $P5028, fallback5249
    nqp_get_sc_object $P5031, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["$SCOPE"]
    unless_null $P5029, fallback5250
    nqp_get_sc_object $P5032, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5029, $P5032
  fallback5250:
    unless_null $P5029, vivi_16815251
    die "Contextual $*SCOPE not found"
    box $P5033, "Contextual $*SCOPE not found"
    set $P5029, $P5033
  vivi_16815251:
    set $P5028, $P5029
  fallback5249:
    set $S5001, $P5028
    iseq $I5001, $S5001, "proto"
    box $P5034, $I5001
    set $P104, $P5034
.annotate 'line', 2661
    find_dynamic_lex $P5035, "$/"
    .const 'Sub' $P5037 = 'cuid_480_1359292300.247' 
    capture_lex $P5037
    newclosure $P5036, $P5037
    $P5038 = $P5035."!make"($P5036)
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_480_1359292300.247") :anon :lex :outer("cuid_481_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2661
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2662
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5252
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5253
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5005
  fallback5253:
    unless_null $P5002, vivi_16825254
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16825254:
    set $P5001, $P5002
  fallback5252:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
.annotate 'line', 2663
    $P5011 = _lex_param_0."ast"()
    set $P5010, $P5011["code_obj"]
    unless_null $P5010, fallback5256
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5012
  fallback5256:
    set $P5009, $P5010
    defined $I5001, $P5009
    if $I5001, defor5255
.annotate 'line', 2664
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback5257
    nqp_get_sc_object $P5016, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback5258
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5014, $P5017
  fallback5258:
    unless_null $P5014, vivi_16835259
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_16835259:
    set $P5013, $P5014
  fallback5257:
    $P5020 = _lex_param_0."ast"()
    set $P5019, $P5020["block_past"]
    unless_null $P5019, fallback5260
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5019, $P5021
  fallback5260:
    find_lex $P5022, "$name"
    find_lex $P5023, "$is_dispatcher"
    $P5024 = $P5013."create_code"($P5019, $P5022, $P5023)
    set $P5009, $P5024
  defor5255:
    $P5025 = $P5001."pkg_add_method"($P5007, "add_parrot_vtable_mapping", $P5008, $P5009)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_483_1359292300.247") :anon :lex :outer("cuid_313_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2667
    .const 'Sub' $P5031 = 'cuid_482_1359292300.247' 
    capture_lex $P5031 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P103, $P5003
.annotate 'line', 2669
    find_lex $P5006, "$/"
    unless_null $P5006, fallback5265
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5007
  fallback5265:
    set $P5005, $P5006["circumfix"]
    unless_null $P5005, fallback5266
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5005, $P5008
  fallback5266:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback5267
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5009
  fallback5267:
    $P5010 = $P5004."ast"()
    set $P101, $P5010
.annotate 'line', 2671
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5270
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5015
  fallback5270:
    $P5016 = $P5011."ACCEPTS"($P101)
    if $P5016 goto unless1685_end5269 
.annotate 'line', 2670
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    $P5019 = $P5018."panic"("Trait 'parrot_vtable_handler' requires constant scalar argument")
  unless1685_end5269:
.annotate 'line', 2672
    $P5020 = $P101."value"()
    set $P102, $P5020
    find_dynamic_lex $P5021, "$*PACKAGE"
    unless_null $P5021, fallback5271
    nqp_get_sc_object $P5024, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["$PACKAGE"]
    unless_null $P5022, fallback5272
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5022, $P5025
  fallback5272:
    unless_null $P5022, vivi_16865273
    die "Contextual $*PACKAGE not found"
    box $P5026, "Contextual $*PACKAGE not found"
    set $P5022, $P5026
  vivi_16865273:
    set $P5021, $P5022
  fallback5271:
    set $P103, $P5021
.annotate 'line', 2674
    find_dynamic_lex $P5027, "$/"
    .const 'Sub' $P5029 = 'cuid_482_1359292300.247' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    $P5030 = $P5027."!make"($P5028)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_482_1359292300.247") :anon :lex :outer("cuid_483_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2674
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2675
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5274
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5275
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5005
  fallback5275:
    unless_null $P5002, vivi_16875276
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16875276:
    set $P5001, $P5002
  fallback5274:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
    set $P5009, _lex_param_0["variable"]
    unless_null $P5009, fallback5277
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5010
  fallback5277:
    set $S5001, $P5009
    $P5011 = $P5001."pkg_add_parrot_vtable_handler_mapping"($P5007, $P5008, $S5001)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_484_1359292300.247") :anon :lex :outer("cuid_313_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2679
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$name", $P102 
    .lex "$match", _lex_param_0 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
.annotate 'line', 2680
    $P5003 = _lex_param_0."ast"()
    set $P101, $P5003
.annotate 'line', 2681
    set $P5004, $P101["block_past"]
    unless_null $P5004, fallback5282
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5005
  fallback5282:
    $P5006 = $P5004."name"()
    set $P102, $P5006
    find_dynamic_lex $P5010, "$*EXPORT"
    unless_null $P5010, fallback5283
    nqp_get_sc_object $P5013, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$EXPORT"]
    unless_null $P5011, fallback5284
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5014
  fallback5284:
    unless_null $P5011, vivi_16895285
    die "Contextual $*EXPORT not found"
    box $P5015, "Contextual $*EXPORT not found"
    set $P5011, $P5015
  vivi_16895285:
    set $P5010, $P5011
  fallback5283:
    get_who $P5009, $P5010
    set $P5008, $P5009["DEFAULT"]
    unless_null $P5008, fallback5286
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5016
  fallback5286:
    get_who $P5007, $P5008
    set $S5002, $P102
    concat $S5001, "&", $S5002
    set $P5018, $P101["code_obj"]
    unless_null $P5018, fallback5288
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5018, $P5019
  fallback5288:
    set $P5017, $P5018
    defined $I5001, $P5017
    if $I5001, defor5287
.annotate 'line', 2683
    find_dynamic_lex $P5020, "$*W"
    unless_null $P5020, fallback5289
    nqp_get_sc_object $P5023, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$W"]
    unless_null $P5021, fallback5290
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5021, $P5024
  fallback5290:
    unless_null $P5021, vivi_16905291
    die "Contextual $*W not found"
    box $P5025, "Contextual $*W not found"
    set $P5021, $P5025
  vivi_16905291:
    set $P5020, $P5021
  fallback5289:
    set $P5026, $P101["block_past"]
    unless_null $P5026, fallback5292
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5026, $P5027
  fallback5292:
    $P5028 = $P5020."create_code"($P5026, $P102, 0)
    set $P5017, $P5028
  defor5287:
    set $P5007[$S5001], $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_314_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2691
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_5 :opt_flag 
    .const 'Sub' $P5074 = 'cuid_486_1359292300.247' 
    capture_lex $P5074 
    if haz_param_5, default5375
    nqp_get_sc_object $P5073, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_2, $P5073
  default5375:
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback5297
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5004
  fallback5297:
    set $P5003, _lex_param_1["deflongname"]
    unless_null $P5003, fallback5298
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5005
  fallback5298:
    unless $P5003 goto if1691_else5295 
.annotate 'line', 2693
.annotate 'line', 2694
    unless_null _lex_param_1, fallback5299
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5007
  fallback5299:
    set $P5006, _lex_param_1["deflongname"]
    unless_null $P5006, fallback5300
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5008
  fallback5300:
    $P5009 = $P5006."ast"()
    set $S5001, $P5009
    box $P5010, $S5001
    set $P101, $P5010
    goto if1691_end5296
  if1691_else5295:
.annotate 'line', 2696
    find_dynamic_lex $P5011, "$*PKGDECL"
    unless_null $P5011, fallback5303
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$PKGDECL"]
    unless_null $P5012, fallback5304
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5012, $P5015
  fallback5304:
    unless_null $P5012, vivi_16935305
    die "Contextual $*PKGDECL not found"
    box $P5016, "Contextual $*PKGDECL not found"
    set $P5012, $P5016
  vivi_16935305:
    set $P5011, $P5012
  fallback5303:
    set $S5002, $P5011
    isne $I5001, $S5002, "role"
    unless $I5001 goto if1692_end5302 
.annotate 'line', 2697
.annotate 'line', 2698
    $P5017 = _lex_param_1."CURSOR"()
    $P5018 = $P5017."panic"("Late-bound method name only valid in role")
  if1692_end5302:
    unless_null _lex_param_1, fallback5306
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5020
  fallback5306:
    set $P5019, _lex_param_1["latename"]
    unless_null $P5019, fallback5307
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5019, $P5021
  fallback5307:
    set $S5004, $P5019
    concat $S5003, "!!LATENAME!!", $S5004
    box $P5022, $S5003
    set $P101, $P5022
  if1691_end5296:
    unless_null _lex_param_1, fallback5310
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5024
  fallback5310:
    set $P5023, _lex_param_1["proto"]
    unless_null $P5023, fallback5311
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5023, $P5025
  fallback5311:
    unless $P5023 goto if1694_else5308 
.annotate 'line', 2703
.annotate 'line', 2704
    nqp_get_sc_object $P5029, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Block"]
    unless_null $P5026, fallback5312
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5026, $P5030
  fallback5312:
.annotate 'line', 2706
    nqp_get_sc_object $P5034, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Op"]
    unless_null $P5031, fallback5313
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5031, $P5035
  fallback5313:
.annotate 'line', 2707
    nqp_get_sc_object $P5039, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Var"]
    unless_null $P5036, fallback5314
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5036, $P5040
  fallback5314:
    $P5041 = $P5036."new"("self" :named("name"), "local" :named("scope"), "param" :named("decl"))
.annotate 'line', 2708
    nqp_get_sc_object $P5045, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["SVal"]
    unless_null $P5042, fallback5315
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5042, $P5046
  fallback5315:
    $P5047 = $P5042."new"($P101 :named("value"))
    $P5048 = $P5031."new"($P5041, $P5047, "!protoregex" :named("name"), "callmethod" :named("op"))
    $P5049 = $P5026."new"($P5048, $P101 :named("name"), "declaration" :named("blocktype"), _lex_param_1 :named("node"))
    set $P102, $P5049
.annotate 'line', 2715
    find_dynamic_lex $P5050, "$*W"
    unless_null $P5050, fallback5316
    nqp_get_sc_object $P5053, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$W"]
    unless_null $P5051, fallback5317
    nqp_get_sc_object $P5054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5051, $P5054
  fallback5317:
    unless_null $P5051, vivi_16955318
    die "Contextual $*W not found"
    box $P5055, "Contextual $*W not found"
    set $P5051, $P5055
  vivi_16955318:
    set $P5050, $P5051
  fallback5316:
    find_dynamic_lex $P5056, "$*PACKAGE"
    unless_null $P5056, fallback5319
    nqp_get_sc_object $P5059, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["$PACKAGE"]
    unless_null $P5057, fallback5320
    nqp_get_sc_object $P5060, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5057, $P5060
  fallback5320:
    unless_null $P5057, vivi_16965321
    die "Contextual $*PACKAGE not found"
    box $P5061, "Contextual $*PACKAGE not found"
    set $P5057, $P5061
  vivi_16965321:
    set $P5056, $P5057
  fallback5319:
.annotate 'line', 2716
    find_dynamic_lex $P5062, "$*W"
    unless_null $P5062, fallback5322
    nqp_get_sc_object $P5065, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$W"]
    unless_null $P5063, fallback5323
    nqp_get_sc_object $P5066, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5063, $P5066
  fallback5323:
    unless_null $P5063, vivi_16975324
    die "Contextual $*W not found"
    box $P5067, "Contextual $*W not found"
    set $P5063, $P5067
  vivi_16975324:
    set $P5062, $P5063
  fallback5322:
    $P5068 = $P5062."create_code"($P102, $P101, 0, "NQPRegex" :named("code_type_name"))
    $P5069 = $P5050."pkg_add_method"($P5056, "add_method", $P101, $P5068)
    goto if1694_end5309
  if1694_else5308:
    .const 'Sub' $P5070 = 'cuid_486_1359292300.247' 
    capture_lex $P5070
    $P5071 = $P5070()
  if1694_end5309:
.annotate 'line', 2755
    $P5072 = _lex_param_1."!make"($P102)
    .return ($P5072) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_486_1359292300.247") :anon :lex :outer("cuid_314_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2718
    .const 'Sub' $P5130 = 'cuid_485_1359292300.247' 
    capture_lex $P5130 
    .lex "$block", $P101 
    .lex "$code", $P102 
    .lex "$regex", $P103 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P103, $P5003
.annotate 'line', 2719
    find_dynamic_lex $P5004, "$*W"
    unless_null $P5004, fallback5325
    nqp_get_sc_object $P5007, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$W"]
    unless_null $P5005, fallback5326
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5005, $P5008
  fallback5326:
    unless_null $P5005, vivi_16985327
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5005, $P5009
  vivi_16985327:
    set $P5004, $P5005
  fallback5325:
    $P5010 = $P5004."pop_lexpad"()
    set $P101, $P5010
.annotate 'line', 2720
    set $P5011, $P101[0]
    unless_null $P5011, fallback5328
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5012
  fallback5328:
    nqp_get_sc_object $P5016, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback5329
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5013, $P5017
  fallback5329:
    $P5018 = $P5013."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5011."unshift"($P5018)
.annotate 'line', 2721
    set $P5019, $P101[0]
    unless_null $P5019, fallback5330
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5019, $P5020
  fallback5330:
    nqp_get_sc_object $P5024, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5331
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5021, $P5025
  fallback5331:
.annotate 'line', 2723
    nqp_get_sc_object $P5029, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5332
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5026, $P5030
  fallback5332:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2724
    nqp_get_sc_object $P5035, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback5333
    nqp_get_sc_object $P5036, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5032, $P5036
  fallback5333:
    $P5037 = $P5032."new"("self" :named("name"), "lexical" :named("scope"))
    $P5038 = $P5021."new"($P5031, $P5037, "bind" :named("op"))
    $P5019."push"($P5038)
.annotate 'line', 2725
    set $P5039, $P101[0]
    unless_null $P5039, fallback5334
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5039, $P5040
  fallback5334:
    nqp_get_sc_object $P5044, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback5335
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5041, $P5045
  fallback5335:
    $P5046 = $P5041."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5039."push"($P5046)
.annotate 'line', 2726
    set $P5047, $P101[0]
    unless_null $P5047, fallback5336
    nqp_get_sc_object $P5048, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5047, $P5048
  fallback5336:
    nqp_get_sc_object $P5052, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Var"]
    unless_null $P5049, fallback5337
    nqp_get_sc_object $P5053, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5049, $P5053
  fallback5337:
    $P5054 = $P5049."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5047."push"($P5054)
.annotate 'line', 2727
    $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2728
    $P101."symbol"("$/", "lexical" :named("scope"))
    find_dynamic_lex $P5056, "%*RX"
    unless_null $P5056, fallback5338
    nqp_get_sc_object $P5059, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["%RX"]
    unless_null $P5057, fallback5339
    nqp_get_sc_object $P5061, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5060, $P5061
    new $P5062, 'Hash'
    set $P5060["%RX"], $P5062
    set $P5057, $P5062
  fallback5339:
    unless_null $P5057, vivi_16995340
    die "Contextual %*RX not found"
    box $P5063, "Contextual %*RX not found"
    set $P5057, $P5063
  vivi_16995340:
    set $P5056, $P5057
  fallback5338:
    set $P5055, $P5056["code"]
    unless_null $P5055, fallback5341
    nqp_get_sc_object $P5064, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5055, $P5064
  fallback5341:
    set $P102, $P5055
.annotate 'line', 2730
    find_dynamic_lex $P5066, "%*LANG"
    unless_null $P5066, fallback5342
    nqp_get_sc_object $P5069, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["%LANG"]
    unless_null $P5067, fallback5343
    nqp_get_sc_object $P5071, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5070, $P5071
    new $P5072, 'Hash'
    set $P5070["%LANG"], $P5072
    set $P5067, $P5072
  fallback5343:
    unless_null $P5067, vivi_17005344
    die "Contextual %*LANG not found"
    box $P5073, "Contextual %*LANG not found"
    set $P5067, $P5073
  vivi_17005344:
    set $P5066, $P5067
  fallback5342:
    set $P5065, $P5066["Regex-actions"]
    unless_null $P5065, fallback5345
    nqp_get_sc_object $P5074, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5065, $P5074
  fallback5345:
    find_lex $P5076, "$/"
    unless_null $P5076, fallback5346
    nqp_get_sc_object $P5077, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5076, $P5077
  fallback5346:
    set $P5075, $P5076["p6regex"]
    unless_null $P5075, fallback5347
    nqp_get_sc_object $P5078, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5075, $P5078
  fallback5347:
    $P5079 = $P5075."ast"()
    $P5080 = $P5065."qbuildsub"($P5079, $P101, $P102 :named("code_obj"))
    set $P103, $P5080
.annotate 'line', 2731
    find_lex $P5081, "$name"
    $P103."name"($P5081)
    find_dynamic_lex $P5082, "$*PKGDECL"
    unless_null $P5082, fallback5352
    nqp_get_sc_object $P5085, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["$PKGDECL"]
    unless_null $P5083, fallback5353
    nqp_get_sc_object $P5086, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5083, $P5086
  fallback5353:
    unless_null $P5083, vivi_17035354
    die "Contextual $*PKGDECL not found"
    box $P5087, "Contextual $*PKGDECL not found"
    set $P5083, $P5087
  vivi_17035354:
    set $P5082, $P5083
  fallback5352:
    set $P5095, $P5082
    unless $P5082 goto if1702_end5351 
    find_dynamic_lex $P5089, "$*PACKAGE"
    unless_null $P5089, fallback5355
    nqp_get_sc_object $P5092, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5091, $P5092
    set $P5090, $P5091["$PACKAGE"]
    unless_null $P5090, fallback5356
    nqp_get_sc_object $P5093, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5090, $P5093
  fallback5356:
    unless_null $P5090, vivi_17045357
    die "Contextual $*PACKAGE not found"
    box $P5094, "Contextual $*PACKAGE not found"
    set $P5090, $P5094
  vivi_17045357:
    set $P5089, $P5090
  fallback5355:
    get_how $P5088, $P5089
    can $I5001, $P5088, "add_method"
    box $P5096, $I5001
    set $P5095, $P5096
  if1702_end5351:
    unless $P5095 goto if1701_end5349 
.annotate 'line', 2733
.annotate 'line', 2735
    find_dynamic_lex $P5097, "$*W"
    unless_null $P5097, fallback5358
    nqp_get_sc_object $P5100, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5099, $P5100
    set $P5098, $P5099["$W"]
    unless_null $P5098, fallback5359
    nqp_get_sc_object $P5101, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5098, $P5101
  fallback5359:
    unless_null $P5098, vivi_17055360
    die "Contextual $*W not found"
    box $P5102, "Contextual $*W not found"
    set $P5098, $P5102
  vivi_17055360:
    set $P5097, $P5098
  fallback5358:
    find_dynamic_lex $P5103, "$*PACKAGE"
    unless_null $P5103, fallback5361
    nqp_get_sc_object $P5106, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5105, $P5106
    set $P5104, $P5105["$PACKAGE"]
    unless_null $P5104, fallback5362
    nqp_get_sc_object $P5107, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5104, $P5107
  fallback5362:
    unless_null $P5104, vivi_17065363
    die "Contextual $*PACKAGE not found"
    box $P5108, "Contextual $*PACKAGE not found"
    set $P5104, $P5108
  vivi_17065363:
    set $P5103, $P5104
  fallback5361:
    find_lex $P5109, "$name"
    $P5110 = $P5097."pkg_add_method"($P5103, "add_method", $P5109, $P102)
  if1701_end5349:
    find_dynamic_lex $P5111, "$*PKGDECL"
    unless_null $P5111, fallback5366
    nqp_get_sc_object $P5114, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5113, $P5114
    set $P5112, $P5113["$PKGDECL"]
    unless_null $P5112, fallback5367
    nqp_get_sc_object $P5115, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5112, $P5115
  fallback5367:
    unless_null $P5112, vivi_17085368
    die "Contextual $*PKGDECL not found"
    box $P5116, "Contextual $*PKGDECL not found"
    set $P5112, $P5116
  vivi_17085368:
    set $P5111, $P5112
  fallback5366:
    set $S5001, $P5111
    iseq $I5002, $S5001, "role"
    unless $I5002 goto if1707_end5365 
    .const 'Sub' $P5117 = 'cuid_485_1359292300.247' 
    capture_lex $P5117
    $P5118 = $P5117()
  if1707_end5365:
.annotate 'line', 2749
    nqp_get_sc_object $P5122, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5121, $P5122, "QAST"
    get_who $P5120, $P5121
    set $P5119, $P5120["Op"]
    unless_null $P5119, fallback5374
    nqp_get_sc_object $P5123, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5119, $P5123
  fallback5374:
.annotate 'line', 2751
    new $P5124, 'ResizablePMCArray'
    box $P5125, "NQPRegexMethod"
    push $P5124, $P5125
    find_lex $P5126, "$/"
    $P5127 = "&lexical_package_lookup"($P5124, $P5126)
    $P5128 = $P5119."new"($P5127, $P103, "callmethod" :named("op"), "new" :named("name"))
    store_lex "$past", $P5128
    find_lex $P5129, "$past"
    set $P5129["sink"], $P103
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_485_1359292300.247") :anon :lex :outer("cuid_486_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2740
    .lex "$gen_nfa", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 2741
    nqp_get_sc_object $P5005, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5004, $P5005, "QRegex"
    get_who $P5003, $P5004
    set $P5002, $P5003["NFA"]
    unless_null $P5002, fallback5369
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5006
  fallback5369:
    $P5007 = $P5002."new"()
    set $P101, $P5007
.annotate 'line', 2742
    find_lex $P5009, "$/"
    unless_null $P5009, fallback5370
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5010
  fallback5370:
    set $P5008, $P5009["p6regex"]
    unless_null $P5008, fallback5371
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5011
  fallback5371:
    $P5012 = $P5008."ast"()
    $P101."addnode"($P5012, 1 :named("vars_as_generic"))
.annotate 'line', 2743
    $P5013 = $P101."generic"()
    set $P5016, $P5013
    unless $P5013 goto if1709_end5373 
.annotate 'line', 2744
    find_lex $P5014, "$code"
    $P5015 = $P5014."SET_GENERIC_NFA"($P101)
    set $P5016, $P5015
  if1709_end5373:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_315_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2759
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback5378
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5003
  fallback5378:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5379
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5004
  fallback5379:
    unless $P5002 goto if1710_else5376 
.annotate 'line', 2760
    unless_null _lex_param_1, fallback5380
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5007
  fallback5380:
    set $P5006, _lex_param_1["args"]
    unless_null $P5006, fallback5381
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5008
  fallback5381:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5382
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5005, $P5009
  fallback5382:
    $P5010 = $P5005."ast"()
    set $P5017, $P5010
    goto if1710_end5377
  if1710_else5376:
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5383
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5015
  fallback5383:
    $P5016 = $P5011."new"(_lex_param_1 :named("node"))
    set $P5017, $P5016
  if1710_end5377:
    set $P101, $P5017
    unless_null _lex_param_1, fallback5386
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5019
  fallback5386:
    set $P5018, _lex_param_1["quote"]
    unless_null $P5018, fallback5387
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5018, $P5020
  fallback5387:
    unless $P5018 goto if1711_else5384 
.annotate 'line', 2761
.annotate 'line', 2762
    unless_null _lex_param_1, fallback5388
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5022
  fallback5388:
    set $P5021, _lex_param_1["quote"]
    unless_null $P5021, fallback5389
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5021, $P5023
  fallback5389:
    $P5024 = $P5021."ast"()
    $P101."unshift"($P5024)
.annotate 'line', 2763
    $P5025 = $P101."op"("callmethod")
    goto if1711_end5385
  if1711_else5384:
    unless_null _lex_param_1, fallback5392
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5027
  fallback5392:
    set $P5026, _lex_param_1["longname"]
    unless_null $P5026, fallback5393
    nqp_get_sc_object $P5028, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5026, $P5028
  fallback5393:
    set $S5001, $P5026
    iseq $I5001, $S5001, "HOW"
    unless $I5001 goto if1712_else5390 
.annotate 'line', 2765
.annotate 'line', 2766
    $P5029 = $P101."op"("how")
    set $P5049, $P5029
    goto if1712_end5391
  if1712_else5390:
    unless_null _lex_param_1, fallback5396
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5031
  fallback5396:
    set $P5030, _lex_param_1["longname"]
    unless_null $P5030, fallback5397
    nqp_get_sc_object $P5032, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5030, $P5032
  fallback5397:
    set $S5002, $P5030
    iseq $I5002, $S5002, "WHAT"
    unless $I5002 goto if1713_else5394 
.annotate 'line', 2768
.annotate 'line', 2769
    $P5033 = $P101."op"("what")
    set $P5048, $P5033
    goto if1713_end5395
  if1713_else5394:
    unless_null _lex_param_1, fallback5400
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5035
  fallback5400:
    set $P5034, _lex_param_1["longname"]
    unless_null $P5034, fallback5401
    nqp_get_sc_object $P5036, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5034, $P5036
  fallback5401:
    set $S5003, $P5034
    iseq $I5003, $S5003, "WHO"
    unless $I5003 goto if1714_else5398 
.annotate 'line', 2771
.annotate 'line', 2772
    $P5037 = $P101."op"("who")
    set $P5047, $P5037
    goto if1714_end5399
  if1714_else5398:
    unless_null _lex_param_1, fallback5404
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5039
  fallback5404:
    set $P5038, _lex_param_1["longname"]
    unless_null $P5038, fallback5405
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5038, $P5040
  fallback5405:
    set $S5004, $P5038
    iseq $I5004, $S5004, "REPR"
    unless $I5004 goto if1715_else5402 
.annotate 'line', 2774
.annotate 'line', 2775
    $P5041 = $P101."op"("reprname")
    set $P5046, $P5041
    goto if1715_end5403
  if1715_else5402:
.annotate 'line', 2777
.annotate 'line', 2778
    unless_null _lex_param_1, fallback5406
    nqp_get_sc_object $P5043, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5043
  fallback5406:
    set $P5042, _lex_param_1["longname"]
    unless_null $P5042, fallback5407
    nqp_get_sc_object $P5044, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5042, $P5044
  fallback5407:
    set $S5005, $P5042
    $P101."name"($S5005)
.annotate 'line', 2779
    $P5045 = $P101."op"("callmethod")
    set $P5046, $P5045
  if1715_end5403:
    set $P5047, $P5046
  if1714_end5399:
    set $P5048, $P5047
  if1713_end5395:
    set $P5049, $P5048
  if1712_end5391:
  if1711_end5385:
.annotate 'line', 2781
    $P5050 = _lex_param_1."!make"($P101)
    .return ($P5050) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_316_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2786
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2787
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5408
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback5408:
.annotate 'line', 2788
    nqp_get_sc_object $P5009, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5409
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5010
  fallback5409:
    $P5011 = $P5006."new"("self" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "decont" :named("op"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_317_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2791
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 2792
    unless_null _lex_param_1, fallback5410
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5003
  fallback5410:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5411
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5004
  fallback5411:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2793
    unless_null _lex_param_1, fallback5412
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5007
  fallback5412:
    set $P5006, _lex_param_1["deflongname"]
    unless_null $P5006, fallback5413
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5008
  fallback5413:
    set $S5002, $P5006
    concat $S5001, "&", $S5002
    $P101."name"($S5001)
.annotate 'line', 2794
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_318_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2797
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5049 = 'cuid_487_1359292300.247' 
    capture_lex $P5049 
    .const 'Sub' $P5049 = 'cuid_488_1359292300.247' 
    capture_lex $P5049 
    .lex "$var", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
.annotate 'line', 2800
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback5416
    nqp_get_sc_object $P5006, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback5417
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5007
  fallback5417:
    unless_null $P5004, vivi_17175418
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_17175418:
    set $P5003, $P5004
  fallback5416:
    unless_null _lex_param_1, fallback5419
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5010
  fallback5419:
    set $P5009, _lex_param_1["name"]
    unless_null $P5009, fallback5420
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5011
  fallback5420:
    set $S5001, $P5009
    $P5012 = $P5003."is_lexical"($S5001)
    unless $P5012 goto if1716_else5414 
    new $P5034, 'ExceptionHandler'
    set_label $P5034, catch_handler_17225433
    $P5034.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5034
.annotate 'line', 2801
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_17205428
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 2802
    nqp_get_sc_object $P5016, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["WVal"]
    unless_null $P5013, fallback5421
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5013, $P5017
  fallback5421:
    find_dynamic_lex $P5018, "$*W"
    unless_null $P5018, fallback5422
    nqp_get_sc_object $P5021, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$W"]
    unless_null $P5019, fallback5423
    nqp_get_sc_object $P5022, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5019, $P5022
  fallback5423:
    unless_null $P5019, vivi_17185424
    die "Contextual $*W not found"
    box $P5023, "Contextual $*W not found"
    set $P5019, $P5023
  vivi_17185424:
    set $P5018, $P5019
  fallback5422:
    new $P5024, 'ResizablePMCArray'
    unless_null _lex_param_1, fallback5425
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5026
  fallback5425:
    set $P5025, _lex_param_1["name"]
    unless_null $P5025, fallback5426
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5025, $P5027
  fallback5426:
    set $S5002, $P5025
    box $P5028, $S5002
    push $P5024, $P5028
    $P5029 = $P5018."find_sym"($P5024)
    $P5030 = $P5013."new"($P5029 :named("value"))
    set $P101, $P5030
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_17195427
  catch_handler_17205428:
    .get_results ($P5032) 
    .const 'Sub' $P10001 = 'cuid_487_1359292300.247' 
    capture_lex $P10001
    $P10001($P5032)
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10002
    goto skip_handler_17195427
  skip_handler_17195427:
    set $P5035, $P5033
    pop_eh 
    goto skip_handler_17215432
  catch_handler_17225433:
    .get_results ($P5034) 
    set $I10001, 1
    set $P5034["handled"], $I10001
    nqp_get_sc_object $P10001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    finalize $P5034
    pop_upto_eh $P5034
    pop_eh 
    set $P5035, $P10001
    goto skip_handler_17215432
  skip_handler_17215432:
    goto if1716_end5415
  if1716_else5414:
    .const 'Sub' $P5036 = 'cuid_488_1359292300.247' 
    capture_lex $P5036
    $P5037 = $P5036()
  if1716_end5415:
    set $P102, $P101
    unless_null _lex_param_1, fallback5439
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5039
  fallback5439:
    set $P5038, _lex_param_1["args"]
    unless_null $P5038, fallback5440
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5038, $P5040
  fallback5440:
    unless $P5038 goto if1723_end5438 
.annotate 'line', 2815
.annotate 'line', 2816
    unless_null _lex_param_1, fallback5441
    nqp_get_sc_object $P5043, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5043
  fallback5441:
    set $P5042, _lex_param_1["args"]
    unless_null $P5042, fallback5442
    nqp_get_sc_object $P5044, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5042, $P5044
  fallback5442:
    set $P5041, $P5042[0]
    unless_null $P5041, fallback5443
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5041, $P5045
  fallback5443:
    $P5046 = $P5041."ast"()
    set $P102, $P5046
.annotate 'line', 2817
    $P5047 = $P102."unshift"($P101)
  if1723_end5438:
.annotate 'line', 2819
    $P5048 = _lex_param_1."!make"($P102)
    .return ($P5048) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_487_1359292300.247") :anon :lex :outer("cuid_318_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2803
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 2804
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback5429
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback5429:
    find_lex $P5007, "$/"
    unless_null $P5007, fallback5430
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5008
  fallback5430:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback5431
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5009
  fallback5431:
    set $S5001, $P5006
    $P5010 = $P5001."new"($S5001 :named("name"), "lexical" :named("scope"))
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_488_1359292300.247") :anon :lex :outer("cuid_318_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2808
    .lex "@ns", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5005, "$/"
    unless_null $P5005, fallback5434
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5005, $P5006
  fallback5434:
    set $P5004, $P5005["name"]
    unless_null $P5004, fallback5435
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5007
  fallback5435:
    set $P5003, $P5004["identifier"]
    unless_null $P5003, fallback5436
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5008
  fallback5436:
    clone $P5002, $P5003
    set $P101, $P5002
.annotate 'line', 2810
    find_lex $P5009, "$/"
    $P5010 = "&lexical_package_lookup"($P101, $P5009)
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_319_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2822
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@args", $P101 
    .lex "$pirop", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback5446
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5004
  fallback5446:
    set $P5003, _lex_param_1["args"]
    unless_null $P5003, fallback5447
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5005
  fallback5447:
    unless $P5003 goto if1724_else5444 
.annotate 'line', 2823
    unless_null _lex_param_1, fallback5448
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5008
  fallback5448:
    set $P5007, _lex_param_1["args"]
    unless_null $P5007, fallback5449
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5009
  fallback5449:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback5450
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5010
  fallback5450:
    $P5011 = $P5006."ast"()
    $P5012 = $P5011."list"()
    set $P5014, $P5012
    goto if1724_end5445
  if1724_else5444:
    new $P5013, 'ResizablePMCArray'
    set $P5014, $P5013
  if1724_end5445:
    set $P101, $P5014
    unless_null _lex_param_1, fallback5451
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5016
  fallback5451:
    set $P5015, _lex_param_1["op"]
    unless_null $P5015, fallback5452
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5015, $P5017
  fallback5452:
    set $S5001, $P5015
    box $P5018, $S5001
    set $P102, $P5018
    set $S5003, $P102
    split $P5019, "__", $S5003
    join $S5002, " ", $P5019
    box $P5020, $S5002
    set $P102, $P5020
.annotate 'line', 2826
    nqp_get_sc_object $P5024, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["VM"]
    unless_null $P5021, fallback5453
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5021, $P5025
  fallback5453:
    $P5026 = $P5021."new"($P101 :flat, $P102 :named("pirop"), _lex_param_1 :named("node"))
    $P5027 = _lex_param_1."!make"($P5026)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_320_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2829
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2830
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5454
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback5454:
    unless_null _lex_param_1, fallback5455
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5007
  fallback5455:
    set $P5006, _lex_param_1["const"]
    unless_null $P5006, fallback5456
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5008
  fallback5456:
    set $S5001, $P5006
    $P5009 = $P5001."new"($S5001 :named("pirconst"))
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_321_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2833
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "@args", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P103, $P5003
    unless_null _lex_param_1, fallback5457
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5005
  fallback5457:
    set $P5004, _lex_param_1["op"]
    unless_null $P5004, fallback5458
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5006
  fallback5458:
    set $S5001, $P5004
    box $P5007, $S5001
    set $P101, $P5007
    unless_null _lex_param_1, fallback5461
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5009
  fallback5461:
    set $P5008, _lex_param_1["args"]
    unless_null $P5008, fallback5462
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5010
  fallback5462:
    unless $P5008 goto if1725_else5459 
.annotate 'line', 2835
    unless_null _lex_param_1, fallback5463
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5013
  fallback5463:
    set $P5012, _lex_param_1["args"]
    unless_null $P5012, fallback5464
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5012, $P5014
  fallback5464:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback5465
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5015
  fallback5465:
    $P5016 = $P5011."ast"()
    $P5017 = $P5016."list"()
    set $P5019, $P5017
    goto if1725_end5460
  if1725_else5459:
    new $P5018, 'ResizablePMCArray'
    set $P5019, $P5018
  if1725_end5460:
    set $P102, $P5019
.annotate 'line', 2836
    nqp_get_sc_object $P5023, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback5466
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5020, $P5024
  fallback5466:
    $P5025 = $P5020."new"($P102 :flat, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P103, $P5025
.annotate 'line', 2837
    $P5026 = _lex_param_1."!make"($P103)
    .return ($P5026) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_322_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2840
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2841
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5467
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback5467:
    $P5006 = $P5001."new"("nqpmultidispatch" :named("op"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_323_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2844
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5468
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback5468:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5469
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback5469:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_324_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2846
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5052 = 'cuid_490_1359292300.247' 
    capture_lex $P5052 
    .lex "$past", $P101 
    .lex "$i", $P102 
    .lex "$n", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc tmp_2 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P103, $P5003
.annotate 'line', 2847
    nqp_get_sc_object $P5007, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Op"]
    unless_null $P5004, fallback5470
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5008
  fallback5470:
    $P5009 = $P5004."new"("call" :named("op"), _lex_param_1 :named("node"))
    set $P101, $P5009
    unless_null _lex_param_1, fallback5473
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5011
  fallback5473:
    set $P5010, _lex_param_1["EXPR"]
    unless_null $P5010, fallback5474
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5012
  fallback5474:
    unless $P5010 goto if1726_end5472 
    .const 'Sub' $P5013 = 'cuid_490_1359292300.247' 
    capture_lex $P5013
    $P5014 = $P5013()
  if1726_end5472:
    box $P5015, 0
    set $P102, $P5015
.annotate 'line', 2856
    $P5016 = $P101."list"()
    set $N5001, $P5016
    box $P5017, $N5001
    set $P103, $P5017
  while1730_test5487:
    set $N5002, $P102
    set $N5003, $P103
    islt $I5001, $N5002, $N5003
    box $P5050, $I5001
    set $P5049, $P5050
    unless $I5001 goto while1730_done5491 
  while1730_redo5489:
.annotate 'line', 2857
    set $I5003, $P102
    set $P5018, $P101[$I5003]
    unless_null $P5018, fallback5496
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5018, $P5019
  fallback5496:
    nqp_get_sc_object $P5023, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback5497
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5020, $P5024
  fallback5497:
    type_check $I5002, $P5018, $P5020
    set $I5006, $I5002
    unless $I5002 goto if1732_end5495 
.annotate 'line', 2858
    set $I5005, $P102
    set $P5025, $P101[$I5005]
    unless_null $P5025, fallback5498
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5025, $P5026
  fallback5498:
    $P5027 = $P5025."name"()
    set $S5001, $P5027
    iseq $I5004, $S5001, "&prefix:<|>"
    set $I5006, $I5004
  if1732_end5495:
    unless $I5006 goto if1731_end5493 
    set $I5007, $P102
    set $I5008, $P102
    set $P5029, $P101[$I5008]
    unless_null $P5029, fallback5499
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5029, $P5030
  fallback5499:
    set $P5028, $P5029[0]
    unless_null $P5028, fallback5500
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5028, $P5031
  fallback5500:
    set $P101[$I5007], $P5028
.annotate 'line', 2860
    set $I5009, $P102
    set $P5032, $P101[$I5009]
    unless_null $P5032, fallback5501
    nqp_get_sc_object $P5033, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5032, $P5033
  fallback5501:
    $P5032."flat"(1)
    set $I5011, $P102
    set $P5034, $P101[$I5011]
    unless_null $P5034, fallback5506
    nqp_get_sc_object $P5035, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5034, $P5035
  fallback5506:
    nqp_get_sc_object $P5039, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Var"]
    unless_null $P5036, fallback5507
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5036, $P5040
  fallback5507:
    type_check $I5010, $P5034, $P5036
    set $I5014, $I5010
    unless $I5010 goto if1734_end5505 
.annotate 'line', 2862
    set $I5013, $P102
    set $P5041, $P101[$I5013]
    unless_null $P5041, fallback5508
    nqp_get_sc_object $P5042, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5041, $P5042
  fallback5508:
    $P5043 = $P5041."name"()
    set $S5003, $P5043
    substr $S5002, $S5003, 0, 1
    iseq $I5012, $S5002, "%"
    set $I5014, $I5012
  if1734_end5505:
    box $P5048, $I5014
    set $P5047, $P5048
    unless $I5014 goto if1733_end5503 
.annotate 'line', 2861
    set $I5015, $P102
    set $P5044, $P101[$I5015]
    unless_null $P5044, fallback5509
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5044, $P5045
  fallback5509:
    $P5046 = $P5044."named"(1)
    set $P5047, $P5046
  if1733_end5503:
  if1731_end5493:
    set tmp_2, $P102
    set $N5005, tmp_2
    set $N5006, 1
    add $N5004, $N5005, $N5006
    box $P5049, $N5004
    set $P102, $P5049
    set $P5049, tmp_2
    goto while1730_test5487 
  while1730_done5491:
.annotate 'line', 2866
    $P5051 = _lex_param_1."!make"($P101)
    .return ($P5051) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_490_1359292300.247") :anon :lex :outer("cuid_324_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2848
    .const 'Sub' $P5023 = 'cuid_489_1359292300.247' 
    capture_lex $P5023 
    .lex "$expr", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 2849
    find_lex $P5003, "$/"
    unless_null $P5003, fallback5475
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5004
  fallback5475:
    set $P5002, $P5003["EXPR"]
    unless_null $P5002, fallback5476
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5005
  fallback5476:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    nqp_get_sc_object $P5010, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback5483
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5011
  fallback5483:
    type_check $I5001, $P101, $P5007
    set $I5003, $I5001
    unless $I5001 goto if1729_end5482 
.annotate 'line', 2850
    $P5012 = $P101."name"()
    set $S5001, $P5012
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1729_end5482:
    set $I5005, $I5003
    unless $I5003 goto if1728_end5480 
    $P5013 = $P101."named"()
    isfalse $I5004, $P5013
    set $I5005, $I5004
  if1728_end5480:
    unless $I5005 goto if1727_else5477 
.annotate 'line', 2851
    $P5017 = $P101."list"()
    set $P5014, $P5017
    iter $P5016, $P5017
  for_next5484:
    unless $P5016, for_done5486
    shift $P5019, $P5016
  for_redo5485:
    .const 'Sub' $P5018 = 'cuid_489_1359292300.247' 
    capture_lex $P5018
    $P5014 = $P5018($P5019)
    goto for_next5484
  for_done5486:
    set $P5022, $P5014
    goto if1727_end5478
  if1727_else5477:
.annotate 'line', 2853
    find_lex $P5020, "$past"
    $P5021 = $P5020."push"($P101)
    set $P5022, $P5021
  if1727_end5478:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_489_1359292300.247") :anon :lex :outer("cuid_490_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2851
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$past"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_325_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2869
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5510
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback5510:
    set $P5001, _lex_param_1["multi_declarator"]
    unless_null $P5001, fallback5511
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback5511:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_326_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2871
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5512
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback5512:
    set $P5001, _lex_param_1["value"]
    unless_null $P5001, fallback5513
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback5513:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_327_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2873
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2874
    unless_null _lex_param_1, fallback5516
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback5516:
    set $P5001, _lex_param_1["EXPR"]
    unless_null $P5001, fallback5517
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback5517:
    unless $P5001 goto if1735_else5514 
.annotate 'line', 2875
    unless_null _lex_param_1, fallback5518
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5006
  fallback5518:
    set $P5005, _lex_param_1["EXPR"]
    unless_null $P5005, fallback5519
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5005, $P5007
  fallback5519:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback5520
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5008
  fallback5520:
    $P5009 = $P5004."ast"()
    set $P5016, $P5009
    goto if1735_end5515
  if1735_else5514:
.annotate 'line', 2876
    nqp_get_sc_object $P5013, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback5521
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5014
  fallback5521:
    $P5015 = $P5010."new"("list" :named("op"), _lex_param_1 :named("node"))
    set $P5016, $P5015
  if1735_end5515:
    $P5017 = _lex_param_1."!make"($P5016)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_328_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2879
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback5524
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5003
  fallback5524:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback5525
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5004
  fallback5525:
    unless $P5002 goto if1736_else5522 
.annotate 'line', 2881
.annotate 'line', 2882
    unless_null _lex_param_1, fallback5526
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5007
  fallback5526:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5527
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5008
  fallback5527:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5528
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5005, $P5009
  fallback5528:
    $P5010 = $P5005."ast"()
    set $P101, $P5010
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5533
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5015
  fallback5533:
    type_check $I5001, $P101, $P5011
    set $I5003, $I5001
    unless $I5001 goto if1738_end5532 
.annotate 'line', 2883
    $P5016 = $P101."name"()
    set $S5001, $P5016
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1738_end5532:
    box $P5024, $I5003
    set $P5023, $P5024
    if $I5003 goto unless1737_end5530 
.annotate 'line', 2884
    nqp_get_sc_object $P5020, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback5534
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5017, $P5021
  fallback5534:
    $P5022 = $P5017."new"($P101, "list" :named("op"))
    set $P101, $P5022
    set $P5023, $P101
  unless1737_end5530:
    goto if1736_end5523
  if1736_else5522:
.annotate 'line', 2887
.annotate 'line', 2888
    nqp_get_sc_object $P5028, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Op"]
    unless_null $P5025, fallback5535
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5025, $P5029
  fallback5535:
    $P5030 = $P5025."new"("list" :named("op"))
    set $P101, $P5030
  if1736_end5523:
.annotate 'line', 2890
    $P101."name"("&circumfix:<[ ]>")
.annotate 'line', 2891
    $P5031 = _lex_param_1."!make"($P101)
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_329_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2894
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5536
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback5536:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5537
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback5537:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_330_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2895
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5538
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback5538:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5539
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback5539:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_331_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2897
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5028 = 'cuid_491_1359292300.247' 
    capture_lex $P5028 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5542
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5005
  fallback5542:
    set $P5004, _lex_param_1["pblock"]
    unless_null $P5004, fallback5543
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5006
  fallback5543:
    set $P5003, $P5004["blockoid"]
    unless_null $P5003, fallback5544
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5007
  fallback5544:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback5545
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5008
  fallback5545:
    set $P5001, $P5002["statement"]
    unless_null $P5001, fallback5546
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5009
  fallback5546:
    set $N5001, $P5001
    set $N5002, 0
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1739_else5540 
    .const 'Sub' $P5010 = 'cuid_491_1359292300.247' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5027, $P5011
    goto if1739_end5541
  if1739_else5540:
    unless_null _lex_param_1, fallback5552
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5015
  fallback5552:
    set $P5014, _lex_param_1["pblock"]
    unless_null $P5014, fallback5553
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5014, $P5016
  fallback5553:
    set $P5013, $P5014["blockoid"]
    unless_null $P5013, fallback5554
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5013, $P5017
  fallback5554:
    set $P5012, $P5013["you_are_here"]
    unless_null $P5012, fallback5555
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5012, $P5018
  fallback5555:
    unless $P5012 goto if1740_else5550 
.annotate 'line', 2903
.annotate 'line', 2904
    unless_null _lex_param_1, fallback5556
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5020
  fallback5556:
    set $P5019, _lex_param_1["pblock"]
    unless_null $P5019, fallback5557
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5019, $P5021
  fallback5557:
    $P5022 = $P5019."ast"()
    $P5023 = _lex_param_1."!make"($P5022)
    set $P5026, $P5023
    goto if1740_end5551
  if1740_else5550:
.annotate 'line', 2906
.annotate 'line', 2907
    $P5024 = "&default_for"("%")
    $P5025 = _lex_param_1."!make"($P5024)
    set $P5026, $P5025
  if1740_end5551:
    set $P5027, $P5026
  if1739_end5541:
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_491_1359292300.247") :anon :lex :outer("cuid_331_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2898
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 2899
    nqp_get_sc_object $P5005, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback5547
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5006
  fallback5547:
    find_lex $P5008, "$/"
    unless_null $P5008, fallback5548
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5009
  fallback5548:
    set $P5007, $P5008["pblock"]
    unless_null $P5007, fallback5549
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5010
  fallback5549:
    $P5011 = $P5007."ast"()
    $P5012 = $P5002."new"($P5011, "takeclosure" :named("op"))
    set $P101, $P5012
    box $P5013, 1
    set $P101["bareblock"], $P5013
.annotate 'line', 2901
    find_dynamic_lex $P5014, "$/"
    $P5015 = $P5014."!make"($P101)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<sigil>" :subid("cuid_332_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2911
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback5560
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5003
  fallback5560:
    set $P5002, _lex_param_1["sigil"]
    unless_null $P5002, fallback5561
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5004
  fallback5561:
    set $S5001, $P5002
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1741_else5558 
    set $S5004, "list"
    goto if1741_end5559
  if1741_else5558:
    unless_null _lex_param_1, fallback5564
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5006
  fallback5564:
    set $P5005, _lex_param_1["sigil"]
    unless_null $P5005, fallback5565
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5005, $P5007
  fallback5565:
    set $S5002, $P5005
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1742_else5562 
    set $S5003, "hash"
    goto if1742_end5563
  if1742_else5562:
    set $S5003, "item"
  if1742_end5563:
    set $S5004, $S5003
  if1741_end5559:
    box $P5008, $S5004
    set $P101, $P5008
.annotate 'line', 2915
    nqp_get_sc_object $P5012, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback5566
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5013
  fallback5566:
    unless_null _lex_param_1, fallback5567
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5015
  fallback5567:
    set $P5014, _lex_param_1["semilist"]
    unless_null $P5014, fallback5568
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5014, $P5016
  fallback5568:
    $P5017 = $P5014."ast"()
    $P5018 = $P5009."new"($P5017, "callmethod" :named("op"), $P101 :named("name"))
    $P5019 = _lex_param_1."!make"($P5018)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_333_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2918
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5569
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback5569:
    set $P5001, _lex_param_1["statement"]
    unless_null $P5001, fallback5570
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback5570:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_334_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2920
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2921
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5571
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback5571:
    unless_null _lex_param_1, fallback5572
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5007
  fallback5572:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5573
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5008
  fallback5573:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "positional" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_335_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2924
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2925
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5574
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback5574:
    unless_null _lex_param_1, fallback5575
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5007
  fallback5575:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5576
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5008
  fallback5576:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_336_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2928
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2929
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5577
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback5577:
    unless_null _lex_param_1, fallback5578
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5007
  fallback5578:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5579
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5008
  fallback5579:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_337_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2932
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2933
    unless_null _lex_param_1, fallback5580
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback5580:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5581
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback5581:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_338_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2936
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2937
    unless_null _lex_param_1, fallback5584
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback5584:
    set $P5001, _lex_param_1["quote"]
    unless_null $P5001, fallback5585
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback5585:
    unless $P5001 goto if1743_else5582 
    unless_null _lex_param_1, fallback5586
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5005
  fallback5586:
    set $P5004, _lex_param_1["quote"]
    unless_null $P5004, fallback5587
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5004, $P5006
  fallback5587:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1743_end5583
  if1743_else5582:
    unless_null _lex_param_1, fallback5588
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5009
  fallback5588:
    set $P5008, _lex_param_1["number"]
    unless_null $P5008, fallback5589
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5008, $P5010
  fallback5589:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1743_end5583:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_339_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2940
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$value", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    unless_null _lex_param_1, fallback5592
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5003
  fallback5592:
    set $P5002, _lex_param_1["dec_number"]
    unless_null $P5002, fallback5593
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5004
  fallback5593:
    unless $P5002 goto if1744_else5590 
.annotate 'line', 2941
    unless_null _lex_param_1, fallback5594
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5006
  fallback5594:
    set $P5005, _lex_param_1["dec_number"]
    unless_null $P5005, fallback5595
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5005, $P5007
  fallback5595:
    $P5008 = $P5005."ast"()
    set $P5013, $P5008
    goto if1744_end5591
  if1744_else5590:
    unless_null _lex_param_1, fallback5596
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5010
  fallback5596:
    set $P5009, _lex_param_1["integer"]
    unless_null $P5009, fallback5597
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5009, $P5011
  fallback5597:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1744_end5591:
    set $P101, $P5013
    unless_null _lex_param_1, fallback5600
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5015
  fallback5600:
    set $P5014, _lex_param_1["sign"]
    unless_null $P5014, fallback5601
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5014, $P5016
  fallback5601:
    set $S5001, $P5014
    iseq $I5001, $S5001, "-"
    unless $I5001 goto if1745_end5599 
.annotate 'line', 2942
    set $N5002, $P101
    neg $N5001, $N5002
    box $P5017, $N5001
    set $P101, $P5017
  if1745_end5599:
.annotate 'line', 2943
    unless_null _lex_param_1, fallback5604
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5019
  fallback5604:
    set $P5018, _lex_param_1["dec_number"]
    unless_null $P5018, fallback5605
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5018, $P5020
  fallback5605:
    unless $P5018 goto if1746_else5602 
.annotate 'line', 2944
    nqp_get_sc_object $P5024, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["NVal"]
    unless_null $P5021, fallback5606
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5021, $P5025
  fallback5606:
    $P5026 = $P5021."new"($P101 :named("value"))
    set $P5033, $P5026
    goto if1746_end5603
  if1746_else5602:
.annotate 'line', 2945
    nqp_get_sc_object $P5030, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["IVal"]
    unless_null $P5027, fallback5607
    nqp_get_sc_object $P5031, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5027, $P5031
  fallback5607:
    $P5032 = $P5027."new"($P101 :named("value"))
    set $P5033, $P5032
  if1746_end5603:
    $P5034 = _lex_param_1."!make"($P5033)
    .return ($P5034) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_340_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2948
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5608
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback5608:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5609
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback5609:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_341_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2949
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5610
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback5610:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5611
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback5611:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_342_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2950
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5612
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback5612:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5613
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback5613:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_343_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2951
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5614
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback5614:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5615
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback5615:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_344_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2952
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5616
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback5616:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5617
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback5617:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_345_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2953
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2954
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5618
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback5618:
    unless_null _lex_param_1, fallback5619
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5007
  fallback5619:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5620
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5008
  fallback5620:
    $P5009 = $P5006."ast"()
    $P5010 = $P5009."value"()
    $P5011 = $P5001."new"($P5010 :named("pir"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_346_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2957
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$regex", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P103, $P5003
.annotate 'line', 2958
    find_dynamic_lex $P5004, "$*W"
    unless_null $P5004, fallback5621
    nqp_get_sc_object $P5007, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$W"]
    unless_null $P5005, fallback5622
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5005, $P5008
  fallback5622:
    unless_null $P5005, vivi_17475623
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5005, $P5009
  vivi_17475623:
    set $P5004, $P5005
  fallback5621:
    $P5010 = $P5004."pop_lexpad"()
    set $P101, $P5010
.annotate 'line', 2959
    set $P5011, $P101[0]
    unless_null $P5011, fallback5624
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5012
  fallback5624:
    nqp_get_sc_object $P5016, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback5625
    nqp_get_sc_object $P5017, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5013, $P5017
  fallback5625:
    $P5018 = $P5013."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5011."push"($P5018)
.annotate 'line', 2960
    set $P5019, $P101[0]
    unless_null $P5019, fallback5626
    nqp_get_sc_object $P5020, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5019, $P5020
  fallback5626:
    nqp_get_sc_object $P5024, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5627
    nqp_get_sc_object $P5025, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5021, $P5025
  fallback5627:
.annotate 'line', 2962
    nqp_get_sc_object $P5029, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5628
    nqp_get_sc_object $P5030, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5026, $P5030
  fallback5628:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2963
    nqp_get_sc_object $P5035, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback5629
    nqp_get_sc_object $P5036, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5032, $P5036
  fallback5629:
    $P5037 = $P5032."new"("self" :named("name"), "lexical" :named("scope"))
    $P5038 = $P5021."new"($P5031, $P5037, "bind" :named("op"))
    $P5019."push"($P5038)
.annotate 'line', 2964
    set $P5039, $P101[0]
    unless_null $P5039, fallback5630
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5039, $P5040
  fallback5630:
    nqp_get_sc_object $P5044, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback5631
    nqp_get_sc_object $P5045, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5041, $P5045
  fallback5631:
    $P5046 = $P5041."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5039."push"($P5046)
.annotate 'line', 2965
    set $P5047, $P101[0]
    unless_null $P5047, fallback5632
    nqp_get_sc_object $P5048, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5047, $P5048
  fallback5632:
    nqp_get_sc_object $P5052, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Var"]
    unless_null $P5049, fallback5633
    nqp_get_sc_object $P5053, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5049, $P5053
  fallback5633:
    $P5054 = $P5049."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5047."push"($P5054)
.annotate 'line', 2966
    $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2967
    $P101."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2969
    find_dynamic_lex $P5056, "%*LANG"
    unless_null $P5056, fallback5634
    nqp_get_sc_object $P5059, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["%LANG"]
    unless_null $P5057, fallback5635
    nqp_get_sc_object $P5061, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5060, $P5061
    new $P5062, 'Hash'
    set $P5060["%LANG"], $P5062
    set $P5057, $P5062
  fallback5635:
    unless_null $P5057, vivi_17485636
    die "Contextual %*LANG not found"
    box $P5063, "Contextual %*LANG not found"
    set $P5057, $P5063
  vivi_17485636:
    set $P5056, $P5057
  fallback5634:
    set $P5055, $P5056["Regex-actions"]
    unless_null $P5055, fallback5637
    nqp_get_sc_object $P5064, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5055, $P5064
  fallback5637:
    unless_null _lex_param_1, fallback5638
    nqp_get_sc_object $P5066, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5066
  fallback5638:
    set $P5065, _lex_param_1["p6regex"]
    unless_null $P5065, fallback5639
    nqp_get_sc_object $P5067, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5065, $P5067
  fallback5639:
    $P5068 = $P5065."ast"()
    $P5069 = $P5055."qbuildsub"($P5068, $P101)
    set $P102, $P5069
.annotate 'line', 2970
    nqp_get_sc_object $P5073, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5072, $P5073, "QAST"
    get_who $P5071, $P5072
    set $P5070, $P5071["Op"]
    unless_null $P5070, fallback5640
    nqp_get_sc_object $P5074, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5070, $P5074
  fallback5640:
.annotate 'line', 2972
    new $P5075, 'ResizablePMCArray'
    box $P5076, "NQPRegex"
    push $P5075, $P5076
    $P5077 = "&lexical_package_lookup"($P5075, _lex_param_1)
    $P5078 = $P5070."new"($P5077, $P102, "callmethod" :named("op"), "new" :named("name"))
    set $P103, $P5078
    set $P103["sink"], $P102
.annotate 'line', 2977
    $P5079 = _lex_param_1."!make"($P103)
    .return ($P5079) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_347_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2980
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5641
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback5641:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback5642
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback5642:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_348_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2981
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2982
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5643
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback5643:
.annotate 'line', 2983
    unless_null _lex_param_1, fallback5644
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5007
  fallback5644:
    set $P5006, _lex_param_1["block"]
    unless_null $P5006, fallback5645
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5008
  fallback5645:
    $P5009 = $P5006."ast"()
    $P5010 = "&block_immediate"($P5009)
    $P5011 = $P5001."new"($P5010, "stringify" :named("op"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_349_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2986
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    $P5001 = _lex_param_1."!make"("\e")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_350_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2990
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5646
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback5646:
    set $P5001, _lex_param_1["dotty"]
    unless_null $P5001, fallback5647
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback5647:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_351_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2992
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2993
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5648
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback5648:
.annotate 'line', 2995
    nqp_get_sc_object $P5009, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5649
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5010
  fallback5649:
    $P5011 = $P5006."new"("RETURN" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "call" :named("op"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_352_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2999
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3000
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5650
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback5650:
.annotate 'line', 3001
    nqp_get_sc_object $P5009, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5651
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5010
  fallback5651:
    $P5011 = $P5006."new"("$/" :named("name"), "contextual" :named("scope"))
    $P5012 = $P5001."new"($P5011, "callmethod" :named("op"), "!make" :named("name"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_353_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3008
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5652
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback5652:
    $P5006 = $P5001."new"("control" :named("op"), "next" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_354_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3009
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5653
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback5653:
    $P5006 = $P5001."new"("control" :named("op"), "last" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_355_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3010
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5654
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback5654:
    $P5006 = $P5001."new"("control" :named("op"), "redo" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_356_1359292300.247") :anon :lex :outer("cuid_420_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3012
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3013
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5655
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback5655:
    $P5006 = $P5001."new"("callmethod" :named("op"), "ACCEPTS" :named("name"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_492_1359292300.247") :anon :lex :outer("cuid_371_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3094
    .const 'Sub' $P5014 = 'cuid_357_1359292300.247' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_358_1359292300.247' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_359_1359292300.247' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_360_1359292300.247' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_361_1359292300.247' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_362_1359292300.247' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_363_1359292300.247' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_364_1359292300.247' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_365_1359292300.247' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_366_1359292300.247' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_367_1359292300.247' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_368_1359292300.247' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_369_1359292300.247' 
    capture_lex $P5014 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_357_1359292300.247' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_358_1359292300.247' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_359_1359292300.247' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_360_1359292300.247' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_361_1359292300.247' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_362_1359292300.247' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_363_1359292300.247' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_364_1359292300.247' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_365_1359292300.247' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_366_1359292300.247' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_367_1359292300.247' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_368_1359292300.247' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_369_1359292300.247' 
    capture_lex $P5013
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_357_1359292300.247") :anon :lex :outer("cuid_492_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3096
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 3097
    unless_null _lex_param_1, fallback5656
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5003
  fallback5656:
    set $P5002, _lex_param_1["statement"]
    unless_null $P5002, fallback5657
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5002, $P5004
  fallback5657:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 3098
    nqp_get_sc_object $P5009, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Regex"]
    unless_null $P5006, fallback5658
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5010
  fallback5658:
    $P5011 = $P5006."new"($P101, "qastnode" :named("rxtype"), "declarative" :named("subtype"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_358_1359292300.247") :anon :lex :outer("cuid_492_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3102
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3103
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5659
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback5659:
    unless_null _lex_param_1, fallback5660
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5007
  fallback5660:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5661
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5008
  fallback5661:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_359_1359292300.247") :anon :lex :outer("cuid_492_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3107
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3108
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5662
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback5662:
    nqp_get_sc_object $P5009, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5663
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5010
  fallback5663:
.annotate 'line', 3109
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5664
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5015
  fallback5664:
    $P5016 = $P5011."new"("!INTERPOLATE" :named("value"))
.annotate 'line', 3110
    unless_null _lex_param_1, fallback5665
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5018
  fallback5665:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5666
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5017, $P5019
  fallback5666:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_360_1359292300.247") :anon :lex :outer("cuid_492_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3114
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3115
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5667
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback5667:
    nqp_get_sc_object $P5009, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5668
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5010
  fallback5668:
.annotate 'line', 3116
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5669
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5015
  fallback5669:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3117
    unless_null _lex_param_1, fallback5670
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5018
  fallback5670:
    set $P5017, _lex_param_1["codeblock"]
    unless_null $P5017, fallback5671
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5017, $P5019
  fallback5671:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_361_1359292300.247") :anon :lex :outer("cuid_492_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3121
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3122
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5672
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback5672:
    unless_null _lex_param_1, fallback5673
    nqp_get_sc_object $P5007, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5007
  fallback5673:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5674
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5008
  fallback5674:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback5675
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5011
  fallback5675:
    set $P5010, _lex_param_1["zw"]
    unless_null $P5010, fallback5676
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5012
  fallback5676:
    set $S5001, $P5010
    iseq $I5001, $S5001, "!"
    $P5013 = $P5001."new"($P5009, "zerowidth" :named("subtype"), $I5001 :named("negate"), "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_362_1359292300.247") :anon :lex :outer("cuid_492_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3127
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3128
    nqp_get_sc_object $P5004, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5677
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5005
  fallback5677:
    nqp_get_sc_object $P5009, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5678
    nqp_get_sc_object $P5010, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5006, $P5010
  fallback5678:
.annotate 'line', 3129
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5679
    nqp_get_sc_object $P5015, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5015
  fallback5679:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3130
    unless_null _lex_param_1, fallback5680
    nqp_get_sc_object $P5018, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5018
  fallback5680:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5681
    nqp_get_sc_object $P5019, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5017, $P5019
  fallback5681:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_363_1359292300.247") :anon :lex :outer("cuid_492_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3134
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
.annotate 'line', 3135
    unless_null _lex_param_1, fallback5682
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5004
  fallback5682:
    set $P5003, _lex_param_1["block"]
    unless_null $P5003, fallback5683
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5005
  fallback5683:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 3136
    $P101."blocktype"("immediate")
.annotate 'line', 3138
    nqp_get_sc_object $P5010, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback5684
    nqp_get_sc_object $P5011, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5011
  fallback5684:
.annotate 'line', 3139
    nqp_get_sc_object $P5015, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback5685
    nqp_get_sc_object $P5016, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5012, $P5016
  fallback5685:
.annotate 'line', 3141
    nqp_get_sc_object $P5020, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Var"]
    unless_null $P5017, fallback5686
    nqp_get_sc_object $P5021, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5017, $P5021
  fallback5686:
    $P5022 = $P5017."new"("$/" :named("name"), "contextual" :named("scope"))
.annotate 'line', 3142
    nqp_get_sc_object $P5026, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["Op"]
    unless_null $P5023, fallback5687
    nqp_get_sc_object $P5027, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5023, $P5027
  fallback5687:
.annotate 'line', 3143
    nqp_get_sc_object $P5031, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["Var"]
    unless_null $P5028, fallback5688
    nqp_get_sc_object $P5032, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5028, $P5032
  fallback5688:
    $P5033 = $P5028."new"(utf8:"$\x{a2}" :named("name"), "contextual" :named("scope"))
    $P5034 = $P5023."new"($P5033, "MATCH" :named("name"), "callmethod" :named("op"))
    $P5035 = $P5012."new"($P5022, $P5034, "bind" :named("op"))
    $P5036 = $P5007."new"($P5035, $P101)
    set $P102, $P5036
.annotate 'line', 3150
    $P5037 = _lex_param_1."!make"($P102)
    .return ($P5037) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_364_1359292300.247") :anon :lex :outer("cuid_492_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3153
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5085 = 'cuid_493_1359292300.247' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_494_1359292300.247' 
    capture_lex $P5085 
    .lex "$name", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    unless_null _lex_param_1, fallback5689
    nqp_get_sc_object $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5004
  fallback5689:
    set $P5003, _lex_param_1["longname"]
    unless_null $P5003, fallback5690
    nqp_get_sc_object $P5005, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5005
  fallback5690:
    set $S5001, $P5003
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback5693
    nqp_get_sc_object $P5008, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5008
  fallback5693:
    set $P5007, _lex_param_1["assertion"]
    unless_null $P5007, fallback5694
    nqp_get_sc_object $P5009, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5007, $P5009
  fallback5694:
    unless $P5007 goto if1749_else5691 
.annotate 'line', 3156
.annotate 'line', 3157
    unless_null _lex_param_1, fallback5695
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5012
  fallback5695:
    set $P5011, _lex_param_1["assertion"]
    unless_null $P5011, fallback5696
    nqp_get_sc_object $P5013, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5011, $P5013
  fallback5696:
    set $P5010, $P5011[0]
    unless_null $P5010, fallback5697
    nqp_get_sc_object $P5014, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5010, $P5014
  fallback5697:
    $P5015 = $P5010."ast"()
    set $P102, $P5015
.annotate 'line', 3158
    nqp_decontainerize $P5016, _lex_param_0
    $P5017 = $P5016."subrule_alias"($P102, $P101)
    goto if1749_end5692
  if1749_else5691:
    set $S5002, $P101
    iseq $I5001, $S5002, "sym"
    unless $I5001 goto if1750_else5698 
    .const 'Sub' $P5018 = 'cuid_493_1359292300.247' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5083, $P5019
    goto if1750_end5699
  if1750_else5698:
.annotate 'line', 3168
.annotate 'line', 3169
    nqp_get_sc_object $P5023, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Regex"]
    unless_null $P5020, fallback5716
    nqp_get_sc_object $P5024, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5020, $P5024
  fallback5716:
.annotate 'line', 3171
    nqp_get_sc_object $P5028, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Node"]
    unless_null $P5025, fallback5717
    nqp_get_sc_object $P5029, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5025, $P5029
  fallback5717:
    nqp_get_sc_object $P5033, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback5718
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5030, $P5034
  fallback5718:
    $P5035 = $P5030."new"($P101 :named("value"))
    $P5036 = $P5025."new"($P5035)
    $P5037 = $P5020."new"($P5036, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"), $P101 :named("name"))
    set $P102, $P5037
    unless_null _lex_param_1, fallback5721
    nqp_get_sc_object $P5039, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5039
  fallback5721:
    set $P5038, _lex_param_1["arglist"]
    unless_null $P5038, fallback5722
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5038, $P5040
  fallback5722:
    unless $P5038 goto if1755_else5719 
.annotate 'line', 3172
.annotate 'line', 3173
    unless_null _lex_param_1, fallback5723
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5046
  fallback5723:
    set $P5045, _lex_param_1["arglist"]
    unless_null $P5045, fallback5724
    nqp_get_sc_object $P5047, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5045, $P5047
  fallback5724:
    set $P5044, $P5045[0]
    unless_null $P5044, fallback5725
    nqp_get_sc_object $P5048, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5044, $P5048
  fallback5725:
    $P5049 = $P5044."ast"()
    $P5050 = $P5049."list"()
    set $P5041, $P5050
    iter $P5043, $P5050
  for_next5727:
    unless $P5043, for_done5729
    shift $P5052, $P5043
  for_redo5728:
    .const 'Sub' $P5051 = 'cuid_494_1359292300.247' 
    capture_lex $P5051
    $P5041 = $P5051($P5052)
    goto for_next5727
  for_done5729:
    set $P5082, $P5041
    goto if1755_end5720
  if1755_else5719:
    unless_null _lex_param_1, fallback5732
    nqp_get_sc_object $P5054, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5054
  fallback5732:
    set $P5053, _lex_param_1["nibbler"]
    unless_null $P5053, fallback5733
    nqp_get_sc_object $P5055, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5053, $P5055
  fallback5733:
    set $P5081, $P5053
    unless $P5053 goto if1756_end5731 
.annotate 'line', 3175
    set $S5003, $P101
    iseq $I5002, $S5003, "after"
    unless $I5002 goto if1757_else5734 
.annotate 'line', 3177
    set $P5056, $P102[0]
    unless_null $P5056, fallback5736
    nqp_get_sc_object $P5057, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5056, $P5057
  fallback5736:
    nqp_decontainerize $P5058, _lex_param_0
    nqp_decontainerize $P5059, _lex_param_0
    unless_null _lex_param_1, fallback5737
    nqp_get_sc_object $P5062, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5062
  fallback5737:
    set $P5061, _lex_param_1["nibbler"]
    unless_null $P5061, fallback5738
    nqp_get_sc_object $P5063, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5061, $P5063
  fallback5738:
    set $P5060, $P5061[0]
    unless_null $P5060, fallback5739
    nqp_get_sc_object $P5064, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5060, $P5064
  fallback5739:
    $P5065 = $P5060."ast"()
    $P5066 = $P5059."flip_ast"($P5065)
    $P5067 = $P5058."qbuildsub"($P5066, 1 :named("anon"), 1 :named("addself"))
    $P5068 = $P5056."push"($P5067)
    set $P5080, $P5068
    goto if1757_end5735
  if1757_else5734:
.annotate 'line', 3178
    set $P5069, $P102[0]
    unless_null $P5069, fallback5740
    nqp_get_sc_object $P5070, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5069, $P5070
  fallback5740:
    nqp_decontainerize $P5071, _lex_param_0
    unless_null _lex_param_1, fallback5741
    nqp_get_sc_object $P5074, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5074
  fallback5741:
    set $P5073, _lex_param_1["nibbler"]
    unless_null $P5073, fallback5742
    nqp_get_sc_object $P5075, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5073, $P5075
  fallback5742:
    set $P5072, $P5073[0]
    unless_null $P5072, fallback5743
    nqp_get_sc_object $P5076, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5072, $P5076
  fallback5743:
    $P5077 = $P5072."ast"()
    $P5078 = $P5071."qbuildsub"($P5077, 1 :named("anon"), 1 :named("addself"))
    $P5079 = $P5069."push"($P5078)
    set $P5080, $P5079
  if1757_end5735:
    set $P5081, $P5080
  if1756_end5731:
    set $P5082, $P5081
  if1755_end5720:
    set $P5083, $P5082
  if1750_end5699:
  if1749_end5692:
.annotate 'line', 3181
    $P5084 = _lex_param_1."!make"($P102)
    .return ($P5084) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_493_1359292300.247") :anon :lex :outer("cuid_364_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3160
    .lex "$loc", $P101 
    .lex "$rxname", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P102, $P5002
    find_dynamic_lex $P5004, "%*RX"
    unless_null $P5004, fallback5700
    nqp_get_sc_object $P5007, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["%RX"]
    unless_null $P5005, fallback5701
    nqp_get_sc_object $P5009, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%RX"], $P5010
    set $P5005, $P5010
  fallback5701:
    unless_null $P5005, vivi_17515702
    die "Contextual %*RX not found"
    box $P5011, "Contextual %*RX not found"
    set $P5005, $P5011
  vivi_17515702:
    set $P5004, $P5005
  fallback5700:
    set $P5003, $P5004["name"]
    unless_null $P5003, fallback5703
    nqp_get_sc_object $P5012, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5012
  fallback5703:
    set $S5001, $P5003
    index $I5001, $S5001, ":sym<", 0
    box $P5013, $I5001
    set $P101, $P5013
    set $N5001, $P101
    set $N5002, 0
    islt $I5002, $N5001, $N5002
    unless $I5002 goto if1752_end5705 
    find_dynamic_lex $P5015, "%*RX"
    unless_null $P5015, fallback5706
    nqp_get_sc_object $P5018, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["%RX"]
    unless_null $P5016, fallback5707
    nqp_get_sc_object $P5020, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5019, $P5020
    new $P5021, 'Hash'
    set $P5019["%RX"], $P5021
    set $P5016, $P5021
  fallback5707:
    unless_null $P5016, vivi_17535708
    die "Contextual %*RX not found"
    box $P5022, "Contextual %*RX not found"
    set $P5016, $P5022
  vivi_17535708:
    set $P5015, $P5016
  fallback5706:
    set $P5014, $P5015["name"]
    unless_null $P5014, fallback5709
    nqp_get_sc_object $P5023, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5014, $P5023
  fallback5709:
    set $S5002, $P5014
    index $I5003, $S5002, utf8:":sym\x{ab}", 0
    box $P5024, $I5003
    set $P101, $P5024
  if1752_end5705:
    find_dynamic_lex $P5026, "%*RX"
    unless_null $P5026, fallback5710
    nqp_get_sc_object $P5029, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["%RX"]
    unless_null $P5027, fallback5711
    nqp_get_sc_object $P5031, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%RX"], $P5032
    set $P5027, $P5032
  fallback5711:
    unless_null $P5027, vivi_17545712
    die "Contextual %*RX not found"
    box $P5033, "Contextual %*RX not found"
    set $P5027, $P5033
  vivi_17545712:
    set $P5026, $P5027
  fallback5710:
    set $P5025, $P5026["name"]
    unless_null $P5025, fallback5713
    nqp_get_sc_object $P5034, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5025, $P5034
  fallback5713:
    set $S5005, $P5025
    set $N5004, $P101
    set $N5005, 5
    add $N5003, $N5004, $N5005
    set $I5004, $N5003
    substr $S5004, $S5005, $I5004
    chopn $S5003, $S5004, 1
    box $P5035, $S5003
    set $P102, $P5035
.annotate 'line', 3165
    nqp_get_sc_object $P5039, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Regex"]
    unless_null $P5036, fallback5714
    nqp_get_sc_object $P5040, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5036, $P5040
  fallback5714:
    find_lex $P5041, "$/"
.annotate 'line', 3166
    nqp_get_sc_object $P5045, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Regex"]
    unless_null $P5042, fallback5715
    nqp_get_sc_object $P5046, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5042, $P5046
  fallback5715:
    find_lex $P5047, "$/"
    $P5048 = $P5042."new"($P102, "literal" :named("rxtype"), $P5047 :named("node"))
    $P5049 = $P5036."new"($P5048, "sym" :named("name"), "subcapture" :named("rxtype"), $P5041 :named("node"))
    store_lex "$qast", $P5049
    .return ($P5049) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_494_1359292300.247") :anon :lex :outer("cuid_364_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3173
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$qast"
    set $P5001, $P5002[0]
    unless_null $P5001, fallback5726
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback5726:
    $P5004 = $P5001."push"(_lex_param_0)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_365_1359292300.247") :anon :lex :outer("cuid_492_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3184
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3185
    unless_null _lex_param_1, fallback5744
    nqp_get_sc_object $P5002, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set _lex_param_1, $P5002
  fallback5744:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5745
    nqp_get_sc_object $P5003, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5001, $P5003
  fallback5745:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "create_regex_code_object" :subid("cuid_366_1359292300.247") :anon :lex :outer("cuid_492_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3188
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$code", $P101 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P101, $P5001
.annotate 'line', 3189
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback5746
    nqp_get_sc_object $P5005, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback5747
    nqp_get_sc_object $P5006, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5003, $P5006
  fallback5747:
    unless_null $P5003, vivi_17585748
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_17585748:
    set $P5002, $P5003
  fallback5746:
    $P5008 = $P5002."create_code"(_lex_param_1, "", 0, "NQPRegex" :named("code_type_name"))
    set $P101, $P5008
    find_dynamic_lex $P5009, "%*RX"
    unless_null $P5009, fallback5751
    nqp_get_sc_object $P5012, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["%RX"]
    unless_null $P5010, fallback5752
    nqp_get_sc_object $P5014, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5013, $P5014
    new $P5015, 'Hash'
    set $P5013["%RX"], $P5015
    set $P5010, $P5015
  fallback5752:
    unless_null $P5010, vivi_17605753
    die "Contextual %*RX not found"
    box $P5016, "Contextual %*RX not found"
    set $P5010, $P5016
  vivi_17605753:
    set $P5009, $P5010
  fallback5751:
    exists $I5001, $P5009["code"]
    unless $I5001 goto if1759_end5750 
.annotate 'line', 3190
.annotate 'line', 3191
    find_dynamic_lex $P5018, "%*RX"
    unless_null $P5018, fallback5754
    nqp_get_sc_object $P5021, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["%RX"]
    unless_null $P5019, fallback5755
    nqp_get_sc_object $P5023, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    get_who $P5022, $P5023
    new $P5024, 'Hash'
    set $P5022["%RX"], $P5024
    set $P5019, $P5024
  fallback5755:
    unless_null $P5019, vivi_17615756
    die "Contextual %*RX not found"
    box $P5025, "Contextual %*RX not found"
    set $P5019, $P5025
  vivi_17615756:
    set $P5018, $P5019
  fallback5754:
    set $P5017, $P5018["code"]
    unless_null $P5017, fallback5757
    nqp_get_sc_object $P5026, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    set $P5017, $P5026
  fallback5757:
    $P5027 = $P5017."ADD_NESTED_CODE"($P101)
  if1759_end5750:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_nfa" :subid("cuid_367_1359292300.247") :anon :lex :outer("cuid_492_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3196
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$nfa", _lex_param_3 
.annotate 'line', 3197
    $P5001 = _lex_param_3."save"()
    $P5002 = _lex_param_1."SET_NFA"($P5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_caps" :subid("cuid_368_1359292300.247") :anon :lex :outer("cuid_492_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3200
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "%caps", _lex_param_3 
.annotate 'line', 3201
    $P5001 = _lex_param_1."SET_CAPS"(_lex_param_3)
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_alt_nfa" :subid("cuid_369_1359292300.247") :anon :lex :outer("cuid_492_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3204
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .const 'Sub' $P5008 = 'cuid_495_1359292300.247' 
    capture_lex $P5008 
    .lex "@saved", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$key", _lex_param_3 
    .lex "@alternatives", _lex_param_4 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    set $P5002, _lex_param_4
    iter $P5004, _lex_param_4
  for_next5758:
    unless $P5004, for_done5760
    shift $P5006, $P5004
  for_redo5759:
    .const 'Sub' $P5005 = 'cuid_495_1359292300.247' 
    capture_lex $P5005
    $P5002 = $P5005($P5006)
    goto for_next5758
  for_done5760:
.annotate 'line', 3209
    $P5007 = _lex_param_1."SET_ALT_NFA"(_lex_param_3, $P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_495_1359292300.247") :anon :lex :outer("cuid_369_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3206
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 3207
    find_lex $P5001, "@saved"
    $P5002 = _lex_param_0."save"(1 :named("non_empty"))
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_496_1359292300.247") :anon :lex :outer("cuid_371_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3214
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    nqp_get_sc_object $P5001, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904", 22
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_498_1359292300.247") :load :init
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = 'cuid_497_1359292300.247' 
    capture_lex $P5001 
    .local pmc cur_sc 
    .local pmc conflicts 
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P5001
    get_class $P5002, "LexPad"
    get_class $P5003, "NQPLexPad"
    $P5004 = $P5001."hll_map"($P5002, $P5003)
    load_bytecode "ModuleLoader.pbc"
    .const 'Sub' $P5001 = "cuid_371_1359292300.247" 
    get_hll_global $P5002, "ModuleLoader"
    $P5003 = $P5002."load_setting"("NQPCORE")
    $P5001."set_outer_ctx"($P5003)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QAST")
    nqp_create_sc $P5001, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274"
    set cur_sc, $P5001
    $P5002 = cur_sc."set_description"("src\\stage2\\gen\\NQP.pm")
    new $P5003, 'ResizablePMCArray'
    set conflicts, $P5003
    new $P5004, 'ResizableStringArray'
    null $S5001
    push $P5004, $S5001
    push $P5004, "P6opaque"
    push $P5004, "QAST"
    push $P5004, "QRegex"
    push $P5004, "NQPCursorRole"
    push $P5004, "5AB04DFAFFF209D71179F6DD66C39F5290FAF9C0-1359292275.914"
    push $P5004, "src\\stage2\\QRegex.nqp"
    push $P5004, "NQPMatch"
    push $P5004, "NQPCursor"
    push $P5004, "NQPRegexMethod"
    push $P5004, "NQPRegex"
    push $P5004, "HLL"
    push $P5004, "PIRT"
    push $P5004, "NQP"
    push $P5004, "DEFAULT"
    push $P5004, "CREATE"
    push $P5004, "FF84D8D5C672E15F92950426E881346AC75F35B1-1359292272.904"
    push $P5004, "src\\stage2\\NQPCORE.setting"
    push $P5004, "bless"
    push $P5004, "BUILDALL"
    push $P5004, "new"
    push $P5004, "Str"
    push $P5004, "Numeric"
    push $P5004, "Int"
    push $P5004, "at_pos"
    push $P5004, "at_key"
    push $P5004, "defined"
    push $P5004, "ACCEPTS"
    push $P5004, "isa"
    push $P5004, "__dump"
    push $P5004, "BUILD"
    push $P5004, "slot_for_object"
    push $P5004, "1AE2721F943B070F2435665822E64F796E4C357E-1359292279.774"
    push $P5004, "src\\stage2\\gen\\NQPHLL.pm"
    push $P5004, "add_object"
    push $P5004, "add_root_code_ref"
    push $P5004, "update_root_code_ref"
    push $P5004, "is_precompilation_mode"
    push $P5004, "add_load_dependency_task"
    push $P5004, "add_fixup_task"
    push $P5004, "sc"
    push $P5004, "handle"
    push $P5004, "code_ref_blocks"
    push $P5004, "load_dependency_tasks"
    push $P5004, "fixup_tasks"
    push $P5004, "push_lexpad"
    push $P5004, "pop_lexpad"
    push $P5004, "cur_lexpad"
    push $P5004, "get_legacy_block_list"
    push $P5004, "load_setting"
    push $P5004, "load_module"
    push $P5004, "import"
    push $P5004, "install_package_symbol"
    push $P5004, "install_lexical_symbol"
    push $P5004, "install_package_routine"
    push $P5004, "create_code"
    push $P5004, "pkg_create_mo"
    push $P5004, "pkg_add_attribute"
    push $P5004, "pkg_add_method"
    push $P5004, "set_routine_signature"
    push $P5004, "pkg_set_body_block"
    push $P5004, "pkg_add_parent_or_role"
    push $P5004, "pkg_add_parrot_vtable_handler_mapping"
    push $P5004, "pkg_compose"
    push $P5004, "run_begin_block"
    push $P5004, "libs"
    push $P5004, "add_initializations"
    push $P5004, "is_lexical"
    push $P5004, "is_package"
    push $P5004, "is_scope"
    push $P5004, "known_sym"
    push $P5004, "find_sym"
    push $P5004, "$!sc"
    push $P5004, "$!handle"
    push $P5004, "$!precomp_mode"
    push $P5004, "$!num_code_refs"
    push $P5004, "$!code_ref_blocks"
    push $P5004, "@!load_dependency_tasks"
    push $P5004, "@!fixup_tasks"
    push $P5004, "%!addr_to_slot"
    push $P5004, "@!BLOCKS"
    push $P5004, "%!code_objects_to_fix_up"
    push $P5004, "%!code_object_types"
    push $P5004, "%!code_object_fixup_list"
    push $P5004, "%!code_stub_sc_idx"
    push $P5004, "MATCH"
    push $P5004, "Bool"
    push $P5004, "parse"
    push $P5004, "!INTERPOLATE"
    push $P5004, "!INTERPOLATE_REGEX"
    push $P5004, "orig"
    push $P5004, "target"
    push $P5004, "from"
    push $P5004, "pos"
    push $P5004, "CAPHASH"
    push $P5004, "!cursor_init"
    push $P5004, "!cursor_start"
    push $P5004, "!cursor_start_subcapture"
    push $P5004, "!cursor_capture"
    push $P5004, "!cursor_push_cstack"
    push $P5004, "!cursor_pass"
    push $P5004, "!cursor_fail"
    push $P5004, "!cursor_pos"
    push $P5004, "!cursor_next"
    push $P5004, "!cursor_more"
    push $P5004, "!reduce"
    push $P5004, "!reduce_with_match"
    push $P5004, "!shared"
    push $P5004, "!protoregex"
    push $P5004, "!protoregex_nfa"
    push $P5004, "!protoregex_table"
    push $P5004, "!alt"
    push $P5004, "!alt_nfa"
    push $P5004, "!precompute_nfas"
    push $P5004, "!dba"
    push $P5004, "!highwater"
    push $P5004, "!highexpect"
    push $P5004, "!fresh_highexpect"
    push $P5004, "!set_highexpect"
    push $P5004, "!clear_highwater"
    push $P5004, "!BACKREF"
    push $P5004, "!LITERAL"
    push $P5004, "at"
    push $P5004, "before"
    push $P5004, "after"
    push $P5004, "ws"
    push $P5004, "ww"
    push $P5004, "wb"
    push $P5004, "ident"
    push $P5004, "alpha"
    push $P5004, "alnum"
    push $P5004, "upper"
    push $P5004, "lower"
    push $P5004, "digit"
    push $P5004, "xdigit"
    push $P5004, "space"
    push $P5004, "blank"
    push $P5004, "cntrl"
    push $P5004, "punct"
    push $P5004, "FAILGOAL"
    push $P5004, "throw_unrecog_backslash_seq"
    push $P5004, "termish"
    push $P5004, "term"
    push $P5004, "infix"
    push $P5004, "prefix"
    push $P5004, "postfix"
    push $P5004, "circumfix"
    push $P5004, "postcircumfix"
    push $P5004, "term:sym<circumfix>"
    push $P5004, "infixish"
    push $P5004, "prefixish"
    push $P5004, "postfixish"
    push $P5004, "nullterm"
    push $P5004, "nullterm_alt"
    push $P5004, "nulltermish"
    push $P5004, "quote_delimited"
    push $P5004, "quote_atom"
    push $P5004, "decint"
    push $P5004, "decints"
    push $P5004, "hexint"
    push $P5004, "hexints"
    push $P5004, "octint"
    push $P5004, "octints"
    push $P5004, "binint"
    push $P5004, "binints"
    push $P5004, "integer"
    push $P5004, "dec_number"
    push $P5004, "escale"
    push $P5004, "quote_escape"
    push $P5004, "quote_escape:sym<backslash>"
    push $P5004, "quote_escape:sym<stopper>"
    push $P5004, "quote_escape:sym<bs>"
    push $P5004, "quote_escape:sym<nl>"
    push $P5004, "quote_escape:sym<cr>"
    push $P5004, "quote_escape:sym<tab>"
    push $P5004, "quote_escape:sym<ff>"
    push $P5004, "quote_escape:sym<esc>"
    push $P5004, "quote_escape:sym<hex>"
    push $P5004, "quote_escape:sym<oct>"
    push $P5004, "quote_escape:sym<chr>"
    push $P5004, "quote_escape:sym<0>"
    push $P5004, "quote_escape:sym<misc>"
    push $P5004, "charname"
    push $P5004, "charnames"
    push $P5004, "charspec"
    push $P5004, "O"
    push $P5004, "panic"
    push $P5004, "peek_delimiters"
    push $P5004, "quote_EXPR"
    push $P5004, "quotemod_check"
    push $P5004, "starter"
    push $P5004, "stopper"
    push $P5004, "split_words"
    push $P5004, "EXPR"
    push $P5004, "EXPR_reduce"
    push $P5004, "EXPR_nonassoc"
    push $P5004, "ternary"
    push $P5004, "MARKER"
    push $P5004, "MARKED"
    push $P5004, "LANG"
    push $P5004, "TOP"
    push $P5004, "identifier"
    push $P5004, "name"
    push $P5004, "deflongname"
    push $P5004, "ENDSTMT"
    push $P5004, "unv"
    push $P5004, "pod_comment"
    push $P5004, "comp_unit"
    push $P5004, "statementlist"
    push $P5004, "statement"
    push $P5004, "eat_terminator"
    push $P5004, "xblock"
    push $P5004, "pblock"
    push $P5004, "lambda"
    push $P5004, "block"
    push $P5004, "blockoid"
    push $P5004, "newpad"
    push $P5004, "outerctx"
    push $P5004, "finishpad"
    push $P5004, "you_are_here"
    push $P5004, "terminator"
    push $P5004, "terminator:sym<;>"
    push $P5004, "terminator:sym<}>"
    push $P5004, "statement_control"
    push $P5004, "statement_control:sym<use>"
    push $P5004, "statement_control:sym<if>"
    push $P5004, "statement_control:sym<unless>"
    push $P5004, "statement_control:sym<while>"
    push $P5004, "statement_control:sym<repeat>"
    push $P5004, "statement_control:sym<for>"
    push $P5004, "statement_control:sym<CATCH>"
    push $P5004, "statement_control:sym<CONTROL>"
    push $P5004, "statement_prefix"
    push $P5004, "statement_prefix:sym<BEGIN>"
    push $P5004, "statement_prefix:sym<INIT>"
    push $P5004, "statement_prefix:sym<try>"
    push $P5004, "blorst"
    push $P5004, "statement_mod_cond"
    push $P5004, "statement_mod_cond:sym<if>"
    push $P5004, "statement_mod_cond:sym<unless>"
    push $P5004, "statement_mod_loop"
    push $P5004, "statement_mod_loop:sym<while>"
    push $P5004, "statement_mod_loop:sym<until>"
    push $P5004, "statement_mod_loop:sym<for>"
    push $P5004, "term:sym<fatarrow>"
    push $P5004, "term:sym<colonpair>"
    push $P5004, "term:sym<variable>"
    push $P5004, "term:sym<package_declarator>"
    push $P5004, "term:sym<scope_declarator>"
    push $P5004, "term:sym<routine_declarator>"
    push $P5004, "term:sym<multi_declarator>"
    push $P5004, "term:sym<regex_declarator>"
    push $P5004, "term:sym<statement_prefix>"
    push $P5004, "term:sym<lambda>"
    push $P5004, "fatarrow"
    push $P5004, "colonpair"
    push $P5004, "variable"
    push $P5004, "sigil"
    push $P5004, "twigil"
    push $P5004, "package_declarator"
    push $P5004, "package_declarator:sym<module>"
    push $P5004, "package_declarator:sym<knowhow>"
    push $P5004, "package_declarator:sym<class>"
    push $P5004, "package_declarator:sym<grammar>"
    push $P5004, "package_declarator:sym<role>"
    push $P5004, "package_declarator:sym<native>"
    push $P5004, "package_declarator:sym<stub>"
    push $P5004, "package_def"
    push $P5004, "role_params"
    push $P5004, "scope_declarator"
    push $P5004, "scope_declarator:sym<my>"
    push $P5004, "scope_declarator:sym<our>"
    push $P5004, "scope_declarator:sym<has>"
    push $P5004, "scoped"
    push $P5004, "typename"
    push $P5004, "declarator"
    push $P5004, "variable_declarator"
    push $P5004, "routine_declarator"
    push $P5004, "routine_declarator:sym<sub>"
    push $P5004, "routine_declarator:sym<method>"
    push $P5004, "routine_def"
    push $P5004, "method_def"
    push $P5004, "onlystar"
    push $P5004, "multi_declarator"
    push $P5004, "multi_declarator:sym<multi>"
    push $P5004, "multi_declarator:sym<proto>"
    push $P5004, "multi_declarator:sym<null>"
    push $P5004, "signature"
    push $P5004, "parameter"
    push $P5004, "param_var"
    push $P5004, "named_param"
    push $P5004, "default_value"
    push $P5004, "trait"
    push $P5004, "trait_mod"
    push $P5004, "trait_mod:sym<is>"
    push $P5004, "regex_declarator"
    push $P5004, "dotty"
    push $P5004, "term:sym<self>"
    push $P5004, "term:sym<identifier>"
    push $P5004, "term:sym<name>"
    push $P5004, "term:sym<pir::op>"
    push $P5004, "term:sym<pir::const>"
    push $P5004, "term:sym<nqp::op>"
    push $P5004, "term:sym<onlystar>"
    push $P5004, "args"
    push $P5004, "arglist"
    push $P5004, "term:sym<value>"
    push $P5004, "value"
    push $P5004, "number"
    push $P5004, "quote"
    push $P5004, "quote:sym<apos>"
    push $P5004, "quote:sym<dblq>"
    push $P5004, "quote:sym<q>"
    push $P5004, "quote:sym<qq>"
    push $P5004, "quote:sym<Q>"
    push $P5004, "quote:sym<Q:PIR>"
    push $P5004, "quote:sym</ />"
    push $P5004, "quote_escape:sym<$>"
    push $P5004, "quote_escape:sym<{ }>"
    push $P5004, "circumfix:sym<( )>"
    push $P5004, "circumfix:sym<[ ]>"
    push $P5004, "circumfix:sym<ang>"
    push $P5004, utf8:"circumfix:sym<\x{ab} \x{bb}>"
    push $P5004, "circumfix:sym<{ }>"
    push $P5004, "circumfix:sym<sigil>"
    push $P5004, "semilist"
    push $P5004, "infixstopper"
    push $P5004, "postcircumfix:sym<[ ]>"
    push $P5004, "postcircumfix:sym<{ }>"
    push $P5004, "postcircumfix:sym<ang>"
    push $P5004, "postcircumfix:sym<( )>"
    push $P5004, "postfix:sym<.>"
    push $P5004, "prefix:sym<++>"
    push $P5004, "prefix:sym<-->"
    push $P5004, "postfix:sym<++>"
    push $P5004, "postfix:sym<-->"
    push $P5004, "infix:sym<**>"
    push $P5004, "prefix:sym<+>"
    push $P5004, "prefix:sym<~>"
    push $P5004, "prefix:sym<->"
    push $P5004, "prefix:sym<?>"
    push $P5004, "prefix:sym<!>"
    push $P5004, "prefix:sym<|>"
    push $P5004, "infix:sym<*>"
    push $P5004, "infix:sym</>"
    push $P5004, "infix:sym<%>"
    push $P5004, "infix:sym<+&>"
    push $P5004, "infix:sym<+>"
    push $P5004, "infix:sym<->"
    push $P5004, "infix:sym<+|>"
    push $P5004, "infix:sym<+^>"
    push $P5004, "infix:sym<~>"
    push $P5004, "infix:sym<==>"
    push $P5004, "infix:sym<!=>"
    push $P5004, "infix:sym<<=>"
    push $P5004, "infix:sym<>=>"
    push $P5004, "infix:sym<<>"
    push $P5004, "infix:sym<>>"
    push $P5004, "infix:sym<eq>"
    push $P5004, "infix:sym<ne>"
    push $P5004, "infix:sym<le>"
    push $P5004, "infix:sym<ge>"
    push $P5004, "infix:sym<lt>"
    push $P5004, "infix:sym<gt>"
    push $P5004, "infix:sym<=:=>"
    push $P5004, "infix:sym<~~>"
    push $P5004, "infix:sym<&&>"
    push $P5004, "infix:sym<||>"
    push $P5004, "infix:sym<//>"
    push $P5004, "infix:sym<?? !!>"
    push $P5004, "infix:sym<=>"
    push $P5004, "infix:sym<:=>"
    push $P5004, "infix:sym<::=>"
    push $P5004, "infix:sym<,>"
    push $P5004, "prefix:sym<return>"
    push $P5004, "prefix:sym<make>"
    push $P5004, "term:sym<last>"
    push $P5004, "term:sym<next>"
    push $P5004, "term:sym<redo>"
    push $P5004, "smartmatch"
    push $P5004, "$!shared"
    push $P5004, "$!from"
    push $P5004, "$!pos"
    push $P5004, "$!match"
    push $P5004, "$!name"
    push $P5004, "$!bstack"
    push $P5004, "$!cstack"
    push $P5004, "$!regexsub"
    push $P5004, "$!restart"
    push $P5004, "CAEFFDBF4CA043F89368BEED14A520FF69374EED-1359292296.318"
    push $P5004, "src\\stage2\\gen\\NQPP6QRegex.pm"
    push $P5004, "obs"
    push $P5004, "throw_unrecognized_metachar"
    push $P5004, "throw_null_pattern"
    push $P5004, "normspace"
    push $P5004, "arg"
    push $P5004, "nibbler"
    push $P5004, "rxstopper"
    push $P5004, "termaltseq"
    push $P5004, "termconjseq"
    push $P5004, "termalt"
    push $P5004, "termconj"
    push $P5004, "quantified_atom"
    push $P5004, "separator"
    push $P5004, "atom"
    push $P5004, "quantifier"
    push $P5004, "quantifier:sym<*>"
    push $P5004, "quantifier:sym<+>"
    push $P5004, "quantifier:sym<?>"
    push $P5004, "quantifier:sym<{N,M}>"
    push $P5004, "quantifier:sym<**>"
    push $P5004, "backmod"
    push $P5004, "metachar"
    push $P5004, "metachar:sym<ws>"
    push $P5004, "metachar:sym<[ ]>"
    push $P5004, "metachar:sym<( )>"
    push $P5004, "metachar:sym<$( )>"
    push $P5004, "metachar:sym<'>"
    push $P5004, "metachar:sym<\">"
    push $P5004, "metachar:sym<.>"
    push $P5004, "metachar:sym<^>"
    push $P5004, "metachar:sym<^^>"
    push $P5004, "metachar:sym<$>"
    push $P5004, "metachar:sym<$$>"
    push $P5004, "metachar:sym<:::>"
    push $P5004, "metachar:sym<::>"
    push $P5004, "metachar:sym<lwb>"
    push $P5004, "metachar:sym<rwb>"
    push $P5004, "metachar:sym<from>"
    push $P5004, "metachar:sym<to>"
    push $P5004, "metachar:sym<bs>"
    push $P5004, "metachar:sym<mod>"
    push $P5004, "metachar:sym<quantifier>"
    push $P5004, "metachar:sym<~>"
    push $P5004, "metachar:sym<{*}>"
    push $P5004, "metachar:sym<assert>"
    push $P5004, "metachar:sym<var>"
    push $P5004, "backslash"
    push $P5004, "backslash:sym<s>"
    push $P5004, "backslash:sym<b>"
    push $P5004, "backslash:sym<e>"
    push $P5004, "backslash:sym<f>"
    push $P5004, "backslash:sym<h>"
    push $P5004, "backslash:sym<r>"
    push $P5004, "backslash:sym<t>"
    push $P5004, "backslash:sym<v>"
    push $P5004, "backslash:sym<o>"
    push $P5004, "backslash:sym<x>"
    push $P5004, "backslash:sym<c>"
    push $P5004, "backslash:sym<A>"
    push $P5004, "backslash:sym<z>"
    push $P5004, "backslash:sym<Z>"
    push $P5004, "backslash:sym<Q>"
    push $P5004, "backslash:sym<unrec>"
    push $P5004, "backslash:sym<misc>"
    push $P5004, "assertion"
    push $P5004, "assertion:sym<?>"
    push $P5004, "assertion:sym<!>"
    push $P5004, "assertion:sym<|>"
    push $P5004, "assertion:sym<method>"
    push $P5004, "assertion:sym<name>"
    push $P5004, "assertion:sym<[>"
    push $P5004, "cclass_elem"
    push $P5004, "mod_internal"
    push $P5004, "mod_ident"
    push $P5004, "mod_ident:sym<ignorecase>"
    push $P5004, "mod_ident:sym<ratchet>"
    push $P5004, "mod_ident:sym<sigspace>"
    push $P5004, "mod_ident:sym<dba>"
    push $P5004, "mod_ident:sym<oops>"
    push $P5004, "metachar:sym<:my>"
    push $P5004, "metachar:sym<{ }>"
    push $P5004, "metachar:sym<nqpvar>"
    push $P5004, "assertion:sym<{ }>"
    push $P5004, "assertion:sym<?{ }>"
    push $P5004, "assertion:sym<var>"
    push $P5004, "codeblock"
    push $P5004, "ints_to_string"
    push $P5004, "CTXSAVE"
    push $P5004, "SET_BLOCK_OUTER_CTX"
    push $P5004, "qbuildsub"
    push $P5004, "alt_nfas"
    push $P5004, "subrule_alias"
    push $P5004, "flip_ast"
    push $P5004, "create_regex_code_object"
    push $P5004, "store_regex_caps"
    push $P5004, "store_regex_nfa"
    push $P5004, "store_regex_alt_nfa"
    push $P5004, "language"
    push $P5004, "compiler"
    push $P5004, "config"
    push $P5004, "autoprint"
    push $P5004, "interactive"
    push $P5004, "eval"
    push $P5004, "ctxsave"
    push $P5004, "stages"
    push $P5004, "parsegrammar"
    push $P5004, "parseactions"
    push $P5004, "interactive_banner"
    push $P5004, "interactive_prompt"
    push $P5004, "compiler_progname"
    push $P5004, "commandline_options"
    push $P5004, "command_line"
    push $P5004, "command_eval"
    push $P5004, "process_args"
    push $P5004, "evalfiles"
    push $P5004, "compile"
    push $P5004, "start"
    push $P5004, "past"
    push $P5004, "post"
    push $P5004, "pirbegin"
    push $P5004, "pir"
    push $P5004, "evalpmc"
    push $P5004, "dumper"
    push $P5004, "usage"
    push $P5004, "version"
    push $P5004, "show-config"
    push $P5004, "verbose-config"
    push $P5004, "vmstat"
    push $P5004, "nqpevent"
    push $P5004, "removestage"
    push $P5004, "addstage"
    push $P5004, "parse_name"
    push $P5004, "lineof"
    push $P5004, "user-progname"
    push $P5004, "cli-options"
    push $P5004, "cli-arguments"
    push $P5004, "@!stages"
    push $P5004, "$!parsegrammar"
    push $P5004, "$!parseactions"
    push $P5004, "@!cmdoptions"
    push $P5004, "$!usage"
    push $P5004, "$!compiler_progname"
    push $P5004, "$!language"
    push $P5004, "%!config"
    push $P5004, "$!user_progname"
    push $P5004, "@!cli-arguments"
    push $P5004, "%!cli-options"
    push $P5004, ""
    push $P5004, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5004, "alt_nfa__1_1359292301.404"
    push $P5004, "alt_nfa__2_1359292301.42"
    push $P5004, utf8:"\n\x{b}\f\r\x{85}\u2028\u2029"
    push $P5004, "alt_nfa__4_1359292301.438"
    push $P5004, "alt_nfa__3_1359292301.429"
    push $P5004, "alt_nfa__6_1359292301.517"
    push $P5004, "alt_nfa__5_1359292301.505"
    push $P5004, "alt_nfa__7_1359292301.601"
    push $P5004, "alt_nfa__9_1359292301.62"
    push $P5004, "alt_nfa__8_1359292301.607"
    push $P5004, "{"
    push $P5004, "alt_nfa__10_1359292301.646"
    push $P5004, "alt_nfa__11_1359292301.651"
    push $P5004, ";"
    push $P5004, "}"
    push $P5004, "sym"
    push $P5004, "else"
    push $P5004, "alt_nfa__12_1359292301.747"
    push $P5004, "wu"
    push $P5004, "alt_nfa__13_1359292301.766"
    push $P5004, "alt_nfa__14_1359292301.766"
    push $P5004, "alt_nfa__15_1359292301.767"
    push $P5004, "alt_nfa__16_1359292301.815"
    push $P5004, "cond"
    push $P5004, "alt_nfa__17_1359292301.888"
    push $P5004, "alt_nfa__18_1359292301.896"
    push $P5004, "key"
    push $P5004, "val"
    push $P5004, "not"
    push $P5004, "alt_nfa__19_1359292301.933"
    push $P5004, "desigilname"
    push $P5004, "<["
    push $P5004, "/_!"
    push $P5004, "alt_nfa__20_1359292301.947"
    push $P5004, "$@%&"
    push $P5004, "*!?"
    push $P5004, "metaclass"
    push $P5004, "repr"
    push $P5004, "export"
    push $P5004, "parent"
    push $P5004, "role"
    push $P5004, "alt_nfa__21_1359292302.194"
    push $P5004, "alt_nfa__22_1359292302.209"
    push $P5004, "alt_nfa__23_1359292302.258"
    push $P5004, "latename"
    push $P5004, "private"
    push $P5004, "alt_nfa__24_1359292302.389"
    push $P5004, "invocant"
    push $P5004, "alt_nfa__26_1359292302.461"
    push $P5004, "alt_nfa__25_1359292302.456"
    push $P5004, "definedness"
    push $P5004, "quant"
    push $P5004, "_DU"
    push $P5004, "alt_nfa__27_1359292302.484"
    push $P5004, "alt_nfa__28_1359292302.484"
    push $P5004, "alt_nfa__29_1359292302.484"
    push $P5004, "/!"
    push $P5004, "alt_nfa__30_1359292302.494"
    push $P5004, "longname"
    push $P5004, "proto"
    push $P5004, "p6regex"
    push $P5004, "alt_nfa__31_1359292302.599"
    push $P5004, "alt_nfa__32_1359292302.6"
    push $P5004, "alt_nfa__33_1359292302.6"
    push $P5004, "'\""
    push $P5004, "("
    push $P5004, "alt_nfa__34_1359292302.623"
    push $P5004, "alt_nfa__35_1359292302.623"
    push $P5004, "op"
    push $P5004, "const"
    push $P5004, "alt_nfa__36_1359292302.688"
    push $P5004, "alt_nfa__37_1359292302.697"
    push $P5004, "sign"
    push $P5004, "alt_nfa__38_1359292302.706"
    push $P5004, "'"
    push $P5004, "\""
    push $P5004, "$"
    push $P5004, "<"
    push $P5004, utf8:"\x{ab}"
    push $P5004, "OPER"
    push $P5004, ">"
    push $P5004, "}/"
    push $P5004, "var"
    push $P5004, "$@&"
    push $P5004, "alt_nfa__39_1359292303.469"
    push $P5004, "alt_nfa__40_1359292303.491"
    push $P5004, "alt_nfa__41_1359292303.504"
    push $P5004, "zw"
    push $P5004, "?!"
    push $P5004, "alt_nfa__42_1359292303.534"
    push $P5004, "$@"
    push $P5004, "__6MODEL_CORE__"
    push $P5004, "GLOBALish"
    push $P5004, "EXPORT"
    push $P5004, "093654D3D9FDEC05514F10E28C726DFF7AEC24D9-1359292269.586"
    push $P5004, "src\\stage2\\gen\\nqp-mo.pm"
    push $P5004, "NQP::World"
    push $P5004, "NQP::Grammar"
    push $P5004, "alt_nfa__1_1359292279.875"
    push $P5004, "alt_nfa__2_1359292279.903"
    push $P5004, "alt_nfa__3_1359292279.966"
    push $P5004, "alt_nfa__4_1359292279.967"
    push $P5004, "alt_nfa__5_1359292279.985"
    push $P5004, "alt_nfa__6_1359292280.056"
    push $P5004, "alt_nfa__7_1359292280.068"
    push $P5004, "alt_nfa__8_1359292280.102"
    push $P5004, "alt_nfa__9_1359292280.139"
    push $P5004, "shared"
    push $P5004, "match"
    push $P5004, "bstack"
    push $P5004, "cstack"
    push $P5004, "regexsub"
    push $P5004, "restart"
    push $P5004, "NQP::Regex"
    push $P5004, "alt_nfa__1_1359292296.438"
    push $P5004, "alt_nfa__2_1359292296.444"
    push $P5004, "alt_nfa__3_1359292296.467"
    push $P5004, "alt_nfa__4_1359292296.528"
    push $P5004, "alt_nfa__5_1359292296.545"
    push $P5004, "alt_nfa__6_1359292296.598"
    push $P5004, "alt_nfa__7_1359292296.623"
    push $P5004, "alt_nfa__8_1359292296.642"
    push $P5004, "alt_nfa__9_1359292296.708"
    push $P5004, "alt_nfa__10_1359292296.789"
    push $P5004, "alt_nfa__11_1359292296.795"
    push $P5004, "alt_nfa__12_1359292296.873"
    push $P5004, "alt_nfa__13_1359292296.931"
    push $P5004, "alt_nfa__14_1359292296.943"
    push $P5004, "alt_nfa__15_1359292297.009"
    push $P5004, "alt_nfa__16_1359292297.018"
    push $P5004, "alt_nfa__17_1359292297.048"
    push $P5004, "alt_nfa__18_1359292297.055"
    push $P5004, "alt_nfa__19_1359292297.114"
    push $P5004, "alt_nfa__20_1359292297.114"
    push $P5004, "alt_nfa__21_1359292297.114"
    push $P5004, "alt_nfa__23_1359292297.142"
    push $P5004, "alt_nfa__24_1359292297.143"
    push $P5004, "alt_nfa__22_1359292297.121"
    push $P5004, "NQP::Actions"
    push $P5004, "NQP::RegexActions"
    push $P5004, "NQP::Compiler"
    push $P5004, "CompileTimeValue"
    push $P5004, "2A5BD8D2F017911EBF2A5D1B91B7A8E3733D2938-1359292274.238"
    push $P5004, "src\\stage2\\QASTNode.nqp"
    push $P5004, "SpecialArg"
    push $P5004, "Node"
    push $P5004, "Regex"
    push $P5004, "IVal"
    push $P5004, "NVal"
    push $P5004, "SVal"
    push $P5004, "BVal"
    push $P5004, "WVal"
    push $P5004, "Want"
    push $P5004, "Var"
    push $P5004, "VarWithFallback"
    push $P5004, "Op"
    push $P5004, "VM"
    push $P5004, "Stmts"
    push $P5004, "Stmt"
    push $P5004, "Block"
    push $P5004, "Unquote"
    push $P5004, "CompUnit"
    push $P5004, "InlinePlaceholder"
    push $P5004, "Operations"
    push $P5004, "5665CA60D6F425346F9E71080FB30B6ECEBA45D7-1359292284.392"
    push $P5004, "src\\stage2\\QAST.nqp"
    push $P5004, "Compiler"
    push $P5004, "NFA"
    push $P5004, "P6Regex"
    push $P5004, "Grammar"
    push $P5004, "Actions"
    push $P5004, "CommandLine"
    push $P5004, "World"
    push $P5004, "CallResult"
    push $P5004, "Sub"
    push $P5004, "Ops"
    push $P5004, "Label"
    push $P5004, "RegexActions"
    push $P5004, "Ee"
    push $P5004, "01"
    push $P5004, "01234567"
    push $P5004, "0123456789abcdefABCDEF"
    push $P5004, "?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    push $P5004, "dDnNsSwW"
    push $P5004, "bB"
    push $P5004, "eE"
    push $P5004, "fF"
    push $P5004, "hH"
    push $P5004, "rR"
    push $P5004, "tT"
    push $P5004, "vV"
    push $P5004, "oO"
    push $P5004, "xX"
    push $P5004, "cC"
    push $P5004, "&|~"
    .const 'Sub' $P5005 = 'cuid_497_1359292300.247' 
    capture_lex $P5005
    $P5006 = $P5005()
    nqp_deserialize_sc "", cur_sc, $P5004, $P5006, conflicts
    unless conflicts goto if1763_end5767 
    die "Repossession conflicts occurred during deserialization"
  if1763_end5767:
    .const "LexInfo" $P5001 = "cuid_371_1359292300.247"
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    $P5001."set_static_lexpad_value"("GLOBALish", $P5002)
    .const "LexInfo" $P5003 = "cuid_371_1359292300.247"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_371_1359292300.247"
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 0
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_371_1359292300.247"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_371_1359292300.247"
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 1
    $P5001."set_static_lexpad_value"("EXPORT", $P5002)
    .const "LexInfo" $P5003 = "cuid_371_1359292300.247"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_1_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 4
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_2_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 5
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_3_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 6
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_4_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 7
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_5_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 8
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_6_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 9
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_7_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 10
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_8_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 11
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_9_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 12
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_10_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 13
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_11_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 14
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_12_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 15
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_13_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 16
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_14_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 17
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_15_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 18
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_16_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 19
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_17_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 20
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_18_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 21
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_19_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 22
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_20_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 23
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_21_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 24
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_22_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 25
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_23_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 26
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_24_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 27
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_25_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 28
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_26_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 29
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_27_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 30
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_28_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 31
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_29_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 32
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_30_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 33
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_31_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 34
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_374_1359292300.247"
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_374_1359292300.247"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_374_1359292300.247"
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 3
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_374_1359292300.247"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_32_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 36
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_33_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 37
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_34_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 38
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_35_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 39
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_36_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 40
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_37_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 41
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_38_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 42
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_39_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 43
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_40_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 44
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_41_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 45
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_42_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 46
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_43_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 47
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_44_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 48
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_45_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 49
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_46_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 50
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_47_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 51
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_48_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 52
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_49_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 53
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_50_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 54
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_51_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 55
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_52_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 56
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_53_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 57
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_54_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 58
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_55_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 59
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_56_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 60
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_57_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 61
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_58_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 62
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_59_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 63
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_60_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 64
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_61_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 65
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_62_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 66
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_63_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 67
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_64_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 68
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_65_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 69
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_66_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 70
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_67_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 71
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_68_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 72
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_69_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 73
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_70_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 74
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_71_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 75
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_72_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 76
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_73_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 77
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_74_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 78
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_75_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 79
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_76_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 80
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_77_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 81
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_78_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 82
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_79_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 83
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_80_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 84
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_81_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 85
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_82_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 86
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_83_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 87
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_84_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 88
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_85_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 89
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_86_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 90
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_87_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 91
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_88_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 92
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_89_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 93
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_90_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 94
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_91_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 95
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_92_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 96
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_93_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 97
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_94_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 98
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_95_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 99
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_96_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 100
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_97_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 101
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_98_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 102
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_99_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 103
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_100_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 104
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_101_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 105
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_102_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 106
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_103_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 107
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_104_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 108
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_105_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 109
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_106_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 110
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_107_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 111
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_108_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 112
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_109_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 113
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_110_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 114
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_111_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 115
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_112_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 116
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_113_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 117
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_114_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 118
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_115_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 119
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_116_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 120
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_117_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 121
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_118_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 122
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_119_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 123
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_120_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 124
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_121_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 125
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_122_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 126
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_123_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 127
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_124_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 128
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_125_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 129
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_126_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 130
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_127_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 131
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_128_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 132
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_129_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 133
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_130_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 134
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_131_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 135
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_132_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 136
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_133_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 137
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_134_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 138
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_135_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 139
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_136_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 140
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_137_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 141
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_138_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 142
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_139_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 143
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_140_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 144
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_141_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 145
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_142_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 146
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_143_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 147
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_144_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 148
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_145_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 149
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_146_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 150
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_147_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 151
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_148_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 152
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_149_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 153
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_150_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 154
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_151_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 155
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_152_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 156
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_153_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 157
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_154_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 158
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_155_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 159
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_156_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 160
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_157_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 161
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_158_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 162
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_159_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 163
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_160_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 164
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_161_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 165
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_162_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 166
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_163_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 167
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_164_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 168
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_165_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 169
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_166_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 170
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_167_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 171
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_168_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 172
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_169_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 173
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_170_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 174
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_171_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 175
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_172_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 176
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_173_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 177
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_174_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 178
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_175_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 179
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_176_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 180
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_177_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 181
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_178_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 182
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_179_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 183
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_180_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 184
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_181_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 185
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_182_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 186
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_183_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 187
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_184_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 188
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_185_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 189
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_186_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 190
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_187_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 191
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_188_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 192
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_189_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 193
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_190_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 194
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_191_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 195
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_192_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 196
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_193_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 197
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_194_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 198
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_195_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 199
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_196_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 200
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_197_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 201
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_198_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 202
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_199_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 203
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_200_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 204
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_201_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 205
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_202_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 206
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_203_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 207
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_204_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 208
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_205_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 209
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_206_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 210
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_207_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 211
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_208_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 212
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_209_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 213
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_210_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 214
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_211_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 215
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_212_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 216
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_213_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 217
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_214_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 218
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_215_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 219
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_216_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 220
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_217_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 221
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_218_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 222
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_219_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 223
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_220_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 224
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_221_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 225
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_222_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 226
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_223_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 227
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_224_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 228
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_391_1359292300.247"
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 35
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_391_1359292300.247"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_391_1359292300.247"
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 35
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_391_1359292300.247"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_225_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 230
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_226_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 231
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_227_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 232
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_228_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 233
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_229_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 234
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_230_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 235
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_231_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 236
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_232_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 237
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_233_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 238
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_234_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 239
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_235_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 240
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_236_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 241
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_237_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 242
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_238_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 243
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_239_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 244
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_240_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 245
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_241_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 246
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_242_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 247
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_243_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 248
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_244_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 249
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_410_1359292300.247"
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 229
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_410_1359292300.247"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_410_1359292300.247"
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 229
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_410_1359292300.247"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_245_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 251
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_246_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 252
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_247_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 253
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_248_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 254
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_249_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 255
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_250_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 256
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_251_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 257
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_252_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 258
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_253_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 259
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_254_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 260
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_255_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 261
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_256_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 262
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_257_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 263
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_258_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 264
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_259_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 265
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_260_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 266
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_261_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 267
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_262_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 268
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_263_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 269
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_264_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 270
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_265_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 271
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_266_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 272
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_267_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 273
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_268_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 274
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_269_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 275
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_270_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 276
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_271_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 277
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_272_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 278
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_273_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 279
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_274_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 280
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_275_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 281
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_276_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 282
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_277_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 283
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_278_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 284
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_279_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 285
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_280_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 286
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_281_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 287
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_282_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 288
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_283_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 289
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_284_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 290
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_285_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 291
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_286_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 292
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_287_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 293
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_288_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 294
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_289_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 295
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_290_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 296
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_291_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 297
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_292_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 298
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_293_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 299
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_294_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 300
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_295_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 301
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_296_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 302
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_297_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 303
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_298_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 304
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_299_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 305
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_300_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 306
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_301_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 307
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_302_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 308
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_303_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 309
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_304_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 310
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_305_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 311
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_306_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 312
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_307_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 313
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_308_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 314
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_309_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 315
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_310_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 316
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_311_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 317
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_312_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 318
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_313_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 319
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_314_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 320
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_315_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 321
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_316_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 322
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_317_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 323
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_318_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 324
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_319_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 325
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_320_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 326
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_321_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 327
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_322_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 328
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_323_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 329
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_324_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 330
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_325_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 331
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_326_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 332
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_327_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 333
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_328_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 334
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_329_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 335
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_330_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 336
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_331_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 337
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_332_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 338
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_333_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 339
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_334_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 340
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_335_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 341
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_336_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 342
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_337_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 343
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_338_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 344
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_339_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 345
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_340_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 346
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_341_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 347
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_342_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 348
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_343_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 349
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_344_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 350
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_345_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 351
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_346_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 352
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_347_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 353
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_348_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 354
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_349_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 355
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_350_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 356
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_351_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 357
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_352_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 358
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_353_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 359
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_354_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 360
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_355_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 361
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_356_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 362
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_420_1359292300.247"
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 250
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_420_1359292300.247"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_420_1359292300.247"
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 250
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_420_1359292300.247"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_357_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 364
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_358_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 365
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_359_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 366
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_360_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 367
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_361_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 368
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_362_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 369
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_363_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 370
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_364_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 371
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_365_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 372
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_366_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 373
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_367_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 374
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_368_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 375
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_369_1359292300.247" 
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 376
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_492_1359292300.247"
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 363
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_492_1359292300.247"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_492_1359292300.247"
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 363
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_492_1359292300.247"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_496_1359292300.247"
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 377
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_496_1359292300.247"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_496_1359292300.247"
    nqp_get_sc_object $P5002, "83B4E965990BD1F6C01E57F9A0BC7938611983BF-1359292300.274", 377
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_496_1359292300.247"
    $P5004 = $P5003."finish_static_lexpad"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_497_1359292300.247") :anon :lex :outer("cuid_498_1359292300.247")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    .const 'Sub' $P5002 = "cuid_1_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_2_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_3_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_4_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_5_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_6_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_7_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_8_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_9_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_10_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_11_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_12_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_13_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_14_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_15_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_16_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_17_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_18_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_19_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_20_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_21_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_22_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_23_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_24_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_25_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_26_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_27_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_28_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_29_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_30_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_31_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_32_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_33_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_34_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_35_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_36_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_37_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_38_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_39_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_40_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_41_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_42_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_43_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_44_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_45_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_46_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_47_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_48_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_49_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_50_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_51_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_52_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_53_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_54_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_55_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_56_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_57_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_58_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_59_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_60_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_61_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_62_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_63_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_64_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_65_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_66_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_67_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_68_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_69_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_70_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_71_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_72_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_73_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_74_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_75_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_76_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_77_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_78_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_79_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_80_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_81_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_82_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_83_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_84_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_85_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_86_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_87_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_88_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_89_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_90_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_91_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_92_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_93_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_94_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_95_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_96_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_97_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_98_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_99_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_100_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_101_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_102_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_103_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_104_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_105_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_106_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_107_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_108_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_109_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_110_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_111_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_112_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_113_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_114_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_115_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_116_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_117_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_118_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_119_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_120_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_121_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_122_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_123_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_124_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_125_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_126_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_127_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_128_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_129_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_130_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_131_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_132_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_133_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_134_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_135_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_136_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_137_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_138_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_139_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_140_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_141_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_142_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_143_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_144_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_145_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_146_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_147_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_148_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_149_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_150_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_151_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_152_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_153_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_154_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_155_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_156_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_157_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_158_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_159_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_160_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_161_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_162_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_163_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_164_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_165_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_166_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_167_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_168_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_169_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_170_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_171_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_172_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_173_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_174_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_175_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_176_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_177_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_178_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_179_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_180_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_181_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_182_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_183_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_184_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_185_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_186_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_187_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_188_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_189_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_190_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_191_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_192_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_193_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_194_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_195_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_196_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_197_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_198_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_199_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_200_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_201_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_202_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_203_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_204_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_205_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_206_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_207_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_208_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_209_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_210_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_211_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_212_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_213_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_214_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_215_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_216_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_217_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_218_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_219_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_220_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_221_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_222_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_223_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_224_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_225_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_226_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_227_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_228_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_229_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_230_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_231_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_232_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_233_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_234_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_235_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_236_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_237_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_238_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_239_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_240_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_241_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_242_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_243_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_244_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_245_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_246_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_247_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_248_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_249_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_250_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_251_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_252_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_253_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_254_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_255_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_256_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_257_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_258_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_259_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_260_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_261_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_262_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_263_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_264_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_265_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_266_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_267_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_268_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_269_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_270_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_271_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_272_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_273_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_274_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_275_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_276_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_277_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_278_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_279_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_280_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_281_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_282_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_283_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_284_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_285_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_286_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_287_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_288_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_289_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_290_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_291_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_292_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_293_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_294_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_295_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_296_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_297_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_298_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_299_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_300_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_301_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_302_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_303_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_304_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_305_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_306_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_307_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_308_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_309_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_310_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_311_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_312_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_313_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_314_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_315_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_316_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_317_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_318_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_319_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_320_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_321_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_322_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_323_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_324_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_325_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_326_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_327_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_328_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_329_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_330_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_331_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_332_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_333_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_334_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_335_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_336_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_337_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_338_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_339_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_340_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_341_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_342_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_343_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_344_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_345_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_346_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_347_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_348_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_349_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_350_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_351_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_352_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_353_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_354_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_355_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_356_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_357_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_358_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_359_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_360_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_361_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_362_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_363_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_364_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_365_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_366_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_367_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_368_1359292300.247" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_369_1359292300.247" 
    push $P5001, $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_499_1359292300.247") :load
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = "cuid_371_1359292300.247" 
    $P5002 = $P5001()
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_500_1359292300.247") :main
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc ARGS :slurpy 
    .const 'Sub' $P5001 = "cuid_371_1359292300.247" 
    $P5002 = $P5001(ARGS :flat)
    .return ($P5002) 
.end