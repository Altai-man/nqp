.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'
.include 'libpaths.pasm'
.loadlib "nqp_group"
.loadlib "nqp_ops"
.loadlib "nqp_bigint_ops"
.loadlib "trans_ops"
.loadlib "io_ops"
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_369_1360256386.79") :anon :lex
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc _lex_param_0 :slurpy 
    .const 'Sub' $P5064 = 'cuid_368_1360256386.79' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_370_1360256386.79' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_372_1360256386.79' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_389_1360256386.79' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_408_1360256386.79' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_409_1360256386.79' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_410_1360256386.79' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_411_1360256386.79' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_412_1360256386.79' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_413_1360256386.79' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_414_1360256386.79' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_415_1360256386.79' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_416_1360256386.79' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_418_1360256386.79' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_491_1360256386.79' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_495_1360256386.79' 
    capture_lex $P5064 
    .lex "GLOBALish", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "EXPORT", $P103 
    .lex "$ops", $P104 
    .lex "$nqpcomp", $P105 
    .lex "@clo", $P106 
    .lex "&MAIN", $P107 
    .lex "&hll-config", $P108 
    .lex "@ARGS", _lex_param_0 
    .local pmc ctxsave 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P104, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P105, $P5002
    new $P5003, 'ResizablePMCArray'
    set $P106, $P5003
    .const 'Sub' $P5004 = 'cuid_368_1360256386.79' 
    capture_lex $P5004
    set $P107, $P5004
    .const 'Sub' $P5005 = 'cuid_370_1360256386.79' 
    capture_lex $P5005
    set $P108, $P5005
    find_dynamic_lex $P5006, "$*CTXSAVE"
    set ctxsave, $P5006
    isnull $I5001, ctxsave
    if $I5001 goto unless10_end11 
    can $I5002, ctxsave, "ctxsave"
    box $P5009, $I5002
    set $P5008, $P5009
    unless $I5002 goto if11_end13 
    $P5007 = ctxsave."ctxsave"()
    set $P5008, $P5007
  if11_end13:
  unless10_end11:
.annotate 'line', 1
    .const 'Sub' $P5010 = 'cuid_372_1360256386.79' 
    capture_lex $P5010
    $P5011 = $P5010()
    .const 'Sub' $P5012 = 'cuid_389_1360256386.79' 
    capture_lex $P5012
    $P5013 = $P5012()
    .const 'Sub' $P5014 = 'cuid_408_1360256386.79' 
    capture_lex $P5014
    $P5015 = $P5014()
.annotate 'line', 1442
    nqp_get_sc_object $P5019, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Compiler"]
    unless_null $P5016, fallback3784
    nqp_get_sc_object $P5020, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5016, $P5020
  fallback3784:
    $P5021 = $P5016."operations"()
    set $P104, $P5021
.annotate 'line', 1444
    $P104."add_hll_pirop_mapping"("nqp", "nqpmultidispatch", "multi_dispatch_over_lexical_candidates", "P")
.annotate 'line', 1446
    .const 'Sub' $P5023 = 'cuid_409_1360256386.79' 
    capture_lex $P5023
    newclosure $P5022, $P5023
    $P104."add_hll_op"("nqp", "preinc", $P5022)
.annotate 'line', 1461
    .const 'Sub' $P5025 = 'cuid_410_1360256386.79' 
    capture_lex $P5025
    newclosure $P5024, $P5025
    $P104."add_hll_op"("nqp", "predec", $P5024)
.annotate 'line', 1476
    .const 'Sub' $P5027 = 'cuid_411_1360256386.79' 
    capture_lex $P5027
    newclosure $P5026, $P5027
    $P104."add_hll_op"("nqp", "postinc", $P5026)
.annotate 'line', 1500
    .const 'Sub' $P5029 = 'cuid_412_1360256386.79' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    $P104."add_hll_op"("nqp", "postdec", $P5028)
.annotate 'line', 1524
    .const 'Sub' $P5031 = 'cuid_413_1360256386.79' 
    capture_lex $P5031
    newclosure $P5030, $P5031
    $P104."add_hll_op"("nqp", "numify", $P5030)
.annotate 'line', 1528
    .const 'Sub' $P5033 = 'cuid_414_1360256386.79' 
    capture_lex $P5033
    newclosure $P5032, $P5033
    $P104."add_hll_op"("nqp", "stringify", $P5032)
.annotate 'line', 1532
    .const 'Sub' $P5035 = 'cuid_415_1360256386.79' 
    capture_lex $P5035
    newclosure $P5034, $P5035
    $P104."add_hll_op"("nqp", "eqaddr", $P5034)
.annotate 'line', 1540
    .const 'Sub' $P5037 = 'cuid_416_1360256386.79' 
    capture_lex $P5037
    newclosure $P5036, $P5037
    $P104."add_hll_op"("nqp", "falsey", $P5036)
    .const 'Sub' $P5038 = 'cuid_418_1360256386.79' 
    capture_lex $P5038
    $P5039 = $P5038()
    .const 'Sub' $P5040 = 'cuid_491_1360256386.79' 
    capture_lex $P5040
    $P5041 = $P5040()
    .const 'Sub' $P5042 = 'cuid_495_1360256386.79' 
    capture_lex $P5042
    $P5043 = $P5042()
.annotate 'line', 3296
    nqp_get_sc_object $P5047, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5046, $P5047, "NQP"
    get_who $P5045, $P5046
    set $P5044, $P5045["Compiler"]
    unless_null $P5044, fallback5822
    nqp_get_sc_object $P5048, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5044, $P5048
  fallback5822:
    $P5049 = $P5044."new"()
    set $P105, $P5049
.annotate 'line', 3297
    $P105."language"("nqp")
.annotate 'line', 3298
    nqp_get_sc_object $P5053, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5052, $P5053, "NQP"
    get_who $P5051, $P5052
    set $P5050, $P5051["Grammar"]
    unless_null $P5050, fallback5823
    nqp_get_sc_object $P5054, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5050, $P5054
  fallback5823:
    $P105."parsegrammar"($P5050)
.annotate 'line', 3299
    nqp_get_sc_object $P5058, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5057, $P5058, "NQP"
    get_who $P5056, $P5057
    set $P5055, $P5056["Actions"]
    unless_null $P5055, fallback5824
    nqp_get_sc_object $P5059, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5055, $P5059
  fallback5824:
    $P105."parseactions"($P5055)
.annotate 'line', 3300
    $P5060 = $P105."config"()
    "&hll-config"($P5060)
.annotate 'line', 3303
    $P5061 = $P105."commandline_options"()
    set $P106, $P5061
.annotate 'line', 3304
    $P106."push"("parsetrace")
.annotate 'line', 3305
    $P106."push"("setting=s")
.annotate 'line', 3306
    $P106."push"("setting-path=s")
.annotate 'line', 3307
    $P106."push"("module-path=s")
.annotate 'line', 3308
    $P106."push"("vmlibs=s")
.annotate 'line', 3309
    $P106."push"("no-regex-lib")
.annotate 'line', 3310
    $P106."push"("old-regex-lib")
.annotate 'line', 3311
    $P106."push"("dynext=s")
.annotate 'line', 3312
    $P106."push"("stable-sc")
    unless _lex_param_0 goto if1767_end5826 
    .const 'Sub' $P5062 = "cuid_368_1360256386.79" 
    $P5063 = $P5062(_lex_param_0 :flat)
  if1767_end5826:
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "MAIN" :subid("cuid_368_1360256386.79") :anon :lex :outer("cuid_369_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3314
    .param pmc _lex_param_0 
    .lex "@ARGS", _lex_param_0 
.annotate 'line', 3316
    find_lex $P5001, "$nqpcomp"
    $P5001."command_line"(_lex_param_0, "utf8" :named("encoding"), "ascii iso-8859-1" :named("transcode"))
.annotate 'line', 3319
    find_lex $P5002, "$nqpcomp"
    $P5003 = $P5002."nqpevent"()
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "hll-config" :subid("cuid_370_1360256386.79") :anon :lex :outer("cuid_369_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3323
    .param pmc _lex_param_0 
    .lex "$config", _lex_param_0 
    box $P5001, "2013.01-106-gadbccba"
    set _lex_param_0["version"], $P5001
    box $P5002, "2013-02-07T16:59:46Z"
    set _lex_param_0["build-date"], $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_372_1360256386.79") :anon :lex :outer("cuid_369_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 8
    .const 'Sub' $P5031 = 'cuid_1_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_2_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_3_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_4_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_5_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_6_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_7_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_8_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_9_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_10_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_11_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_15_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_16_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_17_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_18_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_19_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_20_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_21_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_22_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_23_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_24_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_25_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_26_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_27_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_28_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_29_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_30_1360256386.79' 
    capture_lex $P5031 
    .const 'Sub' $P5031 = 'cuid_31_1360256386.79' 
    capture_lex $P5031 
    .lex "$loader", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "$?CLASS", $P103 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_1_1360256386.79' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_2_1360256386.79' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_3_1360256386.79' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_4_1360256386.79' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_5_1360256386.79' 
    capture_lex $P5006
    get_hll_global $P5007, "ModuleLoader"
    set $P101, $P5007
    .const 'Sub' $P5008 = 'cuid_6_1360256386.79' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_7_1360256386.79' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_8_1360256386.79' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_9_1360256386.79' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_10_1360256386.79' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_11_1360256386.79' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_15_1360256386.79' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_16_1360256386.79' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_17_1360256386.79' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_18_1360256386.79' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_19_1360256386.79' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_20_1360256386.79' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_21_1360256386.79' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_22_1360256386.79' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_23_1360256386.79' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_24_1360256386.79' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_25_1360256386.79' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_26_1360256386.79' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_27_1360256386.79' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_28_1360256386.79' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_29_1360256386.79' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_30_1360256386.79' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_31_1360256386.79' 
    capture_lex $P5030
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "BUILD" :subid("cuid_1_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 30
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :slurpy :named 
    .const 'Sub' $P5032 = 'cuid_371_1360256386.79' 
    capture_lex $P5032 
    .lex "self", _lex_param_0 
    .lex "%opts", _lex_param_1 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    new $P5003, 'ResizablePMCArray'
    repr_bind_attr_obj $P5001, $P5002, "@!BLOCKS", $P5003
    nqp_decontainerize $P5004, _lex_param_0
    nqp_get_sc_object $P5005, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    new $P5006, 'Hash'
    repr_bind_attr_obj $P5004, $P5005, "%!code_objects_to_fix_up", $P5006
    nqp_decontainerize $P5007, _lex_param_0
    nqp_get_sc_object $P5008, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    new $P5009, 'Hash'
    repr_bind_attr_obj $P5007, $P5008, "%!code_object_types", $P5009
    nqp_decontainerize $P5010, _lex_param_0
    nqp_get_sc_object $P5011, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    new $P5012, 'Hash'
    repr_bind_attr_obj $P5010, $P5011, "%!code_object_fixup_list", $P5012
    nqp_decontainerize $P5013, _lex_param_0
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    new $P5015, 'Hash'
    repr_bind_attr_obj $P5013, $P5014, "%!code_stub_sc_idx", $P5015
    find_dynamic_lex $P5018, "%*COMPILING"
    unless_null $P5018, fallback16
    nqp_get_sc_object $P5021, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["%COMPILING"]
    unless_null $P5019, fallback17
    nqp_get_sc_object $P5023, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5022, $P5023
    new $P5024, 'Hash'
    set $P5022["%COMPILING"], $P5024
    set $P5019, $P5024
  fallback17:
    unless_null $P5019, vivi_1318
    die "Contextual %*COMPILING not found"
    box $P5025, "Contextual %*COMPILING not found"
    set $P5019, $P5025
  vivi_1318:
    set $P5018, $P5019
  fallback16:
    set $P5017, $P5018["%?OPTIONS"]
    unless_null $P5017, fallback19
    nqp_get_sc_object $P5026, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5017, $P5026
  fallback19:
    set $P5016, $P5017["dynext"]
    unless_null $P5016, fallback20
    nqp_get_sc_object $P5027, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5016, $P5027
  fallback20:
    defined $I5001, $P5016
    box $P5031, $I5001
    set $P5030, $P5031
    unless $I5001 goto if12_end15 
    .const 'Sub' $P5028 = 'cuid_371_1360256386.79' 
    capture_lex $P5028
    $P5029 = $P5028()
    set $P5030, $P5029
  if12_end15:
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_371_1360256386.79") :anon :lex :outer("cuid_1_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 37
    .lex "$dynext_path", $P101 
    .lex "@dynext_paths", $P102 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    find_dynamic_lex $P5005, "%*COMPILING"
    unless_null $P5005, fallback21
    nqp_get_sc_object $P5008, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["%COMPILING"]
    unless_null $P5006, fallback22
    nqp_get_sc_object $P5010, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5009, $P5010
    new $P5011, 'Hash'
    set $P5009["%COMPILING"], $P5011
    set $P5006, $P5011
  fallback22:
    unless_null $P5006, vivi_1423
    die "Contextual %*COMPILING not found"
    box $P5012, "Contextual %*COMPILING not found"
    set $P5006, $P5012
  vivi_1423:
    set $P5005, $P5006
  fallback21:
    set $P5004, $P5005["%?OPTIONS"]
    unless_null $P5004, fallback24
    nqp_get_sc_object $P5013, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5013
  fallback24:
    set $P5003, $P5004["dynext"]
    unless_null $P5003, fallback25
    nqp_get_sc_object $P5014, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5014
  fallback25:
    set $P101, $P5003
    getinterp $P5017
    set $P5016, $P5017[.IGLOBALS_LIB_PATHS]
    unless_null $P5016, fallback26
    nqp_get_sc_object $P5018, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5016, $P5018
  fallback26:
    set $P5015, $P5016[.PARROT_LIB_PATH_DYNEXT]
    unless_null $P5015, fallback27
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5015, $P5019
  fallback27:
    set $P102, $P5015
.annotate 'line', 41
    $P5020 = $P102."push"($P101)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "push_lexpad" :subid("cuid_2_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 46
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$pad", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 48
    nqp_get_sc_object $P5005, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Block"]
    unless_null $P5002, fallback28
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5006
  fallback28:
    nqp_get_sc_object $P5010, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback29
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5011
  fallback29:
    $P5012 = $P5007."new"()
    $P5013 = $P5002."new"($P5012, _lex_param_1 :named("node"))
    set $P101, $P5013
    nqp_decontainerize $P5014, _lex_param_0
    nqp_get_sc_object $P5015, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5016, $P5014, $P5015, "@!BLOCKS"
    set $N5001, $P5016
    unless $N5001 goto if15_end31 
.annotate 'line', 49
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    nqp_decontainerize $P5021, _lex_param_0
    nqp_get_sc_object $P5022, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5023, $P5021, $P5022, "@!BLOCKS"
    set $N5003, $P5023
    set $N5004, 1
    sub $N5002, $N5003, $N5004
    set $I5001, $N5002
    set $P5017, $P5020[$I5001]
    unless_null $P5017, fallback32
    nqp_get_sc_object $P5024, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5017, $P5024
  fallback32:
    set $P101["outer"], $P5017
  if15_end31:
    nqp_decontainerize $P5025, _lex_param_0
    nqp_get_sc_object $P5026, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5027, $P5025, $P5026, "@!BLOCKS"
    nqp_decontainerize $P5028, _lex_param_0
    nqp_get_sc_object $P5029, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5030, $P5028, $P5029, "@!BLOCKS"
    set $N5005, $P5030
    set $I5002, $N5005
    set $P5027[$I5002], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pop_lexpad" :subid("cuid_3_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 57
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 58
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5003, $P5001, $P5002, "@!BLOCKS"
    $P5004 = $P5003."pop"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "cur_lexpad" :subid("cuid_4_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 62
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5007, $P5005, $P5006, "@!BLOCKS"
    set $N5002, $P5007
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    set $I5001, $N5001
    set $P5001, $P5004[$I5001]
    unless_null $P5001, fallback33
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5008
  fallback33:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "get_legacy_block_list" :subid("cuid_5_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 67
    .param pmc _lex_param_0 
    .lex "@x", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5005, $P5003, $P5004, "@!BLOCKS"
    repr_clone $P5002, $P5005
    set $P101, $P5002
.annotate 'line', 69
    $P101."reverse"()
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "load_setting" :subid("cuid_6_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 80
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5005 = 'cuid_373_1360256386.79' 
    capture_lex $P5005 
    .lex "self", _lex_param_0 
    .lex "$setting_name", _lex_param_1 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_34
    .lex "RETURN", $P101
    set $S5001, _lex_param_1
    isne $I5001, $S5001, "NULL"
    box $P5004, $I5001
    set $P5003, $P5004
    unless $I5001 goto if16_end37 
    .const 'Sub' $P5001 = 'cuid_373_1360256386.79' 
    capture_lex $P5001
    $P5002 = $P5001()
    set $P5003, $P5002
  if16_end37:
    goto lexotic_35
  lexotic_34:
    .get_results ($P5003)
  lexotic_35:
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_373_1360256386.79") :anon :lex :outer("cuid_6_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 82
    .lex "$setting", $P101 
    .lex "$set_outer", $P102 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    find_dynamic_lex $P5004, "%*COMPILING"
    unless_null $P5004, fallback38
    nqp_get_sc_object $P5007, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["%COMPILING"]
    unless_null $P5005, fallback39
    nqp_get_sc_object $P5009, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%COMPILING"], $P5010
    set $P5005, $P5010
  fallback39:
    unless_null $P5005, vivi_1740
    die "Contextual %*COMPILING not found"
    box $P5011, "Contextual %*COMPILING not found"
    set $P5005, $P5011
  vivi_1740:
    set $P5004, $P5005
  fallback38:
    set $P5003, $P5004["%?OPTIONS"]
    unless_null $P5003, fallback41
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5012
  fallback41:
.annotate 'line', 87
    find_lex $P5013, "$loader"
    find_lex $P5014, "$setting_name"
    $P5015 = $P5013."load_setting"($P5014)
    set $P5003["outer_ctx"], $P5015
    set $P101, $P5015
.annotate 'line', 91
    nqp_get_sc_object $P5019, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["VM"]
    unless_null $P5016, fallback42
    nqp_get_sc_object $P5020, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5016, $P5020
  fallback42:
.annotate 'line', 92
    nqp_get_sc_object $P5024, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback43
    nqp_get_sc_object $P5025, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5021, $P5025
  fallback43:
.annotate 'line', 94
    nqp_get_sc_object $P5029, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["BVal"]
    unless_null $P5026, fallback44
    nqp_get_sc_object $P5030, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5026, $P5030
  fallback44:
    find_dynamic_lex $P5031, "$*UNIT"
    unless_null $P5031, fallback45
    nqp_get_sc_object $P5034, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$UNIT"]
    unless_null $P5032, fallback46
    nqp_get_sc_object $P5035, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5032, $P5035
  fallback46:
    unless_null $P5032, vivi_1847
    die "Contextual $*UNIT not found"
    box $P5036, "Contextual $*UNIT not found"
    set $P5032, $P5036
  vivi_1847:
    set $P5031, $P5032
  fallback45:
    $P5037 = $P5026."new"($P5031 :named("value"))
.annotate 'line', 95
    nqp_get_sc_object $P5041, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Op"]
    unless_null $P5038, fallback48
    nqp_get_sc_object $P5042, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5038, $P5042
  fallback48:
.annotate 'line', 97
    nqp_get_sc_object $P5046, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Op"]
    unless_null $P5043, fallback49
    nqp_get_sc_object $P5047, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5043, $P5047
  fallback49:
.annotate 'line', 99
    nqp_get_sc_object $P5051, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["SVal"]
    unless_null $P5048, fallback50
    nqp_get_sc_object $P5052, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5048, $P5052
  fallback50:
    $P5053 = $P5048."new"("ModuleLoader" :named("value"))
    $P5054 = $P5043."new"($P5053, "getcurhllsym" :named("op"))
.annotate 'line', 101
    nqp_get_sc_object $P5058, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5057, $P5058, "QAST"
    get_who $P5056, $P5057
    set $P5055, $P5056["SVal"]
    unless_null $P5055, fallback51
    nqp_get_sc_object $P5059, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5055, $P5059
  fallback51:
    find_lex $P5060, "$setting_name"
    $P5061 = $P5055."new"($P5060 :named("value"))
    $P5062 = $P5038."new"($P5054, $P5061, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5063 = $P5021."new"($P5037, $P5062, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
.annotate 'line', 103
    nqp_get_sc_object $P5067, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["Op"]
    unless_null $P5064, fallback52
    nqp_get_sc_object $P5068, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5064, $P5068
  fallback52:
.annotate 'line', 105
    nqp_get_sc_object $P5072, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5071, $P5072, "QAST"
    get_who $P5070, $P5071
    set $P5069, $P5070["BVal"]
    unless_null $P5069, fallback53
    nqp_get_sc_object $P5073, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5069, $P5073
  fallback53:
    find_dynamic_lex $P5074, "$*UNIT"
    unless_null $P5074, fallback54
    nqp_get_sc_object $P5077, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["$UNIT"]
    unless_null $P5075, fallback55
    nqp_get_sc_object $P5078, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5075, $P5078
  fallback55:
    unless_null $P5075, vivi_1956
    die "Contextual $*UNIT not found"
    box $P5079, "Contextual $*UNIT not found"
    set $P5075, $P5079
  vivi_1956:
    set $P5074, $P5075
  fallback54:
    $P5080 = $P5069."new"($P5074 :named("value"))
.annotate 'line', 106
    nqp_get_sc_object $P5084, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5083, $P5084, "QAST"
    get_who $P5082, $P5083
    set $P5081, $P5082["Op"]
    unless_null $P5081, fallback57
    nqp_get_sc_object $P5085, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5081, $P5085
  fallback57:
.annotate 'line', 108
    nqp_get_sc_object $P5089, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5088, $P5089, "QAST"
    get_who $P5087, $P5088
    set $P5086, $P5087["Op"]
    unless_null $P5086, fallback58
    nqp_get_sc_object $P5090, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5086, $P5090
  fallback58:
.annotate 'line', 110
    nqp_get_sc_object $P5094, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5093, $P5094, "QAST"
    get_who $P5092, $P5093
    set $P5091, $P5092["SVal"]
    unless_null $P5091, fallback59
    nqp_get_sc_object $P5095, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5091, $P5095
  fallback59:
    $P5096 = $P5091."new"("ModuleLoader" :named("value"))
    $P5097 = $P5086."new"($P5096, "getcurhllsym" :named("op"))
.annotate 'line', 112
    nqp_get_sc_object $P5101, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5100, $P5101, "QAST"
    get_who $P5099, $P5100
    set $P5098, $P5099["SVal"]
    unless_null $P5098, fallback60
    nqp_get_sc_object $P5102, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5098, $P5102
  fallback60:
    find_lex $P5103, "$setting_name"
    $P5104 = $P5098."new"($P5103 :named("value"))
    $P5105 = $P5081."new"($P5097, $P5104, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5106 = $P5064."new"($P5080, $P5105, "forceouterctx" :named("op"))
    $P5107 = $P5016."new"($P5063 :named("parrot"), $P5106 :named("jvm"))
    set $P102, $P5107
.annotate 'line', 114
    find_lex $P5109, "self"
    nqp_decontainerize $P5108, $P5109
    $P5110 = $P5108."is_precompilation_mode"()
    unless $P5110 goto if20_else61 
.annotate 'line', 115
    find_lex $P5112, "self"
    nqp_decontainerize $P5111, $P5112
    nqp_get_sc_object $P5116, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5115, $P5116, "QAST"
    get_who $P5114, $P5115
    set $P5113, $P5114["Stmts"]
    unless_null $P5113, fallback63
    nqp_get_sc_object $P5117, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5113, $P5117
  fallback63:
.annotate 'line', 116
    nqp_get_sc_object $P5121, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5120, $P5121, "QAST"
    get_who $P5119, $P5120
    set $P5118, $P5119["Op"]
    unless_null $P5118, fallback64
    nqp_get_sc_object $P5122, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5118, $P5122
  fallback64:
.annotate 'line', 118
    nqp_get_sc_object $P5126, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5125, $P5126, "QAST"
    get_who $P5124, $P5125
    set $P5123, $P5124["VM"]
    unless_null $P5123, fallback65
    nqp_get_sc_object $P5127, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5123, $P5127
  fallback65:
.annotate 'line', 119
    nqp_get_sc_object $P5131, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5130, $P5131, "QAST"
    get_who $P5129, $P5130
    set $P5128, $P5129["SVal"]
    unless_null $P5128, fallback66
    nqp_get_sc_object $P5132, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5128, $P5132
  fallback66:
    $P5133 = $P5128."new"("ModuleLoader.pbc" :named("value"))
.annotate 'line', 120
    nqp_get_sc_object $P5137, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5136, $P5137, "QAST"
    get_who $P5135, $P5136
    set $P5134, $P5135["SVal"]
    unless_null $P5134, fallback67
    nqp_get_sc_object $P5138, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5134, $P5138
  fallback67:
    $P5139 = $P5134."new"("ModuleLoader.class" :named("value"))
    $P5140 = $P5123."new"($P5133 :named("parrot"), $P5139 :named("jvm"))
    $P5141 = $P5118."new"($P5140, "loadbytecode" :named("op"))
    $P5142 = $P5113."new"($P5141, $P102)
    $P5143 = $P5111."add_load_dependency_task"($P5142 :named("deserialize_past"))
    goto if20_end62
  if20_else61:
.annotate 'line', 125
.annotate 'line', 126
    find_lex $P5145, "self"
    nqp_decontainerize $P5144, $P5145
    $P5146 = $P5144."add_fixup_task"($P102 :named("fixup_past"))
  if20_end62:
    getattribute $P5148, $P101, "lex_pad"
    find_lex $P5147, "RETURN"
    $P5149 = $P5147($P5148)
    .return ($P5149) 
.end
.HLL "nqp"
.namespace []
.sub "load_module" :subid("cuid_7_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 135
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$module_name", _lex_param_1 
    .lex "$cur_GLOBALish", _lex_param_2 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_68
    .lex "RETURN", $P102
.annotate 'line', 137
    find_lex $P5002, "$loader"
    $P5003 = $P5002."load_module"(_lex_param_1, _lex_param_2)
    set $P101, $P5003
.annotate 'line', 140
    nqp_decontainerize $P5004, _lex_param_0
    $P5005 = $P5004."is_precompilation_mode"()
    unless $P5005 goto if21_end71 
.annotate 'line', 141
    nqp_decontainerize $P5006, _lex_param_0
    nqp_get_sc_object $P5010, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback72
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5011
  fallback72:
.annotate 'line', 142
    nqp_get_sc_object $P5015, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback73
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5012, $P5016
  fallback73:
.annotate 'line', 144
    nqp_get_sc_object $P5020, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["VM"]
    unless_null $P5017, fallback74
    nqp_get_sc_object $P5021, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5017, $P5021
  fallback74:
.annotate 'line', 145
    nqp_get_sc_object $P5025, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["SVal"]
    unless_null $P5022, fallback75
    nqp_get_sc_object $P5026, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5022, $P5026
  fallback75:
    $P5027 = $P5022."new"("ModuleLoader.pbc" :named("value"))
.annotate 'line', 146
    nqp_get_sc_object $P5031, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["SVal"]
    unless_null $P5028, fallback76
    nqp_get_sc_object $P5032, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5028, $P5032
  fallback76:
    $P5033 = $P5028."new"("ModuleLoader.class" :named("value"))
    $P5034 = $P5017."new"($P5027 :named("parrot"), $P5033 :named("jvm"))
    $P5035 = $P5012."new"($P5034, "loadbytecode" :named("op"))
.annotate 'line', 148
    nqp_get_sc_object $P5039, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback77
    nqp_get_sc_object $P5040, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5036, $P5040
  fallback77:
.annotate 'line', 150
    nqp_get_sc_object $P5044, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Op"]
    unless_null $P5041, fallback78
    nqp_get_sc_object $P5045, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5041, $P5045
  fallback78:
.annotate 'line', 152
    nqp_get_sc_object $P5049, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["SVal"]
    unless_null $P5046, fallback79
    nqp_get_sc_object $P5050, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5046, $P5050
  fallback79:
    $P5051 = $P5046."new"("ModuleLoader" :named("value"))
    $P5052 = $P5041."new"($P5051, "getcurhllsym" :named("op"))
.annotate 'line', 154
    nqp_get_sc_object $P5056, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["SVal"]
    unless_null $P5053, fallback80
    nqp_get_sc_object $P5057, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5053, $P5057
  fallback80:
    $P5058 = $P5053."new"(_lex_param_1 :named("value"))
    $P5059 = $P5036."new"($P5052, $P5058, "callmethod" :named("op"), "load_module" :named("name"))
    $P5060 = $P5007."new"($P5035, $P5059)
    $P5061 = $P5006."add_load_dependency_task"($P5060 :named("deserialize_past"))
  if21_end71:
    getattribute $P5063, $P101, "lex_pad"
    find_lex $P5062, "RETURN"
    $P5064 = $P5062($P5063)
    goto lexotic_69
  lexotic_68:
    .get_results ($P5064)
  lexotic_69:
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "import" :subid("cuid_8_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 161
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5009 = 'cuid_374_1360256386.79' 
    capture_lex $P5009 
    .lex "$target", $P101 
    .lex "self", _lex_param_0 
    .lex "$stash", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 162
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = $P5002."cur_lexpad"()
    set $P101, $P5003
    set $P5004, _lex_param_1
    iter $P5006, _lex_param_1
  for_next81:
    unless $P5006, for_done83
    shift $P5008, $P5006
  for_redo82:
    .const 'Sub' $P5007 = 'cuid_374_1360256386.79' 
    capture_lex $P5007
    $P5004 = $P5007($P5008)
    goto for_next81
  for_done83:
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_374_1360256386.79") :anon :lex :outer("cuid_8_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 163
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 164
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    find_lex $P5003, "$target"
    $P5004 = _lex_param_0."key"()
    $P5005 = _lex_param_0."value"()
    $P5006 = $P5001."install_lexical_symbol"($P5003, $P5004, $P5005)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_symbol" :subid("cuid_9_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 170
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5012 = 'cuid_375_1360256386.79' 
    capture_lex $P5012 
    .lex "$name", $P101 
    .lex "$target", $P102 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "@sym", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    repr_clone $P5003, _lex_param_2
    set _lex_param_2, $P5003
.annotate 'line', 172
    $P5004 = _lex_param_2."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    set $P102, _lex_param_1
    set $P5006, _lex_param_2
    iter $P5008, _lex_param_2
  for_next84:
    unless $P5008, for_done86
    shift $P5010, $P5008
  for_redo85:
    .const 'Sub' $P5009 = 'cuid_375_1360256386.79' 
    capture_lex $P5009
    $P5006 = $P5009($P5010)
    goto for_next84
  for_done86:
    get_who $P5011, $P102
    set $S5002, $P101
    set $P5011[$S5002], _lex_param_3
    .return (_lex_param_3) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_375_1360256386.79") :anon :lex :outer("cuid_9_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 176
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$target"
    set $S5001, _lex_param_0
    nqp_get_package_through_who $P5001, $P5002, $S5001
    store_lex "$target", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "install_lexical_symbol" :subid("cuid_10_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 186
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 188
    _lex_param_1."symbol"(_lex_param_2, "lexical" :named("scope"), _lex_param_3 :named("value"))
.annotate 'line', 189
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback87
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5003
  fallback87:
    nqp_get_sc_object $P5007, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback88
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5008
  fallback88:
    $P5009 = $P5004."new"("lexical" :named("scope"), _lex_param_2 :named("name"), "var" :named("decl"))
    $P5002."push"($P5009)
.annotate 'line', 192
    nqp_get_sc_object $P5013, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback89
    nqp_get_sc_object $P5014, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5014
  fallback89:
.annotate 'line', 195
    nqp_get_sc_object $P5018, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["SVal"]
    unless_null $P5015, fallback90
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5015, $P5019
  fallback90:
    $P5020 = $P5015."new"(_lex_param_2 :named("value"))
.annotate 'line', 196
    nqp_get_sc_object $P5024, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["WVal"]
    unless_null $P5021, fallback91
    nqp_get_sc_object $P5025, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5021, $P5025
  fallback91:
    $P5026 = $P5021."new"(_lex_param_3 :named("value"))
    $P5027 = $P5010."new"(_lex_param_1, $P5020, $P5026, "setstaticlex" :named("op"))
    set $P101, $P5027
.annotate 'line', 198
    nqp_decontainerize $P5028, _lex_param_0
    $P5029 = $P5028."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_routine" :subid("cuid_11_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 203
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$past_block", _lex_param_3 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 204
    nqp_get_sc_object $P5005, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback92
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5006
  fallback92:
.annotate 'line', 206
    nqp_get_sc_object $P5010, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback93
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5011
  fallback93:
    nqp_get_sc_object $P5015, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["WVal"]
    unless_null $P5012, fallback94
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5012, $P5016
  fallback94:
    $P5017 = $P5012."new"(_lex_param_1 :named("value"))
    $P5018 = $P5007."new"($P5017, "who" :named("op"))
.annotate 'line', 207
    nqp_get_sc_object $P5022, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["SVal"]
    unless_null $P5019, fallback95
    nqp_get_sc_object $P5023, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5019, $P5023
  fallback95:
    set $S5001, _lex_param_2
    $P5024 = $P5019."new"($S5001 :named("value"))
.annotate 'line', 208
    nqp_get_sc_object $P5028, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["BVal"]
    unless_null $P5025, fallback96
    nqp_get_sc_object $P5029, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5025, $P5029
  fallback96:
    $P5030 = $P5025."new"(_lex_param_3 :named("value"))
    $P5031 = $P5002."new"($P5018, $P5024, $P5030, "bindkey" :named("op"))
    set $P101, $P5031
.annotate 'line', 210
    nqp_decontainerize $P5032, _lex_param_0
    $P5033 = $P5032."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "create_code" :subid("cuid_15_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 215
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 :named("code_type_name") :optional 
    .param int haz_param_1 :opt_flag 
    .const 'Sub' $P5098 = 'cuid_12_1360256386.79' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_13_1360256386.79' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_14_1360256386.79' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_379_1360256386.79' 
    capture_lex $P5098 
    if haz_param_1, default174
    box $P5097, "NQPRoutine"
    set _lex_param_4, $P5097
  default174:
    .lex "$code_type", $P101 
    .lex "$have_code_type", $P102 
    .lex "$stub_code", $P103 
    .lex "$fixups", $P104 
    .lex "$dummy", $P105 
    .lex "$code_ref_idx", $P106 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$is_dispatcher", _lex_param_3 
    .lex "$code_type_name", _lex_param_4 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P104, $P5004
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P105, $P5005
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P106, $P5006
    root_new $P107, ['parrot';'Continuation']
    set_label $P107, lexotic_97
    .lex "RETURN", $P107
    box $P5007, 0
    set $P102, $P5007
    new $P5026, 'ExceptionHandler'
    set_label $P5026, catch_handler_25106
    $P5026.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5026
.annotate 'line', 219
.annotate 'line', 220
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    push $P5009, _lex_param_4
    $P5010 = $P5008."find_sym"($P5009)
    set $P101, $P5010
.annotate 'line', 221
    find_dynamic_lex $P5012, "$*PACKAGE"
    unless_null $P5012, fallback99
    nqp_get_sc_object $P5015, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$PACKAGE"]
    unless_null $P5013, fallback100
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5013, $P5016
  fallback100:
    unless_null $P5013, vivi_22101
    die "Contextual $*PACKAGE not found"
    box $P5017, "Contextual $*PACKAGE not found"
    set $P5013, $P5017
  vivi_22101:
    set $P5012, $P5013
  fallback99:
    get_how $P5011, $P5012
    find_dynamic_lex $P5018, "$*PACKAGE"
    unless_null $P5018, fallback102
    nqp_get_sc_object $P5021, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$PACKAGE"]
    unless_null $P5019, fallback103
    nqp_get_sc_object $P5022, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5019, $P5022
  fallback103:
    unless_null $P5019, vivi_23104
    die "Contextual $*PACKAGE not found"
    box $P5023, "Contextual $*PACKAGE not found"
    set $P5019, $P5023
  vivi_23104:
    set $P5018, $P5019
  fallback102:
    $P5024 = $P5011."name"($P5018)
    set $S5001, $P5024
    set $S5002, _lex_param_4
    isne $I5001, $S5001, $S5002
    box $P5025, $I5001
    set $P102, $P5025
    set $P5027, $P102
    pop_eh 
    goto skip_handler_24105
  catch_handler_25106:
    .get_results ($P5026) 
    set $I10001, 1
    set $P5026["handled"], $I10001
    nqp_get_sc_object $P10001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    finalize $P5026
    pop_upto_eh $P5026
    pop_eh 
    set $P5027, $P10001
    goto skip_handler_24105
  skip_handler_24105:
    .const 'Sub' $P5029 = 'cuid_12_1360256386.79' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    set $P103, $P5028
.annotate 'line', 264
    nqp_get_sc_object $P5033, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["Stmts"]
    unless_null $P5030, fallback135
    nqp_get_sc_object $P5034, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5030, $P5034
  fallback135:
    $P5035 = $P5030."new"()
    set $P104, $P5035
    set $P5036, _lex_param_1["compile_time_dummy"]
    unless_null $P5036, fallback138
    nqp_get_sc_object $P5037, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5036, $P5037
  fallback138:
    defined $I5002, $P5036
    unless $I5002 goto if29_else136 
.annotate 'line', 267
    set $P5038, _lex_param_1["compile_time_dummy"]
    unless_null $P5038, fallback139
    nqp_get_sc_object $P5039, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5038, $P5039
  fallback139:
    set $P105, $P5038
    goto if29_end137
  if29_else136:
.annotate 'line', 270
    nqp_fresh_stub $P5040, $P103
    set $P105, $P5040
    set $S5003, _lex_param_2
    assign $P105, $S5003
    setprop $P105, "STATIC_CODE_REF", $P105
.annotate 'line', 277
    nqp_decontainerize $P5041, _lex_param_0
    $P5042 = $P5041."add_root_code_ref"($P105, _lex_param_1)
    set $P106, $P5042
    nqp_decontainerize $P5043, _lex_param_0
    nqp_get_sc_object $P5044, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5045, $P5043, $P5044, "%!code_stub_sc_idx"
.annotate 'line', 278
    $P5046 = _lex_param_1."cuid"()
    set $S5004, $P5046
    set $P5045[$S5004], $P106
    set _lex_param_1["compile_time_dummy"], $P105
    set $P5058, $P102
    unless $P102 goto if30_end141 
.annotate 'line', 284
    nqp_decontainerize $P5047, _lex_param_0
    nqp_get_sc_object $P5048, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5049, $P5047, $P5048, "%!code_object_fixup_list"
.annotate 'line', 285
    $P5050 = _lex_param_1."cuid"()
    set $S5005, $P5050
    set $P5049[$S5005], $P104
.annotate 'line', 286
    nqp_decontainerize $P5051, _lex_param_0
    $P5052 = $P5051."is_precompilation_mode"()
    unless $P5052 goto if31_else142 
    .const 'Sub' $P5054 = 'cuid_13_1360256386.79' 
    capture_lex $P5054
    newclosure $P5053, $P5054
    setprop $P105, "CLONE_CALLBACK", $P5053
    set $P5057, $P105
    goto if31_end143
  if31_else142:
.annotate 'line', 291
    .const 'Sub' $P5056 = 'cuid_14_1360256386.79' 
    capture_lex $P5056
    newclosure $P5055, $P5056
    setprop $P105, "CLONE_CALLBACK", $P5055
    set $P5057, $P105
  if31_end143:
    set $P5058, $P5057
  if30_end141:
  if29_end137:
.annotate 'line', 315
    nqp_decontainerize $P5059, _lex_param_0
    $P5059."add_fixup_task"($P104 :named("fixup_past"))
    unless $P102 goto if32_else154 
    .const 'Sub' $P5060 = 'cuid_379_1360256386.79' 
    capture_lex $P5060
    $P5061 = $P5060()
    set $P5096, $P5061
    goto if32_end155
  if32_else154:
.annotate 'line', 355
.annotate 'line', 358
    nqp_get_sc_object $P5065, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5064, $P5065, "QAST"
    get_who $P5063, $P5064
    set $P5062, $P5063["VM"]
    unless_null $P5062, fallback169
    nqp_get_sc_object $P5066, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5062, $P5066
  fallback169:
.annotate 'line', 360
    nqp_get_sc_object $P5070, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5069, $P5070, "QAST"
    get_who $P5068, $P5069
    set $P5067, $P5068["VM"]
    unless_null $P5067, fallback170
    nqp_get_sc_object $P5071, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5067, $P5071
  fallback170:
.annotate 'line', 362
    nqp_get_sc_object $P5075, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5074, $P5075, "QAST"
    get_who $P5073, $P5074
    set $P5072, $P5073["SVal"]
    unless_null $P5072, fallback171
    nqp_get_sc_object $P5076, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5072, $P5076
  fallback171:
    nqp_decontainerize $P5077, _lex_param_0
    $P5078 = $P5077."handle"()
    $P5079 = $P5072."new"($P5078 :named("value"))
.annotate 'line', 363
    nqp_get_sc_object $P5083, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["IVal"]
    unless_null $P5080, fallback172
    nqp_get_sc_object $P5084, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5080, $P5084
  fallback172:
    $P5085 = $P5080."new"($P106 :named("value"))
    $P5086 = $P5067."new"($P5079, $P5085, "nqp_get_sc_code_ref Psi" :named("pirop"))
.annotate 'line', 365
    nqp_get_sc_object $P5090, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5089, $P5090, "QAST"
    get_who $P5088, $P5089
    set $P5087, $P5088["BVal"]
    unless_null $P5087, fallback173
    nqp_get_sc_object $P5091, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5087, $P5091
  fallback173:
    $P5092 = $P5087."new"(_lex_param_1 :named("value"))
    $P5093 = $P5062."new"($P5086, $P5092, "assign vPP" :named("pirop"))
    $P104."push"($P5093)
    find_lex $P5094, "RETURN"
    $P5095 = $P5094($P105)
    set $P5096, $P5095
  if32_end155:
    goto lexotic_98
  lexotic_97:
    .get_results ($P5096)
  lexotic_98:
    .return ($P5096) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_12_1360256386.79") :anon :lex :outer("cuid_15_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 228
    .param pmc _lex_param_0 :slurpy 
    .param pmc _lex_param_1 :slurpy :named 
    .const 'Sub' $P5029 = 'cuid_378_1360256386.79' 
    capture_lex $P5029 
    .lex "$nqpcomp", $P101 
    .lex "$post", $P102 
    .lex "$pir", $P103 
    .lex "$compiled", $P104 
    .lex "$c", $P105 
    .lex "$i", $P106 
    .lex "@args", _lex_param_0 
    .lex "%named", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P104, $P5004
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P105, $P5005
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P106, $P5006
.annotate 'line', 230
    find_lex $P5007, "$past"
    find_lex $P5009, "self"
    nqp_decontainerize $P5008, $P5009
    $P5010 = $P5008."libs"()
    $P5007."unshift"($P5010)
    compreg $P5011, "nqp"
    set $P101, $P5011
.annotate 'line', 232
    nqp_get_sc_object $P5015, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["CompUnit"]
    unless_null $P5012, fallback107
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5012, $P5016
  fallback107:
    find_lex $P5017, "$past"
    $P5018 = $P5012."new"($P5017, "nqp" :named("hll"))
    $P5019 = $P101."post"($P5018)
    set $P102, $P5019
.annotate 'line', 233
    $P5020 = $P101."pir"($P102)
    set $P103, $P5020
.annotate 'line', 234
    $P5021 = $P101."evalpmc"($P103)
    set $P104, $P5021
    elements $I5001, $P104
    box $P5022, $I5001
    set $P105, $P5022
    box $P5023, 0
    set $P106, $P5023
  while26_test108:
    set $N5001, $P106
    set $N5002, $P105
    islt $I5002, $N5001, $N5002
    box $P5027, $I5002
    set $P5026, $P5027
    unless $I5002 goto while26_done112 
  while26_redo110:
    .const 'Sub' $P5024 = 'cuid_378_1360256386.79' 
    capture_lex $P5024
    $P5025 = $P5024()
    set $P5026, $P5025
    goto while26_test108 
  while26_done112:
.annotate 'line', 260
    $P5028 = $P104(_lex_param_0 :flat, _lex_param_1 :flat :named)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_378_1360256386.79") :anon :lex :outer("cuid_12_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 239
    .const 'Sub' $P5015 = 'cuid_377_1360256386.79' 
    capture_lex $P5015 
    .lex "$subid", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 240
    find_lex $P5003, "$compiled"
    find_lex $P5004, "$i"
    set $I5001, $P5004
    set $P5002, $P5003[$I5001]
    unless_null $P5002, fallback113
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5005
  fallback113:
    $P5006 = $P5002."get_subid"()
    set $P101, $P5006
    find_lex $P5008, "self"
    nqp_decontainerize $P5007, $P5008
    nqp_get_sc_object $P5009, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5010, $P5007, $P5009, "%!code_objects_to_fix_up"
    set $S5001, $P101
    exists $I5002, $P5010[$S5001]
    unless $I5002 goto if27_end115 
    .const 'Sub' $P5011 = 'cuid_377_1360256386.79' 
    capture_lex $P5011
    $P5012 = $P5011()
  if27_end115:
    find_lex $P5013, "$i"
    set $N5002, $P5013
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5014, $N5001
    store_lex "$i", $P5014
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_377_1360256386.79") :anon :lex :outer("cuid_378_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 241
    .const 'Sub' $P5067 = 'cuid_376_1360256386.79' 
    capture_lex $P5067 
    .lex "$static", $P101 
    .lex "$fixup_stmts", $P102 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
.annotate 'line', 245
    find_lex $P5005, "self"
    nqp_decontainerize $P5004, $P5005
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5007, $P5004, $P5006, "%!code_objects_to_fix_up"
    find_lex $P5008, "$subid"
    set $S5001, $P5008
    set $P5003, $P5007[$S5001]
    unless_null $P5003, fallback116
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5009
  fallback116:
    $P5010 = $P5003."shift"()
    set $P101, $P5010
    find_lex $P5013, "self"
    nqp_decontainerize $P5012, $P5013
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5015, $P5012, $P5014, "%!code_object_types"
    find_lex $P5016, "$subid"
    set $S5002, $P5016
    set $P5011, $P5015[$S5002]
    unless_null $P5011, fallback117
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5017
  fallback117:
    find_lex $P5019, "$compiled"
    find_lex $P5020, "$i"
    set $I5001, $P5020
    set $P5018, $P5019[$I5001]
    unless_null $P5018, fallback118
    nqp_get_sc_object $P5021, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5018, $P5021
  fallback118:
    setattribute $P101, $P5011, "$!do", $P5018
    find_lex $P5027, "self"
    nqp_decontainerize $P5026, $P5027
    nqp_get_sc_object $P5028, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5029, $P5026, $P5028, "%!code_objects_to_fix_up"
    find_lex $P5030, "$subid"
    set $S5003, $P5030
    set $P5025, $P5029[$S5003]
    unless_null $P5025, fallback119
    nqp_get_sc_object $P5031, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5025, $P5031
  fallback119:
    set $P5022, $P5025
    iter $P5024, $P5025
  for_next122:
    unless $P5024, for_done124
    shift $P5033, $P5024
  for_redo123:
    .const 'Sub' $P5032 = 'cuid_376_1360256386.79' 
    capture_lex $P5032
    $P5022 = $P5032($P5033)
    goto for_next122
  for_done124:
    find_lex $P5035, "$compiled"
    find_lex $P5036, "$i"
    set $I5002, $P5036
    set $P5034, $P5035[$I5002]
    unless_null $P5034, fallback125
    nqp_get_sc_object $P5037, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5034, $P5037
  fallback125:
    find_lex $P5039, "$compiled"
    find_lex $P5040, "$i"
    set $I5003, $P5040
    set $P5038, $P5039[$I5003]
    unless_null $P5038, fallback126
    nqp_get_sc_object $P5041, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5038, $P5041
  fallback126:
    setprop $P5034, "STATIC_CODE_REF", $P5038
.annotate 'line', 251
    find_lex $P5043, "self"
    nqp_decontainerize $P5042, $P5043
    find_lex $P5046, "self"
    nqp_decontainerize $P5045, $P5046
    nqp_get_sc_object $P5047, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5048, $P5045, $P5047, "%!code_stub_sc_idx"
    find_lex $P5049, "$subid"
    set $S5004, $P5049
    set $P5044, $P5048[$S5004]
    unless_null $P5044, fallback127
    nqp_get_sc_object $P5050, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5044, $P5050
  fallback127:
    find_lex $P5052, "$compiled"
    find_lex $P5053, "$i"
    set $I5004, $P5053
    set $P5051, $P5052[$I5004]
    unless_null $P5051, fallback128
    nqp_get_sc_object $P5054, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5051, $P5054
  fallback128:
    $P5042."update_root_code_ref"($P5044, $P5051)
    find_lex $P5057, "self"
    nqp_decontainerize $P5056, $P5057
    nqp_get_sc_object $P5058, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5059, $P5056, $P5058, "%!code_object_fixup_list"
    find_lex $P5060, "$subid"
    set $S5005, $P5060
    set $P5055, $P5059[$S5005]
    unless_null $P5055, fallback129
    nqp_get_sc_object $P5061, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5055, $P5061
  fallback129:
    set $P102, $P5055
    new $P5065, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5065, while28_handlers133
    push_eh $P5065
  while28_test130:
    $P5062 = $P102."list"()
    set $N5001, $P5062
    box $P5066, $N5001
    set $P5064, $P5066
    unless $N5001 goto while28_done134 
  while28_redo132:
.annotate 'line', 255
    $P5063 = $P102."shift"()
    set $P5064, $P5063
    goto while28_test130 
  while28_handlers133:
    .get_results ($P5065)
    pop_upto_eh $P5065
    getattribute $P5065, $P5065, 'type'
    eq $P5065, .CONTROL_LOOP_NEXT, while28_test130
    eq $P5065, .CONTROL_LOOP_REDO, while28_redo132
  while28_done134:
    pop_eh 
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_376_1360256386.79") :anon :lex :outer("cuid_377_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 247
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5005, $P5002, $P5004, "%!code_object_types"
    find_lex $P5006, "$subid"
    set $S5001, $P5006
    set $P5001, $P5005[$S5001]
    unless_null $P5001, fallback120
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5007
  fallback120:
    find_lex $P5010, "$compiled"
    find_lex $P5011, "$i"
    set $I5001, $P5011
    set $P5009, $P5010[$I5001]
    unless_null $P5009, fallback121
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5012
  fallback121:
    repr_clone $P5008, $P5009
    setattribute _lex_param_0, $P5001, "$!do", $P5008
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_13_1360256386.79") :anon :lex :outer("cuid_15_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 287
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 288
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5005, $P5002, $P5004, "%!code_objects_to_fix_up"
    find_lex $P5006, "$past"
    $P5007 = $P5006."cuid"()
    set $S5001, $P5007
    set $P5001, $P5005[$S5001]
    unless_null $P5001, fallback144
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5008
  fallback144:
    $P5009 = $P5001."push"(_lex_param_2)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_14_1360256386.79") :anon :lex :outer("cuid_15_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 292
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 294
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    $P5001."add_object"(_lex_param_2)
.annotate 'line', 295
    find_lex $P5003, "$fixups"
    nqp_get_sc_object $P5007, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Op"]
    unless_null $P5004, fallback145
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5008
  fallback145:
.annotate 'line', 297
    nqp_get_sc_object $P5012, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["WVal"]
    unless_null $P5009, fallback146
    nqp_get_sc_object $P5013, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5013
  fallback146:
    $P5014 = $P5009."new"(_lex_param_2 :named("value"))
.annotate 'line', 298
    nqp_get_sc_object $P5018, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["WVal"]
    unless_null $P5015, fallback147
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5015, $P5019
  fallback147:
    find_lex $P5020, "$code_type"
    $P5021 = $P5015."new"($P5020 :named("value"))
.annotate 'line', 299
    nqp_get_sc_object $P5025, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["SVal"]
    unless_null $P5022, fallback148
    nqp_get_sc_object $P5026, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5022, $P5026
  fallback148:
    $P5027 = $P5022."new"("$!do" :named("value"))
.annotate 'line', 300
    nqp_get_sc_object $P5031, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["VM"]
    unless_null $P5028, fallback149
    nqp_get_sc_object $P5032, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5028, $P5032
  fallback149:
.annotate 'line', 302
    nqp_get_sc_object $P5036, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Op"]
    unless_null $P5033, fallback150
    nqp_get_sc_object $P5037, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5033, $P5037
  fallback150:
    nqp_get_sc_object $P5041, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["BVal"]
    unless_null $P5038, fallback151
    nqp_get_sc_object $P5042, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5038, $P5042
  fallback151:
    find_lex $P5043, "$past"
    $P5044 = $P5038."new"($P5043 :named("value"))
    $P5045 = $P5033."new"($P5044, "clone" :named("op"))
.annotate 'line', 303
    nqp_get_sc_object $P5049, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["WVal"]
    unless_null $P5046, fallback152
    nqp_get_sc_object $P5050, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5046, $P5050
  fallback152:
    $P5051 = $P5046."new"(_lex_param_2 :named("value"))
    $P5052 = $P5028."new"($P5045, $P5051, "set_sub_code_object 0PP" :named("pirop"))
    $P5053 = $P5004."new"($P5014, $P5021, $P5027, $P5052, "bindattr" :named("op"))
    $P5003."push"($P5053)
.annotate 'line', 308
    find_lex $P5056, "self"
    nqp_decontainerize $P5055, $P5056
    nqp_get_sc_object $P5057, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5058, $P5055, $P5057, "%!code_objects_to_fix_up"
    find_lex $P5059, "$past"
    $P5060 = $P5059."cuid"()
    set $S5001, $P5060
    set $P5054, $P5058[$S5001]
    unless_null $P5054, fallback153
    nqp_get_sc_object $P5061, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5054, $P5061
  fallback153:
    $P5062 = $P5054."push"(_lex_param_2)
    .return ($P5062) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_379_1360256386.79") :anon :lex :outer("cuid_15_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 319
    .lex "$code_obj", $P101 
    .lex "$slot", $P102 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    find_lex $P5004, "$code_type"
    repr_instance_of $P5003, $P5004
    set $P101, $P5003
    find_lex $P5005, "$code_type"
    find_lex $P5006, "$dummy"
    setattribute $P101, $P5005, "$!do", $P5006
    find_lex $P5007, "$is_dispatcher"
    unless $P5007 goto if33_end157 
    find_lex $P5008, "$code_type"
    new $P5009, 'ResizablePMCArray'
    setattribute $P101, $P5008, "$!dispatchees", $P5009
  if33_end157:
.annotate 'line', 325
    find_lex $P5011, "self"
    nqp_decontainerize $P5010, $P5011
    $P5012 = $P5010."add_object"($P101)
    set $P102, $P5012
.annotate 'line', 328
    find_lex $P5014, "self"
    nqp_decontainerize $P5013, $P5014
.annotate 'line', 329
    nqp_get_sc_object $P5018, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback158
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5015, $P5019
  fallback158:
.annotate 'line', 331
    nqp_get_sc_object $P5023, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["BVal"]
    unless_null $P5020, fallback159
    nqp_get_sc_object $P5024, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5020, $P5024
  fallback159:
    find_lex $P5025, "$past"
    $P5026 = $P5020."new"($P5025 :named("value"))
.annotate 'line', 332
    nqp_get_sc_object $P5030, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["WVal"]
    unless_null $P5027, fallback160
    nqp_get_sc_object $P5031, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5027, $P5031
  fallback160:
    $P5032 = $P5027."new"($P101 :named("value"))
    $P5033 = $P5015."new"($P5026, $P5032, "setcodeobj" :named("op"))
    $P5013."add_fixup_task"($P5033 :named("deserialize_past"))
.annotate 'line', 336
    find_lex $P5034, "$fixups"
    nqp_get_sc_object $P5038, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Op"]
    unless_null $P5035, fallback161
    nqp_get_sc_object $P5039, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5035, $P5039
  fallback161:
.annotate 'line', 338
    nqp_get_sc_object $P5043, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["WVal"]
    unless_null $P5040, fallback162
    nqp_get_sc_object $P5044, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5040, $P5044
  fallback162:
    $P5045 = $P5040."new"($P101 :named("value"))
.annotate 'line', 339
    nqp_get_sc_object $P5049, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["WVal"]
    unless_null $P5046, fallback163
    nqp_get_sc_object $P5050, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5046, $P5050
  fallback163:
    find_lex $P5051, "$code_type"
    $P5052 = $P5046."new"($P5051 :named("value"))
.annotate 'line', 340
    nqp_get_sc_object $P5056, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["SVal"]
    unless_null $P5053, fallback164
    nqp_get_sc_object $P5057, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5053, $P5057
  fallback164:
    $P5058 = $P5053."new"("$!do" :named("value"))
.annotate 'line', 341
    nqp_get_sc_object $P5062, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5061, $P5062, "QAST"
    get_who $P5060, $P5061
    set $P5059, $P5060["BVal"]
    unless_null $P5059, fallback165
    nqp_get_sc_object $P5063, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5059, $P5063
  fallback165:
    find_lex $P5064, "$past"
    $P5065 = $P5059."new"($P5064 :named("value"))
    $P5066 = $P5035."new"($P5045, $P5052, $P5058, $P5065, "bindattr" :named("op"))
    $P5034."push"($P5066)
.annotate 'line', 343
    find_lex $P5067, "$fixups"
    nqp_get_sc_object $P5071, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5070, $P5071, "QAST"
    get_who $P5069, $P5070
    set $P5068, $P5069["Op"]
    unless_null $P5068, fallback166
    nqp_get_sc_object $P5072, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5068, $P5072
  fallback166:
.annotate 'line', 345
    nqp_get_sc_object $P5076, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5075, $P5076, "QAST"
    get_who $P5074, $P5075
    set $P5073, $P5074["BVal"]
    unless_null $P5073, fallback167
    nqp_get_sc_object $P5077, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5073, $P5077
  fallback167:
    find_lex $P5078, "$past"
    $P5079 = $P5073."new"($P5078 :named("value"))
.annotate 'line', 346
    nqp_get_sc_object $P5083, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["WVal"]
    unless_null $P5080, fallback168
    nqp_get_sc_object $P5084, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5080, $P5084
  fallback168:
    $P5085 = $P5080."new"($P101 :named("value"))
    $P5086 = $P5068."new"($P5079, $P5085, "setcodeobj" :named("op"))
    $P5067."push"($P5086)
    find_lex $P5088, "self"
    nqp_decontainerize $P5087, $P5088
    nqp_get_sc_object $P5089, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5090, $P5087, $P5089, "%!code_objects_to_fix_up"
.annotate 'line', 350
    find_lex $P5091, "$past"
    $P5092 = $P5091."cuid"()
    set $S5001, $P5092
    new $P5093, 'ResizablePMCArray'
    push $P5093, $P101
    set $P5090[$S5001], $P5093
    find_lex $P5095, "self"
    nqp_decontainerize $P5094, $P5095
    nqp_get_sc_object $P5096, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5097, $P5094, $P5096, "%!code_object_types"
.annotate 'line', 351
    find_lex $P5098, "$past"
    $P5099 = $P5098."cuid"()
    set $S5002, $P5099
    find_lex $P5100, "$code_type"
    set $P5097[$S5002], $P5100
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_create_mo" :subid("cuid_16_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 373
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("name") :optional 
    .param int haz_param_2 :opt_flag 
    .param pmc _lex_param_3 :named("repr") :optional 
    .param int haz_param_3 :opt_flag 
    if haz_param_2, default181
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_2, $P5007
  default181:
    if haz_param_3, default182
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_3, $P5008
  default182:
    .lex "%args", $P101 
    .lex "$mo", $P102 
    .lex "self", _lex_param_0 
    .lex "$how", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$repr", _lex_param_3 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_175
    .lex "RETURN", $P103
    defined $I5001, _lex_param_2
    unless $I5001 goto if34_end178 
.annotate 'line', 376
    set $P101["name"], _lex_param_2
  if34_end178:
    defined $I5002, _lex_param_3
    unless $I5002 goto if35_end180 
.annotate 'line', 377
    set $P101["repr"], _lex_param_3
  if35_end180:
.annotate 'line', 378
    $P5003 = _lex_param_1."new_type"($P101 :flat :named)
    set $P102, $P5003
.annotate 'line', 379
    nqp_decontainerize $P5004, _lex_param_0
    $P5004."add_object"($P102)
    find_lex $P5005, "RETURN"
    $P5006 = $P5005($P102)
    goto lexotic_176
  lexotic_175:
    .get_results ($P5006)
  lexotic_176:
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_attribute" :subid("cuid_17_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 390
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "$attr", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_attr", _lex_param_2 
    .lex "%lit_args", _lex_param_3 
    .lex "%obj_args", _lex_param_4 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 391
    $P5002 = _lex_param_2."new"(_lex_param_3 :flat :named, _lex_param_4 :flat :named)
    set $P101, $P5002
.annotate 'line', 392
    get_how $P5003, _lex_param_1
    $P5004 = $P5003."add_attribute"(_lex_param_1, $P101)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_method" :subid("cuid_18_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 396
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$name", _lex_param_3 
    .lex "$code", _lex_param_4 
.annotate 'line', 397
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3, _lex_param_4)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "set_routine_signature" :subid("cuid_19_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 401
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$sig_type", $P101 
    .lex "$code_type", $P102 
    .lex "$sig_obj", $P103 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$types", _lex_param_2 
    .lex "$definednesses", _lex_param_3 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P103, $P5003
.annotate 'line', 402
    nqp_decontainerize $P5004, _lex_param_0
    new $P5005, 'ResizablePMCArray'
    box $P5006, "NQPSignature"
    push $P5005, $P5006
    $P5007 = $P5004."find_sym"($P5005)
    set $P101, $P5007
.annotate 'line', 403
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    box $P5010, "NQPRoutine"
    push $P5009, $P5010
    $P5011 = $P5008."find_sym"($P5009)
    set $P102, $P5011
    repr_instance_of $P5012, $P101
    set $P103, $P5012
    setattribute $P103, $P101, "$!types", _lex_param_2
    setattribute $P103, $P101, "$!definednesses", _lex_param_3
    setattribute _lex_param_1, $P102, "$!signature", $P103
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_set_body_block" :subid("cuid_20_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 411
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$body_code_obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$body_past", _lex_param_2 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 413
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = _lex_param_2."name"()
    $P5004 = $P5002."create_code"(_lex_param_2, $P5003, 0)
    set $P101, $P5004
.annotate 'line', 416
    get_how $P5005, _lex_param_1
    $P5006 = $P5005."set_body_block"(_lex_param_1, $P101)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parent_or_role" :subid("cuid_21_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 420
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$to_add", _lex_param_3 
.annotate 'line', 421
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parrot_vtable_handler_mapping" :subid("cuid_22_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 424
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$att_name", _lex_param_3 
.annotate 'line', 425
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."add_parrot_vtable_handler_mapping"(_lex_param_1, _lex_param_2, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_compose" :subid("cuid_23_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 429
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
.annotate 'line', 430
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."compose"(_lex_param_1)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "run_begin_block" :subid("cuid_24_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 434
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5040 = 'cuid_381_1360256386.79' 
    capture_lex $P5040 
    .lex "$wrapper", $P101 
    .lex "%seen", $P102 
    .lex "$i", $P103 
    .lex "$code", $P104 
    .lex "$old_global", $P105 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P104, $P5004
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P105, $P5005
    root_new $P106, ['parrot';'Continuation']
    set_label $P106, lexotic_183
    .lex "RETURN", $P106
.annotate 'line', 436
    nqp_get_sc_object $P5009, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback185
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5010
  fallback185:
.annotate 'line', 437
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Stmts"]
    unless_null $P5011, fallback186
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5015
  fallback186:
    $P5016 = $P5011."new"()
    $P5017 = $P5006."new"($P5016, _lex_param_1)
    set $P101, $P5017
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    set $N5001, $P5020
    box $P5021, $N5001
    set $P103, $P5021
  while36_test187:
    set $N5002, $P103
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5025, $I5001
    set $P5024, $P5025
    unless $I5001 goto while36_done191 
  while36_redo189:
    .const 'Sub' $P5022 = 'cuid_381_1360256386.79' 
    capture_lex $P5022
    $P5023 = $P5022()
    set $P5024, $P5023
    goto while36_test187 
  while36_done191:
.annotate 'line', 460
    nqp_decontainerize $P5026, _lex_param_0
    $P5027 = $P5026."create_code"($P101, "BEGIN block", 0)
    set $P104, $P5027
    new $P5029, 'ResizablePMCArray'
    get_hll_global $P5028, $P5029, "GLOBAL"
    set $P105, $P5028
    new $P5030, 'ResizablePMCArray'
    find_dynamic_lex $P5031, "$*GLOBALish"
    unless_null $P5031, fallback208
    nqp_get_sc_object $P5034, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$GLOBALish"]
    unless_null $P5032, fallback209
    nqp_get_sc_object $P5035, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5032, $P5035
  fallback209:
    unless_null $P5032, vivi_41210
    die "Contextual $*GLOBALish not found"
    box $P5036, "Contextual $*GLOBALish not found"
    set $P5032, $P5036
  vivi_41210:
    set $P5031, $P5032
  fallback208:
    set_hll_global $P5030, "GLOBAL", $P5031
.annotate 'line', 463
    $P104()
    new $P5037, 'ResizablePMCArray'
    set_hll_global $P5037, "GLOBAL", $P105
.annotate 'line', 468
    $P101."shift"()
    find_lex $P5038, "RETURN"
    $P5039 = $P5038($P101)
    goto lexotic_184
  lexotic_183:
    .get_results ($P5039)
  lexotic_184:
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_381_1360256386.79") :anon :lex :outer("cuid_24_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 442
    .const 'Sub' $P5017 = 'cuid_380_1360256386.79' 
    capture_lex $P5017 
    .lex "%symbols", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 444
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback192
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5010
  fallback192:
    $P5011 = $P5004."symtable"()
    set $P101, $P5011
    set $P5012, $P101
    iter $P5014, $P101
  for_next205:
    unless $P5014, for_done207
    shift $P5016, $P5014
  for_redo206:
    .const 'Sub' $P5015 = 'cuid_380_1360256386.79' 
    capture_lex $P5015
    $P5012 = $P5015($P5016)
    goto for_next205
  for_done207:
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_380_1360256386.79") :anon :lex :outer("cuid_381_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 445
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "%seen"
.annotate 'line', 446
    $P5003 = _lex_param_0."key"()
    set $S5001, $P5003
    set $P5001, $P5002[$S5001]
    unless_null $P5001, fallback197
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5004
  fallback197:
    isfalse $I5001, $P5001
    set $I5003, $I5001
    unless $I5001 goto if38_end196 
    $P5005 = _lex_param_0."value"()
    exists $I5002, $P5005["value"]
    set $I5003, $I5002
  if38_end196:
    box $P5038, $I5003
    set $P5037, $P5038
    unless $I5003 goto if37_end194 
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_40204
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 447
.annotate 'line', 448
    find_lex $P5007, "$wrapper"
    set $P5006, $P5007[0]
    unless_null $P5006, fallback198
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5008
  fallback198:
    nqp_get_sc_object $P5012, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback199
    nqp_get_sc_object $P5013, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5013
  fallback199:
.annotate 'line', 450
    nqp_get_sc_object $P5017, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Var"]
    unless_null $P5014, fallback200
    nqp_get_sc_object $P5018, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5014, $P5018
  fallback200:
    $P5019 = _lex_param_0."key"()
    $P5020 = $P5014."new"($P5019 :named("name"), "lexical" :named("scope"), "var" :named("isdecl"))
.annotate 'line', 451
    nqp_get_sc_object $P5024, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["WVal"]
    unless_null $P5021, fallback201
    nqp_get_sc_object $P5025, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5021, $P5025
  fallback201:
    $P5027 = _lex_param_0."value"()
    set $P5026, $P5027["value"]
    unless_null $P5026, fallback202
    nqp_get_sc_object $P5028, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5026, $P5028
  fallback202:
    $P5029 = $P5021."new"($P5026 :named("value"))
    $P5030 = $P5009."new"($P5020, $P5029, "bind" :named("op"))
    $P5031 = $P5006."push"($P5030)
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_39203
  catch_handler_40204:
    .get_results ($P5032) 
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10001
    goto skip_handler_39203
  skip_handler_39203:
    find_lex $P5034, "%seen"
.annotate 'line', 454
    $P5035 = _lex_param_0."key"()
    set $S5002, $P5035
    box $P5036, 1
    set $P5034[$S5002], $P5036
    set $P5037, $P5036
  if37_end194:
    .return ($P5037) 
.end
.HLL "nqp"
.namespace []
.sub "libs" :subid("cuid_25_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 473
    .param pmc _lex_param_0 
    .const 'Sub' $P5050 = 'cuid_382_1360256386.79' 
    capture_lex $P5050 
    .lex "@loadlibs", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    box $P5003, "nqp_group"
    push $P5002, $P5003
    box $P5004, "nqp_ops"
    push $P5002, $P5004
    box $P5005, "nqp_bigint_ops"
    push $P5002, $P5005
    box $P5006, "trans_ops"
    push $P5002, $P5006
    box $P5007, "io_ops"
    push $P5002, $P5007
    set $P101, $P5002
    find_dynamic_lex $P5010, "%*COMPILING"
    unless_null $P5010, fallback213
    nqp_get_sc_object $P5013, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["%COMPILING"]
    unless_null $P5011, fallback214
    nqp_get_sc_object $P5015, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5014, $P5015
    new $P5016, 'Hash'
    set $P5014["%COMPILING"], $P5016
    set $P5011, $P5016
  fallback214:
    unless_null $P5011, vivi_43215
    die "Contextual %*COMPILING not found"
    box $P5017, "Contextual %*COMPILING not found"
    set $P5011, $P5017
  vivi_43215:
    set $P5010, $P5011
  fallback213:
    set $P5009, $P5010["%?OPTIONS"]
    unless_null $P5009, fallback216
    nqp_get_sc_object $P5018, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5018
  fallback216:
    set $P5008, $P5009["vmlibs"]
    unless_null $P5008, fallback217
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5019
  fallback217:
    unless $P5008 goto if42_end212 
.annotate 'line', 476
    find_dynamic_lex $P5026, "%*COMPILING"
    unless_null $P5026, fallback218
    nqp_get_sc_object $P5029, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["%COMPILING"]
    unless_null $P5027, fallback219
    nqp_get_sc_object $P5031, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%COMPILING"], $P5032
    set $P5027, $P5032
  fallback219:
    unless_null $P5027, vivi_44220
    die "Contextual %*COMPILING not found"
    box $P5033, "Contextual %*COMPILING not found"
    set $P5027, $P5033
  vivi_44220:
    set $P5026, $P5027
  fallback218:
    set $P5025, $P5026["%?OPTIONS"]
    unless_null $P5025, fallback221
    nqp_get_sc_object $P5034, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5025, $P5034
  fallback221:
    set $P5024, $P5025["vmlibs"]
    unless_null $P5024, fallback222
    nqp_get_sc_object $P5035, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5024, $P5035
  fallback222:
    set $S5001, $P5024
    split $P5023, ",", $S5001
    set $P5020, $P5023
    iter $P5022, $P5023
  for_next223:
    unless $P5022, for_done225
    shift $P5037, $P5022
  for_redo224:
    .const 'Sub' $P5036 = 'cuid_382_1360256386.79' 
    capture_lex $P5036
    $P5020 = $P5036($P5037)
    goto for_next223
  for_done225:
  if42_end212:
.annotate 'line', 481
    nqp_get_sc_object $P5041, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["VM"]
    unless_null $P5038, fallback226
    nqp_get_sc_object $P5042, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5038, $P5042
  fallback226:
.annotate 'line', 483
    nqp_get_sc_object $P5046, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Op"]
    unless_null $P5043, fallback227
    nqp_get_sc_object $P5047, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5043, $P5047
  fallback227:
    $P5048 = $P5043."new"("null" :named("op"))
    $P5049 = $P5038."new"($P101 :named("loadlibs"), $P5048 :named("jvm"))
    .return ($P5049) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_382_1360256386.79") :anon :lex :outer("cuid_25_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 477
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 478
    find_lex $P5001, "@loadlibs"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "add_initializations" :subid("cuid_26_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 487
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 488
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5005, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["VM"]
    unless_null $P5002, fallback228
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5006
  fallback228:
.annotate 'line', 489
    nqp_get_sc_object $P5010, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback229
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5011
  fallback229:
.annotate 'line', 490
    nqp_get_sc_object $P5015, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["VM"]
    unless_null $P5012, fallback230
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5012, $P5016
  fallback230:
    $P5017 = $P5012."new"("nqp_dynop_setup v" :named("pirop"))
.annotate 'line', 491
    nqp_get_sc_object $P5021, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["VM"]
    unless_null $P5018, fallback231
    nqp_get_sc_object $P5022, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5018, $P5022
  fallback231:
    $P5023 = $P5018."new"("nqp_bigint_setup v" :named("pirop"))
.annotate 'line', 492
    nqp_get_sc_object $P5027, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback232
    nqp_get_sc_object $P5028, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5024, $P5028
  fallback232:
.annotate 'line', 494
    nqp_get_sc_object $P5032, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["VM"]
    unless_null $P5029, fallback233
    nqp_get_sc_object $P5033, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5029, $P5033
  fallback233:
    $P5034 = $P5029."new"("getinterp P" :named("pirop"))
.annotate 'line', 495
    nqp_get_sc_object $P5038, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["VM"]
    unless_null $P5035, fallback234
    nqp_get_sc_object $P5039, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5035, $P5039
  fallback234:
    nqp_get_sc_object $P5043, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["SVal"]
    unless_null $P5040, fallback235
    nqp_get_sc_object $P5044, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5040, $P5044
  fallback235:
    $P5045 = $P5040."new"("LexPad" :named("value"))
    $P5046 = $P5035."new"($P5045, "get_class Ps" :named("pirop"))
.annotate 'line', 496
    nqp_get_sc_object $P5050, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["VM"]
    unless_null $P5047, fallback236
    nqp_get_sc_object $P5051, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5047, $P5051
  fallback236:
    nqp_get_sc_object $P5055, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["SVal"]
    unless_null $P5052, fallback237
    nqp_get_sc_object $P5056, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5052, $P5056
  fallback237:
    $P5057 = $P5052."new"("NQPLexPad" :named("value"))
    $P5058 = $P5047."new"($P5057, "get_class Ps" :named("pirop"))
    $P5059 = $P5024."new"($P5034, $P5046, $P5058, "callmethod" :named("op"), "hll_map" :named("name"))
    $P5060 = $P5007."new"($P5017, $P5023, $P5059)
.annotate 'line', 498
    nqp_get_sc_object $P5064, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["Op"]
    unless_null $P5061, fallback238
    nqp_get_sc_object $P5065, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5061, $P5065
  fallback238:
    $P5066 = $P5061."new"("null" :named("op"))
    $P5067 = $P5002."new"($P5060 :named("parrot"), $P5066 :named("jvm"))
    $P5068 = $P5001."add_load_dependency_task"($P5067 :named("deserialize_past"))
    .return ($P5068) 
.end
.HLL "nqp"
.namespace []
.sub "is_lexical" :subid("cuid_27_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 504
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 505
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "lexical")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_package" :subid("cuid_28_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 510
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 511
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "package")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_scope" :subid("cuid_29_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 516
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P5011 = 'cuid_383_1360256386.79' 
    capture_lex $P5011 
    .lex "$i", $P101 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
    .lex "$wanted_scope", _lex_param_2 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_239
    .lex "RETURN", $P102
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    set $N5001, $P5004
    box $P5005, $N5001
    set $P101, $P5005
  while45_test241:
    set $N5002, $P101
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5009, $I5001
    set $P5008, $P5009
    unless $I5001 goto while45_done245 
  while45_redo243:
    .const 'Sub' $P5006 = 'cuid_383_1360256386.79' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5008, $P5007
    goto while45_test241 
  while45_done245:
    box $P5010, 0
    goto lexotic_240
  lexotic_239:
    .get_results ($P5010)
  lexotic_240:
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_383_1360256386.79") :anon :lex :outer("cuid_29_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 518
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 520
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback246
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5010
  fallback246:
    find_lex $P5011, "$name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5019, $N5004
    set $P5018, $P5019
    unless $N5004 goto if46_end248 
.annotate 'line', 521
    set $P5014, $P101["scope"]
    unless_null $P5014, fallback249
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5014, $P5015
  fallback249:
    set $S5001, $P5014
    find_lex $P5016, "$wanted_scope"
    set $S5002, $P5016
    iseq $I5002, $S5001, $S5002
    find_lex $P5013, "RETURN"
    $P5017 = $P5013($I5002)
    set $P5018, $P5017
  if46_end248:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "known_sym" :subid("cuid_30_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 529
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$known", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "@name", _lex_param_2 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    box $P5002, 0
    set $P101, $P5002
    new $P5005, 'ExceptionHandler'
    set_label $P5005, catch_handler_48251
    $P5005.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5005
.annotate 'line', 531
.annotate 'line', 532
    nqp_decontainerize $P5003, _lex_param_0
    $P5003."find_sym"(_lex_param_2)
    box $P5004, 1
    set $P101, $P5004
    set $P5006, $P101
    pop_eh 
    goto skip_handler_47250
  catch_handler_48251:
    .get_results ($P5005) 
    set $I10001, 1
    set $P5005["handled"], $I10001
    nqp_get_sc_object $P10001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    finalize $P5005
    pop_upto_eh $P5005
    pop_eh 
    set $P5006, $P10001
    goto skip_handler_47250
  skip_handler_47250:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "find_sym" :subid("cuid_31_1360256386.79") :anon :lex :outer("cuid_372_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 541
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5018 = 'cuid_385_1360256386.79' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_387_1360256386.79' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_388_1360256386.79' 
    capture_lex $P5018 
    .lex "$result", $P101 
    .lex "self", _lex_param_0 
    .lex "@name", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_252
    .lex "RETURN", $P102
    set $N5001, _lex_param_1
    if $N5001 goto unless49_end255 
.annotate 'line', 543
    box $P5002, "Cannot look up empty name"
    die $P5002
  unless49_end255:
    set $N5002, _lex_param_1
    set $N5003, 1
    iseq $I5001, $N5002, $N5003
    unless $I5001 goto if50_end257 
    .const 'Sub' $P5003 = 'cuid_385_1360256386.79' 
    capture_lex $P5003
    $P5004 = $P5003()
  if50_end257:
    find_dynamic_lex $P5005, "$*GLOBALish"
    unless_null $P5005, fallback270
    nqp_get_sc_object $P5008, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$GLOBALish"]
    unless_null $P5006, fallback271
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5009
  fallback271:
    unless_null $P5006, vivi_54272
    die "Contextual $*GLOBALish not found"
    box $P5010, "Contextual $*GLOBALish not found"
    set $P5006, $P5010
  vivi_54272:
    set $P5005, $P5006
  fallback270:
    set $P101, $P5005
    set $N5004, _lex_param_1
    set $N5005, 2
    isge $I5002, $N5004, $N5005
    unless $I5002 goto if55_end274 
    .const 'Sub' $P5011 = 'cuid_387_1360256386.79' 
    capture_lex $P5011
    $P5012 = $P5011()
  if55_end274:
    set $P5013, _lex_param_1
    iter $P5015, _lex_param_1
  for_next290:
    unless $P5015, for_done292
    shift $P5017, $P5015
  for_redo291:
    .const 'Sub' $P5016 = 'cuid_388_1360256386.79' 
    capture_lex $P5016
    $P5013 = $P5016($P5017)
    goto for_next290
  for_done292:
    goto lexotic_253
  lexotic_252:
    .get_results ($P101)
  lexotic_253:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_385_1360256386.79") :anon :lex :outer("cuid_31_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 547
    .const 'Sub' $P5015 = 'cuid_384_1360256386.79' 
    capture_lex $P5015 
    .lex "$final_name", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback258
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5005
  fallback258:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while51_test259:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while51_done263 
  while51_redo261:
    .const 'Sub' $P5011 = 'cuid_384_1360256386.79' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while51_test259 
  while51_done263:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_384_1360256386.79") :anon :lex :outer("cuid_385_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 550
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 552
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback264
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5010
  fallback264:
    find_lex $P5011, "$final_name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5021, $N5004
    set $P5020, $P5021
    unless $N5004 goto if52_end266 
.annotate 'line', 553
    exists $I5002, $P101["value"]
    unless $I5002 goto if53_else267 
.annotate 'line', 554
    set $P5014, $P101["value"]
    unless_null $P5014, fallback269
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5014, $P5015
  fallback269:
    find_lex $P5013, "RETURN"
    $P5016 = $P5013($P5014)
    set $P5019, $P5016
    goto if53_end268
  if53_else267:
.annotate 'line', 557
    find_lex $P5017, "$final_name"
    set $S5002, $P5017
    concat $S5001, "No compile-time value for ", $S5002
    box $P5018, $S5001
    die $P5018
    set $P5019, $P5018
  if53_end268:
    set $P5020, $P5019
  if52_end266:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_387_1360256386.79") :anon :lex :outer("cuid_31_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 568
    .const 'Sub' $P5015 = 'cuid_386_1360256386.79' 
    capture_lex $P5015 
    .lex "$first", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback275
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5005
  fallback275:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while56_test276:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while56_done280 
  while56_redo278:
    .const 'Sub' $P5011 = 'cuid_386_1360256386.79' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while56_test276 
  while56_done280:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_386_1360256386.79") :anon :lex :outer("cuid_387_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 571
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 573
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback281
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5010
  fallback281:
    find_lex $P5011, "$first"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5021, $N5004
    set $P5020, $P5021
    unless $N5004 goto if57_end283 
.annotate 'line', 574
    exists $I5002, $P101["value"]
    unless $I5002 goto if58_else284 
.annotate 'line', 575
    set $P5013, $P101["value"]
    unless_null $P5013, fallback286
    nqp_get_sc_object $P5014, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5013, $P5014
  fallback286:
    store_lex "$result", $P5013
.annotate 'line', 577
    find_lex $P5015, "@name"
    $P5015."shift"()
    box $P5016, 0
    store_lex "$i", $P5016
    set $P5019, $P5016
    goto if58_end285
  if58_else284:
.annotate 'line', 580
    find_lex $P5017, "$first"
    set $S5002, $P5017
    concat $S5001, "No compile-time value for ", $S5002
    box $P5018, $S5001
    die $P5018
    set $P5019, $P5018
  if58_end285:
    set $P5020, $P5019
  if57_end283:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_388_1360256386.79") :anon :lex :outer("cuid_31_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 588
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$result"
    get_who $P5001, $P5002
    set $S5001, _lex_param_0
    exists $I5001, $P5001[$S5001]
    unless $I5001 goto if59_else287 
.annotate 'line', 589
    find_lex $P5005, "$result"
    get_who $P5004, $P5005
    set $S5002, _lex_param_0
    set $P5003, $P5004[$S5002]
    unless_null $P5003, fallback289
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5006
  fallback289:
    store_lex "$result", $P5003
    set $P5009, $P5003
    goto if59_end288
  if59_else287:
.annotate 'line', 592
    find_lex $P5007, "@name"
    join $S5004, "::", $P5007
    concat $S5003, "Could not locate compile-time value for symbol ", $S5004
    box $P5008, $S5003
    die $P5008
    set $P5009, $P5008
  if59_end288:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_389_1360256386.79") :anon :lex :outer("cuid_369_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 603
    .const 'Sub' $P5258 = 'cuid_32_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_33_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_34_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_35_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_36_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_37_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_38_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_40_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_42_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_43_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_44_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_46_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_47_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_48_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_49_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_50_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_51_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_52_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_53_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_54_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_55_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_56_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_57_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_58_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_59_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_60_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_61_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_62_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_64_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_65_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_66_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_67_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_68_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_69_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_70_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_71_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_72_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_73_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_74_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_75_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_76_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_77_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_78_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_79_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_80_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_81_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_82_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_83_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_84_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_85_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_86_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_87_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_90_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_91_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_92_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_93_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_94_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_95_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_96_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_97_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_98_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_99_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_100_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_101_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_102_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_103_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_104_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_105_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_106_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_107_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_108_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_109_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_110_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_111_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_112_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_113_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_114_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_115_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_116_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_117_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_118_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_119_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_120_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_121_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_122_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_123_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_124_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_125_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_126_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_128_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_129_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_130_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_131_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_132_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_133_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_134_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_135_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_136_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_137_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_138_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_139_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_140_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_141_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_142_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_143_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_144_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_145_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_146_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_147_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_148_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_149_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_150_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_151_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_152_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_153_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_154_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_155_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_156_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_157_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_158_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_159_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_160_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_161_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_162_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_163_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_164_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_165_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_166_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_167_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_168_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_169_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_170_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_171_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_172_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_173_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_174_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_175_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_176_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_177_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_178_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_179_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_180_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_181_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_182_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_183_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_184_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_185_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_186_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_187_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_188_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_189_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_190_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_191_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_192_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_193_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_194_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_195_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_196_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_197_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_198_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_199_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_200_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_201_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_202_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_203_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_204_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_205_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_206_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_207_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_208_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_209_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_210_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_211_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_212_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_213_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_214_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_215_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_216_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_217_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_219_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_221_1360256386.79' 
    capture_lex $P5258 
    .const 'Sub' $P5258 = 'cuid_223_1360256386.79' 
    capture_lex $P5258 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
.annotate 'line', 1269
.annotate 'line', 1270
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "NQP"
    get_who $P5002, $P5003
    set $P5001, $P5002["Grammar"]
    unless_null $P5001, fallback293
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback293:
    $P5001."O"(":prec<y=>, :assoc<unary>", "%methodop")
.annotate 'line', 1271
    nqp_get_sc_object $P5009, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5008, $P5009, "NQP"
    get_who $P5007, $P5008
    set $P5006, $P5007["Grammar"]
    unless_null $P5006, fallback294
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5010
  fallback294:
    $P5006."O"(":prec<x=>, :assoc<unary>", "%autoincrement")
.annotate 'line', 1272
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5013, $P5014, "NQP"
    get_who $P5012, $P5013
    set $P5011, $P5012["Grammar"]
    unless_null $P5011, fallback295
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5015
  fallback295:
    $P5011."O"(":prec<w=>, :assoc<left>", "%exponentiation")
.annotate 'line', 1273
    nqp_get_sc_object $P5019, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5018, $P5019, "NQP"
    get_who $P5017, $P5018
    set $P5016, $P5017["Grammar"]
    unless_null $P5016, fallback296
    nqp_get_sc_object $P5020, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5016, $P5020
  fallback296:
    $P5016."O"(":prec<v=>, :assoc<unary>", "%symbolic_unary")
.annotate 'line', 1274
    nqp_get_sc_object $P5024, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5023, $P5024, "NQP"
    get_who $P5022, $P5023
    set $P5021, $P5022["Grammar"]
    unless_null $P5021, fallback297
    nqp_get_sc_object $P5025, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5021, $P5025
  fallback297:
    $P5021."O"(":prec<u=>, :assoc<left>", "%multiplicative")
.annotate 'line', 1275
    nqp_get_sc_object $P5029, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5028, $P5029, "NQP"
    get_who $P5027, $P5028
    set $P5026, $P5027["Grammar"]
    unless_null $P5026, fallback298
    nqp_get_sc_object $P5030, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5026, $P5030
  fallback298:
    $P5026."O"(":prec<t=>, :assoc<left>", "%additive")
.annotate 'line', 1276
    nqp_get_sc_object $P5034, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5033, $P5034, "NQP"
    get_who $P5032, $P5033
    set $P5031, $P5032["Grammar"]
    unless_null $P5031, fallback299
    nqp_get_sc_object $P5035, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5031, $P5035
  fallback299:
    $P5031."O"(":prec<r=>, :assoc<left>", "%concatenation")
.annotate 'line', 1277
    nqp_get_sc_object $P5039, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5038, $P5039, "NQP"
    get_who $P5037, $P5038
    set $P5036, $P5037["Grammar"]
    unless_null $P5036, fallback300
    nqp_get_sc_object $P5040, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5036, $P5040
  fallback300:
    $P5036."O"(":prec<m=>, :assoc<left>", "%relational")
.annotate 'line', 1278
    nqp_get_sc_object $P5044, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5043, $P5044, "NQP"
    get_who $P5042, $P5043
    set $P5041, $P5042["Grammar"]
    unless_null $P5041, fallback301
    nqp_get_sc_object $P5045, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5041, $P5045
  fallback301:
    $P5041."O"(":prec<l=>, :assoc<left>", "%tight_and")
.annotate 'line', 1279
    nqp_get_sc_object $P5049, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5048, $P5049, "NQP"
    get_who $P5047, $P5048
    set $P5046, $P5047["Grammar"]
    unless_null $P5046, fallback302
    nqp_get_sc_object $P5050, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5046, $P5050
  fallback302:
    $P5046."O"(":prec<k=>, :assoc<left>", "%tight_or")
.annotate 'line', 1280
    nqp_get_sc_object $P5054, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5053, $P5054, "NQP"
    get_who $P5052, $P5053
    set $P5051, $P5052["Grammar"]
    unless_null $P5051, fallback303
    nqp_get_sc_object $P5055, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5051, $P5055
  fallback303:
    $P5051."O"(":prec<j=>, :assoc<right>", "%conditional")
.annotate 'line', 1281
    nqp_get_sc_object $P5059, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5058, $P5059, "NQP"
    get_who $P5057, $P5058
    set $P5056, $P5057["Grammar"]
    unless_null $P5056, fallback304
    nqp_get_sc_object $P5060, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5056, $P5060
  fallback304:
    $P5056."O"(":prec<i=>, :assoc<right>", "%assignment")
.annotate 'line', 1282
    nqp_get_sc_object $P5064, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5063, $P5064, "NQP"
    get_who $P5062, $P5063
    set $P5061, $P5062["Grammar"]
    unless_null $P5061, fallback305
    nqp_get_sc_object $P5065, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5061, $P5065
  fallback305:
    $P5061."O"(":prec<g=>, :assoc<list>, :nextterm<nulltermish>", "%comma")
.annotate 'line', 1283
    nqp_get_sc_object $P5069, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5068, $P5069, "NQP"
    get_who $P5067, $P5068
    set $P5066, $P5067["Grammar"]
    unless_null $P5066, fallback306
    nqp_get_sc_object $P5070, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5066, $P5070
  fallback306:
    $P5066."O"(":prec<f=>, :assoc<list>", "%list_infix")
.annotate 'line', 1284
    nqp_get_sc_object $P5074, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5073, $P5074, "NQP"
    get_who $P5072, $P5073
    set $P5071, $P5072["Grammar"]
    unless_null $P5071, fallback307
    nqp_get_sc_object $P5075, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5071, $P5075
  fallback307:
    $P5071."O"(":prec<e=>, :assoc<unary>", "%list_prefix")
.annotate 'line', 603
    .const 'Sub' $P5076 = 'cuid_32_1360256386.79' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_33_1360256386.79' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_34_1360256386.79' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_35_1360256386.79' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_36_1360256386.79' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_37_1360256386.79' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_38_1360256386.79' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_40_1360256386.79' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_42_1360256386.79' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_43_1360256386.79' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_44_1360256386.79' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_46_1360256386.79' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_47_1360256386.79' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_48_1360256386.79' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_49_1360256386.79' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_50_1360256386.79' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_51_1360256386.79' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_52_1360256386.79' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_53_1360256386.79' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_54_1360256386.79' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_55_1360256386.79' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_56_1360256386.79' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_57_1360256386.79' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_58_1360256386.79' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_59_1360256386.79' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_60_1360256386.79' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_61_1360256386.79' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_62_1360256386.79' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_64_1360256386.79' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_65_1360256386.79' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_66_1360256386.79' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_67_1360256386.79' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_68_1360256386.79' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_69_1360256386.79' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_70_1360256386.79' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_71_1360256386.79' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_72_1360256386.79' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_73_1360256386.79' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_74_1360256386.79' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_75_1360256386.79' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_76_1360256386.79' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_77_1360256386.79' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_78_1360256386.79' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_79_1360256386.79' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_80_1360256386.79' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_81_1360256386.79' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_82_1360256386.79' 
    capture_lex $P5122
    .const 'Sub' $P5123 = 'cuid_83_1360256386.79' 
    capture_lex $P5123
    .const 'Sub' $P5124 = 'cuid_84_1360256386.79' 
    capture_lex $P5124
    .const 'Sub' $P5125 = 'cuid_85_1360256386.79' 
    capture_lex $P5125
    .const 'Sub' $P5126 = 'cuid_86_1360256386.79' 
    capture_lex $P5126
    .const 'Sub' $P5127 = 'cuid_87_1360256386.79' 
    capture_lex $P5127
    .const 'Sub' $P5128 = 'cuid_90_1360256386.79' 
    capture_lex $P5128
    .const 'Sub' $P5129 = 'cuid_91_1360256386.79' 
    capture_lex $P5129
    .const 'Sub' $P5130 = 'cuid_92_1360256386.79' 
    capture_lex $P5130
    .const 'Sub' $P5131 = 'cuid_93_1360256386.79' 
    capture_lex $P5131
    .const 'Sub' $P5132 = 'cuid_94_1360256386.79' 
    capture_lex $P5132
    .const 'Sub' $P5133 = 'cuid_95_1360256386.79' 
    capture_lex $P5133
    .const 'Sub' $P5134 = 'cuid_96_1360256386.79' 
    capture_lex $P5134
    .const 'Sub' $P5135 = 'cuid_97_1360256386.79' 
    capture_lex $P5135
    .const 'Sub' $P5136 = 'cuid_98_1360256386.79' 
    capture_lex $P5136
    .const 'Sub' $P5137 = 'cuid_99_1360256386.79' 
    capture_lex $P5137
    .const 'Sub' $P5138 = 'cuid_100_1360256386.79' 
    capture_lex $P5138
    .const 'Sub' $P5139 = 'cuid_101_1360256386.79' 
    capture_lex $P5139
    .const 'Sub' $P5140 = 'cuid_102_1360256386.79' 
    capture_lex $P5140
    .const 'Sub' $P5141 = 'cuid_103_1360256386.79' 
    capture_lex $P5141
    .const 'Sub' $P5142 = 'cuid_104_1360256386.79' 
    capture_lex $P5142
    .const 'Sub' $P5143 = 'cuid_105_1360256386.79' 
    capture_lex $P5143
    .const 'Sub' $P5144 = 'cuid_106_1360256386.79' 
    capture_lex $P5144
    .const 'Sub' $P5145 = 'cuid_107_1360256386.79' 
    capture_lex $P5145
    .const 'Sub' $P5146 = 'cuid_108_1360256386.79' 
    capture_lex $P5146
    .const 'Sub' $P5147 = 'cuid_109_1360256386.79' 
    capture_lex $P5147
    .const 'Sub' $P5148 = 'cuid_110_1360256386.79' 
    capture_lex $P5148
    .const 'Sub' $P5149 = 'cuid_111_1360256386.79' 
    capture_lex $P5149
    .const 'Sub' $P5150 = 'cuid_112_1360256386.79' 
    capture_lex $P5150
    .const 'Sub' $P5151 = 'cuid_113_1360256386.79' 
    capture_lex $P5151
    .const 'Sub' $P5152 = 'cuid_114_1360256386.79' 
    capture_lex $P5152
    .const 'Sub' $P5153 = 'cuid_115_1360256386.79' 
    capture_lex $P5153
    .const 'Sub' $P5154 = 'cuid_116_1360256386.79' 
    capture_lex $P5154
    .const 'Sub' $P5155 = 'cuid_117_1360256386.79' 
    capture_lex $P5155
    .const 'Sub' $P5156 = 'cuid_118_1360256386.79' 
    capture_lex $P5156
    .const 'Sub' $P5157 = 'cuid_119_1360256386.79' 
    capture_lex $P5157
    .const 'Sub' $P5158 = 'cuid_120_1360256386.79' 
    capture_lex $P5158
    .const 'Sub' $P5159 = 'cuid_121_1360256386.79' 
    capture_lex $P5159
    .const 'Sub' $P5160 = 'cuid_122_1360256386.79' 
    capture_lex $P5160
    .const 'Sub' $P5161 = 'cuid_123_1360256386.79' 
    capture_lex $P5161
    .const 'Sub' $P5162 = 'cuid_124_1360256386.79' 
    capture_lex $P5162
    .const 'Sub' $P5163 = 'cuid_125_1360256386.79' 
    capture_lex $P5163
    .const 'Sub' $P5164 = 'cuid_126_1360256386.79' 
    capture_lex $P5164
    .const 'Sub' $P5165 = 'cuid_128_1360256386.79' 
    capture_lex $P5165
    .const 'Sub' $P5166 = 'cuid_129_1360256386.79' 
    capture_lex $P5166
    .const 'Sub' $P5167 = 'cuid_130_1360256386.79' 
    capture_lex $P5167
    .const 'Sub' $P5168 = 'cuid_131_1360256386.79' 
    capture_lex $P5168
    .const 'Sub' $P5169 = 'cuid_132_1360256386.79' 
    capture_lex $P5169
    .const 'Sub' $P5170 = 'cuid_133_1360256386.79' 
    capture_lex $P5170
    .const 'Sub' $P5171 = 'cuid_134_1360256386.79' 
    capture_lex $P5171
    .const 'Sub' $P5172 = 'cuid_135_1360256386.79' 
    capture_lex $P5172
    .const 'Sub' $P5173 = 'cuid_136_1360256386.79' 
    capture_lex $P5173
    .const 'Sub' $P5174 = 'cuid_137_1360256386.79' 
    capture_lex $P5174
    .const 'Sub' $P5175 = 'cuid_138_1360256386.79' 
    capture_lex $P5175
    .const 'Sub' $P5176 = 'cuid_139_1360256386.79' 
    capture_lex $P5176
    .const 'Sub' $P5177 = 'cuid_140_1360256386.79' 
    capture_lex $P5177
    .const 'Sub' $P5178 = 'cuid_141_1360256386.79' 
    capture_lex $P5178
    .const 'Sub' $P5179 = 'cuid_142_1360256386.79' 
    capture_lex $P5179
    .const 'Sub' $P5180 = 'cuid_143_1360256386.79' 
    capture_lex $P5180
    .const 'Sub' $P5181 = 'cuid_144_1360256386.79' 
    capture_lex $P5181
    .const 'Sub' $P5182 = 'cuid_145_1360256386.79' 
    capture_lex $P5182
    .const 'Sub' $P5183 = 'cuid_146_1360256386.79' 
    capture_lex $P5183
    .const 'Sub' $P5184 = 'cuid_147_1360256386.79' 
    capture_lex $P5184
    .const 'Sub' $P5185 = 'cuid_148_1360256386.79' 
    capture_lex $P5185
    .const 'Sub' $P5186 = 'cuid_149_1360256386.79' 
    capture_lex $P5186
    .const 'Sub' $P5187 = 'cuid_150_1360256386.79' 
    capture_lex $P5187
    .const 'Sub' $P5188 = 'cuid_151_1360256386.79' 
    capture_lex $P5188
    .const 'Sub' $P5189 = 'cuid_152_1360256386.79' 
    capture_lex $P5189
    .const 'Sub' $P5190 = 'cuid_153_1360256386.79' 
    capture_lex $P5190
    .const 'Sub' $P5191 = 'cuid_154_1360256386.79' 
    capture_lex $P5191
    .const 'Sub' $P5192 = 'cuid_155_1360256386.79' 
    capture_lex $P5192
    .const 'Sub' $P5193 = 'cuid_156_1360256386.79' 
    capture_lex $P5193
    .const 'Sub' $P5194 = 'cuid_157_1360256386.79' 
    capture_lex $P5194
    .const 'Sub' $P5195 = 'cuid_158_1360256386.79' 
    capture_lex $P5195
    .const 'Sub' $P5196 = 'cuid_159_1360256386.79' 
    capture_lex $P5196
    .const 'Sub' $P5197 = 'cuid_160_1360256386.79' 
    capture_lex $P5197
    .const 'Sub' $P5198 = 'cuid_161_1360256386.79' 
    capture_lex $P5198
    .const 'Sub' $P5199 = 'cuid_162_1360256386.79' 
    capture_lex $P5199
    .const 'Sub' $P5200 = 'cuid_163_1360256386.79' 
    capture_lex $P5200
    .const 'Sub' $P5201 = 'cuid_164_1360256386.79' 
    capture_lex $P5201
    .const 'Sub' $P5202 = 'cuid_165_1360256386.79' 
    capture_lex $P5202
    .const 'Sub' $P5203 = 'cuid_166_1360256386.79' 
    capture_lex $P5203
    .const 'Sub' $P5204 = 'cuid_167_1360256386.79' 
    capture_lex $P5204
    .const 'Sub' $P5205 = 'cuid_168_1360256386.79' 
    capture_lex $P5205
    .const 'Sub' $P5206 = 'cuid_169_1360256386.79' 
    capture_lex $P5206
    .const 'Sub' $P5207 = 'cuid_170_1360256386.79' 
    capture_lex $P5207
    .const 'Sub' $P5208 = 'cuid_171_1360256386.79' 
    capture_lex $P5208
    .const 'Sub' $P5209 = 'cuid_172_1360256386.79' 
    capture_lex $P5209
    .const 'Sub' $P5210 = 'cuid_173_1360256386.79' 
    capture_lex $P5210
    .const 'Sub' $P5211 = 'cuid_174_1360256386.79' 
    capture_lex $P5211
    .const 'Sub' $P5212 = 'cuid_175_1360256386.79' 
    capture_lex $P5212
    .const 'Sub' $P5213 = 'cuid_176_1360256386.79' 
    capture_lex $P5213
    .const 'Sub' $P5214 = 'cuid_177_1360256386.79' 
    capture_lex $P5214
    .const 'Sub' $P5215 = 'cuid_178_1360256386.79' 
    capture_lex $P5215
    .const 'Sub' $P5216 = 'cuid_179_1360256386.79' 
    capture_lex $P5216
    .const 'Sub' $P5217 = 'cuid_180_1360256386.79' 
    capture_lex $P5217
    .const 'Sub' $P5218 = 'cuid_181_1360256386.79' 
    capture_lex $P5218
    .const 'Sub' $P5219 = 'cuid_182_1360256386.79' 
    capture_lex $P5219
    .const 'Sub' $P5220 = 'cuid_183_1360256386.79' 
    capture_lex $P5220
    .const 'Sub' $P5221 = 'cuid_184_1360256386.79' 
    capture_lex $P5221
    .const 'Sub' $P5222 = 'cuid_185_1360256386.79' 
    capture_lex $P5222
    .const 'Sub' $P5223 = 'cuid_186_1360256386.79' 
    capture_lex $P5223
    .const 'Sub' $P5224 = 'cuid_187_1360256386.79' 
    capture_lex $P5224
    .const 'Sub' $P5225 = 'cuid_188_1360256386.79' 
    capture_lex $P5225
    .const 'Sub' $P5226 = 'cuid_189_1360256386.79' 
    capture_lex $P5226
    .const 'Sub' $P5227 = 'cuid_190_1360256386.79' 
    capture_lex $P5227
    .const 'Sub' $P5228 = 'cuid_191_1360256386.79' 
    capture_lex $P5228
    .const 'Sub' $P5229 = 'cuid_192_1360256386.79' 
    capture_lex $P5229
    .const 'Sub' $P5230 = 'cuid_193_1360256386.79' 
    capture_lex $P5230
    .const 'Sub' $P5231 = 'cuid_194_1360256386.79' 
    capture_lex $P5231
    .const 'Sub' $P5232 = 'cuid_195_1360256386.79' 
    capture_lex $P5232
    .const 'Sub' $P5233 = 'cuid_196_1360256386.79' 
    capture_lex $P5233
    .const 'Sub' $P5234 = 'cuid_197_1360256386.79' 
    capture_lex $P5234
    .const 'Sub' $P5235 = 'cuid_198_1360256386.79' 
    capture_lex $P5235
    .const 'Sub' $P5236 = 'cuid_199_1360256386.79' 
    capture_lex $P5236
    .const 'Sub' $P5237 = 'cuid_200_1360256386.79' 
    capture_lex $P5237
    .const 'Sub' $P5238 = 'cuid_201_1360256386.79' 
    capture_lex $P5238
    .const 'Sub' $P5239 = 'cuid_202_1360256386.79' 
    capture_lex $P5239
    .const 'Sub' $P5240 = 'cuid_203_1360256386.79' 
    capture_lex $P5240
    .const 'Sub' $P5241 = 'cuid_204_1360256386.79' 
    capture_lex $P5241
    .const 'Sub' $P5242 = 'cuid_205_1360256386.79' 
    capture_lex $P5242
    .const 'Sub' $P5243 = 'cuid_206_1360256386.79' 
    capture_lex $P5243
    .const 'Sub' $P5244 = 'cuid_207_1360256386.79' 
    capture_lex $P5244
    .const 'Sub' $P5245 = 'cuid_208_1360256386.79' 
    capture_lex $P5245
    .const 'Sub' $P5246 = 'cuid_209_1360256386.79' 
    capture_lex $P5246
    .const 'Sub' $P5247 = 'cuid_210_1360256386.79' 
    capture_lex $P5247
    .const 'Sub' $P5248 = 'cuid_211_1360256386.79' 
    capture_lex $P5248
    .const 'Sub' $P5249 = 'cuid_212_1360256386.79' 
    capture_lex $P5249
    .const 'Sub' $P5250 = 'cuid_213_1360256386.79' 
    capture_lex $P5250
    .const 'Sub' $P5251 = 'cuid_214_1360256386.79' 
    capture_lex $P5251
    .const 'Sub' $P5252 = 'cuid_215_1360256386.79' 
    capture_lex $P5252
    .const 'Sub' $P5253 = 'cuid_216_1360256386.79' 
    capture_lex $P5253
    .const 'Sub' $P5254 = 'cuid_217_1360256386.79' 
    capture_lex $P5254
    .const 'Sub' $P5255 = 'cuid_219_1360256386.79' 
    capture_lex $P5255
    .const 'Sub' $P5256 = 'cuid_221_1360256386.79' 
    capture_lex $P5256
    .const 'Sub' $P5257 = 'cuid_223_1360256386.79' 
    capture_lex $P5257
    .return ($P5257) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_32_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 604
    .param pmc _lex_param_0 
    .lex "%*LANG", $P101 
    .lex "%*HOW", $P102 
    .lex "$file", $P103 
    .lex "$source_id", $P104 
    .lex "$*W", $P105 
    .lex "$*SCOPE", $P106 
    .lex "$*MULTINESS", $P107 
    .lex "$*PKGDECL", $P108 
    .lex "$*INVOCANT_OK", $P109 
    .lex "$*RETURN_USED", $P110 
    .lex "$*CONTROL_USED", $P111 
    .lex "%*HANDLERS", $P112 
    .lex "self", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P104, $P5004
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P105, $P5005
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P106, $P5006
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P107, $P5007
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P108, $P5008
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P109, $P5009
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P110, $P5010
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P111, $P5011
    new $P5012, 'Hash'
    set $P112, $P5012
    unless_null $P101, fallback311
    nqp_get_sc_object $P5022, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["%LANG"]
    unless_null $P5020, fallback312
    nqp_get_sc_object $P5024, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5023, $P5024
    new $P5025, 'Hash'
    set $P5023["%LANG"], $P5025
    set $P5020, $P5025
  fallback312:
    unless_null $P5020, vivi_61313
    die "Contextual %*LANG not found"
    box $P5026, "Contextual %*LANG not found"
    set $P5020, $P5026
  vivi_61313:
    set $P101, $P5020
  fallback311:
    nqp_get_sc_object $P5030, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5029, $P5030, "NQP"
    get_who $P5028, $P5029
    set $P5027, $P5028["Regex"]
    unless_null $P5027, fallback314
    nqp_get_sc_object $P5031, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5027, $P5031
  fallback314:
    set $P101["Regex"], $P5027
    unless_null $P101, fallback315
    nqp_get_sc_object $P5034, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%LANG"]
    unless_null $P5032, fallback316
    nqp_get_sc_object $P5036, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%LANG"], $P5037
    set $P5032, $P5037
  fallback316:
    unless_null $P5032, vivi_62317
    die "Contextual %*LANG not found"
    box $P5038, "Contextual %*LANG not found"
    set $P5032, $P5038
  vivi_62317:
    set $P101, $P5032
  fallback315:
    nqp_get_sc_object $P5042, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5041, $P5042, "NQP"
    get_who $P5040, $P5041
    set $P5039, $P5040["RegexActions"]
    unless_null $P5039, fallback318
    nqp_get_sc_object $P5043, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5039, $P5043
  fallback318:
    set $P101["Regex-actions"], $P5039
    unless_null $P101, fallback319
    nqp_get_sc_object $P5046, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["%LANG"]
    unless_null $P5044, fallback320
    nqp_get_sc_object $P5048, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5047, $P5048
    new $P5049, 'Hash'
    set $P5047["%LANG"], $P5049
    set $P5044, $P5049
  fallback320:
    unless_null $P5044, vivi_63321
    die "Contextual %*LANG not found"
    box $P5050, "Contextual %*LANG not found"
    set $P5044, $P5050
  vivi_63321:
    set $P101, $P5044
  fallback319:
    nqp_get_sc_object $P5054, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5053, $P5054, "NQP"
    get_who $P5052, $P5053
    set $P5051, $P5052["Grammar"]
    unless_null $P5051, fallback322
    nqp_get_sc_object $P5055, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5051, $P5055
  fallback322:
    set $P101["MAIN"], $P5051
    unless_null $P101, fallback323
    nqp_get_sc_object $P5058, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5057, $P5058
    set $P5056, $P5057["%LANG"]
    unless_null $P5056, fallback324
    nqp_get_sc_object $P5060, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5059, $P5060
    new $P5061, 'Hash'
    set $P5059["%LANG"], $P5061
    set $P5056, $P5061
  fallback324:
    unless_null $P5056, vivi_64325
    die "Contextual %*LANG not found"
    box $P5062, "Contextual %*LANG not found"
    set $P5056, $P5062
  vivi_64325:
    set $P101, $P5056
  fallback323:
    nqp_get_sc_object $P5066, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5065, $P5066, "NQP"
    get_who $P5064, $P5065
    set $P5063, $P5064["Actions"]
    unless_null $P5063, fallback326
    nqp_get_sc_object $P5067, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5063, $P5067
  fallback326:
    set $P101["MAIN-actions"], $P5063
    unless_null $P102, fallback330
    nqp_get_sc_object $P5077, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["%HOW"]
    unless_null $P5075, fallback331
    nqp_get_sc_object $P5079, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5078, $P5079
    new $P5080, 'Hash'
    set $P5078["%HOW"], $P5080
    set $P5075, $P5080
  fallback331:
    unless_null $P5075, vivi_66332
    die "Contextual %*HOW not found"
    box $P5081, "Contextual %*HOW not found"
    set $P5075, $P5081
  vivi_66332:
    set $P102, $P5075
  fallback330:
    get_knowhow $P5082
    set $P102["knowhow"], $P5082
    unless_null $P102, fallback333
    nqp_get_sc_object $P5085, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["%HOW"]
    unless_null $P5083, fallback334
    nqp_get_sc_object $P5087, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5086, $P5087
    new $P5088, 'Hash'
    set $P5086["%HOW"], $P5088
    set $P5083, $P5088
  fallback334:
    unless_null $P5083, vivi_67335
    die "Contextual %*HOW not found"
    box $P5089, "Contextual %*HOW not found"
    set $P5083, $P5089
  vivi_67335:
    set $P102, $P5083
  fallback333:
    get_knowhow_attribute $P5090
    set $P102["knowhow-attr"], $P5090
    find_caller_lex $P5091, "$?FILES"
    set $P103, $P5091
.annotate 'line', 623
    nqp_decontainerize $P5092, _lex_param_0
    $P5093 = $P5092."target"()
    set $S5003, $P5093
    nqp_sha1 $S5002, $S5003
    find_dynamic_lex $P5096, "%*COMPILING"
    unless_null $P5096, fallback338
    nqp_get_sc_object $P5099, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5098, $P5099
    set $P5097, $P5098["%COMPILING"]
    unless_null $P5097, fallback339
    nqp_get_sc_object $P5101, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5100, $P5101
    new $P5102, 'Hash'
    set $P5100["%COMPILING"], $P5102
    set $P5097, $P5102
  fallback339:
    unless_null $P5097, vivi_69340
    die "Contextual %*COMPILING not found"
    box $P5103, "Contextual %*COMPILING not found"
    set $P5097, $P5103
  vivi_69340:
    set $P5096, $P5097
  fallback338:
    set $P5095, $P5096["%?OPTIONS"]
    unless_null $P5095, fallback341
    nqp_get_sc_object $P5104, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5095, $P5104
  fallback341:
    set $P5094, $P5095["stable-sc"]
    unless_null $P5094, fallback342
    nqp_get_sc_object $P5105, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5094, $P5105
  fallback342:
    unless $P5094 goto if68_else336 
    set $S5006, ""
    goto if68_end337
  if68_else336:
    time $N5001
    set $S5005, $N5001
    concat $S5004, "-", $S5005
    set $S5006, $S5004
  if68_end337:
    concat $S5001, $S5002, $S5006
    box $P5106, $S5001
    set $P104, $P5106
    isnull $I5001, $P103
    unless $I5001 goto if70_else343 
.annotate 'line', 626
    nqp_get_sc_object $P5110, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5109, $P5110, "NQP"
    get_who $P5108, $P5109
    set $P5107, $P5108["World"]
    unless_null $P5107, fallback345
    nqp_get_sc_object $P5111, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5107, $P5111
  fallback345:
    $P5112 = $P5107."new"($P104 :named("handle"))
    set $P5119, $P5112
    goto if70_end344
  if70_else343:
.annotate 'line', 627
    nqp_get_sc_object $P5116, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5115, $P5116, "NQP"
    get_who $P5114, $P5115
    set $P5113, $P5114["World"]
    unless_null $P5113, fallback346
    nqp_get_sc_object $P5117, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5113, $P5117
  fallback346:
    $P5118 = $P5113."new"($P104 :named("handle"), $P103 :named("description"))
    set $P5119, $P5118
  if70_end344:
    set $P105, $P5119
    box $P5120, ""
    set $P106, $P5120
    box $P5121, ""
    set $P107, $P5121
    box $P5122, ""
    set $P108, $P5122
    box $P5123, 0
    set $P109, $P5123
    box $P5124, 0
    set $P110, $P5124
    box $P5125, 0
    set $P111, $P5125
.annotate 'line', 636
    nqp_decontainerize $P5133, _lex_param_0
    $P5134 = $P5133."comp_unit"()
    .return ($P5134) 
.end
.HLL "nqp"
.namespace []
.sub "identifier" :subid("cuid_33_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 641
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx72_tgt
    .local int rx72_pos
    .local int rx72_off
    .local int rx72_eos
    .local int rx72_rep
    .local pmc rx72_cur
    .local pmc rx72_curclass
    .local pmc rx72_bstack
    .local pmc rx72_cstack
    (rx72_cur, rx72_tgt, rx72_pos, rx72_curclass, rx72_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx72_cur
    length rx72_eos, rx72_tgt
    eq $I19, 1, rx72_restart352
    gt rx72_pos, rx72_eos, rx72_fail353
    repr_get_attr_int $I11, self, rx72_curclass, "$!from"
    ne $I11, -1, rxscan73_done359
    goto rxscan73_scan358
  rxscan73_loop357:
    inc rx72_pos
    gt rx72_pos, rx72_eos, rx72_fail353
    repr_bind_attr_int rx72_cur, rx72_curclass, "$!from", rx72_pos
  rxscan73_scan358:
    nqp_rxmark rx72_bstack, rxscan73_loop357, rx72_pos, 0
  rxscan73_done359:
    repr_bind_attr_int rx72_cur, rx72_curclass, "$!pos", rx72_pos
    $P11 = rx72_cur."ident"()
    repr_get_attr_int $I11, $P11, rx72_curclass, "$!pos"
    lt $I11, 0, rx72_fail353
    repr_get_attr_int rx72_pos, $P11, rx72_curclass, "$!pos"
    nqp_rxmark rx72_bstack, rxquantr75_done362, rx72_pos, 0
  rxquantr75_loop361:
  alt76_0364:
    nqp_rxmark rx72_bstack, alt76_1365, rx72_pos, 0
    add $I11, rx72_pos, 1
    gt $I11, rx72_eos, rx72_fail353
    substr $S10, rx72_tgt, rx72_pos, 1
    ne $S10, ucs4:"-", rx72_fail353
    add rx72_pos, 1
    goto alt76_end363
  alt76_1365:
    ge rx72_pos, rx72_eos, rx72_fail353
    substr $S11, rx72_tgt, rx72_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx72_fail353
    inc rx72_pos
  alt76_end363:
    repr_bind_attr_int rx72_cur, rx72_curclass, "$!pos", rx72_pos
    $P11 = rx72_cur."ident"()
    repr_get_attr_int $I11, $P11, rx72_curclass, "$!pos"
    lt $I11, 0, rx72_fail353
    repr_get_attr_int rx72_pos, $P11, rx72_curclass, "$!pos"
    nqp_rxpeek $I19, rx72_bstack, rxquantr75_done362
    inc $I19
    inc $I19
    set rx72_rep, rx72_bstack[$I19]
    nqp_rxcommit rx72_bstack, rxquantr75_done362
    inc rx72_rep
    nqp_rxmark rx72_bstack, rxquantr75_done362, rx72_pos, rx72_rep
    goto rxquantr75_loop361
  rxquantr75_done362:
    rx72_cur."!cursor_pass"(rx72_pos, "identifier", 'backtrack'=>1)
    .return (rx72_cur)
  rx72_restart352:
    repr_get_attr_obj rx72_cstack, rx72_cur, rx72_curclass, "$!cstack"
  rx72_fail353:
    unless rx72_bstack, rx72_done351
    pop $I19, rx72_bstack
    if_null rx72_cstack, rx72_cstack_done356
    unless rx72_cstack, rx72_cstack_done356
    dec $I19
    set $P11, rx72_cstack[$I19]
  rx72_cstack_done356:
    pop rx72_rep, rx72_bstack
    pop rx72_pos, rx72_bstack
    pop $I19, rx72_bstack
    lt rx72_pos, -1, rx72_done351
    lt rx72_pos, 0, rx72_fail353
    eq $I19, 0, rx72_fail353
    nqp_islist $I20, rx72_cstack
    unless $I20, rx72_jump354
    elements $I18, rx72_bstack
    le $I18, 0, rx72_cut355
    dec $I18
    set $I18, rx72_bstack[$I18]
  rx72_cut355:
    assign rx72_cstack, $I18
  rx72_jump354:
    jump $I19
  rx72_done351:
    rx72_cur."!cursor_fail"()
    .return (rx72_cur) 
.end
.HLL "nqp"
.namespace []
.sub "name" :subid("cuid_34_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 643
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx78_tgt
    .local int rx78_pos
    .local int rx78_off
    .local int rx78_eos
    .local int rx78_rep
    .local pmc rx78_cur
    .local pmc rx78_curclass
    .local pmc rx78_bstack
    .local pmc rx78_cstack
    (rx78_cur, rx78_tgt, rx78_pos, rx78_curclass, rx78_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx78_cur
    length rx78_eos, rx78_tgt
    eq $I19, 1, rx78_restart369
    gt rx78_pos, rx78_eos, rx78_fail370
    repr_get_attr_int $I11, self, rx78_curclass, "$!from"
    ne $I11, -1, rxscan79_done376
    goto rxscan79_scan375
  rxscan79_loop374:
    inc rx78_pos
    gt rx78_pos, rx78_eos, rx78_fail370
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!from", rx78_pos
  rxscan79_scan375:
    nqp_rxmark rx78_bstack, rxscan79_loop374, rx78_pos, 0
  rxscan79_done376:
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!pos", rx78_pos
    $P11 = rx78_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx78_curclass, "$!pos"
    lt $I11, 0, rx78_fail370
    nqp_rxmark rx78_bstack, rxsubrule80_pass377, -1, 0
  rxsubrule80_pass377:
    rx78_cstack = rx78_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx78_pos, $P11, rx78_curclass, "$!pos"
    nqp_rxmark rx78_bstack, rxquantr81_done379, rx78_pos, 0
  rxquantr81_loop378:
    add $I11, rx78_pos, 2
    gt $I11, rx78_eos, rx78_fail370
    substr $S10, rx78_tgt, rx78_pos, 2
    ne $S10, ucs4:"::", rx78_fail370
    add rx78_pos, 2
    repr_bind_attr_int rx78_cur, rx78_curclass, "$!pos", rx78_pos
    $P11 = rx78_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx78_curclass, "$!pos"
    lt $I11, 0, rx78_fail370
    nqp_rxmark rx78_bstack, rxsubrule82_pass380, -1, 0
  rxsubrule82_pass380:
    rx78_cstack = rx78_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx78_pos, $P11, rx78_curclass, "$!pos"
    nqp_rxpeek $I19, rx78_bstack, rxquantr81_done379
    inc $I19
    inc $I19
    set rx78_rep, rx78_bstack[$I19]
    nqp_rxcommit rx78_bstack, rxquantr81_done379
    inc rx78_rep
    nqp_rxmark rx78_bstack, rxquantr81_done379, rx78_pos, rx78_rep
    goto rxquantr81_loop378
  rxquantr81_done379:
    rx78_cur."!cursor_pass"(rx78_pos, "name", 'backtrack'=>1)
    .return (rx78_cur)
  rx78_restart369:
    repr_get_attr_obj rx78_cstack, rx78_cur, rx78_curclass, "$!cstack"
  rx78_fail370:
    unless rx78_bstack, rx78_done368
    pop $I19, rx78_bstack
    if_null rx78_cstack, rx78_cstack_done373
    unless rx78_cstack, rx78_cstack_done373
    dec $I19
    set $P11, rx78_cstack[$I19]
  rx78_cstack_done373:
    pop rx78_rep, rx78_bstack
    pop rx78_pos, rx78_bstack
    pop $I19, rx78_bstack
    lt rx78_pos, -1, rx78_done368
    lt rx78_pos, 0, rx78_fail370
    eq $I19, 0, rx78_fail370
    nqp_islist $I20, rx78_cstack
    unless $I20, rx78_jump371
    elements $I18, rx78_bstack
    le $I18, 0, rx78_cut372
    dec $I18
    set $I18, rx78_bstack[$I18]
  rx78_cut372:
    assign rx78_cstack, $I18
  rx78_jump371:
    jump $I19
  rx78_done368:
    rx78_cur."!cursor_fail"()
    .return (rx78_cur) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_35_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 645
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx83_tgt
    .local int rx83_pos
    .local int rx83_off
    .local int rx83_eos
    .local int rx83_rep
    .local pmc rx83_cur
    .local pmc rx83_curclass
    .local pmc rx83_bstack
    .local pmc rx83_cstack
    (rx83_cur, rx83_tgt, rx83_pos, rx83_curclass, rx83_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx83_cur
    length rx83_eos, rx83_tgt
    eq $I19, 1, rx83_restart383
    gt rx83_pos, rx83_eos, rx83_fail384
    repr_get_attr_int $I11, self, rx83_curclass, "$!from"
    ne $I11, -1, rxscan84_done390
    goto rxscan84_scan389
  rxscan84_loop388:
    inc rx83_pos
    gt rx83_pos, rx83_eos, rx83_fail384
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!from", rx83_pos
  rxscan84_scan389:
    nqp_rxmark rx83_bstack, rxscan84_loop388, rx83_pos, 0
  rxscan84_done390:
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!pos", rx83_pos
    $P11 = rx83_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx83_curclass, "$!pos"
    lt $I11, 0, rx83_fail384
    nqp_rxmark rx83_bstack, rxsubrule85_pass391, -1, 0
  rxsubrule85_pass391:
    rx83_cstack = rx83_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx83_pos, $P11, rx83_curclass, "$!pos"
    nqp_rxmark rx83_bstack, rxquantr86_done393, rx83_pos, 0
  rxquantr86_loop392:
    repr_bind_attr_int rx83_cur, rx83_curclass, "$!pos", rx83_pos
    $P11 = rx83_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx83_curclass, "$!pos"
    lt $I11, 0, rx83_fail384
    goto rxsubrule87_pass394
  rxsubrule87_back395:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx83_curclass, "$!pos"
    lt $I11, 0, rx83_fail384
  rxsubrule87_pass394:
    rx83_cstack = rx83_cur."!cursor_capture"($P11, "colonpair")
    set_addr $I11, rxsubrule87_back395
    push rx83_bstack, $I11
    push rx83_bstack, 0
    push rx83_bstack, rx83_pos
    elements $I11, rx83_cstack
    push rx83_bstack, $I11
    repr_get_attr_int rx83_pos, $P11, rx83_curclass, "$!pos"
    nqp_rxpeek $I19, rx83_bstack, rxquantr86_done393
    inc $I19
    inc $I19
    set rx83_rep, rx83_bstack[$I19]
    nqp_rxcommit rx83_bstack, rxquantr86_done393
    inc rx83_rep
  rxquantr86_done393:
    rx83_cur."!cursor_pass"(rx83_pos, "deflongname", 'backtrack'=>1)
    .return (rx83_cur)
  rx83_restart383:
    repr_get_attr_obj rx83_cstack, rx83_cur, rx83_curclass, "$!cstack"
  rx83_fail384:
    unless rx83_bstack, rx83_done382
    pop $I19, rx83_bstack
    if_null rx83_cstack, rx83_cstack_done387
    unless rx83_cstack, rx83_cstack_done387
    dec $I19
    set $P11, rx83_cstack[$I19]
  rx83_cstack_done387:
    pop rx83_rep, rx83_bstack
    pop rx83_pos, rx83_bstack
    pop $I19, rx83_bstack
    lt rx83_pos, -1, rx83_done382
    lt rx83_pos, 0, rx83_fail384
    eq $I19, 0, rx83_fail384
    nqp_islist $I20, rx83_cstack
    unless $I20, rx83_jump385
    elements $I18, rx83_bstack
    le $I18, 0, rx83_cut386
    dec $I18
    set $I18, rx83_bstack[$I18]
  rx83_cut386:
    assign rx83_cstack, $I18
  rx83_jump385:
    jump $I19
  rx83_done382:
    rx83_cur."!cursor_fail"()
    .return (rx83_cur) 
.end
.HLL "nqp"
.namespace []
.sub "ENDSTMT" :subid("cuid_36_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 649
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx88_tgt
    .local int rx88_pos
    .local int rx88_off
    .local int rx88_eos
    .local int rx88_rep
    .local pmc rx88_cur
    .local pmc rx88_curclass
    .local pmc rx88_bstack
    .local pmc rx88_cstack
    (rx88_cur, rx88_tgt, rx88_pos, rx88_curclass, rx88_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx88_cur
    length rx88_eos, rx88_tgt
    eq $I19, 1, rx88_restart398
    gt rx88_pos, rx88_eos, rx88_fail399
    repr_get_attr_int $I11, self, rx88_curclass, "$!from"
    ne $I11, -1, rxscan89_done405
    goto rxscan89_scan404
  rxscan89_loop403:
    inc rx88_pos
    gt rx88_pos, rx88_eos, rx88_fail399
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!from", rx88_pos
  rxscan89_scan404:
    nqp_rxmark rx88_bstack, rxscan89_loop403, rx88_pos, 0
  rxscan89_done405:
    nqp_rxmark rx88_bstack, rxquantr90_done407, rx88_pos, 0
  rxquantr90_loop406:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt91_0409
    nqp_push_label $P11, alt91_1414
    nqp_rxmark rx88_bstack, alt91_end408, -1, 0
    rx88_cur."!alt"(rx88_pos, "alt_nfa__1_1360256388.039", $P11)
    goto rx88_fail399
  alt91_0409:
    nqp_rxmark rx88_bstack, rxquantr92_done411, rx88_pos, 0
  rxquantr92_loop410:
    ge rx88_pos, rx88_eos, rx88_fail399
    substr $S11, rx88_tgt, rx88_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx88_fail399
    inc rx88_pos
    nqp_rxpeek $I19, rx88_bstack, rxquantr92_done411
    inc $I19
    inc $I19
    set rx88_rep, rx88_bstack[$I19]
    nqp_rxcommit rx88_bstack, rxquantr92_done411
    inc rx88_rep
    nqp_rxmark rx88_bstack, rxquantr92_done411, rx88_pos, rx88_rep
    goto rxquantr92_loop410
  rxquantr92_done411:
    is_cclass $I11, .CCLASS_NEWLINE, rx88_tgt, rx88_pos
    if $I11, rxanchor93_done412
    ne rx88_pos, rx88_eos, rx88_fail399
    eq rx88_pos, 0, rxanchor93_done412
    sub $I11, rx88_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx88_tgt, $I11
    if $I11, rx88_fail399
  rxanchor93_done412:
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!pos", rx88_pos
    $P11 = rx88_cur."ws"()
    repr_get_attr_int $I11, $P11, rx88_curclass, "$!pos"
    lt $I11, 0, rx88_fail399
    repr_get_attr_int rx88_pos, $P11, rx88_curclass, "$!pos"
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!pos", rx88_pos
    $P11 = rx88_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx88_curclass, "$!pos"
    lt $I11, 0, rx88_fail399
    goto alt91_end408
  alt91_1414:
    nqp_rxmark rx88_bstack, rxquantr95_done416, rx88_pos, 0
  rxquantr95_loop415:
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!pos", rx88_pos
    $P11 = rx88_cur."unv"()
    repr_get_attr_int $I11, $P11, rx88_curclass, "$!pos"
    lt $I11, 0, rx88_fail399
    goto rxsubrule96_pass417
  rxsubrule96_back418:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx88_curclass, "$!pos"
    lt $I11, 0, rx88_fail399
  rxsubrule96_pass417:
    rx88_cstack = rx88_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule96_back418
    push rx88_bstack, $I11
    push rx88_bstack, 0
    push rx88_bstack, rx88_pos
    elements $I11, rx88_cstack
    push rx88_bstack, $I11
    repr_get_attr_int rx88_pos, $P11, rx88_curclass, "$!pos"
    nqp_rxpeek $I19, rx88_bstack, rxquantr95_done416
    inc $I19
    inc $I19
    set rx88_rep, rx88_bstack[$I19]
    nqp_rxcommit rx88_bstack, rxquantr95_done416
    inc rx88_rep
  rxquantr95_done416:
    is_cclass $I11, .CCLASS_NEWLINE, rx88_tgt, rx88_pos
    if $I11, rxanchor97_done419
    ne rx88_pos, rx88_eos, rx88_fail399
    eq rx88_pos, 0, rxanchor97_done419
    sub $I11, rx88_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx88_tgt, $I11
    if $I11, rx88_fail399
  rxanchor97_done419:
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!pos", rx88_pos
    $P11 = rx88_cur."ws"()
    repr_get_attr_int $I11, $P11, rx88_curclass, "$!pos"
    lt $I11, 0, rx88_fail399
    repr_get_attr_int rx88_pos, $P11, rx88_curclass, "$!pos"
    repr_bind_attr_int rx88_cur, rx88_curclass, "$!pos", rx88_pos
    $P11 = rx88_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx88_curclass, "$!pos"
    lt $I11, 0, rx88_fail399
    goto alt91_end408
  alt91_end408:
    nqp_rxpeek $I19, rx88_bstack, rxquantr90_done407
    inc $I19
    inc $I19
    set rx88_rep, rx88_bstack[$I19]
    nqp_rxcommit rx88_bstack, rxquantr90_done407
    inc rx88_rep
  rxquantr90_done407:
    rx88_cur."!cursor_pass"(rx88_pos, "ENDSTMT", 'backtrack'=>1)
    .return (rx88_cur)
  rx88_restart398:
    repr_get_attr_obj rx88_cstack, rx88_cur, rx88_curclass, "$!cstack"
  rx88_fail399:
    unless rx88_bstack, rx88_done397
    pop $I19, rx88_bstack
    if_null rx88_cstack, rx88_cstack_done402
    unless rx88_cstack, rx88_cstack_done402
    dec $I19
    set $P11, rx88_cstack[$I19]
  rx88_cstack_done402:
    pop rx88_rep, rx88_bstack
    pop rx88_pos, rx88_bstack
    pop $I19, rx88_bstack
    lt rx88_pos, -1, rx88_done397
    lt rx88_pos, 0, rx88_fail399
    eq $I19, 0, rx88_fail399
    nqp_islist $I20, rx88_cstack
    unless $I20, rx88_jump400
    elements $I18, rx88_bstack
    le $I18, 0, rx88_cut401
    dec $I18
    set $I18, rx88_bstack[$I18]
  rx88_cut401:
    assign rx88_cstack, $I18
  rx88_jump400:
    jump $I19
  rx88_done397:
    rx88_cur."!cursor_fail"()
    .return (rx88_cur) 
.end
.HLL "nqp"
.namespace []
.sub "ws" :subid("cuid_37_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 656
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx99_tgt
    .local int rx99_pos
    .local int rx99_off
    .local int rx99_eos
    .local int rx99_rep
    .local pmc rx99_cur
    .local pmc rx99_curclass
    .local pmc rx99_bstack
    .local pmc rx99_cstack
    (rx99_cur, rx99_tgt, rx99_pos, rx99_curclass, rx99_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx99_cur
    length rx99_eos, rx99_tgt
    eq $I19, 1, rx99_restart423
    gt rx99_pos, rx99_eos, rx99_fail424
    repr_get_attr_int $I11, self, rx99_curclass, "$!from"
    ne $I11, -1, rxscan100_done430
    goto rxscan100_scan429
  rxscan100_loop428:
    inc rx99_pos
    gt rx99_pos, rx99_eos, rx99_fail424
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!from", rx99_pos
  rxscan100_scan429:
    nqp_rxmark rx99_bstack, rxscan100_loop428, rx99_pos, 0
  rxscan100_done430:
  alt101_0432:
    nqp_rxmark rx99_bstack, alt101_1433, rx99_pos, 0
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    $P11 = rx99_cur."MARKED"("ws")
    repr_get_attr_int $I11, $P11, rx99_curclass, "$!pos"
    lt $I11, 0, rx99_fail424
    goto alt101_end431
  alt101_1433:
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    $P11 = rx99_cur."ww"()
    repr_get_attr_int $I11, $P11, rx99_curclass, "$!pos"
    ge $I11, 0, rx99_fail424
    nqp_rxmark rx99_bstack, rxquantr102_done435, rx99_pos, 0
  rxquantr102_loop434:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt103_0437
    nqp_push_label $P11, alt103_1440
    nqp_push_label $P11, alt103_2443
    nqp_push_label $P11, alt103_3446
    nqp_rxmark rx99_bstack, alt103_end436, -1, 0
    rx99_cur."!alt"(rx99_pos, "alt_nfa__2_1360256388.056", $P11)
    goto rx99_fail424
  alt103_0437:
    nqp_rxmark rx99_bstack, rxquantr104_done439, -1, 0
  rxquantr104_loop438:
    ge rx99_pos, rx99_eos, rx99_fail424
    substr $S11, rx99_tgt, rx99_pos, 1
    index $I11, ucs4:"\n\x{b}\f\r\x{85}\u2028\u2029", $S11
    lt $I11, 0, rx99_fail424
    inc rx99_pos
    nqp_rxpeek $I19, rx99_bstack, rxquantr104_done439
    inc $I19
    inc $I19
    set rx99_rep, rx99_bstack[$I19]
    nqp_rxcommit rx99_bstack, rxquantr104_done439
    inc rx99_rep
    nqp_rxmark rx99_bstack, rxquantr104_done439, rx99_pos, rx99_rep
    goto rxquantr104_loop438
  rxquantr104_done439:
    goto alt103_end436
  alt103_1440:
    add $I11, rx99_pos, 1
    gt $I11, rx99_eos, rx99_fail424
    substr $S10, rx99_tgt, rx99_pos, 1
    ne $S10, ucs4:"#", rx99_fail424
    add rx99_pos, 1
    nqp_rxmark rx99_bstack, rxquantr105_done442, rx99_pos, 0
  rxquantr105_loop441:
    ge rx99_pos, rx99_eos, rx99_fail424
    is_cclass $I11, .CCLASS_NEWLINE, rx99_tgt, rx99_pos
    if $I11, rx99_fail424
    add rx99_pos, 1
    nqp_rxpeek $I19, rx99_bstack, rxquantr105_done442
    inc $I19
    inc $I19
    set rx99_rep, rx99_bstack[$I19]
    nqp_rxcommit rx99_bstack, rxquantr105_done442
    inc rx99_rep
    nqp_rxmark rx99_bstack, rxquantr105_done442, rx99_pos, rx99_rep
    goto rxquantr105_loop441
  rxquantr105_done442:
    goto alt103_end436
  alt103_2443:
    eq rx99_pos, 0, rxanchor106_done444
    ge rx99_pos, rx99_eos, rx99_fail424
    sub $I11, rx99_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx99_tgt, $I11
    unless $I11, rx99_fail424
  rxanchor106_done444:
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    $P11 = rx99_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx99_curclass, "$!pos"
    lt $I11, 0, rx99_fail424
    repr_get_attr_int rx99_pos, $P11, rx99_curclass, "$!pos"
    goto alt103_end436
  alt103_3446:
    nqp_rxmark rx99_bstack, rxquantr108_done448, -1, 0
  rxquantr108_loop447:
    ge rx99_pos, rx99_eos, rx99_fail424
    substr $S11, rx99_tgt, rx99_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx99_fail424
    inc rx99_pos
    nqp_rxpeek $I19, rx99_bstack, rxquantr108_done448
    inc $I19
    inc $I19
    set rx99_rep, rx99_bstack[$I19]
    nqp_rxcommit rx99_bstack, rxquantr108_done448
    inc rx99_rep
    nqp_rxmark rx99_bstack, rxquantr108_done448, rx99_pos, rx99_rep
    goto rxquantr108_loop447
  rxquantr108_done448:
    goto alt103_end436
  alt103_end436:
    nqp_rxpeek $I19, rx99_bstack, rxquantr102_done435
    inc $I19
    inc $I19
    set rx99_rep, rx99_bstack[$I19]
    nqp_rxcommit rx99_bstack, rxquantr102_done435
    inc rx99_rep
    nqp_rxmark rx99_bstack, rxquantr102_done435, rx99_pos, rx99_rep
    goto rxquantr102_loop434
  rxquantr102_done435:
    repr_bind_attr_int rx99_cur, rx99_curclass, "$!pos", rx99_pos
    $P11 = rx99_cur."MARKER"("ws")
    repr_get_attr_int $I11, $P11, rx99_curclass, "$!pos"
    lt $I11, 0, rx99_fail424
  alt101_end431:
    rx99_cur."!cursor_pass"(rx99_pos, "ws", 'backtrack'=>1)
    .return (rx99_cur)
  rx99_restart423:
    repr_get_attr_obj rx99_cstack, rx99_cur, rx99_curclass, "$!cstack"
  rx99_fail424:
    unless rx99_bstack, rx99_done422
    pop $I19, rx99_bstack
    if_null rx99_cstack, rx99_cstack_done427
    unless rx99_cstack, rx99_cstack_done427
    dec $I19
    set $P11, rx99_cstack[$I19]
  rx99_cstack_done427:
    pop rx99_rep, rx99_bstack
    pop rx99_pos, rx99_bstack
    pop $I19, rx99_bstack
    lt rx99_pos, -1, rx99_done422
    lt rx99_pos, 0, rx99_fail424
    eq $I19, 0, rx99_fail424
    nqp_islist $I20, rx99_cstack
    unless $I20, rx99_jump425
    elements $I18, rx99_bstack
    le $I18, 0, rx99_cut426
    dec $I18
    set $I18, rx99_bstack[$I18]
  rx99_cut426:
    assign rx99_cstack, $I18
  rx99_jump425:
    jump $I19
  rx99_done422:
    rx99_cur."!cursor_fail"()
    .return (rx99_cur) 
.end
.HLL "nqp"
.namespace []
.sub "unv" :subid("cuid_38_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 667
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_39_1360256386.79' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx109_tgt
    .local int rx109_pos
    .local int rx109_off
    .local int rx109_eos
    .local int rx109_rep
    .local pmc rx109_cur
    .local pmc rx109_curclass
    .local pmc rx109_bstack
    .local pmc rx109_cstack
    (rx109_cur, rx109_tgt, rx109_pos, rx109_curclass, rx109_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx109_cur
    length rx109_eos, rx109_tgt
    eq $I19, 1, rx109_restart451
    gt rx109_pos, rx109_eos, rx109_fail452
    repr_get_attr_int $I11, self, rx109_curclass, "$!from"
    ne $I11, -1, rxscan110_done458
    goto rxscan110_scan457
  rxscan110_loop456:
    inc rx109_pos
    gt rx109_pos, rx109_eos, rx109_fail452
    repr_bind_attr_int rx109_cur, rx109_curclass, "$!from", rx109_pos
  rxscan110_scan457:
    nqp_rxmark rx109_bstack, rxscan110_loop456, rx109_pos, 0
  rxscan110_done458:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt111_0460
    nqp_push_label $P11, alt111_1478
    nqp_push_label $P11, alt111_2483
    nqp_rxmark rx109_bstack, alt111_end459, -1, 0
    rx109_cur."!alt"(rx109_pos, "alt_nfa__4_1360256388.074", $P11)
    goto rx109_fail452
  alt111_0460:
    eq rx109_pos, 0, rxanchor112_done461
    ge rx109_pos, rx109_eos, rx109_fail452
    sub $I11, rx109_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx109_tgt, $I11
    unless $I11, rx109_fail452
  rxanchor112_done461:
    .const 'Sub' $P5001 = 'cuid_39_1360256386.79' 
    capture_lex $P5001
    repr_bind_attr_int rx109_cur, rx109_curclass, "$!pos", rx109_pos
    $P11 = rx109_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx109_curclass, "$!pos"
    lt $I11, 0, rx109_fail452
    repr_bind_attr_int rx109_cur, rx109_curclass, "$!pos", rx109_pos
    $P11 = rx109_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx109_curclass, "$!pos"
    lt $I11, 0, rx109_fail452
    repr_get_attr_int rx109_pos, $P11, rx109_curclass, "$!pos"
    goto alt111_end459
  alt111_1478:
    nqp_rxmark rx109_bstack, rxquantr118_done480, rx109_pos, 0
  rxquantr118_loop479:
    ge rx109_pos, rx109_eos, rx109_fail452
    substr $S11, rx109_tgt, rx109_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx109_fail452
    inc rx109_pos
    nqp_rxpeek $I19, rx109_bstack, rxquantr118_done480
    inc $I19
    inc $I19
    set rx109_rep, rx109_bstack[$I19]
    nqp_rxcommit rx109_bstack, rxquantr118_done480
    inc rx109_rep
    nqp_rxmark rx109_bstack, rxquantr118_done480, rx109_pos, rx109_rep
    goto rxquantr118_loop479
  rxquantr118_done480:
    add $I11, rx109_pos, 1
    gt $I11, rx109_eos, rx109_fail452
    substr $S10, rx109_tgt, rx109_pos, 1
    ne $S10, ucs4:"#", rx109_fail452
    add rx109_pos, 1
    nqp_rxmark rx109_bstack, rxquantr119_done482, rx109_pos, 0
  rxquantr119_loop481:
    ge rx109_pos, rx109_eos, rx109_fail452
    is_cclass $I11, .CCLASS_NEWLINE, rx109_tgt, rx109_pos
    if $I11, rx109_fail452
    add rx109_pos, 1
    nqp_rxpeek $I19, rx109_bstack, rxquantr119_done482
    inc $I19
    inc $I19
    set rx109_rep, rx109_bstack[$I19]
    nqp_rxcommit rx109_bstack, rxquantr119_done482
    inc rx109_rep
    nqp_rxmark rx109_bstack, rxquantr119_done482, rx109_pos, rx109_rep
    goto rxquantr119_loop481
  rxquantr119_done482:
    goto alt111_end459
  alt111_2483:
    nqp_rxmark rx109_bstack, rxquantr120_done485, -1, 0
  rxquantr120_loop484:
    ge rx109_pos, rx109_eos, rx109_fail452
    substr $S11, rx109_tgt, rx109_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx109_fail452
    inc rx109_pos
    nqp_rxpeek $I19, rx109_bstack, rxquantr120_done485
    inc $I19
    inc $I19
    set rx109_rep, rx109_bstack[$I19]
    nqp_rxcommit rx109_bstack, rxquantr120_done485
    inc rx109_rep
    nqp_rxmark rx109_bstack, rxquantr120_done485, rx109_pos, rx109_rep
    goto rxquantr120_loop484
  rxquantr120_done485:
    goto alt111_end459
  alt111_end459:
    nqp_rxcommit rx109_bstack, alt111_end459
    rx109_cur."!cursor_pass"(rx109_pos, "unv", 'backtrack'=>1)
    .return (rx109_cur)
  rx109_restart451:
    repr_get_attr_obj rx109_cstack, rx109_cur, rx109_curclass, "$!cstack"
  rx109_fail452:
    unless rx109_bstack, rx109_done450
    pop $I19, rx109_bstack
    if_null rx109_cstack, rx109_cstack_done455
    unless rx109_cstack, rx109_cstack_done455
    dec $I19
    set $P11, rx109_cstack[$I19]
  rx109_cstack_done455:
    pop rx109_rep, rx109_bstack
    pop rx109_pos, rx109_bstack
    pop $I19, rx109_bstack
    lt rx109_pos, -1, rx109_done450
    lt rx109_pos, 0, rx109_fail452
    eq $I19, 0, rx109_fail452
    nqp_islist $I20, rx109_cstack
    unless $I20, rx109_jump453
    elements $I18, rx109_bstack
    le $I18, 0, rx109_cut454
    dec $I18
    set $I18, rx109_bstack[$I18]
  rx109_cut454:
    assign rx109_cstack, $I18
  rx109_jump453:
    jump $I19
  rx109_done450:
    rx109_cur."!cursor_fail"()
    .return (rx109_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_39_1360256386.79") :anon :lex :outer("cuid_38_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx113_tgt
    .local int rx113_pos
    .local int rx113_off
    .local int rx113_eos
    .local int rx113_rep
    .local pmc rx113_cur
    .local pmc rx113_curclass
    .local pmc rx113_bstack
    .local pmc rx113_cstack
    (rx113_cur, rx113_tgt, rx113_pos, rx113_curclass, rx113_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx113_cur
    length rx113_eos, rx113_tgt
    eq $I19, 1, rx113_restart464
    gt rx113_pos, rx113_eos, rx113_fail465
    repr_get_attr_int $I11, self, rx113_curclass, "$!from"
    ne $I11, -1, rxscan114_done471
    goto rxscan114_scan470
  rxscan114_loop469:
    inc rx113_pos
    gt rx113_pos, rx113_eos, rx113_fail465
    repr_bind_attr_int rx113_cur, rx113_curclass, "$!from", rx113_pos
  rxscan114_scan470:
    nqp_rxmark rx113_bstack, rxscan114_loop469, rx113_pos, 0
  rxscan114_done471:
    nqp_rxmark rx113_bstack, rxquantr115_done473, rx113_pos, 0
  rxquantr115_loop472:
    ge rx113_pos, rx113_eos, rx113_fail465
    substr $S11, rx113_tgt, rx113_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx113_fail465
    inc rx113_pos
    nqp_rxpeek $I19, rx113_bstack, rxquantr115_done473
    inc $I19
    inc $I19
    set rx113_rep, rx113_bstack[$I19]
    nqp_rxcommit rx113_bstack, rxquantr115_done473
    inc rx113_rep
    nqp_rxmark rx113_bstack, rxquantr115_done473, rx113_pos, rx113_rep
    goto rxquantr115_loop472
  rxquantr115_done473:
    add $I11, rx113_pos, 1
    gt $I11, rx113_eos, rx113_fail465
    substr $S10, rx113_tgt, rx113_pos, 1
    ne $S10, ucs4:"=", rx113_fail465
    add rx113_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt116_0475
    nqp_push_label $P11, alt116_1476
    nqp_rxmark rx113_bstack, alt116_end474, -1, 0
    rx113_cur."!alt"(rx113_pos, "alt_nfa__3_1360256388.066", $P11)
    goto rx113_fail465
  alt116_0475:
    ge rx113_pos, rx113_eos, rx113_fail465
    is_cclass $I11, .CCLASS_WORD, rx113_tgt, rx113_pos
    unless $I11, rx113_fail465
    add rx113_pos, 1
    goto alt116_end474
  alt116_1476:
    add $I11, rx113_pos, 1
    gt $I11, rx113_eos, rx113_fail465
    substr $S10, rx113_tgt, rx113_pos, 1
    ne $S10, ucs4:"\\", rx113_fail465
    add rx113_pos, 1
    goto alt116_end474
  alt116_end474:
    nqp_rxcommit rx113_bstack, alt116_end474
    rx113_cur."!cursor_pass"(rx113_pos, 'backtrack'=>1)
    .return (rx113_cur)
  rx113_restart464:
    repr_get_attr_obj rx113_cstack, rx113_cur, rx113_curclass, "$!cstack"
  rx113_fail465:
    unless rx113_bstack, rx113_done463
    pop $I19, rx113_bstack
    if_null rx113_cstack, rx113_cstack_done468
    unless rx113_cstack, rx113_cstack_done468
    dec $I19
    set $P11, rx113_cstack[$I19]
  rx113_cstack_done468:
    pop rx113_rep, rx113_bstack
    pop rx113_pos, rx113_bstack
    pop $I19, rx113_bstack
    lt rx113_pos, -1, rx113_done463
    lt rx113_pos, 0, rx113_fail465
    eq $I19, 0, rx113_fail465
    nqp_islist $I20, rx113_cstack
    unless $I20, rx113_jump466
    elements $I18, rx113_bstack
    le $I18, 0, rx113_cut467
    dec $I18
    set $I18, rx113_bstack[$I18]
  rx113_cut467:
    assign rx113_cstack, $I18
  rx113_jump466:
    jump $I19
  rx113_done463:
    rx113_cur."!cursor_fail"()
    .return (rx113_cur) 
.end
.HLL "nqp"
.namespace []
.sub "pod_comment" :subid("cuid_40_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 676
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_41_1360256386.79' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx121_tgt
    .local int rx121_pos
    .local int rx121_off
    .local int rx121_eos
    .local int rx121_rep
    .local pmc rx121_cur
    .local pmc rx121_curclass
    .local pmc rx121_bstack
    .local pmc rx121_cstack
    (rx121_cur, rx121_tgt, rx121_pos, rx121_curclass, rx121_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx121_cur
    length rx121_eos, rx121_tgt
    eq $I19, 1, rx121_restart488
    gt rx121_pos, rx121_eos, rx121_fail489
    repr_get_attr_int $I11, self, rx121_curclass, "$!from"
    ne $I11, -1, rxscan122_done495
    goto rxscan122_scan494
  rxscan122_loop493:
    inc rx121_pos
    gt rx121_pos, rx121_eos, rx121_fail489
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!from", rx121_pos
  rxscan122_scan494:
    nqp_rxmark rx121_bstack, rxscan122_loop493, rx121_pos, 0
  rxscan122_done495:
    eq rx121_pos, 0, rxanchor123_done496
    ge rx121_pos, rx121_eos, rx121_fail489
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, $I11
    unless $I11, rx121_fail489
  rxanchor123_done496:
    nqp_rxmark rx121_bstack, rxquantr124_done498, rx121_pos, 0
  rxquantr124_loop497:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr124_done498
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr124_done498
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr124_done498, rx121_pos, rx121_rep
    goto rxquantr124_loop497
  rxquantr124_done498:
    add $I11, rx121_pos, 1
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 1
    ne $S10, ucs4:"=", rx121_fail489
    add rx121_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt125_0500
    nqp_push_label $P11, alt125_1519
    nqp_push_label $P11, alt125_2538
    nqp_push_label $P11, alt125_3560
    nqp_push_label $P11, alt125_4585
    nqp_rxmark rx121_bstack, alt125_end499, -1, 0
    rx121_cur."!alt"(rx121_pos, "alt_nfa__6_1360256388.158", $P11)
    goto rx121_fail489
  alt125_0500:
    add $I11, rx121_pos, 5
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 5
    ne $S10, ucs4:"begin", rx121_fail489
    add rx121_pos, 5
    nqp_rxmark rx121_bstack, rxquantr126_done502, -1, 0
  rxquantr126_loop501:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr126_done502
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr126_done502
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr126_done502, rx121_pos, rx121_rep
    goto rxquantr126_loop501
  rxquantr126_done502:
    add $I11, rx121_pos, 3
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 3
    ne $S10, ucs4:"END", rx121_fail489
    add rx121_pos, 3
    le rx121_pos, 0, rx121_fail489
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, $I11
    unless $I11, rx121_fail489
  alt128_0505:
    nqp_rxmark rx121_bstack, alt128_1516, rx121_pos, 0
    set rx121_rep, 0
    nqp_rxmark rx121_bstack, rxquantf129_loop506, rx121_pos, rx121_rep
    goto rxquantf129_done507
  rxquantf129_loop506:
    set $I12, rx121_rep
    ge rx121_pos, rx121_eos, rx121_fail489
    add rx121_pos, 1
    set rx121_rep, $I12
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantf129_loop506, rx121_pos, rx121_rep
  rxquantf129_done507:
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    unless $I11, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx121_pos, $I11
    add rx121_pos, 1
    nqp_rxmark rx121_bstack, rxquantr130_done510, rx121_pos, 0
  rxquantr130_loop509:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr130_done510
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr130_done510
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr130_done510, rx121_pos, rx121_rep
    goto rxquantr130_loop509
  rxquantr130_done510:
    add $I11, rx121_pos, 4
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 4
    ne $S10, ucs4:"=end", rx121_fail489
    add rx121_pos, 4
    nqp_rxmark rx121_bstack, rxquantr131_done512, -1, 0
  rxquantr131_loop511:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr131_done512
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr131_done512
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr131_done512, rx121_pos, rx121_rep
    goto rxquantr131_loop511
  rxquantr131_done512:
    add $I11, rx121_pos, 3
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 3
    ne $S10, ucs4:"END", rx121_fail489
    add rx121_pos, 3
    le rx121_pos, 0, rx121_fail489
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, $I11
    unless $I11, rx121_fail489
    nqp_rxmark rx121_bstack, rxquantr133_done515, rx121_pos, 0
  rxquantr133_loop514:
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    add rx121_pos, 1
    nqp_rxpeek $I19, rx121_bstack, rxquantr133_done515
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr133_done515
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr133_done515, rx121_pos, rx121_rep
    goto rxquantr133_loop514
  rxquantr133_done515:
    goto alt128_end504
  alt128_1516:
    nqp_rxmark rx121_bstack, rxquantr134_done518, rx121_pos, 0
  rxquantr134_loop517:
    ge rx121_pos, rx121_eos, rx121_fail489
    add rx121_pos, 1
    nqp_rxpeek $I19, rx121_bstack, rxquantr134_done518
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr134_done518
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr134_done518, rx121_pos, rx121_rep
    goto rxquantr134_loop517
  rxquantr134_done518:
  alt128_end504:
    goto alt125_end499
  alt125_1519:
    add $I11, rx121_pos, 5
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 5
    ne $S10, ucs4:"begin", rx121_fail489
    add rx121_pos, 5
    nqp_rxmark rx121_bstack, rxquantr135_done521, -1, 0
  rxquantr135_loop520:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr135_done521
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr135_done521
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr135_done521, rx121_pos, rx121_rep
    goto rxquantr135_loop520
  rxquantr135_done521:
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    nqp_rxmark rx121_bstack, rxsubrule136_pass522, -1, 0
  rxsubrule136_pass522:
    rx121_cstack = rx121_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx121_pos, $P11, rx121_curclass, "$!pos"
  alt137_0524:
    nqp_rxmark rx121_bstack, alt137_1536, rx121_pos, 0
    set rx121_rep, 0
    nqp_rxmark rx121_bstack, rxquantf138_loop525, rx121_pos, rx121_rep
    goto rxquantf138_done526
  rxquantf138_loop525:
    set $I12, rx121_rep
    ge rx121_pos, rx121_eos, rx121_fail489
    add rx121_pos, 1
    set rx121_rep, $I12
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantf138_loop525, rx121_pos, rx121_rep
  rxquantf138_done526:
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    unless $I11, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx121_pos, $I11
    add rx121_pos, 1
    nqp_rxmark rx121_bstack, rxquantr139_done529, rx121_pos, 0
  rxquantr139_loop528:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr139_done529
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr139_done529
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr139_done529, rx121_pos, rx121_rep
    goto rxquantr139_loop528
  rxquantr139_done529:
    add $I11, rx121_pos, 4
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 4
    ne $S10, ucs4:"=end", rx121_fail489
    add rx121_pos, 4
    nqp_rxmark rx121_bstack, rxquantr140_done531, -1, 0
  rxquantr140_loop530:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr140_done531
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr140_done531
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr140_done531, rx121_pos, rx121_rep
    goto rxquantr140_loop530
  rxquantr140_done531:
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."!BACKREF"("identifier")
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    repr_get_attr_int rx121_pos, $P11, rx121_curclass, "$!pos"
    le rx121_pos, 0, rx121_fail489
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, $I11
    unless $I11, rx121_fail489
    nqp_rxmark rx121_bstack, rxquantr143_done535, rx121_pos, 0
  rxquantr143_loop534:
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    add rx121_pos, 1
    nqp_rxpeek $I19, rx121_bstack, rxquantr143_done535
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr143_done535
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr143_done535, rx121_pos, rx121_rep
    goto rxquantr143_loop534
  rxquantr143_done535:
    goto alt137_end523
  alt137_1536:
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    repr_get_attr_int rx121_pos, $P11, rx121_curclass, "$!pos"
  alt137_end523:
    goto alt125_end499
  alt125_2538:
    add $I11, rx121_pos, 5
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 5
    ne $S10, ucs4:"begin", rx121_fail489
    add rx121_pos, 5
    le rx121_pos, 0, rx121_fail489
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, $I11
    unless $I11, rx121_fail489
    nqp_rxmark rx121_bstack, rxquantr146_done541, rx121_pos, 0
  rxquantr146_loop540:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr146_done541
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr146_done541
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr146_done541, rx121_pos, rx121_rep
    goto rxquantr146_loop540
  rxquantr146_done541:
  alt147_0543:
    nqp_rxmark rx121_bstack, alt147_1545, rx121_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    if $I11, rxanchor148_done544
    ne rx121_pos, rx121_eos, rx121_fail489
    eq rx121_pos, 0, rxanchor148_done544
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, $I11
    if $I11, rx121_fail489
  rxanchor148_done544:
    goto alt147_end542
  alt147_1545:
    nqp_rxmark rx121_bstack, alt147_2546, rx121_pos, 0
    add $I11, rx121_pos, 1
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 1
    ne $S10, ucs4:"#", rx121_fail489
    add rx121_pos, 1
    goto alt147_end542
  alt147_2546:
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."panic"("Unrecognized token after =begin")
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    repr_get_attr_int rx121_pos, $P11, rx121_curclass, "$!pos"
  alt147_end542:
  alt150_0549:
    nqp_rxmark rx121_bstack, alt150_1558, rx121_pos, 0
    set rx121_rep, 0
    nqp_rxmark rx121_bstack, rxquantf151_loop550, rx121_pos, rx121_rep
    goto rxquantf151_done551
  rxquantf151_loop550:
    set $I12, rx121_rep
    ge rx121_pos, rx121_eos, rx121_fail489
    add rx121_pos, 1
    set rx121_rep, $I12
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantf151_loop550, rx121_pos, rx121_rep
  rxquantf151_done551:
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    unless $I11, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx121_pos, $I11
    add rx121_pos, 1
    nqp_rxmark rx121_bstack, rxquantr152_done554, rx121_pos, 0
  rxquantr152_loop553:
    ge rx121_pos, rx121_eos, rx121_fail489
    substr $S11, rx121_tgt, rx121_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx121_fail489
    inc rx121_pos
    nqp_rxpeek $I19, rx121_bstack, rxquantr152_done554
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr152_done554
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr152_done554, rx121_pos, rx121_rep
    goto rxquantr152_loop553
  rxquantr152_done554:
    add $I11, rx121_pos, 4
    gt $I11, rx121_eos, rx121_fail489
    substr $S10, rx121_tgt, rx121_pos, 4
    ne $S10, ucs4:"=end", rx121_fail489
    add rx121_pos, 4
    le rx121_pos, 0, rx121_fail489
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx121_tgt, $I11
    unless $I11, rx121_fail489
    nqp_rxmark rx121_bstack, rxquantr154_done557, rx121_pos, 0
  rxquantr154_loop556:
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    add rx121_pos, 1
    nqp_rxpeek $I19, rx121_bstack, rxquantr154_done557
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr154_done557
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr154_done557, rx121_pos, rx121_rep
    goto rxquantr154_loop556
  rxquantr154_done557:
    goto alt150_end548
  alt150_1558:
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    repr_get_attr_int rx121_pos, $P11, rx121_curclass, "$!pos"
  alt150_end548:
    goto alt125_end499
  alt125_3560:
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    nqp_rxmark rx121_bstack, rxsubrule156_pass561, -1, 0
  rxsubrule156_pass561:
    rx121_cstack = rx121_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx121_pos, $P11, rx121_curclass, "$!pos"
    set rx121_rep, 0
    nqp_rxmark rx121_bstack, rxquantf157_loop562, rx121_pos, rx121_rep
    goto rxquantf157_done563
  rxquantf157_loop562:
    set $I12, rx121_rep
    ge rx121_pos, rx121_eos, rx121_fail489
    add rx121_pos, 1
    set rx121_rep, $I12
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantf157_loop562, rx121_pos, rx121_rep
  rxquantf157_done563:
    eq rx121_pos, 0, rxanchor158_done565
    ge rx121_pos, rx121_eos, rx121_fail489
    sub $I11, rx121_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, $I11
    unless $I11, rx121_fail489
  rxanchor158_done565:
    .const 'Sub' $P5001 = 'cuid_41_1360256386.79' 
    capture_lex $P5001
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    goto alt125_end499
  alt125_4585:
  alt166_0587:
    nqp_rxmark rx121_bstack, alt166_1588, rx121_pos, 0
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_WHITESPACE, rx121_tgt, rx121_pos
    unless $I11, rx121_fail489
    add rx121_pos, 1
    goto alt166_end586
  alt166_1588:
    repr_bind_attr_int rx121_cur, rx121_curclass, "$!pos", rx121_pos
    $P11 = rx121_cur."panic"("Illegal pod directive")
    repr_get_attr_int $I11, $P11, rx121_curclass, "$!pos"
    lt $I11, 0, rx121_fail489
    repr_get_attr_int rx121_pos, $P11, rx121_curclass, "$!pos"
  alt166_end586:
    nqp_rxmark rx121_bstack, rxquantr168_done591, rx121_pos, 0
  rxquantr168_loop590:
    ge rx121_pos, rx121_eos, rx121_fail489
    is_cclass $I11, .CCLASS_NEWLINE, rx121_tgt, rx121_pos
    if $I11, rx121_fail489
    add rx121_pos, 1
    nqp_rxpeek $I19, rx121_bstack, rxquantr168_done591
    inc $I19
    inc $I19
    set rx121_rep, rx121_bstack[$I19]
    nqp_rxcommit rx121_bstack, rxquantr168_done591
    inc rx121_rep
    nqp_rxmark rx121_bstack, rxquantr168_done591, rx121_pos, rx121_rep
    goto rxquantr168_loop590
  rxquantr168_done591:
    goto alt125_end499
  alt125_end499:
    nqp_rxcommit rx121_bstack, alt125_end499
    rx121_cur."!cursor_pass"(rx121_pos, "pod_comment", 'backtrack'=>1)
    .return (rx121_cur)
  rx121_restart488:
    repr_get_attr_obj rx121_cstack, rx121_cur, rx121_curclass, "$!cstack"
  rx121_fail489:
    unless rx121_bstack, rx121_done487
    pop $I19, rx121_bstack
    if_null rx121_cstack, rx121_cstack_done492
    unless rx121_cstack, rx121_cstack_done492
    dec $I19
    set $P11, rx121_cstack[$I19]
  rx121_cstack_done492:
    pop rx121_rep, rx121_bstack
    pop rx121_pos, rx121_bstack
    pop $I19, rx121_bstack
    lt rx121_pos, -1, rx121_done487
    lt rx121_pos, 0, rx121_fail489
    eq $I19, 0, rx121_fail489
    nqp_islist $I20, rx121_cstack
    unless $I20, rx121_jump490
    elements $I18, rx121_bstack
    le $I18, 0, rx121_cut491
    dec $I18
    set $I18, rx121_bstack[$I18]
  rx121_cut491:
    assign rx121_cstack, $I18
  rx121_jump490:
    jump $I19
  rx121_done487:
    rx121_cur."!cursor_fail"()
    .return (rx121_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_41_1360256386.79") :anon :lex :outer("cuid_40_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx159_tgt
    .local int rx159_pos
    .local int rx159_off
    .local int rx159_eos
    .local int rx159_rep
    .local pmc rx159_cur
    .local pmc rx159_curclass
    .local pmc rx159_bstack
    .local pmc rx159_cstack
    (rx159_cur, rx159_tgt, rx159_pos, rx159_curclass, rx159_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx159_cur
    length rx159_eos, rx159_tgt
    eq $I19, 1, rx159_restart568
    gt rx159_pos, rx159_eos, rx159_fail569
    repr_get_attr_int $I11, self, rx159_curclass, "$!from"
    ne $I11, -1, rxscan160_done575
    goto rxscan160_scan574
  rxscan160_loop573:
    inc rx159_pos
    gt rx159_pos, rx159_eos, rx159_fail569
    repr_bind_attr_int rx159_cur, rx159_curclass, "$!from", rx159_pos
  rxscan160_scan574:
    nqp_rxmark rx159_bstack, rxscan160_loop573, rx159_pos, 0
  rxscan160_done575:
    nqp_rxmark rx159_bstack, rxquantr161_done577, rx159_pos, 0
  rxquantr161_loop576:
    ge rx159_pos, rx159_eos, rx159_fail569
    substr $S11, rx159_tgt, rx159_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx159_fail569
    inc rx159_pos
    nqp_rxpeek $I19, rx159_bstack, rxquantr161_done577
    inc $I19
    inc $I19
    set rx159_rep, rx159_bstack[$I19]
    nqp_rxcommit rx159_bstack, rxquantr161_done577
    inc rx159_rep
    nqp_rxmark rx159_bstack, rxquantr161_done577, rx159_pos, rx159_rep
    goto rxquantr161_loop576
  rxquantr161_done577:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt162_0579
    nqp_push_label $P11, alt162_1584
    nqp_rxmark rx159_bstack, alt162_end578, -1, 0
    rx159_cur."!alt"(rx159_pos, "alt_nfa__5_1360256388.145", $P11)
    goto rx159_fail569
  alt162_0579:
    add $I11, rx159_pos, 1
    gt $I11, rx159_eos, rx159_fail569
    substr $S10, rx159_tgt, rx159_pos, 1
    ne $S10, ucs4:"=", rx159_fail569
    add rx159_pos, 1
    nqp_rxmark rx159_bstack, rxquantr163_done581, rx159_pos, 0
  rxquantr163_loop580:
    add $I11, rx159_pos, 3
    gt $I11, rx159_eos, rx159_fail569
    substr $S10, rx159_tgt, rx159_pos, 3
    ne $S10, ucs4:"cut", rx159_fail569
    add rx159_pos, 3
    le rx159_pos, 0, rx159_fail569
    is_cclass $I11, .CCLASS_WORD, rx159_tgt, rx159_pos
    if $I11, rx159_fail569
    sub $I11, rx159_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx159_tgt, $I11
    unless $I11, rx159_fail569
    repr_bind_attr_int rx159_cur, rx159_curclass, "$!pos", rx159_pos
    $P11 = rx159_cur."panic"("Obsolete pod format, please use =begin/=end instead")
    repr_get_attr_int $I11, $P11, rx159_curclass, "$!pos"
    lt $I11, 0, rx159_fail569
    repr_get_attr_int rx159_pos, $P11, rx159_curclass, "$!pos"
    nqp_rxpeek $I19, rx159_bstack, rxquantr163_done581
    inc $I19
    inc $I19
    set rx159_rep, rx159_bstack[$I19]
    nqp_rxcommit rx159_bstack, rxquantr163_done581
    inc rx159_rep
  rxquantr163_done581:
    goto alt162_end578
  alt162_1584:
    ge rx159_pos, rx159_eos, rx159_fail569
    is_cclass $I11, .CCLASS_NEWLINE, rx159_tgt, rx159_pos
    unless $I11, rx159_fail569
    substr $S10, rx159_tgt, rx159_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx159_pos, $I11
    add rx159_pos, 1
    goto alt162_end578
  alt162_end578:
    nqp_rxcommit rx159_bstack, alt162_end578
    rx159_cur."!cursor_pass"(rx159_pos, 'backtrack'=>1)
    .return (rx159_cur)
  rx159_restart568:
    repr_get_attr_obj rx159_cstack, rx159_cur, rx159_curclass, "$!cstack"
  rx159_fail569:
    unless rx159_bstack, rx159_done567
    pop $I19, rx159_bstack
    if_null rx159_cstack, rx159_cstack_done572
    unless rx159_cstack, rx159_cstack_done572
    dec $I19
    set $P11, rx159_cstack[$I19]
  rx159_cstack_done572:
    pop rx159_rep, rx159_bstack
    pop rx159_pos, rx159_bstack
    pop $I19, rx159_bstack
    lt rx159_pos, -1, rx159_done567
    lt rx159_pos, 0, rx159_fail569
    eq $I19, 0, rx159_fail569
    nqp_islist $I20, rx159_cstack
    unless $I20, rx159_jump570
    elements $I18, rx159_bstack
    le $I18, 0, rx159_cut571
    dec $I18
    set $I18, rx159_bstack[$I18]
  rx159_cut571:
    assign rx159_cstack, $I18
  rx159_jump570:
    jump $I19
  rx159_done567:
    rx159_cur."!cursor_fail"()
    .return (rx159_cur) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_42_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 707
    .param pmc _lex_param_0 
    .const 'Sub' $P5061 = 'cuid_390_1360256386.79' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_391_1360256386.79' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_393_1360256386.79' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_394_1360256386.79' 
    capture_lex $P5061 
    .lex "$*IN_DECL", $P101 
    .lex "$*HAS_YOU_ARE_HERE", $P102 
    .lex "$*MAIN_SUB", $P103 
    .lex "$*UNIT", $P104 
    .lex "$*GLOBALish", $P105 
    .lex "$*PACKAGE", $P106 
    .lex "$*EXPORT", $P107 
    .lex utf8:"$\x{a2}", $P108 
    .lex "$/", $P109 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P104, $P5004
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P105, $P5005
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P106, $P5006
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P107, $P5007
    set self, _lex_param_0
    .local string rx169_tgt
    .local int rx169_pos
    .local int rx169_off
    .local int rx169_eos
    .local int rx169_rep
    .local pmc rx169_cur
    .local pmc rx169_curclass
    .local pmc rx169_bstack
    .local pmc rx169_cstack
    (rx169_cur, rx169_tgt, rx169_pos, rx169_curclass, rx169_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx169_cur
    length rx169_eos, rx169_tgt
    eq $I19, 1, rx169_restart594
    gt rx169_pos, rx169_eos, rx169_fail595
    repr_get_attr_int $I11, self, rx169_curclass, "$!from"
    ne $I11, -1, rxscan170_done601
    goto rxscan170_scan600
  rxscan170_loop599:
    inc rx169_pos
    gt rx169_pos, rx169_eos, rx169_fail595
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!from", rx169_pos
  rxscan170_scan600:
    nqp_rxmark rx169_bstack, rxscan170_loop599, rx169_pos, 0
  rxscan170_done601:
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    box $P5008, ""
    set $P101, $P5008
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    box $P5009, 0
    set $P102, $P5009
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    unless_null $P103, fallback602
    nqp_get_sc_object $P5012, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$MAIN_SUB"]
    unless_null $P5010, fallback603
    nqp_get_sc_object $P5013, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5013
  fallback603:
    unless_null $P5010, vivi_171604
    die "Contextual $*MAIN_SUB not found"
    box $P5014, "Contextual $*MAIN_SUB not found"
    set $P5010, $P5014
  vivi_171604:
    set $P103, $P5010
  fallback602:
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
.annotate 'line', 712
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback605
    nqp_get_sc_object $P5018, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback606
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5016, $P5019
  fallback606:
    unless_null $P5016, vivi_172607
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_172607:
    set $P5015, $P5016
  fallback605:
    $P5021 = $P5015."push_lexpad"($P109)
    set $P104, $P5021
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
.annotate 'line', 716
    find_dynamic_lex $P5022, "$*W"
    unless_null $P5022, fallback608
    nqp_get_sc_object $P5025, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$W"]
    unless_null $P5023, fallback609
    nqp_get_sc_object $P5026, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5023, $P5026
  fallback609:
    unless_null $P5023, vivi_173610
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5023, $P5027
  vivi_173610:
    set $P5022, $P5023
  fallback608:
    find_dynamic_lex $P5029, "%*HOW"
    unless_null $P5029, fallback611
    nqp_get_sc_object $P5032, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["%HOW"]
    unless_null $P5030, fallback612
    nqp_get_sc_object $P5034, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5033, $P5034
    new $P5035, 'Hash'
    set $P5033["%HOW"], $P5035
    set $P5030, $P5035
  fallback612:
    unless_null $P5030, vivi_174613
    die "Contextual %*HOW not found"
    box $P5036, "Contextual %*HOW not found"
    set $P5030, $P5036
  vivi_174613:
    set $P5029, $P5030
  fallback611:
    set $P5028, $P5029["knowhow"]
    unless_null $P5028, fallback614
    nqp_get_sc_object $P5037, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5028, $P5037
  fallback614:
    $P5038 = $P5022."pkg_create_mo"($P5028, "GLOBALish" :named("name"))
    set $P105, $P5038
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    $P5039 = $P108."MATCH"()
    set $P109, $P5039
    .const 'Sub' $P5040 = 'cuid_390_1360256386.79' 
    capture_lex $P5040
    $P5041 = $P5040()
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    unless_null $P105, fallback630
    nqp_get_sc_object $P5044, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5043, $P5044
    set $P5042, $P5043["$GLOBALish"]
    unless_null $P5042, fallback631
    nqp_get_sc_object $P5045, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5042, $P5045
  fallback631:
    unless_null $P5042, vivi_180632
    die "Contextual $*GLOBALish not found"
    box $P5046, "Contextual $*GLOBALish not found"
    set $P5042, $P5046
  vivi_180632:
    set $P105, $P5042
  fallback630:
    set $P106, $P105
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    $P5047 = $P108."MATCH"()
    set $P109, $P5047
    .const 'Sub' $P5048 = 'cuid_391_1360256386.79' 
    capture_lex $P5048
    $P5049 = $P5048()
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    unless_null $P107, fallback642
    nqp_get_sc_object $P5052, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5051, $P5052
    set $P5050, $P5051["$EXPORT"]
    unless_null $P5050, fallback643
    nqp_get_sc_object $P5053, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5050, $P5053
  fallback643:
    unless_null $P5050, vivi_184644
    die "Contextual $*EXPORT not found"
    box $P5054, "Contextual $*EXPORT not found"
    set $P5050, $P5054
  vivi_184644:
    set $P107, $P5050
  fallback642:
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    $P5055 = $P108."MATCH"()
    set $P109, $P5055
    .const 'Sub' $P5056 = 'cuid_393_1360256386.79' 
    capture_lex $P5056
    $P5057 = $P5056()
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    store_lex unicode:"$\x{a2}", rx169_cur
    $P5058 = $P108."MATCH"()
    set $P109, $P5058
    .const 'Sub' $P5059 = 'cuid_394_1360256386.79' 
    capture_lex $P5059
    $P5060 = $P5059()
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    $P11 = rx169_cur."outerctx"()
    repr_get_attr_int $I11, $P11, rx169_curclass, "$!pos"
    lt $I11, 0, rx169_fail595
    repr_get_attr_int rx169_pos, $P11, rx169_curclass, "$!pos"
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    $P11 = rx169_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx169_curclass, "$!pos"
    lt $I11, 0, rx169_fail595
    nqp_rxmark rx169_bstack, rxsubrule199_pass688, -1, 0
  rxsubrule199_pass688:
    rx169_cstack = rx169_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx169_pos, $P11, rx169_curclass, "$!pos"
  alt200_0690:
    nqp_rxmark rx169_bstack, alt200_1692, rx169_pos, 0
    lt rx169_pos, rx169_eos, rx169_fail595
    goto alt200_end689
  alt200_1692:
    repr_bind_attr_int rx169_cur, rx169_curclass, "$!pos", rx169_pos
    $P11 = rx169_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx169_curclass, "$!pos"
    lt $I11, 0, rx169_fail595
    repr_get_attr_int rx169_pos, $P11, rx169_curclass, "$!pos"
  alt200_end689:
    rx169_cur."!cursor_pass"(rx169_pos, "comp_unit", 'backtrack'=>1)
    .return (rx169_cur)
  rx169_restart594:
    repr_get_attr_obj rx169_cstack, rx169_cur, rx169_curclass, "$!cstack"
  rx169_fail595:
    unless rx169_bstack, rx169_done593
    pop $I19, rx169_bstack
    if_null rx169_cstack, rx169_cstack_done598
    unless rx169_cstack, rx169_cstack_done598
    dec $I19
    set $P11, rx169_cstack[$I19]
  rx169_cstack_done598:
    pop rx169_rep, rx169_bstack
    pop rx169_pos, rx169_bstack
    pop $I19, rx169_bstack
    lt rx169_pos, -1, rx169_done593
    lt rx169_pos, 0, rx169_fail595
    eq $I19, 0, rx169_fail595
    nqp_islist $I20, rx169_cstack
    unless $I20, rx169_jump596
    elements $I18, rx169_bstack
    le $I18, 0, rx169_cut597
    dec $I18
    set $I18, rx169_bstack[$I18]
  rx169_cut597:
    assign rx169_cstack, $I18
  rx169_jump596:
    jump $I19
  rx169_done593:
    rx169_cur."!cursor_fail"()
    .return (rx169_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_390_1360256386.79") :anon :lex :outer("cuid_42_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 717

.annotate 'line', 718
    find_dynamic_lex $P5002, "$*GLOBALish"
    unless_null $P5002, fallback615
    nqp_get_sc_object $P5005, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$GLOBALish"]
    unless_null $P5003, fallback616
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5006
  fallback616:
    unless_null $P5003, vivi_175617
    die "Contextual $*GLOBALish not found"
    box $P5007, "Contextual $*GLOBALish not found"
    set $P5003, $P5007
  vivi_175617:
    set $P5002, $P5003
  fallback615:
    get_how $P5001, $P5002
    find_dynamic_lex $P5008, "$*GLOBALish"
    unless_null $P5008, fallback618
    nqp_get_sc_object $P5011, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$GLOBALish"]
    unless_null $P5009, fallback619
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5012
  fallback619:
    unless_null $P5009, vivi_176620
    die "Contextual $*GLOBALish not found"
    box $P5013, "Contextual $*GLOBALish not found"
    set $P5009, $P5013
  vivi_176620:
    set $P5008, $P5009
  fallback618:
    $P5001."compose"($P5008)
.annotate 'line', 719
    find_dynamic_lex $P5014, "$*W"
    unless_null $P5014, fallback621
    nqp_get_sc_object $P5017, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["$W"]
    unless_null $P5015, fallback622
    nqp_get_sc_object $P5018, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5015, $P5018
  fallback622:
    unless_null $P5015, vivi_177623
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5015, $P5019
  vivi_177623:
    set $P5014, $P5015
  fallback621:
    find_dynamic_lex $P5020, "$*UNIT"
    unless_null $P5020, fallback624
    nqp_get_sc_object $P5023, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$UNIT"]
    unless_null $P5021, fallback625
    nqp_get_sc_object $P5024, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5021, $P5024
  fallback625:
    unless_null $P5021, vivi_178626
    die "Contextual $*UNIT not found"
    box $P5025, "Contextual $*UNIT not found"
    set $P5021, $P5025
  vivi_178626:
    set $P5020, $P5021
  fallback624:
    find_dynamic_lex $P5026, "$*GLOBALish"
    unless_null $P5026, fallback627
    nqp_get_sc_object $P5029, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$GLOBALish"]
    unless_null $P5027, fallback628
    nqp_get_sc_object $P5030, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5027, $P5030
  fallback628:
    unless_null $P5027, vivi_179629
    die "Contextual $*GLOBALish not found"
    box $P5031, "Contextual $*GLOBALish not found"
    set $P5027, $P5031
  vivi_179629:
    set $P5026, $P5027
  fallback627:
    $P5032 = $P5014."install_lexical_symbol"($P5020, "GLOBALish", $P5026)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_391_1360256386.79") :anon :lex :outer("cuid_42_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 724

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback633
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback634
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5005
  fallback634:
    unless_null $P5002, vivi_181635
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_181635:
    set $P5001, $P5002
  fallback633:
    find_dynamic_lex $P5007, "$*UNIT"
    unless_null $P5007, fallback636
    nqp_get_sc_object $P5010, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$UNIT"]
    unless_null $P5008, fallback637
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5011
  fallback637:
    unless_null $P5008, vivi_182638
    die "Contextual $*UNIT not found"
    box $P5012, "Contextual $*UNIT not found"
    set $P5008, $P5012
  vivi_182638:
    set $P5007, $P5008
  fallback636:
    find_dynamic_lex $P5013, "$*PACKAGE"
    unless_null $P5013, fallback639
    nqp_get_sc_object $P5016, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$PACKAGE"]
    unless_null $P5014, fallback640
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5014, $P5017
  fallback640:
    unless_null $P5014, vivi_183641
    die "Contextual $*PACKAGE not found"
    box $P5018, "Contextual $*PACKAGE not found"
    set $P5014, $P5018
  vivi_183641:
    set $P5013, $P5014
  fallback639:
    $P5019 = $P5001."install_lexical_symbol"($P5007, "$?PACKAGE", $P5013)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_393_1360256386.79") :anon :lex :outer("cuid_42_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 728
    .const 'Sub' $P5017 = 'cuid_392_1360256386.79' 
    capture_lex $P5017 
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback647
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback648
    nqp_get_sc_object $P5008, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback648:
    unless_null $P5004, vivi_186649
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_186649:
    set $P5003, $P5004
  fallback647:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback650
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5011
  fallback650:
    set $P5001, $P5002["setting"]
    unless_null $P5001, fallback651
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5012
  fallback651:
    set $S5001, $P5001
    iseq $I5001, $S5001, "NULL"
    box $P5016, $I5001
    set $P5015, $P5016
    if $I5001 goto unless185_end646 
    .const 'Sub' $P5013 = 'cuid_392_1360256386.79' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  unless185_end646:
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_392_1360256386.79") :anon :lex :outer("cuid_393_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 729
    .lex "$DEFAULT", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 730
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback652
    nqp_get_sc_object $P5005, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback653
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5006
  fallback653:
    unless_null $P5003, vivi_187654
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_187654:
    set $P5002, $P5003
  fallback652:
    find_dynamic_lex $P5009, "%*HOW"
    unless_null $P5009, fallback655
    nqp_get_sc_object $P5012, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["%HOW"]
    unless_null $P5010, fallback656
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5013, $P5014
    new $P5015, 'Hash'
    set $P5013["%HOW"], $P5015
    set $P5010, $P5015
  fallback656:
    unless_null $P5010, vivi_188657
    die "Contextual %*HOW not found"
    box $P5016, "Contextual %*HOW not found"
    set $P5010, $P5016
  vivi_188657:
    set $P5009, $P5010
  fallback655:
    set $P5008, $P5009["knowhow"]
    unless_null $P5008, fallback658
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5017
  fallback658:
    $P5018 = $P5002."pkg_create_mo"($P5008, "EXPORT" :named("name"))
    store_dynamic_lex "$*EXPORT", $P5018
.annotate 'line', 731
    find_dynamic_lex $P5020, "$*EXPORT"
    unless_null $P5020, fallback659
    nqp_get_sc_object $P5023, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$EXPORT"]
    unless_null $P5021, fallback660
    nqp_get_sc_object $P5024, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5021, $P5024
  fallback660:
    unless_null $P5021, vivi_189661
    die "Contextual $*EXPORT not found"
    box $P5025, "Contextual $*EXPORT not found"
    set $P5021, $P5025
  vivi_189661:
    set $P5020, $P5021
  fallback659:
    get_how $P5019, $P5020
    find_dynamic_lex $P5026, "$*EXPORT"
    unless_null $P5026, fallback662
    nqp_get_sc_object $P5029, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$EXPORT"]
    unless_null $P5027, fallback663
    nqp_get_sc_object $P5030, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5027, $P5030
  fallback663:
    unless_null $P5027, vivi_190664
    die "Contextual $*EXPORT not found"
    box $P5031, "Contextual $*EXPORT not found"
    set $P5027, $P5031
  vivi_190664:
    set $P5026, $P5027
  fallback662:
    $P5019."compose"($P5026)
.annotate 'line', 732
    find_dynamic_lex $P5032, "$*W"
    unless_null $P5032, fallback665
    nqp_get_sc_object $P5035, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["$W"]
    unless_null $P5033, fallback666
    nqp_get_sc_object $P5036, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5033, $P5036
  fallback666:
    unless_null $P5033, vivi_191667
    die "Contextual $*W not found"
    box $P5037, "Contextual $*W not found"
    set $P5033, $P5037
  vivi_191667:
    set $P5032, $P5033
  fallback665:
    find_dynamic_lex $P5038, "$*UNIT"
    unless_null $P5038, fallback668
    nqp_get_sc_object $P5041, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5040, $P5041
    set $P5039, $P5040["$UNIT"]
    unless_null $P5039, fallback669
    nqp_get_sc_object $P5042, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5039, $P5042
  fallback669:
    unless_null $P5039, vivi_192670
    die "Contextual $*UNIT not found"
    box $P5043, "Contextual $*UNIT not found"
    set $P5039, $P5043
  vivi_192670:
    set $P5038, $P5039
  fallback668:
    find_dynamic_lex $P5044, "$*EXPORT"
    unless_null $P5044, fallback671
    nqp_get_sc_object $P5047, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5046, $P5047
    set $P5045, $P5046["$EXPORT"]
    unless_null $P5045, fallback672
    nqp_get_sc_object $P5048, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5045, $P5048
  fallback672:
    unless_null $P5045, vivi_193673
    die "Contextual $*EXPORT not found"
    box $P5049, "Contextual $*EXPORT not found"
    set $P5045, $P5049
  vivi_193673:
    set $P5044, $P5045
  fallback671:
    $P5032."install_lexical_symbol"($P5038, "EXPORT", $P5044)
.annotate 'line', 733
    find_dynamic_lex $P5050, "$*W"
    unless_null $P5050, fallback674
    nqp_get_sc_object $P5053, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$W"]
    unless_null $P5051, fallback675
    nqp_get_sc_object $P5054, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5051, $P5054
  fallback675:
    unless_null $P5051, vivi_194676
    die "Contextual $*W not found"
    box $P5055, "Contextual $*W not found"
    set $P5051, $P5055
  vivi_194676:
    set $P5050, $P5051
  fallback674:
    find_dynamic_lex $P5057, "%*HOW"
    unless_null $P5057, fallback677
    nqp_get_sc_object $P5060, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["%HOW"]
    unless_null $P5058, fallback678
    nqp_get_sc_object $P5062, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5061, $P5062
    new $P5063, 'Hash'
    set $P5061["%HOW"], $P5063
    set $P5058, $P5063
  fallback678:
    unless_null $P5058, vivi_195679
    die "Contextual %*HOW not found"
    box $P5064, "Contextual %*HOW not found"
    set $P5058, $P5064
  vivi_195679:
    set $P5057, $P5058
  fallback677:
    set $P5056, $P5057["knowhow"]
    unless_null $P5056, fallback680
    nqp_get_sc_object $P5065, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5056, $P5065
  fallback680:
    $P5066 = $P5050."pkg_create_mo"($P5056, "DEFAULT" :named("name"))
    set $P101, $P5066
.annotate 'line', 734
    get_how $P5067, $P101
    $P5067."compose"($P101)
    find_dynamic_lex $P5069, "$*EXPORT"
    unless_null $P5069, fallback681
    nqp_get_sc_object $P5072, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5071, $P5072
    set $P5070, $P5071["$EXPORT"]
    unless_null $P5070, fallback682
    nqp_get_sc_object $P5073, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5070, $P5073
  fallback682:
    unless_null $P5070, vivi_196683
    die "Contextual $*EXPORT not found"
    box $P5074, "Contextual $*EXPORT not found"
    set $P5070, $P5074
  vivi_196683:
    set $P5069, $P5070
  fallback681:
    get_who $P5068, $P5069
    set $P5068["DEFAULT"], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_394_1360256386.79") :anon :lex :outer("cuid_42_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 739

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback684
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback685
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5005
  fallback685:
    unless_null $P5002, vivi_197686
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_197686:
    set $P5001, $P5002
  fallback684:
    $P5007 = $P5001."add_initializations"()
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_43_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 747
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx203_tgt
    .local int rx203_pos
    .local int rx203_off
    .local int rx203_eos
    .local int rx203_rep
    .local pmc rx203_cur
    .local pmc rx203_curclass
    .local pmc rx203_bstack
    .local pmc rx203_cstack
    (rx203_cur, rx203_tgt, rx203_pos, rx203_curclass, rx203_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx203_cur
    length rx203_eos, rx203_tgt
    eq $I19, 1, rx203_restart696
    gt rx203_pos, rx203_eos, rx203_fail697
    repr_get_attr_int $I11, self, rx203_curclass, "$!from"
    ne $I11, -1, rxscan204_done703
    goto rxscan204_scan702
  rxscan204_loop701:
    inc rx203_pos
    gt rx203_pos, rx203_eos, rx203_fail697
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!from", rx203_pos
  rxscan204_scan702:
    nqp_rxmark rx203_bstack, rxscan204_loop701, rx203_pos, 0
  rxscan204_done703:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt205_0705
    nqp_push_label $P11, alt205_1709
    nqp_rxmark rx203_bstack, alt205_end704, -1, 0
    rx203_cur."!alt"(rx203_pos, "alt_nfa__7_1360256388.25", $P11)
    goto rx203_fail697
  alt205_0705:
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!pos", rx203_pos
    $P11 = rx203_cur."ws"()
    repr_get_attr_int $I11, $P11, rx203_curclass, "$!pos"
    lt $I11, 0, rx203_fail697
    repr_get_attr_int rx203_pos, $P11, rx203_curclass, "$!pos"
    lt rx203_pos, rx203_eos, rx203_fail697
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!pos", rx203_pos
    $P11 = rx203_cur."ws"()
    repr_get_attr_int $I11, $P11, rx203_curclass, "$!pos"
    lt $I11, 0, rx203_fail697
    repr_get_attr_int rx203_pos, $P11, rx203_curclass, "$!pos"
    goto alt205_end704
  alt205_1709:
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!pos", rx203_pos
    $P11 = rx203_cur."ws"()
    repr_get_attr_int $I11, $P11, rx203_curclass, "$!pos"
    lt $I11, 0, rx203_fail697
    repr_get_attr_int rx203_pos, $P11, rx203_curclass, "$!pos"
    nqp_rxmark rx203_bstack, rxquantr210_done712, rx203_pos, 0
  rxquantr210_loop711:
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!pos", rx203_pos
    $P11 = rx203_cur."statement"()
    repr_get_attr_int $I11, $P11, rx203_curclass, "$!pos"
    lt $I11, 0, rx203_fail697
    nqp_rxmark rx203_bstack, rxsubrule211_pass713, -1, 0
  rxsubrule211_pass713:
    rx203_cstack = rx203_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx203_pos, $P11, rx203_curclass, "$!pos"
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!pos", rx203_pos
    $P11 = rx203_cur."eat_terminator"()
    repr_get_attr_int $I11, $P11, rx203_curclass, "$!pos"
    lt $I11, 0, rx203_fail697
    repr_get_attr_int rx203_pos, $P11, rx203_curclass, "$!pos"
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!pos", rx203_pos
    $P11 = rx203_cur."ws"()
    repr_get_attr_int $I11, $P11, rx203_curclass, "$!pos"
    lt $I11, 0, rx203_fail697
    repr_get_attr_int rx203_pos, $P11, rx203_curclass, "$!pos"
    nqp_rxpeek $I19, rx203_bstack, rxquantr210_done712
    inc $I19
    inc $I19
    set rx203_rep, rx203_bstack[$I19]
    nqp_rxcommit rx203_bstack, rxquantr210_done712
    inc rx203_rep
    nqp_rxmark rx203_bstack, rxquantr210_done712, rx203_pos, rx203_rep
    goto rxquantr210_loop711
  rxquantr210_done712:
    repr_bind_attr_int rx203_cur, rx203_curclass, "$!pos", rx203_pos
    $P11 = rx203_cur."ws"()
    repr_get_attr_int $I11, $P11, rx203_curclass, "$!pos"
    lt $I11, 0, rx203_fail697
    repr_get_attr_int rx203_pos, $P11, rx203_curclass, "$!pos"
    goto alt205_end704
  alt205_end704:
    rx203_cur."!cursor_pass"(rx203_pos, "statementlist", 'backtrack'=>1)
    .return (rx203_cur)
  rx203_restart696:
    repr_get_attr_obj rx203_cstack, rx203_cur, rx203_curclass, "$!cstack"
  rx203_fail697:
    unless rx203_bstack, rx203_done695
    pop $I19, rx203_bstack
    if_null rx203_cstack, rx203_cstack_done700
    unless rx203_cstack, rx203_cstack_done700
    dec $I19
    set $P11, rx203_cstack[$I19]
  rx203_cstack_done700:
    pop rx203_rep, rx203_bstack
    pop rx203_pos, rx203_bstack
    pop $I19, rx203_bstack
    lt rx203_pos, -1, rx203_done695
    lt rx203_pos, 0, rx203_fail697
    eq $I19, 0, rx203_fail697
    nqp_islist $I20, rx203_cstack
    unless $I20, rx203_jump698
    elements $I18, rx203_bstack
    le $I18, 0, rx203_cut699
    dec $I18
    set $I18, rx203_bstack[$I18]
  rx203_cut699:
    assign rx203_cstack, $I18
  rx203_jump698:
    jump $I19
  rx203_done695:
    rx203_cur."!cursor_fail"()
    .return (rx203_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_44_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 752
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_45_1360256386.79' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx215_tgt
    .local int rx215_pos
    .local int rx215_off
    .local int rx215_eos
    .local int rx215_rep
    .local pmc rx215_cur
    .local pmc rx215_curclass
    .local pmc rx215_bstack
    .local pmc rx215_cstack
    (rx215_cur, rx215_tgt, rx215_pos, rx215_curclass, rx215_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx215_cur
    length rx215_eos, rx215_tgt
    eq $I19, 1, rx215_restart719
    gt rx215_pos, rx215_eos, rx215_fail720
    repr_get_attr_int $I11, self, rx215_curclass, "$!from"
    ne $I11, -1, rxscan216_done726
    goto rxscan216_scan725
  rxscan216_loop724:
    inc rx215_pos
    gt rx215_pos, rx215_eos, rx215_fail720
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!from", rx215_pos
  rxscan216_scan725:
    nqp_rxmark rx215_bstack, rxscan216_loop724, rx215_pos, 0
  rxscan216_done726:
    .const 'Sub' $P5001 = 'cuid_45_1360256386.79' 
    capture_lex $P5001
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    ge $I11, 0, rx215_fail720
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt222_0745
    nqp_push_label $P11, alt222_1747
    nqp_rxmark rx215_bstack, alt222_end744, -1, 0
    rx215_cur."!alt"(rx215_pos, "alt_nfa__9_1360256388.27", $P11)
    goto rx215_fail720
  alt222_0745:
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."statement_control"()
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
    nqp_rxmark rx215_bstack, rxsubrule223_pass746, -1, 0
  rxsubrule223_pass746:
    rx215_cstack = rx215_cur."!cursor_capture"($P11, "statement_control")
    repr_get_attr_int rx215_pos, $P11, rx215_curclass, "$!pos"
    goto alt222_end744
  alt222_1747:
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
    nqp_rxmark rx215_bstack, rxsubrule224_pass748, -1, 0
  rxsubrule224_pass748:
    rx215_cstack = rx215_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx215_pos, $P11, rx215_curclass, "$!pos"
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."ws"()
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
    repr_get_attr_int rx215_pos, $P11, rx215_curclass, "$!pos"
    nqp_rxmark rx215_bstack, rxquantr226_done751, rx215_pos, 0
  rxquantr226_loop750:
  alt227_0753:
    nqp_rxmark rx215_bstack, alt227_1754, rx215_pos, 0
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
    goto alt227_end752
  alt227_1754:
    nqp_rxmark rx215_bstack, alt227_2760, rx215_pos, 0
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."statement_mod_cond"()
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
    nqp_rxmark rx215_bstack, rxsubrule228_pass755, -1, 0
  rxsubrule228_pass755:
    rx215_cstack = rx215_cur."!cursor_capture"($P11, "statement_mod_cond")
    repr_get_attr_int rx215_pos, $P11, rx215_curclass, "$!pos"
    nqp_rxmark rx215_bstack, rxquantr229_done757, rx215_pos, 0
  rxquantr229_loop756:
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
    goto rxsubrule230_pass758
  rxsubrule230_back759:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
  rxsubrule230_pass758:
    rx215_cstack = rx215_cur."!cursor_capture"($P11, "statement_mod_loop")
    set_addr $I11, rxsubrule230_back759
    push rx215_bstack, $I11
    push rx215_bstack, 0
    push rx215_bstack, rx215_pos
    elements $I11, rx215_cstack
    push rx215_bstack, $I11
    repr_get_attr_int rx215_pos, $P11, rx215_curclass, "$!pos"
    nqp_rxpeek $I19, rx215_bstack, rxquantr229_done757
    inc $I19
    inc $I19
    set rx215_rep, rx215_bstack[$I19]
    nqp_rxcommit rx215_bstack, rxquantr229_done757
    inc rx215_rep
  rxquantr229_done757:
    goto alt227_end752
  alt227_2760:
    repr_bind_attr_int rx215_cur, rx215_curclass, "$!pos", rx215_pos
    $P11 = rx215_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx215_curclass, "$!pos"
    lt $I11, 0, rx215_fail720
    nqp_rxmark rx215_bstack, rxsubrule231_pass761, -1, 0
  rxsubrule231_pass761:
    rx215_cstack = rx215_cur."!cursor_capture"($P11, "statement_mod_loop")
    repr_get_attr_int rx215_pos, $P11, rx215_curclass, "$!pos"
  alt227_end752:
    nqp_rxpeek $I19, rx215_bstack, rxquantr226_done751
    inc $I19
    inc $I19
    set rx215_rep, rx215_bstack[$I19]
    nqp_rxcommit rx215_bstack, rxquantr226_done751
    inc rx215_rep
  rxquantr226_done751:
    goto alt222_end744
  alt222_end744:
    nqp_rxcommit rx215_bstack, alt222_end744
    rx215_cur."!cursor_pass"(rx215_pos, "statement", 'backtrack'=>1)
    .return (rx215_cur)
  rx215_restart719:
    repr_get_attr_obj rx215_cstack, rx215_cur, rx215_curclass, "$!cstack"
  rx215_fail720:
    unless rx215_bstack, rx215_done718
    pop $I19, rx215_bstack
    if_null rx215_cstack, rx215_cstack_done723
    unless rx215_cstack, rx215_cstack_done723
    dec $I19
    set $P11, rx215_cstack[$I19]
  rx215_cstack_done723:
    pop rx215_rep, rx215_bstack
    pop rx215_pos, rx215_bstack
    pop $I19, rx215_bstack
    lt rx215_pos, -1, rx215_done718
    lt rx215_pos, 0, rx215_fail720
    eq $I19, 0, rx215_fail720
    nqp_islist $I20, rx215_cstack
    unless $I20, rx215_jump721
    elements $I18, rx215_bstack
    le $I18, 0, rx215_cut722
    dec $I18
    set $I18, rx215_bstack[$I18]
  rx215_cut722:
    assign rx215_cstack, $I18
  rx215_jump721:
    jump $I19
  rx215_done718:
    rx215_cur."!cursor_fail"()
    .return (rx215_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_45_1360256386.79") :anon :lex :outer("cuid_44_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx217_tgt
    .local int rx217_pos
    .local int rx217_off
    .local int rx217_eos
    .local int rx217_rep
    .local pmc rx217_cur
    .local pmc rx217_curclass
    .local pmc rx217_bstack
    .local pmc rx217_cstack
    (rx217_cur, rx217_tgt, rx217_pos, rx217_curclass, rx217_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx217_cur
    length rx217_eos, rx217_tgt
    eq $I19, 1, rx217_restart729
    gt rx217_pos, rx217_eos, rx217_fail730
    repr_get_attr_int $I11, self, rx217_curclass, "$!from"
    ne $I11, -1, rxscan218_done736
    goto rxscan218_scan735
  rxscan218_loop734:
    inc rx217_pos
    gt rx217_pos, rx217_eos, rx217_fail730
    repr_bind_attr_int rx217_cur, rx217_curclass, "$!from", rx217_pos
  rxscan218_scan735:
    nqp_rxmark rx217_bstack, rxscan218_loop734, rx217_pos, 0
  rxscan218_done736:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt219_0738
    nqp_push_label $P11, alt219_1742
    nqp_rxmark rx217_bstack, alt219_end737, -1, 0
    rx217_cur."!alt"(rx217_pos, "alt_nfa__8_1360256388.256", $P11)
    goto rx217_fail730
  alt219_0738:
  alt220_0740:
    nqp_rxmark rx217_bstack, alt220_1741, rx217_pos, 0
    add $I11, rx217_pos, 1
    gt $I11, rx217_eos, rx217_fail730
    substr $S10, rx217_tgt, rx217_pos, 1
    ne $S10, ucs4:"]", rx217_fail730
    add rx217_pos, 1
    goto alt220_end739
  alt220_1741:
    ge rx217_pos, rx217_eos, rx217_fail730
    substr $S11, rx217_tgt, rx217_pos, 1
    index $I11, ucs4:")}", $S11
    lt $I11, 0, rx217_fail730
    inc rx217_pos
  alt220_end739:
    goto alt219_end737
  alt219_1742:
    lt rx217_pos, rx217_eos, rx217_fail730
    goto alt219_end737
  alt219_end737:
    rx217_cur."!cursor_pass"(rx217_pos, 'backtrack'=>1)
    .return (rx217_cur)
  rx217_restart729:
    repr_get_attr_obj rx217_cstack, rx217_cur, rx217_curclass, "$!cstack"
  rx217_fail730:
    unless rx217_bstack, rx217_done728
    pop $I19, rx217_bstack
    if_null rx217_cstack, rx217_cstack_done733
    unless rx217_cstack, rx217_cstack_done733
    dec $I19
    set $P11, rx217_cstack[$I19]
  rx217_cstack_done733:
    pop rx217_rep, rx217_bstack
    pop rx217_pos, rx217_bstack
    pop $I19, rx217_bstack
    lt rx217_pos, -1, rx217_done728
    lt rx217_pos, 0, rx217_fail730
    eq $I19, 0, rx217_fail730
    nqp_islist $I20, rx217_cstack
    unless $I20, rx217_jump731
    elements $I18, rx217_bstack
    le $I18, 0, rx217_cut732
    dec $I18
    set $I18, rx217_bstack[$I18]
  rx217_cut732:
    assign rx217_cstack, $I18
  rx217_jump731:
    jump $I19
  rx217_done728:
    rx217_cur."!cursor_fail"()
    .return (rx217_cur) 
.end
.HLL "nqp"
.namespace []
.sub "eat_terminator" :subid("cuid_46_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 765
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx232_tgt
    .local int rx232_pos
    .local int rx232_off
    .local int rx232_eos
    .local int rx232_rep
    .local pmc rx232_cur
    .local pmc rx232_curclass
    .local pmc rx232_bstack
    .local pmc rx232_cstack
    (rx232_cur, rx232_tgt, rx232_pos, rx232_curclass, rx232_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx232_cur
    length rx232_eos, rx232_tgt
    eq $I19, 1, rx232_restart764
    gt rx232_pos, rx232_eos, rx232_fail765
    repr_get_attr_int $I11, self, rx232_curclass, "$!from"
    ne $I11, -1, rxscan233_done771
    goto rxscan233_scan770
  rxscan233_loop769:
    inc rx232_pos
    gt rx232_pos, rx232_eos, rx232_fail765
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!from", rx232_pos
  rxscan233_scan770:
    nqp_rxmark rx232_bstack, rxscan233_loop769, rx232_pos, 0
  rxscan233_done771:
  alt234_0773:
    nqp_rxmark rx232_bstack, alt234_1774, rx232_pos, 0
    add $I11, rx232_pos, 1
    gt $I11, rx232_eos, rx232_fail765
    substr $S10, rx232_tgt, rx232_pos, 1
    ne $S10, ucs4:";", rx232_fail765
    add rx232_pos, 1
    goto alt234_end772
  alt234_1774:
    nqp_rxmark rx232_bstack, alt234_2775, rx232_pos, 0
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!pos", rx232_pos
    $P11 = rx232_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx232_curclass, "$!pos"
    lt $I11, 0, rx232_fail765
    goto alt234_end772
  alt234_2775:
    nqp_rxmark rx232_bstack, alt234_3776, rx232_pos, 0
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!pos", rx232_pos
    $P11 = rx232_cur."terminator"()
    repr_get_attr_int $I11, $P11, rx232_curclass, "$!pos"
    lt $I11, 0, rx232_fail765
    goto alt234_end772
  alt234_3776:
    lt rx232_pos, rx232_eos, rx232_fail765
  alt234_end772:
    rx232_cur."!cursor_pass"(rx232_pos, "eat_terminator", 'backtrack'=>1)
    .return (rx232_cur)
  rx232_restart764:
    repr_get_attr_obj rx232_cstack, rx232_cur, rx232_curclass, "$!cstack"
  rx232_fail765:
    unless rx232_bstack, rx232_done763
    pop $I19, rx232_bstack
    if_null rx232_cstack, rx232_cstack_done768
    unless rx232_cstack, rx232_cstack_done768
    dec $I19
    set $P11, rx232_cstack[$I19]
  rx232_cstack_done768:
    pop rx232_rep, rx232_bstack
    pop rx232_pos, rx232_bstack
    pop $I19, rx232_bstack
    lt rx232_pos, -1, rx232_done763
    lt rx232_pos, 0, rx232_fail765
    eq $I19, 0, rx232_fail765
    nqp_islist $I20, rx232_cstack
    unless $I20, rx232_jump766
    elements $I18, rx232_bstack
    le $I18, 0, rx232_cut767
    dec $I18
    set $I18, rx232_bstack[$I18]
  rx232_cut767:
    assign rx232_cstack, $I18
  rx232_jump766:
    jump $I19
  rx232_done763:
    rx232_cur."!cursor_fail"()
    .return (rx232_cur) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_47_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 772
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx236_tgt
    .local int rx236_pos
    .local int rx236_off
    .local int rx236_eos
    .local int rx236_rep
    .local pmc rx236_cur
    .local pmc rx236_curclass
    .local pmc rx236_bstack
    .local pmc rx236_cstack
    (rx236_cur, rx236_tgt, rx236_pos, rx236_curclass, rx236_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx236_cur
    length rx236_eos, rx236_tgt
    eq $I19, 1, rx236_restart780
    gt rx236_pos, rx236_eos, rx236_fail781
    repr_get_attr_int $I11, self, rx236_curclass, "$!from"
    ne $I11, -1, rxscan237_done787
    goto rxscan237_scan786
  rxscan237_loop785:
    inc rx236_pos
    gt rx236_pos, rx236_eos, rx236_fail781
    repr_bind_attr_int rx236_cur, rx236_curclass, "$!from", rx236_pos
  rxscan237_scan786:
    nqp_rxmark rx236_bstack, rxscan237_loop785, rx236_pos, 0
  rxscan237_done787:
    repr_bind_attr_int rx236_cur, rx236_curclass, "$!pos", rx236_pos
    $P11 = rx236_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx236_curclass, "$!pos"
    lt $I11, 0, rx236_fail781
    nqp_rxmark rx236_bstack, rxsubrule238_pass788, -1, 0
  rxsubrule238_pass788:
    rx236_cstack = rx236_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx236_pos, $P11, rx236_curclass, "$!pos"
    repr_bind_attr_int rx236_cur, rx236_curclass, "$!pos", rx236_pos
    $P11 = rx236_cur."ws"()
    repr_get_attr_int $I11, $P11, rx236_curclass, "$!pos"
    lt $I11, 0, rx236_fail781
    repr_get_attr_int rx236_pos, $P11, rx236_curclass, "$!pos"
    repr_bind_attr_int rx236_cur, rx236_curclass, "$!pos", rx236_pos
    $P11 = rx236_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx236_curclass, "$!pos"
    lt $I11, 0, rx236_fail781
    nqp_rxmark rx236_bstack, rxsubrule240_pass790, -1, 0
  rxsubrule240_pass790:
    rx236_cstack = rx236_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx236_pos, $P11, rx236_curclass, "$!pos"
    rx236_cur."!cursor_pass"(rx236_pos, "xblock", 'backtrack'=>1)
    .return (rx236_cur)
  rx236_restart780:
    repr_get_attr_obj rx236_cstack, rx236_cur, rx236_curclass, "$!cstack"
  rx236_fail781:
    unless rx236_bstack, rx236_done779
    pop $I19, rx236_bstack
    if_null rx236_cstack, rx236_cstack_done784
    unless rx236_cstack, rx236_cstack_done784
    dec $I19
    set $P11, rx236_cstack[$I19]
  rx236_cstack_done784:
    pop rx236_rep, rx236_bstack
    pop rx236_pos, rx236_bstack
    pop $I19, rx236_bstack
    lt rx236_pos, -1, rx236_done779
    lt rx236_pos, 0, rx236_fail781
    eq $I19, 0, rx236_fail781
    nqp_islist $I20, rx236_cstack
    unless $I20, rx236_jump782
    elements $I18, rx236_bstack
    le $I18, 0, rx236_cut783
    dec $I18
    set $I18, rx236_bstack[$I18]
  rx236_cut783:
    assign rx236_cstack, $I18
  rx236_jump782:
    jump $I19
  rx236_done779:
    rx236_cur."!cursor_fail"()
    .return (rx236_cur) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_48_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 776
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx241_tgt
    .local int rx241_pos
    .local int rx241_off
    .local int rx241_eos
    .local int rx241_rep
    .local pmc rx241_cur
    .local pmc rx241_curclass
    .local pmc rx241_bstack
    .local pmc rx241_cstack
    (rx241_cur, rx241_tgt, rx241_pos, rx241_curclass, rx241_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx241_cur
    length rx241_eos, rx241_tgt
    eq $I19, 1, rx241_restart793
    gt rx241_pos, rx241_eos, rx241_fail794
    repr_get_attr_int $I11, self, rx241_curclass, "$!from"
    ne $I11, -1, rxscan242_done800
    goto rxscan242_scan799
  rxscan242_loop798:
    inc rx241_pos
    gt rx241_pos, rx241_eos, rx241_fail794
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!from", rx241_pos
  rxscan242_scan799:
    nqp_rxmark rx241_bstack, rxscan242_loop798, rx241_pos, 0
  rxscan242_done800:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt243_0802
    nqp_push_label $P11, alt243_1808
    nqp_push_label $P11, alt243_2811
    nqp_rxmark rx241_bstack, alt243_end801, -1, 0
    rx241_cur."!alt"(rx241_pos, "alt_nfa__10_1360256388.297", $P11)
    goto rx241_fail794
  alt243_0802:
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."signature"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    nqp_rxmark rx241_bstack, rxsubrule246_pass805, -1, 0
  rxsubrule246_pass805:
    rx241_cstack = rx241_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."ws"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    nqp_rxmark rx241_bstack, rxsubrule248_pass807, -1, 0
  rxsubrule248_pass807:
    rx241_cstack = rx241_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    goto alt243_end801
  alt243_1808:
    ge rx241_pos, rx241_eos, rx241_fail794
    substr $S11, rx241_tgt, rx241_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx241_fail794
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    nqp_rxmark rx241_bstack, rxsubrule250_pass810, -1, 0
  rxsubrule250_pass810:
    rx241_cstack = rx241_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    goto alt243_end801
  alt243_2811:
    repr_bind_attr_int rx241_cur, rx241_curclass, "$!pos", rx241_pos
    $P11 = rx241_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx241_curclass, "$!pos"
    lt $I11, 0, rx241_fail794
    repr_get_attr_int rx241_pos, $P11, rx241_curclass, "$!pos"
    goto alt243_end801
  alt243_end801:
    rx241_cur."!cursor_pass"(rx241_pos, "pblock", 'backtrack'=>1)
    .return (rx241_cur)
  rx241_restart793:
    repr_get_attr_obj rx241_cstack, rx241_cur, rx241_curclass, "$!cstack"
  rx241_fail794:
    unless rx241_bstack, rx241_done792
    pop $I19, rx241_bstack
    if_null rx241_cstack, rx241_cstack_done797
    unless rx241_cstack, rx241_cstack_done797
    dec $I19
    set $P11, rx241_cstack[$I19]
  rx241_cstack_done797:
    pop rx241_rep, rx241_bstack
    pop rx241_pos, rx241_bstack
    pop $I19, rx241_bstack
    lt rx241_pos, -1, rx241_done792
    lt rx241_pos, 0, rx241_fail794
    eq $I19, 0, rx241_fail794
    nqp_islist $I20, rx241_cstack
    unless $I20, rx241_jump795
    elements $I18, rx241_bstack
    le $I18, 0, rx241_cut796
    dec $I18
    set $I18, rx241_bstack[$I18]
  rx241_cut796:
    assign rx241_cstack, $I18
  rx241_jump795:
    jump $I19
  rx241_done792:
    rx241_cur."!cursor_fail"()
    .return (rx241_cur) 
.end
.HLL "nqp"
.namespace []
.sub "lambda" :subid("cuid_49_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 787
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx252_tgt
    .local int rx252_pos
    .local int rx252_off
    .local int rx252_eos
    .local int rx252_rep
    .local pmc rx252_cur
    .local pmc rx252_curclass
    .local pmc rx252_bstack
    .local pmc rx252_cstack
    (rx252_cur, rx252_tgt, rx252_pos, rx252_curclass, rx252_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx252_cur
    length rx252_eos, rx252_tgt
    eq $I19, 1, rx252_restart815
    gt rx252_pos, rx252_eos, rx252_fail816
    repr_get_attr_int $I11, self, rx252_curclass, "$!from"
    ne $I11, -1, rxscan253_done822
    goto rxscan253_scan821
  rxscan253_loop820:
    inc rx252_pos
    gt rx252_pos, rx252_eos, rx252_fail816
    repr_bind_attr_int rx252_cur, rx252_curclass, "$!from", rx252_pos
  rxscan253_scan821:
    nqp_rxmark rx252_bstack, rxscan253_loop820, rx252_pos, 0
  rxscan253_done822:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt254_0824
    nqp_push_label $P11, alt254_1825
    nqp_rxmark rx252_bstack, alt254_end823, -1, 0
    rx252_cur."!alt"(rx252_pos, "alt_nfa__11_1360256388.303", $P11)
    goto rx252_fail816
  alt254_0824:
    add $I11, rx252_pos, 2
    gt $I11, rx252_eos, rx252_fail816
    substr $S10, rx252_tgt, rx252_pos, 2
    ne $S10, ucs4:"->", rx252_fail816
    add rx252_pos, 2
    goto alt254_end823
  alt254_1825:
    add $I11, rx252_pos, 3
    gt $I11, rx252_eos, rx252_fail816
    substr $S10, rx252_tgt, rx252_pos, 3
    ne $S10, ucs4:"<->", rx252_fail816
    add rx252_pos, 3
    goto alt254_end823
  alt254_end823:
    rx252_cur."!cursor_pass"(rx252_pos, "lambda", 'backtrack'=>1)
    .return (rx252_cur)
  rx252_restart815:
    repr_get_attr_obj rx252_cstack, rx252_cur, rx252_curclass, "$!cstack"
  rx252_fail816:
    unless rx252_bstack, rx252_done814
    pop $I19, rx252_bstack
    if_null rx252_cstack, rx252_cstack_done819
    unless rx252_cstack, rx252_cstack_done819
    dec $I19
    set $P11, rx252_cstack[$I19]
  rx252_cstack_done819:
    pop rx252_rep, rx252_bstack
    pop rx252_pos, rx252_bstack
    pop $I19, rx252_bstack
    lt rx252_pos, -1, rx252_done814
    lt rx252_pos, 0, rx252_fail816
    eq $I19, 0, rx252_fail816
    nqp_islist $I20, rx252_cstack
    unless $I20, rx252_jump817
    elements $I18, rx252_bstack
    le $I18, 0, rx252_cut818
    dec $I18
    set $I18, rx252_bstack[$I18]
  rx252_cut818:
    assign rx252_cstack, $I18
  rx252_jump817:
    jump $I19
  rx252_done814:
    rx252_cur."!cursor_fail"()
    .return (rx252_cur) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_50_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 789
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx255_tgt
    .local int rx255_pos
    .local int rx255_off
    .local int rx255_eos
    .local int rx255_rep
    .local pmc rx255_cur
    .local pmc rx255_curclass
    .local pmc rx255_bstack
    .local pmc rx255_cstack
    (rx255_cur, rx255_tgt, rx255_pos, rx255_curclass, rx255_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx255_cur
    length rx255_eos, rx255_tgt
    eq $I19, 1, rx255_restart828
    gt rx255_pos, rx255_eos, rx255_fail829
    repr_get_attr_int $I11, self, rx255_curclass, "$!from"
    ne $I11, -1, rxscan256_done835
    goto rxscan256_scan834
  rxscan256_loop833:
    inc rx255_pos
    gt rx255_pos, rx255_eos, rx255_fail829
    repr_bind_attr_int rx255_cur, rx255_curclass, "$!from", rx255_pos
  rxscan256_scan834:
    nqp_rxmark rx255_bstack, rxscan256_loop833, rx255_pos, 0
  rxscan256_done835:
  alt257_0837:
    nqp_rxmark rx255_bstack, alt257_1838, rx255_pos, 0
    ge rx255_pos, rx255_eos, rx255_fail829
    substr $S11, rx255_tgt, rx255_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx255_fail829
    goto alt257_end836
  alt257_1838:
    repr_bind_attr_int rx255_cur, rx255_curclass, "$!pos", rx255_pos
    $P11 = rx255_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx255_curclass, "$!pos"
    lt $I11, 0, rx255_fail829
    repr_get_attr_int rx255_pos, $P11, rx255_curclass, "$!pos"
  alt257_end836:
    repr_bind_attr_int rx255_cur, rx255_curclass, "$!pos", rx255_pos
    $P11 = rx255_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx255_curclass, "$!pos"
    lt $I11, 0, rx255_fail829
    repr_get_attr_int rx255_pos, $P11, rx255_curclass, "$!pos"
    repr_bind_attr_int rx255_cur, rx255_curclass, "$!pos", rx255_pos
    $P11 = rx255_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx255_curclass, "$!pos"
    lt $I11, 0, rx255_fail829
    nqp_rxmark rx255_bstack, rxsubrule260_pass841, -1, 0
  rxsubrule260_pass841:
    rx255_cstack = rx255_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx255_pos, $P11, rx255_curclass, "$!pos"
    rx255_cur."!cursor_pass"(rx255_pos, "block", 'backtrack'=>1)
    .return (rx255_cur)
  rx255_restart828:
    repr_get_attr_obj rx255_cstack, rx255_cur, rx255_curclass, "$!cstack"
  rx255_fail829:
    unless rx255_bstack, rx255_done827
    pop $I19, rx255_bstack
    if_null rx255_cstack, rx255_cstack_done832
    unless rx255_cstack, rx255_cstack_done832
    dec $I19
    set $P11, rx255_cstack[$I19]
  rx255_cstack_done832:
    pop rx255_rep, rx255_bstack
    pop rx255_pos, rx255_bstack
    pop $I19, rx255_bstack
    lt rx255_pos, -1, rx255_done827
    lt rx255_pos, 0, rx255_fail829
    eq $I19, 0, rx255_fail829
    nqp_islist $I20, rx255_cstack
    unless $I20, rx255_jump830
    elements $I18, rx255_bstack
    le $I18, 0, rx255_cut831
    dec $I18
    set $I18, rx255_bstack[$I18]
  rx255_cut831:
    assign rx255_cstack, $I18
  rx255_jump830:
    jump $I19
  rx255_done827:
    rx255_cur."!cursor_fail"()
    .return (rx255_cur) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_51_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 795
    .param pmc _lex_param_0 
    .lex "%*HANDLERS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx261_tgt
    .local int rx261_pos
    .local int rx261_off
    .local int rx261_eos
    .local int rx261_rep
    .local pmc rx261_cur
    .local pmc rx261_curclass
    .local pmc rx261_bstack
    .local pmc rx261_cstack
    (rx261_cur, rx261_tgt, rx261_pos, rx261_curclass, rx261_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx261_cur
    length rx261_eos, rx261_tgt
    eq $I19, 1, rx261_restart844
    gt rx261_pos, rx261_eos, rx261_fail845
    repr_get_attr_int $I11, self, rx261_curclass, "$!from"
    ne $I11, -1, rxscan262_done851
    goto rxscan262_scan850
  rxscan262_loop849:
    inc rx261_pos
    gt rx261_pos, rx261_eos, rx261_fail845
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!from", rx261_pos
  rxscan262_scan850:
    nqp_rxmark rx261_bstack, rxscan262_loop849, rx261_pos, 0
  rxscan262_done851:
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    store_lex unicode:"$\x{a2}", rx261_cur
    unless_null $P101, fallback852
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback853
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback853:
    unless_null $P5002, vivi_263854
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_263854:
    set $P101, $P5002
  fallback852:
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail845
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
  alt265_0857:
    nqp_rxmark rx261_bstack, alt265_1859, rx261_pos, 0
    add $I11, rx261_pos, 14
    gt $I11, rx261_eos, rx261_fail845
    substr $S10, rx261_tgt, rx261_pos, 14
    ne $S10, ucs4:"{YOU_ARE_HERE}", rx261_fail845
    add rx261_pos, 14
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."you_are_here"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail845
    nqp_rxmark rx261_bstack, rxsubrule266_pass858, -1, 0
  rxsubrule266_pass858:
    rx261_cstack = rx261_cur."!cursor_capture"($P11, "you_are_here")
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
    goto alt265_end856
  alt265_1859:
    add $I11, rx261_pos, 1
    gt $I11, rx261_eos, rx261_fail845
    substr $S10, rx261_tgt, rx261_pos, 1
    ne $S10, ucs4:"{", rx261_fail845
    add rx261_pos, 1
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail845
    nqp_rxmark rx261_bstack, rxsubrule267_pass860, -1, 0
  rxsubrule267_pass860:
    rx261_cstack = rx261_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
  alt268_0862:
    nqp_rxmark rx261_bstack, alt268_1863, rx261_pos, 0
    add $I11, rx261_pos, 1
    gt $I11, rx261_eos, rx261_fail845
    substr $S10, rx261_tgt, rx261_pos, 1
    ne $S10, ucs4:"}", rx261_fail845
    add rx261_pos, 1
    goto alt268_end861
  alt268_1863:
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."FAILGOAL"("'}'")
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail845
    goto rxsubrule269_pass864
  rxsubrule269_back865:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail845
  rxsubrule269_pass864:
    rx261_cstack = rx261_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule269_back865
    push rx261_bstack, $I11
    push rx261_bstack, 0
    push rx261_bstack, rx261_pos
    elements $I11, rx261_cstack
    push rx261_bstack, $I11
    repr_get_attr_int rx261_pos, $P11, rx261_curclass, "$!pos"
  alt268_end861:
  alt265_end856:
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!pos", rx261_pos
    $P11 = rx261_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx261_curclass, "$!pos"
    lt $I11, 0, rx261_fail845
    rx261_cur."!cursor_pass"(rx261_pos, "blockoid", 'backtrack'=>1)
    .return (rx261_cur)
  rx261_restart844:
    repr_get_attr_obj rx261_cstack, rx261_cur, rx261_curclass, "$!cstack"
  rx261_fail845:
    unless rx261_bstack, rx261_done843
    pop $I19, rx261_bstack
    if_null rx261_cstack, rx261_cstack_done848
    unless rx261_cstack, rx261_cstack_done848
    dec $I19
    set $P11, rx261_cstack[$I19]
  rx261_cstack_done848:
    pop rx261_rep, rx261_bstack
    pop rx261_pos, rx261_bstack
    pop $I19, rx261_bstack
    lt rx261_pos, -1, rx261_done843
    lt rx261_pos, 0, rx261_fail845
    eq $I19, 0, rx261_fail845
    nqp_islist $I20, rx261_cstack
    unless $I20, rx261_jump846
    elements $I18, rx261_bstack
    le $I18, 0, rx261_cut847
    dec $I18
    set $I18, rx261_bstack[$I18]
  rx261_cut847:
    assign rx261_cstack, $I18
  rx261_jump846:
    jump $I19
  rx261_done843:
    rx261_cur."!cursor_fail"()
    .return (rx261_cur) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_52_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 805
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx270_tgt
    .local int rx270_pos
    .local int rx270_off
    .local int rx270_eos
    .local int rx270_rep
    .local pmc rx270_cur
    .local pmc rx270_curclass
    .local pmc rx270_bstack
    .local pmc rx270_cstack
    (rx270_cur, rx270_tgt, rx270_pos, rx270_curclass, rx270_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx270_cur
    length rx270_eos, rx270_tgt
    eq $I19, 1, rx270_restart868
    gt rx270_pos, rx270_eos, rx270_fail869
    repr_get_attr_int $I11, self, rx270_curclass, "$!from"
    ne $I11, -1, rxscan271_done875
    goto rxscan271_scan874
  rxscan271_loop873:
    inc rx270_pos
    gt rx270_pos, rx270_eos, rx270_fail869
    repr_bind_attr_int rx270_cur, rx270_curclass, "$!from", rx270_pos
  rxscan271_scan874:
    nqp_rxmark rx270_bstack, rxscan271_loop873, rx270_pos, 0
  rxscan271_done875:
    rx270_cur."!cursor_pass"(rx270_pos, "newpad", 'backtrack'=>1)
    .return (rx270_cur)
  rx270_restart868:
    repr_get_attr_obj rx270_cstack, rx270_cur, rx270_curclass, "$!cstack"
  rx270_fail869:
    unless rx270_bstack, rx270_done867
    pop $I19, rx270_bstack
    if_null rx270_cstack, rx270_cstack_done872
    unless rx270_cstack, rx270_cstack_done872
    dec $I19
    set $P11, rx270_cstack[$I19]
  rx270_cstack_done872:
    pop rx270_rep, rx270_bstack
    pop rx270_pos, rx270_bstack
    pop $I19, rx270_bstack
    lt rx270_pos, -1, rx270_done867
    lt rx270_pos, 0, rx270_fail869
    eq $I19, 0, rx270_fail869
    nqp_islist $I20, rx270_cstack
    unless $I20, rx270_jump870
    elements $I18, rx270_bstack
    le $I18, 0, rx270_cut871
    dec $I18
    set $I18, rx270_bstack[$I18]
  rx270_cut871:
    assign rx270_cstack, $I18
  rx270_jump870:
    jump $I19
  rx270_done867:
    rx270_cur."!cursor_fail"()
    .return (rx270_cur) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_53_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 806
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx273_tgt
    .local int rx273_pos
    .local int rx273_off
    .local int rx273_eos
    .local int rx273_rep
    .local pmc rx273_cur
    .local pmc rx273_curclass
    .local pmc rx273_bstack
    .local pmc rx273_cstack
    (rx273_cur, rx273_tgt, rx273_pos, rx273_curclass, rx273_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx273_cur
    length rx273_eos, rx273_tgt
    eq $I19, 1, rx273_restart879
    gt rx273_pos, rx273_eos, rx273_fail880
    repr_get_attr_int $I11, self, rx273_curclass, "$!from"
    ne $I11, -1, rxscan274_done886
    goto rxscan274_scan885
  rxscan274_loop884:
    inc rx273_pos
    gt rx273_pos, rx273_eos, rx273_fail880
    repr_bind_attr_int rx273_cur, rx273_curclass, "$!from", rx273_pos
  rxscan274_scan885:
    nqp_rxmark rx273_bstack, rxscan274_loop884, rx273_pos, 0
  rxscan274_done886:
    rx273_cur."!cursor_pass"(rx273_pos, "outerctx", 'backtrack'=>1)
    .return (rx273_cur)
  rx273_restart879:
    repr_get_attr_obj rx273_cstack, rx273_cur, rx273_curclass, "$!cstack"
  rx273_fail880:
    unless rx273_bstack, rx273_done878
    pop $I19, rx273_bstack
    if_null rx273_cstack, rx273_cstack_done883
    unless rx273_cstack, rx273_cstack_done883
    dec $I19
    set $P11, rx273_cstack[$I19]
  rx273_cstack_done883:
    pop rx273_rep, rx273_bstack
    pop rx273_pos, rx273_bstack
    pop $I19, rx273_bstack
    lt rx273_pos, -1, rx273_done878
    lt rx273_pos, 0, rx273_fail880
    eq $I19, 0, rx273_fail880
    nqp_islist $I20, rx273_cstack
    unless $I20, rx273_jump881
    elements $I18, rx273_bstack
    le $I18, 0, rx273_cut882
    dec $I18
    set $I18, rx273_bstack[$I18]
  rx273_cut882:
    assign rx273_cstack, $I18
  rx273_jump881:
    jump $I19
  rx273_done878:
    rx273_cur."!cursor_fail"()
    .return (rx273_cur) 
.end
.HLL "nqp"
.namespace []
.sub "finishpad" :subid("cuid_54_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 807
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx276_tgt
    .local int rx276_pos
    .local int rx276_off
    .local int rx276_eos
    .local int rx276_rep
    .local pmc rx276_cur
    .local pmc rx276_curclass
    .local pmc rx276_bstack
    .local pmc rx276_cstack
    (rx276_cur, rx276_tgt, rx276_pos, rx276_curclass, rx276_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx276_cur
    length rx276_eos, rx276_tgt
    eq $I19, 1, rx276_restart890
    gt rx276_pos, rx276_eos, rx276_fail891
    repr_get_attr_int $I11, self, rx276_curclass, "$!from"
    ne $I11, -1, rxscan277_done897
    goto rxscan277_scan896
  rxscan277_loop895:
    inc rx276_pos
    gt rx276_pos, rx276_eos, rx276_fail891
    repr_bind_attr_int rx276_cur, rx276_curclass, "$!from", rx276_pos
  rxscan277_scan896:
    nqp_rxmark rx276_bstack, rxscan277_loop895, rx276_pos, 0
  rxscan277_done897:
    rx276_cur."!cursor_pass"(rx276_pos, "finishpad", 'backtrack'=>1)
    .return (rx276_cur)
  rx276_restart890:
    repr_get_attr_obj rx276_cstack, rx276_cur, rx276_curclass, "$!cstack"
  rx276_fail891:
    unless rx276_bstack, rx276_done889
    pop $I19, rx276_bstack
    if_null rx276_cstack, rx276_cstack_done894
    unless rx276_cstack, rx276_cstack_done894
    dec $I19
    set $P11, rx276_cstack[$I19]
  rx276_cstack_done894:
    pop rx276_rep, rx276_bstack
    pop rx276_pos, rx276_bstack
    pop $I19, rx276_bstack
    lt rx276_pos, -1, rx276_done889
    lt rx276_pos, 0, rx276_fail891
    eq $I19, 0, rx276_fail891
    nqp_islist $I20, rx276_cstack
    unless $I20, rx276_jump892
    elements $I18, rx276_bstack
    le $I18, 0, rx276_cut893
    dec $I18
    set $I18, rx276_bstack[$I18]
  rx276_cut893:
    assign rx276_cstack, $I18
  rx276_jump892:
    jump $I19
  rx276_done889:
    rx276_cur."!cursor_fail"()
    .return (rx276_cur) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_55_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 808
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx279_tgt
    .local int rx279_pos
    .local int rx279_off
    .local int rx279_eos
    .local int rx279_rep
    .local pmc rx279_cur
    .local pmc rx279_curclass
    .local pmc rx279_bstack
    .local pmc rx279_cstack
    (rx279_cur, rx279_tgt, rx279_pos, rx279_curclass, rx279_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx279_cur
    length rx279_eos, rx279_tgt
    eq $I19, 1, rx279_restart901
    gt rx279_pos, rx279_eos, rx279_fail902
    repr_get_attr_int $I11, self, rx279_curclass, "$!from"
    ne $I11, -1, rxscan280_done908
    goto rxscan280_scan907
  rxscan280_loop906:
    inc rx279_pos
    gt rx279_pos, rx279_eos, rx279_fail902
    repr_bind_attr_int rx279_cur, rx279_curclass, "$!from", rx279_pos
  rxscan280_scan907:
    nqp_rxmark rx279_bstack, rxscan280_loop906, rx279_pos, 0
  rxscan280_done908:
    rx279_cur."!cursor_pass"(rx279_pos, "you_are_here", 'backtrack'=>1)
    .return (rx279_cur)
  rx279_restart901:
    repr_get_attr_obj rx279_cstack, rx279_cur, rx279_curclass, "$!cstack"
  rx279_fail902:
    unless rx279_bstack, rx279_done900
    pop $I19, rx279_bstack
    if_null rx279_cstack, rx279_cstack_done905
    unless rx279_cstack, rx279_cstack_done905
    dec $I19
    set $P11, rx279_cstack[$I19]
  rx279_cstack_done905:
    pop rx279_rep, rx279_bstack
    pop rx279_pos, rx279_bstack
    pop $I19, rx279_bstack
    lt rx279_pos, -1, rx279_done900
    lt rx279_pos, 0, rx279_fail902
    eq $I19, 0, rx279_fail902
    nqp_islist $I20, rx279_cstack
    unless $I20, rx279_jump903
    elements $I18, rx279_bstack
    le $I18, 0, rx279_cut904
    dec $I18
    set $I18, rx279_bstack[$I18]
  rx279_cut904:
    assign rx279_cstack, $I18
  rx279_jump903:
    jump $I19
  rx279_done900:
    rx279_cur."!cursor_fail"()
    .return (rx279_cur) 
.end
.HLL "nqp"
.namespace []
.sub "terminator" :subid("cuid_56_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 810
    .param pmc self 
    $P5001 = self."!protoregex"("terminator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<;>" :subid("cuid_57_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 812
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx282_tgt
    .local int rx282_pos
    .local int rx282_off
    .local int rx282_eos
    .local int rx282_rep
    .local pmc rx282_cur
    .local pmc rx282_curclass
    .local pmc rx282_bstack
    .local pmc rx282_cstack
    (rx282_cur, rx282_tgt, rx282_pos, rx282_curclass, rx282_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx282_cur
    length rx282_eos, rx282_tgt
    eq $I19, 1, rx282_restart912
    gt rx282_pos, rx282_eos, rx282_fail913
    repr_get_attr_int $I11, self, rx282_curclass, "$!from"
    ne $I11, -1, rxscan283_done919
    goto rxscan283_scan918
  rxscan283_loop917:
    inc rx282_pos
    gt rx282_pos, rx282_eos, rx282_fail913
    repr_bind_attr_int rx282_cur, rx282_curclass, "$!from", rx282_pos
  rxscan283_scan918:
    nqp_rxmark rx282_bstack, rxscan283_loop917, rx282_pos, 0
  rxscan283_done919:
    ge rx282_pos, rx282_eos, rx282_fail913
    substr $S11, rx282_tgt, rx282_pos, 1
    index $I11, ucs4:";", $S11
    lt $I11, 0, rx282_fail913
    rx282_cur."!cursor_pass"(rx282_pos, "terminator:sym<;>", 'backtrack'=>1)
    .return (rx282_cur)
  rx282_restart912:
    repr_get_attr_obj rx282_cstack, rx282_cur, rx282_curclass, "$!cstack"
  rx282_fail913:
    unless rx282_bstack, rx282_done911
    pop $I19, rx282_bstack
    if_null rx282_cstack, rx282_cstack_done916
    unless rx282_cstack, rx282_cstack_done916
    dec $I19
    set $P11, rx282_cstack[$I19]
  rx282_cstack_done916:
    pop rx282_rep, rx282_bstack
    pop rx282_pos, rx282_bstack
    pop $I19, rx282_bstack
    lt rx282_pos, -1, rx282_done911
    lt rx282_pos, 0, rx282_fail913
    eq $I19, 0, rx282_fail913
    nqp_islist $I20, rx282_cstack
    unless $I20, rx282_jump914
    elements $I18, rx282_bstack
    le $I18, 0, rx282_cut915
    dec $I18
    set $I18, rx282_bstack[$I18]
  rx282_cut915:
    assign rx282_cstack, $I18
  rx282_jump914:
    jump $I19
  rx282_done911:
    rx282_cur."!cursor_fail"()
    .return (rx282_cur) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<}>" :subid("cuid_58_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 813
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx284_tgt
    .local int rx284_pos
    .local int rx284_off
    .local int rx284_eos
    .local int rx284_rep
    .local pmc rx284_cur
    .local pmc rx284_curclass
    .local pmc rx284_bstack
    .local pmc rx284_cstack
    (rx284_cur, rx284_tgt, rx284_pos, rx284_curclass, rx284_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx284_cur
    length rx284_eos, rx284_tgt
    eq $I19, 1, rx284_restart922
    gt rx284_pos, rx284_eos, rx284_fail923
    repr_get_attr_int $I11, self, rx284_curclass, "$!from"
    ne $I11, -1, rxscan285_done929
    goto rxscan285_scan928
  rxscan285_loop927:
    inc rx284_pos
    gt rx284_pos, rx284_eos, rx284_fail923
    repr_bind_attr_int rx284_cur, rx284_curclass, "$!from", rx284_pos
  rxscan285_scan928:
    nqp_rxmark rx284_bstack, rxscan285_loop927, rx284_pos, 0
  rxscan285_done929:
    ge rx284_pos, rx284_eos, rx284_fail923
    substr $S11, rx284_tgt, rx284_pos, 1
    index $I11, ucs4:"}", $S11
    lt $I11, 0, rx284_fail923
    rx284_cur."!cursor_pass"(rx284_pos, "terminator:sym<}>", 'backtrack'=>1)
    .return (rx284_cur)
  rx284_restart922:
    repr_get_attr_obj rx284_cstack, rx284_cur, rx284_curclass, "$!cstack"
  rx284_fail923:
    unless rx284_bstack, rx284_done921
    pop $I19, rx284_bstack
    if_null rx284_cstack, rx284_cstack_done926
    unless rx284_cstack, rx284_cstack_done926
    dec $I19
    set $P11, rx284_cstack[$I19]
  rx284_cstack_done926:
    pop rx284_rep, rx284_bstack
    pop rx284_pos, rx284_bstack
    pop $I19, rx284_bstack
    lt rx284_pos, -1, rx284_done921
    lt rx284_pos, 0, rx284_fail923
    eq $I19, 0, rx284_fail923
    nqp_islist $I20, rx284_cstack
    unless $I20, rx284_jump924
    elements $I18, rx284_bstack
    le $I18, 0, rx284_cut925
    dec $I18
    set $I18, rx284_bstack[$I18]
  rx284_cut925:
    assign rx284_cstack, $I18
  rx284_jump924:
    jump $I19
  rx284_done921:
    rx284_cur."!cursor_fail"()
    .return (rx284_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control" :subid("cuid_59_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 817
    .param pmc self 
    $P5001 = self."!protoregex"("statement_control")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_60_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 819
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx286_tgt
    .local int rx286_pos
    .local int rx286_off
    .local int rx286_eos
    .local int rx286_rep
    .local pmc rx286_cur
    .local pmc rx286_curclass
    .local pmc rx286_bstack
    .local pmc rx286_cstack
    (rx286_cur, rx286_tgt, rx286_pos, rx286_curclass, rx286_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx286_cur
    length rx286_eos, rx286_tgt
    eq $I19, 1, rx286_restart932
    gt rx286_pos, rx286_eos, rx286_fail933
    repr_get_attr_int $I11, self, rx286_curclass, "$!from"
    ne $I11, -1, rxscan287_done939
    goto rxscan287_scan938
  rxscan287_loop937:
    inc rx286_pos
    gt rx286_pos, rx286_eos, rx286_fail933
    repr_bind_attr_int rx286_cur, rx286_curclass, "$!from", rx286_pos
  rxscan287_scan938:
    nqp_rxmark rx286_bstack, rxscan287_loop937, rx286_pos, 0
  rxscan287_done939:
    nqp_rxmark rx286_bstack, rxcap288_fail941, rx286_pos, 0
    add $I11, rx286_pos, 3
    gt $I11, rx286_eos, rx286_fail933
    substr $S10, rx286_tgt, rx286_pos, 3
    ne $S10, ucs4:"use", rx286_fail933
    add rx286_pos, 3
    nqp_rxpeek $I19, rx286_bstack, rxcap288_fail941
    inc $I19
    set $I11, rx286_bstack[$I19]
    repr_bind_attr_int rx286_cur, rx286_curclass, "$!pos", rx286_pos
    $P11 = rx286_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx286_pos)
    rx286_cstack = rx286_cur."!cursor_capture"($P11, "sym")
    goto rxcap288_done940
  rxcap288_fail941:
    goto rx286_fail933
  rxcap288_done940:
    ge rx286_pos, rx286_eos, rx286_fail933
    is_cclass $I11, .CCLASS_WHITESPACE, rx286_tgt, rx286_pos
    unless $I11, rx286_fail933
    add rx286_pos, 1
    repr_bind_attr_int rx286_cur, rx286_curclass, "$!pos", rx286_pos
    $P11 = rx286_cur."ws"()
    repr_get_attr_int $I11, $P11, rx286_curclass, "$!pos"
    lt $I11, 0, rx286_fail933
    repr_get_attr_int rx286_pos, $P11, rx286_curclass, "$!pos"
    repr_bind_attr_int rx286_cur, rx286_curclass, "$!pos", rx286_pos
    $P11 = rx286_cur."name"()
    repr_get_attr_int $I11, $P11, rx286_curclass, "$!pos"
    lt $I11, 0, rx286_fail933
    nqp_rxmark rx286_bstack, rxsubrule290_pass943, -1, 0
  rxsubrule290_pass943:
    rx286_cstack = rx286_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx286_pos, $P11, rx286_curclass, "$!pos"
    repr_bind_attr_int rx286_cur, rx286_curclass, "$!pos", rx286_pos
    $P11 = rx286_cur."ws"()
    repr_get_attr_int $I11, $P11, rx286_curclass, "$!pos"
    lt $I11, 0, rx286_fail933
    repr_get_attr_int rx286_pos, $P11, rx286_curclass, "$!pos"
    rx286_cur."!cursor_pass"(rx286_pos, "statement_control:sym<use>", 'backtrack'=>1)
    .return (rx286_cur)
  rx286_restart932:
    repr_get_attr_obj rx286_cstack, rx286_cur, rx286_curclass, "$!cstack"
  rx286_fail933:
    unless rx286_bstack, rx286_done931
    pop $I19, rx286_bstack
    if_null rx286_cstack, rx286_cstack_done936
    unless rx286_cstack, rx286_cstack_done936
    dec $I19
    set $P11, rx286_cstack[$I19]
  rx286_cstack_done936:
    pop rx286_rep, rx286_bstack
    pop rx286_pos, rx286_bstack
    pop $I19, rx286_bstack
    lt rx286_pos, -1, rx286_done931
    lt rx286_pos, 0, rx286_fail933
    eq $I19, 0, rx286_fail933
    nqp_islist $I20, rx286_cstack
    unless $I20, rx286_jump934
    elements $I18, rx286_bstack
    le $I18, 0, rx286_cut935
    dec $I18
    set $I18, rx286_bstack[$I18]
  rx286_cut935:
    assign rx286_cstack, $I18
  rx286_jump934:
    jump $I19
  rx286_done931:
    rx286_cur."!cursor_fail"()
    .return (rx286_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_61_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 823
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx292_tgt
    .local int rx292_pos
    .local int rx292_off
    .local int rx292_eos
    .local int rx292_rep
    .local pmc rx292_cur
    .local pmc rx292_curclass
    .local pmc rx292_bstack
    .local pmc rx292_cstack
    (rx292_cur, rx292_tgt, rx292_pos, rx292_curclass, rx292_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx292_cur
    length rx292_eos, rx292_tgt
    eq $I19, 1, rx292_restart947
    gt rx292_pos, rx292_eos, rx292_fail948
    repr_get_attr_int $I11, self, rx292_curclass, "$!from"
    ne $I11, -1, rxscan293_done954
    goto rxscan293_scan953
  rxscan293_loop952:
    inc rx292_pos
    gt rx292_pos, rx292_eos, rx292_fail948
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!from", rx292_pos
  rxscan293_scan953:
    nqp_rxmark rx292_bstack, rxscan293_loop952, rx292_pos, 0
  rxscan293_done954:
    nqp_rxmark rx292_bstack, rxcap294_fail956, rx292_pos, 0
    add $I11, rx292_pos, 2
    gt $I11, rx292_eos, rx292_fail948
    substr $S10, rx292_tgt, rx292_pos, 2
    ne $S10, ucs4:"if", rx292_fail948
    add rx292_pos, 2
    nqp_rxpeek $I19, rx292_bstack, rxcap294_fail956
    inc $I19
    set $I11, rx292_bstack[$I19]
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx292_pos)
    rx292_cstack = rx292_cur."!cursor_capture"($P11, "sym")
    goto rxcap294_done955
  rxcap294_fail956:
    goto rx292_fail948
  rxcap294_done955:
    ge rx292_pos, rx292_eos, rx292_fail948
    is_cclass $I11, .CCLASS_WHITESPACE, rx292_tgt, rx292_pos
    unless $I11, rx292_fail948
    add rx292_pos, 1
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    nqp_rxmark rx292_bstack, rxsubrule296_pass958, -1, 0
  rxsubrule296_pass958:
    rx292_cstack = rx292_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    nqp_rxmark rx292_bstack, rxquantr298_done961, rx292_pos, 0
  rxquantr298_loop960:
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    add $I11, rx292_pos, 5
    gt $I11, rx292_eos, rx292_fail948
    substr $S10, rx292_tgt, rx292_pos, 5
    ne $S10, ucs4:"elsif", rx292_fail948
    add rx292_pos, 5
    ge rx292_pos, rx292_eos, rx292_fail948
    is_cclass $I11, .CCLASS_WHITESPACE, rx292_tgt, rx292_pos
    unless $I11, rx292_fail948
    add rx292_pos, 1
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    nqp_rxmark rx292_bstack, rxsubrule301_pass964, -1, 0
  rxsubrule301_pass964:
    rx292_cstack = rx292_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    nqp_rxpeek $I19, rx292_bstack, rxquantr298_done961
    inc $I19
    inc $I19
    set rx292_rep, rx292_bstack[$I19]
    nqp_rxcommit rx292_bstack, rxquantr298_done961
    inc rx292_rep
    nqp_rxmark rx292_bstack, rxquantr298_done961, rx292_pos, rx292_rep
    goto rxquantr298_loop960
  rxquantr298_done961:
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    nqp_rxmark rx292_bstack, rxquantr304_done968, rx292_pos, 0
  rxquantr304_loop967:
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    add $I11, rx292_pos, 4
    gt $I11, rx292_eos, rx292_fail948
    substr $S10, rx292_tgt, rx292_pos, 4
    ne $S10, ucs4:"else", rx292_fail948
    add rx292_pos, 4
    ge rx292_pos, rx292_eos, rx292_fail948
    is_cclass $I11, .CCLASS_WHITESPACE, rx292_tgt, rx292_pos
    unless $I11, rx292_fail948
    add rx292_pos, 1
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    nqp_rxmark rx292_bstack, rxsubrule307_pass971, -1, 0
  rxsubrule307_pass971:
    rx292_cstack = rx292_cur."!cursor_capture"($P11, "else")
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    nqp_rxpeek $I19, rx292_bstack, rxquantr304_done968
    inc $I19
    inc $I19
    set rx292_rep, rx292_bstack[$I19]
    nqp_rxcommit rx292_bstack, rxquantr304_done968
    inc rx292_rep
  rxquantr304_done968:
    repr_bind_attr_int rx292_cur, rx292_curclass, "$!pos", rx292_pos
    $P11 = rx292_cur."ws"()
    repr_get_attr_int $I11, $P11, rx292_curclass, "$!pos"
    lt $I11, 0, rx292_fail948
    repr_get_attr_int rx292_pos, $P11, rx292_curclass, "$!pos"
    rx292_cur."!cursor_pass"(rx292_pos, "statement_control:sym<if>", 'backtrack'=>1)
    .return (rx292_cur)
  rx292_restart947:
    repr_get_attr_obj rx292_cstack, rx292_cur, rx292_curclass, "$!cstack"
  rx292_fail948:
    unless rx292_bstack, rx292_done946
    pop $I19, rx292_bstack
    if_null rx292_cstack, rx292_cstack_done951
    unless rx292_cstack, rx292_cstack_done951
    dec $I19
    set $P11, rx292_cstack[$I19]
  rx292_cstack_done951:
    pop rx292_rep, rx292_bstack
    pop rx292_pos, rx292_bstack
    pop $I19, rx292_bstack
    lt rx292_pos, -1, rx292_done946
    lt rx292_pos, 0, rx292_fail948
    eq $I19, 0, rx292_fail948
    nqp_islist $I20, rx292_cstack
    unless $I20, rx292_jump949
    elements $I18, rx292_bstack
    le $I18, 0, rx292_cut950
    dec $I18
    set $I18, rx292_bstack[$I18]
  rx292_cut950:
    assign rx292_cstack, $I18
  rx292_jump949:
    jump $I19
  rx292_done946:
    rx292_cur."!cursor_fail"()
    .return (rx292_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_62_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 830
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_63_1360256386.79' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx310_tgt
    .local int rx310_pos
    .local int rx310_off
    .local int rx310_eos
    .local int rx310_rep
    .local pmc rx310_cur
    .local pmc rx310_curclass
    .local pmc rx310_bstack
    .local pmc rx310_cstack
    (rx310_cur, rx310_tgt, rx310_pos, rx310_curclass, rx310_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx310_cur
    length rx310_eos, rx310_tgt
    eq $I19, 1, rx310_restart976
    gt rx310_pos, rx310_eos, rx310_fail977
    repr_get_attr_int $I11, self, rx310_curclass, "$!from"
    ne $I11, -1, rxscan311_done983
    goto rxscan311_scan982
  rxscan311_loop981:
    inc rx310_pos
    gt rx310_pos, rx310_eos, rx310_fail977
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!from", rx310_pos
  rxscan311_scan982:
    nqp_rxmark rx310_bstack, rxscan311_loop981, rx310_pos, 0
  rxscan311_done983:
    nqp_rxmark rx310_bstack, rxcap312_fail985, rx310_pos, 0
    add $I11, rx310_pos, 6
    gt $I11, rx310_eos, rx310_fail977
    substr $S10, rx310_tgt, rx310_pos, 6
    ne $S10, ucs4:"unless", rx310_fail977
    add rx310_pos, 6
    nqp_rxpeek $I19, rx310_bstack, rxcap312_fail985
    inc $I19
    set $I11, rx310_bstack[$I19]
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx310_pos)
    rx310_cstack = rx310_cur."!cursor_capture"($P11, "sym")
    goto rxcap312_done984
  rxcap312_fail985:
    goto rx310_fail977
  rxcap312_done984:
    ge rx310_pos, rx310_eos, rx310_fail977
    is_cclass $I11, .CCLASS_WHITESPACE, rx310_tgt, rx310_pos
    unless $I11, rx310_fail977
    add rx310_pos, 1
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."ws"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    nqp_rxmark rx310_bstack, rxsubrule314_pass987, -1, 0
  rxsubrule314_pass987:
    rx310_cstack = rx310_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."ws"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
  alt316_0990:
    nqp_rxmark rx310_bstack, alt316_11003, rx310_pos, 0
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."ws"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
    .const 'Sub' $P5001 = 'cuid_63_1360256386.79' 
    capture_lex $P5001
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    ge $I11, 0, rx310_fail977
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."ws"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
    goto alt316_end989
  alt316_11003:
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."ws"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."panic"("unless does not take \"else\", please rewrite using \"if\"")
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."ws"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
  alt316_end989:
    repr_bind_attr_int rx310_cur, rx310_curclass, "$!pos", rx310_pos
    $P11 = rx310_cur."ws"()
    repr_get_attr_int $I11, $P11, rx310_curclass, "$!pos"
    lt $I11, 0, rx310_fail977
    repr_get_attr_int rx310_pos, $P11, rx310_curclass, "$!pos"
    rx310_cur."!cursor_pass"(rx310_pos, "statement_control:sym<unless>", 'backtrack'=>1)
    .return (rx310_cur)
  rx310_restart976:
    repr_get_attr_obj rx310_cstack, rx310_cur, rx310_curclass, "$!cstack"
  rx310_fail977:
    unless rx310_bstack, rx310_done975
    pop $I19, rx310_bstack
    if_null rx310_cstack, rx310_cstack_done980
    unless rx310_cstack, rx310_cstack_done980
    dec $I19
    set $P11, rx310_cstack[$I19]
  rx310_cstack_done980:
    pop rx310_rep, rx310_bstack
    pop rx310_pos, rx310_bstack
    pop $I19, rx310_bstack
    lt rx310_pos, -1, rx310_done975
    lt rx310_pos, 0, rx310_fail977
    eq $I19, 0, rx310_fail977
    nqp_islist $I20, rx310_cstack
    unless $I20, rx310_jump978
    elements $I18, rx310_bstack
    le $I18, 0, rx310_cut979
    dec $I18
    set $I18, rx310_bstack[$I18]
  rx310_cut979:
    assign rx310_cstack, $I18
  rx310_jump978:
    jump $I19
  rx310_done975:
    rx310_cur."!cursor_fail"()
    .return (rx310_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_63_1360256386.79") :anon :lex :outer("cuid_62_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx318_tgt
    .local int rx318_pos
    .local int rx318_off
    .local int rx318_eos
    .local int rx318_rep
    .local pmc rx318_cur
    .local pmc rx318_curclass
    .local pmc rx318_bstack
    .local pmc rx318_cstack
    (rx318_cur, rx318_tgt, rx318_pos, rx318_curclass, rx318_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx318_cur
    length rx318_eos, rx318_tgt
    eq $I19, 1, rx318_restart994
    gt rx318_pos, rx318_eos, rx318_fail995
    repr_get_attr_int $I11, self, rx318_curclass, "$!from"
    ne $I11, -1, rxscan319_done1001
    goto rxscan319_scan1000
  rxscan319_loop999:
    inc rx318_pos
    gt rx318_pos, rx318_eos, rx318_fail995
    repr_bind_attr_int rx318_cur, rx318_curclass, "$!from", rx318_pos
  rxscan319_scan1000:
    nqp_rxmark rx318_bstack, rxscan319_loop999, rx318_pos, 0
  rxscan319_done1001:
    add $I11, rx318_pos, 4
    gt $I11, rx318_eos, rx318_fail995
    substr $S10, rx318_tgt, rx318_pos, 4
    ne $S10, ucs4:"else", rx318_fail995
    add rx318_pos, 4
    rx318_cur."!cursor_pass"(rx318_pos, 'backtrack'=>1)
    .return (rx318_cur)
  rx318_restart994:
    repr_get_attr_obj rx318_cstack, rx318_cur, rx318_curclass, "$!cstack"
  rx318_fail995:
    unless rx318_bstack, rx318_done993
    pop $I19, rx318_bstack
    if_null rx318_cstack, rx318_cstack_done998
    unless rx318_cstack, rx318_cstack_done998
    dec $I19
    set $P11, rx318_cstack[$I19]
  rx318_cstack_done998:
    pop rx318_rep, rx318_bstack
    pop rx318_pos, rx318_bstack
    pop $I19, rx318_bstack
    lt rx318_pos, -1, rx318_done993
    lt rx318_pos, 0, rx318_fail995
    eq $I19, 0, rx318_fail995
    nqp_islist $I20, rx318_cstack
    unless $I20, rx318_jump996
    elements $I18, rx318_bstack
    le $I18, 0, rx318_cut997
    dec $I18
    set $I18, rx318_bstack[$I18]
  rx318_cut997:
    assign rx318_cstack, $I18
  rx318_jump996:
    jump $I19
  rx318_done993:
    rx318_cur."!cursor_fail"()
    .return (rx318_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_64_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 836
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx325_tgt
    .local int rx325_pos
    .local int rx325_off
    .local int rx325_eos
    .local int rx325_rep
    .local pmc rx325_cur
    .local pmc rx325_curclass
    .local pmc rx325_bstack
    .local pmc rx325_cstack
    (rx325_cur, rx325_tgt, rx325_pos, rx325_curclass, rx325_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx325_cur
    length rx325_eos, rx325_tgt
    eq $I19, 1, rx325_restart1010
    gt rx325_pos, rx325_eos, rx325_fail1011
    repr_get_attr_int $I11, self, rx325_curclass, "$!from"
    ne $I11, -1, rxscan326_done1017
    goto rxscan326_scan1016
  rxscan326_loop1015:
    inc rx325_pos
    gt rx325_pos, rx325_eos, rx325_fail1011
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!from", rx325_pos
  rxscan326_scan1016:
    nqp_rxmark rx325_bstack, rxscan326_loop1015, rx325_pos, 0
  rxscan326_done1017:
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!pos", rx325_pos
    store_lex unicode:"$\x{a2}", rx325_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx325_bstack, rxcap327_fail1019, rx325_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt328_01021
    nqp_push_label $P11, alt328_11022
    nqp_rxmark rx325_bstack, alt328_end1020, -1, 0
    rx325_cur."!alt"(rx325_pos, "alt_nfa__12_1360256388.402", $P11)
    goto rx325_fail1011
  alt328_01021:
    add $I11, rx325_pos, 5
    gt $I11, rx325_eos, rx325_fail1011
    substr $S10, rx325_tgt, rx325_pos, 5
    ne $S10, ucs4:"while", rx325_fail1011
    add rx325_pos, 5
    goto alt328_end1020
  alt328_11022:
    add $I11, rx325_pos, 5
    gt $I11, rx325_eos, rx325_fail1011
    substr $S10, rx325_tgt, rx325_pos, 5
    ne $S10, ucs4:"until", rx325_fail1011
    add rx325_pos, 5
    goto alt328_end1020
  alt328_end1020:
    nqp_rxcommit rx325_bstack, alt328_end1020
    nqp_rxpeek $I19, rx325_bstack, rxcap327_fail1019
    inc $I19
    set $I11, rx325_bstack[$I19]
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!pos", rx325_pos
    $P11 = rx325_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx325_pos)
    rx325_cstack = rx325_cur."!cursor_capture"($P11, "sym")
    goto rxcap327_done1018
  rxcap327_fail1019:
    goto rx325_fail1011
  rxcap327_done1018:
    ge rx325_pos, rx325_eos, rx325_fail1011
    is_cclass $I11, .CCLASS_WHITESPACE, rx325_tgt, rx325_pos
    unless $I11, rx325_fail1011
    add rx325_pos, 1
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!pos", rx325_pos
    $P11 = rx325_cur."ws"()
    repr_get_attr_int $I11, $P11, rx325_curclass, "$!pos"
    lt $I11, 0, rx325_fail1011
    repr_get_attr_int rx325_pos, $P11, rx325_curclass, "$!pos"
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!pos", rx325_pos
    $P11 = rx325_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx325_curclass, "$!pos"
    lt $I11, 0, rx325_fail1011
    nqp_rxmark rx325_bstack, rxsubrule330_pass1024, -1, 0
  rxsubrule330_pass1024:
    rx325_cstack = rx325_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx325_pos, $P11, rx325_curclass, "$!pos"
    repr_bind_attr_int rx325_cur, rx325_curclass, "$!pos", rx325_pos
    $P11 = rx325_cur."ws"()
    repr_get_attr_int $I11, $P11, rx325_curclass, "$!pos"
    lt $I11, 0, rx325_fail1011
    repr_get_attr_int rx325_pos, $P11, rx325_curclass, "$!pos"
    rx325_cur."!cursor_pass"(rx325_pos, "statement_control:sym<while>", 'backtrack'=>1)
    .return (rx325_cur)
  rx325_restart1010:
    repr_get_attr_obj rx325_cstack, rx325_cur, rx325_curclass, "$!cstack"
  rx325_fail1011:
    unless rx325_bstack, rx325_done1009
    pop $I19, rx325_bstack
    if_null rx325_cstack, rx325_cstack_done1014
    unless rx325_cstack, rx325_cstack_done1014
    dec $I19
    set $P11, rx325_cstack[$I19]
  rx325_cstack_done1014:
    pop rx325_rep, rx325_bstack
    pop rx325_pos, rx325_bstack
    pop $I19, rx325_bstack
    lt rx325_pos, -1, rx325_done1009
    lt rx325_pos, 0, rx325_fail1011
    eq $I19, 0, rx325_fail1011
    nqp_islist $I20, rx325_cstack
    unless $I20, rx325_jump1012
    elements $I18, rx325_bstack
    le $I18, 0, rx325_cut1013
    dec $I18
    set $I18, rx325_bstack[$I18]
  rx325_cut1013:
    assign rx325_cstack, $I18
  rx325_jump1012:
    jump $I19
  rx325_done1009:
    rx325_cur."!cursor_fail"()
    .return (rx325_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_65_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 842
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx332_tgt
    .local int rx332_pos
    .local int rx332_off
    .local int rx332_eos
    .local int rx332_rep
    .local pmc rx332_cur
    .local pmc rx332_curclass
    .local pmc rx332_bstack
    .local pmc rx332_cstack
    (rx332_cur, rx332_tgt, rx332_pos, rx332_curclass, rx332_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx332_cur
    length rx332_eos, rx332_tgt
    eq $I19, 1, rx332_restart1028
    gt rx332_pos, rx332_eos, rx332_fail1029
    repr_get_attr_int $I11, self, rx332_curclass, "$!from"
    ne $I11, -1, rxscan333_done1035
    goto rxscan333_scan1034
  rxscan333_loop1033:
    inc rx332_pos
    gt rx332_pos, rx332_eos, rx332_fail1029
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!from", rx332_pos
  rxscan333_scan1034:
    nqp_rxmark rx332_bstack, rxscan333_loop1033, rx332_pos, 0
  rxscan333_done1035:
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    store_lex unicode:"$\x{a2}", rx332_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx332_bstack, rxcap334_fail1037, rx332_pos, 0
    add $I11, rx332_pos, 6
    gt $I11, rx332_eos, rx332_fail1029
    substr $S10, rx332_tgt, rx332_pos, 6
    ne $S10, ucs4:"repeat", rx332_fail1029
    add rx332_pos, 6
    nqp_rxpeek $I19, rx332_bstack, rxcap334_fail1037
    inc $I19
    set $I11, rx332_bstack[$I19]
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx332_pos)
    rx332_cstack = rx332_cur."!cursor_capture"($P11, "sym")
    goto rxcap334_done1036
  rxcap334_fail1037:
    goto rx332_fail1029
  rxcap334_done1036:
    ge rx332_pos, rx332_eos, rx332_fail1029
    is_cclass $I11, .CCLASS_WHITESPACE, rx332_tgt, rx332_pos
    unless $I11, rx332_fail1029
    add rx332_pos, 1
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt336_01040
    nqp_push_label $P11, alt336_11050
    nqp_rxmark rx332_bstack, alt336_end1039, -1, 0
    rx332_cur."!alt"(rx332_pos, "alt_nfa__15_1360256388.423", $P11)
    goto rx332_fail1029
  alt336_01040:
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    nqp_rxmark rx332_bstack, rxcap338_fail1043, rx332_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt339_01045
    nqp_push_label $P11, alt339_11046
    nqp_rxmark rx332_bstack, alt339_end1044, -1, 0
    rx332_cur."!alt"(rx332_pos, "alt_nfa__13_1360256388.423", $P11)
    goto rx332_fail1029
  alt339_01045:
    add $I11, rx332_pos, 5
    gt $I11, rx332_eos, rx332_fail1029
    substr $S10, rx332_tgt, rx332_pos, 5
    ne $S10, ucs4:"while", rx332_fail1029
    add rx332_pos, 5
    goto alt339_end1044
  alt339_11046:
    add $I11, rx332_pos, 5
    gt $I11, rx332_eos, rx332_fail1029
    substr $S10, rx332_tgt, rx332_pos, 5
    ne $S10, ucs4:"until", rx332_fail1029
    add rx332_pos, 5
    goto alt339_end1044
  alt339_end1044:
    nqp_rxcommit rx332_bstack, alt339_end1044
    nqp_rxpeek $I19, rx332_bstack, rxcap338_fail1043
    inc $I19
    set $I11, rx332_bstack[$I19]
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx332_pos)
    rx332_cstack = rx332_cur."!cursor_capture"($P11, "wu")
    goto rxcap338_done1042
  rxcap338_fail1043:
    goto rx332_fail1029
  rxcap338_done1042:
    ge rx332_pos, rx332_eos, rx332_fail1029
    is_cclass $I11, .CCLASS_WHITESPACE, rx332_tgt, rx332_pos
    unless $I11, rx332_fail1029
    add rx332_pos, 1
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    nqp_rxmark rx332_bstack, rxsubrule341_pass1048, -1, 0
  rxsubrule341_pass1048:
    rx332_cstack = rx332_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    goto alt336_end1039
  alt336_11050:
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    nqp_rxmark rx332_bstack, rxsubrule344_pass1052, -1, 0
  rxsubrule344_pass1052:
    rx332_cstack = rx332_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    nqp_rxmark rx332_bstack, rxcap346_fail1055, rx332_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt347_01057
    nqp_push_label $P11, alt347_11058
    nqp_rxmark rx332_bstack, alt347_end1056, -1, 0
    rx332_cur."!alt"(rx332_pos, "alt_nfa__14_1360256388.423", $P11)
    goto rx332_fail1029
  alt347_01057:
    add $I11, rx332_pos, 5
    gt $I11, rx332_eos, rx332_fail1029
    substr $S10, rx332_tgt, rx332_pos, 5
    ne $S10, ucs4:"while", rx332_fail1029
    add rx332_pos, 5
    goto alt347_end1056
  alt347_11058:
    add $I11, rx332_pos, 5
    gt $I11, rx332_eos, rx332_fail1029
    substr $S10, rx332_tgt, rx332_pos, 5
    ne $S10, ucs4:"until", rx332_fail1029
    add rx332_pos, 5
    goto alt347_end1056
  alt347_end1056:
    nqp_rxcommit rx332_bstack, alt347_end1056
    nqp_rxpeek $I19, rx332_bstack, rxcap346_fail1055
    inc $I19
    set $I11, rx332_bstack[$I19]
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx332_pos)
    rx332_cstack = rx332_cur."!cursor_capture"($P11, "wu")
    goto rxcap346_done1054
  rxcap346_fail1055:
    goto rx332_fail1029
  rxcap346_done1054:
    ge rx332_pos, rx332_eos, rx332_fail1029
    is_cclass $I11, .CCLASS_WHITESPACE, rx332_tgt, rx332_pos
    unless $I11, rx332_fail1029
    add rx332_pos, 1
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    nqp_rxmark rx332_bstack, rxsubrule349_pass1060, -1, 0
  rxsubrule349_pass1060:
    rx332_cstack = rx332_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    goto alt336_end1039
  alt336_end1039:
    nqp_rxcommit rx332_bstack, alt336_end1039
    repr_bind_attr_int rx332_cur, rx332_curclass, "$!pos", rx332_pos
    $P11 = rx332_cur."ws"()
    repr_get_attr_int $I11, $P11, rx332_curclass, "$!pos"
    lt $I11, 0, rx332_fail1029
    repr_get_attr_int rx332_pos, $P11, rx332_curclass, "$!pos"
    rx332_cur."!cursor_pass"(rx332_pos, "statement_control:sym<repeat>", 'backtrack'=>1)
    .return (rx332_cur)
  rx332_restart1028:
    repr_get_attr_obj rx332_cstack, rx332_cur, rx332_curclass, "$!cstack"
  rx332_fail1029:
    unless rx332_bstack, rx332_done1027
    pop $I19, rx332_bstack
    if_null rx332_cstack, rx332_cstack_done1032
    unless rx332_cstack, rx332_cstack_done1032
    dec $I19
    set $P11, rx332_cstack[$I19]
  rx332_cstack_done1032:
    pop rx332_rep, rx332_bstack
    pop rx332_pos, rx332_bstack
    pop $I19, rx332_bstack
    lt rx332_pos, -1, rx332_done1027
    lt rx332_pos, 0, rx332_fail1029
    eq $I19, 0, rx332_fail1029
    nqp_islist $I20, rx332_cstack
    unless $I20, rx332_jump1030
    elements $I18, rx332_bstack
    le $I18, 0, rx332_cut1031
    dec $I18
    set $I18, rx332_bstack[$I18]
  rx332_cut1031:
    assign rx332_cstack, $I18
  rx332_jump1030:
    jump $I19
  rx332_done1027:
    rx332_cur."!cursor_fail"()
    .return (rx332_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_66_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 851
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx352_tgt
    .local int rx352_pos
    .local int rx352_off
    .local int rx352_eos
    .local int rx352_rep
    .local pmc rx352_cur
    .local pmc rx352_curclass
    .local pmc rx352_bstack
    .local pmc rx352_cstack
    (rx352_cur, rx352_tgt, rx352_pos, rx352_curclass, rx352_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx352_cur
    length rx352_eos, rx352_tgt
    eq $I19, 1, rx352_restart1065
    gt rx352_pos, rx352_eos, rx352_fail1066
    repr_get_attr_int $I11, self, rx352_curclass, "$!from"
    ne $I11, -1, rxscan353_done1072
    goto rxscan353_scan1071
  rxscan353_loop1070:
    inc rx352_pos
    gt rx352_pos, rx352_eos, rx352_fail1066
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!from", rx352_pos
  rxscan353_scan1071:
    nqp_rxmark rx352_bstack, rxscan353_loop1070, rx352_pos, 0
  rxscan353_done1072:
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!pos", rx352_pos
    store_lex unicode:"$\x{a2}", rx352_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx352_bstack, rxcap354_fail1074, rx352_pos, 0
    add $I11, rx352_pos, 3
    gt $I11, rx352_eos, rx352_fail1066
    substr $S10, rx352_tgt, rx352_pos, 3
    ne $S10, ucs4:"for", rx352_fail1066
    add rx352_pos, 3
    nqp_rxpeek $I19, rx352_bstack, rxcap354_fail1074
    inc $I19
    set $I11, rx352_bstack[$I19]
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!pos", rx352_pos
    $P11 = rx352_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx352_pos)
    rx352_cstack = rx352_cur."!cursor_capture"($P11, "sym")
    goto rxcap354_done1073
  rxcap354_fail1074:
    goto rx352_fail1066
  rxcap354_done1073:
    ge rx352_pos, rx352_eos, rx352_fail1066
    is_cclass $I11, .CCLASS_WHITESPACE, rx352_tgt, rx352_pos
    unless $I11, rx352_fail1066
    add rx352_pos, 1
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!pos", rx352_pos
    $P11 = rx352_cur."ws"()
    repr_get_attr_int $I11, $P11, rx352_curclass, "$!pos"
    lt $I11, 0, rx352_fail1066
    repr_get_attr_int rx352_pos, $P11, rx352_curclass, "$!pos"
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!pos", rx352_pos
    $P11 = rx352_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx352_curclass, "$!pos"
    lt $I11, 0, rx352_fail1066
    nqp_rxmark rx352_bstack, rxsubrule356_pass1076, -1, 0
  rxsubrule356_pass1076:
    rx352_cstack = rx352_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx352_pos, $P11, rx352_curclass, "$!pos"
    repr_bind_attr_int rx352_cur, rx352_curclass, "$!pos", rx352_pos
    $P11 = rx352_cur."ws"()
    repr_get_attr_int $I11, $P11, rx352_curclass, "$!pos"
    lt $I11, 0, rx352_fail1066
    repr_get_attr_int rx352_pos, $P11, rx352_curclass, "$!pos"
    rx352_cur."!cursor_pass"(rx352_pos, "statement_control:sym<for>", 'backtrack'=>1)
    .return (rx352_cur)
  rx352_restart1065:
    repr_get_attr_obj rx352_cstack, rx352_cur, rx352_curclass, "$!cstack"
  rx352_fail1066:
    unless rx352_bstack, rx352_done1064
    pop $I19, rx352_bstack
    if_null rx352_cstack, rx352_cstack_done1069
    unless rx352_cstack, rx352_cstack_done1069
    dec $I19
    set $P11, rx352_cstack[$I19]
  rx352_cstack_done1069:
    pop rx352_rep, rx352_bstack
    pop rx352_pos, rx352_bstack
    pop $I19, rx352_bstack
    lt rx352_pos, -1, rx352_done1064
    lt rx352_pos, 0, rx352_fail1066
    eq $I19, 0, rx352_fail1066
    nqp_islist $I20, rx352_cstack
    unless $I20, rx352_jump1067
    elements $I18, rx352_bstack
    le $I18, 0, rx352_cut1068
    dec $I18
    set $I18, rx352_bstack[$I18]
  rx352_cut1068:
    assign rx352_cstack, $I18
  rx352_jump1067:
    jump $I19
  rx352_done1064:
    rx352_cur."!cursor_fail"()
    .return (rx352_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_67_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 857
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx358_tgt
    .local int rx358_pos
    .local int rx358_off
    .local int rx358_eos
    .local int rx358_rep
    .local pmc rx358_cur
    .local pmc rx358_curclass
    .local pmc rx358_bstack
    .local pmc rx358_cstack
    (rx358_cur, rx358_tgt, rx358_pos, rx358_curclass, rx358_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx358_cur
    length rx358_eos, rx358_tgt
    eq $I19, 1, rx358_restart1080
    gt rx358_pos, rx358_eos, rx358_fail1081
    repr_get_attr_int $I11, self, rx358_curclass, "$!from"
    ne $I11, -1, rxscan359_done1087
    goto rxscan359_scan1086
  rxscan359_loop1085:
    inc rx358_pos
    gt rx358_pos, rx358_eos, rx358_fail1081
    repr_bind_attr_int rx358_cur, rx358_curclass, "$!from", rx358_pos
  rxscan359_scan1086:
    nqp_rxmark rx358_bstack, rxscan359_loop1085, rx358_pos, 0
  rxscan359_done1087:
    nqp_rxmark rx358_bstack, rxcap360_fail1089, rx358_pos, 0
    add $I11, rx358_pos, 5
    gt $I11, rx358_eos, rx358_fail1081
    substr $S10, rx358_tgt, rx358_pos, 5
    ne $S10, ucs4:"CATCH", rx358_fail1081
    add rx358_pos, 5
    nqp_rxpeek $I19, rx358_bstack, rxcap360_fail1089
    inc $I19
    set $I11, rx358_bstack[$I19]
    repr_bind_attr_int rx358_cur, rx358_curclass, "$!pos", rx358_pos
    $P11 = rx358_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx358_pos)
    rx358_cstack = rx358_cur."!cursor_capture"($P11, "sym")
    goto rxcap360_done1088
  rxcap360_fail1089:
    goto rx358_fail1081
  rxcap360_done1088:
    ge rx358_pos, rx358_eos, rx358_fail1081
    is_cclass $I11, .CCLASS_WHITESPACE, rx358_tgt, rx358_pos
    unless $I11, rx358_fail1081
    add rx358_pos, 1
    repr_bind_attr_int rx358_cur, rx358_curclass, "$!pos", rx358_pos
    $P11 = rx358_cur."ws"()
    repr_get_attr_int $I11, $P11, rx358_curclass, "$!pos"
    lt $I11, 0, rx358_fail1081
    repr_get_attr_int rx358_pos, $P11, rx358_curclass, "$!pos"
    repr_bind_attr_int rx358_cur, rx358_curclass, "$!pos", rx358_pos
    $P11 = rx358_cur."block"()
    repr_get_attr_int $I11, $P11, rx358_curclass, "$!pos"
    lt $I11, 0, rx358_fail1081
    nqp_rxmark rx358_bstack, rxsubrule362_pass1091, -1, 0
  rxsubrule362_pass1091:
    rx358_cstack = rx358_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx358_pos, $P11, rx358_curclass, "$!pos"
    repr_bind_attr_int rx358_cur, rx358_curclass, "$!pos", rx358_pos
    $P11 = rx358_cur."ws"()
    repr_get_attr_int $I11, $P11, rx358_curclass, "$!pos"
    lt $I11, 0, rx358_fail1081
    repr_get_attr_int rx358_pos, $P11, rx358_curclass, "$!pos"
    rx358_cur."!cursor_pass"(rx358_pos, "statement_control:sym<CATCH>", 'backtrack'=>1)
    .return (rx358_cur)
  rx358_restart1080:
    repr_get_attr_obj rx358_cstack, rx358_cur, rx358_curclass, "$!cstack"
  rx358_fail1081:
    unless rx358_bstack, rx358_done1079
    pop $I19, rx358_bstack
    if_null rx358_cstack, rx358_cstack_done1084
    unless rx358_cstack, rx358_cstack_done1084
    dec $I19
    set $P11, rx358_cstack[$I19]
  rx358_cstack_done1084:
    pop rx358_rep, rx358_bstack
    pop rx358_pos, rx358_bstack
    pop $I19, rx358_bstack
    lt rx358_pos, -1, rx358_done1079
    lt rx358_pos, 0, rx358_fail1081
    eq $I19, 0, rx358_fail1081
    nqp_islist $I20, rx358_cstack
    unless $I20, rx358_jump1082
    elements $I18, rx358_bstack
    le $I18, 0, rx358_cut1083
    dec $I18
    set $I18, rx358_bstack[$I18]
  rx358_cut1083:
    assign rx358_cstack, $I18
  rx358_jump1082:
    jump $I19
  rx358_done1079:
    rx358_cur."!cursor_fail"()
    .return (rx358_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_68_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 862
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx364_tgt
    .local int rx364_pos
    .local int rx364_off
    .local int rx364_eos
    .local int rx364_rep
    .local pmc rx364_cur
    .local pmc rx364_curclass
    .local pmc rx364_bstack
    .local pmc rx364_cstack
    (rx364_cur, rx364_tgt, rx364_pos, rx364_curclass, rx364_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx364_cur
    length rx364_eos, rx364_tgt
    eq $I19, 1, rx364_restart1095
    gt rx364_pos, rx364_eos, rx364_fail1096
    repr_get_attr_int $I11, self, rx364_curclass, "$!from"
    ne $I11, -1, rxscan365_done1102
    goto rxscan365_scan1101
  rxscan365_loop1100:
    inc rx364_pos
    gt rx364_pos, rx364_eos, rx364_fail1096
    repr_bind_attr_int rx364_cur, rx364_curclass, "$!from", rx364_pos
  rxscan365_scan1101:
    nqp_rxmark rx364_bstack, rxscan365_loop1100, rx364_pos, 0
  rxscan365_done1102:
    nqp_rxmark rx364_bstack, rxcap366_fail1104, rx364_pos, 0
    add $I11, rx364_pos, 7
    gt $I11, rx364_eos, rx364_fail1096
    substr $S10, rx364_tgt, rx364_pos, 7
    ne $S10, ucs4:"CONTROL", rx364_fail1096
    add rx364_pos, 7
    nqp_rxpeek $I19, rx364_bstack, rxcap366_fail1104
    inc $I19
    set $I11, rx364_bstack[$I19]
    repr_bind_attr_int rx364_cur, rx364_curclass, "$!pos", rx364_pos
    $P11 = rx364_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx364_pos)
    rx364_cstack = rx364_cur."!cursor_capture"($P11, "sym")
    goto rxcap366_done1103
  rxcap366_fail1104:
    goto rx364_fail1096
  rxcap366_done1103:
    ge rx364_pos, rx364_eos, rx364_fail1096
    is_cclass $I11, .CCLASS_WHITESPACE, rx364_tgt, rx364_pos
    unless $I11, rx364_fail1096
    add rx364_pos, 1
    repr_bind_attr_int rx364_cur, rx364_curclass, "$!pos", rx364_pos
    $P11 = rx364_cur."ws"()
    repr_get_attr_int $I11, $P11, rx364_curclass, "$!pos"
    lt $I11, 0, rx364_fail1096
    repr_get_attr_int rx364_pos, $P11, rx364_curclass, "$!pos"
    repr_bind_attr_int rx364_cur, rx364_curclass, "$!pos", rx364_pos
    $P11 = rx364_cur."block"()
    repr_get_attr_int $I11, $P11, rx364_curclass, "$!pos"
    lt $I11, 0, rx364_fail1096
    nqp_rxmark rx364_bstack, rxsubrule368_pass1106, -1, 0
  rxsubrule368_pass1106:
    rx364_cstack = rx364_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx364_pos, $P11, rx364_curclass, "$!pos"
    repr_bind_attr_int rx364_cur, rx364_curclass, "$!pos", rx364_pos
    $P11 = rx364_cur."ws"()
    repr_get_attr_int $I11, $P11, rx364_curclass, "$!pos"
    lt $I11, 0, rx364_fail1096
    repr_get_attr_int rx364_pos, $P11, rx364_curclass, "$!pos"
    rx364_cur."!cursor_pass"(rx364_pos, "statement_control:sym<CONTROL>", 'backtrack'=>1)
    .return (rx364_cur)
  rx364_restart1095:
    repr_get_attr_obj rx364_cstack, rx364_cur, rx364_curclass, "$!cstack"
  rx364_fail1096:
    unless rx364_bstack, rx364_done1094
    pop $I19, rx364_bstack
    if_null rx364_cstack, rx364_cstack_done1099
    unless rx364_cstack, rx364_cstack_done1099
    dec $I19
    set $P11, rx364_cstack[$I19]
  rx364_cstack_done1099:
    pop rx364_rep, rx364_bstack
    pop rx364_pos, rx364_bstack
    pop $I19, rx364_bstack
    lt rx364_pos, -1, rx364_done1094
    lt rx364_pos, 0, rx364_fail1096
    eq $I19, 0, rx364_fail1096
    nqp_islist $I20, rx364_cstack
    unless $I20, rx364_jump1097
    elements $I18, rx364_bstack
    le $I18, 0, rx364_cut1098
    dec $I18
    set $I18, rx364_bstack[$I18]
  rx364_cut1098:
    assign rx364_cstack, $I18
  rx364_jump1097:
    jump $I19
  rx364_done1094:
    rx364_cur."!cursor_fail"()
    .return (rx364_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix" :subid("cuid_69_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 867
    .param pmc self 
    $P5001 = self."!protoregex"("statement_prefix")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_70_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 868
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx370_tgt
    .local int rx370_pos
    .local int rx370_off
    .local int rx370_eos
    .local int rx370_rep
    .local pmc rx370_cur
    .local pmc rx370_curclass
    .local pmc rx370_bstack
    .local pmc rx370_cstack
    (rx370_cur, rx370_tgt, rx370_pos, rx370_curclass, rx370_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx370_cur
    length rx370_eos, rx370_tgt
    eq $I19, 1, rx370_restart1110
    gt rx370_pos, rx370_eos, rx370_fail1111
    repr_get_attr_int $I11, self, rx370_curclass, "$!from"
    ne $I11, -1, rxscan371_done1117
    goto rxscan371_scan1116
  rxscan371_loop1115:
    inc rx370_pos
    gt rx370_pos, rx370_eos, rx370_fail1111
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!from", rx370_pos
  rxscan371_scan1116:
    nqp_rxmark rx370_bstack, rxscan371_loop1115, rx370_pos, 0
  rxscan371_done1117:
    nqp_rxmark rx370_bstack, rxcap372_fail1119, rx370_pos, 0
    add $I11, rx370_pos, 5
    gt $I11, rx370_eos, rx370_fail1111
    substr $S10, rx370_tgt, rx370_pos, 5
    ne $S10, ucs4:"BEGIN", rx370_fail1111
    add rx370_pos, 5
    nqp_rxpeek $I19, rx370_bstack, rxcap372_fail1119
    inc $I19
    set $I11, rx370_bstack[$I19]
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!pos", rx370_pos
    $P11 = rx370_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx370_pos)
    rx370_cstack = rx370_cur."!cursor_capture"($P11, "sym")
    goto rxcap372_done1118
  rxcap372_fail1119:
    goto rx370_fail1111
  rxcap372_done1118:
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!pos", rx370_pos
    $P11 = rx370_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx370_curclass, "$!pos"
    lt $I11, 0, rx370_fail1111
    nqp_rxmark rx370_bstack, rxsubrule373_pass1120, -1, 0
  rxsubrule373_pass1120:
    rx370_cstack = rx370_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx370_pos, $P11, rx370_curclass, "$!pos"
    rx370_cur."!cursor_pass"(rx370_pos, "statement_prefix:sym<BEGIN>", 'backtrack'=>1)
    .return (rx370_cur)
  rx370_restart1110:
    repr_get_attr_obj rx370_cstack, rx370_cur, rx370_curclass, "$!cstack"
  rx370_fail1111:
    unless rx370_bstack, rx370_done1109
    pop $I19, rx370_bstack
    if_null rx370_cstack, rx370_cstack_done1114
    unless rx370_cstack, rx370_cstack_done1114
    dec $I19
    set $P11, rx370_cstack[$I19]
  rx370_cstack_done1114:
    pop rx370_rep, rx370_bstack
    pop rx370_pos, rx370_bstack
    pop $I19, rx370_bstack
    lt rx370_pos, -1, rx370_done1109
    lt rx370_pos, 0, rx370_fail1111
    eq $I19, 0, rx370_fail1111
    nqp_islist $I20, rx370_cstack
    unless $I20, rx370_jump1112
    elements $I18, rx370_bstack
    le $I18, 0, rx370_cut1113
    dec $I18
    set $I18, rx370_bstack[$I18]
  rx370_cut1113:
    assign rx370_cstack, $I18
  rx370_jump1112:
    jump $I19
  rx370_done1109:
    rx370_cur."!cursor_fail"()
    .return (rx370_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_71_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 869
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx374_tgt
    .local int rx374_pos
    .local int rx374_off
    .local int rx374_eos
    .local int rx374_rep
    .local pmc rx374_cur
    .local pmc rx374_curclass
    .local pmc rx374_bstack
    .local pmc rx374_cstack
    (rx374_cur, rx374_tgt, rx374_pos, rx374_curclass, rx374_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx374_cur
    length rx374_eos, rx374_tgt
    eq $I19, 1, rx374_restart1123
    gt rx374_pos, rx374_eos, rx374_fail1124
    repr_get_attr_int $I11, self, rx374_curclass, "$!from"
    ne $I11, -1, rxscan375_done1130
    goto rxscan375_scan1129
  rxscan375_loop1128:
    inc rx374_pos
    gt rx374_pos, rx374_eos, rx374_fail1124
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!from", rx374_pos
  rxscan375_scan1129:
    nqp_rxmark rx374_bstack, rxscan375_loop1128, rx374_pos, 0
  rxscan375_done1130:
    nqp_rxmark rx374_bstack, rxcap376_fail1132, rx374_pos, 0
    add $I11, rx374_pos, 4
    gt $I11, rx374_eos, rx374_fail1124
    substr $S10, rx374_tgt, rx374_pos, 4
    ne $S10, ucs4:"INIT", rx374_fail1124
    add rx374_pos, 4
    nqp_rxpeek $I19, rx374_bstack, rxcap376_fail1132
    inc $I19
    set $I11, rx374_bstack[$I19]
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!pos", rx374_pos
    $P11 = rx374_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx374_pos)
    rx374_cstack = rx374_cur."!cursor_capture"($P11, "sym")
    goto rxcap376_done1131
  rxcap376_fail1132:
    goto rx374_fail1124
  rxcap376_done1131:
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!pos", rx374_pos
    $P11 = rx374_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx374_curclass, "$!pos"
    lt $I11, 0, rx374_fail1124
    nqp_rxmark rx374_bstack, rxsubrule377_pass1133, -1, 0
  rxsubrule377_pass1133:
    rx374_cstack = rx374_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx374_pos, $P11, rx374_curclass, "$!pos"
    rx374_cur."!cursor_pass"(rx374_pos, "statement_prefix:sym<INIT>", 'backtrack'=>1)
    .return (rx374_cur)
  rx374_restart1123:
    repr_get_attr_obj rx374_cstack, rx374_cur, rx374_curclass, "$!cstack"
  rx374_fail1124:
    unless rx374_bstack, rx374_done1122
    pop $I19, rx374_bstack
    if_null rx374_cstack, rx374_cstack_done1127
    unless rx374_cstack, rx374_cstack_done1127
    dec $I19
    set $P11, rx374_cstack[$I19]
  rx374_cstack_done1127:
    pop rx374_rep, rx374_bstack
    pop rx374_pos, rx374_bstack
    pop $I19, rx374_bstack
    lt rx374_pos, -1, rx374_done1122
    lt rx374_pos, 0, rx374_fail1124
    eq $I19, 0, rx374_fail1124
    nqp_islist $I20, rx374_cstack
    unless $I20, rx374_jump1125
    elements $I18, rx374_bstack
    le $I18, 0, rx374_cut1126
    dec $I18
    set $I18, rx374_bstack[$I18]
  rx374_cut1126:
    assign rx374_cstack, $I18
  rx374_jump1125:
    jump $I19
  rx374_done1122:
    rx374_cur."!cursor_fail"()
    .return (rx374_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_72_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 871
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx378_tgt
    .local int rx378_pos
    .local int rx378_off
    .local int rx378_eos
    .local int rx378_rep
    .local pmc rx378_cur
    .local pmc rx378_curclass
    .local pmc rx378_bstack
    .local pmc rx378_cstack
    (rx378_cur, rx378_tgt, rx378_pos, rx378_curclass, rx378_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx378_cur
    length rx378_eos, rx378_tgt
    eq $I19, 1, rx378_restart1136
    gt rx378_pos, rx378_eos, rx378_fail1137
    repr_get_attr_int $I11, self, rx378_curclass, "$!from"
    ne $I11, -1, rxscan379_done1143
    goto rxscan379_scan1142
  rxscan379_loop1141:
    inc rx378_pos
    gt rx378_pos, rx378_eos, rx378_fail1137
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!from", rx378_pos
  rxscan379_scan1142:
    nqp_rxmark rx378_bstack, rxscan379_loop1141, rx378_pos, 0
  rxscan379_done1143:
    nqp_rxmark rx378_bstack, rxcap380_fail1145, rx378_pos, 0
    add $I11, rx378_pos, 3
    gt $I11, rx378_eos, rx378_fail1137
    substr $S10, rx378_tgt, rx378_pos, 3
    ne $S10, ucs4:"try", rx378_fail1137
    add rx378_pos, 3
    nqp_rxpeek $I19, rx378_bstack, rxcap380_fail1145
    inc $I19
    set $I11, rx378_bstack[$I19]
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!pos", rx378_pos
    $P11 = rx378_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx378_pos)
    rx378_cstack = rx378_cur."!cursor_capture"($P11, "sym")
    goto rxcap380_done1144
  rxcap380_fail1145:
    goto rx378_fail1137
  rxcap380_done1144:
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!pos", rx378_pos
    $P11 = rx378_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx378_curclass, "$!pos"
    lt $I11, 0, rx378_fail1137
    nqp_rxmark rx378_bstack, rxsubrule381_pass1146, -1, 0
  rxsubrule381_pass1146:
    rx378_cstack = rx378_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx378_pos, $P11, rx378_curclass, "$!pos"
    rx378_cur."!cursor_pass"(rx378_pos, "statement_prefix:sym<try>", 'backtrack'=>1)
    .return (rx378_cur)
  rx378_restart1136:
    repr_get_attr_obj rx378_cstack, rx378_cur, rx378_curclass, "$!cstack"
  rx378_fail1137:
    unless rx378_bstack, rx378_done1135
    pop $I19, rx378_bstack
    if_null rx378_cstack, rx378_cstack_done1140
    unless rx378_cstack, rx378_cstack_done1140
    dec $I19
    set $P11, rx378_cstack[$I19]
  rx378_cstack_done1140:
    pop rx378_rep, rx378_bstack
    pop rx378_pos, rx378_bstack
    pop $I19, rx378_bstack
    lt rx378_pos, -1, rx378_done1135
    lt rx378_pos, 0, rx378_fail1137
    eq $I19, 0, rx378_fail1137
    nqp_islist $I20, rx378_cstack
    unless $I20, rx378_jump1138
    elements $I18, rx378_bstack
    le $I18, 0, rx378_cut1139
    dec $I18
    set $I18, rx378_bstack[$I18]
  rx378_cut1139:
    assign rx378_cstack, $I18
  rx378_jump1138:
    jump $I19
  rx378_done1135:
    rx378_cur."!cursor_fail"()
    .return (rx378_cur) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_73_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 876
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx382_tgt
    .local int rx382_pos
    .local int rx382_off
    .local int rx382_eos
    .local int rx382_rep
    .local pmc rx382_cur
    .local pmc rx382_curclass
    .local pmc rx382_bstack
    .local pmc rx382_cstack
    (rx382_cur, rx382_tgt, rx382_pos, rx382_curclass, rx382_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx382_cur
    length rx382_eos, rx382_tgt
    eq $I19, 1, rx382_restart1149
    gt rx382_pos, rx382_eos, rx382_fail1150
    repr_get_attr_int $I11, self, rx382_curclass, "$!from"
    ne $I11, -1, rxscan383_done1156
    goto rxscan383_scan1155
  rxscan383_loop1154:
    inc rx382_pos
    gt rx382_pos, rx382_eos, rx382_fail1150
    repr_bind_attr_int rx382_cur, rx382_curclass, "$!from", rx382_pos
  rxscan383_scan1155:
    nqp_rxmark rx382_bstack, rxscan383_loop1154, rx382_pos, 0
  rxscan383_done1156:
    ge rx382_pos, rx382_eos, rx382_fail1150
    is_cclass $I11, .CCLASS_WHITESPACE, rx382_tgt, rx382_pos
    unless $I11, rx382_fail1150
    add rx382_pos, 1
    repr_bind_attr_int rx382_cur, rx382_curclass, "$!pos", rx382_pos
    $P11 = rx382_cur."ws"()
    repr_get_attr_int $I11, $P11, rx382_curclass, "$!pos"
    lt $I11, 0, rx382_fail1150
    repr_get_attr_int rx382_pos, $P11, rx382_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt385_01159
    nqp_push_label $P11, alt385_11161
    nqp_rxmark rx382_bstack, alt385_end1158, -1, 0
    rx382_cur."!alt"(rx382_pos, "alt_nfa__16_1360256388.473", $P11)
    goto rx382_fail1150
  alt385_01159:
    ge rx382_pos, rx382_eos, rx382_fail1150
    substr $S11, rx382_tgt, rx382_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx382_fail1150
    repr_bind_attr_int rx382_cur, rx382_curclass, "$!pos", rx382_pos
    $P11 = rx382_cur."block"()
    repr_get_attr_int $I11, $P11, rx382_curclass, "$!pos"
    lt $I11, 0, rx382_fail1150
    nqp_rxmark rx382_bstack, rxsubrule386_pass1160, -1, 0
  rxsubrule386_pass1160:
    rx382_cstack = rx382_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx382_pos, $P11, rx382_curclass, "$!pos"
    goto alt385_end1158
  alt385_11161:
    repr_bind_attr_int rx382_cur, rx382_curclass, "$!pos", rx382_pos
    $P11 = rx382_cur."statement"()
    repr_get_attr_int $I11, $P11, rx382_curclass, "$!pos"
    lt $I11, 0, rx382_fail1150
    nqp_rxmark rx382_bstack, rxsubrule387_pass1162, -1, 0
  rxsubrule387_pass1162:
    rx382_cstack = rx382_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx382_pos, $P11, rx382_curclass, "$!pos"
    goto alt385_end1158
  alt385_end1158:
    nqp_rxcommit rx382_bstack, alt385_end1158
    rx382_cur."!cursor_pass"(rx382_pos, "blorst", 'backtrack'=>1)
    .return (rx382_cur)
  rx382_restart1149:
    repr_get_attr_obj rx382_cstack, rx382_cur, rx382_curclass, "$!cstack"
  rx382_fail1150:
    unless rx382_bstack, rx382_done1148
    pop $I19, rx382_bstack
    if_null rx382_cstack, rx382_cstack_done1153
    unless rx382_cstack, rx382_cstack_done1153
    dec $I19
    set $P11, rx382_cstack[$I19]
  rx382_cstack_done1153:
    pop rx382_rep, rx382_bstack
    pop rx382_pos, rx382_bstack
    pop $I19, rx382_bstack
    lt rx382_pos, -1, rx382_done1148
    lt rx382_pos, 0, rx382_fail1150
    eq $I19, 0, rx382_fail1150
    nqp_islist $I20, rx382_cstack
    unless $I20, rx382_jump1151
    elements $I18, rx382_bstack
    le $I18, 0, rx382_cut1152
    dec $I18
    set $I18, rx382_bstack[$I18]
  rx382_cut1152:
    assign rx382_cstack, $I18
  rx382_jump1151:
    jump $I19
  rx382_done1148:
    rx382_cur."!cursor_fail"()
    .return (rx382_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond" :subid("cuid_74_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 882
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_cond")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_75_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 884
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx388_tgt
    .local int rx388_pos
    .local int rx388_off
    .local int rx388_eos
    .local int rx388_rep
    .local pmc rx388_cur
    .local pmc rx388_curclass
    .local pmc rx388_bstack
    .local pmc rx388_cstack
    (rx388_cur, rx388_tgt, rx388_pos, rx388_curclass, rx388_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx388_cur
    length rx388_eos, rx388_tgt
    eq $I19, 1, rx388_restart1165
    gt rx388_pos, rx388_eos, rx388_fail1166
    repr_get_attr_int $I11, self, rx388_curclass, "$!from"
    ne $I11, -1, rxscan389_done1172
    goto rxscan389_scan1171
  rxscan389_loop1170:
    inc rx388_pos
    gt rx388_pos, rx388_eos, rx388_fail1166
    repr_bind_attr_int rx388_cur, rx388_curclass, "$!from", rx388_pos
  rxscan389_scan1171:
    nqp_rxmark rx388_bstack, rxscan389_loop1170, rx388_pos, 0
  rxscan389_done1172:
    nqp_rxmark rx388_bstack, rxcap390_fail1174, rx388_pos, 0
    add $I11, rx388_pos, 2
    gt $I11, rx388_eos, rx388_fail1166
    substr $S10, rx388_tgt, rx388_pos, 2
    ne $S10, ucs4:"if", rx388_fail1166
    add rx388_pos, 2
    nqp_rxpeek $I19, rx388_bstack, rxcap390_fail1174
    inc $I19
    set $I11, rx388_bstack[$I19]
    repr_bind_attr_int rx388_cur, rx388_curclass, "$!pos", rx388_pos
    $P11 = rx388_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx388_pos)
    rx388_cstack = rx388_cur."!cursor_capture"($P11, "sym")
    goto rxcap390_done1173
  rxcap390_fail1174:
    goto rx388_fail1166
  rxcap390_done1173:
    repr_bind_attr_int rx388_cur, rx388_curclass, "$!pos", rx388_pos
    $P11 = rx388_cur."ws"()
    repr_get_attr_int $I11, $P11, rx388_curclass, "$!pos"
    lt $I11, 0, rx388_fail1166
    repr_get_attr_int rx388_pos, $P11, rx388_curclass, "$!pos"
    repr_bind_attr_int rx388_cur, rx388_curclass, "$!pos", rx388_pos
    $P11 = rx388_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx388_curclass, "$!pos"
    lt $I11, 0, rx388_fail1166
    nqp_rxmark rx388_bstack, rxsubrule392_pass1176, -1, 0
  rxsubrule392_pass1176:
    rx388_cstack = rx388_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx388_pos, $P11, rx388_curclass, "$!pos"
    repr_bind_attr_int rx388_cur, rx388_curclass, "$!pos", rx388_pos
    $P11 = rx388_cur."ws"()
    repr_get_attr_int $I11, $P11, rx388_curclass, "$!pos"
    lt $I11, 0, rx388_fail1166
    repr_get_attr_int rx388_pos, $P11, rx388_curclass, "$!pos"
    rx388_cur."!cursor_pass"(rx388_pos, "statement_mod_cond:sym<if>", 'backtrack'=>1)
    .return (rx388_cur)
  rx388_restart1165:
    repr_get_attr_obj rx388_cstack, rx388_cur, rx388_curclass, "$!cstack"
  rx388_fail1166:
    unless rx388_bstack, rx388_done1164
    pop $I19, rx388_bstack
    if_null rx388_cstack, rx388_cstack_done1169
    unless rx388_cstack, rx388_cstack_done1169
    dec $I19
    set $P11, rx388_cstack[$I19]
  rx388_cstack_done1169:
    pop rx388_rep, rx388_bstack
    pop rx388_pos, rx388_bstack
    pop $I19, rx388_bstack
    lt rx388_pos, -1, rx388_done1164
    lt rx388_pos, 0, rx388_fail1166
    eq $I19, 0, rx388_fail1166
    nqp_islist $I20, rx388_cstack
    unless $I20, rx388_jump1167
    elements $I18, rx388_bstack
    le $I18, 0, rx388_cut1168
    dec $I18
    set $I18, rx388_bstack[$I18]
  rx388_cut1168:
    assign rx388_cstack, $I18
  rx388_jump1167:
    jump $I19
  rx388_done1164:
    rx388_cur."!cursor_fail"()
    .return (rx388_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_76_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 885
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx394_tgt
    .local int rx394_pos
    .local int rx394_off
    .local int rx394_eos
    .local int rx394_rep
    .local pmc rx394_cur
    .local pmc rx394_curclass
    .local pmc rx394_bstack
    .local pmc rx394_cstack
    (rx394_cur, rx394_tgt, rx394_pos, rx394_curclass, rx394_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx394_cur
    length rx394_eos, rx394_tgt
    eq $I19, 1, rx394_restart1180
    gt rx394_pos, rx394_eos, rx394_fail1181
    repr_get_attr_int $I11, self, rx394_curclass, "$!from"
    ne $I11, -1, rxscan395_done1187
    goto rxscan395_scan1186
  rxscan395_loop1185:
    inc rx394_pos
    gt rx394_pos, rx394_eos, rx394_fail1181
    repr_bind_attr_int rx394_cur, rx394_curclass, "$!from", rx394_pos
  rxscan395_scan1186:
    nqp_rxmark rx394_bstack, rxscan395_loop1185, rx394_pos, 0
  rxscan395_done1187:
    nqp_rxmark rx394_bstack, rxcap396_fail1189, rx394_pos, 0
    add $I11, rx394_pos, 6
    gt $I11, rx394_eos, rx394_fail1181
    substr $S10, rx394_tgt, rx394_pos, 6
    ne $S10, ucs4:"unless", rx394_fail1181
    add rx394_pos, 6
    nqp_rxpeek $I19, rx394_bstack, rxcap396_fail1189
    inc $I19
    set $I11, rx394_bstack[$I19]
    repr_bind_attr_int rx394_cur, rx394_curclass, "$!pos", rx394_pos
    $P11 = rx394_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx394_pos)
    rx394_cstack = rx394_cur."!cursor_capture"($P11, "sym")
    goto rxcap396_done1188
  rxcap396_fail1189:
    goto rx394_fail1181
  rxcap396_done1188:
    repr_bind_attr_int rx394_cur, rx394_curclass, "$!pos", rx394_pos
    $P11 = rx394_cur."ws"()
    repr_get_attr_int $I11, $P11, rx394_curclass, "$!pos"
    lt $I11, 0, rx394_fail1181
    repr_get_attr_int rx394_pos, $P11, rx394_curclass, "$!pos"
    repr_bind_attr_int rx394_cur, rx394_curclass, "$!pos", rx394_pos
    $P11 = rx394_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx394_curclass, "$!pos"
    lt $I11, 0, rx394_fail1181
    nqp_rxmark rx394_bstack, rxsubrule398_pass1191, -1, 0
  rxsubrule398_pass1191:
    rx394_cstack = rx394_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx394_pos, $P11, rx394_curclass, "$!pos"
    repr_bind_attr_int rx394_cur, rx394_curclass, "$!pos", rx394_pos
    $P11 = rx394_cur."ws"()
    repr_get_attr_int $I11, $P11, rx394_curclass, "$!pos"
    lt $I11, 0, rx394_fail1181
    repr_get_attr_int rx394_pos, $P11, rx394_curclass, "$!pos"
    rx394_cur."!cursor_pass"(rx394_pos, "statement_mod_cond:sym<unless>", 'backtrack'=>1)
    .return (rx394_cur)
  rx394_restart1180:
    repr_get_attr_obj rx394_cstack, rx394_cur, rx394_curclass, "$!cstack"
  rx394_fail1181:
    unless rx394_bstack, rx394_done1179
    pop $I19, rx394_bstack
    if_null rx394_cstack, rx394_cstack_done1184
    unless rx394_cstack, rx394_cstack_done1184
    dec $I19
    set $P11, rx394_cstack[$I19]
  rx394_cstack_done1184:
    pop rx394_rep, rx394_bstack
    pop rx394_pos, rx394_bstack
    pop $I19, rx394_bstack
    lt rx394_pos, -1, rx394_done1179
    lt rx394_pos, 0, rx394_fail1181
    eq $I19, 0, rx394_fail1181
    nqp_islist $I20, rx394_cstack
    unless $I20, rx394_jump1182
    elements $I18, rx394_bstack
    le $I18, 0, rx394_cut1183
    dec $I18
    set $I18, rx394_bstack[$I18]
  rx394_cut1183:
    assign rx394_cstack, $I18
  rx394_jump1182:
    jump $I19
  rx394_done1179:
    rx394_cur."!cursor_fail"()
    .return (rx394_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop" :subid("cuid_77_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 887
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_loop")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_78_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 889
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx400_tgt
    .local int rx400_pos
    .local int rx400_off
    .local int rx400_eos
    .local int rx400_rep
    .local pmc rx400_cur
    .local pmc rx400_curclass
    .local pmc rx400_bstack
    .local pmc rx400_cstack
    (rx400_cur, rx400_tgt, rx400_pos, rx400_curclass, rx400_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx400_cur
    length rx400_eos, rx400_tgt
    eq $I19, 1, rx400_restart1195
    gt rx400_pos, rx400_eos, rx400_fail1196
    repr_get_attr_int $I11, self, rx400_curclass, "$!from"
    ne $I11, -1, rxscan401_done1202
    goto rxscan401_scan1201
  rxscan401_loop1200:
    inc rx400_pos
    gt rx400_pos, rx400_eos, rx400_fail1196
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!from", rx400_pos
  rxscan401_scan1201:
    nqp_rxmark rx400_bstack, rxscan401_loop1200, rx400_pos, 0
  rxscan401_done1202:
    nqp_rxmark rx400_bstack, rxcap402_fail1204, rx400_pos, 0
    add $I11, rx400_pos, 5
    gt $I11, rx400_eos, rx400_fail1196
    substr $S10, rx400_tgt, rx400_pos, 5
    ne $S10, ucs4:"while", rx400_fail1196
    add rx400_pos, 5
    nqp_rxpeek $I19, rx400_bstack, rxcap402_fail1204
    inc $I19
    set $I11, rx400_bstack[$I19]
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!pos", rx400_pos
    $P11 = rx400_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx400_pos)
    rx400_cstack = rx400_cur."!cursor_capture"($P11, "sym")
    goto rxcap402_done1203
  rxcap402_fail1204:
    goto rx400_fail1196
  rxcap402_done1203:
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!pos", rx400_pos
    $P11 = rx400_cur."ws"()
    repr_get_attr_int $I11, $P11, rx400_curclass, "$!pos"
    lt $I11, 0, rx400_fail1196
    repr_get_attr_int rx400_pos, $P11, rx400_curclass, "$!pos"
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!pos", rx400_pos
    $P11 = rx400_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx400_curclass, "$!pos"
    lt $I11, 0, rx400_fail1196
    nqp_rxmark rx400_bstack, rxsubrule404_pass1206, -1, 0
  rxsubrule404_pass1206:
    rx400_cstack = rx400_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx400_pos, $P11, rx400_curclass, "$!pos"
    repr_bind_attr_int rx400_cur, rx400_curclass, "$!pos", rx400_pos
    $P11 = rx400_cur."ws"()
    repr_get_attr_int $I11, $P11, rx400_curclass, "$!pos"
    lt $I11, 0, rx400_fail1196
    repr_get_attr_int rx400_pos, $P11, rx400_curclass, "$!pos"
    rx400_cur."!cursor_pass"(rx400_pos, "statement_mod_loop:sym<while>", 'backtrack'=>1)
    .return (rx400_cur)
  rx400_restart1195:
    repr_get_attr_obj rx400_cstack, rx400_cur, rx400_curclass, "$!cstack"
  rx400_fail1196:
    unless rx400_bstack, rx400_done1194
    pop $I19, rx400_bstack
    if_null rx400_cstack, rx400_cstack_done1199
    unless rx400_cstack, rx400_cstack_done1199
    dec $I19
    set $P11, rx400_cstack[$I19]
  rx400_cstack_done1199:
    pop rx400_rep, rx400_bstack
    pop rx400_pos, rx400_bstack
    pop $I19, rx400_bstack
    lt rx400_pos, -1, rx400_done1194
    lt rx400_pos, 0, rx400_fail1196
    eq $I19, 0, rx400_fail1196
    nqp_islist $I20, rx400_cstack
    unless $I20, rx400_jump1197
    elements $I18, rx400_bstack
    le $I18, 0, rx400_cut1198
    dec $I18
    set $I18, rx400_bstack[$I18]
  rx400_cut1198:
    assign rx400_cstack, $I18
  rx400_jump1197:
    jump $I19
  rx400_done1194:
    rx400_cur."!cursor_fail"()
    .return (rx400_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_79_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 890
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx406_tgt
    .local int rx406_pos
    .local int rx406_off
    .local int rx406_eos
    .local int rx406_rep
    .local pmc rx406_cur
    .local pmc rx406_curclass
    .local pmc rx406_bstack
    .local pmc rx406_cstack
    (rx406_cur, rx406_tgt, rx406_pos, rx406_curclass, rx406_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx406_cur
    length rx406_eos, rx406_tgt
    eq $I19, 1, rx406_restart1210
    gt rx406_pos, rx406_eos, rx406_fail1211
    repr_get_attr_int $I11, self, rx406_curclass, "$!from"
    ne $I11, -1, rxscan407_done1217
    goto rxscan407_scan1216
  rxscan407_loop1215:
    inc rx406_pos
    gt rx406_pos, rx406_eos, rx406_fail1211
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!from", rx406_pos
  rxscan407_scan1216:
    nqp_rxmark rx406_bstack, rxscan407_loop1215, rx406_pos, 0
  rxscan407_done1217:
    nqp_rxmark rx406_bstack, rxcap408_fail1219, rx406_pos, 0
    add $I11, rx406_pos, 5
    gt $I11, rx406_eos, rx406_fail1211
    substr $S10, rx406_tgt, rx406_pos, 5
    ne $S10, ucs4:"until", rx406_fail1211
    add rx406_pos, 5
    nqp_rxpeek $I19, rx406_bstack, rxcap408_fail1219
    inc $I19
    set $I11, rx406_bstack[$I19]
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!pos", rx406_pos
    $P11 = rx406_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx406_pos)
    rx406_cstack = rx406_cur."!cursor_capture"($P11, "sym")
    goto rxcap408_done1218
  rxcap408_fail1219:
    goto rx406_fail1211
  rxcap408_done1218:
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!pos", rx406_pos
    $P11 = rx406_cur."ws"()
    repr_get_attr_int $I11, $P11, rx406_curclass, "$!pos"
    lt $I11, 0, rx406_fail1211
    repr_get_attr_int rx406_pos, $P11, rx406_curclass, "$!pos"
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!pos", rx406_pos
    $P11 = rx406_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx406_curclass, "$!pos"
    lt $I11, 0, rx406_fail1211
    nqp_rxmark rx406_bstack, rxsubrule410_pass1221, -1, 0
  rxsubrule410_pass1221:
    rx406_cstack = rx406_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx406_pos, $P11, rx406_curclass, "$!pos"
    repr_bind_attr_int rx406_cur, rx406_curclass, "$!pos", rx406_pos
    $P11 = rx406_cur."ws"()
    repr_get_attr_int $I11, $P11, rx406_curclass, "$!pos"
    lt $I11, 0, rx406_fail1211
    repr_get_attr_int rx406_pos, $P11, rx406_curclass, "$!pos"
    rx406_cur."!cursor_pass"(rx406_pos, "statement_mod_loop:sym<until>", 'backtrack'=>1)
    .return (rx406_cur)
  rx406_restart1210:
    repr_get_attr_obj rx406_cstack, rx406_cur, rx406_curclass, "$!cstack"
  rx406_fail1211:
    unless rx406_bstack, rx406_done1209
    pop $I19, rx406_bstack
    if_null rx406_cstack, rx406_cstack_done1214
    unless rx406_cstack, rx406_cstack_done1214
    dec $I19
    set $P11, rx406_cstack[$I19]
  rx406_cstack_done1214:
    pop rx406_rep, rx406_bstack
    pop rx406_pos, rx406_bstack
    pop $I19, rx406_bstack
    lt rx406_pos, -1, rx406_done1209
    lt rx406_pos, 0, rx406_fail1211
    eq $I19, 0, rx406_fail1211
    nqp_islist $I20, rx406_cstack
    unless $I20, rx406_jump1212
    elements $I18, rx406_bstack
    le $I18, 0, rx406_cut1213
    dec $I18
    set $I18, rx406_bstack[$I18]
  rx406_cut1213:
    assign rx406_cstack, $I18
  rx406_jump1212:
    jump $I19
  rx406_done1209:
    rx406_cur."!cursor_fail"()
    .return (rx406_cur) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<for>" :subid("cuid_80_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 891
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx412_tgt
    .local int rx412_pos
    .local int rx412_off
    .local int rx412_eos
    .local int rx412_rep
    .local pmc rx412_cur
    .local pmc rx412_curclass
    .local pmc rx412_bstack
    .local pmc rx412_cstack
    (rx412_cur, rx412_tgt, rx412_pos, rx412_curclass, rx412_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx412_cur
    length rx412_eos, rx412_tgt
    eq $I19, 1, rx412_restart1225
    gt rx412_pos, rx412_eos, rx412_fail1226
    repr_get_attr_int $I11, self, rx412_curclass, "$!from"
    ne $I11, -1, rxscan413_done1232
    goto rxscan413_scan1231
  rxscan413_loop1230:
    inc rx412_pos
    gt rx412_pos, rx412_eos, rx412_fail1226
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!from", rx412_pos
  rxscan413_scan1231:
    nqp_rxmark rx412_bstack, rxscan413_loop1230, rx412_pos, 0
  rxscan413_done1232:
    nqp_rxmark rx412_bstack, rxcap414_fail1234, rx412_pos, 0
    add $I11, rx412_pos, 3
    gt $I11, rx412_eos, rx412_fail1226
    substr $S10, rx412_tgt, rx412_pos, 3
    ne $S10, ucs4:"for", rx412_fail1226
    add rx412_pos, 3
    nqp_rxpeek $I19, rx412_bstack, rxcap414_fail1234
    inc $I19
    set $I11, rx412_bstack[$I19]
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!pos", rx412_pos
    $P11 = rx412_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx412_pos)
    rx412_cstack = rx412_cur."!cursor_capture"($P11, "sym")
    goto rxcap414_done1233
  rxcap414_fail1234:
    goto rx412_fail1226
  rxcap414_done1233:
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!pos", rx412_pos
    $P11 = rx412_cur."ws"()
    repr_get_attr_int $I11, $P11, rx412_curclass, "$!pos"
    lt $I11, 0, rx412_fail1226
    repr_get_attr_int rx412_pos, $P11, rx412_curclass, "$!pos"
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!pos", rx412_pos
    $P11 = rx412_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx412_curclass, "$!pos"
    lt $I11, 0, rx412_fail1226
    nqp_rxmark rx412_bstack, rxsubrule416_pass1236, -1, 0
  rxsubrule416_pass1236:
    rx412_cstack = rx412_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx412_pos, $P11, rx412_curclass, "$!pos"
    repr_bind_attr_int rx412_cur, rx412_curclass, "$!pos", rx412_pos
    $P11 = rx412_cur."ws"()
    repr_get_attr_int $I11, $P11, rx412_curclass, "$!pos"
    lt $I11, 0, rx412_fail1226
    repr_get_attr_int rx412_pos, $P11, rx412_curclass, "$!pos"
    rx412_cur."!cursor_pass"(rx412_pos, "statement_mod_loop:sym<for>", 'backtrack'=>1)
    .return (rx412_cur)
  rx412_restart1225:
    repr_get_attr_obj rx412_cstack, rx412_cur, rx412_curclass, "$!cstack"
  rx412_fail1226:
    unless rx412_bstack, rx412_done1224
    pop $I19, rx412_bstack
    if_null rx412_cstack, rx412_cstack_done1229
    unless rx412_cstack, rx412_cstack_done1229
    dec $I19
    set $P11, rx412_cstack[$I19]
  rx412_cstack_done1229:
    pop rx412_rep, rx412_bstack
    pop rx412_pos, rx412_bstack
    pop $I19, rx412_bstack
    lt rx412_pos, -1, rx412_done1224
    lt rx412_pos, 0, rx412_fail1226
    eq $I19, 0, rx412_fail1226
    nqp_islist $I20, rx412_cstack
    unless $I20, rx412_jump1227
    elements $I18, rx412_bstack
    le $I18, 0, rx412_cut1228
    dec $I18
    set $I18, rx412_bstack[$I18]
  rx412_cut1228:
    assign rx412_cstack, $I18
  rx412_jump1227:
    jump $I19
  rx412_done1224:
    rx412_cur."!cursor_fail"()
    .return (rx412_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_81_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 895
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx418_tgt
    .local int rx418_pos
    .local int rx418_off
    .local int rx418_eos
    .local int rx418_rep
    .local pmc rx418_cur
    .local pmc rx418_curclass
    .local pmc rx418_bstack
    .local pmc rx418_cstack
    (rx418_cur, rx418_tgt, rx418_pos, rx418_curclass, rx418_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx418_cur
    length rx418_eos, rx418_tgt
    eq $I19, 1, rx418_restart1240
    gt rx418_pos, rx418_eos, rx418_fail1241
    repr_get_attr_int $I11, self, rx418_curclass, "$!from"
    ne $I11, -1, rxscan419_done1247
    goto rxscan419_scan1246
  rxscan419_loop1245:
    inc rx418_pos
    gt rx418_pos, rx418_eos, rx418_fail1241
    repr_bind_attr_int rx418_cur, rx418_curclass, "$!from", rx418_pos
  rxscan419_scan1246:
    nqp_rxmark rx418_bstack, rxscan419_loop1245, rx418_pos, 0
  rxscan419_done1247:
    repr_bind_attr_int rx418_cur, rx418_curclass, "$!pos", rx418_pos
    $P11 = rx418_cur."fatarrow"()
    repr_get_attr_int $I11, $P11, rx418_curclass, "$!pos"
    lt $I11, 0, rx418_fail1241
    nqp_rxmark rx418_bstack, rxsubrule420_pass1248, -1, 0
  rxsubrule420_pass1248:
    rx418_cstack = rx418_cur."!cursor_capture"($P11, "fatarrow")
    repr_get_attr_int rx418_pos, $P11, rx418_curclass, "$!pos"
    rx418_cur."!cursor_pass"(rx418_pos, "term:sym<fatarrow>", 'backtrack'=>1)
    .return (rx418_cur)
  rx418_restart1240:
    repr_get_attr_obj rx418_cstack, rx418_cur, rx418_curclass, "$!cstack"
  rx418_fail1241:
    unless rx418_bstack, rx418_done1239
    pop $I19, rx418_bstack
    if_null rx418_cstack, rx418_cstack_done1244
    unless rx418_cstack, rx418_cstack_done1244
    dec $I19
    set $P11, rx418_cstack[$I19]
  rx418_cstack_done1244:
    pop rx418_rep, rx418_bstack
    pop rx418_pos, rx418_bstack
    pop $I19, rx418_bstack
    lt rx418_pos, -1, rx418_done1239
    lt rx418_pos, 0, rx418_fail1241
    eq $I19, 0, rx418_fail1241
    nqp_islist $I20, rx418_cstack
    unless $I20, rx418_jump1242
    elements $I18, rx418_bstack
    le $I18, 0, rx418_cut1243
    dec $I18
    set $I18, rx418_bstack[$I18]
  rx418_cut1243:
    assign rx418_cstack, $I18
  rx418_jump1242:
    jump $I19
  rx418_done1239:
    rx418_cur."!cursor_fail"()
    .return (rx418_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_82_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 896
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx421_tgt
    .local int rx421_pos
    .local int rx421_off
    .local int rx421_eos
    .local int rx421_rep
    .local pmc rx421_cur
    .local pmc rx421_curclass
    .local pmc rx421_bstack
    .local pmc rx421_cstack
    (rx421_cur, rx421_tgt, rx421_pos, rx421_curclass, rx421_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx421_cur
    length rx421_eos, rx421_tgt
    eq $I19, 1, rx421_restart1251
    gt rx421_pos, rx421_eos, rx421_fail1252
    repr_get_attr_int $I11, self, rx421_curclass, "$!from"
    ne $I11, -1, rxscan422_done1258
    goto rxscan422_scan1257
  rxscan422_loop1256:
    inc rx421_pos
    gt rx421_pos, rx421_eos, rx421_fail1252
    repr_bind_attr_int rx421_cur, rx421_curclass, "$!from", rx421_pos
  rxscan422_scan1257:
    nqp_rxmark rx421_bstack, rxscan422_loop1256, rx421_pos, 0
  rxscan422_done1258:
    repr_bind_attr_int rx421_cur, rx421_curclass, "$!pos", rx421_pos
    $P11 = rx421_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx421_curclass, "$!pos"
    lt $I11, 0, rx421_fail1252
    nqp_rxmark rx421_bstack, rxsubrule423_pass1259, -1, 0
  rxsubrule423_pass1259:
    rx421_cstack = rx421_cur."!cursor_capture"($P11, "colonpair")
    repr_get_attr_int rx421_pos, $P11, rx421_curclass, "$!pos"
    rx421_cur."!cursor_pass"(rx421_pos, "term:sym<colonpair>", 'backtrack'=>1)
    .return (rx421_cur)
  rx421_restart1251:
    repr_get_attr_obj rx421_cstack, rx421_cur, rx421_curclass, "$!cstack"
  rx421_fail1252:
    unless rx421_bstack, rx421_done1250
    pop $I19, rx421_bstack
    if_null rx421_cstack, rx421_cstack_done1255
    unless rx421_cstack, rx421_cstack_done1255
    dec $I19
    set $P11, rx421_cstack[$I19]
  rx421_cstack_done1255:
    pop rx421_rep, rx421_bstack
    pop rx421_pos, rx421_bstack
    pop $I19, rx421_bstack
    lt rx421_pos, -1, rx421_done1250
    lt rx421_pos, 0, rx421_fail1252
    eq $I19, 0, rx421_fail1252
    nqp_islist $I20, rx421_cstack
    unless $I20, rx421_jump1253
    elements $I18, rx421_bstack
    le $I18, 0, rx421_cut1254
    dec $I18
    set $I18, rx421_bstack[$I18]
  rx421_cut1254:
    assign rx421_cstack, $I18
  rx421_jump1253:
    jump $I19
  rx421_done1250:
    rx421_cur."!cursor_fail"()
    .return (rx421_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_83_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 897
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx424_tgt
    .local int rx424_pos
    .local int rx424_off
    .local int rx424_eos
    .local int rx424_rep
    .local pmc rx424_cur
    .local pmc rx424_curclass
    .local pmc rx424_bstack
    .local pmc rx424_cstack
    (rx424_cur, rx424_tgt, rx424_pos, rx424_curclass, rx424_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx424_cur
    length rx424_eos, rx424_tgt
    eq $I19, 1, rx424_restart1262
    gt rx424_pos, rx424_eos, rx424_fail1263
    repr_get_attr_int $I11, self, rx424_curclass, "$!from"
    ne $I11, -1, rxscan425_done1269
    goto rxscan425_scan1268
  rxscan425_loop1267:
    inc rx424_pos
    gt rx424_pos, rx424_eos, rx424_fail1263
    repr_bind_attr_int rx424_cur, rx424_curclass, "$!from", rx424_pos
  rxscan425_scan1268:
    nqp_rxmark rx424_bstack, rxscan425_loop1267, rx424_pos, 0
  rxscan425_done1269:
    repr_bind_attr_int rx424_cur, rx424_curclass, "$!pos", rx424_pos
    $P11 = rx424_cur."variable"()
    repr_get_attr_int $I11, $P11, rx424_curclass, "$!pos"
    lt $I11, 0, rx424_fail1263
    nqp_rxmark rx424_bstack, rxsubrule426_pass1270, -1, 0
  rxsubrule426_pass1270:
    rx424_cstack = rx424_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx424_pos, $P11, rx424_curclass, "$!pos"
    rx424_cur."!cursor_pass"(rx424_pos, "term:sym<variable>", 'backtrack'=>1)
    .return (rx424_cur)
  rx424_restart1262:
    repr_get_attr_obj rx424_cstack, rx424_cur, rx424_curclass, "$!cstack"
  rx424_fail1263:
    unless rx424_bstack, rx424_done1261
    pop $I19, rx424_bstack
    if_null rx424_cstack, rx424_cstack_done1266
    unless rx424_cstack, rx424_cstack_done1266
    dec $I19
    set $P11, rx424_cstack[$I19]
  rx424_cstack_done1266:
    pop rx424_rep, rx424_bstack
    pop rx424_pos, rx424_bstack
    pop $I19, rx424_bstack
    lt rx424_pos, -1, rx424_done1261
    lt rx424_pos, 0, rx424_fail1263
    eq $I19, 0, rx424_fail1263
    nqp_islist $I20, rx424_cstack
    unless $I20, rx424_jump1264
    elements $I18, rx424_bstack
    le $I18, 0, rx424_cut1265
    dec $I18
    set $I18, rx424_bstack[$I18]
  rx424_cut1265:
    assign rx424_cstack, $I18
  rx424_jump1264:
    jump $I19
  rx424_done1261:
    rx424_cur."!cursor_fail"()
    .return (rx424_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_84_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 898
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx427_tgt
    .local int rx427_pos
    .local int rx427_off
    .local int rx427_eos
    .local int rx427_rep
    .local pmc rx427_cur
    .local pmc rx427_curclass
    .local pmc rx427_bstack
    .local pmc rx427_cstack
    (rx427_cur, rx427_tgt, rx427_pos, rx427_curclass, rx427_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx427_cur
    length rx427_eos, rx427_tgt
    eq $I19, 1, rx427_restart1273
    gt rx427_pos, rx427_eos, rx427_fail1274
    repr_get_attr_int $I11, self, rx427_curclass, "$!from"
    ne $I11, -1, rxscan428_done1280
    goto rxscan428_scan1279
  rxscan428_loop1278:
    inc rx427_pos
    gt rx427_pos, rx427_eos, rx427_fail1274
    repr_bind_attr_int rx427_cur, rx427_curclass, "$!from", rx427_pos
  rxscan428_scan1279:
    nqp_rxmark rx427_bstack, rxscan428_loop1278, rx427_pos, 0
  rxscan428_done1280:
    repr_bind_attr_int rx427_cur, rx427_curclass, "$!pos", rx427_pos
    $P11 = rx427_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx427_curclass, "$!pos"
    lt $I11, 0, rx427_fail1274
    nqp_rxmark rx427_bstack, rxsubrule429_pass1281, -1, 0
  rxsubrule429_pass1281:
    rx427_cstack = rx427_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx427_pos, $P11, rx427_curclass, "$!pos"
    rx427_cur."!cursor_pass"(rx427_pos, "term:sym<package_declarator>", 'backtrack'=>1)
    .return (rx427_cur)
  rx427_restart1273:
    repr_get_attr_obj rx427_cstack, rx427_cur, rx427_curclass, "$!cstack"
  rx427_fail1274:
    unless rx427_bstack, rx427_done1272
    pop $I19, rx427_bstack
    if_null rx427_cstack, rx427_cstack_done1277
    unless rx427_cstack, rx427_cstack_done1277
    dec $I19
    set $P11, rx427_cstack[$I19]
  rx427_cstack_done1277:
    pop rx427_rep, rx427_bstack
    pop rx427_pos, rx427_bstack
    pop $I19, rx427_bstack
    lt rx427_pos, -1, rx427_done1272
    lt rx427_pos, 0, rx427_fail1274
    eq $I19, 0, rx427_fail1274
    nqp_islist $I20, rx427_cstack
    unless $I20, rx427_jump1275
    elements $I18, rx427_bstack
    le $I18, 0, rx427_cut1276
    dec $I18
    set $I18, rx427_bstack[$I18]
  rx427_cut1276:
    assign rx427_cstack, $I18
  rx427_jump1275:
    jump $I19
  rx427_done1272:
    rx427_cur."!cursor_fail"()
    .return (rx427_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_85_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 899
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx430_tgt
    .local int rx430_pos
    .local int rx430_off
    .local int rx430_eos
    .local int rx430_rep
    .local pmc rx430_cur
    .local pmc rx430_curclass
    .local pmc rx430_bstack
    .local pmc rx430_cstack
    (rx430_cur, rx430_tgt, rx430_pos, rx430_curclass, rx430_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx430_cur
    length rx430_eos, rx430_tgt
    eq $I19, 1, rx430_restart1284
    gt rx430_pos, rx430_eos, rx430_fail1285
    repr_get_attr_int $I11, self, rx430_curclass, "$!from"
    ne $I11, -1, rxscan431_done1291
    goto rxscan431_scan1290
  rxscan431_loop1289:
    inc rx430_pos
    gt rx430_pos, rx430_eos, rx430_fail1285
    repr_bind_attr_int rx430_cur, rx430_curclass, "$!from", rx430_pos
  rxscan431_scan1290:
    nqp_rxmark rx430_bstack, rxscan431_loop1289, rx430_pos, 0
  rxscan431_done1291:
    repr_bind_attr_int rx430_cur, rx430_curclass, "$!pos", rx430_pos
    $P11 = rx430_cur."scope_declarator"()
    repr_get_attr_int $I11, $P11, rx430_curclass, "$!pos"
    lt $I11, 0, rx430_fail1285
    nqp_rxmark rx430_bstack, rxsubrule432_pass1292, -1, 0
  rxsubrule432_pass1292:
    rx430_cstack = rx430_cur."!cursor_capture"($P11, "scope_declarator")
    repr_get_attr_int rx430_pos, $P11, rx430_curclass, "$!pos"
    rx430_cur."!cursor_pass"(rx430_pos, "term:sym<scope_declarator>", 'backtrack'=>1)
    .return (rx430_cur)
  rx430_restart1284:
    repr_get_attr_obj rx430_cstack, rx430_cur, rx430_curclass, "$!cstack"
  rx430_fail1285:
    unless rx430_bstack, rx430_done1283
    pop $I19, rx430_bstack
    if_null rx430_cstack, rx430_cstack_done1288
    unless rx430_cstack, rx430_cstack_done1288
    dec $I19
    set $P11, rx430_cstack[$I19]
  rx430_cstack_done1288:
    pop rx430_rep, rx430_bstack
    pop rx430_pos, rx430_bstack
    pop $I19, rx430_bstack
    lt rx430_pos, -1, rx430_done1283
    lt rx430_pos, 0, rx430_fail1285
    eq $I19, 0, rx430_fail1285
    nqp_islist $I20, rx430_cstack
    unless $I20, rx430_jump1286
    elements $I18, rx430_bstack
    le $I18, 0, rx430_cut1287
    dec $I18
    set $I18, rx430_bstack[$I18]
  rx430_cut1287:
    assign rx430_cstack, $I18
  rx430_jump1286:
    jump $I19
  rx430_done1283:
    rx430_cur."!cursor_fail"()
    .return (rx430_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_86_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 900
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx433_tgt
    .local int rx433_pos
    .local int rx433_off
    .local int rx433_eos
    .local int rx433_rep
    .local pmc rx433_cur
    .local pmc rx433_curclass
    .local pmc rx433_bstack
    .local pmc rx433_cstack
    (rx433_cur, rx433_tgt, rx433_pos, rx433_curclass, rx433_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx433_cur
    length rx433_eos, rx433_tgt
    eq $I19, 1, rx433_restart1295
    gt rx433_pos, rx433_eos, rx433_fail1296
    repr_get_attr_int $I11, self, rx433_curclass, "$!from"
    ne $I11, -1, rxscan434_done1302
    goto rxscan434_scan1301
  rxscan434_loop1300:
    inc rx433_pos
    gt rx433_pos, rx433_eos, rx433_fail1296
    repr_bind_attr_int rx433_cur, rx433_curclass, "$!from", rx433_pos
  rxscan434_scan1301:
    nqp_rxmark rx433_bstack, rxscan434_loop1300, rx433_pos, 0
  rxscan434_done1302:
    repr_bind_attr_int rx433_cur, rx433_curclass, "$!pos", rx433_pos
    $P11 = rx433_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx433_curclass, "$!pos"
    lt $I11, 0, rx433_fail1296
    nqp_rxmark rx433_bstack, rxsubrule435_pass1303, -1, 0
  rxsubrule435_pass1303:
    rx433_cstack = rx433_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx433_pos, $P11, rx433_curclass, "$!pos"
    rx433_cur."!cursor_pass"(rx433_pos, "term:sym<routine_declarator>", 'backtrack'=>1)
    .return (rx433_cur)
  rx433_restart1295:
    repr_get_attr_obj rx433_cstack, rx433_cur, rx433_curclass, "$!cstack"
  rx433_fail1296:
    unless rx433_bstack, rx433_done1294
    pop $I19, rx433_bstack
    if_null rx433_cstack, rx433_cstack_done1299
    unless rx433_cstack, rx433_cstack_done1299
    dec $I19
    set $P11, rx433_cstack[$I19]
  rx433_cstack_done1299:
    pop rx433_rep, rx433_bstack
    pop rx433_pos, rx433_bstack
    pop $I19, rx433_bstack
    lt rx433_pos, -1, rx433_done1294
    lt rx433_pos, 0, rx433_fail1296
    eq $I19, 0, rx433_fail1296
    nqp_islist $I20, rx433_cstack
    unless $I20, rx433_jump1297
    elements $I18, rx433_bstack
    le $I18, 0, rx433_cut1298
    dec $I18
    set $I18, rx433_bstack[$I18]
  rx433_cut1298:
    assign rx433_cstack, $I18
  rx433_jump1297:
    jump $I19
  rx433_done1294:
    rx433_cur."!cursor_fail"()
    .return (rx433_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_87_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 901
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_88_1360256386.79' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_89_1360256386.79' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx436_tgt
    .local int rx436_pos
    .local int rx436_off
    .local int rx436_eos
    .local int rx436_rep
    .local pmc rx436_cur
    .local pmc rx436_curclass
    .local pmc rx436_bstack
    .local pmc rx436_cstack
    (rx436_cur, rx436_tgt, rx436_pos, rx436_curclass, rx436_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx436_cur
    length rx436_eos, rx436_tgt
    eq $I19, 1, rx436_restart1306
    gt rx436_pos, rx436_eos, rx436_fail1307
    repr_get_attr_int $I11, self, rx436_curclass, "$!from"
    ne $I11, -1, rxscan437_done1313
    goto rxscan437_scan1312
  rxscan437_loop1311:
    inc rx436_pos
    gt rx436_pos, rx436_eos, rx436_fail1307
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!from", rx436_pos
  rxscan437_scan1312:
    nqp_rxmark rx436_bstack, rxscan437_loop1311, rx436_pos, 0
  rxscan437_done1313:
    .const 'Sub' $P5001 = 'cuid_88_1360256386.79' 
    capture_lex $P5001
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail1307
    .const 'Sub' $P5002 = 'cuid_89_1360256386.79' 
    capture_lex $P5002
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    ge $I11, 0, rx436_fail1307
    repr_bind_attr_int rx436_cur, rx436_curclass, "$!pos", rx436_pos
    $P11 = rx436_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx436_curclass, "$!pos"
    lt $I11, 0, rx436_fail1307
    nqp_rxmark rx436_bstack, rxsubrule445_pass1343, -1, 0
  rxsubrule445_pass1343:
    rx436_cstack = rx436_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx436_pos, $P11, rx436_curclass, "$!pos"
    rx436_cur."!cursor_pass"(rx436_pos, "term:sym<multi_declarator>", 'backtrack'=>1)
    .return (rx436_cur)
  rx436_restart1306:
    repr_get_attr_obj rx436_cstack, rx436_cur, rx436_curclass, "$!cstack"
  rx436_fail1307:
    unless rx436_bstack, rx436_done1305
    pop $I19, rx436_bstack
    if_null rx436_cstack, rx436_cstack_done1310
    unless rx436_cstack, rx436_cstack_done1310
    dec $I19
    set $P11, rx436_cstack[$I19]
  rx436_cstack_done1310:
    pop rx436_rep, rx436_bstack
    pop rx436_pos, rx436_bstack
    pop $I19, rx436_bstack
    lt rx436_pos, -1, rx436_done1305
    lt rx436_pos, 0, rx436_fail1307
    eq $I19, 0, rx436_fail1307
    nqp_islist $I20, rx436_cstack
    unless $I20, rx436_jump1308
    elements $I18, rx436_bstack
    le $I18, 0, rx436_cut1309
    dec $I18
    set $I18, rx436_bstack[$I18]
  rx436_cut1309:
    assign rx436_cstack, $I18
  rx436_jump1308:
    jump $I19
  rx436_done1305:
    rx436_cur."!cursor_fail"()
    .return (rx436_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_88_1360256386.79") :anon :lex :outer("cuid_87_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx438_tgt
    .local int rx438_pos
    .local int rx438_off
    .local int rx438_eos
    .local int rx438_rep
    .local pmc rx438_cur
    .local pmc rx438_curclass
    .local pmc rx438_bstack
    .local pmc rx438_cstack
    (rx438_cur, rx438_tgt, rx438_pos, rx438_curclass, rx438_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx438_cur
    length rx438_eos, rx438_tgt
    eq $I19, 1, rx438_restart1316
    gt rx438_pos, rx438_eos, rx438_fail1317
    repr_get_attr_int $I11, self, rx438_curclass, "$!from"
    ne $I11, -1, rxscan439_done1323
    goto rxscan439_scan1322
  rxscan439_loop1321:
    inc rx438_pos
    gt rx438_pos, rx438_eos, rx438_fail1317
    repr_bind_attr_int rx438_cur, rx438_curclass, "$!from", rx438_pos
  rxscan439_scan1322:
    nqp_rxmark rx438_bstack, rxscan439_loop1321, rx438_pos, 0
  rxscan439_done1323:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt440_01325
    nqp_push_label $P11, alt440_11326
    nqp_push_label $P11, alt440_21327
    nqp_rxmark rx438_bstack, alt440_end1324, -1, 0
    rx438_cur."!alt"(rx438_pos, "alt_nfa__17_1360256388.543", $P11)
    goto rx438_fail1317
  alt440_01325:
    add $I11, rx438_pos, 5
    gt $I11, rx438_eos, rx438_fail1317
    substr $S10, rx438_tgt, rx438_pos, 5
    ne $S10, ucs4:"multi", rx438_fail1317
    add rx438_pos, 5
    goto alt440_end1324
  alt440_11326:
    add $I11, rx438_pos, 5
    gt $I11, rx438_eos, rx438_fail1317
    substr $S10, rx438_tgt, rx438_pos, 5
    ne $S10, ucs4:"proto", rx438_fail1317
    add rx438_pos, 5
    goto alt440_end1324
  alt440_21327:
    add $I11, rx438_pos, 4
    gt $I11, rx438_eos, rx438_fail1317
    substr $S10, rx438_tgt, rx438_pos, 4
    ne $S10, ucs4:"only", rx438_fail1317
    add rx438_pos, 4
    goto alt440_end1324
  alt440_end1324:
    rx438_cur."!cursor_pass"(rx438_pos, 'backtrack'=>1)
    .return (rx438_cur)
  rx438_restart1316:
    repr_get_attr_obj rx438_cstack, rx438_cur, rx438_curclass, "$!cstack"
  rx438_fail1317:
    unless rx438_bstack, rx438_done1315
    pop $I19, rx438_bstack
    if_null rx438_cstack, rx438_cstack_done1320
    unless rx438_cstack, rx438_cstack_done1320
    dec $I19
    set $P11, rx438_cstack[$I19]
  rx438_cstack_done1320:
    pop rx438_rep, rx438_bstack
    pop rx438_pos, rx438_bstack
    pop $I19, rx438_bstack
    lt rx438_pos, -1, rx438_done1315
    lt rx438_pos, 0, rx438_fail1317
    eq $I19, 0, rx438_fail1317
    nqp_islist $I20, rx438_cstack
    unless $I20, rx438_jump1318
    elements $I18, rx438_bstack
    le $I18, 0, rx438_cut1319
    dec $I18
    set $I18, rx438_bstack[$I18]
  rx438_cut1319:
    assign rx438_cstack, $I18
  rx438_jump1318:
    jump $I19
  rx438_done1315:
    rx438_cur."!cursor_fail"()
    .return (rx438_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_89_1360256386.79") :anon :lex :outer("cuid_87_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx441_tgt
    .local int rx441_pos
    .local int rx441_off
    .local int rx441_eos
    .local int rx441_rep
    .local pmc rx441_cur
    .local pmc rx441_curclass
    .local pmc rx441_bstack
    .local pmc rx441_cstack
    (rx441_cur, rx441_tgt, rx441_pos, rx441_curclass, rx441_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx441_cur
    length rx441_eos, rx441_tgt
    eq $I19, 1, rx441_restart1330
    gt rx441_pos, rx441_eos, rx441_fail1331
    repr_get_attr_int $I11, self, rx441_curclass, "$!from"
    ne $I11, -1, rxscan442_done1337
    goto rxscan442_scan1336
  rxscan442_loop1335:
    inc rx441_pos
    gt rx441_pos, rx441_eos, rx441_fail1331
    repr_bind_attr_int rx441_cur, rx441_curclass, "$!from", rx441_pos
  rxscan442_scan1336:
    nqp_rxmark rx441_bstack, rxscan442_loop1335, rx441_pos, 0
  rxscan442_done1337:
    add $I11, rx441_pos, 5
    gt $I11, rx441_eos, rx441_fail1331
    substr $S10, rx441_tgt, rx441_pos, 5
    ne $S10, ucs4:"proto", rx441_fail1331
    add rx441_pos, 5
    repr_bind_attr_int rx441_cur, rx441_curclass, "$!pos", rx441_pos
    $P11 = rx441_cur."ws"()
    repr_get_attr_int $I11, $P11, rx441_curclass, "$!pos"
    lt $I11, 0, rx441_fail1331
    repr_get_attr_int rx441_pos, $P11, rx441_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt444_01340
    nqp_push_label $P11, alt444_11341
    nqp_push_label $P11, alt444_21342
    nqp_rxmark rx441_bstack, alt444_end1339, -1, 0
    rx441_cur."!alt"(rx441_pos, "alt_nfa__18_1360256388.551", $P11)
    goto rx441_fail1331
  alt444_01340:
    add $I11, rx441_pos, 5
    gt $I11, rx441_eos, rx441_fail1331
    substr $S10, rx441_tgt, rx441_pos, 5
    ne $S10, ucs4:"regex", rx441_fail1331
    add rx441_pos, 5
    goto alt444_end1339
  alt444_11341:
    add $I11, rx441_pos, 5
    gt $I11, rx441_eos, rx441_fail1331
    substr $S10, rx441_tgt, rx441_pos, 5
    ne $S10, ucs4:"token", rx441_fail1331
    add rx441_pos, 5
    goto alt444_end1339
  alt444_21342:
    add $I11, rx441_pos, 4
    gt $I11, rx441_eos, rx441_fail1331
    substr $S10, rx441_tgt, rx441_pos, 4
    ne $S10, ucs4:"rule", rx441_fail1331
    add rx441_pos, 4
    goto alt444_end1339
  alt444_end1339:
    nqp_rxcommit rx441_bstack, alt444_end1339
    rx441_cur."!cursor_pass"(rx441_pos, 'backtrack'=>1)
    .return (rx441_cur)
  rx441_restart1330:
    repr_get_attr_obj rx441_cstack, rx441_cur, rx441_curclass, "$!cstack"
  rx441_fail1331:
    unless rx441_bstack, rx441_done1329
    pop $I19, rx441_bstack
    if_null rx441_cstack, rx441_cstack_done1334
    unless rx441_cstack, rx441_cstack_done1334
    dec $I19
    set $P11, rx441_cstack[$I19]
  rx441_cstack_done1334:
    pop rx441_rep, rx441_bstack
    pop rx441_pos, rx441_bstack
    pop $I19, rx441_bstack
    lt rx441_pos, -1, rx441_done1329
    lt rx441_pos, 0, rx441_fail1331
    eq $I19, 0, rx441_fail1331
    nqp_islist $I20, rx441_cstack
    unless $I20, rx441_jump1332
    elements $I18, rx441_bstack
    le $I18, 0, rx441_cut1333
    dec $I18
    set $I18, rx441_bstack[$I18]
  rx441_cut1333:
    assign rx441_cstack, $I18
  rx441_jump1332:
    jump $I19
  rx441_done1329:
    rx441_cur."!cursor_fail"()
    .return (rx441_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_90_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 906
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx446_tgt
    .local int rx446_pos
    .local int rx446_off
    .local int rx446_eos
    .local int rx446_rep
    .local pmc rx446_cur
    .local pmc rx446_curclass
    .local pmc rx446_bstack
    .local pmc rx446_cstack
    (rx446_cur, rx446_tgt, rx446_pos, rx446_curclass, rx446_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx446_cur
    length rx446_eos, rx446_tgt
    eq $I19, 1, rx446_restart1346
    gt rx446_pos, rx446_eos, rx446_fail1347
    repr_get_attr_int $I11, self, rx446_curclass, "$!from"
    ne $I11, -1, rxscan447_done1353
    goto rxscan447_scan1352
  rxscan447_loop1351:
    inc rx446_pos
    gt rx446_pos, rx446_eos, rx446_fail1347
    repr_bind_attr_int rx446_cur, rx446_curclass, "$!from", rx446_pos
  rxscan447_scan1352:
    nqp_rxmark rx446_bstack, rxscan447_loop1351, rx446_pos, 0
  rxscan447_done1353:
    repr_bind_attr_int rx446_cur, rx446_curclass, "$!pos", rx446_pos
    $P11 = rx446_cur."regex_declarator"()
    repr_get_attr_int $I11, $P11, rx446_curclass, "$!pos"
    lt $I11, 0, rx446_fail1347
    nqp_rxmark rx446_bstack, rxsubrule448_pass1354, -1, 0
  rxsubrule448_pass1354:
    rx446_cstack = rx446_cur."!cursor_capture"($P11, "regex_declarator")
    repr_get_attr_int rx446_pos, $P11, rx446_curclass, "$!pos"
    rx446_cur."!cursor_pass"(rx446_pos, "term:sym<regex_declarator>", 'backtrack'=>1)
    .return (rx446_cur)
  rx446_restart1346:
    repr_get_attr_obj rx446_cstack, rx446_cur, rx446_curclass, "$!cstack"
  rx446_fail1347:
    unless rx446_bstack, rx446_done1345
    pop $I19, rx446_bstack
    if_null rx446_cstack, rx446_cstack_done1350
    unless rx446_cstack, rx446_cstack_done1350
    dec $I19
    set $P11, rx446_cstack[$I19]
  rx446_cstack_done1350:
    pop rx446_rep, rx446_bstack
    pop rx446_pos, rx446_bstack
    pop $I19, rx446_bstack
    lt rx446_pos, -1, rx446_done1345
    lt rx446_pos, 0, rx446_fail1347
    eq $I19, 0, rx446_fail1347
    nqp_islist $I20, rx446_cstack
    unless $I20, rx446_jump1348
    elements $I18, rx446_bstack
    le $I18, 0, rx446_cut1349
    dec $I18
    set $I18, rx446_bstack[$I18]
  rx446_cut1349:
    assign rx446_cstack, $I18
  rx446_jump1348:
    jump $I19
  rx446_done1345:
    rx446_cur."!cursor_fail"()
    .return (rx446_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_91_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 907
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx449_tgt
    .local int rx449_pos
    .local int rx449_off
    .local int rx449_eos
    .local int rx449_rep
    .local pmc rx449_cur
    .local pmc rx449_curclass
    .local pmc rx449_bstack
    .local pmc rx449_cstack
    (rx449_cur, rx449_tgt, rx449_pos, rx449_curclass, rx449_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx449_cur
    length rx449_eos, rx449_tgt
    eq $I19, 1, rx449_restart1357
    gt rx449_pos, rx449_eos, rx449_fail1358
    repr_get_attr_int $I11, self, rx449_curclass, "$!from"
    ne $I11, -1, rxscan450_done1364
    goto rxscan450_scan1363
  rxscan450_loop1362:
    inc rx449_pos
    gt rx449_pos, rx449_eos, rx449_fail1358
    repr_bind_attr_int rx449_cur, rx449_curclass, "$!from", rx449_pos
  rxscan450_scan1363:
    nqp_rxmark rx449_bstack, rxscan450_loop1362, rx449_pos, 0
  rxscan450_done1364:
    repr_bind_attr_int rx449_cur, rx449_curclass, "$!pos", rx449_pos
    $P11 = rx449_cur."statement_prefix"()
    repr_get_attr_int $I11, $P11, rx449_curclass, "$!pos"
    lt $I11, 0, rx449_fail1358
    nqp_rxmark rx449_bstack, rxsubrule451_pass1365, -1, 0
  rxsubrule451_pass1365:
    rx449_cstack = rx449_cur."!cursor_capture"($P11, "statement_prefix")
    repr_get_attr_int rx449_pos, $P11, rx449_curclass, "$!pos"
    rx449_cur."!cursor_pass"(rx449_pos, "term:sym<statement_prefix>", 'backtrack'=>1)
    .return (rx449_cur)
  rx449_restart1357:
    repr_get_attr_obj rx449_cstack, rx449_cur, rx449_curclass, "$!cstack"
  rx449_fail1358:
    unless rx449_bstack, rx449_done1356
    pop $I19, rx449_bstack
    if_null rx449_cstack, rx449_cstack_done1361
    unless rx449_cstack, rx449_cstack_done1361
    dec $I19
    set $P11, rx449_cstack[$I19]
  rx449_cstack_done1361:
    pop rx449_rep, rx449_bstack
    pop rx449_pos, rx449_bstack
    pop $I19, rx449_bstack
    lt rx449_pos, -1, rx449_done1356
    lt rx449_pos, 0, rx449_fail1358
    eq $I19, 0, rx449_fail1358
    nqp_islist $I20, rx449_cstack
    unless $I20, rx449_jump1359
    elements $I18, rx449_bstack
    le $I18, 0, rx449_cut1360
    dec $I18
    set $I18, rx449_bstack[$I18]
  rx449_cut1360:
    assign rx449_cstack, $I18
  rx449_jump1359:
    jump $I19
  rx449_done1356:
    rx449_cur."!cursor_fail"()
    .return (rx449_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_92_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 908
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx452_tgt
    .local int rx452_pos
    .local int rx452_off
    .local int rx452_eos
    .local int rx452_rep
    .local pmc rx452_cur
    .local pmc rx452_curclass
    .local pmc rx452_bstack
    .local pmc rx452_cstack
    (rx452_cur, rx452_tgt, rx452_pos, rx452_curclass, rx452_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx452_cur
    length rx452_eos, rx452_tgt
    eq $I19, 1, rx452_restart1368
    gt rx452_pos, rx452_eos, rx452_fail1369
    repr_get_attr_int $I11, self, rx452_curclass, "$!from"
    ne $I11, -1, rxscan453_done1375
    goto rxscan453_scan1374
  rxscan453_loop1373:
    inc rx452_pos
    gt rx452_pos, rx452_eos, rx452_fail1369
    repr_bind_attr_int rx452_cur, rx452_curclass, "$!from", rx452_pos
  rxscan453_scan1374:
    nqp_rxmark rx452_bstack, rxscan453_loop1373, rx452_pos, 0
  rxscan453_done1375:
    repr_bind_attr_int rx452_cur, rx452_curclass, "$!pos", rx452_pos
    $P11 = rx452_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx452_curclass, "$!pos"
    lt $I11, 0, rx452_fail1369
    repr_bind_attr_int rx452_cur, rx452_curclass, "$!pos", rx452_pos
    $P11 = rx452_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx452_curclass, "$!pos"
    lt $I11, 0, rx452_fail1369
    nqp_rxmark rx452_bstack, rxsubrule454_pass1376, -1, 0
  rxsubrule454_pass1376:
    rx452_cstack = rx452_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx452_pos, $P11, rx452_curclass, "$!pos"
    rx452_cur."!cursor_pass"(rx452_pos, "term:sym<lambda>", 'backtrack'=>1)
    .return (rx452_cur)
  rx452_restart1368:
    repr_get_attr_obj rx452_cstack, rx452_cur, rx452_curclass, "$!cstack"
  rx452_fail1369:
    unless rx452_bstack, rx452_done1367
    pop $I19, rx452_bstack
    if_null rx452_cstack, rx452_cstack_done1372
    unless rx452_cstack, rx452_cstack_done1372
    dec $I19
    set $P11, rx452_cstack[$I19]
  rx452_cstack_done1372:
    pop rx452_rep, rx452_bstack
    pop rx452_pos, rx452_bstack
    pop $I19, rx452_bstack
    lt rx452_pos, -1, rx452_done1367
    lt rx452_pos, 0, rx452_fail1369
    eq $I19, 0, rx452_fail1369
    nqp_islist $I20, rx452_cstack
    unless $I20, rx452_jump1370
    elements $I18, rx452_bstack
    le $I18, 0, rx452_cut1371
    dec $I18
    set $I18, rx452_bstack[$I18]
  rx452_cut1371:
    assign rx452_cstack, $I18
  rx452_jump1370:
    jump $I19
  rx452_done1367:
    rx452_cur."!cursor_fail"()
    .return (rx452_cur) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_93_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 910
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx455_tgt
    .local int rx455_pos
    .local int rx455_off
    .local int rx455_eos
    .local int rx455_rep
    .local pmc rx455_cur
    .local pmc rx455_curclass
    .local pmc rx455_bstack
    .local pmc rx455_cstack
    (rx455_cur, rx455_tgt, rx455_pos, rx455_curclass, rx455_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx455_cur
    length rx455_eos, rx455_tgt
    eq $I19, 1, rx455_restart1379
    gt rx455_pos, rx455_eos, rx455_fail1380
    repr_get_attr_int $I11, self, rx455_curclass, "$!from"
    ne $I11, -1, rxscan456_done1386
    goto rxscan456_scan1385
  rxscan456_loop1384:
    inc rx455_pos
    gt rx455_pos, rx455_eos, rx455_fail1380
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!from", rx455_pos
  rxscan456_scan1385:
    nqp_rxmark rx455_bstack, rxscan456_loop1384, rx455_pos, 0
  rxscan456_done1386:
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!pos", rx455_pos
    $P11 = rx455_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx455_curclass, "$!pos"
    lt $I11, 0, rx455_fail1380
    nqp_rxmark rx455_bstack, rxsubrule457_pass1387, -1, 0
  rxsubrule457_pass1387:
    rx455_cstack = rx455_cur."!cursor_capture"($P11, "key")
    repr_get_attr_int rx455_pos, $P11, rx455_curclass, "$!pos"
    nqp_rxmark rx455_bstack, rxquantr458_done1389, rx455_pos, 0
  rxquantr458_loop1388:
    ge rx455_pos, rx455_eos, rx455_fail1380
    substr $S11, rx455_tgt, rx455_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx455_fail1380
    inc rx455_pos
    nqp_rxpeek $I19, rx455_bstack, rxquantr458_done1389
    inc $I19
    inc $I19
    set rx455_rep, rx455_bstack[$I19]
    nqp_rxcommit rx455_bstack, rxquantr458_done1389
    inc rx455_rep
    nqp_rxmark rx455_bstack, rxquantr458_done1389, rx455_pos, rx455_rep
    goto rxquantr458_loop1388
  rxquantr458_done1389:
    add $I11, rx455_pos, 2
    gt $I11, rx455_eos, rx455_fail1380
    substr $S10, rx455_tgt, rx455_pos, 2
    ne $S10, ucs4:"=>", rx455_fail1380
    add rx455_pos, 2
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!pos", rx455_pos
    $P11 = rx455_cur."ws"()
    repr_get_attr_int $I11, $P11, rx455_curclass, "$!pos"
    lt $I11, 0, rx455_fail1380
    repr_get_attr_int rx455_pos, $P11, rx455_curclass, "$!pos"
    repr_bind_attr_int rx455_cur, rx455_curclass, "$!pos", rx455_pos
    $P11 = rx455_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx455_curclass, "$!pos"
    lt $I11, 0, rx455_fail1380
    nqp_rxmark rx455_bstack, rxsubrule460_pass1391, -1, 0
  rxsubrule460_pass1391:
    rx455_cstack = rx455_cur."!cursor_capture"($P11, "val")
    repr_get_attr_int rx455_pos, $P11, rx455_curclass, "$!pos"
    rx455_cur."!cursor_pass"(rx455_pos, "fatarrow", 'backtrack'=>1)
    .return (rx455_cur)
  rx455_restart1379:
    repr_get_attr_obj rx455_cstack, rx455_cur, rx455_curclass, "$!cstack"
  rx455_fail1380:
    unless rx455_bstack, rx455_done1378
    pop $I19, rx455_bstack
    if_null rx455_cstack, rx455_cstack_done1383
    unless rx455_cstack, rx455_cstack_done1383
    dec $I19
    set $P11, rx455_cstack[$I19]
  rx455_cstack_done1383:
    pop rx455_rep, rx455_bstack
    pop rx455_pos, rx455_bstack
    pop $I19, rx455_bstack
    lt rx455_pos, -1, rx455_done1378
    lt rx455_pos, 0, rx455_fail1380
    eq $I19, 0, rx455_fail1380
    nqp_islist $I20, rx455_cstack
    unless $I20, rx455_jump1381
    elements $I18, rx455_bstack
    le $I18, 0, rx455_cut1382
    dec $I18
    set $I18, rx455_bstack[$I18]
  rx455_cut1382:
    assign rx455_cstack, $I18
  rx455_jump1381:
    jump $I19
  rx455_done1378:
    rx455_cur."!cursor_fail"()
    .return (rx455_cur) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_94_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 914
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx461_tgt
    .local int rx461_pos
    .local int rx461_off
    .local int rx461_eos
    .local int rx461_rep
    .local pmc rx461_cur
    .local pmc rx461_curclass
    .local pmc rx461_bstack
    .local pmc rx461_cstack
    (rx461_cur, rx461_tgt, rx461_pos, rx461_curclass, rx461_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx461_cur
    length rx461_eos, rx461_tgt
    eq $I19, 1, rx461_restart1394
    gt rx461_pos, rx461_eos, rx461_fail1395
    repr_get_attr_int $I11, self, rx461_curclass, "$!from"
    ne $I11, -1, rxscan462_done1401
    goto rxscan462_scan1400
  rxscan462_loop1399:
    inc rx461_pos
    gt rx461_pos, rx461_eos, rx461_fail1395
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!from", rx461_pos
  rxscan462_scan1400:
    nqp_rxmark rx461_bstack, rxscan462_loop1399, rx461_pos, 0
  rxscan462_done1401:
    add $I11, rx461_pos, 1
    gt $I11, rx461_eos, rx461_fail1395
    substr $S10, rx461_tgt, rx461_pos, 1
    ne $S10, ucs4:":", rx461_fail1395
    add rx461_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt463_01403
    nqp_push_label $P11, alt463_11407
    nqp_push_label $P11, alt463_21413
    nqp_push_label $P11, alt463_31415
    nqp_rxmark rx461_bstack, alt463_end1402, -1, 0
    rx461_cur."!alt"(rx461_pos, "alt_nfa__19_1360256388.59", $P11)
    goto rx461_fail1395
  alt463_01403:
    nqp_rxmark rx461_bstack, rxcap464_fail1405, rx461_pos, 0
    add $I11, rx461_pos, 1
    gt $I11, rx461_eos, rx461_fail1395
    substr $S10, rx461_tgt, rx461_pos, 1
    ne $S10, ucs4:"!", rx461_fail1395
    add rx461_pos, 1
    nqp_rxpeek $I19, rx461_bstack, rxcap464_fail1405
    inc $I19
    set $I11, rx461_bstack[$I19]
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!pos", rx461_pos
    $P11 = rx461_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx461_pos)
    rx461_cstack = rx461_cur."!cursor_capture"($P11, "not")
    goto rxcap464_done1404
  rxcap464_fail1405:
    goto rx461_fail1395
  rxcap464_done1404:
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!pos", rx461_pos
    $P11 = rx461_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx461_curclass, "$!pos"
    lt $I11, 0, rx461_fail1395
    nqp_rxmark rx461_bstack, rxsubrule465_pass1406, -1, 0
  rxsubrule465_pass1406:
    rx461_cstack = rx461_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx461_pos, $P11, rx461_curclass, "$!pos"
    goto alt463_end1402
  alt463_11407:
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!pos", rx461_pos
    $P11 = rx461_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx461_curclass, "$!pos"
    lt $I11, 0, rx461_fail1395
    nqp_rxmark rx461_bstack, rxsubrule466_pass1408, -1, 0
  rxsubrule466_pass1408:
    rx461_cstack = rx461_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx461_pos, $P11, rx461_curclass, "$!pos"
    nqp_rxmark rx461_bstack, rxquantr467_done1410, rx461_pos, 0
  rxquantr467_loop1409:
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!pos", rx461_pos
    $P11 = rx461_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx461_curclass, "$!pos"
    lt $I11, 0, rx461_fail1395
    goto rxsubrule468_pass1411
  rxsubrule468_back1412:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx461_curclass, "$!pos"
    lt $I11, 0, rx461_fail1395
  rxsubrule468_pass1411:
    rx461_cstack = rx461_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule468_back1412
    push rx461_bstack, $I11
    push rx461_bstack, 0
    push rx461_bstack, rx461_pos
    elements $I11, rx461_cstack
    push rx461_bstack, $I11
    repr_get_attr_int rx461_pos, $P11, rx461_curclass, "$!pos"
    nqp_rxpeek $I19, rx461_bstack, rxquantr467_done1410
    inc $I19
    inc $I19
    set rx461_rep, rx461_bstack[$I19]
    nqp_rxcommit rx461_bstack, rxquantr467_done1410
    inc rx461_rep
  rxquantr467_done1410:
    goto alt463_end1402
  alt463_21413:
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!pos", rx461_pos
    $P11 = rx461_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx461_curclass, "$!pos"
    lt $I11, 0, rx461_fail1395
    nqp_rxmark rx461_bstack, rxsubrule469_pass1414, -1, 0
  rxsubrule469_pass1414:
    rx461_cstack = rx461_cur."!cursor_capture"($P11, "circumfix")
    repr_get_attr_int rx461_pos, $P11, rx461_curclass, "$!pos"
    goto alt463_end1402
  alt463_31415:
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!pos", rx461_pos
    $P11 = rx461_cur."variable"()
    repr_get_attr_int $I11, $P11, rx461_curclass, "$!pos"
    lt $I11, 0, rx461_fail1395
    nqp_rxmark rx461_bstack, rxsubrule470_pass1416, -1, 0
  rxsubrule470_pass1416:
    rx461_cstack = rx461_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx461_pos, $P11, rx461_curclass, "$!pos"
    goto alt463_end1402
  alt463_end1402:
    nqp_rxcommit rx461_bstack, alt463_end1402
    rx461_cur."!cursor_pass"(rx461_pos, "colonpair", 'backtrack'=>1)
    .return (rx461_cur)
  rx461_restart1394:
    repr_get_attr_obj rx461_cstack, rx461_cur, rx461_curclass, "$!cstack"
  rx461_fail1395:
    unless rx461_bstack, rx461_done1393
    pop $I19, rx461_bstack
    if_null rx461_cstack, rx461_cstack_done1398
    unless rx461_cstack, rx461_cstack_done1398
    dec $I19
    set $P11, rx461_cstack[$I19]
  rx461_cstack_done1398:
    pop rx461_rep, rx461_bstack
    pop rx461_pos, rx461_bstack
    pop $I19, rx461_bstack
    lt rx461_pos, -1, rx461_done1393
    lt rx461_pos, 0, rx461_fail1395
    eq $I19, 0, rx461_fail1395
    nqp_islist $I20, rx461_cstack
    unless $I20, rx461_jump1396
    elements $I18, rx461_bstack
    le $I18, 0, rx461_cut1397
    dec $I18
    set $I18, rx461_bstack[$I18]
  rx461_cut1397:
    assign rx461_cstack, $I18
  rx461_jump1396:
    jump $I19
  rx461_done1393:
    rx461_cur."!cursor_fail"()
    .return (rx461_cur) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_95_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 924
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx471_tgt
    .local int rx471_pos
    .local int rx471_off
    .local int rx471_eos
    .local int rx471_rep
    .local pmc rx471_cur
    .local pmc rx471_curclass
    .local pmc rx471_bstack
    .local pmc rx471_cstack
    (rx471_cur, rx471_tgt, rx471_pos, rx471_curclass, rx471_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx471_cur
    length rx471_eos, rx471_tgt
    eq $I19, 1, rx471_restart1419
    gt rx471_pos, rx471_eos, rx471_fail1420
    repr_get_attr_int $I11, self, rx471_curclass, "$!from"
    ne $I11, -1, rxscan472_done1426
    goto rxscan472_scan1425
  rxscan472_loop1424:
    inc rx471_pos
    gt rx471_pos, rx471_eos, rx471_fail1420
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!from", rx471_pos
  rxscan472_scan1425:
    nqp_rxmark rx471_bstack, rxscan472_loop1424, rx471_pos, 0
  rxscan472_done1426:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt473_01428
    nqp_push_label $P11, alt473_11435
    nqp_push_label $P11, alt473_21438
    nqp_push_label $P11, alt473_31446
    nqp_rxmark rx471_bstack, alt473_end1427, -1, 0
    rx471_cur."!alt"(rx471_pos, "alt_nfa__20_1360256388.609", $P11)
    goto rx471_fail1420
  alt473_01428:
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
    nqp_rxmark rx471_bstack, rxsubrule474_pass1429, -1, 0
  rxsubrule474_pass1429:
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
    nqp_rxmark rx471_bstack, rxquantr475_done1431, rx471_pos, 0
  rxquantr475_loop1430:
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
    goto rxsubrule476_pass1432
  rxsubrule476_back1433:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
  rxsubrule476_pass1432:
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule476_back1433
    push rx471_bstack, $I11
    push rx471_bstack, 0
    push rx471_bstack, rx471_pos
    elements $I11, rx471_cstack
    push rx471_bstack, $I11
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
    nqp_rxpeek $I19, rx471_bstack, rxquantr475_done1431
    inc $I19
    inc $I19
    set rx471_rep, rx471_bstack[$I19]
    nqp_rxcommit rx471_bstack, rxquantr475_done1431
    inc rx471_rep
  rxquantr475_done1431:
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."name"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
    nqp_rxmark rx471_bstack, rxsubrule477_pass1434, -1, 0
  rxsubrule477_pass1434:
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "desigilname")
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
    goto alt473_end1427
  alt473_11435:
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
    nqp_rxmark rx471_bstack, rxsubrule478_pass1436, -1, 0
  rxsubrule478_pass1436:
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
    ge rx471_pos, rx471_eos, rx471_fail1420
    substr $S11, rx471_tgt, rx471_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx471_fail1420
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."postcircumfix"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
    nqp_rxmark rx471_bstack, rxsubrule479_pass1437, -1, 0
  rxsubrule479_pass1437:
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "postcircumfix")
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
    goto alt473_end1427
  alt473_21438:
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
    nqp_rxmark rx471_bstack, rxsubrule480_pass1439, -1, 0
  rxsubrule480_pass1439:
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
    add $I11, rx471_pos, 1
    gt $I11, rx471_eos, rx471_fail1420
    substr $S10, rx471_tgt, rx471_pos, 1
    ne $S10, ucs4:"(", rx471_fail1420
    add rx471_pos, 1
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."semilist"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
    nqp_rxmark rx471_bstack, rxsubrule481_pass1440, -1, 0
  rxsubrule481_pass1440:
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "semilist")
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
  alt482_01442:
    nqp_rxmark rx471_bstack, alt482_11443, rx471_pos, 0
    add $I11, rx471_pos, 1
    gt $I11, rx471_eos, rx471_fail1420
    substr $S10, rx471_tgt, rx471_pos, 1
    ne $S10, ucs4:")", rx471_fail1420
    add rx471_pos, 1
    goto alt482_end1441
  alt482_11443:
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."FAILGOAL"("')'")
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
    goto rxsubrule483_pass1444
  rxsubrule483_back1445:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx471_curclass, "$!pos"
    lt $I11, 0, rx471_fail1420
  rxsubrule483_pass1444:
    rx471_cstack = rx471_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule483_back1445
    push rx471_bstack, $I11
    push rx471_bstack, 0
    push rx471_bstack, rx471_pos
    elements $I11, rx471_cstack
    push rx471_bstack, $I11
    repr_get_attr_int rx471_pos, $P11, rx471_curclass, "$!pos"
  alt482_end1441:
    goto alt473_end1427
  alt473_31446:
    nqp_rxmark rx471_bstack, rxcap484_fail1448, rx471_pos, 0
    add $I11, rx471_pos, 1
    gt $I11, rx471_eos, rx471_fail1420
    substr $S10, rx471_tgt, rx471_pos, 1
    ne $S10, ucs4:"$", rx471_fail1420
    add rx471_pos, 1
    nqp_rxpeek $I19, rx471_bstack, rxcap484_fail1448
    inc $I19
    set $I11, rx471_bstack[$I19]
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx471_pos)
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "sigil")
    goto rxcap484_done1447
  rxcap484_fail1448:
    goto rx471_fail1420
  rxcap484_done1447:
    nqp_rxmark rx471_bstack, rxcap485_fail1450, rx471_pos, 0
    ge rx471_pos, rx471_eos, rx471_fail1420
    substr $S11, rx471_tgt, rx471_pos, 1
    index $I11, ucs4:"/_!", $S11
    lt $I11, 0, rx471_fail1420
    inc rx471_pos
    nqp_rxpeek $I19, rx471_bstack, rxcap485_fail1450
    inc $I19
    set $I11, rx471_bstack[$I19]
    repr_bind_attr_int rx471_cur, rx471_curclass, "$!pos", rx471_pos
    $P11 = rx471_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx471_pos)
    rx471_cstack = rx471_cur."!cursor_capture"($P11, "desigilname")
    goto rxcap485_done1449
  rxcap485_fail1450:
    goto rx471_fail1420
  rxcap485_done1449:
    goto alt473_end1427
  alt473_end1427:
    rx471_cur."!cursor_pass"(rx471_pos, "variable", 'backtrack'=>1)
    .return (rx471_cur)
  rx471_restart1419:
    repr_get_attr_obj rx471_cstack, rx471_cur, rx471_curclass, "$!cstack"
  rx471_fail1420:
    unless rx471_bstack, rx471_done1418
    pop $I19, rx471_bstack
    if_null rx471_cstack, rx471_cstack_done1423
    unless rx471_cstack, rx471_cstack_done1423
    dec $I19
    set $P11, rx471_cstack[$I19]
  rx471_cstack_done1423:
    pop rx471_rep, rx471_bstack
    pop rx471_pos, rx471_bstack
    pop $I19, rx471_bstack
    lt rx471_pos, -1, rx471_done1418
    lt rx471_pos, 0, rx471_fail1420
    eq $I19, 0, rx471_fail1420
    nqp_islist $I20, rx471_cstack
    unless $I20, rx471_jump1421
    elements $I18, rx471_bstack
    le $I18, 0, rx471_cut1422
    dec $I18
    set $I18, rx471_bstack[$I18]
  rx471_cut1422:
    assign rx471_cstack, $I18
  rx471_jump1421:
    jump $I19
  rx471_done1418:
    rx471_cur."!cursor_fail"()
    .return (rx471_cur) 
.end
.HLL "nqp"
.namespace []
.sub "sigil" :subid("cuid_96_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 931
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx486_tgt
    .local int rx486_pos
    .local int rx486_off
    .local int rx486_eos
    .local int rx486_rep
    .local pmc rx486_cur
    .local pmc rx486_curclass
    .local pmc rx486_bstack
    .local pmc rx486_cstack
    (rx486_cur, rx486_tgt, rx486_pos, rx486_curclass, rx486_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx486_cur
    length rx486_eos, rx486_tgt
    eq $I19, 1, rx486_restart1453
    gt rx486_pos, rx486_eos, rx486_fail1454
    repr_get_attr_int $I11, self, rx486_curclass, "$!from"
    ne $I11, -1, rxscan487_done1460
    goto rxscan487_scan1459
  rxscan487_loop1458:
    inc rx486_pos
    gt rx486_pos, rx486_eos, rx486_fail1454
    repr_bind_attr_int rx486_cur, rx486_curclass, "$!from", rx486_pos
  rxscan487_scan1459:
    nqp_rxmark rx486_bstack, rxscan487_loop1458, rx486_pos, 0
  rxscan487_done1460:
    ge rx486_pos, rx486_eos, rx486_fail1454
    substr $S11, rx486_tgt, rx486_pos, 1
    index $I11, ucs4:"$@%&", $S11
    lt $I11, 0, rx486_fail1454
    inc rx486_pos
    rx486_cur."!cursor_pass"(rx486_pos, "sigil", 'backtrack'=>1)
    .return (rx486_cur)
  rx486_restart1453:
    repr_get_attr_obj rx486_cstack, rx486_cur, rx486_curclass, "$!cstack"
  rx486_fail1454:
    unless rx486_bstack, rx486_done1452
    pop $I19, rx486_bstack
    if_null rx486_cstack, rx486_cstack_done1457
    unless rx486_cstack, rx486_cstack_done1457
    dec $I19
    set $P11, rx486_cstack[$I19]
  rx486_cstack_done1457:
    pop rx486_rep, rx486_bstack
    pop rx486_pos, rx486_bstack
    pop $I19, rx486_bstack
    lt rx486_pos, -1, rx486_done1452
    lt rx486_pos, 0, rx486_fail1454
    eq $I19, 0, rx486_fail1454
    nqp_islist $I20, rx486_cstack
    unless $I20, rx486_jump1455
    elements $I18, rx486_bstack
    le $I18, 0, rx486_cut1456
    dec $I18
    set $I18, rx486_bstack[$I18]
  rx486_cut1456:
    assign rx486_cstack, $I18
  rx486_jump1455:
    jump $I19
  rx486_done1452:
    rx486_cur."!cursor_fail"()
    .return (rx486_cur) 
.end
.HLL "nqp"
.namespace []
.sub "twigil" :subid("cuid_97_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 933
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx488_tgt
    .local int rx488_pos
    .local int rx488_off
    .local int rx488_eos
    .local int rx488_rep
    .local pmc rx488_cur
    .local pmc rx488_curclass
    .local pmc rx488_bstack
    .local pmc rx488_cstack
    (rx488_cur, rx488_tgt, rx488_pos, rx488_curclass, rx488_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx488_cur
    length rx488_eos, rx488_tgt
    eq $I19, 1, rx488_restart1463
    gt rx488_pos, rx488_eos, rx488_fail1464
    repr_get_attr_int $I11, self, rx488_curclass, "$!from"
    ne $I11, -1, rxscan489_done1470
    goto rxscan489_scan1469
  rxscan489_loop1468:
    inc rx488_pos
    gt rx488_pos, rx488_eos, rx488_fail1464
    repr_bind_attr_int rx488_cur, rx488_curclass, "$!from", rx488_pos
  rxscan489_scan1469:
    nqp_rxmark rx488_bstack, rxscan489_loop1468, rx488_pos, 0
  rxscan489_done1470:
    ge rx488_pos, rx488_eos, rx488_fail1464
    substr $S11, rx488_tgt, rx488_pos, 1
    index $I11, ucs4:"*!?", $S11
    lt $I11, 0, rx488_fail1464
    inc rx488_pos
    rx488_cur."!cursor_pass"(rx488_pos, "twigil", 'backtrack'=>1)
    .return (rx488_cur)
  rx488_restart1463:
    repr_get_attr_obj rx488_cstack, rx488_cur, rx488_curclass, "$!cstack"
  rx488_fail1464:
    unless rx488_bstack, rx488_done1462
    pop $I19, rx488_bstack
    if_null rx488_cstack, rx488_cstack_done1467
    unless rx488_cstack, rx488_cstack_done1467
    dec $I19
    set $P11, rx488_cstack[$I19]
  rx488_cstack_done1467:
    pop rx488_rep, rx488_bstack
    pop rx488_pos, rx488_bstack
    pop $I19, rx488_bstack
    lt rx488_pos, -1, rx488_done1462
    lt rx488_pos, 0, rx488_fail1464
    eq $I19, 0, rx488_fail1464
    nqp_islist $I20, rx488_cstack
    unless $I20, rx488_jump1465
    elements $I18, rx488_bstack
    le $I18, 0, rx488_cut1466
    dec $I18
    set $I18, rx488_bstack[$I18]
  rx488_cut1466:
    assign rx488_cstack, $I18
  rx488_jump1465:
    jump $I19
  rx488_done1462:
    rx488_cur."!cursor_fail"()
    .return (rx488_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator" :subid("cuid_98_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 935
    .param pmc self 
    $P5001 = self."!protoregex"("package_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_99_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 936
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx490_tgt
    .local int rx490_pos
    .local int rx490_off
    .local int rx490_eos
    .local int rx490_rep
    .local pmc rx490_cur
    .local pmc rx490_curclass
    .local pmc rx490_bstack
    .local pmc rx490_cstack
    (rx490_cur, rx490_tgt, rx490_pos, rx490_curclass, rx490_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx490_cur
    length rx490_eos, rx490_tgt
    eq $I19, 1, rx490_restart1473
    gt rx490_pos, rx490_eos, rx490_fail1474
    repr_get_attr_int $I11, self, rx490_curclass, "$!from"
    ne $I11, -1, rxscan491_done1480
    goto rxscan491_scan1479
  rxscan491_loop1478:
    inc rx490_pos
    gt rx490_pos, rx490_eos, rx490_fail1474
    repr_bind_attr_int rx490_cur, rx490_curclass, "$!from", rx490_pos
  rxscan491_scan1479:
    nqp_rxmark rx490_bstack, rxscan491_loop1478, rx490_pos, 0
  rxscan491_done1480:
    repr_bind_attr_int rx490_cur, rx490_curclass, "$!pos", rx490_pos
    store_lex unicode:"$\x{a2}", rx490_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1481
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1482
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5007
  fallback1482:
    unless_null $P5004, vivi_4921483
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4921483:
    set $P5003, $P5004
  fallback1481:
    set $P101, $P5003
    repr_bind_attr_int rx490_cur, rx490_curclass, "$!pos", rx490_pos
    store_lex unicode:"$\x{a2}", rx490_cur
    box $P5009, "module"
    set $P102, $P5009
    nqp_rxmark rx490_bstack, rxcap493_fail1485, rx490_pos, 0
    add $I11, rx490_pos, 6
    gt $I11, rx490_eos, rx490_fail1474
    substr $S10, rx490_tgt, rx490_pos, 6
    ne $S10, ucs4:"module", rx490_fail1474
    add rx490_pos, 6
    nqp_rxpeek $I19, rx490_bstack, rxcap493_fail1485
    inc $I19
    set $I11, rx490_bstack[$I19]
    repr_bind_attr_int rx490_cur, rx490_curclass, "$!pos", rx490_pos
    $P11 = rx490_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx490_pos)
    rx490_cstack = rx490_cur."!cursor_capture"($P11, "sym")
    goto rxcap493_done1484
  rxcap493_fail1485:
    goto rx490_fail1474
  rxcap493_done1484:
    repr_bind_attr_int rx490_cur, rx490_curclass, "$!pos", rx490_pos
    $P11 = rx490_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx490_curclass, "$!pos"
    lt $I11, 0, rx490_fail1474
    nqp_rxmark rx490_bstack, rxsubrule494_pass1486, -1, 0
  rxsubrule494_pass1486:
    rx490_cstack = rx490_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx490_pos, $P11, rx490_curclass, "$!pos"
    rx490_cur."!cursor_pass"(rx490_pos, "package_declarator:sym<module>", 'backtrack'=>1)
    .return (rx490_cur)
  rx490_restart1473:
    repr_get_attr_obj rx490_cstack, rx490_cur, rx490_curclass, "$!cstack"
  rx490_fail1474:
    unless rx490_bstack, rx490_done1472
    pop $I19, rx490_bstack
    if_null rx490_cstack, rx490_cstack_done1477
    unless rx490_cstack, rx490_cstack_done1477
    dec $I19
    set $P11, rx490_cstack[$I19]
  rx490_cstack_done1477:
    pop rx490_rep, rx490_bstack
    pop rx490_pos, rx490_bstack
    pop $I19, rx490_bstack
    lt rx490_pos, -1, rx490_done1472
    lt rx490_pos, 0, rx490_fail1474
    eq $I19, 0, rx490_fail1474
    nqp_islist $I20, rx490_cstack
    unless $I20, rx490_jump1475
    elements $I18, rx490_bstack
    le $I18, 0, rx490_cut1476
    dec $I18
    set $I18, rx490_bstack[$I18]
  rx490_cut1476:
    assign rx490_cstack, $I18
  rx490_jump1475:
    jump $I19
  rx490_done1472:
    rx490_cur."!cursor_fail"()
    .return (rx490_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_100_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 941
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx495_tgt
    .local int rx495_pos
    .local int rx495_off
    .local int rx495_eos
    .local int rx495_rep
    .local pmc rx495_cur
    .local pmc rx495_curclass
    .local pmc rx495_bstack
    .local pmc rx495_cstack
    (rx495_cur, rx495_tgt, rx495_pos, rx495_curclass, rx495_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx495_cur
    length rx495_eos, rx495_tgt
    eq $I19, 1, rx495_restart1489
    gt rx495_pos, rx495_eos, rx495_fail1490
    repr_get_attr_int $I11, self, rx495_curclass, "$!from"
    ne $I11, -1, rxscan496_done1496
    goto rxscan496_scan1495
  rxscan496_loop1494:
    inc rx495_pos
    gt rx495_pos, rx495_eos, rx495_fail1490
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!from", rx495_pos
  rxscan496_scan1495:
    nqp_rxmark rx495_bstack, rxscan496_loop1494, rx495_pos, 0
  rxscan496_done1496:
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    store_lex unicode:"$\x{a2}", rx495_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1497
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1498
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5007
  fallback1498:
    unless_null $P5004, vivi_4971499
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4971499:
    set $P5003, $P5004
  fallback1497:
    set $P101, $P5003
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    store_lex unicode:"$\x{a2}", rx495_cur
    box $P5009, "knowhow"
    set $P102, $P5009
    nqp_rxmark rx495_bstack, rxcap498_fail1501, rx495_pos, 0
    add $I11, rx495_pos, 7
    gt $I11, rx495_eos, rx495_fail1490
    substr $S10, rx495_tgt, rx495_pos, 7
    ne $S10, ucs4:"knowhow", rx495_fail1490
    add rx495_pos, 7
    nqp_rxpeek $I19, rx495_bstack, rxcap498_fail1501
    inc $I19
    set $I11, rx495_bstack[$I19]
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx495_pos)
    rx495_cstack = rx495_cur."!cursor_capture"($P11, "sym")
    goto rxcap498_done1500
  rxcap498_fail1501:
    goto rx495_fail1490
  rxcap498_done1500:
    repr_bind_attr_int rx495_cur, rx495_curclass, "$!pos", rx495_pos
    $P11 = rx495_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx495_curclass, "$!pos"
    lt $I11, 0, rx495_fail1490
    nqp_rxmark rx495_bstack, rxsubrule499_pass1502, -1, 0
  rxsubrule499_pass1502:
    rx495_cstack = rx495_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx495_pos, $P11, rx495_curclass, "$!pos"
    rx495_cur."!cursor_pass"(rx495_pos, "package_declarator:sym<knowhow>", 'backtrack'=>1)
    .return (rx495_cur)
  rx495_restart1489:
    repr_get_attr_obj rx495_cstack, rx495_cur, rx495_curclass, "$!cstack"
  rx495_fail1490:
    unless rx495_bstack, rx495_done1488
    pop $I19, rx495_bstack
    if_null rx495_cstack, rx495_cstack_done1493
    unless rx495_cstack, rx495_cstack_done1493
    dec $I19
    set $P11, rx495_cstack[$I19]
  rx495_cstack_done1493:
    pop rx495_rep, rx495_bstack
    pop rx495_pos, rx495_bstack
    pop $I19, rx495_bstack
    lt rx495_pos, -1, rx495_done1488
    lt rx495_pos, 0, rx495_fail1490
    eq $I19, 0, rx495_fail1490
    nqp_islist $I20, rx495_cstack
    unless $I20, rx495_jump1491
    elements $I18, rx495_bstack
    le $I18, 0, rx495_cut1492
    dec $I18
    set $I18, rx495_bstack[$I18]
  rx495_cut1492:
    assign rx495_cstack, $I18
  rx495_jump1491:
    jump $I19
  rx495_done1488:
    rx495_cur."!cursor_fail"()
    .return (rx495_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_101_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 946
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx500_tgt
    .local int rx500_pos
    .local int rx500_off
    .local int rx500_eos
    .local int rx500_rep
    .local pmc rx500_cur
    .local pmc rx500_curclass
    .local pmc rx500_bstack
    .local pmc rx500_cstack
    (rx500_cur, rx500_tgt, rx500_pos, rx500_curclass, rx500_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx500_cur
    length rx500_eos, rx500_tgt
    eq $I19, 1, rx500_restart1505
    gt rx500_pos, rx500_eos, rx500_fail1506
    repr_get_attr_int $I11, self, rx500_curclass, "$!from"
    ne $I11, -1, rxscan501_done1512
    goto rxscan501_scan1511
  rxscan501_loop1510:
    inc rx500_pos
    gt rx500_pos, rx500_eos, rx500_fail1506
    repr_bind_attr_int rx500_cur, rx500_curclass, "$!from", rx500_pos
  rxscan501_scan1511:
    nqp_rxmark rx500_bstack, rxscan501_loop1510, rx500_pos, 0
  rxscan501_done1512:
    repr_bind_attr_int rx500_cur, rx500_curclass, "$!pos", rx500_pos
    store_lex unicode:"$\x{a2}", rx500_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1513
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1514
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5007
  fallback1514:
    unless_null $P5004, vivi_5021515
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5021515:
    set $P5003, $P5004
  fallback1513:
    set $P101, $P5003
    repr_bind_attr_int rx500_cur, rx500_curclass, "$!pos", rx500_pos
    store_lex unicode:"$\x{a2}", rx500_cur
    box $P5009, "class"
    set $P102, $P5009
    nqp_rxmark rx500_bstack, rxcap503_fail1517, rx500_pos, 0
    add $I11, rx500_pos, 5
    gt $I11, rx500_eos, rx500_fail1506
    substr $S10, rx500_tgt, rx500_pos, 5
    ne $S10, ucs4:"class", rx500_fail1506
    add rx500_pos, 5
    nqp_rxpeek $I19, rx500_bstack, rxcap503_fail1517
    inc $I19
    set $I11, rx500_bstack[$I19]
    repr_bind_attr_int rx500_cur, rx500_curclass, "$!pos", rx500_pos
    $P11 = rx500_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx500_pos)
    rx500_cstack = rx500_cur."!cursor_capture"($P11, "sym")
    goto rxcap503_done1516
  rxcap503_fail1517:
    goto rx500_fail1506
  rxcap503_done1516:
    repr_bind_attr_int rx500_cur, rx500_curclass, "$!pos", rx500_pos
    $P11 = rx500_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx500_curclass, "$!pos"
    lt $I11, 0, rx500_fail1506
    nqp_rxmark rx500_bstack, rxsubrule504_pass1518, -1, 0
  rxsubrule504_pass1518:
    rx500_cstack = rx500_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx500_pos, $P11, rx500_curclass, "$!pos"
    rx500_cur."!cursor_pass"(rx500_pos, "package_declarator:sym<class>", 'backtrack'=>1)
    .return (rx500_cur)
  rx500_restart1505:
    repr_get_attr_obj rx500_cstack, rx500_cur, rx500_curclass, "$!cstack"
  rx500_fail1506:
    unless rx500_bstack, rx500_done1504
    pop $I19, rx500_bstack
    if_null rx500_cstack, rx500_cstack_done1509
    unless rx500_cstack, rx500_cstack_done1509
    dec $I19
    set $P11, rx500_cstack[$I19]
  rx500_cstack_done1509:
    pop rx500_rep, rx500_bstack
    pop rx500_pos, rx500_bstack
    pop $I19, rx500_bstack
    lt rx500_pos, -1, rx500_done1504
    lt rx500_pos, 0, rx500_fail1506
    eq $I19, 0, rx500_fail1506
    nqp_islist $I20, rx500_cstack
    unless $I20, rx500_jump1507
    elements $I18, rx500_bstack
    le $I18, 0, rx500_cut1508
    dec $I18
    set $I18, rx500_bstack[$I18]
  rx500_cut1508:
    assign rx500_cstack, $I18
  rx500_jump1507:
    jump $I19
  rx500_done1504:
    rx500_cur."!cursor_fail"()
    .return (rx500_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_102_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 951
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx505_tgt
    .local int rx505_pos
    .local int rx505_off
    .local int rx505_eos
    .local int rx505_rep
    .local pmc rx505_cur
    .local pmc rx505_curclass
    .local pmc rx505_bstack
    .local pmc rx505_cstack
    (rx505_cur, rx505_tgt, rx505_pos, rx505_curclass, rx505_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx505_cur
    length rx505_eos, rx505_tgt
    eq $I19, 1, rx505_restart1521
    gt rx505_pos, rx505_eos, rx505_fail1522
    repr_get_attr_int $I11, self, rx505_curclass, "$!from"
    ne $I11, -1, rxscan506_done1528
    goto rxscan506_scan1527
  rxscan506_loop1526:
    inc rx505_pos
    gt rx505_pos, rx505_eos, rx505_fail1522
    repr_bind_attr_int rx505_cur, rx505_curclass, "$!from", rx505_pos
  rxscan506_scan1527:
    nqp_rxmark rx505_bstack, rxscan506_loop1526, rx505_pos, 0
  rxscan506_done1528:
    repr_bind_attr_int rx505_cur, rx505_curclass, "$!pos", rx505_pos
    store_lex unicode:"$\x{a2}", rx505_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1529
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1530
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5007
  fallback1530:
    unless_null $P5004, vivi_5071531
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5071531:
    set $P5003, $P5004
  fallback1529:
    set $P101, $P5003
    repr_bind_attr_int rx505_cur, rx505_curclass, "$!pos", rx505_pos
    store_lex unicode:"$\x{a2}", rx505_cur
    box $P5009, "grammar"
    set $P102, $P5009
    nqp_rxmark rx505_bstack, rxcap508_fail1533, rx505_pos, 0
    add $I11, rx505_pos, 7
    gt $I11, rx505_eos, rx505_fail1522
    substr $S10, rx505_tgt, rx505_pos, 7
    ne $S10, ucs4:"grammar", rx505_fail1522
    add rx505_pos, 7
    nqp_rxpeek $I19, rx505_bstack, rxcap508_fail1533
    inc $I19
    set $I11, rx505_bstack[$I19]
    repr_bind_attr_int rx505_cur, rx505_curclass, "$!pos", rx505_pos
    $P11 = rx505_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx505_pos)
    rx505_cstack = rx505_cur."!cursor_capture"($P11, "sym")
    goto rxcap508_done1532
  rxcap508_fail1533:
    goto rx505_fail1522
  rxcap508_done1532:
    repr_bind_attr_int rx505_cur, rx505_curclass, "$!pos", rx505_pos
    $P11 = rx505_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx505_curclass, "$!pos"
    lt $I11, 0, rx505_fail1522
    nqp_rxmark rx505_bstack, rxsubrule509_pass1534, -1, 0
  rxsubrule509_pass1534:
    rx505_cstack = rx505_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx505_pos, $P11, rx505_curclass, "$!pos"
    rx505_cur."!cursor_pass"(rx505_pos, "package_declarator:sym<grammar>", 'backtrack'=>1)
    .return (rx505_cur)
  rx505_restart1521:
    repr_get_attr_obj rx505_cstack, rx505_cur, rx505_curclass, "$!cstack"
  rx505_fail1522:
    unless rx505_bstack, rx505_done1520
    pop $I19, rx505_bstack
    if_null rx505_cstack, rx505_cstack_done1525
    unless rx505_cstack, rx505_cstack_done1525
    dec $I19
    set $P11, rx505_cstack[$I19]
  rx505_cstack_done1525:
    pop rx505_rep, rx505_bstack
    pop rx505_pos, rx505_bstack
    pop $I19, rx505_bstack
    lt rx505_pos, -1, rx505_done1520
    lt rx505_pos, 0, rx505_fail1522
    eq $I19, 0, rx505_fail1522
    nqp_islist $I20, rx505_cstack
    unless $I20, rx505_jump1523
    elements $I18, rx505_bstack
    le $I18, 0, rx505_cut1524
    dec $I18
    set $I18, rx505_bstack[$I18]
  rx505_cut1524:
    assign rx505_cstack, $I18
  rx505_jump1523:
    jump $I19
  rx505_done1520:
    rx505_cur."!cursor_fail"()
    .return (rx505_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_103_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 956
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx510_tgt
    .local int rx510_pos
    .local int rx510_off
    .local int rx510_eos
    .local int rx510_rep
    .local pmc rx510_cur
    .local pmc rx510_curclass
    .local pmc rx510_bstack
    .local pmc rx510_cstack
    (rx510_cur, rx510_tgt, rx510_pos, rx510_curclass, rx510_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx510_cur
    length rx510_eos, rx510_tgt
    eq $I19, 1, rx510_restart1537
    gt rx510_pos, rx510_eos, rx510_fail1538
    repr_get_attr_int $I11, self, rx510_curclass, "$!from"
    ne $I11, -1, rxscan511_done1544
    goto rxscan511_scan1543
  rxscan511_loop1542:
    inc rx510_pos
    gt rx510_pos, rx510_eos, rx510_fail1538
    repr_bind_attr_int rx510_cur, rx510_curclass, "$!from", rx510_pos
  rxscan511_scan1543:
    nqp_rxmark rx510_bstack, rxscan511_loop1542, rx510_pos, 0
  rxscan511_done1544:
    repr_bind_attr_int rx510_cur, rx510_curclass, "$!pos", rx510_pos
    store_lex unicode:"$\x{a2}", rx510_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1545
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1546
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5007
  fallback1546:
    unless_null $P5004, vivi_5121547
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5121547:
    set $P5003, $P5004
  fallback1545:
    set $P101, $P5003
    repr_bind_attr_int rx510_cur, rx510_curclass, "$!pos", rx510_pos
    store_lex unicode:"$\x{a2}", rx510_cur
    box $P5009, "role"
    set $P102, $P5009
    nqp_rxmark rx510_bstack, rxcap513_fail1549, rx510_pos, 0
    add $I11, rx510_pos, 4
    gt $I11, rx510_eos, rx510_fail1538
    substr $S10, rx510_tgt, rx510_pos, 4
    ne $S10, ucs4:"role", rx510_fail1538
    add rx510_pos, 4
    nqp_rxpeek $I19, rx510_bstack, rxcap513_fail1549
    inc $I19
    set $I11, rx510_bstack[$I19]
    repr_bind_attr_int rx510_cur, rx510_curclass, "$!pos", rx510_pos
    $P11 = rx510_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx510_pos)
    rx510_cstack = rx510_cur."!cursor_capture"($P11, "sym")
    goto rxcap513_done1548
  rxcap513_fail1549:
    goto rx510_fail1538
  rxcap513_done1548:
    repr_bind_attr_int rx510_cur, rx510_curclass, "$!pos", rx510_pos
    $P11 = rx510_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx510_curclass, "$!pos"
    lt $I11, 0, rx510_fail1538
    nqp_rxmark rx510_bstack, rxsubrule514_pass1550, -1, 0
  rxsubrule514_pass1550:
    rx510_cstack = rx510_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx510_pos, $P11, rx510_curclass, "$!pos"
    rx510_cur."!cursor_pass"(rx510_pos, "package_declarator:sym<role>", 'backtrack'=>1)
    .return (rx510_cur)
  rx510_restart1537:
    repr_get_attr_obj rx510_cstack, rx510_cur, rx510_curclass, "$!cstack"
  rx510_fail1538:
    unless rx510_bstack, rx510_done1536
    pop $I19, rx510_bstack
    if_null rx510_cstack, rx510_cstack_done1541
    unless rx510_cstack, rx510_cstack_done1541
    dec $I19
    set $P11, rx510_cstack[$I19]
  rx510_cstack_done1541:
    pop rx510_rep, rx510_bstack
    pop rx510_pos, rx510_bstack
    pop $I19, rx510_bstack
    lt rx510_pos, -1, rx510_done1536
    lt rx510_pos, 0, rx510_fail1538
    eq $I19, 0, rx510_fail1538
    nqp_islist $I20, rx510_cstack
    unless $I20, rx510_jump1539
    elements $I18, rx510_bstack
    le $I18, 0, rx510_cut1540
    dec $I18
    set $I18, rx510_bstack[$I18]
  rx510_cut1540:
    assign rx510_cstack, $I18
  rx510_jump1539:
    jump $I19
  rx510_done1536:
    rx510_cur."!cursor_fail"()
    .return (rx510_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_104_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 961
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx515_tgt
    .local int rx515_pos
    .local int rx515_off
    .local int rx515_eos
    .local int rx515_rep
    .local pmc rx515_cur
    .local pmc rx515_curclass
    .local pmc rx515_bstack
    .local pmc rx515_cstack
    (rx515_cur, rx515_tgt, rx515_pos, rx515_curclass, rx515_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx515_cur
    length rx515_eos, rx515_tgt
    eq $I19, 1, rx515_restart1553
    gt rx515_pos, rx515_eos, rx515_fail1554
    repr_get_attr_int $I11, self, rx515_curclass, "$!from"
    ne $I11, -1, rxscan516_done1560
    goto rxscan516_scan1559
  rxscan516_loop1558:
    inc rx515_pos
    gt rx515_pos, rx515_eos, rx515_fail1554
    repr_bind_attr_int rx515_cur, rx515_curclass, "$!from", rx515_pos
  rxscan516_scan1559:
    nqp_rxmark rx515_bstack, rxscan516_loop1558, rx515_pos, 0
  rxscan516_done1560:
    repr_bind_attr_int rx515_cur, rx515_curclass, "$!pos", rx515_pos
    store_lex unicode:"$\x{a2}", rx515_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1561
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1562
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5007
  fallback1562:
    unless_null $P5004, vivi_5171563
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5171563:
    set $P5003, $P5004
  fallback1561:
    set $P101, $P5003
    repr_bind_attr_int rx515_cur, rx515_curclass, "$!pos", rx515_pos
    store_lex unicode:"$\x{a2}", rx515_cur
    box $P5009, "native"
    set $P102, $P5009
    nqp_rxmark rx515_bstack, rxcap518_fail1565, rx515_pos, 0
    add $I11, rx515_pos, 6
    gt $I11, rx515_eos, rx515_fail1554
    substr $S10, rx515_tgt, rx515_pos, 6
    ne $S10, ucs4:"native", rx515_fail1554
    add rx515_pos, 6
    nqp_rxpeek $I19, rx515_bstack, rxcap518_fail1565
    inc $I19
    set $I11, rx515_bstack[$I19]
    repr_bind_attr_int rx515_cur, rx515_curclass, "$!pos", rx515_pos
    $P11 = rx515_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx515_pos)
    rx515_cstack = rx515_cur."!cursor_capture"($P11, "sym")
    goto rxcap518_done1564
  rxcap518_fail1565:
    goto rx515_fail1554
  rxcap518_done1564:
    repr_bind_attr_int rx515_cur, rx515_curclass, "$!pos", rx515_pos
    $P11 = rx515_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx515_curclass, "$!pos"
    lt $I11, 0, rx515_fail1554
    nqp_rxmark rx515_bstack, rxsubrule519_pass1566, -1, 0
  rxsubrule519_pass1566:
    rx515_cstack = rx515_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx515_pos, $P11, rx515_curclass, "$!pos"
    rx515_cur."!cursor_pass"(rx515_pos, "package_declarator:sym<native>", 'backtrack'=>1)
    .return (rx515_cur)
  rx515_restart1553:
    repr_get_attr_obj rx515_cstack, rx515_cur, rx515_curclass, "$!cstack"
  rx515_fail1554:
    unless rx515_bstack, rx515_done1552
    pop $I19, rx515_bstack
    if_null rx515_cstack, rx515_cstack_done1557
    unless rx515_cstack, rx515_cstack_done1557
    dec $I19
    set $P11, rx515_cstack[$I19]
  rx515_cstack_done1557:
    pop rx515_rep, rx515_bstack
    pop rx515_pos, rx515_bstack
    pop $I19, rx515_bstack
    lt rx515_pos, -1, rx515_done1552
    lt rx515_pos, 0, rx515_fail1554
    eq $I19, 0, rx515_fail1554
    nqp_islist $I20, rx515_cstack
    unless $I20, rx515_jump1555
    elements $I18, rx515_bstack
    le $I18, 0, rx515_cut1556
    dec $I18
    set $I18, rx515_bstack[$I18]
  rx515_cut1556:
    assign rx515_cstack, $I18
  rx515_jump1555:
    jump $I19
  rx515_done1552:
    rx515_cur."!cursor_fail"()
    .return (rx515_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_105_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 966
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx520_tgt
    .local int rx520_pos
    .local int rx520_off
    .local int rx520_eos
    .local int rx520_rep
    .local pmc rx520_cur
    .local pmc rx520_curclass
    .local pmc rx520_bstack
    .local pmc rx520_cstack
    (rx520_cur, rx520_tgt, rx520_pos, rx520_curclass, rx520_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx520_cur
    length rx520_eos, rx520_tgt
    eq $I19, 1, rx520_restart1569
    gt rx520_pos, rx520_eos, rx520_fail1570
    repr_get_attr_int $I11, self, rx520_curclass, "$!from"
    ne $I11, -1, rxscan521_done1576
    goto rxscan521_scan1575
  rxscan521_loop1574:
    inc rx520_pos
    gt rx520_pos, rx520_eos, rx520_fail1570
    repr_bind_attr_int rx520_cur, rx520_curclass, "$!from", rx520_pos
  rxscan521_scan1575:
    nqp_rxmark rx520_bstack, rxscan521_loop1574, rx520_pos, 0
  rxscan521_done1576:
    repr_bind_attr_int rx520_cur, rx520_curclass, "$!pos", rx520_pos
    store_lex unicode:"$\x{a2}", rx520_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1577
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1578
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5007
  fallback1578:
    unless_null $P5004, vivi_5221579
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5221579:
    set $P5003, $P5004
  fallback1577:
    set $P101, $P5003
    repr_bind_attr_int rx520_cur, rx520_curclass, "$!pos", rx520_pos
    store_lex unicode:"$\x{a2}", rx520_cur
    box $P5009, "stub"
    set $P102, $P5009
    nqp_rxmark rx520_bstack, rxcap523_fail1581, rx520_pos, 0
    add $I11, rx520_pos, 4
    gt $I11, rx520_eos, rx520_fail1570
    substr $S10, rx520_tgt, rx520_pos, 4
    ne $S10, ucs4:"stub", rx520_fail1570
    add rx520_pos, 4
    nqp_rxpeek $I19, rx520_bstack, rxcap523_fail1581
    inc $I19
    set $I11, rx520_bstack[$I19]
    repr_bind_attr_int rx520_cur, rx520_curclass, "$!pos", rx520_pos
    $P11 = rx520_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx520_pos)
    rx520_cstack = rx520_cur."!cursor_capture"($P11, "sym")
    goto rxcap523_done1580
  rxcap523_fail1581:
    goto rx520_fail1570
  rxcap523_done1580:
    repr_bind_attr_int rx520_cur, rx520_curclass, "$!pos", rx520_pos
    $P11 = rx520_cur."ws"()
    repr_get_attr_int $I11, $P11, rx520_curclass, "$!pos"
    lt $I11, 0, rx520_fail1570
    repr_get_attr_int rx520_pos, $P11, rx520_curclass, "$!pos"
    repr_bind_attr_int rx520_cur, rx520_curclass, "$!pos", rx520_pos
    $P11 = rx520_cur."name"()
    repr_get_attr_int $I11, $P11, rx520_curclass, "$!pos"
    lt $I11, 0, rx520_fail1570
    nqp_rxmark rx520_bstack, rxsubrule525_pass1583, -1, 0
  rxsubrule525_pass1583:
    rx520_cstack = rx520_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx520_pos, $P11, rx520_curclass, "$!pos"
    repr_bind_attr_int rx520_cur, rx520_curclass, "$!pos", rx520_pos
    $P11 = rx520_cur."ws"()
    repr_get_attr_int $I11, $P11, rx520_curclass, "$!pos"
    lt $I11, 0, rx520_fail1570
    repr_get_attr_int rx520_pos, $P11, rx520_curclass, "$!pos"
    add $I11, rx520_pos, 9
    gt $I11, rx520_eos, rx520_fail1570
    substr $S10, rx520_tgt, rx520_pos, 9
    ne $S10, ucs4:"metaclass", rx520_fail1570
    add rx520_pos, 9
    repr_bind_attr_int rx520_cur, rx520_curclass, "$!pos", rx520_pos
    $P11 = rx520_cur."ws"()
    repr_get_attr_int $I11, $P11, rx520_curclass, "$!pos"
    lt $I11, 0, rx520_fail1570
    repr_get_attr_int rx520_pos, $P11, rx520_curclass, "$!pos"
    repr_bind_attr_int rx520_cur, rx520_curclass, "$!pos", rx520_pos
    $P11 = rx520_cur."name"()
    repr_get_attr_int $I11, $P11, rx520_curclass, "$!pos"
    lt $I11, 0, rx520_fail1570
    nqp_rxmark rx520_bstack, rxsubrule528_pass1586, -1, 0
  rxsubrule528_pass1586:
    rx520_cstack = rx520_cur."!cursor_capture"($P11, "metaclass")
    repr_get_attr_int rx520_pos, $P11, rx520_curclass, "$!pos"
    repr_bind_attr_int rx520_cur, rx520_curclass, "$!pos", rx520_pos
    $P11 = rx520_cur."ws"()
    repr_get_attr_int $I11, $P11, rx520_curclass, "$!pos"
    lt $I11, 0, rx520_fail1570
    repr_get_attr_int rx520_pos, $P11, rx520_curclass, "$!pos"
    add $I11, rx520_pos, 1
    gt $I11, rx520_eos, rx520_fail1570
    substr $S10, rx520_tgt, rx520_pos, 1
    ne $S10, ucs4:"{", rx520_fail1570
    add rx520_pos, 1
    repr_bind_attr_int rx520_cur, rx520_curclass, "$!pos", rx520_pos
    $P11 = rx520_cur."ws"()
    repr_get_attr_int $I11, $P11, rx520_curclass, "$!pos"
    lt $I11, 0, rx520_fail1570
    repr_get_attr_int rx520_pos, $P11, rx520_curclass, "$!pos"
    add $I11, rx520_pos, 3
    gt $I11, rx520_eos, rx520_fail1570
    substr $S10, rx520_tgt, rx520_pos, 3
    ne $S10, ucs4:"...", rx520_fail1570
    add rx520_pos, 3
    repr_bind_attr_int rx520_cur, rx520_curclass, "$!pos", rx520_pos
    $P11 = rx520_cur."ws"()
    repr_get_attr_int $I11, $P11, rx520_curclass, "$!pos"
    lt $I11, 0, rx520_fail1570
    repr_get_attr_int rx520_pos, $P11, rx520_curclass, "$!pos"
    add $I11, rx520_pos, 1
    gt $I11, rx520_eos, rx520_fail1570
    substr $S10, rx520_tgt, rx520_pos, 1
    ne $S10, ucs4:"}", rx520_fail1570
    add rx520_pos, 1
    repr_bind_attr_int rx520_cur, rx520_curclass, "$!pos", rx520_pos
    $P11 = rx520_cur."ws"()
    repr_get_attr_int $I11, $P11, rx520_curclass, "$!pos"
    lt $I11, 0, rx520_fail1570
    repr_get_attr_int rx520_pos, $P11, rx520_curclass, "$!pos"
    rx520_cur."!cursor_pass"(rx520_pos, "package_declarator:sym<stub>", 'backtrack'=>1)
    .return (rx520_cur)
  rx520_restart1569:
    repr_get_attr_obj rx520_cstack, rx520_cur, rx520_curclass, "$!cstack"
  rx520_fail1570:
    unless rx520_bstack, rx520_done1568
    pop $I19, rx520_bstack
    if_null rx520_cstack, rx520_cstack_done1573
    unless rx520_cstack, rx520_cstack_done1573
    dec $I19
    set $P11, rx520_cstack[$I19]
  rx520_cstack_done1573:
    pop rx520_rep, rx520_bstack
    pop rx520_pos, rx520_bstack
    pop $I19, rx520_bstack
    lt rx520_pos, -1, rx520_done1568
    lt rx520_pos, 0, rx520_fail1570
    eq $I19, 0, rx520_fail1570
    nqp_islist $I20, rx520_cstack
    unless $I20, rx520_jump1571
    elements $I18, rx520_bstack
    le $I18, 0, rx520_cut1572
    dec $I18
    set $I18, rx520_bstack[$I18]
  rx520_cut1572:
    assign rx520_cstack, $I18
  rx520_jump1571:
    jump $I19
  rx520_done1568:
    rx520_cur."!cursor_fail"()
    .return (rx520_cur) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_106_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 974
    .param pmc _lex_param_0 
    .const 'Sub' $P5021 = 'cuid_395_1360256386.79' 
    capture_lex $P5021 
    .const 'Sub' $P5021 = 'cuid_396_1360256386.79' 
    capture_lex $P5021 
    .lex "$*PACKAGE", $P101 
    .lex "$OUTER", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx533_tgt
    .local int rx533_pos
    .local int rx533_off
    .local int rx533_eos
    .local int rx533_rep
    .local pmc rx533_cur
    .local pmc rx533_curclass
    .local pmc rx533_bstack
    .local pmc rx533_cstack
    (rx533_cur, rx533_tgt, rx533_pos, rx533_curclass, rx533_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx533_cur
    length rx533_eos, rx533_tgt
    eq $I19, 1, rx533_restart1593
    gt rx533_pos, rx533_eos, rx533_fail1594
    repr_get_attr_int $I11, self, rx533_curclass, "$!from"
    ne $I11, -1, rxscan534_done1600
    goto rxscan534_scan1599
  rxscan534_loop1598:
    inc rx533_pos
    gt rx533_pos, rx533_eos, rx533_fail1594
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!from", rx533_pos
  rxscan534_scan1599:
    nqp_rxmark rx533_bstack, rxscan534_loop1598, rx533_pos, 0
  rxscan534_done1600:
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    store_lex unicode:"$\x{a2}", rx533_cur
    unless_null $P101, fallback1602
    nqp_get_sc_object $P5005, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$PACKAGE"]
    unless_null $P5003, fallback1603
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5006
  fallback1603:
    unless_null $P5003, vivi_5361604
    die "Contextual $*PACKAGE not found"
    box $P5007, "Contextual $*PACKAGE not found"
    set $P5003, $P5007
  vivi_5361604:
    set $P101, $P5003
  fallback1602:
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    store_lex unicode:"$\x{a2}", rx533_cur
.annotate 'line', 976
    find_dynamic_lex $P5008, "$*W"
    unless_null $P5008, fallback1606
    nqp_get_sc_object $P5011, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$W"]
    unless_null $P5009, fallback1607
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5012
  fallback1607:
    unless_null $P5009, vivi_5381608
    die "Contextual $*W not found"
    box $P5013, "Contextual $*W not found"
    set $P5009, $P5013
  vivi_5381608:
    set $P5008, $P5009
  fallback1606:
    $P5014 = $P5008."cur_lexpad"()
    set $P102, $P5014
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."name"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    nqp_rxmark rx533_bstack, rxsubrule540_pass1610, -1, 0
  rxsubrule540_pass1610:
    rx533_cstack = rx533_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    nqp_rxmark rx533_bstack, rxquantr544_done1615, rx533_pos, 0
  rxquantr544_loop1614:
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    store_lex unicode:"$\x{a2}", rx533_cur
    $P5015 = $P103."MATCH"()
    set $P104, $P5015
    .const 'Sub' $P5016 = 'cuid_395_1360256386.79' 
    capture_lex $P5016
    $P5017 = $P5016()
    unless $P5017, rx533_fail1594
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    add $I11, rx533_pos, 1
    gt $I11, rx533_eos, rx533_fail1594
    substr $S10, rx533_tgt, rx533_pos, 1
    ne $S10, ucs4:"[", rx533_fail1594
    add rx533_pos, 1
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."role_params"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    nqp_rxmark rx533_bstack, rxsubrule549_pass1622, -1, 0
  rxsubrule549_pass1622:
    rx533_cstack = rx533_cur."!cursor_capture"($P11, "role_params")
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
  alt550_01624:
    nqp_rxmark rx533_bstack, alt550_11625, rx533_pos, 0
    add $I11, rx533_pos, 1
    gt $I11, rx533_eos, rx533_fail1594
    substr $S10, rx533_tgt, rx533_pos, 1
    ne $S10, ucs4:"]", rx533_fail1594
    add rx533_pos, 1
    goto alt550_end1623
  alt550_11625:
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."FAILGOAL"("']'")
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    goto rxsubrule551_pass1626
  rxsubrule551_back1627:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
  rxsubrule551_pass1626:
    rx533_cstack = rx533_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule551_back1627
    push rx533_bstack, $I11
    push rx533_bstack, 0
    push rx533_bstack, rx533_pos
    elements $I11, rx533_cstack
    push rx533_bstack, $I11
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
  alt550_end1623:
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    nqp_rxpeek $I19, rx533_bstack, rxquantr544_done1615
    inc $I19
    inc $I19
    set rx533_rep, rx533_bstack[$I19]
    nqp_rxcommit rx533_bstack, rxquantr544_done1615
    inc rx533_rep
  rxquantr544_done1615:
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    nqp_rxmark rx533_bstack, rxquantr554_done1631, rx533_pos, 0
  rxquantr554_loop1630:
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    add $I11, rx533_pos, 2
    gt $I11, rx533_eos, rx533_fail1594
    substr $S10, rx533_tgt, rx533_pos, 2
    ne $S10, ucs4:"is", rx533_fail1594
    add rx533_pos, 2
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    add $I11, rx533_pos, 5
    gt $I11, rx533_eos, rx533_fail1594
    substr $S10, rx533_tgt, rx533_pos, 5
    ne $S10, ucs4:"repr(", rx533_fail1594
    add rx533_pos, 5
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    nqp_rxmark rx533_bstack, rxsubrule558_pass1635, -1, 0
  rxsubrule558_pass1635:
    rx533_cstack = rx533_cur."!cursor_capture"($P11, "repr")
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    add $I11, rx533_pos, 1
    gt $I11, rx533_eos, rx533_fail1594
    substr $S10, rx533_tgt, rx533_pos, 1
    ne $S10, ucs4:")", rx533_fail1594
    add rx533_pos, 1
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    nqp_rxpeek $I19, rx533_bstack, rxquantr554_done1631
    inc $I19
    inc $I19
    set rx533_rep, rx533_bstack[$I19]
    nqp_rxcommit rx533_bstack, rxquantr554_done1631
    inc rx533_rep
  rxquantr554_done1631:
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    store_lex unicode:"$\x{a2}", rx533_cur
    $P5018 = $P103."MATCH"()
    set $P104, $P5018
    .const 'Sub' $P5019 = 'cuid_396_1360256386.79' 
    capture_lex $P5019
    $P5020 = $P5019()
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    nqp_rxmark rx533_bstack, rxquantr583_done1725, rx533_pos, 0
  rxquantr583_loop1724:
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    nqp_rxmark rx533_bstack, rxcap585_fail1728, rx533_pos, 0
    add $I11, rx533_pos, 9
    gt $I11, rx533_eos, rx533_fail1594
    substr $S10, rx533_tgt, rx533_pos, 9
    ne $S10, ucs4:"is export", rx533_fail1594
    add rx533_pos, 9
    nqp_rxpeek $I19, rx533_bstack, rxcap585_fail1728
    inc $I19
    set $I11, rx533_bstack[$I19]
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx533_pos)
    rx533_cstack = rx533_cur."!cursor_capture"($P11, "export")
    goto rxcap585_done1727
  rxcap585_fail1728:
    goto rx533_fail1594
  rxcap585_done1727:
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    nqp_rxpeek $I19, rx533_bstack, rxquantr583_done1725
    inc $I19
    inc $I19
    set rx533_rep, rx533_bstack[$I19]
    nqp_rxcommit rx533_bstack, rxquantr583_done1725
    inc rx533_rep
  rxquantr583_done1725:
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    nqp_rxmark rx533_bstack, rxquantr588_done1732, rx533_pos, 0
  rxquantr588_loop1731:
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    add $I11, rx533_pos, 2
    gt $I11, rx533_eos, rx533_fail1594
    substr $S10, rx533_tgt, rx533_pos, 2
    ne $S10, ucs4:"is", rx533_fail1594
    add rx533_pos, 2
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."name"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    nqp_rxmark rx533_bstack, rxsubrule591_pass1735, -1, 0
  rxsubrule591_pass1735:
    rx533_cstack = rx533_cur."!cursor_capture"($P11, "parent")
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    nqp_rxpeek $I19, rx533_bstack, rxquantr588_done1732
    inc $I19
    inc $I19
    set rx533_rep, rx533_bstack[$I19]
    nqp_rxcommit rx533_bstack, rxquantr588_done1732
    inc rx533_rep
  rxquantr588_done1732:
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    nqp_rxmark rx533_bstack, rxquantr594_done1739, rx533_pos, 0
  rxquantr594_loop1738:
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    add $I11, rx533_pos, 4
    gt $I11, rx533_eos, rx533_fail1594
    substr $S10, rx533_tgt, rx533_pos, 4
    ne $S10, ucs4:"does", rx533_fail1594
    add rx533_pos, 4
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."name"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    nqp_rxmark rx533_bstack, rxsubrule597_pass1742, -1, 0
  rxsubrule597_pass1742:
    rx533_cstack = rx533_cur."!cursor_capture"($P11, "role")
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    nqp_rxpeek $I19, rx533_bstack, rxquantr594_done1739
    inc $I19
    inc $I19
    set rx533_rep, rx533_bstack[$I19]
    nqp_rxcommit rx533_bstack, rxquantr594_done1739
    inc rx533_rep
    nqp_rxmark rx533_bstack, rxquantr594_done1739, rx533_pos, rx533_rep
    goto rxquantr594_loop1738
  rxquantr594_done1739:
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
  alt600_01746:
    nqp_rxmark rx533_bstack, alt600_11761, rx533_pos, 0
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    add $I11, rx533_pos, 1
    gt $I11, rx533_eos, rx533_fail1594
    substr $S10, rx533_tgt, rx533_pos, 1
    ne $S10, ucs4:";", rx533_fail1594
    add rx533_pos, 1
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    nqp_rxmark rx533_bstack, rxsubrule603_pass1749, -1, 0
  rxsubrule603_pass1749:
    rx533_cstack = rx533_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
  alt605_01752:
    nqp_rxmark rx533_bstack, alt605_11756, rx533_pos, 0
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    lt rx533_pos, rx533_eos, rx533_fail1594
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    goto alt605_end1751
  alt605_11756:
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
  alt605_end1751:
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    goto alt600_end1745
  alt600_11761:
    nqp_rxmark rx533_bstack, alt600_21766, rx533_pos, 0
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    ge rx533_pos, rx533_eos, rx533_fail1594
    substr $S11, rx533_tgt, rx533_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx533_fail1594
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    nqp_rxmark rx533_bstack, rxsubrule615_pass1764, -1, 0
  rxsubrule615_pass1764:
    rx533_cstack = rx533_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    goto alt600_end1745
  alt600_21766:
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."panic"("Malformed package declaration")
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
  alt600_end1745:
    repr_bind_attr_int rx533_cur, rx533_curclass, "$!pos", rx533_pos
    $P11 = rx533_cur."ws"()
    repr_get_attr_int $I11, $P11, rx533_curclass, "$!pos"
    lt $I11, 0, rx533_fail1594
    repr_get_attr_int rx533_pos, $P11, rx533_curclass, "$!pos"
    rx533_cur."!cursor_pass"(rx533_pos, "package_def", 'backtrack'=>1)
    .return (rx533_cur)
  rx533_restart1593:
    repr_get_attr_obj rx533_cstack, rx533_cur, rx533_curclass, "$!cstack"
  rx533_fail1594:
    unless rx533_bstack, rx533_done1592
    pop $I19, rx533_bstack
    if_null rx533_cstack, rx533_cstack_done1597
    unless rx533_cstack, rx533_cstack_done1597
    dec $I19
    set $P11, rx533_cstack[$I19]
  rx533_cstack_done1597:
    pop rx533_rep, rx533_bstack
    pop rx533_pos, rx533_bstack
    pop $I19, rx533_bstack
    lt rx533_pos, -1, rx533_done1592
    lt rx533_pos, 0, rx533_fail1594
    eq $I19, 0, rx533_fail1594
    nqp_islist $I20, rx533_cstack
    unless $I20, rx533_jump1595
    elements $I18, rx533_bstack
    le $I18, 0, rx533_cut1596
    dec $I18
    set $I18, rx533_bstack[$I18]
  rx533_cut1596:
    assign rx533_cstack, $I18
  rx533_jump1595:
    jump $I19
  rx533_done1592:
    rx533_cur."!cursor_fail"()
    .return (rx533_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_395_1360256386.79") :anon :lex :outer("cuid_106_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 980

    find_dynamic_lex $P5001, "$*PKGDECL"
    unless_null $P5001, fallback1617
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$PKGDECL"]
    unless_null $P5002, fallback1618
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5005
  fallback1618:
    unless_null $P5002, vivi_5461619
    die "Contextual $*PKGDECL not found"
    box $P5006, "Contextual $*PKGDECL not found"
    set $P5002, $P5006
  vivi_5461619:
    set $P5001, $P5002
  fallback1617:
    set $S5001, $P5001
    iseq $I5001, $S5001, "role"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_396_1360256386.79") :anon :lex :outer("cuid_106_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 983
    .lex "%args", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback1639
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5004
  fallback1639:
    set $P5002, $P5003["name"]
    unless_null $P5002, fallback1640
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5005
  fallback1640:
    set $S5001, $P5002
    box $P5006, $S5001
    set $P101["name"], $P5006
    find_lex $P5008, "$/"
    unless_null $P5008, fallback1643
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5009
  fallback1643:
    set $P5007, $P5008["repr"]
    unless_null $P5007, fallback1644
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5010
  fallback1644:
    unless $P5007 goto if562_end1642 
.annotate 'line', 988
    find_lex $P5016, "$/"
    unless_null $P5016, fallback1645
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5016, $P5017
  fallback1645:
    set $P5015, $P5016["repr"]
    unless_null $P5015, fallback1646
    nqp_get_sc_object $P5018, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5015, $P5018
  fallback1646:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback1647
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5014, $P5019
  fallback1647:
    set $P5013, $P5014["quote_delimited"]
    unless_null $P5013, fallback1648
    nqp_get_sc_object $P5020, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5013, $P5020
  fallback1648:
    set $P5012, $P5013["quote_atom"]
    unless_null $P5012, fallback1649
    nqp_get_sc_object $P5021, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5012, $P5021
  fallback1649:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback1650
    nqp_get_sc_object $P5022, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5022
  fallback1650:
    set $S5002, $P5011
    box $P5023, $S5002
    set $P101["repr"], $P5023
  if562_end1642:
.annotate 'line', 991
    find_dynamic_lex $P5024, "$*W"
    unless_null $P5024, fallback1651
    nqp_get_sc_object $P5027, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["$W"]
    unless_null $P5025, fallback1652
    nqp_get_sc_object $P5028, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5025, $P5028
  fallback1652:
    unless_null $P5025, vivi_5631653
    die "Contextual $*W not found"
    box $P5029, "Contextual $*W not found"
    set $P5025, $P5029
  vivi_5631653:
    set $P5024, $P5025
  fallback1651:
    find_dynamic_lex $P5031, "%*HOW"
    unless_null $P5031, fallback1654
    nqp_get_sc_object $P5034, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%HOW"]
    unless_null $P5032, fallback1655
    nqp_get_sc_object $P5036, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%HOW"], $P5037
    set $P5032, $P5037
  fallback1655:
    unless_null $P5032, vivi_5641656
    die "Contextual %*HOW not found"
    box $P5038, "Contextual %*HOW not found"
    set $P5032, $P5038
  vivi_5641656:
    set $P5031, $P5032
  fallback1654:
    find_dynamic_lex $P5039, "$*PKGDECL"
    unless_null $P5039, fallback1657
    nqp_get_sc_object $P5042, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5041, $P5042
    set $P5040, $P5041["$PKGDECL"]
    unless_null $P5040, fallback1658
    nqp_get_sc_object $P5043, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5040, $P5043
  fallback1658:
    unless_null $P5040, vivi_5651659
    die "Contextual $*PKGDECL not found"
    box $P5044, "Contextual $*PKGDECL not found"
    set $P5040, $P5044
  vivi_5651659:
    set $P5039, $P5040
  fallback1657:
    set $S5003, $P5039
    set $P5030, $P5031[$S5003]
    unless_null $P5030, fallback1660
    nqp_get_sc_object $P5045, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5030, $P5045
  fallback1660:
    $P5046 = $P5024."pkg_create_mo"($P5030, $P101 :flat :named)
    store_dynamic_lex "$*PACKAGE", $P5046
    find_dynamic_lex $P5047, "$*SCOPE"
    unless_null $P5047, fallback1665
    nqp_get_sc_object $P5050, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$SCOPE"]
    unless_null $P5048, fallback1666
    nqp_get_sc_object $P5051, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5048, $P5051
  fallback1666:
    unless_null $P5048, vivi_5681667
    die "Contextual $*SCOPE not found"
    box $P5052, "Contextual $*SCOPE not found"
    set $P5048, $P5052
  vivi_5681667:
    set $P5047, $P5048
  fallback1665:
    set $S5004, $P5047
    iseq $I5001, $S5004, "our"
    set $I5003, $I5001
    if $I5001 goto unless567_end1664 
    find_dynamic_lex $P5053, "$*SCOPE"
    unless_null $P5053, fallback1668
    nqp_get_sc_object $P5056, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$SCOPE"]
    unless_null $P5054, fallback1669
    nqp_get_sc_object $P5057, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5054, $P5057
  fallback1669:
    unless_null $P5054, vivi_5691670
    die "Contextual $*SCOPE not found"
    box $P5058, "Contextual $*SCOPE not found"
    set $P5054, $P5058
  vivi_5691670:
    set $P5053, $P5054
  fallback1668:
    set $S5005, $P5053
    iseq $I5002, $S5005, ""
    set $I5003, $I5002
  unless567_end1664:
    unless $I5003 goto if566_else1661 
.annotate 'line', 994
.annotate 'line', 995
    find_dynamic_lex $P5059, "$*W"
    unless_null $P5059, fallback1671
    nqp_get_sc_object $P5062, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$W"]
    unless_null $P5060, fallback1672
    nqp_get_sc_object $P5063, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5060, $P5063
  fallback1672:
    unless_null $P5060, vivi_5701673
    die "Contextual $*W not found"
    box $P5064, "Contextual $*W not found"
    set $P5060, $P5064
  vivi_5701673:
    set $P5059, $P5060
  fallback1671:
    find_dynamic_lex $P5065, "$*OUTERPACKAGE"
    unless_null $P5065, fallback1674
    nqp_get_sc_object $P5068, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$OUTERPACKAGE"]
    unless_null $P5066, fallback1675
    nqp_get_sc_object $P5069, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5066, $P5069
  fallback1675:
    unless_null $P5066, vivi_5711676
    die "Contextual $*OUTERPACKAGE not found"
    box $P5070, "Contextual $*OUTERPACKAGE not found"
    set $P5066, $P5070
  vivi_5711676:
    set $P5065, $P5066
  fallback1674:
    find_lex $P5073, "$/"
    unless_null $P5073, fallback1677
    nqp_get_sc_object $P5074, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5073, $P5074
  fallback1677:
    set $P5072, $P5073["name"]
    unless_null $P5072, fallback1678
    nqp_get_sc_object $P5075, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5072, $P5075
  fallback1678:
    set $P5071, $P5072["identifier"]
    unless_null $P5071, fallback1679
    nqp_get_sc_object $P5076, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5071, $P5076
  fallback1679:
    find_dynamic_lex $P5077, "$*PACKAGE"
    unless_null $P5077, fallback1680
    nqp_get_sc_object $P5080, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5079, $P5080
    set $P5078, $P5079["$PACKAGE"]
    unless_null $P5078, fallback1681
    nqp_get_sc_object $P5081, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5078, $P5081
  fallback1681:
    unless_null $P5078, vivi_5721682
    die "Contextual $*PACKAGE not found"
    box $P5082, "Contextual $*PACKAGE not found"
    set $P5078, $P5082
  vivi_5721682:
    set $P5077, $P5078
  fallback1680:
    $P5059."install_package_symbol"($P5065, $P5071, $P5077)
    find_lex $P5085, "$/"
    unless_null $P5085, fallback1685
    nqp_get_sc_object $P5086, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5085, $P5086
  fallback1685:
    set $P5084, $P5085["name"]
    unless_null $P5084, fallback1686
    nqp_get_sc_object $P5087, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5084, $P5087
  fallback1686:
    set $P5083, $P5084["identifier"]
    unless_null $P5083, fallback1687
    nqp_get_sc_object $P5088, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5083, $P5088
  fallback1687:
    set $N5001, $P5083
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5112, $I5004
    set $P5111, $P5112
    unless $I5004 goto if573_end1684 
.annotate 'line', 996
.annotate 'line', 997
    find_dynamic_lex $P5089, "$*W"
    unless_null $P5089, fallback1688
    nqp_get_sc_object $P5092, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5091, $P5092
    set $P5090, $P5091["$W"]
    unless_null $P5090, fallback1689
    nqp_get_sc_object $P5093, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5090, $P5093
  fallback1689:
    unless_null $P5090, vivi_5741690
    die "Contextual $*W not found"
    box $P5094, "Contextual $*W not found"
    set $P5090, $P5094
  vivi_5741690:
    set $P5089, $P5090
  fallback1688:
    find_lex $P5095, "$OUTER"
    find_lex $P5099, "$/"
    unless_null $P5099, fallback1691
    nqp_get_sc_object $P5100, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5099, $P5100
  fallback1691:
    set $P5098, $P5099["name"]
    unless_null $P5098, fallback1692
    nqp_get_sc_object $P5101, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5098, $P5101
  fallback1692:
    set $P5097, $P5098["identifier"]
    unless_null $P5097, fallback1693
    nqp_get_sc_object $P5102, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5097, $P5102
  fallback1693:
    set $P5096, $P5097[0]
    unless_null $P5096, fallback1694
    nqp_get_sc_object $P5103, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5096, $P5103
  fallback1694:
    find_dynamic_lex $P5104, "$*PACKAGE"
    unless_null $P5104, fallback1695
    nqp_get_sc_object $P5107, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$PACKAGE"]
    unless_null $P5105, fallback1696
    nqp_get_sc_object $P5108, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5105, $P5108
  fallback1696:
    unless_null $P5105, vivi_5751697
    die "Contextual $*PACKAGE not found"
    box $P5109, "Contextual $*PACKAGE not found"
    set $P5105, $P5109
  vivi_5751697:
    set $P5104, $P5105
  fallback1695:
    $P5110 = $P5089."install_lexical_symbol"($P5095, $P5096, $P5104)
    set $P5111, $P5110
  if573_end1684:
    set $P5163, $P5111
    goto if566_end1662
  if566_else1661:
    find_dynamic_lex $P5113, "$*SCOPE"
    unless_null $P5113, fallback1700
    nqp_get_sc_object $P5116, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5115, $P5116
    set $P5114, $P5115["$SCOPE"]
    unless_null $P5114, fallback1701
    nqp_get_sc_object $P5117, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5114, $P5117
  fallback1701:
    unless_null $P5114, vivi_5771702
    die "Contextual $*SCOPE not found"
    box $P5118, "Contextual $*SCOPE not found"
    set $P5114, $P5118
  vivi_5771702:
    set $P5113, $P5114
  fallback1700:
    set $S5006, $P5113
    iseq $I5005, $S5006, "my"
    unless $I5005 goto if576_else1698 
.annotate 'line', 1000
    find_lex $P5121, "$/"
    unless_null $P5121, fallback1705
    nqp_get_sc_object $P5122, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5121, $P5122
  fallback1705:
    set $P5120, $P5121["name"]
    unless_null $P5120, fallback1706
    nqp_get_sc_object $P5123, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5120, $P5123
  fallback1706:
    set $P5119, $P5120["identifier"]
    unless_null $P5119, fallback1707
    nqp_get_sc_object $P5124, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5119, $P5124
  fallback1707:
    set $N5003, $P5119
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    unless $I5006 goto if578_end1704 
.annotate 'line', 1001
.annotate 'line', 1002
    find_lex $P5126, "$/"
    unless_null $P5126, fallback1708
    nqp_get_sc_object $P5127, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5126, $P5127
  fallback1708:
    set $P5125, $P5126["name"]
    unless_null $P5125, fallback1709
    nqp_get_sc_object $P5128, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5125, $P5128
  fallback1709:
    $P5129 = $P5125."CURSOR"()
    $P5130 = $P5129."panic"("A my scoped package cannot have a multi-part name yet")
  if578_end1704:
.annotate 'line', 1004
    find_dynamic_lex $P5131, "$*W"
    unless_null $P5131, fallback1710
    nqp_get_sc_object $P5134, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5133, $P5134
    set $P5132, $P5133["$W"]
    unless_null $P5132, fallback1711
    nqp_get_sc_object $P5135, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5132, $P5135
  fallback1711:
    unless_null $P5132, vivi_5791712
    die "Contextual $*W not found"
    box $P5136, "Contextual $*W not found"
    set $P5132, $P5136
  vivi_5791712:
    set $P5131, $P5132
  fallback1710:
    find_lex $P5137, "$OUTER"
    find_lex $P5141, "$/"
    unless_null $P5141, fallback1713
    nqp_get_sc_object $P5142, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5141, $P5142
  fallback1713:
    set $P5140, $P5141["name"]
    unless_null $P5140, fallback1714
    nqp_get_sc_object $P5143, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5140, $P5143
  fallback1714:
    set $P5139, $P5140["identifier"]
    unless_null $P5139, fallback1715
    nqp_get_sc_object $P5144, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5139, $P5144
  fallback1715:
    set $P5138, $P5139[0]
    unless_null $P5138, fallback1716
    nqp_get_sc_object $P5145, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5138, $P5145
  fallback1716:
    find_dynamic_lex $P5146, "$*PACKAGE"
    unless_null $P5146, fallback1717
    nqp_get_sc_object $P5149, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5148, $P5149
    set $P5147, $P5148["$PACKAGE"]
    unless_null $P5147, fallback1718
    nqp_get_sc_object $P5150, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5147, $P5150
  fallback1718:
    unless_null $P5147, vivi_5801719
    die "Contextual $*PACKAGE not found"
    box $P5151, "Contextual $*PACKAGE not found"
    set $P5147, $P5151
  vivi_5801719:
    set $P5146, $P5147
  fallback1717:
    $P5152 = $P5131."install_lexical_symbol"($P5137, $P5138, $P5146)
    set $P5162, $P5152
    goto if576_end1699
  if576_else1698:
.annotate 'line', 1006
.annotate 'line', 1007
    find_lex $P5153, "$/"
    $P5154 = $P5153."CURSOR"()
    find_dynamic_lex $P5155, "$*SCOPE"
    unless_null $P5155, fallback1720
    nqp_get_sc_object $P5158, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5157, $P5158
    set $P5156, $P5157["$SCOPE"]
    unless_null $P5156, fallback1721
    nqp_get_sc_object $P5159, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5156, $P5159
  fallback1721:
    unless_null $P5156, vivi_5811722
    die "Contextual $*SCOPE not found"
    box $P5160, "Contextual $*SCOPE not found"
    set $P5156, $P5160
  vivi_5811722:
    set $P5155, $P5156
  fallback1720:
    set $S5008, $P5155
    concat $S5007, $S5008, " scoped packages are not supported"
    $P5161 = $P5154."panic"($S5007)
    set $P5162, $P5161
  if576_end1699:
    set $P5163, $P5162
  if566_end1662:
    .return ($P5163) 
.end
.HLL "nqp"
.namespace []
.sub "role_params" :subid("cuid_107_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1021
    .param pmc _lex_param_0 
    .lex "$*SCOPE", $P101 
    .lex "$*IN_DECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx621_tgt
    .local int rx621_pos
    .local int rx621_off
    .local int rx621_eos
    .local int rx621_rep
    .local pmc rx621_cur
    .local pmc rx621_curclass
    .local pmc rx621_bstack
    .local pmc rx621_cstack
    (rx621_cur, rx621_tgt, rx621_pos, rx621_curclass, rx621_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx621_cur
    length rx621_eos, rx621_tgt
    eq $I19, 1, rx621_restart1773
    gt rx621_pos, rx621_eos, rx621_fail1774
    repr_get_attr_int $I11, self, rx621_curclass, "$!from"
    ne $I11, -1, rxscan622_done1780
    goto rxscan622_scan1779
  rxscan622_loop1778:
    inc rx621_pos
    gt rx621_pos, rx621_eos, rx621_fail1774
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!from", rx621_pos
  rxscan622_scan1779:
    nqp_rxmark rx621_bstack, rxscan622_loop1778, rx621_pos, 0
  rxscan622_done1780:
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!pos", rx621_pos
    $P11 = rx621_cur."ws"()
    repr_get_attr_int $I11, $P11, rx621_curclass, "$!pos"
    lt $I11, 0, rx621_fail1774
    repr_get_attr_int rx621_pos, $P11, rx621_curclass, "$!pos"
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!pos", rx621_pos
    store_lex unicode:"$\x{a2}", rx621_cur
    box $P5003, "my"
    set $P101, $P5003
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!pos", rx621_pos
    $P11 = rx621_cur."ws"()
    repr_get_attr_int $I11, $P11, rx621_curclass, "$!pos"
    lt $I11, 0, rx621_fail1774
    repr_get_attr_int rx621_pos, $P11, rx621_curclass, "$!pos"
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!pos", rx621_pos
    store_lex unicode:"$\x{a2}", rx621_cur
    box $P5004, "variable"
    set $P102, $P5004
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!pos", rx621_pos
    $P11 = rx621_cur."ws"()
    repr_get_attr_int $I11, $P11, rx621_curclass, "$!pos"
    lt $I11, 0, rx621_fail1774
    repr_get_attr_int rx621_pos, $P11, rx621_curclass, "$!pos"
    nqp_rxmark rx621_bstack, rxquantr626_done1785, -1, 0
  rxquantr626_loop1784:
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!pos", rx621_pos
    $P11 = rx621_cur."ws"()
    repr_get_attr_int $I11, $P11, rx621_curclass, "$!pos"
    lt $I11, 0, rx621_fail1774
    repr_get_attr_int rx621_pos, $P11, rx621_curclass, "$!pos"
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!pos", rx621_pos
    $P11 = rx621_cur."variable"()
    repr_get_attr_int $I11, $P11, rx621_curclass, "$!pos"
    lt $I11, 0, rx621_fail1774
    nqp_rxmark rx621_bstack, rxsubrule628_pass1787, -1, 0
  rxsubrule628_pass1787:
    rx621_cstack = rx621_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx621_pos, $P11, rx621_curclass, "$!pos"
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!pos", rx621_pos
    $P11 = rx621_cur."ws"()
    repr_get_attr_int $I11, $P11, rx621_curclass, "$!pos"
    lt $I11, 0, rx621_fail1774
    repr_get_attr_int rx621_pos, $P11, rx621_curclass, "$!pos"
    nqp_rxpeek $I19, rx621_bstack, rxquantr626_done1785
    inc $I19
    inc $I19
    set rx621_rep, rx621_bstack[$I19]
    nqp_rxcommit rx621_bstack, rxquantr626_done1785
    inc rx621_rep
    nqp_rxmark rx621_bstack, rxquantr626_done1785, rx621_pos, rx621_rep
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!pos", rx621_pos
    $P11 = rx621_cur."ws"()
    repr_get_attr_int $I11, $P11, rx621_curclass, "$!pos"
    lt $I11, 0, rx621_fail1774
    repr_get_attr_int rx621_pos, $P11, rx621_curclass, "$!pos"
    add $I11, rx621_pos, 1
    gt $I11, rx621_eos, rx621_fail1774
    substr $S10, rx621_tgt, rx621_pos, 1
    ne $S10, ucs4:",", rx621_fail1774
    add rx621_pos, 1
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!pos", rx621_pos
    $P11 = rx621_cur."ws"()
    repr_get_attr_int $I11, $P11, rx621_curclass, "$!pos"
    lt $I11, 0, rx621_fail1774
    repr_get_attr_int rx621_pos, $P11, rx621_curclass, "$!pos"
    goto rxquantr626_loop1784
  rxquantr626_done1785:
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!pos", rx621_pos
    $P11 = rx621_cur."ws"()
    repr_get_attr_int $I11, $P11, rx621_curclass, "$!pos"
    lt $I11, 0, rx621_fail1774
    repr_get_attr_int rx621_pos, $P11, rx621_curclass, "$!pos"
    rx621_cur."!cursor_pass"(rx621_pos, "role_params", 'backtrack'=>1)
    .return (rx621_cur)
  rx621_restart1773:
    repr_get_attr_obj rx621_cstack, rx621_cur, rx621_curclass, "$!cstack"
  rx621_fail1774:
    unless rx621_bstack, rx621_done1772
    pop $I19, rx621_bstack
    if_null rx621_cstack, rx621_cstack_done1777
    unless rx621_cstack, rx621_cstack_done1777
    dec $I19
    set $P11, rx621_cstack[$I19]
  rx621_cstack_done1777:
    pop rx621_rep, rx621_bstack
    pop rx621_pos, rx621_bstack
    pop $I19, rx621_bstack
    lt rx621_pos, -1, rx621_done1772
    lt rx621_pos, 0, rx621_fail1774
    eq $I19, 0, rx621_fail1774
    nqp_islist $I20, rx621_cstack
    unless $I20, rx621_jump1775
    elements $I18, rx621_bstack
    le $I18, 0, rx621_cut1776
    dec $I18
    set $I18, rx621_bstack[$I18]
  rx621_cut1776:
    assign rx621_cstack, $I18
  rx621_jump1775:
    jump $I19
  rx621_done1772:
    rx621_cur."!cursor_fail"()
    .return (rx621_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator" :subid("cuid_108_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1027
    .param pmc self 
    $P5001 = self."!protoregex"("scope_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_109_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1028
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx633_tgt
    .local int rx633_pos
    .local int rx633_off
    .local int rx633_eos
    .local int rx633_rep
    .local pmc rx633_cur
    .local pmc rx633_curclass
    .local pmc rx633_bstack
    .local pmc rx633_cstack
    (rx633_cur, rx633_tgt, rx633_pos, rx633_curclass, rx633_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx633_cur
    length rx633_eos, rx633_tgt
    eq $I19, 1, rx633_restart1794
    gt rx633_pos, rx633_eos, rx633_fail1795
    repr_get_attr_int $I11, self, rx633_curclass, "$!from"
    ne $I11, -1, rxscan634_done1801
    goto rxscan634_scan1800
  rxscan634_loop1799:
    inc rx633_pos
    gt rx633_pos, rx633_eos, rx633_fail1795
    repr_bind_attr_int rx633_cur, rx633_curclass, "$!from", rx633_pos
  rxscan634_scan1800:
    nqp_rxmark rx633_bstack, rxscan634_loop1799, rx633_pos, 0
  rxscan634_done1801:
    nqp_rxmark rx633_bstack, rxcap635_fail1803, rx633_pos, 0
    add $I11, rx633_pos, 2
    gt $I11, rx633_eos, rx633_fail1795
    substr $S10, rx633_tgt, rx633_pos, 2
    ne $S10, ucs4:"my", rx633_fail1795
    add rx633_pos, 2
    nqp_rxpeek $I19, rx633_bstack, rxcap635_fail1803
    inc $I19
    set $I11, rx633_bstack[$I19]
    repr_bind_attr_int rx633_cur, rx633_curclass, "$!pos", rx633_pos
    $P11 = rx633_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx633_pos)
    rx633_cstack = rx633_cur."!cursor_capture"($P11, "sym")
    goto rxcap635_done1802
  rxcap635_fail1803:
    goto rx633_fail1795
  rxcap635_done1802:
    repr_bind_attr_int rx633_cur, rx633_curclass, "$!pos", rx633_pos
    $P11 = rx633_cur."scoped"("my")
    repr_get_attr_int $I11, $P11, rx633_curclass, "$!pos"
    lt $I11, 0, rx633_fail1795
    nqp_rxmark rx633_bstack, rxsubrule636_pass1804, -1, 0
  rxsubrule636_pass1804:
    rx633_cstack = rx633_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx633_pos, $P11, rx633_curclass, "$!pos"
    rx633_cur."!cursor_pass"(rx633_pos, "scope_declarator:sym<my>", 'backtrack'=>1)
    .return (rx633_cur)
  rx633_restart1794:
    repr_get_attr_obj rx633_cstack, rx633_cur, rx633_curclass, "$!cstack"
  rx633_fail1795:
    unless rx633_bstack, rx633_done1793
    pop $I19, rx633_bstack
    if_null rx633_cstack, rx633_cstack_done1798
    unless rx633_cstack, rx633_cstack_done1798
    dec $I19
    set $P11, rx633_cstack[$I19]
  rx633_cstack_done1798:
    pop rx633_rep, rx633_bstack
    pop rx633_pos, rx633_bstack
    pop $I19, rx633_bstack
    lt rx633_pos, -1, rx633_done1793
    lt rx633_pos, 0, rx633_fail1795
    eq $I19, 0, rx633_fail1795
    nqp_islist $I20, rx633_cstack
    unless $I20, rx633_jump1796
    elements $I18, rx633_bstack
    le $I18, 0, rx633_cut1797
    dec $I18
    set $I18, rx633_bstack[$I18]
  rx633_cut1797:
    assign rx633_cstack, $I18
  rx633_jump1796:
    jump $I19
  rx633_done1793:
    rx633_cur."!cursor_fail"()
    .return (rx633_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_110_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1029
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx637_tgt
    .local int rx637_pos
    .local int rx637_off
    .local int rx637_eos
    .local int rx637_rep
    .local pmc rx637_cur
    .local pmc rx637_curclass
    .local pmc rx637_bstack
    .local pmc rx637_cstack
    (rx637_cur, rx637_tgt, rx637_pos, rx637_curclass, rx637_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx637_cur
    length rx637_eos, rx637_tgt
    eq $I19, 1, rx637_restart1807
    gt rx637_pos, rx637_eos, rx637_fail1808
    repr_get_attr_int $I11, self, rx637_curclass, "$!from"
    ne $I11, -1, rxscan638_done1814
    goto rxscan638_scan1813
  rxscan638_loop1812:
    inc rx637_pos
    gt rx637_pos, rx637_eos, rx637_fail1808
    repr_bind_attr_int rx637_cur, rx637_curclass, "$!from", rx637_pos
  rxscan638_scan1813:
    nqp_rxmark rx637_bstack, rxscan638_loop1812, rx637_pos, 0
  rxscan638_done1814:
    nqp_rxmark rx637_bstack, rxcap639_fail1816, rx637_pos, 0
    add $I11, rx637_pos, 3
    gt $I11, rx637_eos, rx637_fail1808
    substr $S10, rx637_tgt, rx637_pos, 3
    ne $S10, ucs4:"our", rx637_fail1808
    add rx637_pos, 3
    nqp_rxpeek $I19, rx637_bstack, rxcap639_fail1816
    inc $I19
    set $I11, rx637_bstack[$I19]
    repr_bind_attr_int rx637_cur, rx637_curclass, "$!pos", rx637_pos
    $P11 = rx637_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx637_pos)
    rx637_cstack = rx637_cur."!cursor_capture"($P11, "sym")
    goto rxcap639_done1815
  rxcap639_fail1816:
    goto rx637_fail1808
  rxcap639_done1815:
    repr_bind_attr_int rx637_cur, rx637_curclass, "$!pos", rx637_pos
    $P11 = rx637_cur."scoped"("our")
    repr_get_attr_int $I11, $P11, rx637_curclass, "$!pos"
    lt $I11, 0, rx637_fail1808
    nqp_rxmark rx637_bstack, rxsubrule640_pass1817, -1, 0
  rxsubrule640_pass1817:
    rx637_cstack = rx637_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx637_pos, $P11, rx637_curclass, "$!pos"
    rx637_cur."!cursor_pass"(rx637_pos, "scope_declarator:sym<our>", 'backtrack'=>1)
    .return (rx637_cur)
  rx637_restart1807:
    repr_get_attr_obj rx637_cstack, rx637_cur, rx637_curclass, "$!cstack"
  rx637_fail1808:
    unless rx637_bstack, rx637_done1806
    pop $I19, rx637_bstack
    if_null rx637_cstack, rx637_cstack_done1811
    unless rx637_cstack, rx637_cstack_done1811
    dec $I19
    set $P11, rx637_cstack[$I19]
  rx637_cstack_done1811:
    pop rx637_rep, rx637_bstack
    pop rx637_pos, rx637_bstack
    pop $I19, rx637_bstack
    lt rx637_pos, -1, rx637_done1806
    lt rx637_pos, 0, rx637_fail1808
    eq $I19, 0, rx637_fail1808
    nqp_islist $I20, rx637_cstack
    unless $I20, rx637_jump1809
    elements $I18, rx637_bstack
    le $I18, 0, rx637_cut1810
    dec $I18
    set $I18, rx637_bstack[$I18]
  rx637_cut1810:
    assign rx637_cstack, $I18
  rx637_jump1809:
    jump $I19
  rx637_done1806:
    rx637_cur."!cursor_fail"()
    .return (rx637_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_111_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1030
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx641_tgt
    .local int rx641_pos
    .local int rx641_off
    .local int rx641_eos
    .local int rx641_rep
    .local pmc rx641_cur
    .local pmc rx641_curclass
    .local pmc rx641_bstack
    .local pmc rx641_cstack
    (rx641_cur, rx641_tgt, rx641_pos, rx641_curclass, rx641_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx641_cur
    length rx641_eos, rx641_tgt
    eq $I19, 1, rx641_restart1820
    gt rx641_pos, rx641_eos, rx641_fail1821
    repr_get_attr_int $I11, self, rx641_curclass, "$!from"
    ne $I11, -1, rxscan642_done1827
    goto rxscan642_scan1826
  rxscan642_loop1825:
    inc rx641_pos
    gt rx641_pos, rx641_eos, rx641_fail1821
    repr_bind_attr_int rx641_cur, rx641_curclass, "$!from", rx641_pos
  rxscan642_scan1826:
    nqp_rxmark rx641_bstack, rxscan642_loop1825, rx641_pos, 0
  rxscan642_done1827:
    nqp_rxmark rx641_bstack, rxcap643_fail1829, rx641_pos, 0
    add $I11, rx641_pos, 3
    gt $I11, rx641_eos, rx641_fail1821
    substr $S10, rx641_tgt, rx641_pos, 3
    ne $S10, ucs4:"has", rx641_fail1821
    add rx641_pos, 3
    nqp_rxpeek $I19, rx641_bstack, rxcap643_fail1829
    inc $I19
    set $I11, rx641_bstack[$I19]
    repr_bind_attr_int rx641_cur, rx641_curclass, "$!pos", rx641_pos
    $P11 = rx641_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx641_pos)
    rx641_cstack = rx641_cur."!cursor_capture"($P11, "sym")
    goto rxcap643_done1828
  rxcap643_fail1829:
    goto rx641_fail1821
  rxcap643_done1828:
    repr_bind_attr_int rx641_cur, rx641_curclass, "$!pos", rx641_pos
    $P11 = rx641_cur."scoped"("has")
    repr_get_attr_int $I11, $P11, rx641_curclass, "$!pos"
    lt $I11, 0, rx641_fail1821
    nqp_rxmark rx641_bstack, rxsubrule644_pass1830, -1, 0
  rxsubrule644_pass1830:
    rx641_cstack = rx641_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx641_pos, $P11, rx641_curclass, "$!pos"
    rx641_cur."!cursor_pass"(rx641_pos, "scope_declarator:sym<has>", 'backtrack'=>1)
    .return (rx641_cur)
  rx641_restart1820:
    repr_get_attr_obj rx641_cstack, rx641_cur, rx641_curclass, "$!cstack"
  rx641_fail1821:
    unless rx641_bstack, rx641_done1819
    pop $I19, rx641_bstack
    if_null rx641_cstack, rx641_cstack_done1824
    unless rx641_cstack, rx641_cstack_done1824
    dec $I19
    set $P11, rx641_cstack[$I19]
  rx641_cstack_done1824:
    pop rx641_rep, rx641_bstack
    pop rx641_pos, rx641_bstack
    pop $I19, rx641_bstack
    lt rx641_pos, -1, rx641_done1819
    lt rx641_pos, 0, rx641_fail1821
    eq $I19, 0, rx641_fail1821
    nqp_islist $I20, rx641_cstack
    unless $I20, rx641_jump1822
    elements $I18, rx641_bstack
    le $I18, 0, rx641_cut1823
    dec $I18
    set $I18, rx641_bstack[$I18]
  rx641_cut1823:
    assign rx641_cstack, $I18
  rx641_jump1822:
    jump $I19
  rx641_done1819:
    rx641_cur."!cursor_fail"()
    .return (rx641_cur) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_112_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1032
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .lex "$*SCOPE", _lex_param_1 
    .local pmc self 
    set self, _lex_param_0
    .local string rx645_tgt
    .local int rx645_pos
    .local int rx645_off
    .local int rx645_eos
    .local int rx645_rep
    .local pmc rx645_cur
    .local pmc rx645_curclass
    .local pmc rx645_bstack
    .local pmc rx645_cstack
    (rx645_cur, rx645_tgt, rx645_pos, rx645_curclass, rx645_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx645_cur
    length rx645_eos, rx645_tgt
    eq $I19, 1, rx645_restart1833
    gt rx645_pos, rx645_eos, rx645_fail1834
    repr_get_attr_int $I11, self, rx645_curclass, "$!from"
    ne $I11, -1, rxscan646_done1840
    goto rxscan646_scan1839
  rxscan646_loop1838:
    inc rx645_pos
    gt rx645_pos, rx645_eos, rx645_fail1834
    repr_bind_attr_int rx645_cur, rx645_curclass, "$!from", rx645_pos
  rxscan646_scan1839:
    nqp_rxmark rx645_bstack, rxscan646_loop1838, rx645_pos, 0
  rxscan646_done1840:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt647_01842
    nqp_push_label $P11, alt647_11846
    nqp_push_label $P11, alt647_21850
    nqp_rxmark rx645_bstack, alt647_end1841, -1, 0
    rx645_cur."!alt"(rx645_pos, "alt_nfa__21_1360256388.972", $P11)
    goto rx645_fail1834
  alt647_01842:
    repr_bind_attr_int rx645_cur, rx645_curclass, "$!pos", rx645_pos
    $P11 = rx645_cur."ws"()
    repr_get_attr_int $I11, $P11, rx645_curclass, "$!pos"
    lt $I11, 0, rx645_fail1834
    repr_get_attr_int rx645_pos, $P11, rx645_curclass, "$!pos"
    repr_bind_attr_int rx645_cur, rx645_curclass, "$!pos", rx645_pos
    $P11 = rx645_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx645_curclass, "$!pos"
    lt $I11, 0, rx645_fail1834
    nqp_rxmark rx645_bstack, rxsubrule649_pass1844, -1, 0
  rxsubrule649_pass1844:
    rx645_cstack = rx645_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx645_pos, $P11, rx645_curclass, "$!pos"
    repr_bind_attr_int rx645_cur, rx645_curclass, "$!pos", rx645_pos
    $P11 = rx645_cur."ws"()
    repr_get_attr_int $I11, $P11, rx645_curclass, "$!pos"
    lt $I11, 0, rx645_fail1834
    repr_get_attr_int rx645_pos, $P11, rx645_curclass, "$!pos"
    goto alt647_end1841
  alt647_11846:
    repr_bind_attr_int rx645_cur, rx645_curclass, "$!pos", rx645_pos
    $P11 = rx645_cur."ws"()
    repr_get_attr_int $I11, $P11, rx645_curclass, "$!pos"
    lt $I11, 0, rx645_fail1834
    repr_get_attr_int rx645_pos, $P11, rx645_curclass, "$!pos"
    repr_bind_attr_int rx645_cur, rx645_curclass, "$!pos", rx645_pos
    $P11 = rx645_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx645_curclass, "$!pos"
    lt $I11, 0, rx645_fail1834
    nqp_rxmark rx645_bstack, rxsubrule652_pass1848, -1, 0
  rxsubrule652_pass1848:
    rx645_cstack = rx645_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx645_pos, $P11, rx645_curclass, "$!pos"
    repr_bind_attr_int rx645_cur, rx645_curclass, "$!pos", rx645_pos
    $P11 = rx645_cur."ws"()
    repr_get_attr_int $I11, $P11, rx645_curclass, "$!pos"
    lt $I11, 0, rx645_fail1834
    repr_get_attr_int rx645_pos, $P11, rx645_curclass, "$!pos"
    goto alt647_end1841
  alt647_21850:
    repr_bind_attr_int rx645_cur, rx645_curclass, "$!pos", rx645_pos
    $P11 = rx645_cur."ws"()
    repr_get_attr_int $I11, $P11, rx645_curclass, "$!pos"
    lt $I11, 0, rx645_fail1834
    repr_get_attr_int rx645_pos, $P11, rx645_curclass, "$!pos"
    repr_bind_attr_int rx645_cur, rx645_curclass, "$!pos", rx645_pos
    $P11 = rx645_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx645_curclass, "$!pos"
    lt $I11, 0, rx645_fail1834
    nqp_rxmark rx645_bstack, rxsubrule655_pass1852, -1, 0
  rxsubrule655_pass1852:
    rx645_cstack = rx645_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx645_pos, $P11, rx645_curclass, "$!pos"
    repr_bind_attr_int rx645_cur, rx645_curclass, "$!pos", rx645_pos
    $P11 = rx645_cur."ws"()
    repr_get_attr_int $I11, $P11, rx645_curclass, "$!pos"
    lt $I11, 0, rx645_fail1834
    repr_get_attr_int rx645_pos, $P11, rx645_curclass, "$!pos"
    goto alt647_end1841
  alt647_end1841:
    rx645_cur."!cursor_pass"(rx645_pos, "scoped", 'backtrack'=>1)
    .return (rx645_cur)
  rx645_restart1833:
    repr_get_attr_obj rx645_cstack, rx645_cur, rx645_curclass, "$!cstack"
  rx645_fail1834:
    unless rx645_bstack, rx645_done1832
    pop $I19, rx645_bstack
    if_null rx645_cstack, rx645_cstack_done1837
    unless rx645_cstack, rx645_cstack_done1837
    dec $I19
    set $P11, rx645_cstack[$I19]
  rx645_cstack_done1837:
    pop rx645_rep, rx645_bstack
    pop rx645_pos, rx645_bstack
    pop $I19, rx645_bstack
    lt rx645_pos, -1, rx645_done1832
    lt rx645_pos, 0, rx645_fail1834
    eq $I19, 0, rx645_fail1834
    nqp_islist $I20, rx645_cstack
    unless $I20, rx645_jump1835
    elements $I18, rx645_bstack
    le $I18, 0, rx645_cut1836
    dec $I18
    set $I18, rx645_bstack[$I18]
  rx645_cut1836:
    assign rx645_cstack, $I18
  rx645_jump1835:
    jump $I19
  rx645_done1832:
    rx645_cur."!cursor_fail"()
    .return (rx645_cur) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_113_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1038
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_397_1360256386.79' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx657_tgt
    .local int rx657_pos
    .local int rx657_off
    .local int rx657_eos
    .local int rx657_rep
    .local pmc rx657_cur
    .local pmc rx657_curclass
    .local pmc rx657_bstack
    .local pmc rx657_cstack
    (rx657_cur, rx657_tgt, rx657_pos, rx657_curclass, rx657_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx657_cur
    length rx657_eos, rx657_tgt
    eq $I19, 1, rx657_restart1856
    gt rx657_pos, rx657_eos, rx657_fail1857
    repr_get_attr_int $I11, self, rx657_curclass, "$!from"
    ne $I11, -1, rxscan658_done1863
    goto rxscan658_scan1862
  rxscan658_loop1861:
    inc rx657_pos
    gt rx657_pos, rx657_eos, rx657_fail1857
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!from", rx657_pos
  rxscan658_scan1862:
    nqp_rxmark rx657_bstack, rxscan658_loop1861, rx657_pos, 0
  rxscan658_done1863:
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."name"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1857
    nqp_rxmark rx657_bstack, rxsubrule659_pass1864, -1, 0
  rxsubrule659_pass1864:
    rx657_cstack = rx657_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    store_lex unicode:"$\x{a2}", rx657_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_397_1360256386.79' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx657_fail1857
    rx657_cur."!cursor_pass"(rx657_pos, "typename", 'backtrack'=>1)
    .return (rx657_cur)
  rx657_restart1856:
    repr_get_attr_obj rx657_cstack, rx657_cur, rx657_curclass, "$!cstack"
  rx657_fail1857:
    unless rx657_bstack, rx657_done1855
    pop $I19, rx657_bstack
    if_null rx657_cstack, rx657_cstack_done1860
    unless rx657_cstack, rx657_cstack_done1860
    dec $I19
    set $P11, rx657_cstack[$I19]
  rx657_cstack_done1860:
    pop rx657_rep, rx657_bstack
    pop rx657_pos, rx657_bstack
    pop $I19, rx657_bstack
    lt rx657_pos, -1, rx657_done1855
    lt rx657_pos, 0, rx657_fail1857
    eq $I19, 0, rx657_fail1857
    nqp_islist $I20, rx657_cstack
    unless $I20, rx657_jump1858
    elements $I18, rx657_bstack
    le $I18, 0, rx657_cut1859
    dec $I18
    set $I18, rx657_bstack[$I18]
  rx657_cut1859:
    assign rx657_cstack, $I18
  rx657_jump1858:
    jump $I19
  rx657_done1855:
    rx657_cur."!cursor_fail"()
    .return (rx657_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_397_1360256386.79") :anon :lex :outer("cuid_113_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1040

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback1865
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback1866
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5005
  fallback1866:
    unless_null $P5002, vivi_6601867
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_6601867:
    set $P5001, $P5002
  fallback1865:
    find_lex $P5007, "$/"
    find_lex $P5010, "$/"
    unless_null $P5010, fallback1868
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5011
  fallback1868:
    set $P5009, $P5010["name"]
    unless_null $P5009, fallback1869
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5012
  fallback1869:
    set $P5008, $P5009["identifier"]
    unless_null $P5008, fallback1870
    nqp_get_sc_object $P5013, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5013
  fallback1870:
    $P5014 = $P5001."known_sym"($P5007, $P5008)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_114_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1043
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx661_tgt
    .local int rx661_pos
    .local int rx661_off
    .local int rx661_eos
    .local int rx661_rep
    .local pmc rx661_cur
    .local pmc rx661_curclass
    .local pmc rx661_bstack
    .local pmc rx661_cstack
    (rx661_cur, rx661_tgt, rx661_pos, rx661_curclass, rx661_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx661_cur
    length rx661_eos, rx661_tgt
    eq $I19, 1, rx661_restart1873
    gt rx661_pos, rx661_eos, rx661_fail1874
    repr_get_attr_int $I11, self, rx661_curclass, "$!from"
    ne $I11, -1, rxscan662_done1880
    goto rxscan662_scan1879
  rxscan662_loop1878:
    inc rx661_pos
    gt rx661_pos, rx661_eos, rx661_fail1874
    repr_bind_attr_int rx661_cur, rx661_curclass, "$!from", rx661_pos
  rxscan662_scan1879:
    nqp_rxmark rx661_bstack, rxscan662_loop1878, rx661_pos, 0
  rxscan662_done1880:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt663_01882
    nqp_push_label $P11, alt663_11884
    nqp_rxmark rx661_bstack, alt663_end1881, -1, 0
    rx661_cur."!alt"(rx661_pos, "alt_nfa__22_1360256388.987", $P11)
    goto rx661_fail1874
  alt663_01882:
    repr_bind_attr_int rx661_cur, rx661_curclass, "$!pos", rx661_pos
    $P11 = rx661_cur."variable_declarator"()
    repr_get_attr_int $I11, $P11, rx661_curclass, "$!pos"
    lt $I11, 0, rx661_fail1874
    nqp_rxmark rx661_bstack, rxsubrule664_pass1883, -1, 0
  rxsubrule664_pass1883:
    rx661_cstack = rx661_cur."!cursor_capture"($P11, "variable_declarator")
    repr_get_attr_int rx661_pos, $P11, rx661_curclass, "$!pos"
    goto alt663_end1881
  alt663_11884:
    repr_bind_attr_int rx661_cur, rx661_curclass, "$!pos", rx661_pos
    $P11 = rx661_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx661_curclass, "$!pos"
    lt $I11, 0, rx661_fail1874
    nqp_rxmark rx661_bstack, rxsubrule665_pass1885, -1, 0
  rxsubrule665_pass1885:
    rx661_cstack = rx661_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx661_pos, $P11, rx661_curclass, "$!pos"
    goto alt663_end1881
  alt663_end1881:
    rx661_cur."!cursor_pass"(rx661_pos, "declarator", 'backtrack'=>1)
    .return (rx661_cur)
  rx661_restart1873:
    repr_get_attr_obj rx661_cstack, rx661_cur, rx661_curclass, "$!cstack"
  rx661_fail1874:
    unless rx661_bstack, rx661_done1872
    pop $I19, rx661_bstack
    if_null rx661_cstack, rx661_cstack_done1877
    unless rx661_cstack, rx661_cstack_done1877
    dec $I19
    set $P11, rx661_cstack[$I19]
  rx661_cstack_done1877:
    pop rx661_rep, rx661_bstack
    pop rx661_pos, rx661_bstack
    pop $I19, rx661_bstack
    lt rx661_pos, -1, rx661_done1872
    lt rx661_pos, 0, rx661_fail1874
    eq $I19, 0, rx661_fail1874
    nqp_islist $I20, rx661_cstack
    unless $I20, rx661_jump1875
    elements $I18, rx661_bstack
    le $I18, 0, rx661_cut1876
    dec $I18
    set $I18, rx661_bstack[$I18]
  rx661_cut1876:
    assign rx661_cstack, $I18
  rx661_jump1875:
    jump $I19
  rx661_done1872:
    rx661_cur."!cursor_fail"()
    .return (rx661_cur) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_115_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1048
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_398_1360256386.79' 
    capture_lex $P5006 
    .lex "$*IN_DECL", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx666_tgt
    .local int rx666_pos
    .local int rx666_off
    .local int rx666_eos
    .local int rx666_rep
    .local pmc rx666_cur
    .local pmc rx666_curclass
    .local pmc rx666_bstack
    .local pmc rx666_cstack
    (rx666_cur, rx666_tgt, rx666_pos, rx666_curclass, rx666_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx666_cur
    length rx666_eos, rx666_tgt
    eq $I19, 1, rx666_restart1888
    gt rx666_pos, rx666_eos, rx666_fail1889
    repr_get_attr_int $I11, self, rx666_curclass, "$!from"
    ne $I11, -1, rxscan667_done1895
    goto rxscan667_scan1894
  rxscan667_loop1893:
    inc rx666_pos
    gt rx666_pos, rx666_eos, rx666_fail1889
    repr_bind_attr_int rx666_cur, rx666_curclass, "$!from", rx666_pos
  rxscan667_scan1894:
    nqp_rxmark rx666_bstack, rxscan667_loop1893, rx666_pos, 0
  rxscan667_done1895:
    repr_bind_attr_int rx666_cur, rx666_curclass, "$!pos", rx666_pos
    $P11 = rx666_cur."ws"()
    repr_get_attr_int $I11, $P11, rx666_curclass, "$!pos"
    lt $I11, 0, rx666_fail1889
    repr_get_attr_int rx666_pos, $P11, rx666_curclass, "$!pos"
    nqp_rxmark rx666_bstack, rxquantr669_done1898, rx666_pos, 0
  rxquantr669_loop1897:
    repr_bind_attr_int rx666_cur, rx666_curclass, "$!pos", rx666_pos
    $P11 = rx666_cur."typename"()
    repr_get_attr_int $I11, $P11, rx666_curclass, "$!pos"
    lt $I11, 0, rx666_fail1889
    goto rxsubrule670_pass1899
  rxsubrule670_back1900:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx666_curclass, "$!pos"
    lt $I11, 0, rx666_fail1889
  rxsubrule670_pass1899:
    rx666_cstack = rx666_cur."!cursor_capture"($P11, "typename")
    set_addr $I11, rxsubrule670_back1900
    push rx666_bstack, $I11
    push rx666_bstack, 0
    push rx666_bstack, rx666_pos
    elements $I11, rx666_cstack
    push rx666_bstack, $I11
    repr_get_attr_int rx666_pos, $P11, rx666_curclass, "$!pos"
    nqp_rxpeek $I19, rx666_bstack, rxquantr669_done1898
    inc $I19
    inc $I19
    set rx666_rep, rx666_bstack[$I19]
    nqp_rxcommit rx666_bstack, rxquantr669_done1898
    inc rx666_rep
  rxquantr669_done1898:
    repr_bind_attr_int rx666_cur, rx666_curclass, "$!pos", rx666_pos
    $P11 = rx666_cur."ws"()
    repr_get_attr_int $I11, $P11, rx666_curclass, "$!pos"
    lt $I11, 0, rx666_fail1889
    repr_get_attr_int rx666_pos, $P11, rx666_curclass, "$!pos"
    repr_bind_attr_int rx666_cur, rx666_curclass, "$!pos", rx666_pos
    store_lex unicode:"$\x{a2}", rx666_cur
    box $P5002, "variable"
    set $P101, $P5002
    repr_bind_attr_int rx666_cur, rx666_curclass, "$!pos", rx666_pos
    $P11 = rx666_cur."ws"()
    repr_get_attr_int $I11, $P11, rx666_curclass, "$!pos"
    lt $I11, 0, rx666_fail1889
    repr_get_attr_int rx666_pos, $P11, rx666_curclass, "$!pos"
    repr_bind_attr_int rx666_cur, rx666_curclass, "$!pos", rx666_pos
    $P11 = rx666_cur."variable"()
    repr_get_attr_int $I11, $P11, rx666_curclass, "$!pos"
    lt $I11, 0, rx666_fail1889
    nqp_rxmark rx666_bstack, rxsubrule673_pass1903, -1, 0
  rxsubrule673_pass1903:
    rx666_cstack = rx666_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx666_pos, $P11, rx666_curclass, "$!pos"
    repr_bind_attr_int rx666_cur, rx666_curclass, "$!pos", rx666_pos
    $P11 = rx666_cur."ws"()
    repr_get_attr_int $I11, $P11, rx666_curclass, "$!pos"
    lt $I11, 0, rx666_fail1889
    repr_get_attr_int rx666_pos, $P11, rx666_curclass, "$!pos"
    repr_bind_attr_int rx666_cur, rx666_curclass, "$!pos", rx666_pos
    store_lex unicode:"$\x{a2}", rx666_cur
    $P5003 = $P102."MATCH"()
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_398_1360256386.79' 
    capture_lex $P5004
    $P5005 = $P5004()
    repr_bind_attr_int rx666_cur, rx666_curclass, "$!pos", rx666_pos
    $P11 = rx666_cur."ws"()
    repr_get_attr_int $I11, $P11, rx666_curclass, "$!pos"
    lt $I11, 0, rx666_fail1889
    repr_get_attr_int rx666_pos, $P11, rx666_curclass, "$!pos"
    nqp_rxmark rx666_bstack, rxquantr676_done1907, rx666_pos, 0
  rxquantr676_loop1906:
    repr_bind_attr_int rx666_cur, rx666_curclass, "$!pos", rx666_pos
    $P11 = rx666_cur."trait"()
    repr_get_attr_int $I11, $P11, rx666_curclass, "$!pos"
    lt $I11, 0, rx666_fail1889
    goto rxsubrule677_pass1908
  rxsubrule677_back1909:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx666_curclass, "$!pos"
    lt $I11, 0, rx666_fail1889
  rxsubrule677_pass1908:
    rx666_cstack = rx666_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule677_back1909
    push rx666_bstack, $I11
    push rx666_bstack, 0
    push rx666_bstack, rx666_pos
    elements $I11, rx666_cstack
    push rx666_bstack, $I11
    repr_get_attr_int rx666_pos, $P11, rx666_curclass, "$!pos"
    nqp_rxpeek $I19, rx666_bstack, rxquantr676_done1907
    inc $I19
    inc $I19
    set rx666_rep, rx666_bstack[$I19]
    nqp_rxcommit rx666_bstack, rxquantr676_done1907
    inc rx666_rep
    nqp_rxmark rx666_bstack, rxquantr676_done1907, rx666_pos, rx666_rep
    goto rxquantr676_loop1906
  rxquantr676_done1907:
    repr_bind_attr_int rx666_cur, rx666_curclass, "$!pos", rx666_pos
    $P11 = rx666_cur."ws"()
    repr_get_attr_int $I11, $P11, rx666_curclass, "$!pos"
    lt $I11, 0, rx666_fail1889
    repr_get_attr_int rx666_pos, $P11, rx666_curclass, "$!pos"
    rx666_cur."!cursor_pass"(rx666_pos, "variable_declarator", 'backtrack'=>1)
    .return (rx666_cur)
  rx666_restart1888:
    repr_get_attr_obj rx666_cstack, rx666_cur, rx666_curclass, "$!cstack"
  rx666_fail1889:
    unless rx666_bstack, rx666_done1887
    pop $I19, rx666_bstack
    if_null rx666_cstack, rx666_cstack_done1892
    unless rx666_cstack, rx666_cstack_done1892
    dec $I19
    set $P11, rx666_cstack[$I19]
  rx666_cstack_done1892:
    pop rx666_rep, rx666_bstack
    pop rx666_pos, rx666_bstack
    pop $I19, rx666_bstack
    lt rx666_pos, -1, rx666_done1887
    lt rx666_pos, 0, rx666_fail1889
    eq $I19, 0, rx666_fail1889
    nqp_islist $I20, rx666_cstack
    unless $I20, rx666_jump1890
    elements $I18, rx666_bstack
    le $I18, 0, rx666_cut1891
    dec $I18
    set $I18, rx666_bstack[$I18]
  rx666_cut1891:
    assign rx666_cstack, $I18
  rx666_jump1890:
    jump $I19
  rx666_done1887:
    rx666_cur."!cursor_fail"()
    .return (rx666_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_398_1360256386.79") :anon :lex :outer("cuid_115_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1052

    box $P5001, 0
    store_dynamic_lex "$*IN_DECL", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator" :subid("cuid_116_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1056
    .param pmc self 
    $P5001 = self."!protoregex"("routine_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_117_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1057
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx679_tgt
    .local int rx679_pos
    .local int rx679_off
    .local int rx679_eos
    .local int rx679_rep
    .local pmc rx679_cur
    .local pmc rx679_curclass
    .local pmc rx679_bstack
    .local pmc rx679_cstack
    (rx679_cur, rx679_tgt, rx679_pos, rx679_curclass, rx679_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx679_cur
    length rx679_eos, rx679_tgt
    eq $I19, 1, rx679_restart1913
    gt rx679_pos, rx679_eos, rx679_fail1914
    repr_get_attr_int $I11, self, rx679_curclass, "$!from"
    ne $I11, -1, rxscan680_done1920
    goto rxscan680_scan1919
  rxscan680_loop1918:
    inc rx679_pos
    gt rx679_pos, rx679_eos, rx679_fail1914
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!from", rx679_pos
  rxscan680_scan1919:
    nqp_rxmark rx679_bstack, rxscan680_loop1918, rx679_pos, 0
  rxscan680_done1920:
    nqp_rxmark rx679_bstack, rxcap681_fail1922, rx679_pos, 0
    add $I11, rx679_pos, 3
    gt $I11, rx679_eos, rx679_fail1914
    substr $S10, rx679_tgt, rx679_pos, 3
    ne $S10, ucs4:"sub", rx679_fail1914
    add rx679_pos, 3
    nqp_rxpeek $I19, rx679_bstack, rxcap681_fail1922
    inc $I19
    set $I11, rx679_bstack[$I19]
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx679_pos)
    rx679_cstack = rx679_cur."!cursor_capture"($P11, "sym")
    goto rxcap681_done1921
  rxcap681_fail1922:
    goto rx679_fail1914
  rxcap681_done1921:
    repr_bind_attr_int rx679_cur, rx679_curclass, "$!pos", rx679_pos
    $P11 = rx679_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx679_curclass, "$!pos"
    lt $I11, 0, rx679_fail1914
    nqp_rxmark rx679_bstack, rxsubrule682_pass1923, -1, 0
  rxsubrule682_pass1923:
    rx679_cstack = rx679_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx679_pos, $P11, rx679_curclass, "$!pos"
    rx679_cur."!cursor_pass"(rx679_pos, "routine_declarator:sym<sub>", 'backtrack'=>1)
    .return (rx679_cur)
  rx679_restart1913:
    repr_get_attr_obj rx679_cstack, rx679_cur, rx679_curclass, "$!cstack"
  rx679_fail1914:
    unless rx679_bstack, rx679_done1912
    pop $I19, rx679_bstack
    if_null rx679_cstack, rx679_cstack_done1917
    unless rx679_cstack, rx679_cstack_done1917
    dec $I19
    set $P11, rx679_cstack[$I19]
  rx679_cstack_done1917:
    pop rx679_rep, rx679_bstack
    pop rx679_pos, rx679_bstack
    pop $I19, rx679_bstack
    lt rx679_pos, -1, rx679_done1912
    lt rx679_pos, 0, rx679_fail1914
    eq $I19, 0, rx679_fail1914
    nqp_islist $I20, rx679_cstack
    unless $I20, rx679_jump1915
    elements $I18, rx679_bstack
    le $I18, 0, rx679_cut1916
    dec $I18
    set $I18, rx679_bstack[$I18]
  rx679_cut1916:
    assign rx679_cstack, $I18
  rx679_jump1915:
    jump $I19
  rx679_done1912:
    rx679_cur."!cursor_fail"()
    .return (rx679_cur) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_118_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1058
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx683_tgt
    .local int rx683_pos
    .local int rx683_off
    .local int rx683_eos
    .local int rx683_rep
    .local pmc rx683_cur
    .local pmc rx683_curclass
    .local pmc rx683_bstack
    .local pmc rx683_cstack
    (rx683_cur, rx683_tgt, rx683_pos, rx683_curclass, rx683_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx683_cur
    length rx683_eos, rx683_tgt
    eq $I19, 1, rx683_restart1926
    gt rx683_pos, rx683_eos, rx683_fail1927
    repr_get_attr_int $I11, self, rx683_curclass, "$!from"
    ne $I11, -1, rxscan684_done1933
    goto rxscan684_scan1932
  rxscan684_loop1931:
    inc rx683_pos
    gt rx683_pos, rx683_eos, rx683_fail1927
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!from", rx683_pos
  rxscan684_scan1932:
    nqp_rxmark rx683_bstack, rxscan684_loop1931, rx683_pos, 0
  rxscan684_done1933:
    nqp_rxmark rx683_bstack, rxcap685_fail1935, rx683_pos, 0
    add $I11, rx683_pos, 6
    gt $I11, rx683_eos, rx683_fail1927
    substr $S10, rx683_tgt, rx683_pos, 6
    ne $S10, ucs4:"method", rx683_fail1927
    add rx683_pos, 6
    nqp_rxpeek $I19, rx683_bstack, rxcap685_fail1935
    inc $I19
    set $I11, rx683_bstack[$I19]
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx683_pos)
    rx683_cstack = rx683_cur."!cursor_capture"($P11, "sym")
    goto rxcap685_done1934
  rxcap685_fail1935:
    goto rx683_fail1927
  rxcap685_done1934:
    repr_bind_attr_int rx683_cur, rx683_curclass, "$!pos", rx683_pos
    $P11 = rx683_cur."method_def"()
    repr_get_attr_int $I11, $P11, rx683_curclass, "$!pos"
    lt $I11, 0, rx683_fail1927
    nqp_rxmark rx683_bstack, rxsubrule686_pass1936, -1, 0
  rxsubrule686_pass1936:
    rx683_cstack = rx683_cur."!cursor_capture"($P11, "method_def")
    repr_get_attr_int rx683_pos, $P11, rx683_curclass, "$!pos"
    rx683_cur."!cursor_pass"(rx683_pos, "routine_declarator:sym<method>", 'backtrack'=>1)
    .return (rx683_cur)
  rx683_restart1926:
    repr_get_attr_obj rx683_cstack, rx683_cur, rx683_curclass, "$!cstack"
  rx683_fail1927:
    unless rx683_bstack, rx683_done1925
    pop $I19, rx683_bstack
    if_null rx683_cstack, rx683_cstack_done1930
    unless rx683_cstack, rx683_cstack_done1930
    dec $I19
    set $P11, rx683_cstack[$I19]
  rx683_cstack_done1930:
    pop rx683_rep, rx683_bstack
    pop rx683_pos, rx683_bstack
    pop $I19, rx683_bstack
    lt rx683_pos, -1, rx683_done1925
    lt rx683_pos, 0, rx683_fail1927
    eq $I19, 0, rx683_fail1927
    nqp_islist $I20, rx683_cstack
    unless $I20, rx683_jump1928
    elements $I18, rx683_bstack
    le $I18, 0, rx683_cut1929
    dec $I18
    set $I18, rx683_bstack[$I18]
  rx683_cut1929:
    assign rx683_cstack, $I18
  rx683_jump1928:
    jump $I19
  rx683_done1925:
    rx683_cur."!cursor_fail"()
    .return (rx683_cur) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_119_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1060
    .param pmc _lex_param_0 
    .lex "$*RETURN_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx687_tgt
    .local int rx687_pos
    .local int rx687_off
    .local int rx687_eos
    .local int rx687_rep
    .local pmc rx687_cur
    .local pmc rx687_curclass
    .local pmc rx687_bstack
    .local pmc rx687_cstack
    (rx687_cur, rx687_tgt, rx687_pos, rx687_curclass, rx687_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx687_cur
    length rx687_eos, rx687_tgt
    eq $I19, 1, rx687_restart1939
    gt rx687_pos, rx687_eos, rx687_fail1940
    repr_get_attr_int $I11, self, rx687_curclass, "$!from"
    ne $I11, -1, rxscan688_done1946
    goto rxscan688_scan1945
  rxscan688_loop1944:
    inc rx687_pos
    gt rx687_pos, rx687_eos, rx687_fail1940
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!from", rx687_pos
  rxscan688_scan1945:
    nqp_rxmark rx687_bstack, rxscan688_loop1944, rx687_pos, 0
  rxscan688_done1946:
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    store_lex unicode:"$\x{a2}", rx687_cur
    box $P5002, 0
    set $P101, $P5002
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    nqp_rxmark rx687_bstack, rxquantr691_done1950, rx687_pos, 0
  rxquantr691_loop1949:
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    nqp_rxmark rx687_bstack, rxcap693_fail1953, rx687_pos, 0
    nqp_rxmark rx687_bstack, rxquantr694_done1955, rx687_pos, 0
  rxquantr694_loop1954:
    add $I11, rx687_pos, 1
    gt $I11, rx687_eos, rx687_fail1940
    substr $S10, rx687_tgt, rx687_pos, 1
    ne $S10, ucs4:"&", rx687_fail1940
    add rx687_pos, 1
    nqp_rxpeek $I19, rx687_bstack, rxquantr694_done1955
    inc $I19
    inc $I19
    set rx687_rep, rx687_bstack[$I19]
    nqp_rxcommit rx687_bstack, rxquantr694_done1955
    inc rx687_rep
  rxquantr694_done1955:
    nqp_rxpeek $I19, rx687_bstack, rxcap693_fail1953
    inc $I19
    set $I11, rx687_bstack[$I19]
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx687_pos)
    rx687_cstack = rx687_cur."!cursor_capture"($P11, "sigil")
    goto rxcap693_done1952
  rxcap693_fail1953:
    goto rx687_fail1940
  rxcap693_done1952:
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    nqp_rxmark rx687_bstack, rxsubrule695_pass1956, -1, 0
  rxsubrule695_pass1956:
    rx687_cstack = rx687_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    nqp_rxpeek $I19, rx687_bstack, rxquantr691_done1950
    inc $I19
    inc $I19
    set rx687_rep, rx687_bstack[$I19]
    nqp_rxcommit rx687_bstack, rxquantr691_done1950
    inc rx687_rep
  rxquantr691_done1950:
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
  alt700_01962:
    nqp_rxmark rx687_bstack, alt700_11968, rx687_pos, 0
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    add $I11, rx687_pos, 1
    gt $I11, rx687_eos, rx687_fail1940
    substr $S10, rx687_tgt, rx687_pos, 1
    ne $S10, ucs4:"(", rx687_fail1940
    add rx687_pos, 1
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."signature"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    nqp_rxmark rx687_bstack, rxsubrule703_pass1965, -1, 0
  rxsubrule703_pass1965:
    rx687_cstack = rx687_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    add $I11, rx687_pos, 1
    gt $I11, rx687_eos, rx687_fail1940
    substr $S10, rx687_tgt, rx687_pos, 1
    ne $S10, ucs4:")", rx687_fail1940
    add rx687_pos, 1
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    goto alt700_end1961
  alt700_11968:
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
  alt700_end1961:
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    nqp_rxmark rx687_bstack, rxquantr710_done1974, rx687_pos, 0
  rxquantr710_loop1973:
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."trait"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    goto rxsubrule711_pass1975
  rxsubrule711_back1976:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
  rxsubrule711_pass1975:
    rx687_cstack = rx687_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule711_back1976
    push rx687_bstack, $I11
    push rx687_bstack, 0
    push rx687_bstack, rx687_pos
    elements $I11, rx687_cstack
    push rx687_bstack, $I11
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    nqp_rxpeek $I19, rx687_bstack, rxquantr710_done1974
    inc $I19
    inc $I19
    set rx687_rep, rx687_bstack[$I19]
    nqp_rxcommit rx687_bstack, rxquantr710_done1974
    inc rx687_rep
    nqp_rxmark rx687_bstack, rxquantr710_done1974, rx687_pos, rx687_rep
    goto rxquantr710_loop1973
  rxquantr710_done1974:
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt713_01979
    nqp_push_label $P11, alt713_11983
    nqp_rxmark rx687_bstack, alt713_end1978, -1, 0
    rx687_cur."!alt"(rx687_pos, "alt_nfa__23_1360256389.036", $P11)
    goto rx687_fail1940
  alt713_01979:
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    nqp_rxmark rx687_bstack, rxsubrule715_pass1981, -1, 0
  rxsubrule715_pass1981:
    rx687_cstack = rx687_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    goto alt713_end1978
  alt713_11983:
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    nqp_rxmark rx687_bstack, rxsubrule718_pass1985, -1, 0
  rxsubrule718_pass1985:
    rx687_cstack = rx687_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    goto alt713_end1978
  alt713_end1978:
    nqp_rxcommit rx687_bstack, alt713_end1978
    repr_bind_attr_int rx687_cur, rx687_curclass, "$!pos", rx687_pos
    $P11 = rx687_cur."ws"()
    repr_get_attr_int $I11, $P11, rx687_curclass, "$!pos"
    lt $I11, 0, rx687_fail1940
    repr_get_attr_int rx687_pos, $P11, rx687_curclass, "$!pos"
    rx687_cur."!cursor_pass"(rx687_pos, "routine_def", 'backtrack'=>1)
    .return (rx687_cur)
  rx687_restart1939:
    repr_get_attr_obj rx687_cstack, rx687_cur, rx687_curclass, "$!cstack"
  rx687_fail1940:
    unless rx687_bstack, rx687_done1938
    pop $I19, rx687_bstack
    if_null rx687_cstack, rx687_cstack_done1943
    unless rx687_cstack, rx687_cstack_done1943
    dec $I19
    set $P11, rx687_cstack[$I19]
  rx687_cstack_done1943:
    pop rx687_rep, rx687_bstack
    pop rx687_pos, rx687_bstack
    pop $I19, rx687_bstack
    lt rx687_pos, -1, rx687_done1938
    lt rx687_pos, 0, rx687_fail1940
    eq $I19, 0, rx687_fail1940
    nqp_islist $I20, rx687_cstack
    unless $I20, rx687_jump1941
    elements $I18, rx687_bstack
    le $I18, 0, rx687_cut1942
    dec $I18
    set $I18, rx687_bstack[$I18]
  rx687_cut1942:
    assign rx687_cstack, $I18
  rx687_jump1941:
    jump $I19
  rx687_done1938:
    rx687_cur."!cursor_fail"()
    .return (rx687_cur) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_120_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1073
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_399_1360256386.79' 
    capture_lex $P5008 
    .lex "$*RETURN_USED", $P101 
    .lex "$*INVOCANT_OK", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx721_tgt
    .local int rx721_pos
    .local int rx721_off
    .local int rx721_eos
    .local int rx721_rep
    .local pmc rx721_cur
    .local pmc rx721_curclass
    .local pmc rx721_bstack
    .local pmc rx721_cstack
    (rx721_cur, rx721_tgt, rx721_pos, rx721_curclass, rx721_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx721_cur
    length rx721_eos, rx721_tgt
    eq $I19, 1, rx721_restart1990
    gt rx721_pos, rx721_eos, rx721_fail1991
    repr_get_attr_int $I11, self, rx721_curclass, "$!from"
    ne $I11, -1, rxscan722_done1997
    goto rxscan722_scan1996
  rxscan722_loop1995:
    inc rx721_pos
    gt rx721_pos, rx721_eos, rx721_fail1991
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!from", rx721_pos
  rxscan722_scan1996:
    nqp_rxmark rx721_bstack, rxscan722_loop1995, rx721_pos, 0
  rxscan722_done1997:
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    store_lex unicode:"$\x{a2}", rx721_cur
    box $P5003, 0
    set $P101, $P5003
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    store_lex unicode:"$\x{a2}", rx721_cur
    box $P5004, 1
    set $P102, $P5004
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
  alt726_02002:
    nqp_rxmark rx721_bstack, alt726_12008, rx721_pos, 0
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    add $I11, rx721_pos, 3
    gt $I11, rx721_eos, rx721_fail1991
    substr $S10, rx721_tgt, rx721_pos, 3
    ne $S10, ucs4:"::(", rx721_fail1991
    add rx721_pos, 3
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."variable"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    nqp_rxmark rx721_bstack, rxsubrule729_pass2005, -1, 0
  rxsubrule729_pass2005:
    rx721_cstack = rx721_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    add $I11, rx721_pos, 1
    gt $I11, rx721_eos, rx721_fail1991
    substr $S10, rx721_tgt, rx721_pos, 1
    ne $S10, ucs4:")", rx721_fail1991
    add rx721_pos, 1
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    goto alt726_end2001
  alt726_12008:
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    nqp_rxmark rx721_bstack, rxcap733_fail2011, rx721_pos, 0
    nqp_rxmark rx721_bstack, rxquantr734_done2013, rx721_pos, 0
  rxquantr734_loop2012:
    add $I11, rx721_pos, 1
    gt $I11, rx721_eos, rx721_fail1991
    substr $S10, rx721_tgt, rx721_pos, 1
    ne $S10, ucs4:"!", rx721_fail1991
    add rx721_pos, 1
    nqp_rxpeek $I19, rx721_bstack, rxquantr734_done2013
    inc $I19
    inc $I19
    set rx721_rep, rx721_bstack[$I19]
    nqp_rxcommit rx721_bstack, rxquantr734_done2013
    inc rx721_rep
  rxquantr734_done2013:
    nqp_rxpeek $I19, rx721_bstack, rxcap733_fail2011
    inc $I19
    set $I11, rx721_bstack[$I19]
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx721_pos)
    rx721_cstack = rx721_cur."!cursor_capture"($P11, "private")
    goto rxcap733_done2010
  rxcap733_fail2011:
    goto rx721_fail1991
  rxcap733_done2010:
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    nqp_rxmark rx721_bstack, rxquantr736_done2016, rx721_pos, 0
  rxquantr736_loop2015:
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    goto rxsubrule737_pass2017
  rxsubrule737_back2018:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
  rxsubrule737_pass2017:
    rx721_cstack = rx721_cur."!cursor_capture"($P11, "deflongname")
    set_addr $I11, rxsubrule737_back2018
    push rx721_bstack, $I11
    push rx721_bstack, 0
    push rx721_bstack, rx721_pos
    elements $I11, rx721_cstack
    push rx721_bstack, $I11
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    nqp_rxpeek $I19, rx721_bstack, rxquantr736_done2016
    inc $I19
    inc $I19
    set rx721_rep, rx721_bstack[$I19]
    nqp_rxcommit rx721_bstack, rxquantr736_done2016
    inc rx721_rep
  rxquantr736_done2016:
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
  alt726_end2001:
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
  alt742_02024:
    nqp_rxmark rx721_bstack, alt742_12030, rx721_pos, 0
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    add $I11, rx721_pos, 1
    gt $I11, rx721_eos, rx721_fail1991
    substr $S10, rx721_tgt, rx721_pos, 1
    ne $S10, ucs4:"(", rx721_fail1991
    add rx721_pos, 1
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."signature"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    nqp_rxmark rx721_bstack, rxsubrule745_pass2027, -1, 0
  rxsubrule745_pass2027:
    rx721_cstack = rx721_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    add $I11, rx721_pos, 1
    gt $I11, rx721_eos, rx721_fail1991
    substr $S10, rx721_tgt, rx721_pos, 1
    ne $S10, ucs4:")", rx721_fail1991
    add rx721_pos, 1
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    goto alt742_end2023
  alt742_12030:
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
  alt742_end2023:
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    store_lex unicode:"$\x{a2}", rx721_cur
    $P5005 = $P103."MATCH"()
    set $P104, $P5005
    .const 'Sub' $P5006 = 'cuid_399_1360256386.79' 
    capture_lex $P5006
    $P5007 = $P5006()
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    nqp_rxmark rx721_bstack, rxquantr753_done2037, rx721_pos, 0
  rxquantr753_loop2036:
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."trait"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    goto rxsubrule754_pass2038
  rxsubrule754_back2039:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
  rxsubrule754_pass2038:
    rx721_cstack = rx721_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule754_back2039
    push rx721_bstack, $I11
    push rx721_bstack, 0
    push rx721_bstack, rx721_pos
    elements $I11, rx721_cstack
    push rx721_bstack, $I11
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    nqp_rxpeek $I19, rx721_bstack, rxquantr753_done2037
    inc $I19
    inc $I19
    set rx721_rep, rx721_bstack[$I19]
    nqp_rxcommit rx721_bstack, rxquantr753_done2037
    inc rx721_rep
    nqp_rxmark rx721_bstack, rxquantr753_done2037, rx721_pos, rx721_rep
    goto rxquantr753_loop2036
  rxquantr753_done2037:
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt756_02042
    nqp_push_label $P11, alt756_12046
    nqp_rxmark rx721_bstack, alt756_end2041, -1, 0
    rx721_cur."!alt"(rx721_pos, "alt_nfa__24_1360256389.072", $P11)
    goto rx721_fail1991
  alt756_02042:
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    nqp_rxmark rx721_bstack, rxsubrule758_pass2044, -1, 0
  rxsubrule758_pass2044:
    rx721_cstack = rx721_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    goto alt756_end2041
  alt756_12046:
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    nqp_rxmark rx721_bstack, rxsubrule761_pass2048, -1, 0
  rxsubrule761_pass2048:
    rx721_cstack = rx721_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    goto alt756_end2041
  alt756_end2041:
    nqp_rxcommit rx721_bstack, alt756_end2041
    repr_bind_attr_int rx721_cur, rx721_curclass, "$!pos", rx721_pos
    $P11 = rx721_cur."ws"()
    repr_get_attr_int $I11, $P11, rx721_curclass, "$!pos"
    lt $I11, 0, rx721_fail1991
    repr_get_attr_int rx721_pos, $P11, rx721_curclass, "$!pos"
    rx721_cur."!cursor_pass"(rx721_pos, "method_def", 'backtrack'=>1)
    .return (rx721_cur)
  rx721_restart1990:
    repr_get_attr_obj rx721_cstack, rx721_cur, rx721_curclass, "$!cstack"
  rx721_fail1991:
    unless rx721_bstack, rx721_done1989
    pop $I19, rx721_bstack
    if_null rx721_cstack, rx721_cstack_done1994
    unless rx721_cstack, rx721_cstack_done1994
    dec $I19
    set $P11, rx721_cstack[$I19]
  rx721_cstack_done1994:
    pop rx721_rep, rx721_bstack
    pop rx721_pos, rx721_bstack
    pop $I19, rx721_bstack
    lt rx721_pos, -1, rx721_done1989
    lt rx721_pos, 0, rx721_fail1991
    eq $I19, 0, rx721_fail1991
    nqp_islist $I20, rx721_cstack
    unless $I20, rx721_jump1992
    elements $I18, rx721_bstack
    le $I18, 0, rx721_cut1993
    dec $I18
    set $I18, rx721_bstack[$I18]
  rx721_cut1993:
    assign rx721_cstack, $I18
  rx721_jump1992:
    jump $I19
  rx721_done1989:
    rx721_cur."!cursor_fail"()
    .return (rx721_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_399_1360256386.79") :anon :lex :outer("cuid_120_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1083

    box $P5001, 0
    store_dynamic_lex "$*INVOCANT_OK", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "onlystar" :subid("cuid_121_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1091
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_400_1360256386.79' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx764_tgt
    .local int rx764_pos
    .local int rx764_off
    .local int rx764_eos
    .local int rx764_rep
    .local pmc rx764_cur
    .local pmc rx764_curclass
    .local pmc rx764_bstack
    .local pmc rx764_cstack
    (rx764_cur, rx764_tgt, rx764_pos, rx764_curclass, rx764_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx764_cur
    length rx764_eos, rx764_tgt
    eq $I19, 1, rx764_restart2053
    gt rx764_pos, rx764_eos, rx764_fail2054
    repr_get_attr_int $I11, self, rx764_curclass, "$!from"
    ne $I11, -1, rxscan765_done2060
    goto rxscan765_scan2059
  rxscan765_loop2058:
    inc rx764_pos
    gt rx764_pos, rx764_eos, rx764_fail2054
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!from", rx764_pos
  rxscan765_scan2059:
    nqp_rxmark rx764_bstack, rxscan765_loop2058, rx764_pos, 0
  rxscan765_done2060:
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    store_lex unicode:"$\x{a2}", rx764_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_400_1360256386.79' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx764_fail2054
    add $I11, rx764_pos, 1
    gt $I11, rx764_eos, rx764_fail2054
    substr $S10, rx764_tgt, rx764_pos, 1
    ne $S10, ucs4:"{", rx764_fail2054
    add rx764_pos, 1
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    $P11 = rx764_cur."ws"()
    repr_get_attr_int $I11, $P11, rx764_curclass, "$!pos"
    lt $I11, 0, rx764_fail2054
    repr_get_attr_int rx764_pos, $P11, rx764_curclass, "$!pos"
    add $I11, rx764_pos, 1
    gt $I11, rx764_eos, rx764_fail2054
    substr $S10, rx764_tgt, rx764_pos, 1
    ne $S10, ucs4:"*", rx764_fail2054
    add rx764_pos, 1
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    $P11 = rx764_cur."ws"()
    repr_get_attr_int $I11, $P11, rx764_curclass, "$!pos"
    lt $I11, 0, rx764_fail2054
    repr_get_attr_int rx764_pos, $P11, rx764_curclass, "$!pos"
    add $I11, rx764_pos, 1
    gt $I11, rx764_eos, rx764_fail2054
    substr $S10, rx764_tgt, rx764_pos, 1
    ne $S10, ucs4:"}", rx764_fail2054
    add rx764_pos, 1
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    $P11 = rx764_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx764_curclass, "$!pos"
    lt $I11, 0, rx764_fail2054
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    $P11 = rx764_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx764_curclass, "$!pos"
    lt $I11, 0, rx764_fail2054
    repr_get_attr_int rx764_pos, $P11, rx764_curclass, "$!pos"
    rx764_cur."!cursor_pass"(rx764_pos, "onlystar", 'backtrack'=>1)
    .return (rx764_cur)
  rx764_restart2053:
    repr_get_attr_obj rx764_cstack, rx764_cur, rx764_curclass, "$!cstack"
  rx764_fail2054:
    unless rx764_bstack, rx764_done2052
    pop $I19, rx764_bstack
    if_null rx764_cstack, rx764_cstack_done2057
    unless rx764_cstack, rx764_cstack_done2057
    dec $I19
    set $P11, rx764_cstack[$I19]
  rx764_cstack_done2057:
    pop rx764_rep, rx764_bstack
    pop rx764_pos, rx764_bstack
    pop $I19, rx764_bstack
    lt rx764_pos, -1, rx764_done2052
    lt rx764_pos, 0, rx764_fail2054
    eq $I19, 0, rx764_fail2054
    nqp_islist $I20, rx764_cstack
    unless $I20, rx764_jump2055
    elements $I18, rx764_bstack
    le $I18, 0, rx764_cut2056
    dec $I18
    set $I18, rx764_bstack[$I18]
  rx764_cut2056:
    assign rx764_cstack, $I18
  rx764_jump2055:
    jump $I19
  rx764_done2052:
    rx764_cur."!cursor_fail"()
    .return (rx764_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_400_1360256386.79") :anon :lex :outer("cuid_121_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1092

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback2061
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback2062
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5005
  fallback2062:
    unless_null $P5002, vivi_7662063
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_7662063:
    set $P5001, $P5002
  fallback2061:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator" :subid("cuid_122_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1098
    .param pmc self 
    $P5001 = self."!protoregex"("multi_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_123_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1099
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx770_tgt
    .local int rx770_pos
    .local int rx770_off
    .local int rx770_eos
    .local int rx770_rep
    .local pmc rx770_cur
    .local pmc rx770_curclass
    .local pmc rx770_bstack
    .local pmc rx770_cstack
    (rx770_cur, rx770_tgt, rx770_pos, rx770_curclass, rx770_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx770_cur
    length rx770_eos, rx770_tgt
    eq $I19, 1, rx770_restart2069
    gt rx770_pos, rx770_eos, rx770_fail2070
    repr_get_attr_int $I11, self, rx770_curclass, "$!from"
    ne $I11, -1, rxscan771_done2076
    goto rxscan771_scan2075
  rxscan771_loop2074:
    inc rx770_pos
    gt rx770_pos, rx770_eos, rx770_fail2070
    repr_bind_attr_int rx770_cur, rx770_curclass, "$!from", rx770_pos
  rxscan771_scan2075:
    nqp_rxmark rx770_bstack, rxscan771_loop2074, rx770_pos, 0
  rxscan771_done2076:
    repr_bind_attr_int rx770_cur, rx770_curclass, "$!pos", rx770_pos
    store_lex unicode:"$\x{a2}", rx770_cur
    box $P5002, "multi"
    set $P101, $P5002
    nqp_rxmark rx770_bstack, rxcap772_fail2078, rx770_pos, 0
    add $I11, rx770_pos, 5
    gt $I11, rx770_eos, rx770_fail2070
    substr $S10, rx770_tgt, rx770_pos, 5
    ne $S10, ucs4:"multi", rx770_fail2070
    add rx770_pos, 5
    nqp_rxpeek $I19, rx770_bstack, rxcap772_fail2078
    inc $I19
    set $I11, rx770_bstack[$I19]
    repr_bind_attr_int rx770_cur, rx770_curclass, "$!pos", rx770_pos
    $P11 = rx770_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx770_pos)
    rx770_cstack = rx770_cur."!cursor_capture"($P11, "sym")
    goto rxcap772_done2077
  rxcap772_fail2078:
    goto rx770_fail2070
  rxcap772_done2077:
    repr_bind_attr_int rx770_cur, rx770_curclass, "$!pos", rx770_pos
    $P11 = rx770_cur."ws"()
    repr_get_attr_int $I11, $P11, rx770_curclass, "$!pos"
    lt $I11, 0, rx770_fail2070
    repr_get_attr_int rx770_pos, $P11, rx770_curclass, "$!pos"
  alt774_02081:
    nqp_rxmark rx770_bstack, alt774_12083, rx770_pos, 0
    repr_bind_attr_int rx770_cur, rx770_curclass, "$!pos", rx770_pos
    $P11 = rx770_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx770_curclass, "$!pos"
    lt $I11, 0, rx770_fail2070
    nqp_rxmark rx770_bstack, rxsubrule775_pass2082, -1, 0
  rxsubrule775_pass2082:
    rx770_cstack = rx770_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx770_pos, $P11, rx770_curclass, "$!pos"
    goto alt774_end2080
  alt774_12083:
    nqp_rxmark rx770_bstack, alt774_22085, rx770_pos, 0
    repr_bind_attr_int rx770_cur, rx770_curclass, "$!pos", rx770_pos
    $P11 = rx770_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx770_curclass, "$!pos"
    lt $I11, 0, rx770_fail2070
    nqp_rxmark rx770_bstack, rxsubrule776_pass2084, -1, 0
  rxsubrule776_pass2084:
    rx770_cstack = rx770_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx770_pos, $P11, rx770_curclass, "$!pos"
    goto alt774_end2080
  alt774_22085:
    repr_bind_attr_int rx770_cur, rx770_curclass, "$!pos", rx770_pos
    $P11 = rx770_cur."panic"("Malformed multi")
    repr_get_attr_int $I11, $P11, rx770_curclass, "$!pos"
    lt $I11, 0, rx770_fail2070
    repr_get_attr_int rx770_pos, $P11, rx770_curclass, "$!pos"
  alt774_end2080:
    rx770_cur."!cursor_pass"(rx770_pos, "multi_declarator:sym<multi>", 'backtrack'=>1)
    .return (rx770_cur)
  rx770_restart2069:
    repr_get_attr_obj rx770_cstack, rx770_cur, rx770_curclass, "$!cstack"
  rx770_fail2070:
    unless rx770_bstack, rx770_done2068
    pop $I19, rx770_bstack
    if_null rx770_cstack, rx770_cstack_done2073
    unless rx770_cstack, rx770_cstack_done2073
    dec $I19
    set $P11, rx770_cstack[$I19]
  rx770_cstack_done2073:
    pop rx770_rep, rx770_bstack
    pop rx770_pos, rx770_bstack
    pop $I19, rx770_bstack
    lt rx770_pos, -1, rx770_done2068
    lt rx770_pos, 0, rx770_fail2070
    eq $I19, 0, rx770_fail2070
    nqp_islist $I20, rx770_cstack
    unless $I20, rx770_jump2071
    elements $I18, rx770_bstack
    le $I18, 0, rx770_cut2072
    dec $I18
    set $I18, rx770_bstack[$I18]
  rx770_cut2072:
    assign rx770_cstack, $I18
  rx770_jump2071:
    jump $I19
  rx770_done2068:
    rx770_cur."!cursor_fail"()
    .return (rx770_cur) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_124_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1104
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx778_tgt
    .local int rx778_pos
    .local int rx778_off
    .local int rx778_eos
    .local int rx778_rep
    .local pmc rx778_cur
    .local pmc rx778_curclass
    .local pmc rx778_bstack
    .local pmc rx778_cstack
    (rx778_cur, rx778_tgt, rx778_pos, rx778_curclass, rx778_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx778_cur
    length rx778_eos, rx778_tgt
    eq $I19, 1, rx778_restart2089
    gt rx778_pos, rx778_eos, rx778_fail2090
    repr_get_attr_int $I11, self, rx778_curclass, "$!from"
    ne $I11, -1, rxscan779_done2096
    goto rxscan779_scan2095
  rxscan779_loop2094:
    inc rx778_pos
    gt rx778_pos, rx778_eos, rx778_fail2090
    repr_bind_attr_int rx778_cur, rx778_curclass, "$!from", rx778_pos
  rxscan779_scan2095:
    nqp_rxmark rx778_bstack, rxscan779_loop2094, rx778_pos, 0
  rxscan779_done2096:
    repr_bind_attr_int rx778_cur, rx778_curclass, "$!pos", rx778_pos
    store_lex unicode:"$\x{a2}", rx778_cur
    box $P5002, "proto"
    set $P101, $P5002
    nqp_rxmark rx778_bstack, rxcap780_fail2098, rx778_pos, 0
    add $I11, rx778_pos, 5
    gt $I11, rx778_eos, rx778_fail2090
    substr $S10, rx778_tgt, rx778_pos, 5
    ne $S10, ucs4:"proto", rx778_fail2090
    add rx778_pos, 5
    nqp_rxpeek $I19, rx778_bstack, rxcap780_fail2098
    inc $I19
    set $I11, rx778_bstack[$I19]
    repr_bind_attr_int rx778_cur, rx778_curclass, "$!pos", rx778_pos
    $P11 = rx778_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx778_pos)
    rx778_cstack = rx778_cur."!cursor_capture"($P11, "sym")
    goto rxcap780_done2097
  rxcap780_fail2098:
    goto rx778_fail2090
  rxcap780_done2097:
    repr_bind_attr_int rx778_cur, rx778_curclass, "$!pos", rx778_pos
    $P11 = rx778_cur."ws"()
    repr_get_attr_int $I11, $P11, rx778_curclass, "$!pos"
    lt $I11, 0, rx778_fail2090
    repr_get_attr_int rx778_pos, $P11, rx778_curclass, "$!pos"
  alt782_02101:
    nqp_rxmark rx778_bstack, alt782_12103, rx778_pos, 0
    repr_bind_attr_int rx778_cur, rx778_curclass, "$!pos", rx778_pos
    $P11 = rx778_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx778_curclass, "$!pos"
    lt $I11, 0, rx778_fail2090
    nqp_rxmark rx778_bstack, rxsubrule783_pass2102, -1, 0
  rxsubrule783_pass2102:
    rx778_cstack = rx778_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx778_pos, $P11, rx778_curclass, "$!pos"
    goto alt782_end2100
  alt782_12103:
    nqp_rxmark rx778_bstack, alt782_22105, rx778_pos, 0
    repr_bind_attr_int rx778_cur, rx778_curclass, "$!pos", rx778_pos
    $P11 = rx778_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx778_curclass, "$!pos"
    lt $I11, 0, rx778_fail2090
    nqp_rxmark rx778_bstack, rxsubrule784_pass2104, -1, 0
  rxsubrule784_pass2104:
    rx778_cstack = rx778_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx778_pos, $P11, rx778_curclass, "$!pos"
    goto alt782_end2100
  alt782_22105:
    repr_bind_attr_int rx778_cur, rx778_curclass, "$!pos", rx778_pos
    $P11 = rx778_cur."panic"("Malformed proto")
    repr_get_attr_int $I11, $P11, rx778_curclass, "$!pos"
    lt $I11, 0, rx778_fail2090
    repr_get_attr_int rx778_pos, $P11, rx778_curclass, "$!pos"
  alt782_end2100:
    rx778_cur."!cursor_pass"(rx778_pos, "multi_declarator:sym<proto>", 'backtrack'=>1)
    .return (rx778_cur)
  rx778_restart2089:
    repr_get_attr_obj rx778_cstack, rx778_cur, rx778_curclass, "$!cstack"
  rx778_fail2090:
    unless rx778_bstack, rx778_done2088
    pop $I19, rx778_bstack
    if_null rx778_cstack, rx778_cstack_done2093
    unless rx778_cstack, rx778_cstack_done2093
    dec $I19
    set $P11, rx778_cstack[$I19]
  rx778_cstack_done2093:
    pop rx778_rep, rx778_bstack
    pop rx778_pos, rx778_bstack
    pop $I19, rx778_bstack
    lt rx778_pos, -1, rx778_done2088
    lt rx778_pos, 0, rx778_fail2090
    eq $I19, 0, rx778_fail2090
    nqp_islist $I20, rx778_cstack
    unless $I20, rx778_jump2091
    elements $I18, rx778_bstack
    le $I18, 0, rx778_cut2092
    dec $I18
    set $I18, rx778_bstack[$I18]
  rx778_cut2092:
    assign rx778_cstack, $I18
  rx778_jump2091:
    jump $I19
  rx778_done2088:
    rx778_cur."!cursor_fail"()
    .return (rx778_cur) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_125_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1109
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx786_tgt
    .local int rx786_pos
    .local int rx786_off
    .local int rx786_eos
    .local int rx786_rep
    .local pmc rx786_cur
    .local pmc rx786_curclass
    .local pmc rx786_bstack
    .local pmc rx786_cstack
    (rx786_cur, rx786_tgt, rx786_pos, rx786_curclass, rx786_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx786_cur
    length rx786_eos, rx786_tgt
    eq $I19, 1, rx786_restart2109
    gt rx786_pos, rx786_eos, rx786_fail2110
    repr_get_attr_int $I11, self, rx786_curclass, "$!from"
    ne $I11, -1, rxscan787_done2116
    goto rxscan787_scan2115
  rxscan787_loop2114:
    inc rx786_pos
    gt rx786_pos, rx786_eos, rx786_fail2110
    repr_bind_attr_int rx786_cur, rx786_curclass, "$!from", rx786_pos
  rxscan787_scan2115:
    nqp_rxmark rx786_bstack, rxscan787_loop2114, rx786_pos, 0
  rxscan787_done2116:
    repr_bind_attr_int rx786_cur, rx786_curclass, "$!pos", rx786_pos
    store_lex unicode:"$\x{a2}", rx786_cur
    box $P5002, ""
    set $P101, $P5002
    repr_bind_attr_int rx786_cur, rx786_curclass, "$!pos", rx786_pos
    $P11 = rx786_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx786_curclass, "$!pos"
    lt $I11, 0, rx786_fail2110
    nqp_rxmark rx786_bstack, rxsubrule788_pass2117, -1, 0
  rxsubrule788_pass2117:
    rx786_cstack = rx786_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx786_pos, $P11, rx786_curclass, "$!pos"
    rx786_cur."!cursor_pass"(rx786_pos, "multi_declarator:sym<null>", 'backtrack'=>1)
    .return (rx786_cur)
  rx786_restart2109:
    repr_get_attr_obj rx786_cstack, rx786_cur, rx786_curclass, "$!cstack"
  rx786_fail2110:
    unless rx786_bstack, rx786_done2108
    pop $I19, rx786_bstack
    if_null rx786_cstack, rx786_cstack_done2113
    unless rx786_cstack, rx786_cstack_done2113
    dec $I19
    set $P11, rx786_cstack[$I19]
  rx786_cstack_done2113:
    pop rx786_rep, rx786_bstack
    pop rx786_pos, rx786_bstack
    pop $I19, rx786_bstack
    lt rx786_pos, -1, rx786_done2108
    lt rx786_pos, 0, rx786_fail2110
    eq $I19, 0, rx786_fail2110
    nqp_islist $I20, rx786_cstack
    unless $I20, rx786_jump2111
    elements $I18, rx786_bstack
    le $I18, 0, rx786_cut2112
    dec $I18
    set $I18, rx786_bstack[$I18]
  rx786_cut2112:
    assign rx786_cstack, $I18
  rx786_jump2111:
    jump $I19
  rx786_done2108:
    rx786_cur."!cursor_fail"()
    .return (rx786_cur) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_126_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1114
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_401_1360256386.79' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_127_1360256386.79' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx789_tgt
    .local int rx789_pos
    .local int rx789_off
    .local int rx789_eos
    .local int rx789_rep
    .local pmc rx789_cur
    .local pmc rx789_curclass
    .local pmc rx789_bstack
    .local pmc rx789_cstack
    (rx789_cur, rx789_tgt, rx789_pos, rx789_curclass, rx789_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx789_cur
    length rx789_eos, rx789_tgt
    eq $I19, 1, rx789_restart2120
    gt rx789_pos, rx789_eos, rx789_fail2121
    repr_get_attr_int $I11, self, rx789_curclass, "$!from"
    ne $I11, -1, rxscan790_done2127
    goto rxscan790_scan2126
  rxscan790_loop2125:
    inc rx789_pos
    gt rx789_pos, rx789_eos, rx789_fail2121
    repr_bind_attr_int rx789_cur, rx789_curclass, "$!from", rx789_pos
  rxscan790_scan2126:
    nqp_rxmark rx789_bstack, rxscan790_loop2125, rx789_pos, 0
  rxscan790_done2127:
    nqp_rxmark rx789_bstack, rxquantr791_done2129, rx789_pos, 0
  rxquantr791_loop2128:
    repr_bind_attr_int rx789_cur, rx789_curclass, "$!pos", rx789_pos
    store_lex unicode:"$\x{a2}", rx789_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_401_1360256386.79' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx789_fail2121
    repr_bind_attr_int rx789_cur, rx789_curclass, "$!pos", rx789_pos
    $P11 = rx789_cur."ws"()
    repr_get_attr_int $I11, $P11, rx789_curclass, "$!pos"
    lt $I11, 0, rx789_fail2121
    repr_get_attr_int rx789_pos, $P11, rx789_curclass, "$!pos"
    repr_bind_attr_int rx789_cur, rx789_curclass, "$!pos", rx789_pos
    $P11 = rx789_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx789_curclass, "$!pos"
    lt $I11, 0, rx789_fail2121
    nqp_rxmark rx789_bstack, rxsubrule794_pass2134, -1, 0
  rxsubrule794_pass2134:
    rx789_cstack = rx789_cur."!cursor_capture"($P11, "invocant")
    repr_get_attr_int rx789_pos, $P11, rx789_curclass, "$!pos"
    repr_bind_attr_int rx789_cur, rx789_curclass, "$!pos", rx789_pos
    $P11 = rx789_cur."ws"()
    repr_get_attr_int $I11, $P11, rx789_curclass, "$!pos"
    lt $I11, 0, rx789_fail2121
    repr_get_attr_int rx789_pos, $P11, rx789_curclass, "$!pos"
    add $I11, rx789_pos, 1
    gt $I11, rx789_eos, rx789_fail2121
    substr $S10, rx789_tgt, rx789_pos, 1
    ne $S10, ucs4:":", rx789_fail2121
    add rx789_pos, 1
    nqp_rxpeek $I19, rx789_bstack, rxquantr791_done2129
    inc $I19
    inc $I19
    set rx789_rep, rx789_bstack[$I19]
    nqp_rxcommit rx789_bstack, rxquantr791_done2129
    inc rx789_rep
  rxquantr791_done2129:
    nqp_rxmark rx789_bstack, rxquantr796_done2137, rx789_pos, 0
  rxquantr796_loop2136:
    nqp_rxmark rx789_bstack, rxquantr797_done2139, rx789_pos, 0
  rxquantr797_loop2138:
    repr_bind_attr_int rx789_cur, rx789_curclass, "$!pos", rx789_pos
    $P11 = rx789_cur."ws"()
    repr_get_attr_int $I11, $P11, rx789_curclass, "$!pos"
    lt $I11, 0, rx789_fail2121
    repr_get_attr_int rx789_pos, $P11, rx789_curclass, "$!pos"
    repr_bind_attr_int rx789_cur, rx789_curclass, "$!pos", rx789_pos
    $P11 = rx789_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx789_curclass, "$!pos"
    lt $I11, 0, rx789_fail2121
    nqp_rxmark rx789_bstack, rxsubrule799_pass2141, -1, 0
  rxsubrule799_pass2141:
    rx789_cstack = rx789_cur."!cursor_capture"($P11, "parameter")
    repr_get_attr_int rx789_pos, $P11, rx789_curclass, "$!pos"
    repr_bind_attr_int rx789_cur, rx789_curclass, "$!pos", rx789_pos
    $P11 = rx789_cur."ws"()
    repr_get_attr_int $I11, $P11, rx789_curclass, "$!pos"
    lt $I11, 0, rx789_fail2121
    repr_get_attr_int rx789_pos, $P11, rx789_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt801_02144
    nqp_push_label $P11, alt801_12145
    nqp_rxmark rx789_bstack, alt801_end2143, -1, 0
    rx789_cur."!alt"(rx789_pos, "alt_nfa__26_1360256389.148", $P11)
    goto rx789_fail2121
  alt801_02144:
    add $I11, rx789_pos, 1
    gt $I11, rx789_eos, rx789_fail2121
    substr $S10, rx789_tgt, rx789_pos, 1
    ne $S10, ucs4:",", rx789_fail2121
    add rx789_pos, 1
    goto alt801_end2143
  alt801_12145:
    .const 'Sub' $P5004 = 'cuid_127_1360256386.79' 
    capture_lex $P5004
    repr_bind_attr_int rx789_cur, rx789_curclass, "$!pos", rx789_pos
    $P11 = rx789_cur."before"($P5004)
    repr_get_attr_int $I11, $P11, rx789_curclass, "$!pos"
    lt $I11, 0, rx789_fail2121
    nqp_rxmark rx789_bstack, rxsubrule806_pass2161, -1, 0
  rxsubrule806_pass2161:
    rx789_cstack = rx789_cur."!cursor_capture"($P11, "before")
    repr_get_attr_int rx789_pos, $P11, rx789_curclass, "$!pos"
    goto alt801_end2143
  alt801_end2143:
    nqp_rxcommit rx789_bstack, alt801_end2143
    nqp_rxpeek $I19, rx789_bstack, rxquantr797_done2139
    inc $I19
    inc $I19
    set rx789_rep, rx789_bstack[$I19]
    nqp_rxcommit rx789_bstack, rxquantr797_done2139
    inc rx789_rep
    nqp_rxmark rx789_bstack, rxquantr797_done2139, rx789_pos, rx789_rep
    goto rxquantr797_loop2138
  rxquantr797_done2139:
    nqp_rxpeek $I19, rx789_bstack, rxquantr796_done2137
    inc $I19
    inc $I19
    set rx789_rep, rx789_bstack[$I19]
    nqp_rxcommit rx789_bstack, rxquantr796_done2137
    inc rx789_rep
  rxquantr796_done2137:
    rx789_cur."!cursor_pass"(rx789_pos, "signature", 'backtrack'=>1)
    .return (rx789_cur)
  rx789_restart2120:
    repr_get_attr_obj rx789_cstack, rx789_cur, rx789_curclass, "$!cstack"
  rx789_fail2121:
    unless rx789_bstack, rx789_done2119
    pop $I19, rx789_bstack
    if_null rx789_cstack, rx789_cstack_done2124
    unless rx789_cstack, rx789_cstack_done2124
    dec $I19
    set $P11, rx789_cstack[$I19]
  rx789_cstack_done2124:
    pop rx789_rep, rx789_bstack
    pop rx789_pos, rx789_bstack
    pop $I19, rx789_bstack
    lt rx789_pos, -1, rx789_done2119
    lt rx789_pos, 0, rx789_fail2121
    eq $I19, 0, rx789_fail2121
    nqp_islist $I20, rx789_cstack
    unless $I20, rx789_jump2122
    elements $I18, rx789_bstack
    le $I18, 0, rx789_cut2123
    dec $I18
    set $I18, rx789_bstack[$I18]
  rx789_cut2123:
    assign rx789_cstack, $I18
  rx789_jump2122:
    jump $I19
  rx789_done2119:
    rx789_cur."!cursor_fail"()
    .return (rx789_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_401_1360256386.79") :anon :lex :outer("cuid_126_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1115

    find_dynamic_lex $P5001, "$*INVOCANT_OK"
    unless_null $P5001, fallback2130
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$INVOCANT_OK"]
    unless_null $P5002, fallback2131
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5005
  fallback2131:
    unless_null $P5002, vivi_7922132
    die "Contextual $*INVOCANT_OK not found"
    box $P5006, "Contextual $*INVOCANT_OK not found"
    set $P5002, $P5006
  vivi_7922132:
    set $P5001, $P5002
  fallback2130:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_127_1360256386.79") :anon :lex :outer("cuid_126_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx802_tgt
    .local int rx802_pos
    .local int rx802_off
    .local int rx802_eos
    .local int rx802_rep
    .local pmc rx802_cur
    .local pmc rx802_curclass
    .local pmc rx802_bstack
    .local pmc rx802_cstack
    (rx802_cur, rx802_tgt, rx802_pos, rx802_curclass, rx802_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx802_cur
    length rx802_eos, rx802_tgt
    eq $I19, 1, rx802_restart2148
    gt rx802_pos, rx802_eos, rx802_fail2149
    repr_get_attr_int $I11, self, rx802_curclass, "$!from"
    ne $I11, -1, rxscan803_done2155
    goto rxscan803_scan2154
  rxscan803_loop2153:
    inc rx802_pos
    gt rx802_pos, rx802_eos, rx802_fail2149
    repr_bind_attr_int rx802_cur, rx802_curclass, "$!from", rx802_pos
  rxscan803_scan2154:
    nqp_rxmark rx802_bstack, rxscan803_loop2153, rx802_pos, 0
  rxscan803_done2155:
    nqp_rxmark rx802_bstack, rxquantr804_done2157, rx802_pos, 0
  rxquantr804_loop2156:
    ge rx802_pos, rx802_eos, rx802_fail2149
    is_cclass $I11, .CCLASS_WHITESPACE, rx802_tgt, rx802_pos
    unless $I11, rx802_fail2149
    add rx802_pos, 1
    nqp_rxpeek $I19, rx802_bstack, rxquantr804_done2157
    inc $I19
    inc $I19
    set rx802_rep, rx802_bstack[$I19]
    nqp_rxcommit rx802_bstack, rxquantr804_done2157
    inc rx802_rep
    nqp_rxmark rx802_bstack, rxquantr804_done2157, rx802_pos, rx802_rep
    goto rxquantr804_loop2156
  rxquantr804_done2157:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt805_02159
    nqp_push_label $P11, alt805_12160
    nqp_rxmark rx802_bstack, alt805_end2158, -1, 0
    rx802_cur."!alt"(rx802_pos, "alt_nfa__25_1360256389.142", $P11)
    goto rx802_fail2149
  alt805_02159:
    add $I11, rx802_pos, 1
    gt $I11, rx802_eos, rx802_fail2149
    substr $S10, rx802_tgt, rx802_pos, 1
    ne $S10, ucs4:")", rx802_fail2149
    add rx802_pos, 1
    goto alt805_end2158
  alt805_12160:
    add $I11, rx802_pos, 1
    gt $I11, rx802_eos, rx802_fail2149
    substr $S10, rx802_tgt, rx802_pos, 1
    ne $S10, ucs4:"{", rx802_fail2149
    add rx802_pos, 1
    goto alt805_end2158
  alt805_end2158:
    nqp_rxcommit rx802_bstack, alt805_end2158
    rx802_cur."!cursor_pass"(rx802_pos, 'backtrack'=>1)
    .return (rx802_cur)
  rx802_restart2148:
    repr_get_attr_obj rx802_cstack, rx802_cur, rx802_curclass, "$!cstack"
  rx802_fail2149:
    unless rx802_bstack, rx802_done2147
    pop $I19, rx802_bstack
    if_null rx802_cstack, rx802_cstack_done2152
    unless rx802_cstack, rx802_cstack_done2152
    dec $I19
    set $P11, rx802_cstack[$I19]
  rx802_cstack_done2152:
    pop rx802_rep, rx802_bstack
    pop rx802_pos, rx802_bstack
    pop $I19, rx802_bstack
    lt rx802_pos, -1, rx802_done2147
    lt rx802_pos, 0, rx802_fail2149
    eq $I19, 0, rx802_fail2149
    nqp_islist $I20, rx802_cstack
    unless $I20, rx802_jump2150
    elements $I18, rx802_bstack
    le $I18, 0, rx802_cut2151
    dec $I18
    set $I18, rx802_bstack[$I18]
  rx802_cut2151:
    assign rx802_cstack, $I18
  rx802_jump2150:
    jump $I19
  rx802_done2147:
    rx802_cur."!cursor_fail"()
    .return (rx802_cur) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_128_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1119
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx807_tgt
    .local int rx807_pos
    .local int rx807_off
    .local int rx807_eos
    .local int rx807_rep
    .local pmc rx807_cur
    .local pmc rx807_curclass
    .local pmc rx807_bstack
    .local pmc rx807_cstack
    (rx807_cur, rx807_tgt, rx807_pos, rx807_curclass, rx807_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx807_cur
    length rx807_eos, rx807_tgt
    eq $I19, 1, rx807_restart2164
    gt rx807_pos, rx807_eos, rx807_fail2165
    repr_get_attr_int $I11, self, rx807_curclass, "$!from"
    ne $I11, -1, rxscan808_done2171
    goto rxscan808_scan2170
  rxscan808_loop2169:
    inc rx807_pos
    gt rx807_pos, rx807_eos, rx807_fail2165
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!from", rx807_pos
  rxscan808_scan2170:
    nqp_rxmark rx807_bstack, rxscan808_loop2169, rx807_pos, 0
  rxscan808_done2171:
    nqp_rxmark rx807_bstack, rxquantr809_done2173, rx807_pos, 0
  rxquantr809_loop2172:
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."typename"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2165
    nqp_rxmark rx807_bstack, rxsubrule810_pass2174, -1, 0
  rxsubrule810_pass2174:
    rx807_cstack = rx807_cur."!cursor_capture"($P11, "typename")
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    nqp_rxmark rx807_bstack, rxquantr811_done2176, rx807_pos, 0
  rxquantr811_loop2175:
    add $I11, rx807_pos, 1
    gt $I11, rx807_eos, rx807_fail2165
    substr $S10, rx807_tgt, rx807_pos, 1
    ne $S10, ucs4:":", rx807_fail2165
    add rx807_pos, 1
    nqp_rxmark rx807_bstack, rxcap812_fail2178, rx807_pos, 0
    ge rx807_pos, rx807_eos, rx807_fail2165
    substr $S11, rx807_tgt, rx807_pos, 1
    index $I11, ucs4:"_DU", $S11
    lt $I11, 0, rx807_fail2165
    inc rx807_pos
    nqp_rxpeek $I19, rx807_bstack, rxcap812_fail2178
    inc $I19
    set $I11, rx807_bstack[$I19]
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx807_pos)
    rx807_cstack = rx807_cur."!cursor_capture"($P11, "definedness")
    goto rxcap812_done2177
  rxcap812_fail2178:
    goto rx807_fail2165
  rxcap812_done2177:
    nqp_rxpeek $I19, rx807_bstack, rxquantr811_done2176
    inc $I19
    inc $I19
    set rx807_rep, rx807_bstack[$I19]
    nqp_rxcommit rx807_bstack, rxquantr811_done2176
    inc rx807_rep
  rxquantr811_done2176:
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2165
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    nqp_rxpeek $I19, rx807_bstack, rxquantr809_done2173
    inc $I19
    inc $I19
    set rx807_rep, rx807_bstack[$I19]
    nqp_rxcommit rx807_bstack, rxquantr809_done2173
    inc rx807_rep
    nqp_rxmark rx807_bstack, rxquantr809_done2173, rx807_pos, rx807_rep
    goto rxquantr809_loop2172
  rxquantr809_done2173:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt814_02181
    nqp_push_label $P11, alt814_12185
    nqp_rxmark rx807_bstack, alt814_end2180, -1, 0
    rx807_cur."!alt"(rx807_pos, "alt_nfa__29_1360256389.172", $P11)
    goto rx807_fail2165
  alt814_02181:
    nqp_rxmark rx807_bstack, rxcap815_fail2183, rx807_pos, 0
    add $I11, rx807_pos, 1
    gt $I11, rx807_eos, rx807_fail2165
    substr $S10, rx807_tgt, rx807_pos, 1
    ne $S10, ucs4:"*", rx807_fail2165
    add rx807_pos, 1
    nqp_rxpeek $I19, rx807_bstack, rxcap815_fail2183
    inc $I19
    set $I11, rx807_bstack[$I19]
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx807_pos)
    rx807_cstack = rx807_cur."!cursor_capture"($P11, "quant")
    goto rxcap815_done2182
  rxcap815_fail2183:
    goto rx807_fail2165
  rxcap815_done2182:
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2165
    nqp_rxmark rx807_bstack, rxsubrule816_pass2184, -1, 0
  rxsubrule816_pass2184:
    rx807_cstack = rx807_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    goto alt814_end2180
  alt814_12185:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt817_02187
    nqp_push_label $P11, alt817_12189
    nqp_rxmark rx807_bstack, alt817_end2186, -1, 0
    rx807_cur."!alt"(rx807_pos, "alt_nfa__27_1360256389.172", $P11)
    goto rx807_fail2165
  alt817_02187:
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2165
    nqp_rxmark rx807_bstack, rxsubrule818_pass2188, -1, 0
  rxsubrule818_pass2188:
    rx807_cstack = rx807_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    goto alt817_end2186
  alt817_12189:
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."named_param"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2165
    nqp_rxmark rx807_bstack, rxsubrule819_pass2190, -1, 0
  rxsubrule819_pass2190:
    rx807_cstack = rx807_cur."!cursor_capture"($P11, "named_param")
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    goto alt817_end2186
  alt817_end2186:
    nqp_rxcommit rx807_bstack, alt817_end2186
    nqp_rxmark rx807_bstack, rxcap820_fail2192, rx807_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt821_02194
    nqp_push_label $P11, alt821_12195
    nqp_push_label $P11, alt821_22196
    nqp_rxmark rx807_bstack, alt821_end2193, -1, 0
    rx807_cur."!alt"(rx807_pos, "alt_nfa__28_1360256389.172", $P11)
    goto rx807_fail2165
  alt821_02194:
    add $I11, rx807_pos, 1
    gt $I11, rx807_eos, rx807_fail2165
    substr $S10, rx807_tgt, rx807_pos, 1
    ne $S10, ucs4:"?", rx807_fail2165
    add rx807_pos, 1
    goto alt821_end2193
  alt821_12195:
    add $I11, rx807_pos, 1
    gt $I11, rx807_eos, rx807_fail2165
    substr $S10, rx807_tgt, rx807_pos, 1
    ne $S10, ucs4:"!", rx807_fail2165
    add rx807_pos, 1
    goto alt821_end2193
  alt821_22196:
    goto alt821_end2193
  alt821_end2193:
    nqp_rxcommit rx807_bstack, alt821_end2193
    nqp_rxpeek $I19, rx807_bstack, rxcap820_fail2192
    inc $I19
    set $I11, rx807_bstack[$I19]
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx807_pos)
    rx807_cstack = rx807_cur."!cursor_capture"($P11, "quant")
    goto rxcap820_done2191
  rxcap820_fail2192:
    goto rx807_fail2165
  rxcap820_done2191:
    goto alt814_end2180
  alt814_end2180:
    nqp_rxcommit rx807_bstack, alt814_end2180
    nqp_rxmark rx807_bstack, rxquantr823_done2199, rx807_pos, 0
  rxquantr823_loop2198:
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."default_value"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2165
    goto rxsubrule824_pass2200
  rxsubrule824_back2201:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2165
  rxsubrule824_pass2200:
    rx807_cstack = rx807_cur."!cursor_capture"($P11, "default_value")
    set_addr $I11, rxsubrule824_back2201
    push rx807_bstack, $I11
    push rx807_bstack, 0
    push rx807_bstack, rx807_pos
    elements $I11, rx807_cstack
    push rx807_bstack, $I11
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    nqp_rxpeek $I19, rx807_bstack, rxquantr823_done2199
    inc $I19
    inc $I19
    set rx807_rep, rx807_bstack[$I19]
    nqp_rxcommit rx807_bstack, rxquantr823_done2199
    inc rx807_rep
  rxquantr823_done2199:
    rx807_cur."!cursor_pass"(rx807_pos, "parameter", 'backtrack'=>1)
    .return (rx807_cur)
  rx807_restart2164:
    repr_get_attr_obj rx807_cstack, rx807_cur, rx807_curclass, "$!cstack"
  rx807_fail2165:
    unless rx807_bstack, rx807_done2163
    pop $I19, rx807_bstack
    if_null rx807_cstack, rx807_cstack_done2168
    unless rx807_cstack, rx807_cstack_done2168
    dec $I19
    set $P11, rx807_cstack[$I19]
  rx807_cstack_done2168:
    pop rx807_rep, rx807_bstack
    pop rx807_pos, rx807_bstack
    pop $I19, rx807_bstack
    lt rx807_pos, -1, rx807_done2163
    lt rx807_pos, 0, rx807_fail2165
    eq $I19, 0, rx807_fail2165
    nqp_islist $I20, rx807_cstack
    unless $I20, rx807_jump2166
    elements $I18, rx807_bstack
    le $I18, 0, rx807_cut2167
    dec $I18
    set $I18, rx807_bstack[$I18]
  rx807_cut2167:
    assign rx807_cstack, $I18
  rx807_jump2166:
    jump $I19
  rx807_done2163:
    rx807_cur."!cursor_fail"()
    .return (rx807_cur) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_129_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1128
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx825_tgt
    .local int rx825_pos
    .local int rx825_off
    .local int rx825_eos
    .local int rx825_rep
    .local pmc rx825_cur
    .local pmc rx825_curclass
    .local pmc rx825_bstack
    .local pmc rx825_cstack
    (rx825_cur, rx825_tgt, rx825_pos, rx825_curclass, rx825_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx825_cur
    length rx825_eos, rx825_tgt
    eq $I19, 1, rx825_restart2204
    gt rx825_pos, rx825_eos, rx825_fail2205
    repr_get_attr_int $I11, self, rx825_curclass, "$!from"
    ne $I11, -1, rxscan826_done2211
    goto rxscan826_scan2210
  rxscan826_loop2209:
    inc rx825_pos
    gt rx825_pos, rx825_eos, rx825_fail2205
    repr_bind_attr_int rx825_cur, rx825_curclass, "$!from", rx825_pos
  rxscan826_scan2210:
    nqp_rxmark rx825_bstack, rxscan826_loop2209, rx825_pos, 0
  rxscan826_done2211:
    repr_bind_attr_int rx825_cur, rx825_curclass, "$!pos", rx825_pos
    $P11 = rx825_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx825_curclass, "$!pos"
    lt $I11, 0, rx825_fail2205
    nqp_rxmark rx825_bstack, rxsubrule827_pass2212, -1, 0
  rxsubrule827_pass2212:
    rx825_cstack = rx825_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx825_pos, $P11, rx825_curclass, "$!pos"
    nqp_rxmark rx825_bstack, rxquantr828_done2214, rx825_pos, 0
  rxquantr828_loop2213:
    repr_bind_attr_int rx825_cur, rx825_curclass, "$!pos", rx825_pos
    $P11 = rx825_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx825_curclass, "$!pos"
    lt $I11, 0, rx825_fail2205
    goto rxsubrule829_pass2215
  rxsubrule829_back2216:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx825_curclass, "$!pos"
    lt $I11, 0, rx825_fail2205
  rxsubrule829_pass2215:
    rx825_cstack = rx825_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule829_back2216
    push rx825_bstack, $I11
    push rx825_bstack, 0
    push rx825_bstack, rx825_pos
    elements $I11, rx825_cstack
    push rx825_bstack, $I11
    repr_get_attr_int rx825_pos, $P11, rx825_curclass, "$!pos"
    nqp_rxpeek $I19, rx825_bstack, rxquantr828_done2214
    inc $I19
    inc $I19
    set rx825_rep, rx825_bstack[$I19]
    nqp_rxcommit rx825_bstack, rxquantr828_done2214
    inc rx825_rep
  rxquantr828_done2214:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt830_02218
    nqp_push_label $P11, alt830_12220
    nqp_rxmark rx825_bstack, alt830_end2217, -1, 0
    rx825_cur."!alt"(rx825_pos, "alt_nfa__30_1360256389.183", $P11)
    goto rx825_fail2205
  alt830_02218:
    repr_bind_attr_int rx825_cur, rx825_curclass, "$!pos", rx825_pos
    $P11 = rx825_cur."ident"()
    repr_get_attr_int $I11, $P11, rx825_curclass, "$!pos"
    lt $I11, 0, rx825_fail2205
    nqp_rxmark rx825_bstack, rxsubrule831_pass2219, -1, 0
  rxsubrule831_pass2219:
    rx825_cstack = rx825_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx825_pos, $P11, rx825_curclass, "$!pos"
    goto alt830_end2217
  alt830_12220:
    nqp_rxmark rx825_bstack, rxcap832_fail2222, rx825_pos, 0
    ge rx825_pos, rx825_eos, rx825_fail2205
    substr $S11, rx825_tgt, rx825_pos, 1
    index $I11, ucs4:"/!", $S11
    lt $I11, 0, rx825_fail2205
    inc rx825_pos
    nqp_rxpeek $I19, rx825_bstack, rxcap832_fail2222
    inc $I19
    set $I11, rx825_bstack[$I19]
    repr_bind_attr_int rx825_cur, rx825_curclass, "$!pos", rx825_pos
    $P11 = rx825_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx825_pos)
    rx825_cstack = rx825_cur."!cursor_capture"($P11, "name")
    goto rxcap832_done2221
  rxcap832_fail2222:
    goto rx825_fail2205
  rxcap832_done2221:
    goto alt830_end2217
  alt830_end2217:
    nqp_rxcommit rx825_bstack, alt830_end2217
    rx825_cur."!cursor_pass"(rx825_pos, "param_var", 'backtrack'=>1)
    .return (rx825_cur)
  rx825_restart2204:
    repr_get_attr_obj rx825_cstack, rx825_cur, rx825_curclass, "$!cstack"
  rx825_fail2205:
    unless rx825_bstack, rx825_done2203
    pop $I19, rx825_bstack
    if_null rx825_cstack, rx825_cstack_done2208
    unless rx825_cstack, rx825_cstack_done2208
    dec $I19
    set $P11, rx825_cstack[$I19]
  rx825_cstack_done2208:
    pop rx825_rep, rx825_bstack
    pop rx825_pos, rx825_bstack
    pop $I19, rx825_bstack
    lt rx825_pos, -1, rx825_done2203
    lt rx825_pos, 0, rx825_fail2205
    eq $I19, 0, rx825_fail2205
    nqp_islist $I20, rx825_cstack
    unless $I20, rx825_jump2206
    elements $I18, rx825_bstack
    le $I18, 0, rx825_cut2207
    dec $I18
    set $I18, rx825_bstack[$I18]
  rx825_cut2207:
    assign rx825_cstack, $I18
  rx825_jump2206:
    jump $I19
  rx825_done2203:
    rx825_cur."!cursor_fail"()
    .return (rx825_cur) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_130_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1133
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx833_tgt
    .local int rx833_pos
    .local int rx833_off
    .local int rx833_eos
    .local int rx833_rep
    .local pmc rx833_cur
    .local pmc rx833_curclass
    .local pmc rx833_bstack
    .local pmc rx833_cstack
    (rx833_cur, rx833_tgt, rx833_pos, rx833_curclass, rx833_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx833_cur
    length rx833_eos, rx833_tgt
    eq $I19, 1, rx833_restart2225
    gt rx833_pos, rx833_eos, rx833_fail2226
    repr_get_attr_int $I11, self, rx833_curclass, "$!from"
    ne $I11, -1, rxscan834_done2232
    goto rxscan834_scan2231
  rxscan834_loop2230:
    inc rx833_pos
    gt rx833_pos, rx833_eos, rx833_fail2226
    repr_bind_attr_int rx833_cur, rx833_curclass, "$!from", rx833_pos
  rxscan834_scan2231:
    nqp_rxmark rx833_bstack, rxscan834_loop2230, rx833_pos, 0
  rxscan834_done2232:
    add $I11, rx833_pos, 1
    gt $I11, rx833_eos, rx833_fail2226
    substr $S10, rx833_tgt, rx833_pos, 1
    ne $S10, ucs4:":", rx833_fail2226
    add rx833_pos, 1
    repr_bind_attr_int rx833_cur, rx833_curclass, "$!pos", rx833_pos
    $P11 = rx833_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx833_curclass, "$!pos"
    lt $I11, 0, rx833_fail2226
    nqp_rxmark rx833_bstack, rxsubrule835_pass2233, -1, 0
  rxsubrule835_pass2233:
    rx833_cstack = rx833_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx833_pos, $P11, rx833_curclass, "$!pos"
    rx833_cur."!cursor_pass"(rx833_pos, "named_param", 'backtrack'=>1)
    .return (rx833_cur)
  rx833_restart2225:
    repr_get_attr_obj rx833_cstack, rx833_cur, rx833_curclass, "$!cstack"
  rx833_fail2226:
    unless rx833_bstack, rx833_done2224
    pop $I19, rx833_bstack
    if_null rx833_cstack, rx833_cstack_done2229
    unless rx833_cstack, rx833_cstack_done2229
    dec $I19
    set $P11, rx833_cstack[$I19]
  rx833_cstack_done2229:
    pop rx833_rep, rx833_bstack
    pop rx833_pos, rx833_bstack
    pop $I19, rx833_bstack
    lt rx833_pos, -1, rx833_done2224
    lt rx833_pos, 0, rx833_fail2226
    eq $I19, 0, rx833_fail2226
    nqp_islist $I20, rx833_cstack
    unless $I20, rx833_jump2227
    elements $I18, rx833_bstack
    le $I18, 0, rx833_cut2228
    dec $I18
    set $I18, rx833_bstack[$I18]
  rx833_cut2228:
    assign rx833_cstack, $I18
  rx833_jump2227:
    jump $I19
  rx833_done2224:
    rx833_cur."!cursor_fail"()
    .return (rx833_cur) 
.end
.HLL "nqp"
.namespace []
.sub "default_value" :subid("cuid_131_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1137
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx836_tgt
    .local int rx836_pos
    .local int rx836_off
    .local int rx836_eos
    .local int rx836_rep
    .local pmc rx836_cur
    .local pmc rx836_curclass
    .local pmc rx836_bstack
    .local pmc rx836_cstack
    (rx836_cur, rx836_tgt, rx836_pos, rx836_curclass, rx836_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx836_cur
    length rx836_eos, rx836_tgt
    eq $I19, 1, rx836_restart2236
    gt rx836_pos, rx836_eos, rx836_fail2237
    repr_get_attr_int $I11, self, rx836_curclass, "$!from"
    ne $I11, -1, rxscan837_done2243
    goto rxscan837_scan2242
  rxscan837_loop2241:
    inc rx836_pos
    gt rx836_pos, rx836_eos, rx836_fail2237
    repr_bind_attr_int rx836_cur, rx836_curclass, "$!from", rx836_pos
  rxscan837_scan2242:
    nqp_rxmark rx836_bstack, rxscan837_loop2241, rx836_pos, 0
  rxscan837_done2243:
    repr_bind_attr_int rx836_cur, rx836_curclass, "$!pos", rx836_pos
    $P11 = rx836_cur."ws"()
    repr_get_attr_int $I11, $P11, rx836_curclass, "$!pos"
    lt $I11, 0, rx836_fail2237
    repr_get_attr_int rx836_pos, $P11, rx836_curclass, "$!pos"
    add $I11, rx836_pos, 1
    gt $I11, rx836_eos, rx836_fail2237
    substr $S10, rx836_tgt, rx836_pos, 1
    ne $S10, ucs4:"=", rx836_fail2237
    add rx836_pos, 1
    repr_bind_attr_int rx836_cur, rx836_curclass, "$!pos", rx836_pos
    $P11 = rx836_cur."ws"()
    repr_get_attr_int $I11, $P11, rx836_curclass, "$!pos"
    lt $I11, 0, rx836_fail2237
    repr_get_attr_int rx836_pos, $P11, rx836_curclass, "$!pos"
    repr_bind_attr_int rx836_cur, rx836_curclass, "$!pos", rx836_pos
    $P11 = rx836_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx836_curclass, "$!pos"
    lt $I11, 0, rx836_fail2237
    nqp_rxmark rx836_bstack, rxsubrule840_pass2246, -1, 0
  rxsubrule840_pass2246:
    rx836_cstack = rx836_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx836_pos, $P11, rx836_curclass, "$!pos"
    repr_bind_attr_int rx836_cur, rx836_curclass, "$!pos", rx836_pos
    $P11 = rx836_cur."ws"()
    repr_get_attr_int $I11, $P11, rx836_curclass, "$!pos"
    lt $I11, 0, rx836_fail2237
    repr_get_attr_int rx836_pos, $P11, rx836_curclass, "$!pos"
    rx836_cur."!cursor_pass"(rx836_pos, "default_value", 'backtrack'=>1)
    .return (rx836_cur)
  rx836_restart2236:
    repr_get_attr_obj rx836_cstack, rx836_cur, rx836_curclass, "$!cstack"
  rx836_fail2237:
    unless rx836_bstack, rx836_done2235
    pop $I19, rx836_bstack
    if_null rx836_cstack, rx836_cstack_done2240
    unless rx836_cstack, rx836_cstack_done2240
    dec $I19
    set $P11, rx836_cstack[$I19]
  rx836_cstack_done2240:
    pop rx836_rep, rx836_bstack
    pop rx836_pos, rx836_bstack
    pop $I19, rx836_bstack
    lt rx836_pos, -1, rx836_done2235
    lt rx836_pos, 0, rx836_fail2237
    eq $I19, 0, rx836_fail2237
    nqp_islist $I20, rx836_cstack
    unless $I20, rx836_jump2238
    elements $I18, rx836_bstack
    le $I18, 0, rx836_cut2239
    dec $I18
    set $I18, rx836_bstack[$I18]
  rx836_cut2239:
    assign rx836_cstack, $I18
  rx836_jump2238:
    jump $I19
  rx836_done2235:
    rx836_cur."!cursor_fail"()
    .return (rx836_cur) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_132_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1139
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx842_tgt
    .local int rx842_pos
    .local int rx842_off
    .local int rx842_eos
    .local int rx842_rep
    .local pmc rx842_cur
    .local pmc rx842_curclass
    .local pmc rx842_bstack
    .local pmc rx842_cstack
    (rx842_cur, rx842_tgt, rx842_pos, rx842_curclass, rx842_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx842_cur
    length rx842_eos, rx842_tgt
    eq $I19, 1, rx842_restart2250
    gt rx842_pos, rx842_eos, rx842_fail2251
    repr_get_attr_int $I11, self, rx842_curclass, "$!from"
    ne $I11, -1, rxscan843_done2257
    goto rxscan843_scan2256
  rxscan843_loop2255:
    inc rx842_pos
    gt rx842_pos, rx842_eos, rx842_fail2251
    repr_bind_attr_int rx842_cur, rx842_curclass, "$!from", rx842_pos
  rxscan843_scan2256:
    nqp_rxmark rx842_bstack, rxscan843_loop2255, rx842_pos, 0
  rxscan843_done2257:
    repr_bind_attr_int rx842_cur, rx842_curclass, "$!pos", rx842_pos
    $P11 = rx842_cur."ws"()
    repr_get_attr_int $I11, $P11, rx842_curclass, "$!pos"
    lt $I11, 0, rx842_fail2251
    repr_get_attr_int rx842_pos, $P11, rx842_curclass, "$!pos"
    repr_bind_attr_int rx842_cur, rx842_curclass, "$!pos", rx842_pos
    $P11 = rx842_cur."trait_mod"()
    repr_get_attr_int $I11, $P11, rx842_curclass, "$!pos"
    lt $I11, 0, rx842_fail2251
    nqp_rxmark rx842_bstack, rxsubrule845_pass2259, -1, 0
  rxsubrule845_pass2259:
    rx842_cstack = rx842_cur."!cursor_capture"($P11, "trait_mod")
    repr_get_attr_int rx842_pos, $P11, rx842_curclass, "$!pos"
    repr_bind_attr_int rx842_cur, rx842_curclass, "$!pos", rx842_pos
    $P11 = rx842_cur."ws"()
    repr_get_attr_int $I11, $P11, rx842_curclass, "$!pos"
    lt $I11, 0, rx842_fail2251
    repr_get_attr_int rx842_pos, $P11, rx842_curclass, "$!pos"
    rx842_cur."!cursor_pass"(rx842_pos, "trait", 'backtrack'=>1)
    .return (rx842_cur)
  rx842_restart2250:
    repr_get_attr_obj rx842_cstack, rx842_cur, rx842_curclass, "$!cstack"
  rx842_fail2251:
    unless rx842_bstack, rx842_done2249
    pop $I19, rx842_bstack
    if_null rx842_cstack, rx842_cstack_done2254
    unless rx842_cstack, rx842_cstack_done2254
    dec $I19
    set $P11, rx842_cstack[$I19]
  rx842_cstack_done2254:
    pop rx842_rep, rx842_bstack
    pop rx842_pos, rx842_bstack
    pop $I19, rx842_bstack
    lt rx842_pos, -1, rx842_done2249
    lt rx842_pos, 0, rx842_fail2251
    eq $I19, 0, rx842_fail2251
    nqp_islist $I20, rx842_cstack
    unless $I20, rx842_jump2252
    elements $I18, rx842_bstack
    le $I18, 0, rx842_cut2253
    dec $I18
    set $I18, rx842_bstack[$I18]
  rx842_cut2253:
    assign rx842_cstack, $I18
  rx842_jump2252:
    jump $I19
  rx842_done2249:
    rx842_cur."!cursor_fail"()
    .return (rx842_cur) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod" :subid("cuid_133_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1141
    .param pmc self 
    $P5001 = self."!protoregex"("trait_mod")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_134_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1142
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx847_tgt
    .local int rx847_pos
    .local int rx847_off
    .local int rx847_eos
    .local int rx847_rep
    .local pmc rx847_cur
    .local pmc rx847_curclass
    .local pmc rx847_bstack
    .local pmc rx847_cstack
    (rx847_cur, rx847_tgt, rx847_pos, rx847_curclass, rx847_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx847_cur
    length rx847_eos, rx847_tgt
    eq $I19, 1, rx847_restart2263
    gt rx847_pos, rx847_eos, rx847_fail2264
    repr_get_attr_int $I11, self, rx847_curclass, "$!from"
    ne $I11, -1, rxscan848_done2270
    goto rxscan848_scan2269
  rxscan848_loop2268:
    inc rx847_pos
    gt rx847_pos, rx847_eos, rx847_fail2264
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!from", rx847_pos
  rxscan848_scan2269:
    nqp_rxmark rx847_bstack, rxscan848_loop2268, rx847_pos, 0
  rxscan848_done2270:
    nqp_rxmark rx847_bstack, rxcap849_fail2272, rx847_pos, 0
    add $I11, rx847_pos, 2
    gt $I11, rx847_eos, rx847_fail2264
    substr $S10, rx847_tgt, rx847_pos, 2
    ne $S10, ucs4:"is", rx847_fail2264
    add rx847_pos, 2
    nqp_rxpeek $I19, rx847_bstack, rxcap849_fail2272
    inc $I19
    set $I11, rx847_bstack[$I19]
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx847_pos)
    rx847_cstack = rx847_cur."!cursor_capture"($P11, "sym")
    goto rxcap849_done2271
  rxcap849_fail2272:
    goto rx847_fail2264
  rxcap849_done2271:
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2264
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2264
    nqp_rxmark rx847_bstack, rxsubrule851_pass2274, -1, 0
  rxsubrule851_pass2274:
    rx847_cstack = rx847_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    nqp_rxmark rx847_bstack, rxquantr852_done2276, rx847_pos, 0
  rxquantr852_loop2275:
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2264
    goto rxsubrule853_pass2277
  rxsubrule853_back2278:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2264
  rxsubrule853_pass2277:
    rx847_cstack = rx847_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule853_back2278
    push rx847_bstack, $I11
    push rx847_bstack, 0
    push rx847_bstack, rx847_pos
    elements $I11, rx847_cstack
    push rx847_bstack, $I11
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    nqp_rxpeek $I19, rx847_bstack, rxquantr852_done2276
    inc $I19
    inc $I19
    set rx847_rep, rx847_bstack[$I19]
    nqp_rxcommit rx847_bstack, rxquantr852_done2276
    inc rx847_rep
  rxquantr852_done2276:
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."ws"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2264
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    rx847_cur."!cursor_pass"(rx847_pos, "trait_mod:sym<is>", 'backtrack'=>1)
    .return (rx847_cur)
  rx847_restart2263:
    repr_get_attr_obj rx847_cstack, rx847_cur, rx847_curclass, "$!cstack"
  rx847_fail2264:
    unless rx847_bstack, rx847_done2262
    pop $I19, rx847_bstack
    if_null rx847_cstack, rx847_cstack_done2267
    unless rx847_cstack, rx847_cstack_done2267
    dec $I19
    set $P11, rx847_cstack[$I19]
  rx847_cstack_done2267:
    pop rx847_rep, rx847_bstack
    pop rx847_pos, rx847_bstack
    pop $I19, rx847_bstack
    lt rx847_pos, -1, rx847_done2262
    lt rx847_pos, 0, rx847_fail2264
    eq $I19, 0, rx847_fail2264
    nqp_islist $I20, rx847_cstack
    unless $I20, rx847_jump2265
    elements $I18, rx847_bstack
    le $I18, 0, rx847_cut2266
    dec $I18
    set $I18, rx847_bstack[$I18]
  rx847_cut2266:
    assign rx847_cstack, $I18
  rx847_jump2265:
    jump $I19
  rx847_done2262:
    rx847_cur."!cursor_fail"()
    .return (rx847_cur) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_135_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1144
    .param pmc _lex_param_0 
    .const 'Sub' $P5012 = 'cuid_402_1360256386.79' 
    capture_lex $P5012 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx855_tgt
    .local int rx855_pos
    .local int rx855_off
    .local int rx855_eos
    .local int rx855_rep
    .local pmc rx855_cur
    .local pmc rx855_curclass
    .local pmc rx855_bstack
    .local pmc rx855_cstack
    (rx855_cur, rx855_tgt, rx855_pos, rx855_curclass, rx855_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx855_cur
    length rx855_eos, rx855_tgt
    eq $I19, 1, rx855_restart2282
    gt rx855_pos, rx855_eos, rx855_fail2283
    repr_get_attr_int $I11, self, rx855_curclass, "$!from"
    ne $I11, -1, rxscan856_done2289
    goto rxscan856_scan2288
  rxscan856_loop2287:
    inc rx855_pos
    gt rx855_pos, rx855_eos, rx855_fail2283
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!from", rx855_pos
  rxscan856_scan2288:
    nqp_rxmark rx855_bstack, rxscan856_loop2287, rx855_pos, 0
  rxscan856_done2289:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt857_02291
    nqp_push_label $P11, alt857_12331
    nqp_rxmark rx855_bstack, alt857_end2290, -1, 0
    rx855_cur."!alt"(rx855_pos, "alt_nfa__33_1360256389.295", $P11)
    goto rx855_fail2283
  alt857_02291:
    nqp_rxmark rx855_bstack, rxcap858_fail2293, rx855_pos, 0
    add $I11, rx855_pos, 5
    gt $I11, rx855_eos, rx855_fail2283
    substr $S10, rx855_tgt, rx855_pos, 5
    ne $S10, ucs4:"proto", rx855_fail2283
    add rx855_pos, 5
    nqp_rxpeek $I19, rx855_bstack, rxcap858_fail2293
    inc $I19
    set $I11, rx855_bstack[$I19]
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx855_pos)
    rx855_cstack = rx855_cur."!cursor_capture"($P11, "proto")
    goto rxcap858_done2292
  rxcap858_fail2293:
    goto rx855_fail2283
  rxcap858_done2292:
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt860_02296
    nqp_push_label $P11, alt860_12297
    nqp_push_label $P11, alt860_22298
    nqp_rxmark rx855_bstack, alt860_end2295, -1, 0
    rx855_cur."!alt"(rx855_pos, "alt_nfa__31_1360256389.294", $P11)
    goto rx855_fail2283
  alt860_02296:
    add $I11, rx855_pos, 5
    gt $I11, rx855_eos, rx855_fail2283
    substr $S10, rx855_tgt, rx855_pos, 5
    ne $S10, ucs4:"regex", rx855_fail2283
    add rx855_pos, 5
    goto alt860_end2295
  alt860_12297:
    add $I11, rx855_pos, 5
    gt $I11, rx855_eos, rx855_fail2283
    substr $S10, rx855_tgt, rx855_pos, 5
    ne $S10, ucs4:"token", rx855_fail2283
    add rx855_pos, 5
    goto alt860_end2295
  alt860_22298:
    add $I11, rx855_pos, 4
    gt $I11, rx855_eos, rx855_fail2283
    substr $S10, rx855_tgt, rx855_pos, 4
    ne $S10, ucs4:"rule", rx855_fail2283
    add rx855_pos, 4
    goto alt860_end2295
  alt860_end2295:
    nqp_rxcommit rx855_bstack, alt860_end2295
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
  alt862_02301:
    nqp_rxmark rx855_bstack, alt862_12307, rx855_pos, 0
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    add $I11, rx855_pos, 3
    gt $I11, rx855_eos, rx855_fail2283
    substr $S10, rx855_tgt, rx855_pos, 3
    ne $S10, ucs4:"::(", rx855_fail2283
    add rx855_pos, 3
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."variable"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    nqp_rxmark rx855_bstack, rxsubrule865_pass2304, -1, 0
  rxsubrule865_pass2304:
    rx855_cstack = rx855_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    add $I11, rx855_pos, 1
    gt $I11, rx855_eos, rx855_fail2283
    substr $S10, rx855_tgt, rx855_pos, 1
    ne $S10, ucs4:")", rx855_fail2283
    add rx855_pos, 1
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    goto alt862_end2300
  alt862_12307:
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    nqp_rxmark rx855_bstack, rxsubrule869_pass2309, -1, 0
  rxsubrule869_pass2309:
    rx855_cstack = rx855_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
  alt862_end2300:
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
  alt872_02313:
    nqp_rxmark rx855_bstack, alt872_12316, rx855_pos, 0
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    add $I11, rx855_pos, 3
    gt $I11, rx855_eos, rx855_fail2283
    substr $S10, rx855_tgt, rx855_pos, 3
    ne $S10, ucs4:"{*}", rx855_fail2283
    add rx855_pos, 3
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    goto alt872_end2312
  alt872_12316:
    nqp_rxmark rx855_bstack, alt872_22321, rx855_pos, 0
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    add $I11, rx855_pos, 1
    gt $I11, rx855_eos, rx855_fail2283
    substr $S10, rx855_tgt, rx855_pos, 1
    ne $S10, ucs4:"{", rx855_fail2283
    add rx855_pos, 1
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    add $I11, rx855_pos, 5
    gt $I11, rx855_eos, rx855_fail2283
    substr $S10, rx855_tgt, rx855_pos, 5
    ne $S10, ucs4:"<...>", rx855_fail2283
    add rx855_pos, 5
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    add $I11, rx855_pos, 1
    gt $I11, rx855_eos, rx855_fail2283
    substr $S10, rx855_tgt, rx855_pos, 1
    ne $S10, ucs4:"}", rx855_fail2283
    add rx855_pos, 1
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    goto alt872_end2312
  alt872_22321:
    nqp_rxmark rx855_bstack, alt872_32326, rx855_pos, 0
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    add $I11, rx855_pos, 1
    gt $I11, rx855_eos, rx855_fail2283
    substr $S10, rx855_tgt, rx855_pos, 1
    ne $S10, ucs4:"{", rx855_fail2283
    add rx855_pos, 1
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    add $I11, rx855_pos, 3
    gt $I11, rx855_eos, rx855_fail2283
    substr $S10, rx855_tgt, rx855_pos, 3
    ne $S10, ucs4:"<*>", rx855_fail2283
    add rx855_pos, 3
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    add $I11, rx855_pos, 1
    gt $I11, rx855_eos, rx855_fail2283
    substr $S10, rx855_tgt, rx855_pos, 1
    ne $S10, ucs4:"}", rx855_fail2283
    add rx855_pos, 1
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    goto alt872_end2312
  alt872_32326:
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."panic"("Proto regex body must be \\{*\\} (or <*> or <...>, which are deprecated)")
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
  alt872_end2312:
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    goto alt857_end2290
  alt857_12331:
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    nqp_rxmark rx855_bstack, rxcap888_fail2334, rx855_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt889_02336
    nqp_push_label $P11, alt889_12337
    nqp_push_label $P11, alt889_22338
    nqp_rxmark rx855_bstack, alt889_end2335, -1, 0
    rx855_cur."!alt"(rx855_pos, "alt_nfa__32_1360256389.295", $P11)
    goto rx855_fail2283
  alt889_02336:
    add $I11, rx855_pos, 5
    gt $I11, rx855_eos, rx855_fail2283
    substr $S10, rx855_tgt, rx855_pos, 5
    ne $S10, ucs4:"regex", rx855_fail2283
    add rx855_pos, 5
    goto alt889_end2335
  alt889_12337:
    add $I11, rx855_pos, 5
    gt $I11, rx855_eos, rx855_fail2283
    substr $S10, rx855_tgt, rx855_pos, 5
    ne $S10, ucs4:"token", rx855_fail2283
    add rx855_pos, 5
    goto alt889_end2335
  alt889_22338:
    add $I11, rx855_pos, 4
    gt $I11, rx855_eos, rx855_fail2283
    substr $S10, rx855_tgt, rx855_pos, 4
    ne $S10, ucs4:"rule", rx855_fail2283
    add rx855_pos, 4
    goto alt889_end2335
  alt889_end2335:
    nqp_rxcommit rx855_bstack, alt889_end2335
    nqp_rxpeek $I19, rx855_bstack, rxcap888_fail2334
    inc $I19
    set $I11, rx855_bstack[$I19]
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx855_pos)
    rx855_cstack = rx855_cur."!cursor_capture"($P11, "sym")
    goto rxcap888_done2333
  rxcap888_fail2334:
    goto rx855_fail2283
  rxcap888_done2333:
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
  alt892_02342:
    nqp_rxmark rx855_bstack, alt892_12348, rx855_pos, 0
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    add $I11, rx855_pos, 3
    gt $I11, rx855_eos, rx855_fail2283
    substr $S10, rx855_tgt, rx855_pos, 3
    ne $S10, ucs4:"::(", rx855_fail2283
    add rx855_pos, 3
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."variable"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    nqp_rxmark rx855_bstack, rxsubrule895_pass2345, -1, 0
  rxsubrule895_pass2345:
    rx855_cstack = rx855_cur."!cursor_capture"($P11, "latename=variable")
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    add $I11, rx855_pos, 1
    gt $I11, rx855_eos, rx855_fail2283
    substr $S10, rx855_tgt, rx855_pos, 1
    ne $S10, ucs4:")", rx855_fail2283
    add rx855_pos, 1
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    goto alt892_end2341
  alt892_12348:
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    nqp_rxmark rx855_bstack, rxsubrule899_pass2350, -1, 0
  rxsubrule899_pass2350:
    rx855_cstack = rx855_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
  alt892_end2341:
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    nqp_rxmark rx855_bstack, rxquantr904_done2356, rx855_pos, 0
  rxquantr904_loop2355:
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    add $I11, rx855_pos, 1
    gt $I11, rx855_eos, rx855_fail2283
    substr $S10, rx855_tgt, rx855_pos, 1
    ne $S10, ucs4:"(", rx855_fail2283
    add rx855_pos, 1
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."signature"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    nqp_rxmark rx855_bstack, rxsubrule907_pass2359, -1, 0
  rxsubrule907_pass2359:
    rx855_cstack = rx855_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    add $I11, rx855_pos, 1
    gt $I11, rx855_eos, rx855_fail2283
    substr $S10, rx855_tgt, rx855_pos, 1
    ne $S10, ucs4:")", rx855_fail2283
    add rx855_pos, 1
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    nqp_rxpeek $I19, rx855_bstack, rxquantr904_done2356
    inc $I19
    inc $I19
    set rx855_rep, rx855_bstack[$I19]
    nqp_rxcommit rx855_bstack, rxquantr904_done2356
    inc rx855_rep
  rxquantr904_done2356:
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    store_lex unicode:"$\x{a2}", rx855_cur
    unless_null $P101, fallback2363
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2364
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2364:
    unless_null $P5002, vivi_9112365
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_9112365:
    set $P101, $P5002
  fallback2363:
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    store_lex unicode:"$\x{a2}", rx855_cur
    $P5009 = $P102."MATCH"()
    set $P103, $P5009
    .const 'Sub' $P5010 = 'cuid_402_1360256386.79' 
    capture_lex $P5010
    $P5011 = $P5010()
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    add $I11, rx855_pos, 1
    gt $I11, rx855_eos, rx855_fail2283
    substr $S10, rx855_tgt, rx855_pos, 1
    ne $S10, ucs4:"{", rx855_fail2283
    add rx855_pos, 1
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    nqp_rxmark rx855_bstack, rxsubrule923_pass2406, -1, 0
  rxsubrule923_pass2406:
    rx855_cstack = rx855_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    add $I11, rx855_pos, 1
    gt $I11, rx855_eos, rx855_fail2283
    substr $S10, rx855_tgt, rx855_pos, 1
    ne $S10, ucs4:"}", rx855_fail2283
    add rx855_pos, 1
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_bind_attr_int rx855_cur, rx855_curclass, "$!pos", rx855_pos
    $P11 = rx855_cur."ws"()
    repr_get_attr_int $I11, $P11, rx855_curclass, "$!pos"
    lt $I11, 0, rx855_fail2283
    repr_get_attr_int rx855_pos, $P11, rx855_curclass, "$!pos"
    goto alt857_end2290
  alt857_end2290:
    nqp_rxcommit rx855_bstack, alt857_end2290
    rx855_cur."!cursor_pass"(rx855_pos, "regex_declarator", 'backtrack'=>1)
    .return (rx855_cur)
  rx855_restart2282:
    repr_get_attr_obj rx855_cstack, rx855_cur, rx855_curclass, "$!cstack"
  rx855_fail2283:
    unless rx855_bstack, rx855_done2281
    pop $I19, rx855_bstack
    if_null rx855_cstack, rx855_cstack_done2286
    unless rx855_cstack, rx855_cstack_done2286
    dec $I19
    set $P11, rx855_cstack[$I19]
  rx855_cstack_done2286:
    pop rx855_rep, rx855_bstack
    pop rx855_pos, rx855_bstack
    pop $I19, rx855_bstack
    lt rx855_pos, -1, rx855_done2281
    lt rx855_pos, 0, rx855_fail2283
    eq $I19, 0, rx855_fail2283
    nqp_islist $I20, rx855_cstack
    unless $I20, rx855_jump2284
    elements $I18, rx855_bstack
    le $I18, 0, rx855_cut2285
    dec $I18
    set $I18, rx855_bstack[$I18]
  rx855_cut2285:
    assign rx855_cstack, $I18
  rx855_jump2284:
    jump $I19
  rx855_done2281:
    rx855_cur."!cursor_fail"()
    .return (rx855_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_402_1360256386.79") :anon :lex :outer("cuid_135_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1165

    find_dynamic_lex $P5001, "%*RX"
    unless_null $P5001, fallback2367
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2368
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2368:
    unless_null $P5002, vivi_9132369
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_9132369:
    set $P5001, $P5002
  fallback2367:
    find_lex $P5010, "$/"
    unless_null $P5010, fallback2370
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5011
  fallback2370:
    set $P5009, $P5010["sym"]
    unless_null $P5009, fallback2371
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5012
  fallback2371:
    set $S5001, $P5009
    iseq $I5001, $S5001, "rule"
    box $P5013, $I5001
    set $P5001["s"], $P5013
    find_dynamic_lex $P5014, "%*RX"
    unless_null $P5014, fallback2372
    nqp_get_sc_object $P5017, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["%RX"]
    unless_null $P5015, fallback2373
    nqp_get_sc_object $P5019, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%RX"], $P5020
    set $P5015, $P5020
  fallback2373:
    unless_null $P5015, vivi_9142374
    die "Contextual %*RX not found"
    box $P5021, "Contextual %*RX not found"
    set $P5015, $P5021
  vivi_9142374:
    set $P5014, $P5015
  fallback2372:
    find_lex $P5023, "$/"
    unless_null $P5023, fallback2377
    nqp_get_sc_object $P5024, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5023, $P5024
  fallback2377:
    set $P5022, $P5023["sym"]
    unless_null $P5022, fallback2378
    nqp_get_sc_object $P5025, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5022, $P5025
  fallback2378:
    set $S5002, $P5022
    iseq $I5002, $S5002, "token"
    set $I5004, $I5002
    if $I5002 goto unless915_end2376 
    find_lex $P5027, "$/"
    unless_null $P5027, fallback2379
    nqp_get_sc_object $P5028, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5027, $P5028
  fallback2379:
    set $P5026, $P5027["sym"]
    unless_null $P5026, fallback2380
    nqp_get_sc_object $P5029, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5026, $P5029
  fallback2380:
    set $S5003, $P5026
    iseq $I5003, $S5003, "rule"
    set $I5004, $I5003
  unless915_end2376:
    box $P5030, $I5004
    set $P5014["r"], $P5030
    find_dynamic_lex $P5031, "%*RX"
    unless_null $P5031, fallback2381
    nqp_get_sc_object $P5034, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%RX"]
    unless_null $P5032, fallback2382
    nqp_get_sc_object $P5036, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%RX"], $P5037
    set $P5032, $P5037
  fallback2382:
    unless_null $P5032, vivi_9162383
    die "Contextual %*RX not found"
    box $P5038, "Contextual %*RX not found"
    set $P5032, $P5038
  vivi_9162383:
    set $P5031, $P5032
  fallback2381:
    find_lex $P5040, "$/"
    unless_null $P5040, fallback2386
    nqp_get_sc_object $P5041, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5040, $P5041
  fallback2386:
    set $P5039, $P5040["deflongname"]
    unless_null $P5039, fallback2387
    nqp_get_sc_object $P5042, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5039, $P5042
  fallback2387:
    unless $P5039 goto if917_else2384 
.annotate 'line', 1168
    find_lex $P5044, "$/"
    unless_null $P5044, fallback2388
    nqp_get_sc_object $P5045, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5044, $P5045
  fallback2388:
    set $P5043, $P5044["deflongname"]
    unless_null $P5043, fallback2389
    nqp_get_sc_object $P5046, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5043, $P5046
  fallback2389:
    $P5047 = $P5043."ast"()
    set $P5052, $P5047
    goto if917_end2385
  if917_else2384:
    find_lex $P5049, "$/"
    unless_null $P5049, fallback2390
    nqp_get_sc_object $P5050, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5049, $P5050
  fallback2390:
    set $P5048, $P5049["latename"]
    unless_null $P5048, fallback2391
    nqp_get_sc_object $P5051, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5048, $P5051
  fallback2391:
    set $S5005, $P5048
    concat $S5004, "!!LATENAME!!", $S5005
    box $P5053, $S5004
    set $P5052, $P5053
  if917_end2385:
    set $P5031["name"], $P5052
    find_dynamic_lex $P5054, "%*RX"
    unless_null $P5054, fallback2392
    nqp_get_sc_object $P5057, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["%RX"]
    unless_null $P5055, fallback2393
    nqp_get_sc_object $P5059, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5058, $P5059
    new $P5060, 'Hash'
    set $P5058["%RX"], $P5060
    set $P5055, $P5060
  fallback2393:
    unless_null $P5055, vivi_9182394
    die "Contextual %*RX not found"
    box $P5061, "Contextual %*RX not found"
    set $P5055, $P5061
  vivi_9182394:
    set $P5054, $P5055
  fallback2392:
.annotate 'line', 1169
    find_dynamic_lex $P5062, "$*W"
    unless_null $P5062, fallback2395
    nqp_get_sc_object $P5065, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$W"]
    unless_null $P5063, fallback2396
    nqp_get_sc_object $P5066, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5063, $P5066
  fallback2396:
    unless_null $P5063, vivi_9192397
    die "Contextual $*W not found"
    box $P5067, "Contextual $*W not found"
    set $P5063, $P5067
  vivi_9192397:
    set $P5062, $P5063
  fallback2395:
    find_dynamic_lex $P5068, "$*W"
    unless_null $P5068, fallback2398
    nqp_get_sc_object $P5071, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5070, $P5071
    set $P5069, $P5070["$W"]
    unless_null $P5069, fallback2399
    nqp_get_sc_object $P5072, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5069, $P5072
  fallback2399:
    unless_null $P5069, vivi_9202400
    die "Contextual $*W not found"
    box $P5073, "Contextual $*W not found"
    set $P5069, $P5073
  vivi_9202400:
    set $P5068, $P5069
  fallback2398:
    $P5074 = $P5068."cur_lexpad"()
    find_dynamic_lex $P5076, "%*RX"
    unless_null $P5076, fallback2401
    nqp_get_sc_object $P5079, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5078, $P5079
    set $P5077, $P5078["%RX"]
    unless_null $P5077, fallback2402
    nqp_get_sc_object $P5081, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5080, $P5081
    new $P5082, 'Hash'
    set $P5080["%RX"], $P5082
    set $P5077, $P5082
  fallback2402:
    unless_null $P5077, vivi_9212403
    die "Contextual %*RX not found"
    box $P5083, "Contextual %*RX not found"
    set $P5077, $P5083
  vivi_9212403:
    set $P5076, $P5077
  fallback2401:
    set $P5075, $P5076["name"]
    unless_null $P5075, fallback2404
    nqp_get_sc_object $P5084, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5075, $P5084
  fallback2404:
    $P5085 = $P5062."create_code"($P5074, $P5075, 0, "NQPRegex" :named("code_type_name"))
    set $P5054["code"], $P5085
    .return ($P5085) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_136_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1175
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx925_tgt
    .local int rx925_pos
    .local int rx925_off
    .local int rx925_eos
    .local int rx925_rep
    .local pmc rx925_cur
    .local pmc rx925_curclass
    .local pmc rx925_bstack
    .local pmc rx925_cstack
    (rx925_cur, rx925_tgt, rx925_pos, rx925_curclass, rx925_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx925_cur
    length rx925_eos, rx925_tgt
    eq $I19, 1, rx925_restart2410
    gt rx925_pos, rx925_eos, rx925_fail2411
    repr_get_attr_int $I11, self, rx925_curclass, "$!from"
    ne $I11, -1, rxscan926_done2417
    goto rxscan926_scan2416
  rxscan926_loop2415:
    inc rx925_pos
    gt rx925_pos, rx925_eos, rx925_fail2411
    repr_bind_attr_int rx925_cur, rx925_curclass, "$!from", rx925_pos
  rxscan926_scan2416:
    nqp_rxmark rx925_bstack, rxscan926_loop2415, rx925_pos, 0
  rxscan926_done2417:
    add $I11, rx925_pos, 1
    gt $I11, rx925_eos, rx925_fail2411
    substr $S10, rx925_tgt, rx925_pos, 1
    ne $S10, ucs4:".", rx925_fail2411
    add rx925_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt927_02419
    nqp_push_label $P11, alt927_12421
    nqp_rxmark rx925_bstack, alt927_end2418, -1, 0
    rx925_cur."!alt"(rx925_pos, "alt_nfa__34_1360256389.318", $P11)
    goto rx925_fail2411
  alt927_02419:
    repr_bind_attr_int rx925_cur, rx925_curclass, "$!pos", rx925_pos
    $P11 = rx925_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx925_curclass, "$!pos"
    lt $I11, 0, rx925_fail2411
    nqp_rxmark rx925_bstack, rxsubrule928_pass2420, -1, 0
  rxsubrule928_pass2420:
    rx925_cstack = rx925_cur."!cursor_capture"($P11, "longname=deflongname")
    repr_get_attr_int rx925_pos, $P11, rx925_curclass, "$!pos"
    goto alt927_end2418
  alt927_12421:
    ge rx925_pos, rx925_eos, rx925_fail2411
    substr $S11, rx925_tgt, rx925_pos, 1
    index $I11, ucs4:"'\"", $S11
    lt $I11, 0, rx925_fail2411
    repr_bind_attr_int rx925_cur, rx925_curclass, "$!pos", rx925_pos
    $P11 = rx925_cur."quote"()
    repr_get_attr_int $I11, $P11, rx925_curclass, "$!pos"
    lt $I11, 0, rx925_fail2411
    nqp_rxmark rx925_bstack, rxsubrule929_pass2422, -1, 0
  rxsubrule929_pass2422:
    rx925_cstack = rx925_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx925_pos, $P11, rx925_curclass, "$!pos"
  alt930_02424:
    nqp_rxmark rx925_bstack, alt930_12425, rx925_pos, 0
    ge rx925_pos, rx925_eos, rx925_fail2411
    substr $S11, rx925_tgt, rx925_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx925_fail2411
    goto alt930_end2423
  alt930_12425:
    repr_bind_attr_int rx925_cur, rx925_curclass, "$!pos", rx925_pos
    $P11 = rx925_cur."panic"("Quoted method name requires parenthesized arguments")
    repr_get_attr_int $I11, $P11, rx925_curclass, "$!pos"
    lt $I11, 0, rx925_fail2411
    repr_get_attr_int rx925_pos, $P11, rx925_curclass, "$!pos"
  alt930_end2423:
    goto alt927_end2418
  alt927_end2418:
    nqp_rxcommit rx925_bstack, alt927_end2418
    nqp_rxmark rx925_bstack, rxquantr932_done2428, rx925_pos, 0
  rxquantr932_loop2427:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt933_02430
    nqp_push_label $P11, alt933_12432
    nqp_rxmark rx925_bstack, alt933_end2429, -1, 0
    rx925_cur."!alt"(rx925_pos, "alt_nfa__35_1360256389.318", $P11)
    goto rx925_fail2411
  alt933_02430:
    ge rx925_pos, rx925_eos, rx925_fail2411
    substr $S11, rx925_tgt, rx925_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx925_fail2411
    repr_bind_attr_int rx925_cur, rx925_curclass, "$!pos", rx925_pos
    $P11 = rx925_cur."args"()
    repr_get_attr_int $I11, $P11, rx925_curclass, "$!pos"
    lt $I11, 0, rx925_fail2411
    nqp_rxmark rx925_bstack, rxsubrule934_pass2431, -1, 0
  rxsubrule934_pass2431:
    rx925_cstack = rx925_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx925_pos, $P11, rx925_curclass, "$!pos"
    goto alt933_end2429
  alt933_12432:
    add $I11, rx925_pos, 1
    gt $I11, rx925_eos, rx925_fail2411
    substr $S10, rx925_tgt, rx925_pos, 1
    ne $S10, ucs4:":", rx925_fail2411
    add rx925_pos, 1
    ge rx925_pos, rx925_eos, rx925_fail2411
    is_cclass $I11, .CCLASS_WHITESPACE, rx925_tgt, rx925_pos
    unless $I11, rx925_fail2411
    add rx925_pos, 1
    repr_bind_attr_int rx925_cur, rx925_curclass, "$!pos", rx925_pos
    $P11 = rx925_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx925_curclass, "$!pos"
    lt $I11, 0, rx925_fail2411
    nqp_rxmark rx925_bstack, rxsubrule935_pass2433, -1, 0
  rxsubrule935_pass2433:
    rx925_cstack = rx925_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx925_pos, $P11, rx925_curclass, "$!pos"
    goto alt933_end2429
  alt933_end2429:
    nqp_rxpeek $I19, rx925_bstack, rxquantr932_done2428
    inc $I19
    inc $I19
    set rx925_rep, rx925_bstack[$I19]
    nqp_rxcommit rx925_bstack, rxquantr932_done2428
    inc rx925_rep
  rxquantr932_done2428:
    rx925_cur."!cursor_pass"(rx925_pos, "dotty", 'backtrack'=>1)
    .return (rx925_cur)
  rx925_restart2410:
    repr_get_attr_obj rx925_cstack, rx925_cur, rx925_curclass, "$!cstack"
  rx925_fail2411:
    unless rx925_bstack, rx925_done2409
    pop $I19, rx925_bstack
    if_null rx925_cstack, rx925_cstack_done2414
    unless rx925_cstack, rx925_cstack_done2414
    dec $I19
    set $P11, rx925_cstack[$I19]
  rx925_cstack_done2414:
    pop rx925_rep, rx925_bstack
    pop rx925_pos, rx925_bstack
    pop $I19, rx925_bstack
    lt rx925_pos, -1, rx925_done2409
    lt rx925_pos, 0, rx925_fail2411
    eq $I19, 0, rx925_fail2411
    nqp_islist $I20, rx925_cstack
    unless $I20, rx925_jump2412
    elements $I18, rx925_bstack
    le $I18, 0, rx925_cut2413
    dec $I18
    set $I18, rx925_bstack[$I18]
  rx925_cut2413:
    assign rx925_cstack, $I18
  rx925_jump2412:
    jump $I19
  rx925_done2409:
    rx925_cur."!cursor_fail"()
    .return (rx925_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_137_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1188
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx936_tgt
    .local int rx936_pos
    .local int rx936_off
    .local int rx936_eos
    .local int rx936_rep
    .local pmc rx936_cur
    .local pmc rx936_curclass
    .local pmc rx936_bstack
    .local pmc rx936_cstack
    (rx936_cur, rx936_tgt, rx936_pos, rx936_curclass, rx936_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx936_cur
    length rx936_eos, rx936_tgt
    eq $I19, 1, rx936_restart2436
    gt rx936_pos, rx936_eos, rx936_fail2437
    repr_get_attr_int $I11, self, rx936_curclass, "$!from"
    ne $I11, -1, rxscan937_done2443
    goto rxscan937_scan2442
  rxscan937_loop2441:
    inc rx936_pos
    gt rx936_pos, rx936_eos, rx936_fail2437
    repr_bind_attr_int rx936_cur, rx936_curclass, "$!from", rx936_pos
  rxscan937_scan2442:
    nqp_rxmark rx936_bstack, rxscan937_loop2441, rx936_pos, 0
  rxscan937_done2443:
    nqp_rxmark rx936_bstack, rxcap938_fail2445, rx936_pos, 0
    add $I11, rx936_pos, 4
    gt $I11, rx936_eos, rx936_fail2437
    substr $S10, rx936_tgt, rx936_pos, 4
    ne $S10, ucs4:"self", rx936_fail2437
    add rx936_pos, 4
    nqp_rxpeek $I19, rx936_bstack, rxcap938_fail2445
    inc $I19
    set $I11, rx936_bstack[$I19]
    repr_bind_attr_int rx936_cur, rx936_curclass, "$!pos", rx936_pos
    $P11 = rx936_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx936_pos)
    rx936_cstack = rx936_cur."!cursor_capture"($P11, "sym")
    goto rxcap938_done2444
  rxcap938_fail2445:
    goto rx936_fail2437
  rxcap938_done2444:
    le rx936_pos, 0, rx936_fail2437
    is_cclass $I11, .CCLASS_WORD, rx936_tgt, rx936_pos
    if $I11, rx936_fail2437
    sub $I11, rx936_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx936_tgt, $I11
    unless $I11, rx936_fail2437
    rx936_cur."!cursor_pass"(rx936_pos, "term:sym<self>", 'backtrack'=>1)
    .return (rx936_cur)
  rx936_restart2436:
    repr_get_attr_obj rx936_cstack, rx936_cur, rx936_curclass, "$!cstack"
  rx936_fail2437:
    unless rx936_bstack, rx936_done2435
    pop $I19, rx936_bstack
    if_null rx936_cstack, rx936_cstack_done2440
    unless rx936_cstack, rx936_cstack_done2440
    dec $I19
    set $P11, rx936_cstack[$I19]
  rx936_cstack_done2440:
    pop rx936_rep, rx936_bstack
    pop rx936_pos, rx936_bstack
    pop $I19, rx936_bstack
    lt rx936_pos, -1, rx936_done2435
    lt rx936_pos, 0, rx936_fail2437
    eq $I19, 0, rx936_fail2437
    nqp_islist $I20, rx936_cstack
    unless $I20, rx936_jump2438
    elements $I18, rx936_bstack
    le $I18, 0, rx936_cut2439
    dec $I18
    set $I18, rx936_bstack[$I18]
  rx936_cut2439:
    assign rx936_cstack, $I18
  rx936_jump2438:
    jump $I19
  rx936_done2435:
    rx936_cur."!cursor_fail"()
    .return (rx936_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_138_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1190
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx940_tgt
    .local int rx940_pos
    .local int rx940_off
    .local int rx940_eos
    .local int rx940_rep
    .local pmc rx940_cur
    .local pmc rx940_curclass
    .local pmc rx940_bstack
    .local pmc rx940_cstack
    (rx940_cur, rx940_tgt, rx940_pos, rx940_curclass, rx940_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx940_cur
    length rx940_eos, rx940_tgt
    eq $I19, 1, rx940_restart2449
    gt rx940_pos, rx940_eos, rx940_fail2450
    repr_get_attr_int $I11, self, rx940_curclass, "$!from"
    ne $I11, -1, rxscan941_done2456
    goto rxscan941_scan2455
  rxscan941_loop2454:
    inc rx940_pos
    gt rx940_pos, rx940_eos, rx940_fail2450
    repr_bind_attr_int rx940_cur, rx940_curclass, "$!from", rx940_pos
  rxscan941_scan2455:
    nqp_rxmark rx940_bstack, rxscan941_loop2454, rx940_pos, 0
  rxscan941_done2456:
    repr_bind_attr_int rx940_cur, rx940_curclass, "$!pos", rx940_pos
    $P11 = rx940_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx940_curclass, "$!pos"
    lt $I11, 0, rx940_fail2450
    nqp_rxmark rx940_bstack, rxsubrule942_pass2457, -1, 0
  rxsubrule942_pass2457:
    rx940_cstack = rx940_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx940_pos, $P11, rx940_curclass, "$!pos"
    ge rx940_pos, rx940_eos, rx940_fail2450
    substr $S11, rx940_tgt, rx940_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx940_fail2450
    repr_bind_attr_int rx940_cur, rx940_curclass, "$!pos", rx940_pos
    $P11 = rx940_cur."args"()
    repr_get_attr_int $I11, $P11, rx940_curclass, "$!pos"
    lt $I11, 0, rx940_fail2450
    nqp_rxmark rx940_bstack, rxsubrule943_pass2458, -1, 0
  rxsubrule943_pass2458:
    rx940_cstack = rx940_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx940_pos, $P11, rx940_curclass, "$!pos"
    rx940_cur."!cursor_pass"(rx940_pos, "term:sym<identifier>", 'backtrack'=>1)
    .return (rx940_cur)
  rx940_restart2449:
    repr_get_attr_obj rx940_cstack, rx940_cur, rx940_curclass, "$!cstack"
  rx940_fail2450:
    unless rx940_bstack, rx940_done2448
    pop $I19, rx940_bstack
    if_null rx940_cstack, rx940_cstack_done2453
    unless rx940_cstack, rx940_cstack_done2453
    dec $I19
    set $P11, rx940_cstack[$I19]
  rx940_cstack_done2453:
    pop rx940_rep, rx940_bstack
    pop rx940_pos, rx940_bstack
    pop $I19, rx940_bstack
    lt rx940_pos, -1, rx940_done2448
    lt rx940_pos, 0, rx940_fail2450
    eq $I19, 0, rx940_fail2450
    nqp_islist $I20, rx940_cstack
    unless $I20, rx940_jump2451
    elements $I18, rx940_bstack
    le $I18, 0, rx940_cut2452
    dec $I18
    set $I18, rx940_bstack[$I18]
  rx940_cut2452:
    assign rx940_cstack, $I18
  rx940_jump2451:
    jump $I19
  rx940_done2448:
    rx940_cur."!cursor_fail"()
    .return (rx940_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_139_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1194
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx944_tgt
    .local int rx944_pos
    .local int rx944_off
    .local int rx944_eos
    .local int rx944_rep
    .local pmc rx944_cur
    .local pmc rx944_curclass
    .local pmc rx944_bstack
    .local pmc rx944_cstack
    (rx944_cur, rx944_tgt, rx944_pos, rx944_curclass, rx944_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx944_cur
    length rx944_eos, rx944_tgt
    eq $I19, 1, rx944_restart2461
    gt rx944_pos, rx944_eos, rx944_fail2462
    repr_get_attr_int $I11, self, rx944_curclass, "$!from"
    ne $I11, -1, rxscan945_done2468
    goto rxscan945_scan2467
  rxscan945_loop2466:
    inc rx944_pos
    gt rx944_pos, rx944_eos, rx944_fail2462
    repr_bind_attr_int rx944_cur, rx944_curclass, "$!from", rx944_pos
  rxscan945_scan2467:
    nqp_rxmark rx944_bstack, rxscan945_loop2466, rx944_pos, 0
  rxscan945_done2468:
    repr_bind_attr_int rx944_cur, rx944_curclass, "$!pos", rx944_pos
    $P11 = rx944_cur."name"()
    repr_get_attr_int $I11, $P11, rx944_curclass, "$!pos"
    lt $I11, 0, rx944_fail2462
    nqp_rxmark rx944_bstack, rxsubrule946_pass2469, -1, 0
  rxsubrule946_pass2469:
    rx944_cstack = rx944_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx944_pos, $P11, rx944_curclass, "$!pos"
    nqp_rxmark rx944_bstack, rxquantr947_done2471, rx944_pos, 0
  rxquantr947_loop2470:
    repr_bind_attr_int rx944_cur, rx944_curclass, "$!pos", rx944_pos
    $P11 = rx944_cur."args"()
    repr_get_attr_int $I11, $P11, rx944_curclass, "$!pos"
    lt $I11, 0, rx944_fail2462
    goto rxsubrule948_pass2472
  rxsubrule948_back2473:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx944_curclass, "$!pos"
    lt $I11, 0, rx944_fail2462
  rxsubrule948_pass2472:
    rx944_cstack = rx944_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule948_back2473
    push rx944_bstack, $I11
    push rx944_bstack, 0
    push rx944_bstack, rx944_pos
    elements $I11, rx944_cstack
    push rx944_bstack, $I11
    repr_get_attr_int rx944_pos, $P11, rx944_curclass, "$!pos"
    nqp_rxpeek $I19, rx944_bstack, rxquantr947_done2471
    inc $I19
    inc $I19
    set rx944_rep, rx944_bstack[$I19]
    nqp_rxcommit rx944_bstack, rxquantr947_done2471
    inc rx944_rep
  rxquantr947_done2471:
    rx944_cur."!cursor_pass"(rx944_pos, "term:sym<name>", 'backtrack'=>1)
    .return (rx944_cur)
  rx944_restart2461:
    repr_get_attr_obj rx944_cstack, rx944_cur, rx944_curclass, "$!cstack"
  rx944_fail2462:
    unless rx944_bstack, rx944_done2460
    pop $I19, rx944_bstack
    if_null rx944_cstack, rx944_cstack_done2465
    unless rx944_cstack, rx944_cstack_done2465
    dec $I19
    set $P11, rx944_cstack[$I19]
  rx944_cstack_done2465:
    pop rx944_rep, rx944_bstack
    pop rx944_pos, rx944_bstack
    pop $I19, rx944_bstack
    lt rx944_pos, -1, rx944_done2460
    lt rx944_pos, 0, rx944_fail2462
    eq $I19, 0, rx944_fail2462
    nqp_islist $I20, rx944_cstack
    unless $I20, rx944_jump2463
    elements $I18, rx944_bstack
    le $I18, 0, rx944_cut2464
    dec $I18
    set $I18, rx944_bstack[$I18]
  rx944_cut2464:
    assign rx944_cstack, $I18
  rx944_jump2463:
    jump $I19
  rx944_done2460:
    rx944_cur."!cursor_fail"()
    .return (rx944_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_140_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1198
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx949_tgt
    .local int rx949_pos
    .local int rx949_off
    .local int rx949_eos
    .local int rx949_rep
    .local pmc rx949_cur
    .local pmc rx949_curclass
    .local pmc rx949_bstack
    .local pmc rx949_cstack
    (rx949_cur, rx949_tgt, rx949_pos, rx949_curclass, rx949_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx949_cur
    length rx949_eos, rx949_tgt
    eq $I19, 1, rx949_restart2476
    gt rx949_pos, rx949_eos, rx949_fail2477
    repr_get_attr_int $I11, self, rx949_curclass, "$!from"
    ne $I11, -1, rxscan950_done2483
    goto rxscan950_scan2482
  rxscan950_loop2481:
    inc rx949_pos
    gt rx949_pos, rx949_eos, rx949_fail2477
    repr_bind_attr_int rx949_cur, rx949_curclass, "$!from", rx949_pos
  rxscan950_scan2482:
    nqp_rxmark rx949_bstack, rxscan950_loop2481, rx949_pos, 0
  rxscan950_done2483:
    add $I11, rx949_pos, 5
    gt $I11, rx949_eos, rx949_fail2477
    substr $S10, rx949_tgt, rx949_pos, 5
    ne $S10, ucs4:"pir::", rx949_fail2477
    add rx949_pos, 5
    nqp_rxmark rx949_bstack, rxcap951_fail2485, rx949_pos, 0
    nqp_rxmark rx949_bstack, rxquantr952_done2487, -1, 0
  rxquantr952_loop2486:
    ge rx949_pos, rx949_eos, rx949_fail2477
    is_cclass $I11, .CCLASS_WORD, rx949_tgt, rx949_pos
    unless $I11, rx949_fail2477
    add rx949_pos, 1
    nqp_rxpeek $I19, rx949_bstack, rxquantr952_done2487
    inc $I19
    inc $I19
    set rx949_rep, rx949_bstack[$I19]
    nqp_rxcommit rx949_bstack, rxquantr952_done2487
    inc rx949_rep
    nqp_rxmark rx949_bstack, rxquantr952_done2487, rx949_pos, rx949_rep
    goto rxquantr952_loop2486
  rxquantr952_done2487:
    nqp_rxpeek $I19, rx949_bstack, rxcap951_fail2485
    inc $I19
    set $I11, rx949_bstack[$I19]
    repr_bind_attr_int rx949_cur, rx949_curclass, "$!pos", rx949_pos
    $P11 = rx949_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx949_pos)
    rx949_cstack = rx949_cur."!cursor_capture"($P11, "op")
    goto rxcap951_done2484
  rxcap951_fail2485:
    goto rx949_fail2477
  rxcap951_done2484:
    nqp_rxmark rx949_bstack, rxquantr953_done2489, rx949_pos, 0
  rxquantr953_loop2488:
    repr_bind_attr_int rx949_cur, rx949_curclass, "$!pos", rx949_pos
    $P11 = rx949_cur."args"()
    repr_get_attr_int $I11, $P11, rx949_curclass, "$!pos"
    lt $I11, 0, rx949_fail2477
    goto rxsubrule954_pass2490
  rxsubrule954_back2491:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx949_curclass, "$!pos"
    lt $I11, 0, rx949_fail2477
  rxsubrule954_pass2490:
    rx949_cstack = rx949_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule954_back2491
    push rx949_bstack, $I11
    push rx949_bstack, 0
    push rx949_bstack, rx949_pos
    elements $I11, rx949_cstack
    push rx949_bstack, $I11
    repr_get_attr_int rx949_pos, $P11, rx949_curclass, "$!pos"
    nqp_rxpeek $I19, rx949_bstack, rxquantr953_done2489
    inc $I19
    inc $I19
    set rx949_rep, rx949_bstack[$I19]
    nqp_rxcommit rx949_bstack, rxquantr953_done2489
    inc rx949_rep
  rxquantr953_done2489:
    rx949_cur."!cursor_pass"(rx949_pos, "term:sym<pir::op>", 'backtrack'=>1)
    .return (rx949_cur)
  rx949_restart2476:
    repr_get_attr_obj rx949_cstack, rx949_cur, rx949_curclass, "$!cstack"
  rx949_fail2477:
    unless rx949_bstack, rx949_done2475
    pop $I19, rx949_bstack
    if_null rx949_cstack, rx949_cstack_done2480
    unless rx949_cstack, rx949_cstack_done2480
    dec $I19
    set $P11, rx949_cstack[$I19]
  rx949_cstack_done2480:
    pop rx949_rep, rx949_bstack
    pop rx949_pos, rx949_bstack
    pop $I19, rx949_bstack
    lt rx949_pos, -1, rx949_done2475
    lt rx949_pos, 0, rx949_fail2477
    eq $I19, 0, rx949_fail2477
    nqp_islist $I20, rx949_cstack
    unless $I20, rx949_jump2478
    elements $I18, rx949_bstack
    le $I18, 0, rx949_cut2479
    dec $I18
    set $I18, rx949_bstack[$I18]
  rx949_cut2479:
    assign rx949_cstack, $I18
  rx949_jump2478:
    jump $I19
  rx949_done2475:
    rx949_cur."!cursor_fail"()
    .return (rx949_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_141_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1202
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx955_tgt
    .local int rx955_pos
    .local int rx955_off
    .local int rx955_eos
    .local int rx955_rep
    .local pmc rx955_cur
    .local pmc rx955_curclass
    .local pmc rx955_bstack
    .local pmc rx955_cstack
    (rx955_cur, rx955_tgt, rx955_pos, rx955_curclass, rx955_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx955_cur
    length rx955_eos, rx955_tgt
    eq $I19, 1, rx955_restart2494
    gt rx955_pos, rx955_eos, rx955_fail2495
    repr_get_attr_int $I11, self, rx955_curclass, "$!from"
    ne $I11, -1, rxscan956_done2501
    goto rxscan956_scan2500
  rxscan956_loop2499:
    inc rx955_pos
    gt rx955_pos, rx955_eos, rx955_fail2495
    repr_bind_attr_int rx955_cur, rx955_curclass, "$!from", rx955_pos
  rxscan956_scan2500:
    nqp_rxmark rx955_bstack, rxscan956_loop2499, rx955_pos, 0
  rxscan956_done2501:
    add $I11, rx955_pos, 12
    gt $I11, rx955_eos, rx955_fail2495
    substr $S10, rx955_tgt, rx955_pos, 12
    ne $S10, ucs4:"pir::const::", rx955_fail2495
    add rx955_pos, 12
    nqp_rxmark rx955_bstack, rxcap957_fail2503, rx955_pos, 0
    nqp_rxmark rx955_bstack, rxquantr958_done2505, -1, 0
  rxquantr958_loop2504:
    ge rx955_pos, rx955_eos, rx955_fail2495
    is_cclass $I11, .CCLASS_WORD, rx955_tgt, rx955_pos
    unless $I11, rx955_fail2495
    add rx955_pos, 1
    nqp_rxpeek $I19, rx955_bstack, rxquantr958_done2505
    inc $I19
    inc $I19
    set rx955_rep, rx955_bstack[$I19]
    nqp_rxcommit rx955_bstack, rxquantr958_done2505
    inc rx955_rep
    nqp_rxmark rx955_bstack, rxquantr958_done2505, rx955_pos, rx955_rep
    goto rxquantr958_loop2504
  rxquantr958_done2505:
    nqp_rxpeek $I19, rx955_bstack, rxcap957_fail2503
    inc $I19
    set $I11, rx955_bstack[$I19]
    repr_bind_attr_int rx955_cur, rx955_curclass, "$!pos", rx955_pos
    $P11 = rx955_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx955_pos)
    rx955_cstack = rx955_cur."!cursor_capture"($P11, "const")
    goto rxcap957_done2502
  rxcap957_fail2503:
    goto rx955_fail2495
  rxcap957_done2502:
    rx955_cur."!cursor_pass"(rx955_pos, "term:sym<pir::const>", 'backtrack'=>1)
    .return (rx955_cur)
  rx955_restart2494:
    repr_get_attr_obj rx955_cstack, rx955_cur, rx955_curclass, "$!cstack"
  rx955_fail2495:
    unless rx955_bstack, rx955_done2493
    pop $I19, rx955_bstack
    if_null rx955_cstack, rx955_cstack_done2498
    unless rx955_cstack, rx955_cstack_done2498
    dec $I19
    set $P11, rx955_cstack[$I19]
  rx955_cstack_done2498:
    pop rx955_rep, rx955_bstack
    pop rx955_pos, rx955_bstack
    pop $I19, rx955_bstack
    lt rx955_pos, -1, rx955_done2493
    lt rx955_pos, 0, rx955_fail2495
    eq $I19, 0, rx955_fail2495
    nqp_islist $I20, rx955_cstack
    unless $I20, rx955_jump2496
    elements $I18, rx955_bstack
    le $I18, 0, rx955_cut2497
    dec $I18
    set $I18, rx955_bstack[$I18]
  rx955_cut2497:
    assign rx955_cstack, $I18
  rx955_jump2496:
    jump $I19
  rx955_done2493:
    rx955_cur."!cursor_fail"()
    .return (rx955_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_142_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1206
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx959_tgt
    .local int rx959_pos
    .local int rx959_off
    .local int rx959_eos
    .local int rx959_rep
    .local pmc rx959_cur
    .local pmc rx959_curclass
    .local pmc rx959_bstack
    .local pmc rx959_cstack
    (rx959_cur, rx959_tgt, rx959_pos, rx959_curclass, rx959_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx959_cur
    length rx959_eos, rx959_tgt
    eq $I19, 1, rx959_restart2508
    gt rx959_pos, rx959_eos, rx959_fail2509
    repr_get_attr_int $I11, self, rx959_curclass, "$!from"
    ne $I11, -1, rxscan960_done2515
    goto rxscan960_scan2514
  rxscan960_loop2513:
    inc rx959_pos
    gt rx959_pos, rx959_eos, rx959_fail2509
    repr_bind_attr_int rx959_cur, rx959_curclass, "$!from", rx959_pos
  rxscan960_scan2514:
    nqp_rxmark rx959_bstack, rxscan960_loop2513, rx959_pos, 0
  rxscan960_done2515:
    add $I11, rx959_pos, 5
    gt $I11, rx959_eos, rx959_fail2509
    substr $S10, rx959_tgt, rx959_pos, 5
    ne $S10, ucs4:"nqp::", rx959_fail2509
    add rx959_pos, 5
    nqp_rxmark rx959_bstack, rxcap961_fail2517, rx959_pos, 0
    nqp_rxmark rx959_bstack, rxquantr962_done2519, -1, 0
  rxquantr962_loop2518:
    ge rx959_pos, rx959_eos, rx959_fail2509
    is_cclass $I11, .CCLASS_WORD, rx959_tgt, rx959_pos
    unless $I11, rx959_fail2509
    add rx959_pos, 1
    nqp_rxpeek $I19, rx959_bstack, rxquantr962_done2519
    inc $I19
    inc $I19
    set rx959_rep, rx959_bstack[$I19]
    nqp_rxcommit rx959_bstack, rxquantr962_done2519
    inc rx959_rep
    nqp_rxmark rx959_bstack, rxquantr962_done2519, rx959_pos, rx959_rep
    goto rxquantr962_loop2518
  rxquantr962_done2519:
    nqp_rxpeek $I19, rx959_bstack, rxcap961_fail2517
    inc $I19
    set $I11, rx959_bstack[$I19]
    repr_bind_attr_int rx959_cur, rx959_curclass, "$!pos", rx959_pos
    $P11 = rx959_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx959_pos)
    rx959_cstack = rx959_cur."!cursor_capture"($P11, "op")
    goto rxcap961_done2516
  rxcap961_fail2517:
    goto rx959_fail2509
  rxcap961_done2516:
    nqp_rxmark rx959_bstack, rxquantr963_done2521, rx959_pos, 0
  rxquantr963_loop2520:
    repr_bind_attr_int rx959_cur, rx959_curclass, "$!pos", rx959_pos
    $P11 = rx959_cur."args"()
    repr_get_attr_int $I11, $P11, rx959_curclass, "$!pos"
    lt $I11, 0, rx959_fail2509
    goto rxsubrule964_pass2522
  rxsubrule964_back2523:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx959_curclass, "$!pos"
    lt $I11, 0, rx959_fail2509
  rxsubrule964_pass2522:
    rx959_cstack = rx959_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule964_back2523
    push rx959_bstack, $I11
    push rx959_bstack, 0
    push rx959_bstack, rx959_pos
    elements $I11, rx959_cstack
    push rx959_bstack, $I11
    repr_get_attr_int rx959_pos, $P11, rx959_curclass, "$!pos"
    nqp_rxpeek $I19, rx959_bstack, rxquantr963_done2521
    inc $I19
    inc $I19
    set rx959_rep, rx959_bstack[$I19]
    nqp_rxcommit rx959_bstack, rxquantr963_done2521
    inc rx959_rep
  rxquantr963_done2521:
    rx959_cur."!cursor_pass"(rx959_pos, "term:sym<nqp::op>", 'backtrack'=>1)
    .return (rx959_cur)
  rx959_restart2508:
    repr_get_attr_obj rx959_cstack, rx959_cur, rx959_curclass, "$!cstack"
  rx959_fail2509:
    unless rx959_bstack, rx959_done2507
    pop $I19, rx959_bstack
    if_null rx959_cstack, rx959_cstack_done2512
    unless rx959_cstack, rx959_cstack_done2512
    dec $I19
    set $P11, rx959_cstack[$I19]
  rx959_cstack_done2512:
    pop rx959_rep, rx959_bstack
    pop rx959_pos, rx959_bstack
    pop $I19, rx959_bstack
    lt rx959_pos, -1, rx959_done2507
    lt rx959_pos, 0, rx959_fail2509
    eq $I19, 0, rx959_fail2509
    nqp_islist $I20, rx959_cstack
    unless $I20, rx959_jump2510
    elements $I18, rx959_bstack
    le $I18, 0, rx959_cut2511
    dec $I18
    set $I18, rx959_bstack[$I18]
  rx959_cut2511:
    assign rx959_cstack, $I18
  rx959_jump2510:
    jump $I19
  rx959_done2507:
    rx959_cur."!cursor_fail"()
    .return (rx959_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_143_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1210
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_403_1360256386.79' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx965_tgt
    .local int rx965_pos
    .local int rx965_off
    .local int rx965_eos
    .local int rx965_rep
    .local pmc rx965_cur
    .local pmc rx965_curclass
    .local pmc rx965_bstack
    .local pmc rx965_cstack
    (rx965_cur, rx965_tgt, rx965_pos, rx965_curclass, rx965_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx965_cur
    length rx965_eos, rx965_tgt
    eq $I19, 1, rx965_restart2526
    gt rx965_pos, rx965_eos, rx965_fail2527
    repr_get_attr_int $I11, self, rx965_curclass, "$!from"
    ne $I11, -1, rxscan966_done2533
    goto rxscan966_scan2532
  rxscan966_loop2531:
    inc rx965_pos
    gt rx965_pos, rx965_eos, rx965_fail2527
    repr_bind_attr_int rx965_cur, rx965_curclass, "$!from", rx965_pos
  rxscan966_scan2532:
    nqp_rxmark rx965_bstack, rxscan966_loop2531, rx965_pos, 0
  rxscan966_done2533:
    add $I11, rx965_pos, 3
    gt $I11, rx965_eos, rx965_fail2527
    substr $S10, rx965_tgt, rx965_pos, 3
    ne $S10, ucs4:"{*}", rx965_fail2527
    add rx965_pos, 3
    repr_bind_attr_int rx965_cur, rx965_curclass, "$!pos", rx965_pos
    $P11 = rx965_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx965_curclass, "$!pos"
    lt $I11, 0, rx965_fail2527
  alt967_02535:
    nqp_rxmark rx965_bstack, alt967_12539, rx965_pos, 0
    repr_bind_attr_int rx965_cur, rx965_curclass, "$!pos", rx965_pos
    store_lex unicode:"$\x{a2}", rx965_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_403_1360256386.79' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx965_fail2527
    goto alt967_end2534
  alt967_12539:
    repr_bind_attr_int rx965_cur, rx965_curclass, "$!pos", rx965_pos
    $P11 = rx965_cur."panic"("{*} may only appear in proto")
    repr_get_attr_int $I11, $P11, rx965_curclass, "$!pos"
    lt $I11, 0, rx965_fail2527
    repr_get_attr_int rx965_pos, $P11, rx965_curclass, "$!pos"
  alt967_end2534:
    rx965_cur."!cursor_pass"(rx965_pos, "term:sym<onlystar>", 'backtrack'=>1)
    .return (rx965_cur)
  rx965_restart2526:
    repr_get_attr_obj rx965_cstack, rx965_cur, rx965_curclass, "$!cstack"
  rx965_fail2527:
    unless rx965_bstack, rx965_done2525
    pop $I19, rx965_bstack
    if_null rx965_cstack, rx965_cstack_done2530
    unless rx965_cstack, rx965_cstack_done2530
    dec $I19
    set $P11, rx965_cstack[$I19]
  rx965_cstack_done2530:
    pop rx965_rep, rx965_bstack
    pop rx965_pos, rx965_bstack
    pop $I19, rx965_bstack
    lt rx965_pos, -1, rx965_done2525
    lt rx965_pos, 0, rx965_fail2527
    eq $I19, 0, rx965_fail2527
    nqp_islist $I20, rx965_cstack
    unless $I20, rx965_jump2528
    elements $I18, rx965_bstack
    le $I18, 0, rx965_cut2529
    dec $I18
    set $I18, rx965_bstack[$I18]
  rx965_cut2529:
    assign rx965_cstack, $I18
  rx965_jump2528:
    jump $I19
  rx965_done2525:
    rx965_cur."!cursor_fail"()
    .return (rx965_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_403_1360256386.79") :anon :lex :outer("cuid_143_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1212

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback2536
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback2537
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5005
  fallback2537:
    unless_null $P5002, vivi_9682538
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_9682538:
    set $P5001, $P5002
  fallback2536:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_144_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1215
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx970_tgt
    .local int rx970_pos
    .local int rx970_off
    .local int rx970_eos
    .local int rx970_rep
    .local pmc rx970_cur
    .local pmc rx970_curclass
    .local pmc rx970_bstack
    .local pmc rx970_cstack
    (rx970_cur, rx970_tgt, rx970_pos, rx970_curclass, rx970_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx970_cur
    length rx970_eos, rx970_tgt
    eq $I19, 1, rx970_restart2543
    gt rx970_pos, rx970_eos, rx970_fail2544
    repr_get_attr_int $I11, self, rx970_curclass, "$!from"
    ne $I11, -1, rxscan971_done2550
    goto rxscan971_scan2549
  rxscan971_loop2548:
    inc rx970_pos
    gt rx970_pos, rx970_eos, rx970_fail2544
    repr_bind_attr_int rx970_cur, rx970_curclass, "$!from", rx970_pos
  rxscan971_scan2549:
    nqp_rxmark rx970_bstack, rxscan971_loop2548, rx970_pos, 0
  rxscan971_done2550:
    add $I11, rx970_pos, 1
    gt $I11, rx970_eos, rx970_fail2544
    substr $S10, rx970_tgt, rx970_pos, 1
    ne $S10, ucs4:"(", rx970_fail2544
    add rx970_pos, 1
    repr_bind_attr_int rx970_cur, rx970_curclass, "$!pos", rx970_pos
    $P11 = rx970_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx970_curclass, "$!pos"
    lt $I11, 0, rx970_fail2544
    nqp_rxmark rx970_bstack, rxsubrule972_pass2551, -1, 0
  rxsubrule972_pass2551:
    rx970_cstack = rx970_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx970_pos, $P11, rx970_curclass, "$!pos"
    add $I11, rx970_pos, 1
    gt $I11, rx970_eos, rx970_fail2544
    substr $S10, rx970_tgt, rx970_pos, 1
    ne $S10, ucs4:")", rx970_fail2544
    add rx970_pos, 1
    rx970_cur."!cursor_pass"(rx970_pos, "args", 'backtrack'=>1)
    .return (rx970_cur)
  rx970_restart2543:
    repr_get_attr_obj rx970_cstack, rx970_cur, rx970_curclass, "$!cstack"
  rx970_fail2544:
    unless rx970_bstack, rx970_done2542
    pop $I19, rx970_bstack
    if_null rx970_cstack, rx970_cstack_done2547
    unless rx970_cstack, rx970_cstack_done2547
    dec $I19
    set $P11, rx970_cstack[$I19]
  rx970_cstack_done2547:
    pop rx970_rep, rx970_bstack
    pop rx970_pos, rx970_bstack
    pop $I19, rx970_bstack
    lt rx970_pos, -1, rx970_done2542
    lt rx970_pos, 0, rx970_fail2544
    eq $I19, 0, rx970_fail2544
    nqp_islist $I20, rx970_cstack
    unless $I20, rx970_jump2545
    elements $I18, rx970_bstack
    le $I18, 0, rx970_cut2546
    dec $I18
    set $I18, rx970_bstack[$I18]
  rx970_cut2546:
    assign rx970_cstack, $I18
  rx970_jump2545:
    jump $I19
  rx970_done2542:
    rx970_cur."!cursor_fail"()
    .return (rx970_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_145_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1219
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx973_tgt
    .local int rx973_pos
    .local int rx973_off
    .local int rx973_eos
    .local int rx973_rep
    .local pmc rx973_cur
    .local pmc rx973_curclass
    .local pmc rx973_bstack
    .local pmc rx973_cstack
    (rx973_cur, rx973_tgt, rx973_pos, rx973_curclass, rx973_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx973_cur
    length rx973_eos, rx973_tgt
    eq $I19, 1, rx973_restart2554
    gt rx973_pos, rx973_eos, rx973_fail2555
    repr_get_attr_int $I11, self, rx973_curclass, "$!from"
    ne $I11, -1, rxscan974_done2561
    goto rxscan974_scan2560
  rxscan974_loop2559:
    inc rx973_pos
    gt rx973_pos, rx973_eos, rx973_fail2555
    repr_bind_attr_int rx973_cur, rx973_curclass, "$!from", rx973_pos
  rxscan974_scan2560:
    nqp_rxmark rx973_bstack, rxscan974_loop2559, rx973_pos, 0
  rxscan974_done2561:
    repr_bind_attr_int rx973_cur, rx973_curclass, "$!pos", rx973_pos
    $P11 = rx973_cur."ws"()
    repr_get_attr_int $I11, $P11, rx973_curclass, "$!pos"
    lt $I11, 0, rx973_fail2555
    repr_get_attr_int rx973_pos, $P11, rx973_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt976_02564
    nqp_push_label $P11, alt976_12566
    nqp_rxmark rx973_bstack, alt976_end2563, -1, 0
    rx973_cur."!alt"(rx973_pos, "alt_nfa__36_1360256389.387", $P11)
    goto rx973_fail2555
  alt976_02564:
    repr_bind_attr_int rx973_cur, rx973_curclass, "$!pos", rx973_pos
    $P11 = rx973_cur."EXPR"("f=")
    repr_get_attr_int $I11, $P11, rx973_curclass, "$!pos"
    lt $I11, 0, rx973_fail2555
    nqp_rxmark rx973_bstack, rxsubrule977_pass2565, -1, 0
  rxsubrule977_pass2565:
    rx973_cstack = rx973_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx973_pos, $P11, rx973_curclass, "$!pos"
    goto alt976_end2563
  alt976_12566:
    goto alt976_end2563
  alt976_end2563:
    nqp_rxcommit rx973_bstack, alt976_end2563
    rx973_cur."!cursor_pass"(rx973_pos, "arglist", 'backtrack'=>1)
    .return (rx973_cur)
  rx973_restart2554:
    repr_get_attr_obj rx973_cstack, rx973_cur, rx973_curclass, "$!cstack"
  rx973_fail2555:
    unless rx973_bstack, rx973_done2553
    pop $I19, rx973_bstack
    if_null rx973_cstack, rx973_cstack_done2558
    unless rx973_cstack, rx973_cstack_done2558
    dec $I19
    set $P11, rx973_cstack[$I19]
  rx973_cstack_done2558:
    pop rx973_rep, rx973_bstack
    pop rx973_pos, rx973_bstack
    pop $I19, rx973_bstack
    lt rx973_pos, -1, rx973_done2553
    lt rx973_pos, 0, rx973_fail2555
    eq $I19, 0, rx973_fail2555
    nqp_islist $I20, rx973_cstack
    unless $I20, rx973_jump2556
    elements $I18, rx973_bstack
    le $I18, 0, rx973_cut2557
    dec $I18
    set $I18, rx973_bstack[$I18]
  rx973_cut2557:
    assign rx973_cstack, $I18
  rx973_jump2556:
    jump $I19
  rx973_done2553:
    rx973_cur."!cursor_fail"()
    .return (rx973_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_146_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1228
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx979_tgt
    .local int rx979_pos
    .local int rx979_off
    .local int rx979_eos
    .local int rx979_rep
    .local pmc rx979_cur
    .local pmc rx979_curclass
    .local pmc rx979_bstack
    .local pmc rx979_cstack
    (rx979_cur, rx979_tgt, rx979_pos, rx979_curclass, rx979_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx979_cur
    length rx979_eos, rx979_tgt
    eq $I19, 1, rx979_restart2570
    gt rx979_pos, rx979_eos, rx979_fail2571
    repr_get_attr_int $I11, self, rx979_curclass, "$!from"
    ne $I11, -1, rxscan980_done2577
    goto rxscan980_scan2576
  rxscan980_loop2575:
    inc rx979_pos
    gt rx979_pos, rx979_eos, rx979_fail2571
    repr_bind_attr_int rx979_cur, rx979_curclass, "$!from", rx979_pos
  rxscan980_scan2576:
    nqp_rxmark rx979_bstack, rxscan980_loop2575, rx979_pos, 0
  rxscan980_done2577:
    repr_bind_attr_int rx979_cur, rx979_curclass, "$!pos", rx979_pos
    $P11 = rx979_cur."value"()
    repr_get_attr_int $I11, $P11, rx979_curclass, "$!pos"
    lt $I11, 0, rx979_fail2571
    nqp_rxmark rx979_bstack, rxsubrule981_pass2578, -1, 0
  rxsubrule981_pass2578:
    rx979_cstack = rx979_cur."!cursor_capture"($P11, "value")
    repr_get_attr_int rx979_pos, $P11, rx979_curclass, "$!pos"
    rx979_cur."!cursor_pass"(rx979_pos, "term:sym<value>", 'backtrack'=>1)
    .return (rx979_cur)
  rx979_restart2570:
    repr_get_attr_obj rx979_cstack, rx979_cur, rx979_curclass, "$!cstack"
  rx979_fail2571:
    unless rx979_bstack, rx979_done2569
    pop $I19, rx979_bstack
    if_null rx979_cstack, rx979_cstack_done2574
    unless rx979_cstack, rx979_cstack_done2574
    dec $I19
    set $P11, rx979_cstack[$I19]
  rx979_cstack_done2574:
    pop rx979_rep, rx979_bstack
    pop rx979_pos, rx979_bstack
    pop $I19, rx979_bstack
    lt rx979_pos, -1, rx979_done2569
    lt rx979_pos, 0, rx979_fail2571
    eq $I19, 0, rx979_fail2571
    nqp_islist $I20, rx979_cstack
    unless $I20, rx979_jump2572
    elements $I18, rx979_bstack
    le $I18, 0, rx979_cut2573
    dec $I18
    set $I18, rx979_bstack[$I18]
  rx979_cut2573:
    assign rx979_cstack, $I18
  rx979_jump2572:
    jump $I19
  rx979_done2569:
    rx979_cur."!cursor_fail"()
    .return (rx979_cur) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_147_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1230
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx982_tgt
    .local int rx982_pos
    .local int rx982_off
    .local int rx982_eos
    .local int rx982_rep
    .local pmc rx982_cur
    .local pmc rx982_curclass
    .local pmc rx982_bstack
    .local pmc rx982_cstack
    (rx982_cur, rx982_tgt, rx982_pos, rx982_curclass, rx982_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx982_cur
    length rx982_eos, rx982_tgt
    eq $I19, 1, rx982_restart2581
    gt rx982_pos, rx982_eos, rx982_fail2582
    repr_get_attr_int $I11, self, rx982_curclass, "$!from"
    ne $I11, -1, rxscan983_done2588
    goto rxscan983_scan2587
  rxscan983_loop2586:
    inc rx982_pos
    gt rx982_pos, rx982_eos, rx982_fail2582
    repr_bind_attr_int rx982_cur, rx982_curclass, "$!from", rx982_pos
  rxscan983_scan2587:
    nqp_rxmark rx982_bstack, rxscan983_loop2586, rx982_pos, 0
  rxscan983_done2588:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt984_02590
    nqp_push_label $P11, alt984_12592
    nqp_rxmark rx982_bstack, alt984_end2589, -1, 0
    rx982_cur."!alt"(rx982_pos, "alt_nfa__37_1360256389.396", $P11)
    goto rx982_fail2582
  alt984_02590:
    repr_bind_attr_int rx982_cur, rx982_curclass, "$!pos", rx982_pos
    $P11 = rx982_cur."quote"()
    repr_get_attr_int $I11, $P11, rx982_curclass, "$!pos"
    lt $I11, 0, rx982_fail2582
    nqp_rxmark rx982_bstack, rxsubrule985_pass2591, -1, 0
  rxsubrule985_pass2591:
    rx982_cstack = rx982_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx982_pos, $P11, rx982_curclass, "$!pos"
    goto alt984_end2589
  alt984_12592:
    repr_bind_attr_int rx982_cur, rx982_curclass, "$!pos", rx982_pos
    $P11 = rx982_cur."number"()
    repr_get_attr_int $I11, $P11, rx982_curclass, "$!pos"
    lt $I11, 0, rx982_fail2582
    nqp_rxmark rx982_bstack, rxsubrule986_pass2593, -1, 0
  rxsubrule986_pass2593:
    rx982_cstack = rx982_cur."!cursor_capture"($P11, "number")
    repr_get_attr_int rx982_pos, $P11, rx982_curclass, "$!pos"
    goto alt984_end2589
  alt984_end2589:
    rx982_cur."!cursor_pass"(rx982_pos, "value", 'backtrack'=>1)
    .return (rx982_cur)
  rx982_restart2581:
    repr_get_attr_obj rx982_cstack, rx982_cur, rx982_curclass, "$!cstack"
  rx982_fail2582:
    unless rx982_bstack, rx982_done2580
    pop $I19, rx982_bstack
    if_null rx982_cstack, rx982_cstack_done2585
    unless rx982_cstack, rx982_cstack_done2585
    dec $I19
    set $P11, rx982_cstack[$I19]
  rx982_cstack_done2585:
    pop rx982_rep, rx982_bstack
    pop rx982_pos, rx982_bstack
    pop $I19, rx982_bstack
    lt rx982_pos, -1, rx982_done2580
    lt rx982_pos, 0, rx982_fail2582
    eq $I19, 0, rx982_fail2582
    nqp_islist $I20, rx982_cstack
    unless $I20, rx982_jump2583
    elements $I18, rx982_bstack
    le $I18, 0, rx982_cut2584
    dec $I18
    set $I18, rx982_bstack[$I18]
  rx982_cut2584:
    assign rx982_cstack, $I18
  rx982_jump2583:
    jump $I19
  rx982_done2580:
    rx982_cur."!cursor_fail"()
    .return (rx982_cur) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_148_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1235
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx987_tgt
    .local int rx987_pos
    .local int rx987_off
    .local int rx987_eos
    .local int rx987_rep
    .local pmc rx987_cur
    .local pmc rx987_curclass
    .local pmc rx987_bstack
    .local pmc rx987_cstack
    (rx987_cur, rx987_tgt, rx987_pos, rx987_curclass, rx987_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx987_cur
    length rx987_eos, rx987_tgt
    eq $I19, 1, rx987_restart2596
    gt rx987_pos, rx987_eos, rx987_fail2597
    repr_get_attr_int $I11, self, rx987_curclass, "$!from"
    ne $I11, -1, rxscan988_done2603
    goto rxscan988_scan2602
  rxscan988_loop2601:
    inc rx987_pos
    gt rx987_pos, rx987_eos, rx987_fail2597
    repr_bind_attr_int rx987_cur, rx987_curclass, "$!from", rx987_pos
  rxscan988_scan2602:
    nqp_rxmark rx987_bstack, rxscan988_loop2601, rx987_pos, 0
  rxscan988_done2603:
    nqp_rxmark rx987_bstack, rxcap989_fail2605, rx987_pos, 0
    nqp_rxmark rx987_bstack, rxquantr990_done2607, rx987_pos, 0
  rxquantr990_loop2606:
  alt991_02609:
    nqp_rxmark rx987_bstack, alt991_12610, rx987_pos, 0
    add $I11, rx987_pos, 1
    gt $I11, rx987_eos, rx987_fail2597
    substr $S10, rx987_tgt, rx987_pos, 1
    ne $S10, ucs4:"-", rx987_fail2597
    add rx987_pos, 1
    goto alt991_end2608
  alt991_12610:
    ge rx987_pos, rx987_eos, rx987_fail2597
    substr $S11, rx987_tgt, rx987_pos, 1
    index $I11, ucs4:"+", $S11
    lt $I11, 0, rx987_fail2597
    inc rx987_pos
  alt991_end2608:
    nqp_rxpeek $I19, rx987_bstack, rxquantr990_done2607
    inc $I19
    inc $I19
    set rx987_rep, rx987_bstack[$I19]
    nqp_rxcommit rx987_bstack, rxquantr990_done2607
    inc rx987_rep
  rxquantr990_done2607:
    nqp_rxpeek $I19, rx987_bstack, rxcap989_fail2605
    inc $I19
    set $I11, rx987_bstack[$I19]
    repr_bind_attr_int rx987_cur, rx987_curclass, "$!pos", rx987_pos
    $P11 = rx987_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx987_pos)
    rx987_cstack = rx987_cur."!cursor_capture"($P11, "sign")
    goto rxcap989_done2604
  rxcap989_fail2605:
    goto rx987_fail2597
  rxcap989_done2604:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt992_02612
    nqp_push_label $P11, alt992_12614
    nqp_rxmark rx987_bstack, alt992_end2611, -1, 0
    rx987_cur."!alt"(rx987_pos, "alt_nfa__38_1360256389.405", $P11)
    goto rx987_fail2597
  alt992_02612:
    repr_bind_attr_int rx987_cur, rx987_curclass, "$!pos", rx987_pos
    $P11 = rx987_cur."dec_number"()
    repr_get_attr_int $I11, $P11, rx987_curclass, "$!pos"
    lt $I11, 0, rx987_fail2597
    nqp_rxmark rx987_bstack, rxsubrule993_pass2613, -1, 0
  rxsubrule993_pass2613:
    rx987_cstack = rx987_cur."!cursor_capture"($P11, "dec_number")
    repr_get_attr_int rx987_pos, $P11, rx987_curclass, "$!pos"
    goto alt992_end2611
  alt992_12614:
    repr_bind_attr_int rx987_cur, rx987_curclass, "$!pos", rx987_pos
    $P11 = rx987_cur."integer"()
    repr_get_attr_int $I11, $P11, rx987_curclass, "$!pos"
    lt $I11, 0, rx987_fail2597
    nqp_rxmark rx987_bstack, rxsubrule994_pass2615, -1, 0
  rxsubrule994_pass2615:
    rx987_cstack = rx987_cur."!cursor_capture"($P11, "integer")
    repr_get_attr_int rx987_pos, $P11, rx987_curclass, "$!pos"
    goto alt992_end2611
  alt992_end2611:
    nqp_rxcommit rx987_bstack, alt992_end2611
    rx987_cur."!cursor_pass"(rx987_pos, "number", 'backtrack'=>1)
    .return (rx987_cur)
  rx987_restart2596:
    repr_get_attr_obj rx987_cstack, rx987_cur, rx987_curclass, "$!cstack"
  rx987_fail2597:
    unless rx987_bstack, rx987_done2595
    pop $I19, rx987_bstack
    if_null rx987_cstack, rx987_cstack_done2600
    unless rx987_cstack, rx987_cstack_done2600
    dec $I19
    set $P11, rx987_cstack[$I19]
  rx987_cstack_done2600:
    pop rx987_rep, rx987_bstack
    pop rx987_pos, rx987_bstack
    pop $I19, rx987_bstack
    lt rx987_pos, -1, rx987_done2595
    lt rx987_pos, 0, rx987_fail2597
    eq $I19, 0, rx987_fail2597
    nqp_islist $I20, rx987_cstack
    unless $I20, rx987_jump2598
    elements $I18, rx987_bstack
    le $I18, 0, rx987_cut2599
    dec $I18
    set $I18, rx987_bstack[$I18]
  rx987_cut2599:
    assign rx987_cstack, $I18
  rx987_jump2598:
    jump $I19
  rx987_done2595:
    rx987_cur."!cursor_fail"()
    .return (rx987_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote" :subid("cuid_149_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1240
    .param pmc self 
    $P5001 = self."!protoregex"("quote")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_150_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1241
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx995_tgt
    .local int rx995_pos
    .local int rx995_off
    .local int rx995_eos
    .local int rx995_rep
    .local pmc rx995_cur
    .local pmc rx995_curclass
    .local pmc rx995_bstack
    .local pmc rx995_cstack
    (rx995_cur, rx995_tgt, rx995_pos, rx995_curclass, rx995_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx995_cur
    length rx995_eos, rx995_tgt
    eq $I19, 1, rx995_restart2618
    gt rx995_pos, rx995_eos, rx995_fail2619
    repr_get_attr_int $I11, self, rx995_curclass, "$!from"
    ne $I11, -1, rxscan996_done2625
    goto rxscan996_scan2624
  rxscan996_loop2623:
    inc rx995_pos
    gt rx995_pos, rx995_eos, rx995_fail2619
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!from", rx995_pos
  rxscan996_scan2624:
    nqp_rxmark rx995_bstack, rxscan996_loop2623, rx995_pos, 0
  rxscan996_done2625:
    ge rx995_pos, rx995_eos, rx995_fail2619
    substr $S11, rx995_tgt, rx995_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx995_fail2619
    repr_bind_attr_int rx995_cur, rx995_curclass, "$!pos", rx995_pos
    $P11 = rx995_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx995_curclass, "$!pos"
    lt $I11, 0, rx995_fail2619
    nqp_rxmark rx995_bstack, rxsubrule997_pass2626, -1, 0
  rxsubrule997_pass2626:
    rx995_cstack = rx995_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx995_pos, $P11, rx995_curclass, "$!pos"
    rx995_cur."!cursor_pass"(rx995_pos, "quote:sym<apos>", 'backtrack'=>1)
    .return (rx995_cur)
  rx995_restart2618:
    repr_get_attr_obj rx995_cstack, rx995_cur, rx995_curclass, "$!cstack"
  rx995_fail2619:
    unless rx995_bstack, rx995_done2617
    pop $I19, rx995_bstack
    if_null rx995_cstack, rx995_cstack_done2622
    unless rx995_cstack, rx995_cstack_done2622
    dec $I19
    set $P11, rx995_cstack[$I19]
  rx995_cstack_done2622:
    pop rx995_rep, rx995_bstack
    pop rx995_pos, rx995_bstack
    pop $I19, rx995_bstack
    lt rx995_pos, -1, rx995_done2617
    lt rx995_pos, 0, rx995_fail2619
    eq $I19, 0, rx995_fail2619
    nqp_islist $I20, rx995_cstack
    unless $I20, rx995_jump2620
    elements $I18, rx995_bstack
    le $I18, 0, rx995_cut2621
    dec $I18
    set $I18, rx995_bstack[$I18]
  rx995_cut2621:
    assign rx995_cstack, $I18
  rx995_jump2620:
    jump $I19
  rx995_done2617:
    rx995_cur."!cursor_fail"()
    .return (rx995_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_151_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1242
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx998_tgt
    .local int rx998_pos
    .local int rx998_off
    .local int rx998_eos
    .local int rx998_rep
    .local pmc rx998_cur
    .local pmc rx998_curclass
    .local pmc rx998_bstack
    .local pmc rx998_cstack
    (rx998_cur, rx998_tgt, rx998_pos, rx998_curclass, rx998_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx998_cur
    length rx998_eos, rx998_tgt
    eq $I19, 1, rx998_restart2629
    gt rx998_pos, rx998_eos, rx998_fail2630
    repr_get_attr_int $I11, self, rx998_curclass, "$!from"
    ne $I11, -1, rxscan999_done2636
    goto rxscan999_scan2635
  rxscan999_loop2634:
    inc rx998_pos
    gt rx998_pos, rx998_eos, rx998_fail2630
    repr_bind_attr_int rx998_cur, rx998_curclass, "$!from", rx998_pos
  rxscan999_scan2635:
    nqp_rxmark rx998_bstack, rxscan999_loop2634, rx998_pos, 0
  rxscan999_done2636:
    ge rx998_pos, rx998_eos, rx998_fail2630
    substr $S11, rx998_tgt, rx998_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx998_fail2630
    repr_bind_attr_int rx998_cur, rx998_curclass, "$!pos", rx998_pos
    $P11 = rx998_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx998_curclass, "$!pos"
    lt $I11, 0, rx998_fail2630
    nqp_rxmark rx998_bstack, rxsubrule1000_pass2637, -1, 0
  rxsubrule1000_pass2637:
    rx998_cstack = rx998_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx998_pos, $P11, rx998_curclass, "$!pos"
    rx998_cur."!cursor_pass"(rx998_pos, "quote:sym<dblq>", 'backtrack'=>1)
    .return (rx998_cur)
  rx998_restart2629:
    repr_get_attr_obj rx998_cstack, rx998_cur, rx998_curclass, "$!cstack"
  rx998_fail2630:
    unless rx998_bstack, rx998_done2628
    pop $I19, rx998_bstack
    if_null rx998_cstack, rx998_cstack_done2633
    unless rx998_cstack, rx998_cstack_done2633
    dec $I19
    set $P11, rx998_cstack[$I19]
  rx998_cstack_done2633:
    pop rx998_rep, rx998_bstack
    pop rx998_pos, rx998_bstack
    pop $I19, rx998_bstack
    lt rx998_pos, -1, rx998_done2628
    lt rx998_pos, 0, rx998_fail2630
    eq $I19, 0, rx998_fail2630
    nqp_islist $I20, rx998_cstack
    unless $I20, rx998_jump2631
    elements $I18, rx998_bstack
    le $I18, 0, rx998_cut2632
    dec $I18
    set $I18, rx998_bstack[$I18]
  rx998_cut2632:
    assign rx998_cstack, $I18
  rx998_jump2631:
    jump $I19
  rx998_done2628:
    rx998_cur."!cursor_fail"()
    .return (rx998_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_152_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1243
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1001_tgt
    .local int rx1001_pos
    .local int rx1001_off
    .local int rx1001_eos
    .local int rx1001_rep
    .local pmc rx1001_cur
    .local pmc rx1001_curclass
    .local pmc rx1001_bstack
    .local pmc rx1001_cstack
    (rx1001_cur, rx1001_tgt, rx1001_pos, rx1001_curclass, rx1001_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1001_cur
    length rx1001_eos, rx1001_tgt
    eq $I19, 1, rx1001_restart2640
    gt rx1001_pos, rx1001_eos, rx1001_fail2641
    repr_get_attr_int $I11, self, rx1001_curclass, "$!from"
    ne $I11, -1, rxscan1002_done2647
    goto rxscan1002_scan2646
  rxscan1002_loop2645:
    inc rx1001_pos
    gt rx1001_pos, rx1001_eos, rx1001_fail2641
    repr_bind_attr_int rx1001_cur, rx1001_curclass, "$!from", rx1001_pos
  rxscan1002_scan2646:
    nqp_rxmark rx1001_bstack, rxscan1002_loop2645, rx1001_pos, 0
  rxscan1002_done2647:
    nqp_rxmark rx1001_bstack, rxcap1003_fail2649, rx1001_pos, 0
    add $I11, rx1001_pos, 1
    gt $I11, rx1001_eos, rx1001_fail2641
    substr $S10, rx1001_tgt, rx1001_pos, 1
    ne $S10, ucs4:"q", rx1001_fail2641
    add rx1001_pos, 1
    nqp_rxpeek $I19, rx1001_bstack, rxcap1003_fail2649
    inc $I19
    set $I11, rx1001_bstack[$I19]
    repr_bind_attr_int rx1001_cur, rx1001_curclass, "$!pos", rx1001_pos
    $P11 = rx1001_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1001_pos)
    rx1001_cstack = rx1001_cur."!cursor_capture"($P11, "sym")
    goto rxcap1003_done2648
  rxcap1003_fail2649:
    goto rx1001_fail2641
  rxcap1003_done2648:
    le rx1001_pos, 0, rx1001_fail2641
    is_cclass $I11, .CCLASS_WORD, rx1001_tgt, rx1001_pos
    if $I11, rx1001_fail2641
    sub $I11, rx1001_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx1001_tgt, $I11
    unless $I11, rx1001_fail2641
    ge rx1001_pos, rx1001_eos, rx1001_fail2641
    substr $S11, rx1001_tgt, rx1001_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx1001_fail2641
    repr_bind_attr_int rx1001_cur, rx1001_curclass, "$!pos", rx1001_pos
    $P11 = rx1001_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1001_curclass, "$!pos"
    lt $I11, 0, rx1001_fail2641
    repr_get_attr_int rx1001_pos, $P11, rx1001_curclass, "$!pos"
    repr_bind_attr_int rx1001_cur, rx1001_curclass, "$!pos", rx1001_pos
    $P11 = rx1001_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx1001_curclass, "$!pos"
    lt $I11, 0, rx1001_fail2641
    nqp_rxmark rx1001_bstack, rxsubrule1006_pass2652, -1, 0
  rxsubrule1006_pass2652:
    rx1001_cstack = rx1001_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1001_pos, $P11, rx1001_curclass, "$!pos"
    rx1001_cur."!cursor_pass"(rx1001_pos, "quote:sym<q>", 'backtrack'=>1)
    .return (rx1001_cur)
  rx1001_restart2640:
    repr_get_attr_obj rx1001_cstack, rx1001_cur, rx1001_curclass, "$!cstack"
  rx1001_fail2641:
    unless rx1001_bstack, rx1001_done2639
    pop $I19, rx1001_bstack
    if_null rx1001_cstack, rx1001_cstack_done2644
    unless rx1001_cstack, rx1001_cstack_done2644
    dec $I19
    set $P11, rx1001_cstack[$I19]
  rx1001_cstack_done2644:
    pop rx1001_rep, rx1001_bstack
    pop rx1001_pos, rx1001_bstack
    pop $I19, rx1001_bstack
    lt rx1001_pos, -1, rx1001_done2639
    lt rx1001_pos, 0, rx1001_fail2641
    eq $I19, 0, rx1001_fail2641
    nqp_islist $I20, rx1001_cstack
    unless $I20, rx1001_jump2642
    elements $I18, rx1001_bstack
    le $I18, 0, rx1001_cut2643
    dec $I18
    set $I18, rx1001_bstack[$I18]
  rx1001_cut2643:
    assign rx1001_cstack, $I18
  rx1001_jump2642:
    jump $I19
  rx1001_done2639:
    rx1001_cur."!cursor_fail"()
    .return (rx1001_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_153_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1244
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1007_tgt
    .local int rx1007_pos
    .local int rx1007_off
    .local int rx1007_eos
    .local int rx1007_rep
    .local pmc rx1007_cur
    .local pmc rx1007_curclass
    .local pmc rx1007_bstack
    .local pmc rx1007_cstack
    (rx1007_cur, rx1007_tgt, rx1007_pos, rx1007_curclass, rx1007_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1007_cur
    length rx1007_eos, rx1007_tgt
    eq $I19, 1, rx1007_restart2655
    gt rx1007_pos, rx1007_eos, rx1007_fail2656
    repr_get_attr_int $I11, self, rx1007_curclass, "$!from"
    ne $I11, -1, rxscan1008_done2662
    goto rxscan1008_scan2661
  rxscan1008_loop2660:
    inc rx1007_pos
    gt rx1007_pos, rx1007_eos, rx1007_fail2656
    repr_bind_attr_int rx1007_cur, rx1007_curclass, "$!from", rx1007_pos
  rxscan1008_scan2661:
    nqp_rxmark rx1007_bstack, rxscan1008_loop2660, rx1007_pos, 0
  rxscan1008_done2662:
    nqp_rxmark rx1007_bstack, rxcap1009_fail2664, rx1007_pos, 0
    add $I11, rx1007_pos, 2
    gt $I11, rx1007_eos, rx1007_fail2656
    substr $S10, rx1007_tgt, rx1007_pos, 2
    ne $S10, ucs4:"qq", rx1007_fail2656
    add rx1007_pos, 2
    nqp_rxpeek $I19, rx1007_bstack, rxcap1009_fail2664
    inc $I19
    set $I11, rx1007_bstack[$I19]
    repr_bind_attr_int rx1007_cur, rx1007_curclass, "$!pos", rx1007_pos
    $P11 = rx1007_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1007_pos)
    rx1007_cstack = rx1007_cur."!cursor_capture"($P11, "sym")
    goto rxcap1009_done2663
  rxcap1009_fail2664:
    goto rx1007_fail2656
  rxcap1009_done2663:
    le rx1007_pos, 0, rx1007_fail2656
    is_cclass $I11, .CCLASS_WORD, rx1007_tgt, rx1007_pos
    if $I11, rx1007_fail2656
    sub $I11, rx1007_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx1007_tgt, $I11
    unless $I11, rx1007_fail2656
    ge rx1007_pos, rx1007_eos, rx1007_fail2656
    substr $S11, rx1007_tgt, rx1007_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx1007_fail2656
    repr_bind_attr_int rx1007_cur, rx1007_curclass, "$!pos", rx1007_pos
    $P11 = rx1007_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1007_curclass, "$!pos"
    lt $I11, 0, rx1007_fail2656
    repr_get_attr_int rx1007_pos, $P11, rx1007_curclass, "$!pos"
    repr_bind_attr_int rx1007_cur, rx1007_curclass, "$!pos", rx1007_pos
    $P11 = rx1007_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx1007_curclass, "$!pos"
    lt $I11, 0, rx1007_fail2656
    nqp_rxmark rx1007_bstack, rxsubrule1012_pass2667, -1, 0
  rxsubrule1012_pass2667:
    rx1007_cstack = rx1007_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1007_pos, $P11, rx1007_curclass, "$!pos"
    rx1007_cur."!cursor_pass"(rx1007_pos, "quote:sym<qq>", 'backtrack'=>1)
    .return (rx1007_cur)
  rx1007_restart2655:
    repr_get_attr_obj rx1007_cstack, rx1007_cur, rx1007_curclass, "$!cstack"
  rx1007_fail2656:
    unless rx1007_bstack, rx1007_done2654
    pop $I19, rx1007_bstack
    if_null rx1007_cstack, rx1007_cstack_done2659
    unless rx1007_cstack, rx1007_cstack_done2659
    dec $I19
    set $P11, rx1007_cstack[$I19]
  rx1007_cstack_done2659:
    pop rx1007_rep, rx1007_bstack
    pop rx1007_pos, rx1007_bstack
    pop $I19, rx1007_bstack
    lt rx1007_pos, -1, rx1007_done2654
    lt rx1007_pos, 0, rx1007_fail2656
    eq $I19, 0, rx1007_fail2656
    nqp_islist $I20, rx1007_cstack
    unless $I20, rx1007_jump2657
    elements $I18, rx1007_bstack
    le $I18, 0, rx1007_cut2658
    dec $I18
    set $I18, rx1007_bstack[$I18]
  rx1007_cut2658:
    assign rx1007_cstack, $I18
  rx1007_jump2657:
    jump $I19
  rx1007_done2654:
    rx1007_cur."!cursor_fail"()
    .return (rx1007_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_154_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1245
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1013_tgt
    .local int rx1013_pos
    .local int rx1013_off
    .local int rx1013_eos
    .local int rx1013_rep
    .local pmc rx1013_cur
    .local pmc rx1013_curclass
    .local pmc rx1013_bstack
    .local pmc rx1013_cstack
    (rx1013_cur, rx1013_tgt, rx1013_pos, rx1013_curclass, rx1013_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1013_cur
    length rx1013_eos, rx1013_tgt
    eq $I19, 1, rx1013_restart2670
    gt rx1013_pos, rx1013_eos, rx1013_fail2671
    repr_get_attr_int $I11, self, rx1013_curclass, "$!from"
    ne $I11, -1, rxscan1014_done2677
    goto rxscan1014_scan2676
  rxscan1014_loop2675:
    inc rx1013_pos
    gt rx1013_pos, rx1013_eos, rx1013_fail2671
    repr_bind_attr_int rx1013_cur, rx1013_curclass, "$!from", rx1013_pos
  rxscan1014_scan2676:
    nqp_rxmark rx1013_bstack, rxscan1014_loop2675, rx1013_pos, 0
  rxscan1014_done2677:
    nqp_rxmark rx1013_bstack, rxcap1015_fail2679, rx1013_pos, 0
    add $I11, rx1013_pos, 1
    gt $I11, rx1013_eos, rx1013_fail2671
    substr $S10, rx1013_tgt, rx1013_pos, 1
    ne $S10, ucs4:"Q", rx1013_fail2671
    add rx1013_pos, 1
    nqp_rxpeek $I19, rx1013_bstack, rxcap1015_fail2679
    inc $I19
    set $I11, rx1013_bstack[$I19]
    repr_bind_attr_int rx1013_cur, rx1013_curclass, "$!pos", rx1013_pos
    $P11 = rx1013_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1013_pos)
    rx1013_cstack = rx1013_cur."!cursor_capture"($P11, "sym")
    goto rxcap1015_done2678
  rxcap1015_fail2679:
    goto rx1013_fail2671
  rxcap1015_done2678:
    le rx1013_pos, 0, rx1013_fail2671
    is_cclass $I11, .CCLASS_WORD, rx1013_tgt, rx1013_pos
    if $I11, rx1013_fail2671
    sub $I11, rx1013_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx1013_tgt, $I11
    unless $I11, rx1013_fail2671
    ge rx1013_pos, rx1013_eos, rx1013_fail2671
    substr $S11, rx1013_tgt, rx1013_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx1013_fail2671
    repr_bind_attr_int rx1013_cur, rx1013_curclass, "$!pos", rx1013_pos
    $P11 = rx1013_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1013_curclass, "$!pos"
    lt $I11, 0, rx1013_fail2671
    repr_get_attr_int rx1013_pos, $P11, rx1013_curclass, "$!pos"
    repr_bind_attr_int rx1013_cur, rx1013_curclass, "$!pos", rx1013_pos
    $P11 = rx1013_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx1013_curclass, "$!pos"
    lt $I11, 0, rx1013_fail2671
    nqp_rxmark rx1013_bstack, rxsubrule1018_pass2682, -1, 0
  rxsubrule1018_pass2682:
    rx1013_cstack = rx1013_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1013_pos, $P11, rx1013_curclass, "$!pos"
    rx1013_cur."!cursor_pass"(rx1013_pos, "quote:sym<Q>", 'backtrack'=>1)
    .return (rx1013_cur)
  rx1013_restart2670:
    repr_get_attr_obj rx1013_cstack, rx1013_cur, rx1013_curclass, "$!cstack"
  rx1013_fail2671:
    unless rx1013_bstack, rx1013_done2669
    pop $I19, rx1013_bstack
    if_null rx1013_cstack, rx1013_cstack_done2674
    unless rx1013_cstack, rx1013_cstack_done2674
    dec $I19
    set $P11, rx1013_cstack[$I19]
  rx1013_cstack_done2674:
    pop rx1013_rep, rx1013_bstack
    pop rx1013_pos, rx1013_bstack
    pop $I19, rx1013_bstack
    lt rx1013_pos, -1, rx1013_done2669
    lt rx1013_pos, 0, rx1013_fail2671
    eq $I19, 0, rx1013_fail2671
    nqp_islist $I20, rx1013_cstack
    unless $I20, rx1013_jump2672
    elements $I18, rx1013_bstack
    le $I18, 0, rx1013_cut2673
    dec $I18
    set $I18, rx1013_bstack[$I18]
  rx1013_cut2673:
    assign rx1013_cstack, $I18
  rx1013_jump2672:
    jump $I19
  rx1013_done2669:
    rx1013_cur."!cursor_fail"()
    .return (rx1013_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_155_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1246
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1019_tgt
    .local int rx1019_pos
    .local int rx1019_off
    .local int rx1019_eos
    .local int rx1019_rep
    .local pmc rx1019_cur
    .local pmc rx1019_curclass
    .local pmc rx1019_bstack
    .local pmc rx1019_cstack
    (rx1019_cur, rx1019_tgt, rx1019_pos, rx1019_curclass, rx1019_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1019_cur
    length rx1019_eos, rx1019_tgt
    eq $I19, 1, rx1019_restart2685
    gt rx1019_pos, rx1019_eos, rx1019_fail2686
    repr_get_attr_int $I11, self, rx1019_curclass, "$!from"
    ne $I11, -1, rxscan1020_done2692
    goto rxscan1020_scan2691
  rxscan1020_loop2690:
    inc rx1019_pos
    gt rx1019_pos, rx1019_eos, rx1019_fail2686
    repr_bind_attr_int rx1019_cur, rx1019_curclass, "$!from", rx1019_pos
  rxscan1020_scan2691:
    nqp_rxmark rx1019_bstack, rxscan1020_loop2690, rx1019_pos, 0
  rxscan1020_done2692:
    nqp_rxmark rx1019_bstack, rxcap1021_fail2694, rx1019_pos, 0
    add $I11, rx1019_pos, 5
    gt $I11, rx1019_eos, rx1019_fail2686
    substr $S10, rx1019_tgt, rx1019_pos, 5
    ne $S10, ucs4:"Q:PIR", rx1019_fail2686
    add rx1019_pos, 5
    nqp_rxpeek $I19, rx1019_bstack, rxcap1021_fail2694
    inc $I19
    set $I11, rx1019_bstack[$I19]
    repr_bind_attr_int rx1019_cur, rx1019_curclass, "$!pos", rx1019_pos
    $P11 = rx1019_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1019_pos)
    rx1019_cstack = rx1019_cur."!cursor_capture"($P11, "sym")
    goto rxcap1021_done2693
  rxcap1021_fail2694:
    goto rx1019_fail2686
  rxcap1021_done2693:
    repr_bind_attr_int rx1019_cur, rx1019_curclass, "$!pos", rx1019_pos
    $P11 = rx1019_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1019_curclass, "$!pos"
    lt $I11, 0, rx1019_fail2686
    repr_get_attr_int rx1019_pos, $P11, rx1019_curclass, "$!pos"
    repr_bind_attr_int rx1019_cur, rx1019_curclass, "$!pos", rx1019_pos
    $P11 = rx1019_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx1019_curclass, "$!pos"
    lt $I11, 0, rx1019_fail2686
    nqp_rxmark rx1019_bstack, rxsubrule1023_pass2696, -1, 0
  rxsubrule1023_pass2696:
    rx1019_cstack = rx1019_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1019_pos, $P11, rx1019_curclass, "$!pos"
    rx1019_cur."!cursor_pass"(rx1019_pos, "quote:sym<Q:PIR>", 'backtrack'=>1)
    .return (rx1019_cur)
  rx1019_restart2685:
    repr_get_attr_obj rx1019_cstack, rx1019_cur, rx1019_curclass, "$!cstack"
  rx1019_fail2686:
    unless rx1019_bstack, rx1019_done2684
    pop $I19, rx1019_bstack
    if_null rx1019_cstack, rx1019_cstack_done2689
    unless rx1019_cstack, rx1019_cstack_done2689
    dec $I19
    set $P11, rx1019_cstack[$I19]
  rx1019_cstack_done2689:
    pop rx1019_rep, rx1019_bstack
    pop rx1019_pos, rx1019_bstack
    pop $I19, rx1019_bstack
    lt rx1019_pos, -1, rx1019_done2684
    lt rx1019_pos, 0, rx1019_fail2686
    eq $I19, 0, rx1019_fail2686
    nqp_islist $I20, rx1019_cstack
    unless $I20, rx1019_jump2687
    elements $I18, rx1019_bstack
    le $I18, 0, rx1019_cut2688
    dec $I18
    set $I18, rx1019_bstack[$I18]
  rx1019_cut2688:
    assign rx1019_cstack, $I18
  rx1019_jump2687:
    jump $I19
  rx1019_done2684:
    rx1019_cur."!cursor_fail"()
    .return (rx1019_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_156_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1247
    .param pmc _lex_param_0 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx1024_tgt
    .local int rx1024_pos
    .local int rx1024_off
    .local int rx1024_eos
    .local int rx1024_rep
    .local pmc rx1024_cur
    .local pmc rx1024_curclass
    .local pmc rx1024_bstack
    .local pmc rx1024_cstack
    (rx1024_cur, rx1024_tgt, rx1024_pos, rx1024_curclass, rx1024_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1024_cur
    length rx1024_eos, rx1024_tgt
    eq $I19, 1, rx1024_restart2699
    gt rx1024_pos, rx1024_eos, rx1024_fail2700
    repr_get_attr_int $I11, self, rx1024_curclass, "$!from"
    ne $I11, -1, rxscan1025_done2706
    goto rxscan1025_scan2705
  rxscan1025_loop2704:
    inc rx1024_pos
    gt rx1024_pos, rx1024_eos, rx1024_fail2700
    repr_bind_attr_int rx1024_cur, rx1024_curclass, "$!from", rx1024_pos
  rxscan1025_scan2705:
    nqp_rxmark rx1024_bstack, rxscan1025_loop2704, rx1024_pos, 0
  rxscan1025_done2706:
    add $I11, rx1024_pos, 1
    gt $I11, rx1024_eos, rx1024_fail2700
    substr $S10, rx1024_tgt, rx1024_pos, 1
    ne $S10, ucs4:"/", rx1024_fail2700
    add rx1024_pos, 1
    repr_bind_attr_int rx1024_cur, rx1024_curclass, "$!pos", rx1024_pos
    $P11 = rx1024_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx1024_curclass, "$!pos"
    lt $I11, 0, rx1024_fail2700
    repr_get_attr_int rx1024_pos, $P11, rx1024_curclass, "$!pos"
    repr_bind_attr_int rx1024_cur, rx1024_curclass, "$!pos", rx1024_pos
    store_lex unicode:"$\x{a2}", rx1024_cur
    unless_null $P101, fallback2708
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2709
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2709:
    unless_null $P5002, vivi_10272710
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_10272710:
    set $P101, $P5002
  fallback2708:
    repr_bind_attr_int rx1024_cur, rx1024_curclass, "$!pos", rx1024_pos
    $P11 = rx1024_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx1024_curclass, "$!pos"
    lt $I11, 0, rx1024_fail2700
    nqp_rxmark rx1024_bstack, rxsubrule1028_pass2711, -1, 0
  rxsubrule1028_pass2711:
    rx1024_cstack = rx1024_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx1024_pos, $P11, rx1024_curclass, "$!pos"
    add $I11, rx1024_pos, 1
    gt $I11, rx1024_eos, rx1024_fail2700
    substr $S10, rx1024_tgt, rx1024_pos, 1
    ne $S10, ucs4:"/", rx1024_fail2700
    add rx1024_pos, 1
    rx1024_cur."!cursor_pass"(rx1024_pos, "quote:sym</ />", 'backtrack'=>1)
    .return (rx1024_cur)
  rx1024_restart2699:
    repr_get_attr_obj rx1024_cstack, rx1024_cur, rx1024_curclass, "$!cstack"
  rx1024_fail2700:
    unless rx1024_bstack, rx1024_done2698
    pop $I19, rx1024_bstack
    if_null rx1024_cstack, rx1024_cstack_done2703
    unless rx1024_cstack, rx1024_cstack_done2703
    dec $I19
    set $P11, rx1024_cstack[$I19]
  rx1024_cstack_done2703:
    pop rx1024_rep, rx1024_bstack
    pop rx1024_pos, rx1024_bstack
    pop $I19, rx1024_bstack
    lt rx1024_pos, -1, rx1024_done2698
    lt rx1024_pos, 0, rx1024_fail2700
    eq $I19, 0, rx1024_fail2700
    nqp_islist $I20, rx1024_cstack
    unless $I20, rx1024_jump2701
    elements $I18, rx1024_bstack
    le $I18, 0, rx1024_cut2702
    dec $I18
    set $I18, rx1024_bstack[$I18]
  rx1024_cut2702:
    assign rx1024_cstack, $I18
  rx1024_jump2701:
    jump $I19
  rx1024_done2698:
    rx1024_cur."!cursor_fail"()
    .return (rx1024_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_157_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1255
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1029_tgt
    .local int rx1029_pos
    .local int rx1029_off
    .local int rx1029_eos
    .local int rx1029_rep
    .local pmc rx1029_cur
    .local pmc rx1029_curclass
    .local pmc rx1029_bstack
    .local pmc rx1029_cstack
    (rx1029_cur, rx1029_tgt, rx1029_pos, rx1029_curclass, rx1029_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1029_cur
    length rx1029_eos, rx1029_tgt
    eq $I19, 1, rx1029_restart2714
    gt rx1029_pos, rx1029_eos, rx1029_fail2715
    repr_get_attr_int $I11, self, rx1029_curclass, "$!from"
    ne $I11, -1, rxscan1030_done2721
    goto rxscan1030_scan2720
  rxscan1030_loop2719:
    inc rx1029_pos
    gt rx1029_pos, rx1029_eos, rx1029_fail2715
    repr_bind_attr_int rx1029_cur, rx1029_curclass, "$!from", rx1029_pos
  rxscan1030_scan2720:
    nqp_rxmark rx1029_bstack, rxscan1030_loop2719, rx1029_pos, 0
  rxscan1030_done2721:
    ge rx1029_pos, rx1029_eos, rx1029_fail2715
    substr $S11, rx1029_tgt, rx1029_pos, 1
    index $I11, ucs4:"$", $S11
    lt $I11, 0, rx1029_fail2715
    repr_bind_attr_int rx1029_cur, rx1029_curclass, "$!pos", rx1029_pos
    $P11 = rx1029_cur."quotemod_check"("s")
    repr_get_attr_int $I11, $P11, rx1029_curclass, "$!pos"
    lt $I11, 0, rx1029_fail2715
    repr_bind_attr_int rx1029_cur, rx1029_curclass, "$!pos", rx1029_pos
    $P11 = rx1029_cur."variable"()
    repr_get_attr_int $I11, $P11, rx1029_curclass, "$!pos"
    lt $I11, 0, rx1029_fail2715
    nqp_rxmark rx1029_bstack, rxsubrule1031_pass2722, -1, 0
  rxsubrule1031_pass2722:
    rx1029_cstack = rx1029_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx1029_pos, $P11, rx1029_curclass, "$!pos"
    rx1029_cur."!cursor_pass"(rx1029_pos, "quote_escape:sym<$>", 'backtrack'=>1)
    .return (rx1029_cur)
  rx1029_restart2714:
    repr_get_attr_obj rx1029_cstack, rx1029_cur, rx1029_curclass, "$!cstack"
  rx1029_fail2715:
    unless rx1029_bstack, rx1029_done2713
    pop $I19, rx1029_bstack
    if_null rx1029_cstack, rx1029_cstack_done2718
    unless rx1029_cstack, rx1029_cstack_done2718
    dec $I19
    set $P11, rx1029_cstack[$I19]
  rx1029_cstack_done2718:
    pop rx1029_rep, rx1029_bstack
    pop rx1029_pos, rx1029_bstack
    pop $I19, rx1029_bstack
    lt rx1029_pos, -1, rx1029_done2713
    lt rx1029_pos, 0, rx1029_fail2715
    eq $I19, 0, rx1029_fail2715
    nqp_islist $I20, rx1029_cstack
    unless $I20, rx1029_jump2716
    elements $I18, rx1029_bstack
    le $I18, 0, rx1029_cut2717
    dec $I18
    set $I18, rx1029_bstack[$I18]
  rx1029_cut2717:
    assign rx1029_cstack, $I18
  rx1029_jump2716:
    jump $I19
  rx1029_done2713:
    rx1029_cur."!cursor_fail"()
    .return (rx1029_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_158_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1256
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1032_tgt
    .local int rx1032_pos
    .local int rx1032_off
    .local int rx1032_eos
    .local int rx1032_rep
    .local pmc rx1032_cur
    .local pmc rx1032_curclass
    .local pmc rx1032_bstack
    .local pmc rx1032_cstack
    (rx1032_cur, rx1032_tgt, rx1032_pos, rx1032_curclass, rx1032_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1032_cur
    length rx1032_eos, rx1032_tgt
    eq $I19, 1, rx1032_restart2725
    gt rx1032_pos, rx1032_eos, rx1032_fail2726
    repr_get_attr_int $I11, self, rx1032_curclass, "$!from"
    ne $I11, -1, rxscan1033_done2732
    goto rxscan1033_scan2731
  rxscan1033_loop2730:
    inc rx1032_pos
    gt rx1032_pos, rx1032_eos, rx1032_fail2726
    repr_bind_attr_int rx1032_cur, rx1032_curclass, "$!from", rx1032_pos
  rxscan1033_scan2731:
    nqp_rxmark rx1032_bstack, rxscan1033_loop2730, rx1032_pos, 0
  rxscan1033_done2732:
    ge rx1032_pos, rx1032_eos, rx1032_fail2726
    substr $S11, rx1032_tgt, rx1032_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1032_fail2726
    repr_bind_attr_int rx1032_cur, rx1032_curclass, "$!pos", rx1032_pos
    $P11 = rx1032_cur."quotemod_check"("c")
    repr_get_attr_int $I11, $P11, rx1032_curclass, "$!pos"
    lt $I11, 0, rx1032_fail2726
    repr_bind_attr_int rx1032_cur, rx1032_curclass, "$!pos", rx1032_pos
    $P11 = rx1032_cur."block"()
    repr_get_attr_int $I11, $P11, rx1032_curclass, "$!pos"
    lt $I11, 0, rx1032_fail2726
    nqp_rxmark rx1032_bstack, rxsubrule1034_pass2733, -1, 0
  rxsubrule1034_pass2733:
    rx1032_cstack = rx1032_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1032_pos, $P11, rx1032_curclass, "$!pos"
    rx1032_cur."!cursor_pass"(rx1032_pos, "quote_escape:sym<{ }>", 'backtrack'=>1)
    .return (rx1032_cur)
  rx1032_restart2725:
    repr_get_attr_obj rx1032_cstack, rx1032_cur, rx1032_curclass, "$!cstack"
  rx1032_fail2726:
    unless rx1032_bstack, rx1032_done2724
    pop $I19, rx1032_bstack
    if_null rx1032_cstack, rx1032_cstack_done2729
    unless rx1032_cstack, rx1032_cstack_done2729
    dec $I19
    set $P11, rx1032_cstack[$I19]
  rx1032_cstack_done2729:
    pop rx1032_rep, rx1032_bstack
    pop rx1032_pos, rx1032_bstack
    pop $I19, rx1032_bstack
    lt rx1032_pos, -1, rx1032_done2724
    lt rx1032_pos, 0, rx1032_fail2726
    eq $I19, 0, rx1032_fail2726
    nqp_islist $I20, rx1032_cstack
    unless $I20, rx1032_jump2727
    elements $I18, rx1032_bstack
    le $I18, 0, rx1032_cut2728
    dec $I18
    set $I18, rx1032_bstack[$I18]
  rx1032_cut2728:
    assign rx1032_cstack, $I18
  rx1032_jump2727:
    jump $I19
  rx1032_done2724:
    rx1032_cur."!cursor_fail"()
    .return (rx1032_cur) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_159_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1257
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1035_tgt
    .local int rx1035_pos
    .local int rx1035_off
    .local int rx1035_eos
    .local int rx1035_rep
    .local pmc rx1035_cur
    .local pmc rx1035_curclass
    .local pmc rx1035_bstack
    .local pmc rx1035_cstack
    (rx1035_cur, rx1035_tgt, rx1035_pos, rx1035_curclass, rx1035_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1035_cur
    length rx1035_eos, rx1035_tgt
    eq $I19, 1, rx1035_restart2736
    gt rx1035_pos, rx1035_eos, rx1035_fail2737
    repr_get_attr_int $I11, self, rx1035_curclass, "$!from"
    ne $I11, -1, rxscan1036_done2743
    goto rxscan1036_scan2742
  rxscan1036_loop2741:
    inc rx1035_pos
    gt rx1035_pos, rx1035_eos, rx1035_fail2737
    repr_bind_attr_int rx1035_cur, rx1035_curclass, "$!from", rx1035_pos
  rxscan1036_scan2742:
    nqp_rxmark rx1035_bstack, rxscan1036_loop2741, rx1035_pos, 0
  rxscan1036_done2743:
    add $I11, rx1035_pos, 2
    gt $I11, rx1035_eos, rx1035_fail2737
    substr $S10, rx1035_tgt, rx1035_pos, 2
    ne $S10, ucs4:"\\e", rx1035_fail2737
    add rx1035_pos, 2
    repr_bind_attr_int rx1035_cur, rx1035_curclass, "$!pos", rx1035_pos
    $P11 = rx1035_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx1035_curclass, "$!pos"
    lt $I11, 0, rx1035_fail2737
    rx1035_cur."!cursor_pass"(rx1035_pos, "quote_escape:sym<esc>", 'backtrack'=>1)
    .return (rx1035_cur)
  rx1035_restart2736:
    repr_get_attr_obj rx1035_cstack, rx1035_cur, rx1035_curclass, "$!cstack"
  rx1035_fail2737:
    unless rx1035_bstack, rx1035_done2735
    pop $I19, rx1035_bstack
    if_null rx1035_cstack, rx1035_cstack_done2740
    unless rx1035_cstack, rx1035_cstack_done2740
    dec $I19
    set $P11, rx1035_cstack[$I19]
  rx1035_cstack_done2740:
    pop rx1035_rep, rx1035_bstack
    pop rx1035_pos, rx1035_bstack
    pop $I19, rx1035_bstack
    lt rx1035_pos, -1, rx1035_done2735
    lt rx1035_pos, 0, rx1035_fail2737
    eq $I19, 0, rx1035_fail2737
    nqp_islist $I20, rx1035_cstack
    unless $I20, rx1035_jump2738
    elements $I18, rx1035_bstack
    le $I18, 0, rx1035_cut2739
    dec $I18
    set $I18, rx1035_bstack[$I18]
  rx1035_cut2739:
    assign rx1035_cstack, $I18
  rx1035_jump2738:
    jump $I19
  rx1035_done2735:
    rx1035_cur."!cursor_fail"()
    .return (rx1035_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_160_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1259
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1037_tgt
    .local int rx1037_pos
    .local int rx1037_off
    .local int rx1037_eos
    .local int rx1037_rep
    .local pmc rx1037_cur
    .local pmc rx1037_curclass
    .local pmc rx1037_bstack
    .local pmc rx1037_cstack
    (rx1037_cur, rx1037_tgt, rx1037_pos, rx1037_curclass, rx1037_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1037_cur
    length rx1037_eos, rx1037_tgt
    eq $I19, 1, rx1037_restart2746
    gt rx1037_pos, rx1037_eos, rx1037_fail2747
    repr_get_attr_int $I11, self, rx1037_curclass, "$!from"
    ne $I11, -1, rxscan1038_done2753
    goto rxscan1038_scan2752
  rxscan1038_loop2751:
    inc rx1037_pos
    gt rx1037_pos, rx1037_eos, rx1037_fail2747
    repr_bind_attr_int rx1037_cur, rx1037_curclass, "$!from", rx1037_pos
  rxscan1038_scan2752:
    nqp_rxmark rx1037_bstack, rxscan1038_loop2751, rx1037_pos, 0
  rxscan1038_done2753:
    add $I11, rx1037_pos, 1
    gt $I11, rx1037_eos, rx1037_fail2747
    substr $S10, rx1037_tgt, rx1037_pos, 1
    ne $S10, ucs4:"(", rx1037_fail2747
    add rx1037_pos, 1
    repr_bind_attr_int rx1037_cur, rx1037_curclass, "$!pos", rx1037_pos
    $P11 = rx1037_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1037_curclass, "$!pos"
    lt $I11, 0, rx1037_fail2747
    repr_get_attr_int rx1037_pos, $P11, rx1037_curclass, "$!pos"
    nqp_rxmark rx1037_bstack, rxquantr1040_done2756, rx1037_pos, 0
  rxquantr1040_loop2755:
    repr_bind_attr_int rx1037_cur, rx1037_curclass, "$!pos", rx1037_pos
    $P11 = rx1037_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1037_curclass, "$!pos"
    lt $I11, 0, rx1037_fail2747
    goto rxsubrule1041_pass2757
  rxsubrule1041_back2758:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx1037_curclass, "$!pos"
    lt $I11, 0, rx1037_fail2747
  rxsubrule1041_pass2757:
    rx1037_cstack = rx1037_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule1041_back2758
    push rx1037_bstack, $I11
    push rx1037_bstack, 0
    push rx1037_bstack, rx1037_pos
    elements $I11, rx1037_cstack
    push rx1037_bstack, $I11
    repr_get_attr_int rx1037_pos, $P11, rx1037_curclass, "$!pos"
    nqp_rxpeek $I19, rx1037_bstack, rxquantr1040_done2756
    inc $I19
    inc $I19
    set rx1037_rep, rx1037_bstack[$I19]
    nqp_rxcommit rx1037_bstack, rxquantr1040_done2756
    inc rx1037_rep
  rxquantr1040_done2756:
    add $I11, rx1037_pos, 1
    gt $I11, rx1037_eos, rx1037_fail2747
    substr $S10, rx1037_tgt, rx1037_pos, 1
    ne $S10, ucs4:")", rx1037_fail2747
    add rx1037_pos, 1
    rx1037_cur."!cursor_pass"(rx1037_pos, "circumfix:sym<( )>", 'backtrack'=>1)
    .return (rx1037_cur)
  rx1037_restart2746:
    repr_get_attr_obj rx1037_cstack, rx1037_cur, rx1037_curclass, "$!cstack"
  rx1037_fail2747:
    unless rx1037_bstack, rx1037_done2745
    pop $I19, rx1037_bstack
    if_null rx1037_cstack, rx1037_cstack_done2750
    unless rx1037_cstack, rx1037_cstack_done2750
    dec $I19
    set $P11, rx1037_cstack[$I19]
  rx1037_cstack_done2750:
    pop rx1037_rep, rx1037_bstack
    pop rx1037_pos, rx1037_bstack
    pop $I19, rx1037_bstack
    lt rx1037_pos, -1, rx1037_done2745
    lt rx1037_pos, 0, rx1037_fail2747
    eq $I19, 0, rx1037_fail2747
    nqp_islist $I20, rx1037_cstack
    unless $I20, rx1037_jump2748
    elements $I18, rx1037_bstack
    le $I18, 0, rx1037_cut2749
    dec $I18
    set $I18, rx1037_bstack[$I18]
  rx1037_cut2749:
    assign rx1037_cstack, $I18
  rx1037_jump2748:
    jump $I19
  rx1037_done2745:
    rx1037_cur."!cursor_fail"()
    .return (rx1037_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_161_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1260
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1042_tgt
    .local int rx1042_pos
    .local int rx1042_off
    .local int rx1042_eos
    .local int rx1042_rep
    .local pmc rx1042_cur
    .local pmc rx1042_curclass
    .local pmc rx1042_bstack
    .local pmc rx1042_cstack
    (rx1042_cur, rx1042_tgt, rx1042_pos, rx1042_curclass, rx1042_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1042_cur
    length rx1042_eos, rx1042_tgt
    eq $I19, 1, rx1042_restart2761
    gt rx1042_pos, rx1042_eos, rx1042_fail2762
    repr_get_attr_int $I11, self, rx1042_curclass, "$!from"
    ne $I11, -1, rxscan1043_done2768
    goto rxscan1043_scan2767
  rxscan1043_loop2766:
    inc rx1042_pos
    gt rx1042_pos, rx1042_eos, rx1042_fail2762
    repr_bind_attr_int rx1042_cur, rx1042_curclass, "$!from", rx1042_pos
  rxscan1043_scan2767:
    nqp_rxmark rx1042_bstack, rxscan1043_loop2766, rx1042_pos, 0
  rxscan1043_done2768:
    add $I11, rx1042_pos, 1
    gt $I11, rx1042_eos, rx1042_fail2762
    substr $S10, rx1042_tgt, rx1042_pos, 1
    ne $S10, ucs4:"[", rx1042_fail2762
    add rx1042_pos, 1
    repr_bind_attr_int rx1042_cur, rx1042_curclass, "$!pos", rx1042_pos
    $P11 = rx1042_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1042_curclass, "$!pos"
    lt $I11, 0, rx1042_fail2762
    repr_get_attr_int rx1042_pos, $P11, rx1042_curclass, "$!pos"
    nqp_rxmark rx1042_bstack, rxquantr1045_done2771, rx1042_pos, 0
  rxquantr1045_loop2770:
    repr_bind_attr_int rx1042_cur, rx1042_curclass, "$!pos", rx1042_pos
    $P11 = rx1042_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1042_curclass, "$!pos"
    lt $I11, 0, rx1042_fail2762
    goto rxsubrule1046_pass2772
  rxsubrule1046_back2773:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx1042_curclass, "$!pos"
    lt $I11, 0, rx1042_fail2762
  rxsubrule1046_pass2772:
    rx1042_cstack = rx1042_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule1046_back2773
    push rx1042_bstack, $I11
    push rx1042_bstack, 0
    push rx1042_bstack, rx1042_pos
    elements $I11, rx1042_cstack
    push rx1042_bstack, $I11
    repr_get_attr_int rx1042_pos, $P11, rx1042_curclass, "$!pos"
    nqp_rxpeek $I19, rx1042_bstack, rxquantr1045_done2771
    inc $I19
    inc $I19
    set rx1042_rep, rx1042_bstack[$I19]
    nqp_rxcommit rx1042_bstack, rxquantr1045_done2771
    inc rx1042_rep
  rxquantr1045_done2771:
    add $I11, rx1042_pos, 1
    gt $I11, rx1042_eos, rx1042_fail2762
    substr $S10, rx1042_tgt, rx1042_pos, 1
    ne $S10, ucs4:"]", rx1042_fail2762
    add rx1042_pos, 1
    rx1042_cur."!cursor_pass"(rx1042_pos, "circumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx1042_cur)
  rx1042_restart2761:
    repr_get_attr_obj rx1042_cstack, rx1042_cur, rx1042_curclass, "$!cstack"
  rx1042_fail2762:
    unless rx1042_bstack, rx1042_done2760
    pop $I19, rx1042_bstack
    if_null rx1042_cstack, rx1042_cstack_done2765
    unless rx1042_cstack, rx1042_cstack_done2765
    dec $I19
    set $P11, rx1042_cstack[$I19]
  rx1042_cstack_done2765:
    pop rx1042_rep, rx1042_bstack
    pop rx1042_pos, rx1042_bstack
    pop $I19, rx1042_bstack
    lt rx1042_pos, -1, rx1042_done2760
    lt rx1042_pos, 0, rx1042_fail2762
    eq $I19, 0, rx1042_fail2762
    nqp_islist $I20, rx1042_cstack
    unless $I20, rx1042_jump2763
    elements $I18, rx1042_bstack
    le $I18, 0, rx1042_cut2764
    dec $I18
    set $I18, rx1042_bstack[$I18]
  rx1042_cut2764:
    assign rx1042_cstack, $I18
  rx1042_jump2763:
    jump $I19
  rx1042_done2760:
    rx1042_cur."!cursor_fail"()
    .return (rx1042_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_162_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1261
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1047_tgt
    .local int rx1047_pos
    .local int rx1047_off
    .local int rx1047_eos
    .local int rx1047_rep
    .local pmc rx1047_cur
    .local pmc rx1047_curclass
    .local pmc rx1047_bstack
    .local pmc rx1047_cstack
    (rx1047_cur, rx1047_tgt, rx1047_pos, rx1047_curclass, rx1047_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1047_cur
    length rx1047_eos, rx1047_tgt
    eq $I19, 1, rx1047_restart2776
    gt rx1047_pos, rx1047_eos, rx1047_fail2777
    repr_get_attr_int $I11, self, rx1047_curclass, "$!from"
    ne $I11, -1, rxscan1048_done2783
    goto rxscan1048_scan2782
  rxscan1048_loop2781:
    inc rx1047_pos
    gt rx1047_pos, rx1047_eos, rx1047_fail2777
    repr_bind_attr_int rx1047_cur, rx1047_curclass, "$!from", rx1047_pos
  rxscan1048_scan2782:
    nqp_rxmark rx1047_bstack, rxscan1048_loop2781, rx1047_pos, 0
  rxscan1048_done2783:
    ge rx1047_pos, rx1047_eos, rx1047_fail2777
    substr $S11, rx1047_tgt, rx1047_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx1047_fail2777
    repr_bind_attr_int rx1047_cur, rx1047_curclass, "$!pos", rx1047_pos
    $P11 = rx1047_cur."quote_EXPR"(":q", ":w")
    repr_get_attr_int $I11, $P11, rx1047_curclass, "$!pos"
    lt $I11, 0, rx1047_fail2777
    nqp_rxmark rx1047_bstack, rxsubrule1049_pass2784, -1, 0
  rxsubrule1049_pass2784:
    rx1047_cstack = rx1047_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1047_pos, $P11, rx1047_curclass, "$!pos"
    rx1047_cur."!cursor_pass"(rx1047_pos, "circumfix:sym<ang>", 'backtrack'=>1)
    .return (rx1047_cur)
  rx1047_restart2776:
    repr_get_attr_obj rx1047_cstack, rx1047_cur, rx1047_curclass, "$!cstack"
  rx1047_fail2777:
    unless rx1047_bstack, rx1047_done2775
    pop $I19, rx1047_bstack
    if_null rx1047_cstack, rx1047_cstack_done2780
    unless rx1047_cstack, rx1047_cstack_done2780
    dec $I19
    set $P11, rx1047_cstack[$I19]
  rx1047_cstack_done2780:
    pop rx1047_rep, rx1047_bstack
    pop rx1047_pos, rx1047_bstack
    pop $I19, rx1047_bstack
    lt rx1047_pos, -1, rx1047_done2775
    lt rx1047_pos, 0, rx1047_fail2777
    eq $I19, 0, rx1047_fail2777
    nqp_islist $I20, rx1047_cstack
    unless $I20, rx1047_jump2778
    elements $I18, rx1047_bstack
    le $I18, 0, rx1047_cut2779
    dec $I18
    set $I18, rx1047_bstack[$I18]
  rx1047_cut2779:
    assign rx1047_cstack, $I18
  rx1047_jump2778:
    jump $I19
  rx1047_done2775:
    rx1047_cur."!cursor_fail"()
    .return (rx1047_cur) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_163_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1262
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1050_tgt
    .local int rx1050_pos
    .local int rx1050_off
    .local int rx1050_eos
    .local int rx1050_rep
    .local pmc rx1050_cur
    .local pmc rx1050_curclass
    .local pmc rx1050_bstack
    .local pmc rx1050_cstack
    (rx1050_cur, rx1050_tgt, rx1050_pos, rx1050_curclass, rx1050_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1050_cur
    length rx1050_eos, rx1050_tgt
    eq $I19, 1, rx1050_restart2787
    gt rx1050_pos, rx1050_eos, rx1050_fail2788
    repr_get_attr_int $I11, self, rx1050_curclass, "$!from"
    ne $I11, -1, rxscan1051_done2794
    goto rxscan1051_scan2793
  rxscan1051_loop2792:
    inc rx1050_pos
    gt rx1050_pos, rx1050_eos, rx1050_fail2788
    repr_bind_attr_int rx1050_cur, rx1050_curclass, "$!from", rx1050_pos
  rxscan1051_scan2793:
    nqp_rxmark rx1050_bstack, rxscan1051_loop2792, rx1050_pos, 0
  rxscan1051_done2794:
    ge rx1050_pos, rx1050_eos, rx1050_fail2788
    substr $S11, rx1050_tgt, rx1050_pos, 1
    index $I11, ucs4:"\x{ab}", $S11
    lt $I11, 0, rx1050_fail2788
    repr_bind_attr_int rx1050_cur, rx1050_curclass, "$!pos", rx1050_pos
    $P11 = rx1050_cur."quote_EXPR"(":qq", ":w")
    repr_get_attr_int $I11, $P11, rx1050_curclass, "$!pos"
    lt $I11, 0, rx1050_fail2788
    nqp_rxmark rx1050_bstack, rxsubrule1052_pass2795, -1, 0
  rxsubrule1052_pass2795:
    rx1050_cstack = rx1050_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1050_pos, $P11, rx1050_curclass, "$!pos"
    rx1050_cur."!cursor_pass"(rx1050_pos, utf8:"circumfix:sym<\x{ab} \x{bb}>", 'backtrack'=>1)
    .return (rx1050_cur)
  rx1050_restart2787:
    repr_get_attr_obj rx1050_cstack, rx1050_cur, rx1050_curclass, "$!cstack"
  rx1050_fail2788:
    unless rx1050_bstack, rx1050_done2786
    pop $I19, rx1050_bstack
    if_null rx1050_cstack, rx1050_cstack_done2791
    unless rx1050_cstack, rx1050_cstack_done2791
    dec $I19
    set $P11, rx1050_cstack[$I19]
  rx1050_cstack_done2791:
    pop rx1050_rep, rx1050_bstack
    pop rx1050_pos, rx1050_bstack
    pop $I19, rx1050_bstack
    lt rx1050_pos, -1, rx1050_done2786
    lt rx1050_pos, 0, rx1050_fail2788
    eq $I19, 0, rx1050_fail2788
    nqp_islist $I20, rx1050_cstack
    unless $I20, rx1050_jump2789
    elements $I18, rx1050_bstack
    le $I18, 0, rx1050_cut2790
    dec $I18
    set $I18, rx1050_bstack[$I18]
  rx1050_cut2790:
    assign rx1050_cstack, $I18
  rx1050_jump2789:
    jump $I19
  rx1050_done2786:
    rx1050_cur."!cursor_fail"()
    .return (rx1050_cur) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_164_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1263
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1053_tgt
    .local int rx1053_pos
    .local int rx1053_off
    .local int rx1053_eos
    .local int rx1053_rep
    .local pmc rx1053_cur
    .local pmc rx1053_curclass
    .local pmc rx1053_bstack
    .local pmc rx1053_cstack
    (rx1053_cur, rx1053_tgt, rx1053_pos, rx1053_curclass, rx1053_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1053_cur
    length rx1053_eos, rx1053_tgt
    eq $I19, 1, rx1053_restart2798
    gt rx1053_pos, rx1053_eos, rx1053_fail2799
    repr_get_attr_int $I11, self, rx1053_curclass, "$!from"
    ne $I11, -1, rxscan1054_done2805
    goto rxscan1054_scan2804
  rxscan1054_loop2803:
    inc rx1053_pos
    gt rx1053_pos, rx1053_eos, rx1053_fail2799
    repr_bind_attr_int rx1053_cur, rx1053_curclass, "$!from", rx1053_pos
  rxscan1054_scan2804:
    nqp_rxmark rx1053_bstack, rxscan1054_loop2803, rx1053_pos, 0
  rxscan1054_done2805:
    ge rx1053_pos, rx1053_eos, rx1053_fail2799
    substr $S11, rx1053_tgt, rx1053_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1053_fail2799
    repr_bind_attr_int rx1053_cur, rx1053_curclass, "$!pos", rx1053_pos
    $P11 = rx1053_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx1053_curclass, "$!pos"
    lt $I11, 0, rx1053_fail2799
    nqp_rxmark rx1053_bstack, rxsubrule1055_pass2806, -1, 0
  rxsubrule1055_pass2806:
    rx1053_cstack = rx1053_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx1053_pos, $P11, rx1053_curclass, "$!pos"
    rx1053_cur."!cursor_pass"(rx1053_pos, "circumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx1053_cur)
  rx1053_restart2798:
    repr_get_attr_obj rx1053_cstack, rx1053_cur, rx1053_curclass, "$!cstack"
  rx1053_fail2799:
    unless rx1053_bstack, rx1053_done2797
    pop $I19, rx1053_bstack
    if_null rx1053_cstack, rx1053_cstack_done2802
    unless rx1053_cstack, rx1053_cstack_done2802
    dec $I19
    set $P11, rx1053_cstack[$I19]
  rx1053_cstack_done2802:
    pop rx1053_rep, rx1053_bstack
    pop rx1053_pos, rx1053_bstack
    pop $I19, rx1053_bstack
    lt rx1053_pos, -1, rx1053_done2797
    lt rx1053_pos, 0, rx1053_fail2799
    eq $I19, 0, rx1053_fail2799
    nqp_islist $I20, rx1053_cstack
    unless $I20, rx1053_jump2800
    elements $I18, rx1053_bstack
    le $I18, 0, rx1053_cut2801
    dec $I18
    set $I18, rx1053_bstack[$I18]
  rx1053_cut2801:
    assign rx1053_cstack, $I18
  rx1053_jump2800:
    jump $I19
  rx1053_done2797:
    rx1053_cur."!cursor_fail"()
    .return (rx1053_cur) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_165_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1265
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1056_tgt
    .local int rx1056_pos
    .local int rx1056_off
    .local int rx1056_eos
    .local int rx1056_rep
    .local pmc rx1056_cur
    .local pmc rx1056_curclass
    .local pmc rx1056_bstack
    .local pmc rx1056_cstack
    (rx1056_cur, rx1056_tgt, rx1056_pos, rx1056_curclass, rx1056_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1056_cur
    length rx1056_eos, rx1056_tgt
    eq $I19, 1, rx1056_restart2809
    gt rx1056_pos, rx1056_eos, rx1056_fail2810
    repr_get_attr_int $I11, self, rx1056_curclass, "$!from"
    ne $I11, -1, rxscan1057_done2816
    goto rxscan1057_scan2815
  rxscan1057_loop2814:
    inc rx1056_pos
    gt rx1056_pos, rx1056_eos, rx1056_fail2810
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!from", rx1056_pos
  rxscan1057_scan2815:
    nqp_rxmark rx1056_bstack, rxscan1057_loop2814, rx1056_pos, 0
  rxscan1057_done2816:
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!pos", rx1056_pos
    $P11 = rx1056_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1056_curclass, "$!pos"
    lt $I11, 0, rx1056_fail2810
    repr_get_attr_int rx1056_pos, $P11, rx1056_curclass, "$!pos"
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!pos", rx1056_pos
    $P11 = rx1056_cur."statement"()
    repr_get_attr_int $I11, $P11, rx1056_curclass, "$!pos"
    lt $I11, 0, rx1056_fail2810
    nqp_rxmark rx1056_bstack, rxsubrule1059_pass2818, -1, 0
  rxsubrule1059_pass2818:
    rx1056_cstack = rx1056_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1056_pos, $P11, rx1056_curclass, "$!pos"
    repr_bind_attr_int rx1056_cur, rx1056_curclass, "$!pos", rx1056_pos
    $P11 = rx1056_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1056_curclass, "$!pos"
    lt $I11, 0, rx1056_fail2810
    repr_get_attr_int rx1056_pos, $P11, rx1056_curclass, "$!pos"
    rx1056_cur."!cursor_pass"(rx1056_pos, "semilist", 'backtrack'=>1)
    .return (rx1056_cur)
  rx1056_restart2809:
    repr_get_attr_obj rx1056_cstack, rx1056_cur, rx1056_curclass, "$!cstack"
  rx1056_fail2810:
    unless rx1056_bstack, rx1056_done2808
    pop $I19, rx1056_bstack
    if_null rx1056_cstack, rx1056_cstack_done2813
    unless rx1056_cstack, rx1056_cstack_done2813
    dec $I19
    set $P11, rx1056_cstack[$I19]
  rx1056_cstack_done2813:
    pop rx1056_rep, rx1056_bstack
    pop rx1056_pos, rx1056_bstack
    pop $I19, rx1056_bstack
    lt rx1056_pos, -1, rx1056_done2808
    lt rx1056_pos, 0, rx1056_fail2810
    eq $I19, 0, rx1056_fail2810
    nqp_islist $I20, rx1056_cstack
    unless $I20, rx1056_jump2811
    elements $I18, rx1056_bstack
    le $I18, 0, rx1056_cut2812
    dec $I18
    set $I18, rx1056_bstack[$I18]
  rx1056_cut2812:
    assign rx1056_cstack, $I18
  rx1056_jump2811:
    jump $I19
  rx1056_done2808:
    rx1056_cur."!cursor_fail"()
    .return (rx1056_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infixish" :subid("cuid_166_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1288
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1061_tgt
    .local int rx1061_pos
    .local int rx1061_off
    .local int rx1061_eos
    .local int rx1061_rep
    .local pmc rx1061_cur
    .local pmc rx1061_curclass
    .local pmc rx1061_bstack
    .local pmc rx1061_cstack
    (rx1061_cur, rx1061_tgt, rx1061_pos, rx1061_curclass, rx1061_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1061_cur
    length rx1061_eos, rx1061_tgt
    eq $I19, 1, rx1061_restart2822
    gt rx1061_pos, rx1061_eos, rx1061_fail2823
    repr_get_attr_int $I11, self, rx1061_curclass, "$!from"
    ne $I11, -1, rxscan1062_done2829
    goto rxscan1062_scan2828
  rxscan1062_loop2827:
    inc rx1061_pos
    gt rx1061_pos, rx1061_eos, rx1061_fail2823
    repr_bind_attr_int rx1061_cur, rx1061_curclass, "$!from", rx1061_pos
  rxscan1062_scan2828:
    nqp_rxmark rx1061_bstack, rxscan1062_loop2827, rx1061_pos, 0
  rxscan1062_done2829:
    repr_bind_attr_int rx1061_cur, rx1061_curclass, "$!pos", rx1061_pos
    $P11 = rx1061_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx1061_curclass, "$!pos"
    ge $I11, 0, rx1061_fail2823
    repr_bind_attr_int rx1061_cur, rx1061_curclass, "$!pos", rx1061_pos
    $P11 = rx1061_cur."infix"()
    repr_get_attr_int $I11, $P11, rx1061_curclass, "$!pos"
    lt $I11, 0, rx1061_fail2823
    nqp_rxmark rx1061_bstack, rxsubrule1063_pass2830, -1, 0
  rxsubrule1063_pass2830:
    rx1061_cstack = rx1061_cur."!cursor_capture"($P11, "OPER=infix")
    repr_get_attr_int rx1061_pos, $P11, rx1061_curclass, "$!pos"
    rx1061_cur."!cursor_pass"(rx1061_pos, "infixish", 'backtrack'=>1)
    .return (rx1061_cur)
  rx1061_restart2822:
    repr_get_attr_obj rx1061_cstack, rx1061_cur, rx1061_curclass, "$!cstack"
  rx1061_fail2823:
    unless rx1061_bstack, rx1061_done2821
    pop $I19, rx1061_bstack
    if_null rx1061_cstack, rx1061_cstack_done2826
    unless rx1061_cstack, rx1061_cstack_done2826
    dec $I19
    set $P11, rx1061_cstack[$I19]
  rx1061_cstack_done2826:
    pop rx1061_rep, rx1061_bstack
    pop rx1061_pos, rx1061_bstack
    pop $I19, rx1061_bstack
    lt rx1061_pos, -1, rx1061_done2821
    lt rx1061_pos, 0, rx1061_fail2823
    eq $I19, 0, rx1061_fail2823
    nqp_islist $I20, rx1061_cstack
    unless $I20, rx1061_jump2824
    elements $I18, rx1061_bstack
    le $I18, 0, rx1061_cut2825
    dec $I18
    set $I18, rx1061_bstack[$I18]
  rx1061_cut2825:
    assign rx1061_cstack, $I18
  rx1061_jump2824:
    jump $I19
  rx1061_done2821:
    rx1061_cur."!cursor_fail"()
    .return (rx1061_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infixstopper" :subid("cuid_167_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1289
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1064_tgt
    .local int rx1064_pos
    .local int rx1064_off
    .local int rx1064_eos
    .local int rx1064_rep
    .local pmc rx1064_cur
    .local pmc rx1064_curclass
    .local pmc rx1064_bstack
    .local pmc rx1064_cstack
    (rx1064_cur, rx1064_tgt, rx1064_pos, rx1064_curclass, rx1064_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1064_cur
    length rx1064_eos, rx1064_tgt
    eq $I19, 1, rx1064_restart2833
    gt rx1064_pos, rx1064_eos, rx1064_fail2834
    repr_get_attr_int $I11, self, rx1064_curclass, "$!from"
    ne $I11, -1, rxscan1065_done2840
    goto rxscan1065_scan2839
  rxscan1065_loop2838:
    inc rx1064_pos
    gt rx1064_pos, rx1064_eos, rx1064_fail2834
    repr_bind_attr_int rx1064_cur, rx1064_curclass, "$!from", rx1064_pos
  rxscan1065_scan2839:
    nqp_rxmark rx1064_bstack, rxscan1065_loop2838, rx1064_pos, 0
  rxscan1065_done2840:
    repr_bind_attr_int rx1064_cur, rx1064_curclass, "$!pos", rx1064_pos
    $P11 = rx1064_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx1064_curclass, "$!pos"
    lt $I11, 0, rx1064_fail2834
    rx1064_cur."!cursor_pass"(rx1064_pos, "infixstopper", 'backtrack'=>1)
    .return (rx1064_cur)
  rx1064_restart2833:
    repr_get_attr_obj rx1064_cstack, rx1064_cur, rx1064_curclass, "$!cstack"
  rx1064_fail2834:
    unless rx1064_bstack, rx1064_done2832
    pop $I19, rx1064_bstack
    if_null rx1064_cstack, rx1064_cstack_done2837
    unless rx1064_cstack, rx1064_cstack_done2837
    dec $I19
    set $P11, rx1064_cstack[$I19]
  rx1064_cstack_done2837:
    pop rx1064_rep, rx1064_bstack
    pop rx1064_pos, rx1064_bstack
    pop $I19, rx1064_bstack
    lt rx1064_pos, -1, rx1064_done2832
    lt rx1064_pos, 0, rx1064_fail2834
    eq $I19, 0, rx1064_fail2834
    nqp_islist $I20, rx1064_cstack
    unless $I20, rx1064_jump2835
    elements $I18, rx1064_bstack
    le $I18, 0, rx1064_cut2836
    dec $I18
    set $I18, rx1064_bstack[$I18]
  rx1064_cut2836:
    assign rx1064_cstack, $I18
  rx1064_jump2835:
    jump $I19
  rx1064_done2832:
    rx1064_cur."!cursor_fail"()
    .return (rx1064_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_168_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1291
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1066_tgt
    .local int rx1066_pos
    .local int rx1066_off
    .local int rx1066_eos
    .local int rx1066_rep
    .local pmc rx1066_cur
    .local pmc rx1066_curclass
    .local pmc rx1066_bstack
    .local pmc rx1066_cstack
    (rx1066_cur, rx1066_tgt, rx1066_pos, rx1066_curclass, rx1066_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1066_cur
    length rx1066_eos, rx1066_tgt
    eq $I19, 1, rx1066_restart2843
    gt rx1066_pos, rx1066_eos, rx1066_fail2844
    repr_get_attr_int $I11, self, rx1066_curclass, "$!from"
    ne $I11, -1, rxscan1067_done2850
    goto rxscan1067_scan2849
  rxscan1067_loop2848:
    inc rx1066_pos
    gt rx1066_pos, rx1066_eos, rx1066_fail2844
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!from", rx1066_pos
  rxscan1067_scan2849:
    nqp_rxmark rx1066_bstack, rxscan1067_loop2848, rx1066_pos, 0
  rxscan1067_done2850:
    add $I11, rx1066_pos, 1
    gt $I11, rx1066_eos, rx1066_fail2844
    substr $S10, rx1066_tgt, rx1066_pos, 1
    ne $S10, ucs4:"[", rx1066_fail2844
    add rx1066_pos, 1
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!pos", rx1066_pos
    $P11 = rx1066_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1066_curclass, "$!pos"
    lt $I11, 0, rx1066_fail2844
    repr_get_attr_int rx1066_pos, $P11, rx1066_curclass, "$!pos"
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!pos", rx1066_pos
    $P11 = rx1066_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1066_curclass, "$!pos"
    lt $I11, 0, rx1066_fail2844
    nqp_rxmark rx1066_bstack, rxsubrule1069_pass2852, -1, 0
  rxsubrule1069_pass2852:
    rx1066_cstack = rx1066_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1066_pos, $P11, rx1066_curclass, "$!pos"
    add $I11, rx1066_pos, 1
    gt $I11, rx1066_eos, rx1066_fail2844
    substr $S10, rx1066_tgt, rx1066_pos, 1
    ne $S10, ucs4:"]", rx1066_fail2844
    add rx1066_pos, 1
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!pos", rx1066_pos
    $P11 = rx1066_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1066_curclass, "$!pos"
    lt $I11, 0, rx1066_fail2844
    nqp_rxmark rx1066_bstack, rxsubrule1070_pass2853, -1, 0
  rxsubrule1070_pass2853:
    rx1066_cstack = rx1066_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1066_pos, $P11, rx1066_curclass, "$!pos"
    rx1066_cur."!cursor_pass"(rx1066_pos, "postcircumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx1066_cur)
  rx1066_restart2843:
    repr_get_attr_obj rx1066_cstack, rx1066_cur, rx1066_curclass, "$!cstack"
  rx1066_fail2844:
    unless rx1066_bstack, rx1066_done2842
    pop $I19, rx1066_bstack
    if_null rx1066_cstack, rx1066_cstack_done2847
    unless rx1066_cstack, rx1066_cstack_done2847
    dec $I19
    set $P11, rx1066_cstack[$I19]
  rx1066_cstack_done2847:
    pop rx1066_rep, rx1066_bstack
    pop rx1066_pos, rx1066_bstack
    pop $I19, rx1066_bstack
    lt rx1066_pos, -1, rx1066_done2842
    lt rx1066_pos, 0, rx1066_fail2844
    eq $I19, 0, rx1066_fail2844
    nqp_islist $I20, rx1066_cstack
    unless $I20, rx1066_jump2845
    elements $I18, rx1066_bstack
    le $I18, 0, rx1066_cut2846
    dec $I18
    set $I18, rx1066_bstack[$I18]
  rx1066_cut2846:
    assign rx1066_cstack, $I18
  rx1066_jump2845:
    jump $I19
  rx1066_done2842:
    rx1066_cur."!cursor_fail"()
    .return (rx1066_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_169_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1296
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1071_tgt
    .local int rx1071_pos
    .local int rx1071_off
    .local int rx1071_eos
    .local int rx1071_rep
    .local pmc rx1071_cur
    .local pmc rx1071_curclass
    .local pmc rx1071_bstack
    .local pmc rx1071_cstack
    (rx1071_cur, rx1071_tgt, rx1071_pos, rx1071_curclass, rx1071_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1071_cur
    length rx1071_eos, rx1071_tgt
    eq $I19, 1, rx1071_restart2856
    gt rx1071_pos, rx1071_eos, rx1071_fail2857
    repr_get_attr_int $I11, self, rx1071_curclass, "$!from"
    ne $I11, -1, rxscan1072_done2863
    goto rxscan1072_scan2862
  rxscan1072_loop2861:
    inc rx1071_pos
    gt rx1071_pos, rx1071_eos, rx1071_fail2857
    repr_bind_attr_int rx1071_cur, rx1071_curclass, "$!from", rx1071_pos
  rxscan1072_scan2862:
    nqp_rxmark rx1071_bstack, rxscan1072_loop2861, rx1071_pos, 0
  rxscan1072_done2863:
    add $I11, rx1071_pos, 1
    gt $I11, rx1071_eos, rx1071_fail2857
    substr $S10, rx1071_tgt, rx1071_pos, 1
    ne $S10, ucs4:"{", rx1071_fail2857
    add rx1071_pos, 1
    repr_bind_attr_int rx1071_cur, rx1071_curclass, "$!pos", rx1071_pos
    $P11 = rx1071_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1071_curclass, "$!pos"
    lt $I11, 0, rx1071_fail2857
    repr_get_attr_int rx1071_pos, $P11, rx1071_curclass, "$!pos"
    repr_bind_attr_int rx1071_cur, rx1071_curclass, "$!pos", rx1071_pos
    $P11 = rx1071_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1071_curclass, "$!pos"
    lt $I11, 0, rx1071_fail2857
    nqp_rxmark rx1071_bstack, rxsubrule1074_pass2865, -1, 0
  rxsubrule1074_pass2865:
    rx1071_cstack = rx1071_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1071_pos, $P11, rx1071_curclass, "$!pos"
    add $I11, rx1071_pos, 1
    gt $I11, rx1071_eos, rx1071_fail2857
    substr $S10, rx1071_tgt, rx1071_pos, 1
    ne $S10, ucs4:"}", rx1071_fail2857
    add rx1071_pos, 1
    repr_bind_attr_int rx1071_cur, rx1071_curclass, "$!pos", rx1071_pos
    $P11 = rx1071_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1071_curclass, "$!pos"
    lt $I11, 0, rx1071_fail2857
    nqp_rxmark rx1071_bstack, rxsubrule1075_pass2866, -1, 0
  rxsubrule1075_pass2866:
    rx1071_cstack = rx1071_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1071_pos, $P11, rx1071_curclass, "$!pos"
    rx1071_cur."!cursor_pass"(rx1071_pos, "postcircumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx1071_cur)
  rx1071_restart2856:
    repr_get_attr_obj rx1071_cstack, rx1071_cur, rx1071_curclass, "$!cstack"
  rx1071_fail2857:
    unless rx1071_bstack, rx1071_done2855
    pop $I19, rx1071_bstack
    if_null rx1071_cstack, rx1071_cstack_done2860
    unless rx1071_cstack, rx1071_cstack_done2860
    dec $I19
    set $P11, rx1071_cstack[$I19]
  rx1071_cstack_done2860:
    pop rx1071_rep, rx1071_bstack
    pop rx1071_pos, rx1071_bstack
    pop $I19, rx1071_bstack
    lt rx1071_pos, -1, rx1071_done2855
    lt rx1071_pos, 0, rx1071_fail2857
    eq $I19, 0, rx1071_fail2857
    nqp_islist $I20, rx1071_cstack
    unless $I20, rx1071_jump2858
    elements $I18, rx1071_bstack
    le $I18, 0, rx1071_cut2859
    dec $I18
    set $I18, rx1071_bstack[$I18]
  rx1071_cut2859:
    assign rx1071_cstack, $I18
  rx1071_jump2858:
    jump $I19
  rx1071_done2855:
    rx1071_cur."!cursor_fail"()
    .return (rx1071_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_170_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1301
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1076_tgt
    .local int rx1076_pos
    .local int rx1076_off
    .local int rx1076_eos
    .local int rx1076_rep
    .local pmc rx1076_cur
    .local pmc rx1076_curclass
    .local pmc rx1076_bstack
    .local pmc rx1076_cstack
    (rx1076_cur, rx1076_tgt, rx1076_pos, rx1076_curclass, rx1076_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1076_cur
    length rx1076_eos, rx1076_tgt
    eq $I19, 1, rx1076_restart2869
    gt rx1076_pos, rx1076_eos, rx1076_fail2870
    repr_get_attr_int $I11, self, rx1076_curclass, "$!from"
    ne $I11, -1, rxscan1077_done2876
    goto rxscan1077_scan2875
  rxscan1077_loop2874:
    inc rx1076_pos
    gt rx1076_pos, rx1076_eos, rx1076_fail2870
    repr_bind_attr_int rx1076_cur, rx1076_curclass, "$!from", rx1076_pos
  rxscan1077_scan2875:
    nqp_rxmark rx1076_bstack, rxscan1077_loop2874, rx1076_pos, 0
  rxscan1077_done2876:
    ge rx1076_pos, rx1076_eos, rx1076_fail2870
    substr $S11, rx1076_tgt, rx1076_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx1076_fail2870
    repr_bind_attr_int rx1076_cur, rx1076_curclass, "$!pos", rx1076_pos
    $P11 = rx1076_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx1076_curclass, "$!pos"
    lt $I11, 0, rx1076_fail2870
    nqp_rxmark rx1076_bstack, rxsubrule1078_pass2877, -1, 0
  rxsubrule1078_pass2877:
    rx1076_cstack = rx1076_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1076_pos, $P11, rx1076_curclass, "$!pos"
    repr_bind_attr_int rx1076_cur, rx1076_curclass, "$!pos", rx1076_pos
    $P11 = rx1076_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1076_curclass, "$!pos"
    lt $I11, 0, rx1076_fail2870
    nqp_rxmark rx1076_bstack, rxsubrule1079_pass2878, -1, 0
  rxsubrule1079_pass2878:
    rx1076_cstack = rx1076_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1076_pos, $P11, rx1076_curclass, "$!pos"
    rx1076_cur."!cursor_pass"(rx1076_pos, "postcircumfix:sym<ang>", 'backtrack'=>1)
    .return (rx1076_cur)
  rx1076_restart2869:
    repr_get_attr_obj rx1076_cstack, rx1076_cur, rx1076_curclass, "$!cstack"
  rx1076_fail2870:
    unless rx1076_bstack, rx1076_done2868
    pop $I19, rx1076_bstack
    if_null rx1076_cstack, rx1076_cstack_done2873
    unless rx1076_cstack, rx1076_cstack_done2873
    dec $I19
    set $P11, rx1076_cstack[$I19]
  rx1076_cstack_done2873:
    pop rx1076_rep, rx1076_bstack
    pop rx1076_pos, rx1076_bstack
    pop $I19, rx1076_bstack
    lt rx1076_pos, -1, rx1076_done2868
    lt rx1076_pos, 0, rx1076_fail2870
    eq $I19, 0, rx1076_fail2870
    nqp_islist $I20, rx1076_cstack
    unless $I20, rx1076_jump2871
    elements $I18, rx1076_bstack
    le $I18, 0, rx1076_cut2872
    dec $I18
    set $I18, rx1076_bstack[$I18]
  rx1076_cut2872:
    assign rx1076_cstack, $I18
  rx1076_jump2871:
    jump $I19
  rx1076_done2868:
    rx1076_cur."!cursor_fail"()
    .return (rx1076_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_171_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1306
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1080_tgt
    .local int rx1080_pos
    .local int rx1080_off
    .local int rx1080_eos
    .local int rx1080_rep
    .local pmc rx1080_cur
    .local pmc rx1080_curclass
    .local pmc rx1080_bstack
    .local pmc rx1080_cstack
    (rx1080_cur, rx1080_tgt, rx1080_pos, rx1080_curclass, rx1080_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1080_cur
    length rx1080_eos, rx1080_tgt
    eq $I19, 1, rx1080_restart2881
    gt rx1080_pos, rx1080_eos, rx1080_fail2882
    repr_get_attr_int $I11, self, rx1080_curclass, "$!from"
    ne $I11, -1, rxscan1081_done2888
    goto rxscan1081_scan2887
  rxscan1081_loop2886:
    inc rx1080_pos
    gt rx1080_pos, rx1080_eos, rx1080_fail2882
    repr_bind_attr_int rx1080_cur, rx1080_curclass, "$!from", rx1080_pos
  rxscan1081_scan2887:
    nqp_rxmark rx1080_bstack, rxscan1081_loop2886, rx1080_pos, 0
  rxscan1081_done2888:
    add $I11, rx1080_pos, 1
    gt $I11, rx1080_eos, rx1080_fail2882
    substr $S10, rx1080_tgt, rx1080_pos, 1
    ne $S10, ucs4:"(", rx1080_fail2882
    add rx1080_pos, 1
    repr_bind_attr_int rx1080_cur, rx1080_curclass, "$!pos", rx1080_pos
    $P11 = rx1080_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1080_curclass, "$!pos"
    lt $I11, 0, rx1080_fail2882
    repr_get_attr_int rx1080_pos, $P11, rx1080_curclass, "$!pos"
    repr_bind_attr_int rx1080_cur, rx1080_curclass, "$!pos", rx1080_pos
    $P11 = rx1080_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1080_curclass, "$!pos"
    lt $I11, 0, rx1080_fail2882
    nqp_rxmark rx1080_bstack, rxsubrule1083_pass2890, -1, 0
  rxsubrule1083_pass2890:
    rx1080_cstack = rx1080_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1080_pos, $P11, rx1080_curclass, "$!pos"
    add $I11, rx1080_pos, 1
    gt $I11, rx1080_eos, rx1080_fail2882
    substr $S10, rx1080_tgt, rx1080_pos, 1
    ne $S10, ucs4:")", rx1080_fail2882
    add rx1080_pos, 1
    repr_bind_attr_int rx1080_cur, rx1080_curclass, "$!pos", rx1080_pos
    $P11 = rx1080_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1080_curclass, "$!pos"
    lt $I11, 0, rx1080_fail2882
    nqp_rxmark rx1080_bstack, rxsubrule1084_pass2891, -1, 0
  rxsubrule1084_pass2891:
    rx1080_cstack = rx1080_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1080_pos, $P11, rx1080_curclass, "$!pos"
    rx1080_cur."!cursor_pass"(rx1080_pos, "postcircumfix:sym<( )>", 'backtrack'=>1)
    .return (rx1080_cur)
  rx1080_restart2881:
    repr_get_attr_obj rx1080_cstack, rx1080_cur, rx1080_curclass, "$!cstack"
  rx1080_fail2882:
    unless rx1080_bstack, rx1080_done2880
    pop $I19, rx1080_bstack
    if_null rx1080_cstack, rx1080_cstack_done2885
    unless rx1080_cstack, rx1080_cstack_done2885
    dec $I19
    set $P11, rx1080_cstack[$I19]
  rx1080_cstack_done2885:
    pop rx1080_rep, rx1080_bstack
    pop rx1080_pos, rx1080_bstack
    pop $I19, rx1080_bstack
    lt rx1080_pos, -1, rx1080_done2880
    lt rx1080_pos, 0, rx1080_fail2882
    eq $I19, 0, rx1080_fail2882
    nqp_islist $I20, rx1080_cstack
    unless $I20, rx1080_jump2883
    elements $I18, rx1080_bstack
    le $I18, 0, rx1080_cut2884
    dec $I18
    set $I18, rx1080_bstack[$I18]
  rx1080_cut2884:
    assign rx1080_cstack, $I18
  rx1080_jump2883:
    jump $I19
  rx1080_done2880:
    rx1080_cur."!cursor_fail"()
    .return (rx1080_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_172_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1311
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1085_tgt
    .local int rx1085_pos
    .local int rx1085_off
    .local int rx1085_eos
    .local int rx1085_rep
    .local pmc rx1085_cur
    .local pmc rx1085_curclass
    .local pmc rx1085_bstack
    .local pmc rx1085_cstack
    (rx1085_cur, rx1085_tgt, rx1085_pos, rx1085_curclass, rx1085_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1085_cur
    length rx1085_eos, rx1085_tgt
    eq $I19, 1, rx1085_restart2894
    gt rx1085_pos, rx1085_eos, rx1085_fail2895
    repr_get_attr_int $I11, self, rx1085_curclass, "$!from"
    ne $I11, -1, rxscan1086_done2901
    goto rxscan1086_scan2900
  rxscan1086_loop2899:
    inc rx1085_pos
    gt rx1085_pos, rx1085_eos, rx1085_fail2895
    repr_bind_attr_int rx1085_cur, rx1085_curclass, "$!from", rx1085_pos
  rxscan1086_scan2900:
    nqp_rxmark rx1085_bstack, rxscan1086_loop2899, rx1085_pos, 0
  rxscan1086_done2901:
    repr_bind_attr_int rx1085_cur, rx1085_curclass, "$!pos", rx1085_pos
    $P11 = rx1085_cur."dotty"()
    repr_get_attr_int $I11, $P11, rx1085_curclass, "$!pos"
    lt $I11, 0, rx1085_fail2895
    nqp_rxmark rx1085_bstack, rxsubrule1087_pass2902, -1, 0
  rxsubrule1087_pass2902:
    rx1085_cstack = rx1085_cur."!cursor_capture"($P11, "dotty")
    repr_get_attr_int rx1085_pos, $P11, rx1085_curclass, "$!pos"
    repr_bind_attr_int rx1085_cur, rx1085_curclass, "$!pos", rx1085_pos
    $P11 = rx1085_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1085_curclass, "$!pos"
    lt $I11, 0, rx1085_fail2895
    nqp_rxmark rx1085_bstack, rxsubrule1088_pass2903, -1, 0
  rxsubrule1088_pass2903:
    rx1085_cstack = rx1085_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1085_pos, $P11, rx1085_curclass, "$!pos"
    rx1085_cur."!cursor_pass"(rx1085_pos, "postfix:sym<.>", 'backtrack'=>1)
    .return (rx1085_cur)
  rx1085_restart2894:
    repr_get_attr_obj rx1085_cstack, rx1085_cur, rx1085_curclass, "$!cstack"
  rx1085_fail2895:
    unless rx1085_bstack, rx1085_done2893
    pop $I19, rx1085_bstack
    if_null rx1085_cstack, rx1085_cstack_done2898
    unless rx1085_cstack, rx1085_cstack_done2898
    dec $I19
    set $P11, rx1085_cstack[$I19]
  rx1085_cstack_done2898:
    pop rx1085_rep, rx1085_bstack
    pop rx1085_pos, rx1085_bstack
    pop $I19, rx1085_bstack
    lt rx1085_pos, -1, rx1085_done2893
    lt rx1085_pos, 0, rx1085_fail2895
    eq $I19, 0, rx1085_fail2895
    nqp_islist $I20, rx1085_cstack
    unless $I20, rx1085_jump2896
    elements $I18, rx1085_bstack
    le $I18, 0, rx1085_cut2897
    dec $I18
    set $I18, rx1085_bstack[$I18]
  rx1085_cut2897:
    assign rx1085_cstack, $I18
  rx1085_jump2896:
    jump $I19
  rx1085_done2893:
    rx1085_cur."!cursor_fail"()
    .return (rx1085_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<++>" :subid("cuid_173_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1313
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1089_tgt
    .local int rx1089_pos
    .local int rx1089_off
    .local int rx1089_eos
    .local int rx1089_rep
    .local pmc rx1089_cur
    .local pmc rx1089_curclass
    .local pmc rx1089_bstack
    .local pmc rx1089_cstack
    (rx1089_cur, rx1089_tgt, rx1089_pos, rx1089_curclass, rx1089_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1089_cur
    length rx1089_eos, rx1089_tgt
    eq $I19, 1, rx1089_restart2906
    gt rx1089_pos, rx1089_eos, rx1089_fail2907
    repr_get_attr_int $I11, self, rx1089_curclass, "$!from"
    ne $I11, -1, rxscan1090_done2913
    goto rxscan1090_scan2912
  rxscan1090_loop2911:
    inc rx1089_pos
    gt rx1089_pos, rx1089_eos, rx1089_fail2907
    repr_bind_attr_int rx1089_cur, rx1089_curclass, "$!from", rx1089_pos
  rxscan1090_scan2912:
    nqp_rxmark rx1089_bstack, rxscan1090_loop2911, rx1089_pos, 0
  rxscan1090_done2913:
    nqp_rxmark rx1089_bstack, rxcap1091_fail2915, rx1089_pos, 0
    add $I11, rx1089_pos, 2
    gt $I11, rx1089_eos, rx1089_fail2907
    substr $S10, rx1089_tgt, rx1089_pos, 2
    ne $S10, ucs4:"++", rx1089_fail2907
    add rx1089_pos, 2
    nqp_rxpeek $I19, rx1089_bstack, rxcap1091_fail2915
    inc $I19
    set $I11, rx1089_bstack[$I19]
    repr_bind_attr_int rx1089_cur, rx1089_curclass, "$!pos", rx1089_pos
    $P11 = rx1089_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1089_pos)
    rx1089_cstack = rx1089_cur."!cursor_capture"($P11, "sym")
    goto rxcap1091_done2914
  rxcap1091_fail2915:
    goto rx1089_fail2907
  rxcap1091_done2914:
    repr_bind_attr_int rx1089_cur, rx1089_curclass, "$!pos", rx1089_pos
    $P11 = rx1089_cur."O"("%autoincrement, :op<preinc>")
    repr_get_attr_int $I11, $P11, rx1089_curclass, "$!pos"
    lt $I11, 0, rx1089_fail2907
    nqp_rxmark rx1089_bstack, rxsubrule1092_pass2916, -1, 0
  rxsubrule1092_pass2916:
    rx1089_cstack = rx1089_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1089_pos, $P11, rx1089_curclass, "$!pos"
    rx1089_cur."!cursor_pass"(rx1089_pos, "prefix:sym<++>", 'backtrack'=>1)
    .return (rx1089_cur)
  rx1089_restart2906:
    repr_get_attr_obj rx1089_cstack, rx1089_cur, rx1089_curclass, "$!cstack"
  rx1089_fail2907:
    unless rx1089_bstack, rx1089_done2905
    pop $I19, rx1089_bstack
    if_null rx1089_cstack, rx1089_cstack_done2910
    unless rx1089_cstack, rx1089_cstack_done2910
    dec $I19
    set $P11, rx1089_cstack[$I19]
  rx1089_cstack_done2910:
    pop rx1089_rep, rx1089_bstack
    pop rx1089_pos, rx1089_bstack
    pop $I19, rx1089_bstack
    lt rx1089_pos, -1, rx1089_done2905
    lt rx1089_pos, 0, rx1089_fail2907
    eq $I19, 0, rx1089_fail2907
    nqp_islist $I20, rx1089_cstack
    unless $I20, rx1089_jump2908
    elements $I18, rx1089_bstack
    le $I18, 0, rx1089_cut2909
    dec $I18
    set $I18, rx1089_bstack[$I18]
  rx1089_cut2909:
    assign rx1089_cstack, $I18
  rx1089_jump2908:
    jump $I19
  rx1089_done2905:
    rx1089_cur."!cursor_fail"()
    .return (rx1089_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<-->" :subid("cuid_174_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1314
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1093_tgt
    .local int rx1093_pos
    .local int rx1093_off
    .local int rx1093_eos
    .local int rx1093_rep
    .local pmc rx1093_cur
    .local pmc rx1093_curclass
    .local pmc rx1093_bstack
    .local pmc rx1093_cstack
    (rx1093_cur, rx1093_tgt, rx1093_pos, rx1093_curclass, rx1093_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1093_cur
    length rx1093_eos, rx1093_tgt
    eq $I19, 1, rx1093_restart2919
    gt rx1093_pos, rx1093_eos, rx1093_fail2920
    repr_get_attr_int $I11, self, rx1093_curclass, "$!from"
    ne $I11, -1, rxscan1094_done2926
    goto rxscan1094_scan2925
  rxscan1094_loop2924:
    inc rx1093_pos
    gt rx1093_pos, rx1093_eos, rx1093_fail2920
    repr_bind_attr_int rx1093_cur, rx1093_curclass, "$!from", rx1093_pos
  rxscan1094_scan2925:
    nqp_rxmark rx1093_bstack, rxscan1094_loop2924, rx1093_pos, 0
  rxscan1094_done2926:
    nqp_rxmark rx1093_bstack, rxcap1095_fail2928, rx1093_pos, 0
    add $I11, rx1093_pos, 2
    gt $I11, rx1093_eos, rx1093_fail2920
    substr $S10, rx1093_tgt, rx1093_pos, 2
    ne $S10, ucs4:"--", rx1093_fail2920
    add rx1093_pos, 2
    nqp_rxpeek $I19, rx1093_bstack, rxcap1095_fail2928
    inc $I19
    set $I11, rx1093_bstack[$I19]
    repr_bind_attr_int rx1093_cur, rx1093_curclass, "$!pos", rx1093_pos
    $P11 = rx1093_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1093_pos)
    rx1093_cstack = rx1093_cur."!cursor_capture"($P11, "sym")
    goto rxcap1095_done2927
  rxcap1095_fail2928:
    goto rx1093_fail2920
  rxcap1095_done2927:
    repr_bind_attr_int rx1093_cur, rx1093_curclass, "$!pos", rx1093_pos
    $P11 = rx1093_cur."O"("%autoincrement, :op<predec>")
    repr_get_attr_int $I11, $P11, rx1093_curclass, "$!pos"
    lt $I11, 0, rx1093_fail2920
    nqp_rxmark rx1093_bstack, rxsubrule1096_pass2929, -1, 0
  rxsubrule1096_pass2929:
    rx1093_cstack = rx1093_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1093_pos, $P11, rx1093_curclass, "$!pos"
    rx1093_cur."!cursor_pass"(rx1093_pos, "prefix:sym<-->", 'backtrack'=>1)
    .return (rx1093_cur)
  rx1093_restart2919:
    repr_get_attr_obj rx1093_cstack, rx1093_cur, rx1093_curclass, "$!cstack"
  rx1093_fail2920:
    unless rx1093_bstack, rx1093_done2918
    pop $I19, rx1093_bstack
    if_null rx1093_cstack, rx1093_cstack_done2923
    unless rx1093_cstack, rx1093_cstack_done2923
    dec $I19
    set $P11, rx1093_cstack[$I19]
  rx1093_cstack_done2923:
    pop rx1093_rep, rx1093_bstack
    pop rx1093_pos, rx1093_bstack
    pop $I19, rx1093_bstack
    lt rx1093_pos, -1, rx1093_done2918
    lt rx1093_pos, 0, rx1093_fail2920
    eq $I19, 0, rx1093_fail2920
    nqp_islist $I20, rx1093_cstack
    unless $I20, rx1093_jump2921
    elements $I18, rx1093_bstack
    le $I18, 0, rx1093_cut2922
    dec $I18
    set $I18, rx1093_bstack[$I18]
  rx1093_cut2922:
    assign rx1093_cstack, $I18
  rx1093_jump2921:
    jump $I19
  rx1093_done2918:
    rx1093_cur."!cursor_fail"()
    .return (rx1093_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<++>" :subid("cuid_175_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1316
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1097_tgt
    .local int rx1097_pos
    .local int rx1097_off
    .local int rx1097_eos
    .local int rx1097_rep
    .local pmc rx1097_cur
    .local pmc rx1097_curclass
    .local pmc rx1097_bstack
    .local pmc rx1097_cstack
    (rx1097_cur, rx1097_tgt, rx1097_pos, rx1097_curclass, rx1097_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1097_cur
    length rx1097_eos, rx1097_tgt
    eq $I19, 1, rx1097_restart2932
    gt rx1097_pos, rx1097_eos, rx1097_fail2933
    repr_get_attr_int $I11, self, rx1097_curclass, "$!from"
    ne $I11, -1, rxscan1098_done2939
    goto rxscan1098_scan2938
  rxscan1098_loop2937:
    inc rx1097_pos
    gt rx1097_pos, rx1097_eos, rx1097_fail2933
    repr_bind_attr_int rx1097_cur, rx1097_curclass, "$!from", rx1097_pos
  rxscan1098_scan2938:
    nqp_rxmark rx1097_bstack, rxscan1098_loop2937, rx1097_pos, 0
  rxscan1098_done2939:
    nqp_rxmark rx1097_bstack, rxcap1099_fail2941, rx1097_pos, 0
    add $I11, rx1097_pos, 2
    gt $I11, rx1097_eos, rx1097_fail2933
    substr $S10, rx1097_tgt, rx1097_pos, 2
    ne $S10, ucs4:"++", rx1097_fail2933
    add rx1097_pos, 2
    nqp_rxpeek $I19, rx1097_bstack, rxcap1099_fail2941
    inc $I19
    set $I11, rx1097_bstack[$I19]
    repr_bind_attr_int rx1097_cur, rx1097_curclass, "$!pos", rx1097_pos
    $P11 = rx1097_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1097_pos)
    rx1097_cstack = rx1097_cur."!cursor_capture"($P11, "sym")
    goto rxcap1099_done2940
  rxcap1099_fail2941:
    goto rx1097_fail2933
  rxcap1099_done2940:
    repr_bind_attr_int rx1097_cur, rx1097_curclass, "$!pos", rx1097_pos
    $P11 = rx1097_cur."O"("%autoincrement, :op<postinc>")
    repr_get_attr_int $I11, $P11, rx1097_curclass, "$!pos"
    lt $I11, 0, rx1097_fail2933
    nqp_rxmark rx1097_bstack, rxsubrule1100_pass2942, -1, 0
  rxsubrule1100_pass2942:
    rx1097_cstack = rx1097_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1097_pos, $P11, rx1097_curclass, "$!pos"
    rx1097_cur."!cursor_pass"(rx1097_pos, "postfix:sym<++>", 'backtrack'=>1)
    .return (rx1097_cur)
  rx1097_restart2932:
    repr_get_attr_obj rx1097_cstack, rx1097_cur, rx1097_curclass, "$!cstack"
  rx1097_fail2933:
    unless rx1097_bstack, rx1097_done2931
    pop $I19, rx1097_bstack
    if_null rx1097_cstack, rx1097_cstack_done2936
    unless rx1097_cstack, rx1097_cstack_done2936
    dec $I19
    set $P11, rx1097_cstack[$I19]
  rx1097_cstack_done2936:
    pop rx1097_rep, rx1097_bstack
    pop rx1097_pos, rx1097_bstack
    pop $I19, rx1097_bstack
    lt rx1097_pos, -1, rx1097_done2931
    lt rx1097_pos, 0, rx1097_fail2933
    eq $I19, 0, rx1097_fail2933
    nqp_islist $I20, rx1097_cstack
    unless $I20, rx1097_jump2934
    elements $I18, rx1097_bstack
    le $I18, 0, rx1097_cut2935
    dec $I18
    set $I18, rx1097_bstack[$I18]
  rx1097_cut2935:
    assign rx1097_cstack, $I18
  rx1097_jump2934:
    jump $I19
  rx1097_done2931:
    rx1097_cur."!cursor_fail"()
    .return (rx1097_cur) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<-->" :subid("cuid_176_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1317
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1101_tgt
    .local int rx1101_pos
    .local int rx1101_off
    .local int rx1101_eos
    .local int rx1101_rep
    .local pmc rx1101_cur
    .local pmc rx1101_curclass
    .local pmc rx1101_bstack
    .local pmc rx1101_cstack
    (rx1101_cur, rx1101_tgt, rx1101_pos, rx1101_curclass, rx1101_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1101_cur
    length rx1101_eos, rx1101_tgt
    eq $I19, 1, rx1101_restart2945
    gt rx1101_pos, rx1101_eos, rx1101_fail2946
    repr_get_attr_int $I11, self, rx1101_curclass, "$!from"
    ne $I11, -1, rxscan1102_done2952
    goto rxscan1102_scan2951
  rxscan1102_loop2950:
    inc rx1101_pos
    gt rx1101_pos, rx1101_eos, rx1101_fail2946
    repr_bind_attr_int rx1101_cur, rx1101_curclass, "$!from", rx1101_pos
  rxscan1102_scan2951:
    nqp_rxmark rx1101_bstack, rxscan1102_loop2950, rx1101_pos, 0
  rxscan1102_done2952:
    nqp_rxmark rx1101_bstack, rxcap1103_fail2954, rx1101_pos, 0
    add $I11, rx1101_pos, 2
    gt $I11, rx1101_eos, rx1101_fail2946
    substr $S10, rx1101_tgt, rx1101_pos, 2
    ne $S10, ucs4:"--", rx1101_fail2946
    add rx1101_pos, 2
    nqp_rxpeek $I19, rx1101_bstack, rxcap1103_fail2954
    inc $I19
    set $I11, rx1101_bstack[$I19]
    repr_bind_attr_int rx1101_cur, rx1101_curclass, "$!pos", rx1101_pos
    $P11 = rx1101_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1101_pos)
    rx1101_cstack = rx1101_cur."!cursor_capture"($P11, "sym")
    goto rxcap1103_done2953
  rxcap1103_fail2954:
    goto rx1101_fail2946
  rxcap1103_done2953:
    repr_bind_attr_int rx1101_cur, rx1101_curclass, "$!pos", rx1101_pos
    $P11 = rx1101_cur."O"("%autoincrement, :op<postdec>")
    repr_get_attr_int $I11, $P11, rx1101_curclass, "$!pos"
    lt $I11, 0, rx1101_fail2946
    nqp_rxmark rx1101_bstack, rxsubrule1104_pass2955, -1, 0
  rxsubrule1104_pass2955:
    rx1101_cstack = rx1101_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1101_pos, $P11, rx1101_curclass, "$!pos"
    rx1101_cur."!cursor_pass"(rx1101_pos, "postfix:sym<-->", 'backtrack'=>1)
    .return (rx1101_cur)
  rx1101_restart2945:
    repr_get_attr_obj rx1101_cstack, rx1101_cur, rx1101_curclass, "$!cstack"
  rx1101_fail2946:
    unless rx1101_bstack, rx1101_done2944
    pop $I19, rx1101_bstack
    if_null rx1101_cstack, rx1101_cstack_done2949
    unless rx1101_cstack, rx1101_cstack_done2949
    dec $I19
    set $P11, rx1101_cstack[$I19]
  rx1101_cstack_done2949:
    pop rx1101_rep, rx1101_bstack
    pop rx1101_pos, rx1101_bstack
    pop $I19, rx1101_bstack
    lt rx1101_pos, -1, rx1101_done2944
    lt rx1101_pos, 0, rx1101_fail2946
    eq $I19, 0, rx1101_fail2946
    nqp_islist $I20, rx1101_cstack
    unless $I20, rx1101_jump2947
    elements $I18, rx1101_bstack
    le $I18, 0, rx1101_cut2948
    dec $I18
    set $I18, rx1101_bstack[$I18]
  rx1101_cut2948:
    assign rx1101_cstack, $I18
  rx1101_jump2947:
    jump $I19
  rx1101_done2944:
    rx1101_cur."!cursor_fail"()
    .return (rx1101_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<**>" :subid("cuid_177_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1319
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1105_tgt
    .local int rx1105_pos
    .local int rx1105_off
    .local int rx1105_eos
    .local int rx1105_rep
    .local pmc rx1105_cur
    .local pmc rx1105_curclass
    .local pmc rx1105_bstack
    .local pmc rx1105_cstack
    (rx1105_cur, rx1105_tgt, rx1105_pos, rx1105_curclass, rx1105_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1105_cur
    length rx1105_eos, rx1105_tgt
    eq $I19, 1, rx1105_restart2958
    gt rx1105_pos, rx1105_eos, rx1105_fail2959
    repr_get_attr_int $I11, self, rx1105_curclass, "$!from"
    ne $I11, -1, rxscan1106_done2965
    goto rxscan1106_scan2964
  rxscan1106_loop2963:
    inc rx1105_pos
    gt rx1105_pos, rx1105_eos, rx1105_fail2959
    repr_bind_attr_int rx1105_cur, rx1105_curclass, "$!from", rx1105_pos
  rxscan1106_scan2964:
    nqp_rxmark rx1105_bstack, rxscan1106_loop2963, rx1105_pos, 0
  rxscan1106_done2965:
    nqp_rxmark rx1105_bstack, rxcap1107_fail2967, rx1105_pos, 0
    add $I11, rx1105_pos, 2
    gt $I11, rx1105_eos, rx1105_fail2959
    substr $S10, rx1105_tgt, rx1105_pos, 2
    ne $S10, ucs4:"**", rx1105_fail2959
    add rx1105_pos, 2
    nqp_rxpeek $I19, rx1105_bstack, rxcap1107_fail2967
    inc $I19
    set $I11, rx1105_bstack[$I19]
    repr_bind_attr_int rx1105_cur, rx1105_curclass, "$!pos", rx1105_pos
    $P11 = rx1105_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1105_pos)
    rx1105_cstack = rx1105_cur."!cursor_capture"($P11, "sym")
    goto rxcap1107_done2966
  rxcap1107_fail2967:
    goto rx1105_fail2959
  rxcap1107_done2966:
    repr_bind_attr_int rx1105_cur, rx1105_curclass, "$!pos", rx1105_pos
    $P11 = rx1105_cur."O"("%exponentiation, :op<pow_n>")
    repr_get_attr_int $I11, $P11, rx1105_curclass, "$!pos"
    lt $I11, 0, rx1105_fail2959
    nqp_rxmark rx1105_bstack, rxsubrule1108_pass2968, -1, 0
  rxsubrule1108_pass2968:
    rx1105_cstack = rx1105_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1105_pos, $P11, rx1105_curclass, "$!pos"
    rx1105_cur."!cursor_pass"(rx1105_pos, "infix:sym<**>", 'backtrack'=>1)
    .return (rx1105_cur)
  rx1105_restart2958:
    repr_get_attr_obj rx1105_cstack, rx1105_cur, rx1105_curclass, "$!cstack"
  rx1105_fail2959:
    unless rx1105_bstack, rx1105_done2957
    pop $I19, rx1105_bstack
    if_null rx1105_cstack, rx1105_cstack_done2962
    unless rx1105_cstack, rx1105_cstack_done2962
    dec $I19
    set $P11, rx1105_cstack[$I19]
  rx1105_cstack_done2962:
    pop rx1105_rep, rx1105_bstack
    pop rx1105_pos, rx1105_bstack
    pop $I19, rx1105_bstack
    lt rx1105_pos, -1, rx1105_done2957
    lt rx1105_pos, 0, rx1105_fail2959
    eq $I19, 0, rx1105_fail2959
    nqp_islist $I20, rx1105_cstack
    unless $I20, rx1105_jump2960
    elements $I18, rx1105_bstack
    le $I18, 0, rx1105_cut2961
    dec $I18
    set $I18, rx1105_bstack[$I18]
  rx1105_cut2961:
    assign rx1105_cstack, $I18
  rx1105_jump2960:
    jump $I19
  rx1105_done2957:
    rx1105_cur."!cursor_fail"()
    .return (rx1105_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<+>" :subid("cuid_178_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1321
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1109_tgt
    .local int rx1109_pos
    .local int rx1109_off
    .local int rx1109_eos
    .local int rx1109_rep
    .local pmc rx1109_cur
    .local pmc rx1109_curclass
    .local pmc rx1109_bstack
    .local pmc rx1109_cstack
    (rx1109_cur, rx1109_tgt, rx1109_pos, rx1109_curclass, rx1109_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1109_cur
    length rx1109_eos, rx1109_tgt
    eq $I19, 1, rx1109_restart2971
    gt rx1109_pos, rx1109_eos, rx1109_fail2972
    repr_get_attr_int $I11, self, rx1109_curclass, "$!from"
    ne $I11, -1, rxscan1110_done2978
    goto rxscan1110_scan2977
  rxscan1110_loop2976:
    inc rx1109_pos
    gt rx1109_pos, rx1109_eos, rx1109_fail2972
    repr_bind_attr_int rx1109_cur, rx1109_curclass, "$!from", rx1109_pos
  rxscan1110_scan2977:
    nqp_rxmark rx1109_bstack, rxscan1110_loop2976, rx1109_pos, 0
  rxscan1110_done2978:
    nqp_rxmark rx1109_bstack, rxcap1111_fail2980, rx1109_pos, 0
    add $I11, rx1109_pos, 1
    gt $I11, rx1109_eos, rx1109_fail2972
    substr $S10, rx1109_tgt, rx1109_pos, 1
    ne $S10, ucs4:"+", rx1109_fail2972
    add rx1109_pos, 1
    nqp_rxpeek $I19, rx1109_bstack, rxcap1111_fail2980
    inc $I19
    set $I11, rx1109_bstack[$I19]
    repr_bind_attr_int rx1109_cur, rx1109_curclass, "$!pos", rx1109_pos
    $P11 = rx1109_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1109_pos)
    rx1109_cstack = rx1109_cur."!cursor_capture"($P11, "sym")
    goto rxcap1111_done2979
  rxcap1111_fail2980:
    goto rx1109_fail2972
  rxcap1111_done2979:
    repr_bind_attr_int rx1109_cur, rx1109_curclass, "$!pos", rx1109_pos
    $P11 = rx1109_cur."O"("%symbolic_unary, :op<numify>")
    repr_get_attr_int $I11, $P11, rx1109_curclass, "$!pos"
    lt $I11, 0, rx1109_fail2972
    nqp_rxmark rx1109_bstack, rxsubrule1112_pass2981, -1, 0
  rxsubrule1112_pass2981:
    rx1109_cstack = rx1109_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1109_pos, $P11, rx1109_curclass, "$!pos"
    rx1109_cur."!cursor_pass"(rx1109_pos, "prefix:sym<+>", 'backtrack'=>1)
    .return (rx1109_cur)
  rx1109_restart2971:
    repr_get_attr_obj rx1109_cstack, rx1109_cur, rx1109_curclass, "$!cstack"
  rx1109_fail2972:
    unless rx1109_bstack, rx1109_done2970
    pop $I19, rx1109_bstack
    if_null rx1109_cstack, rx1109_cstack_done2975
    unless rx1109_cstack, rx1109_cstack_done2975
    dec $I19
    set $P11, rx1109_cstack[$I19]
  rx1109_cstack_done2975:
    pop rx1109_rep, rx1109_bstack
    pop rx1109_pos, rx1109_bstack
    pop $I19, rx1109_bstack
    lt rx1109_pos, -1, rx1109_done2970
    lt rx1109_pos, 0, rx1109_fail2972
    eq $I19, 0, rx1109_fail2972
    nqp_islist $I20, rx1109_cstack
    unless $I20, rx1109_jump2973
    elements $I18, rx1109_bstack
    le $I18, 0, rx1109_cut2974
    dec $I18
    set $I18, rx1109_bstack[$I18]
  rx1109_cut2974:
    assign rx1109_cstack, $I18
  rx1109_jump2973:
    jump $I19
  rx1109_done2970:
    rx1109_cur."!cursor_fail"()
    .return (rx1109_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<~>" :subid("cuid_179_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1322
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1113_tgt
    .local int rx1113_pos
    .local int rx1113_off
    .local int rx1113_eos
    .local int rx1113_rep
    .local pmc rx1113_cur
    .local pmc rx1113_curclass
    .local pmc rx1113_bstack
    .local pmc rx1113_cstack
    (rx1113_cur, rx1113_tgt, rx1113_pos, rx1113_curclass, rx1113_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1113_cur
    length rx1113_eos, rx1113_tgt
    eq $I19, 1, rx1113_restart2984
    gt rx1113_pos, rx1113_eos, rx1113_fail2985
    repr_get_attr_int $I11, self, rx1113_curclass, "$!from"
    ne $I11, -1, rxscan1114_done2991
    goto rxscan1114_scan2990
  rxscan1114_loop2989:
    inc rx1113_pos
    gt rx1113_pos, rx1113_eos, rx1113_fail2985
    repr_bind_attr_int rx1113_cur, rx1113_curclass, "$!from", rx1113_pos
  rxscan1114_scan2990:
    nqp_rxmark rx1113_bstack, rxscan1114_loop2989, rx1113_pos, 0
  rxscan1114_done2991:
    nqp_rxmark rx1113_bstack, rxcap1115_fail2993, rx1113_pos, 0
    add $I11, rx1113_pos, 1
    gt $I11, rx1113_eos, rx1113_fail2985
    substr $S10, rx1113_tgt, rx1113_pos, 1
    ne $S10, ucs4:"~", rx1113_fail2985
    add rx1113_pos, 1
    nqp_rxpeek $I19, rx1113_bstack, rxcap1115_fail2993
    inc $I19
    set $I11, rx1113_bstack[$I19]
    repr_bind_attr_int rx1113_cur, rx1113_curclass, "$!pos", rx1113_pos
    $P11 = rx1113_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1113_pos)
    rx1113_cstack = rx1113_cur."!cursor_capture"($P11, "sym")
    goto rxcap1115_done2992
  rxcap1115_fail2993:
    goto rx1113_fail2985
  rxcap1115_done2992:
    repr_bind_attr_int rx1113_cur, rx1113_curclass, "$!pos", rx1113_pos
    $P11 = rx1113_cur."O"("%symbolic_unary, :op<stringify>")
    repr_get_attr_int $I11, $P11, rx1113_curclass, "$!pos"
    lt $I11, 0, rx1113_fail2985
    nqp_rxmark rx1113_bstack, rxsubrule1116_pass2994, -1, 0
  rxsubrule1116_pass2994:
    rx1113_cstack = rx1113_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1113_pos, $P11, rx1113_curclass, "$!pos"
    rx1113_cur."!cursor_pass"(rx1113_pos, "prefix:sym<~>", 'backtrack'=>1)
    .return (rx1113_cur)
  rx1113_restart2984:
    repr_get_attr_obj rx1113_cstack, rx1113_cur, rx1113_curclass, "$!cstack"
  rx1113_fail2985:
    unless rx1113_bstack, rx1113_done2983
    pop $I19, rx1113_bstack
    if_null rx1113_cstack, rx1113_cstack_done2988
    unless rx1113_cstack, rx1113_cstack_done2988
    dec $I19
    set $P11, rx1113_cstack[$I19]
  rx1113_cstack_done2988:
    pop rx1113_rep, rx1113_bstack
    pop rx1113_pos, rx1113_bstack
    pop $I19, rx1113_bstack
    lt rx1113_pos, -1, rx1113_done2983
    lt rx1113_pos, 0, rx1113_fail2985
    eq $I19, 0, rx1113_fail2985
    nqp_islist $I20, rx1113_cstack
    unless $I20, rx1113_jump2986
    elements $I18, rx1113_bstack
    le $I18, 0, rx1113_cut2987
    dec $I18
    set $I18, rx1113_bstack[$I18]
  rx1113_cut2987:
    assign rx1113_cstack, $I18
  rx1113_jump2986:
    jump $I19
  rx1113_done2983:
    rx1113_cur."!cursor_fail"()
    .return (rx1113_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<->" :subid("cuid_180_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1323
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1117_tgt
    .local int rx1117_pos
    .local int rx1117_off
    .local int rx1117_eos
    .local int rx1117_rep
    .local pmc rx1117_cur
    .local pmc rx1117_curclass
    .local pmc rx1117_bstack
    .local pmc rx1117_cstack
    (rx1117_cur, rx1117_tgt, rx1117_pos, rx1117_curclass, rx1117_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1117_cur
    length rx1117_eos, rx1117_tgt
    eq $I19, 1, rx1117_restart2997
    gt rx1117_pos, rx1117_eos, rx1117_fail2998
    repr_get_attr_int $I11, self, rx1117_curclass, "$!from"
    ne $I11, -1, rxscan1118_done3004
    goto rxscan1118_scan3003
  rxscan1118_loop3002:
    inc rx1117_pos
    gt rx1117_pos, rx1117_eos, rx1117_fail2998
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!from", rx1117_pos
  rxscan1118_scan3003:
    nqp_rxmark rx1117_bstack, rxscan1118_loop3002, rx1117_pos, 0
  rxscan1118_done3004:
    nqp_rxmark rx1117_bstack, rxcap1119_fail3006, rx1117_pos, 0
    add $I11, rx1117_pos, 1
    gt $I11, rx1117_eos, rx1117_fail2998
    substr $S10, rx1117_tgt, rx1117_pos, 1
    ne $S10, ucs4:"-", rx1117_fail2998
    add rx1117_pos, 1
    nqp_rxpeek $I19, rx1117_bstack, rxcap1119_fail3006
    inc $I19
    set $I11, rx1117_bstack[$I19]
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!pos", rx1117_pos
    $P11 = rx1117_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1117_pos)
    rx1117_cstack = rx1117_cur."!cursor_capture"($P11, "sym")
    goto rxcap1119_done3005
  rxcap1119_fail3006:
    goto rx1117_fail2998
  rxcap1119_done3005:
    ge rx1117_pos, rx1117_eos, rx1117_fail2998
    substr $S11, rx1117_tgt, rx1117_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx1117_fail2998
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!pos", rx1117_pos
    $P11 = rx1117_cur."number"()
    repr_get_attr_int $I11, $P11, rx1117_curclass, "$!pos"
    ge $I11, 0, rx1117_fail2998
    repr_bind_attr_int rx1117_cur, rx1117_curclass, "$!pos", rx1117_pos
    $P11 = rx1117_cur."O"("%symbolic_unary, :op<neg_n>")
    repr_get_attr_int $I11, $P11, rx1117_curclass, "$!pos"
    lt $I11, 0, rx1117_fail2998
    nqp_rxmark rx1117_bstack, rxsubrule1120_pass3007, -1, 0
  rxsubrule1120_pass3007:
    rx1117_cstack = rx1117_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1117_pos, $P11, rx1117_curclass, "$!pos"
    rx1117_cur."!cursor_pass"(rx1117_pos, "prefix:sym<->", 'backtrack'=>1)
    .return (rx1117_cur)
  rx1117_restart2997:
    repr_get_attr_obj rx1117_cstack, rx1117_cur, rx1117_curclass, "$!cstack"
  rx1117_fail2998:
    unless rx1117_bstack, rx1117_done2996
    pop $I19, rx1117_bstack
    if_null rx1117_cstack, rx1117_cstack_done3001
    unless rx1117_cstack, rx1117_cstack_done3001
    dec $I19
    set $P11, rx1117_cstack[$I19]
  rx1117_cstack_done3001:
    pop rx1117_rep, rx1117_bstack
    pop rx1117_pos, rx1117_bstack
    pop $I19, rx1117_bstack
    lt rx1117_pos, -1, rx1117_done2996
    lt rx1117_pos, 0, rx1117_fail2998
    eq $I19, 0, rx1117_fail2998
    nqp_islist $I20, rx1117_cstack
    unless $I20, rx1117_jump2999
    elements $I18, rx1117_bstack
    le $I18, 0, rx1117_cut3000
    dec $I18
    set $I18, rx1117_bstack[$I18]
  rx1117_cut3000:
    assign rx1117_cstack, $I18
  rx1117_jump2999:
    jump $I19
  rx1117_done2996:
    rx1117_cur."!cursor_fail"()
    .return (rx1117_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<?>" :subid("cuid_181_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1324
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1121_tgt
    .local int rx1121_pos
    .local int rx1121_off
    .local int rx1121_eos
    .local int rx1121_rep
    .local pmc rx1121_cur
    .local pmc rx1121_curclass
    .local pmc rx1121_bstack
    .local pmc rx1121_cstack
    (rx1121_cur, rx1121_tgt, rx1121_pos, rx1121_curclass, rx1121_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1121_cur
    length rx1121_eos, rx1121_tgt
    eq $I19, 1, rx1121_restart3010
    gt rx1121_pos, rx1121_eos, rx1121_fail3011
    repr_get_attr_int $I11, self, rx1121_curclass, "$!from"
    ne $I11, -1, rxscan1122_done3017
    goto rxscan1122_scan3016
  rxscan1122_loop3015:
    inc rx1121_pos
    gt rx1121_pos, rx1121_eos, rx1121_fail3011
    repr_bind_attr_int rx1121_cur, rx1121_curclass, "$!from", rx1121_pos
  rxscan1122_scan3016:
    nqp_rxmark rx1121_bstack, rxscan1122_loop3015, rx1121_pos, 0
  rxscan1122_done3017:
    nqp_rxmark rx1121_bstack, rxcap1123_fail3019, rx1121_pos, 0
    add $I11, rx1121_pos, 1
    gt $I11, rx1121_eos, rx1121_fail3011
    substr $S10, rx1121_tgt, rx1121_pos, 1
    ne $S10, ucs4:"?", rx1121_fail3011
    add rx1121_pos, 1
    nqp_rxpeek $I19, rx1121_bstack, rxcap1123_fail3019
    inc $I19
    set $I11, rx1121_bstack[$I19]
    repr_bind_attr_int rx1121_cur, rx1121_curclass, "$!pos", rx1121_pos
    $P11 = rx1121_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1121_pos)
    rx1121_cstack = rx1121_cur."!cursor_capture"($P11, "sym")
    goto rxcap1123_done3018
  rxcap1123_fail3019:
    goto rx1121_fail3011
  rxcap1123_done3018:
    repr_bind_attr_int rx1121_cur, rx1121_curclass, "$!pos", rx1121_pos
    $P11 = rx1121_cur."O"("%symbolic_unary, :op<istrue>")
    repr_get_attr_int $I11, $P11, rx1121_curclass, "$!pos"
    lt $I11, 0, rx1121_fail3011
    nqp_rxmark rx1121_bstack, rxsubrule1124_pass3020, -1, 0
  rxsubrule1124_pass3020:
    rx1121_cstack = rx1121_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1121_pos, $P11, rx1121_curclass, "$!pos"
    rx1121_cur."!cursor_pass"(rx1121_pos, "prefix:sym<?>", 'backtrack'=>1)
    .return (rx1121_cur)
  rx1121_restart3010:
    repr_get_attr_obj rx1121_cstack, rx1121_cur, rx1121_curclass, "$!cstack"
  rx1121_fail3011:
    unless rx1121_bstack, rx1121_done3009
    pop $I19, rx1121_bstack
    if_null rx1121_cstack, rx1121_cstack_done3014
    unless rx1121_cstack, rx1121_cstack_done3014
    dec $I19
    set $P11, rx1121_cstack[$I19]
  rx1121_cstack_done3014:
    pop rx1121_rep, rx1121_bstack
    pop rx1121_pos, rx1121_bstack
    pop $I19, rx1121_bstack
    lt rx1121_pos, -1, rx1121_done3009
    lt rx1121_pos, 0, rx1121_fail3011
    eq $I19, 0, rx1121_fail3011
    nqp_islist $I20, rx1121_cstack
    unless $I20, rx1121_jump3012
    elements $I18, rx1121_bstack
    le $I18, 0, rx1121_cut3013
    dec $I18
    set $I18, rx1121_bstack[$I18]
  rx1121_cut3013:
    assign rx1121_cstack, $I18
  rx1121_jump3012:
    jump $I19
  rx1121_done3009:
    rx1121_cur."!cursor_fail"()
    .return (rx1121_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<!>" :subid("cuid_182_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1325
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1125_tgt
    .local int rx1125_pos
    .local int rx1125_off
    .local int rx1125_eos
    .local int rx1125_rep
    .local pmc rx1125_cur
    .local pmc rx1125_curclass
    .local pmc rx1125_bstack
    .local pmc rx1125_cstack
    (rx1125_cur, rx1125_tgt, rx1125_pos, rx1125_curclass, rx1125_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1125_cur
    length rx1125_eos, rx1125_tgt
    eq $I19, 1, rx1125_restart3023
    gt rx1125_pos, rx1125_eos, rx1125_fail3024
    repr_get_attr_int $I11, self, rx1125_curclass, "$!from"
    ne $I11, -1, rxscan1126_done3030
    goto rxscan1126_scan3029
  rxscan1126_loop3028:
    inc rx1125_pos
    gt rx1125_pos, rx1125_eos, rx1125_fail3024
    repr_bind_attr_int rx1125_cur, rx1125_curclass, "$!from", rx1125_pos
  rxscan1126_scan3029:
    nqp_rxmark rx1125_bstack, rxscan1126_loop3028, rx1125_pos, 0
  rxscan1126_done3030:
    nqp_rxmark rx1125_bstack, rxcap1127_fail3032, rx1125_pos, 0
    add $I11, rx1125_pos, 1
    gt $I11, rx1125_eos, rx1125_fail3024
    substr $S10, rx1125_tgt, rx1125_pos, 1
    ne $S10, ucs4:"!", rx1125_fail3024
    add rx1125_pos, 1
    nqp_rxpeek $I19, rx1125_bstack, rxcap1127_fail3032
    inc $I19
    set $I11, rx1125_bstack[$I19]
    repr_bind_attr_int rx1125_cur, rx1125_curclass, "$!pos", rx1125_pos
    $P11 = rx1125_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1125_pos)
    rx1125_cstack = rx1125_cur."!cursor_capture"($P11, "sym")
    goto rxcap1127_done3031
  rxcap1127_fail3032:
    goto rx1125_fail3024
  rxcap1127_done3031:
    repr_bind_attr_int rx1125_cur, rx1125_curclass, "$!pos", rx1125_pos
    $P11 = rx1125_cur."O"("%symbolic_unary, :op<falsey>")
    repr_get_attr_int $I11, $P11, rx1125_curclass, "$!pos"
    lt $I11, 0, rx1125_fail3024
    nqp_rxmark rx1125_bstack, rxsubrule1128_pass3033, -1, 0
  rxsubrule1128_pass3033:
    rx1125_cstack = rx1125_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1125_pos, $P11, rx1125_curclass, "$!pos"
    rx1125_cur."!cursor_pass"(rx1125_pos, "prefix:sym<!>", 'backtrack'=>1)
    .return (rx1125_cur)
  rx1125_restart3023:
    repr_get_attr_obj rx1125_cstack, rx1125_cur, rx1125_curclass, "$!cstack"
  rx1125_fail3024:
    unless rx1125_bstack, rx1125_done3022
    pop $I19, rx1125_bstack
    if_null rx1125_cstack, rx1125_cstack_done3027
    unless rx1125_cstack, rx1125_cstack_done3027
    dec $I19
    set $P11, rx1125_cstack[$I19]
  rx1125_cstack_done3027:
    pop rx1125_rep, rx1125_bstack
    pop rx1125_pos, rx1125_bstack
    pop $I19, rx1125_bstack
    lt rx1125_pos, -1, rx1125_done3022
    lt rx1125_pos, 0, rx1125_fail3024
    eq $I19, 0, rx1125_fail3024
    nqp_islist $I20, rx1125_cstack
    unless $I20, rx1125_jump3025
    elements $I18, rx1125_bstack
    le $I18, 0, rx1125_cut3026
    dec $I18
    set $I18, rx1125_bstack[$I18]
  rx1125_cut3026:
    assign rx1125_cstack, $I18
  rx1125_jump3025:
    jump $I19
  rx1125_done3022:
    rx1125_cur."!cursor_fail"()
    .return (rx1125_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<|>" :subid("cuid_183_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1326
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1129_tgt
    .local int rx1129_pos
    .local int rx1129_off
    .local int rx1129_eos
    .local int rx1129_rep
    .local pmc rx1129_cur
    .local pmc rx1129_curclass
    .local pmc rx1129_bstack
    .local pmc rx1129_cstack
    (rx1129_cur, rx1129_tgt, rx1129_pos, rx1129_curclass, rx1129_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1129_cur
    length rx1129_eos, rx1129_tgt
    eq $I19, 1, rx1129_restart3036
    gt rx1129_pos, rx1129_eos, rx1129_fail3037
    repr_get_attr_int $I11, self, rx1129_curclass, "$!from"
    ne $I11, -1, rxscan1130_done3043
    goto rxscan1130_scan3042
  rxscan1130_loop3041:
    inc rx1129_pos
    gt rx1129_pos, rx1129_eos, rx1129_fail3037
    repr_bind_attr_int rx1129_cur, rx1129_curclass, "$!from", rx1129_pos
  rxscan1130_scan3042:
    nqp_rxmark rx1129_bstack, rxscan1130_loop3041, rx1129_pos, 0
  rxscan1130_done3043:
    nqp_rxmark rx1129_bstack, rxcap1131_fail3045, rx1129_pos, 0
    add $I11, rx1129_pos, 1
    gt $I11, rx1129_eos, rx1129_fail3037
    substr $S10, rx1129_tgt, rx1129_pos, 1
    ne $S10, ucs4:"|", rx1129_fail3037
    add rx1129_pos, 1
    nqp_rxpeek $I19, rx1129_bstack, rxcap1131_fail3045
    inc $I19
    set $I11, rx1129_bstack[$I19]
    repr_bind_attr_int rx1129_cur, rx1129_curclass, "$!pos", rx1129_pos
    $P11 = rx1129_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1129_pos)
    rx1129_cstack = rx1129_cur."!cursor_capture"($P11, "sym")
    goto rxcap1131_done3044
  rxcap1131_fail3045:
    goto rx1129_fail3037
  rxcap1131_done3044:
    repr_bind_attr_int rx1129_cur, rx1129_curclass, "$!pos", rx1129_pos
    $P11 = rx1129_cur."O"("%symbolic_unary")
    repr_get_attr_int $I11, $P11, rx1129_curclass, "$!pos"
    lt $I11, 0, rx1129_fail3037
    nqp_rxmark rx1129_bstack, rxsubrule1132_pass3046, -1, 0
  rxsubrule1132_pass3046:
    rx1129_cstack = rx1129_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1129_pos, $P11, rx1129_curclass, "$!pos"
    rx1129_cur."!cursor_pass"(rx1129_pos, "prefix:sym<|>", 'backtrack'=>1)
    .return (rx1129_cur)
  rx1129_restart3036:
    repr_get_attr_obj rx1129_cstack, rx1129_cur, rx1129_curclass, "$!cstack"
  rx1129_fail3037:
    unless rx1129_bstack, rx1129_done3035
    pop $I19, rx1129_bstack
    if_null rx1129_cstack, rx1129_cstack_done3040
    unless rx1129_cstack, rx1129_cstack_done3040
    dec $I19
    set $P11, rx1129_cstack[$I19]
  rx1129_cstack_done3040:
    pop rx1129_rep, rx1129_bstack
    pop rx1129_pos, rx1129_bstack
    pop $I19, rx1129_bstack
    lt rx1129_pos, -1, rx1129_done3035
    lt rx1129_pos, 0, rx1129_fail3037
    eq $I19, 0, rx1129_fail3037
    nqp_islist $I20, rx1129_cstack
    unless $I20, rx1129_jump3038
    elements $I18, rx1129_bstack
    le $I18, 0, rx1129_cut3039
    dec $I18
    set $I18, rx1129_bstack[$I18]
  rx1129_cut3039:
    assign rx1129_cstack, $I18
  rx1129_jump3038:
    jump $I19
  rx1129_done3035:
    rx1129_cur."!cursor_fail"()
    .return (rx1129_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<*>" :subid("cuid_184_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1328
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1133_tgt
    .local int rx1133_pos
    .local int rx1133_off
    .local int rx1133_eos
    .local int rx1133_rep
    .local pmc rx1133_cur
    .local pmc rx1133_curclass
    .local pmc rx1133_bstack
    .local pmc rx1133_cstack
    (rx1133_cur, rx1133_tgt, rx1133_pos, rx1133_curclass, rx1133_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1133_cur
    length rx1133_eos, rx1133_tgt
    eq $I19, 1, rx1133_restart3049
    gt rx1133_pos, rx1133_eos, rx1133_fail3050
    repr_get_attr_int $I11, self, rx1133_curclass, "$!from"
    ne $I11, -1, rxscan1134_done3056
    goto rxscan1134_scan3055
  rxscan1134_loop3054:
    inc rx1133_pos
    gt rx1133_pos, rx1133_eos, rx1133_fail3050
    repr_bind_attr_int rx1133_cur, rx1133_curclass, "$!from", rx1133_pos
  rxscan1134_scan3055:
    nqp_rxmark rx1133_bstack, rxscan1134_loop3054, rx1133_pos, 0
  rxscan1134_done3056:
    nqp_rxmark rx1133_bstack, rxcap1135_fail3058, rx1133_pos, 0
    add $I11, rx1133_pos, 1
    gt $I11, rx1133_eos, rx1133_fail3050
    substr $S10, rx1133_tgt, rx1133_pos, 1
    ne $S10, ucs4:"*", rx1133_fail3050
    add rx1133_pos, 1
    nqp_rxpeek $I19, rx1133_bstack, rxcap1135_fail3058
    inc $I19
    set $I11, rx1133_bstack[$I19]
    repr_bind_attr_int rx1133_cur, rx1133_curclass, "$!pos", rx1133_pos
    $P11 = rx1133_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1133_pos)
    rx1133_cstack = rx1133_cur."!cursor_capture"($P11, "sym")
    goto rxcap1135_done3057
  rxcap1135_fail3058:
    goto rx1133_fail3050
  rxcap1135_done3057:
    repr_bind_attr_int rx1133_cur, rx1133_curclass, "$!pos", rx1133_pos
    $P11 = rx1133_cur."O"("%multiplicative, :op<mul_n>")
    repr_get_attr_int $I11, $P11, rx1133_curclass, "$!pos"
    lt $I11, 0, rx1133_fail3050
    nqp_rxmark rx1133_bstack, rxsubrule1136_pass3059, -1, 0
  rxsubrule1136_pass3059:
    rx1133_cstack = rx1133_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1133_pos, $P11, rx1133_curclass, "$!pos"
    rx1133_cur."!cursor_pass"(rx1133_pos, "infix:sym<*>", 'backtrack'=>1)
    .return (rx1133_cur)
  rx1133_restart3049:
    repr_get_attr_obj rx1133_cstack, rx1133_cur, rx1133_curclass, "$!cstack"
  rx1133_fail3050:
    unless rx1133_bstack, rx1133_done3048
    pop $I19, rx1133_bstack
    if_null rx1133_cstack, rx1133_cstack_done3053
    unless rx1133_cstack, rx1133_cstack_done3053
    dec $I19
    set $P11, rx1133_cstack[$I19]
  rx1133_cstack_done3053:
    pop rx1133_rep, rx1133_bstack
    pop rx1133_pos, rx1133_bstack
    pop $I19, rx1133_bstack
    lt rx1133_pos, -1, rx1133_done3048
    lt rx1133_pos, 0, rx1133_fail3050
    eq $I19, 0, rx1133_fail3050
    nqp_islist $I20, rx1133_cstack
    unless $I20, rx1133_jump3051
    elements $I18, rx1133_bstack
    le $I18, 0, rx1133_cut3052
    dec $I18
    set $I18, rx1133_bstack[$I18]
  rx1133_cut3052:
    assign rx1133_cstack, $I18
  rx1133_jump3051:
    jump $I19
  rx1133_done3048:
    rx1133_cur."!cursor_fail"()
    .return (rx1133_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym</>" :subid("cuid_185_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1329
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1137_tgt
    .local int rx1137_pos
    .local int rx1137_off
    .local int rx1137_eos
    .local int rx1137_rep
    .local pmc rx1137_cur
    .local pmc rx1137_curclass
    .local pmc rx1137_bstack
    .local pmc rx1137_cstack
    (rx1137_cur, rx1137_tgt, rx1137_pos, rx1137_curclass, rx1137_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1137_cur
    length rx1137_eos, rx1137_tgt
    eq $I19, 1, rx1137_restart3062
    gt rx1137_pos, rx1137_eos, rx1137_fail3063
    repr_get_attr_int $I11, self, rx1137_curclass, "$!from"
    ne $I11, -1, rxscan1138_done3069
    goto rxscan1138_scan3068
  rxscan1138_loop3067:
    inc rx1137_pos
    gt rx1137_pos, rx1137_eos, rx1137_fail3063
    repr_bind_attr_int rx1137_cur, rx1137_curclass, "$!from", rx1137_pos
  rxscan1138_scan3068:
    nqp_rxmark rx1137_bstack, rxscan1138_loop3067, rx1137_pos, 0
  rxscan1138_done3069:
    nqp_rxmark rx1137_bstack, rxcap1139_fail3071, rx1137_pos, 0
    add $I11, rx1137_pos, 1
    gt $I11, rx1137_eos, rx1137_fail3063
    substr $S10, rx1137_tgt, rx1137_pos, 1
    ne $S10, ucs4:"/", rx1137_fail3063
    add rx1137_pos, 1
    nqp_rxpeek $I19, rx1137_bstack, rxcap1139_fail3071
    inc $I19
    set $I11, rx1137_bstack[$I19]
    repr_bind_attr_int rx1137_cur, rx1137_curclass, "$!pos", rx1137_pos
    $P11 = rx1137_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1137_pos)
    rx1137_cstack = rx1137_cur."!cursor_capture"($P11, "sym")
    goto rxcap1139_done3070
  rxcap1139_fail3071:
    goto rx1137_fail3063
  rxcap1139_done3070:
    repr_bind_attr_int rx1137_cur, rx1137_curclass, "$!pos", rx1137_pos
    $P11 = rx1137_cur."O"("%multiplicative, :op<div_n>")
    repr_get_attr_int $I11, $P11, rx1137_curclass, "$!pos"
    lt $I11, 0, rx1137_fail3063
    nqp_rxmark rx1137_bstack, rxsubrule1140_pass3072, -1, 0
  rxsubrule1140_pass3072:
    rx1137_cstack = rx1137_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1137_pos, $P11, rx1137_curclass, "$!pos"
    rx1137_cur."!cursor_pass"(rx1137_pos, "infix:sym</>", 'backtrack'=>1)
    .return (rx1137_cur)
  rx1137_restart3062:
    repr_get_attr_obj rx1137_cstack, rx1137_cur, rx1137_curclass, "$!cstack"
  rx1137_fail3063:
    unless rx1137_bstack, rx1137_done3061
    pop $I19, rx1137_bstack
    if_null rx1137_cstack, rx1137_cstack_done3066
    unless rx1137_cstack, rx1137_cstack_done3066
    dec $I19
    set $P11, rx1137_cstack[$I19]
  rx1137_cstack_done3066:
    pop rx1137_rep, rx1137_bstack
    pop rx1137_pos, rx1137_bstack
    pop $I19, rx1137_bstack
    lt rx1137_pos, -1, rx1137_done3061
    lt rx1137_pos, 0, rx1137_fail3063
    eq $I19, 0, rx1137_fail3063
    nqp_islist $I20, rx1137_cstack
    unless $I20, rx1137_jump3064
    elements $I18, rx1137_bstack
    le $I18, 0, rx1137_cut3065
    dec $I18
    set $I18, rx1137_bstack[$I18]
  rx1137_cut3065:
    assign rx1137_cstack, $I18
  rx1137_jump3064:
    jump $I19
  rx1137_done3061:
    rx1137_cur."!cursor_fail"()
    .return (rx1137_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<%>" :subid("cuid_186_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1330
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1141_tgt
    .local int rx1141_pos
    .local int rx1141_off
    .local int rx1141_eos
    .local int rx1141_rep
    .local pmc rx1141_cur
    .local pmc rx1141_curclass
    .local pmc rx1141_bstack
    .local pmc rx1141_cstack
    (rx1141_cur, rx1141_tgt, rx1141_pos, rx1141_curclass, rx1141_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1141_cur
    length rx1141_eos, rx1141_tgt
    eq $I19, 1, rx1141_restart3075
    gt rx1141_pos, rx1141_eos, rx1141_fail3076
    repr_get_attr_int $I11, self, rx1141_curclass, "$!from"
    ne $I11, -1, rxscan1142_done3082
    goto rxscan1142_scan3081
  rxscan1142_loop3080:
    inc rx1141_pos
    gt rx1141_pos, rx1141_eos, rx1141_fail3076
    repr_bind_attr_int rx1141_cur, rx1141_curclass, "$!from", rx1141_pos
  rxscan1142_scan3081:
    nqp_rxmark rx1141_bstack, rxscan1142_loop3080, rx1141_pos, 0
  rxscan1142_done3082:
    nqp_rxmark rx1141_bstack, rxcap1143_fail3084, rx1141_pos, 0
    add $I11, rx1141_pos, 1
    gt $I11, rx1141_eos, rx1141_fail3076
    substr $S10, rx1141_tgt, rx1141_pos, 1
    ne $S10, ucs4:"%", rx1141_fail3076
    add rx1141_pos, 1
    nqp_rxpeek $I19, rx1141_bstack, rxcap1143_fail3084
    inc $I19
    set $I11, rx1141_bstack[$I19]
    repr_bind_attr_int rx1141_cur, rx1141_curclass, "$!pos", rx1141_pos
    $P11 = rx1141_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1141_pos)
    rx1141_cstack = rx1141_cur."!cursor_capture"($P11, "sym")
    goto rxcap1143_done3083
  rxcap1143_fail3084:
    goto rx1141_fail3076
  rxcap1143_done3083:
    repr_bind_attr_int rx1141_cur, rx1141_curclass, "$!pos", rx1141_pos
    $P11 = rx1141_cur."O"("%multiplicative, :op<mod_n>")
    repr_get_attr_int $I11, $P11, rx1141_curclass, "$!pos"
    lt $I11, 0, rx1141_fail3076
    nqp_rxmark rx1141_bstack, rxsubrule1144_pass3085, -1, 0
  rxsubrule1144_pass3085:
    rx1141_cstack = rx1141_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1141_pos, $P11, rx1141_curclass, "$!pos"
    rx1141_cur."!cursor_pass"(rx1141_pos, "infix:sym<%>", 'backtrack'=>1)
    .return (rx1141_cur)
  rx1141_restart3075:
    repr_get_attr_obj rx1141_cstack, rx1141_cur, rx1141_curclass, "$!cstack"
  rx1141_fail3076:
    unless rx1141_bstack, rx1141_done3074
    pop $I19, rx1141_bstack
    if_null rx1141_cstack, rx1141_cstack_done3079
    unless rx1141_cstack, rx1141_cstack_done3079
    dec $I19
    set $P11, rx1141_cstack[$I19]
  rx1141_cstack_done3079:
    pop rx1141_rep, rx1141_bstack
    pop rx1141_pos, rx1141_bstack
    pop $I19, rx1141_bstack
    lt rx1141_pos, -1, rx1141_done3074
    lt rx1141_pos, 0, rx1141_fail3076
    eq $I19, 0, rx1141_fail3076
    nqp_islist $I20, rx1141_cstack
    unless $I20, rx1141_jump3077
    elements $I18, rx1141_bstack
    le $I18, 0, rx1141_cut3078
    dec $I18
    set $I18, rx1141_bstack[$I18]
  rx1141_cut3078:
    assign rx1141_cstack, $I18
  rx1141_jump3077:
    jump $I19
  rx1141_done3074:
    rx1141_cur."!cursor_fail"()
    .return (rx1141_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+&>" :subid("cuid_187_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1331
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1145_tgt
    .local int rx1145_pos
    .local int rx1145_off
    .local int rx1145_eos
    .local int rx1145_rep
    .local pmc rx1145_cur
    .local pmc rx1145_curclass
    .local pmc rx1145_bstack
    .local pmc rx1145_cstack
    (rx1145_cur, rx1145_tgt, rx1145_pos, rx1145_curclass, rx1145_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1145_cur
    length rx1145_eos, rx1145_tgt
    eq $I19, 1, rx1145_restart3088
    gt rx1145_pos, rx1145_eos, rx1145_fail3089
    repr_get_attr_int $I11, self, rx1145_curclass, "$!from"
    ne $I11, -1, rxscan1146_done3095
    goto rxscan1146_scan3094
  rxscan1146_loop3093:
    inc rx1145_pos
    gt rx1145_pos, rx1145_eos, rx1145_fail3089
    repr_bind_attr_int rx1145_cur, rx1145_curclass, "$!from", rx1145_pos
  rxscan1146_scan3094:
    nqp_rxmark rx1145_bstack, rxscan1146_loop3093, rx1145_pos, 0
  rxscan1146_done3095:
    nqp_rxmark rx1145_bstack, rxcap1147_fail3097, rx1145_pos, 0
    add $I11, rx1145_pos, 2
    gt $I11, rx1145_eos, rx1145_fail3089
    substr $S10, rx1145_tgt, rx1145_pos, 2
    ne $S10, ucs4:"+&", rx1145_fail3089
    add rx1145_pos, 2
    nqp_rxpeek $I19, rx1145_bstack, rxcap1147_fail3097
    inc $I19
    set $I11, rx1145_bstack[$I19]
    repr_bind_attr_int rx1145_cur, rx1145_curclass, "$!pos", rx1145_pos
    $P11 = rx1145_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1145_pos)
    rx1145_cstack = rx1145_cur."!cursor_capture"($P11, "sym")
    goto rxcap1147_done3096
  rxcap1147_fail3097:
    goto rx1145_fail3089
  rxcap1147_done3096:
    repr_bind_attr_int rx1145_cur, rx1145_curclass, "$!pos", rx1145_pos
    $P11 = rx1145_cur."O"("%multiplicative, :op<bitand_i>")
    repr_get_attr_int $I11, $P11, rx1145_curclass, "$!pos"
    lt $I11, 0, rx1145_fail3089
    nqp_rxmark rx1145_bstack, rxsubrule1148_pass3098, -1, 0
  rxsubrule1148_pass3098:
    rx1145_cstack = rx1145_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1145_pos, $P11, rx1145_curclass, "$!pos"
    rx1145_cur."!cursor_pass"(rx1145_pos, "infix:sym<+&>", 'backtrack'=>1)
    .return (rx1145_cur)
  rx1145_restart3088:
    repr_get_attr_obj rx1145_cstack, rx1145_cur, rx1145_curclass, "$!cstack"
  rx1145_fail3089:
    unless rx1145_bstack, rx1145_done3087
    pop $I19, rx1145_bstack
    if_null rx1145_cstack, rx1145_cstack_done3092
    unless rx1145_cstack, rx1145_cstack_done3092
    dec $I19
    set $P11, rx1145_cstack[$I19]
  rx1145_cstack_done3092:
    pop rx1145_rep, rx1145_bstack
    pop rx1145_pos, rx1145_bstack
    pop $I19, rx1145_bstack
    lt rx1145_pos, -1, rx1145_done3087
    lt rx1145_pos, 0, rx1145_fail3089
    eq $I19, 0, rx1145_fail3089
    nqp_islist $I20, rx1145_cstack
    unless $I20, rx1145_jump3090
    elements $I18, rx1145_bstack
    le $I18, 0, rx1145_cut3091
    dec $I18
    set $I18, rx1145_bstack[$I18]
  rx1145_cut3091:
    assign rx1145_cstack, $I18
  rx1145_jump3090:
    jump $I19
  rx1145_done3087:
    rx1145_cur."!cursor_fail"()
    .return (rx1145_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+>" :subid("cuid_188_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1333
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1149_tgt
    .local int rx1149_pos
    .local int rx1149_off
    .local int rx1149_eos
    .local int rx1149_rep
    .local pmc rx1149_cur
    .local pmc rx1149_curclass
    .local pmc rx1149_bstack
    .local pmc rx1149_cstack
    (rx1149_cur, rx1149_tgt, rx1149_pos, rx1149_curclass, rx1149_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1149_cur
    length rx1149_eos, rx1149_tgt
    eq $I19, 1, rx1149_restart3101
    gt rx1149_pos, rx1149_eos, rx1149_fail3102
    repr_get_attr_int $I11, self, rx1149_curclass, "$!from"
    ne $I11, -1, rxscan1150_done3108
    goto rxscan1150_scan3107
  rxscan1150_loop3106:
    inc rx1149_pos
    gt rx1149_pos, rx1149_eos, rx1149_fail3102
    repr_bind_attr_int rx1149_cur, rx1149_curclass, "$!from", rx1149_pos
  rxscan1150_scan3107:
    nqp_rxmark rx1149_bstack, rxscan1150_loop3106, rx1149_pos, 0
  rxscan1150_done3108:
    nqp_rxmark rx1149_bstack, rxcap1151_fail3110, rx1149_pos, 0
    add $I11, rx1149_pos, 1
    gt $I11, rx1149_eos, rx1149_fail3102
    substr $S10, rx1149_tgt, rx1149_pos, 1
    ne $S10, ucs4:"+", rx1149_fail3102
    add rx1149_pos, 1
    nqp_rxpeek $I19, rx1149_bstack, rxcap1151_fail3110
    inc $I19
    set $I11, rx1149_bstack[$I19]
    repr_bind_attr_int rx1149_cur, rx1149_curclass, "$!pos", rx1149_pos
    $P11 = rx1149_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1149_pos)
    rx1149_cstack = rx1149_cur."!cursor_capture"($P11, "sym")
    goto rxcap1151_done3109
  rxcap1151_fail3110:
    goto rx1149_fail3102
  rxcap1151_done3109:
    repr_bind_attr_int rx1149_cur, rx1149_curclass, "$!pos", rx1149_pos
    $P11 = rx1149_cur."O"("%additive, :op<add_n>")
    repr_get_attr_int $I11, $P11, rx1149_curclass, "$!pos"
    lt $I11, 0, rx1149_fail3102
    nqp_rxmark rx1149_bstack, rxsubrule1152_pass3111, -1, 0
  rxsubrule1152_pass3111:
    rx1149_cstack = rx1149_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1149_pos, $P11, rx1149_curclass, "$!pos"
    rx1149_cur."!cursor_pass"(rx1149_pos, "infix:sym<+>", 'backtrack'=>1)
    .return (rx1149_cur)
  rx1149_restart3101:
    repr_get_attr_obj rx1149_cstack, rx1149_cur, rx1149_curclass, "$!cstack"
  rx1149_fail3102:
    unless rx1149_bstack, rx1149_done3100
    pop $I19, rx1149_bstack
    if_null rx1149_cstack, rx1149_cstack_done3105
    unless rx1149_cstack, rx1149_cstack_done3105
    dec $I19
    set $P11, rx1149_cstack[$I19]
  rx1149_cstack_done3105:
    pop rx1149_rep, rx1149_bstack
    pop rx1149_pos, rx1149_bstack
    pop $I19, rx1149_bstack
    lt rx1149_pos, -1, rx1149_done3100
    lt rx1149_pos, 0, rx1149_fail3102
    eq $I19, 0, rx1149_fail3102
    nqp_islist $I20, rx1149_cstack
    unless $I20, rx1149_jump3103
    elements $I18, rx1149_bstack
    le $I18, 0, rx1149_cut3104
    dec $I18
    set $I18, rx1149_bstack[$I18]
  rx1149_cut3104:
    assign rx1149_cstack, $I18
  rx1149_jump3103:
    jump $I19
  rx1149_done3100:
    rx1149_cur."!cursor_fail"()
    .return (rx1149_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<->" :subid("cuid_189_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1334
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1153_tgt
    .local int rx1153_pos
    .local int rx1153_off
    .local int rx1153_eos
    .local int rx1153_rep
    .local pmc rx1153_cur
    .local pmc rx1153_curclass
    .local pmc rx1153_bstack
    .local pmc rx1153_cstack
    (rx1153_cur, rx1153_tgt, rx1153_pos, rx1153_curclass, rx1153_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1153_cur
    length rx1153_eos, rx1153_tgt
    eq $I19, 1, rx1153_restart3114
    gt rx1153_pos, rx1153_eos, rx1153_fail3115
    repr_get_attr_int $I11, self, rx1153_curclass, "$!from"
    ne $I11, -1, rxscan1154_done3121
    goto rxscan1154_scan3120
  rxscan1154_loop3119:
    inc rx1153_pos
    gt rx1153_pos, rx1153_eos, rx1153_fail3115
    repr_bind_attr_int rx1153_cur, rx1153_curclass, "$!from", rx1153_pos
  rxscan1154_scan3120:
    nqp_rxmark rx1153_bstack, rxscan1154_loop3119, rx1153_pos, 0
  rxscan1154_done3121:
    nqp_rxmark rx1153_bstack, rxcap1155_fail3123, rx1153_pos, 0
    add $I11, rx1153_pos, 1
    gt $I11, rx1153_eos, rx1153_fail3115
    substr $S10, rx1153_tgt, rx1153_pos, 1
    ne $S10, ucs4:"-", rx1153_fail3115
    add rx1153_pos, 1
    nqp_rxpeek $I19, rx1153_bstack, rxcap1155_fail3123
    inc $I19
    set $I11, rx1153_bstack[$I19]
    repr_bind_attr_int rx1153_cur, rx1153_curclass, "$!pos", rx1153_pos
    $P11 = rx1153_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1153_pos)
    rx1153_cstack = rx1153_cur."!cursor_capture"($P11, "sym")
    goto rxcap1155_done3122
  rxcap1155_fail3123:
    goto rx1153_fail3115
  rxcap1155_done3122:
    repr_bind_attr_int rx1153_cur, rx1153_curclass, "$!pos", rx1153_pos
    $P11 = rx1153_cur."O"("%additive, :op<sub_n>")
    repr_get_attr_int $I11, $P11, rx1153_curclass, "$!pos"
    lt $I11, 0, rx1153_fail3115
    nqp_rxmark rx1153_bstack, rxsubrule1156_pass3124, -1, 0
  rxsubrule1156_pass3124:
    rx1153_cstack = rx1153_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1153_pos, $P11, rx1153_curclass, "$!pos"
    rx1153_cur."!cursor_pass"(rx1153_pos, "infix:sym<->", 'backtrack'=>1)
    .return (rx1153_cur)
  rx1153_restart3114:
    repr_get_attr_obj rx1153_cstack, rx1153_cur, rx1153_curclass, "$!cstack"
  rx1153_fail3115:
    unless rx1153_bstack, rx1153_done3113
    pop $I19, rx1153_bstack
    if_null rx1153_cstack, rx1153_cstack_done3118
    unless rx1153_cstack, rx1153_cstack_done3118
    dec $I19
    set $P11, rx1153_cstack[$I19]
  rx1153_cstack_done3118:
    pop rx1153_rep, rx1153_bstack
    pop rx1153_pos, rx1153_bstack
    pop $I19, rx1153_bstack
    lt rx1153_pos, -1, rx1153_done3113
    lt rx1153_pos, 0, rx1153_fail3115
    eq $I19, 0, rx1153_fail3115
    nqp_islist $I20, rx1153_cstack
    unless $I20, rx1153_jump3116
    elements $I18, rx1153_bstack
    le $I18, 0, rx1153_cut3117
    dec $I18
    set $I18, rx1153_bstack[$I18]
  rx1153_cut3117:
    assign rx1153_cstack, $I18
  rx1153_jump3116:
    jump $I19
  rx1153_done3113:
    rx1153_cur."!cursor_fail"()
    .return (rx1153_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+|>" :subid("cuid_190_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1335
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1157_tgt
    .local int rx1157_pos
    .local int rx1157_off
    .local int rx1157_eos
    .local int rx1157_rep
    .local pmc rx1157_cur
    .local pmc rx1157_curclass
    .local pmc rx1157_bstack
    .local pmc rx1157_cstack
    (rx1157_cur, rx1157_tgt, rx1157_pos, rx1157_curclass, rx1157_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1157_cur
    length rx1157_eos, rx1157_tgt
    eq $I19, 1, rx1157_restart3127
    gt rx1157_pos, rx1157_eos, rx1157_fail3128
    repr_get_attr_int $I11, self, rx1157_curclass, "$!from"
    ne $I11, -1, rxscan1158_done3134
    goto rxscan1158_scan3133
  rxscan1158_loop3132:
    inc rx1157_pos
    gt rx1157_pos, rx1157_eos, rx1157_fail3128
    repr_bind_attr_int rx1157_cur, rx1157_curclass, "$!from", rx1157_pos
  rxscan1158_scan3133:
    nqp_rxmark rx1157_bstack, rxscan1158_loop3132, rx1157_pos, 0
  rxscan1158_done3134:
    nqp_rxmark rx1157_bstack, rxcap1159_fail3136, rx1157_pos, 0
    add $I11, rx1157_pos, 2
    gt $I11, rx1157_eos, rx1157_fail3128
    substr $S10, rx1157_tgt, rx1157_pos, 2
    ne $S10, ucs4:"+|", rx1157_fail3128
    add rx1157_pos, 2
    nqp_rxpeek $I19, rx1157_bstack, rxcap1159_fail3136
    inc $I19
    set $I11, rx1157_bstack[$I19]
    repr_bind_attr_int rx1157_cur, rx1157_curclass, "$!pos", rx1157_pos
    $P11 = rx1157_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1157_pos)
    rx1157_cstack = rx1157_cur."!cursor_capture"($P11, "sym")
    goto rxcap1159_done3135
  rxcap1159_fail3136:
    goto rx1157_fail3128
  rxcap1159_done3135:
    repr_bind_attr_int rx1157_cur, rx1157_curclass, "$!pos", rx1157_pos
    $P11 = rx1157_cur."O"("%additive, :op<bitor_i>")
    repr_get_attr_int $I11, $P11, rx1157_curclass, "$!pos"
    lt $I11, 0, rx1157_fail3128
    nqp_rxmark rx1157_bstack, rxsubrule1160_pass3137, -1, 0
  rxsubrule1160_pass3137:
    rx1157_cstack = rx1157_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1157_pos, $P11, rx1157_curclass, "$!pos"
    rx1157_cur."!cursor_pass"(rx1157_pos, "infix:sym<+|>", 'backtrack'=>1)
    .return (rx1157_cur)
  rx1157_restart3127:
    repr_get_attr_obj rx1157_cstack, rx1157_cur, rx1157_curclass, "$!cstack"
  rx1157_fail3128:
    unless rx1157_bstack, rx1157_done3126
    pop $I19, rx1157_bstack
    if_null rx1157_cstack, rx1157_cstack_done3131
    unless rx1157_cstack, rx1157_cstack_done3131
    dec $I19
    set $P11, rx1157_cstack[$I19]
  rx1157_cstack_done3131:
    pop rx1157_rep, rx1157_bstack
    pop rx1157_pos, rx1157_bstack
    pop $I19, rx1157_bstack
    lt rx1157_pos, -1, rx1157_done3126
    lt rx1157_pos, 0, rx1157_fail3128
    eq $I19, 0, rx1157_fail3128
    nqp_islist $I20, rx1157_cstack
    unless $I20, rx1157_jump3129
    elements $I18, rx1157_bstack
    le $I18, 0, rx1157_cut3130
    dec $I18
    set $I18, rx1157_bstack[$I18]
  rx1157_cut3130:
    assign rx1157_cstack, $I18
  rx1157_jump3129:
    jump $I19
  rx1157_done3126:
    rx1157_cur."!cursor_fail"()
    .return (rx1157_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+^>" :subid("cuid_191_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1336
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1161_tgt
    .local int rx1161_pos
    .local int rx1161_off
    .local int rx1161_eos
    .local int rx1161_rep
    .local pmc rx1161_cur
    .local pmc rx1161_curclass
    .local pmc rx1161_bstack
    .local pmc rx1161_cstack
    (rx1161_cur, rx1161_tgt, rx1161_pos, rx1161_curclass, rx1161_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1161_cur
    length rx1161_eos, rx1161_tgt
    eq $I19, 1, rx1161_restart3140
    gt rx1161_pos, rx1161_eos, rx1161_fail3141
    repr_get_attr_int $I11, self, rx1161_curclass, "$!from"
    ne $I11, -1, rxscan1162_done3147
    goto rxscan1162_scan3146
  rxscan1162_loop3145:
    inc rx1161_pos
    gt rx1161_pos, rx1161_eos, rx1161_fail3141
    repr_bind_attr_int rx1161_cur, rx1161_curclass, "$!from", rx1161_pos
  rxscan1162_scan3146:
    nqp_rxmark rx1161_bstack, rxscan1162_loop3145, rx1161_pos, 0
  rxscan1162_done3147:
    nqp_rxmark rx1161_bstack, rxcap1163_fail3149, rx1161_pos, 0
    add $I11, rx1161_pos, 2
    gt $I11, rx1161_eos, rx1161_fail3141
    substr $S10, rx1161_tgt, rx1161_pos, 2
    ne $S10, ucs4:"+^", rx1161_fail3141
    add rx1161_pos, 2
    nqp_rxpeek $I19, rx1161_bstack, rxcap1163_fail3149
    inc $I19
    set $I11, rx1161_bstack[$I19]
    repr_bind_attr_int rx1161_cur, rx1161_curclass, "$!pos", rx1161_pos
    $P11 = rx1161_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1161_pos)
    rx1161_cstack = rx1161_cur."!cursor_capture"($P11, "sym")
    goto rxcap1163_done3148
  rxcap1163_fail3149:
    goto rx1161_fail3141
  rxcap1163_done3148:
    repr_bind_attr_int rx1161_cur, rx1161_curclass, "$!pos", rx1161_pos
    $P11 = rx1161_cur."O"("%additive, :op<bitxor_i>")
    repr_get_attr_int $I11, $P11, rx1161_curclass, "$!pos"
    lt $I11, 0, rx1161_fail3141
    nqp_rxmark rx1161_bstack, rxsubrule1164_pass3150, -1, 0
  rxsubrule1164_pass3150:
    rx1161_cstack = rx1161_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1161_pos, $P11, rx1161_curclass, "$!pos"
    rx1161_cur."!cursor_pass"(rx1161_pos, "infix:sym<+^>", 'backtrack'=>1)
    .return (rx1161_cur)
  rx1161_restart3140:
    repr_get_attr_obj rx1161_cstack, rx1161_cur, rx1161_curclass, "$!cstack"
  rx1161_fail3141:
    unless rx1161_bstack, rx1161_done3139
    pop $I19, rx1161_bstack
    if_null rx1161_cstack, rx1161_cstack_done3144
    unless rx1161_cstack, rx1161_cstack_done3144
    dec $I19
    set $P11, rx1161_cstack[$I19]
  rx1161_cstack_done3144:
    pop rx1161_rep, rx1161_bstack
    pop rx1161_pos, rx1161_bstack
    pop $I19, rx1161_bstack
    lt rx1161_pos, -1, rx1161_done3139
    lt rx1161_pos, 0, rx1161_fail3141
    eq $I19, 0, rx1161_fail3141
    nqp_islist $I20, rx1161_cstack
    unless $I20, rx1161_jump3142
    elements $I18, rx1161_bstack
    le $I18, 0, rx1161_cut3143
    dec $I18
    set $I18, rx1161_bstack[$I18]
  rx1161_cut3143:
    assign rx1161_cstack, $I18
  rx1161_jump3142:
    jump $I19
  rx1161_done3139:
    rx1161_cur."!cursor_fail"()
    .return (rx1161_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~>" :subid("cuid_192_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1338
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1165_tgt
    .local int rx1165_pos
    .local int rx1165_off
    .local int rx1165_eos
    .local int rx1165_rep
    .local pmc rx1165_cur
    .local pmc rx1165_curclass
    .local pmc rx1165_bstack
    .local pmc rx1165_cstack
    (rx1165_cur, rx1165_tgt, rx1165_pos, rx1165_curclass, rx1165_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1165_cur
    length rx1165_eos, rx1165_tgt
    eq $I19, 1, rx1165_restart3153
    gt rx1165_pos, rx1165_eos, rx1165_fail3154
    repr_get_attr_int $I11, self, rx1165_curclass, "$!from"
    ne $I11, -1, rxscan1166_done3160
    goto rxscan1166_scan3159
  rxscan1166_loop3158:
    inc rx1165_pos
    gt rx1165_pos, rx1165_eos, rx1165_fail3154
    repr_bind_attr_int rx1165_cur, rx1165_curclass, "$!from", rx1165_pos
  rxscan1166_scan3159:
    nqp_rxmark rx1165_bstack, rxscan1166_loop3158, rx1165_pos, 0
  rxscan1166_done3160:
    nqp_rxmark rx1165_bstack, rxcap1167_fail3162, rx1165_pos, 0
    add $I11, rx1165_pos, 1
    gt $I11, rx1165_eos, rx1165_fail3154
    substr $S10, rx1165_tgt, rx1165_pos, 1
    ne $S10, ucs4:"~", rx1165_fail3154
    add rx1165_pos, 1
    nqp_rxpeek $I19, rx1165_bstack, rxcap1167_fail3162
    inc $I19
    set $I11, rx1165_bstack[$I19]
    repr_bind_attr_int rx1165_cur, rx1165_curclass, "$!pos", rx1165_pos
    $P11 = rx1165_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1165_pos)
    rx1165_cstack = rx1165_cur."!cursor_capture"($P11, "sym")
    goto rxcap1167_done3161
  rxcap1167_fail3162:
    goto rx1165_fail3154
  rxcap1167_done3161:
    repr_bind_attr_int rx1165_cur, rx1165_curclass, "$!pos", rx1165_pos
    $P11 = rx1165_cur."O"("%concatenation , :op<concat>")
    repr_get_attr_int $I11, $P11, rx1165_curclass, "$!pos"
    lt $I11, 0, rx1165_fail3154
    nqp_rxmark rx1165_bstack, rxsubrule1168_pass3163, -1, 0
  rxsubrule1168_pass3163:
    rx1165_cstack = rx1165_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1165_pos, $P11, rx1165_curclass, "$!pos"
    rx1165_cur."!cursor_pass"(rx1165_pos, "infix:sym<~>", 'backtrack'=>1)
    .return (rx1165_cur)
  rx1165_restart3153:
    repr_get_attr_obj rx1165_cstack, rx1165_cur, rx1165_curclass, "$!cstack"
  rx1165_fail3154:
    unless rx1165_bstack, rx1165_done3152
    pop $I19, rx1165_bstack
    if_null rx1165_cstack, rx1165_cstack_done3157
    unless rx1165_cstack, rx1165_cstack_done3157
    dec $I19
    set $P11, rx1165_cstack[$I19]
  rx1165_cstack_done3157:
    pop rx1165_rep, rx1165_bstack
    pop rx1165_pos, rx1165_bstack
    pop $I19, rx1165_bstack
    lt rx1165_pos, -1, rx1165_done3152
    lt rx1165_pos, 0, rx1165_fail3154
    eq $I19, 0, rx1165_fail3154
    nqp_islist $I20, rx1165_cstack
    unless $I20, rx1165_jump3155
    elements $I18, rx1165_bstack
    le $I18, 0, rx1165_cut3156
    dec $I18
    set $I18, rx1165_bstack[$I18]
  rx1165_cut3156:
    assign rx1165_cstack, $I18
  rx1165_jump3155:
    jump $I19
  rx1165_done3152:
    rx1165_cur."!cursor_fail"()
    .return (rx1165_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<==>" :subid("cuid_193_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1340
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1169_tgt
    .local int rx1169_pos
    .local int rx1169_off
    .local int rx1169_eos
    .local int rx1169_rep
    .local pmc rx1169_cur
    .local pmc rx1169_curclass
    .local pmc rx1169_bstack
    .local pmc rx1169_cstack
    (rx1169_cur, rx1169_tgt, rx1169_pos, rx1169_curclass, rx1169_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1169_cur
    length rx1169_eos, rx1169_tgt
    eq $I19, 1, rx1169_restart3166
    gt rx1169_pos, rx1169_eos, rx1169_fail3167
    repr_get_attr_int $I11, self, rx1169_curclass, "$!from"
    ne $I11, -1, rxscan1170_done3173
    goto rxscan1170_scan3172
  rxscan1170_loop3171:
    inc rx1169_pos
    gt rx1169_pos, rx1169_eos, rx1169_fail3167
    repr_bind_attr_int rx1169_cur, rx1169_curclass, "$!from", rx1169_pos
  rxscan1170_scan3172:
    nqp_rxmark rx1169_bstack, rxscan1170_loop3171, rx1169_pos, 0
  rxscan1170_done3173:
    nqp_rxmark rx1169_bstack, rxcap1171_fail3175, rx1169_pos, 0
    add $I11, rx1169_pos, 2
    gt $I11, rx1169_eos, rx1169_fail3167
    substr $S10, rx1169_tgt, rx1169_pos, 2
    ne $S10, ucs4:"==", rx1169_fail3167
    add rx1169_pos, 2
    nqp_rxpeek $I19, rx1169_bstack, rxcap1171_fail3175
    inc $I19
    set $I11, rx1169_bstack[$I19]
    repr_bind_attr_int rx1169_cur, rx1169_curclass, "$!pos", rx1169_pos
    $P11 = rx1169_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1169_pos)
    rx1169_cstack = rx1169_cur."!cursor_capture"($P11, "sym")
    goto rxcap1171_done3174
  rxcap1171_fail3175:
    goto rx1169_fail3167
  rxcap1171_done3174:
    repr_bind_attr_int rx1169_cur, rx1169_curclass, "$!pos", rx1169_pos
    $P11 = rx1169_cur."O"("%relational, :op<iseq_n>")
    repr_get_attr_int $I11, $P11, rx1169_curclass, "$!pos"
    lt $I11, 0, rx1169_fail3167
    nqp_rxmark rx1169_bstack, rxsubrule1172_pass3176, -1, 0
  rxsubrule1172_pass3176:
    rx1169_cstack = rx1169_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1169_pos, $P11, rx1169_curclass, "$!pos"
    rx1169_cur."!cursor_pass"(rx1169_pos, "infix:sym<==>", 'backtrack'=>1)
    .return (rx1169_cur)
  rx1169_restart3166:
    repr_get_attr_obj rx1169_cstack, rx1169_cur, rx1169_curclass, "$!cstack"
  rx1169_fail3167:
    unless rx1169_bstack, rx1169_done3165
    pop $I19, rx1169_bstack
    if_null rx1169_cstack, rx1169_cstack_done3170
    unless rx1169_cstack, rx1169_cstack_done3170
    dec $I19
    set $P11, rx1169_cstack[$I19]
  rx1169_cstack_done3170:
    pop rx1169_rep, rx1169_bstack
    pop rx1169_pos, rx1169_bstack
    pop $I19, rx1169_bstack
    lt rx1169_pos, -1, rx1169_done3165
    lt rx1169_pos, 0, rx1169_fail3167
    eq $I19, 0, rx1169_fail3167
    nqp_islist $I20, rx1169_cstack
    unless $I20, rx1169_jump3168
    elements $I18, rx1169_bstack
    le $I18, 0, rx1169_cut3169
    dec $I18
    set $I18, rx1169_bstack[$I18]
  rx1169_cut3169:
    assign rx1169_cstack, $I18
  rx1169_jump3168:
    jump $I19
  rx1169_done3165:
    rx1169_cur."!cursor_fail"()
    .return (rx1169_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<!=>" :subid("cuid_194_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1341
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1173_tgt
    .local int rx1173_pos
    .local int rx1173_off
    .local int rx1173_eos
    .local int rx1173_rep
    .local pmc rx1173_cur
    .local pmc rx1173_curclass
    .local pmc rx1173_bstack
    .local pmc rx1173_cstack
    (rx1173_cur, rx1173_tgt, rx1173_pos, rx1173_curclass, rx1173_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1173_cur
    length rx1173_eos, rx1173_tgt
    eq $I19, 1, rx1173_restart3179
    gt rx1173_pos, rx1173_eos, rx1173_fail3180
    repr_get_attr_int $I11, self, rx1173_curclass, "$!from"
    ne $I11, -1, rxscan1174_done3186
    goto rxscan1174_scan3185
  rxscan1174_loop3184:
    inc rx1173_pos
    gt rx1173_pos, rx1173_eos, rx1173_fail3180
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!from", rx1173_pos
  rxscan1174_scan3185:
    nqp_rxmark rx1173_bstack, rxscan1174_loop3184, rx1173_pos, 0
  rxscan1174_done3186:
    nqp_rxmark rx1173_bstack, rxcap1175_fail3188, rx1173_pos, 0
    add $I11, rx1173_pos, 2
    gt $I11, rx1173_eos, rx1173_fail3180
    substr $S10, rx1173_tgt, rx1173_pos, 2
    ne $S10, ucs4:"!=", rx1173_fail3180
    add rx1173_pos, 2
    nqp_rxpeek $I19, rx1173_bstack, rxcap1175_fail3188
    inc $I19
    set $I11, rx1173_bstack[$I19]
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!pos", rx1173_pos
    $P11 = rx1173_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1173_pos)
    rx1173_cstack = rx1173_cur."!cursor_capture"($P11, "sym")
    goto rxcap1175_done3187
  rxcap1175_fail3188:
    goto rx1173_fail3180
  rxcap1175_done3187:
    repr_bind_attr_int rx1173_cur, rx1173_curclass, "$!pos", rx1173_pos
    $P11 = rx1173_cur."O"("%relational, :op<isne_n>")
    repr_get_attr_int $I11, $P11, rx1173_curclass, "$!pos"
    lt $I11, 0, rx1173_fail3180
    nqp_rxmark rx1173_bstack, rxsubrule1176_pass3189, -1, 0
  rxsubrule1176_pass3189:
    rx1173_cstack = rx1173_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1173_pos, $P11, rx1173_curclass, "$!pos"
    rx1173_cur."!cursor_pass"(rx1173_pos, "infix:sym<!=>", 'backtrack'=>1)
    .return (rx1173_cur)
  rx1173_restart3179:
    repr_get_attr_obj rx1173_cstack, rx1173_cur, rx1173_curclass, "$!cstack"
  rx1173_fail3180:
    unless rx1173_bstack, rx1173_done3178
    pop $I19, rx1173_bstack
    if_null rx1173_cstack, rx1173_cstack_done3183
    unless rx1173_cstack, rx1173_cstack_done3183
    dec $I19
    set $P11, rx1173_cstack[$I19]
  rx1173_cstack_done3183:
    pop rx1173_rep, rx1173_bstack
    pop rx1173_pos, rx1173_bstack
    pop $I19, rx1173_bstack
    lt rx1173_pos, -1, rx1173_done3178
    lt rx1173_pos, 0, rx1173_fail3180
    eq $I19, 0, rx1173_fail3180
    nqp_islist $I20, rx1173_cstack
    unless $I20, rx1173_jump3181
    elements $I18, rx1173_bstack
    le $I18, 0, rx1173_cut3182
    dec $I18
    set $I18, rx1173_bstack[$I18]
  rx1173_cut3182:
    assign rx1173_cstack, $I18
  rx1173_jump3181:
    jump $I19
  rx1173_done3178:
    rx1173_cur."!cursor_fail"()
    .return (rx1173_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<=>" :subid("cuid_195_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1342
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1177_tgt
    .local int rx1177_pos
    .local int rx1177_off
    .local int rx1177_eos
    .local int rx1177_rep
    .local pmc rx1177_cur
    .local pmc rx1177_curclass
    .local pmc rx1177_bstack
    .local pmc rx1177_cstack
    (rx1177_cur, rx1177_tgt, rx1177_pos, rx1177_curclass, rx1177_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1177_cur
    length rx1177_eos, rx1177_tgt
    eq $I19, 1, rx1177_restart3192
    gt rx1177_pos, rx1177_eos, rx1177_fail3193
    repr_get_attr_int $I11, self, rx1177_curclass, "$!from"
    ne $I11, -1, rxscan1178_done3199
    goto rxscan1178_scan3198
  rxscan1178_loop3197:
    inc rx1177_pos
    gt rx1177_pos, rx1177_eos, rx1177_fail3193
    repr_bind_attr_int rx1177_cur, rx1177_curclass, "$!from", rx1177_pos
  rxscan1178_scan3198:
    nqp_rxmark rx1177_bstack, rxscan1178_loop3197, rx1177_pos, 0
  rxscan1178_done3199:
    nqp_rxmark rx1177_bstack, rxcap1179_fail3201, rx1177_pos, 0
    add $I11, rx1177_pos, 2
    gt $I11, rx1177_eos, rx1177_fail3193
    substr $S10, rx1177_tgt, rx1177_pos, 2
    ne $S10, ucs4:"<=", rx1177_fail3193
    add rx1177_pos, 2
    nqp_rxpeek $I19, rx1177_bstack, rxcap1179_fail3201
    inc $I19
    set $I11, rx1177_bstack[$I19]
    repr_bind_attr_int rx1177_cur, rx1177_curclass, "$!pos", rx1177_pos
    $P11 = rx1177_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1177_pos)
    rx1177_cstack = rx1177_cur."!cursor_capture"($P11, "sym")
    goto rxcap1179_done3200
  rxcap1179_fail3201:
    goto rx1177_fail3193
  rxcap1179_done3200:
    repr_bind_attr_int rx1177_cur, rx1177_curclass, "$!pos", rx1177_pos
    $P11 = rx1177_cur."O"("%relational, :op<isle_n>")
    repr_get_attr_int $I11, $P11, rx1177_curclass, "$!pos"
    lt $I11, 0, rx1177_fail3193
    nqp_rxmark rx1177_bstack, rxsubrule1180_pass3202, -1, 0
  rxsubrule1180_pass3202:
    rx1177_cstack = rx1177_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1177_pos, $P11, rx1177_curclass, "$!pos"
    rx1177_cur."!cursor_pass"(rx1177_pos, "infix:sym<<=>", 'backtrack'=>1)
    .return (rx1177_cur)
  rx1177_restart3192:
    repr_get_attr_obj rx1177_cstack, rx1177_cur, rx1177_curclass, "$!cstack"
  rx1177_fail3193:
    unless rx1177_bstack, rx1177_done3191
    pop $I19, rx1177_bstack
    if_null rx1177_cstack, rx1177_cstack_done3196
    unless rx1177_cstack, rx1177_cstack_done3196
    dec $I19
    set $P11, rx1177_cstack[$I19]
  rx1177_cstack_done3196:
    pop rx1177_rep, rx1177_bstack
    pop rx1177_pos, rx1177_bstack
    pop $I19, rx1177_bstack
    lt rx1177_pos, -1, rx1177_done3191
    lt rx1177_pos, 0, rx1177_fail3193
    eq $I19, 0, rx1177_fail3193
    nqp_islist $I20, rx1177_cstack
    unless $I20, rx1177_jump3194
    elements $I18, rx1177_bstack
    le $I18, 0, rx1177_cut3195
    dec $I18
    set $I18, rx1177_bstack[$I18]
  rx1177_cut3195:
    assign rx1177_cstack, $I18
  rx1177_jump3194:
    jump $I19
  rx1177_done3191:
    rx1177_cur."!cursor_fail"()
    .return (rx1177_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>=>" :subid("cuid_196_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1343
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1181_tgt
    .local int rx1181_pos
    .local int rx1181_off
    .local int rx1181_eos
    .local int rx1181_rep
    .local pmc rx1181_cur
    .local pmc rx1181_curclass
    .local pmc rx1181_bstack
    .local pmc rx1181_cstack
    (rx1181_cur, rx1181_tgt, rx1181_pos, rx1181_curclass, rx1181_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1181_cur
    length rx1181_eos, rx1181_tgt
    eq $I19, 1, rx1181_restart3205
    gt rx1181_pos, rx1181_eos, rx1181_fail3206
    repr_get_attr_int $I11, self, rx1181_curclass, "$!from"
    ne $I11, -1, rxscan1182_done3212
    goto rxscan1182_scan3211
  rxscan1182_loop3210:
    inc rx1181_pos
    gt rx1181_pos, rx1181_eos, rx1181_fail3206
    repr_bind_attr_int rx1181_cur, rx1181_curclass, "$!from", rx1181_pos
  rxscan1182_scan3211:
    nqp_rxmark rx1181_bstack, rxscan1182_loop3210, rx1181_pos, 0
  rxscan1182_done3212:
    nqp_rxmark rx1181_bstack, rxcap1183_fail3214, rx1181_pos, 0
    add $I11, rx1181_pos, 2
    gt $I11, rx1181_eos, rx1181_fail3206
    substr $S10, rx1181_tgt, rx1181_pos, 2
    ne $S10, ucs4:">=", rx1181_fail3206
    add rx1181_pos, 2
    nqp_rxpeek $I19, rx1181_bstack, rxcap1183_fail3214
    inc $I19
    set $I11, rx1181_bstack[$I19]
    repr_bind_attr_int rx1181_cur, rx1181_curclass, "$!pos", rx1181_pos
    $P11 = rx1181_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1181_pos)
    rx1181_cstack = rx1181_cur."!cursor_capture"($P11, "sym")
    goto rxcap1183_done3213
  rxcap1183_fail3214:
    goto rx1181_fail3206
  rxcap1183_done3213:
    repr_bind_attr_int rx1181_cur, rx1181_curclass, "$!pos", rx1181_pos
    $P11 = rx1181_cur."O"("%relational, :op<isge_n>")
    repr_get_attr_int $I11, $P11, rx1181_curclass, "$!pos"
    lt $I11, 0, rx1181_fail3206
    nqp_rxmark rx1181_bstack, rxsubrule1184_pass3215, -1, 0
  rxsubrule1184_pass3215:
    rx1181_cstack = rx1181_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1181_pos, $P11, rx1181_curclass, "$!pos"
    rx1181_cur."!cursor_pass"(rx1181_pos, "infix:sym<>=>", 'backtrack'=>1)
    .return (rx1181_cur)
  rx1181_restart3205:
    repr_get_attr_obj rx1181_cstack, rx1181_cur, rx1181_curclass, "$!cstack"
  rx1181_fail3206:
    unless rx1181_bstack, rx1181_done3204
    pop $I19, rx1181_bstack
    if_null rx1181_cstack, rx1181_cstack_done3209
    unless rx1181_cstack, rx1181_cstack_done3209
    dec $I19
    set $P11, rx1181_cstack[$I19]
  rx1181_cstack_done3209:
    pop rx1181_rep, rx1181_bstack
    pop rx1181_pos, rx1181_bstack
    pop $I19, rx1181_bstack
    lt rx1181_pos, -1, rx1181_done3204
    lt rx1181_pos, 0, rx1181_fail3206
    eq $I19, 0, rx1181_fail3206
    nqp_islist $I20, rx1181_cstack
    unless $I20, rx1181_jump3207
    elements $I18, rx1181_bstack
    le $I18, 0, rx1181_cut3208
    dec $I18
    set $I18, rx1181_bstack[$I18]
  rx1181_cut3208:
    assign rx1181_cstack, $I18
  rx1181_jump3207:
    jump $I19
  rx1181_done3204:
    rx1181_cur."!cursor_fail"()
    .return (rx1181_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<>" :subid("cuid_197_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1344
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1185_tgt
    .local int rx1185_pos
    .local int rx1185_off
    .local int rx1185_eos
    .local int rx1185_rep
    .local pmc rx1185_cur
    .local pmc rx1185_curclass
    .local pmc rx1185_bstack
    .local pmc rx1185_cstack
    (rx1185_cur, rx1185_tgt, rx1185_pos, rx1185_curclass, rx1185_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1185_cur
    length rx1185_eos, rx1185_tgt
    eq $I19, 1, rx1185_restart3218
    gt rx1185_pos, rx1185_eos, rx1185_fail3219
    repr_get_attr_int $I11, self, rx1185_curclass, "$!from"
    ne $I11, -1, rxscan1186_done3225
    goto rxscan1186_scan3224
  rxscan1186_loop3223:
    inc rx1185_pos
    gt rx1185_pos, rx1185_eos, rx1185_fail3219
    repr_bind_attr_int rx1185_cur, rx1185_curclass, "$!from", rx1185_pos
  rxscan1186_scan3224:
    nqp_rxmark rx1185_bstack, rxscan1186_loop3223, rx1185_pos, 0
  rxscan1186_done3225:
    nqp_rxmark rx1185_bstack, rxcap1187_fail3227, rx1185_pos, 0
    add $I11, rx1185_pos, 1
    gt $I11, rx1185_eos, rx1185_fail3219
    substr $S10, rx1185_tgt, rx1185_pos, 1
    ne $S10, ucs4:"<", rx1185_fail3219
    add rx1185_pos, 1
    nqp_rxpeek $I19, rx1185_bstack, rxcap1187_fail3227
    inc $I19
    set $I11, rx1185_bstack[$I19]
    repr_bind_attr_int rx1185_cur, rx1185_curclass, "$!pos", rx1185_pos
    $P11 = rx1185_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1185_pos)
    rx1185_cstack = rx1185_cur."!cursor_capture"($P11, "sym")
    goto rxcap1187_done3226
  rxcap1187_fail3227:
    goto rx1185_fail3219
  rxcap1187_done3226:
    repr_bind_attr_int rx1185_cur, rx1185_curclass, "$!pos", rx1185_pos
    $P11 = rx1185_cur."O"("%relational, :op<islt_n>")
    repr_get_attr_int $I11, $P11, rx1185_curclass, "$!pos"
    lt $I11, 0, rx1185_fail3219
    nqp_rxmark rx1185_bstack, rxsubrule1188_pass3228, -1, 0
  rxsubrule1188_pass3228:
    rx1185_cstack = rx1185_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1185_pos, $P11, rx1185_curclass, "$!pos"
    rx1185_cur."!cursor_pass"(rx1185_pos, "infix:sym<<>", 'backtrack'=>1)
    .return (rx1185_cur)
  rx1185_restart3218:
    repr_get_attr_obj rx1185_cstack, rx1185_cur, rx1185_curclass, "$!cstack"
  rx1185_fail3219:
    unless rx1185_bstack, rx1185_done3217
    pop $I19, rx1185_bstack
    if_null rx1185_cstack, rx1185_cstack_done3222
    unless rx1185_cstack, rx1185_cstack_done3222
    dec $I19
    set $P11, rx1185_cstack[$I19]
  rx1185_cstack_done3222:
    pop rx1185_rep, rx1185_bstack
    pop rx1185_pos, rx1185_bstack
    pop $I19, rx1185_bstack
    lt rx1185_pos, -1, rx1185_done3217
    lt rx1185_pos, 0, rx1185_fail3219
    eq $I19, 0, rx1185_fail3219
    nqp_islist $I20, rx1185_cstack
    unless $I20, rx1185_jump3220
    elements $I18, rx1185_bstack
    le $I18, 0, rx1185_cut3221
    dec $I18
    set $I18, rx1185_bstack[$I18]
  rx1185_cut3221:
    assign rx1185_cstack, $I18
  rx1185_jump3220:
    jump $I19
  rx1185_done3217:
    rx1185_cur."!cursor_fail"()
    .return (rx1185_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>>" :subid("cuid_198_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1345
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1189_tgt
    .local int rx1189_pos
    .local int rx1189_off
    .local int rx1189_eos
    .local int rx1189_rep
    .local pmc rx1189_cur
    .local pmc rx1189_curclass
    .local pmc rx1189_bstack
    .local pmc rx1189_cstack
    (rx1189_cur, rx1189_tgt, rx1189_pos, rx1189_curclass, rx1189_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1189_cur
    length rx1189_eos, rx1189_tgt
    eq $I19, 1, rx1189_restart3231
    gt rx1189_pos, rx1189_eos, rx1189_fail3232
    repr_get_attr_int $I11, self, rx1189_curclass, "$!from"
    ne $I11, -1, rxscan1190_done3238
    goto rxscan1190_scan3237
  rxscan1190_loop3236:
    inc rx1189_pos
    gt rx1189_pos, rx1189_eos, rx1189_fail3232
    repr_bind_attr_int rx1189_cur, rx1189_curclass, "$!from", rx1189_pos
  rxscan1190_scan3237:
    nqp_rxmark rx1189_bstack, rxscan1190_loop3236, rx1189_pos, 0
  rxscan1190_done3238:
    nqp_rxmark rx1189_bstack, rxcap1191_fail3240, rx1189_pos, 0
    add $I11, rx1189_pos, 1
    gt $I11, rx1189_eos, rx1189_fail3232
    substr $S10, rx1189_tgt, rx1189_pos, 1
    ne $S10, ucs4:">", rx1189_fail3232
    add rx1189_pos, 1
    nqp_rxpeek $I19, rx1189_bstack, rxcap1191_fail3240
    inc $I19
    set $I11, rx1189_bstack[$I19]
    repr_bind_attr_int rx1189_cur, rx1189_curclass, "$!pos", rx1189_pos
    $P11 = rx1189_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1189_pos)
    rx1189_cstack = rx1189_cur."!cursor_capture"($P11, "sym")
    goto rxcap1191_done3239
  rxcap1191_fail3240:
    goto rx1189_fail3232
  rxcap1191_done3239:
    repr_bind_attr_int rx1189_cur, rx1189_curclass, "$!pos", rx1189_pos
    $P11 = rx1189_cur."O"("%relational, :op<isgt_n>")
    repr_get_attr_int $I11, $P11, rx1189_curclass, "$!pos"
    lt $I11, 0, rx1189_fail3232
    nqp_rxmark rx1189_bstack, rxsubrule1192_pass3241, -1, 0
  rxsubrule1192_pass3241:
    rx1189_cstack = rx1189_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1189_pos, $P11, rx1189_curclass, "$!pos"
    rx1189_cur."!cursor_pass"(rx1189_pos, "infix:sym<>>", 'backtrack'=>1)
    .return (rx1189_cur)
  rx1189_restart3231:
    repr_get_attr_obj rx1189_cstack, rx1189_cur, rx1189_curclass, "$!cstack"
  rx1189_fail3232:
    unless rx1189_bstack, rx1189_done3230
    pop $I19, rx1189_bstack
    if_null rx1189_cstack, rx1189_cstack_done3235
    unless rx1189_cstack, rx1189_cstack_done3235
    dec $I19
    set $P11, rx1189_cstack[$I19]
  rx1189_cstack_done3235:
    pop rx1189_rep, rx1189_bstack
    pop rx1189_pos, rx1189_bstack
    pop $I19, rx1189_bstack
    lt rx1189_pos, -1, rx1189_done3230
    lt rx1189_pos, 0, rx1189_fail3232
    eq $I19, 0, rx1189_fail3232
    nqp_islist $I20, rx1189_cstack
    unless $I20, rx1189_jump3233
    elements $I18, rx1189_bstack
    le $I18, 0, rx1189_cut3234
    dec $I18
    set $I18, rx1189_bstack[$I18]
  rx1189_cut3234:
    assign rx1189_cstack, $I18
  rx1189_jump3233:
    jump $I19
  rx1189_done3230:
    rx1189_cur."!cursor_fail"()
    .return (rx1189_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<eq>" :subid("cuid_199_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1346
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1193_tgt
    .local int rx1193_pos
    .local int rx1193_off
    .local int rx1193_eos
    .local int rx1193_rep
    .local pmc rx1193_cur
    .local pmc rx1193_curclass
    .local pmc rx1193_bstack
    .local pmc rx1193_cstack
    (rx1193_cur, rx1193_tgt, rx1193_pos, rx1193_curclass, rx1193_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1193_cur
    length rx1193_eos, rx1193_tgt
    eq $I19, 1, rx1193_restart3244
    gt rx1193_pos, rx1193_eos, rx1193_fail3245
    repr_get_attr_int $I11, self, rx1193_curclass, "$!from"
    ne $I11, -1, rxscan1194_done3251
    goto rxscan1194_scan3250
  rxscan1194_loop3249:
    inc rx1193_pos
    gt rx1193_pos, rx1193_eos, rx1193_fail3245
    repr_bind_attr_int rx1193_cur, rx1193_curclass, "$!from", rx1193_pos
  rxscan1194_scan3250:
    nqp_rxmark rx1193_bstack, rxscan1194_loop3249, rx1193_pos, 0
  rxscan1194_done3251:
    nqp_rxmark rx1193_bstack, rxcap1195_fail3253, rx1193_pos, 0
    add $I11, rx1193_pos, 2
    gt $I11, rx1193_eos, rx1193_fail3245
    substr $S10, rx1193_tgt, rx1193_pos, 2
    ne $S10, ucs4:"eq", rx1193_fail3245
    add rx1193_pos, 2
    nqp_rxpeek $I19, rx1193_bstack, rxcap1195_fail3253
    inc $I19
    set $I11, rx1193_bstack[$I19]
    repr_bind_attr_int rx1193_cur, rx1193_curclass, "$!pos", rx1193_pos
    $P11 = rx1193_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1193_pos)
    rx1193_cstack = rx1193_cur."!cursor_capture"($P11, "sym")
    goto rxcap1195_done3252
  rxcap1195_fail3253:
    goto rx1193_fail3245
  rxcap1195_done3252:
    repr_bind_attr_int rx1193_cur, rx1193_curclass, "$!pos", rx1193_pos
    $P11 = rx1193_cur."O"("%relational, :op<iseq_s>")
    repr_get_attr_int $I11, $P11, rx1193_curclass, "$!pos"
    lt $I11, 0, rx1193_fail3245
    nqp_rxmark rx1193_bstack, rxsubrule1196_pass3254, -1, 0
  rxsubrule1196_pass3254:
    rx1193_cstack = rx1193_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1193_pos, $P11, rx1193_curclass, "$!pos"
    rx1193_cur."!cursor_pass"(rx1193_pos, "infix:sym<eq>", 'backtrack'=>1)
    .return (rx1193_cur)
  rx1193_restart3244:
    repr_get_attr_obj rx1193_cstack, rx1193_cur, rx1193_curclass, "$!cstack"
  rx1193_fail3245:
    unless rx1193_bstack, rx1193_done3243
    pop $I19, rx1193_bstack
    if_null rx1193_cstack, rx1193_cstack_done3248
    unless rx1193_cstack, rx1193_cstack_done3248
    dec $I19
    set $P11, rx1193_cstack[$I19]
  rx1193_cstack_done3248:
    pop rx1193_rep, rx1193_bstack
    pop rx1193_pos, rx1193_bstack
    pop $I19, rx1193_bstack
    lt rx1193_pos, -1, rx1193_done3243
    lt rx1193_pos, 0, rx1193_fail3245
    eq $I19, 0, rx1193_fail3245
    nqp_islist $I20, rx1193_cstack
    unless $I20, rx1193_jump3246
    elements $I18, rx1193_bstack
    le $I18, 0, rx1193_cut3247
    dec $I18
    set $I18, rx1193_bstack[$I18]
  rx1193_cut3247:
    assign rx1193_cstack, $I18
  rx1193_jump3246:
    jump $I19
  rx1193_done3243:
    rx1193_cur."!cursor_fail"()
    .return (rx1193_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ne>" :subid("cuid_200_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1347
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1197_tgt
    .local int rx1197_pos
    .local int rx1197_off
    .local int rx1197_eos
    .local int rx1197_rep
    .local pmc rx1197_cur
    .local pmc rx1197_curclass
    .local pmc rx1197_bstack
    .local pmc rx1197_cstack
    (rx1197_cur, rx1197_tgt, rx1197_pos, rx1197_curclass, rx1197_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1197_cur
    length rx1197_eos, rx1197_tgt
    eq $I19, 1, rx1197_restart3257
    gt rx1197_pos, rx1197_eos, rx1197_fail3258
    repr_get_attr_int $I11, self, rx1197_curclass, "$!from"
    ne $I11, -1, rxscan1198_done3264
    goto rxscan1198_scan3263
  rxscan1198_loop3262:
    inc rx1197_pos
    gt rx1197_pos, rx1197_eos, rx1197_fail3258
    repr_bind_attr_int rx1197_cur, rx1197_curclass, "$!from", rx1197_pos
  rxscan1198_scan3263:
    nqp_rxmark rx1197_bstack, rxscan1198_loop3262, rx1197_pos, 0
  rxscan1198_done3264:
    nqp_rxmark rx1197_bstack, rxcap1199_fail3266, rx1197_pos, 0
    add $I11, rx1197_pos, 2
    gt $I11, rx1197_eos, rx1197_fail3258
    substr $S10, rx1197_tgt, rx1197_pos, 2
    ne $S10, ucs4:"ne", rx1197_fail3258
    add rx1197_pos, 2
    nqp_rxpeek $I19, rx1197_bstack, rxcap1199_fail3266
    inc $I19
    set $I11, rx1197_bstack[$I19]
    repr_bind_attr_int rx1197_cur, rx1197_curclass, "$!pos", rx1197_pos
    $P11 = rx1197_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1197_pos)
    rx1197_cstack = rx1197_cur."!cursor_capture"($P11, "sym")
    goto rxcap1199_done3265
  rxcap1199_fail3266:
    goto rx1197_fail3258
  rxcap1199_done3265:
    repr_bind_attr_int rx1197_cur, rx1197_curclass, "$!pos", rx1197_pos
    $P11 = rx1197_cur."O"("%relational, :op<isne_s>")
    repr_get_attr_int $I11, $P11, rx1197_curclass, "$!pos"
    lt $I11, 0, rx1197_fail3258
    nqp_rxmark rx1197_bstack, rxsubrule1200_pass3267, -1, 0
  rxsubrule1200_pass3267:
    rx1197_cstack = rx1197_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1197_pos, $P11, rx1197_curclass, "$!pos"
    rx1197_cur."!cursor_pass"(rx1197_pos, "infix:sym<ne>", 'backtrack'=>1)
    .return (rx1197_cur)
  rx1197_restart3257:
    repr_get_attr_obj rx1197_cstack, rx1197_cur, rx1197_curclass, "$!cstack"
  rx1197_fail3258:
    unless rx1197_bstack, rx1197_done3256
    pop $I19, rx1197_bstack
    if_null rx1197_cstack, rx1197_cstack_done3261
    unless rx1197_cstack, rx1197_cstack_done3261
    dec $I19
    set $P11, rx1197_cstack[$I19]
  rx1197_cstack_done3261:
    pop rx1197_rep, rx1197_bstack
    pop rx1197_pos, rx1197_bstack
    pop $I19, rx1197_bstack
    lt rx1197_pos, -1, rx1197_done3256
    lt rx1197_pos, 0, rx1197_fail3258
    eq $I19, 0, rx1197_fail3258
    nqp_islist $I20, rx1197_cstack
    unless $I20, rx1197_jump3259
    elements $I18, rx1197_bstack
    le $I18, 0, rx1197_cut3260
    dec $I18
    set $I18, rx1197_bstack[$I18]
  rx1197_cut3260:
    assign rx1197_cstack, $I18
  rx1197_jump3259:
    jump $I19
  rx1197_done3256:
    rx1197_cur."!cursor_fail"()
    .return (rx1197_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<le>" :subid("cuid_201_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1348
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1201_tgt
    .local int rx1201_pos
    .local int rx1201_off
    .local int rx1201_eos
    .local int rx1201_rep
    .local pmc rx1201_cur
    .local pmc rx1201_curclass
    .local pmc rx1201_bstack
    .local pmc rx1201_cstack
    (rx1201_cur, rx1201_tgt, rx1201_pos, rx1201_curclass, rx1201_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1201_cur
    length rx1201_eos, rx1201_tgt
    eq $I19, 1, rx1201_restart3270
    gt rx1201_pos, rx1201_eos, rx1201_fail3271
    repr_get_attr_int $I11, self, rx1201_curclass, "$!from"
    ne $I11, -1, rxscan1202_done3277
    goto rxscan1202_scan3276
  rxscan1202_loop3275:
    inc rx1201_pos
    gt rx1201_pos, rx1201_eos, rx1201_fail3271
    repr_bind_attr_int rx1201_cur, rx1201_curclass, "$!from", rx1201_pos
  rxscan1202_scan3276:
    nqp_rxmark rx1201_bstack, rxscan1202_loop3275, rx1201_pos, 0
  rxscan1202_done3277:
    nqp_rxmark rx1201_bstack, rxcap1203_fail3279, rx1201_pos, 0
    add $I11, rx1201_pos, 2
    gt $I11, rx1201_eos, rx1201_fail3271
    substr $S10, rx1201_tgt, rx1201_pos, 2
    ne $S10, ucs4:"le", rx1201_fail3271
    add rx1201_pos, 2
    nqp_rxpeek $I19, rx1201_bstack, rxcap1203_fail3279
    inc $I19
    set $I11, rx1201_bstack[$I19]
    repr_bind_attr_int rx1201_cur, rx1201_curclass, "$!pos", rx1201_pos
    $P11 = rx1201_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1201_pos)
    rx1201_cstack = rx1201_cur."!cursor_capture"($P11, "sym")
    goto rxcap1203_done3278
  rxcap1203_fail3279:
    goto rx1201_fail3271
  rxcap1203_done3278:
    repr_bind_attr_int rx1201_cur, rx1201_curclass, "$!pos", rx1201_pos
    $P11 = rx1201_cur."O"("%relational, :op<isle_s>")
    repr_get_attr_int $I11, $P11, rx1201_curclass, "$!pos"
    lt $I11, 0, rx1201_fail3271
    nqp_rxmark rx1201_bstack, rxsubrule1204_pass3280, -1, 0
  rxsubrule1204_pass3280:
    rx1201_cstack = rx1201_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1201_pos, $P11, rx1201_curclass, "$!pos"
    rx1201_cur."!cursor_pass"(rx1201_pos, "infix:sym<le>", 'backtrack'=>1)
    .return (rx1201_cur)
  rx1201_restart3270:
    repr_get_attr_obj rx1201_cstack, rx1201_cur, rx1201_curclass, "$!cstack"
  rx1201_fail3271:
    unless rx1201_bstack, rx1201_done3269
    pop $I19, rx1201_bstack
    if_null rx1201_cstack, rx1201_cstack_done3274
    unless rx1201_cstack, rx1201_cstack_done3274
    dec $I19
    set $P11, rx1201_cstack[$I19]
  rx1201_cstack_done3274:
    pop rx1201_rep, rx1201_bstack
    pop rx1201_pos, rx1201_bstack
    pop $I19, rx1201_bstack
    lt rx1201_pos, -1, rx1201_done3269
    lt rx1201_pos, 0, rx1201_fail3271
    eq $I19, 0, rx1201_fail3271
    nqp_islist $I20, rx1201_cstack
    unless $I20, rx1201_jump3272
    elements $I18, rx1201_bstack
    le $I18, 0, rx1201_cut3273
    dec $I18
    set $I18, rx1201_bstack[$I18]
  rx1201_cut3273:
    assign rx1201_cstack, $I18
  rx1201_jump3272:
    jump $I19
  rx1201_done3269:
    rx1201_cur."!cursor_fail"()
    .return (rx1201_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ge>" :subid("cuid_202_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1349
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1205_tgt
    .local int rx1205_pos
    .local int rx1205_off
    .local int rx1205_eos
    .local int rx1205_rep
    .local pmc rx1205_cur
    .local pmc rx1205_curclass
    .local pmc rx1205_bstack
    .local pmc rx1205_cstack
    (rx1205_cur, rx1205_tgt, rx1205_pos, rx1205_curclass, rx1205_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1205_cur
    length rx1205_eos, rx1205_tgt
    eq $I19, 1, rx1205_restart3283
    gt rx1205_pos, rx1205_eos, rx1205_fail3284
    repr_get_attr_int $I11, self, rx1205_curclass, "$!from"
    ne $I11, -1, rxscan1206_done3290
    goto rxscan1206_scan3289
  rxscan1206_loop3288:
    inc rx1205_pos
    gt rx1205_pos, rx1205_eos, rx1205_fail3284
    repr_bind_attr_int rx1205_cur, rx1205_curclass, "$!from", rx1205_pos
  rxscan1206_scan3289:
    nqp_rxmark rx1205_bstack, rxscan1206_loop3288, rx1205_pos, 0
  rxscan1206_done3290:
    nqp_rxmark rx1205_bstack, rxcap1207_fail3292, rx1205_pos, 0
    add $I11, rx1205_pos, 2
    gt $I11, rx1205_eos, rx1205_fail3284
    substr $S10, rx1205_tgt, rx1205_pos, 2
    ne $S10, ucs4:"ge", rx1205_fail3284
    add rx1205_pos, 2
    nqp_rxpeek $I19, rx1205_bstack, rxcap1207_fail3292
    inc $I19
    set $I11, rx1205_bstack[$I19]
    repr_bind_attr_int rx1205_cur, rx1205_curclass, "$!pos", rx1205_pos
    $P11 = rx1205_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1205_pos)
    rx1205_cstack = rx1205_cur."!cursor_capture"($P11, "sym")
    goto rxcap1207_done3291
  rxcap1207_fail3292:
    goto rx1205_fail3284
  rxcap1207_done3291:
    repr_bind_attr_int rx1205_cur, rx1205_curclass, "$!pos", rx1205_pos
    $P11 = rx1205_cur."O"("%relational, :op<isge_s>")
    repr_get_attr_int $I11, $P11, rx1205_curclass, "$!pos"
    lt $I11, 0, rx1205_fail3284
    nqp_rxmark rx1205_bstack, rxsubrule1208_pass3293, -1, 0
  rxsubrule1208_pass3293:
    rx1205_cstack = rx1205_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1205_pos, $P11, rx1205_curclass, "$!pos"
    rx1205_cur."!cursor_pass"(rx1205_pos, "infix:sym<ge>", 'backtrack'=>1)
    .return (rx1205_cur)
  rx1205_restart3283:
    repr_get_attr_obj rx1205_cstack, rx1205_cur, rx1205_curclass, "$!cstack"
  rx1205_fail3284:
    unless rx1205_bstack, rx1205_done3282
    pop $I19, rx1205_bstack
    if_null rx1205_cstack, rx1205_cstack_done3287
    unless rx1205_cstack, rx1205_cstack_done3287
    dec $I19
    set $P11, rx1205_cstack[$I19]
  rx1205_cstack_done3287:
    pop rx1205_rep, rx1205_bstack
    pop rx1205_pos, rx1205_bstack
    pop $I19, rx1205_bstack
    lt rx1205_pos, -1, rx1205_done3282
    lt rx1205_pos, 0, rx1205_fail3284
    eq $I19, 0, rx1205_fail3284
    nqp_islist $I20, rx1205_cstack
    unless $I20, rx1205_jump3285
    elements $I18, rx1205_bstack
    le $I18, 0, rx1205_cut3286
    dec $I18
    set $I18, rx1205_bstack[$I18]
  rx1205_cut3286:
    assign rx1205_cstack, $I18
  rx1205_jump3285:
    jump $I19
  rx1205_done3282:
    rx1205_cur."!cursor_fail"()
    .return (rx1205_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<lt>" :subid("cuid_203_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1350
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1209_tgt
    .local int rx1209_pos
    .local int rx1209_off
    .local int rx1209_eos
    .local int rx1209_rep
    .local pmc rx1209_cur
    .local pmc rx1209_curclass
    .local pmc rx1209_bstack
    .local pmc rx1209_cstack
    (rx1209_cur, rx1209_tgt, rx1209_pos, rx1209_curclass, rx1209_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1209_cur
    length rx1209_eos, rx1209_tgt
    eq $I19, 1, rx1209_restart3296
    gt rx1209_pos, rx1209_eos, rx1209_fail3297
    repr_get_attr_int $I11, self, rx1209_curclass, "$!from"
    ne $I11, -1, rxscan1210_done3303
    goto rxscan1210_scan3302
  rxscan1210_loop3301:
    inc rx1209_pos
    gt rx1209_pos, rx1209_eos, rx1209_fail3297
    repr_bind_attr_int rx1209_cur, rx1209_curclass, "$!from", rx1209_pos
  rxscan1210_scan3302:
    nqp_rxmark rx1209_bstack, rxscan1210_loop3301, rx1209_pos, 0
  rxscan1210_done3303:
    nqp_rxmark rx1209_bstack, rxcap1211_fail3305, rx1209_pos, 0
    add $I11, rx1209_pos, 2
    gt $I11, rx1209_eos, rx1209_fail3297
    substr $S10, rx1209_tgt, rx1209_pos, 2
    ne $S10, ucs4:"lt", rx1209_fail3297
    add rx1209_pos, 2
    nqp_rxpeek $I19, rx1209_bstack, rxcap1211_fail3305
    inc $I19
    set $I11, rx1209_bstack[$I19]
    repr_bind_attr_int rx1209_cur, rx1209_curclass, "$!pos", rx1209_pos
    $P11 = rx1209_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1209_pos)
    rx1209_cstack = rx1209_cur."!cursor_capture"($P11, "sym")
    goto rxcap1211_done3304
  rxcap1211_fail3305:
    goto rx1209_fail3297
  rxcap1211_done3304:
    repr_bind_attr_int rx1209_cur, rx1209_curclass, "$!pos", rx1209_pos
    $P11 = rx1209_cur."O"("%relational, :op<islt_s>")
    repr_get_attr_int $I11, $P11, rx1209_curclass, "$!pos"
    lt $I11, 0, rx1209_fail3297
    nqp_rxmark rx1209_bstack, rxsubrule1212_pass3306, -1, 0
  rxsubrule1212_pass3306:
    rx1209_cstack = rx1209_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1209_pos, $P11, rx1209_curclass, "$!pos"
    rx1209_cur."!cursor_pass"(rx1209_pos, "infix:sym<lt>", 'backtrack'=>1)
    .return (rx1209_cur)
  rx1209_restart3296:
    repr_get_attr_obj rx1209_cstack, rx1209_cur, rx1209_curclass, "$!cstack"
  rx1209_fail3297:
    unless rx1209_bstack, rx1209_done3295
    pop $I19, rx1209_bstack
    if_null rx1209_cstack, rx1209_cstack_done3300
    unless rx1209_cstack, rx1209_cstack_done3300
    dec $I19
    set $P11, rx1209_cstack[$I19]
  rx1209_cstack_done3300:
    pop rx1209_rep, rx1209_bstack
    pop rx1209_pos, rx1209_bstack
    pop $I19, rx1209_bstack
    lt rx1209_pos, -1, rx1209_done3295
    lt rx1209_pos, 0, rx1209_fail3297
    eq $I19, 0, rx1209_fail3297
    nqp_islist $I20, rx1209_cstack
    unless $I20, rx1209_jump3298
    elements $I18, rx1209_bstack
    le $I18, 0, rx1209_cut3299
    dec $I18
    set $I18, rx1209_bstack[$I18]
  rx1209_cut3299:
    assign rx1209_cstack, $I18
  rx1209_jump3298:
    jump $I19
  rx1209_done3295:
    rx1209_cur."!cursor_fail"()
    .return (rx1209_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<gt>" :subid("cuid_204_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1351
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1213_tgt
    .local int rx1213_pos
    .local int rx1213_off
    .local int rx1213_eos
    .local int rx1213_rep
    .local pmc rx1213_cur
    .local pmc rx1213_curclass
    .local pmc rx1213_bstack
    .local pmc rx1213_cstack
    (rx1213_cur, rx1213_tgt, rx1213_pos, rx1213_curclass, rx1213_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1213_cur
    length rx1213_eos, rx1213_tgt
    eq $I19, 1, rx1213_restart3309
    gt rx1213_pos, rx1213_eos, rx1213_fail3310
    repr_get_attr_int $I11, self, rx1213_curclass, "$!from"
    ne $I11, -1, rxscan1214_done3316
    goto rxscan1214_scan3315
  rxscan1214_loop3314:
    inc rx1213_pos
    gt rx1213_pos, rx1213_eos, rx1213_fail3310
    repr_bind_attr_int rx1213_cur, rx1213_curclass, "$!from", rx1213_pos
  rxscan1214_scan3315:
    nqp_rxmark rx1213_bstack, rxscan1214_loop3314, rx1213_pos, 0
  rxscan1214_done3316:
    nqp_rxmark rx1213_bstack, rxcap1215_fail3318, rx1213_pos, 0
    add $I11, rx1213_pos, 2
    gt $I11, rx1213_eos, rx1213_fail3310
    substr $S10, rx1213_tgt, rx1213_pos, 2
    ne $S10, ucs4:"gt", rx1213_fail3310
    add rx1213_pos, 2
    nqp_rxpeek $I19, rx1213_bstack, rxcap1215_fail3318
    inc $I19
    set $I11, rx1213_bstack[$I19]
    repr_bind_attr_int rx1213_cur, rx1213_curclass, "$!pos", rx1213_pos
    $P11 = rx1213_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1213_pos)
    rx1213_cstack = rx1213_cur."!cursor_capture"($P11, "sym")
    goto rxcap1215_done3317
  rxcap1215_fail3318:
    goto rx1213_fail3310
  rxcap1215_done3317:
    repr_bind_attr_int rx1213_cur, rx1213_curclass, "$!pos", rx1213_pos
    $P11 = rx1213_cur."O"("%relational, :op<isgt_s>")
    repr_get_attr_int $I11, $P11, rx1213_curclass, "$!pos"
    lt $I11, 0, rx1213_fail3310
    nqp_rxmark rx1213_bstack, rxsubrule1216_pass3319, -1, 0
  rxsubrule1216_pass3319:
    rx1213_cstack = rx1213_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1213_pos, $P11, rx1213_curclass, "$!pos"
    rx1213_cur."!cursor_pass"(rx1213_pos, "infix:sym<gt>", 'backtrack'=>1)
    .return (rx1213_cur)
  rx1213_restart3309:
    repr_get_attr_obj rx1213_cstack, rx1213_cur, rx1213_curclass, "$!cstack"
  rx1213_fail3310:
    unless rx1213_bstack, rx1213_done3308
    pop $I19, rx1213_bstack
    if_null rx1213_cstack, rx1213_cstack_done3313
    unless rx1213_cstack, rx1213_cstack_done3313
    dec $I19
    set $P11, rx1213_cstack[$I19]
  rx1213_cstack_done3313:
    pop rx1213_rep, rx1213_bstack
    pop rx1213_pos, rx1213_bstack
    pop $I19, rx1213_bstack
    lt rx1213_pos, -1, rx1213_done3308
    lt rx1213_pos, 0, rx1213_fail3310
    eq $I19, 0, rx1213_fail3310
    nqp_islist $I20, rx1213_cstack
    unless $I20, rx1213_jump3311
    elements $I18, rx1213_bstack
    le $I18, 0, rx1213_cut3312
    dec $I18
    set $I18, rx1213_bstack[$I18]
  rx1213_cut3312:
    assign rx1213_cstack, $I18
  rx1213_jump3311:
    jump $I19
  rx1213_done3308:
    rx1213_cur."!cursor_fail"()
    .return (rx1213_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=:=>" :subid("cuid_205_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1352
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1217_tgt
    .local int rx1217_pos
    .local int rx1217_off
    .local int rx1217_eos
    .local int rx1217_rep
    .local pmc rx1217_cur
    .local pmc rx1217_curclass
    .local pmc rx1217_bstack
    .local pmc rx1217_cstack
    (rx1217_cur, rx1217_tgt, rx1217_pos, rx1217_curclass, rx1217_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1217_cur
    length rx1217_eos, rx1217_tgt
    eq $I19, 1, rx1217_restart3322
    gt rx1217_pos, rx1217_eos, rx1217_fail3323
    repr_get_attr_int $I11, self, rx1217_curclass, "$!from"
    ne $I11, -1, rxscan1218_done3329
    goto rxscan1218_scan3328
  rxscan1218_loop3327:
    inc rx1217_pos
    gt rx1217_pos, rx1217_eos, rx1217_fail3323
    repr_bind_attr_int rx1217_cur, rx1217_curclass, "$!from", rx1217_pos
  rxscan1218_scan3328:
    nqp_rxmark rx1217_bstack, rxscan1218_loop3327, rx1217_pos, 0
  rxscan1218_done3329:
    nqp_rxmark rx1217_bstack, rxcap1219_fail3331, rx1217_pos, 0
    add $I11, rx1217_pos, 3
    gt $I11, rx1217_eos, rx1217_fail3323
    substr $S10, rx1217_tgt, rx1217_pos, 3
    ne $S10, ucs4:"=:=", rx1217_fail3323
    add rx1217_pos, 3
    nqp_rxpeek $I19, rx1217_bstack, rxcap1219_fail3331
    inc $I19
    set $I11, rx1217_bstack[$I19]
    repr_bind_attr_int rx1217_cur, rx1217_curclass, "$!pos", rx1217_pos
    $P11 = rx1217_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1217_pos)
    rx1217_cstack = rx1217_cur."!cursor_capture"($P11, "sym")
    goto rxcap1219_done3330
  rxcap1219_fail3331:
    goto rx1217_fail3323
  rxcap1219_done3330:
    repr_bind_attr_int rx1217_cur, rx1217_curclass, "$!pos", rx1217_pos
    $P11 = rx1217_cur."O"("%relational, :op<eqaddr>")
    repr_get_attr_int $I11, $P11, rx1217_curclass, "$!pos"
    lt $I11, 0, rx1217_fail3323
    nqp_rxmark rx1217_bstack, rxsubrule1220_pass3332, -1, 0
  rxsubrule1220_pass3332:
    rx1217_cstack = rx1217_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1217_pos, $P11, rx1217_curclass, "$!pos"
    rx1217_cur."!cursor_pass"(rx1217_pos, "infix:sym<=:=>", 'backtrack'=>1)
    .return (rx1217_cur)
  rx1217_restart3322:
    repr_get_attr_obj rx1217_cstack, rx1217_cur, rx1217_curclass, "$!cstack"
  rx1217_fail3323:
    unless rx1217_bstack, rx1217_done3321
    pop $I19, rx1217_bstack
    if_null rx1217_cstack, rx1217_cstack_done3326
    unless rx1217_cstack, rx1217_cstack_done3326
    dec $I19
    set $P11, rx1217_cstack[$I19]
  rx1217_cstack_done3326:
    pop rx1217_rep, rx1217_bstack
    pop rx1217_pos, rx1217_bstack
    pop $I19, rx1217_bstack
    lt rx1217_pos, -1, rx1217_done3321
    lt rx1217_pos, 0, rx1217_fail3323
    eq $I19, 0, rx1217_fail3323
    nqp_islist $I20, rx1217_cstack
    unless $I20, rx1217_jump3324
    elements $I18, rx1217_bstack
    le $I18, 0, rx1217_cut3325
    dec $I18
    set $I18, rx1217_bstack[$I18]
  rx1217_cut3325:
    assign rx1217_cstack, $I18
  rx1217_jump3324:
    jump $I19
  rx1217_done3321:
    rx1217_cur."!cursor_fail"()
    .return (rx1217_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_206_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1353
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1221_tgt
    .local int rx1221_pos
    .local int rx1221_off
    .local int rx1221_eos
    .local int rx1221_rep
    .local pmc rx1221_cur
    .local pmc rx1221_curclass
    .local pmc rx1221_bstack
    .local pmc rx1221_cstack
    (rx1221_cur, rx1221_tgt, rx1221_pos, rx1221_curclass, rx1221_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1221_cur
    length rx1221_eos, rx1221_tgt
    eq $I19, 1, rx1221_restart3335
    gt rx1221_pos, rx1221_eos, rx1221_fail3336
    repr_get_attr_int $I11, self, rx1221_curclass, "$!from"
    ne $I11, -1, rxscan1222_done3342
    goto rxscan1222_scan3341
  rxscan1222_loop3340:
    inc rx1221_pos
    gt rx1221_pos, rx1221_eos, rx1221_fail3336
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!from", rx1221_pos
  rxscan1222_scan3341:
    nqp_rxmark rx1221_bstack, rxscan1222_loop3340, rx1221_pos, 0
  rxscan1222_done3342:
    nqp_rxmark rx1221_bstack, rxcap1223_fail3344, rx1221_pos, 0
    add $I11, rx1221_pos, 2
    gt $I11, rx1221_eos, rx1221_fail3336
    substr $S10, rx1221_tgt, rx1221_pos, 2
    ne $S10, ucs4:"~~", rx1221_fail3336
    add rx1221_pos, 2
    nqp_rxpeek $I19, rx1221_bstack, rxcap1223_fail3344
    inc $I19
    set $I11, rx1221_bstack[$I19]
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!pos", rx1221_pos
    $P11 = rx1221_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1221_pos)
    rx1221_cstack = rx1221_cur."!cursor_capture"($P11, "sym")
    goto rxcap1223_done3343
  rxcap1223_fail3344:
    goto rx1221_fail3336
  rxcap1223_done3343:
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!pos", rx1221_pos
    $P11 = rx1221_cur."O"("%relational, :reducecheck<smartmatch>")
    repr_get_attr_int $I11, $P11, rx1221_curclass, "$!pos"
    lt $I11, 0, rx1221_fail3336
    nqp_rxmark rx1221_bstack, rxsubrule1224_pass3345, -1, 0
  rxsubrule1224_pass3345:
    rx1221_cstack = rx1221_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1221_pos, $P11, rx1221_curclass, "$!pos"
    rx1221_cur."!cursor_pass"(rx1221_pos, "infix:sym<~~>", 'backtrack'=>1)
    .return (rx1221_cur)
  rx1221_restart3335:
    repr_get_attr_obj rx1221_cstack, rx1221_cur, rx1221_curclass, "$!cstack"
  rx1221_fail3336:
    unless rx1221_bstack, rx1221_done3334
    pop $I19, rx1221_bstack
    if_null rx1221_cstack, rx1221_cstack_done3339
    unless rx1221_cstack, rx1221_cstack_done3339
    dec $I19
    set $P11, rx1221_cstack[$I19]
  rx1221_cstack_done3339:
    pop rx1221_rep, rx1221_bstack
    pop rx1221_pos, rx1221_bstack
    pop $I19, rx1221_bstack
    lt rx1221_pos, -1, rx1221_done3334
    lt rx1221_pos, 0, rx1221_fail3336
    eq $I19, 0, rx1221_fail3336
    nqp_islist $I20, rx1221_cstack
    unless $I20, rx1221_jump3337
    elements $I18, rx1221_bstack
    le $I18, 0, rx1221_cut3338
    dec $I18
    set $I18, rx1221_bstack[$I18]
  rx1221_cut3338:
    assign rx1221_cstack, $I18
  rx1221_jump3337:
    jump $I19
  rx1221_done3334:
    rx1221_cur."!cursor_fail"()
    .return (rx1221_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<&&>" :subid("cuid_207_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1355
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1225_tgt
    .local int rx1225_pos
    .local int rx1225_off
    .local int rx1225_eos
    .local int rx1225_rep
    .local pmc rx1225_cur
    .local pmc rx1225_curclass
    .local pmc rx1225_bstack
    .local pmc rx1225_cstack
    (rx1225_cur, rx1225_tgt, rx1225_pos, rx1225_curclass, rx1225_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1225_cur
    length rx1225_eos, rx1225_tgt
    eq $I19, 1, rx1225_restart3348
    gt rx1225_pos, rx1225_eos, rx1225_fail3349
    repr_get_attr_int $I11, self, rx1225_curclass, "$!from"
    ne $I11, -1, rxscan1226_done3355
    goto rxscan1226_scan3354
  rxscan1226_loop3353:
    inc rx1225_pos
    gt rx1225_pos, rx1225_eos, rx1225_fail3349
    repr_bind_attr_int rx1225_cur, rx1225_curclass, "$!from", rx1225_pos
  rxscan1226_scan3354:
    nqp_rxmark rx1225_bstack, rxscan1226_loop3353, rx1225_pos, 0
  rxscan1226_done3355:
    nqp_rxmark rx1225_bstack, rxcap1227_fail3357, rx1225_pos, 0
    add $I11, rx1225_pos, 2
    gt $I11, rx1225_eos, rx1225_fail3349
    substr $S10, rx1225_tgt, rx1225_pos, 2
    ne $S10, ucs4:"&&", rx1225_fail3349
    add rx1225_pos, 2
    nqp_rxpeek $I19, rx1225_bstack, rxcap1227_fail3357
    inc $I19
    set $I11, rx1225_bstack[$I19]
    repr_bind_attr_int rx1225_cur, rx1225_curclass, "$!pos", rx1225_pos
    $P11 = rx1225_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1225_pos)
    rx1225_cstack = rx1225_cur."!cursor_capture"($P11, "sym")
    goto rxcap1227_done3356
  rxcap1227_fail3357:
    goto rx1225_fail3349
  rxcap1227_done3356:
    repr_bind_attr_int rx1225_cur, rx1225_curclass, "$!pos", rx1225_pos
    $P11 = rx1225_cur."O"("%tight_and, :op<if>")
    repr_get_attr_int $I11, $P11, rx1225_curclass, "$!pos"
    lt $I11, 0, rx1225_fail3349
    nqp_rxmark rx1225_bstack, rxsubrule1228_pass3358, -1, 0
  rxsubrule1228_pass3358:
    rx1225_cstack = rx1225_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1225_pos, $P11, rx1225_curclass, "$!pos"
    rx1225_cur."!cursor_pass"(rx1225_pos, "infix:sym<&&>", 'backtrack'=>1)
    .return (rx1225_cur)
  rx1225_restart3348:
    repr_get_attr_obj rx1225_cstack, rx1225_cur, rx1225_curclass, "$!cstack"
  rx1225_fail3349:
    unless rx1225_bstack, rx1225_done3347
    pop $I19, rx1225_bstack
    if_null rx1225_cstack, rx1225_cstack_done3352
    unless rx1225_cstack, rx1225_cstack_done3352
    dec $I19
    set $P11, rx1225_cstack[$I19]
  rx1225_cstack_done3352:
    pop rx1225_rep, rx1225_bstack
    pop rx1225_pos, rx1225_bstack
    pop $I19, rx1225_bstack
    lt rx1225_pos, -1, rx1225_done3347
    lt rx1225_pos, 0, rx1225_fail3349
    eq $I19, 0, rx1225_fail3349
    nqp_islist $I20, rx1225_cstack
    unless $I20, rx1225_jump3350
    elements $I18, rx1225_bstack
    le $I18, 0, rx1225_cut3351
    dec $I18
    set $I18, rx1225_bstack[$I18]
  rx1225_cut3351:
    assign rx1225_cstack, $I18
  rx1225_jump3350:
    jump $I19
  rx1225_done3347:
    rx1225_cur."!cursor_fail"()
    .return (rx1225_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<||>" :subid("cuid_208_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1357
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1229_tgt
    .local int rx1229_pos
    .local int rx1229_off
    .local int rx1229_eos
    .local int rx1229_rep
    .local pmc rx1229_cur
    .local pmc rx1229_curclass
    .local pmc rx1229_bstack
    .local pmc rx1229_cstack
    (rx1229_cur, rx1229_tgt, rx1229_pos, rx1229_curclass, rx1229_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1229_cur
    length rx1229_eos, rx1229_tgt
    eq $I19, 1, rx1229_restart3361
    gt rx1229_pos, rx1229_eos, rx1229_fail3362
    repr_get_attr_int $I11, self, rx1229_curclass, "$!from"
    ne $I11, -1, rxscan1230_done3368
    goto rxscan1230_scan3367
  rxscan1230_loop3366:
    inc rx1229_pos
    gt rx1229_pos, rx1229_eos, rx1229_fail3362
    repr_bind_attr_int rx1229_cur, rx1229_curclass, "$!from", rx1229_pos
  rxscan1230_scan3367:
    nqp_rxmark rx1229_bstack, rxscan1230_loop3366, rx1229_pos, 0
  rxscan1230_done3368:
    nqp_rxmark rx1229_bstack, rxcap1231_fail3370, rx1229_pos, 0
    add $I11, rx1229_pos, 2
    gt $I11, rx1229_eos, rx1229_fail3362
    substr $S10, rx1229_tgt, rx1229_pos, 2
    ne $S10, ucs4:"||", rx1229_fail3362
    add rx1229_pos, 2
    nqp_rxpeek $I19, rx1229_bstack, rxcap1231_fail3370
    inc $I19
    set $I11, rx1229_bstack[$I19]
    repr_bind_attr_int rx1229_cur, rx1229_curclass, "$!pos", rx1229_pos
    $P11 = rx1229_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1229_pos)
    rx1229_cstack = rx1229_cur."!cursor_capture"($P11, "sym")
    goto rxcap1231_done3369
  rxcap1231_fail3370:
    goto rx1229_fail3362
  rxcap1231_done3369:
    repr_bind_attr_int rx1229_cur, rx1229_curclass, "$!pos", rx1229_pos
    $P11 = rx1229_cur."O"("%tight_or, :op<unless>")
    repr_get_attr_int $I11, $P11, rx1229_curclass, "$!pos"
    lt $I11, 0, rx1229_fail3362
    nqp_rxmark rx1229_bstack, rxsubrule1232_pass3371, -1, 0
  rxsubrule1232_pass3371:
    rx1229_cstack = rx1229_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1229_pos, $P11, rx1229_curclass, "$!pos"
    rx1229_cur."!cursor_pass"(rx1229_pos, "infix:sym<||>", 'backtrack'=>1)
    .return (rx1229_cur)
  rx1229_restart3361:
    repr_get_attr_obj rx1229_cstack, rx1229_cur, rx1229_curclass, "$!cstack"
  rx1229_fail3362:
    unless rx1229_bstack, rx1229_done3360
    pop $I19, rx1229_bstack
    if_null rx1229_cstack, rx1229_cstack_done3365
    unless rx1229_cstack, rx1229_cstack_done3365
    dec $I19
    set $P11, rx1229_cstack[$I19]
  rx1229_cstack_done3365:
    pop rx1229_rep, rx1229_bstack
    pop rx1229_pos, rx1229_bstack
    pop $I19, rx1229_bstack
    lt rx1229_pos, -1, rx1229_done3360
    lt rx1229_pos, 0, rx1229_fail3362
    eq $I19, 0, rx1229_fail3362
    nqp_islist $I20, rx1229_cstack
    unless $I20, rx1229_jump3363
    elements $I18, rx1229_bstack
    le $I18, 0, rx1229_cut3364
    dec $I18
    set $I18, rx1229_bstack[$I18]
  rx1229_cut3364:
    assign rx1229_cstack, $I18
  rx1229_jump3363:
    jump $I19
  rx1229_done3360:
    rx1229_cur."!cursor_fail"()
    .return (rx1229_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<//>" :subid("cuid_209_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1358
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1233_tgt
    .local int rx1233_pos
    .local int rx1233_off
    .local int rx1233_eos
    .local int rx1233_rep
    .local pmc rx1233_cur
    .local pmc rx1233_curclass
    .local pmc rx1233_bstack
    .local pmc rx1233_cstack
    (rx1233_cur, rx1233_tgt, rx1233_pos, rx1233_curclass, rx1233_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1233_cur
    length rx1233_eos, rx1233_tgt
    eq $I19, 1, rx1233_restart3374
    gt rx1233_pos, rx1233_eos, rx1233_fail3375
    repr_get_attr_int $I11, self, rx1233_curclass, "$!from"
    ne $I11, -1, rxscan1234_done3381
    goto rxscan1234_scan3380
  rxscan1234_loop3379:
    inc rx1233_pos
    gt rx1233_pos, rx1233_eos, rx1233_fail3375
    repr_bind_attr_int rx1233_cur, rx1233_curclass, "$!from", rx1233_pos
  rxscan1234_scan3380:
    nqp_rxmark rx1233_bstack, rxscan1234_loop3379, rx1233_pos, 0
  rxscan1234_done3381:
    nqp_rxmark rx1233_bstack, rxcap1235_fail3383, rx1233_pos, 0
    add $I11, rx1233_pos, 2
    gt $I11, rx1233_eos, rx1233_fail3375
    substr $S10, rx1233_tgt, rx1233_pos, 2
    ne $S10, ucs4:"//", rx1233_fail3375
    add rx1233_pos, 2
    nqp_rxpeek $I19, rx1233_bstack, rxcap1235_fail3383
    inc $I19
    set $I11, rx1233_bstack[$I19]
    repr_bind_attr_int rx1233_cur, rx1233_curclass, "$!pos", rx1233_pos
    $P11 = rx1233_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1233_pos)
    rx1233_cstack = rx1233_cur."!cursor_capture"($P11, "sym")
    goto rxcap1235_done3382
  rxcap1235_fail3383:
    goto rx1233_fail3375
  rxcap1235_done3382:
    repr_bind_attr_int rx1233_cur, rx1233_curclass, "$!pos", rx1233_pos
    $P11 = rx1233_cur."O"("%tight_or, :op<defor>")
    repr_get_attr_int $I11, $P11, rx1233_curclass, "$!pos"
    lt $I11, 0, rx1233_fail3375
    nqp_rxmark rx1233_bstack, rxsubrule1236_pass3384, -1, 0
  rxsubrule1236_pass3384:
    rx1233_cstack = rx1233_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1233_pos, $P11, rx1233_curclass, "$!pos"
    rx1233_cur."!cursor_pass"(rx1233_pos, "infix:sym<//>", 'backtrack'=>1)
    .return (rx1233_cur)
  rx1233_restart3374:
    repr_get_attr_obj rx1233_cstack, rx1233_cur, rx1233_curclass, "$!cstack"
  rx1233_fail3375:
    unless rx1233_bstack, rx1233_done3373
    pop $I19, rx1233_bstack
    if_null rx1233_cstack, rx1233_cstack_done3378
    unless rx1233_cstack, rx1233_cstack_done3378
    dec $I19
    set $P11, rx1233_cstack[$I19]
  rx1233_cstack_done3378:
    pop rx1233_rep, rx1233_bstack
    pop rx1233_pos, rx1233_bstack
    pop $I19, rx1233_bstack
    lt rx1233_pos, -1, rx1233_done3373
    lt rx1233_pos, 0, rx1233_fail3375
    eq $I19, 0, rx1233_fail3375
    nqp_islist $I20, rx1233_cstack
    unless $I20, rx1233_jump3376
    elements $I18, rx1233_bstack
    le $I18, 0, rx1233_cut3377
    dec $I18
    set $I18, rx1233_bstack[$I18]
  rx1233_cut3377:
    assign rx1233_cstack, $I18
  rx1233_jump3376:
    jump $I19
  rx1233_done3373:
    rx1233_cur."!cursor_fail"()
    .return (rx1233_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<?? !!>" :subid("cuid_210_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1360
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1237_tgt
    .local int rx1237_pos
    .local int rx1237_off
    .local int rx1237_eos
    .local int rx1237_rep
    .local pmc rx1237_cur
    .local pmc rx1237_curclass
    .local pmc rx1237_bstack
    .local pmc rx1237_cstack
    (rx1237_cur, rx1237_tgt, rx1237_pos, rx1237_curclass, rx1237_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1237_cur
    length rx1237_eos, rx1237_tgt
    eq $I19, 1, rx1237_restart3387
    gt rx1237_pos, rx1237_eos, rx1237_fail3388
    repr_get_attr_int $I11, self, rx1237_curclass, "$!from"
    ne $I11, -1, rxscan1238_done3394
    goto rxscan1238_scan3393
  rxscan1238_loop3392:
    inc rx1237_pos
    gt rx1237_pos, rx1237_eos, rx1237_fail3388
    repr_bind_attr_int rx1237_cur, rx1237_curclass, "$!from", rx1237_pos
  rxscan1238_scan3393:
    nqp_rxmark rx1237_bstack, rxscan1238_loop3392, rx1237_pos, 0
  rxscan1238_done3394:
    add $I11, rx1237_pos, 2
    gt $I11, rx1237_eos, rx1237_fail3388
    substr $S10, rx1237_tgt, rx1237_pos, 2
    ne $S10, ucs4:"??", rx1237_fail3388
    add rx1237_pos, 2
    repr_bind_attr_int rx1237_cur, rx1237_curclass, "$!pos", rx1237_pos
    $P11 = rx1237_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1237_curclass, "$!pos"
    lt $I11, 0, rx1237_fail3388
    repr_get_attr_int rx1237_pos, $P11, rx1237_curclass, "$!pos"
    repr_bind_attr_int rx1237_cur, rx1237_curclass, "$!pos", rx1237_pos
    $P11 = rx1237_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx1237_curclass, "$!pos"
    lt $I11, 0, rx1237_fail3388
    nqp_rxmark rx1237_bstack, rxsubrule1240_pass3396, -1, 0
  rxsubrule1240_pass3396:
    rx1237_cstack = rx1237_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1237_pos, $P11, rx1237_curclass, "$!pos"
    add $I11, rx1237_pos, 2
    gt $I11, rx1237_eos, rx1237_fail3388
    substr $S10, rx1237_tgt, rx1237_pos, 2
    ne $S10, ucs4:"!!", rx1237_fail3388
    add rx1237_pos, 2
    repr_bind_attr_int rx1237_cur, rx1237_curclass, "$!pos", rx1237_pos
    $P11 = rx1237_cur."O"("%conditional, :reducecheck<ternary>, :op<if>")
    repr_get_attr_int $I11, $P11, rx1237_curclass, "$!pos"
    lt $I11, 0, rx1237_fail3388
    nqp_rxmark rx1237_bstack, rxsubrule1241_pass3397, -1, 0
  rxsubrule1241_pass3397:
    rx1237_cstack = rx1237_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1237_pos, $P11, rx1237_curclass, "$!pos"
    rx1237_cur."!cursor_pass"(rx1237_pos, "infix:sym<?? !!>", 'backtrack'=>1)
    .return (rx1237_cur)
  rx1237_restart3387:
    repr_get_attr_obj rx1237_cstack, rx1237_cur, rx1237_curclass, "$!cstack"
  rx1237_fail3388:
    unless rx1237_bstack, rx1237_done3386
    pop $I19, rx1237_bstack
    if_null rx1237_cstack, rx1237_cstack_done3391
    unless rx1237_cstack, rx1237_cstack_done3391
    dec $I19
    set $P11, rx1237_cstack[$I19]
  rx1237_cstack_done3391:
    pop rx1237_rep, rx1237_bstack
    pop rx1237_pos, rx1237_bstack
    pop $I19, rx1237_bstack
    lt rx1237_pos, -1, rx1237_done3386
    lt rx1237_pos, 0, rx1237_fail3388
    eq $I19, 0, rx1237_fail3388
    nqp_islist $I20, rx1237_cstack
    unless $I20, rx1237_jump3389
    elements $I18, rx1237_bstack
    le $I18, 0, rx1237_cut3390
    dec $I18
    set $I18, rx1237_bstack[$I18]
  rx1237_cut3390:
    assign rx1237_cstack, $I18
  rx1237_jump3389:
    jump $I19
  rx1237_done3386:
    rx1237_cur."!cursor_fail"()
    .return (rx1237_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=>" :subid("cuid_211_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1368
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1242_tgt
    .local int rx1242_pos
    .local int rx1242_off
    .local int rx1242_eos
    .local int rx1242_rep
    .local pmc rx1242_cur
    .local pmc rx1242_curclass
    .local pmc rx1242_bstack
    .local pmc rx1242_cstack
    (rx1242_cur, rx1242_tgt, rx1242_pos, rx1242_curclass, rx1242_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1242_cur
    length rx1242_eos, rx1242_tgt
    eq $I19, 1, rx1242_restart3400
    gt rx1242_pos, rx1242_eos, rx1242_fail3401
    repr_get_attr_int $I11, self, rx1242_curclass, "$!from"
    ne $I11, -1, rxscan1243_done3407
    goto rxscan1243_scan3406
  rxscan1243_loop3405:
    inc rx1242_pos
    gt rx1242_pos, rx1242_eos, rx1242_fail3401
    repr_bind_attr_int rx1242_cur, rx1242_curclass, "$!from", rx1242_pos
  rxscan1243_scan3406:
    nqp_rxmark rx1242_bstack, rxscan1243_loop3405, rx1242_pos, 0
  rxscan1243_done3407:
    nqp_rxmark rx1242_bstack, rxcap1244_fail3409, rx1242_pos, 0
    add $I11, rx1242_pos, 1
    gt $I11, rx1242_eos, rx1242_fail3401
    substr $S10, rx1242_tgt, rx1242_pos, 1
    ne $S10, ucs4:"=", rx1242_fail3401
    add rx1242_pos, 1
    nqp_rxpeek $I19, rx1242_bstack, rxcap1244_fail3409
    inc $I19
    set $I11, rx1242_bstack[$I19]
    repr_bind_attr_int rx1242_cur, rx1242_curclass, "$!pos", rx1242_pos
    $P11 = rx1242_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1242_pos)
    rx1242_cstack = rx1242_cur."!cursor_capture"($P11, "sym")
    goto rxcap1244_done3408
  rxcap1244_fail3409:
    goto rx1242_fail3401
  rxcap1244_done3408:
    repr_bind_attr_int rx1242_cur, rx1242_curclass, "$!pos", rx1242_pos
    $P11 = rx1242_cur."panic"("Assignment (\"=\") not supported in NQP, use \":=\" instead")
    repr_get_attr_int $I11, $P11, rx1242_curclass, "$!pos"
    lt $I11, 0, rx1242_fail3401
    repr_get_attr_int rx1242_pos, $P11, rx1242_curclass, "$!pos"
    rx1242_cur."!cursor_pass"(rx1242_pos, "infix:sym<=>", 'backtrack'=>1)
    .return (rx1242_cur)
  rx1242_restart3400:
    repr_get_attr_obj rx1242_cstack, rx1242_cur, rx1242_curclass, "$!cstack"
  rx1242_fail3401:
    unless rx1242_bstack, rx1242_done3399
    pop $I19, rx1242_bstack
    if_null rx1242_cstack, rx1242_cstack_done3404
    unless rx1242_cstack, rx1242_cstack_done3404
    dec $I19
    set $P11, rx1242_cstack[$I19]
  rx1242_cstack_done3404:
    pop rx1242_rep, rx1242_bstack
    pop rx1242_pos, rx1242_bstack
    pop $I19, rx1242_bstack
    lt rx1242_pos, -1, rx1242_done3399
    lt rx1242_pos, 0, rx1242_fail3401
    eq $I19, 0, rx1242_fail3401
    nqp_islist $I20, rx1242_cstack
    unless $I20, rx1242_jump3402
    elements $I18, rx1242_bstack
    le $I18, 0, rx1242_cut3403
    dec $I18
    set $I18, rx1242_bstack[$I18]
  rx1242_cut3403:
    assign rx1242_cstack, $I18
  rx1242_jump3402:
    jump $I19
  rx1242_done3399:
    rx1242_cur."!cursor_fail"()
    .return (rx1242_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<:=>" :subid("cuid_212_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1371
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1246_tgt
    .local int rx1246_pos
    .local int rx1246_off
    .local int rx1246_eos
    .local int rx1246_rep
    .local pmc rx1246_cur
    .local pmc rx1246_curclass
    .local pmc rx1246_bstack
    .local pmc rx1246_cstack
    (rx1246_cur, rx1246_tgt, rx1246_pos, rx1246_curclass, rx1246_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1246_cur
    length rx1246_eos, rx1246_tgt
    eq $I19, 1, rx1246_restart3413
    gt rx1246_pos, rx1246_eos, rx1246_fail3414
    repr_get_attr_int $I11, self, rx1246_curclass, "$!from"
    ne $I11, -1, rxscan1247_done3420
    goto rxscan1247_scan3419
  rxscan1247_loop3418:
    inc rx1246_pos
    gt rx1246_pos, rx1246_eos, rx1246_fail3414
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!from", rx1246_pos
  rxscan1247_scan3419:
    nqp_rxmark rx1246_bstack, rxscan1247_loop3418, rx1246_pos, 0
  rxscan1247_done3420:
    nqp_rxmark rx1246_bstack, rxcap1248_fail3422, rx1246_pos, 0
    add $I11, rx1246_pos, 2
    gt $I11, rx1246_eos, rx1246_fail3414
    substr $S10, rx1246_tgt, rx1246_pos, 2
    ne $S10, ucs4:":=", rx1246_fail3414
    add rx1246_pos, 2
    nqp_rxpeek $I19, rx1246_bstack, rxcap1248_fail3422
    inc $I19
    set $I11, rx1246_bstack[$I19]
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!pos", rx1246_pos
    $P11 = rx1246_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1246_pos)
    rx1246_cstack = rx1246_cur."!cursor_capture"($P11, "sym")
    goto rxcap1248_done3421
  rxcap1248_fail3422:
    goto rx1246_fail3414
  rxcap1248_done3421:
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!pos", rx1246_pos
    $P11 = rx1246_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1246_curclass, "$!pos"
    lt $I11, 0, rx1246_fail3414
    nqp_rxmark rx1246_bstack, rxsubrule1249_pass3423, -1, 0
  rxsubrule1249_pass3423:
    rx1246_cstack = rx1246_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1246_pos, $P11, rx1246_curclass, "$!pos"
    rx1246_cur."!cursor_pass"(rx1246_pos, "infix:sym<:=>", 'backtrack'=>1)
    .return (rx1246_cur)
  rx1246_restart3413:
    repr_get_attr_obj rx1246_cstack, rx1246_cur, rx1246_curclass, "$!cstack"
  rx1246_fail3414:
    unless rx1246_bstack, rx1246_done3412
    pop $I19, rx1246_bstack
    if_null rx1246_cstack, rx1246_cstack_done3417
    unless rx1246_cstack, rx1246_cstack_done3417
    dec $I19
    set $P11, rx1246_cstack[$I19]
  rx1246_cstack_done3417:
    pop rx1246_rep, rx1246_bstack
    pop rx1246_pos, rx1246_bstack
    pop $I19, rx1246_bstack
    lt rx1246_pos, -1, rx1246_done3412
    lt rx1246_pos, 0, rx1246_fail3414
    eq $I19, 0, rx1246_fail3414
    nqp_islist $I20, rx1246_cstack
    unless $I20, rx1246_jump3415
    elements $I18, rx1246_bstack
    le $I18, 0, rx1246_cut3416
    dec $I18
    set $I18, rx1246_bstack[$I18]
  rx1246_cut3416:
    assign rx1246_cstack, $I18
  rx1246_jump3415:
    jump $I19
  rx1246_done3412:
    rx1246_cur."!cursor_fail"()
    .return (rx1246_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<::=>" :subid("cuid_213_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1372
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1250_tgt
    .local int rx1250_pos
    .local int rx1250_off
    .local int rx1250_eos
    .local int rx1250_rep
    .local pmc rx1250_cur
    .local pmc rx1250_curclass
    .local pmc rx1250_bstack
    .local pmc rx1250_cstack
    (rx1250_cur, rx1250_tgt, rx1250_pos, rx1250_curclass, rx1250_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1250_cur
    length rx1250_eos, rx1250_tgt
    eq $I19, 1, rx1250_restart3426
    gt rx1250_pos, rx1250_eos, rx1250_fail3427
    repr_get_attr_int $I11, self, rx1250_curclass, "$!from"
    ne $I11, -1, rxscan1251_done3433
    goto rxscan1251_scan3432
  rxscan1251_loop3431:
    inc rx1250_pos
    gt rx1250_pos, rx1250_eos, rx1250_fail3427
    repr_bind_attr_int rx1250_cur, rx1250_curclass, "$!from", rx1250_pos
  rxscan1251_scan3432:
    nqp_rxmark rx1250_bstack, rxscan1251_loop3431, rx1250_pos, 0
  rxscan1251_done3433:
    nqp_rxmark rx1250_bstack, rxcap1252_fail3435, rx1250_pos, 0
    add $I11, rx1250_pos, 3
    gt $I11, rx1250_eos, rx1250_fail3427
    substr $S10, rx1250_tgt, rx1250_pos, 3
    ne $S10, ucs4:"::=", rx1250_fail3427
    add rx1250_pos, 3
    nqp_rxpeek $I19, rx1250_bstack, rxcap1252_fail3435
    inc $I19
    set $I11, rx1250_bstack[$I19]
    repr_bind_attr_int rx1250_cur, rx1250_curclass, "$!pos", rx1250_pos
    $P11 = rx1250_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1250_pos)
    rx1250_cstack = rx1250_cur."!cursor_capture"($P11, "sym")
    goto rxcap1252_done3434
  rxcap1252_fail3435:
    goto rx1250_fail3427
  rxcap1252_done3434:
    repr_bind_attr_int rx1250_cur, rx1250_curclass, "$!pos", rx1250_pos
    $P11 = rx1250_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1250_curclass, "$!pos"
    lt $I11, 0, rx1250_fail3427
    nqp_rxmark rx1250_bstack, rxsubrule1253_pass3436, -1, 0
  rxsubrule1253_pass3436:
    rx1250_cstack = rx1250_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1250_pos, $P11, rx1250_curclass, "$!pos"
    rx1250_cur."!cursor_pass"(rx1250_pos, "infix:sym<::=>", 'backtrack'=>1)
    .return (rx1250_cur)
  rx1250_restart3426:
    repr_get_attr_obj rx1250_cstack, rx1250_cur, rx1250_curclass, "$!cstack"
  rx1250_fail3427:
    unless rx1250_bstack, rx1250_done3425
    pop $I19, rx1250_bstack
    if_null rx1250_cstack, rx1250_cstack_done3430
    unless rx1250_cstack, rx1250_cstack_done3430
    dec $I19
    set $P11, rx1250_cstack[$I19]
  rx1250_cstack_done3430:
    pop rx1250_rep, rx1250_bstack
    pop rx1250_pos, rx1250_bstack
    pop $I19, rx1250_bstack
    lt rx1250_pos, -1, rx1250_done3425
    lt rx1250_pos, 0, rx1250_fail3427
    eq $I19, 0, rx1250_fail3427
    nqp_islist $I20, rx1250_cstack
    unless $I20, rx1250_jump3428
    elements $I18, rx1250_bstack
    le $I18, 0, rx1250_cut3429
    dec $I18
    set $I18, rx1250_bstack[$I18]
  rx1250_cut3429:
    assign rx1250_cstack, $I18
  rx1250_jump3428:
    jump $I19
  rx1250_done3425:
    rx1250_cur."!cursor_fail"()
    .return (rx1250_cur) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<,>" :subid("cuid_214_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1374
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1254_tgt
    .local int rx1254_pos
    .local int rx1254_off
    .local int rx1254_eos
    .local int rx1254_rep
    .local pmc rx1254_cur
    .local pmc rx1254_curclass
    .local pmc rx1254_bstack
    .local pmc rx1254_cstack
    (rx1254_cur, rx1254_tgt, rx1254_pos, rx1254_curclass, rx1254_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1254_cur
    length rx1254_eos, rx1254_tgt
    eq $I19, 1, rx1254_restart3439
    gt rx1254_pos, rx1254_eos, rx1254_fail3440
    repr_get_attr_int $I11, self, rx1254_curclass, "$!from"
    ne $I11, -1, rxscan1255_done3446
    goto rxscan1255_scan3445
  rxscan1255_loop3444:
    inc rx1254_pos
    gt rx1254_pos, rx1254_eos, rx1254_fail3440
    repr_bind_attr_int rx1254_cur, rx1254_curclass, "$!from", rx1254_pos
  rxscan1255_scan3445:
    nqp_rxmark rx1254_bstack, rxscan1255_loop3444, rx1254_pos, 0
  rxscan1255_done3446:
    nqp_rxmark rx1254_bstack, rxcap1256_fail3448, rx1254_pos, 0
    add $I11, rx1254_pos, 1
    gt $I11, rx1254_eos, rx1254_fail3440
    substr $S10, rx1254_tgt, rx1254_pos, 1
    ne $S10, ucs4:",", rx1254_fail3440
    add rx1254_pos, 1
    nqp_rxpeek $I19, rx1254_bstack, rxcap1256_fail3448
    inc $I19
    set $I11, rx1254_bstack[$I19]
    repr_bind_attr_int rx1254_cur, rx1254_curclass, "$!pos", rx1254_pos
    $P11 = rx1254_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1254_pos)
    rx1254_cstack = rx1254_cur."!cursor_capture"($P11, "sym")
    goto rxcap1256_done3447
  rxcap1256_fail3448:
    goto rx1254_fail3440
  rxcap1256_done3447:
    repr_bind_attr_int rx1254_cur, rx1254_curclass, "$!pos", rx1254_pos
    $P11 = rx1254_cur."O"("%comma, :op<list>")
    repr_get_attr_int $I11, $P11, rx1254_curclass, "$!pos"
    lt $I11, 0, rx1254_fail3440
    nqp_rxmark rx1254_bstack, rxsubrule1257_pass3449, -1, 0
  rxsubrule1257_pass3449:
    rx1254_cstack = rx1254_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1254_pos, $P11, rx1254_curclass, "$!pos"
    rx1254_cur."!cursor_pass"(rx1254_pos, "infix:sym<,>", 'backtrack'=>1)
    .return (rx1254_cur)
  rx1254_restart3439:
    repr_get_attr_obj rx1254_cstack, rx1254_cur, rx1254_curclass, "$!cstack"
  rx1254_fail3440:
    unless rx1254_bstack, rx1254_done3438
    pop $I19, rx1254_bstack
    if_null rx1254_cstack, rx1254_cstack_done3443
    unless rx1254_cstack, rx1254_cstack_done3443
    dec $I19
    set $P11, rx1254_cstack[$I19]
  rx1254_cstack_done3443:
    pop rx1254_rep, rx1254_bstack
    pop rx1254_pos, rx1254_bstack
    pop $I19, rx1254_bstack
    lt rx1254_pos, -1, rx1254_done3438
    lt rx1254_pos, 0, rx1254_fail3440
    eq $I19, 0, rx1254_fail3440
    nqp_islist $I20, rx1254_cstack
    unless $I20, rx1254_jump3441
    elements $I18, rx1254_bstack
    le $I18, 0, rx1254_cut3442
    dec $I18
    set $I18, rx1254_bstack[$I18]
  rx1254_cut3442:
    assign rx1254_cstack, $I18
  rx1254_jump3441:
    jump $I19
  rx1254_done3438:
    rx1254_cur."!cursor_fail"()
    .return (rx1254_cur) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_215_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1376
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_404_1360256386.79' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1258_tgt
    .local int rx1258_pos
    .local int rx1258_off
    .local int rx1258_eos
    .local int rx1258_rep
    .local pmc rx1258_cur
    .local pmc rx1258_curclass
    .local pmc rx1258_bstack
    .local pmc rx1258_cstack
    (rx1258_cur, rx1258_tgt, rx1258_pos, rx1258_curclass, rx1258_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1258_cur
    length rx1258_eos, rx1258_tgt
    eq $I19, 1, rx1258_restart3452
    gt rx1258_pos, rx1258_eos, rx1258_fail3453
    repr_get_attr_int $I11, self, rx1258_curclass, "$!from"
    ne $I11, -1, rxscan1259_done3459
    goto rxscan1259_scan3458
  rxscan1259_loop3457:
    inc rx1258_pos
    gt rx1258_pos, rx1258_eos, rx1258_fail3453
    repr_bind_attr_int rx1258_cur, rx1258_curclass, "$!from", rx1258_pos
  rxscan1259_scan3458:
    nqp_rxmark rx1258_bstack, rxscan1259_loop3457, rx1258_pos, 0
  rxscan1259_done3459:
    nqp_rxmark rx1258_bstack, rxcap1260_fail3461, rx1258_pos, 0
    add $I11, rx1258_pos, 6
    gt $I11, rx1258_eos, rx1258_fail3453
    substr $S10, rx1258_tgt, rx1258_pos, 6
    ne $S10, ucs4:"return", rx1258_fail3453
    add rx1258_pos, 6
    nqp_rxpeek $I19, rx1258_bstack, rxcap1260_fail3461
    inc $I19
    set $I11, rx1258_bstack[$I19]
    repr_bind_attr_int rx1258_cur, rx1258_curclass, "$!pos", rx1258_pos
    $P11 = rx1258_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1258_pos)
    rx1258_cstack = rx1258_cur."!cursor_capture"($P11, "sym")
    goto rxcap1260_done3460
  rxcap1260_fail3461:
    goto rx1258_fail3453
  rxcap1260_done3460:
    ge rx1258_pos, rx1258_eos, rx1258_fail3453
    is_cclass $I11, .CCLASS_WHITESPACE, rx1258_tgt, rx1258_pos
    unless $I11, rx1258_fail3453
    add rx1258_pos, 1
    repr_bind_attr_int rx1258_cur, rx1258_curclass, "$!pos", rx1258_pos
    $P11 = rx1258_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1258_curclass, "$!pos"
    lt $I11, 0, rx1258_fail3453
    nqp_rxmark rx1258_bstack, rxsubrule1261_pass3462, -1, 0
  rxsubrule1261_pass3462:
    rx1258_cstack = rx1258_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1258_pos, $P11, rx1258_curclass, "$!pos"
    repr_bind_attr_int rx1258_cur, rx1258_curclass, "$!pos", rx1258_pos
    store_lex unicode:"$\x{a2}", rx1258_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_404_1360256386.79' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1258_cur."!cursor_pass"(rx1258_pos, "prefix:sym<return>", 'backtrack'=>1)
    .return (rx1258_cur)
  rx1258_restart3452:
    repr_get_attr_obj rx1258_cstack, rx1258_cur, rx1258_curclass, "$!cstack"
  rx1258_fail3453:
    unless rx1258_bstack, rx1258_done3451
    pop $I19, rx1258_bstack
    if_null rx1258_cstack, rx1258_cstack_done3456
    unless rx1258_cstack, rx1258_cstack_done3456
    dec $I19
    set $P11, rx1258_cstack[$I19]
  rx1258_cstack_done3456:
    pop rx1258_rep, rx1258_bstack
    pop rx1258_pos, rx1258_bstack
    pop $I19, rx1258_bstack
    lt rx1258_pos, -1, rx1258_done3451
    lt rx1258_pos, 0, rx1258_fail3453
    eq $I19, 0, rx1258_fail3453
    nqp_islist $I20, rx1258_cstack
    unless $I20, rx1258_jump3454
    elements $I18, rx1258_bstack
    le $I18, 0, rx1258_cut3455
    dec $I18
    set $I18, rx1258_bstack[$I18]
  rx1258_cut3455:
    assign rx1258_cstack, $I18
  rx1258_jump3454:
    jump $I19
  rx1258_done3451:
    rx1258_cur."!cursor_fail"()
    .return (rx1258_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_404_1360256386.79") :anon :lex :outer("cuid_215_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1376

    box $P5001, 1
    store_dynamic_lex "$*RETURN_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_216_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1377
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1262_tgt
    .local int rx1262_pos
    .local int rx1262_off
    .local int rx1262_eos
    .local int rx1262_rep
    .local pmc rx1262_cur
    .local pmc rx1262_curclass
    .local pmc rx1262_bstack
    .local pmc rx1262_cstack
    (rx1262_cur, rx1262_tgt, rx1262_pos, rx1262_curclass, rx1262_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1262_cur
    length rx1262_eos, rx1262_tgt
    eq $I19, 1, rx1262_restart3465
    gt rx1262_pos, rx1262_eos, rx1262_fail3466
    repr_get_attr_int $I11, self, rx1262_curclass, "$!from"
    ne $I11, -1, rxscan1263_done3472
    goto rxscan1263_scan3471
  rxscan1263_loop3470:
    inc rx1262_pos
    gt rx1262_pos, rx1262_eos, rx1262_fail3466
    repr_bind_attr_int rx1262_cur, rx1262_curclass, "$!from", rx1262_pos
  rxscan1263_scan3471:
    nqp_rxmark rx1262_bstack, rxscan1263_loop3470, rx1262_pos, 0
  rxscan1263_done3472:
    nqp_rxmark rx1262_bstack, rxcap1264_fail3474, rx1262_pos, 0
    add $I11, rx1262_pos, 4
    gt $I11, rx1262_eos, rx1262_fail3466
    substr $S10, rx1262_tgt, rx1262_pos, 4
    ne $S10, ucs4:"make", rx1262_fail3466
    add rx1262_pos, 4
    nqp_rxpeek $I19, rx1262_bstack, rxcap1264_fail3474
    inc $I19
    set $I11, rx1262_bstack[$I19]
    repr_bind_attr_int rx1262_cur, rx1262_curclass, "$!pos", rx1262_pos
    $P11 = rx1262_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1262_pos)
    rx1262_cstack = rx1262_cur."!cursor_capture"($P11, "sym")
    goto rxcap1264_done3473
  rxcap1264_fail3474:
    goto rx1262_fail3466
  rxcap1264_done3473:
    ge rx1262_pos, rx1262_eos, rx1262_fail3466
    is_cclass $I11, .CCLASS_WHITESPACE, rx1262_tgt, rx1262_pos
    unless $I11, rx1262_fail3466
    add rx1262_pos, 1
    repr_bind_attr_int rx1262_cur, rx1262_curclass, "$!pos", rx1262_pos
    $P11 = rx1262_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1262_curclass, "$!pos"
    lt $I11, 0, rx1262_fail3466
    nqp_rxmark rx1262_bstack, rxsubrule1265_pass3475, -1, 0
  rxsubrule1265_pass3475:
    rx1262_cstack = rx1262_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1262_pos, $P11, rx1262_curclass, "$!pos"
    rx1262_cur."!cursor_pass"(rx1262_pos, "prefix:sym<make>", 'backtrack'=>1)
    .return (rx1262_cur)
  rx1262_restart3465:
    repr_get_attr_obj rx1262_cstack, rx1262_cur, rx1262_curclass, "$!cstack"
  rx1262_fail3466:
    unless rx1262_bstack, rx1262_done3464
    pop $I19, rx1262_bstack
    if_null rx1262_cstack, rx1262_cstack_done3469
    unless rx1262_cstack, rx1262_cstack_done3469
    dec $I19
    set $P11, rx1262_cstack[$I19]
  rx1262_cstack_done3469:
    pop rx1262_rep, rx1262_bstack
    pop rx1262_pos, rx1262_bstack
    pop $I19, rx1262_bstack
    lt rx1262_pos, -1, rx1262_done3464
    lt rx1262_pos, 0, rx1262_fail3466
    eq $I19, 0, rx1262_fail3466
    nqp_islist $I20, rx1262_cstack
    unless $I20, rx1262_jump3467
    elements $I18, rx1262_bstack
    le $I18, 0, rx1262_cut3468
    dec $I18
    set $I18, rx1262_bstack[$I18]
  rx1262_cut3468:
    assign rx1262_cstack, $I18
  rx1262_jump3467:
    jump $I19
  rx1262_done3464:
    rx1262_cur."!cursor_fail"()
    .return (rx1262_cur) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_217_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1378
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_218_1360256386.79' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_405_1360256386.79' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1266_tgt
    .local int rx1266_pos
    .local int rx1266_off
    .local int rx1266_eos
    .local int rx1266_rep
    .local pmc rx1266_cur
    .local pmc rx1266_curclass
    .local pmc rx1266_bstack
    .local pmc rx1266_cstack
    (rx1266_cur, rx1266_tgt, rx1266_pos, rx1266_curclass, rx1266_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1266_cur
    length rx1266_eos, rx1266_tgt
    eq $I19, 1, rx1266_restart3478
    gt rx1266_pos, rx1266_eos, rx1266_fail3479
    repr_get_attr_int $I11, self, rx1266_curclass, "$!from"
    ne $I11, -1, rxscan1267_done3485
    goto rxscan1267_scan3484
  rxscan1267_loop3483:
    inc rx1266_pos
    gt rx1266_pos, rx1266_eos, rx1266_fail3479
    repr_bind_attr_int rx1266_cur, rx1266_curclass, "$!from", rx1266_pos
  rxscan1267_scan3484:
    nqp_rxmark rx1266_bstack, rxscan1267_loop3483, rx1266_pos, 0
  rxscan1267_done3485:
    nqp_rxmark rx1266_bstack, rxcap1268_fail3487, rx1266_pos, 0
    add $I11, rx1266_pos, 4
    gt $I11, rx1266_eos, rx1266_fail3479
    substr $S10, rx1266_tgt, rx1266_pos, 4
    ne $S10, ucs4:"last", rx1266_fail3479
    add rx1266_pos, 4
    nqp_rxpeek $I19, rx1266_bstack, rxcap1268_fail3487
    inc $I19
    set $I11, rx1266_bstack[$I19]
    repr_bind_attr_int rx1266_cur, rx1266_curclass, "$!pos", rx1266_pos
    $P11 = rx1266_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1266_pos)
    rx1266_cstack = rx1266_cur."!cursor_capture"($P11, "sym")
    goto rxcap1268_done3486
  rxcap1268_fail3487:
    goto rx1266_fail3479
  rxcap1268_done3486:
    .const 'Sub' $P5001 = 'cuid_218_1360256386.79' 
    capture_lex $P5001
    repr_bind_attr_int rx1266_cur, rx1266_curclass, "$!pos", rx1266_pos
    $P11 = rx1266_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1266_curclass, "$!pos"
    ge $I11, 0, rx1266_fail3479
    repr_bind_attr_int rx1266_cur, rx1266_curclass, "$!pos", rx1266_pos
    store_lex unicode:"$\x{a2}", rx1266_cur
    $P5002 = $P101."MATCH"()
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_405_1360256386.79' 
    capture_lex $P5003
    $P5004 = $P5003()
    rx1266_cur."!cursor_pass"(rx1266_pos, "term:sym<last>", 'backtrack'=>1)
    .return (rx1266_cur)
  rx1266_restart3478:
    repr_get_attr_obj rx1266_cstack, rx1266_cur, rx1266_curclass, "$!cstack"
  rx1266_fail3479:
    unless rx1266_bstack, rx1266_done3477
    pop $I19, rx1266_bstack
    if_null rx1266_cstack, rx1266_cstack_done3482
    unless rx1266_cstack, rx1266_cstack_done3482
    dec $I19
    set $P11, rx1266_cstack[$I19]
  rx1266_cstack_done3482:
    pop rx1266_rep, rx1266_bstack
    pop rx1266_pos, rx1266_bstack
    pop $I19, rx1266_bstack
    lt rx1266_pos, -1, rx1266_done3477
    lt rx1266_pos, 0, rx1266_fail3479
    eq $I19, 0, rx1266_fail3479
    nqp_islist $I20, rx1266_cstack
    unless $I20, rx1266_jump3480
    elements $I18, rx1266_bstack
    le $I18, 0, rx1266_cut3481
    dec $I18
    set $I18, rx1266_bstack[$I18]
  rx1266_cut3481:
    assign rx1266_cstack, $I18
  rx1266_jump3480:
    jump $I19
  rx1266_done3477:
    rx1266_cur."!cursor_fail"()
    .return (rx1266_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_218_1360256386.79") :anon :lex :outer("cuid_217_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1269_tgt
    .local int rx1269_pos
    .local int rx1269_off
    .local int rx1269_eos
    .local int rx1269_rep
    .local pmc rx1269_cur
    .local pmc rx1269_curclass
    .local pmc rx1269_bstack
    .local pmc rx1269_cstack
    (rx1269_cur, rx1269_tgt, rx1269_pos, rx1269_curclass, rx1269_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1269_cur
    length rx1269_eos, rx1269_tgt
    eq $I19, 1, rx1269_restart3490
    gt rx1269_pos, rx1269_eos, rx1269_fail3491
    repr_get_attr_int $I11, self, rx1269_curclass, "$!from"
    ne $I11, -1, rxscan1270_done3497
    goto rxscan1270_scan3496
  rxscan1270_loop3495:
    inc rx1269_pos
    gt rx1269_pos, rx1269_eos, rx1269_fail3491
    repr_bind_attr_int rx1269_cur, rx1269_curclass, "$!from", rx1269_pos
  rxscan1270_scan3496:
    nqp_rxmark rx1269_bstack, rxscan1270_loop3495, rx1269_pos, 0
  rxscan1270_done3497:
    repr_bind_attr_int rx1269_cur, rx1269_curclass, "$!pos", rx1269_pos
    $P11 = rx1269_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1269_curclass, "$!pos"
    lt $I11, 0, rx1269_fail3491
    nqp_rxmark rx1269_bstack, rxsubrule1271_pass3498, -1, 0
  rxsubrule1271_pass3498:
    rx1269_cstack = rx1269_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx1269_pos, $P11, rx1269_curclass, "$!pos"
    rx1269_cur."!cursor_pass"(rx1269_pos, 'backtrack'=>1)
    .return (rx1269_cur)
  rx1269_restart3490:
    repr_get_attr_obj rx1269_cstack, rx1269_cur, rx1269_curclass, "$!cstack"
  rx1269_fail3491:
    unless rx1269_bstack, rx1269_done3489
    pop $I19, rx1269_bstack
    if_null rx1269_cstack, rx1269_cstack_done3494
    unless rx1269_cstack, rx1269_cstack_done3494
    dec $I19
    set $P11, rx1269_cstack[$I19]
  rx1269_cstack_done3494:
    pop rx1269_rep, rx1269_bstack
    pop rx1269_pos, rx1269_bstack
    pop $I19, rx1269_bstack
    lt rx1269_pos, -1, rx1269_done3489
    lt rx1269_pos, 0, rx1269_fail3491
    eq $I19, 0, rx1269_fail3491
    nqp_islist $I20, rx1269_cstack
    unless $I20, rx1269_jump3492
    elements $I18, rx1269_bstack
    le $I18, 0, rx1269_cut3493
    dec $I18
    set $I18, rx1269_bstack[$I18]
  rx1269_cut3493:
    assign rx1269_cstack, $I18
  rx1269_jump3492:
    jump $I19
  rx1269_done3489:
    rx1269_cur."!cursor_fail"()
    .return (rx1269_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_405_1360256386.79") :anon :lex :outer("cuid_217_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1378

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_219_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1379
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_220_1360256386.79' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_406_1360256386.79' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1272_tgt
    .local int rx1272_pos
    .local int rx1272_off
    .local int rx1272_eos
    .local int rx1272_rep
    .local pmc rx1272_cur
    .local pmc rx1272_curclass
    .local pmc rx1272_bstack
    .local pmc rx1272_cstack
    (rx1272_cur, rx1272_tgt, rx1272_pos, rx1272_curclass, rx1272_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1272_cur
    length rx1272_eos, rx1272_tgt
    eq $I19, 1, rx1272_restart3501
    gt rx1272_pos, rx1272_eos, rx1272_fail3502
    repr_get_attr_int $I11, self, rx1272_curclass, "$!from"
    ne $I11, -1, rxscan1273_done3508
    goto rxscan1273_scan3507
  rxscan1273_loop3506:
    inc rx1272_pos
    gt rx1272_pos, rx1272_eos, rx1272_fail3502
    repr_bind_attr_int rx1272_cur, rx1272_curclass, "$!from", rx1272_pos
  rxscan1273_scan3507:
    nqp_rxmark rx1272_bstack, rxscan1273_loop3506, rx1272_pos, 0
  rxscan1273_done3508:
    nqp_rxmark rx1272_bstack, rxcap1274_fail3510, rx1272_pos, 0
    add $I11, rx1272_pos, 4
    gt $I11, rx1272_eos, rx1272_fail3502
    substr $S10, rx1272_tgt, rx1272_pos, 4
    ne $S10, ucs4:"next", rx1272_fail3502
    add rx1272_pos, 4
    nqp_rxpeek $I19, rx1272_bstack, rxcap1274_fail3510
    inc $I19
    set $I11, rx1272_bstack[$I19]
    repr_bind_attr_int rx1272_cur, rx1272_curclass, "$!pos", rx1272_pos
    $P11 = rx1272_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1272_pos)
    rx1272_cstack = rx1272_cur."!cursor_capture"($P11, "sym")
    goto rxcap1274_done3509
  rxcap1274_fail3510:
    goto rx1272_fail3502
  rxcap1274_done3509:
    .const 'Sub' $P5001 = 'cuid_220_1360256386.79' 
    capture_lex $P5001
    repr_bind_attr_int rx1272_cur, rx1272_curclass, "$!pos", rx1272_pos
    $P11 = rx1272_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1272_curclass, "$!pos"
    ge $I11, 0, rx1272_fail3502
    repr_bind_attr_int rx1272_cur, rx1272_curclass, "$!pos", rx1272_pos
    store_lex unicode:"$\x{a2}", rx1272_cur
    $P5002 = $P101."MATCH"()
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_406_1360256386.79' 
    capture_lex $P5003
    $P5004 = $P5003()
    rx1272_cur."!cursor_pass"(rx1272_pos, "term:sym<next>", 'backtrack'=>1)
    .return (rx1272_cur)
  rx1272_restart3501:
    repr_get_attr_obj rx1272_cstack, rx1272_cur, rx1272_curclass, "$!cstack"
  rx1272_fail3502:
    unless rx1272_bstack, rx1272_done3500
    pop $I19, rx1272_bstack
    if_null rx1272_cstack, rx1272_cstack_done3505
    unless rx1272_cstack, rx1272_cstack_done3505
    dec $I19
    set $P11, rx1272_cstack[$I19]
  rx1272_cstack_done3505:
    pop rx1272_rep, rx1272_bstack
    pop rx1272_pos, rx1272_bstack
    pop $I19, rx1272_bstack
    lt rx1272_pos, -1, rx1272_done3500
    lt rx1272_pos, 0, rx1272_fail3502
    eq $I19, 0, rx1272_fail3502
    nqp_islist $I20, rx1272_cstack
    unless $I20, rx1272_jump3503
    elements $I18, rx1272_bstack
    le $I18, 0, rx1272_cut3504
    dec $I18
    set $I18, rx1272_bstack[$I18]
  rx1272_cut3504:
    assign rx1272_cstack, $I18
  rx1272_jump3503:
    jump $I19
  rx1272_done3500:
    rx1272_cur."!cursor_fail"()
    .return (rx1272_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_220_1360256386.79") :anon :lex :outer("cuid_219_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1275_tgt
    .local int rx1275_pos
    .local int rx1275_off
    .local int rx1275_eos
    .local int rx1275_rep
    .local pmc rx1275_cur
    .local pmc rx1275_curclass
    .local pmc rx1275_bstack
    .local pmc rx1275_cstack
    (rx1275_cur, rx1275_tgt, rx1275_pos, rx1275_curclass, rx1275_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1275_cur
    length rx1275_eos, rx1275_tgt
    eq $I19, 1, rx1275_restart3513
    gt rx1275_pos, rx1275_eos, rx1275_fail3514
    repr_get_attr_int $I11, self, rx1275_curclass, "$!from"
    ne $I11, -1, rxscan1276_done3520
    goto rxscan1276_scan3519
  rxscan1276_loop3518:
    inc rx1275_pos
    gt rx1275_pos, rx1275_eos, rx1275_fail3514
    repr_bind_attr_int rx1275_cur, rx1275_curclass, "$!from", rx1275_pos
  rxscan1276_scan3519:
    nqp_rxmark rx1275_bstack, rxscan1276_loop3518, rx1275_pos, 0
  rxscan1276_done3520:
    repr_bind_attr_int rx1275_cur, rx1275_curclass, "$!pos", rx1275_pos
    $P11 = rx1275_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1275_curclass, "$!pos"
    lt $I11, 0, rx1275_fail3514
    nqp_rxmark rx1275_bstack, rxsubrule1277_pass3521, -1, 0
  rxsubrule1277_pass3521:
    rx1275_cstack = rx1275_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx1275_pos, $P11, rx1275_curclass, "$!pos"
    rx1275_cur."!cursor_pass"(rx1275_pos, 'backtrack'=>1)
    .return (rx1275_cur)
  rx1275_restart3513:
    repr_get_attr_obj rx1275_cstack, rx1275_cur, rx1275_curclass, "$!cstack"
  rx1275_fail3514:
    unless rx1275_bstack, rx1275_done3512
    pop $I19, rx1275_bstack
    if_null rx1275_cstack, rx1275_cstack_done3517
    unless rx1275_cstack, rx1275_cstack_done3517
    dec $I19
    set $P11, rx1275_cstack[$I19]
  rx1275_cstack_done3517:
    pop rx1275_rep, rx1275_bstack
    pop rx1275_pos, rx1275_bstack
    pop $I19, rx1275_bstack
    lt rx1275_pos, -1, rx1275_done3512
    lt rx1275_pos, 0, rx1275_fail3514
    eq $I19, 0, rx1275_fail3514
    nqp_islist $I20, rx1275_cstack
    unless $I20, rx1275_jump3515
    elements $I18, rx1275_bstack
    le $I18, 0, rx1275_cut3516
    dec $I18
    set $I18, rx1275_bstack[$I18]
  rx1275_cut3516:
    assign rx1275_cstack, $I18
  rx1275_jump3515:
    jump $I19
  rx1275_done3512:
    rx1275_cur."!cursor_fail"()
    .return (rx1275_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_406_1360256386.79") :anon :lex :outer("cuid_219_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1379

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_221_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1380
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_222_1360256386.79' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_407_1360256386.79' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1278_tgt
    .local int rx1278_pos
    .local int rx1278_off
    .local int rx1278_eos
    .local int rx1278_rep
    .local pmc rx1278_cur
    .local pmc rx1278_curclass
    .local pmc rx1278_bstack
    .local pmc rx1278_cstack
    (rx1278_cur, rx1278_tgt, rx1278_pos, rx1278_curclass, rx1278_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1278_cur
    length rx1278_eos, rx1278_tgt
    eq $I19, 1, rx1278_restart3524
    gt rx1278_pos, rx1278_eos, rx1278_fail3525
    repr_get_attr_int $I11, self, rx1278_curclass, "$!from"
    ne $I11, -1, rxscan1279_done3531
    goto rxscan1279_scan3530
  rxscan1279_loop3529:
    inc rx1278_pos
    gt rx1278_pos, rx1278_eos, rx1278_fail3525
    repr_bind_attr_int rx1278_cur, rx1278_curclass, "$!from", rx1278_pos
  rxscan1279_scan3530:
    nqp_rxmark rx1278_bstack, rxscan1279_loop3529, rx1278_pos, 0
  rxscan1279_done3531:
    nqp_rxmark rx1278_bstack, rxcap1280_fail3533, rx1278_pos, 0
    add $I11, rx1278_pos, 4
    gt $I11, rx1278_eos, rx1278_fail3525
    substr $S10, rx1278_tgt, rx1278_pos, 4
    ne $S10, ucs4:"redo", rx1278_fail3525
    add rx1278_pos, 4
    nqp_rxpeek $I19, rx1278_bstack, rxcap1280_fail3533
    inc $I19
    set $I11, rx1278_bstack[$I19]
    repr_bind_attr_int rx1278_cur, rx1278_curclass, "$!pos", rx1278_pos
    $P11 = rx1278_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1278_pos)
    rx1278_cstack = rx1278_cur."!cursor_capture"($P11, "sym")
    goto rxcap1280_done3532
  rxcap1280_fail3533:
    goto rx1278_fail3525
  rxcap1280_done3532:
    .const 'Sub' $P5001 = 'cuid_222_1360256386.79' 
    capture_lex $P5001
    repr_bind_attr_int rx1278_cur, rx1278_curclass, "$!pos", rx1278_pos
    $P11 = rx1278_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1278_curclass, "$!pos"
    ge $I11, 0, rx1278_fail3525
    repr_bind_attr_int rx1278_cur, rx1278_curclass, "$!pos", rx1278_pos
    store_lex unicode:"$\x{a2}", rx1278_cur
    $P5002 = $P101."MATCH"()
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_407_1360256386.79' 
    capture_lex $P5003
    $P5004 = $P5003()
    rx1278_cur."!cursor_pass"(rx1278_pos, "term:sym<redo>", 'backtrack'=>1)
    .return (rx1278_cur)
  rx1278_restart3524:
    repr_get_attr_obj rx1278_cstack, rx1278_cur, rx1278_curclass, "$!cstack"
  rx1278_fail3525:
    unless rx1278_bstack, rx1278_done3523
    pop $I19, rx1278_bstack
    if_null rx1278_cstack, rx1278_cstack_done3528
    unless rx1278_cstack, rx1278_cstack_done3528
    dec $I19
    set $P11, rx1278_cstack[$I19]
  rx1278_cstack_done3528:
    pop rx1278_rep, rx1278_bstack
    pop rx1278_pos, rx1278_bstack
    pop $I19, rx1278_bstack
    lt rx1278_pos, -1, rx1278_done3523
    lt rx1278_pos, 0, rx1278_fail3525
    eq $I19, 0, rx1278_fail3525
    nqp_islist $I20, rx1278_cstack
    unless $I20, rx1278_jump3526
    elements $I18, rx1278_bstack
    le $I18, 0, rx1278_cut3527
    dec $I18
    set $I18, rx1278_bstack[$I18]
  rx1278_cut3527:
    assign rx1278_cstack, $I18
  rx1278_jump3526:
    jump $I19
  rx1278_done3523:
    rx1278_cur."!cursor_fail"()
    .return (rx1278_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_222_1360256386.79") :anon :lex :outer("cuid_221_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1281_tgt
    .local int rx1281_pos
    .local int rx1281_off
    .local int rx1281_eos
    .local int rx1281_rep
    .local pmc rx1281_cur
    .local pmc rx1281_curclass
    .local pmc rx1281_bstack
    .local pmc rx1281_cstack
    (rx1281_cur, rx1281_tgt, rx1281_pos, rx1281_curclass, rx1281_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1281_cur
    length rx1281_eos, rx1281_tgt
    eq $I19, 1, rx1281_restart3536
    gt rx1281_pos, rx1281_eos, rx1281_fail3537
    repr_get_attr_int $I11, self, rx1281_curclass, "$!from"
    ne $I11, -1, rxscan1282_done3543
    goto rxscan1282_scan3542
  rxscan1282_loop3541:
    inc rx1281_pos
    gt rx1281_pos, rx1281_eos, rx1281_fail3537
    repr_bind_attr_int rx1281_cur, rx1281_curclass, "$!from", rx1281_pos
  rxscan1282_scan3542:
    nqp_rxmark rx1281_bstack, rxscan1282_loop3541, rx1281_pos, 0
  rxscan1282_done3543:
    repr_bind_attr_int rx1281_cur, rx1281_curclass, "$!pos", rx1281_pos
    $P11 = rx1281_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1281_curclass, "$!pos"
    lt $I11, 0, rx1281_fail3537
    nqp_rxmark rx1281_bstack, rxsubrule1283_pass3544, -1, 0
  rxsubrule1283_pass3544:
    rx1281_cstack = rx1281_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx1281_pos, $P11, rx1281_curclass, "$!pos"
    rx1281_cur."!cursor_pass"(rx1281_pos, 'backtrack'=>1)
    .return (rx1281_cur)
  rx1281_restart3536:
    repr_get_attr_obj rx1281_cstack, rx1281_cur, rx1281_curclass, "$!cstack"
  rx1281_fail3537:
    unless rx1281_bstack, rx1281_done3535
    pop $I19, rx1281_bstack
    if_null rx1281_cstack, rx1281_cstack_done3540
    unless rx1281_cstack, rx1281_cstack_done3540
    dec $I19
    set $P11, rx1281_cstack[$I19]
  rx1281_cstack_done3540:
    pop rx1281_rep, rx1281_bstack
    pop rx1281_pos, rx1281_bstack
    pop $I19, rx1281_bstack
    lt rx1281_pos, -1, rx1281_done3535
    lt rx1281_pos, 0, rx1281_fail3537
    eq $I19, 0, rx1281_fail3537
    nqp_islist $I20, rx1281_cstack
    unless $I20, rx1281_jump3538
    elements $I18, rx1281_bstack
    le $I18, 0, rx1281_cut3539
    dec $I18
    set $I18, rx1281_bstack[$I18]
  rx1281_cut3539:
    assign rx1281_cstack, $I18
  rx1281_jump3538:
    jump $I19
  rx1281_done3535:
    rx1281_cur."!cursor_fail"()
    .return (rx1281_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_407_1360256386.79") :anon :lex :outer("cuid_221_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1380

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "smartmatch" :subid("cuid_223_1360256386.79") :anon :lex :outer("cuid_389_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1382
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$t", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3545
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5003
  fallback3545:
    set $P101, $P5002
    set $P5004, _lex_param_1[1]
    unless_null $P5004, fallback3546
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5005
  fallback3546:
    set _lex_param_1[0], $P5004
    set _lex_param_1[1], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_408_1360256386.79") :anon :lex :outer("cuid_369_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1388
    .const 'Sub' $P5013 = 'cuid_224_1360256386.79' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_225_1360256386.79' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_227_1360256386.79' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_228_1360256386.79' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_230_1360256386.79' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_231_1360256386.79' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_234_1360256386.79' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_237_1360256386.79' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_239_1360256386.79' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_241_1360256386.79' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_242_1360256386.79' 
    capture_lex $P5013 
    .const 'Sub' $P5013 = 'cuid_243_1360256386.79' 
    capture_lex $P5013 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_224_1360256386.79' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_225_1360256386.79' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_227_1360256386.79' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_228_1360256386.79' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_230_1360256386.79' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_231_1360256386.79' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_234_1360256386.79' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_237_1360256386.79' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_239_1360256386.79' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_241_1360256386.79' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_242_1360256386.79' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_243_1360256386.79' 
    capture_lex $P5012
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "rxstopper" :subid("cuid_224_1360256386.79") :anon :lex :outer("cuid_408_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1389
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1284_tgt
    .local int rx1284_pos
    .local int rx1284_off
    .local int rx1284_eos
    .local int rx1284_rep
    .local pmc rx1284_cur
    .local pmc rx1284_curclass
    .local pmc rx1284_bstack
    .local pmc rx1284_cstack
    (rx1284_cur, rx1284_tgt, rx1284_pos, rx1284_curclass, rx1284_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1284_cur
    length rx1284_eos, rx1284_tgt
    eq $I19, 1, rx1284_restart3549
    gt rx1284_pos, rx1284_eos, rx1284_fail3550
    repr_get_attr_int $I11, self, rx1284_curclass, "$!from"
    ne $I11, -1, rxscan1285_done3556
    goto rxscan1285_scan3555
  rxscan1285_loop3554:
    inc rx1284_pos
    gt rx1284_pos, rx1284_eos, rx1284_fail3550
    repr_bind_attr_int rx1284_cur, rx1284_curclass, "$!from", rx1284_pos
  rxscan1285_scan3555:
    nqp_rxmark rx1284_bstack, rxscan1285_loop3554, rx1284_pos, 0
  rxscan1285_done3556:
    ge rx1284_pos, rx1284_eos, rx1284_fail3550
    substr $S11, rx1284_tgt, rx1284_pos, 1
    index $I11, ucs4:"}/", $S11
    lt $I11, 0, rx1284_fail3550
    inc rx1284_pos
    rx1284_cur."!cursor_pass"(rx1284_pos, "rxstopper", 'backtrack'=>1)
    .return (rx1284_cur)
  rx1284_restart3549:
    repr_get_attr_obj rx1284_cstack, rx1284_cur, rx1284_curclass, "$!cstack"
  rx1284_fail3550:
    unless rx1284_bstack, rx1284_done3548
    pop $I19, rx1284_bstack
    if_null rx1284_cstack, rx1284_cstack_done3553
    unless rx1284_cstack, rx1284_cstack_done3553
    dec $I19
    set $P11, rx1284_cstack[$I19]
  rx1284_cstack_done3553:
    pop rx1284_rep, rx1284_bstack
    pop rx1284_pos, rx1284_bstack
    pop $I19, rx1284_bstack
    lt rx1284_pos, -1, rx1284_done3548
    lt rx1284_pos, 0, rx1284_fail3550
    eq $I19, 0, rx1284_fail3550
    nqp_islist $I20, rx1284_cstack
    unless $I20, rx1284_jump3551
    elements $I18, rx1284_bstack
    le $I18, 0, rx1284_cut3552
    dec $I18
    set $I18, rx1284_bstack[$I18]
  rx1284_cut3552:
    assign rx1284_cstack, $I18
  rx1284_jump3551:
    jump $I19
  rx1284_done3548:
    rx1284_cur."!cursor_fail"()
    .return (rx1284_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_225_1360256386.79") :anon :lex :outer("cuid_408_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1393
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_226_1360256386.79' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1286_tgt
    .local int rx1286_pos
    .local int rx1286_off
    .local int rx1286_eos
    .local int rx1286_rep
    .local pmc rx1286_cur
    .local pmc rx1286_curclass
    .local pmc rx1286_bstack
    .local pmc rx1286_cstack
    (rx1286_cur, rx1286_tgt, rx1286_pos, rx1286_curclass, rx1286_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1286_cur
    length rx1286_eos, rx1286_tgt
    eq $I19, 1, rx1286_restart3559
    gt rx1286_pos, rx1286_eos, rx1286_fail3560
    repr_get_attr_int $I11, self, rx1286_curclass, "$!from"
    ne $I11, -1, rxscan1287_done3566
    goto rxscan1287_scan3565
  rxscan1287_loop3564:
    inc rx1286_pos
    gt rx1286_pos, rx1286_eos, rx1286_fail3560
    repr_bind_attr_int rx1286_cur, rx1286_curclass, "$!from", rx1286_pos
  rxscan1287_scan3565:
    nqp_rxmark rx1286_bstack, rxscan1287_loop3564, rx1286_pos, 0
  rxscan1287_done3566:
    add $I11, rx1286_pos, 1
    gt $I11, rx1286_eos, rx1286_fail3560
    substr $S10, rx1286_tgt, rx1286_pos, 1
    ne $S10, ucs4:":", rx1286_fail3560
    add rx1286_pos, 1
    .const 'Sub' $P5001 = 'cuid_226_1360256386.79' 
    capture_lex $P5001
    repr_bind_attr_int rx1286_cur, rx1286_curclass, "$!pos", rx1286_pos
    $P11 = rx1286_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1286_curclass, "$!pos"
    lt $I11, 0, rx1286_fail3560
    repr_bind_attr_int rx1286_cur, rx1286_curclass, "$!pos", rx1286_pos
    $P11 = rx1286_cur."LANG"("MAIN", "statement")
    repr_get_attr_int $I11, $P11, rx1286_curclass, "$!pos"
    lt $I11, 0, rx1286_fail3560
    nqp_rxmark rx1286_bstack, rxsubrule1290_pass3577, -1, 0
  rxsubrule1290_pass3577:
    rx1286_cstack = rx1286_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1286_pos, $P11, rx1286_curclass, "$!pos"
    repr_bind_attr_int rx1286_cur, rx1286_curclass, "$!pos", rx1286_pos
    $P11 = rx1286_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1286_curclass, "$!pos"
    lt $I11, 0, rx1286_fail3560
    repr_get_attr_int rx1286_pos, $P11, rx1286_curclass, "$!pos"
    add $I11, rx1286_pos, 1
    gt $I11, rx1286_eos, rx1286_fail3560
    substr $S10, rx1286_tgt, rx1286_pos, 1
    ne $S10, ucs4:";", rx1286_fail3560
    add rx1286_pos, 1
    rx1286_cur."!cursor_pass"(rx1286_pos, "metachar:sym<:my>", 'backtrack'=>1)
    .return (rx1286_cur)
  rx1286_restart3559:
    repr_get_attr_obj rx1286_cstack, rx1286_cur, rx1286_curclass, "$!cstack"
  rx1286_fail3560:
    unless rx1286_bstack, rx1286_done3558
    pop $I19, rx1286_bstack
    if_null rx1286_cstack, rx1286_cstack_done3563
    unless rx1286_cstack, rx1286_cstack_done3563
    dec $I19
    set $P11, rx1286_cstack[$I19]
  rx1286_cstack_done3563:
    pop rx1286_rep, rx1286_bstack
    pop rx1286_pos, rx1286_bstack
    pop $I19, rx1286_bstack
    lt rx1286_pos, -1, rx1286_done3558
    lt rx1286_pos, 0, rx1286_fail3560
    eq $I19, 0, rx1286_fail3560
    nqp_islist $I20, rx1286_cstack
    unless $I20, rx1286_jump3561
    elements $I18, rx1286_bstack
    le $I18, 0, rx1286_cut3562
    dec $I18
    set $I18, rx1286_bstack[$I18]
  rx1286_cut3562:
    assign rx1286_cstack, $I18
  rx1286_jump3561:
    jump $I19
  rx1286_done3558:
    rx1286_cur."!cursor_fail"()
    .return (rx1286_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_226_1360256386.79") :anon :lex :outer("cuid_225_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1288_tgt
    .local int rx1288_pos
    .local int rx1288_off
    .local int rx1288_eos
    .local int rx1288_rep
    .local pmc rx1288_cur
    .local pmc rx1288_curclass
    .local pmc rx1288_bstack
    .local pmc rx1288_cstack
    (rx1288_cur, rx1288_tgt, rx1288_pos, rx1288_curclass, rx1288_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1288_cur
    length rx1288_eos, rx1288_tgt
    eq $I19, 1, rx1288_restart3569
    gt rx1288_pos, rx1288_eos, rx1288_fail3570
    repr_get_attr_int $I11, self, rx1288_curclass, "$!from"
    ne $I11, -1, rxscan1289_done3576
    goto rxscan1289_scan3575
  rxscan1289_loop3574:
    inc rx1288_pos
    gt rx1288_pos, rx1288_eos, rx1288_fail3570
    repr_bind_attr_int rx1288_cur, rx1288_curclass, "$!from", rx1288_pos
  rxscan1289_scan3575:
    nqp_rxmark rx1288_bstack, rxscan1289_loop3574, rx1288_pos, 0
  rxscan1289_done3576:
    add $I11, rx1288_pos, 2
    gt $I11, rx1288_eos, rx1288_fail3570
    substr $S10, rx1288_tgt, rx1288_pos, 2
    ne $S10, ucs4:"my", rx1288_fail3570
    add rx1288_pos, 2
    rx1288_cur."!cursor_pass"(rx1288_pos, 'backtrack'=>1)
    .return (rx1288_cur)
  rx1288_restart3569:
    repr_get_attr_obj rx1288_cstack, rx1288_cur, rx1288_curclass, "$!cstack"
  rx1288_fail3570:
    unless rx1288_bstack, rx1288_done3568
    pop $I19, rx1288_bstack
    if_null rx1288_cstack, rx1288_cstack_done3573
    unless rx1288_cstack, rx1288_cstack_done3573
    dec $I19
    set $P11, rx1288_cstack[$I19]
  rx1288_cstack_done3573:
    pop rx1288_rep, rx1288_bstack
    pop rx1288_pos, rx1288_bstack
    pop $I19, rx1288_bstack
    lt rx1288_pos, -1, rx1288_done3568
    lt rx1288_pos, 0, rx1288_fail3570
    eq $I19, 0, rx1288_fail3570
    nqp_islist $I20, rx1288_cstack
    unless $I20, rx1288_jump3571
    elements $I18, rx1288_bstack
    le $I18, 0, rx1288_cut3572
    dec $I18
    set $I18, rx1288_bstack[$I18]
  rx1288_cut3572:
    assign rx1288_cstack, $I18
  rx1288_jump3571:
    jump $I19
  rx1288_done3568:
    rx1288_cur."!cursor_fail"()
    .return (rx1288_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_227_1360256386.79") :anon :lex :outer("cuid_408_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1397
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1292_tgt
    .local int rx1292_pos
    .local int rx1292_off
    .local int rx1292_eos
    .local int rx1292_rep
    .local pmc rx1292_cur
    .local pmc rx1292_curclass
    .local pmc rx1292_bstack
    .local pmc rx1292_cstack
    (rx1292_cur, rx1292_tgt, rx1292_pos, rx1292_curclass, rx1292_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1292_cur
    length rx1292_eos, rx1292_tgt
    eq $I19, 1, rx1292_restart3581
    gt rx1292_pos, rx1292_eos, rx1292_fail3582
    repr_get_attr_int $I11, self, rx1292_curclass, "$!from"
    ne $I11, -1, rxscan1293_done3588
    goto rxscan1293_scan3587
  rxscan1293_loop3586:
    inc rx1292_pos
    gt rx1292_pos, rx1292_eos, rx1292_fail3582
    repr_bind_attr_int rx1292_cur, rx1292_curclass, "$!from", rx1292_pos
  rxscan1293_scan3587:
    nqp_rxmark rx1292_bstack, rxscan1293_loop3586, rx1292_pos, 0
  rxscan1293_done3588:
    ge rx1292_pos, rx1292_eos, rx1292_fail3582
    substr $S11, rx1292_tgt, rx1292_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1292_fail3582
    repr_bind_attr_int rx1292_cur, rx1292_curclass, "$!pos", rx1292_pos
    $P11 = rx1292_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1292_curclass, "$!pos"
    lt $I11, 0, rx1292_fail3582
    nqp_rxmark rx1292_bstack, rxsubrule1294_pass3589, -1, 0
  rxsubrule1294_pass3589:
    rx1292_cstack = rx1292_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1292_pos, $P11, rx1292_curclass, "$!pos"
    rx1292_cur."!cursor_pass"(rx1292_pos, "metachar:sym<{ }>", 'backtrack'=>1)
    .return (rx1292_cur)
  rx1292_restart3581:
    repr_get_attr_obj rx1292_cstack, rx1292_cur, rx1292_curclass, "$!cstack"
  rx1292_fail3582:
    unless rx1292_bstack, rx1292_done3580
    pop $I19, rx1292_bstack
    if_null rx1292_cstack, rx1292_cstack_done3585
    unless rx1292_cstack, rx1292_cstack_done3585
    dec $I19
    set $P11, rx1292_cstack[$I19]
  rx1292_cstack_done3585:
    pop rx1292_rep, rx1292_bstack
    pop rx1292_pos, rx1292_bstack
    pop $I19, rx1292_bstack
    lt rx1292_pos, -1, rx1292_done3580
    lt rx1292_pos, 0, rx1292_fail3582
    eq $I19, 0, rx1292_fail3582
    nqp_islist $I20, rx1292_cstack
    unless $I20, rx1292_jump3583
    elements $I18, rx1292_bstack
    le $I18, 0, rx1292_cut3584
    dec $I18
    set $I18, rx1292_bstack[$I18]
  rx1292_cut3584:
    assign rx1292_cstack, $I18
  rx1292_jump3583:
    jump $I19
  rx1292_done3580:
    rx1292_cur."!cursor_fail"()
    .return (rx1292_cur) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_228_1360256386.79") :anon :lex :outer("cuid_408_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1401
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_229_1360256386.79' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1295_tgt
    .local int rx1295_pos
    .local int rx1295_off
    .local int rx1295_eos
    .local int rx1295_rep
    .local pmc rx1295_cur
    .local pmc rx1295_curclass
    .local pmc rx1295_bstack
    .local pmc rx1295_cstack
    (rx1295_cur, rx1295_tgt, rx1295_pos, rx1295_curclass, rx1295_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1295_cur
    length rx1295_eos, rx1295_tgt
    eq $I19, 1, rx1295_restart3592
    gt rx1295_pos, rx1295_eos, rx1295_fail3593
    repr_get_attr_int $I11, self, rx1295_curclass, "$!from"
    ne $I11, -1, rxscan1296_done3599
    goto rxscan1296_scan3598
  rxscan1296_loop3597:
    inc rx1295_pos
    gt rx1295_pos, rx1295_eos, rx1295_fail3593
    repr_bind_attr_int rx1295_cur, rx1295_curclass, "$!from", rx1295_pos
  rxscan1296_scan3598:
    nqp_rxmark rx1295_bstack, rxscan1296_loop3597, rx1295_pos, 0
  rxscan1296_done3599:
    .const 'Sub' $P5001 = 'cuid_229_1360256386.79' 
    capture_lex $P5001
    repr_bind_attr_int rx1295_cur, rx1295_curclass, "$!pos", rx1295_pos
    $P11 = rx1295_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1295_curclass, "$!pos"
    lt $I11, 0, rx1295_fail3593
    repr_bind_attr_int rx1295_cur, rx1295_curclass, "$!pos", rx1295_pos
    $P11 = rx1295_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1295_curclass, "$!pos"
    lt $I11, 0, rx1295_fail3593
    nqp_rxmark rx1295_bstack, rxsubrule1301_pass3614, -1, 0
  rxsubrule1301_pass3614:
    rx1295_cstack = rx1295_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1295_pos, $P11, rx1295_curclass, "$!pos"
    rx1295_cur."!cursor_pass"(rx1295_pos, "metachar:sym<nqpvar>", 'backtrack'=>1)
    .return (rx1295_cur)
  rx1295_restart3592:
    repr_get_attr_obj rx1295_cstack, rx1295_cur, rx1295_curclass, "$!cstack"
  rx1295_fail3593:
    unless rx1295_bstack, rx1295_done3591
    pop $I19, rx1295_bstack
    if_null rx1295_cstack, rx1295_cstack_done3596
    unless rx1295_cstack, rx1295_cstack_done3596
    dec $I19
    set $P11, rx1295_cstack[$I19]
  rx1295_cstack_done3596:
    pop rx1295_rep, rx1295_bstack
    pop rx1295_pos, rx1295_bstack
    pop $I19, rx1295_bstack
    lt rx1295_pos, -1, rx1295_done3591
    lt rx1295_pos, 0, rx1295_fail3593
    eq $I19, 0, rx1295_fail3593
    nqp_islist $I20, rx1295_cstack
    unless $I20, rx1295_jump3594
    elements $I18, rx1295_bstack
    le $I18, 0, rx1295_cut3595
    dec $I18
    set $I18, rx1295_bstack[$I18]
  rx1295_cut3595:
    assign rx1295_cstack, $I18
  rx1295_jump3594:
    jump $I19
  rx1295_done3591:
    rx1295_cur."!cursor_fail"()
    .return (rx1295_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_229_1360256386.79") :anon :lex :outer("cuid_228_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1297_tgt
    .local int rx1297_pos
    .local int rx1297_off
    .local int rx1297_eos
    .local int rx1297_rep
    .local pmc rx1297_cur
    .local pmc rx1297_curclass
    .local pmc rx1297_bstack
    .local pmc rx1297_cstack
    (rx1297_cur, rx1297_tgt, rx1297_pos, rx1297_curclass, rx1297_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1297_cur
    length rx1297_eos, rx1297_tgt
    eq $I19, 1, rx1297_restart3602
    gt rx1297_pos, rx1297_eos, rx1297_fail3603
    repr_get_attr_int $I11, self, rx1297_curclass, "$!from"
    ne $I11, -1, rxscan1298_done3609
    goto rxscan1298_scan3608
  rxscan1298_loop3607:
    inc rx1297_pos
    gt rx1297_pos, rx1297_eos, rx1297_fail3603
    repr_bind_attr_int rx1297_cur, rx1297_curclass, "$!from", rx1297_pos
  rxscan1298_scan3608:
    nqp_rxmark rx1297_bstack, rxscan1298_loop3607, rx1297_pos, 0
  rxscan1298_done3609:
    repr_bind_attr_int rx1297_cur, rx1297_curclass, "$!pos", rx1297_pos
    $P11 = rx1297_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx1297_curclass, "$!pos"
    lt $I11, 0, rx1297_fail3603
    nqp_rxmark rx1297_bstack, rxsubrule1299_pass3610, -1, 0
  rxsubrule1299_pass3610:
    rx1297_cstack = rx1297_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx1297_pos, $P11, rx1297_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1300_03612
    nqp_push_label $P11, alt1300_13613
    nqp_rxmark rx1297_bstack, alt1300_end3611, -1, 0
    rx1297_cur."!alt"(rx1297_pos, "alt_nfa__39_1360256390.186", $P11)
    goto rx1297_fail3603
  alt1300_03612:
    ge rx1297_pos, rx1297_eos, rx1297_fail3603
    is_cclass $I11, .CCLASS_WORD, rx1297_tgt, rx1297_pos
    if $I11, rx1297_fail3603
    add rx1297_pos, 1
    ge rx1297_pos, rx1297_eos, rx1297_fail3603
    is_cclass $I11, .CCLASS_WORD, rx1297_tgt, rx1297_pos
    unless $I11, rx1297_fail3603
    add rx1297_pos, 1
    goto alt1300_end3611
  alt1300_13613:
    ge rx1297_pos, rx1297_eos, rx1297_fail3603
    is_cclass $I11, .CCLASS_WORD, rx1297_tgt, rx1297_pos
    unless $I11, rx1297_fail3603
    add rx1297_pos, 1
    goto alt1300_end3611
  alt1300_end3611:
    nqp_rxcommit rx1297_bstack, alt1300_end3611
    rx1297_cur."!cursor_pass"(rx1297_pos, 'backtrack'=>1)
    .return (rx1297_cur)
  rx1297_restart3602:
    repr_get_attr_obj rx1297_cstack, rx1297_cur, rx1297_curclass, "$!cstack"
  rx1297_fail3603:
    unless rx1297_bstack, rx1297_done3601
    pop $I19, rx1297_bstack
    if_null rx1297_cstack, rx1297_cstack_done3606
    unless rx1297_cstack, rx1297_cstack_done3606
    dec $I19
    set $P11, rx1297_cstack[$I19]
  rx1297_cstack_done3606:
    pop rx1297_rep, rx1297_bstack
    pop rx1297_pos, rx1297_bstack
    pop $I19, rx1297_bstack
    lt rx1297_pos, -1, rx1297_done3601
    lt rx1297_pos, 0, rx1297_fail3603
    eq $I19, 0, rx1297_fail3603
    nqp_islist $I20, rx1297_cstack
    unless $I20, rx1297_jump3604
    elements $I18, rx1297_bstack
    le $I18, 0, rx1297_cut3605
    dec $I18
    set $I18, rx1297_bstack[$I18]
  rx1297_cut3605:
    assign rx1297_cstack, $I18
  rx1297_jump3604:
    jump $I19
  rx1297_done3601:
    rx1297_cur."!cursor_fail"()
    .return (rx1297_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_230_1360256386.79") :anon :lex :outer("cuid_408_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1405
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1302_tgt
    .local int rx1302_pos
    .local int rx1302_off
    .local int rx1302_eos
    .local int rx1302_rep
    .local pmc rx1302_cur
    .local pmc rx1302_curclass
    .local pmc rx1302_bstack
    .local pmc rx1302_cstack
    (rx1302_cur, rx1302_tgt, rx1302_pos, rx1302_curclass, rx1302_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1302_cur
    length rx1302_eos, rx1302_tgt
    eq $I19, 1, rx1302_restart3617
    gt rx1302_pos, rx1302_eos, rx1302_fail3618
    repr_get_attr_int $I11, self, rx1302_curclass, "$!from"
    ne $I11, -1, rxscan1303_done3624
    goto rxscan1303_scan3623
  rxscan1303_loop3622:
    inc rx1302_pos
    gt rx1302_pos, rx1302_eos, rx1302_fail3618
    repr_bind_attr_int rx1302_cur, rx1302_curclass, "$!from", rx1302_pos
  rxscan1303_scan3623:
    nqp_rxmark rx1302_bstack, rxscan1303_loop3622, rx1302_pos, 0
  rxscan1303_done3624:
    ge rx1302_pos, rx1302_eos, rx1302_fail3618
    substr $S11, rx1302_tgt, rx1302_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1302_fail3618
    repr_bind_attr_int rx1302_cur, rx1302_curclass, "$!pos", rx1302_pos
    $P11 = rx1302_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1302_curclass, "$!pos"
    lt $I11, 0, rx1302_fail3618
    nqp_rxmark rx1302_bstack, rxsubrule1304_pass3625, -1, 0
  rxsubrule1304_pass3625:
    rx1302_cstack = rx1302_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1302_pos, $P11, rx1302_curclass, "$!pos"
    rx1302_cur."!cursor_pass"(rx1302_pos, "assertion:sym<{ }>", 'backtrack'=>1)
    .return (rx1302_cur)
  rx1302_restart3617:
    repr_get_attr_obj rx1302_cstack, rx1302_cur, rx1302_curclass, "$!cstack"
  rx1302_fail3618:
    unless rx1302_bstack, rx1302_done3616
    pop $I19, rx1302_bstack
    if_null rx1302_cstack, rx1302_cstack_done3621
    unless rx1302_cstack, rx1302_cstack_done3621
    dec $I19
    set $P11, rx1302_cstack[$I19]
  rx1302_cstack_done3621:
    pop rx1302_rep, rx1302_bstack
    pop rx1302_pos, rx1302_bstack
    pop $I19, rx1302_bstack
    lt rx1302_pos, -1, rx1302_done3616
    lt rx1302_pos, 0, rx1302_fail3618
    eq $I19, 0, rx1302_fail3618
    nqp_islist $I20, rx1302_cstack
    unless $I20, rx1302_jump3619
    elements $I18, rx1302_bstack
    le $I18, 0, rx1302_cut3620
    dec $I18
    set $I18, rx1302_bstack[$I18]
  rx1302_cut3620:
    assign rx1302_cstack, $I18
  rx1302_jump3619:
    jump $I19
  rx1302_done3616:
    rx1302_cur."!cursor_fail"()
    .return (rx1302_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_231_1360256386.79") :anon :lex :outer("cuid_408_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1409
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_232_1360256386.79' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_233_1360256386.79' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1305_tgt
    .local int rx1305_pos
    .local int rx1305_off
    .local int rx1305_eos
    .local int rx1305_rep
    .local pmc rx1305_cur
    .local pmc rx1305_curclass
    .local pmc rx1305_bstack
    .local pmc rx1305_cstack
    (rx1305_cur, rx1305_tgt, rx1305_pos, rx1305_curclass, rx1305_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1305_cur
    length rx1305_eos, rx1305_tgt
    eq $I19, 1, rx1305_restart3628
    gt rx1305_pos, rx1305_eos, rx1305_fail3629
    repr_get_attr_int $I11, self, rx1305_curclass, "$!from"
    ne $I11, -1, rxscan1306_done3635
    goto rxscan1306_scan3634
  rxscan1306_loop3633:
    inc rx1305_pos
    gt rx1305_pos, rx1305_eos, rx1305_fail3629
    repr_bind_attr_int rx1305_cur, rx1305_curclass, "$!from", rx1305_pos
  rxscan1306_scan3634:
    nqp_rxmark rx1305_bstack, rxscan1306_loop3633, rx1305_pos, 0
  rxscan1306_done3635:
    add $I11, rx1305_pos, 1
    gt $I11, rx1305_eos, rx1305_fail3629
    substr $S10, rx1305_tgt, rx1305_pos, 1
    ne $S10, ucs4:"?", rx1305_fail3629
    add rx1305_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1307_03637
    nqp_push_label $P11, alt1307_13648
    nqp_rxmark rx1305_bstack, alt1307_end3636, -1, 0
    rx1305_cur."!alt"(rx1305_pos, "alt_nfa__40_1360256390.211", $P11)
    goto rx1305_fail3629
  alt1307_03637:
    .const 'Sub' $P5001 = 'cuid_232_1360256386.79' 
    capture_lex $P5001
    repr_bind_attr_int rx1305_cur, rx1305_curclass, "$!pos", rx1305_pos
    $P11 = rx1305_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1305_curclass, "$!pos"
    lt $I11, 0, rx1305_fail3629
    goto alt1307_end3636
  alt1307_13648:
    .const 'Sub' $P5002 = 'cuid_233_1360256386.79' 
    capture_lex $P5002
    repr_bind_attr_int rx1305_cur, rx1305_curclass, "$!pos", rx1305_pos
    $P11 = rx1305_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1305_curclass, "$!pos"
    ge $I11, 0, rx1305_fail3629
    repr_bind_attr_int rx1305_cur, rx1305_curclass, "$!pos", rx1305_pos
    $P11 = rx1305_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1305_curclass, "$!pos"
    lt $I11, 0, rx1305_fail3629
    nqp_rxmark rx1305_bstack, rxsubrule1312_pass3659, -1, 0
  rxsubrule1312_pass3659:
    rx1305_cstack = rx1305_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1305_pos, $P11, rx1305_curclass, "$!pos"
    goto alt1307_end3636
  alt1307_end3636:
    nqp_rxcommit rx1305_bstack, alt1307_end3636
    rx1305_cur."!cursor_pass"(rx1305_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx1305_cur)
  rx1305_restart3628:
    repr_get_attr_obj rx1305_cstack, rx1305_cur, rx1305_curclass, "$!cstack"
  rx1305_fail3629:
    unless rx1305_bstack, rx1305_done3627
    pop $I19, rx1305_bstack
    if_null rx1305_cstack, rx1305_cstack_done3632
    unless rx1305_cstack, rx1305_cstack_done3632
    dec $I19
    set $P11, rx1305_cstack[$I19]
  rx1305_cstack_done3632:
    pop rx1305_rep, rx1305_bstack
    pop rx1305_pos, rx1305_bstack
    pop $I19, rx1305_bstack
    lt rx1305_pos, -1, rx1305_done3627
    lt rx1305_pos, 0, rx1305_fail3629
    eq $I19, 0, rx1305_fail3629
    nqp_islist $I20, rx1305_cstack
    unless $I20, rx1305_jump3630
    elements $I18, rx1305_bstack
    le $I18, 0, rx1305_cut3631
    dec $I18
    set $I18, rx1305_bstack[$I18]
  rx1305_cut3631:
    assign rx1305_cstack, $I18
  rx1305_jump3630:
    jump $I19
  rx1305_done3627:
    rx1305_cur."!cursor_fail"()
    .return (rx1305_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_232_1360256386.79") :anon :lex :outer("cuid_231_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1308_tgt
    .local int rx1308_pos
    .local int rx1308_off
    .local int rx1308_eos
    .local int rx1308_rep
    .local pmc rx1308_cur
    .local pmc rx1308_curclass
    .local pmc rx1308_bstack
    .local pmc rx1308_cstack
    (rx1308_cur, rx1308_tgt, rx1308_pos, rx1308_curclass, rx1308_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1308_cur
    length rx1308_eos, rx1308_tgt
    eq $I19, 1, rx1308_restart3640
    gt rx1308_pos, rx1308_eos, rx1308_fail3641
    repr_get_attr_int $I11, self, rx1308_curclass, "$!from"
    ne $I11, -1, rxscan1309_done3647
    goto rxscan1309_scan3646
  rxscan1309_loop3645:
    inc rx1308_pos
    gt rx1308_pos, rx1308_eos, rx1308_fail3641
    repr_bind_attr_int rx1308_cur, rx1308_curclass, "$!from", rx1308_pos
  rxscan1309_scan3646:
    nqp_rxmark rx1308_bstack, rxscan1309_loop3645, rx1308_pos, 0
  rxscan1309_done3647:
    add $I11, rx1308_pos, 1
    gt $I11, rx1308_eos, rx1308_fail3641
    substr $S10, rx1308_tgt, rx1308_pos, 1
    ne $S10, ucs4:">", rx1308_fail3641
    add rx1308_pos, 1
    rx1308_cur."!cursor_pass"(rx1308_pos, 'backtrack'=>1)
    .return (rx1308_cur)
  rx1308_restart3640:
    repr_get_attr_obj rx1308_cstack, rx1308_cur, rx1308_curclass, "$!cstack"
  rx1308_fail3641:
    unless rx1308_bstack, rx1308_done3639
    pop $I19, rx1308_bstack
    if_null rx1308_cstack, rx1308_cstack_done3644
    unless rx1308_cstack, rx1308_cstack_done3644
    dec $I19
    set $P11, rx1308_cstack[$I19]
  rx1308_cstack_done3644:
    pop rx1308_rep, rx1308_bstack
    pop rx1308_pos, rx1308_bstack
    pop $I19, rx1308_bstack
    lt rx1308_pos, -1, rx1308_done3639
    lt rx1308_pos, 0, rx1308_fail3641
    eq $I19, 0, rx1308_fail3641
    nqp_islist $I20, rx1308_cstack
    unless $I20, rx1308_jump3642
    elements $I18, rx1308_bstack
    le $I18, 0, rx1308_cut3643
    dec $I18
    set $I18, rx1308_bstack[$I18]
  rx1308_cut3643:
    assign rx1308_cstack, $I18
  rx1308_jump3642:
    jump $I19
  rx1308_done3639:
    rx1308_cur."!cursor_fail"()
    .return (rx1308_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_233_1360256386.79") :anon :lex :outer("cuid_231_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1310_tgt
    .local int rx1310_pos
    .local int rx1310_off
    .local int rx1310_eos
    .local int rx1310_rep
    .local pmc rx1310_cur
    .local pmc rx1310_curclass
    .local pmc rx1310_bstack
    .local pmc rx1310_cstack
    (rx1310_cur, rx1310_tgt, rx1310_pos, rx1310_curclass, rx1310_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1310_cur
    length rx1310_eos, rx1310_tgt
    eq $I19, 1, rx1310_restart3651
    gt rx1310_pos, rx1310_eos, rx1310_fail3652
    repr_get_attr_int $I11, self, rx1310_curclass, "$!from"
    ne $I11, -1, rxscan1311_done3658
    goto rxscan1311_scan3657
  rxscan1311_loop3656:
    inc rx1310_pos
    gt rx1310_pos, rx1310_eos, rx1310_fail3652
    repr_bind_attr_int rx1310_cur, rx1310_curclass, "$!from", rx1310_pos
  rxscan1311_scan3657:
    nqp_rxmark rx1310_bstack, rxscan1311_loop3656, rx1310_pos, 0
  rxscan1311_done3658:
    add $I11, rx1310_pos, 1
    gt $I11, rx1310_eos, rx1310_fail3652
    substr $S10, rx1310_tgt, rx1310_pos, 1
    ne $S10, ucs4:"{", rx1310_fail3652
    add rx1310_pos, 1
    rx1310_cur."!cursor_pass"(rx1310_pos, 'backtrack'=>1)
    .return (rx1310_cur)
  rx1310_restart3651:
    repr_get_attr_obj rx1310_cstack, rx1310_cur, rx1310_curclass, "$!cstack"
  rx1310_fail3652:
    unless rx1310_bstack, rx1310_done3650
    pop $I19, rx1310_bstack
    if_null rx1310_cstack, rx1310_cstack_done3655
    unless rx1310_cstack, rx1310_cstack_done3655
    dec $I19
    set $P11, rx1310_cstack[$I19]
  rx1310_cstack_done3655:
    pop rx1310_rep, rx1310_bstack
    pop rx1310_pos, rx1310_bstack
    pop $I19, rx1310_bstack
    lt rx1310_pos, -1, rx1310_done3650
    lt rx1310_pos, 0, rx1310_fail3652
    eq $I19, 0, rx1310_fail3652
    nqp_islist $I20, rx1310_cstack
    unless $I20, rx1310_jump3653
    elements $I18, rx1310_bstack
    le $I18, 0, rx1310_cut3654
    dec $I18
    set $I18, rx1310_bstack[$I18]
  rx1310_cut3654:
    assign rx1310_cstack, $I18
  rx1310_jump3653:
    jump $I19
  rx1310_done3650:
    rx1310_cur."!cursor_fail"()
    .return (rx1310_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_234_1360256386.79") :anon :lex :outer("cuid_408_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1410
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_235_1360256386.79' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_236_1360256386.79' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1313_tgt
    .local int rx1313_pos
    .local int rx1313_off
    .local int rx1313_eos
    .local int rx1313_rep
    .local pmc rx1313_cur
    .local pmc rx1313_curclass
    .local pmc rx1313_bstack
    .local pmc rx1313_cstack
    (rx1313_cur, rx1313_tgt, rx1313_pos, rx1313_curclass, rx1313_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1313_cur
    length rx1313_eos, rx1313_tgt
    eq $I19, 1, rx1313_restart3662
    gt rx1313_pos, rx1313_eos, rx1313_fail3663
    repr_get_attr_int $I11, self, rx1313_curclass, "$!from"
    ne $I11, -1, rxscan1314_done3669
    goto rxscan1314_scan3668
  rxscan1314_loop3667:
    inc rx1313_pos
    gt rx1313_pos, rx1313_eos, rx1313_fail3663
    repr_bind_attr_int rx1313_cur, rx1313_curclass, "$!from", rx1313_pos
  rxscan1314_scan3668:
    nqp_rxmark rx1313_bstack, rxscan1314_loop3667, rx1313_pos, 0
  rxscan1314_done3669:
    add $I11, rx1313_pos, 1
    gt $I11, rx1313_eos, rx1313_fail3663
    substr $S10, rx1313_tgt, rx1313_pos, 1
    ne $S10, ucs4:"!", rx1313_fail3663
    add rx1313_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1315_03671
    nqp_push_label $P11, alt1315_13682
    nqp_rxmark rx1313_bstack, alt1315_end3670, -1, 0
    rx1313_cur."!alt"(rx1313_pos, "alt_nfa__41_1360256390.225", $P11)
    goto rx1313_fail3663
  alt1315_03671:
    .const 'Sub' $P5001 = 'cuid_235_1360256386.79' 
    capture_lex $P5001
    repr_bind_attr_int rx1313_cur, rx1313_curclass, "$!pos", rx1313_pos
    $P11 = rx1313_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1313_curclass, "$!pos"
    lt $I11, 0, rx1313_fail3663
    goto alt1315_end3670
  alt1315_13682:
    .const 'Sub' $P5002 = 'cuid_236_1360256386.79' 
    capture_lex $P5002
    repr_bind_attr_int rx1313_cur, rx1313_curclass, "$!pos", rx1313_pos
    $P11 = rx1313_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1313_curclass, "$!pos"
    ge $I11, 0, rx1313_fail3663
    repr_bind_attr_int rx1313_cur, rx1313_curclass, "$!pos", rx1313_pos
    $P11 = rx1313_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1313_curclass, "$!pos"
    lt $I11, 0, rx1313_fail3663
    nqp_rxmark rx1313_bstack, rxsubrule1320_pass3693, -1, 0
  rxsubrule1320_pass3693:
    rx1313_cstack = rx1313_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1313_pos, $P11, rx1313_curclass, "$!pos"
    goto alt1315_end3670
  alt1315_end3670:
    nqp_rxcommit rx1313_bstack, alt1315_end3670
    rx1313_cur."!cursor_pass"(rx1313_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx1313_cur)
  rx1313_restart3662:
    repr_get_attr_obj rx1313_cstack, rx1313_cur, rx1313_curclass, "$!cstack"
  rx1313_fail3663:
    unless rx1313_bstack, rx1313_done3661
    pop $I19, rx1313_bstack
    if_null rx1313_cstack, rx1313_cstack_done3666
    unless rx1313_cstack, rx1313_cstack_done3666
    dec $I19
    set $P11, rx1313_cstack[$I19]
  rx1313_cstack_done3666:
    pop rx1313_rep, rx1313_bstack
    pop rx1313_pos, rx1313_bstack
    pop $I19, rx1313_bstack
    lt rx1313_pos, -1, rx1313_done3661
    lt rx1313_pos, 0, rx1313_fail3663
    eq $I19, 0, rx1313_fail3663
    nqp_islist $I20, rx1313_cstack
    unless $I20, rx1313_jump3664
    elements $I18, rx1313_bstack
    le $I18, 0, rx1313_cut3665
    dec $I18
    set $I18, rx1313_bstack[$I18]
  rx1313_cut3665:
    assign rx1313_cstack, $I18
  rx1313_jump3664:
    jump $I19
  rx1313_done3661:
    rx1313_cur."!cursor_fail"()
    .return (rx1313_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_235_1360256386.79") :anon :lex :outer("cuid_234_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1316_tgt
    .local int rx1316_pos
    .local int rx1316_off
    .local int rx1316_eos
    .local int rx1316_rep
    .local pmc rx1316_cur
    .local pmc rx1316_curclass
    .local pmc rx1316_bstack
    .local pmc rx1316_cstack
    (rx1316_cur, rx1316_tgt, rx1316_pos, rx1316_curclass, rx1316_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1316_cur
    length rx1316_eos, rx1316_tgt
    eq $I19, 1, rx1316_restart3674
    gt rx1316_pos, rx1316_eos, rx1316_fail3675
    repr_get_attr_int $I11, self, rx1316_curclass, "$!from"
    ne $I11, -1, rxscan1317_done3681
    goto rxscan1317_scan3680
  rxscan1317_loop3679:
    inc rx1316_pos
    gt rx1316_pos, rx1316_eos, rx1316_fail3675
    repr_bind_attr_int rx1316_cur, rx1316_curclass, "$!from", rx1316_pos
  rxscan1317_scan3680:
    nqp_rxmark rx1316_bstack, rxscan1317_loop3679, rx1316_pos, 0
  rxscan1317_done3681:
    add $I11, rx1316_pos, 1
    gt $I11, rx1316_eos, rx1316_fail3675
    substr $S10, rx1316_tgt, rx1316_pos, 1
    ne $S10, ucs4:">", rx1316_fail3675
    add rx1316_pos, 1
    rx1316_cur."!cursor_pass"(rx1316_pos, 'backtrack'=>1)
    .return (rx1316_cur)
  rx1316_restart3674:
    repr_get_attr_obj rx1316_cstack, rx1316_cur, rx1316_curclass, "$!cstack"
  rx1316_fail3675:
    unless rx1316_bstack, rx1316_done3673
    pop $I19, rx1316_bstack
    if_null rx1316_cstack, rx1316_cstack_done3678
    unless rx1316_cstack, rx1316_cstack_done3678
    dec $I19
    set $P11, rx1316_cstack[$I19]
  rx1316_cstack_done3678:
    pop rx1316_rep, rx1316_bstack
    pop rx1316_pos, rx1316_bstack
    pop $I19, rx1316_bstack
    lt rx1316_pos, -1, rx1316_done3673
    lt rx1316_pos, 0, rx1316_fail3675
    eq $I19, 0, rx1316_fail3675
    nqp_islist $I20, rx1316_cstack
    unless $I20, rx1316_jump3676
    elements $I18, rx1316_bstack
    le $I18, 0, rx1316_cut3677
    dec $I18
    set $I18, rx1316_bstack[$I18]
  rx1316_cut3677:
    assign rx1316_cstack, $I18
  rx1316_jump3676:
    jump $I19
  rx1316_done3673:
    rx1316_cur."!cursor_fail"()
    .return (rx1316_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_236_1360256386.79") :anon :lex :outer("cuid_234_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1318_tgt
    .local int rx1318_pos
    .local int rx1318_off
    .local int rx1318_eos
    .local int rx1318_rep
    .local pmc rx1318_cur
    .local pmc rx1318_curclass
    .local pmc rx1318_bstack
    .local pmc rx1318_cstack
    (rx1318_cur, rx1318_tgt, rx1318_pos, rx1318_curclass, rx1318_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1318_cur
    length rx1318_eos, rx1318_tgt
    eq $I19, 1, rx1318_restart3685
    gt rx1318_pos, rx1318_eos, rx1318_fail3686
    repr_get_attr_int $I11, self, rx1318_curclass, "$!from"
    ne $I11, -1, rxscan1319_done3692
    goto rxscan1319_scan3691
  rxscan1319_loop3690:
    inc rx1318_pos
    gt rx1318_pos, rx1318_eos, rx1318_fail3686
    repr_bind_attr_int rx1318_cur, rx1318_curclass, "$!from", rx1318_pos
  rxscan1319_scan3691:
    nqp_rxmark rx1318_bstack, rxscan1319_loop3690, rx1318_pos, 0
  rxscan1319_done3692:
    add $I11, rx1318_pos, 1
    gt $I11, rx1318_eos, rx1318_fail3686
    substr $S10, rx1318_tgt, rx1318_pos, 1
    ne $S10, ucs4:"{", rx1318_fail3686
    add rx1318_pos, 1
    rx1318_cur."!cursor_pass"(rx1318_pos, 'backtrack'=>1)
    .return (rx1318_cur)
  rx1318_restart3685:
    repr_get_attr_obj rx1318_cstack, rx1318_cur, rx1318_curclass, "$!cstack"
  rx1318_fail3686:
    unless rx1318_bstack, rx1318_done3684
    pop $I19, rx1318_bstack
    if_null rx1318_cstack, rx1318_cstack_done3689
    unless rx1318_cstack, rx1318_cstack_done3689
    dec $I19
    set $P11, rx1318_cstack[$I19]
  rx1318_cstack_done3689:
    pop rx1318_rep, rx1318_bstack
    pop rx1318_pos, rx1318_bstack
    pop $I19, rx1318_bstack
    lt rx1318_pos, -1, rx1318_done3684
    lt rx1318_pos, 0, rx1318_fail3686
    eq $I19, 0, rx1318_fail3686
    nqp_islist $I20, rx1318_cstack
    unless $I20, rx1318_jump3687
    elements $I18, rx1318_bstack
    le $I18, 0, rx1318_cut3688
    dec $I18
    set $I18, rx1318_bstack[$I18]
  rx1318_cut3688:
    assign rx1318_cstack, $I18
  rx1318_jump3687:
    jump $I19
  rx1318_done3684:
    rx1318_cur."!cursor_fail"()
    .return (rx1318_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_237_1360256386.79") :anon :lex :outer("cuid_408_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1412
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_238_1360256386.79' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1321_tgt
    .local int rx1321_pos
    .local int rx1321_off
    .local int rx1321_eos
    .local int rx1321_rep
    .local pmc rx1321_cur
    .local pmc rx1321_curclass
    .local pmc rx1321_bstack
    .local pmc rx1321_cstack
    (rx1321_cur, rx1321_tgt, rx1321_pos, rx1321_curclass, rx1321_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1321_cur
    length rx1321_eos, rx1321_tgt
    eq $I19, 1, rx1321_restart3696
    gt rx1321_pos, rx1321_eos, rx1321_fail3697
    repr_get_attr_int $I11, self, rx1321_curclass, "$!from"
    ne $I11, -1, rxscan1322_done3703
    goto rxscan1322_scan3702
  rxscan1322_loop3701:
    inc rx1321_pos
    gt rx1321_pos, rx1321_eos, rx1321_fail3697
    repr_bind_attr_int rx1321_cur, rx1321_curclass, "$!from", rx1321_pos
  rxscan1322_scan3702:
    nqp_rxmark rx1321_bstack, rxscan1322_loop3701, rx1321_pos, 0
  rxscan1322_done3703:
    nqp_rxmark rx1321_bstack, rxcap1323_fail3705, rx1321_pos, 0
    ge rx1321_pos, rx1321_eos, rx1321_fail3697
    substr $S11, rx1321_tgt, rx1321_pos, 1
    index $I11, ucs4:"?!", $S11
    lt $I11, 0, rx1321_fail3697
    inc rx1321_pos
    .const 'Sub' $P5001 = 'cuid_238_1360256386.79' 
    capture_lex $P5001
    repr_bind_attr_int rx1321_cur, rx1321_curclass, "$!pos", rx1321_pos
    $P11 = rx1321_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1321_curclass, "$!pos"
    lt $I11, 0, rx1321_fail3697
    nqp_rxpeek $I19, rx1321_bstack, rxcap1323_fail3705
    inc $I19
    set $I11, rx1321_bstack[$I19]
    repr_bind_attr_int rx1321_cur, rx1321_curclass, "$!pos", rx1321_pos
    $P11 = rx1321_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1321_pos)
    rx1321_cstack = rx1321_cur."!cursor_capture"($P11, "zw")
    goto rxcap1323_done3704
  rxcap1323_fail3705:
    goto rx1321_fail3697
  rxcap1323_done3704:
    repr_bind_attr_int rx1321_cur, rx1321_curclass, "$!pos", rx1321_pos
    $P11 = rx1321_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1321_curclass, "$!pos"
    lt $I11, 0, rx1321_fail3697
    nqp_rxmark rx1321_bstack, rxsubrule1326_pass3716, -1, 0
  rxsubrule1326_pass3716:
    rx1321_cstack = rx1321_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1321_pos, $P11, rx1321_curclass, "$!pos"
    rx1321_cur."!cursor_pass"(rx1321_pos, "assertion:sym<?{ }>", 'backtrack'=>1)
    .return (rx1321_cur)
  rx1321_restart3696:
    repr_get_attr_obj rx1321_cstack, rx1321_cur, rx1321_curclass, "$!cstack"
  rx1321_fail3697:
    unless rx1321_bstack, rx1321_done3695
    pop $I19, rx1321_bstack
    if_null rx1321_cstack, rx1321_cstack_done3700
    unless rx1321_cstack, rx1321_cstack_done3700
    dec $I19
    set $P11, rx1321_cstack[$I19]
  rx1321_cstack_done3700:
    pop rx1321_rep, rx1321_bstack
    pop rx1321_pos, rx1321_bstack
    pop $I19, rx1321_bstack
    lt rx1321_pos, -1, rx1321_done3695
    lt rx1321_pos, 0, rx1321_fail3697
    eq $I19, 0, rx1321_fail3697
    nqp_islist $I20, rx1321_cstack
    unless $I20, rx1321_jump3698
    elements $I18, rx1321_bstack
    le $I18, 0, rx1321_cut3699
    dec $I18
    set $I18, rx1321_bstack[$I18]
  rx1321_cut3699:
    assign rx1321_cstack, $I18
  rx1321_jump3698:
    jump $I19
  rx1321_done3695:
    rx1321_cur."!cursor_fail"()
    .return (rx1321_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_238_1360256386.79") :anon :lex :outer("cuid_237_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1324_tgt
    .local int rx1324_pos
    .local int rx1324_off
    .local int rx1324_eos
    .local int rx1324_rep
    .local pmc rx1324_cur
    .local pmc rx1324_curclass
    .local pmc rx1324_bstack
    .local pmc rx1324_cstack
    (rx1324_cur, rx1324_tgt, rx1324_pos, rx1324_curclass, rx1324_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1324_cur
    length rx1324_eos, rx1324_tgt
    eq $I19, 1, rx1324_restart3708
    gt rx1324_pos, rx1324_eos, rx1324_fail3709
    repr_get_attr_int $I11, self, rx1324_curclass, "$!from"
    ne $I11, -1, rxscan1325_done3715
    goto rxscan1325_scan3714
  rxscan1325_loop3713:
    inc rx1324_pos
    gt rx1324_pos, rx1324_eos, rx1324_fail3709
    repr_bind_attr_int rx1324_cur, rx1324_curclass, "$!from", rx1324_pos
  rxscan1325_scan3714:
    nqp_rxmark rx1324_bstack, rxscan1325_loop3713, rx1324_pos, 0
  rxscan1325_done3715:
    add $I11, rx1324_pos, 1
    gt $I11, rx1324_eos, rx1324_fail3709
    substr $S10, rx1324_tgt, rx1324_pos, 1
    ne $S10, ucs4:"{", rx1324_fail3709
    add rx1324_pos, 1
    rx1324_cur."!cursor_pass"(rx1324_pos, 'backtrack'=>1)
    .return (rx1324_cur)
  rx1324_restart3708:
    repr_get_attr_obj rx1324_cstack, rx1324_cur, rx1324_curclass, "$!cstack"
  rx1324_fail3709:
    unless rx1324_bstack, rx1324_done3707
    pop $I19, rx1324_bstack
    if_null rx1324_cstack, rx1324_cstack_done3712
    unless rx1324_cstack, rx1324_cstack_done3712
    dec $I19
    set $P11, rx1324_cstack[$I19]
  rx1324_cstack_done3712:
    pop rx1324_rep, rx1324_bstack
    pop rx1324_pos, rx1324_bstack
    pop $I19, rx1324_bstack
    lt rx1324_pos, -1, rx1324_done3707
    lt rx1324_pos, 0, rx1324_fail3709
    eq $I19, 0, rx1324_fail3709
    nqp_islist $I20, rx1324_cstack
    unless $I20, rx1324_jump3710
    elements $I18, rx1324_bstack
    le $I18, 0, rx1324_cut3711
    dec $I18
    set $I18, rx1324_bstack[$I18]
  rx1324_cut3711:
    assign rx1324_cstack, $I18
  rx1324_jump3710:
    jump $I19
  rx1324_done3707:
    rx1324_cur."!cursor_fail"()
    .return (rx1324_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_239_1360256386.79") :anon :lex :outer("cuid_408_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1416
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_240_1360256386.79' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1327_tgt
    .local int rx1327_pos
    .local int rx1327_off
    .local int rx1327_eos
    .local int rx1327_rep
    .local pmc rx1327_cur
    .local pmc rx1327_curclass
    .local pmc rx1327_bstack
    .local pmc rx1327_cstack
    (rx1327_cur, rx1327_tgt, rx1327_pos, rx1327_curclass, rx1327_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1327_cur
    length rx1327_eos, rx1327_tgt
    eq $I19, 1, rx1327_restart3719
    gt rx1327_pos, rx1327_eos, rx1327_fail3720
    repr_get_attr_int $I11, self, rx1327_curclass, "$!from"
    ne $I11, -1, rxscan1328_done3726
    goto rxscan1328_scan3725
  rxscan1328_loop3724:
    inc rx1327_pos
    gt rx1327_pos, rx1327_eos, rx1327_fail3720
    repr_bind_attr_int rx1327_cur, rx1327_curclass, "$!from", rx1327_pos
  rxscan1328_scan3725:
    nqp_rxmark rx1327_bstack, rxscan1328_loop3724, rx1327_pos, 0
  rxscan1328_done3726:
    repr_bind_attr_int rx1327_cur, rx1327_curclass, "$!pos", rx1327_pos
    $P11 = rx1327_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1327_curclass, "$!pos"
    lt $I11, 0, rx1327_fail3720
    nqp_rxmark rx1327_bstack, rxsubrule1329_pass3727, -1, 0
  rxsubrule1329_pass3727:
    rx1327_cstack = rx1327_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx1327_pos, $P11, rx1327_curclass, "$!pos"
    nqp_rxmark rx1327_bstack, rxquantr1330_done3729, rx1327_pos, 0
  rxquantr1330_loop3728:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1331_03731
    nqp_push_label $P11, alt1331_13742
    nqp_push_label $P11, alt1331_23744
    nqp_push_label $P11, alt1331_33746
    nqp_push_label $P11, alt1331_43748
    nqp_rxmark rx1327_bstack, alt1331_end3730, -1, 0
    rx1327_cur."!alt"(rx1327_pos, "alt_nfa__42_1360256390.258", $P11)
    goto rx1327_fail3720
  alt1331_03731:
    .const 'Sub' $P5001 = 'cuid_240_1360256386.79' 
    capture_lex $P5001
    repr_bind_attr_int rx1327_cur, rx1327_curclass, "$!pos", rx1327_pos
    $P11 = rx1327_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1327_curclass, "$!pos"
    lt $I11, 0, rx1327_fail3720
    goto alt1331_end3730
  alt1331_13742:
    add $I11, rx1327_pos, 1
    gt $I11, rx1327_eos, rx1327_fail3720
    substr $S10, rx1327_tgt, rx1327_pos, 1
    ne $S10, ucs4:"=", rx1327_fail3720
    add rx1327_pos, 1
    repr_bind_attr_int rx1327_cur, rx1327_curclass, "$!pos", rx1327_pos
    $P11 = rx1327_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1327_curclass, "$!pos"
    lt $I11, 0, rx1327_fail3720
    nqp_rxmark rx1327_bstack, rxsubrule1334_pass3743, -1, 0
  rxsubrule1334_pass3743:
    rx1327_cstack = rx1327_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1327_pos, $P11, rx1327_curclass, "$!pos"
    goto alt1331_end3730
  alt1331_23744:
    add $I11, rx1327_pos, 1
    gt $I11, rx1327_eos, rx1327_fail3720
    substr $S10, rx1327_tgt, rx1327_pos, 1
    ne $S10, ucs4:":", rx1327_fail3720
    add rx1327_pos, 1
    repr_bind_attr_int rx1327_cur, rx1327_curclass, "$!pos", rx1327_pos
    $P11 = rx1327_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1327_curclass, "$!pos"
    lt $I11, 0, rx1327_fail3720
    nqp_rxmark rx1327_bstack, rxsubrule1335_pass3745, -1, 0
  rxsubrule1335_pass3745:
    rx1327_cstack = rx1327_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1327_pos, $P11, rx1327_curclass, "$!pos"
    goto alt1331_end3730
  alt1331_33746:
    add $I11, rx1327_pos, 1
    gt $I11, rx1327_eos, rx1327_fail3720
    substr $S10, rx1327_tgt, rx1327_pos, 1
    ne $S10, ucs4:"(", rx1327_fail3720
    add rx1327_pos, 1
    repr_bind_attr_int rx1327_cur, rx1327_curclass, "$!pos", rx1327_pos
    $P11 = rx1327_cur."LANG"("MAIN", "arglist")
    repr_get_attr_int $I11, $P11, rx1327_curclass, "$!pos"
    lt $I11, 0, rx1327_fail3720
    nqp_rxmark rx1327_bstack, rxsubrule1336_pass3747, -1, 0
  rxsubrule1336_pass3747:
    rx1327_cstack = rx1327_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1327_pos, $P11, rx1327_curclass, "$!pos"
    add $I11, rx1327_pos, 1
    gt $I11, rx1327_eos, rx1327_fail3720
    substr $S10, rx1327_tgt, rx1327_pos, 1
    ne $S10, ucs4:")", rx1327_fail3720
    add rx1327_pos, 1
    goto alt1331_end3730
  alt1331_43748:
    repr_bind_attr_int rx1327_cur, rx1327_curclass, "$!pos", rx1327_pos
    $P11 = rx1327_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx1327_curclass, "$!pos"
    lt $I11, 0, rx1327_fail3720
    repr_get_attr_int rx1327_pos, $P11, rx1327_curclass, "$!pos"
    repr_bind_attr_int rx1327_cur, rx1327_curclass, "$!pos", rx1327_pos
    $P11 = rx1327_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx1327_curclass, "$!pos"
    lt $I11, 0, rx1327_fail3720
    nqp_rxmark rx1327_bstack, rxsubrule1338_pass3750, -1, 0
  rxsubrule1338_pass3750:
    rx1327_cstack = rx1327_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx1327_pos, $P11, rx1327_curclass, "$!pos"
    goto alt1331_end3730
  alt1331_end3730:
    nqp_rxpeek $I19, rx1327_bstack, rxquantr1330_done3729
    inc $I19
    inc $I19
    set rx1327_rep, rx1327_bstack[$I19]
    nqp_rxcommit rx1327_bstack, rxquantr1330_done3729
    inc rx1327_rep
  rxquantr1330_done3729:
    rx1327_cur."!cursor_pass"(rx1327_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx1327_cur)
  rx1327_restart3719:
    repr_get_attr_obj rx1327_cstack, rx1327_cur, rx1327_curclass, "$!cstack"
  rx1327_fail3720:
    unless rx1327_bstack, rx1327_done3718
    pop $I19, rx1327_bstack
    if_null rx1327_cstack, rx1327_cstack_done3723
    unless rx1327_cstack, rx1327_cstack_done3723
    dec $I19
    set $P11, rx1327_cstack[$I19]
  rx1327_cstack_done3723:
    pop rx1327_rep, rx1327_bstack
    pop rx1327_pos, rx1327_bstack
    pop $I19, rx1327_bstack
    lt rx1327_pos, -1, rx1327_done3718
    lt rx1327_pos, 0, rx1327_fail3720
    eq $I19, 0, rx1327_fail3720
    nqp_islist $I20, rx1327_cstack
    unless $I20, rx1327_jump3721
    elements $I18, rx1327_bstack
    le $I18, 0, rx1327_cut3722
    dec $I18
    set $I18, rx1327_bstack[$I18]
  rx1327_cut3722:
    assign rx1327_cstack, $I18
  rx1327_jump3721:
    jump $I19
  rx1327_done3718:
    rx1327_cur."!cursor_fail"()
    .return (rx1327_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_240_1360256386.79") :anon :lex :outer("cuid_239_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1332_tgt
    .local int rx1332_pos
    .local int rx1332_off
    .local int rx1332_eos
    .local int rx1332_rep
    .local pmc rx1332_cur
    .local pmc rx1332_curclass
    .local pmc rx1332_bstack
    .local pmc rx1332_cstack
    (rx1332_cur, rx1332_tgt, rx1332_pos, rx1332_curclass, rx1332_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1332_cur
    length rx1332_eos, rx1332_tgt
    eq $I19, 1, rx1332_restart3734
    gt rx1332_pos, rx1332_eos, rx1332_fail3735
    repr_get_attr_int $I11, self, rx1332_curclass, "$!from"
    ne $I11, -1, rxscan1333_done3741
    goto rxscan1333_scan3740
  rxscan1333_loop3739:
    inc rx1332_pos
    gt rx1332_pos, rx1332_eos, rx1332_fail3735
    repr_bind_attr_int rx1332_cur, rx1332_curclass, "$!from", rx1332_pos
  rxscan1333_scan3740:
    nqp_rxmark rx1332_bstack, rxscan1333_loop3739, rx1332_pos, 0
  rxscan1333_done3741:
    add $I11, rx1332_pos, 1
    gt $I11, rx1332_eos, rx1332_fail3735
    substr $S10, rx1332_tgt, rx1332_pos, 1
    ne $S10, ucs4:">", rx1332_fail3735
    add rx1332_pos, 1
    rx1332_cur."!cursor_pass"(rx1332_pos, 'backtrack'=>1)
    .return (rx1332_cur)
  rx1332_restart3734:
    repr_get_attr_obj rx1332_cstack, rx1332_cur, rx1332_curclass, "$!cstack"
  rx1332_fail3735:
    unless rx1332_bstack, rx1332_done3733
    pop $I19, rx1332_bstack
    if_null rx1332_cstack, rx1332_cstack_done3738
    unless rx1332_cstack, rx1332_cstack_done3738
    dec $I19
    set $P11, rx1332_cstack[$I19]
  rx1332_cstack_done3738:
    pop rx1332_rep, rx1332_bstack
    pop rx1332_pos, rx1332_bstack
    pop $I19, rx1332_bstack
    lt rx1332_pos, -1, rx1332_done3733
    lt rx1332_pos, 0, rx1332_fail3735
    eq $I19, 0, rx1332_fail3735
    nqp_islist $I20, rx1332_cstack
    unless $I20, rx1332_jump3736
    elements $I18, rx1332_bstack
    le $I18, 0, rx1332_cut3737
    dec $I18
    set $I18, rx1332_bstack[$I18]
  rx1332_cut3737:
    assign rx1332_cstack, $I18
  rx1332_jump3736:
    jump $I19
  rx1332_done3733:
    rx1332_cur."!cursor_fail"()
    .return (rx1332_cur) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_241_1360256386.79") :anon :lex :outer("cuid_408_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1427
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1339_tgt
    .local int rx1339_pos
    .local int rx1339_off
    .local int rx1339_eos
    .local int rx1339_rep
    .local pmc rx1339_cur
    .local pmc rx1339_curclass
    .local pmc rx1339_bstack
    .local pmc rx1339_cstack
    (rx1339_cur, rx1339_tgt, rx1339_pos, rx1339_curclass, rx1339_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1339_cur
    length rx1339_eos, rx1339_tgt
    eq $I19, 1, rx1339_restart3753
    gt rx1339_pos, rx1339_eos, rx1339_fail3754
    repr_get_attr_int $I11, self, rx1339_curclass, "$!from"
    ne $I11, -1, rxscan1340_done3760
    goto rxscan1340_scan3759
  rxscan1340_loop3758:
    inc rx1339_pos
    gt rx1339_pos, rx1339_eos, rx1339_fail3754
    repr_bind_attr_int rx1339_cur, rx1339_curclass, "$!from", rx1339_pos
  rxscan1340_scan3759:
    nqp_rxmark rx1339_bstack, rxscan1340_loop3758, rx1339_pos, 0
  rxscan1340_done3760:
    ge rx1339_pos, rx1339_eos, rx1339_fail3754
    substr $S11, rx1339_tgt, rx1339_pos, 1
    index $I11, ucs4:"$@", $S11
    lt $I11, 0, rx1339_fail3754
    repr_bind_attr_int rx1339_cur, rx1339_curclass, "$!pos", rx1339_pos
    $P11 = rx1339_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1339_curclass, "$!pos"
    lt $I11, 0, rx1339_fail3754
    nqp_rxmark rx1339_bstack, rxsubrule1341_pass3761, -1, 0
  rxsubrule1341_pass3761:
    rx1339_cstack = rx1339_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1339_pos, $P11, rx1339_curclass, "$!pos"
    rx1339_cur."!cursor_pass"(rx1339_pos, "assertion:sym<var>", 'backtrack'=>1)
    .return (rx1339_cur)
  rx1339_restart3753:
    repr_get_attr_obj rx1339_cstack, rx1339_cur, rx1339_curclass, "$!cstack"
  rx1339_fail3754:
    unless rx1339_bstack, rx1339_done3752
    pop $I19, rx1339_bstack
    if_null rx1339_cstack, rx1339_cstack_done3757
    unless rx1339_cstack, rx1339_cstack_done3757
    dec $I19
    set $P11, rx1339_cstack[$I19]
  rx1339_cstack_done3757:
    pop rx1339_rep, rx1339_bstack
    pop rx1339_pos, rx1339_bstack
    pop $I19, rx1339_bstack
    lt rx1339_pos, -1, rx1339_done3752
    lt rx1339_pos, 0, rx1339_fail3754
    eq $I19, 0, rx1339_fail3754
    nqp_islist $I20, rx1339_cstack
    unless $I20, rx1339_jump3755
    elements $I18, rx1339_bstack
    le $I18, 0, rx1339_cut3756
    dec $I18
    set $I18, rx1339_bstack[$I18]
  rx1339_cut3756:
    assign rx1339_cstack, $I18
  rx1339_jump3755:
    jump $I19
  rx1339_done3752:
    rx1339_cur."!cursor_fail"()
    .return (rx1339_cur) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_242_1360256386.79") :anon :lex :outer("cuid_408_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1431
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1342_tgt
    .local int rx1342_pos
    .local int rx1342_off
    .local int rx1342_eos
    .local int rx1342_rep
    .local pmc rx1342_cur
    .local pmc rx1342_curclass
    .local pmc rx1342_bstack
    .local pmc rx1342_cstack
    (rx1342_cur, rx1342_tgt, rx1342_pos, rx1342_curclass, rx1342_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1342_cur
    length rx1342_eos, rx1342_tgt
    eq $I19, 1, rx1342_restart3764
    gt rx1342_pos, rx1342_eos, rx1342_fail3765
    repr_get_attr_int $I11, self, rx1342_curclass, "$!from"
    ne $I11, -1, rxscan1343_done3771
    goto rxscan1343_scan3770
  rxscan1343_loop3769:
    inc rx1342_pos
    gt rx1342_pos, rx1342_eos, rx1342_fail3765
    repr_bind_attr_int rx1342_cur, rx1342_curclass, "$!from", rx1342_pos
  rxscan1343_scan3770:
    nqp_rxmark rx1342_bstack, rxscan1343_loop3769, rx1342_pos, 0
  rxscan1343_done3771:
    repr_bind_attr_int rx1342_cur, rx1342_curclass, "$!pos", rx1342_pos
    $P11 = rx1342_cur."LANG"("MAIN", "pblock")
    repr_get_attr_int $I11, $P11, rx1342_curclass, "$!pos"
    lt $I11, 0, rx1342_fail3765
    nqp_rxmark rx1342_bstack, rxsubrule1344_pass3772, -1, 0
  rxsubrule1344_pass3772:
    rx1342_cstack = rx1342_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1342_pos, $P11, rx1342_curclass, "$!pos"
    rx1342_cur."!cursor_pass"(rx1342_pos, "codeblock", 'backtrack'=>1)
    .return (rx1342_cur)
  rx1342_restart3764:
    repr_get_attr_obj rx1342_cstack, rx1342_cur, rx1342_curclass, "$!cstack"
  rx1342_fail3765:
    unless rx1342_bstack, rx1342_done3763
    pop $I19, rx1342_bstack
    if_null rx1342_cstack, rx1342_cstack_done3768
    unless rx1342_cstack, rx1342_cstack_done3768
    dec $I19
    set $P11, rx1342_cstack[$I19]
  rx1342_cstack_done3768:
    pop rx1342_rep, rx1342_bstack
    pop rx1342_pos, rx1342_bstack
    pop $I19, rx1342_bstack
    lt rx1342_pos, -1, rx1342_done3763
    lt rx1342_pos, 0, rx1342_fail3765
    eq $I19, 0, rx1342_fail3765
    nqp_islist $I20, rx1342_cstack
    unless $I20, rx1342_jump3766
    elements $I18, rx1342_bstack
    le $I18, 0, rx1342_cut3767
    dec $I18
    set $I18, rx1342_bstack[$I18]
  rx1342_cut3767:
    assign rx1342_cstack, $I18
  rx1342_jump3766:
    jump $I19
  rx1342_done3763:
    rx1342_cur."!cursor_fail"()
    .return (rx1342_cur) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_243_1360256386.79") :anon :lex :outer("cuid_408_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1435
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1345_tgt
    .local int rx1345_pos
    .local int rx1345_off
    .local int rx1345_eos
    .local int rx1345_rep
    .local pmc rx1345_cur
    .local pmc rx1345_curclass
    .local pmc rx1345_bstack
    .local pmc rx1345_cstack
    (rx1345_cur, rx1345_tgt, rx1345_pos, rx1345_curclass, rx1345_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1345_cur
    length rx1345_eos, rx1345_tgt
    eq $I19, 1, rx1345_restart3775
    gt rx1345_pos, rx1345_eos, rx1345_fail3776
    repr_get_attr_int $I11, self, rx1345_curclass, "$!from"
    ne $I11, -1, rxscan1346_done3782
    goto rxscan1346_scan3781
  rxscan1346_loop3780:
    inc rx1345_pos
    gt rx1345_pos, rx1345_eos, rx1345_fail3776
    repr_bind_attr_int rx1345_cur, rx1345_curclass, "$!from", rx1345_pos
  rxscan1346_scan3781:
    nqp_rxmark rx1345_bstack, rxscan1346_loop3780, rx1345_pos, 0
  rxscan1346_done3782:
    repr_bind_attr_int rx1345_cur, rx1345_curclass, "$!pos", rx1345_pos
    $P11 = rx1345_cur."LANG"("MAIN", "quote_EXPR")
    repr_get_attr_int $I11, $P11, rx1345_curclass, "$!pos"
    lt $I11, 0, rx1345_fail3776
    nqp_rxmark rx1345_bstack, rxsubrule1347_pass3783, -1, 0
  rxsubrule1347_pass3783:
    rx1345_cstack = rx1345_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1345_pos, $P11, rx1345_curclass, "$!pos"
    rx1345_cur."!cursor_pass"(rx1345_pos, "arg", 'backtrack'=>1)
    .return (rx1345_cur)
  rx1345_restart3775:
    repr_get_attr_obj rx1345_cstack, rx1345_cur, rx1345_curclass, "$!cstack"
  rx1345_fail3776:
    unless rx1345_bstack, rx1345_done3774
    pop $I19, rx1345_bstack
    if_null rx1345_cstack, rx1345_cstack_done3779
    unless rx1345_cstack, rx1345_cstack_done3779
    dec $I19
    set $P11, rx1345_cstack[$I19]
  rx1345_cstack_done3779:
    pop rx1345_rep, rx1345_bstack
    pop rx1345_pos, rx1345_bstack
    pop $I19, rx1345_bstack
    lt rx1345_pos, -1, rx1345_done3774
    lt rx1345_pos, 0, rx1345_fail3776
    eq $I19, 0, rx1345_fail3776
    nqp_islist $I20, rx1345_cstack
    unless $I20, rx1345_jump3777
    elements $I18, rx1345_bstack
    le $I18, 0, rx1345_cut3778
    dec $I18
    set $I18, rx1345_bstack[$I18]
  rx1345_cut3778:
    assign rx1345_cstack, $I18
  rx1345_jump3777:
    jump $I19
  rx1345_done3774:
    rx1345_cur."!cursor_fail"()
    .return (rx1345_cur) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_409_1360256386.79") :anon :lex :outer("cuid_369_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1446
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3785
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5003
  fallback3785:
    set $P101, $P5002
    nqp_get_sc_object $P5007, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3788
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5008
  fallback3788:
    type_check $I5001, $P101, $P5004
    if $I5001 goto unless1348_end3787 
.annotate 'line', 1448
    box $P5009, "Pre-increment can only work on a variable"
    die $P5009
  unless1348_end3787:
.annotate 'line', 1451
    nqp_get_sc_object $P5013, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback3789
    nqp_get_sc_object $P5014, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5014
  fallback3789:
.annotate 'line', 1454
    nqp_get_sc_object $P5018, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback3790
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5015, $P5019
  fallback3790:
.annotate 'line', 1457
    nqp_get_sc_object $P5023, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["IVal"]
    unless_null $P5020, fallback3791
    nqp_get_sc_object $P5024, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5020, $P5024
  fallback3791:
    $P5025 = $P5020."new"(1 :named("value"))
    $P5026 = $P5015."new"($P101, $P5025, "add_n" :named("op"))
    $P5027 = $P5010."new"($P101, $P5026, "bind" :named("op"))
    $P5028 = _lex_param_0."as_post"($P5027)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_410_1360256386.79") :anon :lex :outer("cuid_369_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1461
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3792
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5003
  fallback3792:
    set $P101, $P5002
    nqp_get_sc_object $P5007, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3795
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5008
  fallback3795:
    type_check $I5001, $P101, $P5004
    if $I5001 goto unless1349_end3794 
.annotate 'line', 1463
    box $P5009, "Pre-decrement can only work on a variable"
    die $P5009
  unless1349_end3794:
.annotate 'line', 1466
    nqp_get_sc_object $P5013, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback3796
    nqp_get_sc_object $P5014, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5014
  fallback3796:
.annotate 'line', 1469
    nqp_get_sc_object $P5018, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback3797
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5015, $P5019
  fallback3797:
.annotate 'line', 1472
    nqp_get_sc_object $P5023, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["IVal"]
    unless_null $P5020, fallback3798
    nqp_get_sc_object $P5024, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5020, $P5024
  fallback3798:
    $P5025 = $P5020."new"(1 :named("value"))
    $P5026 = $P5015."new"($P101, $P5025, "sub_n" :named("op"))
    $P5027 = $P5010."new"($P101, $P5026, "bind" :named("op"))
    $P5028 = _lex_param_0."as_post"($P5027)
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_411_1360256386.79") :anon :lex :outer("cuid_369_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1476
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3799
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5004
  fallback3799:
    set $P101, $P5003
.annotate 'line', 1478
    nqp_get_sc_object $P5008, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3800
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5005, $P5009
  fallback3800:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3803
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5015
  fallback3803:
    type_check $I5001, $P101, $P5011
    if $I5001 goto unless1350_end3802 
.annotate 'line', 1479
    box $P5016, "Post-increment can only work on a variable"
    die $P5016
  unless1350_end3802:
.annotate 'line', 1482
    nqp_get_sc_object $P5020, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmt"]
    unless_null $P5017, fallback3804
    nqp_get_sc_object $P5021, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5017, $P5021
  fallback3804:
.annotate 'line', 1484
    nqp_get_sc_object $P5025, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Op"]
    unless_null $P5022, fallback3805
    nqp_get_sc_object $P5026, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5022, $P5026
  fallback3805:
.annotate 'line', 1486
    nqp_get_sc_object $P5030, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback3806
    nqp_get_sc_object $P5031, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5027, $P5031
  fallback3806:
    $P5032 = $P101."returns"()
    $P5033 = $P5027."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"), $P5032 :named("returns"))
    $P5034 = $P5022."new"($P5033, $P101, "bind" :named("op"))
.annotate 'line', 1489
    nqp_get_sc_object $P5038, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Op"]
    unless_null $P5035, fallback3807
    nqp_get_sc_object $P5039, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5035, $P5039
  fallback3807:
.annotate 'line', 1492
    nqp_get_sc_object $P5043, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Op"]
    unless_null $P5040, fallback3808
    nqp_get_sc_object $P5044, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5040, $P5044
  fallback3808:
.annotate 'line', 1494
    nqp_get_sc_object $P5048, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["Var"]
    unless_null $P5045, fallback3809
    nqp_get_sc_object $P5049, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5045, $P5049
  fallback3809:
    $P5050 = $P101."returns"()
    $P5051 = $P5045."new"($P102 :named("name"), "local" :named("scope"), $P5050 :named("returns"))
.annotate 'line', 1495
    nqp_get_sc_object $P5055, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["IVal"]
    unless_null $P5052, fallback3810
    nqp_get_sc_object $P5056, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5052, $P5056
  fallback3810:
    $P5057 = $P5052."new"(1 :named("value"))
    $P5058 = $P5040."new"($P5051, $P5057, "add_n" :named("op"))
    $P5059 = $P5035."new"($P101, $P5058, "bind" :named("op"))
    $P5060 = $P5017."new"($P5034, $P5059, 0 :named("resultchild"))
    $P5061 = _lex_param_0."as_post"($P5060)
    .return ($P5061) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_412_1360256386.79") :anon :lex :outer("cuid_369_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1500
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3811
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5004
  fallback3811:
    set $P101, $P5003
.annotate 'line', 1502
    nqp_get_sc_object $P5008, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3812
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5005, $P5009
  fallback3812:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3815
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5015
  fallback3815:
    type_check $I5001, $P101, $P5011
    if $I5001 goto unless1351_end3814 
.annotate 'line', 1503
    box $P5016, "Post-decrement can only work on a variable"
    die $P5016
  unless1351_end3814:
.annotate 'line', 1506
    nqp_get_sc_object $P5020, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmt"]
    unless_null $P5017, fallback3816
    nqp_get_sc_object $P5021, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5017, $P5021
  fallback3816:
.annotate 'line', 1508
    nqp_get_sc_object $P5025, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Op"]
    unless_null $P5022, fallback3817
    nqp_get_sc_object $P5026, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5022, $P5026
  fallback3817:
.annotate 'line', 1510
    nqp_get_sc_object $P5030, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback3818
    nqp_get_sc_object $P5031, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5027, $P5031
  fallback3818:
    $P5032 = $P5027."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"))
    $P5033 = $P5022."new"($P5032, $P101, "bind" :named("op"))
.annotate 'line', 1513
    nqp_get_sc_object $P5037, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback3819
    nqp_get_sc_object $P5038, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5034, $P5038
  fallback3819:
.annotate 'line', 1516
    nqp_get_sc_object $P5042, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["Op"]
    unless_null $P5039, fallback3820
    nqp_get_sc_object $P5043, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5039, $P5043
  fallback3820:
.annotate 'line', 1518
    nqp_get_sc_object $P5047, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["Var"]
    unless_null $P5044, fallback3821
    nqp_get_sc_object $P5048, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5044, $P5048
  fallback3821:
    $P5049 = $P5044."new"($P102 :named("name"), "local" :named("scope"))
.annotate 'line', 1519
    nqp_get_sc_object $P5053, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["IVal"]
    unless_null $P5050, fallback3822
    nqp_get_sc_object $P5054, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5050, $P5054
  fallback3822:
    $P5055 = $P5050."new"(1 :named("value"))
    $P5056 = $P5039."new"($P5049, $P5055, "sub_n" :named("op"))
    $P5057 = $P5034."new"($P101, $P5056, "bind" :named("op"))
    $P5058 = $P5017."new"($P5033, $P5057, 0 :named("resultchild"))
    $P5059 = _lex_param_0."as_post"($P5058)
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_413_1360256386.79") :anon :lex :outer("cuid_369_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1524
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1525
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3823
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5002
  fallback3823:
    $P5003 = _lex_param_0."as_post"($P5001, "n" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_414_1360256386.79") :anon :lex :outer("cuid_369_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1528
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1529
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3824
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5002
  fallback3824:
    $P5003 = _lex_param_0."as_post"($P5001, "s" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_415_1360256386.79") :anon :lex :outer("cuid_369_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1532
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1533
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3825
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback3825:
.annotate 'line', 1535
    nqp_get_sc_object $P5009, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Op"]
    unless_null $P5006, fallback3826
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5010
  fallback3826:
    set $P5011, _lex_param_1[0]
    unless_null $P5011, fallback3827
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5012
  fallback3827:
    $P5013 = $P5006."new"($P5011, "where" :named("op"))
.annotate 'line', 1536
    nqp_get_sc_object $P5017, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Op"]
    unless_null $P5014, fallback3828
    nqp_get_sc_object $P5018, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5014, $P5018
  fallback3828:
    set $P5019, _lex_param_1[1]
    unless_null $P5019, fallback3829
    nqp_get_sc_object $P5020, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5019, $P5020
  fallback3829:
    $P5021 = $P5014."new"($P5019, "where" :named("op"))
    $P5022 = $P5001."new"($P5013, $P5021, "iseq_i" :named("op"))
    $P5023 = _lex_param_0."as_post"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_416_1360256386.79") :anon :lex :outer("cuid_369_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1540
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$res", $P101 
    .lex "$ops", $P102 
    .lex "$arg_post", $P103 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P103, $P5003
.annotate 'line', 1541
    find_dynamic_lex $P5004, "$*REGALLOC"
    unless_null $P5004, fallback3830
    nqp_get_sc_object $P5007, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$REGALLOC"]
    unless_null $P5005, fallback3831
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5005, $P5008
  fallback3831:
    unless_null $P5005, vivi_13523832
    die "Contextual $*REGALLOC not found"
    box $P5009, "Contextual $*REGALLOC not found"
    set $P5005, $P5009
  vivi_13523832:
    set $P5004, $P5005
  fallback3830:
    $P5010 = $P5004."fresh_i"()
    set $P101, $P5010
.annotate 'line', 1542
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5013, $P5014, "PIRT"
    get_who $P5012, $P5013
    set $P5011, $P5012["Ops"]
    unless_null $P5011, fallback3833
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5015
  fallback3833:
    $P5016 = $P5011."new"($P101 :named("result"))
    set $P102, $P5016
.annotate 'line', 1543
    set $P5017, _lex_param_1[0]
    unless_null $P5017, fallback3834
    nqp_get_sc_object $P5018, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5017, $P5018
  fallback3834:
    $P5019 = _lex_param_0."as_post"($P5017)
    set $P103, $P5019
.annotate 'line', 1544
    $P5020 = $P103."result"()
    $P5021 = _lex_param_0."infer_type"($P5020)
    set $S5002, $P5021
    downcase $S5001, $S5002
    iseq $I5001, $S5001, "i"
    unless $I5001 goto if1353_else3835 
.annotate 'line', 1545
    $P102."push"($P103)
.annotate 'line', 1546
    $P5022 = $P102."push_pirop"("not", $P101, $P103)
    goto if1353_end3836
  if1353_else3835:
.annotate 'line', 1548
.annotate 'line', 1549
    $P5023 = _lex_param_0."coerce"($P103, "P")
    set $P103, $P5023
.annotate 'line', 1550
    $P102."push"($P103)
.annotate 'line', 1551
    $P5024 = $P102."push_pirop"("isfalse", $P101, $P103)
  if1353_end3836:
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_418_1360256386.79") :anon :lex :outer("cuid_369_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1557
    .const 'Sub' $P5123 = 'cuid_417_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_421_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_424_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_425_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_428_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_430_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_431_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_432_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_434_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_435_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_440_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_244_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_245_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_246_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_247_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_248_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_249_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_250_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_251_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_252_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_253_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_254_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_255_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_256_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_257_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_258_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_259_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_260_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_261_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_262_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_263_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_264_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_265_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_266_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_267_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_268_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_269_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_270_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_271_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_272_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_273_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_274_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_275_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_276_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_277_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_278_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_279_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_280_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_281_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_282_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_283_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_284_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_285_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_286_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_287_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_288_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_289_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_290_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_291_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_292_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_293_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_294_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_295_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_296_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_297_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_298_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_299_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_300_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_301_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_302_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_303_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_304_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_305_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_306_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_307_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_308_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_309_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_310_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_311_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_312_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_313_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_314_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_315_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_316_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_317_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_318_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_319_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_320_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_321_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_322_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_323_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_324_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_325_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_326_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_327_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_328_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_329_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_330_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_331_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_332_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_333_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_334_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_335_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_336_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_337_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_338_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_339_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_340_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_341_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_342_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_343_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_344_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_345_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_346_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_347_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_348_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_349_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_350_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_351_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_352_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_353_1360256386.79' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_354_1360256386.79' 
    capture_lex $P5123 
    .lex "&xblock_immediate", $P101 
    .lex "&block_immediate", $P102 
    .lex "&default_for", $P103 
    .lex "&default_value_for_prim", $P104 
    .lex "&colonpair_str", $P105 
    .lex "&import_HOW_exports", $P106 
    .lex "&set_block_handler", $P107 
    .lex "&only_star_block", $P108 
    .lex "&attach_multi_signature", $P109 
    .lex "&wrap_return_handler", $P110 
    .lex "&lexical_package_lookup", $P111 
    .lex "$?PACKAGE", $P112 
    .lex "$?CLASS", $P113 
    .const 'Sub' $P5001 = 'cuid_417_1360256386.79' 
    capture_lex $P5001
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_421_1360256386.79' 
    capture_lex $P5002
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_424_1360256386.79' 
    capture_lex $P5003
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_425_1360256386.79' 
    capture_lex $P5004
    set $P104, $P5004
    .const 'Sub' $P5005 = 'cuid_428_1360256386.79' 
    capture_lex $P5005
    set $P105, $P5005
    .const 'Sub' $P5006 = 'cuid_430_1360256386.79' 
    capture_lex $P5006
    set $P106, $P5006
    .const 'Sub' $P5007 = 'cuid_431_1360256386.79' 
    capture_lex $P5007
    set $P107, $P5007
    .const 'Sub' $P5008 = 'cuid_432_1360256386.79' 
    capture_lex $P5008
    set $P108, $P5008
    .const 'Sub' $P5009 = 'cuid_434_1360256386.79' 
    capture_lex $P5009
    set $P109, $P5009
    .const 'Sub' $P5010 = 'cuid_435_1360256386.79' 
    capture_lex $P5010
    set $P110, $P5010
    .const 'Sub' $P5011 = 'cuid_440_1360256386.79' 
    capture_lex $P5011
    set $P111, $P5011
    .const 'Sub' $P5012 = 'cuid_244_1360256386.79' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_245_1360256386.79' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_246_1360256386.79' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_247_1360256386.79' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_248_1360256386.79' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_249_1360256386.79' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_250_1360256386.79' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_251_1360256386.79' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_252_1360256386.79' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_253_1360256386.79' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_254_1360256386.79' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_255_1360256386.79' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_256_1360256386.79' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_257_1360256386.79' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_258_1360256386.79' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_259_1360256386.79' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_260_1360256386.79' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_261_1360256386.79' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_262_1360256386.79' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_263_1360256386.79' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_264_1360256386.79' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_265_1360256386.79' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_266_1360256386.79' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_267_1360256386.79' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_268_1360256386.79' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_269_1360256386.79' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_270_1360256386.79' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_271_1360256386.79' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_272_1360256386.79' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_273_1360256386.79' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_274_1360256386.79' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_275_1360256386.79' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_276_1360256386.79' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_277_1360256386.79' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_278_1360256386.79' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_279_1360256386.79' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_280_1360256386.79' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_281_1360256386.79' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_282_1360256386.79' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_283_1360256386.79' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_284_1360256386.79' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_285_1360256386.79' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_286_1360256386.79' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_287_1360256386.79' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_288_1360256386.79' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_289_1360256386.79' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_290_1360256386.79' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_291_1360256386.79' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_292_1360256386.79' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_293_1360256386.79' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_294_1360256386.79' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_295_1360256386.79' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_296_1360256386.79' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_297_1360256386.79' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_298_1360256386.79' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_299_1360256386.79' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_300_1360256386.79' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_301_1360256386.79' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_302_1360256386.79' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_303_1360256386.79' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_304_1360256386.79' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_305_1360256386.79' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_306_1360256386.79' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_307_1360256386.79' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_308_1360256386.79' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_309_1360256386.79' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_310_1360256386.79' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_311_1360256386.79' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_312_1360256386.79' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_313_1360256386.79' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_314_1360256386.79' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_315_1360256386.79' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_316_1360256386.79' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_317_1360256386.79' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_318_1360256386.79' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_319_1360256386.79' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_320_1360256386.79' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_321_1360256386.79' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_322_1360256386.79' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_323_1360256386.79' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_324_1360256386.79' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_325_1360256386.79' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_326_1360256386.79' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_327_1360256386.79' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_328_1360256386.79' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_329_1360256386.79' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_330_1360256386.79' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_331_1360256386.79' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_332_1360256386.79' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_333_1360256386.79' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_334_1360256386.79' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_335_1360256386.79' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_336_1360256386.79' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_337_1360256386.79' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_338_1360256386.79' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_339_1360256386.79' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_340_1360256386.79' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_341_1360256386.79' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_342_1360256386.79' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_343_1360256386.79' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_344_1360256386.79' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_345_1360256386.79' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_346_1360256386.79' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_347_1360256386.79' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_348_1360256386.79' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_349_1360256386.79' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_350_1360256386.79' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_351_1360256386.79' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_352_1360256386.79' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_353_1360256386.79' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_354_1360256386.79' 
    capture_lex $P5122
    .return ($P111) 
.end
.HLL "nqp"
.namespace []
.sub "xblock_immediate" :subid("cuid_417_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1558
    .param pmc _lex_param_0 
    .lex "$xblock", _lex_param_0 
.annotate 'line', 1559
    set $P5001, _lex_param_0[1]
    unless_null $P5001, fallback3837
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5002
  fallback3837:
    $P5003 = "&block_immediate"($P5001)
    set _lex_param_0[1], $P5003
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "block_immediate" :subid("cuid_421_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1563
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_420_1360256386.79' 
    capture_lex $P5004 
    .lex "$block", _lex_param_0 
.annotate 'line', 1564
    _lex_param_0."blocktype"("immediate")
.annotate 'line', 1565
    $P5001 = _lex_param_0."symtable"()
    if $P5001 goto unless1354_end3839 
    .const 'Sub' $P5002 = 'cuid_420_1360256386.79' 
    capture_lex $P5002
    $P5003 = $P5002()
  unless1354_end3839:
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_420_1360256386.79") :anon :lex :outer("cuid_421_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1565
    .const 'Sub' $P5017 = 'cuid_419_1360256386.79' 
    capture_lex $P5017 
    .lex "$stmts", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 1566
    nqp_get_sc_object $P5005, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback3840
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5006
  fallback3840:
    find_lex $P5007, "$block"
    $P5008 = $P5007."node"()
    $P5009 = $P5002."new"($P5008 :named("node"))
    set $P101, $P5009
.annotate 'line', 1567
    find_lex $P5013, "$block"
    $P5014 = $P5013."list"()
    set $P5010, $P5014
    iter $P5012, $P5014
  for_next3841:
    unless $P5012, for_done3843
    shift $P5016, $P5012
  for_redo3842:
    .const 'Sub' $P5015 = 'cuid_419_1360256386.79' 
    capture_lex $P5015
    $P5010 = $P5015($P5016)
    goto for_next3841
  for_done3843:
    store_lex "$block", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_419_1360256386.79") :anon :lex :outer("cuid_420_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1567
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$stmts"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "default_for" :subid("cuid_424_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1573
    .param pmc _lex_param_0 
    .const 'Sub' $P5017 = 'cuid_423_1360256386.79' 
    capture_lex $P5017 
    .lex "$sigil", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1355_else3844 
.annotate 'line', 1574
.annotate 'line', 1575
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3846
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback3846:
    $P5006 = $P5001."new"("list" :named("op"))
    set $P5016, $P5006
    goto if1355_end3845
  if1355_else3844:
    set $S5002, _lex_param_0
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1356_else3847 
.annotate 'line', 1577
.annotate 'line', 1578
    nqp_get_sc_object $P5010, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback3849
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5011
  fallback3849:
    $P5012 = $P5007."new"("hash" :named("op"))
    set $P5015, $P5012
    goto if1356_end3848
  if1356_else3847:
    .const 'Sub' $P5013 = 'cuid_423_1360256386.79' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  if1356_end3848:
    set $P5016, $P5015
  if1355_end3845:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_423_1360256386.79") :anon :lex :outer("cuid_424_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1580
    .const 'Sub' $P5022 = 'cuid_422_1360256386.79' 
    capture_lex $P5022 
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_13613858
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 1582
    new $P5018, 'ExceptionHandler'
    set_label $P5018, catch_handler_13593855
    $P5018.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5018
.annotate 'line', 1583
    nqp_get_sc_object $P5005, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["WVal"]
    unless_null $P5002, fallback3850
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5006
  fallback3850:
    find_dynamic_lex $P5007, "$*W"
    unless_null $P5007, fallback3851
    nqp_get_sc_object $P5010, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$W"]
    unless_null $P5008, fallback3852
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5011
  fallback3852:
    unless_null $P5008, vivi_13573853
    die "Contextual $*W not found"
    box $P5012, "Contextual $*W not found"
    set $P5008, $P5012
  vivi_13573853:
    set $P5007, $P5008
  fallback3851:
    new $P5013, 'ResizablePMCArray'
    box $P5014, "NQPMu"
    push $P5013, $P5014
    $P5015 = $P5007."find_sym"($P5013)
    $P5016 = $P5002."new"($P5015 :named("value"))
    set $P101, $P5016
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5019, $P5017
    pop_eh 
    goto skip_handler_13583854
  catch_handler_13593855:
    .get_results ($P5018) 
    .const 'Sub' $P10001 = 'cuid_422_1360256386.79' 
    capture_lex $P10001
    $P10001($P5018)
    set $I10001, 1
    set $P5018["handled"], $I10001
    nqp_get_sc_object $P10002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    finalize $P5018
    pop_upto_eh $P5018
    pop_eh 
    set $P5019, $P10002
    goto skip_handler_13583854
  skip_handler_13583854:
    set $P5021, $P5019
    pop_eh 
    goto skip_handler_13603857
  catch_handler_13613858:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_13603857
  skip_handler_13603857:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_422_1360256386.79") :anon :lex :outer("cuid_423_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1584
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3856
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback3856:
    $P5006 = $P5001."new"("null" :named("op"))
    store_lex "$default", $P5006
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "default_value_for_prim" :subid("cuid_425_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1590
    .param pmc _lex_param_0 
    .lex "$prim", _lex_param_0 
    set $N5001, _lex_param_0
    set $N5002, 1
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if1362_else3859 
.annotate 'line', 1591
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["IVal"]
    unless_null $P5001, fallback3861
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback3861:
    $P5006 = $P5001."new"(0 :named("value"))
    set $P5020, $P5006
    goto if1362_end3860
  if1362_else3859:
    set $N5003, _lex_param_0
    set $N5004, 2
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1363_else3862 
.annotate 'line', 1592
    nqp_get_sc_object $P5010, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["NVal"]
    unless_null $P5007, fallback3864
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5011
  fallback3864:
    $P5012 = $P5007."new"(0.0 :named("value"))
    set $P5019, $P5012
    goto if1363_end3863
  if1363_else3862:
.annotate 'line', 1593
    nqp_get_sc_object $P5016, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["SVal"]
    unless_null $P5013, fallback3865
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5013, $P5017
  fallback3865:
    $P5018 = $P5013."new"("" :named("value"))
    set $P5019, $P5018
  if1363_end3863:
    set $P5020, $P5019
  if1362_end3860:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair_str" :subid("cuid_428_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1605
    .param pmc _lex_param_0 
    .const 'Sub' $P5010 = 'cuid_427_1360256386.79' 
    capture_lex $P5010 
    .lex "$ast", _lex_param_0 
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3868
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback3868:
    type_check $I5001, _lex_param_0, $P5001
    unless $I5001 goto if1364_else3866 
    .const 'Sub' $P5006 = 'cuid_427_1360256386.79' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5009, $P5007
    goto if1364_end3867
  if1364_else3866:
.annotate 'line', 1610
.annotate 'line', 1611
    $P5008 = _lex_param_0."value"()
    set $P5009, $P5008
  if1364_end3867:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_427_1360256386.79") :anon :lex :outer("cuid_428_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1606
    .const 'Sub' $P5009 = 'cuid_426_1360256386.79' 
    capture_lex $P5009 
    .lex "@parts", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 1608
    find_lex $P5005, "$ast"
    $P5006 = $P5005."list"()
    set $P5002, $P5006
    iter $P5004, $P5006
  for_next3869:
    unless $P5004, for_done3871
    shift $P5008, $P5004
  for_redo3870:
    .const 'Sub' $P5007 = 'cuid_426_1360256386.79' 
    capture_lex $P5007
    $P5002 = $P5007($P5008)
    goto for_next3869
  for_done3871:
    join $S5001, " ", $P101
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_426_1360256386.79") :anon :lex :outer("cuid_427_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1608
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "@parts"
    $P5002 = _lex_param_0."value"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "import_HOW_exports" :subid("cuid_430_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1796
    .param pmc _lex_param_0 
    .const 'Sub' $P5011 = 'cuid_429_1360256386.79' 
    capture_lex $P5011 
    .lex "$UNIT", _lex_param_0 
    exists $I5001, _lex_param_0["EXPORTHOW"]
    box $P5010, $I5001
    set $P5009, $P5010
    unless $I5001 goto if1365_end3873 
.annotate 'line', 1798
    set $P5005, _lex_param_0["EXPORTHOW"]
    unless_null $P5005, fallback3874
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5005, $P5006
  fallback3874:
    get_who $P5004, $P5005
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next3878:
    unless $P5003, for_done3880
    shift $P5008, $P5003
  for_redo3879:
    .const 'Sub' $P5007 = 'cuid_429_1360256386.79' 
    capture_lex $P5007
    $P5001 = $P5007($P5008)
    goto for_next3878
  for_done3880:
    set $P5009, $P5001
  if1365_end3873:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_429_1360256386.79") :anon :lex :outer("cuid_430_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1799
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_dynamic_lex $P5001, "%*HOW"
    unless_null $P5001, fallback3875
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HOW"]
    unless_null $P5002, fallback3876
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HOW"], $P5007
    set $P5002, $P5007
  fallback3876:
    unless_null $P5002, vivi_13663877
    die "Contextual %*HOW not found"
    box $P5008, "Contextual %*HOW not found"
    set $P5002, $P5008
  vivi_13663877:
    set $P5001, $P5002
  fallback3875:
.annotate 'line', 1800
    $P5009 = _lex_param_0."key"()
    set $S5001, $P5009
    $P5010 = _lex_param_0."value"()
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "set_block_handler" :subid("cuid_431_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1898
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$/", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$type", _lex_param_2 
    find_dynamic_lex $P5001, "%*HANDLERS"
    unless_null $P5001, fallback3883
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback3884
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback3884:
    unless_null $P5002, vivi_13683885
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_13683885:
    set $P5001, $P5002
  fallback3883:
    set $S5001, _lex_param_2
    exists $I5001, $P5001[$S5001]
    unless $I5001 goto if1367_end3882 
.annotate 'line', 1899
    set $S5004, _lex_param_2
    concat $S5003, "Duplicate ", $S5004
    concat $S5002, $S5003, " handler in block"
    box $P5009, $S5002
    die $P5009
  if1367_end3882:
.annotate 'line', 1902
    $P5010 = _lex_param_1."arity"()
    if $P5010 goto unless1369_end3887 
.annotate 'line', 1903
.annotate 'line', 1904
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback3888
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5015
  fallback3888:
.annotate 'line', 1905
    nqp_get_sc_object $P5019, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback3889
    nqp_get_sc_object $P5020, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5016, $P5020
  fallback3889:
    $P5021 = $P5016."new"("lexical" :named("scope"), "$!" :named("name"), "var" :named("decl"))
.annotate 'line', 1906
    nqp_get_sc_object $P5025, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Var"]
    unless_null $P5022, fallback3890
    nqp_get_sc_object $P5026, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5022, $P5026
  fallback3890:
    $P5027 = $P5022."new"("lexical" :named("scope"), "$_" :named("name"))
    $P5028 = $P5011."new"($P5021, $P5027, "bind" :named("op"))
    _lex_param_1."unshift"($P5028)
.annotate 'line', 1909
    nqp_get_sc_object $P5032, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Var"]
    unless_null $P5029, fallback3891
    nqp_get_sc_object $P5033, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5029, $P5033
  fallback3891:
    $P5034 = $P5029."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    _lex_param_1."unshift"($P5034)
.annotate 'line', 1910
    _lex_param_1."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1911
    _lex_param_1."symbol"("$!", "lexical" :named("scope"))
.annotate 'line', 1912
    $P5035 = _lex_param_1."arity"(1)
  unless1369_end3887:
.annotate 'line', 1914
    _lex_param_1."blocktype"("declaration")
    find_dynamic_lex $P5036, "%*HANDLERS"
    unless_null $P5036, fallback3892
    nqp_get_sc_object $P5039, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5038, $P5039
    set $P5037, $P5038["%HANDLERS"]
    unless_null $P5037, fallback3893
    nqp_get_sc_object $P5041, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5040, $P5041
    new $P5042, 'Hash'
    set $P5040["%HANDLERS"], $P5042
    set $P5037, $P5042
  fallback3893:
    unless_null $P5037, vivi_13703894
    die "Contextual %*HANDLERS not found"
    box $P5043, "Contextual %*HANDLERS not found"
    set $P5037, $P5043
  vivi_13703894:
    set $P5036, $P5037
  fallback3892:
    set $S5005, _lex_param_2
.annotate 'line', 1915
    nqp_get_sc_object $P5047, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["Stmts"]
    unless_null $P5044, fallback3895
    nqp_get_sc_object $P5048, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5044, $P5048
  fallback3895:
.annotate 'line', 1916
    nqp_get_sc_object $P5052, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Op"]
    unless_null $P5049, fallback3896
    nqp_get_sc_object $P5053, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5049, $P5053
  fallback3896:
.annotate 'line', 1918
    nqp_get_sc_object $P5057, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Op"]
    unless_null $P5054, fallback3897
    nqp_get_sc_object $P5058, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5054, $P5058
  fallback3897:
    $P5059 = $P5054."new"("exception" :named("op"))
    $P5060 = $P5049."new"(_lex_param_1, $P5059, "call" :named("op"))
.annotate 'line', 1920
    nqp_get_sc_object $P5064, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["Op"]
    unless_null $P5061, fallback3898
    nqp_get_sc_object $P5065, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5061, $P5065
  fallback3898:
.annotate 'line', 1922
    nqp_get_sc_object $P5069, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5068, $P5069, "QAST"
    get_who $P5067, $P5068
    set $P5066, $P5067["Op"]
    unless_null $P5066, fallback3899
    nqp_get_sc_object $P5070, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5066, $P5070
  fallback3899:
    $P5071 = $P5066."new"("exception" :named("op"))
.annotate 'line', 1923
    nqp_get_sc_object $P5075, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5074, $P5075, "QAST"
    get_who $P5073, $P5074
    set $P5072, $P5073["SVal"]
    unless_null $P5072, fallback3900
    nqp_get_sc_object $P5076, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5072, $P5076
  fallback3900:
    $P5077 = $P5072."new"("handled" :named("value"))
.annotate 'line', 1924
    nqp_get_sc_object $P5081, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5080, $P5081, "QAST"
    get_who $P5079, $P5080
    set $P5078, $P5079["IVal"]
    unless_null $P5078, fallback3901
    nqp_get_sc_object $P5082, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5078, $P5082
  fallback3901:
    $P5083 = $P5078."new"(1 :named("value"))
    $P5084 = $P5061."new"($P5071, $P5077, $P5083, "bindkey_i" :named("op"))
.annotate 'line', 1926
    $P5085 = "&default_for"("$")
    $P5086 = $P5044."new"($P5060, $P5084, $P5085)
    set $P5036[$S5005], $P5086
    .return ($P5086) 
.end
.HLL "nqp"
.namespace []
.sub "only_star_block" :subid("cuid_432_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2562
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 2563
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback3902
    nqp_get_sc_object $P5005, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback3903
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5006
  fallback3903:
    unless_null $P5003, vivi_13713904
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13713904:
    set $P5002, $P5003
  fallback3902:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
.annotate 'line', 2564
    nqp_get_sc_object $P5012, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback3905
    nqp_get_sc_object $P5013, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5013
  fallback3905:
.annotate 'line', 2566
    nqp_get_sc_object $P5017, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Op"]
    unless_null $P5014, fallback3906
    nqp_get_sc_object $P5018, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5014, $P5018
  fallback3906:
.annotate 'line', 2568
    nqp_get_sc_object $P5022, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["Op"]
    unless_null $P5019, fallback3907
    nqp_get_sc_object $P5023, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5019, $P5023
  fallback3907:
.annotate 'line', 2570
    nqp_get_sc_object $P5027, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Var"]
    unless_null $P5024, fallback3908
    nqp_get_sc_object $P5028, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5024, $P5028
  fallback3908:
.annotate 'line', 2572
    nqp_get_sc_object $P5032, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Op"]
    unless_null $P5029, fallback3909
    nqp_get_sc_object $P5033, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5029, $P5033
  fallback3909:
    nqp_get_sc_object $P5037, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback3910
    nqp_get_sc_object $P5038, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5034, $P5038
  fallback3910:
    $P5039 = $P5034."new"("curcode" :named("op"))
    $P5040 = $P5029."new"($P5039, "getcodeobj" :named("op"))
.annotate 'line', 2573
    nqp_get_sc_object $P5044, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["WVal"]
    unless_null $P5041, fallback3911
    nqp_get_sc_object $P5045, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5041, $P5045
  fallback3911:
    find_dynamic_lex $P5046, "$*W"
    unless_null $P5046, fallback3912
    nqp_get_sc_object $P5049, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5048, $P5049
    set $P5047, $P5048["$W"]
    unless_null $P5047, fallback3913
    nqp_get_sc_object $P5050, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5047, $P5050
  fallback3913:
    unless_null $P5047, vivi_13723914
    die "Contextual $*W not found"
    box $P5051, "Contextual $*W not found"
    set $P5047, $P5051
  vivi_13723914:
    set $P5046, $P5047
  fallback3912:
    new $P5052, 'ResizablePMCArray'
    box $P5053, "NQPRoutine"
    push $P5052, $P5053
    $P5054 = $P5046."find_sym"($P5052)
    $P5055 = $P5041."new"($P5054 :named("value"))
    $P5056 = $P5024."new"($P5040, $P5055, "$!dispatch_cache" :named("name"), "attribute" :named("scope"))
.annotate 'line', 2575
    nqp_get_sc_object $P5060, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5059, $P5060, "QAST"
    get_who $P5058, $P5059
    set $P5057, $P5058["Op"]
    unless_null $P5057, fallback3915
    nqp_get_sc_object $P5061, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5057, $P5061
  fallback3915:
    $P5062 = $P5057."new"("usecapture" :named("op"))
    $P5063 = $P5019."new"($P5056, $P5062, "multicachefind" :named("op"))
.annotate 'line', 2577
    nqp_get_sc_object $P5067, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["Op"]
    unless_null $P5064, fallback3916
    nqp_get_sc_object $P5068, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5064, $P5068
  fallback3916:
.annotate 'line', 2579
    nqp_get_sc_object $P5072, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5071, $P5072, "QAST"
    get_who $P5070, $P5071
    set $P5069, $P5070["Op"]
    unless_null $P5069, fallback3917
    nqp_get_sc_object $P5073, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5069, $P5073
  fallback3917:
    nqp_get_sc_object $P5077, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5076, $P5077, "QAST"
    get_who $P5075, $P5076
    set $P5074, $P5075["Op"]
    unless_null $P5074, fallback3918
    nqp_get_sc_object $P5078, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5074, $P5078
  fallback3918:
    $P5079 = $P5074."new"("curcode" :named("op"))
    $P5080 = $P5069."new"($P5079, "getcodeobj" :named("op"))
.annotate 'line', 2580
    nqp_get_sc_object $P5084, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5083, $P5084, "QAST"
    get_who $P5082, $P5083
    set $P5081, $P5082["Op"]
    unless_null $P5081, fallback3919
    nqp_get_sc_object $P5085, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5081, $P5085
  fallback3919:
    $P5086 = $P5081."new"("usecapture" :named("op"))
    $P5087 = $P5064."new"($P5080, $P5086, "callmethod" :named("op"), "dispatch" :named("name"))
    $P5088 = $P5014."new"($P5063, $P5087, "ifnull" :named("op"))
.annotate 'line', 2583
    nqp_get_sc_object $P5092, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5091, $P5092, "QAST"
    get_who $P5090, $P5091
    set $P5089, $P5090["Op"]
    unless_null $P5089, fallback3920
    nqp_get_sc_object $P5093, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5089, $P5093
  fallback3920:
    $P5094 = $P5089."new"("usecapture" :named("op"))
    $P5095 = $P5009."new"($P5088, $P5094, "invokewithcapture" :named("op"))
    $P101."push"($P5095)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "attach_multi_signature" :subid("cuid_434_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2588
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5020 = 'cuid_433_1360256386.79' 
    capture_lex $P5020 
    .lex "$types", $P101 
    .lex "$definednesses", $P102 
    .lex "$code_obj", _lex_param_0 
    .lex "$routine", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    new $P5003, 'ResizablePMCArray'
    set $P101, $P5003
    new $P5004, 'ResizablePMCArray'
    set $P102, $P5004
    set $P5008, _lex_param_1[0]
    unless_null $P5008, fallback3921
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5009
  fallback3921:
    $P5010 = $P5008."list"()
    set $P5005, $P5010
    iter $P5007, $P5010
  for_next3937:
    unless $P5007, for_done3939
    shift $P5012, $P5007
  for_redo3938:
    .const 'Sub' $P5011 = 'cuid_433_1360256386.79' 
    capture_lex $P5011
    $P5005 = $P5011($P5012)
    goto for_next3937
  for_done3939:
.annotate 'line', 2600
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback3940
    nqp_get_sc_object $P5016, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback3941
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5014, $P5017
  fallback3941:
    unless_null $P5014, vivi_13793942
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_13793942:
    set $P5013, $P5014
  fallback3940:
    $P5019 = $P5013."set_routine_signature"(_lex_param_0, $P101, $P102)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_433_1360256386.79") :anon :lex :outer("cuid_434_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2591
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3928
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback3928:
    type_check $I5001, _lex_param_0, $P5001
    set $I5003, $I5001
    unless $I5001 goto if1375_end3927 
.annotate 'line', 2592
    $P5006 = _lex_param_0."decl"()
    set $S5001, $P5006
    iseq $I5002, $S5001, "param"
    set $I5003, $I5002
  if1375_end3927:
    set $I5005, $I5003
    unless $I5003 goto if1374_end3925 
    $P5007 = _lex_param_0."named"()
    isfalse $I5004, $P5007
    set $I5005, $I5004
  if1374_end3925:
    box $P5021, $I5005
    set $P5020, $P5021
    unless $I5005 goto if1373_end3923 
.annotate 'line', 2593
    find_lex $P5008, "$types"
    $P5009 = _lex_param_0."returns"()
    get_id $I5007, $P5009
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    get_id $I5008, $P5010
    iseq $I5006, $I5007, $I5008
    unless $I5006 goto if1376_else3929 
    null $P5011
    set $P5013, $P5011
    goto if1376_end3930
  if1376_else3929:
.annotate 'line', 2595
    $P5012 = _lex_param_0."returns"()
    set $P5013, $P5012
  if1376_end3930:
    $P5008."push"($P5013)
.annotate 'line', 2596
    find_lex $P5014, "$definednesses"
    set $P5015, _lex_param_0["definedness"]
    unless_null $P5015, fallback3933
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5015, $P5016
  fallback3933:
    set $S5002, $P5015
    iseq $I5009, $S5002, "D"
    unless $I5009 goto if1377_else3931 
    set $I5012, 1
    goto if1377_end3932
  if1377_else3931:
    set $P5017, _lex_param_0["definedness"]
    unless_null $P5017, fallback3936
    nqp_get_sc_object $P5018, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5017, $P5018
  fallback3936:
    set $S5003, $P5017
    iseq $I5010, $S5003, "U"
    unless $I5010 goto if1378_else3934 
    set $I5011, 2
    goto if1378_end3935
  if1378_else3934:
    set $I5011, 0
  if1378_end3935:
    set $I5012, $I5011
  if1377_end3932:
    $P5019 = $P5014."push"($I5012)
    set $P5020, $P5019
  if1373_end3923:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "wrap_return_handler" :subid("cuid_435_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2603
    .param pmc _lex_param_0 
    .lex "$past", _lex_param_0 
.annotate 'line', 2604
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3943
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback3943:
    $P5006 = $P5001."new"(_lex_param_0, "lexotic" :named("op"), "RETURN" :named("name"))
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "lexical_package_lookup" :subid("cuid_440_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3096
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5072 = 'cuid_438_1360256386.79' 
    capture_lex $P5072 
    .lex "$final_name", $P101 
    .lex "$lookup", $P102 
    .lex "@name", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_3944
    .lex "RETURN", $P103
    set $N5001, _lex_param_0
    set $N5002, 0
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if1380_end3947 
.annotate 'line', 3098
    $P5003 = _lex_param_1."CURSOR"()
    $P5004 = $P5003."panic"("Cannot compile empty name")
  if1380_end3947:
.annotate 'line', 3102
    $P5005 = _lex_param_0."pop"()
    set $P101, $P5005
.annotate 'line', 3103
    nqp_get_sc_object $P5009, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["VarWithFallback"]
    unless_null $P5006, fallback3948
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5010
  fallback3948:
.annotate 'line', 3105
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback3949
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5015
  fallback3949:
    set $S5001, $P101
    $P5016 = $P5011."new"($S5001 :named("value"))
    $P5017 = $P5006."new"($P5016, "associative" :named("scope"))
    set $P102, $P5017
    set $N5003, _lex_param_0
    set $N5004, 0
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1381_else3950 
.annotate 'line', 3110
.annotate 'line', 3111
    nqp_get_sc_object $P5021, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["Op"]
    unless_null $P5018, fallback3952
    nqp_get_sc_object $P5022, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5018, $P5022
  fallback3952:
.annotate 'line', 3113
    nqp_get_sc_object $P5026, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["Var"]
    unless_null $P5023, fallback3953
    nqp_get_sc_object $P5027, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5023, $P5027
  fallback3953:
    $P5028 = $P5023."new"("$?PACKAGE" :named("name"), "lexical" :named("scope"))
    $P5029 = $P5018."new"($P5028, "who" :named("op"))
    $P102."unshift"($P5029)
.annotate 'line', 3115
    nqp_get_sc_object $P5033, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["Op"]
    unless_null $P5030, fallback3954
    nqp_get_sc_object $P5034, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5030, $P5034
  fallback3954:
.annotate 'line', 3117
    nqp_get_sc_object $P5038, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Op"]
    unless_null $P5035, fallback3955
    nqp_get_sc_object $P5039, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5035, $P5039
  fallback3955:
.annotate 'line', 3119
    nqp_get_sc_object $P5043, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Op"]
    unless_null $P5040, fallback3956
    nqp_get_sc_object $P5044, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5040, $P5044
  fallback3956:
.annotate 'line', 3121
    nqp_get_sc_object $P5048, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["WVal"]
    unless_null $P5045, fallback3957
    nqp_get_sc_object $P5049, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5045, $P5049
  fallback3957:
    find_dynamic_lex $P5050, "$*GLOBALish"
    unless_null $P5050, fallback3958
    nqp_get_sc_object $P5053, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$GLOBALish"]
    unless_null $P5051, fallback3959
    nqp_get_sc_object $P5054, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5051, $P5054
  fallback3959:
    unless_null $P5051, vivi_13823960
    die "Contextual $*GLOBALish not found"
    box $P5055, "Contextual $*GLOBALish not found"
    set $P5051, $P5055
  vivi_13823960:
    set $P5050, $P5051
  fallback3958:
    $P5056 = $P5045."new"($P5050 :named("value"))
    $P5057 = $P5040."new"($P5056, "who" :named("op"))
.annotate 'line', 3123
    nqp_get_sc_object $P5061, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5060, $P5061, "QAST"
    get_who $P5059, $P5060
    set $P5058, $P5059["SVal"]
    unless_null $P5058, fallback3961
    nqp_get_sc_object $P5062, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5058, $P5062
  fallback3961:
    set $S5002, $P101
    $P5063 = $P5058."new"($S5002 :named("value"))
    $P5064 = $P5035."new"($P5057, $P5063, "atkey" :named("op"))
.annotate 'line', 3125
    set $S5004, $P101
    substr $S5003, $S5004, 0, 1
    $P5065 = "&default_for"($S5003)
    $P5066 = $P5030."new"($P5064, $P5065, "ifnull" :named("op"))
    $P5067 = $P102."fallback"($P5066)
    goto if1381_end3951
  if1381_else3950:
    .const 'Sub' $P5068 = 'cuid_438_1360256386.79' 
    capture_lex $P5068
    $P5069 = $P5068()
  if1381_end3951:
    find_lex $P5070, "RETURN"
    $P5071 = $P5070($P102)
    goto lexotic_3945
  lexotic_3944:
    .get_results ($P5071)
  lexotic_3945:
    .return ($P5071) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_438_1360256386.79") :anon :lex :outer("cuid_440_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3131
    .const 'Sub' $P5066 = 'cuid_437_1360256386.79' 
    capture_lex $P5066 
    .const 'Sub' $P5066 = 'cuid_439_1360256386.79' 
    capture_lex $P5066 
    .lex "$path", $P101 
    .lex "$sigil", $P102 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
.annotate 'line', 3133
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback3964
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback3965
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5007
  fallback3965:
    unless_null $P5004, vivi_13843966
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_13843966:
    set $P5003, $P5004
  fallback3964:
    find_lex $P5010, "@name"
    set $P5009, $P5010[0]
    unless_null $P5009, fallback3967
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5011
  fallback3967:
    $P5012 = $P5003."is_lexical"($P5009)
    unless $P5012 goto if1383_else3962 
    .const 'Sub' $P5013 = 'cuid_437_1360256386.79' 
    capture_lex $P5013
    $P5014 = $P5013()
    goto if1383_end3963
  if1383_else3962:
.annotate 'line', 3142
.annotate 'line', 3143
    nqp_get_sc_object $P5018, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["WVal"]
    unless_null $P5015, fallback3975
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5015, $P5019
  fallback3975:
    find_dynamic_lex $P5020, "$*GLOBALish"
    unless_null $P5020, fallback3976
    nqp_get_sc_object $P5023, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$GLOBALish"]
    unless_null $P5021, fallback3977
    nqp_get_sc_object $P5024, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5021, $P5024
  fallback3977:
    unless_null $P5021, vivi_13883978
    die "Contextual $*GLOBALish not found"
    box $P5025, "Contextual $*GLOBALish not found"
    set $P5021, $P5025
  vivi_13883978:
    set $P5020, $P5021
  fallback3976:
    $P5026 = $P5015."new"($P5020 :named("value"))
    set $P101, $P5026
  if1383_end3963:
    find_lex $P5028, "@name"
    set $P5027, $P5028[0]
    unless_null $P5027, fallback3981
    nqp_get_sc_object $P5029, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5027, $P5029
  fallback3981:
    set $S5001, $P5027
    iseq $I5001, $S5001, "GLOBAL"
    unless $I5001 goto if1389_end3980 
.annotate 'line', 3145
.annotate 'line', 3146
    find_lex $P5030, "@name"
    $P5031 = $P5030."shift"()
  if1389_end3980:
    find_lex $P5035, "@name"
    set $P5032, $P5035
    iter $P5034, $P5035
  for_next3984:
    unless $P5034, for_done3986
    shift $P5037, $P5034
  for_redo3985:
    .const 'Sub' $P5036 = 'cuid_439_1360256386.79' 
    capture_lex $P5036
    $P5032 = $P5036($P5037)
    goto for_next3984
  for_done3986:
.annotate 'line', 3153
    find_lex $P5038, "$lookup"
    nqp_get_sc_object $P5042, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["Op"]
    unless_null $P5039, fallback3987
    nqp_get_sc_object $P5043, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5039, $P5043
  fallback3987:
    $P5044 = $P5039."new"($P101, "who" :named("op"))
    $P5038."unshift"($P5044)
    find_lex $P5045, "$final_name"
    set $S5003, $P5045
    substr $S5002, $S5003, 0, 1
    box $P5046, $S5002
    set $P102, $P5046
    set $S5004, $P102
    iseq $I5002, $S5004, "@"
    set $I5004, $I5002
    if $I5002 goto unless1391_end3991 
    set $S5005, $P102
    iseq $I5003, $S5005, "%"
    set $I5004, $I5003
  unless1391_end3991:
    unless $I5004 goto if1390_else3988 
.annotate 'line', 3155
.annotate 'line', 3156
    find_lex $P5047, "$lookup"
    nqp_get_sc_object $P5051, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Op"]
    unless_null $P5048, fallback3992
    nqp_get_sc_object $P5052, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5048, $P5052
  fallback3992:
    find_lex $P5054, "$lookup"
    set $P5053, $P5054[0]
    unless_null $P5053, fallback3993
    nqp_get_sc_object $P5055, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5053, $P5055
  fallback3993:
    find_lex $P5057, "$lookup"
    set $P5056, $P5057[1]
    unless_null $P5056, fallback3994
    nqp_get_sc_object $P5058, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5056, $P5058
  fallback3994:
.annotate 'line', 3160
    $P5059 = "&default_for"($P102)
    $P5060 = $P5048."new"($P5053, $P5056, $P5059, "bindkey" :named("op"))
    $P5061 = $P5047."fallback"($P5060)
    set $P5065, $P5061
    goto if1390_end3989
  if1390_else3988:
.annotate 'line', 3163
.annotate 'line', 3164
    find_lex $P5062, "$lookup"
    $P5063 = "&default_for"($P102)
    $P5064 = $P5062."fallback"($P5063)
    set $P5065, $P5064
  if1390_end3989:
    .return ($P5065) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_437_1360256386.79") :anon :lex :outer("cuid_438_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3134
    .const 'Sub' $P5021 = 'cuid_436_1360256386.79' 
    capture_lex $P5021 
    .lex "$first", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    new $P5019, 'ExceptionHandler'
    set_label $P5019, catch_handler_13873973
    $P5019.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5019
.annotate 'line', 3135
    find_lex $P5002, "@name"
    $P5003 = $P5002."shift"()
    set $P101, $P5003
.annotate 'line', 3136
    nqp_get_sc_object $P5007, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["WVal"]
    unless_null $P5004, fallback3968
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5008
  fallback3968:
    find_dynamic_lex $P5009, "$*W"
    unless_null $P5009, fallback3969
    nqp_get_sc_object $P5012, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$W"]
    unless_null $P5010, fallback3970
    nqp_get_sc_object $P5013, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5013
  fallback3970:
    unless_null $P5010, vivi_13853971
    die "Contextual $*W not found"
    box $P5014, "Contextual $*W not found"
    set $P5010, $P5014
  vivi_13853971:
    set $P5009, $P5010
  fallback3969:
    new $P5015, 'ResizablePMCArray'
    push $P5015, $P101
    $P5016 = $P5009."find_sym"($P5015)
    $P5017 = $P5004."new"($P5016 :named("value"))
    store_lex "$path", $P5017
    nqp_get_sc_object $P5018, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5020, $P5018
    pop_eh 
    goto skip_handler_13863972
  catch_handler_13873973:
    .get_results ($P5019) 
    .const 'Sub' $P10001 = 'cuid_436_1360256386.79' 
    capture_lex $P10001
    $P10001($P5019)
    set $I10001, 1
    set $P5019["handled"], $I10001
    nqp_get_sc_object $P10002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    finalize $P5019
    pop_upto_eh $P5019
    pop_eh 
    set $P5020, $P10002
    goto skip_handler_13863972
  skip_handler_13863972:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_436_1360256386.79") :anon :lex :outer("cuid_437_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3137
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 3138
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3974
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback3974:
    find_lex $P5006, "$first"
    $P5007 = $P5001."new"($P5006 :named("name"), "lexical" :named("scope"))
    store_lex "$path", $P5007
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_439_1360256386.79") :anon :lex :outer("cuid_438_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3148
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 3149
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback3982
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback3982:
    find_lex $P5006, "$path"
.annotate 'line', 3151
    nqp_get_sc_object $P5010, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["SVal"]
    unless_null $P5007, fallback3983
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5011
  fallback3983:
    set $S5001, _lex_param_0
    $P5012 = $P5007."new"($S5001 :named("value"))
    $P5013 = $P5001."new"($P5006, $P5012, "nqp_get_package_through_who PPs" :named("pirop"))
    store_lex "$path", $P5013
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_244_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1596
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback3995
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback3995:
    set $P5001, _lex_param_1["comp_unit"]
    unless_null $P5001, fallback3996
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback3996:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_245_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1598
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1599
    unless_null _lex_param_1, fallback3999
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback3999:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback4000
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4000:
    unless $P5001 goto if1392_else3997 
    unless_null _lex_param_1, fallback4001
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5005
  fallback4001:
    set $P5004, _lex_param_1["identifier"]
    unless_null $P5004, fallback4002
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5006
  fallback4002:
    set $S5006, $P5004
    concat $S5005, $S5006, ":"
.annotate 'line', 1600
    unless_null _lex_param_1, fallback4003
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5009
  fallback4003:
    set $P5008, _lex_param_1["colonpair"]
    unless_null $P5008, fallback4004
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5010
  fallback4004:
    set $P5007, $P5008[0]
    unless_null $P5007, fallback4005
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5011
  fallback4005:
    $P5012 = $P5007."ast"()
    $P5013 = $P5012."named"()
    set $S5007, $P5013
    concat $S5004, $S5005, $S5007
    concat $S5003, $S5004, "<"
.annotate 'line', 1601
    unless_null _lex_param_1, fallback4006
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5016
  fallback4006:
    set $P5015, _lex_param_1["colonpair"]
    unless_null $P5015, fallback4007
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5015, $P5017
  fallback4007:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback4008
    nqp_get_sc_object $P5018, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5014, $P5018
  fallback4008:
    $P5019 = $P5014."ast"()
    $P5020 = "&colonpair_str"($P5019)
    set $S5008, $P5020
    concat $S5002, $S5003, $S5008
    concat $S5001, $S5002, ">"
    set $S5010, $S5001
    goto if1392_end3998
  if1392_else3997:
    set $S5009, _lex_param_1
    set $S5010, $S5009
  if1392_end3998:
    $P5021 = _lex_param_1."!make"($S5010)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_246_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1615
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$mainline", $P101 
    .lex "$unit", $P102 
    .lex "$compunit", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P103, $P5003
.annotate 'line', 1616
    unless_null _lex_param_1, fallback4009
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5005
  fallback4009:
    set $P5004, _lex_param_1["statementlist"]
    unless_null $P5004, fallback4010
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5006
  fallback4010:
    $P5007 = $P5004."ast"()
    set $P101, $P5007
.annotate 'line', 1617
    find_dynamic_lex $P5008, "$*W"
    unless_null $P5008, fallback4011
    nqp_get_sc_object $P5011, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$W"]
    unless_null $P5009, fallback4012
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5012
  fallback4012:
    unless_null $P5009, vivi_13934013
    die "Contextual $*W not found"
    box $P5013, "Contextual $*W not found"
    set $P5009, $P5013
  vivi_13934013:
    set $P5008, $P5009
  fallback4011:
    $P5014 = $P5008."pop_lexpad"()
    set $P102, $P5014
    find_dynamic_lex $P5015, "$*HAS_YOU_ARE_HERE"
    unless_null $P5015, fallback4016
    nqp_get_sc_object $P5018, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$HAS_YOU_ARE_HERE"]
    unless_null $P5016, fallback4017
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5016, $P5019
  fallback4017:
    unless_null $P5016, vivi_13954018
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5020, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5016, $P5020
  vivi_13954018:
    set $P5015, $P5016
  fallback4016:
    if $P5015 goto unless1394_end4015 
.annotate 'line', 1622
.annotate 'line', 1623
    nqp_decontainerize $P5021, _lex_param_0
    $P5022 = $P5021."CTXSAVE"()
    $P5023 = $P102."push"($P5022)
  unless1394_end4015:
.annotate 'line', 1630
    nqp_get_sc_object $P5027, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Var"]
    unless_null $P5024, fallback4019
    nqp_get_sc_object $P5028, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5024, $P5028
  fallback4019:
    $P5029 = $P5024."new"("lexical" :named("scope"), "@ARGS" :named("name"), "param" :named("decl"), 1 :named("slurpy"))
    $P102."unshift"($P5029)
    find_dynamic_lex $P5030, "$*MAIN_SUB"
    unless_null $P5030, fallback4022
    nqp_get_sc_object $P5033, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5032, $P5033
    set $P5031, $P5032["$MAIN_SUB"]
    unless_null $P5031, fallback4023
    nqp_get_sc_object $P5034, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5031, $P5034
  fallback4023:
    unless_null $P5031, vivi_13974024
    die "Contextual $*MAIN_SUB not found"
    box $P5035, "Contextual $*MAIN_SUB not found"
    set $P5031, $P5035
  vivi_13974024:
    set $P5030, $P5031
  fallback4022:
    unless $P5030 goto if1396_end4021 
.annotate 'line', 1631
.annotate 'line', 1632
    nqp_get_sc_object $P5039, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback4025
    nqp_get_sc_object $P5040, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5036, $P5040
  fallback4025:
.annotate 'line', 1634
    nqp_get_sc_object $P5044, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback4026
    nqp_get_sc_object $P5045, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5041, $P5045
  fallback4026:
    $P5046 = $P5041."new"("lexical" :named("scope"), "@ARGS" :named("name"))
.annotate 'line', 1635
    nqp_get_sc_object $P5050, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["Op"]
    unless_null $P5047, fallback4027
    nqp_get_sc_object $P5051, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5047, $P5051
  fallback4027:
.annotate 'line', 1636
    nqp_get_sc_object $P5055, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["BVal"]
    unless_null $P5052, fallback4028
    nqp_get_sc_object $P5056, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5052, $P5056
  fallback4028:
    find_dynamic_lex $P5057, "$*MAIN_SUB"
    unless_null $P5057, fallback4029
    nqp_get_sc_object $P5060, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["$MAIN_SUB"]
    unless_null $P5058, fallback4030
    nqp_get_sc_object $P5061, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5058, $P5061
  fallback4030:
    unless_null $P5058, vivi_13984031
    die "Contextual $*MAIN_SUB not found"
    box $P5062, "Contextual $*MAIN_SUB not found"
    set $P5058, $P5062
  vivi_13984031:
    set $P5057, $P5058
  fallback4029:
    $P5063 = $P5052."new"($P5057 :named("value"))
.annotate 'line', 1637
    nqp_get_sc_object $P5067, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["Var"]
    unless_null $P5064, fallback4032
    nqp_get_sc_object $P5068, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5064, $P5068
  fallback4032:
    $P5069 = $P5064."new"("lexical" :named("scope"), "@ARGS" :named("name"), 1 :named("flat"))
    $P5070 = $P5047."new"($P5063, $P5069, "call" :named("op"))
    $P5071 = $P5036."new"($P5046, $P5070, "if" :named("op"))
    $P5072 = $P101."push"($P5071)
  if1396_end4021:
.annotate 'line', 1643
    $P102."push"($P101)
.annotate 'line', 1646
    find_dynamic_lex $P5073, "$*W"
    unless_null $P5073, fallback4033
    nqp_get_sc_object $P5076, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5075, $P5076
    set $P5074, $P5075["$W"]
    unless_null $P5074, fallback4034
    nqp_get_sc_object $P5077, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5074, $P5077
  fallback4034:
    unless_null $P5074, vivi_13994035
    die "Contextual $*W not found"
    box $P5078, "Contextual $*W not found"
    set $P5074, $P5078
  vivi_13994035:
    set $P5073, $P5074
  fallback4033:
    $P5079 = $P5073."libs"()
    $P102."push"($P5079)
.annotate 'line', 1649
    nqp_get_sc_object $P5083, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["CompUnit"]
    unless_null $P5080, fallback4036
    nqp_get_sc_object $P5084, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5080, $P5084
  fallback4036:
.annotate 'line', 1653
    find_dynamic_lex $P5085, "$*W"
    unless_null $P5085, fallback4037
    nqp_get_sc_object $P5088, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5087, $P5088
    set $P5086, $P5087["$W"]
    unless_null $P5086, fallback4038
    nqp_get_sc_object $P5089, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5086, $P5089
  fallback4038:
    unless_null $P5086, vivi_14004039
    die "Contextual $*W not found"
    box $P5090, "Contextual $*W not found"
    set $P5086, $P5090
  vivi_14004039:
    set $P5085, $P5086
  fallback4037:
    $P5091 = $P5085."sc"()
.annotate 'line', 1654
    find_dynamic_lex $P5092, "$*W"
    unless_null $P5092, fallback4040
    nqp_get_sc_object $P5095, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5094, $P5095
    set $P5093, $P5094["$W"]
    unless_null $P5093, fallback4041
    nqp_get_sc_object $P5096, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5093, $P5096
  fallback4041:
    unless_null $P5093, vivi_14014042
    die "Contextual $*W not found"
    box $P5097, "Contextual $*W not found"
    set $P5093, $P5097
  vivi_14014042:
    set $P5092, $P5093
  fallback4040:
    $P5098 = $P5092."code_ref_blocks"()
.annotate 'line', 1655
    find_dynamic_lex $P5099, "$*W"
    unless_null $P5099, fallback4043
    nqp_get_sc_object $P5102, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5101, $P5102
    set $P5100, $P5101["$W"]
    unless_null $P5100, fallback4044
    nqp_get_sc_object $P5103, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5100, $P5103
  fallback4044:
    unless_null $P5100, vivi_14024045
    die "Contextual $*W not found"
    box $P5104, "Contextual $*W not found"
    set $P5100, $P5104
  vivi_14024045:
    set $P5099, $P5100
  fallback4043:
    $P5105 = $P5099."is_precompilation_mode"()
.annotate 'line', 1656
    find_dynamic_lex $P5106, "$*W"
    unless_null $P5106, fallback4046
    nqp_get_sc_object $P5109, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5108, $P5109
    set $P5107, $P5108["$W"]
    unless_null $P5107, fallback4047
    nqp_get_sc_object $P5110, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5107, $P5110
  fallback4047:
    unless_null $P5107, vivi_14034048
    die "Contextual $*W not found"
    box $P5111, "Contextual $*W not found"
    set $P5107, $P5111
  vivi_14034048:
    set $P5106, $P5107
  fallback4046:
    $P5112 = $P5106."load_dependency_tasks"()
.annotate 'line', 1657
    find_dynamic_lex $P5113, "$*W"
    unless_null $P5113, fallback4049
    nqp_get_sc_object $P5116, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5115, $P5116
    set $P5114, $P5115["$W"]
    unless_null $P5114, fallback4050
    nqp_get_sc_object $P5117, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5114, $P5117
  fallback4050:
    unless_null $P5114, vivi_14044051
    die "Contextual $*W not found"
    box $P5118, "Contextual $*W not found"
    set $P5114, $P5118
  vivi_14044051:
    set $P5113, $P5114
  fallback4049:
    $P5119 = $P5113."fixup_tasks"()
.annotate 'line', 1662
    nqp_get_sc_object $P5123, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5122, $P5123, "QAST"
    get_who $P5121, $P5122
    set $P5120, $P5121["Op"]
    unless_null $P5120, fallback4052
    nqp_get_sc_object $P5124, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5120, $P5124
  fallback4052:
.annotate 'line', 1664
    nqp_get_sc_object $P5128, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5127, $P5128, "QAST"
    get_who $P5126, $P5127
    set $P5125, $P5126["BVal"]
    unless_null $P5125, fallback4053
    nqp_get_sc_object $P5129, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5125, $P5129
  fallback4053:
    $P5130 = $P5125."new"($P102 :named("value"))
    $P5131 = $P5120."new"($P5130, "call" :named("op"))
.annotate 'line', 1669
    nqp_get_sc_object $P5135, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5134, $P5135, "QAST"
    get_who $P5133, $P5134
    set $P5132, $P5133["Stmts"]
    unless_null $P5132, fallback4054
    nqp_get_sc_object $P5136, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5132, $P5136
  fallback4054:
.annotate 'line', 1670
    nqp_get_sc_object $P5140, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5139, $P5140, "QAST"
    get_who $P5138, $P5139
    set $P5137, $P5138["Op"]
    unless_null $P5137, fallback4055
    nqp_get_sc_object $P5141, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5137, $P5141
  fallback4055:
.annotate 'line', 1672
    nqp_get_sc_object $P5145, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5144, $P5145, "QAST"
    get_who $P5143, $P5144
    set $P5142, $P5143["BVal"]
    unless_null $P5142, fallback4056
    nqp_get_sc_object $P5146, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5142, $P5146
  fallback4056:
    $P5147 = $P5142."new"($P102 :named("value"))
.annotate 'line', 1673
    nqp_get_sc_object $P5151, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5150, $P5151, "QAST"
    get_who $P5149, $P5150
    set $P5148, $P5149["Var"]
    unless_null $P5148, fallback4057
    nqp_get_sc_object $P5152, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5148, $P5152
  fallback4057:
    $P5153 = $P5148."new"("ARGS" :named("name"), "local" :named("scope"), "param" :named("decl"), 1 :named("slurpy"), 1 :named("flat"))
    $P5154 = $P5137."new"($P5147, $P5153, "call" :named("op"))
    $P5155 = $P5132."new"($P5154)
    $P5156 = $P5080."new"($P102, "nqp" :named("hll"), $P5091 :named("sc"), $P5098 :named("code_ref_blocks"), $P5105 :named("compilation_mode"), $P5112 :named("pre_deserialize"), $P5119 :named("post_deserialize"), $P5131 :named("load"), $P5155 :named("main"))
    set $P103, $P5156
.annotate 'line', 1682
    $P5157 = _lex_param_1."!make"($P103)
    .return ($P5157) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_247_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1685
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_441_1360256386.79' 
    capture_lex $P5022 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 1686
    nqp_get_sc_object $P5005, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback4058
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5006
  fallback4058:
    $P5007 = $P5002."new"(_lex_param_1 :named("node"))
    set $P101, $P5007
    unless_null _lex_param_1, fallback4061
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5009
  fallback4061:
    set $P5008, _lex_param_1["statement"]
    unless_null $P5008, fallback4062
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5010
  fallback4062:
    unless $P5008 goto if1405_else4059 
.annotate 'line', 1687
    unless_null _lex_param_1, fallback4063
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5015
  fallback4063:
    set $P5014, _lex_param_1["statement"]
    unless_null $P5014, fallback4064
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5014, $P5016
  fallback4064:
    set $P5011, $P5014
    iter $P5013, $P5014
  for_next4077:
    unless $P5013, for_done4079
    shift $P5018, $P5013
  for_redo4078:
    .const 'Sub' $P5017 = 'cuid_441_1360256386.79' 
    capture_lex $P5017
    $P5011 = $P5017($P5018)
    goto for_next4077
  for_done4079:
    goto if1405_end4060
  if1405_else4059:
.annotate 'line', 1696
.annotate 'line', 1697
    $P5019 = "&default_for"("$")
    $P5020 = $P101."push"($P5019)
  if1405_end4060:
.annotate 'line', 1699
    $P5021 = _lex_param_1."!make"($P101)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_441_1360256386.79") :anon :lex :outer("cuid_247_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1688
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 1689
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
    set $P5003, $P101["sink"]
    unless_null $P5003, fallback4067
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5004
  fallback4067:
    defined $I5001, $P5003
    unless $I5001 goto if1406_end4066 
    set $P5005, $P101["sink"]
    unless_null $P5005, fallback4068
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5005, $P5006
  fallback4068:
    set $P101, $P5005
  if1406_end4066:
    set $P5007, $P101["bareblock"]
    unless_null $P5007, fallback4071
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5008
  fallback4071:
    unless $P5007 goto if1407_end4070 
.annotate 'line', 1691
    set $P5009, $P101[0]
    unless_null $P5009, fallback4072
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5010
  fallback4072:
    $P5011 = "&block_immediate"($P5009)
    set $P101, $P5011
  if1407_end4070:
    nqp_get_sc_object $P5015, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Node"]
    unless_null $P5012, fallback4075
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5012, $P5016
  fallback4075:
    type_check $I5002, $P101, $P5012
    unless $I5002 goto if1408_end4074 
.annotate 'line', 1692
    nqp_get_sc_object $P5020, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Stmts"]
    unless_null $P5017, fallback4076
    nqp_get_sc_object $P5021, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5017, $P5021
  fallback4076:
    $P5022 = $P5017."new"($P101)
    set $P101, $P5022
  if1408_end4074:
.annotate 'line', 1693
    find_lex $P5023, "$past"
    $P5024 = $P5023."push"($P101)
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_248_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1702
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_4 :opt_flag 
    .const 'Sub' $P5018 = 'cuid_442_1360256386.79' 
    capture_lex $P5018 
    if haz_param_4, default4116
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_2, $P5017
  default4116:
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    unless_null _lex_param_1, fallback4082
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5003
  fallback4082:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback4083
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5004
  fallback4083:
    unless $P5002 goto if1409_else4080 
    .const 'Sub' $P5005 = 'cuid_442_1360256386.79' 
    capture_lex $P5005
    $P5006 = $P5005()
    goto if1409_end4081
  if1409_else4080:
    unless_null _lex_param_1, fallback4112
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5008
  fallback4112:
    set $P5007, _lex_param_1["statement_control"]
    unless_null $P5007, fallback4113
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5009
  fallback4113:
    unless $P5007 goto if1413_else4110 
.annotate 'line', 1725
    unless_null _lex_param_1, fallback4114
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5011
  fallback4114:
    set $P5010, _lex_param_1["statement_control"]
    unless_null $P5010, fallback4115
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5012
  fallback4115:
    $P5013 = $P5010."ast"()
    set $P101, $P5013
    set $P5015, $P101
    goto if1413_end4111
  if1413_else4110:
.annotate 'line', 1726
    box $P5014, 0
    set $P101, $P5014
    set $P5015, $P101
  if1413_end4111:
  if1409_end4081:
.annotate 'line', 1727
    $P5016 = _lex_param_1."!make"($P101)
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_442_1360256386.79") :anon :lex :outer("cuid_248_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1704
    .lex "$mc", $P101 
    .lex "$ml", $P102 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    find_lex $P5005, "$/"
    unless_null $P5005, fallback4084
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5005, $P5006
  fallback4084:
    set $P5004, $P5005["statement_mod_cond"]
    unless_null $P5004, fallback4085
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5007
  fallback4085:
    set $P5003, $P5004[0]
    unless_null $P5003, fallback4086
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5008
  fallback4086:
    set $P101, $P5003
    find_lex $P5011, "$/"
    unless_null $P5011, fallback4087
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5012
  fallback4087:
    set $P5010, $P5011["statement_mod_loop"]
    unless_null $P5010, fallback4088
    nqp_get_sc_object $P5013, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5013
  fallback4088:
    set $P5009, $P5010[0]
    unless_null $P5009, fallback4089
    nqp_get_sc_object $P5014, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5014
  fallback4089:
    set $P102, $P5009
.annotate 'line', 1707
    find_lex $P5016, "$/"
    unless_null $P5016, fallback4090
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5016, $P5017
  fallback4090:
    set $P5015, $P5016["EXPR"]
    unless_null $P5015, fallback4091
    nqp_get_sc_object $P5018, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5015, $P5018
  fallback4091:
    $P5019 = $P5015."ast"()
    store_lex "$past", $P5019
    unless $P101 goto if1410_end4093 
.annotate 'line', 1708
.annotate 'line', 1709
    nqp_get_sc_object $P5023, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback4094
    nqp_get_sc_object $P5024, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5020, $P5024
  fallback4094:
    set $P5025, $P101["cond"]
    unless_null $P5025, fallback4095
    nqp_get_sc_object $P5026, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5025, $P5026
  fallback4095:
    $P5027 = $P5025."ast"()
    find_lex $P5028, "$past"
    set $P5029, $P101["sym"]
    unless_null $P5029, fallback4096
    nqp_get_sc_object $P5030, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5029, $P5030
  fallback4096:
    set $S5001, $P5029
    find_lex $P5031, "$/"
    $P5032 = $P5020."new"($P5027, $P5028, $S5001 :named("op"), $P5031 :named("node"))
    store_lex "$past", $P5032
  if1410_end4093:
    set $P5077, $P102
    unless $P102 goto if1411_end4098 
.annotate 'line', 1711
    set $P5033, $P102["sym"]
    unless_null $P5033, fallback4101
    nqp_get_sc_object $P5034, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5033, $P5034
  fallback4101:
    set $S5002, $P5033
    iseq $I5001, $S5002, "for"
    unless $I5001 goto if1412_else4099 
.annotate 'line', 1712
.annotate 'line', 1713
    nqp_get_sc_object $P5038, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Block"]
    unless_null $P5035, fallback4102
    nqp_get_sc_object $P5039, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5035, $P5039
  fallback4102:
.annotate 'line', 1714
    nqp_get_sc_object $P5043, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Var"]
    unless_null $P5040, fallback4103
    nqp_get_sc_object $P5044, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5040, $P5044
  fallback4103:
    $P5045 = $P5040."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    find_lex $P5046, "$past"
    $P5047 = $P5035."new"($P5045, $P5046, "immediate" :named("blocktype"))
    store_lex "$past", $P5047
.annotate 'line', 1716
    find_lex $P5048, "$past"
    $P5048."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1717
    find_lex $P5049, "$past"
    $P5049."arity"(1)
.annotate 'line', 1718
    nqp_get_sc_object $P5053, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["Op"]
    unless_null $P5050, fallback4104
    nqp_get_sc_object $P5054, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5050, $P5054
  fallback4104:
    set $P5055, $P102["cond"]
    unless_null $P5055, fallback4105
    nqp_get_sc_object $P5056, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5055, $P5056
  fallback4105:
    $P5057 = $P5055."ast"()
    find_lex $P5058, "$past"
    set $P5059, $P102["sym"]
    unless_null $P5059, fallback4106
    nqp_get_sc_object $P5060, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5059, $P5060
  fallback4106:
    set $S5003, $P5059
    find_lex $P5061, "$/"
    $P5062 = $P5050."new"($P5057, $P5058, $S5003 :named("op"), $P5061 :named("node"))
    store_lex "$past", $P5062
    set $P5076, $P5062
    goto if1412_end4100
  if1412_else4099:
.annotate 'line', 1720
.annotate 'line', 1721
    nqp_get_sc_object $P5066, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5065, $P5066, "QAST"
    get_who $P5064, $P5065
    set $P5063, $P5064["Op"]
    unless_null $P5063, fallback4107
    nqp_get_sc_object $P5067, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5063, $P5067
  fallback4107:
    set $P5068, $P102["cond"]
    unless_null $P5068, fallback4108
    nqp_get_sc_object $P5069, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5068, $P5069
  fallback4108:
    $P5070 = $P5068."ast"()
    find_lex $P5071, "$past"
    set $P5072, $P102["sym"]
    unless_null $P5072, fallback4109
    nqp_get_sc_object $P5073, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5072, $P5073
  fallback4109:
    set $S5004, $P5072
    find_lex $P5074, "$/"
    $P5075 = $P5063."new"($P5070, $P5071, $S5004 :named("op"), $P5074 :named("node"))
    store_lex "$past", $P5075
    set $P5076, $P5075
  if1412_end4100:
    set $P5077, $P5076
  if1411_end4098:
    .return ($P5077) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_249_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1730
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1731
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback4117
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback4117:
    unless_null _lex_param_1, fallback4118
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5007
  fallback4118:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback4119
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5008
  fallback4119:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback4120
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5011
  fallback4120:
    set $P5010, _lex_param_1["pblock"]
    unless_null $P5010, fallback4121
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5012
  fallback4121:
    $P5013 = $P5010."ast"()
    $P5014 = $P5001."new"($P5009, $P5013, "if" :named("op"), _lex_param_1 :named("node"))
    $P5015 = _lex_param_1."!make"($P5014)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_250_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1734
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1735
    unless_null _lex_param_1, fallback4122
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4122:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback4123
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4123:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_251_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1738
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1739
    unless_null _lex_param_1, fallback4124
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4124:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback4125
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4125:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_252_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1742
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5029 = 'cuid_444_1360256386.79' 
    capture_lex $P5029 
    .lex "$BLOCK", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 1743
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4126
    nqp_get_sc_object $P5005, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4127
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5006
  fallback4127:
    unless_null $P5003, vivi_14144128
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_14144128:
    set $P5002, $P5003
  fallback4126:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
    unless_null _lex_param_1, fallback4131
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5010
  fallback4131:
    set $P5009, _lex_param_1["statementlist"]
    unless_null $P5009, fallback4132
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5011
  fallback4132:
    unless $P5009 goto if1415_else4129 
    .const 'Sub' $P5012 = 'cuid_444_1360256386.79' 
    capture_lex $P5012
    $P5013 = $P5012()
    set $P5028, $P5013
    goto if1415_end4130
  if1415_else4129:
.annotate 'line', 1758
    find_dynamic_lex $P5014, "$*HAS_YOU_ARE_HERE"
    unless_null $P5014, fallback4157
    nqp_get_sc_object $P5017, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["$HAS_YOU_ARE_HERE"]
    unless_null $P5015, fallback4158
    nqp_get_sc_object $P5018, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5015, $P5018
  fallback4158:
    unless_null $P5015, vivi_14234159
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5019, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5015, $P5019
  vivi_14234159:
    set $P5014, $P5015
  fallback4157:
    unless $P5014 goto if1422_end4156 
.annotate 'line', 1759
.annotate 'line', 1760
    $P5020 = _lex_param_1."CURSOR"()
    $P5021 = $P5020."panic"("{YOU_ARE_HERE} may only appear once in a setting")
  if1422_end4156:
    box $P5022, 1
    store_dynamic_lex "$*HAS_YOU_ARE_HERE", $P5022
.annotate 'line', 1763
    unless_null _lex_param_1, fallback4160
    nqp_get_sc_object $P5024, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5024
  fallback4160:
    set $P5023, _lex_param_1["you_are_here"]
    unless_null $P5023, fallback4161
    nqp_get_sc_object $P5025, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5023, $P5025
  fallback4161:
    $P5026 = $P5023."ast"()
    $P5027 = _lex_param_1."!make"($P5026)
    set $P5028, $P5027
  if1415_end4130:
    .return ($P5028) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_444_1360256386.79") :anon :lex :outer("cuid_252_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1744
    .const 'Sub' $P5057 = 'cuid_443_1360256386.79' 
    capture_lex $P5057 
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 1745
    find_lex $P5003, "$/"
    unless_null $P5003, fallback4133
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5004
  fallback4133:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback4134
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5005
  fallback4134:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    find_dynamic_lex $P5007, "%*HANDLERS"
    unless_null $P5007, fallback4137
    nqp_get_sc_object $P5010, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["%HANDLERS"]
    unless_null $P5008, fallback4138
    nqp_get_sc_object $P5012, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5011, $P5012
    new $P5013, 'Hash'
    set $P5011["%HANDLERS"], $P5013
    set $P5008, $P5013
  fallback4138:
    unless_null $P5008, vivi_14174139
    die "Contextual %*HANDLERS not found"
    box $P5014, "Contextual %*HANDLERS not found"
    set $P5008, $P5014
  vivi_14174139:
    set $P5007, $P5008
  fallback4137:
    unless $P5007 goto if1416_end4136 
.annotate 'line', 1746
.annotate 'line', 1747
    nqp_get_sc_object $P5018, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback4140
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5015, $P5019
  fallback4140:
    $P5020 = $P5015."new"($P101, "handle" :named("op"))
    set $P101, $P5020
    find_dynamic_lex $P5024, "%*HANDLERS"
    unless_null $P5024, fallback4141
    nqp_get_sc_object $P5027, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["%HANDLERS"]
    unless_null $P5025, fallback4142
    nqp_get_sc_object $P5029, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5028, $P5029
    new $P5030, 'Hash'
    set $P5028["%HANDLERS"], $P5030
    set $P5025, $P5030
  fallback4142:
    unless_null $P5025, vivi_14184143
    die "Contextual %*HANDLERS not found"
    box $P5031, "Contextual %*HANDLERS not found"
    set $P5025, $P5031
  vivi_14184143:
    set $P5024, $P5025
  fallback4141:
    set $P5021, $P5024
    iter $P5023, $P5024
  for_next4144:
    unless $P5023, for_done4146
    shift $P5033, $P5023
  for_redo4145:
    .const 'Sub' $P5032 = 'cuid_443_1360256386.79' 
    capture_lex $P5032
    $P5021 = $P5032($P5033)
    goto for_next4144
  for_done4146:
  if1416_end4136:
.annotate 'line', 1753
    find_lex $P5034, "$BLOCK"
    $P5034."push"($P101)
.annotate 'line', 1754
    find_lex $P5035, "$BLOCK"
    find_lex $P5036, "$/"
    $P5035."node"($P5036)
    find_dynamic_lex $P5037, "%*HANDLERS"
    unless_null $P5037, fallback4149
    nqp_get_sc_object $P5040, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["%HANDLERS"]
    unless_null $P5038, fallback4150
    nqp_get_sc_object $P5042, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5041, $P5042
    new $P5043, 'Hash'
    set $P5041["%HANDLERS"], $P5043
    set $P5038, $P5043
  fallback4150:
    unless_null $P5038, vivi_14204151
    die "Contextual %*HANDLERS not found"
    box $P5044, "Contextual %*HANDLERS not found"
    set $P5038, $P5044
  vivi_14204151:
    set $P5037, $P5038
  fallback4149:
    unless $P5037 goto if1419_end4148 
    find_lex $P5045, "$BLOCK"
    find_dynamic_lex $P5046, "%*HANDLERS"
    unless_null $P5046, fallback4152
    nqp_get_sc_object $P5049, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5048, $P5049
    set $P5047, $P5048["%HANDLERS"]
    unless_null $P5047, fallback4153
    nqp_get_sc_object $P5051, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5050, $P5051
    new $P5052, 'Hash'
    set $P5050["%HANDLERS"], $P5052
    set $P5047, $P5052
  fallback4153:
    unless_null $P5047, vivi_14214154
    die "Contextual %*HANDLERS not found"
    box $P5053, "Contextual %*HANDLERS not found"
    set $P5047, $P5053
  vivi_14214154:
    set $P5046, $P5047
  fallback4152:
    set $P5045["handlers"], $P5046
  if1419_end4148:
.annotate 'line', 1756
    find_dynamic_lex $P5054, "$/"
    find_lex $P5055, "$BLOCK"
    $P5056 = $P5054."!make"($P5055)
    .return ($P5056) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_443_1360256386.79") :anon :lex :outer("cuid_444_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1748
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1749
    find_lex $P5001, "$past"
    $P5002 = _lex_param_0."key"()
    $P5001."push"($P5002)
.annotate 'line', 1750
    find_lex $P5003, "$past"
    $P5004 = _lex_param_0."value"()
    $P5005 = $P5003."push"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_253_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1767
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1768
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4162
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4163
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5005
  fallback4163:
    unless_null $P5002, vivi_14244164
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14244164:
    set $P5001, $P5002
  fallback4162:
    $P5007 = $P5001."push_lexpad"(_lex_param_1)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_254_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1771
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_445_1360256386.79' 
    capture_lex $P5024 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback4167
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback4168
    nqp_get_sc_object $P5008, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback4168:
    unless_null $P5004, vivi_14264169
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_14264169:
    set $P5003, $P5004
  fallback4167:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback4170
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5011
  fallback4170:
    set $P5001, $P5002["outer_ctx"]
    unless_null $P5001, fallback4171
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5012
  fallback4171:
    defined $I5001, $P5001
    if $I5001 goto unless1425_end4166 
    .const 'Sub' $P5013 = 'cuid_445_1360256386.79' 
    capture_lex $P5013
    $P5014 = $P5013()
  unless1425_end4166:
.annotate 'line', 1793
    nqp_decontainerize $P5015, _lex_param_0
    find_dynamic_lex $P5016, "$*W"
    unless_null $P5016, fallback4227
    nqp_get_sc_object $P5019, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$W"]
    unless_null $P5017, fallback4228
    nqp_get_sc_object $P5020, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5017, $P5020
  fallback4228:
    unless_null $P5017, vivi_14434229
    die "Contextual $*W not found"
    box $P5021, "Contextual $*W not found"
    set $P5017, $P5021
  vivi_14434229:
    set $P5016, $P5017
  fallback4227:
    $P5022 = $P5016."cur_lexpad"()
    $P5023 = $P5015."SET_BLOCK_OUTER_CTX"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_445_1360256386.79") :anon :lex :outer("cuid_254_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1772
    .lex "$SETTING", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 1775
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4172
    nqp_get_sc_object $P5005, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4173
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5006
  fallback4173:
    unless_null $P5003, vivi_14274174
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_14274174:
    set $P5002, $P5003
  fallback4172:
    find_dynamic_lex $P5011, "%*COMPILING"
    unless_null $P5011, fallback4176
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["%COMPILING"]
    unless_null $P5012, fallback4177
    nqp_get_sc_object $P5016, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5015, $P5016
    new $P5017, 'Hash'
    set $P5015["%COMPILING"], $P5017
    set $P5012, $P5017
  fallback4177:
    unless_null $P5012, vivi_14284178
    die "Contextual %*COMPILING not found"
    box $P5018, "Contextual %*COMPILING not found"
    set $P5012, $P5018
  vivi_14284178:
    set $P5011, $P5012
  fallback4176:
    set $P5010, $P5011["%?OPTIONS"]
    unless_null $P5010, fallback4179
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5019
  fallback4179:
    set $P5009, $P5010["setting"]
    unless_null $P5009, fallback4180
    nqp_get_sc_object $P5020, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5020
  fallback4180:
    set $P5008, $P5009
    defined $I5001, $P5008
    if $I5001, defor4175
    box $P5021, "NQPCORE"
    set $P5008, $P5021
  defor4175:
    $P5022 = $P5002."load_setting"($P5008)
    set $P101, $P5022
    find_dynamic_lex $P5025, "%*COMPILING"
    unless_null $P5025, fallback4183
    nqp_get_sc_object $P5028, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["%COMPILING"]
    unless_null $P5026, fallback4184
    nqp_get_sc_object $P5030, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5029, $P5030
    new $P5031, 'Hash'
    set $P5029["%COMPILING"], $P5031
    set $P5026, $P5031
  fallback4184:
    unless_null $P5026, vivi_14304185
    die "Contextual %*COMPILING not found"
    box $P5032, "Contextual %*COMPILING not found"
    set $P5026, $P5032
  vivi_14304185:
    set $P5025, $P5026
  fallback4183:
    set $P5024, $P5025["%?OPTIONS"]
    unless_null $P5024, fallback4186
    nqp_get_sc_object $P5033, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5024, $P5033
  fallback4186:
    set $P5023, $P5024["setting"]
    unless_null $P5023, fallback4187
    nqp_get_sc_object $P5034, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5023, $P5034
  fallback4187:
    set $S5001, $P5023
    iseq $I5002, $S5001, "NULL"
    box $P5112, $I5002
    set $P5111, $P5112
    if $I5002 goto unless1429_end4182 
.annotate 'line', 1780
.annotate 'line', 1781
    "&import_HOW_exports"($P101)
    find_dynamic_lex $P5037, "%*COMPILING"
    unless_null $P5037, fallback4190
    nqp_get_sc_object $P5040, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["%COMPILING"]
    unless_null $P5038, fallback4191
    nqp_get_sc_object $P5042, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5041, $P5042
    new $P5043, 'Hash'
    set $P5041["%COMPILING"], $P5043
    set $P5038, $P5043
  fallback4191:
    unless_null $P5038, vivi_14324192
    die "Contextual %*COMPILING not found"
    box $P5044, "Contextual %*COMPILING not found"
    set $P5038, $P5044
  vivi_14324192:
    set $P5037, $P5038
  fallback4190:
    set $P5036, $P5037["%?OPTIONS"]
    unless_null $P5036, fallback4193
    nqp_get_sc_object $P5045, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5036, $P5045
  fallback4193:
    set $P5035, $P5036["old-regex-lib"]
    unless_null $P5035, fallback4194
    nqp_get_sc_object $P5046, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5035, $P5046
  fallback4194:
    unless $P5035 goto if1431_end4189 
.annotate 'line', 1782
.annotate 'line', 1783
    find_dynamic_lex $P5047, "$*W"
    unless_null $P5047, fallback4195
    nqp_get_sc_object $P5050, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$W"]
    unless_null $P5048, fallback4196
    nqp_get_sc_object $P5051, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5048, $P5051
  fallback4196:
    unless_null $P5048, vivi_14334197
    die "Contextual $*W not found"
    box $P5052, "Contextual $*W not found"
    set $P5048, $P5052
  vivi_14334197:
    set $P5047, $P5048
  fallback4195:
    find_dynamic_lex $P5053, "$*GLOBALish"
    unless_null $P5053, fallback4198
    nqp_get_sc_object $P5056, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$GLOBALish"]
    unless_null $P5054, fallback4199
    nqp_get_sc_object $P5057, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5054, $P5057
  fallback4199:
    unless_null $P5054, vivi_14344200
    die "Contextual $*GLOBALish not found"
    box $P5058, "Contextual $*GLOBALish not found"
    set $P5054, $P5058
  vivi_14344200:
    set $P5053, $P5054
  fallback4198:
    $P5059 = $P5047."load_module"("NQPRegex", $P5053)
  if1431_end4189:
    find_dynamic_lex $P5062, "%*COMPILING"
    unless_null $P5062, fallback4203
    nqp_get_sc_object $P5065, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["%COMPILING"]
    unless_null $P5063, fallback4204
    nqp_get_sc_object $P5067, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5066, $P5067
    new $P5068, 'Hash'
    set $P5066["%COMPILING"], $P5068
    set $P5063, $P5068
  fallback4204:
    unless_null $P5063, vivi_14364205
    die "Contextual %*COMPILING not found"
    box $P5069, "Contextual %*COMPILING not found"
    set $P5063, $P5069
  vivi_14364205:
    set $P5062, $P5063
  fallback4203:
    set $P5061, $P5062["%?OPTIONS"]
    unless_null $P5061, fallback4206
    nqp_get_sc_object $P5070, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5061, $P5070
  fallback4206:
    set $P5060, $P5061["no-regex-lib"]
    unless_null $P5060, fallback4207
    nqp_get_sc_object $P5071, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5060, $P5071
  fallback4207:
    set $P5110, $P5060
    if $P5060 goto unless1435_end4202 
.annotate 'line', 1785
.annotate 'line', 1786
    find_dynamic_lex $P5072, "$*W"
    unless_null $P5072, fallback4208
    nqp_get_sc_object $P5075, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5074, $P5075
    set $P5073, $P5074["$W"]
    unless_null $P5073, fallback4209
    nqp_get_sc_object $P5076, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5073, $P5076
  fallback4209:
    unless_null $P5073, vivi_14374210
    die "Contextual $*W not found"
    box $P5077, "Contextual $*W not found"
    set $P5073, $P5077
  vivi_14374210:
    set $P5072, $P5073
  fallback4208:
    find_dynamic_lex $P5078, "$*GLOBALish"
    unless_null $P5078, fallback4211
    nqp_get_sc_object $P5081, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5080, $P5081
    set $P5079, $P5080["$GLOBALish"]
    unless_null $P5079, fallback4212
    nqp_get_sc_object $P5082, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5079, $P5082
  fallback4212:
    unless_null $P5079, vivi_14384213
    die "Contextual $*GLOBALish not found"
    box $P5083, "Contextual $*GLOBALish not found"
    set $P5079, $P5083
  vivi_14384213:
    set $P5078, $P5079
  fallback4211:
    $P5072."load_module"("QRegex", $P5078)
    find_dynamic_lex $P5086, "%*COMPILING"
    unless_null $P5086, fallback4216
    nqp_get_sc_object $P5089, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5088, $P5089
    set $P5087, $P5088["%COMPILING"]
    unless_null $P5087, fallback4217
    nqp_get_sc_object $P5091, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5090, $P5091
    new $P5092, 'Hash'
    set $P5090["%COMPILING"], $P5092
    set $P5087, $P5092
  fallback4217:
    unless_null $P5087, vivi_14404218
    die "Contextual %*COMPILING not found"
    box $P5093, "Contextual %*COMPILING not found"
    set $P5087, $P5093
  vivi_14404218:
    set $P5086, $P5087
  fallback4216:
    set $P5085, $P5086["%?OPTIONS"]
    unless_null $P5085, fallback4219
    nqp_get_sc_object $P5094, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5085, $P5094
  fallback4219:
    set $P5084, $P5085["old-regex-lib"]
    unless_null $P5084, fallback4220
    nqp_get_sc_object $P5095, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5084, $P5095
  fallback4220:
    set $P5109, $P5084
    if $P5084 goto unless1439_end4215 
.annotate 'line', 1787
.annotate 'line', 1788
    find_dynamic_lex $P5096, "$*W"
    unless_null $P5096, fallback4221
    nqp_get_sc_object $P5099, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5098, $P5099
    set $P5097, $P5098["$W"]
    unless_null $P5097, fallback4222
    nqp_get_sc_object $P5100, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5097, $P5100
  fallback4222:
    unless_null $P5097, vivi_14414223
    die "Contextual $*W not found"
    box $P5101, "Contextual $*W not found"
    set $P5097, $P5101
  vivi_14414223:
    set $P5096, $P5097
  fallback4221:
    find_dynamic_lex $P5102, "$*GLOBALish"
    unless_null $P5102, fallback4224
    nqp_get_sc_object $P5105, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5104, $P5105
    set $P5103, $P5104["$GLOBALish"]
    unless_null $P5103, fallback4225
    nqp_get_sc_object $P5106, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5103, $P5106
  fallback4225:
    unless_null $P5103, vivi_14424226
    die "Contextual $*GLOBALish not found"
    box $P5107, "Contextual $*GLOBALish not found"
    set $P5103, $P5107
  vivi_14424226:
    set $P5102, $P5103
  fallback4224:
    $P5108 = $P5096."load_module"("NQPP6QRegex", $P5102)
    set $P5109, $P5108
  unless1439_end4215:
    set $P5110, $P5109
  unless1435_end4202:
    set $P5111, $P5110
  unless1429_end4182:
    .return ($P5111) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_255_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1805
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1806
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."CTXSAVE"()
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_256_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1811
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 1812
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4230
    nqp_get_sc_object $P5005, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4231
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5006
  fallback4231:
    unless_null $P5003, vivi_14444232
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_14444232:
    set $P5002, $P5003
  fallback4230:
    unless_null _lex_param_1, fallback4233
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5009
  fallback4233:
    set $P5008, _lex_param_1["name"]
    unless_null $P5008, fallback4234
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5010
  fallback4234:
    set $S5001, $P5008
    find_dynamic_lex $P5011, "$*GLOBALish"
    unless_null $P5011, fallback4235
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$GLOBALish"]
    unless_null $P5012, fallback4236
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5012, $P5015
  fallback4236:
    unless_null $P5012, vivi_14454237
    die "Contextual $*GLOBALish not found"
    box $P5016, "Contextual $*GLOBALish not found"
    set $P5012, $P5016
  vivi_14454237:
    set $P5011, $P5012
  fallback4235:
    $P5017 = $P5002."load_module"($S5001, $P5011)
    set $P101, $P5017
    defined $I5001, $P101
    unless $I5001 goto if1446_end4239 
.annotate 'line', 1813
    exists $I5002, $P101["EXPORT"]
    set $I5004, $I5002
    unless $I5002 goto if1448_end4243 
    set $P5019, $P101["EXPORT"]
    unless_null $P5019, fallback4244
    nqp_get_sc_object $P5020, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5019, $P5020
  fallback4244:
    get_who $P5018, $P5019
    exists $I5003, $P5018["DEFAULT"]
    set $I5004, $I5003
  if1448_end4243:
    unless $I5004 goto if1447_end4241 
.annotate 'line', 1814
    find_dynamic_lex $P5021, "$*W"
    unless_null $P5021, fallback4245
    nqp_get_sc_object $P5024, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["$W"]
    unless_null $P5022, fallback4246
    nqp_get_sc_object $P5025, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5022, $P5025
  fallback4246:
    unless_null $P5022, vivi_14494247
    die "Contextual $*W not found"
    box $P5026, "Contextual $*W not found"
    set $P5022, $P5026
  vivi_14494247:
    set $P5021, $P5022
  fallback4245:
    set $P5030, $P101["EXPORT"]
    unless_null $P5030, fallback4248
    nqp_get_sc_object $P5031, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5030, $P5031
  fallback4248:
    get_who $P5029, $P5030
    set $P5028, $P5029["DEFAULT"]
    unless_null $P5028, fallback4249
    nqp_get_sc_object $P5032, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5028, $P5032
  fallback4249:
    get_who $P5027, $P5028
    $P5033 = $P5021."import"($P5027)
  if1447_end4241:
.annotate 'line', 1817
    $P5034 = "&import_HOW_exports"($P101)
  if1446_end4239:
.annotate 'line', 1819
    nqp_get_sc_object $P5038, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Stmts"]
    unless_null $P5035, fallback4250
    nqp_get_sc_object $P5039, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5035, $P5039
  fallback4250:
    $P5040 = $P5035."new"()
    $P5041 = _lex_param_1."!make"($P5040)
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_257_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1822
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_446_1360256386.79' 
    capture_lex $P5030 
    .lex "$count", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback4251
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5004
  fallback4251:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4252
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5005
  fallback4252:
    set $N5002, $P5003
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5006, $N5001
    set $P101, $P5006
.annotate 'line', 1824
    unless_null _lex_param_1, fallback4253
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5009
  fallback4253:
    set $P5008, _lex_param_1["xblock"]
    unless_null $P5008, fallback4254
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5010
  fallback4254:
    set $I5001, $P101
    set $P5007, $P5008[$I5001]
    unless_null $P5007, fallback4255
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5011
  fallback4255:
    $P5012 = $P5007."ast"()
    $P5013 = "&xblock_immediate"($P5012)
    set $P102, $P5013
    unless_null _lex_param_1, fallback4258
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5015
  fallback4258:
    set $P5014, _lex_param_1["else"]
    unless_null $P5014, fallback4259
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5014, $P5016
  fallback4259:
    unless $P5014 goto if1450_end4257 
.annotate 'line', 1825
.annotate 'line', 1826
    unless_null _lex_param_1, fallback4260
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5019
  fallback4260:
    set $P5018, _lex_param_1["else"]
    unless_null $P5018, fallback4261
    nqp_get_sc_object $P5020, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5018, $P5020
  fallback4261:
    set $P5017, $P5018[0]
    unless_null $P5017, fallback4262
    nqp_get_sc_object $P5021, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5017, $P5021
  fallback4262:
    $P5022 = $P5017."ast"()
    $P5023 = "&block_immediate"($P5022)
    $P5024 = $P102."push"($P5023)
  if1450_end4257:
  while1451_test4263:
    set $N5004, $P101
    set $N5005, 0
    isgt $I5002, $N5004, $N5005
    box $P5028, $I5002
    set $P5027, $P5028
    unless $I5002 goto while1451_done4267 
  while1451_redo4265:
    .const 'Sub' $P5025 = 'cuid_446_1360256386.79' 
    capture_lex $P5025
    $P5026 = $P5025()
    set $P5027, $P5026
    goto while1451_test4263 
  while1451_done4267:
.annotate 'line', 1835
    $P5029 = _lex_param_1."!make"($P102)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_446_1360256386.79") :anon :lex :outer("cuid_257_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1829
    .lex "$else", $P101 
    .local pmc tmp_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    find_lex $P5002, "$count"
    set tmp_1, $P5002
    set $N5002, tmp_1
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$count", $P5003
    find_lex $P5002, "$past"
    set $P101, $P5002
.annotate 'line', 1832
    find_lex $P5005, "$/"
    unless_null $P5005, fallback4268
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5005, $P5006
  fallback4268:
    set $P5004, $P5005["xblock"]
    unless_null $P5004, fallback4269
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5007
  fallback4269:
    find_lex $P5008, "$count"
    set $I5001, $P5008
    set $P5003, $P5004[$I5001]
    unless_null $P5003, fallback4270
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5009
  fallback4270:
    $P5010 = $P5003."ast"()
    $P5011 = "&xblock_immediate"($P5010)
    store_lex "$past", $P5011
.annotate 'line', 1833
    find_lex $P5012, "$past"
    $P5013 = $P5012."push"($P101)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_258_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1838
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 1839
    unless_null _lex_param_1, fallback4271
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5003
  fallback4271:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4272
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5004
  fallback4272:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1840
    $P101."op"("unless")
.annotate 'line', 1841
    $P5007 = _lex_param_1."!make"($P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_259_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1844
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 1845
    unless_null _lex_param_1, fallback4273
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5003
  fallback4273:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4274
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5004
  fallback4274:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1846
    unless_null _lex_param_1, fallback4275
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5008
  fallback4275:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback4276
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5009
  fallback4276:
    set $S5001, $P5007
    $P101."op"($S5001)
    find_dynamic_lex $P5010, "$*CONTROL_USED"
    unless_null $P5010, fallback4279
    nqp_get_sc_object $P5013, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$CONTROL_USED"]
    unless_null $P5011, fallback4280
    nqp_get_sc_object $P5014, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5014
  fallback4280:
    unless_null $P5011, vivi_14534281
    die "Contextual $*CONTROL_USED not found"
    box $P5015, "Contextual $*CONTROL_USED not found"
    set $P5011, $P5015
  vivi_14534281:
    set $P5010, $P5011
  fallback4279:
    if $P5010 goto unless1452_end4278 
.annotate 'line', 1847
.annotate 'line', 1848
    nqp_get_sc_object $P5019, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["IVal"]
    unless_null $P5016, fallback4282
    nqp_get_sc_object $P5020, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5016, $P5020
  fallback4282:
    $P5021 = $P5016."new"(1 :named("value"), "nohandler" :named("named"))
    $P5022 = $P101."push"($P5021)
  unless1452_end4278:
.annotate 'line', 1850
    $P5023 = _lex_param_1."!make"($P101)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_260_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1853
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback4283
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5004
  fallback4283:
    set $P5003, _lex_param_1["wu"]
    unless_null $P5003, fallback4284
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5005
  fallback4284:
    set $S5002, $P5003
    concat $S5001, "repeat_", $S5002
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback4287
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5008
  fallback4287:
    set $P5007, _lex_param_1["xblock"]
    unless_null $P5007, fallback4288
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5009
  fallback4288:
    unless $P5007 goto if1454_else4285 
.annotate 'line', 1856
.annotate 'line', 1857
    unless_null _lex_param_1, fallback4289
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5011
  fallback4289:
    set $P5010, _lex_param_1["xblock"]
    unless_null $P5010, fallback4290
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5012
  fallback4290:
    $P5013 = $P5010."ast"()
    $P5014 = "&xblock_immediate"($P5013)
    set $P102, $P5014
.annotate 'line', 1858
    $P5015 = $P102."op"($P101)
    goto if1454_end4286
  if1454_else4285:
.annotate 'line', 1860
.annotate 'line', 1861
    nqp_get_sc_object $P5019, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Op"]
    unless_null $P5016, fallback4291
    nqp_get_sc_object $P5020, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5016, $P5020
  fallback4291:
    unless_null _lex_param_1, fallback4292
    nqp_get_sc_object $P5022, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5022
  fallback4292:
    set $P5021, _lex_param_1["EXPR"]
    unless_null $P5021, fallback4293
    nqp_get_sc_object $P5023, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5021, $P5023
  fallback4293:
    $P5024 = $P5021."ast"()
    unless_null _lex_param_1, fallback4294
    nqp_get_sc_object $P5026, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5026
  fallback4294:
    set $P5025, _lex_param_1["pblock"]
    unless_null $P5025, fallback4295
    nqp_get_sc_object $P5027, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5025, $P5027
  fallback4295:
    $P5028 = $P5025."ast"()
    $P5029 = "&block_immediate"($P5028)
    $P5030 = $P5016."new"($P5024, $P5029, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P102, $P5030
  if1454_end4286:
    find_dynamic_lex $P5031, "$*CONTROL_USED"
    unless_null $P5031, fallback4298
    nqp_get_sc_object $P5034, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$CONTROL_USED"]
    unless_null $P5032, fallback4299
    nqp_get_sc_object $P5035, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5032, $P5035
  fallback4299:
    unless_null $P5032, vivi_14564300
    die "Contextual $*CONTROL_USED not found"
    box $P5036, "Contextual $*CONTROL_USED not found"
    set $P5032, $P5036
  vivi_14564300:
    set $P5031, $P5032
  fallback4298:
    if $P5031 goto unless1455_end4297 
.annotate 'line', 1864
.annotate 'line', 1865
    nqp_get_sc_object $P5040, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["IVal"]
    unless_null $P5037, fallback4301
    nqp_get_sc_object $P5041, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5037, $P5041
  fallback4301:
    $P5042 = $P5037."new"(1 :named("value"), "nohandler" :named("named"))
    $P5043 = $P102."push"($P5042)
  unless1455_end4297:
.annotate 'line', 1867
    $P5044 = _lex_param_1."!make"($P102)
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_261_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1870
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
.annotate 'line', 1871
    unless_null _lex_param_1, fallback4302
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5004
  fallback4302:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4303
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5005
  fallback4303:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 1872
    $P101."op"("for")
    set $P5007, $P101[1]
    unless_null $P5007, fallback4304
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5008
  fallback4304:
    set $P102, $P5007
.annotate 'line', 1874
    $P5009 = $P102."arity"()
    if $P5009 goto unless1457_end4306 
.annotate 'line', 1875
    set $P5010, $P102[0]
    unless_null $P5010, fallback4307
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5011
  fallback4307:
    nqp_get_sc_object $P5015, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4308
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5012, $P5016
  fallback4308:
    $P5017 = $P5012."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5010."push"($P5017)
.annotate 'line', 1876
    $P102."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1877
    $P5018 = $P102."arity"(1)
  unless1457_end4306:
.annotate 'line', 1879
    $P102."blocktype"("immediate")
    find_dynamic_lex $P5019, "$*CONTROL_USED"
    unless_null $P5019, fallback4311
    nqp_get_sc_object $P5022, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$CONTROL_USED"]
    unless_null $P5020, fallback4312
    nqp_get_sc_object $P5023, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5020, $P5023
  fallback4312:
    unless_null $P5020, vivi_14594313
    die "Contextual $*CONTROL_USED not found"
    box $P5024, "Contextual $*CONTROL_USED not found"
    set $P5020, $P5024
  vivi_14594313:
    set $P5019, $P5020
  fallback4311:
    if $P5019 goto unless1458_end4310 
.annotate 'line', 1880
.annotate 'line', 1881
    nqp_get_sc_object $P5028, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["IVal"]
    unless_null $P5025, fallback4314
    nqp_get_sc_object $P5029, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5025, $P5029
  fallback4314:
    $P5030 = $P5025."new"(1 :named("value"), "nohandler" :named("named"))
    $P5031 = $P101."push"($P5030)
  unless1458_end4310:
.annotate 'line', 1883
    $P5032 = _lex_param_1."!make"($P101)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_262_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1886
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 1887
    unless_null _lex_param_1, fallback4315
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5003
  fallback4315:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4316
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5004
  fallback4316:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1888
    "&set_block_handler"(_lex_param_1, $P101, "CATCH")
.annotate 'line', 1889
    $P5006 = "&default_for"("$")
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_263_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1892
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 1893
    unless_null _lex_param_1, fallback4317
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5003
  fallback4317:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4318
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5004
  fallback4318:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1894
    "&set_block_handler"(_lex_param_1, $P101, "CONTROL")
.annotate 'line', 1895
    $P5006 = "&default_for"("$")
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_264_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1929
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1930
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4319
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4320
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5005
  fallback4320:
    unless_null $P5002, vivi_14604321
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14604321:
    set $P5001, $P5002
  fallback4319:
    unless_null _lex_param_1, fallback4322
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5008
  fallback4322:
    set $P5007, _lex_param_1["blorst"]
    unless_null $P5007, fallback4323
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5009
  fallback4323:
    $P5010 = $P5007."ast"()
    $P5011 = $P5001."run_begin_block"($P5010)
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_265_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1933
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1934
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4324
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4325
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5005
  fallback4325:
    unless_null $P5002, vivi_14614326
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_14614326:
    set $P5001, $P5002
  fallback4324:
    $P5007 = $P5001."cur_lexpad"()
    unless_null _lex_param_1, fallback4327
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5009
  fallback4327:
    set $P5008, _lex_param_1["blorst"]
    unless_null $P5008, fallback4328
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5010
  fallback4328:
    $P5011 = $P5008."ast"()
    $P5007."push"($P5011)
.annotate 'line', 1935
    nqp_get_sc_object $P5015, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Stmts"]
    unless_null $P5012, fallback4329
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5012, $P5016
  fallback4329:
    $P5017 = $P5012."new"()
    $P5018 = _lex_param_1."!make"($P5017)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_266_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1938
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_4330
    .lex "RETURN", $P102
.annotate 'line', 1939
    unless_null _lex_param_1, fallback4332
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5003
  fallback4332:
    set $P5002, _lex_param_1["blorst"]
    unless_null $P5002, fallback4333
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5004
  fallback4333:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
    nqp_get_sc_object $P5009, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback4336
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5010
  fallback4336:
    type_check $I5001, $P101, $P5006
    unless $I5001 goto if1462_end4335 
.annotate 'line', 1940
    set $P5011, $P101["handlers"]
    unless_null $P5011, fallback4341
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5012
  fallback4341:
    set $P5015, $P5011
    unless $P5011 goto if1464_end4340 
    set $P5013, $P101["handlers"]
    unless_null $P5013, fallback4342
    nqp_get_sc_object $P5014, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5013, $P5014
  fallback4342:
    exists $I5002, $P5013["CATCH"]
    box $P5016, $I5002
    set $P5015, $P5016
  if1464_end4340:
    unless $P5015 goto if1463_else4337 
.annotate 'line', 1941
.annotate 'line', 1942
    _lex_param_1."!make"($P101)
    find_lex $P5017, "RETURN"
    $P5018 = $P5017(1)
    set $P5020, $P5018
    goto if1463_end4338
  if1463_else4337:
.annotate 'line', 1945
.annotate 'line', 1946
    $P5019 = $P101."blocktype"("immediate")
    set $P5020, $P5019
  if1463_end4338:
  if1462_end4335:
.annotate 'line', 1949
    nqp_get_sc_object $P5024, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback4343
    nqp_get_sc_object $P5025, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5021, $P5025
  fallback4343:
.annotate 'line', 1953
    nqp_get_sc_object $P5029, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Stmts"]
    unless_null $P5026, fallback4344
    nqp_get_sc_object $P5030, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5026, $P5030
  fallback4344:
.annotate 'line', 1954
    nqp_get_sc_object $P5034, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Op"]
    unless_null $P5031, fallback4345
    nqp_get_sc_object $P5035, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5031, $P5035
  fallback4345:
.annotate 'line', 1956
    nqp_get_sc_object $P5039, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback4346
    nqp_get_sc_object $P5040, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5036, $P5040
  fallback4346:
    $P5041 = $P5036."new"("exception" :named("op"))
.annotate 'line', 1957
    nqp_get_sc_object $P5045, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["SVal"]
    unless_null $P5042, fallback4347
    nqp_get_sc_object $P5046, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5042, $P5046
  fallback4347:
    $P5047 = $P5042."new"("handled" :named("value"))
.annotate 'line', 1958
    nqp_get_sc_object $P5051, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["IVal"]
    unless_null $P5048, fallback4348
    nqp_get_sc_object $P5052, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5048, $P5052
  fallback4348:
    $P5053 = $P5048."new"(1 :named("value"))
    $P5054 = $P5031."new"($P5041, $P5047, $P5053, "bindkey_i" :named("op"))
.annotate 'line', 1960
    $P5055 = "&default_for"("$")
    $P5056 = $P5026."new"($P5054, $P5055)
    $P5057 = $P5021."new"($P101, "CATCH", $P5056, "handle" :named("op"))
    $P5058 = _lex_param_1."!make"($P5057)
    goto lexotic_4331
  lexotic_4330:
    .get_results ($P5058)
  lexotic_4331:
    .return ($P5058) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_267_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1964
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1965
    unless_null _lex_param_1, fallback4351
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4351:
    set $P5001, _lex_param_1["block"]
    unless_null $P5001, fallback4352
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4352:
    unless $P5001 goto if1465_else4349 
.annotate 'line', 1966
    unless_null _lex_param_1, fallback4353
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5005
  fallback4353:
    set $P5004, _lex_param_1["block"]
    unless_null $P5004, fallback4354
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5006
  fallback4354:
    $P5007 = $P5004."ast"()
    $P5008 = "&block_immediate"($P5007)
    set $P5013, $P5008
    goto if1465_end4350
  if1465_else4349:
.annotate 'line', 1967
    unless_null _lex_param_1, fallback4355
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5010
  fallback4355:
    set $P5009, _lex_param_1["statement"]
    unless_null $P5009, fallback4356
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5011
  fallback4356:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1465_end4350:
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_268_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1972
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4357
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4357:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4358
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4358:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_269_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1973
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4359
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4359:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4360
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4360:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_270_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1975
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4361
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4361:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4362
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4362:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_271_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1976
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4363
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4363:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4364
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4364:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_272_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1980
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4365
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4365:
    set $P5001, _lex_param_1["fatarrow"]
    unless_null $P5001, fallback4366
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4366:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_273_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1981
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4367
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4367:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback4368
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4368:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_274_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1982
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4369
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4369:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4370
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4370:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_275_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1983
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4371
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4371:
    set $P5001, _lex_param_1["package_declarator"]
    unless_null $P5001, fallback4372
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4372:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_276_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1984
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4373
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4373:
    set $P5001, _lex_param_1["scope_declarator"]
    unless_null $P5001, fallback4374
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4374:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_277_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1985
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4375
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4375:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4376
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4376:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_278_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1986
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4377
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4377:
    set $P5001, _lex_param_1["regex_declarator"]
    unless_null $P5001, fallback4378
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4378:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_279_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1987
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4379
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4379:
    set $P5001, _lex_param_1["statement_prefix"]
    unless_null $P5001, fallback4380
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4380:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_280_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1988
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1989
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback4381
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback4381:
    unless_null _lex_param_1, fallback4382
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5007
  fallback4382:
    set $P5006, _lex_param_1["pblock"]
    unless_null $P5006, fallback4383
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5008
  fallback4383:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "takeclosure" :named("op"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_281_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1992
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 1993
    unless_null _lex_param_1, fallback4384
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5003
  fallback4384:
    set $P5002, _lex_param_1["val"]
    unless_null $P5002, fallback4385
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5004
  fallback4385:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1994
    unless_null _lex_param_1, fallback4386
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5007
  fallback4386:
    set $P5006, _lex_param_1["key"]
    unless_null $P5006, fallback4387
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5008
  fallback4387:
    $P5009 = $P5006."Str"()
    $P101."named"($P5009)
.annotate 'line', 1995
    $P5010 = _lex_param_1."!make"($P101)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_282_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1998
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5021 = 'cuid_447_1360256386.79' 
    capture_lex $P5021 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4390
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4390:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4391
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4391:
    unless $P5001 goto if1466_else4388 
.annotate 'line', 1999
.annotate 'line', 2000
    unless_null _lex_param_1, fallback4392
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5005
  fallback4392:
    set $P5004, _lex_param_1["variable"]
    unless_null $P5004, fallback4393
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5006
  fallback4393:
    $P5007 = $P5004."ast"()
    unless_null _lex_param_1, fallback4394
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5010
  fallback4394:
    set $P5009, _lex_param_1["variable"]
    unless_null $P5009, fallback4395
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5011
  fallback4395:
    set $P5008, $P5009["desigilname"]
    unless_null $P5008, fallback4396
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5012
  fallback4396:
    set $S5001, $P5008
    $P5007."named"($S5001)
.annotate 'line', 2001
    unless_null _lex_param_1, fallback4397
    nqp_get_sc_object $P5014, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5014
  fallback4397:
    set $P5013, _lex_param_1["variable"]
    unless_null $P5013, fallback4398
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5013, $P5015
  fallback4398:
    $P5016 = $P5013."ast"()
    $P5017 = _lex_param_1."!make"($P5016)
    set $P5020, $P5017
    goto if1466_end4389
  if1466_else4388:
    .const 'Sub' $P5018 = 'cuid_447_1360256386.79' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5020, $P5019
  if1466_end4389:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_447_1360256386.79") :anon :lex :outer("cuid_282_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2002
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback4401
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5004
  fallback4401:
    set $P5002, $P5003["circumfix"]
    unless_null $P5002, fallback4402
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5005
  fallback4402:
    unless $P5002 goto if1467_else4399 
.annotate 'line', 2004
    find_lex $P5008, "$/"
    unless_null $P5008, fallback4403
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5009
  fallback4403:
    set $P5007, $P5008["circumfix"]
    unless_null $P5007, fallback4404
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5010
  fallback4404:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback4405
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5011
  fallback4405:
    $P5012 = $P5006."ast"()
    set $P5023, $P5012
    goto if1467_end4400
  if1467_else4399:
.annotate 'line', 2005
    nqp_get_sc_object $P5016, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["IVal"]
    unless_null $P5013, fallback4406
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5013, $P5017
  fallback4406:
    find_lex $P5019, "$/"
    unless_null $P5019, fallback4407
    nqp_get_sc_object $P5020, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5019, $P5020
  fallback4407:
    set $P5018, $P5019["not"]
    unless_null $P5018, fallback4408
    nqp_get_sc_object $P5021, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5018, $P5021
  fallback4408:
    isfalse $I5001, $P5018
    $P5022 = $P5013."new"($I5001 :named("value"))
    set $P5023, $P5022
  if1467_end4400:
    set $P101, $P5023
.annotate 'line', 2006
    find_lex $P5025, "$/"
    unless_null $P5025, fallback4409
    nqp_get_sc_object $P5026, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5025, $P5026
  fallback4409:
    set $P5024, $P5025["identifier"]
    unless_null $P5024, fallback4410
    nqp_get_sc_object $P5027, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5024, $P5027
  fallback4410:
    set $S5001, $P5024
    $P101."named"($S5001)
.annotate 'line', 2007
    find_dynamic_lex $P5028, "$/"
    $P5029 = $P5028."!make"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_283_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2011
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5020 = 'cuid_449_1360256386.79' 
    capture_lex $P5020 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    unless_null _lex_param_1, fallback4413
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5003
  fallback4413:
    set $P5002, _lex_param_1["postcircumfix"]
    unless_null $P5002, fallback4414
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5004
  fallback4414:
    unless $P5002 goto if1468_else4411 
.annotate 'line', 2013
.annotate 'line', 2014
    unless_null _lex_param_1, fallback4415
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5006
  fallback4415:
    set $P5005, _lex_param_1["postcircumfix"]
    unless_null $P5005, fallback4416
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5005, $P5007
  fallback4416:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
.annotate 'line', 2015
    nqp_get_sc_object $P5012, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["VarWithFallback"]
    unless_null $P5009, fallback4417
    nqp_get_sc_object $P5013, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5013
  fallback4417:
.annotate 'line', 2016
    $P5014 = "&default_for"("$")
    $P5015 = $P5009."new"("$/" :named("name"), "lexical" :named("scope"), $P5014 :named("fallback"))
    $P5016 = $P101."unshift"($P5015)
    goto if1468_end4412
  if1468_else4411:
    .const 'Sub' $P5017 = 'cuid_449_1360256386.79' 
    capture_lex $P5017
    $P5018 = $P5017()
  if1468_end4412:
.annotate 'line', 2097
    $P5019 = _lex_param_1."!make"($P101)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_449_1360256386.79") :anon :lex :outer("cuid_283_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2019
    .const 'Sub' $P5065 = 'cuid_448_1360256386.79' 
    capture_lex $P5065 
    .const 'Sub' $P5065 = 'cuid_452_1360256386.79' 
    capture_lex $P5065 
    .const 'Sub' $P5065 = 'cuid_453_1360256386.79' 
    capture_lex $P5065 
    .const 'Sub' $P5065 = 'cuid_454_1360256386.79' 
    capture_lex $P5065 
    .lex "@name", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 2020
    nqp_get_sc_object $P5005, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5004, $P5005, "NQP"
    get_who $P5003, $P5004
    set $P5002, $P5003["Compiler"]
    unless_null $P5002, fallback4418
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5006
  fallback4418:
    find_lex $P5007, "$/"
    set $S5001, $P5007
    $P5008 = $P5002."parse_name"($S5001)
    set $P101, $P5008
    set $N5001, $P101
    set $N5002, 1
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1469_else4419 
.annotate 'line', 2021
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4423
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5011
  fallback4423:
    set $P5009, $P5010["twigil"]
    unless_null $P5009, fallback4424
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5012
  fallback4424:
    unless $P5009 goto if1470_end4422 
.annotate 'line', 2022
.annotate 'line', 2023
    find_lex $P5013, "$/"
    $P5014 = $P5013."CURSOR"()
    $P5015 = $P5014."panic"("Twigil not allowed on multi-part name")
  if1470_end4422:
.annotate 'line', 2025
    find_lex $P5016, "$/"
    $P5017 = "&lexical_package_lookup"($P101, $P5016)
    store_lex "$past", $P5017
    set $P5064, $P5017
    goto if1469_end4420
  if1469_else4419:
    find_lex $P5020, "$/"
    unless_null $P5020, fallback4427
    nqp_get_sc_object $P5021, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5020, $P5021
  fallback4427:
    set $P5019, $P5020["twigil"]
    unless_null $P5019, fallback4428
    nqp_get_sc_object $P5022, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5019, $P5022
  fallback4428:
    set $P5018, $P5019[0]
    unless_null $P5018, fallback4429
    nqp_get_sc_object $P5023, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5018, $P5023
  fallback4429:
    set $S5002, $P5018
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1471_else4425 
    .const 'Sub' $P5024 = 'cuid_448_1360256386.79' 
    capture_lex $P5024
    $P5025 = $P5024()
    set $P5063, $P5025
    goto if1471_end4426
  if1471_else4425:
    find_lex $P5028, "$/"
    unless_null $P5028, fallback4440
    nqp_get_sc_object $P5029, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5028, $P5029
  fallback4440:
    set $P5027, $P5028["twigil"]
    unless_null $P5027, fallback4441
    nqp_get_sc_object $P5030, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5027, $P5030
  fallback4441:
    set $P5026, $P5027[0]
    unless_null $P5026, fallback4442
    nqp_get_sc_object $P5031, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5026, $P5031
  fallback4442:
    set $S5003, $P5026
    iseq $I5003, $S5003, "!"
    unless $I5003 goto if1472_else4438 
    .const 'Sub' $P5032 = 'cuid_452_1360256386.79' 
    capture_lex $P5032
    $P5033 = $P5032()
    set $P5062, $P5033
    goto if1472_end4439
  if1472_else4438:
    find_lex $P5035, "$/"
    unless_null $P5035, fallback4482
    nqp_get_sc_object $P5036, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5035, $P5036
  fallback4482:
    set $P5034, $P5035["semilist"]
    unless_null $P5034, fallback4483
    nqp_get_sc_object $P5037, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5034, $P5037
  fallback4483:
    unless $P5034 goto if1484_else4480 
    .const 'Sub' $P5038 = 'cuid_453_1360256386.79' 
    capture_lex $P5038
    $P5039 = $P5038()
    set $P5061, $P5039
    goto if1484_end4481
  if1484_else4480:
.annotate 'line', 2082
    find_dynamic_lex $P5040, "$*W"
    unless_null $P5040, fallback4497
    nqp_get_sc_object $P5043, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5042, $P5043
    set $P5041, $P5042["$W"]
    unless_null $P5041, fallback4498
    nqp_get_sc_object $P5044, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5041, $P5044
  fallback4498:
    unless_null $P5041, vivi_14884499
    die "Contextual $*W not found"
    box $P5045, "Contextual $*W not found"
    set $P5041, $P5045
  vivi_14884499:
    set $P5040, $P5041
  fallback4497:
    set $P5046, $P101[0]
    unless_null $P5046, fallback4500
    nqp_get_sc_object $P5047, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5046, $P5047
  fallback4500:
    set $S5004, $P5046
    $P5048 = $P5040."is_package"($S5004)
    unless $P5048 goto if1487_else4495 
.annotate 'line', 2083
    find_lex $P5049, "$/"
    $P5050 = "&lexical_package_lookup"($P101, $P5049)
    store_lex "$past", $P5050
.annotate 'line', 2084
    find_lex $P5051, "$past"
    find_lex $P5053, "$/"
    unless_null $P5053, fallback4501
    nqp_get_sc_object $P5054, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5053, $P5054
  fallback4501:
    set $P5052, $P5053["sigil"]
    unless_null $P5052, fallback4502
    nqp_get_sc_object $P5055, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5052, $P5055
  fallback4502:
    $P5056 = "&default_for"($P5052)
    $P5057 = $P5051."fallback"($P5056)
    set $P5060, $P5057
    goto if1487_end4496
  if1487_else4495:
    .const 'Sub' $P5058 = 'cuid_454_1360256386.79' 
    capture_lex $P5058
    $P5059 = $P5058()
    set $P5060, $P5059
  if1487_end4496:
    set $P5061, $P5060
  if1484_end4481:
    set $P5062, $P5061
  if1472_end4439:
    set $P5063, $P5062
  if1471_end4426:
    set $P5064, $P5063
  if1469_end4420:
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_448_1360256386.79") :anon :lex :outer("cuid_449_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2027
    .lex "$global_fallback", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 2028
    nqp_get_sc_object $P5005, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback4430
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5006
  fallback4430:
.annotate 'line', 2030
    new $P5007, 'ResizablePMCArray'
    box $P5008, "GLOBAL"
    push $P5007, $P5008
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4431
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5011
  fallback4431:
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4432
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5012
  fallback4432:
    set $S5002, $P5009
    find_lex $P5014, "$/"
    unless_null $P5014, fallback4433
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5014, $P5015
  fallback4433:
    set $P5013, $P5014["desigilname"]
    unless_null $P5013, fallback4434
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5013, $P5016
  fallback4434:
    set $S5003, $P5013
    concat $S5001, $S5002, $S5003
    box $P5017, $S5001
    push $P5007, $P5017
    find_lex $P5018, "$/"
    $P5019 = "&lexical_package_lookup"($P5007, $P5018)
.annotate 'line', 2031
    nqp_get_sc_object $P5023, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback4435
    nqp_get_sc_object $P5024, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5020, $P5024
  fallback4435:
.annotate 'line', 2033
    nqp_get_sc_object $P5028, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["SVal"]
    unless_null $P5025, fallback4436
    nqp_get_sc_object $P5029, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5025, $P5029
  fallback4436:
    find_lex $P5030, "$/"
    set $S5006, $P5030
    concat $S5005, "Contextual ", $S5006
    concat $S5004, $S5005, " not found"
    $P5031 = $P5025."new"($S5004 :named("value"))
    $P5032 = $P5020."new"($P5031, "die_s" :named("op"))
    $P5033 = $P5002."new"($P5019, $P5032, "ifnull" :named("op"))
    set $P101, $P5033
.annotate 'line', 2035
    nqp_get_sc_object $P5037, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["VarWithFallback"]
    unless_null $P5034, fallback4437
    nqp_get_sc_object $P5038, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5034, $P5038
  fallback4437:
.annotate 'line', 2036
    find_lex $P5039, "@name"
    $P5040 = $P5039."pop"()
    set $S5007, $P5040
    $P5041 = $P5034."new"($S5007 :named("name"), "contextual" :named("scope"), $P101 :named("fallback"))
    store_lex "$past", $P5041
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_452_1360256386.79") :anon :lex :outer("cuid_449_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2040
    .const 'Sub' $P5064 = 'cuid_451_1360256386.79' 
    capture_lex $P5064 
    .lex "$name", $P101 
    .lex "$ch", $P102 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
.annotate 'line', 2041
    find_lex $P5003, "@name"
    $P5004 = $P5003."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    find_dynamic_lex $P5006, "$*PKGDECL"
    unless_null $P5006, fallback4445
    nqp_get_sc_object $P5009, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$PKGDECL"]
    unless_null $P5007, fallback4446
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5010
  fallback4446:
    unless_null $P5007, vivi_14744447
    die "Contextual $*PKGDECL not found"
    box $P5011, "Contextual $*PKGDECL not found"
    set $P5007, $P5011
  vivi_14744447:
    set $P5006, $P5007
  fallback4445:
    set $S5002, $P5006
    iseq $I5001, $S5002, "role"
    unless $I5001 goto if1473_else4443 
.annotate 'line', 2043
.annotate 'line', 2044
    nqp_get_sc_object $P5015, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4448
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5012, $P5016
  fallback4448:
    $P5017 = $P5012."new"("$?CLASS" :named("name"), "lexical" :named("scope"))
    set $P102, $P5017
.annotate 'line', 2045
    find_dynamic_lex $P5018, "$*PACKAGE"
    unless_null $P5018, fallback4449
    nqp_get_sc_object $P5021, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$PACKAGE"]
    unless_null $P5019, fallback4450
    nqp_get_sc_object $P5022, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5019, $P5022
  fallback4450:
    unless_null $P5019, vivi_14754451
    die "Contextual $*PACKAGE not found"
    box $P5023, "Contextual $*PACKAGE not found"
    set $P5019, $P5023
  vivi_14754451:
    set $P5018, $P5019
  fallback4449:
    $P5024 = $P102."set_compile_time_value"($P5018)
    goto if1473_end4444
  if1473_else4443:
.annotate 'line', 2047
.annotate 'line', 2048
    nqp_get_sc_object $P5028, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["WVal"]
    unless_null $P5025, fallback4452
    nqp_get_sc_object $P5029, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5025, $P5029
  fallback4452:
    find_dynamic_lex $P5030, "$*PACKAGE"
    unless_null $P5030, fallback4453
    nqp_get_sc_object $P5033, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5032, $P5033
    set $P5031, $P5032["$PACKAGE"]
    unless_null $P5031, fallback4454
    nqp_get_sc_object $P5034, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5031, $P5034
  fallback4454:
    unless_null $P5031, vivi_14764455
    die "Contextual $*PACKAGE not found"
    box $P5035, "Contextual $*PACKAGE not found"
    set $P5031, $P5035
  vivi_14764455:
    set $P5030, $P5031
  fallback4453:
    $P5036 = $P5025."new"($P5030 :named("value"))
    set $P102, $P5036
  if1473_end4444:
.annotate 'line', 2050
    nqp_get_sc_object $P5040, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Var"]
    unless_null $P5037, fallback4456
    nqp_get_sc_object $P5041, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5037, $P5041
  fallback4456:
.annotate 'line', 2052
    nqp_get_sc_object $P5045, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback4457
    nqp_get_sc_object $P5046, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5042, $P5046
  fallback4457:
.annotate 'line', 2053
    nqp_get_sc_object $P5050, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["Var"]
    unless_null $P5047, fallback4458
    nqp_get_sc_object $P5051, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5047, $P5051
  fallback4458:
    $P5052 = $P5047."new"("self" :named("name"), "lexical" :named("scope"))
    $P5053 = $P5042."new"($P5052, "decont" :named("op"))
    $P5054 = $P5037."new"($P5053, $P102, $P101 :named("name"), "attribute" :named("scope"))
    store_lex "$past", $P5054
    find_dynamic_lex $P5055, "$*IN_DECL"
    unless_null $P5055, fallback4461
    nqp_get_sc_object $P5058, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5057, $P5058
    set $P5056, $P5057["$IN_DECL"]
    unless_null $P5056, fallback4462
    nqp_get_sc_object $P5059, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5056, $P5059
  fallback4462:
    unless_null $P5056, vivi_14784463
    die "Contextual $*IN_DECL not found"
    box $P5060, "Contextual $*IN_DECL not found"
    set $P5056, $P5060
  vivi_14784463:
    set $P5055, $P5056
  fallback4461:
    set $P5063, $P5055
    if $P5055 goto unless1477_end4460 
    .const 'Sub' $P5061 = 'cuid_451_1360256386.79' 
    capture_lex $P5061
    $P5062 = $P5061()
    set $P5063, $P5062
  unless1477_end4460:
    .return ($P5063) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_451_1360256386.79") :anon :lex :outer("cuid_452_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2058
    .const 'Sub' $P5032 = 'cuid_450_1360256386.79' 
    capture_lex $P5032 
    .lex "$attr", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 2060
    find_dynamic_lex $P5006, "$*PACKAGE"
    unless_null $P5006, fallback4464
    nqp_get_sc_object $P5009, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$PACKAGE"]
    unless_null $P5007, fallback4465
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5010
  fallback4465:
    unless_null $P5007, vivi_14794466
    die "Contextual $*PACKAGE not found"
    box $P5011, "Contextual $*PACKAGE not found"
    set $P5007, $P5011
  vivi_14794466:
    set $P5006, $P5007
  fallback4464:
    get_how $P5005, $P5006
    find_dynamic_lex $P5012, "$*PACKAGE"
    unless_null $P5012, fallback4467
    nqp_get_sc_object $P5015, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$PACKAGE"]
    unless_null $P5013, fallback4468
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5013, $P5016
  fallback4468:
    unless_null $P5013, vivi_14804469
    die "Contextual $*PACKAGE not found"
    box $P5017, "Contextual $*PACKAGE not found"
    set $P5013, $P5017
  vivi_14804469:
    set $P5012, $P5013
  fallback4467:
    $P5018 = $P5005."attributes"($P5012, 1 :named("local"))
    set $P5002, $P5018
    iter $P5004, $P5018
    new $P5020, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5020, for_handlers4472
    push_eh $P5020
  for_next4473:
    unless $P5004, for_done4475
    shift $P5021, $P5004
  for_redo4474:
    .const 'Sub' $P5019 = 'cuid_450_1360256386.79' 
    capture_lex $P5019
    $P5002 = $P5019($P5021)
    goto for_next4473
  for_handlers4472:
    .get_results ($P5020)
    pop_upto_eh $P5020
    getattribute $P5020, $P5020, 'type'
    eq $P5020, .CONTROL_LOOP_NEXT, for_next4473
    eq $P5020, .CONTROL_LOOP_REDO, for_redo4474
  for_done4475:
    pop_eh 
    defined $I5001, $P101
    unless $I5001 goto if1482_else4476 
.annotate 'line', 2066
    can $I5002, $P101, "type"
    box $P5026, $I5002
    set $P5025, $P5026
    unless $I5002 goto if1483_end4479 
.annotate 'line', 2067
.annotate 'line', 2068
    find_lex $P5022, "$past"
    $P5023 = $P101."type"()
    $P5024 = $P5022."returns"($P5023)
    set $P5025, $P5024
  if1483_end4479:
    set $P5031, $P5025
    goto if1482_end4477
  if1482_else4476:
.annotate 'line', 2071
.annotate 'line', 2072
    find_lex $P5027, "$/"
    $P5028 = $P5027."CURSOR"()
    find_lex $P5029, "$name"
    set $S5003, $P5029
    concat $S5002, "Attribute '", $S5003
    concat $S5001, $S5002, "' not declared"
    $P5030 = $P5028."panic"($S5001)
    set $P5031, $P5030
  if1482_end4477:
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_450_1360256386.79") :anon :lex :outer("cuid_451_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2060
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2061
    $P5001 = _lex_param_0."name"()
    set $S5001, $P5001
    find_lex $P5002, "$name"
    set $S5002, $P5002
    iseq $I5001, $S5001, $S5002
    set $I5002, $I5001
    unless $I5001 goto if1481_end4471 
    store_lex "$attr", _lex_param_0
    die 0, .CONTROL_LOOP_LAST
    set $I5002, 0
  if1481_end4471:
    .return ($I5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_453_1360256386.79") :anon :lex :outer("cuid_449_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2076
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback4486
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5004
  fallback4486:
    set $P5002, $P5003["sigil"]
    unless_null $P5002, fallback4487
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5005
  fallback4487:
    set $S5001, $P5002
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1485_else4484 
    set $S5004, "list"
    goto if1485_end4485
  if1485_else4484:
    find_lex $P5007, "$/"
    unless_null $P5007, fallback4490
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5008
  fallback4490:
    set $P5006, $P5007["sigil"]
    unless_null $P5006, fallback4491
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5009
  fallback4491:
    set $S5002, $P5006
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1486_else4488 
    set $S5003, "hash"
    goto if1486_end4489
  if1486_else4488:
    set $S5003, "item"
  if1486_end4489:
    set $S5004, $S5003
  if1485_end4485:
    box $P5010, $S5004
    set $P101, $P5010
.annotate 'line', 2080
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback4492
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5015
  fallback4492:
    find_lex $P5017, "$/"
    unless_null $P5017, fallback4493
    nqp_get_sc_object $P5018, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5017, $P5018
  fallback4493:
    set $P5016, $P5017["semilist"]
    unless_null $P5016, fallback4494
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5016, $P5019
  fallback4494:
    $P5020 = $P5016."ast"()
    $P5021 = $P5011."new"($P5020, "callmethod" :named("op"), $P101 :named("name"))
    store_lex "$past", $P5021
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_454_1360256386.79") :anon :lex :outer("cuid_449_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2086
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 2087
    find_lex $P5002, "@name"
    $P5003 = $P5002."pop"()
    set $S5001, $P5003
    box $P5004, $S5001
    set $P101, $P5004
    find_dynamic_lex $P5005, "$*IN_DECL"
    unless_null $P5005, fallback4515
    nqp_get_sc_object $P5008, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$IN_DECL"]
    unless_null $P5006, fallback4516
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5009
  fallback4516:
    unless_null $P5006, vivi_14954517
    die "Contextual $*IN_DECL not found"
    box $P5010, "Contextual $*IN_DECL not found"
    set $P5006, $P5010
  vivi_14954517:
    set $P5005, $P5006
  fallback4515:
    set $S5002, $P5005
    iseq $I5001, $S5002, "variable"
    set $I5003, $I5001
    if $I5001 goto unless1494_end4514 
    set $S5003, $P101
    iseq $I5002, $S5003, "$_"
    set $I5003, $I5002
  unless1494_end4514:
    set $I5005, $I5003
    if $I5003 goto unless1493_end4512 
    set $S5004, $P101
    iseq $I5004, $S5004, "$/"
    set $I5005, $I5004
  unless1493_end4512:
    set $I5007, $I5005
    if $I5005 goto unless1492_end4510 
    set $S5005, $P101
    iseq $I5006, $S5005, "$!"
    set $I5007, $I5006
  unless1492_end4510:
    set $I5009, $I5007
    if $I5007 goto unless1491_end4508 
    find_lex $P5013, "$/"
    unless_null $P5013, fallback4518
    nqp_get_sc_object $P5014, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5013, $P5014
  fallback4518:
    set $P5012, $P5013["twigil"]
    unless_null $P5012, fallback4519
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5012, $P5015
  fallback4519:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback4520
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5016
  fallback4520:
    set $S5006, $P5011
    iseq $I5008, $S5006, "?"
    set $I5009, $I5008
  unless1491_end4508:
    box $P5025, $I5009
    set $P5024, $P5025
    if $I5009 goto unless1490_end4506 
.annotate 'line', 2089
    find_dynamic_lex $P5017, "$*W"
    unless_null $P5017, fallback4521
    nqp_get_sc_object $P5020, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5019, $P5020
    set $P5018, $P5019["$W"]
    unless_null $P5018, fallback4522
    nqp_get_sc_object $P5021, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5018, $P5021
  fallback4522:
    unless_null $P5018, vivi_14964523
    die "Contextual $*W not found"
    box $P5022, "Contextual $*W not found"
    set $P5018, $P5022
  vivi_14964523:
    set $P5017, $P5018
  fallback4521:
    $P5023 = $P5017."is_lexical"($P101)
    set $P5024, $P5023
  unless1490_end4506:
    unless $P5024 goto if1489_else4503 
.annotate 'line', 2090
    nqp_get_sc_object $P5029, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback4524
    nqp_get_sc_object $P5030, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5026, $P5030
  fallback4524:
    $P5031 = $P5026."new"($P101 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5031
    set $P5035, $P5031
    goto if1489_end4504
  if1489_else4503:
.annotate 'line', 2092
.annotate 'line', 2093
    find_lex $P5032, "$/"
    $P5033 = $P5032."CURSOR"()
    set $S5009, $P101
    concat $S5008, "Use of undeclared variable '", $S5009
    concat $S5007, $S5008, "'"
    $P5034 = $P5033."panic"($S5007)
    set $P5035, $P5034
  if1489_end4504:
    .return ($P5035) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_284_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2100
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4525
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4525:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4526
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4526:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_285_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2101
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4527
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4527:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4528
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4528:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_286_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2102
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4529
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4529:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4530
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4530:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_287_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2103
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4531
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4531:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4532
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4532:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_288_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2104
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4533
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4533:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4534
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4534:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_289_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2105
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4535
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4535:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4536
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4536:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_290_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2107
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$HOW", $P101 
    .lex "$PACKAGE", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
.annotate 'line', 2110
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4537
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4538
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5007
  fallback4538:
    unless_null $P5004, vivi_14974539
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_14974539:
    set $P5003, $P5004
  fallback4537:
    unless_null _lex_param_1, fallback4540
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5011
  fallback4540:
    set $P5010, _lex_param_1["metaclass"]
    unless_null $P5010, fallback4541
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5012
  fallback4541:
    set $P5009, $P5010["identifier"]
    unless_null $P5009, fallback4542
    nqp_get_sc_object $P5013, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5013
  fallback4542:
    $P5014 = $P5003."find_sym"($P5009)
    set $P101, $P5014
.annotate 'line', 2111
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback4543
    nqp_get_sc_object $P5018, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback4544
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5016, $P5019
  fallback4544:
    unless_null $P5016, vivi_14984545
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_14984545:
    set $P5015, $P5016
  fallback4543:
    unless_null _lex_param_1, fallback4546
    nqp_get_sc_object $P5022, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5022
  fallback4546:
    set $P5021, _lex_param_1["name"]
    unless_null $P5021, fallback4547
    nqp_get_sc_object $P5023, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5021, $P5023
  fallback4547:
    set $S5001, $P5021
    $P5024 = $P5015."pkg_create_mo"($P101, $S5001 :named("name"))
    set $P102, $P5024
    find_dynamic_lex $P5025, "$*SCOPE"
    unless_null $P5025, fallback4552
    nqp_get_sc_object $P5028, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$SCOPE"]
    unless_null $P5026, fallback4553
    nqp_get_sc_object $P5029, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5026, $P5029
  fallback4553:
    unless_null $P5026, vivi_15014554
    die "Contextual $*SCOPE not found"
    box $P5030, "Contextual $*SCOPE not found"
    set $P5026, $P5030
  vivi_15014554:
    set $P5025, $P5026
  fallback4552:
    set $S5002, $P5025
    iseq $I5001, $S5002, "our"
    set $I5003, $I5001
    if $I5001 goto unless1500_end4551 
    find_dynamic_lex $P5031, "$*SCOPE"
    unless_null $P5031, fallback4555
    nqp_get_sc_object $P5034, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$SCOPE"]
    unless_null $P5032, fallback4556
    nqp_get_sc_object $P5035, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5032, $P5035
  fallback4556:
    unless_null $P5032, vivi_15024557
    die "Contextual $*SCOPE not found"
    box $P5036, "Contextual $*SCOPE not found"
    set $P5032, $P5036
  vivi_15024557:
    set $P5031, $P5032
  fallback4555:
    set $S5003, $P5031
    iseq $I5002, $S5003, ""
    set $I5003, $I5002
  unless1500_end4551:
    unless $I5003 goto if1499_else4548 
.annotate 'line', 2114
.annotate 'line', 2115
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback4558
    nqp_get_sc_object $P5040, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback4559
    nqp_get_sc_object $P5041, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5038, $P5041
  fallback4559:
    unless_null $P5038, vivi_15034560
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_15034560:
    set $P5037, $P5038
  fallback4558:
    find_dynamic_lex $P5043, "$*OUTERPACKAGE"
    unless_null $P5043, fallback4561
    nqp_get_sc_object $P5046, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$OUTERPACKAGE"]
    unless_null $P5044, fallback4562
    nqp_get_sc_object $P5047, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5044, $P5047
  fallback4562:
    unless_null $P5044, vivi_15044563
    die "Contextual $*OUTERPACKAGE not found"
    box $P5048, "Contextual $*OUTERPACKAGE not found"
    set $P5044, $P5048
  vivi_15044563:
    set $P5043, $P5044
  fallback4561:
    unless_null _lex_param_1, fallback4564
    nqp_get_sc_object $P5051, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5051
  fallback4564:
    set $P5050, _lex_param_1["name"]
    unless_null $P5050, fallback4565
    nqp_get_sc_object $P5052, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5050, $P5052
  fallback4565:
    set $P5049, $P5050["identifier"]
    unless_null $P5049, fallback4566
    nqp_get_sc_object $P5053, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5049, $P5053
  fallback4566:
    $P5037."install_package_symbol"($P5043, $P5049, $P102)
    unless_null _lex_param_1, fallback4569
    nqp_get_sc_object $P5056, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5056
  fallback4569:
    set $P5055, _lex_param_1["name"]
    unless_null $P5055, fallback4570
    nqp_get_sc_object $P5057, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5055, $P5057
  fallback4570:
    set $P5054, $P5055["identifier"]
    unless_null $P5054, fallback4571
    nqp_get_sc_object $P5058, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5054, $P5058
  fallback4571:
    set $N5001, $P5054
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5081, $I5004
    set $P5080, $P5081
    unless $I5004 goto if1505_end4568 
.annotate 'line', 2116
.annotate 'line', 2117
    find_dynamic_lex $P5059, "$*W"
    unless_null $P5059, fallback4572
    nqp_get_sc_object $P5062, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$W"]
    unless_null $P5060, fallback4573
    nqp_get_sc_object $P5063, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5060, $P5063
  fallback4573:
    unless_null $P5060, vivi_15064574
    die "Contextual $*W not found"
    box $P5064, "Contextual $*W not found"
    set $P5060, $P5064
  vivi_15064574:
    set $P5059, $P5060
  fallback4572:
    find_dynamic_lex $P5065, "$*W"
    unless_null $P5065, fallback4575
    nqp_get_sc_object $P5068, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$W"]
    unless_null $P5066, fallback4576
    nqp_get_sc_object $P5069, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5066, $P5069
  fallback4576:
    unless_null $P5066, vivi_15074577
    die "Contextual $*W not found"
    box $P5070, "Contextual $*W not found"
    set $P5066, $P5070
  vivi_15074577:
    set $P5065, $P5066
  fallback4575:
    $P5071 = $P5065."cur_lexpad"()
    unless_null _lex_param_1, fallback4578
    nqp_get_sc_object $P5075, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5075
  fallback4578:
    set $P5074, _lex_param_1["name"]
    unless_null $P5074, fallback4579
    nqp_get_sc_object $P5076, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5074, $P5076
  fallback4579:
    set $P5073, $P5074["identifier"]
    unless_null $P5073, fallback4580
    nqp_get_sc_object $P5077, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5073, $P5077
  fallback4580:
    set $P5072, $P5073[0]
    unless_null $P5072, fallback4581
    nqp_get_sc_object $P5078, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5072, $P5078
  fallback4581:
    $P5079 = $P5059."install_lexical_symbol"($P5071, $P5072, $P102)
    set $P5080, $P5079
  if1505_end4568:
    goto if1499_end4549
  if1499_else4548:
    find_dynamic_lex $P5082, "$*SCOPE"
    unless_null $P5082, fallback4584
    nqp_get_sc_object $P5085, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["$SCOPE"]
    unless_null $P5083, fallback4585
    nqp_get_sc_object $P5086, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5083, $P5086
  fallback4585:
    unless_null $P5083, vivi_15094586
    die "Contextual $*SCOPE not found"
    box $P5087, "Contextual $*SCOPE not found"
    set $P5083, $P5087
  vivi_15094586:
    set $P5082, $P5083
  fallback4584:
    set $S5004, $P5082
    iseq $I5005, $S5004, "my"
    unless $I5005 goto if1508_else4582 
.annotate 'line', 2120
    unless_null _lex_param_1, fallback4589
    nqp_get_sc_object $P5090, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5090
  fallback4589:
    set $P5089, _lex_param_1["name"]
    unless_null $P5089, fallback4590
    nqp_get_sc_object $P5091, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5089, $P5091
  fallback4590:
    set $P5088, $P5089["identifier"]
    unless_null $P5088, fallback4591
    nqp_get_sc_object $P5092, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5088, $P5092
  fallback4591:
    set $N5003, $P5088
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    unless $I5006 goto if1510_end4588 
.annotate 'line', 2121
.annotate 'line', 2122
    unless_null _lex_param_1, fallback4592
    nqp_get_sc_object $P5094, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5094
  fallback4592:
    set $P5093, _lex_param_1["name"]
    unless_null $P5093, fallback4593
    nqp_get_sc_object $P5095, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5093, $P5095
  fallback4593:
    $P5096 = $P5093."CURSOR"()
    $P5097 = $P5096."panic"("A my scoped package cannot have a multi-part name yet")
  if1510_end4588:
.annotate 'line', 2124
    find_dynamic_lex $P5098, "$*W"
    unless_null $P5098, fallback4594
    nqp_get_sc_object $P5101, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5100, $P5101
    set $P5099, $P5100["$W"]
    unless_null $P5099, fallback4595
    nqp_get_sc_object $P5102, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5099, $P5102
  fallback4595:
    unless_null $P5099, vivi_15114596
    die "Contextual $*W not found"
    box $P5103, "Contextual $*W not found"
    set $P5099, $P5103
  vivi_15114596:
    set $P5098, $P5099
  fallback4594:
    find_dynamic_lex $P5104, "$*W"
    unless_null $P5104, fallback4597
    nqp_get_sc_object $P5107, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$W"]
    unless_null $P5105, fallback4598
    nqp_get_sc_object $P5108, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5105, $P5108
  fallback4598:
    unless_null $P5105, vivi_15124599
    die "Contextual $*W not found"
    box $P5109, "Contextual $*W not found"
    set $P5105, $P5109
  vivi_15124599:
    set $P5104, $P5105
  fallback4597:
    $P5110 = $P5104."cur_lexpad"()
    unless_null _lex_param_1, fallback4600
    nqp_get_sc_object $P5114, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5114
  fallback4600:
    set $P5113, _lex_param_1["name"]
    unless_null $P5113, fallback4601
    nqp_get_sc_object $P5115, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5113, $P5115
  fallback4601:
    set $P5112, $P5113["identifier"]
    unless_null $P5112, fallback4602
    nqp_get_sc_object $P5116, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5112, $P5116
  fallback4602:
    set $P5111, $P5112[0]
    unless_null $P5111, fallback4603
    nqp_get_sc_object $P5117, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5111, $P5117
  fallback4603:
    $P5118 = $P5098."install_lexical_symbol"($P5110, $P5111, $P102)
    set $P5127, $P5118
    goto if1508_end4583
  if1508_else4582:
.annotate 'line', 2126
.annotate 'line', 2127
    $P5119 = _lex_param_1."CURSOR"()
    find_dynamic_lex $P5120, "$*SCOPE"
    unless_null $P5120, fallback4604
    nqp_get_sc_object $P5123, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5122, $P5123
    set $P5121, $P5122["$SCOPE"]
    unless_null $P5121, fallback4605
    nqp_get_sc_object $P5124, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5121, $P5124
  fallback4605:
    unless_null $P5121, vivi_15134606
    die "Contextual $*SCOPE not found"
    box $P5125, "Contextual $*SCOPE not found"
    set $P5121, $P5125
  vivi_15134606:
    set $P5120, $P5121
  fallback4604:
    set $S5006, $P5120
    concat $S5005, $S5006, " scoped packages are not supported"
    $P5126 = $P5119."panic"($S5005)
    set $P5127, $P5126
  if1508_end4583:
  if1499_end4549:
.annotate 'line', 2130
    nqp_get_sc_object $P5131, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5130, $P5131, "QAST"
    get_who $P5129, $P5130
    set $P5128, $P5129["Stmts"]
    unless_null $P5128, fallback4607
    nqp_get_sc_object $P5132, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5128, $P5132
  fallback4607:
    $P5133 = $P5128."new"()
    $P5134 = _lex_param_1."!make"($P5133)
    .return ($P5134) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_291_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2133
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5149 = 'cuid_456_1360256386.79' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_457_1360256386.79' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_458_1360256386.79' 
    capture_lex $P5149 
    .const 'Sub' $P5149 = 'cuid_459_1360256386.79' 
    capture_lex $P5149 
    .lex "@ns", $P101 
    .lex "$name", $P102 
    .lex "$how", $P103 
    .lex "$past", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P104, $P5004
    unless_null _lex_param_1, fallback4608
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5008
  fallback4608:
    set $P5007, _lex_param_1["name"]
    unless_null $P5007, fallback4609
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5009
  fallback4609:
    set $P5006, $P5007["identifier"]
    unless_null $P5006, fallback4610
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5010
  fallback4610:
    repr_clone $P5005, $P5006
    set $P101, $P5005
.annotate 'line', 2136
    $P5011 = $P101."pop"()
    set $S5001, $P5011
    box $P5012, $S5001
    set $P102, $P5012
    find_dynamic_lex $P5014, "%*HOW"
    unless_null $P5014, fallback4611
    nqp_get_sc_object $P5017, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["%HOW"]
    unless_null $P5015, fallback4612
    nqp_get_sc_object $P5019, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%HOW"], $P5020
    set $P5015, $P5020
  fallback4612:
    unless_null $P5015, vivi_15144613
    die "Contextual %*HOW not found"
    box $P5021, "Contextual %*HOW not found"
    set $P5015, $P5021
  vivi_15144613:
    set $P5014, $P5015
  fallback4611:
    find_dynamic_lex $P5022, "$*PKGDECL"
    unless_null $P5022, fallback4614
    nqp_get_sc_object $P5025, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PKGDECL"]
    unless_null $P5023, fallback4615
    nqp_get_sc_object $P5026, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5023, $P5026
  fallback4615:
    unless_null $P5023, vivi_15154616
    die "Contextual $*PKGDECL not found"
    box $P5027, "Contextual $*PKGDECL not found"
    set $P5023, $P5027
  vivi_15154616:
    set $P5022, $P5023
  fallback4614:
    set $S5002, $P5022
    set $P5013, $P5014[$S5002]
    unless_null $P5013, fallback4617
    nqp_get_sc_object $P5028, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5013, $P5028
  fallback4617:
    set $P103, $P5013
    unless_null _lex_param_1, fallback4620
    nqp_get_sc_object $P5030, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5030
  fallback4620:
    set $P5029, _lex_param_1["blockoid"]
    unless_null $P5029, fallback4621
    nqp_get_sc_object $P5031, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5029, $P5031
  fallback4621:
    unless $P5029 goto if1516_else4618 
.annotate 'line', 2141
.annotate 'line', 2142
    unless_null _lex_param_1, fallback4622
    nqp_get_sc_object $P5033, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5033
  fallback4622:
    set $P5032, _lex_param_1["blockoid"]
    unless_null $P5032, fallback4623
    nqp_get_sc_object $P5034, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5032, $P5034
  fallback4623:
    $P5035 = $P5032."ast"()
    set $P104, $P5035
    goto if1516_end4619
  if1516_else4618:
.annotate 'line', 2144
.annotate 'line', 2145
    find_dynamic_lex $P5036, "$*W"
    unless_null $P5036, fallback4624
    nqp_get_sc_object $P5039, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5038, $P5039
    set $P5037, $P5038["$W"]
    unless_null $P5037, fallback4625
    nqp_get_sc_object $P5040, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5037, $P5040
  fallback4625:
    unless_null $P5037, vivi_15174626
    die "Contextual $*W not found"
    box $P5041, "Contextual $*W not found"
    set $P5037, $P5041
  vivi_15174626:
    set $P5036, $P5037
  fallback4624:
    $P5042 = $P5036."pop_lexpad"()
    set $P104, $P5042
.annotate 'line', 2146
    unless_null _lex_param_1, fallback4627
    nqp_get_sc_object $P5044, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5044
  fallback4627:
    set $P5043, _lex_param_1["statementlist"]
    unless_null $P5043, fallback4628
    nqp_get_sc_object $P5045, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5043, $P5045
  fallback4628:
    $P5046 = $P5043."ast"()
    $P5047 = $P104."push"($P5046)
  if1516_end4619:
    can $I5001, $P103, "parametric"
    box $P5050, $I5001
    set $P5049, $P5050
    unless $I5001 goto if1519_end4632 
.annotate 'line', 2153
    $P5048 = $P103."parametric"($P103)
    set $P5049, $P5048
  if1519_end4632:
    unless $P5049 goto if1518_else4629 
    .const 'Sub' $P5051 = 'cuid_456_1360256386.79' 
    capture_lex $P5051
    $P5052 = $P5051()
    goto if1518_end4630
  if1518_else4629:
.annotate 'line', 2170
.annotate 'line', 2171
    $P104."blocktype"("immediate")
.annotate 'line', 2172
    find_dynamic_lex $P5053, "$*W"
    unless_null $P5053, fallback4665
    nqp_get_sc_object $P5056, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$W"]
    unless_null $P5054, fallback4666
    nqp_get_sc_object $P5057, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5054, $P5057
  fallback4666:
    unless_null $P5054, vivi_15274667
    die "Contextual $*W not found"
    box $P5058, "Contextual $*W not found"
    set $P5054, $P5058
  vivi_15274667:
    set $P5053, $P5054
  fallback4665:
    find_dynamic_lex $P5059, "$*PACKAGE"
    unless_null $P5059, fallback4668
    nqp_get_sc_object $P5062, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$PACKAGE"]
    unless_null $P5060, fallback4669
    nqp_get_sc_object $P5063, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5060, $P5063
  fallback4669:
    unless_null $P5060, vivi_15284670
    die "Contextual $*PACKAGE not found"
    box $P5064, "Contextual $*PACKAGE not found"
    set $P5060, $P5064
  vivi_15284670:
    set $P5059, $P5060
  fallback4668:
    $P5053."install_lexical_symbol"($P104, "$?PACKAGE", $P5059)
.annotate 'line', 2173
    find_dynamic_lex $P5065, "$*W"
    unless_null $P5065, fallback4671
    nqp_get_sc_object $P5068, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$W"]
    unless_null $P5066, fallback4672
    nqp_get_sc_object $P5069, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5066, $P5069
  fallback4672:
    unless_null $P5066, vivi_15294673
    die "Contextual $*W not found"
    box $P5070, "Contextual $*W not found"
    set $P5066, $P5070
  vivi_15294673:
    set $P5065, $P5066
  fallback4671:
    find_dynamic_lex $P5071, "$*PACKAGE"
    unless_null $P5071, fallback4674
    nqp_get_sc_object $P5074, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5073, $P5074
    set $P5072, $P5073["$PACKAGE"]
    unless_null $P5072, fallback4675
    nqp_get_sc_object $P5075, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5072, $P5075
  fallback4675:
    unless_null $P5072, vivi_15304676
    die "Contextual $*PACKAGE not found"
    box $P5076, "Contextual $*PACKAGE not found"
    set $P5072, $P5076
  vivi_15304676:
    set $P5071, $P5072
  fallback4674:
    $P5077 = $P5065."install_lexical_symbol"($P104, "$?CLASS", $P5071)
  if1518_end4630:
    unless_null _lex_param_1, fallback4679
    nqp_get_sc_object $P5079, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5079
  fallback4679:
    set $P5078, _lex_param_1["parent"]
    unless_null $P5078, fallback4680
    nqp_get_sc_object $P5080, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5078, $P5080
  fallback4680:
    unless $P5078 goto if1531_else4677 
    .const 'Sub' $P5081 = 'cuid_457_1360256386.79' 
    capture_lex $P5081
    $P5082 = $P5081()
    goto if1531_end4678
  if1531_else4677:
    can $I5002, $P103, "set_default_parent"
    box $P5086, $I5002
    set $P5085, $P5086
    unless $I5002 goto if1538_end4702 
    .const 'Sub' $P5083 = 'cuid_458_1360256386.79' 
    capture_lex $P5083
    $P5084 = $P5083()
    set $P5085, $P5084
  if1538_end4702:
  if1531_end4678:
    unless_null _lex_param_1, fallback4719
    nqp_get_sc_object $P5088, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5088
  fallback4719:
    set $P5087, _lex_param_1["role"]
    unless_null $P5087, fallback4720
    nqp_get_sc_object $P5089, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5087, $P5089
  fallback4720:
    unless $P5087 goto if1544_end4718 
.annotate 'line', 2198
    unless_null _lex_param_1, fallback4721
    nqp_get_sc_object $P5094, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5094
  fallback4721:
    set $P5093, _lex_param_1["role"]
    unless_null $P5093, fallback4722
    nqp_get_sc_object $P5095, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5093, $P5095
  fallback4722:
    set $P5090, $P5093
    iter $P5092, $P5093
  for_next4737:
    unless $P5092, for_done4739
    shift $P5097, $P5092
  for_redo4738:
    .const 'Sub' $P5096 = 'cuid_459_1360256386.79' 
    capture_lex $P5096
    $P5090 = $P5096($P5097)
    goto for_next4737
  for_done4739:
  if1544_end4718:
.annotate 'line', 2216
    find_dynamic_lex $P5098, "$*W"
    unless_null $P5098, fallback4740
    nqp_get_sc_object $P5101, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5100, $P5101
    set $P5099, $P5100["$W"]
    unless_null $P5099, fallback4741
    nqp_get_sc_object $P5102, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5099, $P5102
  fallback4741:
    unless_null $P5099, vivi_15514742
    die "Contextual $*W not found"
    box $P5103, "Contextual $*W not found"
    set $P5099, $P5103
  vivi_15514742:
    set $P5098, $P5099
  fallback4740:
    find_dynamic_lex $P5104, "$*PACKAGE"
    unless_null $P5104, fallback4743
    nqp_get_sc_object $P5107, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5106, $P5107
    set $P5105, $P5106["$PACKAGE"]
    unless_null $P5105, fallback4744
    nqp_get_sc_object $P5108, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5105, $P5108
  fallback4744:
    unless_null $P5105, vivi_15524745
    die "Contextual $*PACKAGE not found"
    box $P5109, "Contextual $*PACKAGE not found"
    set $P5105, $P5109
  vivi_15524745:
    set $P5104, $P5105
  fallback4743:
    $P5098."pkg_compose"($P5104)
    find_dynamic_lex $P5110, "$*PKGDECL"
    unless_null $P5110, fallback4750
    nqp_get_sc_object $P5113, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5112, $P5113
    set $P5111, $P5112["$PKGDECL"]
    unless_null $P5111, fallback4751
    nqp_get_sc_object $P5114, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5111, $P5114
  fallback4751:
    unless_null $P5111, vivi_15554752
    die "Contextual $*PKGDECL not found"
    box $P5115, "Contextual $*PKGDECL not found"
    set $P5111, $P5115
  vivi_15554752:
    set $P5110, $P5111
  fallback4750:
    set $S5003, $P5110
    iseq $I5003, $S5003, "grammar"
    set $I5005, $I5003
    unless $I5003 goto if1554_end4749 
    find_dynamic_lex $P5116, "$*PACKAGE"
    unless_null $P5116, fallback4753
    nqp_get_sc_object $P5119, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5118, $P5119
    set $P5117, $P5118["$PACKAGE"]
    unless_null $P5117, fallback4754
    nqp_get_sc_object $P5120, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5117, $P5120
  fallback4754:
    unless_null $P5117, vivi_15564755
    die "Contextual $*PACKAGE not found"
    box $P5121, "Contextual $*PACKAGE not found"
    set $P5117, $P5121
  vivi_15564755:
    set $P5116, $P5117
  fallback4753:
    can $I5004, $P5116, "!precompute_nfas"
    set $I5005, $I5004
  if1554_end4749:
    unless $I5005 goto if1553_end4747 
.annotate 'line', 2219
.annotate 'line', 2220
    find_dynamic_lex $P5122, "$*PACKAGE"
    unless_null $P5122, fallback4756
    nqp_get_sc_object $P5125, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5124, $P5125
    set $P5123, $P5124["$PACKAGE"]
    unless_null $P5123, fallback4757
    nqp_get_sc_object $P5126, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5123, $P5126
  fallback4757:
    unless_null $P5123, vivi_15574758
    die "Contextual $*PACKAGE not found"
    box $P5127, "Contextual $*PACKAGE not found"
    set $P5123, $P5127
  vivi_15574758:
    set $P5122, $P5123
  fallback4756:
    $P5128 = $P5122."!precompute_nfas"()
  if1553_end4747:
    unless_null _lex_param_1, fallback4761
    nqp_get_sc_object $P5130, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5130
  fallback4761:
    set $P5129, _lex_param_1["export"]
    unless_null $P5129, fallback4762
    nqp_get_sc_object $P5131, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5129, $P5131
  fallback4762:
    unless $P5129 goto if1558_end4760 
.annotate 'line', 2224
    find_dynamic_lex $P5135, "$*EXPORT"
    unless_null $P5135, fallback4763
    nqp_get_sc_object $P5138, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5137, $P5138
    set $P5136, $P5137["$EXPORT"]
    unless_null $P5136, fallback4764
    nqp_get_sc_object $P5139, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5136, $P5139
  fallback4764:
    unless_null $P5136, vivi_15594765
    die "Contextual $*EXPORT not found"
    box $P5140, "Contextual $*EXPORT not found"
    set $P5136, $P5140
  vivi_15594765:
    set $P5135, $P5136
  fallback4763:
    get_who $P5134, $P5135
    set $P5133, $P5134["DEFAULT"]
    unless_null $P5133, fallback4766
    nqp_get_sc_object $P5141, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5133, $P5141
  fallback4766:
    get_who $P5132, $P5133
    set $S5004, $P102
    find_dynamic_lex $P5142, "$*PACKAGE"
    unless_null $P5142, fallback4767
    nqp_get_sc_object $P5145, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5144, $P5145
    set $P5143, $P5144["$PACKAGE"]
    unless_null $P5143, fallback4768
    nqp_get_sc_object $P5146, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5143, $P5146
  fallback4768:
    unless_null $P5143, vivi_15604769
    die "Contextual $*PACKAGE not found"
    box $P5147, "Contextual $*PACKAGE not found"
    set $P5143, $P5147
  vivi_15604769:
    set $P5142, $P5143
  fallback4767:
    set $P5132[$S5004], $P5142
  if1558_end4760:
.annotate 'line', 2228
    $P5148 = _lex_param_1."!make"($P104)
    .return ($P5148) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_456_1360256386.79") :anon :lex :outer("cuid_291_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2153
    .const 'Sub' $P5081 = 'cuid_455_1360256386.79' 
    capture_lex $P5081 
    .lex "$params", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 2154
    find_lex $P5002, "$past"
    $P5002."blocktype"("declaration")
.annotate 'line', 2155
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Stmts"]
    unless_null $P5003, fallback4633
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5007
  fallback4633:
.annotate 'line', 2156
    nqp_get_sc_object $P5011, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["Var"]
    unless_null $P5008, fallback4634
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5012
  fallback4634:
    $P5013 = $P5008."new"("$?CLASS" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5014 = $P5003."new"($P5013)
    set $P101, $P5014
    find_lex $P5016, "$/"
    unless_null $P5016, fallback4637
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5016, $P5017
  fallback4637:
    set $P5015, $P5016["role_params"]
    unless_null $P5015, fallback4638
    nqp_get_sc_object $P5018, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5015, $P5018
  fallback4638:
    unless $P5015 goto if1520_end4636 
.annotate 'line', 2158
    find_lex $P5025, "$/"
    unless_null $P5025, fallback4639
    nqp_get_sc_object $P5026, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5025, $P5026
  fallback4639:
    set $P5024, $P5025["role_params"]
    unless_null $P5024, fallback4640
    nqp_get_sc_object $P5027, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5024, $P5027
  fallback4640:
    set $P5023, $P5024[0]
    unless_null $P5023, fallback4641
    nqp_get_sc_object $P5028, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5023, $P5028
  fallback4641:
    set $P5022, $P5023["variable"]
    unless_null $P5022, fallback4642
    nqp_get_sc_object $P5029, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5022, $P5029
  fallback4642:
    set $P5019, $P5022
    iter $P5021, $P5022
  for_next4643:
    unless $P5021, for_done4645
    shift $P5031, $P5021
  for_redo4644:
    .const 'Sub' $P5030 = 'cuid_455_1360256386.79' 
    capture_lex $P5030
    $P5019 = $P5030($P5031)
    goto for_next4643
  for_done4645:
  if1520_end4636:
.annotate 'line', 2163
    find_lex $P5032, "$past"
    $P5032."unshift"($P101)
.annotate 'line', 2164
    find_lex $P5033, "$past"
    nqp_get_sc_object $P5037, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback4646
    nqp_get_sc_object $P5038, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5034, $P5038
  fallback4646:
    $P5039 = $P5034."new"("curlexpad" :named("op"))
    $P5033."push"($P5039)
.annotate 'line', 2165
    find_lex $P5040, "$past"
    $P5040."symbol"("$?CLASS", "lexical" :named("scope"))
.annotate 'line', 2166
    find_dynamic_lex $P5041, "$*W"
    unless_null $P5041, fallback4647
    nqp_get_sc_object $P5044, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5043, $P5044
    set $P5042, $P5043["$W"]
    unless_null $P5042, fallback4648
    nqp_get_sc_object $P5045, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5042, $P5045
  fallback4648:
    unless_null $P5042, vivi_15214649
    die "Contextual $*W not found"
    box $P5046, "Contextual $*W not found"
    set $P5042, $P5046
  vivi_15214649:
    set $P5041, $P5042
  fallback4647:
    find_dynamic_lex $P5047, "$*PACKAGE"
    unless_null $P5047, fallback4650
    nqp_get_sc_object $P5050, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$PACKAGE"]
    unless_null $P5048, fallback4651
    nqp_get_sc_object $P5051, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5048, $P5051
  fallback4651:
    unless_null $P5048, vivi_15224652
    die "Contextual $*PACKAGE not found"
    box $P5052, "Contextual $*PACKAGE not found"
    set $P5048, $P5052
  vivi_15224652:
    set $P5047, $P5048
  fallback4650:
    find_lex $P5053, "$past"
    $P5041."pkg_set_body_block"($P5047, $P5053)
.annotate 'line', 2167
    find_dynamic_lex $P5054, "$*W"
    unless_null $P5054, fallback4653
    nqp_get_sc_object $P5057, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["$W"]
    unless_null $P5055, fallback4654
    nqp_get_sc_object $P5058, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5055, $P5058
  fallback4654:
    unless_null $P5055, vivi_15234655
    die "Contextual $*W not found"
    box $P5059, "Contextual $*W not found"
    set $P5055, $P5059
  vivi_15234655:
    set $P5054, $P5055
  fallback4653:
    find_lex $P5060, "$past"
    find_dynamic_lex $P5061, "$*PACKAGE"
    unless_null $P5061, fallback4656
    nqp_get_sc_object $P5064, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5063, $P5064
    set $P5062, $P5063["$PACKAGE"]
    unless_null $P5062, fallback4657
    nqp_get_sc_object $P5065, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5062, $P5065
  fallback4657:
    unless_null $P5062, vivi_15244658
    die "Contextual $*PACKAGE not found"
    box $P5066, "Contextual $*PACKAGE not found"
    set $P5062, $P5066
  vivi_15244658:
    set $P5061, $P5062
  fallback4656:
    $P5054."install_lexical_symbol"($P5060, "$?PACKAGE", $P5061)
.annotate 'line', 2168
    find_dynamic_lex $P5067, "$*W"
    unless_null $P5067, fallback4659
    nqp_get_sc_object $P5070, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5069, $P5070
    set $P5068, $P5069["$W"]
    unless_null $P5068, fallback4660
    nqp_get_sc_object $P5071, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5068, $P5071
  fallback4660:
    unless_null $P5068, vivi_15254661
    die "Contextual $*W not found"
    box $P5072, "Contextual $*W not found"
    set $P5068, $P5072
  vivi_15254661:
    set $P5067, $P5068
  fallback4659:
    find_lex $P5073, "$past"
    find_dynamic_lex $P5074, "$*PACKAGE"
    unless_null $P5074, fallback4662
    nqp_get_sc_object $P5077, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["$PACKAGE"]
    unless_null $P5075, fallback4663
    nqp_get_sc_object $P5078, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5075, $P5078
  fallback4663:
    unless_null $P5075, vivi_15264664
    die "Contextual $*PACKAGE not found"
    box $P5079, "Contextual $*PACKAGE not found"
    set $P5075, $P5079
  vivi_15264664:
    set $P5074, $P5075
  fallback4662:
    $P5080 = $P5067."install_lexical_symbol"($P5073, "$?ROLE", $P5074)
    .return ($P5080) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_455_1360256386.79") :anon :lex :outer("cuid_456_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2159
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2160
    find_lex $P5001, "$params"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_457_1360256386.79") :anon :lex :outer("cuid_291_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2177
    .lex "$parent", $P101 
    .lex "$parent_found", $P102 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_15344689
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 2180
.annotate 'line', 2181
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4681
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4682
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5007
  fallback4682:
    unless_null $P5004, vivi_15324683
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15324683:
    set $P5003, $P5004
  fallback4681:
    find_lex $P5013, "$/"
    unless_null $P5013, fallback4684
    nqp_get_sc_object $P5014, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5013, $P5014
  fallback4684:
    set $P5012, $P5013["parent"]
    unless_null $P5012, fallback4685
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5012, $P5015
  fallback4685:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback4686
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5016
  fallback4686:
    set $P5010, $P5011["identifier"]
    unless_null $P5010, fallback4687
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5017
  fallback4687:
    repr_clone $P5009, $P5010
    $P5018 = $P5003."find_sym"($P5009)
    set $P101, $P5018
    box $P5019, 1
    set $P102, $P5019
    set $P5021, $P102
    pop_eh 
    goto skip_handler_15334688
  catch_handler_15344689:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_15334688
  skip_handler_15334688:
    unless $P102 goto if1535_else4690 
.annotate 'line', 2184
.annotate 'line', 2185
    find_dynamic_lex $P5022, "$*W"
    unless_null $P5022, fallback4692
    nqp_get_sc_object $P5025, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$W"]
    unless_null $P5023, fallback4693
    nqp_get_sc_object $P5026, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5023, $P5026
  fallback4693:
    unless_null $P5023, vivi_15364694
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5023, $P5027
  vivi_15364694:
    set $P5022, $P5023
  fallback4692:
    find_dynamic_lex $P5028, "$*PACKAGE"
    unless_null $P5028, fallback4695
    nqp_get_sc_object $P5031, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["$PACKAGE"]
    unless_null $P5029, fallback4696
    nqp_get_sc_object $P5032, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5029, $P5032
  fallback4696:
    unless_null $P5029, vivi_15374697
    die "Contextual $*PACKAGE not found"
    box $P5033, "Contextual $*PACKAGE not found"
    set $P5029, $P5033
  vivi_15374697:
    set $P5028, $P5029
  fallback4695:
    $P5034 = $P5022."pkg_add_parent_or_role"($P5028, "add_parent", $P101)
    set $P5044, $P5034
    goto if1535_end4691
  if1535_else4690:
.annotate 'line', 2187
.annotate 'line', 2188
    find_lex $P5035, "$/"
    $P5036 = $P5035."CURSOR"()
    find_lex $P5039, "$/"
    unless_null $P5039, fallback4698
    nqp_get_sc_object $P5040, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5039, $P5040
  fallback4698:
    set $P5038, $P5039["parent"]
    unless_null $P5038, fallback4699
    nqp_get_sc_object $P5041, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5038, $P5041
  fallback4699:
    set $P5037, $P5038[0]
    unless_null $P5037, fallback4700
    nqp_get_sc_object $P5042, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5037, $P5042
  fallback4700:
    set $S5003, $P5037
    concat $S5002, "Could not find parent class '", $S5003
    concat $S5001, $S5002, "'"
    $P5043 = $P5036."panic"($S5001)
    set $P5044, $P5043
  if1535_end4691:
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_458_1360256386.79") :anon :lex :outer("cuid_291_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2191
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    find_dynamic_lex $P5002, "$*PKGDECL"
    unless_null $P5002, fallback4705
    nqp_get_sc_object $P5005, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$PKGDECL"]
    unless_null $P5003, fallback4706
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5006
  fallback4706:
    unless_null $P5003, vivi_15404707
    die "Contextual $*PKGDECL not found"
    box $P5007, "Contextual $*PKGDECL not found"
    set $P5003, $P5007
  vivi_15404707:
    set $P5002, $P5003
  fallback4705:
    set $S5001, $P5002
    iseq $I5001, $S5001, "grammar"
    unless $I5001 goto if1539_else4703 
    new $P5008, 'ResizablePMCArray'
    box $P5009, "NQPCursor"
    push $P5008, $P5009
    set $P5012, $P5008
    goto if1539_end4704
  if1539_else4703:
    new $P5010, 'ResizablePMCArray'
    box $P5011, "NQPMu"
    push $P5010, $P5011
    set $P5012, $P5010
  if1539_end4704:
    set $P101, $P5012
.annotate 'line', 2193
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback4708
    nqp_get_sc_object $P5016, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback4709
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5014, $P5017
  fallback4709:
    unless_null $P5014, vivi_15414710
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_15414710:
    set $P5013, $P5014
  fallback4708:
    find_dynamic_lex $P5019, "$*PACKAGE"
    unless_null $P5019, fallback4711
    nqp_get_sc_object $P5022, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$PACKAGE"]
    unless_null $P5020, fallback4712
    nqp_get_sc_object $P5023, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5020, $P5023
  fallback4712:
    unless_null $P5020, vivi_15424713
    die "Contextual $*PACKAGE not found"
    box $P5024, "Contextual $*PACKAGE not found"
    set $P5020, $P5024
  vivi_15424713:
    set $P5019, $P5020
  fallback4711:
.annotate 'line', 2194
    find_dynamic_lex $P5025, "$*W"
    unless_null $P5025, fallback4714
    nqp_get_sc_object $P5028, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$W"]
    unless_null $P5026, fallback4715
    nqp_get_sc_object $P5029, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5026, $P5029
  fallback4715:
    unless_null $P5026, vivi_15434716
    die "Contextual $*W not found"
    box $P5030, "Contextual $*W not found"
    set $P5026, $P5030
  vivi_15434716:
    set $P5025, $P5026
  fallback4714:
    $P5031 = $P5025."find_sym"($P101)
    $P5032 = $P5013."pkg_add_parent_or_role"($P5019, "set_default_parent", $P5031)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_459_1360256386.79") :anon :lex :outer("cuid_291_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2199
    .param pmc _lex_param_0 
    .lex "$role", $P101 
    .lex "$role_found", $P102 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    new $P5014, 'ExceptionHandler'
    set_label $P5014, catch_handler_15474728
    $P5014.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5014
.annotate 'line', 2202
.annotate 'line', 2203
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4723
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4724
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5007
  fallback4724:
    unless_null $P5004, vivi_15454725
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15454725:
    set $P5003, $P5004
  fallback4723:
    set $P5010, _lex_param_0["identifier"]
    unless_null $P5010, fallback4726
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5011
  fallback4726:
    repr_clone $P5009, $P5010
    $P5012 = $P5003."find_sym"($P5009)
    set $P101, $P5012
    box $P5013, 1
    set $P102, $P5013
    set $P5015, $P102
    pop_eh 
    goto skip_handler_15464727
  catch_handler_15474728:
    .get_results ($P5014) 
    set $I10001, 1
    set $P5014["handled"], $I10001
    nqp_get_sc_object $P10001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    finalize $P5014
    pop_upto_eh $P5014
    pop_eh 
    set $P5015, $P10001
    goto skip_handler_15464727
  skip_handler_15464727:
    unless $P102 goto if1548_else4729 
.annotate 'line', 2206
.annotate 'line', 2207
    find_dynamic_lex $P5016, "$*W"
    unless_null $P5016, fallback4731
    nqp_get_sc_object $P5019, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$W"]
    unless_null $P5017, fallback4732
    nqp_get_sc_object $P5020, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5017, $P5020
  fallback4732:
    unless_null $P5017, vivi_15494733
    die "Contextual $*W not found"
    box $P5021, "Contextual $*W not found"
    set $P5017, $P5021
  vivi_15494733:
    set $P5016, $P5017
  fallback4731:
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback4734
    nqp_get_sc_object $P5025, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback4735
    nqp_get_sc_object $P5026, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5023, $P5026
  fallback4735:
    unless_null $P5023, vivi_15504736
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_15504736:
    set $P5022, $P5023
  fallback4734:
    $P5028 = $P5016."pkg_add_parent_or_role"($P5022, "add_role", $P101)
    set $P5032, $P5028
    goto if1548_end4730
  if1548_else4729:
.annotate 'line', 2209
.annotate 'line', 2210
    find_lex $P5029, "$/"
    $P5030 = $P5029."CURSOR"()
    set $S5003, _lex_param_0
    concat $S5002, "Could not find role '", $S5003
    concat $S5001, $S5002, "'"
    $P5031 = $P5030."panic"($S5001)
    set $P5032, $P5031
  if1548_end4730:
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "role_params" :subid("cuid_292_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2231
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5009 = 'cuid_460_1360256386.79' 
    capture_lex $P5009 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4770
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5005
  fallback4770:
    set $P5004, _lex_param_1["variable"]
    unless_null $P5004, fallback4771
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5006
  fallback4771:
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next4775:
    unless $P5003, for_done4777
    shift $P5008, $P5003
  for_redo4776:
    .const 'Sub' $P5007 = 'cuid_460_1360256386.79' 
    capture_lex $P5007
    $P5001 = $P5007($P5008)
    goto for_next4775
  for_done4777:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_460_1360256386.79") :anon :lex :outer("cuid_292_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2232
    .param pmc _lex_param_0 
    .lex "$var", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 2233
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
.annotate 'line', 2234
    $P101."scope"("lexical")
.annotate 'line', 2235
    $P101."decl"("param")
.annotate 'line', 2236
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4772
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4773
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5007
  fallback4773:
    unless_null $P5004, vivi_15614774
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15614774:
    set $P5003, $P5004
  fallback4772:
    $P5009 = $P5003."cur_lexpad"()
    $P5010 = $P101."name"()
    $P5011 = $P5009."symbol"($P5010, "lexical" :named("scope"))
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_293_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2240
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4778
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4778:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4779
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4779:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_294_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2241
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4780
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4780:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4781
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4781:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_295_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2242
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4782
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4782:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4783
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4783:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_296_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2244
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2245
    unless_null _lex_param_1, fallback4786
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4786:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4787
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4787:
    unless $P5001 goto if1562_else4784 
    unless_null _lex_param_1, fallback4788
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5005
  fallback4788:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4789
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5006
  fallback4789:
    $P5007 = $P5004."ast"()
    set $P5020, $P5007
    goto if1562_end4785
  if1562_else4784:
    unless_null _lex_param_1, fallback4792
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5009
  fallback4792:
    set $P5008, _lex_param_1["multi_declarator"]
    unless_null $P5008, fallback4793
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5010
  fallback4793:
    unless $P5008 goto if1563_else4790 
.annotate 'line', 2246
    unless_null _lex_param_1, fallback4794
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5012
  fallback4794:
    set $P5011, _lex_param_1["multi_declarator"]
    unless_null $P5011, fallback4795
    nqp_get_sc_object $P5013, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5013
  fallback4795:
    $P5014 = $P5011."ast"()
    set $P5019, $P5014
    goto if1563_end4791
  if1563_else4790:
.annotate 'line', 2247
    unless_null _lex_param_1, fallback4796
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5016
  fallback4796:
    set $P5015, _lex_param_1["package_declarator"]
    unless_null $P5015, fallback4797
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5015, $P5017
  fallback4797:
    $P5018 = $P5015."ast"()
    set $P5019, $P5018
  if1563_end4791:
    set $P5020, $P5019
  if1562_end4785:
    $P5021 = _lex_param_1."!make"($P5020)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_297_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2250
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2251
    unless_null _lex_param_1, fallback4800
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4800:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4801
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4801:
    unless $P5001 goto if1564_else4798 
.annotate 'line', 2252
    unless_null _lex_param_1, fallback4802
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5005
  fallback4802:
    set $P5004, _lex_param_1["routine_declarator"]
    unless_null $P5004, fallback4803
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5006
  fallback4803:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1564_end4799
  if1564_else4798:
.annotate 'line', 2253
    unless_null _lex_param_1, fallback4804
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5009
  fallback4804:
    set $P5008, _lex_param_1["variable_declarator"]
    unless_null $P5008, fallback4805
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5010
  fallback4805:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1564_end4799:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_298_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2256
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4808
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4808:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4809
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4809:
    unless $P5001 goto if1565_else4806 
    unless_null _lex_param_1, fallback4810
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5005
  fallback4810:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4811
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5006
  fallback4811:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1565_end4807
  if1565_else4806:
    unless_null _lex_param_1, fallback4812
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5009
  fallback4812:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4813
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5010
  fallback4813:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1565_end4807:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_299_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2257
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4816
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4816:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4817
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4817:
    unless $P5001 goto if1566_else4814 
    unless_null _lex_param_1, fallback4818
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5005
  fallback4818:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4819
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5006
  fallback4819:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1566_end4815
  if1566_else4814:
    unless_null _lex_param_1, fallback4820
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5009
  fallback4820:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4821
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5010
  fallback4821:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1566_end4815:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_300_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2258
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4822
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4822:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4823
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4823:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_301_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2261
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5067 = 'cuid_461_1360256386.79' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_463_1360256386.79' 
    capture_lex $P5067 
    .const 'Sub' $P5067 = 'cuid_464_1360256386.79' 
    capture_lex $P5067 
    .lex "$past", $P101 
    .lex "$sigil", $P102 
    .lex "$name", $P103 
    .lex "$BLOCK", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P104, $P5004
.annotate 'line', 2262
    unless_null _lex_param_1, fallback4824
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5006
  fallback4824:
    set $P5005, _lex_param_1["variable"]
    unless_null $P5005, fallback4825
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5005, $P5007
  fallback4825:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
    unless_null _lex_param_1, fallback4826
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5011
  fallback4826:
    set $P5010, _lex_param_1["variable"]
    unless_null $P5010, fallback4827
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5012
  fallback4827:
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4828
    nqp_get_sc_object $P5013, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5013
  fallback4828:
    set $P102, $P5009
.annotate 'line', 2264
    $P5014 = $P101."name"()
    set $P103, $P5014
.annotate 'line', 2265
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback4829
    nqp_get_sc_object $P5018, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback4830
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5016, $P5019
  fallback4830:
    unless_null $P5016, vivi_15674831
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_15674831:
    set $P5015, $P5016
  fallback4829:
    $P5021 = $P5015."cur_lexpad"()
    set $P104, $P5021
    set $P5023, $P103
    unless $P103 goto if1569_end4835 
.annotate 'line', 2266
    $P5022 = $P104."symbol"($P103)
    set $P5023, $P5022
  if1569_end4835:
    unless $P5023 goto if1568_end4833 
.annotate 'line', 2267
    $P5024 = _lex_param_1."CURSOR"()
    $P5025 = $P5024."panic"("Redeclaration of symbol ", $P103)
  if1568_end4833:
    find_dynamic_lex $P5026, "$*SCOPE"
    unless_null $P5026, fallback4838
    nqp_get_sc_object $P5029, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$SCOPE"]
    unless_null $P5027, fallback4839
    nqp_get_sc_object $P5030, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5027, $P5030
  fallback4839:
    unless_null $P5027, vivi_15714840
    die "Contextual $*SCOPE not found"
    box $P5031, "Contextual $*SCOPE not found"
    set $P5027, $P5031
  vivi_15714840:
    set $P5026, $P5027
  fallback4838:
    set $S5001, $P5026
    iseq $I5001, $S5001, "has"
    unless $I5001 goto if1570_else4836 
    .const 'Sub' $P5032 = 'cuid_461_1360256386.79' 
    capture_lex $P5032
    $P5033 = $P5032()
    goto if1570_end4837
  if1570_else4836:
    find_dynamic_lex $P5034, "$*SCOPE"
    unless_null $P5034, fallback4892
    nqp_get_sc_object $P5037, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5036, $P5037
    set $P5035, $P5036["$SCOPE"]
    unless_null $P5035, fallback4893
    nqp_get_sc_object $P5038, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5035, $P5038
  fallback4893:
    unless_null $P5035, vivi_15894894
    die "Contextual $*SCOPE not found"
    box $P5039, "Contextual $*SCOPE not found"
    set $P5035, $P5039
  vivi_15894894:
    set $P5034, $P5035
  fallback4892:
    set $S5002, $P5034
    iseq $I5002, $S5002, "our"
    unless $I5002 goto if1588_else4890 
.annotate 'line', 2297
    unless_null _lex_param_1, fallback4897
    nqp_get_sc_object $P5041, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5041
  fallback4897:
    set $P5040, _lex_param_1["typename"]
    unless_null $P5040, fallback4898
    nqp_get_sc_object $P5042, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5040, $P5042
  fallback4898:
    unless $P5040 goto if1590_end4896 
.annotate 'line', 2301
.annotate 'line', 2302
    $P5043 = _lex_param_1."CURSOR"()
    $P5044 = $P5043."panic"("Cannot put types on our-scoped variables")
  if1590_end4896:
    unless_null _lex_param_1, fallback4899
    nqp_get_sc_object $P5046, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5046
  fallback4899:
    set $P5045, _lex_param_1["variable"]
    unless_null $P5045, fallback4900
    nqp_get_sc_object $P5047, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5045, $P5047
  fallback4900:
    set $S5003, $P5045
    box $P5048, $S5003
    set $P103, $P5048
.annotate 'line', 2305
    new $P5049, 'ResizablePMCArray'
    push $P5049, $P103
    $P5050 = "&lexical_package_lookup"($P5049, _lex_param_1)
    set $P101, $P5050
.annotate 'line', 2306
    $P5051 = $P104."symbol"($P103, "package" :named("scope"))
    set $P5054, $P5051
    goto if1588_end4891
  if1588_else4890:
    .const 'Sub' $P5052 = 'cuid_463_1360256386.79' 
    capture_lex $P5052
    $P5053 = $P5052()
    set $P5054, $P5053
  if1588_end4891:
  if1570_end4837:
    unless_null _lex_param_1, fallback4920
    nqp_get_sc_object $P5056, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5056
  fallback4920:
    set $P5055, _lex_param_1["trait"]
    unless_null $P5055, fallback4921
    nqp_get_sc_object $P5057, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5055, $P5057
  fallback4921:
    unless $P5055 goto if1595_end4919 
.annotate 'line', 2335
    unless_null _lex_param_1, fallback4922
    nqp_get_sc_object $P5062, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5062
  fallback4922:
    set $P5061, _lex_param_1["trait"]
    unless_null $P5061, fallback4923
    nqp_get_sc_object $P5063, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5061, $P5063
  fallback4923:
    set $P5058, $P5061
    iter $P5060, $P5061
  for_next4924:
    unless $P5060, for_done4926
    shift $P5065, $P5060
  for_redo4925:
    .const 'Sub' $P5064 = 'cuid_464_1360256386.79' 
    capture_lex $P5064
    $P5058 = $P5064($P5065)
    goto for_next4924
  for_done4926:
  if1595_end4919:
.annotate 'line', 2339
    $P5066 = _lex_param_1."!make"($P101)
    .return ($P5066) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_461_1360256386.79") :anon :lex :outer("cuid_301_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2269
    .lex "%lit_args", $P101 
    .lex "%obj_args", $P102 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    find_dynamic_lex $P5003, "%*HOW"
    unless_null $P5003, fallback4843
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%HOW"]
    unless_null $P5004, fallback4844
    nqp_get_sc_object $P5008, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%HOW"], $P5009
    set $P5004, $P5009
  fallback4844:
    unless_null $P5004, vivi_15734845
    die "Contextual %*HOW not found"
    box $P5010, "Contextual %*HOW not found"
    set $P5004, $P5010
  vivi_15734845:
    set $P5003, $P5004
  fallback4843:
    find_dynamic_lex $P5011, "$*PKGDECL"
    unless_null $P5011, fallback4846
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$PKGDECL"]
    unless_null $P5012, fallback4847
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5012, $P5015
  fallback4847:
    unless_null $P5012, vivi_15744848
    die "Contextual $*PKGDECL not found"
    box $P5016, "Contextual $*PKGDECL not found"
    set $P5012, $P5016
  vivi_15744848:
    set $P5011, $P5012
  fallback4846:
    set $S5002, $P5011
    concat $S5001, $S5002, "-attr"
    exists $I5001, $P5003[$S5001]
    if $I5001 goto unless1572_end4842 
.annotate 'line', 2271
.annotate 'line', 2272
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    find_dynamic_lex $P5019, "$*PKGDECL"
    unless_null $P5019, fallback4849
    nqp_get_sc_object $P5022, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$PKGDECL"]
    unless_null $P5020, fallback4850
    nqp_get_sc_object $P5023, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5020, $P5023
  fallback4850:
    unless_null $P5020, vivi_15754851
    die "Contextual $*PKGDECL not found"
    box $P5024, "Contextual $*PKGDECL not found"
    set $P5020, $P5024
  vivi_15754851:
    set $P5019, $P5020
  fallback4849:
    set $S5004, $P5019
    concat $S5003, $S5004, " packages do not support attributes"
    $P5025 = $P5018."panic"($S5003)
  unless1572_end4842:
    find_lex $P5026, "$name"
    set $P101["name"], $P5026
    find_lex $P5028, "$/"
    unless_null $P5028, fallback4854
    nqp_get_sc_object $P5029, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5028, $P5029
  fallback4854:
    set $P5027, $P5028["typename"]
    unless_null $P5027, fallback4855
    nqp_get_sc_object $P5030, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5027, $P5030
  fallback4855:
    unless $P5027 goto if1576_end4853 
.annotate 'line', 2279
.annotate 'line', 2280
    find_dynamic_lex $P5031, "$*W"
    unless_null $P5031, fallback4856
    nqp_get_sc_object $P5034, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$W"]
    unless_null $P5032, fallback4857
    nqp_get_sc_object $P5035, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5032, $P5035
  fallback4857:
    unless_null $P5032, vivi_15774858
    die "Contextual $*W not found"
    box $P5036, "Contextual $*W not found"
    set $P5032, $P5036
  vivi_15774858:
    set $P5031, $P5032
  fallback4856:
    new $P5037, 'ResizablePMCArray'
    find_lex $P5040, "$/"
    unless_null $P5040, fallback4859
    nqp_get_sc_object $P5041, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5040, $P5041
  fallback4859:
    set $P5039, $P5040["typename"]
    unless_null $P5039, fallback4860
    nqp_get_sc_object $P5042, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5039, $P5042
  fallback4860:
    set $P5038, $P5039[0]
    unless_null $P5038, fallback4861
    nqp_get_sc_object $P5043, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5038, $P5043
  fallback4861:
    set $S5005, $P5038
    box $P5044, $S5005
    push $P5037, $P5044
    $P5045 = $P5031."find_sym"($P5037)
    set $P102["type"], $P5045
  if1576_end4853:
    find_lex $P5046, "$sigil"
    set $S5006, $P5046
    iseq $I5002, $S5006, "$"
    set $I5004, $I5002
    if $I5002 goto unless1579_end4865 
    find_lex $P5047, "$sigil"
    set $S5007, $P5047
    iseq $I5003, $S5007, "&"
    set $I5004, $I5003
  unless1579_end4865:
    unless $I5004 goto if1578_end4863 
.annotate 'line', 2282
    find_lex $P5049, "$/"
    unless_null $P5049, fallback4868
    nqp_get_sc_object $P5050, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5049, $P5050
  fallback4868:
    set $P5048, $P5049["typename"]
    unless_null $P5048, fallback4869
    nqp_get_sc_object $P5051, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5048, $P5051
  fallback4869:
    unless $P5048 goto if1580_else4866 
.annotate 'line', 2283
    set $P5052, $P102["type"]
    unless_null $P5052, fallback4870
    nqp_get_sc_object $P5053, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5052, $P5053
  fallback4870:
    set $P102["default"], $P5052
    set $P5065, $P5052
    goto if1580_end4867
  if1580_else4866:
.annotate 'line', 2286
    new $P5063, 'ExceptionHandler'
    set_label $P5063, catch_handler_15834875
    $P5063.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5063
.annotate 'line', 2287
    find_dynamic_lex $P5054, "$*W"
    unless_null $P5054, fallback4871
    nqp_get_sc_object $P5057, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["$W"]
    unless_null $P5055, fallback4872
    nqp_get_sc_object $P5058, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5055, $P5058
  fallback4872:
    unless_null $P5055, vivi_15814873
    die "Contextual $*W not found"
    box $P5059, "Contextual $*W not found"
    set $P5055, $P5059
  vivi_15814873:
    set $P5054, $P5055
  fallback4871:
    new $P5060, 'ResizablePMCArray'
    box $P5061, "NQPMu"
    push $P5060, $P5061
    $P5062 = $P5054."find_sym"($P5060)
    set $P102["default"], $P5062
    set $P5064, $P5062
    pop_eh 
    goto skip_handler_15824874
  catch_handler_15834875:
    .get_results ($P5063) 
    set $I10001, 1
    set $P5063["handled"], $I10001
    nqp_get_sc_object $P10001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    finalize $P5063
    pop_upto_eh $P5063
    pop_eh 
    set $P5064, $P10001
    goto skip_handler_15824874
  skip_handler_15824874:
    set $P5065, $P5064
  if1580_end4867:
  if1578_end4863:
.annotate 'line', 2292
    find_dynamic_lex $P5066, "$*W"
    unless_null $P5066, fallback4876
    nqp_get_sc_object $P5069, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["$W"]
    unless_null $P5067, fallback4877
    nqp_get_sc_object $P5070, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5067, $P5070
  fallback4877:
    unless_null $P5067, vivi_15844878
    die "Contextual $*W not found"
    box $P5071, "Contextual $*W not found"
    set $P5067, $P5071
  vivi_15844878:
    set $P5066, $P5067
  fallback4876:
    find_dynamic_lex $P5072, "$*PACKAGE"
    unless_null $P5072, fallback4879
    nqp_get_sc_object $P5075, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5074, $P5075
    set $P5073, $P5074["$PACKAGE"]
    unless_null $P5073, fallback4880
    nqp_get_sc_object $P5076, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5073, $P5076
  fallback4880:
    unless_null $P5073, vivi_15854881
    die "Contextual $*PACKAGE not found"
    box $P5077, "Contextual $*PACKAGE not found"
    set $P5073, $P5077
  vivi_15854881:
    set $P5072, $P5073
  fallback4879:
    find_dynamic_lex $P5079, "%*HOW"
    unless_null $P5079, fallback4882
    nqp_get_sc_object $P5082, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5081, $P5082
    set $P5080, $P5081["%HOW"]
    unless_null $P5080, fallback4883
    nqp_get_sc_object $P5084, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5083, $P5084
    new $P5085, 'Hash'
    set $P5083["%HOW"], $P5085
    set $P5080, $P5085
  fallback4883:
    unless_null $P5080, vivi_15864884
    die "Contextual %*HOW not found"
    box $P5086, "Contextual %*HOW not found"
    set $P5080, $P5086
  vivi_15864884:
    set $P5079, $P5080
  fallback4882:
    find_dynamic_lex $P5087, "$*PKGDECL"
    unless_null $P5087, fallback4885
    nqp_get_sc_object $P5090, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5089, $P5090
    set $P5088, $P5089["$PKGDECL"]
    unless_null $P5088, fallback4886
    nqp_get_sc_object $P5091, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5088, $P5091
  fallback4886:
    unless_null $P5088, vivi_15874887
    die "Contextual $*PKGDECL not found"
    box $P5092, "Contextual $*PKGDECL not found"
    set $P5088, $P5092
  vivi_15874887:
    set $P5087, $P5088
  fallback4885:
    set $S5009, $P5087
    concat $S5008, $S5009, "-attr"
    set $P5078, $P5079[$S5008]
    unless_null $P5078, fallback4888
    nqp_get_sc_object $P5093, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5078, $P5093
  fallback4888:
    $P5066."pkg_add_attribute"($P5072, $P5078, $P101, $P102)
.annotate 'line', 2295
    nqp_get_sc_object $P5097, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5096, $P5097, "QAST"
    get_who $P5095, $P5096
    set $P5094, $P5095["Stmts"]
    unless_null $P5094, fallback4889
    nqp_get_sc_object $P5098, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5094, $P5098
  fallback4889:
    $P5099 = $P5094."new"()
    store_lex "$past", $P5099
    .return ($P5099) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_463_1360256386.79") :anon :lex :outer("cuid_301_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2308
    .const 'Sub' $P5054 = 'cuid_462_1360256386.79' 
    capture_lex $P5054 
    .lex "$type", $P101 
    .lex "$default", $P102 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4903
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5005
  fallback4903:
    set $P5003, $P5004["typename"]
    unless_null $P5003, fallback4904
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5006
  fallback4904:
    unless $P5003 goto if1591_else4901 
.annotate 'line', 2311
    find_lex $P5007, "$sigil"
    set $S5001, $P5007
    iseq $I5001, $S5001, "$"
    if $I5001 goto unless1592_end4906 
.annotate 'line', 2312
.annotate 'line', 2313
    find_lex $P5008, "$/"
    $P5009 = $P5008."CURSOR"()
    $P5010 = $P5009."panic"("Only typed scalars are currently supported in NQP")
  unless1592_end4906:
.annotate 'line', 2315
    find_dynamic_lex $P5011, "$*W"
    unless_null $P5011, fallback4907
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$W"]
    unless_null $P5012, fallback4908
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5012, $P5015
  fallback4908:
    unless_null $P5012, vivi_15934909
    die "Contextual $*W not found"
    box $P5016, "Contextual $*W not found"
    set $P5012, $P5016
  vivi_15934909:
    set $P5011, $P5012
  fallback4907:
    new $P5017, 'ResizablePMCArray'
    find_lex $P5020, "$/"
    unless_null $P5020, fallback4910
    nqp_get_sc_object $P5021, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5020, $P5021
  fallback4910:
    set $P5019, $P5020["typename"]
    unless_null $P5019, fallback4911
    nqp_get_sc_object $P5022, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5019, $P5022
  fallback4911:
    set $P5018, $P5019[0]
    unless_null $P5018, fallback4912
    nqp_get_sc_object $P5023, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5018, $P5023
  fallback4912:
    set $S5002, $P5018
    box $P5024, $S5002
    push $P5017, $P5024
    $P5025 = $P5011."find_sym"($P5017)
    set $P101, $P5025
    repr_get_primitive_type_spec $I5002, $P101
    unless $I5002 goto if1594_else4913 
    .const 'Sub' $P5026 = 'cuid_462_1360256386.79' 
    capture_lex $P5026
    $P5027 = $P5026($I5002)
    set $P5031, $P5027
    goto if1594_end4914
  if1594_else4913:
.annotate 'line', 2319
.annotate 'line', 2320
    find_lex $P5028, "$/"
    $P5029 = $P5028."CURSOR"()
    $P5030 = $P5029."panic"("Only native types are currently supported/checked")
    set $P5031, $P5030
  if1594_end4914:
    goto if1591_end4902
  if1591_else4901:
.annotate 'line', 2323
.annotate 'line', 2324
    find_lex $P5032, "$sigil"
    $P5033 = "&default_for"($P5032)
    set $P102, $P5033
  if1591_end4902:
.annotate 'line', 2326
    find_lex $P5035, "$BLOCK"
    set $P5034, $P5035[0]
    unless_null $P5034, fallback4915
    nqp_get_sc_object $P5036, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5034, $P5036
  fallback4915:
    nqp_get_sc_object $P5040, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback4916
    nqp_get_sc_object $P5041, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5037, $P5041
  fallback4916:
    find_lex $P5042, "$/"
.annotate 'line', 2328
    nqp_get_sc_object $P5046, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Var"]
    unless_null $P5043, fallback4917
    nqp_get_sc_object $P5047, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5043, $P5047
  fallback4917:
    find_lex $P5048, "$name"
    $P5049 = $P5043."new"($P5048 :named("name"), "lexical" :named("scope"), "var" :named("decl"), $P101 :named("returns"))
    $P5050 = $P5037."new"($P5049, $P102, "bind" :named("op"), $P5042 :named("node"))
    $P5034."push"($P5050)
.annotate 'line', 2331
    find_lex $P5051, "$BLOCK"
    find_lex $P5052, "$name"
    $P5053 = $P5051."symbol"($P5052, "lexical" :named("scope"), $P101 :named("type"))
    .return ($P5053) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_462_1360256386.79") :anon :lex :outer("cuid_463_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2316
    .param pmc _lex_param_0 
    .lex "$prim_spec", _lex_param_0 
.annotate 'line', 2317
    $P5001 = "&default_value_for_prim"(_lex_param_0)
    store_lex "$default", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_464_1360256386.79") :anon :lex :outer("cuid_301_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2336
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_302_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2342
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4927
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4927:
    set $P5001, _lex_param_1["routine_def"]
    unless_null $P5001, fallback4928
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4928:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_303_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2343
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4929
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback4929:
    set $P5001, _lex_param_1["method_def"]
    unless_null $P5001, fallback4930
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback4930:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_304_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2345
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5060 = 'cuid_468_1360256386.79' 
    capture_lex $P5060 
    .const 'Sub' $P5060 = 'cuid_471_1360256386.79' 
    capture_lex $P5060 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "$lexpast", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P103, $P5003
    unless_null _lex_param_1, fallback4933
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5005
  fallback4933:
    set $P5004, _lex_param_1["onlystar"]
    unless_null $P5004, fallback4934
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5006
  fallback4934:
    unless $P5004 goto if1596_else4931 
.annotate 'line', 2349
.annotate 'line', 2350
    $P5007 = "&only_star_block"()
    set $P101, $P5007
    goto if1596_end4932
  if1596_else4931:
.annotate 'line', 2352
.annotate 'line', 2353
    unless_null _lex_param_1, fallback4935
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5009
  fallback4935:
    set $P5008, _lex_param_1["blockoid"]
    unless_null $P5008, fallback4936
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5010
  fallback4936:
    $P5011 = $P5008."ast"()
    set $P101, $P5011
.annotate 'line', 2354
    $P101."blocktype"("declaration")
    find_dynamic_lex $P5012, "$*RETURN_USED"
    unless_null $P5012, fallback4939
    nqp_get_sc_object $P5015, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$RETURN_USED"]
    unless_null $P5013, fallback4940
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5013, $P5016
  fallback4940:
    unless_null $P5013, vivi_15984941
    die "Contextual $*RETURN_USED not found"
    box $P5017, "Contextual $*RETURN_USED not found"
    set $P5013, $P5017
  vivi_15984941:
    set $P5012, $P5013
  fallback4939:
    set $P5021, $P5012
    unless $P5012 goto if1597_end4938 
.annotate 'line', 2355
.annotate 'line', 2356
    set $P5018, $P101[1]
    unless_null $P5018, fallback4942
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5018, $P5019
  fallback4942:
    $P5020 = "&wrap_return_handler"($P5018)
    set $P101[1], $P5020
    set $P5021, $P5020
  if1597_end4938:
  if1596_end4932:
    set $P102, $P101
    unless_null _lex_param_1, fallback4945
    nqp_get_sc_object $P5023, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5023
  fallback4945:
    set $P5022, _lex_param_1["deflongname"]
    unless_null $P5022, fallback4946
    nqp_get_sc_object $P5024, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5022, $P5024
  fallback4946:
    unless $P5022 goto if1599_else4943 
    .const 'Sub' $P5025 = 'cuid_468_1360256386.79' 
    capture_lex $P5025
    $P5026 = $P5025()
    goto if1599_end4944
  if1599_else4943:
.annotate 'line', 2466
.annotate 'line', 2467
    find_dynamic_lex $P5027, "$*W"
    unless_null $P5027, fallback5067
    nqp_get_sc_object $P5030, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$W"]
    unless_null $P5028, fallback5068
    nqp_get_sc_object $P5031, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5028, $P5031
  fallback5068:
    unless_null $P5028, vivi_16345069
    die "Contextual $*W not found"
    box $P5032, "Contextual $*W not found"
    set $P5028, $P5032
  vivi_16345069:
    set $P5027, $P5028
  fallback5067:
    $P5033 = $P5027."is_precompilation_mode"()
    set $P5041, $P5033
    unless $P5033 goto if1633_end5066 
.annotate 'line', 2468
    find_dynamic_lex $P5034, "$*W"
    unless_null $P5034, fallback5070
    nqp_get_sc_object $P5037, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5036, $P5037
    set $P5035, $P5036["$W"]
    unless_null $P5035, fallback5071
    nqp_get_sc_object $P5038, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5035, $P5038
  fallback5071:
    unless_null $P5035, vivi_16355072
    die "Contextual $*W not found"
    box $P5039, "Contextual $*W not found"
    set $P5035, $P5039
  vivi_16355072:
    set $P5034, $P5035
  fallback5070:
    $P5040 = $P5034."create_code"($P101, "<anon>", 0)
    set $P5041, $P5040
  if1633_end5066:
  if1599_end4944:
.annotate 'line', 2472
    nqp_get_sc_object $P5045, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback5073
    nqp_get_sc_object $P5046, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5042, $P5046
  fallback5073:
    $P5047 = $P5042."new"($P101, "takeclosure" :named("op"))
    set $P103, $P5047
    set $P103["sink"], $P101
    set $P103["block_past"], $P102
.annotate 'line', 2475
    _lex_param_1."!make"($P103)
    unless_null _lex_param_1, fallback5076
    nqp_get_sc_object $P5049, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5049
  fallback5076:
    set $P5048, _lex_param_1["trait"]
    unless_null $P5048, fallback5077
    nqp_get_sc_object $P5050, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5048, $P5050
  fallback5077:
    set $P5059, $P5048
    unless $P5048 goto if1636_end5075 
.annotate 'line', 2478
    unless_null _lex_param_1, fallback5078
    nqp_get_sc_object $P5055, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5055
  fallback5078:
    set $P5054, _lex_param_1["trait"]
    unless_null $P5054, fallback5079
    nqp_get_sc_object $P5056, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5054, $P5056
  fallback5079:
    set $P5051, $P5054
    iter $P5053, $P5054
  for_next5080:
    unless $P5053, for_done5082
    shift $P5058, $P5053
  for_redo5081:
    .const 'Sub' $P5057 = 'cuid_471_1360256386.79' 
    capture_lex $P5057
    $P5051 = $P5057($P5058)
    goto for_next5080
  for_done5082:
    set $P5059, $P5051
  if1636_end5075:
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_468_1360256386.79") :anon :lex :outer("cuid_304_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2361
    .const 'Sub' $P5078 = 'cuid_467_1360256386.79' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_469_1360256386.79' 
    capture_lex $P5078 
    .const 'Sub' $P5078 = 'cuid_470_1360256386.79' 
    capture_lex $P5078 
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4947
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5005
  fallback4947:
    set $P5003, $P5004["sigil"]
    unless_null $P5003, fallback4948
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5006
  fallback4948:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback4949
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5007
  fallback4949:
    set $S5002, $P5002
.annotate 'line', 2362
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4950
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5011
  fallback4950:
    set $P5009, $P5010["deflongname"]
    unless_null $P5009, fallback4951
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5012
  fallback4951:
    set $P5008, $P5009[0]
    unless_null $P5008, fallback4952
    nqp_get_sc_object $P5013, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5013
  fallback4952:
    $P5014 = $P5008."ast"()
    set $S5003, $P5014
    concat $S5001, $S5002, $S5003
    box $P5015, $S5001
    set $P101, $P5015
.annotate 'line', 2363
    find_lex $P5016, "$past"
    $P5016."name"($P101)
    find_dynamic_lex $P5017, "$*SCOPE"
    unless_null $P5017, fallback4959
    nqp_get_sc_object $P5020, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5019, $P5020
    set $P5018, $P5019["$SCOPE"]
    unless_null $P5018, fallback4960
    nqp_get_sc_object $P5021, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5018, $P5021
  fallback4960:
    unless_null $P5018, vivi_16034961
    die "Contextual $*SCOPE not found"
    box $P5022, "Contextual $*SCOPE not found"
    set $P5018, $P5022
  vivi_16034961:
    set $P5017, $P5018
  fallback4959:
    set $S5004, $P5017
    iseq $I5001, $S5004, ""
    set $I5003, $I5001
    if $I5001 goto unless1602_end4958 
    find_dynamic_lex $P5023, "$*SCOPE"
    unless_null $P5023, fallback4962
    nqp_get_sc_object $P5026, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5025, $P5026
    set $P5024, $P5025["$SCOPE"]
    unless_null $P5024, fallback4963
    nqp_get_sc_object $P5027, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5024, $P5027
  fallback4963:
    unless_null $P5024, vivi_16044964
    die "Contextual $*SCOPE not found"
    box $P5028, "Contextual $*SCOPE not found"
    set $P5024, $P5028
  vivi_16044964:
    set $P5023, $P5024
  fallback4962:
    set $S5005, $P5023
    iseq $I5002, $S5005, "my"
    set $I5003, $I5002
  unless1602_end4958:
    set $I5005, $I5003
    if $I5003 goto unless1601_end4956 
    find_dynamic_lex $P5029, "$*SCOPE"
    unless_null $P5029, fallback4965
    nqp_get_sc_object $P5032, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["$SCOPE"]
    unless_null $P5030, fallback4966
    nqp_get_sc_object $P5033, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5030, $P5033
  fallback4966:
    unless_null $P5030, vivi_16054967
    die "Contextual $*SCOPE not found"
    box $P5034, "Contextual $*SCOPE not found"
    set $P5030, $P5034
  vivi_16054967:
    set $P5029, $P5030
  fallback4965:
    set $S5006, $P5029
    iseq $I5004, $S5006, "our"
    set $I5005, $I5004
  unless1601_end4956:
    unless $I5005 goto if1600_else4953 
.annotate 'line', 2364
    find_dynamic_lex $P5035, "$*MULTINESS"
    unless_null $P5035, fallback4970
    nqp_get_sc_object $P5038, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5037, $P5038
    set $P5036, $P5037["$MULTINESS"]
    unless_null $P5036, fallback4971
    nqp_get_sc_object $P5039, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5036, $P5039
  fallback4971:
    unless_null $P5036, vivi_16074972
    die "Contextual $*MULTINESS not found"
    box $P5040, "Contextual $*MULTINESS not found"
    set $P5036, $P5040
  vivi_16074972:
    set $P5035, $P5036
  fallback4970:
    set $S5007, $P5035
    iseq $I5006, $S5007, "multi"
    unless $I5006 goto if1606_else4968 
    .const 'Sub' $P5041 = 'cuid_467_1360256386.79' 
    capture_lex $P5041
    $P5042 = $P5041()
    goto if1606_end4969
  if1606_else4968:
    find_dynamic_lex $P5043, "$*MULTINESS"
    unless_null $P5043, fallback5008
    nqp_get_sc_object $P5046, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$MULTINESS"]
    unless_null $P5044, fallback5009
    nqp_get_sc_object $P5047, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5044, $P5047
  fallback5009:
    unless_null $P5044, vivi_16195010
    die "Contextual $*MULTINESS not found"
    box $P5048, "Contextual $*MULTINESS not found"
    set $P5044, $P5048
  vivi_16195010:
    set $P5043, $P5044
  fallback5008:
    set $S5008, $P5043
    iseq $I5007, $S5008, "proto"
    unless $I5007 goto if1618_else5006 
    .const 'Sub' $P5049 = 'cuid_469_1360256386.79' 
    capture_lex $P5049
    $P5050 = $P5049()
    set $P5053, $P5050
    goto if1618_end5007
  if1618_else5006:
    .const 'Sub' $P5051 = 'cuid_470_1360256386.79' 
    capture_lex $P5051
    $P5052 = $P5051()
    set $P5053, $P5052
  if1618_end5007:
  if1606_end4969:
.annotate 'line', 2455
    nqp_get_sc_object $P5057, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Var"]
    unless_null $P5054, fallback5054
    nqp_get_sc_object $P5058, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5054, $P5058
  fallback5054:
    set $S5010, $P101
    concat $S5009, "&", $S5010
    $P5059 = $P5054."new"($S5009 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5059
    goto if1600_end4954
  if1600_else4953:
.annotate 'line', 2457
.annotate 'line', 2458
    find_lex $P5060, "$/"
    $P5061 = $P5060."CURSOR"()
    find_dynamic_lex $P5062, "$*SCOPE"
    unless_null $P5062, fallback5055
    nqp_get_sc_object $P5065, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$SCOPE"]
    unless_null $P5063, fallback5056
    nqp_get_sc_object $P5066, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5063, $P5066
  fallback5056:
    unless_null $P5063, vivi_16295057
    die "Contextual $*SCOPE not found"
    box $P5067, "Contextual $*SCOPE not found"
    set $P5063, $P5067
  vivi_16295057:
    set $P5062, $P5063
  fallback5055:
    set $S5012, $P5062
    concat $S5011, $S5012, " scoped routines are not supported yet"
    $P5068 = $P5061."panic"($S5011)
  if1600_end4954:
    set $S5013, $P101
    iseq $I5008, $S5013, "MAIN"
    set $I5010, $I5008
    unless $I5008 goto if1631_end5061 
    find_dynamic_lex $P5069, "$*MULTINESS"
    unless_null $P5069, fallback5062
    nqp_get_sc_object $P5072, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5071, $P5072
    set $P5070, $P5071["$MULTINESS"]
    unless_null $P5070, fallback5063
    nqp_get_sc_object $P5073, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5070, $P5073
  fallback5063:
    unless_null $P5070, vivi_16325064
    die "Contextual $*MULTINESS not found"
    box $P5074, "Contextual $*MULTINESS not found"
    set $P5070, $P5074
  vivi_16325064:
    set $P5069, $P5070
  fallback5062:
    set $S5014, $P5069
    isne $I5009, $S5014, "multi"
    set $I5010, $I5009
  if1631_end5061:
    box $P5077, $I5010
    set $P5076, $P5077
    unless $I5010 goto if1630_end5059 
.annotate 'line', 2462
    find_lex $P5075, "$block"
    store_dynamic_lex "$*MAIN_SUB", $P5075
    set $P5076, $P5075
  if1630_end5059:
    .return ($P5076) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_467_1360256386.79") :anon :lex :outer("cuid_468_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2365
    .const 'Sub' $P5048 = 'cuid_466_1360256386.79' 
    capture_lex $P5048 
    .lex "$proto", $P101 
    .lex "%sym", $P102 
    .lex "$code", $P103 
    .lex "$BLOCK", $P104 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P104, $P5004
    find_dynamic_lex $P5005, "$*SCOPE"
    unless_null $P5005, fallback4975
    nqp_get_sc_object $P5008, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$SCOPE"]
    unless_null $P5006, fallback4976
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5009
  fallback4976:
    unless_null $P5006, vivi_16094977
    die "Contextual $*SCOPE not found"
    box $P5010, "Contextual $*SCOPE not found"
    set $P5006, $P5010
  vivi_16094977:
    set $P5005, $P5006
  fallback4975:
    set $S5001, $P5005
    iseq $I5001, $S5001, "our"
    unless $I5001 goto if1608_end4974 
.annotate 'line', 2367
    box $P5011, "a multi can not be our-scoped"
    die $P5011
  if1608_end4974:
.annotate 'line', 2369
    find_dynamic_lex $P5012, "$*W"
    unless_null $P5012, fallback4978
    nqp_get_sc_object $P5015, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$W"]
    unless_null $P5013, fallback4979
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5013, $P5016
  fallback4979:
    unless_null $P5013, vivi_16104980
    die "Contextual $*W not found"
    box $P5017, "Contextual $*W not found"
    set $P5013, $P5017
  vivi_16104980:
    set $P5012, $P5013
  fallback4978:
    $P5018 = $P5012."cur_lexpad"()
    find_lex $P5019, "$name"
    set $S5003, $P5019
    concat $S5002, "&", $S5003
    $P5020 = $P5018."symbol"($S5002)
    set $P102, $P5020
    set $P5021, $P102["proto"]
    unless_null $P5021, fallback4983
    nqp_get_sc_object $P5022, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5021, $P5022
  fallback4983:
    unless $P5021 goto if1611_else4981 
.annotate 'line', 2370
    set $P5023, $P102["value"]
    unless_null $P5023, fallback4984
    nqp_get_sc_object $P5024, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5023, $P5024
  fallback4984:
    set $P101, $P5023
    goto if1611_end4982
  if1611_else4981:
    .const 'Sub' $P5025 = 'cuid_466_1360256386.79' 
    capture_lex $P5025
    $P5026 = $P5025()
  if1611_end4982:
.annotate 'line', 2399
    find_dynamic_lex $P5027, "$*W"
    unless_null $P5027, fallback4999
    nqp_get_sc_object $P5030, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$W"]
    unless_null $P5028, fallback5000
    nqp_get_sc_object $P5031, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5028, $P5031
  fallback5000:
    unless_null $P5028, vivi_16165001
    die "Contextual $*W not found"
    box $P5032, "Contextual $*W not found"
    set $P5028, $P5032
  vivi_16165001:
    set $P5027, $P5028
  fallback4999:
    find_lex $P5033, "$past"
    find_lex $P5034, "$name"
    $P5035 = $P5027."create_code"($P5033, $P5034, 0)
    set $P103, $P5035
.annotate 'line', 2400
    find_lex $P5036, "$past"
    "&attach_multi_signature"($P103, $P5036)
.annotate 'line', 2403
    $P101."add_dispatchee"($P103)
.annotate 'line', 2406
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback5002
    nqp_get_sc_object $P5040, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback5003
    nqp_get_sc_object $P5041, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5038, $P5041
  fallback5003:
    unless_null $P5038, vivi_16175004
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_16175004:
    set $P5037, $P5038
  fallback5002:
    $P5043 = $P5037."cur_lexpad"()
    set $P104, $P5043
.annotate 'line', 2407
    set $P5044, $P104[0]
    unless_null $P5044, fallback5005
    nqp_get_sc_object $P5045, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5044, $P5045
  fallback5005:
    find_lex $P5046, "$past"
    $P5047 = $P5044."push"($P5046)
    .return ($P5047) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_466_1360256386.79") :anon :lex :outer("cuid_467_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2375
    .const 'Sub' $P5018 = 'cuid_465_1360256386.79' 
    capture_lex $P5018 
    .lex "$found_proto", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 2378
    find_dynamic_lex $P5005, "$*W"
    unless_null $P5005, fallback4985
    nqp_get_sc_object $P5008, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$W"]
    unless_null $P5006, fallback4986
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5009
  fallback4986:
    unless_null $P5006, vivi_16124987
    die "Contextual $*W not found"
    box $P5010, "Contextual $*W not found"
    set $P5006, $P5010
  vivi_16124987:
    set $P5005, $P5006
  fallback4985:
    $P5011 = $P5005."get_legacy_block_list"()
    set $P5002, $P5011
    iter $P5004, $P5011
  for_next4994:
    unless $P5004, for_done4996
    shift $P5013, $P5004
  for_redo4995:
    .const 'Sub' $P5012 = 'cuid_465_1360256386.79' 
    capture_lex $P5012
    $P5002 = $P5012($P5013)
    goto for_next4994
  for_done4996:
    if $P101 goto unless1615_end4998 
.annotate 'line', 2390
.annotate 'line', 2391
    find_lex $P5014, "$/"
    $P5015 = $P5014."CURSOR"()
    $P5016 = $P5015."panic"("Sorry, no proto sub in scope, and auto-generation of protos is not yet implemented.")
  unless1615_end4998:
    box $P5017, "Dispatcher derivation NYI"
    die $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_465_1360256386.79") :anon :lex :outer("cuid_466_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2378
    .param pmc _lex_param_0 
    .lex "%sym", $P101 
    .lex "$_", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 2379
    find_lex $P5002, "$name"
    set $S5002, $P5002
    concat $S5001, "&", $S5002
    $P5003 = _lex_param_0."symbol"($S5001)
    set $P101, $P5003
    set $P5004, $P101["proto"]
    unless_null $P5004, fallback4990
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5005
  fallback4990:
    unless $P5004 goto if1613_else4988 
.annotate 'line', 2380
    set $P5006, $P101["value"]
    unless_null $P5006, fallback4991
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5007
  fallback4991:
    store_lex "$proto", $P5006
    box $P5008, 1
    store_lex "$found_proto", $P5008
    set $P5013, $P5008
    goto if1613_end4989
  if1613_else4988:
    set $P5012, $P101
    unless $P101 goto if1614_end4993 
.annotate 'line', 2384
.annotate 'line', 2385
    find_lex $P5009, "$/"
    $P5010 = $P5009."CURSOR"()
    $P5011 = $P5010."panic"("Cannot declare a multi when an only is already in scope.")
    set $P5012, $P5011
  if1614_end4993:
    set $P5013, $P5012
  if1613_end4989:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_469_1360256386.79") :anon :lex :outer("cuid_468_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2409
    .lex "$code", $P101 
    .lex "$BLOCK", $P102 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    find_dynamic_lex $P5003, "$*SCOPE"
    unless_null $P5003, fallback5013
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$SCOPE"]
    unless_null $P5004, fallback5014
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5007
  fallback5014:
    unless_null $P5004, vivi_16215015
    die "Contextual $*SCOPE not found"
    box $P5008, "Contextual $*SCOPE not found"
    set $P5004, $P5008
  vivi_16215015:
    set $P5003, $P5004
  fallback5013:
    set $S5001, $P5003
    iseq $I5001, $S5001, "our"
    unless $I5001 goto if1620_end5012 
.annotate 'line', 2413
    box $P5009, "our-scoped protos not yet implemented"
    die $P5009
  if1620_end5012:
.annotate 'line', 2414
    find_dynamic_lex $P5010, "$*W"
    unless_null $P5010, fallback5016
    nqp_get_sc_object $P5013, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$W"]
    unless_null $P5011, fallback5017
    nqp_get_sc_object $P5014, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5014
  fallback5017:
    unless_null $P5011, vivi_16225018
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5011, $P5015
  vivi_16225018:
    set $P5010, $P5011
  fallback5016:
    find_lex $P5016, "$past"
    find_lex $P5017, "$name"
    $P5018 = $P5010."create_code"($P5016, $P5017, 1)
    set $P101, $P5018
.annotate 'line', 2415
    find_dynamic_lex $P5019, "$*W"
    unless_null $P5019, fallback5019
    nqp_get_sc_object $P5022, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$W"]
    unless_null $P5020, fallback5020
    nqp_get_sc_object $P5023, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5020, $P5023
  fallback5020:
    unless_null $P5020, vivi_16235021
    die "Contextual $*W not found"
    box $P5024, "Contextual $*W not found"
    set $P5020, $P5024
  vivi_16235021:
    set $P5019, $P5020
  fallback5019:
    $P5025 = $P5019."cur_lexpad"()
    set $P102, $P5025
.annotate 'line', 2416
    set $P5026, $P102[0]
    unless_null $P5026, fallback5022
    nqp_get_sc_object $P5027, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5026, $P5027
  fallback5022:
    nqp_get_sc_object $P5031, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["Op"]
    unless_null $P5028, fallback5023
    nqp_get_sc_object $P5032, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5028, $P5032
  fallback5023:
.annotate 'line', 2418
    nqp_get_sc_object $P5036, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Var"]
    unless_null $P5033, fallback5024
    nqp_get_sc_object $P5037, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5033, $P5037
  fallback5024:
    find_lex $P5038, "$name"
    set $S5003, $P5038
    concat $S5002, "&", $S5003
    $P5039 = $P5033."new"($S5002 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5040, "$past"
    $P5041 = $P5028."new"($P5039, $P5040, "bind" :named("op"))
    $P5026."push"($P5041)
.annotate 'line', 2421
    find_lex $P5042, "$name"
    set $S5005, $P5042
    concat $S5004, "&", $S5005
    $P102."symbol"($S5004, "lexical" :named("scope"), 1 :named("proto"), $P101 :named("value"))
.annotate 'line', 2425
    find_lex $P5044, "$block"
    set $P5043, $P5044[0]
    unless_null $P5043, fallback5025
    nqp_get_sc_object $P5045, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5043, $P5045
  fallback5025:
    nqp_get_sc_object $P5049, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["Op"]
    unless_null $P5046, fallback5026
    nqp_get_sc_object $P5050, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5046, $P5050
  fallback5026:
.annotate 'line', 2427
    nqp_get_sc_object $P5054, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5053, $P5054, "QAST"
    get_who $P5052, $P5053
    set $P5051, $P5052["Var"]
    unless_null $P5051, fallback5027
    nqp_get_sc_object $P5055, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5051, $P5055
  fallback5027:
    $P5056 = $P5051."new"("CURRENT_DISPATCH_CAPTURE" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2428
    nqp_get_sc_object $P5060, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5059, $P5060, "QAST"
    get_who $P5058, $P5059
    set $P5057, $P5058["Op"]
    unless_null $P5057, fallback5028
    nqp_get_sc_object $P5061, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5057, $P5061
  fallback5028:
    $P5062 = $P5057."new"("savecapture" :named("op"))
    $P5063 = $P5046."new"($P5056, $P5062, "bind" :named("op"))
    $P5043."push"($P5063)
.annotate 'line', 2430
    find_lex $P5065, "$block"
    set $P5064, $P5065[0]
    unless_null $P5064, fallback5029
    nqp_get_sc_object $P5066, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5064, $P5066
  fallback5029:
    nqp_get_sc_object $P5070, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5069, $P5070, "QAST"
    get_who $P5068, $P5069
    set $P5067, $P5068["Op"]
    unless_null $P5067, fallback5030
    nqp_get_sc_object $P5071, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5067, $P5071
  fallback5030:
.annotate 'line', 2432
    nqp_get_sc_object $P5075, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5074, $P5075, "QAST"
    get_who $P5073, $P5074
    set $P5072, $P5073["Var"]
    unless_null $P5072, fallback5031
    nqp_get_sc_object $P5076, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5072, $P5076
  fallback5031:
    $P5077 = $P5072."new"("&*CURRENT_DISPATCHER" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2433
    nqp_get_sc_object $P5081, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5080, $P5081, "QAST"
    get_who $P5079, $P5080
    set $P5078, $P5079["Op"]
    unless_null $P5078, fallback5032
    nqp_get_sc_object $P5082, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5078, $P5082
  fallback5032:
    nqp_get_sc_object $P5086, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5085, $P5086, "QAST"
    get_who $P5084, $P5085
    set $P5083, $P5084["Op"]
    unless_null $P5083, fallback5033
    nqp_get_sc_object $P5087, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5083, $P5087
  fallback5033:
    $P5088 = $P5083."new"("curcode" :named("op"))
    $P5089 = $P5078."new"($P5088, "getcodeobj" :named("op"))
    $P5090 = $P5067."new"($P5077, $P5089, "bind" :named("op"))
    $P5091 = $P5064."push"($P5090)
    .return ($P5091) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_470_1360256386.79") :anon :lex :outer("cuid_468_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2436
    .lex "$BLOCK", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 2437
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback5034
    nqp_get_sc_object $P5005, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback5035
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5006
  fallback5035:
    unless_null $P5003, vivi_16245036
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_16245036:
    set $P5002, $P5003
  fallback5034:
    $P5008 = $P5002."cur_lexpad"()
    set $P101, $P5008
.annotate 'line', 2438
    set $P5009, $P101[0]
    unless_null $P5009, fallback5037
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5010
  fallback5037:
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5038
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5015
  fallback5038:
.annotate 'line', 2440
    nqp_get_sc_object $P5019, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback5039
    nqp_get_sc_object $P5020, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5016, $P5020
  fallback5039:
    find_lex $P5021, "$name"
    set $S5002, $P5021
    concat $S5001, "&", $S5002
    $P5022 = $P5016."new"($S5001 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5023, "$past"
    $P5024 = $P5011."new"($P5022, $P5023, "bind" :named("op"))
    $P5009."push"($P5024)
.annotate 'line', 2443
    find_lex $P5025, "$name"
    set $S5004, $P5025
    concat $S5003, "&", $S5004
    $P101."symbol"($S5003, "lexical" :named("scope"))
    find_dynamic_lex $P5026, "$*SCOPE"
    unless_null $P5026, fallback5042
    nqp_get_sc_object $P5029, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$SCOPE"]
    unless_null $P5027, fallback5043
    nqp_get_sc_object $P5030, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5027, $P5030
  fallback5043:
    unless_null $P5027, vivi_16265044
    die "Contextual $*SCOPE not found"
    box $P5031, "Contextual $*SCOPE not found"
    set $P5027, $P5031
  vivi_16265044:
    set $P5026, $P5027
  fallback5042:
    set $S5005, $P5026
    iseq $I5001, $S5005, "our"
    box $P5067, $I5001
    set $P5066, $P5067
    unless $I5001 goto if1625_end5041 
.annotate 'line', 2444
.annotate 'line', 2447
    find_dynamic_lex $P5032, "$*W"
    unless_null $P5032, fallback5045
    nqp_get_sc_object $P5035, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["$W"]
    unless_null $P5033, fallback5046
    nqp_get_sc_object $P5036, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5033, $P5036
  fallback5046:
    unless_null $P5033, vivi_16275047
    die "Contextual $*W not found"
    box $P5037, "Contextual $*W not found"
    set $P5033, $P5037
  vivi_16275047:
    set $P5032, $P5033
  fallback5045:
    find_dynamic_lex $P5038, "$*PACKAGE"
    unless_null $P5038, fallback5048
    nqp_get_sc_object $P5041, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5040, $P5041
    set $P5039, $P5040["$PACKAGE"]
    unless_null $P5039, fallback5049
    nqp_get_sc_object $P5042, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5039, $P5042
  fallback5049:
    unless_null $P5039, vivi_16285050
    die "Contextual $*PACKAGE not found"
    box $P5043, "Contextual $*PACKAGE not found"
    set $P5039, $P5043
  vivi_16285050:
    set $P5038, $P5039
  fallback5048:
    find_lex $P5044, "$name"
    find_lex $P5045, "$past"
    $P5032."install_package_routine"($P5038, $P5044, $P5045)
.annotate 'line', 2448
    set $P5046, $P101[0]
    unless_null $P5046, fallback5051
    nqp_get_sc_object $P5047, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5046, $P5047
  fallback5051:
    nqp_get_sc_object $P5051, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Op"]
    unless_null $P5048, fallback5052
    nqp_get_sc_object $P5052, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5048, $P5052
  fallback5052:
.annotate 'line', 2450
    new $P5053, 'ResizablePMCArray'
    find_lex $P5054, "$name"
    push $P5053, $P5054
    find_lex $P5055, "$/"
    $P5056 = "&lexical_package_lookup"($P5053, $P5055)
.annotate 'line', 2451
    nqp_get_sc_object $P5060, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5059, $P5060, "QAST"
    get_who $P5058, $P5059
    set $P5057, $P5058["Var"]
    unless_null $P5057, fallback5053
    nqp_get_sc_object $P5061, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5057, $P5061
  fallback5053:
    find_lex $P5062, "$name"
    set $S5007, $P5062
    concat $S5006, "&", $S5007
    $P5063 = $P5057."new"($S5006 :named("name"), "lexical" :named("scope"))
    $P5064 = $P5048."new"($P5056, $P5063, "bind" :named("op"))
    $P5065 = $P5046."push"($P5064)
    set $P5066, $P5065
  if1625_end5041:
    .return ($P5066) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_471_1360256386.79") :anon :lex :outer("cuid_304_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2479
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_305_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2483
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5091 = 'cuid_472_1360256386.79' 
    capture_lex $P5091 
    .const 'Sub' $P5091 = 'cuid_473_1360256386.79' 
    capture_lex $P5091 
    .lex "$past", $P101 
    .lex "$name", $P102 
    .lex "$lexpast", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P103, $P5003
    unless_null _lex_param_1, fallback5085
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5005
  fallback5085:
    set $P5004, _lex_param_1["onlystar"]
    unless_null $P5004, fallback5086
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5006
  fallback5086:
    unless $P5004 goto if1637_else5083 
.annotate 'line', 2487
.annotate 'line', 2488
    $P5007 = "&only_star_block"()
    set $P101, $P5007
    goto if1637_end5084
  if1637_else5083:
.annotate 'line', 2490
.annotate 'line', 2491
    unless_null _lex_param_1, fallback5087
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5009
  fallback5087:
    set $P5008, _lex_param_1["blockoid"]
    unless_null $P5008, fallback5088
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5010
  fallback5088:
    $P5011 = $P5008."ast"()
    set $P101, $P5011
.annotate 'line', 2492
    $P101."blocktype"("declaration")
    find_dynamic_lex $P5012, "$*RETURN_USED"
    unless_null $P5012, fallback5091
    nqp_get_sc_object $P5015, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$RETURN_USED"]
    unless_null $P5013, fallback5092
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5013, $P5016
  fallback5092:
    unless_null $P5013, vivi_16395093
    die "Contextual $*RETURN_USED not found"
    box $P5017, "Contextual $*RETURN_USED not found"
    set $P5013, $P5017
  vivi_16395093:
    set $P5012, $P5013
  fallback5091:
    set $P5021, $P5012
    unless $P5012 goto if1638_end5090 
.annotate 'line', 2493
.annotate 'line', 2494
    set $P5018, $P101[1]
    unless_null $P5018, fallback5094
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5018, $P5019
  fallback5094:
    $P5020 = "&wrap_return_handler"($P5018)
    set $P101[1], $P5020
    set $P5021, $P5020
  if1638_end5090:
  if1637_end5084:
    set $P5022, $P101["signature_has_invocant"]
    unless_null $P5022, fallback5097
    nqp_get_sc_object $P5023, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5022, $P5023
  fallback5097:
    if $P5022 goto unless1640_end5096 
.annotate 'line', 2499
.annotate 'line', 2500
    set $P5024, $P101[0]
    unless_null $P5024, fallback5098
    nqp_get_sc_object $P5025, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5024, $P5025
  fallback5098:
    nqp_get_sc_object $P5029, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5099
    nqp_get_sc_object $P5030, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5026, $P5030
  fallback5099:
    find_dynamic_lex $P5031, "$*PACKAGE"
    unless_null $P5031, fallback5100
    nqp_get_sc_object $P5034, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$PACKAGE"]
    unless_null $P5032, fallback5101
    nqp_get_sc_object $P5035, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5032, $P5035
  fallback5101:
    unless_null $P5032, vivi_16415102
    die "Contextual $*PACKAGE not found"
    box $P5036, "Contextual $*PACKAGE not found"
    set $P5032, $P5036
  vivi_16415102:
    set $P5031, $P5032
  fallback5100:
    $P5037 = $P5026."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"), $P5031 :named("returns"))
    $P5038 = $P5024."unshift"($P5037)
  unless1640_end5096:
.annotate 'line', 2505
    $P101."symbol"("self", "lexical" :named("scope"))
    box $P5039, ""
    set $P102, $P5039
    unless_null _lex_param_1, fallback5105
    nqp_get_sc_object $P5041, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5041
  fallback5105:
    set $P5040, _lex_param_1["deflongname"]
    unless_null $P5040, fallback5106
    nqp_get_sc_object $P5042, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5040, $P5042
  fallback5106:
    unless $P5040 goto if1642_else5103 
.annotate 'line', 2509
    unless_null _lex_param_1, fallback5107
    nqp_get_sc_object $P5044, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5044
  fallback5107:
    set $P5043, _lex_param_1["private"]
    unless_null $P5043, fallback5108
    nqp_get_sc_object $P5045, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5043, $P5045
  fallback5108:
    set $S5002, $P5043
.annotate 'line', 2510
    unless_null _lex_param_1, fallback5109
    nqp_get_sc_object $P5048, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5048
  fallback5109:
    set $P5047, _lex_param_1["deflongname"]
    unless_null $P5047, fallback5110
    nqp_get_sc_object $P5049, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5047, $P5049
  fallback5110:
    set $P5046, $P5047[0]
    unless_null $P5046, fallback5111
    nqp_get_sc_object $P5050, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5046, $P5050
  fallback5111:
    $P5051 = $P5046."ast"()
    set $S5003, $P5051
    concat $S5001, $S5002, $S5003
    box $P5052, $S5001
    set $P102, $P5052
    goto if1642_end5104
  if1642_else5103:
    unless_null _lex_param_1, fallback5114
    nqp_get_sc_object $P5054, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5054
  fallback5114:
    set $P5053, _lex_param_1["latename"]
    unless_null $P5053, fallback5115
    nqp_get_sc_object $P5055, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5053, $P5055
  fallback5115:
    set $P5068, $P5053
    unless $P5053 goto if1643_end5113 
.annotate 'line', 2512
    find_dynamic_lex $P5056, "$*PKGDECL"
    unless_null $P5056, fallback5118
    nqp_get_sc_object $P5059, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["$PKGDECL"]
    unless_null $P5057, fallback5119
    nqp_get_sc_object $P5060, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5057, $P5060
  fallback5119:
    unless_null $P5057, vivi_16455120
    die "Contextual $*PKGDECL not found"
    box $P5061, "Contextual $*PKGDECL not found"
    set $P5057, $P5061
  vivi_16455120:
    set $P5056, $P5057
  fallback5118:
    set $S5004, $P5056
    isne $I5001, $S5004, "role"
    unless $I5001 goto if1644_end5117 
.annotate 'line', 2513
.annotate 'line', 2514
    $P5062 = _lex_param_1."CURSOR"()
    $P5063 = $P5062."panic"("Late-bound method name only valid in role")
  if1644_end5117:
    unless_null _lex_param_1, fallback5121
    nqp_get_sc_object $P5065, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5065
  fallback5121:
    set $P5064, _lex_param_1["latename"]
    unless_null $P5064, fallback5122
    nqp_get_sc_object $P5066, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5064, $P5066
  fallback5122:
    set $S5006, $P5064
    concat $S5005, "!!LATENAME!!", $S5006
    box $P5067, $S5005
    set $P102, $P5067
    set $P5068, $P102
  if1643_end5113:
  if1642_end5104:
    set $S5007, $P102
    isne $I5002, $S5007, ""
    unless $I5002 goto if1646_end5124 
    .const 'Sub' $P5069 = 'cuid_472_1360256386.79' 
    capture_lex $P5069
    $P5070 = $P5069()
  if1646_end5124:
.annotate 'line', 2552
    nqp_get_sc_object $P5074, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5073, $P5074, "QAST"
    get_who $P5072, $P5073
    set $P5071, $P5072["Op"]
    unless_null $P5071, fallback5169
    nqp_get_sc_object $P5075, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5071, $P5075
  fallback5169:
    $P5076 = $P5071."new"($P101, "takeclosure" :named("op"))
    set $P103, $P5076
    set $P103["sink"], $P101
    set $P103["block_past"], $P101
    set $P5077, $P101["code_obj"]
    unless_null $P5077, fallback5170
    nqp_get_sc_object $P5078, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5077, $P5078
  fallback5170:
    set $P103["code_obj"], $P5077
.annotate 'line', 2556
    _lex_param_1."!make"($P103)
    unless_null _lex_param_1, fallback5173
    nqp_get_sc_object $P5080, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5080
  fallback5173:
    set $P5079, _lex_param_1["trait"]
    unless_null $P5079, fallback5174
    nqp_get_sc_object $P5081, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5079, $P5081
  fallback5174:
    set $P5090, $P5079
    unless $P5079 goto if1660_end5172 
.annotate 'line', 2557
    unless_null _lex_param_1, fallback5175
    nqp_get_sc_object $P5086, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5086
  fallback5175:
    set $P5085, _lex_param_1["trait"]
    unless_null $P5085, fallback5176
    nqp_get_sc_object $P5087, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5085, $P5087
  fallback5176:
    set $P5082, $P5085
    iter $P5084, $P5085
  for_next5177:
    unless $P5084, for_done5179
    shift $P5089, $P5084
  for_redo5178:
    .const 'Sub' $P5088 = 'cuid_473_1360256386.79' 
    capture_lex $P5088
    $P5082 = $P5088($P5089)
    goto for_next5177
  for_done5179:
    set $P5090, $P5082
  if1660_end5172:
    .return ($P5090) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_472_1360256386.79") :anon :lex :outer("cuid_305_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2518
    .lex "$meta_meth", $P101 
    .lex "$is_dispatcher", $P102 
    .lex "$code", $P103 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P103, $P5003
.annotate 'line', 2520
    find_lex $P5004, "$past"
    find_lex $P5005, "$name"
    $P5004."name"($P5005)
    find_dynamic_lex $P5006, "$*MULTINESS"
    unless_null $P5006, fallback5127
    nqp_get_sc_object $P5009, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$MULTINESS"]
    unless_null $P5007, fallback5128
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5010
  fallback5128:
    unless_null $P5007, vivi_16485129
    die "Contextual $*MULTINESS not found"
    box $P5011, "Contextual $*MULTINESS not found"
    set $P5007, $P5011
  vivi_16485129:
    set $P5006, $P5007
  fallback5127:
    set $S5001, $P5006
    iseq $I5001, $S5001, "multi"
    unless $I5001 goto if1647_else5125 
    set $S5002, "add_multi_method"
    goto if1647_end5126
  if1647_else5125:
    set $S5002, "add_method"
  if1647_end5126:
    box $P5012, $S5002
    set $P101, $P5012
    find_dynamic_lex $P5013, "$*MULTINESS"
    unless_null $P5013, fallback5130
    nqp_get_sc_object $P5016, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$MULTINESS"]
    unless_null $P5014, fallback5131
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5014, $P5017
  fallback5131:
    unless_null $P5014, vivi_16495132
    die "Contextual $*MULTINESS not found"
    box $P5018, "Contextual $*MULTINESS not found"
    set $P5014, $P5018
  vivi_16495132:
    set $P5013, $P5014
  fallback5130:
    set $S5003, $P5013
    iseq $I5002, $S5003, "proto"
    box $P5019, $I5002
    set $P102, $P5019
.annotate 'line', 2525
    find_dynamic_lex $P5020, "$*W"
    unless_null $P5020, fallback5133
    nqp_get_sc_object $P5023, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$W"]
    unless_null $P5021, fallback5134
    nqp_get_sc_object $P5024, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5021, $P5024
  fallback5134:
    unless_null $P5021, vivi_16505135
    die "Contextual $*W not found"
    box $P5025, "Contextual $*W not found"
    set $P5021, $P5025
  vivi_16505135:
    set $P5020, $P5021
  fallback5133:
    find_lex $P5026, "$past"
    find_lex $P5027, "$name"
    $P5028 = $P5020."create_code"($P5026, $P5027, $P102)
    set $P103, $P5028
    find_dynamic_lex $P5029, "$*MULTINESS"
    unless_null $P5029, fallback5138
    nqp_get_sc_object $P5032, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["$MULTINESS"]
    unless_null $P5030, fallback5139
    nqp_get_sc_object $P5033, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5030, $P5033
  fallback5139:
    unless_null $P5030, vivi_16525140
    die "Contextual $*MULTINESS not found"
    box $P5034, "Contextual $*MULTINESS not found"
    set $P5030, $P5034
  vivi_16525140:
    set $P5029, $P5030
  fallback5138:
    set $S5004, $P5029
    iseq $I5003, $S5004, "multi"
    unless $I5003 goto if1651_end5137 
.annotate 'line', 2526
    find_lex $P5035, "$past"
    $P5036 = "&attach_multi_signature"($P103, $P5035)
  if1651_end5137:
.annotate 'line', 2527
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback5141
    nqp_get_sc_object $P5040, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback5142
    nqp_get_sc_object $P5041, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5038, $P5041
  fallback5142:
    unless_null $P5038, vivi_16535143
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_16535143:
    set $P5037, $P5038
  fallback5141:
    find_dynamic_lex $P5043, "$*PACKAGE"
    unless_null $P5043, fallback5144
    nqp_get_sc_object $P5046, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$PACKAGE"]
    unless_null $P5044, fallback5145
    nqp_get_sc_object $P5047, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5044, $P5047
  fallback5145:
    unless_null $P5044, vivi_16545146
    die "Contextual $*PACKAGE not found"
    box $P5048, "Contextual $*PACKAGE not found"
    set $P5044, $P5048
  vivi_16545146:
    set $P5043, $P5044
  fallback5144:
    find_lex $P5049, "$name"
    $P5037."pkg_add_method"($P5043, $P101, $P5049, $P103)
    find_lex $P5050, "$past"
    set $P5050["code_obj"], $P103
    find_dynamic_lex $P5051, "$*SCOPE"
    unless_null $P5051, fallback5149
    nqp_get_sc_object $P5054, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5053, $P5054
    set $P5052, $P5053["$SCOPE"]
    unless_null $P5052, fallback5150
    nqp_get_sc_object $P5055, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5052, $P5055
  fallback5150:
    unless_null $P5052, vivi_16565151
    die "Contextual $*SCOPE not found"
    box $P5056, "Contextual $*SCOPE not found"
    set $P5052, $P5056
  vivi_16565151:
    set $P5051, $P5052
  fallback5149:
    set $S5005, $P5051
    iseq $I5004, $S5005, "our"
    unless $I5004 goto if1655_end5148 
.annotate 'line', 2531
.annotate 'line', 2532
    find_dynamic_lex $P5057, "$*W"
    unless_null $P5057, fallback5152
    nqp_get_sc_object $P5060, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["$W"]
    unless_null $P5058, fallback5153
    nqp_get_sc_object $P5061, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5058, $P5061
  fallback5153:
    unless_null $P5058, vivi_16575154
    die "Contextual $*W not found"
    box $P5062, "Contextual $*W not found"
    set $P5058, $P5062
  vivi_16575154:
    set $P5057, $P5058
  fallback5152:
    find_dynamic_lex $P5063, "$*PACKAGE"
    unless_null $P5063, fallback5155
    nqp_get_sc_object $P5066, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5065, $P5066
    set $P5064, $P5065["$PACKAGE"]
    unless_null $P5064, fallback5156
    nqp_get_sc_object $P5067, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5064, $P5067
  fallback5156:
    unless_null $P5064, vivi_16585157
    die "Contextual $*PACKAGE not found"
    box $P5068, "Contextual $*PACKAGE not found"
    set $P5064, $P5068
  vivi_16585157:
    set $P5063, $P5064
  fallback5155:
    find_lex $P5069, "$name"
    find_lex $P5070, "$past"
    $P5071 = $P5057."install_package_routine"($P5063, $P5069, $P5070)
  if1655_end5148:
    set $P5121, $P102
    unless $P102 goto if1659_end5159 
.annotate 'line', 2537
.annotate 'line', 2538
    find_lex $P5073, "$past"
    set $P5072, $P5073[0]
    unless_null $P5072, fallback5160
    nqp_get_sc_object $P5074, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5072, $P5074
  fallback5160:
    nqp_get_sc_object $P5078, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5077, $P5078, "QAST"
    get_who $P5076, $P5077
    set $P5075, $P5076["Op"]
    unless_null $P5075, fallback5161
    nqp_get_sc_object $P5079, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5075, $P5079
  fallback5161:
.annotate 'line', 2540
    nqp_get_sc_object $P5083, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["Var"]
    unless_null $P5080, fallback5162
    nqp_get_sc_object $P5084, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5080, $P5084
  fallback5162:
    $P5085 = $P5080."new"("CURRENT_DISPATCH_CAPTURE" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2541
    nqp_get_sc_object $P5089, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5088, $P5089, "QAST"
    get_who $P5087, $P5088
    set $P5086, $P5087["Op"]
    unless_null $P5086, fallback5163
    nqp_get_sc_object $P5090, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5086, $P5090
  fallback5163:
    $P5091 = $P5086."new"("savecapture" :named("op"))
    $P5092 = $P5075."new"($P5085, $P5091, "bind" :named("op"))
    $P5072."push"($P5092)
.annotate 'line', 2543
    find_lex $P5094, "$past"
    set $P5093, $P5094[0]
    unless_null $P5093, fallback5164
    nqp_get_sc_object $P5095, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5093, $P5095
  fallback5164:
    nqp_get_sc_object $P5099, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5098, $P5099, "QAST"
    get_who $P5097, $P5098
    set $P5096, $P5097["Op"]
    unless_null $P5096, fallback5165
    nqp_get_sc_object $P5100, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5096, $P5100
  fallback5165:
.annotate 'line', 2545
    nqp_get_sc_object $P5104, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5103, $P5104, "QAST"
    get_who $P5102, $P5103
    set $P5101, $P5102["Var"]
    unless_null $P5101, fallback5166
    nqp_get_sc_object $P5105, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5101, $P5105
  fallback5166:
    $P5106 = $P5101."new"("&*CURRENT_DISPATCHER" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2546
    nqp_get_sc_object $P5110, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5109, $P5110, "QAST"
    get_who $P5108, $P5109
    set $P5107, $P5108["Op"]
    unless_null $P5107, fallback5167
    nqp_get_sc_object $P5111, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5107, $P5111
  fallback5167:
    nqp_get_sc_object $P5115, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5114, $P5115, "QAST"
    get_who $P5113, $P5114
    set $P5112, $P5113["Op"]
    unless_null $P5112, fallback5168
    nqp_get_sc_object $P5116, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5112, $P5116
  fallback5168:
    $P5117 = $P5112."new"("curcode" :named("op"))
    $P5118 = $P5107."new"($P5117, "getcodeobj" :named("op"))
    $P5119 = $P5096."new"($P5106, $P5118, "bind" :named("op"))
    $P5120 = $P5093."push"($P5119)
    set $P5121, $P5120
  if1659_end5159:
    .return ($P5121) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_473_1360256386.79") :anon :lex :outer("cuid_305_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2558
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_306_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2610
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5025 = 'cuid_474_1360256386.79' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_475_1360256386.79' 
    capture_lex $P5025 
    .lex "$BLOCK", $P101 
    .lex "$BLOCKINIT", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
.annotate 'line', 2611
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback5180
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback5181
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5007
  fallback5181:
    unless_null $P5004, vivi_16615182
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_16615182:
    set $P5003, $P5004
  fallback5180:
    $P5009 = $P5003."cur_lexpad"()
    set $P101, $P5009
    set $P5010, $P101[0]
    unless_null $P5010, fallback5183
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5011
  fallback5183:
    set $P102, $P5010
    unless_null _lex_param_1, fallback5186
    nqp_get_sc_object $P5013, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5013
  fallback5186:
    set $P5012, _lex_param_1["invocant"]
    unless_null $P5012, fallback5187
    nqp_get_sc_object $P5014, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5012, $P5014
  fallback5187:
    unless $P5012 goto if1662_end5185 
    .const 'Sub' $P5015 = 'cuid_474_1360256386.79' 
    capture_lex $P5015
    $P5016 = $P5015()
  if1662_end5185:
    unless_null _lex_param_1, fallback5194
    nqp_get_sc_object $P5021, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5021
  fallback5194:
    set $P5020, _lex_param_1["parameter"]
    unless_null $P5020, fallback5195
    nqp_get_sc_object $P5022, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5020, $P5022
  fallback5195:
    set $P5017, $P5020
    iter $P5019, $P5020
  for_next5196:
    unless $P5019, for_done5198
    shift $P5024, $P5019
  for_redo5197:
    .const 'Sub' $P5023 = 'cuid_475_1360256386.79' 
    capture_lex $P5023
    $P5017 = $P5023($P5024)
    goto for_next5196
  for_done5198:
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_474_1360256386.79") :anon :lex :outer("cuid_306_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2613
    .lex "$inv", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 2614
    find_lex $P5004, "$/"
    unless_null $P5004, fallback5188
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5005
  fallback5188:
    set $P5003, $P5004["invocant"]
    unless_null $P5003, fallback5189
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5006
  fallback5189:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback5190
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5007
  fallback5190:
    $P5008 = $P5002."ast"()
    set $P101, $P5008
.annotate 'line', 2615
    find_lex $P5009, "$BLOCKINIT"
    $P5009."push"($P101)
.annotate 'line', 2616
    find_lex $P5010, "$BLOCKINIT"
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5191
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5015
  fallback5191:
.annotate 'line', 2618
    nqp_get_sc_object $P5019, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback5192
    nqp_get_sc_object $P5020, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5016, $P5020
  fallback5192:
    $P5021 = $P5016."new"("self" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2619
    nqp_get_sc_object $P5025, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Var"]
    unless_null $P5022, fallback5193
    nqp_get_sc_object $P5026, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5022, $P5026
  fallback5193:
    $P5027 = $P101."name"()
    $P5028 = $P5022."new"("lexical" :named("scope"), $P5027 :named("name"))
    $P5029 = $P5011."new"($P5021, $P5028, "bind" :named("op"))
    $P5010."push"($P5029)
    find_lex $P5030, "$BLOCK"
    box $P5031, 1
    set $P5030["signature_has_invocant"], $P5031
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_475_1360256386.79") :anon :lex :outer("cuid_306_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2623
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$BLOCKINIT"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_307_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2626
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5092 = 'cuid_477_1360256386.79' 
    capture_lex $P5092 
    .lex "$quant", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback5199
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5004
  fallback5199:
    set $P5003, _lex_param_1["quant"]
    unless_null $P5003, fallback5200
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5005
  fallback5200:
    set $P101, $P5003
    unless_null _lex_param_1, fallback5203
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5007
  fallback5203:
    set $P5006, _lex_param_1["named_param"]
    unless_null $P5006, fallback5204
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5008
  fallback5204:
    unless $P5006 goto if1663_else5201 
.annotate 'line', 2629
.annotate 'line', 2630
    unless_null _lex_param_1, fallback5205
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5010
  fallback5205:
    set $P5009, _lex_param_1["named_param"]
    unless_null $P5009, fallback5206
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5011
  fallback5206:
    $P5012 = $P5009."ast"()
    set $P102, $P5012
    set $S5001, $P101
    isne $I5001, $S5001, "!"
    box $P5023, $I5001
    set $P5022, $P5023
    unless $I5001 goto if1664_end5208 
.annotate 'line', 2631
.annotate 'line', 2632
    unless_null _lex_param_1, fallback5209
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5016
  fallback5209:
    set $P5015, _lex_param_1["named_param"]
    unless_null $P5015, fallback5210
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5015, $P5017
  fallback5210:
    set $P5014, $P5015["param_var"]
    unless_null $P5014, fallback5211
    nqp_get_sc_object $P5018, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5014, $P5018
  fallback5211:
    set $P5013, $P5014["sigil"]
    unless_null $P5013, fallback5212
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5013, $P5019
  fallback5212:
    $P5020 = "&default_for"($P5013)
    $P5021 = $P102."default"($P5020)
    set $P5022, $P5021
  if1664_end5208:
    goto if1663_end5202
  if1663_else5201:
.annotate 'line', 2635
.annotate 'line', 2636
    unless_null _lex_param_1, fallback5213
    nqp_get_sc_object $P5025, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5025
  fallback5213:
    set $P5024, _lex_param_1["param_var"]
    unless_null $P5024, fallback5214
    nqp_get_sc_object $P5026, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5024, $P5026
  fallback5214:
    $P5027 = $P5024."ast"()
    set $P102, $P5027
    set $S5002, $P101
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1665_else5215 
.annotate 'line', 2637
.annotate 'line', 2638
    $P102."slurpy"(1)
.annotate 'line', 2639
    unless_null _lex_param_1, fallback5217
    nqp_get_sc_object $P5030, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5030
  fallback5217:
    set $P5029, _lex_param_1["param_var"]
    unless_null $P5029, fallback5218
    nqp_get_sc_object $P5031, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5029, $P5031
  fallback5218:
    set $P5028, $P5029["sigil"]
    unless_null $P5028, fallback5219
    nqp_get_sc_object $P5032, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5028, $P5032
  fallback5219:
    set $S5003, $P5028
    iseq $I5003, $S5003, "%"
    $P5033 = $P102."named"($I5003)
    set $P5043, $P5033
    goto if1665_end5216
  if1665_else5215:
    set $S5004, $P101
    iseq $I5004, $S5004, "?"
    box $P5042, $I5004
    set $P5041, $P5042
    unless $I5004 goto if1666_end5221 
.annotate 'line', 2641
.annotate 'line', 2642
    unless_null _lex_param_1, fallback5222
    nqp_get_sc_object $P5036, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5036
  fallback5222:
    set $P5035, _lex_param_1["param_var"]
    unless_null $P5035, fallback5223
    nqp_get_sc_object $P5037, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5035, $P5037
  fallback5223:
    set $P5034, $P5035["sigil"]
    unless_null $P5034, fallback5224
    nqp_get_sc_object $P5038, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5034, $P5038
  fallback5224:
    $P5039 = "&default_for"($P5034)
    $P5040 = $P102."default"($P5039)
    set $P5041, $P5040
  if1666_end5221:
    set $P5043, $P5041
  if1665_end5216:
  if1663_end5202:
    unless_null _lex_param_1, fallback5227
    nqp_get_sc_object $P5045, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5045
  fallback5227:
    set $P5044, _lex_param_1["default_value"]
    unless_null $P5044, fallback5228
    nqp_get_sc_object $P5046, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5044, $P5046
  fallback5228:
    unless $P5044 goto if1667_end5226 
.annotate 'line', 2645
    set $S5005, $P101
    iseq $I5005, $S5005, "*"
    unless $I5005 goto if1668_end5230 
.annotate 'line', 2646
.annotate 'line', 2647
    $P5047 = _lex_param_1."CURSOR"()
    $P5048 = $P5047."panic"("Can't put default on slurpy parameter")
  if1668_end5230:
    set $S5006, $P101
    iseq $I5006, $S5006, "!"
    unless $I5006 goto if1669_end5232 
.annotate 'line', 2649
.annotate 'line', 2650
    $P5049 = _lex_param_1."CURSOR"()
    $P5050 = $P5049."panic"("Can't put default on required parameter")
  if1669_end5232:
.annotate 'line', 2652
    unless_null _lex_param_1, fallback5233
    nqp_get_sc_object $P5054, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5054
  fallback5233:
    set $P5053, _lex_param_1["default_value"]
    unless_null $P5053, fallback5234
    nqp_get_sc_object $P5055, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5053, $P5055
  fallback5234:
    set $P5052, $P5053[0]
    unless_null $P5052, fallback5235
    nqp_get_sc_object $P5056, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5052, $P5056
  fallback5235:
    set $P5051, $P5052["EXPR"]
    unless_null $P5051, fallback5236
    nqp_get_sc_object $P5057, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5051, $P5057
  fallback5236:
    $P5058 = $P5051."ast"()
    $P5059 = $P102."default"($P5058)
  if1667_end5226:
.annotate 'line', 2654
    $P5060 = $P102."default"()
    if $P5060 goto unless1670_end5238 
    find_dynamic_lex $P5061, "$*W"
    unless_null $P5061, fallback5239
    nqp_get_sc_object $P5064, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5063, $P5064
    set $P5062, $P5063["$W"]
    unless_null $P5062, fallback5240
    nqp_get_sc_object $P5065, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5062, $P5065
  fallback5240:
    unless_null $P5062, vivi_16715241
    die "Contextual $*W not found"
    box $P5066, "Contextual $*W not found"
    set $P5062, $P5066
  vivi_16715241:
    set $P5061, $P5062
  fallback5239:
    $P5067 = $P5061."cur_lexpad"()
    find_dynamic_lex $P5068, "$*W"
    unless_null $P5068, fallback5242
    nqp_get_sc_object $P5071, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5070, $P5071
    set $P5069, $P5070["$W"]
    unless_null $P5069, fallback5243
    nqp_get_sc_object $P5072, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5069, $P5072
  fallback5243:
    unless_null $P5069, vivi_16725244
    die "Contextual $*W not found"
    box $P5073, "Contextual $*W not found"
    set $P5069, $P5073
  vivi_16725244:
    set $P5068, $P5069
  fallback5242:
    $P5074 = $P5068."cur_lexpad"()
    $P5075 = $P5074."arity"()
    set $N5002, $P5075
    set $N5003, 1
    add $N5001, $N5002, $N5003
    $P5076 = $P5067."arity"($N5001)
  unless1670_end5238:
    unless_null _lex_param_1, fallback5247
    nqp_get_sc_object $P5078, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5078
  fallback5247:
    set $P5077, _lex_param_1["typename"]
    unless_null $P5077, fallback5248
    nqp_get_sc_object $P5079, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5077, $P5079
  fallback5248:
    unless $P5077 goto if1673_end5246 
    .const 'Sub' $P5080 = 'cuid_477_1360256386.79' 
    capture_lex $P5080
    $P5081 = $P5080()
  if1673_end5246:
    unless_null _lex_param_1, fallback5265
    nqp_get_sc_object $P5083, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5083
  fallback5265:
    set $P5082, _lex_param_1["definedness"]
    unless_null $P5082, fallback5266
    nqp_get_sc_object $P5084, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5082, $P5084
  fallback5266:
    unless $P5082 goto if1678_end5264 
.annotate 'line', 2669
    unless_null _lex_param_1, fallback5267
    nqp_get_sc_object $P5087, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5087
  fallback5267:
    set $P5086, _lex_param_1["definedness"]
    unless_null $P5086, fallback5268
    nqp_get_sc_object $P5088, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5086, $P5088
  fallback5268:
    set $P5085, $P5086[0]
    unless_null $P5085, fallback5269
    nqp_get_sc_object $P5089, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5085, $P5089
  fallback5269:
    set $S5007, $P5085
    box $P5090, $S5007
    set $P102["definedness"], $P5090
  if1678_end5264:
.annotate 'line', 2673
    $P5091 = _lex_param_1."!make"($P102)
    .return ($P5091) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_477_1360256386.79") :anon :lex :outer("cuid_307_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2657
    .const 'Sub' $P5015 = 'cuid_476_1360256386.79' 
    capture_lex $P5015 
    .lex "$type", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 2658
    find_lex $P5004, "$/"
    unless_null $P5004, fallback5249
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5005
  fallback5249:
    set $P5003, $P5004["typename"]
    unless_null $P5003, fallback5250
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5006
  fallback5250:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback5251
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5007
  fallback5251:
    $P5008 = $P5002."ast"()
    $P5009 = $P5008."value"()
    set $P101, $P5009
.annotate 'line', 2659
    find_lex $P5010, "$past"
    $P5010."returns"($P101)
    repr_get_primitive_type_spec $I5001, $P101
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto if1674_end5253 
    .const 'Sub' $P5011 = 'cuid_476_1360256386.79' 
    capture_lex $P5011
    $P5012 = $P5011($P5014)
    set $P5013, $P5012
  if1674_end5253:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_476_1360256386.79") :anon :lex :outer("cuid_477_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2660
    .param pmc _lex_param_0 
    .lex "$prim", _lex_param_0 
.annotate 'line', 2661
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5254
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5255
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5005
  fallback5255:
    unless_null $P5002, vivi_16755256
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16755256:
    set $P5001, $P5002
  fallback5254:
    $P5007 = $P5001."cur_lexpad"()
    find_lex $P5008, "$past"
    $P5009 = $P5008."name"()
    find_lex $P5010, "$type"
    $P5007."symbol"($P5009, $P5010 :named("type"))
.annotate 'line', 2662
    find_lex $P5011, "$past"
    $P5012 = $P5011."default"()
    set $P5017, $P5012
    unless $P5012 goto if1677_end5260 
    find_lex $P5014, "$/"
    unless_null $P5014, fallback5261
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5014, $P5015
  fallback5261:
    set $P5013, $P5014["default_value"]
    unless_null $P5013, fallback5262
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5013, $P5016
  fallback5262:
    isfalse $I5001, $P5013
    box $P5018, $I5001
    set $P5017, $P5018
  if1677_end5260:
    set $P5022, $P5017
    unless $P5017 goto if1676_end5258 
.annotate 'line', 2663
    find_lex $P5019, "$past"
    $P5020 = "&default_value_for_prim"(_lex_param_0)
    $P5021 = $P5019."default"($P5020)
    set $P5022, $P5021
  if1676_end5258:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_308_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2676
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    set $S5001, _lex_param_1
    box $P5003, $S5001
    set $P101, $P5003
.annotate 'line', 2678
    nqp_get_sc_object $P5007, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback5270
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5008
  fallback5270:
    $P5009 = $P5004."new"($P101 :named("name"), "lexical" :named("scope"), "param" :named("decl"), _lex_param_1 :named("node"))
    set $P102, $P5009
.annotate 'line', 2680
    find_dynamic_lex $P5010, "$*W"
    unless_null $P5010, fallback5271
    nqp_get_sc_object $P5013, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$W"]
    unless_null $P5011, fallback5272
    nqp_get_sc_object $P5014, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5014
  fallback5272:
    unless_null $P5011, vivi_16795273
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5011, $P5015
  vivi_16795273:
    set $P5010, $P5011
  fallback5271:
    $P5016 = $P5010."cur_lexpad"()
    $P5016."symbol"($P101, "lexical" :named("scope"))
.annotate 'line', 2681
    $P5017 = _lex_param_1."!make"($P102)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_309_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2684
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 2685
    unless_null _lex_param_1, fallback5274
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5003
  fallback5274:
    set $P5002, _lex_param_1["param_var"]
    unless_null $P5002, fallback5275
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5004
  fallback5275:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2686
    unless_null _lex_param_1, fallback5276
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5008
  fallback5276:
    set $P5007, _lex_param_1["param_var"]
    unless_null $P5007, fallback5277
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5009
  fallback5277:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback5278
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5010
  fallback5278:
    set $S5001, $P5006
    $P101."named"($S5001)
.annotate 'line', 2687
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_310_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2690
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5017 = 'cuid_478_1360256386.79' 
    capture_lex $P5017 
    .lex "@name", $P101 
    .lex "$found", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
.annotate 'line', 2694
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5005, $P5006, "HLL"
    get_who $P5004, $P5005
    set $P5003, $P5004["Compiler"]
    unless_null $P5003, fallback5279
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5007
  fallback5279:
    set $S5001, _lex_param_1
    $P5008 = $P5003."parse_name"($S5001)
    set $P101, $P5008
    box $P5009, 0
    set $P102, $P5009
    new $P5012, 'ExceptionHandler'
    set_label $P5012, catch_handler_16825285
    $P5012.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5012
    .const 'Sub' $P5010 = 'cuid_478_1360256386.79' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5013, $P5011
    pop_eh 
    goto skip_handler_16815284
  catch_handler_16825285:
    .get_results ($P5012) 
    set $I10001, 1
    set $P5012["handled"], $I10001
    nqp_get_sc_object $P10001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    finalize $P5012
    pop_upto_eh $P5012
    pop_eh 
    set $P5013, $P10001
    goto skip_handler_16815284
  skip_handler_16815284:
    set $P5016, $P102
    if $P102 goto unless1683_end5287 
.annotate 'line', 2701
.annotate 'line', 2702
    $P5014 = _lex_param_1."CURSOR"()
    set $S5004, _lex_param_1
    concat $S5003, "Use of undeclared type '", $S5004
    concat $S5002, $S5003, "'"
    $P5015 = $P5014."panic"($S5002)
    set $P5016, $P5015
  unless1683_end5287:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_478_1360256386.79") :anon :lex :outer("cuid_310_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2696
    .lex "$sym", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 2697
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback5280
    nqp_get_sc_object $P5005, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback5281
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5006
  fallback5281:
    unless_null $P5003, vivi_16805282
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_16805282:
    set $P5002, $P5003
  fallback5280:
    find_lex $P5008, "@name"
    $P5009 = $P5002."find_sym"($P5008)
    set $P101, $P5009
.annotate 'line', 2698
    find_dynamic_lex $P5010, "$/"
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["WVal"]
    unless_null $P5011, fallback5283
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5015
  fallback5283:
    $P5016 = $P5011."new"($P101 :named("value"))
    $P5010."!make"($P5016)
    box $P5017, 1
    store_lex "$found", $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_311_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2706
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2707
    unless_null _lex_param_1, fallback5288
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback5288:
    set $P5001, _lex_param_1["trait_mod"]
    unless_null $P5001, fallback5289
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback5289:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_312_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2710
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5025 = 'cuid_480_1360256386.79' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_482_1360256386.79' 
    capture_lex $P5025 
    .const 'Sub' $P5025 = 'cuid_483_1360256386.79' 
    capture_lex $P5025 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5292
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback5292:
    set $P5001, _lex_param_1["longname"]
    unless_null $P5001, fallback5293
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback5293:
    set $S5001, $P5001
    iseq $I5001, $S5001, "parrot_vtable"
    unless $I5001 goto if1684_else5290 
    .const 'Sub' $P5004 = 'cuid_480_1360256386.79' 
    capture_lex $P5004
    $P5005 = $P5004()
    set $P5024, $P5005
    goto if1684_end5291
  if1684_else5290:
    unless_null _lex_param_1, fallback5317
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5007
  fallback5317:
    set $P5006, _lex_param_1["longname"]
    unless_null $P5006, fallback5318
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5008
  fallback5318:
    set $S5002, $P5006
    iseq $I5002, $S5002, "parrot_vtable_handler"
    unless $I5002 goto if1690_else5315 
    .const 'Sub' $P5009 = 'cuid_482_1360256386.79' 
    capture_lex $P5009
    $P5010 = $P5009()
    set $P5023, $P5010
    goto if1690_end5316
  if1690_else5315:
    unless_null _lex_param_1, fallback5334
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5012
  fallback5334:
    set $P5011, _lex_param_1["longname"]
    unless_null $P5011, fallback5335
    nqp_get_sc_object $P5013, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5013
  fallback5335:
    set $S5003, $P5011
    iseq $I5003, $S5003, "export"
    unless $I5003 goto if1694_else5332 
.annotate 'line', 2736
.annotate 'line', 2737
    .const 'Sub' $P5015 = 'cuid_483_1360256386.79' 
    capture_lex $P5015
    newclosure $P5014, $P5015
    $P5016 = _lex_param_1."!make"($P5014)
    set $P5022, $P5016
    goto if1694_end5333
  if1694_else5332:
.annotate 'line', 2744
.annotate 'line', 2745
    $P5017 = _lex_param_1."CURSOR"()
    unless_null _lex_param_1, fallback5347
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5019
  fallback5347:
    set $P5018, _lex_param_1["longname"]
    unless_null $P5018, fallback5348
    nqp_get_sc_object $P5020, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5018, $P5020
  fallback5348:
    set $S5006, $P5018
    concat $S5005, "Trait '", $S5006
    concat $S5004, $S5005, "' not implemented"
    $P5021 = $P5017."panic"($S5004)
    set $P5022, $P5021
  if1694_end5333:
    set $P5023, $P5022
  if1690_end5316:
    set $P5024, $P5023
  if1684_end5291:
    .return ($P5024) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_480_1360256386.79") :anon :lex :outer("cuid_312_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2711
    .const 'Sub' $P5039 = 'cuid_479_1360256386.79' 
    capture_lex $P5039 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    .lex "$is_dispatcher", $P104 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P103, $P5003
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P104, $P5004
.annotate 'line', 2713
    find_lex $P5007, "$/"
    unless_null $P5007, fallback5294
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5008
  fallback5294:
    set $P5006, $P5007["circumfix"]
    unless_null $P5006, fallback5295
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5009
  fallback5295:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5296
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5005, $P5010
  fallback5296:
    $P5011 = $P5005."ast"()
    set $P101, $P5011
.annotate 'line', 2715
    nqp_get_sc_object $P5015, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["SVal"]
    unless_null $P5012, fallback5299
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5012, $P5016
  fallback5299:
    $P5017 = $P5012."ACCEPTS"($P101)
    if $P5017 goto unless1685_end5298 
.annotate 'line', 2714
    find_lex $P5018, "$/"
    $P5019 = $P5018."CURSOR"()
    $P5020 = $P5019."panic"("Trait 'parrot_vtable' requires constant scalar argument")
  unless1685_end5298:
.annotate 'line', 2716
    $P5021 = $P101."value"()
    set $P102, $P5021
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback5300
    nqp_get_sc_object $P5025, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback5301
    nqp_get_sc_object $P5026, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5023, $P5026
  fallback5301:
    unless_null $P5023, vivi_16865302
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_16865302:
    set $P5022, $P5023
  fallback5300:
    set $P103, $P5022
    find_dynamic_lex $P5028, "$*SCOPE"
    unless_null $P5028, fallback5303
    nqp_get_sc_object $P5031, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["$SCOPE"]
    unless_null $P5029, fallback5304
    nqp_get_sc_object $P5032, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5029, $P5032
  fallback5304:
    unless_null $P5029, vivi_16875305
    die "Contextual $*SCOPE not found"
    box $P5033, "Contextual $*SCOPE not found"
    set $P5029, $P5033
  vivi_16875305:
    set $P5028, $P5029
  fallback5303:
    set $S5001, $P5028
    iseq $I5001, $S5001, "proto"
    box $P5034, $I5001
    set $P104, $P5034
.annotate 'line', 2719
    find_dynamic_lex $P5035, "$/"
    .const 'Sub' $P5037 = 'cuid_479_1360256386.79' 
    capture_lex $P5037
    newclosure $P5036, $P5037
    $P5038 = $P5035."!make"($P5036)
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_479_1360256386.79") :anon :lex :outer("cuid_480_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2719
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2720
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5306
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5307
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5005
  fallback5307:
    unless_null $P5002, vivi_16885308
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16885308:
    set $P5001, $P5002
  fallback5306:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
.annotate 'line', 2721
    $P5011 = _lex_param_0."ast"()
    set $P5010, $P5011["code_obj"]
    unless_null $P5010, fallback5310
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5012
  fallback5310:
    set $P5009, $P5010
    defined $I5001, $P5009
    if $I5001, defor5309
.annotate 'line', 2722
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback5311
    nqp_get_sc_object $P5016, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback5312
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5014, $P5017
  fallback5312:
    unless_null $P5014, vivi_16895313
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_16895313:
    set $P5013, $P5014
  fallback5311:
    $P5020 = _lex_param_0."ast"()
    set $P5019, $P5020["block_past"]
    unless_null $P5019, fallback5314
    nqp_get_sc_object $P5021, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5019, $P5021
  fallback5314:
    find_lex $P5022, "$name"
    find_lex $P5023, "$is_dispatcher"
    $P5024 = $P5013."create_code"($P5019, $P5022, $P5023)
    set $P5009, $P5024
  defor5309:
    $P5025 = $P5001."pkg_add_method"($P5007, "add_parrot_vtable_mapping", $P5008, $P5009)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_482_1360256386.79") :anon :lex :outer("cuid_312_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2725
    .const 'Sub' $P5031 = 'cuid_481_1360256386.79' 
    capture_lex $P5031 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P103, $P5003
.annotate 'line', 2727
    find_lex $P5006, "$/"
    unless_null $P5006, fallback5319
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5007
  fallback5319:
    set $P5005, $P5006["circumfix"]
    unless_null $P5005, fallback5320
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5005, $P5008
  fallback5320:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback5321
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5009
  fallback5321:
    $P5010 = $P5004."ast"()
    set $P101, $P5010
.annotate 'line', 2729
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5324
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5015
  fallback5324:
    $P5016 = $P5011."ACCEPTS"($P101)
    if $P5016 goto unless1691_end5323 
.annotate 'line', 2728
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    $P5019 = $P5018."panic"("Trait 'parrot_vtable_handler' requires constant scalar argument")
  unless1691_end5323:
.annotate 'line', 2730
    $P5020 = $P101."value"()
    set $P102, $P5020
    find_dynamic_lex $P5021, "$*PACKAGE"
    unless_null $P5021, fallback5325
    nqp_get_sc_object $P5024, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["$PACKAGE"]
    unless_null $P5022, fallback5326
    nqp_get_sc_object $P5025, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5022, $P5025
  fallback5326:
    unless_null $P5022, vivi_16925327
    die "Contextual $*PACKAGE not found"
    box $P5026, "Contextual $*PACKAGE not found"
    set $P5022, $P5026
  vivi_16925327:
    set $P5021, $P5022
  fallback5325:
    set $P103, $P5021
.annotate 'line', 2732
    find_dynamic_lex $P5027, "$/"
    .const 'Sub' $P5029 = 'cuid_481_1360256386.79' 
    capture_lex $P5029
    newclosure $P5028, $P5029
    $P5030 = $P5027."!make"($P5028)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_481_1360256386.79") :anon :lex :outer("cuid_482_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2732
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2733
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5328
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5329
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5005
  fallback5329:
    unless_null $P5002, vivi_16935330
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_16935330:
    set $P5001, $P5002
  fallback5328:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
    set $P5009, _lex_param_0["variable"]
    unless_null $P5009, fallback5331
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5010
  fallback5331:
    set $S5001, $P5009
    $P5011 = $P5001."pkg_add_parrot_vtable_handler_mapping"($P5007, $P5008, $S5001)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_483_1360256386.79") :anon :lex :outer("cuid_312_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2737
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$name", $P102 
    .lex "$match", _lex_param_0 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
.annotate 'line', 2738
    $P5003 = _lex_param_0."ast"()
    set $P101, $P5003
.annotate 'line', 2739
    set $P5004, $P101["block_past"]
    unless_null $P5004, fallback5336
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5005
  fallback5336:
    $P5006 = $P5004."name"()
    set $P102, $P5006
    find_dynamic_lex $P5010, "$*EXPORT"
    unless_null $P5010, fallback5337
    nqp_get_sc_object $P5013, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$EXPORT"]
    unless_null $P5011, fallback5338
    nqp_get_sc_object $P5014, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5014
  fallback5338:
    unless_null $P5011, vivi_16955339
    die "Contextual $*EXPORT not found"
    box $P5015, "Contextual $*EXPORT not found"
    set $P5011, $P5015
  vivi_16955339:
    set $P5010, $P5011
  fallback5337:
    get_who $P5009, $P5010
    set $P5008, $P5009["DEFAULT"]
    unless_null $P5008, fallback5340
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5016
  fallback5340:
    get_who $P5007, $P5008
    set $S5002, $P102
    concat $S5001, "&", $S5002
    set $P5018, $P101["code_obj"]
    unless_null $P5018, fallback5342
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5018, $P5019
  fallback5342:
    set $P5017, $P5018
    defined $I5001, $P5017
    if $I5001, defor5341
.annotate 'line', 2741
    find_dynamic_lex $P5020, "$*W"
    unless_null $P5020, fallback5343
    nqp_get_sc_object $P5023, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$W"]
    unless_null $P5021, fallback5344
    nqp_get_sc_object $P5024, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5021, $P5024
  fallback5344:
    unless_null $P5021, vivi_16965345
    die "Contextual $*W not found"
    box $P5025, "Contextual $*W not found"
    set $P5021, $P5025
  vivi_16965345:
    set $P5020, $P5021
  fallback5343:
    set $P5026, $P101["block_past"]
    unless_null $P5026, fallback5346
    nqp_get_sc_object $P5027, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5026, $P5027
  fallback5346:
    $P5028 = $P5020."create_code"($P5026, $P102, 0)
    set $P5017, $P5028
  defor5341:
    set $P5007[$S5001], $P5017
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_313_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2749
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_5 :opt_flag 
    .const 'Sub' $P5074 = 'cuid_485_1360256386.79' 
    capture_lex $P5074 
    if haz_param_5, default5429
    nqp_get_sc_object $P5073, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_2, $P5073
  default5429:
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback5351
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5004
  fallback5351:
    set $P5003, _lex_param_1["deflongname"]
    unless_null $P5003, fallback5352
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5005
  fallback5352:
    unless $P5003 goto if1697_else5349 
.annotate 'line', 2751
.annotate 'line', 2752
    unless_null _lex_param_1, fallback5353
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5007
  fallback5353:
    set $P5006, _lex_param_1["deflongname"]
    unless_null $P5006, fallback5354
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5008
  fallback5354:
    $P5009 = $P5006."ast"()
    set $S5001, $P5009
    box $P5010, $S5001
    set $P101, $P5010
    goto if1697_end5350
  if1697_else5349:
.annotate 'line', 2754
    find_dynamic_lex $P5011, "$*PKGDECL"
    unless_null $P5011, fallback5357
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$PKGDECL"]
    unless_null $P5012, fallback5358
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5012, $P5015
  fallback5358:
    unless_null $P5012, vivi_16995359
    die "Contextual $*PKGDECL not found"
    box $P5016, "Contextual $*PKGDECL not found"
    set $P5012, $P5016
  vivi_16995359:
    set $P5011, $P5012
  fallback5357:
    set $S5002, $P5011
    isne $I5001, $S5002, "role"
    unless $I5001 goto if1698_end5356 
.annotate 'line', 2755
.annotate 'line', 2756
    $P5017 = _lex_param_1."CURSOR"()
    $P5018 = $P5017."panic"("Late-bound method name only valid in role")
  if1698_end5356:
    unless_null _lex_param_1, fallback5360
    nqp_get_sc_object $P5020, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5020
  fallback5360:
    set $P5019, _lex_param_1["latename"]
    unless_null $P5019, fallback5361
    nqp_get_sc_object $P5021, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5019, $P5021
  fallback5361:
    set $S5004, $P5019
    concat $S5003, "!!LATENAME!!", $S5004
    box $P5022, $S5003
    set $P101, $P5022
  if1697_end5350:
    unless_null _lex_param_1, fallback5364
    nqp_get_sc_object $P5024, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5024
  fallback5364:
    set $P5023, _lex_param_1["proto"]
    unless_null $P5023, fallback5365
    nqp_get_sc_object $P5025, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5023, $P5025
  fallback5365:
    unless $P5023 goto if1700_else5362 
.annotate 'line', 2761
.annotate 'line', 2762
    nqp_get_sc_object $P5029, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Block"]
    unless_null $P5026, fallback5366
    nqp_get_sc_object $P5030, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5026, $P5030
  fallback5366:
.annotate 'line', 2764
    nqp_get_sc_object $P5034, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Op"]
    unless_null $P5031, fallback5367
    nqp_get_sc_object $P5035, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5031, $P5035
  fallback5367:
.annotate 'line', 2765
    nqp_get_sc_object $P5039, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Var"]
    unless_null $P5036, fallback5368
    nqp_get_sc_object $P5040, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5036, $P5040
  fallback5368:
    $P5041 = $P5036."new"("self" :named("name"), "local" :named("scope"), "param" :named("decl"))
.annotate 'line', 2766
    nqp_get_sc_object $P5045, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["SVal"]
    unless_null $P5042, fallback5369
    nqp_get_sc_object $P5046, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5042, $P5046
  fallback5369:
    $P5047 = $P5042."new"($P101 :named("value"))
    $P5048 = $P5031."new"($P5041, $P5047, "!protoregex" :named("name"), "callmethod" :named("op"))
    $P5049 = $P5026."new"($P5048, $P101 :named("name"), "declaration" :named("blocktype"), _lex_param_1 :named("node"))
    set $P102, $P5049
.annotate 'line', 2773
    find_dynamic_lex $P5050, "$*W"
    unless_null $P5050, fallback5370
    nqp_get_sc_object $P5053, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5052, $P5053
    set $P5051, $P5052["$W"]
    unless_null $P5051, fallback5371
    nqp_get_sc_object $P5054, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5051, $P5054
  fallback5371:
    unless_null $P5051, vivi_17015372
    die "Contextual $*W not found"
    box $P5055, "Contextual $*W not found"
    set $P5051, $P5055
  vivi_17015372:
    set $P5050, $P5051
  fallback5370:
    find_dynamic_lex $P5056, "$*PACKAGE"
    unless_null $P5056, fallback5373
    nqp_get_sc_object $P5059, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["$PACKAGE"]
    unless_null $P5057, fallback5374
    nqp_get_sc_object $P5060, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5057, $P5060
  fallback5374:
    unless_null $P5057, vivi_17025375
    die "Contextual $*PACKAGE not found"
    box $P5061, "Contextual $*PACKAGE not found"
    set $P5057, $P5061
  vivi_17025375:
    set $P5056, $P5057
  fallback5373:
.annotate 'line', 2774
    find_dynamic_lex $P5062, "$*W"
    unless_null $P5062, fallback5376
    nqp_get_sc_object $P5065, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$W"]
    unless_null $P5063, fallback5377
    nqp_get_sc_object $P5066, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5063, $P5066
  fallback5377:
    unless_null $P5063, vivi_17035378
    die "Contextual $*W not found"
    box $P5067, "Contextual $*W not found"
    set $P5063, $P5067
  vivi_17035378:
    set $P5062, $P5063
  fallback5376:
    $P5068 = $P5062."create_code"($P102, $P101, 0, "NQPRegex" :named("code_type_name"))
    $P5069 = $P5050."pkg_add_method"($P5056, "add_method", $P101, $P5068)
    goto if1700_end5363
  if1700_else5362:
    .const 'Sub' $P5070 = 'cuid_485_1360256386.79' 
    capture_lex $P5070
    $P5071 = $P5070()
  if1700_end5363:
.annotate 'line', 2813
    $P5072 = _lex_param_1."!make"($P102)
    .return ($P5072) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_485_1360256386.79") :anon :lex :outer("cuid_313_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2776
    .const 'Sub' $P5130 = 'cuid_484_1360256386.79' 
    capture_lex $P5130 
    .lex "$block", $P101 
    .lex "$code", $P102 
    .lex "$regex", $P103 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P103, $P5003
.annotate 'line', 2777
    find_dynamic_lex $P5004, "$*W"
    unless_null $P5004, fallback5379
    nqp_get_sc_object $P5007, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$W"]
    unless_null $P5005, fallback5380
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5005, $P5008
  fallback5380:
    unless_null $P5005, vivi_17045381
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5005, $P5009
  vivi_17045381:
    set $P5004, $P5005
  fallback5379:
    $P5010 = $P5004."pop_lexpad"()
    set $P101, $P5010
.annotate 'line', 2778
    set $P5011, $P101[0]
    unless_null $P5011, fallback5382
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5012
  fallback5382:
    nqp_get_sc_object $P5016, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback5383
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5013, $P5017
  fallback5383:
    $P5018 = $P5013."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5011."unshift"($P5018)
.annotate 'line', 2779
    set $P5019, $P101[0]
    unless_null $P5019, fallback5384
    nqp_get_sc_object $P5020, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5019, $P5020
  fallback5384:
    nqp_get_sc_object $P5024, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5385
    nqp_get_sc_object $P5025, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5021, $P5025
  fallback5385:
.annotate 'line', 2781
    nqp_get_sc_object $P5029, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5386
    nqp_get_sc_object $P5030, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5026, $P5030
  fallback5386:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2782
    nqp_get_sc_object $P5035, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback5387
    nqp_get_sc_object $P5036, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5032, $P5036
  fallback5387:
    $P5037 = $P5032."new"("self" :named("name"), "lexical" :named("scope"))
    $P5038 = $P5021."new"($P5031, $P5037, "bind" :named("op"))
    $P5019."push"($P5038)
.annotate 'line', 2783
    set $P5039, $P101[0]
    unless_null $P5039, fallback5388
    nqp_get_sc_object $P5040, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5039, $P5040
  fallback5388:
    nqp_get_sc_object $P5044, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback5389
    nqp_get_sc_object $P5045, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5041, $P5045
  fallback5389:
    $P5046 = $P5041."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5039."push"($P5046)
.annotate 'line', 2784
    set $P5047, $P101[0]
    unless_null $P5047, fallback5390
    nqp_get_sc_object $P5048, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5047, $P5048
  fallback5390:
    nqp_get_sc_object $P5052, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Var"]
    unless_null $P5049, fallback5391
    nqp_get_sc_object $P5053, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5049, $P5053
  fallback5391:
    $P5054 = $P5049."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5047."push"($P5054)
.annotate 'line', 2785
    $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2786
    $P101."symbol"("$/", "lexical" :named("scope"))
    find_dynamic_lex $P5056, "%*RX"
    unless_null $P5056, fallback5392
    nqp_get_sc_object $P5059, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["%RX"]
    unless_null $P5057, fallback5393
    nqp_get_sc_object $P5061, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5060, $P5061
    new $P5062, 'Hash'
    set $P5060["%RX"], $P5062
    set $P5057, $P5062
  fallback5393:
    unless_null $P5057, vivi_17055394
    die "Contextual %*RX not found"
    box $P5063, "Contextual %*RX not found"
    set $P5057, $P5063
  vivi_17055394:
    set $P5056, $P5057
  fallback5392:
    set $P5055, $P5056["code"]
    unless_null $P5055, fallback5395
    nqp_get_sc_object $P5064, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5055, $P5064
  fallback5395:
    set $P102, $P5055
.annotate 'line', 2788
    find_dynamic_lex $P5066, "%*LANG"
    unless_null $P5066, fallback5396
    nqp_get_sc_object $P5069, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["%LANG"]
    unless_null $P5067, fallback5397
    nqp_get_sc_object $P5071, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5070, $P5071
    new $P5072, 'Hash'
    set $P5070["%LANG"], $P5072
    set $P5067, $P5072
  fallback5397:
    unless_null $P5067, vivi_17065398
    die "Contextual %*LANG not found"
    box $P5073, "Contextual %*LANG not found"
    set $P5067, $P5073
  vivi_17065398:
    set $P5066, $P5067
  fallback5396:
    set $P5065, $P5066["Regex-actions"]
    unless_null $P5065, fallback5399
    nqp_get_sc_object $P5074, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5065, $P5074
  fallback5399:
    find_lex $P5076, "$/"
    unless_null $P5076, fallback5400
    nqp_get_sc_object $P5077, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5076, $P5077
  fallback5400:
    set $P5075, $P5076["p6regex"]
    unless_null $P5075, fallback5401
    nqp_get_sc_object $P5078, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5075, $P5078
  fallback5401:
    $P5079 = $P5075."ast"()
    $P5080 = $P5065."qbuildsub"($P5079, $P101, $P102 :named("code_obj"))
    set $P103, $P5080
.annotate 'line', 2789
    find_lex $P5081, "$name"
    $P103."name"($P5081)
    find_dynamic_lex $P5082, "$*PKGDECL"
    unless_null $P5082, fallback5406
    nqp_get_sc_object $P5085, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["$PKGDECL"]
    unless_null $P5083, fallback5407
    nqp_get_sc_object $P5086, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5083, $P5086
  fallback5407:
    unless_null $P5083, vivi_17095408
    die "Contextual $*PKGDECL not found"
    box $P5087, "Contextual $*PKGDECL not found"
    set $P5083, $P5087
  vivi_17095408:
    set $P5082, $P5083
  fallback5406:
    set $P5095, $P5082
    unless $P5082 goto if1708_end5405 
    find_dynamic_lex $P5089, "$*PACKAGE"
    unless_null $P5089, fallback5409
    nqp_get_sc_object $P5092, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5091, $P5092
    set $P5090, $P5091["$PACKAGE"]
    unless_null $P5090, fallback5410
    nqp_get_sc_object $P5093, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5090, $P5093
  fallback5410:
    unless_null $P5090, vivi_17105411
    die "Contextual $*PACKAGE not found"
    box $P5094, "Contextual $*PACKAGE not found"
    set $P5090, $P5094
  vivi_17105411:
    set $P5089, $P5090
  fallback5409:
    get_how $P5088, $P5089
    can $I5001, $P5088, "add_method"
    box $P5096, $I5001
    set $P5095, $P5096
  if1708_end5405:
    unless $P5095 goto if1707_end5403 
.annotate 'line', 2791
.annotate 'line', 2793
    find_dynamic_lex $P5097, "$*W"
    unless_null $P5097, fallback5412
    nqp_get_sc_object $P5100, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5099, $P5100
    set $P5098, $P5099["$W"]
    unless_null $P5098, fallback5413
    nqp_get_sc_object $P5101, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5098, $P5101
  fallback5413:
    unless_null $P5098, vivi_17115414
    die "Contextual $*W not found"
    box $P5102, "Contextual $*W not found"
    set $P5098, $P5102
  vivi_17115414:
    set $P5097, $P5098
  fallback5412:
    find_dynamic_lex $P5103, "$*PACKAGE"
    unless_null $P5103, fallback5415
    nqp_get_sc_object $P5106, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5105, $P5106
    set $P5104, $P5105["$PACKAGE"]
    unless_null $P5104, fallback5416
    nqp_get_sc_object $P5107, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5104, $P5107
  fallback5416:
    unless_null $P5104, vivi_17125417
    die "Contextual $*PACKAGE not found"
    box $P5108, "Contextual $*PACKAGE not found"
    set $P5104, $P5108
  vivi_17125417:
    set $P5103, $P5104
  fallback5415:
    find_lex $P5109, "$name"
    $P5110 = $P5097."pkg_add_method"($P5103, "add_method", $P5109, $P102)
  if1707_end5403:
    find_dynamic_lex $P5111, "$*PKGDECL"
    unless_null $P5111, fallback5420
    nqp_get_sc_object $P5114, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5113, $P5114
    set $P5112, $P5113["$PKGDECL"]
    unless_null $P5112, fallback5421
    nqp_get_sc_object $P5115, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5112, $P5115
  fallback5421:
    unless_null $P5112, vivi_17145422
    die "Contextual $*PKGDECL not found"
    box $P5116, "Contextual $*PKGDECL not found"
    set $P5112, $P5116
  vivi_17145422:
    set $P5111, $P5112
  fallback5420:
    set $S5001, $P5111
    iseq $I5002, $S5001, "role"
    unless $I5002 goto if1713_end5419 
    .const 'Sub' $P5117 = 'cuid_484_1360256386.79' 
    capture_lex $P5117
    $P5118 = $P5117()
  if1713_end5419:
.annotate 'line', 2807
    nqp_get_sc_object $P5122, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5121, $P5122, "QAST"
    get_who $P5120, $P5121
    set $P5119, $P5120["Op"]
    unless_null $P5119, fallback5428
    nqp_get_sc_object $P5123, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5119, $P5123
  fallback5428:
.annotate 'line', 2809
    new $P5124, 'ResizablePMCArray'
    box $P5125, "NQPRegexMethod"
    push $P5124, $P5125
    find_lex $P5126, "$/"
    $P5127 = "&lexical_package_lookup"($P5124, $P5126)
    $P5128 = $P5119."new"($P5127, $P103, "callmethod" :named("op"), "new" :named("name"))
    store_lex "$past", $P5128
    find_lex $P5129, "$past"
    set $P5129["sink"], $P103
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_484_1360256386.79") :anon :lex :outer("cuid_485_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2798
    .lex "$gen_nfa", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 2799
    nqp_get_sc_object $P5005, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5004, $P5005, "QRegex"
    get_who $P5003, $P5004
    set $P5002, $P5003["NFA"]
    unless_null $P5002, fallback5423
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5006
  fallback5423:
    $P5007 = $P5002."new"()
    set $P101, $P5007
.annotate 'line', 2800
    find_lex $P5009, "$/"
    unless_null $P5009, fallback5424
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5010
  fallback5424:
    set $P5008, $P5009["p6regex"]
    unless_null $P5008, fallback5425
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5011
  fallback5425:
    $P5012 = $P5008."ast"()
    $P101."addnode"($P5012, 1 :named("vars_as_generic"))
.annotate 'line', 2801
    $P5013 = $P101."generic"()
    set $P5016, $P5013
    unless $P5013 goto if1715_end5427 
.annotate 'line', 2802
    find_lex $P5014, "$code"
    $P5015 = $P5014."SET_GENERIC_NFA"($P101)
    set $P5016, $P5015
  if1715_end5427:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_314_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2817
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    unless_null _lex_param_1, fallback5432
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5003
  fallback5432:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5433
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5004
  fallback5433:
    unless $P5002 goto if1716_else5430 
.annotate 'line', 2818
    unless_null _lex_param_1, fallback5434
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5007
  fallback5434:
    set $P5006, _lex_param_1["args"]
    unless_null $P5006, fallback5435
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5008
  fallback5435:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5436
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5005, $P5009
  fallback5436:
    $P5010 = $P5005."ast"()
    set $P5017, $P5010
    goto if1716_end5431
  if1716_else5430:
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5437
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5015
  fallback5437:
    $P5016 = $P5011."new"(_lex_param_1 :named("node"))
    set $P5017, $P5016
  if1716_end5431:
    set $P101, $P5017
    unless_null _lex_param_1, fallback5440
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5019
  fallback5440:
    set $P5018, _lex_param_1["quote"]
    unless_null $P5018, fallback5441
    nqp_get_sc_object $P5020, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5018, $P5020
  fallback5441:
    unless $P5018 goto if1717_else5438 
.annotate 'line', 2819
.annotate 'line', 2820
    unless_null _lex_param_1, fallback5442
    nqp_get_sc_object $P5022, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5022
  fallback5442:
    set $P5021, _lex_param_1["quote"]
    unless_null $P5021, fallback5443
    nqp_get_sc_object $P5023, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5021, $P5023
  fallback5443:
    $P5024 = $P5021."ast"()
    $P101."unshift"($P5024)
.annotate 'line', 2821
    $P5025 = $P101."op"("callmethod")
    goto if1717_end5439
  if1717_else5438:
    unless_null _lex_param_1, fallback5446
    nqp_get_sc_object $P5027, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5027
  fallback5446:
    set $P5026, _lex_param_1["longname"]
    unless_null $P5026, fallback5447
    nqp_get_sc_object $P5028, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5026, $P5028
  fallback5447:
    set $S5001, $P5026
    iseq $I5001, $S5001, "HOW"
    unless $I5001 goto if1718_else5444 
.annotate 'line', 2823
.annotate 'line', 2824
    $P5029 = $P101."op"("how")
    set $P5049, $P5029
    goto if1718_end5445
  if1718_else5444:
    unless_null _lex_param_1, fallback5450
    nqp_get_sc_object $P5031, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5031
  fallback5450:
    set $P5030, _lex_param_1["longname"]
    unless_null $P5030, fallback5451
    nqp_get_sc_object $P5032, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5030, $P5032
  fallback5451:
    set $S5002, $P5030
    iseq $I5002, $S5002, "WHAT"
    unless $I5002 goto if1719_else5448 
.annotate 'line', 2826
.annotate 'line', 2827
    $P5033 = $P101."op"("what")
    set $P5048, $P5033
    goto if1719_end5449
  if1719_else5448:
    unless_null _lex_param_1, fallback5454
    nqp_get_sc_object $P5035, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5035
  fallback5454:
    set $P5034, _lex_param_1["longname"]
    unless_null $P5034, fallback5455
    nqp_get_sc_object $P5036, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5034, $P5036
  fallback5455:
    set $S5003, $P5034
    iseq $I5003, $S5003, "WHO"
    unless $I5003 goto if1720_else5452 
.annotate 'line', 2829
.annotate 'line', 2830
    $P5037 = $P101."op"("who")
    set $P5047, $P5037
    goto if1720_end5453
  if1720_else5452:
    unless_null _lex_param_1, fallback5458
    nqp_get_sc_object $P5039, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5039
  fallback5458:
    set $P5038, _lex_param_1["longname"]
    unless_null $P5038, fallback5459
    nqp_get_sc_object $P5040, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5038, $P5040
  fallback5459:
    set $S5004, $P5038
    iseq $I5004, $S5004, "REPR"
    unless $I5004 goto if1721_else5456 
.annotate 'line', 2832
.annotate 'line', 2833
    $P5041 = $P101."op"("reprname")
    set $P5046, $P5041
    goto if1721_end5457
  if1721_else5456:
.annotate 'line', 2835
.annotate 'line', 2836
    unless_null _lex_param_1, fallback5460
    nqp_get_sc_object $P5043, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5043
  fallback5460:
    set $P5042, _lex_param_1["longname"]
    unless_null $P5042, fallback5461
    nqp_get_sc_object $P5044, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5042, $P5044
  fallback5461:
    set $S5005, $P5042
    $P101."name"($S5005)
.annotate 'line', 2837
    $P5045 = $P101."op"("callmethod")
    set $P5046, $P5045
  if1721_end5457:
    set $P5047, $P5046
  if1720_end5453:
    set $P5048, $P5047
  if1719_end5449:
    set $P5049, $P5048
  if1718_end5445:
  if1717_end5439:
.annotate 'line', 2839
    $P5050 = _lex_param_1."!make"($P101)
    .return ($P5050) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_315_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2844
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2845
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5462
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback5462:
.annotate 'line', 2846
    nqp_get_sc_object $P5009, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5463
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5010
  fallback5463:
    $P5011 = $P5006."new"("self" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "decont" :named("op"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_316_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2849
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 2850
    unless_null _lex_param_1, fallback5464
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5003
  fallback5464:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5465
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5004
  fallback5465:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2851
    unless_null _lex_param_1, fallback5466
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5007
  fallback5466:
    set $P5006, _lex_param_1["deflongname"]
    unless_null $P5006, fallback5467
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5008
  fallback5467:
    set $S5002, $P5006
    concat $S5001, "&", $S5002
    $P101."name"($S5001)
.annotate 'line', 2852
    $P5009 = _lex_param_1."!make"($P101)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_317_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2855
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5049 = 'cuid_486_1360256386.79' 
    capture_lex $P5049 
    .const 'Sub' $P5049 = 'cuid_487_1360256386.79' 
    capture_lex $P5049 
    .lex "$var", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
.annotate 'line', 2858
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback5470
    nqp_get_sc_object $P5006, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback5471
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5007
  fallback5471:
    unless_null $P5004, vivi_17235472
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_17235472:
    set $P5003, $P5004
  fallback5470:
    unless_null _lex_param_1, fallback5473
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5010
  fallback5473:
    set $P5009, _lex_param_1["name"]
    unless_null $P5009, fallback5474
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5011
  fallback5474:
    set $S5001, $P5009
    $P5012 = $P5003."is_lexical"($S5001)
    unless $P5012 goto if1722_else5468 
    new $P5034, 'ExceptionHandler'
    set_label $P5034, catch_handler_17285487
    $P5034.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5034
.annotate 'line', 2859
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_17265482
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 2860
    nqp_get_sc_object $P5016, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["WVal"]
    unless_null $P5013, fallback5475
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5013, $P5017
  fallback5475:
    find_dynamic_lex $P5018, "$*W"
    unless_null $P5018, fallback5476
    nqp_get_sc_object $P5021, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$W"]
    unless_null $P5019, fallback5477
    nqp_get_sc_object $P5022, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5019, $P5022
  fallback5477:
    unless_null $P5019, vivi_17245478
    die "Contextual $*W not found"
    box $P5023, "Contextual $*W not found"
    set $P5019, $P5023
  vivi_17245478:
    set $P5018, $P5019
  fallback5476:
    new $P5024, 'ResizablePMCArray'
    unless_null _lex_param_1, fallback5479
    nqp_get_sc_object $P5026, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5026
  fallback5479:
    set $P5025, _lex_param_1["name"]
    unless_null $P5025, fallback5480
    nqp_get_sc_object $P5027, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5025, $P5027
  fallback5480:
    set $S5002, $P5025
    box $P5028, $S5002
    push $P5024, $P5028
    $P5029 = $P5018."find_sym"($P5024)
    $P5030 = $P5013."new"($P5029 :named("value"))
    set $P101, $P5030
    nqp_get_sc_object $P5031, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_17255481
  catch_handler_17265482:
    .get_results ($P5032) 
    .const 'Sub' $P10001 = 'cuid_486_1360256386.79' 
    capture_lex $P10001
    $P10001($P5032)
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10002
    goto skip_handler_17255481
  skip_handler_17255481:
    set $P5035, $P5033
    pop_eh 
    goto skip_handler_17275486
  catch_handler_17285487:
    .get_results ($P5034) 
    set $I10001, 1
    set $P5034["handled"], $I10001
    nqp_get_sc_object $P10001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    finalize $P5034
    pop_upto_eh $P5034
    pop_eh 
    set $P5035, $P10001
    goto skip_handler_17275486
  skip_handler_17275486:
    goto if1722_end5469
  if1722_else5468:
    .const 'Sub' $P5036 = 'cuid_487_1360256386.79' 
    capture_lex $P5036
    $P5037 = $P5036()
  if1722_end5469:
    set $P102, $P101
    unless_null _lex_param_1, fallback5493
    nqp_get_sc_object $P5039, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5039
  fallback5493:
    set $P5038, _lex_param_1["args"]
    unless_null $P5038, fallback5494
    nqp_get_sc_object $P5040, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5038, $P5040
  fallback5494:
    unless $P5038 goto if1729_end5492 
.annotate 'line', 2873
.annotate 'line', 2874
    unless_null _lex_param_1, fallback5495
    nqp_get_sc_object $P5043, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5043
  fallback5495:
    set $P5042, _lex_param_1["args"]
    unless_null $P5042, fallback5496
    nqp_get_sc_object $P5044, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5042, $P5044
  fallback5496:
    set $P5041, $P5042[0]
    unless_null $P5041, fallback5497
    nqp_get_sc_object $P5045, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5041, $P5045
  fallback5497:
    $P5046 = $P5041."ast"()
    set $P102, $P5046
.annotate 'line', 2875
    $P5047 = $P102."unshift"($P101)
  if1729_end5492:
.annotate 'line', 2877
    $P5048 = _lex_param_1."!make"($P102)
    .return ($P5048) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_486_1360256386.79") :anon :lex :outer("cuid_317_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2861
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 2862
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback5483
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback5483:
    find_lex $P5007, "$/"
    unless_null $P5007, fallback5484
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5008
  fallback5484:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback5485
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5009
  fallback5485:
    set $S5001, $P5006
    $P5010 = $P5001."new"($S5001 :named("name"), "lexical" :named("scope"))
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_487_1360256386.79") :anon :lex :outer("cuid_317_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2866
    .lex "@ns", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5005, "$/"
    unless_null $P5005, fallback5488
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5005, $P5006
  fallback5488:
    set $P5004, $P5005["name"]
    unless_null $P5004, fallback5489
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5007
  fallback5489:
    set $P5003, $P5004["identifier"]
    unless_null $P5003, fallback5490
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5008
  fallback5490:
    repr_clone $P5002, $P5003
    set $P101, $P5002
.annotate 'line', 2868
    find_lex $P5009, "$/"
    $P5010 = "&lexical_package_lookup"($P101, $P5009)
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_318_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2880
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@args", $P101 
    .lex "$pirop", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback5500
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5004
  fallback5500:
    set $P5003, _lex_param_1["args"]
    unless_null $P5003, fallback5501
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5005
  fallback5501:
    unless $P5003 goto if1730_else5498 
.annotate 'line', 2881
    unless_null _lex_param_1, fallback5502
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5008
  fallback5502:
    set $P5007, _lex_param_1["args"]
    unless_null $P5007, fallback5503
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5009
  fallback5503:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback5504
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5010
  fallback5504:
    $P5011 = $P5006."ast"()
    $P5012 = $P5011."list"()
    set $P5014, $P5012
    goto if1730_end5499
  if1730_else5498:
    new $P5013, 'ResizablePMCArray'
    set $P5014, $P5013
  if1730_end5499:
    set $P101, $P5014
    unless_null _lex_param_1, fallback5505
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5016
  fallback5505:
    set $P5015, _lex_param_1["op"]
    unless_null $P5015, fallback5506
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5015, $P5017
  fallback5506:
    set $S5001, $P5015
    box $P5018, $S5001
    set $P102, $P5018
    set $S5003, $P102
    split $P5019, "__", $S5003
    join $S5002, " ", $P5019
    box $P5020, $S5002
    set $P102, $P5020
.annotate 'line', 2884
    nqp_get_sc_object $P5024, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["VM"]
    unless_null $P5021, fallback5507
    nqp_get_sc_object $P5025, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5021, $P5025
  fallback5507:
    $P5026 = $P5021."new"($P101 :flat, $P102 :named("pirop"), _lex_param_1 :named("node"))
    $P5027 = _lex_param_1."!make"($P5026)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_319_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2887
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2888
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5508
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback5508:
    unless_null _lex_param_1, fallback5509
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5007
  fallback5509:
    set $P5006, _lex_param_1["const"]
    unless_null $P5006, fallback5510
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5008
  fallback5510:
    set $S5001, $P5006
    $P5009 = $P5001."new"($S5001 :named("pirconst"))
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_320_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2891
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "@args", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P103, $P5003
    unless_null _lex_param_1, fallback5511
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5005
  fallback5511:
    set $P5004, _lex_param_1["op"]
    unless_null $P5004, fallback5512
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5006
  fallback5512:
    set $S5001, $P5004
    box $P5007, $S5001
    set $P101, $P5007
    unless_null _lex_param_1, fallback5515
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5009
  fallback5515:
    set $P5008, _lex_param_1["args"]
    unless_null $P5008, fallback5516
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5010
  fallback5516:
    unless $P5008 goto if1731_else5513 
.annotate 'line', 2893
    unless_null _lex_param_1, fallback5517
    nqp_get_sc_object $P5013, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5013
  fallback5517:
    set $P5012, _lex_param_1["args"]
    unless_null $P5012, fallback5518
    nqp_get_sc_object $P5014, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5012, $P5014
  fallback5518:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback5519
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5015
  fallback5519:
    $P5016 = $P5011."ast"()
    $P5017 = $P5016."list"()
    set $P5019, $P5017
    goto if1731_end5514
  if1731_else5513:
    new $P5018, 'ResizablePMCArray'
    set $P5019, $P5018
  if1731_end5514:
    set $P102, $P5019
.annotate 'line', 2894
    nqp_get_sc_object $P5023, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback5520
    nqp_get_sc_object $P5024, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5020, $P5024
  fallback5520:
    $P5025 = $P5020."new"($P102 :flat, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P103, $P5025
.annotate 'line', 2895
    $P5026 = _lex_param_1."!make"($P103)
    .return ($P5026) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_321_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2898
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$dc_name", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 2899
    nqp_get_sc_object $P5005, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Node"]
    unless_null $P5002, fallback5521
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5006
  fallback5521:
    $P5007 = $P5002."unique"("dispatch_cap")
    set $P101, $P5007
.annotate 'line', 2900
    nqp_get_sc_object $P5011, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["Stmts"]
    unless_null $P5008, fallback5522
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5012
  fallback5522:
.annotate 'line', 2901
    nqp_get_sc_object $P5016, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Op"]
    unless_null $P5013, fallback5523
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5013, $P5017
  fallback5523:
.annotate 'line', 2903
    nqp_get_sc_object $P5021, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["Var"]
    unless_null $P5018, fallback5524
    nqp_get_sc_object $P5022, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5018, $P5022
  fallback5524:
    $P5023 = $P5018."new"($P101 :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2904
    nqp_get_sc_object $P5027, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Var"]
    unless_null $P5024, fallback5525
    nqp_get_sc_object $P5028, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5024, $P5028
  fallback5525:
    $P5029 = $P5024."new"("CURRENT_DISPATCH_CAPTURE" :named("name"), "lexical" :named("scope"))
    $P5030 = $P5013."new"($P5023, $P5029, "bind" :named("op"))
.annotate 'line', 2906
    nqp_get_sc_object $P5034, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Op"]
    unless_null $P5031, fallback5526
    nqp_get_sc_object $P5035, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5031, $P5035
  fallback5526:
.annotate 'line', 2908
    nqp_get_sc_object $P5039, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback5527
    nqp_get_sc_object $P5040, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5036, $P5040
  fallback5527:
.annotate 'line', 2910
    nqp_get_sc_object $P5044, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Op"]
    unless_null $P5041, fallback5528
    nqp_get_sc_object $P5045, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5041, $P5045
  fallback5528:
.annotate 'line', 2912
    nqp_get_sc_object $P5049, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["Var"]
    unless_null $P5046, fallback5529
    nqp_get_sc_object $P5050, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5046, $P5050
  fallback5529:
.annotate 'line', 2914
    nqp_get_sc_object $P5054, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5053, $P5054, "QAST"
    get_who $P5052, $P5053
    set $P5051, $P5052["Var"]
    unless_null $P5051, fallback5530
    nqp_get_sc_object $P5055, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5051, $P5055
  fallback5530:
    $P5056 = $P5051."new"("&*CURRENT_DISPATCHER" :named("name"), "lexical" :named("scope"))
.annotate 'line', 2915
    nqp_get_sc_object $P5060, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5059, $P5060, "QAST"
    get_who $P5058, $P5059
    set $P5057, $P5058["WVal"]
    unless_null $P5057, fallback5531
    nqp_get_sc_object $P5061, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5057, $P5061
  fallback5531:
    find_dynamic_lex $P5062, "$*W"
    unless_null $P5062, fallback5532
    nqp_get_sc_object $P5065, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5064, $P5065
    set $P5063, $P5064["$W"]
    unless_null $P5063, fallback5533
    nqp_get_sc_object $P5066, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5063, $P5066
  fallback5533:
    unless_null $P5063, vivi_17325534
    die "Contextual $*W not found"
    box $P5067, "Contextual $*W not found"
    set $P5063, $P5067
  vivi_17325534:
    set $P5062, $P5063
  fallback5532:
    new $P5068, 'ResizablePMCArray'
    box $P5069, "NQPRoutine"
    push $P5068, $P5069
    $P5070 = $P5062."find_sym"($P5068)
    $P5071 = $P5057."new"($P5070 :named("value"))
    $P5072 = $P5046."new"($P5056, $P5071, "$!dispatch_cache" :named("name"), "attribute" :named("scope"))
.annotate 'line', 2917
    nqp_get_sc_object $P5076, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5075, $P5076, "QAST"
    get_who $P5074, $P5075
    set $P5073, $P5074["Var"]
    unless_null $P5073, fallback5535
    nqp_get_sc_object $P5077, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5073, $P5077
  fallback5535:
    $P5078 = $P5073."new"($P101 :named("name"), "local" :named("scope"))
    $P5079 = $P5041."new"($P5072, $P5078, "multicachefind" :named("op"))
.annotate 'line', 2919
    nqp_get_sc_object $P5083, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["Op"]
    unless_null $P5080, fallback5536
    nqp_get_sc_object $P5084, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5080, $P5084
  fallback5536:
.annotate 'line', 2921
    nqp_get_sc_object $P5088, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5087, $P5088, "QAST"
    get_who $P5086, $P5087
    set $P5085, $P5086["Var"]
    unless_null $P5085, fallback5537
    nqp_get_sc_object $P5089, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5085, $P5089
  fallback5537:
    $P5090 = $P5085."new"("&*CURRENT_DISPATCHER" :named("name"), "lexical" :named("scope"))
.annotate 'line', 2922
    nqp_get_sc_object $P5094, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5093, $P5094, "QAST"
    get_who $P5092, $P5093
    set $P5091, $P5092["Var"]
    unless_null $P5091, fallback5538
    nqp_get_sc_object $P5095, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5091, $P5095
  fallback5538:
    $P5096 = $P5091."new"($P101 :named("name"), "local" :named("scope"))
    $P5097 = $P5080."new"($P5090, $P5096, "callmethod" :named("op"), "dispatch" :named("name"))
    $P5098 = $P5036."new"($P5079, $P5097, "ifnull" :named("op"))
.annotate 'line', 2925
    nqp_get_sc_object $P5102, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5101, $P5102, "QAST"
    get_who $P5100, $P5101
    set $P5099, $P5100["Var"]
    unless_null $P5099, fallback5539
    nqp_get_sc_object $P5103, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5099, $P5103
  fallback5539:
    $P5104 = $P5099."new"($P101 :named("name"), "local" :named("scope"))
    $P5105 = $P5031."new"($P5098, $P5104, "invokewithcapture" :named("op"))
    $P5106 = $P5008."new"($P5030, $P5105)
    $P5107 = _lex_param_1."!make"($P5106)
    .return ($P5107) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_322_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2929
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5540
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback5540:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5541
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback5541:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_323_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2931
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5052 = 'cuid_489_1360256386.79' 
    capture_lex $P5052 
    .lex "$past", $P101 
    .lex "$i", $P102 
    .lex "$n", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc tmp_2 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P103, $P5003
.annotate 'line', 2932
    nqp_get_sc_object $P5007, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Op"]
    unless_null $P5004, fallback5542
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5008
  fallback5542:
    $P5009 = $P5004."new"("call" :named("op"), _lex_param_1 :named("node"))
    set $P101, $P5009
    unless_null _lex_param_1, fallback5545
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5011
  fallback5545:
    set $P5010, _lex_param_1["EXPR"]
    unless_null $P5010, fallback5546
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5012
  fallback5546:
    unless $P5010 goto if1733_end5544 
    .const 'Sub' $P5013 = 'cuid_489_1360256386.79' 
    capture_lex $P5013
    $P5014 = $P5013()
  if1733_end5544:
    box $P5015, 0
    set $P102, $P5015
.annotate 'line', 2941
    $P5016 = $P101."list"()
    set $N5001, $P5016
    box $P5017, $N5001
    set $P103, $P5017
  while1737_test5559:
    set $N5002, $P102
    set $N5003, $P103
    islt $I5001, $N5002, $N5003
    box $P5050, $I5001
    set $P5049, $P5050
    unless $I5001 goto while1737_done5563 
  while1737_redo5561:
.annotate 'line', 2942
    set $I5003, $P102
    set $P5018, $P101[$I5003]
    unless_null $P5018, fallback5568
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5018, $P5019
  fallback5568:
    nqp_get_sc_object $P5023, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback5569
    nqp_get_sc_object $P5024, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5020, $P5024
  fallback5569:
    type_check $I5002, $P5018, $P5020
    set $I5006, $I5002
    unless $I5002 goto if1739_end5567 
.annotate 'line', 2943
    set $I5005, $P102
    set $P5025, $P101[$I5005]
    unless_null $P5025, fallback5570
    nqp_get_sc_object $P5026, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5025, $P5026
  fallback5570:
    $P5027 = $P5025."name"()
    set $S5001, $P5027
    iseq $I5004, $S5001, "&prefix:<|>"
    set $I5006, $I5004
  if1739_end5567:
    unless $I5006 goto if1738_end5565 
    set $I5007, $P102
    set $I5008, $P102
    set $P5029, $P101[$I5008]
    unless_null $P5029, fallback5571
    nqp_get_sc_object $P5030, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5029, $P5030
  fallback5571:
    set $P5028, $P5029[0]
    unless_null $P5028, fallback5572
    nqp_get_sc_object $P5031, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5028, $P5031
  fallback5572:
    set $P101[$I5007], $P5028
.annotate 'line', 2945
    set $I5009, $P102
    set $P5032, $P101[$I5009]
    unless_null $P5032, fallback5573
    nqp_get_sc_object $P5033, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5032, $P5033
  fallback5573:
    $P5032."flat"(1)
    set $I5011, $P102
    set $P5034, $P101[$I5011]
    unless_null $P5034, fallback5578
    nqp_get_sc_object $P5035, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5034, $P5035
  fallback5578:
    nqp_get_sc_object $P5039, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Var"]
    unless_null $P5036, fallback5579
    nqp_get_sc_object $P5040, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5036, $P5040
  fallback5579:
    type_check $I5010, $P5034, $P5036
    set $I5014, $I5010
    unless $I5010 goto if1741_end5577 
.annotate 'line', 2947
    set $I5013, $P102
    set $P5041, $P101[$I5013]
    unless_null $P5041, fallback5580
    nqp_get_sc_object $P5042, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5041, $P5042
  fallback5580:
    $P5043 = $P5041."name"()
    set $S5003, $P5043
    substr $S5002, $S5003, 0, 1
    iseq $I5012, $S5002, "%"
    set $I5014, $I5012
  if1741_end5577:
    box $P5048, $I5014
    set $P5047, $P5048
    unless $I5014 goto if1740_end5575 
.annotate 'line', 2946
    set $I5015, $P102
    set $P5044, $P101[$I5015]
    unless_null $P5044, fallback5581
    nqp_get_sc_object $P5045, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5044, $P5045
  fallback5581:
    $P5046 = $P5044."named"(1)
    set $P5047, $P5046
  if1740_end5575:
  if1738_end5565:
    set tmp_2, $P102
    set $N5005, tmp_2
    set $N5006, 1
    add $N5004, $N5005, $N5006
    box $P5049, $N5004
    set $P102, $P5049
    set $P5049, tmp_2
    goto while1737_test5559 
  while1737_done5563:
.annotate 'line', 2951
    $P5051 = _lex_param_1."!make"($P101)
    .return ($P5051) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_489_1360256386.79") :anon :lex :outer("cuid_323_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2933
    .const 'Sub' $P5023 = 'cuid_488_1360256386.79' 
    capture_lex $P5023 
    .lex "$expr", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 2934
    find_lex $P5003, "$/"
    unless_null $P5003, fallback5547
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5004
  fallback5547:
    set $P5002, $P5003["EXPR"]
    unless_null $P5002, fallback5548
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5005
  fallback5548:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    nqp_get_sc_object $P5010, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback5555
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5011
  fallback5555:
    type_check $I5001, $P101, $P5007
    set $I5003, $I5001
    unless $I5001 goto if1736_end5554 
.annotate 'line', 2935
    $P5012 = $P101."name"()
    set $S5001, $P5012
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1736_end5554:
    set $I5005, $I5003
    unless $I5003 goto if1735_end5552 
    $P5013 = $P101."named"()
    isfalse $I5004, $P5013
    set $I5005, $I5004
  if1735_end5552:
    unless $I5005 goto if1734_else5549 
.annotate 'line', 2936
    $P5017 = $P101."list"()
    set $P5014, $P5017
    iter $P5016, $P5017
  for_next5556:
    unless $P5016, for_done5558
    shift $P5019, $P5016
  for_redo5557:
    .const 'Sub' $P5018 = 'cuid_488_1360256386.79' 
    capture_lex $P5018
    $P5014 = $P5018($P5019)
    goto for_next5556
  for_done5558:
    set $P5022, $P5014
    goto if1734_end5550
  if1734_else5549:
.annotate 'line', 2938
    find_lex $P5020, "$past"
    $P5021 = $P5020."push"($P101)
    set $P5022, $P5021
  if1734_end5550:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_488_1360256386.79") :anon :lex :outer("cuid_489_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2936
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$past"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_324_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2954
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5582
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback5582:
    set $P5001, _lex_param_1["multi_declarator"]
    unless_null $P5001, fallback5583
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback5583:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_325_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2956
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5584
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback5584:
    set $P5001, _lex_param_1["value"]
    unless_null $P5001, fallback5585
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback5585:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_326_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2958
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2959
    unless_null _lex_param_1, fallback5588
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback5588:
    set $P5001, _lex_param_1["EXPR"]
    unless_null $P5001, fallback5589
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback5589:
    unless $P5001 goto if1742_else5586 
.annotate 'line', 2960
    unless_null _lex_param_1, fallback5590
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5006
  fallback5590:
    set $P5005, _lex_param_1["EXPR"]
    unless_null $P5005, fallback5591
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5005, $P5007
  fallback5591:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback5592
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5008
  fallback5592:
    $P5009 = $P5004."ast"()
    set $P5016, $P5009
    goto if1742_end5587
  if1742_else5586:
.annotate 'line', 2961
    nqp_get_sc_object $P5013, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback5593
    nqp_get_sc_object $P5014, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5014
  fallback5593:
    $P5015 = $P5010."new"("list" :named("op"), _lex_param_1 :named("node"))
    set $P5016, $P5015
  if1742_end5587:
    $P5017 = _lex_param_1."!make"($P5016)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_327_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2964
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    unless_null _lex_param_1, fallback5596
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5003
  fallback5596:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback5597
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5004
  fallback5597:
    unless $P5002 goto if1743_else5594 
.annotate 'line', 2966
.annotate 'line', 2967
    unless_null _lex_param_1, fallback5598
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5007
  fallback5598:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5599
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5008
  fallback5599:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5600
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5005, $P5009
  fallback5600:
    $P5010 = $P5005."ast"()
    set $P101, $P5010
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5605
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5015
  fallback5605:
    type_check $I5001, $P101, $P5011
    set $I5003, $I5001
    unless $I5001 goto if1745_end5604 
.annotate 'line', 2968
    $P5016 = $P101."name"()
    set $S5001, $P5016
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1745_end5604:
    box $P5024, $I5003
    set $P5023, $P5024
    if $I5003 goto unless1744_end5602 
.annotate 'line', 2969
    nqp_get_sc_object $P5020, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback5606
    nqp_get_sc_object $P5021, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5017, $P5021
  fallback5606:
    $P5022 = $P5017."new"($P101, "list" :named("op"))
    set $P101, $P5022
    set $P5023, $P101
  unless1744_end5602:
    goto if1743_end5595
  if1743_else5594:
.annotate 'line', 2972
.annotate 'line', 2973
    nqp_get_sc_object $P5028, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Op"]
    unless_null $P5025, fallback5607
    nqp_get_sc_object $P5029, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5025, $P5029
  fallback5607:
    $P5030 = $P5025."new"("list" :named("op"))
    set $P101, $P5030
  if1743_end5595:
.annotate 'line', 2975
    $P101."name"("&circumfix:<[ ]>")
.annotate 'line', 2976
    $P5031 = _lex_param_1."!make"($P101)
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_328_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2979
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5608
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback5608:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5609
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback5609:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_329_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2980
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5610
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback5610:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5611
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback5611:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_330_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2982
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5028 = 'cuid_490_1360256386.79' 
    capture_lex $P5028 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5614
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5005
  fallback5614:
    set $P5004, _lex_param_1["pblock"]
    unless_null $P5004, fallback5615
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5006
  fallback5615:
    set $P5003, $P5004["blockoid"]
    unless_null $P5003, fallback5616
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5007
  fallback5616:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback5617
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5008
  fallback5617:
    set $P5001, $P5002["statement"]
    unless_null $P5001, fallback5618
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5009
  fallback5618:
    set $N5001, $P5001
    set $N5002, 0
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1746_else5612 
    .const 'Sub' $P5010 = 'cuid_490_1360256386.79' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5027, $P5011
    goto if1746_end5613
  if1746_else5612:
    unless_null _lex_param_1, fallback5624
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5015
  fallback5624:
    set $P5014, _lex_param_1["pblock"]
    unless_null $P5014, fallback5625
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5014, $P5016
  fallback5625:
    set $P5013, $P5014["blockoid"]
    unless_null $P5013, fallback5626
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5013, $P5017
  fallback5626:
    set $P5012, $P5013["you_are_here"]
    unless_null $P5012, fallback5627
    nqp_get_sc_object $P5018, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5012, $P5018
  fallback5627:
    unless $P5012 goto if1747_else5622 
.annotate 'line', 2988
.annotate 'line', 2989
    unless_null _lex_param_1, fallback5628
    nqp_get_sc_object $P5020, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5020
  fallback5628:
    set $P5019, _lex_param_1["pblock"]
    unless_null $P5019, fallback5629
    nqp_get_sc_object $P5021, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5019, $P5021
  fallback5629:
    $P5022 = $P5019."ast"()
    $P5023 = _lex_param_1."!make"($P5022)
    set $P5026, $P5023
    goto if1747_end5623
  if1747_else5622:
.annotate 'line', 2991
.annotate 'line', 2992
    $P5024 = "&default_for"("%")
    $P5025 = _lex_param_1."!make"($P5024)
    set $P5026, $P5025
  if1747_end5623:
    set $P5027, $P5026
  if1746_end5613:
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_490_1360256386.79") :anon :lex :outer("cuid_330_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2983
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 2984
    nqp_get_sc_object $P5005, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback5619
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5006
  fallback5619:
    find_lex $P5008, "$/"
    unless_null $P5008, fallback5620
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5009
  fallback5620:
    set $P5007, $P5008["pblock"]
    unless_null $P5007, fallback5621
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5010
  fallback5621:
    $P5011 = $P5007."ast"()
    $P5012 = $P5002."new"($P5011, "takeclosure" :named("op"))
    set $P101, $P5012
    box $P5013, 1
    set $P101["bareblock"], $P5013
.annotate 'line', 2986
    find_dynamic_lex $P5014, "$/"
    $P5015 = $P5014."!make"($P101)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_331_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2996
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5630
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback5630:
    set $P5001, _lex_param_1["statement"]
    unless_null $P5001, fallback5631
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback5631:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_332_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2998
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2999
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5632
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback5632:
    unless_null _lex_param_1, fallback5633
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5007
  fallback5633:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5634
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5008
  fallback5634:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "positional" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_333_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3002
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3003
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5635
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback5635:
    unless_null _lex_param_1, fallback5636
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5007
  fallback5636:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5637
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5008
  fallback5637:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_334_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3006
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3007
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5638
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback5638:
    unless_null _lex_param_1, fallback5639
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5007
  fallback5639:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5640
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5008
  fallback5640:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_335_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3010
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3011
    unless_null _lex_param_1, fallback5641
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback5641:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5642
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback5642:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_336_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3014
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3015
    unless_null _lex_param_1, fallback5645
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback5645:
    set $P5001, _lex_param_1["quote"]
    unless_null $P5001, fallback5646
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback5646:
    unless $P5001 goto if1748_else5643 
    unless_null _lex_param_1, fallback5647
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5005
  fallback5647:
    set $P5004, _lex_param_1["quote"]
    unless_null $P5004, fallback5648
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5004, $P5006
  fallback5648:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1748_end5644
  if1748_else5643:
    unless_null _lex_param_1, fallback5649
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5009
  fallback5649:
    set $P5008, _lex_param_1["number"]
    unless_null $P5008, fallback5650
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5008, $P5010
  fallback5650:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1748_end5644:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_337_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3018
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$value", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    unless_null _lex_param_1, fallback5653
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5003
  fallback5653:
    set $P5002, _lex_param_1["dec_number"]
    unless_null $P5002, fallback5654
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5004
  fallback5654:
    unless $P5002 goto if1749_else5651 
.annotate 'line', 3019
    unless_null _lex_param_1, fallback5655
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5006
  fallback5655:
    set $P5005, _lex_param_1["dec_number"]
    unless_null $P5005, fallback5656
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5005, $P5007
  fallback5656:
    $P5008 = $P5005."ast"()
    set $P5013, $P5008
    goto if1749_end5652
  if1749_else5651:
    unless_null _lex_param_1, fallback5657
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5010
  fallback5657:
    set $P5009, _lex_param_1["integer"]
    unless_null $P5009, fallback5658
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5009, $P5011
  fallback5658:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1749_end5652:
    set $P101, $P5013
    unless_null _lex_param_1, fallback5661
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5015
  fallback5661:
    set $P5014, _lex_param_1["sign"]
    unless_null $P5014, fallback5662
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5014, $P5016
  fallback5662:
    set $S5001, $P5014
    iseq $I5001, $S5001, "-"
    unless $I5001 goto if1750_end5660 
.annotate 'line', 3020
    set $N5002, $P101
    neg $N5001, $N5002
    box $P5017, $N5001
    set $P101, $P5017
  if1750_end5660:
.annotate 'line', 3021
    unless_null _lex_param_1, fallback5665
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5019
  fallback5665:
    set $P5018, _lex_param_1["dec_number"]
    unless_null $P5018, fallback5666
    nqp_get_sc_object $P5020, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5018, $P5020
  fallback5666:
    unless $P5018 goto if1751_else5663 
.annotate 'line', 3022
    nqp_get_sc_object $P5024, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["NVal"]
    unless_null $P5021, fallback5667
    nqp_get_sc_object $P5025, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5021, $P5025
  fallback5667:
    $P5026 = $P5021."new"($P101 :named("value"))
    set $P5033, $P5026
    goto if1751_end5664
  if1751_else5663:
.annotate 'line', 3023
    nqp_get_sc_object $P5030, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["IVal"]
    unless_null $P5027, fallback5668
    nqp_get_sc_object $P5031, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5027, $P5031
  fallback5668:
    $P5032 = $P5027."new"($P101 :named("value"))
    set $P5033, $P5032
  if1751_end5664:
    $P5034 = _lex_param_1."!make"($P5033)
    .return ($P5034) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_338_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3026
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5669
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback5669:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5670
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback5670:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_339_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3027
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5671
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback5671:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5672
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback5672:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_340_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3028
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5673
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback5673:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5674
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback5674:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_341_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3029
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5675
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback5675:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5676
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback5676:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_342_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3030
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5677
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback5677:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5678
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback5678:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_343_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3031
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3032
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5679
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback5679:
    unless_null _lex_param_1, fallback5680
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5007
  fallback5680:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5681
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5008
  fallback5681:
    $P5009 = $P5006."ast"()
    $P5010 = $P5009."value"()
    $P5011 = $P5001."new"($P5010 :named("pir"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_344_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3035
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$regex", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P103, $P5003
.annotate 'line', 3036
    find_dynamic_lex $P5004, "$*W"
    unless_null $P5004, fallback5682
    nqp_get_sc_object $P5007, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$W"]
    unless_null $P5005, fallback5683
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5005, $P5008
  fallback5683:
    unless_null $P5005, vivi_17525684
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5005, $P5009
  vivi_17525684:
    set $P5004, $P5005
  fallback5682:
    $P5010 = $P5004."pop_lexpad"()
    set $P101, $P5010
.annotate 'line', 3037
    set $P5011, $P101[0]
    unless_null $P5011, fallback5685
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5012
  fallback5685:
    nqp_get_sc_object $P5016, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback5686
    nqp_get_sc_object $P5017, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5013, $P5017
  fallback5686:
    $P5018 = $P5013."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5011."push"($P5018)
.annotate 'line', 3038
    set $P5019, $P101[0]
    unless_null $P5019, fallback5687
    nqp_get_sc_object $P5020, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5019, $P5020
  fallback5687:
    nqp_get_sc_object $P5024, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5688
    nqp_get_sc_object $P5025, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5021, $P5025
  fallback5688:
.annotate 'line', 3040
    nqp_get_sc_object $P5029, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5689
    nqp_get_sc_object $P5030, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5026, $P5030
  fallback5689:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 3041
    nqp_get_sc_object $P5035, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback5690
    nqp_get_sc_object $P5036, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5032, $P5036
  fallback5690:
    $P5037 = $P5032."new"("self" :named("name"), "lexical" :named("scope"))
    $P5038 = $P5021."new"($P5031, $P5037, "bind" :named("op"))
    $P5019."push"($P5038)
.annotate 'line', 3042
    set $P5039, $P101[0]
    unless_null $P5039, fallback5691
    nqp_get_sc_object $P5040, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5039, $P5040
  fallback5691:
    nqp_get_sc_object $P5044, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback5692
    nqp_get_sc_object $P5045, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5041, $P5045
  fallback5692:
    $P5046 = $P5041."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5039."push"($P5046)
.annotate 'line', 3043
    set $P5047, $P101[0]
    unless_null $P5047, fallback5693
    nqp_get_sc_object $P5048, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5047, $P5048
  fallback5693:
    nqp_get_sc_object $P5052, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5051, $P5052, "QAST"
    get_who $P5050, $P5051
    set $P5049, $P5050["Var"]
    unless_null $P5049, fallback5694
    nqp_get_sc_object $P5053, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5049, $P5053
  fallback5694:
    $P5054 = $P5049."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5047."push"($P5054)
.annotate 'line', 3044
    $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 3045
    $P101."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 3047
    find_dynamic_lex $P5056, "%*LANG"
    unless_null $P5056, fallback5695
    nqp_get_sc_object $P5059, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["%LANG"]
    unless_null $P5057, fallback5696
    nqp_get_sc_object $P5061, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5060, $P5061
    new $P5062, 'Hash'
    set $P5060["%LANG"], $P5062
    set $P5057, $P5062
  fallback5696:
    unless_null $P5057, vivi_17535697
    die "Contextual %*LANG not found"
    box $P5063, "Contextual %*LANG not found"
    set $P5057, $P5063
  vivi_17535697:
    set $P5056, $P5057
  fallback5695:
    set $P5055, $P5056["Regex-actions"]
    unless_null $P5055, fallback5698
    nqp_get_sc_object $P5064, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5055, $P5064
  fallback5698:
    unless_null _lex_param_1, fallback5699
    nqp_get_sc_object $P5066, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5066
  fallback5699:
    set $P5065, _lex_param_1["p6regex"]
    unless_null $P5065, fallback5700
    nqp_get_sc_object $P5067, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5065, $P5067
  fallback5700:
    $P5068 = $P5065."ast"()
    $P5069 = $P5055."qbuildsub"($P5068, $P101)
    set $P102, $P5069
.annotate 'line', 3048
    nqp_get_sc_object $P5073, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5072, $P5073, "QAST"
    get_who $P5071, $P5072
    set $P5070, $P5071["Op"]
    unless_null $P5070, fallback5701
    nqp_get_sc_object $P5074, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5070, $P5074
  fallback5701:
.annotate 'line', 3050
    new $P5075, 'ResizablePMCArray'
    box $P5076, "NQPRegex"
    push $P5075, $P5076
    $P5077 = "&lexical_package_lookup"($P5075, _lex_param_1)
    $P5078 = $P5070."new"($P5077, $P102, "callmethod" :named("op"), "new" :named("name"))
    set $P103, $P5078
    set $P103["sink"], $P102
.annotate 'line', 3055
    $P5079 = _lex_param_1."!make"($P103)
    .return ($P5079) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_345_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3058
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5702
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback5702:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback5703
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback5703:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_346_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3059
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3060
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5704
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback5704:
.annotate 'line', 3061
    unless_null _lex_param_1, fallback5705
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5007
  fallback5705:
    set $P5006, _lex_param_1["block"]
    unless_null $P5006, fallback5706
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5008
  fallback5706:
    $P5009 = $P5006."ast"()
    $P5010 = "&block_immediate"($P5009)
    $P5011 = $P5001."new"($P5010, "stringify" :named("op"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_347_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3064
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    $P5001 = _lex_param_1."!make"("\e")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_348_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3068
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5707
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback5707:
    set $P5001, _lex_param_1["dotty"]
    unless_null $P5001, fallback5708
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback5708:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_349_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3070
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3071
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5709
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback5709:
.annotate 'line', 3073
    nqp_get_sc_object $P5009, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5710
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5010
  fallback5710:
    $P5011 = $P5006."new"("RETURN" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "call" :named("op"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_350_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3077
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3078
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5711
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback5711:
.annotate 'line', 3079
    nqp_get_sc_object $P5009, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5712
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5010
  fallback5712:
    $P5011 = $P5006."new"("$/" :named("name"), "contextual" :named("scope"))
    $P5012 = $P5001."new"($P5011, "callmethod" :named("op"), "!make" :named("name"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_351_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3086
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5713
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback5713:
    $P5006 = $P5001."new"("control" :named("op"), "next" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_352_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3087
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5714
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback5714:
    $P5006 = $P5001."new"("control" :named("op"), "last" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_353_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3088
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5715
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback5715:
    $P5006 = $P5001."new"("control" :named("op"), "redo" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_354_1360256386.79") :anon :lex :outer("cuid_418_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3090
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3091
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5716
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback5716:
    $P5006 = $P5001."new"("callmethod" :named("op"), "ACCEPTS" :named("name"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_491_1360256386.79") :anon :lex :outer("cuid_369_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3172
    .const 'Sub' $P5014 = 'cuid_355_1360256386.79' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_356_1360256386.79' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_357_1360256386.79' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_358_1360256386.79' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_359_1360256386.79' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_360_1360256386.79' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_361_1360256386.79' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_362_1360256386.79' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_363_1360256386.79' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_364_1360256386.79' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_365_1360256386.79' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_366_1360256386.79' 
    capture_lex $P5014 
    .const 'Sub' $P5014 = 'cuid_367_1360256386.79' 
    capture_lex $P5014 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_355_1360256386.79' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_356_1360256386.79' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_357_1360256386.79' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_358_1360256386.79' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_359_1360256386.79' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_360_1360256386.79' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_361_1360256386.79' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_362_1360256386.79' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_363_1360256386.79' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_364_1360256386.79' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_365_1360256386.79' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_366_1360256386.79' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_367_1360256386.79' 
    capture_lex $P5013
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_355_1360256386.79") :anon :lex :outer("cuid_491_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3174
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 3175
    unless_null _lex_param_1, fallback5717
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5003
  fallback5717:
    set $P5002, _lex_param_1["statement"]
    unless_null $P5002, fallback5718
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5002, $P5004
  fallback5718:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 3176
    nqp_get_sc_object $P5009, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Regex"]
    unless_null $P5006, fallback5719
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5010
  fallback5719:
    $P5011 = $P5006."new"($P101, "qastnode" :named("rxtype"), "declarative" :named("subtype"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_356_1360256386.79") :anon :lex :outer("cuid_491_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3180
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3181
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5720
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback5720:
    unless_null _lex_param_1, fallback5721
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5007
  fallback5721:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5722
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5008
  fallback5722:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_357_1360256386.79") :anon :lex :outer("cuid_491_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3185
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3186
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5723
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback5723:
    nqp_get_sc_object $P5009, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5724
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5010
  fallback5724:
.annotate 'line', 3187
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5725
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5015
  fallback5725:
    $P5016 = $P5011."new"("!INTERPOLATE" :named("value"))
.annotate 'line', 3188
    unless_null _lex_param_1, fallback5726
    nqp_get_sc_object $P5018, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5018
  fallback5726:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5727
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5017, $P5019
  fallback5727:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_358_1360256386.79") :anon :lex :outer("cuid_491_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3192
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3193
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5728
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback5728:
    nqp_get_sc_object $P5009, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5729
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5010
  fallback5729:
.annotate 'line', 3194
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5730
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5015
  fallback5730:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3195
    unless_null _lex_param_1, fallback5731
    nqp_get_sc_object $P5018, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5018
  fallback5731:
    set $P5017, _lex_param_1["codeblock"]
    unless_null $P5017, fallback5732
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5017, $P5019
  fallback5732:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_359_1360256386.79") :anon :lex :outer("cuid_491_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3199
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3200
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5733
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback5733:
    unless_null _lex_param_1, fallback5734
    nqp_get_sc_object $P5007, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5007
  fallback5734:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5735
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5008
  fallback5735:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback5736
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5011
  fallback5736:
    set $P5010, _lex_param_1["zw"]
    unless_null $P5010, fallback5737
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5012
  fallback5737:
    set $S5001, $P5010
    iseq $I5001, $S5001, "!"
    $P5013 = $P5001."new"($P5009, "zerowidth" :named("subtype"), $I5001 :named("negate"), "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_360_1360256386.79") :anon :lex :outer("cuid_491_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3205
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3206
    nqp_get_sc_object $P5004, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5738
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5005
  fallback5738:
    nqp_get_sc_object $P5009, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5739
    nqp_get_sc_object $P5010, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5006, $P5010
  fallback5739:
.annotate 'line', 3207
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5740
    nqp_get_sc_object $P5015, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5015
  fallback5740:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3208
    unless_null _lex_param_1, fallback5741
    nqp_get_sc_object $P5018, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5018
  fallback5741:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5742
    nqp_get_sc_object $P5019, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5017, $P5019
  fallback5742:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_361_1360256386.79") :anon :lex :outer("cuid_491_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3212
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
.annotate 'line', 3213
    unless_null _lex_param_1, fallback5743
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5004
  fallback5743:
    set $P5003, _lex_param_1["block"]
    unless_null $P5003, fallback5744
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5005
  fallback5744:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 3214
    $P101."blocktype"("immediate")
.annotate 'line', 3216
    nqp_get_sc_object $P5010, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback5745
    nqp_get_sc_object $P5011, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5011
  fallback5745:
.annotate 'line', 3217
    nqp_get_sc_object $P5015, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback5746
    nqp_get_sc_object $P5016, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5012, $P5016
  fallback5746:
.annotate 'line', 3219
    nqp_get_sc_object $P5020, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Var"]
    unless_null $P5017, fallback5747
    nqp_get_sc_object $P5021, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5017, $P5021
  fallback5747:
    $P5022 = $P5017."new"("$/" :named("name"), "contextual" :named("scope"))
.annotate 'line', 3220
    nqp_get_sc_object $P5026, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["Op"]
    unless_null $P5023, fallback5748
    nqp_get_sc_object $P5027, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5023, $P5027
  fallback5748:
.annotate 'line', 3221
    nqp_get_sc_object $P5031, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["Var"]
    unless_null $P5028, fallback5749
    nqp_get_sc_object $P5032, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5028, $P5032
  fallback5749:
    $P5033 = $P5028."new"(utf8:"$\x{a2}" :named("name"), "contextual" :named("scope"))
    $P5034 = $P5023."new"($P5033, "MATCH" :named("name"), "callmethod" :named("op"))
    $P5035 = $P5012."new"($P5022, $P5034, "bind" :named("op"))
    $P5036 = $P5007."new"($P5035, $P101)
    set $P102, $P5036
.annotate 'line', 3228
    $P5037 = _lex_param_1."!make"($P102)
    .return ($P5037) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_362_1360256386.79") :anon :lex :outer("cuid_491_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3231
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5085 = 'cuid_492_1360256386.79' 
    capture_lex $P5085 
    .const 'Sub' $P5085 = 'cuid_493_1360256386.79' 
    capture_lex $P5085 
    .lex "$name", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    unless_null _lex_param_1, fallback5750
    nqp_get_sc_object $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5004
  fallback5750:
    set $P5003, _lex_param_1["longname"]
    unless_null $P5003, fallback5751
    nqp_get_sc_object $P5005, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5005
  fallback5751:
    set $S5001, $P5003
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback5754
    nqp_get_sc_object $P5008, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5008
  fallback5754:
    set $P5007, _lex_param_1["assertion"]
    unless_null $P5007, fallback5755
    nqp_get_sc_object $P5009, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5007, $P5009
  fallback5755:
    unless $P5007 goto if1754_else5752 
.annotate 'line', 3234
.annotate 'line', 3235
    unless_null _lex_param_1, fallback5756
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5012
  fallback5756:
    set $P5011, _lex_param_1["assertion"]
    unless_null $P5011, fallback5757
    nqp_get_sc_object $P5013, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5011, $P5013
  fallback5757:
    set $P5010, $P5011[0]
    unless_null $P5010, fallback5758
    nqp_get_sc_object $P5014, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5010, $P5014
  fallback5758:
    $P5015 = $P5010."ast"()
    set $P102, $P5015
.annotate 'line', 3236
    nqp_decontainerize $P5016, _lex_param_0
    $P5017 = $P5016."subrule_alias"($P102, $P101)
    goto if1754_end5753
  if1754_else5752:
    set $S5002, $P101
    iseq $I5001, $S5002, "sym"
    unless $I5001 goto if1755_else5759 
    .const 'Sub' $P5018 = 'cuid_492_1360256386.79' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5083, $P5019
    goto if1755_end5760
  if1755_else5759:
.annotate 'line', 3246
.annotate 'line', 3247
    nqp_get_sc_object $P5023, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Regex"]
    unless_null $P5020, fallback5777
    nqp_get_sc_object $P5024, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5020, $P5024
  fallback5777:
.annotate 'line', 3249
    nqp_get_sc_object $P5028, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Node"]
    unless_null $P5025, fallback5778
    nqp_get_sc_object $P5029, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5025, $P5029
  fallback5778:
    nqp_get_sc_object $P5033, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback5779
    nqp_get_sc_object $P5034, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5030, $P5034
  fallback5779:
    $P5035 = $P5030."new"($P101 :named("value"))
    $P5036 = $P5025."new"($P5035)
    $P5037 = $P5020."new"($P5036, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"), $P101 :named("name"))
    set $P102, $P5037
    unless_null _lex_param_1, fallback5782
    nqp_get_sc_object $P5039, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5039
  fallback5782:
    set $P5038, _lex_param_1["arglist"]
    unless_null $P5038, fallback5783
    nqp_get_sc_object $P5040, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5038, $P5040
  fallback5783:
    unless $P5038 goto if1760_else5780 
.annotate 'line', 3250
.annotate 'line', 3251
    unless_null _lex_param_1, fallback5784
    nqp_get_sc_object $P5046, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5046
  fallback5784:
    set $P5045, _lex_param_1["arglist"]
    unless_null $P5045, fallback5785
    nqp_get_sc_object $P5047, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5045, $P5047
  fallback5785:
    set $P5044, $P5045[0]
    unless_null $P5044, fallback5786
    nqp_get_sc_object $P5048, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5044, $P5048
  fallback5786:
    $P5049 = $P5044."ast"()
    $P5050 = $P5049."list"()
    set $P5041, $P5050
    iter $P5043, $P5050
  for_next5788:
    unless $P5043, for_done5790
    shift $P5052, $P5043
  for_redo5789:
    .const 'Sub' $P5051 = 'cuid_493_1360256386.79' 
    capture_lex $P5051
    $P5041 = $P5051($P5052)
    goto for_next5788
  for_done5790:
    set $P5082, $P5041
    goto if1760_end5781
  if1760_else5780:
    unless_null _lex_param_1, fallback5793
    nqp_get_sc_object $P5054, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5054
  fallback5793:
    set $P5053, _lex_param_1["nibbler"]
    unless_null $P5053, fallback5794
    nqp_get_sc_object $P5055, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5053, $P5055
  fallback5794:
    set $P5081, $P5053
    unless $P5053 goto if1761_end5792 
.annotate 'line', 3253
    set $S5003, $P101
    iseq $I5002, $S5003, "after"
    unless $I5002 goto if1762_else5795 
.annotate 'line', 3255
    set $P5056, $P102[0]
    unless_null $P5056, fallback5797
    nqp_get_sc_object $P5057, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5056, $P5057
  fallback5797:
    nqp_decontainerize $P5058, _lex_param_0
    nqp_decontainerize $P5059, _lex_param_0
    unless_null _lex_param_1, fallback5798
    nqp_get_sc_object $P5062, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5062
  fallback5798:
    set $P5061, _lex_param_1["nibbler"]
    unless_null $P5061, fallback5799
    nqp_get_sc_object $P5063, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5061, $P5063
  fallback5799:
    set $P5060, $P5061[0]
    unless_null $P5060, fallback5800
    nqp_get_sc_object $P5064, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5060, $P5064
  fallback5800:
    $P5065 = $P5060."ast"()
    $P5066 = $P5059."flip_ast"($P5065)
    $P5067 = $P5058."qbuildsub"($P5066, 1 :named("anon"), 1 :named("addself"))
    $P5068 = $P5056."push"($P5067)
    set $P5080, $P5068
    goto if1762_end5796
  if1762_else5795:
.annotate 'line', 3256
    set $P5069, $P102[0]
    unless_null $P5069, fallback5801
    nqp_get_sc_object $P5070, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5069, $P5070
  fallback5801:
    nqp_decontainerize $P5071, _lex_param_0
    unless_null _lex_param_1, fallback5802
    nqp_get_sc_object $P5074, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5074
  fallback5802:
    set $P5073, _lex_param_1["nibbler"]
    unless_null $P5073, fallback5803
    nqp_get_sc_object $P5075, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5073, $P5075
  fallback5803:
    set $P5072, $P5073[0]
    unless_null $P5072, fallback5804
    nqp_get_sc_object $P5076, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5072, $P5076
  fallback5804:
    $P5077 = $P5072."ast"()
    $P5078 = $P5071."qbuildsub"($P5077, 1 :named("anon"), 1 :named("addself"))
    $P5079 = $P5069."push"($P5078)
    set $P5080, $P5079
  if1762_end5796:
    set $P5081, $P5080
  if1761_end5792:
    set $P5082, $P5081
  if1760_end5781:
    set $P5083, $P5082
  if1755_end5760:
  if1754_end5753:
.annotate 'line', 3259
    $P5084 = _lex_param_1."!make"($P102)
    .return ($P5084) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_492_1360256386.79") :anon :lex :outer("cuid_362_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3238
    .lex "$loc", $P101 
    .lex "$rxname", $P102 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P102, $P5002
    find_dynamic_lex $P5004, "%*RX"
    unless_null $P5004, fallback5761
    nqp_get_sc_object $P5007, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["%RX"]
    unless_null $P5005, fallback5762
    nqp_get_sc_object $P5009, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%RX"], $P5010
    set $P5005, $P5010
  fallback5762:
    unless_null $P5005, vivi_17565763
    die "Contextual %*RX not found"
    box $P5011, "Contextual %*RX not found"
    set $P5005, $P5011
  vivi_17565763:
    set $P5004, $P5005
  fallback5761:
    set $P5003, $P5004["name"]
    unless_null $P5003, fallback5764
    nqp_get_sc_object $P5012, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5012
  fallback5764:
    set $S5001, $P5003
    index $I5001, $S5001, ":sym<", 0
    box $P5013, $I5001
    set $P101, $P5013
    set $N5001, $P101
    set $N5002, 0
    islt $I5002, $N5001, $N5002
    unless $I5002 goto if1757_end5766 
    find_dynamic_lex $P5015, "%*RX"
    unless_null $P5015, fallback5767
    nqp_get_sc_object $P5018, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["%RX"]
    unless_null $P5016, fallback5768
    nqp_get_sc_object $P5020, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5019, $P5020
    new $P5021, 'Hash'
    set $P5019["%RX"], $P5021
    set $P5016, $P5021
  fallback5768:
    unless_null $P5016, vivi_17585769
    die "Contextual %*RX not found"
    box $P5022, "Contextual %*RX not found"
    set $P5016, $P5022
  vivi_17585769:
    set $P5015, $P5016
  fallback5767:
    set $P5014, $P5015["name"]
    unless_null $P5014, fallback5770
    nqp_get_sc_object $P5023, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5014, $P5023
  fallback5770:
    set $S5002, $P5014
    index $I5003, $S5002, utf8:":sym\x{ab}", 0
    box $P5024, $I5003
    set $P101, $P5024
  if1757_end5766:
    find_dynamic_lex $P5026, "%*RX"
    unless_null $P5026, fallback5771
    nqp_get_sc_object $P5029, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["%RX"]
    unless_null $P5027, fallback5772
    nqp_get_sc_object $P5031, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%RX"], $P5032
    set $P5027, $P5032
  fallback5772:
    unless_null $P5027, vivi_17595773
    die "Contextual %*RX not found"
    box $P5033, "Contextual %*RX not found"
    set $P5027, $P5033
  vivi_17595773:
    set $P5026, $P5027
  fallback5771:
    set $P5025, $P5026["name"]
    unless_null $P5025, fallback5774
    nqp_get_sc_object $P5034, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5025, $P5034
  fallback5774:
    set $S5005, $P5025
    set $N5004, $P101
    set $N5005, 5
    add $N5003, $N5004, $N5005
    set $I5004, $N5003
    substr $S5004, $S5005, $I5004
    chopn $S5003, $S5004, 1
    box $P5035, $S5003
    set $P102, $P5035
.annotate 'line', 3243
    nqp_get_sc_object $P5039, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Regex"]
    unless_null $P5036, fallback5775
    nqp_get_sc_object $P5040, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5036, $P5040
  fallback5775:
    find_lex $P5041, "$/"
.annotate 'line', 3244
    nqp_get_sc_object $P5045, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Regex"]
    unless_null $P5042, fallback5776
    nqp_get_sc_object $P5046, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5042, $P5046
  fallback5776:
    find_lex $P5047, "$/"
    $P5048 = $P5042."new"($P102, "literal" :named("rxtype"), $P5047 :named("node"))
    $P5049 = $P5036."new"($P5048, "sym" :named("name"), "subcapture" :named("rxtype"), $P5041 :named("node"))
    store_lex "$qast", $P5049
    .return ($P5049) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_493_1360256386.79") :anon :lex :outer("cuid_362_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3251
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$qast"
    set $P5001, $P5002[0]
    unless_null $P5001, fallback5787
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback5787:
    $P5004 = $P5001."push"(_lex_param_0)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_363_1360256386.79") :anon :lex :outer("cuid_491_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3262
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3263
    unless_null _lex_param_1, fallback5805
    nqp_get_sc_object $P5002, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set _lex_param_1, $P5002
  fallback5805:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5806
    nqp_get_sc_object $P5003, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5001, $P5003
  fallback5806:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "create_regex_code_object" :subid("cuid_364_1360256386.79") :anon :lex :outer("cuid_491_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3266
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$code", $P101 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P101, $P5001
.annotate 'line', 3267
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback5807
    nqp_get_sc_object $P5005, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback5808
    nqp_get_sc_object $P5006, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5003, $P5006
  fallback5808:
    unless_null $P5003, vivi_17635809
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_17635809:
    set $P5002, $P5003
  fallback5807:
    $P5008 = $P5002."create_code"(_lex_param_1, "", 0, "NQPRegex" :named("code_type_name"))
    set $P101, $P5008
    find_dynamic_lex $P5009, "%*RX"
    unless_null $P5009, fallback5812
    nqp_get_sc_object $P5012, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["%RX"]
    unless_null $P5010, fallback5813
    nqp_get_sc_object $P5014, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5013, $P5014
    new $P5015, 'Hash'
    set $P5013["%RX"], $P5015
    set $P5010, $P5015
  fallback5813:
    unless_null $P5010, vivi_17655814
    die "Contextual %*RX not found"
    box $P5016, "Contextual %*RX not found"
    set $P5010, $P5016
  vivi_17655814:
    set $P5009, $P5010
  fallback5812:
    exists $I5001, $P5009["code"]
    unless $I5001 goto if1764_end5811 
.annotate 'line', 3268
.annotate 'line', 3269
    find_dynamic_lex $P5018, "%*RX"
    unless_null $P5018, fallback5815
    nqp_get_sc_object $P5021, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["%RX"]
    unless_null $P5019, fallback5816
    nqp_get_sc_object $P5023, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    get_who $P5022, $P5023
    new $P5024, 'Hash'
    set $P5022["%RX"], $P5024
    set $P5019, $P5024
  fallback5816:
    unless_null $P5019, vivi_17665817
    die "Contextual %*RX not found"
    box $P5025, "Contextual %*RX not found"
    set $P5019, $P5025
  vivi_17665817:
    set $P5018, $P5019
  fallback5815:
    set $P5017, $P5018["code"]
    unless_null $P5017, fallback5818
    nqp_get_sc_object $P5026, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    set $P5017, $P5026
  fallback5818:
    $P5027 = $P5017."ADD_NESTED_CODE"($P101)
  if1764_end5811:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_nfa" :subid("cuid_365_1360256386.79") :anon :lex :outer("cuid_491_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3274
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$nfa", _lex_param_3 
.annotate 'line', 3275
    $P5001 = _lex_param_3."save"()
    $P5002 = _lex_param_1."SET_NFA"($P5001)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_caps" :subid("cuid_366_1360256386.79") :anon :lex :outer("cuid_491_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3278
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "%caps", _lex_param_3 
.annotate 'line', 3279
    $P5001 = _lex_param_1."SET_CAPS"(_lex_param_3)
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "store_regex_alt_nfa" :subid("cuid_367_1360256386.79") :anon :lex :outer("cuid_491_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3282
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .const 'Sub' $P5008 = 'cuid_494_1360256386.79' 
    capture_lex $P5008 
    .lex "@saved", $P101 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$block", _lex_param_2 
    .lex "$key", _lex_param_3 
    .lex "@alternatives", _lex_param_4 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    set $P5002, _lex_param_4
    iter $P5004, _lex_param_4
  for_next5819:
    unless $P5004, for_done5821
    shift $P5006, $P5004
  for_redo5820:
    .const 'Sub' $P5005 = 'cuid_494_1360256386.79' 
    capture_lex $P5005
    $P5002 = $P5005($P5006)
    goto for_next5819
  for_done5821:
.annotate 'line', 3287
    $P5007 = _lex_param_1."SET_ALT_NFA"(_lex_param_3, $P101)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_494_1360256386.79") :anon :lex :outer("cuid_367_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3284
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 3285
    find_lex $P5001, "@saved"
    $P5002 = _lex_param_0."save"(1 :named("non_empty"))
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_495_1360256386.79") :anon :lex :outer("cuid_369_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3292
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    nqp_get_sc_object $P5001, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637", 25
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_497_1360256386.79") :load :init
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = 'cuid_496_1360256386.79' 
    capture_lex $P5001 
    .local pmc cur_sc 
    .local pmc conflicts 
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P5001
    get_class $P5002, "LexPad"
    get_class $P5003, "NQPLexPad"
    $P5004 = $P5001."hll_map"($P5002, $P5003)
    load_bytecode "ModuleLoader.pbc"
    .const 'Sub' $P5001 = "cuid_369_1360256386.79" 
    get_hll_global $P5002, "ModuleLoader"
    $P5003 = $P5002."load_setting"("NQPCORE")
    $P5004 = $P5001."set_outer_ctx"($P5003)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5001."load_module"("QAST")
    nqp_create_sc $P5001, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817"
    set cur_sc, $P5001
    $P5002 = cur_sc."set_description"("src\\stage2\\gen\\NQP.pm")
    new $P5003, 'ResizablePMCArray'
    set conflicts, $P5003
    new $P5004, 'ResizableStringArray'
    null $S5001
    push $P5004, $S5001
    push $P5004, "P6opaque"
    push $P5004, "QAST"
    push $P5004, "QRegex"
    push $P5004, "NQPCursorRole"
    push $P5004, "5AB04DFAFFF209D71179F6DD66C39F5290FAF9C0-1360256348.295"
    push $P5004, "src\\stage2\\QRegex.nqp"
    push $P5004, "NQPMatch"
    push $P5004, "NQPCursor"
    push $P5004, "NQPRegexMethod"
    push $P5004, "NQPRegex"
    push $P5004, "HLL"
    push $P5004, "PIRT"
    push $P5004, "NQP"
    push $P5004, "DEFAULT"
    push $P5004, "CREATE"
    push $P5004, "7124EB0A4F2237DE17B284B8CB3CA81CA1BF5C73-1360256342.637"
    push $P5004, "src\\stage2\\NQPCORE.setting"
    push $P5004, "bless"
    push $P5004, "BUILDALL"
    push $P5004, "new"
    push $P5004, "Str"
    push $P5004, "Numeric"
    push $P5004, "Int"
    push $P5004, "at_pos"
    push $P5004, "at_key"
    push $P5004, "defined"
    push $P5004, "ACCEPTS"
    push $P5004, "isa"
    push $P5004, "__dump"
    push $P5004, "BUILD"
    push $P5004, "slot_for_object"
    push $P5004, "72EB0CEEE110B04F66601526175C9117F069D82E-1360256354.951"
    push $P5004, "src\\stage2\\gen\\NQPHLL.pm"
    push $P5004, "add_object"
    push $P5004, "add_root_code_ref"
    push $P5004, "update_root_code_ref"
    push $P5004, "is_precompilation_mode"
    push $P5004, "add_load_dependency_task"
    push $P5004, "add_fixup_task"
    push $P5004, "sc"
    push $P5004, "handle"
    push $P5004, "code_ref_blocks"
    push $P5004, "load_dependency_tasks"
    push $P5004, "fixup_tasks"
    push $P5004, "push_lexpad"
    push $P5004, "pop_lexpad"
    push $P5004, "cur_lexpad"
    push $P5004, "get_legacy_block_list"
    push $P5004, "load_setting"
    push $P5004, "load_module"
    push $P5004, "import"
    push $P5004, "install_package_symbol"
    push $P5004, "install_lexical_symbol"
    push $P5004, "install_package_routine"
    push $P5004, "create_code"
    push $P5004, "pkg_create_mo"
    push $P5004, "pkg_add_attribute"
    push $P5004, "pkg_add_method"
    push $P5004, "set_routine_signature"
    push $P5004, "pkg_set_body_block"
    push $P5004, "pkg_add_parent_or_role"
    push $P5004, "pkg_add_parrot_vtable_handler_mapping"
    push $P5004, "pkg_compose"
    push $P5004, "run_begin_block"
    push $P5004, "libs"
    push $P5004, "add_initializations"
    push $P5004, "is_lexical"
    push $P5004, "is_package"
    push $P5004, "is_scope"
    push $P5004, "known_sym"
    push $P5004, "find_sym"
    push $P5004, "$!sc"
    push $P5004, "$!handle"
    push $P5004, "$!precomp_mode"
    push $P5004, "$!num_code_refs"
    push $P5004, "$!code_ref_blocks"
    push $P5004, "@!load_dependency_tasks"
    push $P5004, "@!fixup_tasks"
    push $P5004, "%!addr_to_slot"
    push $P5004, "@!BLOCKS"
    push $P5004, "%!code_objects_to_fix_up"
    push $P5004, "%!code_object_types"
    push $P5004, "%!code_object_fixup_list"
    push $P5004, "%!code_stub_sc_idx"
    push $P5004, "MATCH"
    push $P5004, "Bool"
    push $P5004, "parse"
    push $P5004, "!INTERPOLATE"
    push $P5004, "!INTERPOLATE_REGEX"
    push $P5004, "orig"
    push $P5004, "target"
    push $P5004, "from"
    push $P5004, "pos"
    push $P5004, "CAPHASH"
    push $P5004, "!cursor_init"
    push $P5004, "!cursor_start"
    push $P5004, "!cursor_start_subcapture"
    push $P5004, "!cursor_capture"
    push $P5004, "!cursor_push_cstack"
    push $P5004, "!cursor_pass"
    push $P5004, "!cursor_fail"
    push $P5004, "!cursor_pos"
    push $P5004, "!cursor_next"
    push $P5004, "!cursor_more"
    push $P5004, "!reduce"
    push $P5004, "!reduce_with_match"
    push $P5004, "!shared"
    push $P5004, "!protoregex"
    push $P5004, "!protoregex_nfa"
    push $P5004, "!protoregex_table"
    push $P5004, "!alt"
    push $P5004, "!alt_nfa"
    push $P5004, "!precompute_nfas"
    push $P5004, "!dba"
    push $P5004, "!highwater"
    push $P5004, "!highexpect"
    push $P5004, "!fresh_highexpect"
    push $P5004, "!set_highexpect"
    push $P5004, "!clear_highwater"
    push $P5004, "!BACKREF"
    push $P5004, "!LITERAL"
    push $P5004, "at"
    push $P5004, "before"
    push $P5004, "after"
    push $P5004, "ws"
    push $P5004, "ww"
    push $P5004, "wb"
    push $P5004, "ident"
    push $P5004, "alpha"
    push $P5004, "alnum"
    push $P5004, "upper"
    push $P5004, "lower"
    push $P5004, "digit"
    push $P5004, "xdigit"
    push $P5004, "space"
    push $P5004, "blank"
    push $P5004, "cntrl"
    push $P5004, "punct"
    push $P5004, "FAILGOAL"
    push $P5004, "throw_unrecog_backslash_seq"
    push $P5004, "termish"
    push $P5004, "term"
    push $P5004, "infix"
    push $P5004, "prefix"
    push $P5004, "postfix"
    push $P5004, "circumfix"
    push $P5004, "postcircumfix"
    push $P5004, "term:sym<circumfix>"
    push $P5004, "infixish"
    push $P5004, "prefixish"
    push $P5004, "postfixish"
    push $P5004, "nullterm"
    push $P5004, "nullterm_alt"
    push $P5004, "nulltermish"
    push $P5004, "quote_delimited"
    push $P5004, "quote_atom"
    push $P5004, "decint"
    push $P5004, "decints"
    push $P5004, "hexint"
    push $P5004, "hexints"
    push $P5004, "octint"
    push $P5004, "octints"
    push $P5004, "binint"
    push $P5004, "binints"
    push $P5004, "integer"
    push $P5004, "dec_number"
    push $P5004, "escale"
    push $P5004, "quote_escape"
    push $P5004, "quote_escape:sym<backslash>"
    push $P5004, "quote_escape:sym<stopper>"
    push $P5004, "quote_escape:sym<bs>"
    push $P5004, "quote_escape:sym<nl>"
    push $P5004, "quote_escape:sym<cr>"
    push $P5004, "quote_escape:sym<tab>"
    push $P5004, "quote_escape:sym<ff>"
    push $P5004, "quote_escape:sym<esc>"
    push $P5004, "quote_escape:sym<hex>"
    push $P5004, "quote_escape:sym<oct>"
    push $P5004, "quote_escape:sym<chr>"
    push $P5004, "quote_escape:sym<0>"
    push $P5004, "quote_escape:sym<misc>"
    push $P5004, "charname"
    push $P5004, "charnames"
    push $P5004, "charspec"
    push $P5004, "O"
    push $P5004, "panic"
    push $P5004, "peek_delimiters"
    push $P5004, "quote_EXPR"
    push $P5004, "quotemod_check"
    push $P5004, "starter"
    push $P5004, "stopper"
    push $P5004, "split_words"
    push $P5004, "EXPR"
    push $P5004, "EXPR_reduce"
    push $P5004, "EXPR_nonassoc"
    push $P5004, "ternary"
    push $P5004, "MARKER"
    push $P5004, "MARKED"
    push $P5004, "LANG"
    push $P5004, "TOP"
    push $P5004, "identifier"
    push $P5004, "name"
    push $P5004, "deflongname"
    push $P5004, "ENDSTMT"
    push $P5004, "unv"
    push $P5004, "pod_comment"
    push $P5004, "comp_unit"
    push $P5004, "statementlist"
    push $P5004, "statement"
    push $P5004, "eat_terminator"
    push $P5004, "xblock"
    push $P5004, "pblock"
    push $P5004, "lambda"
    push $P5004, "block"
    push $P5004, "blockoid"
    push $P5004, "newpad"
    push $P5004, "outerctx"
    push $P5004, "finishpad"
    push $P5004, "you_are_here"
    push $P5004, "terminator"
    push $P5004, "terminator:sym<;>"
    push $P5004, "terminator:sym<}>"
    push $P5004, "statement_control"
    push $P5004, "statement_control:sym<use>"
    push $P5004, "statement_control:sym<if>"
    push $P5004, "statement_control:sym<unless>"
    push $P5004, "statement_control:sym<while>"
    push $P5004, "statement_control:sym<repeat>"
    push $P5004, "statement_control:sym<for>"
    push $P5004, "statement_control:sym<CATCH>"
    push $P5004, "statement_control:sym<CONTROL>"
    push $P5004, "statement_prefix"
    push $P5004, "statement_prefix:sym<BEGIN>"
    push $P5004, "statement_prefix:sym<INIT>"
    push $P5004, "statement_prefix:sym<try>"
    push $P5004, "blorst"
    push $P5004, "statement_mod_cond"
    push $P5004, "statement_mod_cond:sym<if>"
    push $P5004, "statement_mod_cond:sym<unless>"
    push $P5004, "statement_mod_loop"
    push $P5004, "statement_mod_loop:sym<while>"
    push $P5004, "statement_mod_loop:sym<until>"
    push $P5004, "statement_mod_loop:sym<for>"
    push $P5004, "term:sym<fatarrow>"
    push $P5004, "term:sym<colonpair>"
    push $P5004, "term:sym<variable>"
    push $P5004, "term:sym<package_declarator>"
    push $P5004, "term:sym<scope_declarator>"
    push $P5004, "term:sym<routine_declarator>"
    push $P5004, "term:sym<multi_declarator>"
    push $P5004, "term:sym<regex_declarator>"
    push $P5004, "term:sym<statement_prefix>"
    push $P5004, "term:sym<lambda>"
    push $P5004, "fatarrow"
    push $P5004, "colonpair"
    push $P5004, "variable"
    push $P5004, "sigil"
    push $P5004, "twigil"
    push $P5004, "package_declarator"
    push $P5004, "package_declarator:sym<module>"
    push $P5004, "package_declarator:sym<knowhow>"
    push $P5004, "package_declarator:sym<class>"
    push $P5004, "package_declarator:sym<grammar>"
    push $P5004, "package_declarator:sym<role>"
    push $P5004, "package_declarator:sym<native>"
    push $P5004, "package_declarator:sym<stub>"
    push $P5004, "package_def"
    push $P5004, "role_params"
    push $P5004, "scope_declarator"
    push $P5004, "scope_declarator:sym<my>"
    push $P5004, "scope_declarator:sym<our>"
    push $P5004, "scope_declarator:sym<has>"
    push $P5004, "scoped"
    push $P5004, "typename"
    push $P5004, "declarator"
    push $P5004, "variable_declarator"
    push $P5004, "routine_declarator"
    push $P5004, "routine_declarator:sym<sub>"
    push $P5004, "routine_declarator:sym<method>"
    push $P5004, "routine_def"
    push $P5004, "method_def"
    push $P5004, "onlystar"
    push $P5004, "multi_declarator"
    push $P5004, "multi_declarator:sym<multi>"
    push $P5004, "multi_declarator:sym<proto>"
    push $P5004, "multi_declarator:sym<null>"
    push $P5004, "signature"
    push $P5004, "parameter"
    push $P5004, "param_var"
    push $P5004, "named_param"
    push $P5004, "default_value"
    push $P5004, "trait"
    push $P5004, "trait_mod"
    push $P5004, "trait_mod:sym<is>"
    push $P5004, "regex_declarator"
    push $P5004, "dotty"
    push $P5004, "term:sym<self>"
    push $P5004, "term:sym<identifier>"
    push $P5004, "term:sym<name>"
    push $P5004, "term:sym<pir::op>"
    push $P5004, "term:sym<pir::const>"
    push $P5004, "term:sym<nqp::op>"
    push $P5004, "term:sym<onlystar>"
    push $P5004, "args"
    push $P5004, "arglist"
    push $P5004, "term:sym<value>"
    push $P5004, "value"
    push $P5004, "number"
    push $P5004, "quote"
    push $P5004, "quote:sym<apos>"
    push $P5004, "quote:sym<dblq>"
    push $P5004, "quote:sym<q>"
    push $P5004, "quote:sym<qq>"
    push $P5004, "quote:sym<Q>"
    push $P5004, "quote:sym<Q:PIR>"
    push $P5004, "quote:sym</ />"
    push $P5004, "quote_escape:sym<$>"
    push $P5004, "quote_escape:sym<{ }>"
    push $P5004, "circumfix:sym<( )>"
    push $P5004, "circumfix:sym<[ ]>"
    push $P5004, "circumfix:sym<ang>"
    push $P5004, utf8:"circumfix:sym<\x{ab} \x{bb}>"
    push $P5004, "circumfix:sym<{ }>"
    push $P5004, "semilist"
    push $P5004, "infixstopper"
    push $P5004, "postcircumfix:sym<[ ]>"
    push $P5004, "postcircumfix:sym<{ }>"
    push $P5004, "postcircumfix:sym<ang>"
    push $P5004, "postcircumfix:sym<( )>"
    push $P5004, "postfix:sym<.>"
    push $P5004, "prefix:sym<++>"
    push $P5004, "prefix:sym<-->"
    push $P5004, "postfix:sym<++>"
    push $P5004, "postfix:sym<-->"
    push $P5004, "infix:sym<**>"
    push $P5004, "prefix:sym<+>"
    push $P5004, "prefix:sym<~>"
    push $P5004, "prefix:sym<->"
    push $P5004, "prefix:sym<?>"
    push $P5004, "prefix:sym<!>"
    push $P5004, "prefix:sym<|>"
    push $P5004, "infix:sym<*>"
    push $P5004, "infix:sym</>"
    push $P5004, "infix:sym<%>"
    push $P5004, "infix:sym<+&>"
    push $P5004, "infix:sym<+>"
    push $P5004, "infix:sym<->"
    push $P5004, "infix:sym<+|>"
    push $P5004, "infix:sym<+^>"
    push $P5004, "infix:sym<~>"
    push $P5004, "infix:sym<==>"
    push $P5004, "infix:sym<!=>"
    push $P5004, "infix:sym<<=>"
    push $P5004, "infix:sym<>=>"
    push $P5004, "infix:sym<<>"
    push $P5004, "infix:sym<>>"
    push $P5004, "infix:sym<eq>"
    push $P5004, "infix:sym<ne>"
    push $P5004, "infix:sym<le>"
    push $P5004, "infix:sym<ge>"
    push $P5004, "infix:sym<lt>"
    push $P5004, "infix:sym<gt>"
    push $P5004, "infix:sym<=:=>"
    push $P5004, "infix:sym<~~>"
    push $P5004, "infix:sym<&&>"
    push $P5004, "infix:sym<||>"
    push $P5004, "infix:sym<//>"
    push $P5004, "infix:sym<?? !!>"
    push $P5004, "infix:sym<=>"
    push $P5004, "infix:sym<:=>"
    push $P5004, "infix:sym<::=>"
    push $P5004, "infix:sym<,>"
    push $P5004, "prefix:sym<return>"
    push $P5004, "prefix:sym<make>"
    push $P5004, "term:sym<last>"
    push $P5004, "term:sym<next>"
    push $P5004, "term:sym<redo>"
    push $P5004, "smartmatch"
    push $P5004, "$!shared"
    push $P5004, "$!from"
    push $P5004, "$!pos"
    push $P5004, "$!match"
    push $P5004, "$!name"
    push $P5004, "$!bstack"
    push $P5004, "$!cstack"
    push $P5004, "$!regexsub"
    push $P5004, "$!restart"
    push $P5004, "C939CDD406A29BF4FCD94E2EF364FAD58DAB3EBB-1360256380.881"
    push $P5004, "src\\stage2\\gen\\NQPP6QRegex.pm"
    push $P5004, "obs"
    push $P5004, "throw_unrecognized_metachar"
    push $P5004, "throw_null_pattern"
    push $P5004, "normspace"
    push $P5004, "arg"
    push $P5004, "nibbler"
    push $P5004, "rxstopper"
    push $P5004, "termaltseq"
    push $P5004, "termconjseq"
    push $P5004, "termalt"
    push $P5004, "termconj"
    push $P5004, "quantified_atom"
    push $P5004, "separator"
    push $P5004, "atom"
    push $P5004, "quantifier"
    push $P5004, "quantifier:sym<*>"
    push $P5004, "quantifier:sym<+>"
    push $P5004, "quantifier:sym<?>"
    push $P5004, "quantifier:sym<{N,M}>"
    push $P5004, "quantifier:sym<**>"
    push $P5004, "backmod"
    push $P5004, "metachar"
    push $P5004, "metachar:sym<ws>"
    push $P5004, "metachar:sym<[ ]>"
    push $P5004, "metachar:sym<( )>"
    push $P5004, "metachar:sym<'>"
    push $P5004, "metachar:sym<\">"
    push $P5004, "metachar:sym<.>"
    push $P5004, "metachar:sym<^>"
    push $P5004, "metachar:sym<^^>"
    push $P5004, "metachar:sym<$>"
    push $P5004, "metachar:sym<$$>"
    push $P5004, "metachar:sym<:::>"
    push $P5004, "metachar:sym<::>"
    push $P5004, "metachar:sym<lwb>"
    push $P5004, "metachar:sym<rwb>"
    push $P5004, "metachar:sym<from>"
    push $P5004, "metachar:sym<to>"
    push $P5004, "metachar:sym<bs>"
    push $P5004, "metachar:sym<mod>"
    push $P5004, "metachar:sym<quantifier>"
    push $P5004, "metachar:sym<~>"
    push $P5004, "metachar:sym<{*}>"
    push $P5004, "metachar:sym<assert>"
    push $P5004, "metachar:sym<var>"
    push $P5004, "backslash"
    push $P5004, "backslash:sym<s>"
    push $P5004, "backslash:sym<b>"
    push $P5004, "backslash:sym<e>"
    push $P5004, "backslash:sym<f>"
    push $P5004, "backslash:sym<h>"
    push $P5004, "backslash:sym<r>"
    push $P5004, "backslash:sym<t>"
    push $P5004, "backslash:sym<v>"
    push $P5004, "backslash:sym<o>"
    push $P5004, "backslash:sym<x>"
    push $P5004, "backslash:sym<c>"
    push $P5004, "backslash:sym<A>"
    push $P5004, "backslash:sym<z>"
    push $P5004, "backslash:sym<Z>"
    push $P5004, "backslash:sym<Q>"
    push $P5004, "backslash:sym<unrec>"
    push $P5004, "backslash:sym<misc>"
    push $P5004, "assertion"
    push $P5004, "assertion:sym<?>"
    push $P5004, "assertion:sym<!>"
    push $P5004, "assertion:sym<|>"
    push $P5004, "assertion:sym<method>"
    push $P5004, "assertion:sym<name>"
    push $P5004, "assertion:sym<[>"
    push $P5004, "cclass_elem"
    push $P5004, "mod_internal"
    push $P5004, "mod_ident"
    push $P5004, "mod_ident:sym<ignorecase>"
    push $P5004, "mod_ident:sym<ratchet>"
    push $P5004, "mod_ident:sym<sigspace>"
    push $P5004, "mod_ident:sym<dba>"
    push $P5004, "mod_ident:sym<oops>"
    push $P5004, "metachar:sym<:my>"
    push $P5004, "metachar:sym<{ }>"
    push $P5004, "metachar:sym<nqpvar>"
    push $P5004, "assertion:sym<{ }>"
    push $P5004, "assertion:sym<?{ }>"
    push $P5004, "assertion:sym<var>"
    push $P5004, "codeblock"
    push $P5004, "ints_to_string"
    push $P5004, "CTXSAVE"
    push $P5004, "SET_BLOCK_OUTER_CTX"
    push $P5004, "qbuildsub"
    push $P5004, "alt_nfas"
    push $P5004, "subrule_alias"
    push $P5004, "flip_ast"
    push $P5004, "create_regex_code_object"
    push $P5004, "store_regex_caps"
    push $P5004, "store_regex_nfa"
    push $P5004, "store_regex_alt_nfa"
    push $P5004, "language"
    push $P5004, "compiler"
    push $P5004, "config"
    push $P5004, "autoprint"
    push $P5004, "interactive"
    push $P5004, "interactive_result"
    push $P5004, "interactive_exception"
    push $P5004, "eval"
    push $P5004, "ctxsave"
    push $P5004, "stages"
    push $P5004, "parsegrammar"
    push $P5004, "parseactions"
    push $P5004, "interactive_banner"
    push $P5004, "interactive_prompt"
    push $P5004, "compiler_progname"
    push $P5004, "commandline_options"
    push $P5004, "command_line"
    push $P5004, "command_eval"
    push $P5004, "process_args"
    push $P5004, "evalfiles"
    push $P5004, "compile"
    push $P5004, "start"
    push $P5004, "past"
    push $P5004, "post"
    push $P5004, "pirbegin"
    push $P5004, "pir"
    push $P5004, "evalpmc"
    push $P5004, "dumper"
    push $P5004, "usage"
    push $P5004, "version"
    push $P5004, "show-config"
    push $P5004, "verbose-config"
    push $P5004, "vmstat"
    push $P5004, "nqpevent"
    push $P5004, "removestage"
    push $P5004, "addstage"
    push $P5004, "parse_name"
    push $P5004, "lineof"
    push $P5004, "user-progname"
    push $P5004, "cli-options"
    push $P5004, "cli-arguments"
    push $P5004, "@!stages"
    push $P5004, "$!parsegrammar"
    push $P5004, "$!parseactions"
    push $P5004, "@!cmdoptions"
    push $P5004, "$!usage"
    push $P5004, "$!compiler_progname"
    push $P5004, "$!language"
    push $P5004, "%!config"
    push $P5004, "$!user_progname"
    push $P5004, "@!cli-arguments"
    push $P5004, "%!cli-options"
    push $P5004, ""
    push $P5004, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5004, "alt_nfa__1_1360256388.039"
    push $P5004, "alt_nfa__2_1360256388.056"
    push $P5004, utf8:"\n\x{b}\f\r\x{85}\u2028\u2029"
    push $P5004, "alt_nfa__4_1360256388.074"
    push $P5004, "alt_nfa__3_1360256388.066"
    push $P5004, "alt_nfa__6_1360256388.158"
    push $P5004, "alt_nfa__5_1360256388.145"
    push $P5004, "alt_nfa__7_1360256388.25"
    push $P5004, "alt_nfa__9_1360256388.27"
    push $P5004, "alt_nfa__8_1360256388.256"
    push $P5004, "{"
    push $P5004, "alt_nfa__10_1360256388.297"
    push $P5004, "alt_nfa__11_1360256388.303"
    push $P5004, ";"
    push $P5004, "}"
    push $P5004, "sym"
    push $P5004, "else"
    push $P5004, "alt_nfa__12_1360256388.402"
    push $P5004, "wu"
    push $P5004, "alt_nfa__13_1360256388.423"
    push $P5004, "alt_nfa__14_1360256388.423"
    push $P5004, "alt_nfa__15_1360256388.423"
    push $P5004, "alt_nfa__16_1360256388.473"
    push $P5004, "cond"
    push $P5004, "alt_nfa__17_1360256388.543"
    push $P5004, "alt_nfa__18_1360256388.551"
    push $P5004, "key"
    push $P5004, "val"
    push $P5004, "not"
    push $P5004, "alt_nfa__19_1360256388.59"
    push $P5004, "desigilname"
    push $P5004, "<"
    push $P5004, "/_!"
    push $P5004, "alt_nfa__20_1360256388.609"
    push $P5004, "$@%&"
    push $P5004, "*!?"
    push $P5004, "metaclass"
    push $P5004, "repr"
    push $P5004, "export"
    push $P5004, "parent"
    push $P5004, "role"
    push $P5004, "alt_nfa__21_1360256388.972"
    push $P5004, "alt_nfa__22_1360256388.987"
    push $P5004, "alt_nfa__23_1360256389.036"
    push $P5004, "latename"
    push $P5004, "private"
    push $P5004, "alt_nfa__24_1360256389.072"
    push $P5004, "invocant"
    push $P5004, "alt_nfa__26_1360256389.148"
    push $P5004, "alt_nfa__25_1360256389.142"
    push $P5004, "definedness"
    push $P5004, "quant"
    push $P5004, "_DU"
    push $P5004, "alt_nfa__27_1360256389.172"
    push $P5004, "alt_nfa__28_1360256389.172"
    push $P5004, "alt_nfa__29_1360256389.172"
    push $P5004, "/!"
    push $P5004, "alt_nfa__30_1360256389.183"
    push $P5004, "longname"
    push $P5004, "proto"
    push $P5004, "p6regex"
    push $P5004, "alt_nfa__31_1360256389.294"
    push $P5004, "alt_nfa__32_1360256389.295"
    push $P5004, "alt_nfa__33_1360256389.295"
    push $P5004, "'\""
    push $P5004, "("
    push $P5004, "alt_nfa__34_1360256389.318"
    push $P5004, "alt_nfa__35_1360256389.318"
    push $P5004, "op"
    push $P5004, "const"
    push $P5004, "alt_nfa__36_1360256389.387"
    push $P5004, "alt_nfa__37_1360256389.396"
    push $P5004, "sign"
    push $P5004, "alt_nfa__38_1360256389.405"
    push $P5004, "'"
    push $P5004, "\""
    push $P5004, "$"
    push $P5004, utf8:"\x{ab}"
    push $P5004, "OPER"
    push $P5004, ">"
    push $P5004, "}/"
    push $P5004, "var"
    push $P5004, "alt_nfa__39_1360256390.186"
    push $P5004, "alt_nfa__40_1360256390.211"
    push $P5004, "alt_nfa__41_1360256390.225"
    push $P5004, "zw"
    push $P5004, "?!"
    push $P5004, "alt_nfa__42_1360256390.258"
    push $P5004, "$@"
    push $P5004, "__6MODEL_CORE__"
    push $P5004, "GLOBALish"
    push $P5004, "EXPORT"
    push $P5004, "6F207129B0708369A315ED3D47DFB8B452CF56E2-1360256337.469"
    push $P5004, "src\\stage2\\gen\\nqp-mo.pm"
    push $P5004, "NQP::World"
    push $P5004, "NQP::Grammar"
    push $P5004, "alt_nfa__1_1360256355.053"
    push $P5004, "alt_nfa__2_1360256355.082"
    push $P5004, "alt_nfa__3_1360256355.151"
    push $P5004, "alt_nfa__4_1360256355.151"
    push $P5004, "alt_nfa__5_1360256355.171"
    push $P5004, "alt_nfa__6_1360256355.247"
    push $P5004, "alt_nfa__7_1360256355.259"
    push $P5004, "alt_nfa__8_1360256355.295"
    push $P5004, "alt_nfa__9_1360256355.333"
    push $P5004, "shared"
    push $P5004, "match"
    push $P5004, "bstack"
    push $P5004, "cstack"
    push $P5004, "regexsub"
    push $P5004, "restart"
    push $P5004, "NQP::Regex"
    push $P5004, "alt_nfa__1_1360256381.005"
    push $P5004, "alt_nfa__2_1360256381.01"
    push $P5004, "alt_nfa__3_1360256381.033"
    push $P5004, "alt_nfa__4_1360256381.098"
    push $P5004, "alt_nfa__5_1360256381.117"
    push $P5004, "alt_nfa__6_1360256381.172"
    push $P5004, "alt_nfa__7_1360256381.199"
    push $P5004, "alt_nfa__8_1360256381.218"
    push $P5004, "alt_nfa__9_1360256381.287"
    push $P5004, "alt_nfa__10_1360256381.359"
    push $P5004, "alt_nfa__11_1360256381.366"
    push $P5004, "alt_nfa__12_1360256381.449"
    push $P5004, "alt_nfa__13_1360256381.509"
    push $P5004, "alt_nfa__14_1360256381.521"
    push $P5004, "alt_nfa__15_1360256381.587"
    push $P5004, "alt_nfa__16_1360256381.597"
    push $P5004, "alt_nfa__17_1360256381.628"
    push $P5004, "alt_nfa__18_1360256381.635"
    push $P5004, "alt_nfa__19_1360256381.698"
    push $P5004, "alt_nfa__20_1360256381.698"
    push $P5004, "alt_nfa__21_1360256381.699"
    push $P5004, "alt_nfa__23_1360256381.727"
    push $P5004, "alt_nfa__24_1360256381.727"
    push $P5004, "alt_nfa__22_1360256381.706"
    push $P5004, "NQP::Actions"
    push $P5004, "NQP::RegexActions"
    push $P5004, "NQP::Compiler"
    push $P5004, "CompileTimeValue"
    push $P5004, "2A5BD8D2F017911EBF2A5D1B91B7A8E3733D2938-1360256345.623"
    push $P5004, "src\\stage2\\QASTNode.nqp"
    push $P5004, "SpecialArg"
    push $P5004, "Node"
    push $P5004, "Regex"
    push $P5004, "IVal"
    push $P5004, "NVal"
    push $P5004, "SVal"
    push $P5004, "BVal"
    push $P5004, "WVal"
    push $P5004, "Want"
    push $P5004, "Var"
    push $P5004, "VarWithFallback"
    push $P5004, "Op"
    push $P5004, "VM"
    push $P5004, "Stmts"
    push $P5004, "Stmt"
    push $P5004, "Block"
    push $P5004, "Unquote"
    push $P5004, "CompUnit"
    push $P5004, "InlinePlaceholder"
    push $P5004, "Operations"
    push $P5004, "C289AEFA9E73755898B22C23E08AA21D8A44E7C0-1360256361.686"
    push $P5004, "src\\stage2\\QAST.nqp"
    push $P5004, "Compiler"
    push $P5004, "NFA"
    push $P5004, "P6Regex"
    push $P5004, "Grammar"
    push $P5004, "Actions"
    push $P5004, "CommandLine"
    push $P5004, "World"
    push $P5004, "CallResult"
    push $P5004, "Sub"
    push $P5004, "Ops"
    push $P5004, "Label"
    push $P5004, "RegexActions"
    push $P5004, "Ee"
    push $P5004, "01"
    push $P5004, "01234567"
    push $P5004, "0123456789abcdefABCDEF"
    push $P5004, "?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    push $P5004, "dDnNsSwW"
    push $P5004, "bB"
    push $P5004, "eE"
    push $P5004, "fF"
    push $P5004, "hH"
    push $P5004, "rR"
    push $P5004, "tT"
    push $P5004, "vV"
    push $P5004, "oO"
    push $P5004, "xX"
    push $P5004, "cC"
    push $P5004, "&|~"
    .const 'Sub' $P5005 = 'cuid_496_1360256386.79' 
    capture_lex $P5005
    $P5006 = $P5005()
    nqp_deserialize_sc "", cur_sc, $P5004, $P5006, conflicts
    unless conflicts goto if1768_end5828 
    die "Repossession conflicts occurred during deserialization"
  if1768_end5828:
    .const "LexInfo" $P5001 = "cuid_369_1360256386.79"
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    $P5001."set_static_lexpad_value"("GLOBALish", $P5002)
    .const "LexInfo" $P5003 = "cuid_369_1360256386.79"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_369_1360256386.79"
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 0
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_369_1360256386.79"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_369_1360256386.79"
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 1
    $P5001."set_static_lexpad_value"("EXPORT", $P5002)
    .const "LexInfo" $P5003 = "cuid_369_1360256386.79"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_1_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 4
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_2_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 5
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_3_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 6
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_4_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 7
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_5_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 8
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_6_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 9
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_7_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 10
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_8_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 11
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_9_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 12
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_10_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 13
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_11_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 14
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_12_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 15
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_13_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 16
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_14_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 17
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_15_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 18
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_16_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 19
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_17_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 20
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_18_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 21
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_19_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 22
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_20_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 23
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_21_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 24
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_22_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 25
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_23_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 26
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_24_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 27
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_25_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 28
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_26_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 29
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_27_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 30
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_28_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 31
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_29_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 32
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_30_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 33
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_31_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 34
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_372_1360256386.79"
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_372_1360256386.79"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_372_1360256386.79"
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 3
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_372_1360256386.79"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_32_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 36
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_33_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 37
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_34_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 38
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_35_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 39
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_36_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 40
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_37_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 41
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_38_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 42
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_39_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 43
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_40_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 44
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_41_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 45
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_42_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 46
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_43_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 47
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_44_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 48
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_45_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 49
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_46_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 50
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_47_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 51
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_48_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 52
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_49_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 53
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_50_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 54
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_51_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 55
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_52_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 56
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_53_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 57
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_54_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 58
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_55_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 59
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_56_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 60
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_57_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 61
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_58_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 62
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_59_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 63
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_60_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 64
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_61_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 65
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_62_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 66
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_63_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 67
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_64_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 68
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_65_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 69
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_66_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 70
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_67_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 71
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_68_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 72
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_69_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 73
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_70_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 74
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_71_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 75
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_72_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 76
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_73_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 77
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_74_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 78
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_75_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 79
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_76_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 80
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_77_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 81
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_78_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 82
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_79_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 83
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_80_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 84
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_81_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 85
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_82_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 86
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_83_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 87
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_84_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 88
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_85_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 89
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_86_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 90
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_87_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 91
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_88_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 92
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_89_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 93
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_90_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 94
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_91_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 95
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_92_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 96
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_93_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 97
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_94_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 98
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_95_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 99
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_96_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 100
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_97_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 101
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_98_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 102
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_99_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 103
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_100_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 104
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_101_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 105
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_102_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 106
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_103_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 107
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_104_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 108
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_105_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 109
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_106_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 110
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_107_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 111
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_108_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 112
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_109_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 113
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_110_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 114
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_111_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 115
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_112_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 116
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_113_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 117
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_114_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 118
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_115_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 119
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_116_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 120
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_117_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 121
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_118_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 122
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_119_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 123
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_120_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 124
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_121_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 125
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_122_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 126
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_123_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 127
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_124_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 128
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_125_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 129
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_126_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 130
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_127_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 131
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_128_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 132
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_129_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 133
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_130_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 134
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_131_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 135
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_132_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 136
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_133_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 137
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_134_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 138
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_135_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 139
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_136_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 140
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_137_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 141
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_138_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 142
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_139_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 143
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_140_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 144
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_141_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 145
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_142_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 146
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_143_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 147
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_144_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 148
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_145_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 149
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_146_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 150
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_147_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 151
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_148_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 152
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_149_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 153
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_150_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 154
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_151_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 155
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_152_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 156
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_153_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 157
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_154_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 158
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_155_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 159
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_156_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 160
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_157_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 161
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_158_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 162
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_159_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 163
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_160_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 164
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_161_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 165
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_162_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 166
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_163_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 167
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_164_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 168
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_165_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 169
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_166_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 170
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_167_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 171
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_168_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 172
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_169_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 173
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_170_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 174
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_171_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 175
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_172_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 176
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_173_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 177
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_174_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 178
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_175_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 179
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_176_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 180
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_177_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 181
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_178_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 182
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_179_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 183
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_180_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 184
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_181_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 185
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_182_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 186
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_183_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 187
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_184_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 188
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_185_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 189
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_186_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 190
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_187_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 191
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_188_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 192
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_189_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 193
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_190_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 194
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_191_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 195
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_192_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 196
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_193_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 197
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_194_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 198
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_195_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 199
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_196_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 200
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_197_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 201
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_198_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 202
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_199_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 203
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_200_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 204
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_201_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 205
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_202_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 206
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_203_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 207
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_204_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 208
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_205_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 209
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_206_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 210
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_207_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 211
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_208_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 212
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_209_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 213
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_210_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 214
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_211_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 215
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_212_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 216
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_213_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 217
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_214_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 218
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_215_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 219
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_216_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 220
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_217_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 221
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_218_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 222
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_219_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 223
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_220_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 224
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_221_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 225
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_222_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 226
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_223_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 227
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_389_1360256386.79"
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 35
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_389_1360256386.79"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_389_1360256386.79"
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 35
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_389_1360256386.79"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_224_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 229
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_225_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 230
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_226_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 231
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_227_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 232
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_228_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 233
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_229_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 234
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_230_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 235
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_231_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 236
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_232_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 237
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_233_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 238
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_234_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 239
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_235_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 240
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_236_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 241
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_237_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 242
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_238_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 243
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_239_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 244
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_240_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 245
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_241_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 246
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_242_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 247
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_243_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 248
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_408_1360256386.79"
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 228
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_408_1360256386.79"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_408_1360256386.79"
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 228
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_408_1360256386.79"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_244_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 250
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_245_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 251
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_246_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 252
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_247_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 253
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_248_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 254
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_249_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 255
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_250_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 256
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_251_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 257
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_252_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 258
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_253_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 259
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_254_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 260
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_255_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 261
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_256_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 262
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_257_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 263
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_258_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 264
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_259_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 265
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_260_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 266
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_261_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 267
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_262_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 268
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_263_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 269
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_264_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 270
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_265_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 271
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_266_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 272
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_267_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 273
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_268_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 274
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_269_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 275
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_270_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 276
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_271_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 277
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_272_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 278
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_273_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 279
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_274_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 280
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_275_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 281
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_276_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 282
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_277_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 283
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_278_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 284
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_279_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 285
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_280_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 286
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_281_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 287
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_282_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 288
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_283_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 289
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_284_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 290
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_285_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 291
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_286_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 292
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_287_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 293
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_288_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 294
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_289_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 295
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_290_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 296
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_291_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 297
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_292_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 298
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_293_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 299
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_294_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 300
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_295_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 301
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_296_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 302
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_297_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 303
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_298_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 304
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_299_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 305
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_300_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 306
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_301_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 307
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_302_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 308
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_303_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 309
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_304_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 310
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_305_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 311
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_306_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 312
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_307_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 313
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_308_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 314
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_309_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 315
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_310_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 316
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_311_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 317
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_312_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 318
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_313_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 319
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_314_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 320
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_315_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 321
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_316_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 322
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_317_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 323
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_318_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 324
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_319_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 325
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_320_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 326
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_321_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 327
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_322_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 328
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_323_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 329
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_324_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 330
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_325_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 331
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_326_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 332
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_327_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 333
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_328_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 334
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_329_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 335
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_330_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 336
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_331_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 337
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_332_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 338
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_333_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 339
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_334_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 340
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_335_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 341
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_336_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 342
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_337_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 343
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_338_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 344
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_339_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 345
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_340_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 346
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_341_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 347
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_342_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 348
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_343_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 349
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_344_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 350
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_345_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 351
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_346_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 352
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_347_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 353
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_348_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 354
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_349_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 355
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_350_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 356
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_351_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 357
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_352_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 358
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_353_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 359
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_354_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 360
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_418_1360256386.79"
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 249
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_418_1360256386.79"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_418_1360256386.79"
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 249
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_418_1360256386.79"
    $P5004 = $P5003."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_355_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 362
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_356_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 363
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_357_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 364
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_358_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 365
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_359_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 366
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_360_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 367
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_361_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 368
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_362_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 369
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_363_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 370
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_364_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 371
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_365_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 372
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_366_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 373
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_367_1360256386.79" 
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 374
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_491_1360256386.79"
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 361
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_491_1360256386.79"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_491_1360256386.79"
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 361
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_491_1360256386.79"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_495_1360256386.79"
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 375
    $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5003 = "cuid_495_1360256386.79"
    $P5004 = $P5003."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_495_1360256386.79"
    nqp_get_sc_object $P5002, "3D70F6E26C828F456A046FA72D9B254DC20E278B-1360256386.817", 375
    $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5003 = "cuid_495_1360256386.79"
    $P5004 = $P5003."finish_static_lexpad"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_496_1360256386.79") :anon :lex :outer("cuid_497_1360256386.79")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    .const 'Sub' $P5002 = "cuid_1_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_2_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_3_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_4_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_5_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_6_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_7_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_8_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_9_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_10_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_11_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_12_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_13_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_14_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_15_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_16_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_17_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_18_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_19_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_20_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_21_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_22_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_23_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_24_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_25_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_26_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_27_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_28_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_29_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_30_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_31_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_32_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_33_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_34_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_35_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_36_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_37_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_38_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_39_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_40_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_41_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_42_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_43_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_44_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_45_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_46_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_47_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_48_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_49_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_50_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_51_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_52_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_53_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_54_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_55_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_56_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_57_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_58_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_59_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_60_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_61_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_62_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_63_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_64_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_65_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_66_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_67_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_68_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_69_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_70_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_71_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_72_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_73_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_74_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_75_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_76_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_77_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_78_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_79_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_80_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_81_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_82_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_83_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_84_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_85_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_86_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_87_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_88_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_89_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_90_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_91_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_92_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_93_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_94_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_95_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_96_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_97_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_98_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_99_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_100_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_101_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_102_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_103_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_104_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_105_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_106_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_107_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_108_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_109_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_110_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_111_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_112_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_113_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_114_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_115_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_116_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_117_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_118_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_119_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_120_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_121_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_122_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_123_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_124_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_125_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_126_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_127_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_128_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_129_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_130_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_131_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_132_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_133_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_134_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_135_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_136_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_137_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_138_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_139_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_140_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_141_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_142_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_143_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_144_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_145_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_146_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_147_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_148_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_149_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_150_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_151_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_152_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_153_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_154_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_155_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_156_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_157_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_158_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_159_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_160_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_161_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_162_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_163_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_164_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_165_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_166_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_167_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_168_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_169_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_170_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_171_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_172_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_173_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_174_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_175_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_176_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_177_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_178_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_179_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_180_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_181_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_182_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_183_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_184_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_185_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_186_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_187_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_188_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_189_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_190_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_191_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_192_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_193_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_194_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_195_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_196_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_197_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_198_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_199_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_200_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_201_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_202_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_203_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_204_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_205_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_206_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_207_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_208_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_209_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_210_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_211_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_212_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_213_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_214_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_215_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_216_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_217_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_218_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_219_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_220_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_221_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_222_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_223_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_224_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_225_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_226_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_227_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_228_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_229_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_230_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_231_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_232_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_233_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_234_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_235_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_236_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_237_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_238_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_239_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_240_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_241_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_242_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_243_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_244_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_245_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_246_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_247_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_248_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_249_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_250_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_251_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_252_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_253_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_254_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_255_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_256_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_257_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_258_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_259_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_260_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_261_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_262_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_263_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_264_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_265_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_266_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_267_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_268_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_269_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_270_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_271_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_272_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_273_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_274_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_275_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_276_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_277_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_278_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_279_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_280_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_281_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_282_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_283_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_284_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_285_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_286_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_287_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_288_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_289_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_290_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_291_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_292_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_293_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_294_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_295_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_296_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_297_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_298_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_299_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_300_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_301_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_302_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_303_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_304_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_305_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_306_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_307_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_308_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_309_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_310_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_311_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_312_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_313_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_314_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_315_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_316_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_317_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_318_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_319_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_320_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_321_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_322_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_323_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_324_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_325_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_326_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_327_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_328_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_329_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_330_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_331_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_332_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_333_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_334_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_335_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_336_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_337_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_338_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_339_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_340_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_341_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_342_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_343_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_344_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_345_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_346_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_347_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_348_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_349_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_350_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_351_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_352_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_353_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_354_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_355_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_356_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_357_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_358_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_359_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_360_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_361_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_362_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_363_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_364_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_365_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_366_1360256386.79" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_367_1360256386.79" 
    push $P5001, $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_498_1360256386.79") :load
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = "cuid_369_1360256386.79" 
    $P5002 = $P5001()
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_499_1360256386.79") :main
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc ARGS :slurpy 
    .const 'Sub' $P5001 = "cuid_369_1360256386.79" 
    $P5002 = $P5001(ARGS :flat)
    .return ($P5002) 
.end