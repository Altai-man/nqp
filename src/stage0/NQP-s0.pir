.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'

.HLL "nqp"

.loadlib "nqp_group"

.loadlib "nqp_ops"

.loadlib "trans_ops"

.loadlib "io_ops"

.namespace []
.sub "_block11"  :anon :subid("10_1307835824.98345")
    .param pmc param_13 :slurpy
.annotate 'line', 0
    .const 'Sub' $P7323 = "624_1307835824.98345" 
    capture_lex $P7323
    .const 'Sub' $P7190 = "616_1307835824.98345" 
    capture_lex $P7190
    .const 'Sub' $P2935 = "436_1307835824.98345" 
    capture_lex $P2935
    .const 'Sub' $P2870 = "415_1307835824.98345" 
    capture_lex $P2870
    .const 'Sub' $P986 = "40_1307835824.98345" 
    capture_lex $P986
    .const 'Sub' $P57 = "13_1307835824.98345" 
    capture_lex $P57
    .const 'Sub' $P49 = "12_1307835824.98345" 
    capture_lex $P49
    .const 'Sub' $P16 = "11_1307835824.98345" 
    capture_lex $P16
.annotate 'line', 1
    .lex "@ARGS", param_13
    .lex "GLOBALish", $P14
    .lex "$?PACKAGE", $P15
.annotate 'line', 2758
    .const 'Sub' $P16 = "11_1307835824.98345" 
    newclosure $P48, $P16
    .lex "MAIN", $P48
.annotate 'line', 2779
    .const 'Sub' $P49 = "12_1307835824.98345" 
    newclosure $P55, $P49
    .lex "hll-config", $P55
.annotate 'line', 1
    $P0 = find_dynamic_lex "$*CTXSAVE"
    if null $P0 goto ctxsave_done
    $I0 = can $P0, "ctxsave"
    unless $I0 goto ctxsave_done
    $P0."ctxsave"()
  ctxsave_done:
.annotate 'line', 9
    .const 'Sub' $P57 = "13_1307835824.98345" 
    capture_lex $P57
    $P57()
.annotate 'line', 435
    .const 'Sub' $P986 = "40_1307835824.98345" 
    capture_lex $P986
    $P986()
.annotate 'line', 1158
    .const 'Sub' $P2870 = "415_1307835824.98345" 
    capture_lex $P2870
    $P2870()
.annotate 'line', 1201
    .const 'Sub' $P2935 = "436_1307835824.98345" 
    capture_lex $P2935
    $P2935()
.annotate 'line', 2700
    .const 'Sub' $P7190 = "616_1307835824.98345" 
    capture_lex $P7190
    $P7190()
.annotate 'line', 2755
    .const 'Sub' $P7323 = "624_1307835824.98345" 
    capture_lex $P7323
    $P7323()
    find_lex $P7326, "MAIN"
    find_lex $P7327, "hll-config"
    find_lex $P7330, "@ARGS"
    if $P7330, if_7329
    set $P7328, $P7330
    goto if_7329_end
  if_7329:
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P7331, "ModuleLoader"
    getinterp $P7332
    set $P7333, $P7332["context"]
    $P7331."set_mainline_module"($P7333)
    .const 'Sub' $P7334 = "11_1307835824.98345" 
    find_lex $P7335, "@ARGS"
    $P7336 = $P7334($P7335 :flat)
    set $P7328, $P7336
  if_7329_end:
.annotate 'line', 1
    .return ($P7328)
    .const 'Sub' $P7338 = "625_1307835824.98345" 
    .return ($P7338)
.end


.HLL "nqp"

.namespace []
.sub "" :load :init :subid("post626") :outer("10_1307835824.98345")
.annotate 'line', 0
    .const 'Sub' $P12 = "10_1307835824.98345" 
    .local pmc block
    set block, $P12
    nqp_get_sc $P7342, "1307835814.0955"
    isnull $I7343, $P7342
    if $I7343, if_7341
    .const 'Sub' $P9536 = "10_1307835824.98345" 
    $P9537 = $P9536."get_lexinfo"()
    nqp_get_sc_object $P9538, "1307835814.0955", 0
    $P9537."set_static_lexpad_value"("GLOBALish", $P9538)
    .const 'Sub' $P9539 = "10_1307835824.98345" 
    $P9540 = $P9539."get_lexinfo"()
    $P9540."finish_static_lexpad"()
    .const 'Sub' $P9541 = "10_1307835824.98345" 
    $P9542 = $P9541."get_lexinfo"()
    nqp_get_sc_object $P9543, "1307835814.0955", 0
    $P9542."set_static_lexpad_value"("$?PACKAGE", $P9543)
    .const 'Sub' $P9544 = "10_1307835824.98345" 
    $P9545 = $P9544."get_lexinfo"()
    $P9545."finish_static_lexpad"()
    nqp_get_sc_object $P9546, "1307835814.0955", 2
    .const 'Sub' $P9547 = "14_1307835824.98345" 
    assign $P9546, $P9547
    nqp_get_sc_object $P9548, "1307835814.0955", 3
    .const 'Sub' $P9549 = "16_1307835824.98345" 
    assign $P9548, $P9549
    nqp_get_sc_object $P9550, "1307835814.0955", 4
    .const 'Sub' $P9551 = "17_1307835824.98345" 
    assign $P9550, $P9551
    nqp_get_sc_object $P9552, "1307835814.0955", 5
    .const 'Sub' $P9553 = "20_1307835824.98345" 
    assign $P9552, $P9553
    nqp_get_sc_object $P9554, "1307835814.0955", 6
    .const 'Sub' $P9555 = "21_1307835824.98345" 
    assign $P9554, $P9555
    nqp_get_sc_object $P9556, "1307835814.0955", 7
    .const 'Sub' $P9557 = "22_1307835824.98345" 
    assign $P9556, $P9557
    nqp_get_sc_object $P9558, "1307835814.0955", 8
    .const 'Sub' $P9559 = "23_1307835824.98345" 
    assign $P9558, $P9559
    nqp_get_sc_object $P9560, "1307835814.0955", 9
    .const 'Sub' $P9561 = "26_1307835824.98345" 
    assign $P9560, $P9561
    nqp_get_sc_object $P9562, "1307835814.0955", 10
    .const 'Sub' $P9563 = "29_1307835824.98345" 
    assign $P9562, $P9563
    nqp_get_sc_object $P9564, "1307835814.0955", 11
    .const 'Sub' $P9565 = "30_1307835824.98345" 
    assign $P9564, $P9565
    nqp_get_sc_object $P9566, "1307835814.0955", 12
    .const 'Sub' $P9567 = "35_1307835824.98345" 
    assign $P9566, $P9567
    nqp_get_sc_object $P9568, "1307835814.0955", 13
    .const 'Sub' $P9569 = "36_1307835824.98345" 
    assign $P9568, $P9569
    nqp_get_sc_object $P9570, "1307835814.0955", 14
    .const 'Sub' $P9571 = "37_1307835824.98345" 
    assign $P9570, $P9571
    nqp_get_sc_object $P9572, "1307835814.0955", 15
    .const 'Sub' $P9573 = "38_1307835824.98345" 
    assign $P9572, $P9573
    .const 'Sub' $P9574 = "13_1307835824.98345" 
    $P9575 = $P9574."get_lexinfo"()
    nqp_get_sc_object $P9576, "1307835814.0955", 1
    $P9575."set_static_lexpad_value"("$?PACKAGE", $P9576)
    .const 'Sub' $P9577 = "13_1307835824.98345" 
    $P9578 = $P9577."get_lexinfo"()
    $P9578."finish_static_lexpad"()
    .const 'Sub' $P9579 = "13_1307835824.98345" 
    $P9580 = $P9579."get_lexinfo"()
    nqp_get_sc_object $P9581, "1307835814.0955", 1
    $P9580."set_static_lexpad_value"("$?CLASS", $P9581)
    .const 'Sub' $P9582 = "13_1307835824.98345" 
    $P9583 = $P9582."get_lexinfo"()
    $P9583."finish_static_lexpad"()
    nqp_get_sc_object $P9584, "1307835814.0955", 17
    .const 'Sub' $P9585 = "41_1307835824.98345" 
    assign $P9584, $P9585
    nqp_get_sc_object $P9586, "1307835814.0955", 18
    .const 'Sub' $P9587 = "42_1307835824.98345" 
    assign $P9586, $P9587
    nqp_get_sc_object $P9588, "1307835814.0955", 19
    .const 'Sub' $P9589 = "43_1307835824.98345" 
    assign $P9588, $P9589
    nqp_get_sc_object $P9590, "1307835814.0955", 20
    .const 'Sub' $P9591 = "44_1307835824.98345" 
    assign $P9590, $P9591
    nqp_get_sc_object $P9592, "1307835814.0955", 21
    .const 'Sub' $P9593 = "45_1307835824.98345" 
    assign $P9592, $P9593
    nqp_get_sc_object $P9594, "1307835814.0955", 22
    .const 'Sub' $P9595 = "46_1307835824.98345" 
    assign $P9594, $P9595
    nqp_get_sc_object $P9596, "1307835814.0955", 23
    .const 'Sub' $P9597 = "47_1307835824.98345" 
    assign $P9596, $P9597
    nqp_get_sc_object $P9598, "1307835814.0955", 24
    .const 'Sub' $P9599 = "48_1307835824.98345" 
    assign $P9598, $P9599
    nqp_get_sc_object $P9600, "1307835814.0955", 25
    .const 'Sub' $P9601 = "49_1307835824.98345" 
    assign $P9600, $P9601
    nqp_get_sc_object $P9602, "1307835814.0955", 26
    .const 'Sub' $P9603 = "50_1307835824.98345" 
    assign $P9602, $P9603
    nqp_get_sc_object $P9604, "1307835814.0955", 27
    .const 'Sub' $P9605 = "51_1307835824.98345" 
    assign $P9604, $P9605
    nqp_get_sc_object $P9606, "1307835814.0955", 28
    .const 'Sub' $P9607 = "52_1307835824.98345" 
    assign $P9606, $P9607
    nqp_get_sc_object $P9608, "1307835814.0955", 29
    .const 'Sub' $P9609 = "54_1307835824.98345" 
    assign $P9608, $P9609
    nqp_get_sc_object $P9610, "1307835814.0955", 30
    .const 'Sub' $P9611 = "55_1307835824.98345" 
    assign $P9610, $P9611
    nqp_get_sc_object $P9612, "1307835814.0955", 31
    .const 'Sub' $P9613 = "57_1307835824.98345" 
    assign $P9612, $P9613
    nqp_get_sc_object $P9614, "1307835814.0955", 32
    .const 'Sub' $P9615 = "58_1307835824.98345" 
    assign $P9614, $P9615
    nqp_get_sc_object $P9616, "1307835814.0955", 33
    .const 'Sub' $P9617 = "59_1307835824.98345" 
    assign $P9616, $P9617
    nqp_get_sc_object $P9618, "1307835814.0955", 34
    .const 'Sub' $P9619 = "60_1307835824.98345" 
    assign $P9618, $P9619
    nqp_get_sc_object $P9620, "1307835814.0955", 35
    .const 'Sub' $P9621 = "61_1307835824.98345" 
    assign $P9620, $P9621
    nqp_get_sc_object $P9622, "1307835814.0955", 36
    .const 'Sub' $P9623 = "62_1307835824.98345" 
    assign $P9622, $P9623
    nqp_get_sc_object $P9624, "1307835814.0955", 37
    .const 'Sub' $P9625 = "64_1307835824.98345" 
    assign $P9624, $P9625
    nqp_get_sc_object $P9626, "1307835814.0955", 38
    .const 'Sub' $P9627 = "65_1307835824.98345" 
    assign $P9626, $P9627
    nqp_get_sc_object $P9628, "1307835814.0955", 39
    .const 'Sub' $P9629 = "66_1307835824.98345" 
    assign $P9628, $P9629
    nqp_get_sc_object $P9630, "1307835814.0955", 40
    .const 'Sub' $P9631 = "67_1307835824.98345" 
    assign $P9630, $P9631
    nqp_get_sc_object $P9632, "1307835814.0955", 41
    .const 'Sub' $P9633 = "68_1307835824.98345" 
    assign $P9632, $P9633
    nqp_get_sc_object $P9634, "1307835814.0955", 42
    .const 'Sub' $P9635 = "69_1307835824.98345" 
    assign $P9634, $P9635
    nqp_get_sc_object $P9636, "1307835814.0955", 43
    .const 'Sub' $P9637 = "70_1307835824.98345" 
    assign $P9636, $P9637
    nqp_get_sc_object $P9638, "1307835814.0955", 44
    .const 'Sub' $P9639 = "71_1307835824.98345" 
    assign $P9638, $P9639
    nqp_get_sc_object $P9640, "1307835814.0955", 45
    .const 'Sub' $P9641 = "72_1307835824.98345" 
    assign $P9640, $P9641
    nqp_get_sc_object $P9642, "1307835814.0955", 46
    .const 'Sub' $P9643 = "73_1307835824.98345" 
    assign $P9642, $P9643
    nqp_get_sc_object $P9644, "1307835814.0955", 47
    .const 'Sub' $P9645 = "74_1307835824.98345" 
    assign $P9644, $P9645
    nqp_get_sc_object $P9646, "1307835814.0955", 48
    .const 'Sub' $P9647 = "75_1307835824.98345" 
    assign $P9646, $P9647
    nqp_get_sc_object $P9648, "1307835814.0955", 49
    .const 'Sub' $P9649 = "76_1307835824.98345" 
    assign $P9648, $P9649
    nqp_get_sc_object $P9650, "1307835814.0955", 50
    .const 'Sub' $P9651 = "77_1307835824.98345" 
    assign $P9650, $P9651
    nqp_get_sc_object $P9652, "1307835814.0955", 51
    .const 'Sub' $P9653 = "78_1307835824.98345" 
    assign $P9652, $P9653
    nqp_get_sc_object $P9654, "1307835814.0955", 52
    .const 'Sub' $P9655 = "79_1307835824.98345" 
    assign $P9654, $P9655
    nqp_get_sc_object $P9656, "1307835814.0955", 53
    .const 'Sub' $P9657 = "80_1307835824.98345" 
    assign $P9656, $P9657
    nqp_get_sc_object $P9658, "1307835814.0955", 54
    .const 'Sub' $P9659 = "81_1307835824.98345" 
    assign $P9658, $P9659
    nqp_get_sc_object $P9660, "1307835814.0955", 55
    .const 'Sub' $P9661 = "82_1307835824.98345" 
    assign $P9660, $P9661
    nqp_get_sc_object $P9662, "1307835814.0955", 56
    .const 'Sub' $P9663 = "83_1307835824.98345" 
    assign $P9662, $P9663
    nqp_get_sc_object $P9664, "1307835814.0955", 57
    .const 'Sub' $P9665 = "84_1307835824.98345" 
    assign $P9664, $P9665
    nqp_get_sc_object $P9666, "1307835814.0955", 58
    .const 'Sub' $P9667 = "85_1307835824.98345" 
    assign $P9666, $P9667
    nqp_get_sc_object $P9668, "1307835814.0955", 59
    .const 'Sub' $P9669 = "86_1307835824.98345" 
    assign $P9668, $P9669
    nqp_get_sc_object $P9670, "1307835814.0955", 60
    .const 'Sub' $P9671 = "87_1307835824.98345" 
    assign $P9670, $P9671
    nqp_get_sc_object $P9672, "1307835814.0955", 61
    .const 'Sub' $P9673 = "88_1307835824.98345" 
    assign $P9672, $P9673
    nqp_get_sc_object $P9674, "1307835814.0955", 62
    .const 'Sub' $P9675 = "89_1307835824.98345" 
    assign $P9674, $P9675
    nqp_get_sc_object $P9676, "1307835814.0955", 63
    .const 'Sub' $P9677 = "90_1307835824.98345" 
    assign $P9676, $P9677
    nqp_get_sc_object $P9678, "1307835814.0955", 64
    .const 'Sub' $P9679 = "91_1307835824.98345" 
    assign $P9678, $P9679
    nqp_get_sc_object $P9680, "1307835814.0955", 65
    .const 'Sub' $P9681 = "92_1307835824.98345" 
    assign $P9680, $P9681
    nqp_get_sc_object $P9682, "1307835814.0955", 66
    .const 'Sub' $P9683 = "93_1307835824.98345" 
    assign $P9682, $P9683
    nqp_get_sc_object $P9684, "1307835814.0955", 67
    .const 'Sub' $P9685 = "94_1307835824.98345" 
    assign $P9684, $P9685
    nqp_get_sc_object $P9686, "1307835814.0955", 68
    .const 'Sub' $P9687 = "95_1307835824.98345" 
    assign $P9686, $P9687
    nqp_get_sc_object $P9688, "1307835814.0955", 69
    .const 'Sub' $P9689 = "96_1307835824.98345" 
    assign $P9688, $P9689
    nqp_get_sc_object $P9690, "1307835814.0955", 70
    .const 'Sub' $P9691 = "97_1307835824.98345" 
    assign $P9690, $P9691
    nqp_get_sc_object $P9692, "1307835814.0955", 71
    .const 'Sub' $P9693 = "98_1307835824.98345" 
    assign $P9692, $P9693
    nqp_get_sc_object $P9694, "1307835814.0955", 72
    .const 'Sub' $P9695 = "99_1307835824.98345" 
    assign $P9694, $P9695
    nqp_get_sc_object $P9696, "1307835814.0955", 73
    .const 'Sub' $P9697 = "101_1307835824.98345" 
    assign $P9696, $P9697
    nqp_get_sc_object $P9698, "1307835814.0955", 74
    .const 'Sub' $P9699 = "102_1307835824.98345" 
    assign $P9698, $P9699
    nqp_get_sc_object $P9700, "1307835814.0955", 75
    .const 'Sub' $P9701 = "103_1307835824.98345" 
    assign $P9700, $P9701
    nqp_get_sc_object $P9702, "1307835814.0955", 76
    .const 'Sub' $P9703 = "104_1307835824.98345" 
    assign $P9702, $P9703
    nqp_get_sc_object $P9704, "1307835814.0955", 77
    .const 'Sub' $P9705 = "105_1307835824.98345" 
    assign $P9704, $P9705
    nqp_get_sc_object $P9706, "1307835814.0955", 78
    .const 'Sub' $P9707 = "106_1307835824.98345" 
    assign $P9706, $P9707
    nqp_get_sc_object $P9708, "1307835814.0955", 79
    .const 'Sub' $P9709 = "107_1307835824.98345" 
    assign $P9708, $P9709
    nqp_get_sc_object $P9710, "1307835814.0955", 80
    .const 'Sub' $P9711 = "108_1307835824.98345" 
    assign $P9710, $P9711
    nqp_get_sc_object $P9712, "1307835814.0955", 81
    .const 'Sub' $P9713 = "109_1307835824.98345" 
    assign $P9712, $P9713
    nqp_get_sc_object $P9714, "1307835814.0955", 82
    .const 'Sub' $P9715 = "110_1307835824.98345" 
    assign $P9714, $P9715
    nqp_get_sc_object $P9716, "1307835814.0955", 83
    .const 'Sub' $P9717 = "111_1307835824.98345" 
    assign $P9716, $P9717
    nqp_get_sc_object $P9718, "1307835814.0955", 84
    .const 'Sub' $P9719 = "112_1307835824.98345" 
    assign $P9718, $P9719
    nqp_get_sc_object $P9720, "1307835814.0955", 85
    .const 'Sub' $P9721 = "113_1307835824.98345" 
    assign $P9720, $P9721
    nqp_get_sc_object $P9722, "1307835814.0955", 86
    .const 'Sub' $P9723 = "114_1307835824.98345" 
    assign $P9722, $P9723
    nqp_get_sc_object $P9724, "1307835814.0955", 87
    .const 'Sub' $P9725 = "115_1307835824.98345" 
    assign $P9724, $P9725
    nqp_get_sc_object $P9726, "1307835814.0955", 88
    .const 'Sub' $P9727 = "116_1307835824.98345" 
    assign $P9726, $P9727
    nqp_get_sc_object $P9728, "1307835814.0955", 89
    .const 'Sub' $P9729 = "117_1307835824.98345" 
    assign $P9728, $P9729
    nqp_get_sc_object $P9730, "1307835814.0955", 90
    .const 'Sub' $P9731 = "118_1307835824.98345" 
    assign $P9730, $P9731
    nqp_get_sc_object $P9732, "1307835814.0955", 91
    .const 'Sub' $P9733 = "119_1307835824.98345" 
    assign $P9732, $P9733
    nqp_get_sc_object $P9734, "1307835814.0955", 92
    .const 'Sub' $P9735 = "120_1307835824.98345" 
    assign $P9734, $P9735
    nqp_get_sc_object $P9736, "1307835814.0955", 93
    .const 'Sub' $P9737 = "121_1307835824.98345" 
    assign $P9736, $P9737
    nqp_get_sc_object $P9738, "1307835814.0955", 94
    .const 'Sub' $P9739 = "122_1307835824.98345" 
    assign $P9738, $P9739
    nqp_get_sc_object $P9740, "1307835814.0955", 95
    .const 'Sub' $P9741 = "123_1307835824.98345" 
    assign $P9740, $P9741
    nqp_get_sc_object $P9742, "1307835814.0955", 96
    .const 'Sub' $P9743 = "124_1307835824.98345" 
    assign $P9742, $P9743
    nqp_get_sc_object $P9744, "1307835814.0955", 97
    .const 'Sub' $P9745 = "125_1307835824.98345" 
    assign $P9744, $P9745
    nqp_get_sc_object $P9746, "1307835814.0955", 98
    .const 'Sub' $P9747 = "126_1307835824.98345" 
    assign $P9746, $P9747
    nqp_get_sc_object $P9748, "1307835814.0955", 99
    .const 'Sub' $P9749 = "127_1307835824.98345" 
    assign $P9748, $P9749
    nqp_get_sc_object $P9750, "1307835814.0955", 100
    .const 'Sub' $P9751 = "128_1307835824.98345" 
    assign $P9750, $P9751
    nqp_get_sc_object $P9752, "1307835814.0955", 101
    .const 'Sub' $P9753 = "129_1307835824.98345" 
    assign $P9752, $P9753
    nqp_get_sc_object $P9754, "1307835814.0955", 102
    .const 'Sub' $P9755 = "130_1307835824.98345" 
    assign $P9754, $P9755
    nqp_get_sc_object $P9756, "1307835814.0955", 103
    .const 'Sub' $P9757 = "131_1307835824.98345" 
    assign $P9756, $P9757
    nqp_get_sc_object $P9758, "1307835814.0955", 104
    .const 'Sub' $P9759 = "132_1307835824.98345" 
    assign $P9758, $P9759
    nqp_get_sc_object $P9760, "1307835814.0955", 105
    .const 'Sub' $P9761 = "133_1307835824.98345" 
    assign $P9760, $P9761
    nqp_get_sc_object $P9762, "1307835814.0955", 106
    .const 'Sub' $P9763 = "134_1307835824.98345" 
    assign $P9762, $P9763
    nqp_get_sc_object $P9764, "1307835814.0955", 107
    .const 'Sub' $P9765 = "135_1307835824.98345" 
    assign $P9764, $P9765
    nqp_get_sc_object $P9766, "1307835814.0955", 108
    .const 'Sub' $P9767 = "136_1307835824.98345" 
    assign $P9766, $P9767
    nqp_get_sc_object $P9768, "1307835814.0955", 109
    .const 'Sub' $P9769 = "137_1307835824.98345" 
    assign $P9768, $P9769
    nqp_get_sc_object $P9770, "1307835814.0955", 110
    .const 'Sub' $P9771 = "138_1307835824.98345" 
    assign $P9770, $P9771
    nqp_get_sc_object $P9772, "1307835814.0955", 111
    .const 'Sub' $P9773 = "139_1307835824.98345" 
    assign $P9772, $P9773
    nqp_get_sc_object $P9774, "1307835814.0955", 112
    .const 'Sub' $P9775 = "140_1307835824.98345" 
    assign $P9774, $P9775
    nqp_get_sc_object $P9776, "1307835814.0955", 113
    .const 'Sub' $P9777 = "141_1307835824.98345" 
    assign $P9776, $P9777
    nqp_get_sc_object $P9778, "1307835814.0955", 114
    .const 'Sub' $P9779 = "142_1307835824.98345" 
    assign $P9778, $P9779
    nqp_get_sc_object $P9780, "1307835814.0955", 115
    .const 'Sub' $P9781 = "143_1307835824.98345" 
    assign $P9780, $P9781
    nqp_get_sc_object $P9782, "1307835814.0955", 116
    .const 'Sub' $P9783 = "144_1307835824.98345" 
    assign $P9782, $P9783
    nqp_get_sc_object $P9784, "1307835814.0955", 117
    .const 'Sub' $P9785 = "145_1307835824.98345" 
    assign $P9784, $P9785
    nqp_get_sc_object $P9786, "1307835814.0955", 118
    .const 'Sub' $P9787 = "146_1307835824.98345" 
    assign $P9786, $P9787
    nqp_get_sc_object $P9788, "1307835814.0955", 119
    .const 'Sub' $P9789 = "149_1307835824.98345" 
    assign $P9788, $P9789
    nqp_get_sc_object $P9790, "1307835814.0955", 120
    .const 'Sub' $P9791 = "150_1307835824.98345" 
    assign $P9790, $P9791
    nqp_get_sc_object $P9792, "1307835814.0955", 121
    .const 'Sub' $P9793 = "151_1307835824.98345" 
    assign $P9792, $P9793
    nqp_get_sc_object $P9794, "1307835814.0955", 122
    .const 'Sub' $P9795 = "152_1307835824.98345" 
    assign $P9794, $P9795
    nqp_get_sc_object $P9796, "1307835814.0955", 123
    .const 'Sub' $P9797 = "153_1307835824.98345" 
    assign $P9796, $P9797
    nqp_get_sc_object $P9798, "1307835814.0955", 124
    .const 'Sub' $P9799 = "154_1307835824.98345" 
    assign $P9798, $P9799
    nqp_get_sc_object $P9800, "1307835814.0955", 125
    .const 'Sub' $P9801 = "155_1307835824.98345" 
    assign $P9800, $P9801
    nqp_get_sc_object $P9802, "1307835814.0955", 126
    .const 'Sub' $P9803 = "156_1307835824.98345" 
    assign $P9802, $P9803
    nqp_get_sc_object $P9804, "1307835814.0955", 127
    .const 'Sub' $P9805 = "157_1307835824.98345" 
    assign $P9804, $P9805
    nqp_get_sc_object $P9806, "1307835814.0955", 128
    .const 'Sub' $P9807 = "158_1307835824.98345" 
    assign $P9806, $P9807
    nqp_get_sc_object $P9808, "1307835814.0955", 129
    .const 'Sub' $P9809 = "159_1307835824.98345" 
    assign $P9808, $P9809
    nqp_get_sc_object $P9810, "1307835814.0955", 130
    .const 'Sub' $P9811 = "160_1307835824.98345" 
    assign $P9810, $P9811
    nqp_get_sc_object $P9812, "1307835814.0955", 131
    .const 'Sub' $P9813 = "161_1307835824.98345" 
    assign $P9812, $P9813
    nqp_get_sc_object $P9814, "1307835814.0955", 132
    .const 'Sub' $P9815 = "162_1307835824.98345" 
    assign $P9814, $P9815
    nqp_get_sc_object $P9816, "1307835814.0955", 133
    .const 'Sub' $P9817 = "163_1307835824.98345" 
    assign $P9816, $P9817
    nqp_get_sc_object $P9818, "1307835814.0955", 134
    .const 'Sub' $P9819 = "164_1307835824.98345" 
    assign $P9818, $P9819
    nqp_get_sc_object $P9820, "1307835814.0955", 135
    .const 'Sub' $P9821 = "165_1307835824.98345" 
    assign $P9820, $P9821
    nqp_get_sc_object $P9822, "1307835814.0955", 136
    .const 'Sub' $P9823 = "166_1307835824.98345" 
    assign $P9822, $P9823
    nqp_get_sc_object $P9824, "1307835814.0955", 137
    .const 'Sub' $P9825 = "167_1307835824.98345" 
    assign $P9824, $P9825
    nqp_get_sc_object $P9826, "1307835814.0955", 138
    .const 'Sub' $P9827 = "168_1307835824.98345" 
    assign $P9826, $P9827
    nqp_get_sc_object $P9828, "1307835814.0955", 139
    .const 'Sub' $P9829 = "169_1307835824.98345" 
    assign $P9828, $P9829
    nqp_get_sc_object $P9830, "1307835814.0955", 140
    .const 'Sub' $P9831 = "170_1307835824.98345" 
    assign $P9830, $P9831
    nqp_get_sc_object $P9832, "1307835814.0955", 141
    .const 'Sub' $P9833 = "171_1307835824.98345" 
    assign $P9832, $P9833
    nqp_get_sc_object $P9834, "1307835814.0955", 142
    .const 'Sub' $P9835 = "172_1307835824.98345" 
    assign $P9834, $P9835
    nqp_get_sc_object $P9836, "1307835814.0955", 143
    .const 'Sub' $P9837 = "173_1307835824.98345" 
    assign $P9836, $P9837
    nqp_get_sc_object $P9838, "1307835814.0955", 144
    .const 'Sub' $P9839 = "174_1307835824.98345" 
    assign $P9838, $P9839
    nqp_get_sc_object $P9840, "1307835814.0955", 145
    .const 'Sub' $P9841 = "175_1307835824.98345" 
    assign $P9840, $P9841
    nqp_get_sc_object $P9842, "1307835814.0955", 146
    .const 'Sub' $P9843 = "176_1307835824.98345" 
    assign $P9842, $P9843
    nqp_get_sc_object $P9844, "1307835814.0955", 147
    .const 'Sub' $P9845 = "177_1307835824.98345" 
    assign $P9844, $P9845
    nqp_get_sc_object $P9846, "1307835814.0955", 148
    .const 'Sub' $P9847 = "178_1307835824.98345" 
    assign $P9846, $P9847
    nqp_get_sc_object $P9848, "1307835814.0955", 149
    .const 'Sub' $P9849 = "179_1307835824.98345" 
    assign $P9848, $P9849
    nqp_get_sc_object $P9850, "1307835814.0955", 150
    .const 'Sub' $P9851 = "180_1307835824.98345" 
    assign $P9850, $P9851
    nqp_get_sc_object $P9852, "1307835814.0955", 151
    .const 'Sub' $P9853 = "181_1307835824.98345" 
    assign $P9852, $P9853
    nqp_get_sc_object $P9854, "1307835814.0955", 152
    .const 'Sub' $P9855 = "182_1307835824.98345" 
    assign $P9854, $P9855
    nqp_get_sc_object $P9856, "1307835814.0955", 153
    .const 'Sub' $P9857 = "184_1307835824.98345" 
    assign $P9856, $P9857
    nqp_get_sc_object $P9858, "1307835814.0955", 154
    .const 'Sub' $P9859 = "185_1307835824.98345" 
    assign $P9858, $P9859
    nqp_get_sc_object $P9860, "1307835814.0955", 155
    .const 'Sub' $P9861 = "186_1307835824.98345" 
    assign $P9860, $P9861
    nqp_get_sc_object $P9862, "1307835814.0955", 156
    .const 'Sub' $P9863 = "187_1307835824.98345" 
    assign $P9862, $P9863
    nqp_get_sc_object $P9864, "1307835814.0955", 157
    .const 'Sub' $P9865 = "188_1307835824.98345" 
    assign $P9864, $P9865
    nqp_get_sc_object $P9866, "1307835814.0955", 158
    .const 'Sub' $P9867 = "189_1307835824.98345" 
    assign $P9866, $P9867
    nqp_get_sc_object $P9868, "1307835814.0955", 159
    .const 'Sub' $P9869 = "190_1307835824.98345" 
    assign $P9868, $P9869
    nqp_get_sc_object $P9870, "1307835814.0955", 160
    .const 'Sub' $P9871 = "191_1307835824.98345" 
    assign $P9870, $P9871
    nqp_get_sc_object $P9872, "1307835814.0955", 161
    .const 'Sub' $P9873 = "192_1307835824.98345" 
    assign $P9872, $P9873
    nqp_get_sc_object $P9874, "1307835814.0955", 162
    .const 'Sub' $P9875 = "193_1307835824.98345" 
    assign $P9874, $P9875
    nqp_get_sc_object $P9876, "1307835814.0955", 163
    .const 'Sub' $P9877 = "194_1307835824.98345" 
    assign $P9876, $P9877
    nqp_get_sc_object $P9878, "1307835814.0955", 164
    .const 'Sub' $P9879 = "195_1307835824.98345" 
    assign $P9878, $P9879
    nqp_get_sc_object $P9880, "1307835814.0955", 165
    .const 'Sub' $P9881 = "197_1307835824.98345" 
    assign $P9880, $P9881
    nqp_get_sc_object $P9882, "1307835814.0955", 166
    .const 'Sub' $P9883 = "198_1307835824.98345" 
    assign $P9882, $P9883
    nqp_get_sc_object $P9884, "1307835814.0955", 167
    .const 'Sub' $P9885 = "199_1307835824.98345" 
    assign $P9884, $P9885
    nqp_get_sc_object $P9886, "1307835814.0955", 168
    .const 'Sub' $P9887 = "200_1307835824.98345" 
    assign $P9886, $P9887
    nqp_get_sc_object $P9888, "1307835814.0955", 169
    .const 'Sub' $P9889 = "202_1307835824.98345" 
    assign $P9888, $P9889
    nqp_get_sc_object $P9890, "1307835814.0955", 170
    .const 'Sub' $P9891 = "203_1307835824.98345" 
    assign $P9890, $P9891
    nqp_get_sc_object $P9892, "1307835814.0955", 171
    .const 'Sub' $P9893 = "204_1307835824.98345" 
    assign $P9892, $P9893
    nqp_get_sc_object $P9894, "1307835814.0955", 172
    .const 'Sub' $P9895 = "205_1307835824.98345" 
    assign $P9894, $P9895
    nqp_get_sc_object $P9896, "1307835814.0955", 173
    .const 'Sub' $P9897 = "206_1307835824.98345" 
    assign $P9896, $P9897
    nqp_get_sc_object $P9898, "1307835814.0955", 174
    .const 'Sub' $P9899 = "207_1307835824.98345" 
    assign $P9898, $P9899
    nqp_get_sc_object $P9900, "1307835814.0955", 175
    .const 'Sub' $P9901 = "208_1307835824.98345" 
    assign $P9900, $P9901
    nqp_get_sc_object $P9902, "1307835814.0955", 176
    .const 'Sub' $P9903 = "209_1307835824.98345" 
    assign $P9902, $P9903
    nqp_get_sc_object $P9904, "1307835814.0955", 177
    .const 'Sub' $P9905 = "210_1307835824.98345" 
    assign $P9904, $P9905
    nqp_get_sc_object $P9906, "1307835814.0955", 178
    .const 'Sub' $P9907 = "211_1307835824.98345" 
    assign $P9906, $P9907
    nqp_get_sc_object $P9908, "1307835814.0955", 179
    .const 'Sub' $P9909 = "213_1307835824.98345" 
    assign $P9908, $P9909
    nqp_get_sc_object $P9910, "1307835814.0955", 180
    .const 'Sub' $P9911 = "214_1307835824.98345" 
    assign $P9910, $P9911
    nqp_get_sc_object $P9912, "1307835814.0955", 181
    .const 'Sub' $P9913 = "216_1307835824.98345" 
    assign $P9912, $P9913
    nqp_get_sc_object $P9914, "1307835814.0955", 182
    .const 'Sub' $P9915 = "217_1307835824.98345" 
    assign $P9914, $P9915
    nqp_get_sc_object $P9916, "1307835814.0955", 183
    .const 'Sub' $P9917 = "218_1307835824.98345" 
    assign $P9916, $P9917
    nqp_get_sc_object $P9918, "1307835814.0955", 184
    .const 'Sub' $P9919 = "219_1307835824.98345" 
    assign $P9918, $P9919
    nqp_get_sc_object $P9920, "1307835814.0955", 185
    .const 'Sub' $P9921 = "220_1307835824.98345" 
    assign $P9920, $P9921
    nqp_get_sc_object $P9922, "1307835814.0955", 186
    .const 'Sub' $P9923 = "221_1307835824.98345" 
    assign $P9922, $P9923
    nqp_get_sc_object $P9924, "1307835814.0955", 187
    .const 'Sub' $P9925 = "222_1307835824.98345" 
    assign $P9924, $P9925
    nqp_get_sc_object $P9926, "1307835814.0955", 188
    .const 'Sub' $P9927 = "223_1307835824.98345" 
    assign $P9926, $P9927
    nqp_get_sc_object $P9928, "1307835814.0955", 189
    .const 'Sub' $P9929 = "224_1307835824.98345" 
    assign $P9928, $P9929
    nqp_get_sc_object $P9930, "1307835814.0955", 190
    .const 'Sub' $P9931 = "225_1307835824.98345" 
    assign $P9930, $P9931
    nqp_get_sc_object $P9932, "1307835814.0955", 191
    .const 'Sub' $P9933 = "227_1307835824.98345" 
    assign $P9932, $P9933
    nqp_get_sc_object $P9934, "1307835814.0955", 192
    .const 'Sub' $P9935 = "228_1307835824.98345" 
    assign $P9934, $P9935
    nqp_get_sc_object $P9936, "1307835814.0955", 193
    .const 'Sub' $P9937 = "229_1307835824.98345" 
    assign $P9936, $P9937
    nqp_get_sc_object $P9938, "1307835814.0955", 194
    .const 'Sub' $P9939 = "230_1307835824.98345" 
    assign $P9938, $P9939
    nqp_get_sc_object $P9940, "1307835814.0955", 195
    .const 'Sub' $P9941 = "231_1307835824.98345" 
    assign $P9940, $P9941
    nqp_get_sc_object $P9942, "1307835814.0955", 196
    .const 'Sub' $P9943 = "232_1307835824.98345" 
    assign $P9942, $P9943
    nqp_get_sc_object $P9944, "1307835814.0955", 197
    .const 'Sub' $P9945 = "233_1307835824.98345" 
    assign $P9944, $P9945
    nqp_get_sc_object $P9946, "1307835814.0955", 198
    .const 'Sub' $P9947 = "234_1307835824.98345" 
    assign $P9946, $P9947
    nqp_get_sc_object $P9948, "1307835814.0955", 199
    .const 'Sub' $P9949 = "235_1307835824.98345" 
    assign $P9948, $P9949
    nqp_get_sc_object $P9950, "1307835814.0955", 200
    .const 'Sub' $P9951 = "236_1307835824.98345" 
    assign $P9950, $P9951
    nqp_get_sc_object $P9952, "1307835814.0955", 201
    .const 'Sub' $P9953 = "237_1307835824.98345" 
    assign $P9952, $P9953
    nqp_get_sc_object $P9954, "1307835814.0955", 202
    .const 'Sub' $P9955 = "238_1307835824.98345" 
    assign $P9954, $P9955
    nqp_get_sc_object $P9956, "1307835814.0955", 203
    .const 'Sub' $P9957 = "239_1307835824.98345" 
    assign $P9956, $P9957
    nqp_get_sc_object $P9958, "1307835814.0955", 204
    .const 'Sub' $P9959 = "240_1307835824.98345" 
    assign $P9958, $P9959
    nqp_get_sc_object $P9960, "1307835814.0955", 205
    .const 'Sub' $P9961 = "241_1307835824.98345" 
    assign $P9960, $P9961
    nqp_get_sc_object $P9962, "1307835814.0955", 206
    .const 'Sub' $P9963 = "242_1307835824.98345" 
    assign $P9962, $P9963
    nqp_get_sc_object $P9964, "1307835814.0955", 207
    .const 'Sub' $P9965 = "243_1307835824.98345" 
    assign $P9964, $P9965
    nqp_get_sc_object $P9966, "1307835814.0955", 208
    .const 'Sub' $P9967 = "244_1307835824.98345" 
    assign $P9966, $P9967
    nqp_get_sc_object $P9968, "1307835814.0955", 209
    .const 'Sub' $P9969 = "245_1307835824.98345" 
    assign $P9968, $P9969
    nqp_get_sc_object $P9970, "1307835814.0955", 210
    .const 'Sub' $P9971 = "246_1307835824.98345" 
    assign $P9970, $P9971
    nqp_get_sc_object $P9972, "1307835814.0955", 211
    .const 'Sub' $P9973 = "247_1307835824.98345" 
    assign $P9972, $P9973
    nqp_get_sc_object $P9974, "1307835814.0955", 212
    .const 'Sub' $P9975 = "248_1307835824.98345" 
    assign $P9974, $P9975
    nqp_get_sc_object $P9976, "1307835814.0955", 213
    .const 'Sub' $P9977 = "249_1307835824.98345" 
    assign $P9976, $P9977
    nqp_get_sc_object $P9978, "1307835814.0955", 214
    .const 'Sub' $P9979 = "250_1307835824.98345" 
    assign $P9978, $P9979
    nqp_get_sc_object $P9980, "1307835814.0955", 215
    .const 'Sub' $P9981 = "251_1307835824.98345" 
    assign $P9980, $P9981
    nqp_get_sc_object $P9982, "1307835814.0955", 216
    .const 'Sub' $P9983 = "252_1307835824.98345" 
    assign $P9982, $P9983
    nqp_get_sc_object $P9984, "1307835814.0955", 217
    .const 'Sub' $P9985 = "253_1307835824.98345" 
    assign $P9984, $P9985
    nqp_get_sc_object $P9986, "1307835814.0955", 218
    .const 'Sub' $P9987 = "254_1307835824.98345" 
    assign $P9986, $P9987
    nqp_get_sc_object $P9988, "1307835814.0955", 219
    .const 'Sub' $P9989 = "255_1307835824.98345" 
    assign $P9988, $P9989
    nqp_get_sc_object $P9990, "1307835814.0955", 220
    .const 'Sub' $P9991 = "256_1307835824.98345" 
    assign $P9990, $P9991
    nqp_get_sc_object $P9992, "1307835814.0955", 221
    .const 'Sub' $P9993 = "258_1307835824.98345" 
    assign $P9992, $P9993
    nqp_get_sc_object $P9994, "1307835814.0955", 222
    .const 'Sub' $P9995 = "259_1307835824.98345" 
    assign $P9994, $P9995
    nqp_get_sc_object $P9996, "1307835814.0955", 223
    .const 'Sub' $P9997 = "260_1307835824.98345" 
    assign $P9996, $P9997
    nqp_get_sc_object $P9998, "1307835814.0955", 224
    .const 'Sub' $P9999 = "261_1307835824.98345" 
    assign $P9998, $P9999
    nqp_get_sc_object $P10000, "1307835814.0955", 225
    .const 'Sub' $P10001 = "262_1307835824.98345" 
    assign $P10000, $P10001
    nqp_get_sc_object $P10002, "1307835814.0955", 226
    .const 'Sub' $P10003 = "263_1307835824.98345" 
    assign $P10002, $P10003
    nqp_get_sc_object $P10004, "1307835814.0955", 227
    .const 'Sub' $P10005 = "264_1307835824.98345" 
    assign $P10004, $P10005
    nqp_get_sc_object $P10006, "1307835814.0955", 228
    .const 'Sub' $P10007 = "265_1307835824.98345" 
    assign $P10006, $P10007
    nqp_get_sc_object $P10008, "1307835814.0955", 229
    .const 'Sub' $P10009 = "266_1307835824.98345" 
    assign $P10008, $P10009
    nqp_get_sc_object $P10010, "1307835814.0955", 230
    .const 'Sub' $P10011 = "267_1307835824.98345" 
    assign $P10010, $P10011
    nqp_get_sc_object $P10012, "1307835814.0955", 231
    .const 'Sub' $P10013 = "268_1307835824.98345" 
    assign $P10012, $P10013
    nqp_get_sc_object $P10014, "1307835814.0955", 232
    .const 'Sub' $P10015 = "269_1307835824.98345" 
    assign $P10014, $P10015
    nqp_get_sc_object $P10016, "1307835814.0955", 233
    .const 'Sub' $P10017 = "270_1307835824.98345" 
    assign $P10016, $P10017
    nqp_get_sc_object $P10018, "1307835814.0955", 234
    .const 'Sub' $P10019 = "271_1307835824.98345" 
    assign $P10018, $P10019
    nqp_get_sc_object $P10020, "1307835814.0955", 235
    .const 'Sub' $P10021 = "272_1307835824.98345" 
    assign $P10020, $P10021
    nqp_get_sc_object $P10022, "1307835814.0955", 236
    .const 'Sub' $P10023 = "273_1307835824.98345" 
    assign $P10022, $P10023
    nqp_get_sc_object $P10024, "1307835814.0955", 237
    .const 'Sub' $P10025 = "274_1307835824.98345" 
    assign $P10024, $P10025
    nqp_get_sc_object $P10026, "1307835814.0955", 238
    .const 'Sub' $P10027 = "275_1307835824.98345" 
    assign $P10026, $P10027
    nqp_get_sc_object $P10028, "1307835814.0955", 239
    .const 'Sub' $P10029 = "276_1307835824.98345" 
    assign $P10028, $P10029
    nqp_get_sc_object $P10030, "1307835814.0955", 240
    .const 'Sub' $P10031 = "277_1307835824.98345" 
    assign $P10030, $P10031
    nqp_get_sc_object $P10032, "1307835814.0955", 241
    .const 'Sub' $P10033 = "278_1307835824.98345" 
    assign $P10032, $P10033
    nqp_get_sc_object $P10034, "1307835814.0955", 242
    .const 'Sub' $P10035 = "279_1307835824.98345" 
    assign $P10034, $P10035
    nqp_get_sc_object $P10036, "1307835814.0955", 243
    .const 'Sub' $P10037 = "280_1307835824.98345" 
    assign $P10036, $P10037
    nqp_get_sc_object $P10038, "1307835814.0955", 244
    .const 'Sub' $P10039 = "281_1307835824.98345" 
    assign $P10038, $P10039
    nqp_get_sc_object $P10040, "1307835814.0955", 245
    .const 'Sub' $P10041 = "282_1307835824.98345" 
    assign $P10040, $P10041
    nqp_get_sc_object $P10042, "1307835814.0955", 246
    .const 'Sub' $P10043 = "283_1307835824.98345" 
    assign $P10042, $P10043
    nqp_get_sc_object $P10044, "1307835814.0955", 247
    .const 'Sub' $P10045 = "284_1307835824.98345" 
    assign $P10044, $P10045
    nqp_get_sc_object $P10046, "1307835814.0955", 248
    .const 'Sub' $P10047 = "285_1307835824.98345" 
    assign $P10046, $P10047
    nqp_get_sc_object $P10048, "1307835814.0955", 249
    .const 'Sub' $P10049 = "286_1307835824.98345" 
    assign $P10048, $P10049
    nqp_get_sc_object $P10050, "1307835814.0955", 250
    .const 'Sub' $P10051 = "287_1307835824.98345" 
    assign $P10050, $P10051
    nqp_get_sc_object $P10052, "1307835814.0955", 251
    .const 'Sub' $P10053 = "288_1307835824.98345" 
    assign $P10052, $P10053
    nqp_get_sc_object $P10054, "1307835814.0955", 252
    .const 'Sub' $P10055 = "289_1307835824.98345" 
    assign $P10054, $P10055
    nqp_get_sc_object $P10056, "1307835814.0955", 253
    .const 'Sub' $P10057 = "290_1307835824.98345" 
    assign $P10056, $P10057
    nqp_get_sc_object $P10058, "1307835814.0955", 254
    .const 'Sub' $P10059 = "291_1307835824.98345" 
    assign $P10058, $P10059
    nqp_get_sc_object $P10060, "1307835814.0955", 255
    .const 'Sub' $P10061 = "292_1307835824.98345" 
    assign $P10060, $P10061
    nqp_get_sc_object $P10062, "1307835814.0955", 256
    .const 'Sub' $P10063 = "293_1307835824.98345" 
    assign $P10062, $P10063
    nqp_get_sc_object $P10064, "1307835814.0955", 257
    .const 'Sub' $P10065 = "294_1307835824.98345" 
    assign $P10064, $P10065
    nqp_get_sc_object $P10066, "1307835814.0955", 258
    .const 'Sub' $P10067 = "295_1307835824.98345" 
    assign $P10066, $P10067
    nqp_get_sc_object $P10068, "1307835814.0955", 259
    .const 'Sub' $P10069 = "296_1307835824.98345" 
    assign $P10068, $P10069
    nqp_get_sc_object $P10070, "1307835814.0955", 260
    .const 'Sub' $P10071 = "297_1307835824.98345" 
    assign $P10070, $P10071
    nqp_get_sc_object $P10072, "1307835814.0955", 261
    .const 'Sub' $P10073 = "298_1307835824.98345" 
    assign $P10072, $P10073
    nqp_get_sc_object $P10074, "1307835814.0955", 262
    .const 'Sub' $P10075 = "299_1307835824.98345" 
    assign $P10074, $P10075
    nqp_get_sc_object $P10076, "1307835814.0955", 263
    .const 'Sub' $P10077 = "300_1307835824.98345" 
    assign $P10076, $P10077
    nqp_get_sc_object $P10078, "1307835814.0955", 264
    .const 'Sub' $P10079 = "301_1307835824.98345" 
    assign $P10078, $P10079
    nqp_get_sc_object $P10080, "1307835814.0955", 265
    .const 'Sub' $P10081 = "302_1307835824.98345" 
    assign $P10080, $P10081
    nqp_get_sc_object $P10082, "1307835814.0955", 266
    .const 'Sub' $P10083 = "303_1307835824.98345" 
    assign $P10082, $P10083
    nqp_get_sc_object $P10084, "1307835814.0955", 267
    .const 'Sub' $P10085 = "304_1307835824.98345" 
    assign $P10084, $P10085
    nqp_get_sc_object $P10086, "1307835814.0955", 268
    .const 'Sub' $P10087 = "305_1307835824.98345" 
    assign $P10086, $P10087
    nqp_get_sc_object $P10088, "1307835814.0955", 269
    .const 'Sub' $P10089 = "306_1307835824.98345" 
    assign $P10088, $P10089
    nqp_get_sc_object $P10090, "1307835814.0955", 270
    .const 'Sub' $P10091 = "307_1307835824.98345" 
    assign $P10090, $P10091
    nqp_get_sc_object $P10092, "1307835814.0955", 271
    .const 'Sub' $P10093 = "308_1307835824.98345" 
    assign $P10092, $P10093
    nqp_get_sc_object $P10094, "1307835814.0955", 272
    .const 'Sub' $P10095 = "309_1307835824.98345" 
    assign $P10094, $P10095
    nqp_get_sc_object $P10096, "1307835814.0955", 273
    .const 'Sub' $P10097 = "310_1307835824.98345" 
    assign $P10096, $P10097
    nqp_get_sc_object $P10098, "1307835814.0955", 274
    .const 'Sub' $P10099 = "311_1307835824.98345" 
    assign $P10098, $P10099
    nqp_get_sc_object $P10100, "1307835814.0955", 275
    .const 'Sub' $P10101 = "312_1307835824.98345" 
    assign $P10100, $P10101
    nqp_get_sc_object $P10102, "1307835814.0955", 276
    .const 'Sub' $P10103 = "313_1307835824.98345" 
    assign $P10102, $P10103
    nqp_get_sc_object $P10104, "1307835814.0955", 277
    .const 'Sub' $P10105 = "314_1307835824.98345" 
    assign $P10104, $P10105
    nqp_get_sc_object $P10106, "1307835814.0955", 278
    .const 'Sub' $P10107 = "315_1307835824.98345" 
    assign $P10106, $P10107
    nqp_get_sc_object $P10108, "1307835814.0955", 279
    .const 'Sub' $P10109 = "316_1307835824.98345" 
    assign $P10108, $P10109
    nqp_get_sc_object $P10110, "1307835814.0955", 280
    .const 'Sub' $P10111 = "317_1307835824.98345" 
    assign $P10110, $P10111
    nqp_get_sc_object $P10112, "1307835814.0955", 281
    .const 'Sub' $P10113 = "318_1307835824.98345" 
    assign $P10112, $P10113
    nqp_get_sc_object $P10114, "1307835814.0955", 282
    .const 'Sub' $P10115 = "319_1307835824.98345" 
    assign $P10114, $P10115
    nqp_get_sc_object $P10116, "1307835814.0955", 283
    .const 'Sub' $P10117 = "320_1307835824.98345" 
    assign $P10116, $P10117
    nqp_get_sc_object $P10118, "1307835814.0955", 284
    .const 'Sub' $P10119 = "321_1307835824.98345" 
    assign $P10118, $P10119
    nqp_get_sc_object $P10120, "1307835814.0955", 285
    .const 'Sub' $P10121 = "322_1307835824.98345" 
    assign $P10120, $P10121
    nqp_get_sc_object $P10122, "1307835814.0955", 286
    .const 'Sub' $P10123 = "323_1307835824.98345" 
    assign $P10122, $P10123
    nqp_get_sc_object $P10124, "1307835814.0955", 287
    .const 'Sub' $P10125 = "324_1307835824.98345" 
    assign $P10124, $P10125
    nqp_get_sc_object $P10126, "1307835814.0955", 288
    .const 'Sub' $P10127 = "325_1307835824.98345" 
    assign $P10126, $P10127
    nqp_get_sc_object $P10128, "1307835814.0955", 289
    .const 'Sub' $P10129 = "326_1307835824.98345" 
    assign $P10128, $P10129
    nqp_get_sc_object $P10130, "1307835814.0955", 290
    .const 'Sub' $P10131 = "327_1307835824.98345" 
    assign $P10130, $P10131
    nqp_get_sc_object $P10132, "1307835814.0955", 291
    .const 'Sub' $P10133 = "328_1307835824.98345" 
    assign $P10132, $P10133
    nqp_get_sc_object $P10134, "1307835814.0955", 292
    .const 'Sub' $P10135 = "329_1307835824.98345" 
    assign $P10134, $P10135
    nqp_get_sc_object $P10136, "1307835814.0955", 293
    .const 'Sub' $P10137 = "330_1307835824.98345" 
    assign $P10136, $P10137
    nqp_get_sc_object $P10138, "1307835814.0955", 294
    .const 'Sub' $P10139 = "331_1307835824.98345" 
    assign $P10138, $P10139
    nqp_get_sc_object $P10140, "1307835814.0955", 295
    .const 'Sub' $P10141 = "332_1307835824.98345" 
    assign $P10140, $P10141
    nqp_get_sc_object $P10142, "1307835814.0955", 296
    .const 'Sub' $P10143 = "333_1307835824.98345" 
    assign $P10142, $P10143
    nqp_get_sc_object $P10144, "1307835814.0955", 297
    .const 'Sub' $P10145 = "334_1307835824.98345" 
    assign $P10144, $P10145
    nqp_get_sc_object $P10146, "1307835814.0955", 298
    .const 'Sub' $P10147 = "335_1307835824.98345" 
    assign $P10146, $P10147
    nqp_get_sc_object $P10148, "1307835814.0955", 299
    .const 'Sub' $P10149 = "336_1307835824.98345" 
    assign $P10148, $P10149
    nqp_get_sc_object $P10150, "1307835814.0955", 300
    .const 'Sub' $P10151 = "337_1307835824.98345" 
    assign $P10150, $P10151
    nqp_get_sc_object $P10152, "1307835814.0955", 301
    .const 'Sub' $P10153 = "338_1307835824.98345" 
    assign $P10152, $P10153
    nqp_get_sc_object $P10154, "1307835814.0955", 302
    .const 'Sub' $P10155 = "339_1307835824.98345" 
    assign $P10154, $P10155
    nqp_get_sc_object $P10156, "1307835814.0955", 303
    .const 'Sub' $P10157 = "340_1307835824.98345" 
    assign $P10156, $P10157
    nqp_get_sc_object $P10158, "1307835814.0955", 304
    .const 'Sub' $P10159 = "341_1307835824.98345" 
    assign $P10158, $P10159
    nqp_get_sc_object $P10160, "1307835814.0955", 305
    .const 'Sub' $P10161 = "342_1307835824.98345" 
    assign $P10160, $P10161
    nqp_get_sc_object $P10162, "1307835814.0955", 306
    .const 'Sub' $P10163 = "343_1307835824.98345" 
    assign $P10162, $P10163
    nqp_get_sc_object $P10164, "1307835814.0955", 307
    .const 'Sub' $P10165 = "344_1307835824.98345" 
    assign $P10164, $P10165
    nqp_get_sc_object $P10166, "1307835814.0955", 308
    .const 'Sub' $P10167 = "345_1307835824.98345" 
    assign $P10166, $P10167
    nqp_get_sc_object $P10168, "1307835814.0955", 309
    .const 'Sub' $P10169 = "346_1307835824.98345" 
    assign $P10168, $P10169
    nqp_get_sc_object $P10170, "1307835814.0955", 310
    .const 'Sub' $P10171 = "347_1307835824.98345" 
    assign $P10170, $P10171
    nqp_get_sc_object $P10172, "1307835814.0955", 311
    .const 'Sub' $P10173 = "348_1307835824.98345" 
    assign $P10172, $P10173
    nqp_get_sc_object $P10174, "1307835814.0955", 312
    .const 'Sub' $P10175 = "349_1307835824.98345" 
    assign $P10174, $P10175
    nqp_get_sc_object $P10176, "1307835814.0955", 313
    .const 'Sub' $P10177 = "350_1307835824.98345" 
    assign $P10176, $P10177
    nqp_get_sc_object $P10178, "1307835814.0955", 314
    .const 'Sub' $P10179 = "351_1307835824.98345" 
    assign $P10178, $P10179
    nqp_get_sc_object $P10180, "1307835814.0955", 315
    .const 'Sub' $P10181 = "352_1307835824.98345" 
    assign $P10180, $P10181
    nqp_get_sc_object $P10182, "1307835814.0955", 316
    .const 'Sub' $P10183 = "353_1307835824.98345" 
    assign $P10182, $P10183
    nqp_get_sc_object $P10184, "1307835814.0955", 317
    .const 'Sub' $P10185 = "354_1307835824.98345" 
    assign $P10184, $P10185
    nqp_get_sc_object $P10186, "1307835814.0955", 318
    .const 'Sub' $P10187 = "355_1307835824.98345" 
    assign $P10186, $P10187
    nqp_get_sc_object $P10188, "1307835814.0955", 319
    .const 'Sub' $P10189 = "356_1307835824.98345" 
    assign $P10188, $P10189
    nqp_get_sc_object $P10190, "1307835814.0955", 320
    .const 'Sub' $P10191 = "357_1307835824.98345" 
    assign $P10190, $P10191
    nqp_get_sc_object $P10192, "1307835814.0955", 321
    .const 'Sub' $P10193 = "358_1307835824.98345" 
    assign $P10192, $P10193
    nqp_get_sc_object $P10194, "1307835814.0955", 322
    .const 'Sub' $P10195 = "359_1307835824.98345" 
    assign $P10194, $P10195
    nqp_get_sc_object $P10196, "1307835814.0955", 323
    .const 'Sub' $P10197 = "360_1307835824.98345" 
    assign $P10196, $P10197
    nqp_get_sc_object $P10198, "1307835814.0955", 324
    .const 'Sub' $P10199 = "361_1307835824.98345" 
    assign $P10198, $P10199
    nqp_get_sc_object $P10200, "1307835814.0955", 325
    .const 'Sub' $P10201 = "362_1307835824.98345" 
    assign $P10200, $P10201
    nqp_get_sc_object $P10202, "1307835814.0955", 326
    .const 'Sub' $P10203 = "363_1307835824.98345" 
    assign $P10202, $P10203
    nqp_get_sc_object $P10204, "1307835814.0955", 327
    .const 'Sub' $P10205 = "364_1307835824.98345" 
    assign $P10204, $P10205
    nqp_get_sc_object $P10206, "1307835814.0955", 328
    .const 'Sub' $P10207 = "365_1307835824.98345" 
    assign $P10206, $P10207
    nqp_get_sc_object $P10208, "1307835814.0955", 329
    .const 'Sub' $P10209 = "366_1307835824.98345" 
    assign $P10208, $P10209
    nqp_get_sc_object $P10210, "1307835814.0955", 330
    .const 'Sub' $P10211 = "367_1307835824.98345" 
    assign $P10210, $P10211
    nqp_get_sc_object $P10212, "1307835814.0955", 331
    .const 'Sub' $P10213 = "368_1307835824.98345" 
    assign $P10212, $P10213
    nqp_get_sc_object $P10214, "1307835814.0955", 332
    .const 'Sub' $P10215 = "369_1307835824.98345" 
    assign $P10214, $P10215
    nqp_get_sc_object $P10216, "1307835814.0955", 333
    .const 'Sub' $P10217 = "370_1307835824.98345" 
    assign $P10216, $P10217
    nqp_get_sc_object $P10218, "1307835814.0955", 334
    .const 'Sub' $P10219 = "371_1307835824.98345" 
    assign $P10218, $P10219
    nqp_get_sc_object $P10220, "1307835814.0955", 335
    .const 'Sub' $P10221 = "372_1307835824.98345" 
    assign $P10220, $P10221
    nqp_get_sc_object $P10222, "1307835814.0955", 336
    .const 'Sub' $P10223 = "373_1307835824.98345" 
    assign $P10222, $P10223
    nqp_get_sc_object $P10224, "1307835814.0955", 337
    .const 'Sub' $P10225 = "374_1307835824.98345" 
    assign $P10224, $P10225
    nqp_get_sc_object $P10226, "1307835814.0955", 338
    .const 'Sub' $P10227 = "375_1307835824.98345" 
    assign $P10226, $P10227
    nqp_get_sc_object $P10228, "1307835814.0955", 339
    .const 'Sub' $P10229 = "376_1307835824.98345" 
    assign $P10228, $P10229
    nqp_get_sc_object $P10230, "1307835814.0955", 340
    .const 'Sub' $P10231 = "377_1307835824.98345" 
    assign $P10230, $P10231
    nqp_get_sc_object $P10232, "1307835814.0955", 341
    .const 'Sub' $P10233 = "378_1307835824.98345" 
    assign $P10232, $P10233
    nqp_get_sc_object $P10234, "1307835814.0955", 342
    .const 'Sub' $P10235 = "379_1307835824.98345" 
    assign $P10234, $P10235
    nqp_get_sc_object $P10236, "1307835814.0955", 343
    .const 'Sub' $P10237 = "380_1307835824.98345" 
    assign $P10236, $P10237
    nqp_get_sc_object $P10238, "1307835814.0955", 344
    .const 'Sub' $P10239 = "381_1307835824.98345" 
    assign $P10238, $P10239
    nqp_get_sc_object $P10240, "1307835814.0955", 345
    .const 'Sub' $P10241 = "382_1307835824.98345" 
    assign $P10240, $P10241
    nqp_get_sc_object $P10242, "1307835814.0955", 346
    .const 'Sub' $P10243 = "383_1307835824.98345" 
    assign $P10242, $P10243
    nqp_get_sc_object $P10244, "1307835814.0955", 347
    .const 'Sub' $P10245 = "384_1307835824.98345" 
    assign $P10244, $P10245
    nqp_get_sc_object $P10246, "1307835814.0955", 348
    .const 'Sub' $P10247 = "385_1307835824.98345" 
    assign $P10246, $P10247
    nqp_get_sc_object $P10248, "1307835814.0955", 349
    .const 'Sub' $P10249 = "386_1307835824.98345" 
    assign $P10248, $P10249
    nqp_get_sc_object $P10250, "1307835814.0955", 350
    .const 'Sub' $P10251 = "387_1307835824.98345" 
    assign $P10250, $P10251
    nqp_get_sc_object $P10252, "1307835814.0955", 351
    .const 'Sub' $P10253 = "388_1307835824.98345" 
    assign $P10252, $P10253
    nqp_get_sc_object $P10254, "1307835814.0955", 352
    .const 'Sub' $P10255 = "389_1307835824.98345" 
    assign $P10254, $P10255
    nqp_get_sc_object $P10256, "1307835814.0955", 353
    .const 'Sub' $P10257 = "390_1307835824.98345" 
    assign $P10256, $P10257
    nqp_get_sc_object $P10258, "1307835814.0955", 354
    .const 'Sub' $P10259 = "391_1307835824.98345" 
    assign $P10258, $P10259
    nqp_get_sc_object $P10260, "1307835814.0955", 355
    .const 'Sub' $P10261 = "392_1307835824.98345" 
    assign $P10260, $P10261
    nqp_get_sc_object $P10262, "1307835814.0955", 356
    .const 'Sub' $P10263 = "393_1307835824.98345" 
    assign $P10262, $P10263
    nqp_get_sc_object $P10264, "1307835814.0955", 357
    .const 'Sub' $P10265 = "394_1307835824.98345" 
    assign $P10264, $P10265
    nqp_get_sc_object $P10266, "1307835814.0955", 358
    .const 'Sub' $P10267 = "395_1307835824.98345" 
    assign $P10266, $P10267
    nqp_get_sc_object $P10268, "1307835814.0955", 359
    .const 'Sub' $P10269 = "396_1307835824.98345" 
    assign $P10268, $P10269
    nqp_get_sc_object $P10270, "1307835814.0955", 360
    .const 'Sub' $P10271 = "397_1307835824.98345" 
    assign $P10270, $P10271
    nqp_get_sc_object $P10272, "1307835814.0955", 361
    .const 'Sub' $P10273 = "398_1307835824.98345" 
    assign $P10272, $P10273
    nqp_get_sc_object $P10274, "1307835814.0955", 362
    .const 'Sub' $P10275 = "399_1307835824.98345" 
    assign $P10274, $P10275
    nqp_get_sc_object $P10276, "1307835814.0955", 363
    .const 'Sub' $P10277 = "400_1307835824.98345" 
    assign $P10276, $P10277
    nqp_get_sc_object $P10278, "1307835814.0955", 364
    .const 'Sub' $P10279 = "401_1307835824.98345" 
    assign $P10278, $P10279
    nqp_get_sc_object $P10280, "1307835814.0955", 365
    .const 'Sub' $P10281 = "402_1307835824.98345" 
    assign $P10280, $P10281
    nqp_get_sc_object $P10282, "1307835814.0955", 366
    .const 'Sub' $P10283 = "403_1307835824.98345" 
    assign $P10282, $P10283
    nqp_get_sc_object $P10284, "1307835814.0955", 367
    .const 'Sub' $P10285 = "405_1307835824.98345" 
    assign $P10284, $P10285
    nqp_get_sc_object $P10286, "1307835814.0955", 368
    .const 'Sub' $P10287 = "406_1307835824.98345" 
    assign $P10286, $P10287
    nqp_get_sc_object $P10288, "1307835814.0955", 369
    .const 'Sub' $P10289 = "407_1307835824.98345" 
    assign $P10288, $P10289
    nqp_get_sc_object $P10290, "1307835814.0955", 370
    .const 'Sub' $P10291 = "408_1307835824.98345" 
    assign $P10290, $P10291
    nqp_get_sc_object $P10292, "1307835814.0955", 371
    .const 'Sub' $P10293 = "409_1307835824.98345" 
    assign $P10292, $P10293
    nqp_get_sc_object $P10294, "1307835814.0955", 372
    .const 'Sub' $P10295 = "410_1307835824.98345" 
    assign $P10294, $P10295
    nqp_get_sc_object $P10296, "1307835814.0955", 373
    .const 'Sub' $P10297 = "411_1307835824.98345" 
    assign $P10296, $P10297
    nqp_get_sc_object $P10298, "1307835814.0955", 374
    .const 'Sub' $P10299 = "412_1307835824.98345" 
    assign $P10298, $P10299
    nqp_get_sc_object $P10300, "1307835814.0955", 375
    .const 'Sub' $P10301 = "413_1307835824.98345" 
    assign $P10300, $P10301
    nqp_get_sc_object $P10302, "1307835814.0955", 376
    .const 'Sub' $P10303 = "414_1307835824.98345" 
    assign $P10302, $P10303
    .const 'Sub' $P10304 = "40_1307835824.98345" 
    $P10305 = $P10304."get_lexinfo"()
    nqp_get_sc_object $P10306, "1307835814.0955", 16
    $P10305."set_static_lexpad_value"("$?PACKAGE", $P10306)
    .const 'Sub' $P10307 = "40_1307835824.98345" 
    $P10308 = $P10307."get_lexinfo"()
    $P10308."finish_static_lexpad"()
    .const 'Sub' $P10309 = "40_1307835824.98345" 
    $P10310 = $P10309."get_lexinfo"()
    nqp_get_sc_object $P10311, "1307835814.0955", 16
    $P10310."set_static_lexpad_value"("$?CLASS", $P10311)
    .const 'Sub' $P10312 = "40_1307835824.98345" 
    $P10313 = $P10312."get_lexinfo"()
    $P10313."finish_static_lexpad"()
    nqp_get_sc_object $P10314, "1307835814.0955", 378
    .const 'Sub' $P10315 = "416_1307835824.98345" 
    assign $P10314, $P10315
    nqp_get_sc_object $P10316, "1307835814.0955", 379
    .const 'Sub' $P10317 = "418_1307835824.98345" 
    assign $P10316, $P10317
    nqp_get_sc_object $P10318, "1307835814.0955", 380
    .const 'Sub' $P10319 = "419_1307835824.98345" 
    assign $P10318, $P10319
    nqp_get_sc_object $P10320, "1307835814.0955", 381
    .const 'Sub' $P10321 = "420_1307835824.98345" 
    assign $P10320, $P10321
    nqp_get_sc_object $P10322, "1307835814.0955", 382
    .const 'Sub' $P10323 = "421_1307835824.98345" 
    assign $P10322, $P10323
    nqp_get_sc_object $P10324, "1307835814.0955", 383
    .const 'Sub' $P10325 = "423_1307835824.98345" 
    assign $P10324, $P10325
    nqp_get_sc_object $P10326, "1307835814.0955", 384
    .const 'Sub' $P10327 = "424_1307835824.98345" 
    assign $P10326, $P10327
    nqp_get_sc_object $P10328, "1307835814.0955", 385
    .const 'Sub' $P10329 = "425_1307835824.98345" 
    assign $P10328, $P10329
    nqp_get_sc_object $P10330, "1307835814.0955", 386
    .const 'Sub' $P10331 = "426_1307835824.98345" 
    assign $P10330, $P10331
    nqp_get_sc_object $P10332, "1307835814.0955", 387
    .const 'Sub' $P10333 = "428_1307835824.98345" 
    assign $P10332, $P10333
    nqp_get_sc_object $P10334, "1307835814.0955", 388
    .const 'Sub' $P10335 = "429_1307835824.98345" 
    assign $P10334, $P10335
    nqp_get_sc_object $P10336, "1307835814.0955", 389
    .const 'Sub' $P10337 = "431_1307835824.98345" 
    assign $P10336, $P10337
    nqp_get_sc_object $P10338, "1307835814.0955", 390
    .const 'Sub' $P10339 = "432_1307835824.98345" 
    assign $P10338, $P10339
    nqp_get_sc_object $P10340, "1307835814.0955", 391
    .const 'Sub' $P10341 = "433_1307835824.98345" 
    assign $P10340, $P10341
    nqp_get_sc_object $P10342, "1307835814.0955", 392
    .const 'Sub' $P10343 = "434_1307835824.98345" 
    assign $P10342, $P10343
    nqp_get_sc_object $P10344, "1307835814.0955", 393
    .const 'Sub' $P10345 = "435_1307835824.98345" 
    assign $P10344, $P10345
    .const 'Sub' $P10346 = "415_1307835824.98345" 
    $P10347 = $P10346."get_lexinfo"()
    nqp_get_sc_object $P10348, "1307835814.0955", 377
    $P10347."set_static_lexpad_value"("$?PACKAGE", $P10348)
    .const 'Sub' $P10349 = "415_1307835824.98345" 
    $P10350 = $P10349."get_lexinfo"()
    $P10350."finish_static_lexpad"()
    .const 'Sub' $P10351 = "415_1307835824.98345" 
    $P10352 = $P10351."get_lexinfo"()
    nqp_get_sc_object $P10353, "1307835814.0955", 377
    $P10352."set_static_lexpad_value"("$?CLASS", $P10353)
    .const 'Sub' $P10354 = "415_1307835824.98345" 
    $P10355 = $P10354."get_lexinfo"()
    $P10355."finish_static_lexpad"()
    nqp_get_sc_object $P10356, "1307835814.0955", 395
    .const 'Sub' $P10357 = "463_1307835824.98345" 
    assign $P10356, $P10357
    nqp_get_sc_object $P10358, "1307835814.0955", 396
    .const 'Sub' $P10359 = "464_1307835824.98345" 
    assign $P10358, $P10359
    nqp_get_sc_object $P10360, "1307835814.0955", 397
    .const 'Sub' $P10361 = "465_1307835824.98345" 
    assign $P10360, $P10361
    nqp_get_sc_object $P10362, "1307835814.0955", 398
    .const 'Sub' $P10363 = "467_1307835824.98345" 
    assign $P10362, $P10363
    nqp_get_sc_object $P10364, "1307835814.0955", 399
    .const 'Sub' $P10365 = "469_1307835824.98345" 
    assign $P10364, $P10365
    nqp_get_sc_object $P10366, "1307835814.0955", 400
    .const 'Sub' $P10367 = "471_1307835824.98345" 
    assign $P10366, $P10367
    nqp_get_sc_object $P10368, "1307835814.0955", 401
    .const 'Sub' $P10369 = "472_1307835824.98345" 
    assign $P10368, $P10369
    nqp_get_sc_object $P10370, "1307835814.0955", 402
    .const 'Sub' $P10371 = "473_1307835824.98345" 
    assign $P10370, $P10371
    nqp_get_sc_object $P10372, "1307835814.0955", 403
    .const 'Sub' $P10373 = "474_1307835824.98345" 
    assign $P10372, $P10373
    nqp_get_sc_object $P10374, "1307835814.0955", 404
    .const 'Sub' $P10375 = "476_1307835824.98345" 
    assign $P10374, $P10375
    nqp_get_sc_object $P10376, "1307835814.0955", 405
    .const 'Sub' $P10377 = "477_1307835824.98345" 
    assign $P10376, $P10377
    nqp_get_sc_object $P10378, "1307835814.0955", 406
    .const 'Sub' $P10379 = "479_1307835824.98345" 
    assign $P10378, $P10379
    nqp_get_sc_object $P10380, "1307835814.0955", 407
    .const 'Sub' $P10381 = "480_1307835824.98345" 
    assign $P10380, $P10381
    nqp_get_sc_object $P10382, "1307835814.0955", 408
    .const 'Sub' $P10383 = "481_1307835824.98345" 
    assign $P10382, $P10383
    nqp_get_sc_object $P10384, "1307835814.0955", 409
    .const 'Sub' $P10385 = "482_1307835824.98345" 
    assign $P10384, $P10385
    nqp_get_sc_object $P10386, "1307835814.0955", 410
    .const 'Sub' $P10387 = "484_1307835824.98345" 
    assign $P10386, $P10387
    nqp_get_sc_object $P10388, "1307835814.0955", 411
    .const 'Sub' $P10389 = "485_1307835824.98345" 
    assign $P10388, $P10389
    nqp_get_sc_object $P10390, "1307835814.0955", 412
    .const 'Sub' $P10391 = "486_1307835824.98345" 
    assign $P10390, $P10391
    nqp_get_sc_object $P10392, "1307835814.0955", 413
    .const 'Sub' $P10393 = "487_1307835824.98345" 
    assign $P10392, $P10393
    nqp_get_sc_object $P10394, "1307835814.0955", 414
    .const 'Sub' $P10395 = "488_1307835824.98345" 
    assign $P10394, $P10395
    nqp_get_sc_object $P10396, "1307835814.0955", 415
    .const 'Sub' $P10397 = "489_1307835824.98345" 
    assign $P10396, $P10397
    nqp_get_sc_object $P10398, "1307835814.0955", 416
    .const 'Sub' $P10399 = "490_1307835824.98345" 
    assign $P10398, $P10399
    nqp_get_sc_object $P10400, "1307835814.0955", 417
    .const 'Sub' $P10401 = "491_1307835824.98345" 
    assign $P10400, $P10401
    nqp_get_sc_object $P10402, "1307835814.0955", 418
    .const 'Sub' $P10403 = "492_1307835824.98345" 
    assign $P10402, $P10403
    nqp_get_sc_object $P10404, "1307835814.0955", 419
    .const 'Sub' $P10405 = "493_1307835824.98345" 
    assign $P10404, $P10405
    nqp_get_sc_object $P10406, "1307835814.0955", 420
    .const 'Sub' $P10407 = "494_1307835824.98345" 
    assign $P10406, $P10407
    nqp_get_sc_object $P10408, "1307835814.0955", 421
    .const 'Sub' $P10409 = "495_1307835824.98345" 
    assign $P10408, $P10409
    nqp_get_sc_object $P10410, "1307835814.0955", 422
    .const 'Sub' $P10411 = "496_1307835824.98345" 
    assign $P10410, $P10411
    nqp_get_sc_object $P10412, "1307835814.0955", 423
    .const 'Sub' $P10413 = "497_1307835824.98345" 
    assign $P10412, $P10413
    nqp_get_sc_object $P10414, "1307835814.0955", 424
    .const 'Sub' $P10415 = "498_1307835824.98345" 
    assign $P10414, $P10415
    nqp_get_sc_object $P10416, "1307835814.0955", 425
    .const 'Sub' $P10417 = "499_1307835824.98345" 
    assign $P10416, $P10417
    nqp_get_sc_object $P10418, "1307835814.0955", 426
    .const 'Sub' $P10419 = "500_1307835824.98345" 
    assign $P10418, $P10419
    nqp_get_sc_object $P10420, "1307835814.0955", 427
    .const 'Sub' $P10421 = "501_1307835824.98345" 
    assign $P10420, $P10421
    nqp_get_sc_object $P10422, "1307835814.0955", 428
    .const 'Sub' $P10423 = "502_1307835824.98345" 
    assign $P10422, $P10423
    nqp_get_sc_object $P10424, "1307835814.0955", 429
    .const 'Sub' $P10425 = "503_1307835824.98345" 
    assign $P10424, $P10425
    nqp_get_sc_object $P10426, "1307835814.0955", 430
    .const 'Sub' $P10427 = "504_1307835824.98345" 
    assign $P10426, $P10427
    nqp_get_sc_object $P10428, "1307835814.0955", 431
    .const 'Sub' $P10429 = "505_1307835824.98345" 
    assign $P10428, $P10429
    nqp_get_sc_object $P10430, "1307835814.0955", 432
    .const 'Sub' $P10431 = "506_1307835824.98345" 
    assign $P10430, $P10431
    nqp_get_sc_object $P10432, "1307835814.0955", 433
    .const 'Sub' $P10433 = "507_1307835824.98345" 
    assign $P10432, $P10433
    nqp_get_sc_object $P10434, "1307835814.0955", 434
    .const 'Sub' $P10435 = "508_1307835824.98345" 
    assign $P10434, $P10435
    nqp_get_sc_object $P10436, "1307835814.0955", 435
    .const 'Sub' $P10437 = "514_1307835824.98345" 
    assign $P10436, $P10437
    nqp_get_sc_object $P10438, "1307835814.0955", 436
    .const 'Sub' $P10439 = "515_1307835824.98345" 
    assign $P10438, $P10439
    nqp_get_sc_object $P10440, "1307835814.0955", 437
    .const 'Sub' $P10441 = "516_1307835824.98345" 
    assign $P10440, $P10441
    nqp_get_sc_object $P10442, "1307835814.0955", 438
    .const 'Sub' $P10443 = "517_1307835824.98345" 
    assign $P10442, $P10443
    nqp_get_sc_object $P10444, "1307835814.0955", 439
    .const 'Sub' $P10445 = "518_1307835824.98345" 
    assign $P10444, $P10445
    nqp_get_sc_object $P10446, "1307835814.0955", 440
    .const 'Sub' $P10447 = "519_1307835824.98345" 
    assign $P10446, $P10447
    nqp_get_sc_object $P10448, "1307835814.0955", 441
    .const 'Sub' $P10449 = "520_1307835824.98345" 
    assign $P10448, $P10449
    nqp_get_sc_object $P10450, "1307835814.0955", 442
    .const 'Sub' $P10451 = "521_1307835824.98345" 
    assign $P10450, $P10451
    nqp_get_sc_object $P10452, "1307835814.0955", 443
    .const 'Sub' $P10453 = "527_1307835824.98345" 
    assign $P10452, $P10453
    nqp_get_sc_object $P10454, "1307835814.0955", 444
    .const 'Sub' $P10455 = "528_1307835824.98345" 
    assign $P10454, $P10455
    nqp_get_sc_object $P10456, "1307835814.0955", 445
    .const 'Sub' $P10457 = "529_1307835824.98345" 
    assign $P10456, $P10457
    nqp_get_sc_object $P10458, "1307835814.0955", 446
    .const 'Sub' $P10459 = "530_1307835824.98345" 
    assign $P10458, $P10459
    nqp_get_sc_object $P10460, "1307835814.0955", 447
    .const 'Sub' $P10461 = "531_1307835824.98345" 
    assign $P10460, $P10461
    nqp_get_sc_object $P10462, "1307835814.0955", 448
    .const 'Sub' $P10463 = "532_1307835824.98345" 
    assign $P10462, $P10463
    nqp_get_sc_object $P10464, "1307835814.0955", 449
    .const 'Sub' $P10465 = "533_1307835824.98345" 
    assign $P10464, $P10465
    nqp_get_sc_object $P10466, "1307835814.0955", 450
    .const 'Sub' $P10467 = "534_1307835824.98345" 
    assign $P10466, $P10467
    nqp_get_sc_object $P10468, "1307835814.0955", 451
    .const 'Sub' $P10469 = "535_1307835824.98345" 
    assign $P10468, $P10469
    nqp_get_sc_object $P10470, "1307835814.0955", 452
    .const 'Sub' $P10471 = "538_1307835824.98345" 
    assign $P10470, $P10471
    nqp_get_sc_object $P10472, "1307835814.0955", 453
    .const 'Sub' $P10473 = "539_1307835824.98345" 
    assign $P10472, $P10473
    nqp_get_sc_object $P10474, "1307835814.0955", 454
    .const 'Sub' $P10475 = "540_1307835824.98345" 
    assign $P10474, $P10475
    nqp_get_sc_object $P10476, "1307835814.0955", 455
    .const 'Sub' $P10477 = "547_1307835824.98345" 
    assign $P10476, $P10477
    nqp_get_sc_object $P10478, "1307835814.0955", 456
    .const 'Sub' $P10479 = "550_1307835824.98345" 
    assign $P10478, $P10479
    nqp_get_sc_object $P10480, "1307835814.0955", 457
    .const 'Sub' $P10481 = "553_1307835824.98345" 
    assign $P10480, $P10481
    nqp_get_sc_object $P10482, "1307835814.0955", 458
    .const 'Sub' $P10483 = "554_1307835824.98345" 
    assign $P10482, $P10483
    nqp_get_sc_object $P10484, "1307835814.0955", 459
    .const 'Sub' $P10485 = "555_1307835824.98345" 
    assign $P10484, $P10485
    nqp_get_sc_object $P10486, "1307835814.0955", 460
    .const 'Sub' $P10487 = "556_1307835824.98345" 
    assign $P10486, $P10487
    nqp_get_sc_object $P10488, "1307835814.0955", 461
    .const 'Sub' $P10489 = "558_1307835824.98345" 
    assign $P10488, $P10489
    nqp_get_sc_object $P10490, "1307835814.0955", 462
    .const 'Sub' $P10491 = "559_1307835824.98345" 
    assign $P10490, $P10491
    nqp_get_sc_object $P10492, "1307835814.0955", 463
    .const 'Sub' $P10493 = "564_1307835824.98345" 
    assign $P10492, $P10493
    nqp_get_sc_object $P10494, "1307835814.0955", 464
    .const 'Sub' $P10495 = "569_1307835824.98345" 
    assign $P10494, $P10495
    nqp_get_sc_object $P10496, "1307835814.0955", 465
    .const 'Sub' $P10497 = "570_1307835824.98345" 
    assign $P10496, $P10497
    nqp_get_sc_object $P10498, "1307835814.0955", 466
    .const 'Sub' $P10499 = "571_1307835824.98345" 
    assign $P10498, $P10499
    nqp_get_sc_object $P10500, "1307835814.0955", 467
    .const 'Sub' $P10501 = "572_1307835824.98345" 
    assign $P10500, $P10501
    nqp_get_sc_object $P10502, "1307835814.0955", 468
    .const 'Sub' $P10503 = "574_1307835824.98345" 
    assign $P10502, $P10503
    nqp_get_sc_object $P10504, "1307835814.0955", 469
    .const 'Sub' $P10505 = "575_1307835824.98345" 
    assign $P10504, $P10505
    nqp_get_sc_object $P10506, "1307835814.0955", 470
    .const 'Sub' $P10507 = "576_1307835824.98345" 
    assign $P10506, $P10507
    nqp_get_sc_object $P10508, "1307835814.0955", 471
    .const 'Sub' $P10509 = "577_1307835824.98345" 
    assign $P10508, $P10509
    nqp_get_sc_object $P10510, "1307835814.0955", 472
    .const 'Sub' $P10511 = "580_1307835824.98345" 
    assign $P10510, $P10511
    nqp_get_sc_object $P10512, "1307835814.0955", 473
    .const 'Sub' $P10513 = "581_1307835824.98345" 
    assign $P10512, $P10513
    nqp_get_sc_object $P10514, "1307835814.0955", 474
    .const 'Sub' $P10515 = "582_1307835824.98345" 
    assign $P10514, $P10515
    nqp_get_sc_object $P10516, "1307835814.0955", 475
    .const 'Sub' $P10517 = "583_1307835824.98345" 
    assign $P10516, $P10517
    nqp_get_sc_object $P10518, "1307835814.0955", 476
    .const 'Sub' $P10519 = "584_1307835824.98345" 
    assign $P10518, $P10519
    nqp_get_sc_object $P10520, "1307835814.0955", 477
    .const 'Sub' $P10521 = "585_1307835824.98345" 
    assign $P10520, $P10521
    nqp_get_sc_object $P10522, "1307835814.0955", 478
    .const 'Sub' $P10523 = "586_1307835824.98345" 
    assign $P10522, $P10523
    nqp_get_sc_object $P10524, "1307835814.0955", 479
    .const 'Sub' $P10525 = "588_1307835824.98345" 
    assign $P10524, $P10525
    nqp_get_sc_object $P10526, "1307835814.0955", 480
    .const 'Sub' $P10527 = "589_1307835824.98345" 
    assign $P10526, $P10527
    nqp_get_sc_object $P10528, "1307835814.0955", 481
    .const 'Sub' $P10529 = "590_1307835824.98345" 
    assign $P10528, $P10529
    nqp_get_sc_object $P10530, "1307835814.0955", 482
    .const 'Sub' $P10531 = "591_1307835824.98345" 
    assign $P10530, $P10531
    nqp_get_sc_object $P10532, "1307835814.0955", 483
    .const 'Sub' $P10533 = "592_1307835824.98345" 
    assign $P10532, $P10533
    nqp_get_sc_object $P10534, "1307835814.0955", 484
    .const 'Sub' $P10535 = "593_1307835824.98345" 
    assign $P10534, $P10535
    nqp_get_sc_object $P10536, "1307835814.0955", 485
    .const 'Sub' $P10537 = "594_1307835824.98345" 
    assign $P10536, $P10537
    nqp_get_sc_object $P10538, "1307835814.0955", 486
    .const 'Sub' $P10539 = "595_1307835824.98345" 
    assign $P10538, $P10539
    nqp_get_sc_object $P10540, "1307835814.0955", 487
    .const 'Sub' $P10541 = "596_1307835824.98345" 
    assign $P10540, $P10541
    nqp_get_sc_object $P10542, "1307835814.0955", 488
    .const 'Sub' $P10543 = "597_1307835824.98345" 
    assign $P10542, $P10543
    nqp_get_sc_object $P10544, "1307835814.0955", 489
    .const 'Sub' $P10545 = "598_1307835824.98345" 
    assign $P10544, $P10545
    nqp_get_sc_object $P10546, "1307835814.0955", 490
    .const 'Sub' $P10547 = "599_1307835824.98345" 
    assign $P10546, $P10547
    nqp_get_sc_object $P10548, "1307835814.0955", 491
    .const 'Sub' $P10549 = "600_1307835824.98345" 
    assign $P10548, $P10549
    nqp_get_sc_object $P10550, "1307835814.0955", 492
    .const 'Sub' $P10551 = "601_1307835824.98345" 
    assign $P10550, $P10551
    nqp_get_sc_object $P10552, "1307835814.0955", 493
    .const 'Sub' $P10553 = "602_1307835824.98345" 
    assign $P10552, $P10553
    nqp_get_sc_object $P10554, "1307835814.0955", 494
    .const 'Sub' $P10555 = "603_1307835824.98345" 
    assign $P10554, $P10555
    nqp_get_sc_object $P10556, "1307835814.0955", 495
    .const 'Sub' $P10557 = "604_1307835824.98345" 
    assign $P10556, $P10557
    nqp_get_sc_object $P10558, "1307835814.0955", 496
    .const 'Sub' $P10559 = "605_1307835824.98345" 
    assign $P10558, $P10559
    nqp_get_sc_object $P10560, "1307835814.0955", 497
    .const 'Sub' $P10561 = "606_1307835824.98345" 
    assign $P10560, $P10561
    nqp_get_sc_object $P10562, "1307835814.0955", 498
    .const 'Sub' $P10563 = "607_1307835824.98345" 
    assign $P10562, $P10563
    nqp_get_sc_object $P10564, "1307835814.0955", 499
    .const 'Sub' $P10565 = "608_1307835824.98345" 
    assign $P10564, $P10565
    nqp_get_sc_object $P10566, "1307835814.0955", 500
    .const 'Sub' $P10567 = "609_1307835824.98345" 
    assign $P10566, $P10567
    nqp_get_sc_object $P10568, "1307835814.0955", 501
    .const 'Sub' $P10569 = "610_1307835824.98345" 
    assign $P10568, $P10569
    nqp_get_sc_object $P10570, "1307835814.0955", 502
    .const 'Sub' $P10571 = "611_1307835824.98345" 
    assign $P10570, $P10571
    nqp_get_sc_object $P10572, "1307835814.0955", 503
    .const 'Sub' $P10573 = "612_1307835824.98345" 
    assign $P10572, $P10573
    nqp_get_sc_object $P10574, "1307835814.0955", 504
    .const 'Sub' $P10575 = "613_1307835824.98345" 
    assign $P10574, $P10575
    nqp_get_sc_object $P10576, "1307835814.0955", 505
    .const 'Sub' $P10577 = "614_1307835824.98345" 
    assign $P10576, $P10577
    .const 'Sub' $P10578 = "436_1307835824.98345" 
    $P10579 = $P10578."get_lexinfo"()
    nqp_get_sc_object $P10580, "1307835814.0955", 394
    $P10579."set_static_lexpad_value"("$?PACKAGE", $P10580)
    .const 'Sub' $P10581 = "436_1307835824.98345" 
    $P10582 = $P10581."get_lexinfo"()
    $P10582."finish_static_lexpad"()
    .const 'Sub' $P10583 = "436_1307835824.98345" 
    $P10584 = $P10583."get_lexinfo"()
    nqp_get_sc_object $P10585, "1307835814.0955", 394
    $P10584."set_static_lexpad_value"("$?CLASS", $P10585)
    .const 'Sub' $P10586 = "436_1307835824.98345" 
    $P10587 = $P10586."get_lexinfo"()
    $P10587."finish_static_lexpad"()
    nqp_get_sc_object $P10588, "1307835814.0955", 507
    .const 'Sub' $P10589 = "617_1307835824.98345" 
    assign $P10588, $P10589
    nqp_get_sc_object $P10590, "1307835814.0955", 508
    .const 'Sub' $P10591 = "618_1307835824.98345" 
    assign $P10590, $P10591
    nqp_get_sc_object $P10592, "1307835814.0955", 509
    .const 'Sub' $P10593 = "619_1307835824.98345" 
    assign $P10592, $P10593
    nqp_get_sc_object $P10594, "1307835814.0955", 510
    .const 'Sub' $P10595 = "620_1307835824.98345" 
    assign $P10594, $P10595
    nqp_get_sc_object $P10596, "1307835814.0955", 511
    .const 'Sub' $P10597 = "621_1307835824.98345" 
    assign $P10596, $P10597
    nqp_get_sc_object $P10598, "1307835814.0955", 512
    .const 'Sub' $P10599 = "622_1307835824.98345" 
    assign $P10598, $P10599
    nqp_get_sc_object $P10600, "1307835814.0955", 513
    .const 'Sub' $P10601 = "623_1307835824.98345" 
    assign $P10600, $P10601
    .const 'Sub' $P10602 = "616_1307835824.98345" 
    $P10603 = $P10602."get_lexinfo"()
    nqp_get_sc_object $P10604, "1307835814.0955", 506
    $P10603."set_static_lexpad_value"("$?PACKAGE", $P10604)
    .const 'Sub' $P10605 = "616_1307835824.98345" 
    $P10606 = $P10605."get_lexinfo"()
    $P10606."finish_static_lexpad"()
    .const 'Sub' $P10607 = "616_1307835824.98345" 
    $P10608 = $P10607."get_lexinfo"()
    nqp_get_sc_object $P10609, "1307835814.0955", 506
    $P10608."set_static_lexpad_value"("$?CLASS", $P10609)
    .const 'Sub' $P10610 = "616_1307835824.98345" 
    $P10611 = $P10610."get_lexinfo"()
    $P10611."finish_static_lexpad"()
    .const 'Sub' $P10612 = "624_1307835824.98345" 
    $P10613 = $P10612."get_lexinfo"()
    nqp_get_sc_object $P10614, "1307835814.0955", 514
    $P10613."set_static_lexpad_value"("$?PACKAGE", $P10614)
    .const 'Sub' $P10615 = "624_1307835824.98345" 
    $P10616 = $P10615."get_lexinfo"()
    $P10616."finish_static_lexpad"()
    .const 'Sub' $P10617 = "624_1307835824.98345" 
    $P10618 = $P10617."get_lexinfo"()
    nqp_get_sc_object $P10619, "1307835814.0955", 514
    $P10618."set_static_lexpad_value"("$?CLASS", $P10619)
    .const 'Sub' $P10620 = "624_1307835824.98345" 
    $P10621 = $P10620."get_lexinfo"()
    $P10621."finish_static_lexpad"()
    goto if_7341_end
  if_7341:
    nqp_dynop_setup 
    getinterp $P7344
    get_class $P7345, "LexPad"
    get_class $P7346, "NQPLexPad"
    $P7344."hll_map"($P7345, $P7346)
    nqp_create_sc $P7347, "1307835814.0955"
    .local pmc cur_sc
    set cur_sc, $P7347
    nqp_get_sc_object $P7348, "__6MODEL_CORE__", 0
    $P7349 = $P7348."new_type"("GLOBALish" :named("name"))
    nqp_set_sc_for_object $P7349, cur_sc
    nqp_set_sc_object "1307835814.0955", 0, $P7349
    .const 'Sub' $P7350 = "10_1307835824.98345" 
    $P7351 = $P7350."get_lexinfo"()
    nqp_get_sc_object $P7352, "1307835814.0955", 0
    $P7351."set_static_lexpad_value"("GLOBALish", $P7352)
    .const 'Sub' $P7353 = "10_1307835824.98345" 
    $P7354 = $P7353."get_lexinfo"()
    $P7354."finish_static_lexpad"()
    .const 'Sub' $P7355 = "10_1307835824.98345" 
    $P7356 = $P7355."get_lexinfo"()
    nqp_get_sc_object $P7357, "1307835814.0955", 0
    $P7356."set_static_lexpad_value"("$?PACKAGE", $P7357)
    .const 'Sub' $P7358 = "10_1307835824.98345" 
    $P7359 = $P7358."get_lexinfo"()
    $P7359."finish_static_lexpad"()
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P7360, "ModuleLoader"
    $P7361 = $P7360."load_setting"("NQPCORE")
    block."set_outer_ctx"($P7361)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P7362, "ModuleLoader"
    nqp_get_sc_object $P7363, "1307835814.0955", 0
    $P7362."load_module"("NQPRegex", $P7363)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P7364, "ModuleLoader"
    nqp_get_sc_object $P7365, "1307835814.0955", 0
    $P7364."load_module"("NQPP6Regex", $P7365)
    nqp_get_sc_object $P7366, "1307835795.15992", 41
    $P7367 = $P7366."new_type"("NQP::SymbolTable" :named("name"))
    nqp_set_sc_for_object $P7367, cur_sc
    nqp_set_sc_object "1307835814.0955", 1, $P7367
    nqp_get_sc_object $P7368, "1307835814.0955", 1
    nqp_get_sc_object $P7369, "1307835814.0955", 0
    nqp_get_package_through_who $P7370, $P7369, "NQP"
    get_who $P7371, $P7370
    set $P7371["SymbolTable"], $P7368
    nqp_get_sc_object $P7372, "1307835814.0955", 1
    get_how $P7373, $P7372
    nqp_get_sc_object $P7374, "1307835814.0955", 1
    .const 'Sub' $P7375 = "14_1307835824.98345" 
    $P7373."add_method"($P7374, "load_setting", $P7375)
    nqp_get_sc_object $P7376, "1307835814.0955", 1
    get_how $P7377, $P7376
    nqp_get_sc_object $P7378, "1307835814.0955", 1
    .const 'Sub' $P7379 = "16_1307835824.98345" 
    $P7377."add_method"($P7378, "load_module", $P7379)
    nqp_get_sc_object $P7380, "1307835814.0955", 1
    get_how $P7381, $P7380
    nqp_get_sc_object $P7382, "1307835814.0955", 1
    .const 'Sub' $P7383 = "17_1307835824.98345" 
    $P7381."add_method"($P7382, "install_package_symbol", $P7383)
    nqp_get_sc_object $P7384, "1307835814.0955", 1
    get_how $P7385, $P7384
    nqp_get_sc_object $P7386, "1307835814.0955", 1
    .const 'Sub' $P7387 = "20_1307835824.98345" 
    $P7385."add_method"($P7386, "install_lexical_symbol", $P7387)
    nqp_get_sc_object $P7388, "1307835814.0955", 1
    get_how $P7389, $P7388
    nqp_get_sc_object $P7390, "1307835814.0955", 1
    .const 'Sub' $P7391 = "21_1307835824.98345" 
    $P7389."add_method"($P7390, "install_package_routine", $P7391)
    nqp_get_sc_object $P7392, "1307835814.0955", 1
    get_how $P7393, $P7392
    nqp_get_sc_object $P7394, "1307835814.0955", 1
    .const 'Sub' $P7395 = "22_1307835824.98345" 
    $P7393."add_method"($P7394, "pkg_create_mo", $P7395)
    nqp_get_sc_object $P7396, "1307835814.0955", 1
    get_how $P7397, $P7396
    nqp_get_sc_object $P7398, "1307835814.0955", 1
    .const 'Sub' $P7399 = "23_1307835824.98345" 
    $P7397."add_method"($P7398, "pkg_add_attribute", $P7399)
    nqp_get_sc_object $P7400, "1307835814.0955", 1
    get_how $P7401, $P7400
    nqp_get_sc_object $P7402, "1307835814.0955", 1
    .const 'Sub' $P7403 = "26_1307835824.98345" 
    $P7401."add_method"($P7402, "pkg_add_method", $P7403)
    nqp_get_sc_object $P7404, "1307835814.0955", 1
    get_how $P7405, $P7404
    nqp_get_sc_object $P7406, "1307835814.0955", 1
    .const 'Sub' $P7407 = "29_1307835824.98345" 
    $P7405."add_method"($P7406, "set_routine_signature", $P7407)
    nqp_get_sc_object $P7408, "1307835814.0955", 1
    get_how $P7409, $P7408
    nqp_get_sc_object $P7410, "1307835814.0955", 1
    .const 'Sub' $P7411 = "30_1307835824.98345" 
    $P7409."add_method"($P7410, "pkg_set_body_block", $P7411)
    nqp_get_sc_object $P7412, "1307835814.0955", 1
    get_how $P7413, $P7412
    nqp_get_sc_object $P7414, "1307835814.0955", 1
    .const 'Sub' $P7415 = "35_1307835824.98345" 
    $P7413."add_method"($P7414, "pkg_add_parent_or_role", $P7415)
    nqp_get_sc_object $P7416, "1307835814.0955", 1
    get_how $P7417, $P7416
    nqp_get_sc_object $P7418, "1307835814.0955", 1
    .const 'Sub' $P7419 = "36_1307835824.98345" 
    $P7417."add_method"($P7418, "pkg_add_parrot_vtable_handler_mapping", $P7419)
    nqp_get_sc_object $P7420, "1307835814.0955", 1
    get_how $P7421, $P7420
    nqp_get_sc_object $P7422, "1307835814.0955", 1
    .const 'Sub' $P7423 = "37_1307835824.98345" 
    $P7421."add_method"($P7422, "pkg_compose", $P7423)
    nqp_get_sc_object $P7424, "1307835814.0955", 1
    get_how $P7425, $P7424
    nqp_get_sc_object $P7426, "1307835814.0955", 1
    .const 'Sub' $P7427 = "38_1307835824.98345" 
    $P7425."add_method"($P7426, "to_past", $P7427)
    .const 'Sub' $P7428 = "13_1307835824.98345" 
    $P7429 = $P7428."get_lexinfo"()
    nqp_get_sc_object $P7430, "1307835814.0955", 1
    $P7429."set_static_lexpad_value"("$?PACKAGE", $P7430)
    .const 'Sub' $P7431 = "13_1307835824.98345" 
    $P7432 = $P7431."get_lexinfo"()
    $P7432."finish_static_lexpad"()
    .const 'Sub' $P7433 = "13_1307835824.98345" 
    $P7434 = $P7433."get_lexinfo"()
    nqp_get_sc_object $P7435, "1307835814.0955", 1
    $P7434."set_static_lexpad_value"("$?CLASS", $P7435)
    .const 'Sub' $P7436 = "13_1307835824.98345" 
    $P7437 = $P7436."get_lexinfo"()
    $P7437."finish_static_lexpad"()
    nqp_get_sc_object $P7438, "1307835814.0955", 1
    get_how $P7439, $P7438
    nqp_get_sc_object $P7440, "1307835814.0955", 1
    nqp_get_sc_object $P7441, "1307835801.01384", 195
    $P7439."add_parent"($P7440, $P7441)
    nqp_get_sc_object $P7442, "1307835814.0955", 1
    get_how $P7443, $P7442
    nqp_get_sc_object $P7444, "1307835814.0955", 1
    $P7443."compose"($P7444)
    nqp_get_sc_object $P7445, "1307835795.15992", 41
    $P7446 = $P7445."new_type"("NQP::Grammar" :named("name"))
    nqp_set_sc_for_object $P7446, cur_sc
    nqp_set_sc_object "1307835814.0955", 16, $P7446
    nqp_get_sc_object $P7447, "1307835814.0955", 16
    nqp_get_sc_object $P7448, "1307835814.0955", 0
    nqp_get_package_through_who $P7449, $P7448, "NQP"
    get_who $P7450, $P7449
    set $P7450["Grammar"], $P7447
    nqp_get_sc_object $P7451, "1307835814.0955", 16
    get_how $P7452, $P7451
    nqp_get_sc_object $P7453, "1307835814.0955", 16
    .const 'Sub' $P7454 = "41_1307835824.98345" 
    $P7452."add_method"($P7453, "TOP", $P7454)
    nqp_get_sc_object $P7455, "1307835814.0955", 16
    get_how $P7456, $P7455
    nqp_get_sc_object $P7457, "1307835814.0955", 16
    .const 'Sub' $P7458 = "42_1307835824.98345" 
    $P7456."add_method"($P7457, "identifier", $P7458)
    nqp_get_sc_object $P7459, "1307835814.0955", 16
    get_how $P7460, $P7459
    nqp_get_sc_object $P7461, "1307835814.0955", 16
    .const 'Sub' $P7462 = "43_1307835824.98345" 
    $P7460."add_method"($P7461, "!PREFIX__identifier", $P7462)
    nqp_get_sc_object $P7463, "1307835814.0955", 16
    get_how $P7464, $P7463
    nqp_get_sc_object $P7465, "1307835814.0955", 16
    .const 'Sub' $P7466 = "44_1307835824.98345" 
    $P7464."add_method"($P7465, "name", $P7466)
    nqp_get_sc_object $P7467, "1307835814.0955", 16
    get_how $P7468, $P7467
    nqp_get_sc_object $P7469, "1307835814.0955", 16
    .const 'Sub' $P7470 = "45_1307835824.98345" 
    $P7468."add_method"($P7469, "!PREFIX__name", $P7470)
    nqp_get_sc_object $P7471, "1307835814.0955", 16
    get_how $P7472, $P7471
    nqp_get_sc_object $P7473, "1307835814.0955", 16
    .const 'Sub' $P7474 = "46_1307835824.98345" 
    $P7472."add_method"($P7473, "deflongname", $P7474)
    nqp_get_sc_object $P7475, "1307835814.0955", 16
    get_how $P7476, $P7475
    nqp_get_sc_object $P7477, "1307835814.0955", 16
    .const 'Sub' $P7478 = "47_1307835824.98345" 
    $P7476."add_method"($P7477, "!PREFIX__deflongname", $P7478)
    nqp_get_sc_object $P7479, "1307835814.0955", 16
    get_how $P7480, $P7479
    nqp_get_sc_object $P7481, "1307835814.0955", 16
    .const 'Sub' $P7482 = "48_1307835824.98345" 
    $P7480."add_method"($P7481, "ENDSTMT", $P7482)
    nqp_get_sc_object $P7483, "1307835814.0955", 16
    get_how $P7484, $P7483
    nqp_get_sc_object $P7485, "1307835814.0955", 16
    .const 'Sub' $P7486 = "49_1307835824.98345" 
    $P7484."add_method"($P7485, "!PREFIX__ENDSTMT", $P7486)
    nqp_get_sc_object $P7487, "1307835814.0955", 16
    get_how $P7488, $P7487
    nqp_get_sc_object $P7489, "1307835814.0955", 16
    .const 'Sub' $P7490 = "50_1307835824.98345" 
    $P7488."add_method"($P7489, "ws", $P7490)
    nqp_get_sc_object $P7491, "1307835814.0955", 16
    get_how $P7492, $P7491
    nqp_get_sc_object $P7493, "1307835814.0955", 16
    .const 'Sub' $P7494 = "51_1307835824.98345" 
    $P7492."add_method"($P7493, "!PREFIX__ws", $P7494)
    nqp_get_sc_object $P7495, "1307835814.0955", 16
    get_how $P7496, $P7495
    nqp_get_sc_object $P7497, "1307835814.0955", 16
    .const 'Sub' $P7498 = "52_1307835824.98345" 
    $P7496."add_method"($P7497, "unv", $P7498)
    nqp_get_sc_object $P7499, "1307835814.0955", 16
    get_how $P7500, $P7499
    nqp_get_sc_object $P7501, "1307835814.0955", 16
    .const 'Sub' $P7502 = "54_1307835824.98345" 
    $P7500."add_method"($P7501, "!PREFIX__unv", $P7502)
    nqp_get_sc_object $P7503, "1307835814.0955", 16
    get_how $P7504, $P7503
    nqp_get_sc_object $P7505, "1307835814.0955", 16
    .const 'Sub' $P7506 = "55_1307835824.98345" 
    $P7504."add_method"($P7505, "pod_comment", $P7506)
    nqp_get_sc_object $P7507, "1307835814.0955", 16
    get_how $P7508, $P7507
    nqp_get_sc_object $P7509, "1307835814.0955", 16
    .const 'Sub' $P7510 = "57_1307835824.98345" 
    $P7508."add_method"($P7509, "!PREFIX__pod_comment", $P7510)
    nqp_get_sc_object $P7511, "1307835814.0955", 16
    get_how $P7512, $P7511
    nqp_get_sc_object $P7513, "1307835814.0955", 16
    .const 'Sub' $P7514 = "58_1307835824.98345" 
    $P7512."add_method"($P7513, "comp_unit", $P7514)
    nqp_get_sc_object $P7515, "1307835814.0955", 16
    get_how $P7516, $P7515
    nqp_get_sc_object $P7517, "1307835814.0955", 16
    .const 'Sub' $P7518 = "59_1307835824.98345" 
    $P7516."add_method"($P7517, "!PREFIX__comp_unit", $P7518)
    nqp_get_sc_object $P7519, "1307835814.0955", 16
    get_how $P7520, $P7519
    nqp_get_sc_object $P7521, "1307835814.0955", 16
    .const 'Sub' $P7522 = "60_1307835824.98345" 
    $P7520."add_method"($P7521, "statementlist", $P7522)
    nqp_get_sc_object $P7523, "1307835814.0955", 16
    get_how $P7524, $P7523
    nqp_get_sc_object $P7525, "1307835814.0955", 16
    .const 'Sub' $P7526 = "61_1307835824.98345" 
    $P7524."add_method"($P7525, "!PREFIX__statementlist", $P7526)
    nqp_get_sc_object $P7527, "1307835814.0955", 16
    get_how $P7528, $P7527
    nqp_get_sc_object $P7529, "1307835814.0955", 16
    .const 'Sub' $P7530 = "62_1307835824.98345" 
    $P7528."add_method"($P7529, "statement", $P7530)
    nqp_get_sc_object $P7531, "1307835814.0955", 16
    get_how $P7532, $P7531
    nqp_get_sc_object $P7533, "1307835814.0955", 16
    .const 'Sub' $P7534 = "64_1307835824.98345" 
    $P7532."add_method"($P7533, "!PREFIX__statement", $P7534)
    nqp_get_sc_object $P7535, "1307835814.0955", 16
    get_how $P7536, $P7535
    nqp_get_sc_object $P7537, "1307835814.0955", 16
    .const 'Sub' $P7538 = "65_1307835824.98345" 
    $P7536."add_method"($P7537, "eat_terminator", $P7538)
    nqp_get_sc_object $P7539, "1307835814.0955", 16
    get_how $P7540, $P7539
    nqp_get_sc_object $P7541, "1307835814.0955", 16
    .const 'Sub' $P7542 = "66_1307835824.98345" 
    $P7540."add_method"($P7541, "!PREFIX__eat_terminator", $P7542)
    nqp_get_sc_object $P7543, "1307835814.0955", 16
    get_how $P7544, $P7543
    nqp_get_sc_object $P7545, "1307835814.0955", 16
    .const 'Sub' $P7546 = "67_1307835824.98345" 
    $P7544."add_method"($P7545, "xblock", $P7546)
    nqp_get_sc_object $P7547, "1307835814.0955", 16
    get_how $P7548, $P7547
    nqp_get_sc_object $P7549, "1307835814.0955", 16
    .const 'Sub' $P7550 = "68_1307835824.98345" 
    $P7548."add_method"($P7549, "!PREFIX__xblock", $P7550)
    nqp_get_sc_object $P7551, "1307835814.0955", 16
    get_how $P7552, $P7551
    nqp_get_sc_object $P7553, "1307835814.0955", 16
    .const 'Sub' $P7554 = "69_1307835824.98345" 
    $P7552."add_method"($P7553, "pblock", $P7554)
    nqp_get_sc_object $P7555, "1307835814.0955", 16
    get_how $P7556, $P7555
    nqp_get_sc_object $P7557, "1307835814.0955", 16
    .const 'Sub' $P7558 = "70_1307835824.98345" 
    $P7556."add_method"($P7557, "!PREFIX__pblock", $P7558)
    nqp_get_sc_object $P7559, "1307835814.0955", 16
    get_how $P7560, $P7559
    nqp_get_sc_object $P7561, "1307835814.0955", 16
    .const 'Sub' $P7562 = "71_1307835824.98345" 
    $P7560."add_method"($P7561, "lambda", $P7562)
    nqp_get_sc_object $P7563, "1307835814.0955", 16
    get_how $P7564, $P7563
    nqp_get_sc_object $P7565, "1307835814.0955", 16
    .const 'Sub' $P7566 = "72_1307835824.98345" 
    $P7564."add_method"($P7565, "!PREFIX__lambda", $P7566)
    nqp_get_sc_object $P7567, "1307835814.0955", 16
    get_how $P7568, $P7567
    nqp_get_sc_object $P7569, "1307835814.0955", 16
    .const 'Sub' $P7570 = "73_1307835824.98345" 
    $P7568."add_method"($P7569, "block", $P7570)
    nqp_get_sc_object $P7571, "1307835814.0955", 16
    get_how $P7572, $P7571
    nqp_get_sc_object $P7573, "1307835814.0955", 16
    .const 'Sub' $P7574 = "74_1307835824.98345" 
    $P7572."add_method"($P7573, "!PREFIX__block", $P7574)
    nqp_get_sc_object $P7575, "1307835814.0955", 16
    get_how $P7576, $P7575
    nqp_get_sc_object $P7577, "1307835814.0955", 16
    .const 'Sub' $P7578 = "75_1307835824.98345" 
    $P7576."add_method"($P7577, "blockoid", $P7578)
    nqp_get_sc_object $P7579, "1307835814.0955", 16
    get_how $P7580, $P7579
    nqp_get_sc_object $P7581, "1307835814.0955", 16
    .const 'Sub' $P7582 = "76_1307835824.98345" 
    $P7580."add_method"($P7581, "!PREFIX__blockoid", $P7582)
    nqp_get_sc_object $P7583, "1307835814.0955", 16
    get_how $P7584, $P7583
    nqp_get_sc_object $P7585, "1307835814.0955", 16
    .const 'Sub' $P7586 = "77_1307835824.98345" 
    $P7584."add_method"($P7585, "newpad", $P7586)
    nqp_get_sc_object $P7587, "1307835814.0955", 16
    get_how $P7588, $P7587
    nqp_get_sc_object $P7589, "1307835814.0955", 16
    .const 'Sub' $P7590 = "78_1307835824.98345" 
    $P7588."add_method"($P7589, "!PREFIX__newpad", $P7590)
    nqp_get_sc_object $P7591, "1307835814.0955", 16
    get_how $P7592, $P7591
    nqp_get_sc_object $P7593, "1307835814.0955", 16
    .const 'Sub' $P7594 = "79_1307835824.98345" 
    $P7592."add_method"($P7593, "outerctx", $P7594)
    nqp_get_sc_object $P7595, "1307835814.0955", 16
    get_how $P7596, $P7595
    nqp_get_sc_object $P7597, "1307835814.0955", 16
    .const 'Sub' $P7598 = "80_1307835824.98345" 
    $P7596."add_method"($P7597, "!PREFIX__outerctx", $P7598)
    nqp_get_sc_object $P7599, "1307835814.0955", 16
    get_how $P7600, $P7599
    nqp_get_sc_object $P7601, "1307835814.0955", 16
    .const 'Sub' $P7602 = "81_1307835824.98345" 
    $P7600."add_method"($P7601, "GLOBALish", $P7602)
    nqp_get_sc_object $P7603, "1307835814.0955", 16
    get_how $P7604, $P7603
    nqp_get_sc_object $P7605, "1307835814.0955", 16
    .const 'Sub' $P7606 = "82_1307835824.98345" 
    $P7604."add_method"($P7605, "!PREFIX__GLOBALish", $P7606)
    nqp_get_sc_object $P7607, "1307835814.0955", 16
    get_how $P7608, $P7607
    nqp_get_sc_object $P7609, "1307835814.0955", 16
    .const 'Sub' $P7610 = "83_1307835824.98345" 
    $P7608."add_method"($P7609, "finishpad", $P7610)
    nqp_get_sc_object $P7611, "1307835814.0955", 16
    get_how $P7612, $P7611
    nqp_get_sc_object $P7613, "1307835814.0955", 16
    .const 'Sub' $P7614 = "84_1307835824.98345" 
    $P7612."add_method"($P7613, "!PREFIX__finishpad", $P7614)
    nqp_get_sc_object $P7615, "1307835814.0955", 16
    get_how $P7616, $P7615
    nqp_get_sc_object $P7617, "1307835814.0955", 16
    .const 'Sub' $P7618 = "85_1307835824.98345" 
    $P7616."add_method"($P7617, "you_are_here", $P7618)
    nqp_get_sc_object $P7619, "1307835814.0955", 16
    get_how $P7620, $P7619
    nqp_get_sc_object $P7621, "1307835814.0955", 16
    .const 'Sub' $P7622 = "86_1307835824.98345" 
    $P7620."add_method"($P7621, "!PREFIX__you_are_here", $P7622)
    nqp_get_sc_object $P7623, "1307835814.0955", 16
    get_how $P7624, $P7623
    nqp_get_sc_object $P7625, "1307835814.0955", 16
    .const 'Sub' $P7626 = "87_1307835824.98345" 
    $P7624."add_method"($P7625, "terminator", $P7626)
    nqp_get_sc_object $P7627, "1307835814.0955", 16
    get_how $P7628, $P7627
    nqp_get_sc_object $P7629, "1307835814.0955", 16
    .const 'Sub' $P7630 = "88_1307835824.98345" 
    $P7628."add_method"($P7629, "!PREFIX__terminator", $P7630)
    nqp_get_sc_object $P7631, "1307835814.0955", 16
    get_how $P7632, $P7631
    nqp_get_sc_object $P7633, "1307835814.0955", 16
    .const 'Sub' $P7634 = "89_1307835824.98345" 
    $P7632."add_method"($P7633, "terminator:sym<;>", $P7634)
    nqp_get_sc_object $P7635, "1307835814.0955", 16
    get_how $P7636, $P7635
    nqp_get_sc_object $P7637, "1307835814.0955", 16
    .const 'Sub' $P7638 = "90_1307835824.98345" 
    $P7636."add_method"($P7637, "!PREFIX__terminator:sym<;>", $P7638)
    nqp_get_sc_object $P7639, "1307835814.0955", 16
    get_how $P7640, $P7639
    nqp_get_sc_object $P7641, "1307835814.0955", 16
    .const 'Sub' $P7642 = "91_1307835824.98345" 
    $P7640."add_method"($P7641, "terminator:sym<}>", $P7642)
    nqp_get_sc_object $P7643, "1307835814.0955", 16
    get_how $P7644, $P7643
    nqp_get_sc_object $P7645, "1307835814.0955", 16
    .const 'Sub' $P7646 = "92_1307835824.98345" 
    $P7644."add_method"($P7645, "!PREFIX__terminator:sym<}>", $P7646)
    nqp_get_sc_object $P7647, "1307835814.0955", 16
    get_how $P7648, $P7647
    nqp_get_sc_object $P7649, "1307835814.0955", 16
    .const 'Sub' $P7650 = "93_1307835824.98345" 
    $P7648."add_method"($P7649, "statement_control", $P7650)
    nqp_get_sc_object $P7651, "1307835814.0955", 16
    get_how $P7652, $P7651
    nqp_get_sc_object $P7653, "1307835814.0955", 16
    .const 'Sub' $P7654 = "94_1307835824.98345" 
    $P7652."add_method"($P7653, "!PREFIX__statement_control", $P7654)
    nqp_get_sc_object $P7655, "1307835814.0955", 16
    get_how $P7656, $P7655
    nqp_get_sc_object $P7657, "1307835814.0955", 16
    .const 'Sub' $P7658 = "95_1307835824.98345" 
    $P7656."add_method"($P7657, "statement_control:sym<use>", $P7658)
    nqp_get_sc_object $P7659, "1307835814.0955", 16
    get_how $P7660, $P7659
    nqp_get_sc_object $P7661, "1307835814.0955", 16
    .const 'Sub' $P7662 = "96_1307835824.98345" 
    $P7660."add_method"($P7661, "!PREFIX__statement_control:sym<use>", $P7662)
    nqp_get_sc_object $P7663, "1307835814.0955", 16
    get_how $P7664, $P7663
    nqp_get_sc_object $P7665, "1307835814.0955", 16
    .const 'Sub' $P7666 = "97_1307835824.98345" 
    $P7664."add_method"($P7665, "statement_control:sym<if>", $P7666)
    nqp_get_sc_object $P7667, "1307835814.0955", 16
    get_how $P7668, $P7667
    nqp_get_sc_object $P7669, "1307835814.0955", 16
    .const 'Sub' $P7670 = "98_1307835824.98345" 
    $P7668."add_method"($P7669, "!PREFIX__statement_control:sym<if>", $P7670)
    nqp_get_sc_object $P7671, "1307835814.0955", 16
    get_how $P7672, $P7671
    nqp_get_sc_object $P7673, "1307835814.0955", 16
    .const 'Sub' $P7674 = "99_1307835824.98345" 
    $P7672."add_method"($P7673, "statement_control:sym<unless>", $P7674)
    nqp_get_sc_object $P7675, "1307835814.0955", 16
    get_how $P7676, $P7675
    nqp_get_sc_object $P7677, "1307835814.0955", 16
    .const 'Sub' $P7678 = "101_1307835824.98345" 
    $P7676."add_method"($P7677, "!PREFIX__statement_control:sym<unless>", $P7678)
    nqp_get_sc_object $P7679, "1307835814.0955", 16
    get_how $P7680, $P7679
    nqp_get_sc_object $P7681, "1307835814.0955", 16
    .const 'Sub' $P7682 = "102_1307835824.98345" 
    $P7680."add_method"($P7681, "statement_control:sym<while>", $P7682)
    nqp_get_sc_object $P7683, "1307835814.0955", 16
    get_how $P7684, $P7683
    nqp_get_sc_object $P7685, "1307835814.0955", 16
    .const 'Sub' $P7686 = "103_1307835824.98345" 
    $P7684."add_method"($P7685, "!PREFIX__statement_control:sym<while>", $P7686)
    nqp_get_sc_object $P7687, "1307835814.0955", 16
    get_how $P7688, $P7687
    nqp_get_sc_object $P7689, "1307835814.0955", 16
    .const 'Sub' $P7690 = "104_1307835824.98345" 
    $P7688."add_method"($P7689, "statement_control:sym<repeat>", $P7690)
    nqp_get_sc_object $P7691, "1307835814.0955", 16
    get_how $P7692, $P7691
    nqp_get_sc_object $P7693, "1307835814.0955", 16
    .const 'Sub' $P7694 = "105_1307835824.98345" 
    $P7692."add_method"($P7693, "!PREFIX__statement_control:sym<repeat>", $P7694)
    nqp_get_sc_object $P7695, "1307835814.0955", 16
    get_how $P7696, $P7695
    nqp_get_sc_object $P7697, "1307835814.0955", 16
    .const 'Sub' $P7698 = "106_1307835824.98345" 
    $P7696."add_method"($P7697, "statement_control:sym<for>", $P7698)
    nqp_get_sc_object $P7699, "1307835814.0955", 16
    get_how $P7700, $P7699
    nqp_get_sc_object $P7701, "1307835814.0955", 16
    .const 'Sub' $P7702 = "107_1307835824.98345" 
    $P7700."add_method"($P7701, "!PREFIX__statement_control:sym<for>", $P7702)
    nqp_get_sc_object $P7703, "1307835814.0955", 16
    get_how $P7704, $P7703
    nqp_get_sc_object $P7705, "1307835814.0955", 16
    .const 'Sub' $P7706 = "108_1307835824.98345" 
    $P7704."add_method"($P7705, "statement_control:sym<CATCH>", $P7706)
    nqp_get_sc_object $P7707, "1307835814.0955", 16
    get_how $P7708, $P7707
    nqp_get_sc_object $P7709, "1307835814.0955", 16
    .const 'Sub' $P7710 = "109_1307835824.98345" 
    $P7708."add_method"($P7709, "!PREFIX__statement_control:sym<CATCH>", $P7710)
    nqp_get_sc_object $P7711, "1307835814.0955", 16
    get_how $P7712, $P7711
    nqp_get_sc_object $P7713, "1307835814.0955", 16
    .const 'Sub' $P7714 = "110_1307835824.98345" 
    $P7712."add_method"($P7713, "statement_control:sym<CONTROL>", $P7714)
    nqp_get_sc_object $P7715, "1307835814.0955", 16
    get_how $P7716, $P7715
    nqp_get_sc_object $P7717, "1307835814.0955", 16
    .const 'Sub' $P7718 = "111_1307835824.98345" 
    $P7716."add_method"($P7717, "!PREFIX__statement_control:sym<CONTROL>", $P7718)
    nqp_get_sc_object $P7719, "1307835814.0955", 16
    get_how $P7720, $P7719
    nqp_get_sc_object $P7721, "1307835814.0955", 16
    .const 'Sub' $P7722 = "112_1307835824.98345" 
    $P7720."add_method"($P7721, "statement_prefix", $P7722)
    nqp_get_sc_object $P7723, "1307835814.0955", 16
    get_how $P7724, $P7723
    nqp_get_sc_object $P7725, "1307835814.0955", 16
    .const 'Sub' $P7726 = "113_1307835824.98345" 
    $P7724."add_method"($P7725, "!PREFIX__statement_prefix", $P7726)
    nqp_get_sc_object $P7727, "1307835814.0955", 16
    get_how $P7728, $P7727
    nqp_get_sc_object $P7729, "1307835814.0955", 16
    .const 'Sub' $P7730 = "114_1307835824.98345" 
    $P7728."add_method"($P7729, "statement_prefix:sym<INIT>", $P7730)
    nqp_get_sc_object $P7731, "1307835814.0955", 16
    get_how $P7732, $P7731
    nqp_get_sc_object $P7733, "1307835814.0955", 16
    .const 'Sub' $P7734 = "115_1307835824.98345" 
    $P7732."add_method"($P7733, "!PREFIX__statement_prefix:sym<INIT>", $P7734)
    nqp_get_sc_object $P7735, "1307835814.0955", 16
    get_how $P7736, $P7735
    nqp_get_sc_object $P7737, "1307835814.0955", 16
    .const 'Sub' $P7738 = "116_1307835824.98345" 
    $P7736."add_method"($P7737, "statement_prefix:sym<try>", $P7738)
    nqp_get_sc_object $P7739, "1307835814.0955", 16
    get_how $P7740, $P7739
    nqp_get_sc_object $P7741, "1307835814.0955", 16
    .const 'Sub' $P7742 = "117_1307835824.98345" 
    $P7740."add_method"($P7741, "!PREFIX__statement_prefix:sym<try>", $P7742)
    nqp_get_sc_object $P7743, "1307835814.0955", 16
    get_how $P7744, $P7743
    nqp_get_sc_object $P7745, "1307835814.0955", 16
    .const 'Sub' $P7746 = "118_1307835824.98345" 
    $P7744."add_method"($P7745, "blorst", $P7746)
    nqp_get_sc_object $P7747, "1307835814.0955", 16
    get_how $P7748, $P7747
    nqp_get_sc_object $P7749, "1307835814.0955", 16
    .const 'Sub' $P7750 = "119_1307835824.98345" 
    $P7748."add_method"($P7749, "!PREFIX__blorst", $P7750)
    nqp_get_sc_object $P7751, "1307835814.0955", 16
    get_how $P7752, $P7751
    nqp_get_sc_object $P7753, "1307835814.0955", 16
    .const 'Sub' $P7754 = "120_1307835824.98345" 
    $P7752."add_method"($P7753, "statement_mod_cond", $P7754)
    nqp_get_sc_object $P7755, "1307835814.0955", 16
    get_how $P7756, $P7755
    nqp_get_sc_object $P7757, "1307835814.0955", 16
    .const 'Sub' $P7758 = "121_1307835824.98345" 
    $P7756."add_method"($P7757, "!PREFIX__statement_mod_cond", $P7758)
    nqp_get_sc_object $P7759, "1307835814.0955", 16
    get_how $P7760, $P7759
    nqp_get_sc_object $P7761, "1307835814.0955", 16
    .const 'Sub' $P7762 = "122_1307835824.98345" 
    $P7760."add_method"($P7761, "statement_mod_cond:sym<if>", $P7762)
    nqp_get_sc_object $P7763, "1307835814.0955", 16
    get_how $P7764, $P7763
    nqp_get_sc_object $P7765, "1307835814.0955", 16
    .const 'Sub' $P7766 = "123_1307835824.98345" 
    $P7764."add_method"($P7765, "!PREFIX__statement_mod_cond:sym<if>", $P7766)
    nqp_get_sc_object $P7767, "1307835814.0955", 16
    get_how $P7768, $P7767
    nqp_get_sc_object $P7769, "1307835814.0955", 16
    .const 'Sub' $P7770 = "124_1307835824.98345" 
    $P7768."add_method"($P7769, "statement_mod_cond:sym<unless>", $P7770)
    nqp_get_sc_object $P7771, "1307835814.0955", 16
    get_how $P7772, $P7771
    nqp_get_sc_object $P7773, "1307835814.0955", 16
    .const 'Sub' $P7774 = "125_1307835824.98345" 
    $P7772."add_method"($P7773, "!PREFIX__statement_mod_cond:sym<unless>", $P7774)
    nqp_get_sc_object $P7775, "1307835814.0955", 16
    get_how $P7776, $P7775
    nqp_get_sc_object $P7777, "1307835814.0955", 16
    .const 'Sub' $P7778 = "126_1307835824.98345" 
    $P7776."add_method"($P7777, "statement_mod_loop", $P7778)
    nqp_get_sc_object $P7779, "1307835814.0955", 16
    get_how $P7780, $P7779
    nqp_get_sc_object $P7781, "1307835814.0955", 16
    .const 'Sub' $P7782 = "127_1307835824.98345" 
    $P7780."add_method"($P7781, "!PREFIX__statement_mod_loop", $P7782)
    nqp_get_sc_object $P7783, "1307835814.0955", 16
    get_how $P7784, $P7783
    nqp_get_sc_object $P7785, "1307835814.0955", 16
    .const 'Sub' $P7786 = "128_1307835824.98345" 
    $P7784."add_method"($P7785, "statement_mod_loop:sym<while>", $P7786)
    nqp_get_sc_object $P7787, "1307835814.0955", 16
    get_how $P7788, $P7787
    nqp_get_sc_object $P7789, "1307835814.0955", 16
    .const 'Sub' $P7790 = "129_1307835824.98345" 
    $P7788."add_method"($P7789, "!PREFIX__statement_mod_loop:sym<while>", $P7790)
    nqp_get_sc_object $P7791, "1307835814.0955", 16
    get_how $P7792, $P7791
    nqp_get_sc_object $P7793, "1307835814.0955", 16
    .const 'Sub' $P7794 = "130_1307835824.98345" 
    $P7792."add_method"($P7793, "statement_mod_loop:sym<until>", $P7794)
    nqp_get_sc_object $P7795, "1307835814.0955", 16
    get_how $P7796, $P7795
    nqp_get_sc_object $P7797, "1307835814.0955", 16
    .const 'Sub' $P7798 = "131_1307835824.98345" 
    $P7796."add_method"($P7797, "!PREFIX__statement_mod_loop:sym<until>", $P7798)
    nqp_get_sc_object $P7799, "1307835814.0955", 16
    get_how $P7800, $P7799
    nqp_get_sc_object $P7801, "1307835814.0955", 16
    .const 'Sub' $P7802 = "132_1307835824.98345" 
    $P7800."add_method"($P7801, "statement_mod_loop:sym<for>", $P7802)
    nqp_get_sc_object $P7803, "1307835814.0955", 16
    get_how $P7804, $P7803
    nqp_get_sc_object $P7805, "1307835814.0955", 16
    .const 'Sub' $P7806 = "133_1307835824.98345" 
    $P7804."add_method"($P7805, "!PREFIX__statement_mod_loop:sym<for>", $P7806)
    nqp_get_sc_object $P7807, "1307835814.0955", 16
    get_how $P7808, $P7807
    nqp_get_sc_object $P7809, "1307835814.0955", 16
    .const 'Sub' $P7810 = "134_1307835824.98345" 
    $P7808."add_method"($P7809, "term:sym<fatarrow>", $P7810)
    nqp_get_sc_object $P7811, "1307835814.0955", 16
    get_how $P7812, $P7811
    nqp_get_sc_object $P7813, "1307835814.0955", 16
    .const 'Sub' $P7814 = "135_1307835824.98345" 
    $P7812."add_method"($P7813, "!PREFIX__term:sym<fatarrow>", $P7814)
    nqp_get_sc_object $P7815, "1307835814.0955", 16
    get_how $P7816, $P7815
    nqp_get_sc_object $P7817, "1307835814.0955", 16
    .const 'Sub' $P7818 = "136_1307835824.98345" 
    $P7816."add_method"($P7817, "term:sym<colonpair>", $P7818)
    nqp_get_sc_object $P7819, "1307835814.0955", 16
    get_how $P7820, $P7819
    nqp_get_sc_object $P7821, "1307835814.0955", 16
    .const 'Sub' $P7822 = "137_1307835824.98345" 
    $P7820."add_method"($P7821, "!PREFIX__term:sym<colonpair>", $P7822)
    nqp_get_sc_object $P7823, "1307835814.0955", 16
    get_how $P7824, $P7823
    nqp_get_sc_object $P7825, "1307835814.0955", 16
    .const 'Sub' $P7826 = "138_1307835824.98345" 
    $P7824."add_method"($P7825, "term:sym<variable>", $P7826)
    nqp_get_sc_object $P7827, "1307835814.0955", 16
    get_how $P7828, $P7827
    nqp_get_sc_object $P7829, "1307835814.0955", 16
    .const 'Sub' $P7830 = "139_1307835824.98345" 
    $P7828."add_method"($P7829, "!PREFIX__term:sym<variable>", $P7830)
    nqp_get_sc_object $P7831, "1307835814.0955", 16
    get_how $P7832, $P7831
    nqp_get_sc_object $P7833, "1307835814.0955", 16
    .const 'Sub' $P7834 = "140_1307835824.98345" 
    $P7832."add_method"($P7833, "term:sym<package_declarator>", $P7834)
    nqp_get_sc_object $P7835, "1307835814.0955", 16
    get_how $P7836, $P7835
    nqp_get_sc_object $P7837, "1307835814.0955", 16
    .const 'Sub' $P7838 = "141_1307835824.98345" 
    $P7836."add_method"($P7837, "!PREFIX__term:sym<package_declarator>", $P7838)
    nqp_get_sc_object $P7839, "1307835814.0955", 16
    get_how $P7840, $P7839
    nqp_get_sc_object $P7841, "1307835814.0955", 16
    .const 'Sub' $P7842 = "142_1307835824.98345" 
    $P7840."add_method"($P7841, "term:sym<scope_declarator>", $P7842)
    nqp_get_sc_object $P7843, "1307835814.0955", 16
    get_how $P7844, $P7843
    nqp_get_sc_object $P7845, "1307835814.0955", 16
    .const 'Sub' $P7846 = "143_1307835824.98345" 
    $P7844."add_method"($P7845, "!PREFIX__term:sym<scope_declarator>", $P7846)
    nqp_get_sc_object $P7847, "1307835814.0955", 16
    get_how $P7848, $P7847
    nqp_get_sc_object $P7849, "1307835814.0955", 16
    .const 'Sub' $P7850 = "144_1307835824.98345" 
    $P7848."add_method"($P7849, "term:sym<routine_declarator>", $P7850)
    nqp_get_sc_object $P7851, "1307835814.0955", 16
    get_how $P7852, $P7851
    nqp_get_sc_object $P7853, "1307835814.0955", 16
    .const 'Sub' $P7854 = "145_1307835824.98345" 
    $P7852."add_method"($P7853, "!PREFIX__term:sym<routine_declarator>", $P7854)
    nqp_get_sc_object $P7855, "1307835814.0955", 16
    get_how $P7856, $P7855
    nqp_get_sc_object $P7857, "1307835814.0955", 16
    .const 'Sub' $P7858 = "146_1307835824.98345" 
    $P7856."add_method"($P7857, "term:sym<multi_declarator>", $P7858)
    nqp_get_sc_object $P7859, "1307835814.0955", 16
    get_how $P7860, $P7859
    nqp_get_sc_object $P7861, "1307835814.0955", 16
    .const 'Sub' $P7862 = "149_1307835824.98345" 
    $P7860."add_method"($P7861, "!PREFIX__term:sym<multi_declarator>", $P7862)
    nqp_get_sc_object $P7863, "1307835814.0955", 16
    get_how $P7864, $P7863
    nqp_get_sc_object $P7865, "1307835814.0955", 16
    .const 'Sub' $P7866 = "150_1307835824.98345" 
    $P7864."add_method"($P7865, "term:sym<regex_declarator>", $P7866)
    nqp_get_sc_object $P7867, "1307835814.0955", 16
    get_how $P7868, $P7867
    nqp_get_sc_object $P7869, "1307835814.0955", 16
    .const 'Sub' $P7870 = "151_1307835824.98345" 
    $P7868."add_method"($P7869, "!PREFIX__term:sym<regex_declarator>", $P7870)
    nqp_get_sc_object $P7871, "1307835814.0955", 16
    get_how $P7872, $P7871
    nqp_get_sc_object $P7873, "1307835814.0955", 16
    .const 'Sub' $P7874 = "152_1307835824.98345" 
    $P7872."add_method"($P7873, "term:sym<statement_prefix>", $P7874)
    nqp_get_sc_object $P7875, "1307835814.0955", 16
    get_how $P7876, $P7875
    nqp_get_sc_object $P7877, "1307835814.0955", 16
    .const 'Sub' $P7878 = "153_1307835824.98345" 
    $P7876."add_method"($P7877, "!PREFIX__term:sym<statement_prefix>", $P7878)
    nqp_get_sc_object $P7879, "1307835814.0955", 16
    get_how $P7880, $P7879
    nqp_get_sc_object $P7881, "1307835814.0955", 16
    .const 'Sub' $P7882 = "154_1307835824.98345" 
    $P7880."add_method"($P7881, "term:sym<lambda>", $P7882)
    nqp_get_sc_object $P7883, "1307835814.0955", 16
    get_how $P7884, $P7883
    nqp_get_sc_object $P7885, "1307835814.0955", 16
    .const 'Sub' $P7886 = "155_1307835824.98345" 
    $P7884."add_method"($P7885, "!PREFIX__term:sym<lambda>", $P7886)
    nqp_get_sc_object $P7887, "1307835814.0955", 16
    get_how $P7888, $P7887
    nqp_get_sc_object $P7889, "1307835814.0955", 16
    .const 'Sub' $P7890 = "156_1307835824.98345" 
    $P7888."add_method"($P7889, "fatarrow", $P7890)
    nqp_get_sc_object $P7891, "1307835814.0955", 16
    get_how $P7892, $P7891
    nqp_get_sc_object $P7893, "1307835814.0955", 16
    .const 'Sub' $P7894 = "157_1307835824.98345" 
    $P7892."add_method"($P7893, "!PREFIX__fatarrow", $P7894)
    nqp_get_sc_object $P7895, "1307835814.0955", 16
    get_how $P7896, $P7895
    nqp_get_sc_object $P7897, "1307835814.0955", 16
    .const 'Sub' $P7898 = "158_1307835824.98345" 
    $P7896."add_method"($P7897, "colonpair", $P7898)
    nqp_get_sc_object $P7899, "1307835814.0955", 16
    get_how $P7900, $P7899
    nqp_get_sc_object $P7901, "1307835814.0955", 16
    .const 'Sub' $P7902 = "159_1307835824.98345" 
    $P7900."add_method"($P7901, "!PREFIX__colonpair", $P7902)
    nqp_get_sc_object $P7903, "1307835814.0955", 16
    get_how $P7904, $P7903
    nqp_get_sc_object $P7905, "1307835814.0955", 16
    .const 'Sub' $P7906 = "160_1307835824.98345" 
    $P7904."add_method"($P7905, "variable", $P7906)
    nqp_get_sc_object $P7907, "1307835814.0955", 16
    get_how $P7908, $P7907
    nqp_get_sc_object $P7909, "1307835814.0955", 16
    .const 'Sub' $P7910 = "161_1307835824.98345" 
    $P7908."add_method"($P7909, "!PREFIX__variable", $P7910)
    nqp_get_sc_object $P7911, "1307835814.0955", 16
    get_how $P7912, $P7911
    nqp_get_sc_object $P7913, "1307835814.0955", 16
    .const 'Sub' $P7914 = "162_1307835824.98345" 
    $P7912."add_method"($P7913, "sigil", $P7914)
    nqp_get_sc_object $P7915, "1307835814.0955", 16
    get_how $P7916, $P7915
    nqp_get_sc_object $P7917, "1307835814.0955", 16
    .const 'Sub' $P7918 = "163_1307835824.98345" 
    $P7916."add_method"($P7917, "!PREFIX__sigil", $P7918)
    nqp_get_sc_object $P7919, "1307835814.0955", 16
    get_how $P7920, $P7919
    nqp_get_sc_object $P7921, "1307835814.0955", 16
    .const 'Sub' $P7922 = "164_1307835824.98345" 
    $P7920."add_method"($P7921, "twigil", $P7922)
    nqp_get_sc_object $P7923, "1307835814.0955", 16
    get_how $P7924, $P7923
    nqp_get_sc_object $P7925, "1307835814.0955", 16
    .const 'Sub' $P7926 = "165_1307835824.98345" 
    $P7924."add_method"($P7925, "!PREFIX__twigil", $P7926)
    nqp_get_sc_object $P7927, "1307835814.0955", 16
    get_how $P7928, $P7927
    nqp_get_sc_object $P7929, "1307835814.0955", 16
    .const 'Sub' $P7930 = "166_1307835824.98345" 
    $P7928."add_method"($P7929, "package_declarator", $P7930)
    nqp_get_sc_object $P7931, "1307835814.0955", 16
    get_how $P7932, $P7931
    nqp_get_sc_object $P7933, "1307835814.0955", 16
    .const 'Sub' $P7934 = "167_1307835824.98345" 
    $P7932."add_method"($P7933, "!PREFIX__package_declarator", $P7934)
    nqp_get_sc_object $P7935, "1307835814.0955", 16
    get_how $P7936, $P7935
    nqp_get_sc_object $P7937, "1307835814.0955", 16
    .const 'Sub' $P7938 = "168_1307835824.98345" 
    $P7936."add_method"($P7937, "package_declarator:sym<module>", $P7938)
    nqp_get_sc_object $P7939, "1307835814.0955", 16
    get_how $P7940, $P7939
    nqp_get_sc_object $P7941, "1307835814.0955", 16
    .const 'Sub' $P7942 = "169_1307835824.98345" 
    $P7940."add_method"($P7941, "!PREFIX__package_declarator:sym<module>", $P7942)
    nqp_get_sc_object $P7943, "1307835814.0955", 16
    get_how $P7944, $P7943
    nqp_get_sc_object $P7945, "1307835814.0955", 16
    .const 'Sub' $P7946 = "170_1307835824.98345" 
    $P7944."add_method"($P7945, "package_declarator:sym<knowhow>", $P7946)
    nqp_get_sc_object $P7947, "1307835814.0955", 16
    get_how $P7948, $P7947
    nqp_get_sc_object $P7949, "1307835814.0955", 16
    .const 'Sub' $P7950 = "171_1307835824.98345" 
    $P7948."add_method"($P7949, "!PREFIX__package_declarator:sym<knowhow>", $P7950)
    nqp_get_sc_object $P7951, "1307835814.0955", 16
    get_how $P7952, $P7951
    nqp_get_sc_object $P7953, "1307835814.0955", 16
    .const 'Sub' $P7954 = "172_1307835824.98345" 
    $P7952."add_method"($P7953, "package_declarator:sym<class>", $P7954)
    nqp_get_sc_object $P7955, "1307835814.0955", 16
    get_how $P7956, $P7955
    nqp_get_sc_object $P7957, "1307835814.0955", 16
    .const 'Sub' $P7958 = "173_1307835824.98345" 
    $P7956."add_method"($P7957, "!PREFIX__package_declarator:sym<class>", $P7958)
    nqp_get_sc_object $P7959, "1307835814.0955", 16
    get_how $P7960, $P7959
    nqp_get_sc_object $P7961, "1307835814.0955", 16
    .const 'Sub' $P7962 = "174_1307835824.98345" 
    $P7960."add_method"($P7961, "package_declarator:sym<grammar>", $P7962)
    nqp_get_sc_object $P7963, "1307835814.0955", 16
    get_how $P7964, $P7963
    nqp_get_sc_object $P7965, "1307835814.0955", 16
    .const 'Sub' $P7966 = "175_1307835824.98345" 
    $P7964."add_method"($P7965, "!PREFIX__package_declarator:sym<grammar>", $P7966)
    nqp_get_sc_object $P7967, "1307835814.0955", 16
    get_how $P7968, $P7967
    nqp_get_sc_object $P7969, "1307835814.0955", 16
    .const 'Sub' $P7970 = "176_1307835824.98345" 
    $P7968."add_method"($P7969, "package_declarator:sym<role>", $P7970)
    nqp_get_sc_object $P7971, "1307835814.0955", 16
    get_how $P7972, $P7971
    nqp_get_sc_object $P7973, "1307835814.0955", 16
    .const 'Sub' $P7974 = "177_1307835824.98345" 
    $P7972."add_method"($P7973, "!PREFIX__package_declarator:sym<role>", $P7974)
    nqp_get_sc_object $P7975, "1307835814.0955", 16
    get_how $P7976, $P7975
    nqp_get_sc_object $P7977, "1307835814.0955", 16
    .const 'Sub' $P7978 = "178_1307835824.98345" 
    $P7976."add_method"($P7977, "package_declarator:sym<native>", $P7978)
    nqp_get_sc_object $P7979, "1307835814.0955", 16
    get_how $P7980, $P7979
    nqp_get_sc_object $P7981, "1307835814.0955", 16
    .const 'Sub' $P7982 = "179_1307835824.98345" 
    $P7980."add_method"($P7981, "!PREFIX__package_declarator:sym<native>", $P7982)
    nqp_get_sc_object $P7983, "1307835814.0955", 16
    get_how $P7984, $P7983
    nqp_get_sc_object $P7985, "1307835814.0955", 16
    .const 'Sub' $P7986 = "180_1307835824.98345" 
    $P7984."add_method"($P7985, "package_declarator:sym<stub>", $P7986)
    nqp_get_sc_object $P7987, "1307835814.0955", 16
    get_how $P7988, $P7987
    nqp_get_sc_object $P7989, "1307835814.0955", 16
    .const 'Sub' $P7990 = "181_1307835824.98345" 
    $P7988."add_method"($P7989, "!PREFIX__package_declarator:sym<stub>", $P7990)
    nqp_get_sc_object $P7991, "1307835814.0955", 16
    get_how $P7992, $P7991
    nqp_get_sc_object $P7993, "1307835814.0955", 16
    .const 'Sub' $P7994 = "182_1307835824.98345" 
    $P7992."add_method"($P7993, "package_def", $P7994)
    nqp_get_sc_object $P7995, "1307835814.0955", 16
    get_how $P7996, $P7995
    nqp_get_sc_object $P7997, "1307835814.0955", 16
    .const 'Sub' $P7998 = "184_1307835824.98345" 
    $P7996."add_method"($P7997, "!PREFIX__package_def", $P7998)
    nqp_get_sc_object $P7999, "1307835814.0955", 16
    get_how $P8000, $P7999
    nqp_get_sc_object $P8001, "1307835814.0955", 16
    .const 'Sub' $P8002 = "185_1307835824.98345" 
    $P8000."add_method"($P8001, "scope_declarator", $P8002)
    nqp_get_sc_object $P8003, "1307835814.0955", 16
    get_how $P8004, $P8003
    nqp_get_sc_object $P8005, "1307835814.0955", 16
    .const 'Sub' $P8006 = "186_1307835824.98345" 
    $P8004."add_method"($P8005, "!PREFIX__scope_declarator", $P8006)
    nqp_get_sc_object $P8007, "1307835814.0955", 16
    get_how $P8008, $P8007
    nqp_get_sc_object $P8009, "1307835814.0955", 16
    .const 'Sub' $P8010 = "187_1307835824.98345" 
    $P8008."add_method"($P8009, "scope_declarator:sym<my>", $P8010)
    nqp_get_sc_object $P8011, "1307835814.0955", 16
    get_how $P8012, $P8011
    nqp_get_sc_object $P8013, "1307835814.0955", 16
    .const 'Sub' $P8014 = "188_1307835824.98345" 
    $P8012."add_method"($P8013, "!PREFIX__scope_declarator:sym<my>", $P8014)
    nqp_get_sc_object $P8015, "1307835814.0955", 16
    get_how $P8016, $P8015
    nqp_get_sc_object $P8017, "1307835814.0955", 16
    .const 'Sub' $P8018 = "189_1307835824.98345" 
    $P8016."add_method"($P8017, "scope_declarator:sym<our>", $P8018)
    nqp_get_sc_object $P8019, "1307835814.0955", 16
    get_how $P8020, $P8019
    nqp_get_sc_object $P8021, "1307835814.0955", 16
    .const 'Sub' $P8022 = "190_1307835824.98345" 
    $P8020."add_method"($P8021, "!PREFIX__scope_declarator:sym<our>", $P8022)
    nqp_get_sc_object $P8023, "1307835814.0955", 16
    get_how $P8024, $P8023
    nqp_get_sc_object $P8025, "1307835814.0955", 16
    .const 'Sub' $P8026 = "191_1307835824.98345" 
    $P8024."add_method"($P8025, "scope_declarator:sym<has>", $P8026)
    nqp_get_sc_object $P8027, "1307835814.0955", 16
    get_how $P8028, $P8027
    nqp_get_sc_object $P8029, "1307835814.0955", 16
    .const 'Sub' $P8030 = "192_1307835824.98345" 
    $P8028."add_method"($P8029, "!PREFIX__scope_declarator:sym<has>", $P8030)
    nqp_get_sc_object $P8031, "1307835814.0955", 16
    get_how $P8032, $P8031
    nqp_get_sc_object $P8033, "1307835814.0955", 16
    .const 'Sub' $P8034 = "193_1307835824.98345" 
    $P8032."add_method"($P8033, "scoped", $P8034)
    nqp_get_sc_object $P8035, "1307835814.0955", 16
    get_how $P8036, $P8035
    nqp_get_sc_object $P8037, "1307835814.0955", 16
    .const 'Sub' $P8038 = "194_1307835824.98345" 
    $P8036."add_method"($P8037, "!PREFIX__scoped", $P8038)
    nqp_get_sc_object $P8039, "1307835814.0955", 16
    get_how $P8040, $P8039
    nqp_get_sc_object $P8041, "1307835814.0955", 16
    .const 'Sub' $P8042 = "195_1307835824.98345" 
    $P8040."add_method"($P8041, "typename", $P8042)
    nqp_get_sc_object $P8043, "1307835814.0955", 16
    get_how $P8044, $P8043
    nqp_get_sc_object $P8045, "1307835814.0955", 16
    .const 'Sub' $P8046 = "197_1307835824.98345" 
    $P8044."add_method"($P8045, "!PREFIX__typename", $P8046)
    nqp_get_sc_object $P8047, "1307835814.0955", 16
    get_how $P8048, $P8047
    nqp_get_sc_object $P8049, "1307835814.0955", 16
    .const 'Sub' $P8050 = "198_1307835824.98345" 
    $P8048."add_method"($P8049, "declarator", $P8050)
    nqp_get_sc_object $P8051, "1307835814.0955", 16
    get_how $P8052, $P8051
    nqp_get_sc_object $P8053, "1307835814.0955", 16
    .const 'Sub' $P8054 = "199_1307835824.98345" 
    $P8052."add_method"($P8053, "!PREFIX__declarator", $P8054)
    nqp_get_sc_object $P8055, "1307835814.0955", 16
    get_how $P8056, $P8055
    nqp_get_sc_object $P8057, "1307835814.0955", 16
    .const 'Sub' $P8058 = "200_1307835824.98345" 
    $P8056."add_method"($P8057, "variable_declarator", $P8058)
    nqp_get_sc_object $P8059, "1307835814.0955", 16
    get_how $P8060, $P8059
    nqp_get_sc_object $P8061, "1307835814.0955", 16
    .const 'Sub' $P8062 = "202_1307835824.98345" 
    $P8060."add_method"($P8061, "!PREFIX__variable_declarator", $P8062)
    nqp_get_sc_object $P8063, "1307835814.0955", 16
    get_how $P8064, $P8063
    nqp_get_sc_object $P8065, "1307835814.0955", 16
    .const 'Sub' $P8066 = "203_1307835824.98345" 
    $P8064."add_method"($P8065, "routine_declarator", $P8066)
    nqp_get_sc_object $P8067, "1307835814.0955", 16
    get_how $P8068, $P8067
    nqp_get_sc_object $P8069, "1307835814.0955", 16
    .const 'Sub' $P8070 = "204_1307835824.98345" 
    $P8068."add_method"($P8069, "!PREFIX__routine_declarator", $P8070)
    nqp_get_sc_object $P8071, "1307835814.0955", 16
    get_how $P8072, $P8071
    nqp_get_sc_object $P8073, "1307835814.0955", 16
    .const 'Sub' $P8074 = "205_1307835824.98345" 
    $P8072."add_method"($P8073, "routine_declarator:sym<sub>", $P8074)
    nqp_get_sc_object $P8075, "1307835814.0955", 16
    get_how $P8076, $P8075
    nqp_get_sc_object $P8077, "1307835814.0955", 16
    .const 'Sub' $P8078 = "206_1307835824.98345" 
    $P8076."add_method"($P8077, "!PREFIX__routine_declarator:sym<sub>", $P8078)
    nqp_get_sc_object $P8079, "1307835814.0955", 16
    get_how $P8080, $P8079
    nqp_get_sc_object $P8081, "1307835814.0955", 16
    .const 'Sub' $P8082 = "207_1307835824.98345" 
    $P8080."add_method"($P8081, "routine_declarator:sym<method>", $P8082)
    nqp_get_sc_object $P8083, "1307835814.0955", 16
    get_how $P8084, $P8083
    nqp_get_sc_object $P8085, "1307835814.0955", 16
    .const 'Sub' $P8086 = "208_1307835824.98345" 
    $P8084."add_method"($P8085, "!PREFIX__routine_declarator:sym<method>", $P8086)
    nqp_get_sc_object $P8087, "1307835814.0955", 16
    get_how $P8088, $P8087
    nqp_get_sc_object $P8089, "1307835814.0955", 16
    .const 'Sub' $P8090 = "209_1307835824.98345" 
    $P8088."add_method"($P8089, "routine_def", $P8090)
    nqp_get_sc_object $P8091, "1307835814.0955", 16
    get_how $P8092, $P8091
    nqp_get_sc_object $P8093, "1307835814.0955", 16
    .const 'Sub' $P8094 = "210_1307835824.98345" 
    $P8092."add_method"($P8093, "!PREFIX__routine_def", $P8094)
    nqp_get_sc_object $P8095, "1307835814.0955", 16
    get_how $P8096, $P8095
    nqp_get_sc_object $P8097, "1307835814.0955", 16
    .const 'Sub' $P8098 = "211_1307835824.98345" 
    $P8096."add_method"($P8097, "method_def", $P8098)
    nqp_get_sc_object $P8099, "1307835814.0955", 16
    get_how $P8100, $P8099
    nqp_get_sc_object $P8101, "1307835814.0955", 16
    .const 'Sub' $P8102 = "213_1307835824.98345" 
    $P8100."add_method"($P8101, "!PREFIX__method_def", $P8102)
    nqp_get_sc_object $P8103, "1307835814.0955", 16
    get_how $P8104, $P8103
    nqp_get_sc_object $P8105, "1307835814.0955", 16
    .const 'Sub' $P8106 = "214_1307835824.98345" 
    $P8104."add_method"($P8105, "onlystar", $P8106)
    nqp_get_sc_object $P8107, "1307835814.0955", 16
    get_how $P8108, $P8107
    nqp_get_sc_object $P8109, "1307835814.0955", 16
    .const 'Sub' $P8110 = "216_1307835824.98345" 
    $P8108."add_method"($P8109, "!PREFIX__onlystar", $P8110)
    nqp_get_sc_object $P8111, "1307835814.0955", 16
    get_how $P8112, $P8111
    nqp_get_sc_object $P8113, "1307835814.0955", 16
    .const 'Sub' $P8114 = "217_1307835824.98345" 
    $P8112."add_method"($P8113, "multi_declarator", $P8114)
    nqp_get_sc_object $P8115, "1307835814.0955", 16
    get_how $P8116, $P8115
    nqp_get_sc_object $P8117, "1307835814.0955", 16
    .const 'Sub' $P8118 = "218_1307835824.98345" 
    $P8116."add_method"($P8117, "!PREFIX__multi_declarator", $P8118)
    nqp_get_sc_object $P8119, "1307835814.0955", 16
    get_how $P8120, $P8119
    nqp_get_sc_object $P8121, "1307835814.0955", 16
    .const 'Sub' $P8122 = "219_1307835824.98345" 
    $P8120."add_method"($P8121, "multi_declarator:sym<multi>", $P8122)
    nqp_get_sc_object $P8123, "1307835814.0955", 16
    get_how $P8124, $P8123
    nqp_get_sc_object $P8125, "1307835814.0955", 16
    .const 'Sub' $P8126 = "220_1307835824.98345" 
    $P8124."add_method"($P8125, "!PREFIX__multi_declarator:sym<multi>", $P8126)
    nqp_get_sc_object $P8127, "1307835814.0955", 16
    get_how $P8128, $P8127
    nqp_get_sc_object $P8129, "1307835814.0955", 16
    .const 'Sub' $P8130 = "221_1307835824.98345" 
    $P8128."add_method"($P8129, "multi_declarator:sym<proto>", $P8130)
    nqp_get_sc_object $P8131, "1307835814.0955", 16
    get_how $P8132, $P8131
    nqp_get_sc_object $P8133, "1307835814.0955", 16
    .const 'Sub' $P8134 = "222_1307835824.98345" 
    $P8132."add_method"($P8133, "!PREFIX__multi_declarator:sym<proto>", $P8134)
    nqp_get_sc_object $P8135, "1307835814.0955", 16
    get_how $P8136, $P8135
    nqp_get_sc_object $P8137, "1307835814.0955", 16
    .const 'Sub' $P8138 = "223_1307835824.98345" 
    $P8136."add_method"($P8137, "multi_declarator:sym<null>", $P8138)
    nqp_get_sc_object $P8139, "1307835814.0955", 16
    get_how $P8140, $P8139
    nqp_get_sc_object $P8141, "1307835814.0955", 16
    .const 'Sub' $P8142 = "224_1307835824.98345" 
    $P8140."add_method"($P8141, "!PREFIX__multi_declarator:sym<null>", $P8142)
    nqp_get_sc_object $P8143, "1307835814.0955", 16
    get_how $P8144, $P8143
    nqp_get_sc_object $P8145, "1307835814.0955", 16
    .const 'Sub' $P8146 = "225_1307835824.98345" 
    $P8144."add_method"($P8145, "signature", $P8146)
    nqp_get_sc_object $P8147, "1307835814.0955", 16
    get_how $P8148, $P8147
    nqp_get_sc_object $P8149, "1307835814.0955", 16
    .const 'Sub' $P8150 = "227_1307835824.98345" 
    $P8148."add_method"($P8149, "!PREFIX__signature", $P8150)
    nqp_get_sc_object $P8151, "1307835814.0955", 16
    get_how $P8152, $P8151
    nqp_get_sc_object $P8153, "1307835814.0955", 16
    .const 'Sub' $P8154 = "228_1307835824.98345" 
    $P8152."add_method"($P8153, "parameter", $P8154)
    nqp_get_sc_object $P8155, "1307835814.0955", 16
    get_how $P8156, $P8155
    nqp_get_sc_object $P8157, "1307835814.0955", 16
    .const 'Sub' $P8158 = "229_1307835824.98345" 
    $P8156."add_method"($P8157, "!PREFIX__parameter", $P8158)
    nqp_get_sc_object $P8159, "1307835814.0955", 16
    get_how $P8160, $P8159
    nqp_get_sc_object $P8161, "1307835814.0955", 16
    .const 'Sub' $P8162 = "230_1307835824.98345" 
    $P8160."add_method"($P8161, "param_var", $P8162)
    nqp_get_sc_object $P8163, "1307835814.0955", 16
    get_how $P8164, $P8163
    nqp_get_sc_object $P8165, "1307835814.0955", 16
    .const 'Sub' $P8166 = "231_1307835824.98345" 
    $P8164."add_method"($P8165, "!PREFIX__param_var", $P8166)
    nqp_get_sc_object $P8167, "1307835814.0955", 16
    get_how $P8168, $P8167
    nqp_get_sc_object $P8169, "1307835814.0955", 16
    .const 'Sub' $P8170 = "232_1307835824.98345" 
    $P8168."add_method"($P8169, "named_param", $P8170)
    nqp_get_sc_object $P8171, "1307835814.0955", 16
    get_how $P8172, $P8171
    nqp_get_sc_object $P8173, "1307835814.0955", 16
    .const 'Sub' $P8174 = "233_1307835824.98345" 
    $P8172."add_method"($P8173, "!PREFIX__named_param", $P8174)
    nqp_get_sc_object $P8175, "1307835814.0955", 16
    get_how $P8176, $P8175
    nqp_get_sc_object $P8177, "1307835814.0955", 16
    .const 'Sub' $P8178 = "234_1307835824.98345" 
    $P8176."add_method"($P8177, "default_value", $P8178)
    nqp_get_sc_object $P8179, "1307835814.0955", 16
    get_how $P8180, $P8179
    nqp_get_sc_object $P8181, "1307835814.0955", 16
    .const 'Sub' $P8182 = "235_1307835824.98345" 
    $P8180."add_method"($P8181, "!PREFIX__default_value", $P8182)
    nqp_get_sc_object $P8183, "1307835814.0955", 16
    get_how $P8184, $P8183
    nqp_get_sc_object $P8185, "1307835814.0955", 16
    .const 'Sub' $P8186 = "236_1307835824.98345" 
    $P8184."add_method"($P8185, "trait", $P8186)
    nqp_get_sc_object $P8187, "1307835814.0955", 16
    get_how $P8188, $P8187
    nqp_get_sc_object $P8189, "1307835814.0955", 16
    .const 'Sub' $P8190 = "237_1307835824.98345" 
    $P8188."add_method"($P8189, "!PREFIX__trait", $P8190)
    nqp_get_sc_object $P8191, "1307835814.0955", 16
    get_how $P8192, $P8191
    nqp_get_sc_object $P8193, "1307835814.0955", 16
    .const 'Sub' $P8194 = "238_1307835824.98345" 
    $P8192."add_method"($P8193, "trait_mod", $P8194)
    nqp_get_sc_object $P8195, "1307835814.0955", 16
    get_how $P8196, $P8195
    nqp_get_sc_object $P8197, "1307835814.0955", 16
    .const 'Sub' $P8198 = "239_1307835824.98345" 
    $P8196."add_method"($P8197, "!PREFIX__trait_mod", $P8198)
    nqp_get_sc_object $P8199, "1307835814.0955", 16
    get_how $P8200, $P8199
    nqp_get_sc_object $P8201, "1307835814.0955", 16
    .const 'Sub' $P8202 = "240_1307835824.98345" 
    $P8200."add_method"($P8201, "trait_mod:sym<is>", $P8202)
    nqp_get_sc_object $P8203, "1307835814.0955", 16
    get_how $P8204, $P8203
    nqp_get_sc_object $P8205, "1307835814.0955", 16
    .const 'Sub' $P8206 = "241_1307835824.98345" 
    $P8204."add_method"($P8205, "!PREFIX__trait_mod:sym<is>", $P8206)
    nqp_get_sc_object $P8207, "1307835814.0955", 16
    get_how $P8208, $P8207
    nqp_get_sc_object $P8209, "1307835814.0955", 16
    .const 'Sub' $P8210 = "242_1307835824.98345" 
    $P8208."add_method"($P8209, "regex_declarator", $P8210)
    nqp_get_sc_object $P8211, "1307835814.0955", 16
    get_how $P8212, $P8211
    nqp_get_sc_object $P8213, "1307835814.0955", 16
    .const 'Sub' $P8214 = "243_1307835824.98345" 
    $P8212."add_method"($P8213, "!PREFIX__regex_declarator", $P8214)
    nqp_get_sc_object $P8215, "1307835814.0955", 16
    get_how $P8216, $P8215
    nqp_get_sc_object $P8217, "1307835814.0955", 16
    .const 'Sub' $P8218 = "244_1307835824.98345" 
    $P8216."add_method"($P8217, "dotty", $P8218)
    nqp_get_sc_object $P8219, "1307835814.0955", 16
    get_how $P8220, $P8219
    nqp_get_sc_object $P8221, "1307835814.0955", 16
    .const 'Sub' $P8222 = "245_1307835824.98345" 
    $P8220."add_method"($P8221, "!PREFIX__dotty", $P8222)
    nqp_get_sc_object $P8223, "1307835814.0955", 16
    get_how $P8224, $P8223
    nqp_get_sc_object $P8225, "1307835814.0955", 16
    .const 'Sub' $P8226 = "246_1307835824.98345" 
    $P8224."add_method"($P8225, "term", $P8226)
    nqp_get_sc_object $P8227, "1307835814.0955", 16
    get_how $P8228, $P8227
    nqp_get_sc_object $P8229, "1307835814.0955", 16
    .const 'Sub' $P8230 = "247_1307835824.98345" 
    $P8228."add_method"($P8229, "!PREFIX__term", $P8230)
    nqp_get_sc_object $P8231, "1307835814.0955", 16
    get_how $P8232, $P8231
    nqp_get_sc_object $P8233, "1307835814.0955", 16
    .const 'Sub' $P8234 = "248_1307835824.98345" 
    $P8232."add_method"($P8233, "term:sym<self>", $P8234)
    nqp_get_sc_object $P8235, "1307835814.0955", 16
    get_how $P8236, $P8235
    nqp_get_sc_object $P8237, "1307835814.0955", 16
    .const 'Sub' $P8238 = "249_1307835824.98345" 
    $P8236."add_method"($P8237, "!PREFIX__term:sym<self>", $P8238)
    nqp_get_sc_object $P8239, "1307835814.0955", 16
    get_how $P8240, $P8239
    nqp_get_sc_object $P8241, "1307835814.0955", 16
    .const 'Sub' $P8242 = "250_1307835824.98345" 
    $P8240."add_method"($P8241, "term:sym<identifier>", $P8242)
    nqp_get_sc_object $P8243, "1307835814.0955", 16
    get_how $P8244, $P8243
    nqp_get_sc_object $P8245, "1307835814.0955", 16
    .const 'Sub' $P8246 = "251_1307835824.98345" 
    $P8244."add_method"($P8245, "!PREFIX__term:sym<identifier>", $P8246)
    nqp_get_sc_object $P8247, "1307835814.0955", 16
    get_how $P8248, $P8247
    nqp_get_sc_object $P8249, "1307835814.0955", 16
    .const 'Sub' $P8250 = "252_1307835824.98345" 
    $P8248."add_method"($P8249, "term:sym<name>", $P8250)
    nqp_get_sc_object $P8251, "1307835814.0955", 16
    get_how $P8252, $P8251
    nqp_get_sc_object $P8253, "1307835814.0955", 16
    .const 'Sub' $P8254 = "253_1307835824.98345" 
    $P8252."add_method"($P8253, "!PREFIX__term:sym<name>", $P8254)
    nqp_get_sc_object $P8255, "1307835814.0955", 16
    get_how $P8256, $P8255
    nqp_get_sc_object $P8257, "1307835814.0955", 16
    .const 'Sub' $P8258 = "254_1307835824.98345" 
    $P8256."add_method"($P8257, "term:sym<pir::op>", $P8258)
    nqp_get_sc_object $P8259, "1307835814.0955", 16
    get_how $P8260, $P8259
    nqp_get_sc_object $P8261, "1307835814.0955", 16
    .const 'Sub' $P8262 = "255_1307835824.98345" 
    $P8260."add_method"($P8261, "!PREFIX__term:sym<pir::op>", $P8262)
    nqp_get_sc_object $P8263, "1307835814.0955", 16
    get_how $P8264, $P8263
    nqp_get_sc_object $P8265, "1307835814.0955", 16
    .const 'Sub' $P8266 = "256_1307835824.98345" 
    $P8264."add_method"($P8265, "term:sym<onlystar>", $P8266)
    nqp_get_sc_object $P8267, "1307835814.0955", 16
    get_how $P8268, $P8267
    nqp_get_sc_object $P8269, "1307835814.0955", 16
    .const 'Sub' $P8270 = "258_1307835824.98345" 
    $P8268."add_method"($P8269, "!PREFIX__term:sym<onlystar>", $P8270)
    nqp_get_sc_object $P8271, "1307835814.0955", 16
    get_how $P8272, $P8271
    nqp_get_sc_object $P8273, "1307835814.0955", 16
    .const 'Sub' $P8274 = "259_1307835824.98345" 
    $P8272."add_method"($P8273, "args", $P8274)
    nqp_get_sc_object $P8275, "1307835814.0955", 16
    get_how $P8276, $P8275
    nqp_get_sc_object $P8277, "1307835814.0955", 16
    .const 'Sub' $P8278 = "260_1307835824.98345" 
    $P8276."add_method"($P8277, "!PREFIX__args", $P8278)
    nqp_get_sc_object $P8279, "1307835814.0955", 16
    get_how $P8280, $P8279
    nqp_get_sc_object $P8281, "1307835814.0955", 16
    .const 'Sub' $P8282 = "261_1307835824.98345" 
    $P8280."add_method"($P8281, "arglist", $P8282)
    nqp_get_sc_object $P8283, "1307835814.0955", 16
    get_how $P8284, $P8283
    nqp_get_sc_object $P8285, "1307835814.0955", 16
    .const 'Sub' $P8286 = "262_1307835824.98345" 
    $P8284."add_method"($P8285, "!PREFIX__arglist", $P8286)
    nqp_get_sc_object $P8287, "1307835814.0955", 16
    get_how $P8288, $P8287
    nqp_get_sc_object $P8289, "1307835814.0955", 16
    .const 'Sub' $P8290 = "263_1307835824.98345" 
    $P8288."add_method"($P8289, "term:sym<value>", $P8290)
    nqp_get_sc_object $P8291, "1307835814.0955", 16
    get_how $P8292, $P8291
    nqp_get_sc_object $P8293, "1307835814.0955", 16
    .const 'Sub' $P8294 = "264_1307835824.98345" 
    $P8292."add_method"($P8293, "!PREFIX__term:sym<value>", $P8294)
    nqp_get_sc_object $P8295, "1307835814.0955", 16
    get_how $P8296, $P8295
    nqp_get_sc_object $P8297, "1307835814.0955", 16
    .const 'Sub' $P8298 = "265_1307835824.98345" 
    $P8296."add_method"($P8297, "value", $P8298)
    nqp_get_sc_object $P8299, "1307835814.0955", 16
    get_how $P8300, $P8299
    nqp_get_sc_object $P8301, "1307835814.0955", 16
    .const 'Sub' $P8302 = "266_1307835824.98345" 
    $P8300."add_method"($P8301, "!PREFIX__value", $P8302)
    nqp_get_sc_object $P8303, "1307835814.0955", 16
    get_how $P8304, $P8303
    nqp_get_sc_object $P8305, "1307835814.0955", 16
    .const 'Sub' $P8306 = "267_1307835824.98345" 
    $P8304."add_method"($P8305, "number", $P8306)
    nqp_get_sc_object $P8307, "1307835814.0955", 16
    get_how $P8308, $P8307
    nqp_get_sc_object $P8309, "1307835814.0955", 16
    .const 'Sub' $P8310 = "268_1307835824.98345" 
    $P8308."add_method"($P8309, "!PREFIX__number", $P8310)
    nqp_get_sc_object $P8311, "1307835814.0955", 16
    get_how $P8312, $P8311
    nqp_get_sc_object $P8313, "1307835814.0955", 16
    .const 'Sub' $P8314 = "269_1307835824.98345" 
    $P8312."add_method"($P8313, "quote", $P8314)
    nqp_get_sc_object $P8315, "1307835814.0955", 16
    get_how $P8316, $P8315
    nqp_get_sc_object $P8317, "1307835814.0955", 16
    .const 'Sub' $P8318 = "270_1307835824.98345" 
    $P8316."add_method"($P8317, "!PREFIX__quote", $P8318)
    nqp_get_sc_object $P8319, "1307835814.0955", 16
    get_how $P8320, $P8319
    nqp_get_sc_object $P8321, "1307835814.0955", 16
    .const 'Sub' $P8322 = "271_1307835824.98345" 
    $P8320."add_method"($P8321, "quote:sym<apos>", $P8322)
    nqp_get_sc_object $P8323, "1307835814.0955", 16
    get_how $P8324, $P8323
    nqp_get_sc_object $P8325, "1307835814.0955", 16
    .const 'Sub' $P8326 = "272_1307835824.98345" 
    $P8324."add_method"($P8325, "!PREFIX__quote:sym<apos>", $P8326)
    nqp_get_sc_object $P8327, "1307835814.0955", 16
    get_how $P8328, $P8327
    nqp_get_sc_object $P8329, "1307835814.0955", 16
    .const 'Sub' $P8330 = "273_1307835824.98345" 
    $P8328."add_method"($P8329, "quote:sym<dblq>", $P8330)
    nqp_get_sc_object $P8331, "1307835814.0955", 16
    get_how $P8332, $P8331
    nqp_get_sc_object $P8333, "1307835814.0955", 16
    .const 'Sub' $P8334 = "274_1307835824.98345" 
    $P8332."add_method"($P8333, "!PREFIX__quote:sym<dblq>", $P8334)
    nqp_get_sc_object $P8335, "1307835814.0955", 16
    get_how $P8336, $P8335
    nqp_get_sc_object $P8337, "1307835814.0955", 16
    .const 'Sub' $P8338 = "275_1307835824.98345" 
    $P8336."add_method"($P8337, "quote:sym<q>", $P8338)
    nqp_get_sc_object $P8339, "1307835814.0955", 16
    get_how $P8340, $P8339
    nqp_get_sc_object $P8341, "1307835814.0955", 16
    .const 'Sub' $P8342 = "276_1307835824.98345" 
    $P8340."add_method"($P8341, "!PREFIX__quote:sym<q>", $P8342)
    nqp_get_sc_object $P8343, "1307835814.0955", 16
    get_how $P8344, $P8343
    nqp_get_sc_object $P8345, "1307835814.0955", 16
    .const 'Sub' $P8346 = "277_1307835824.98345" 
    $P8344."add_method"($P8345, "quote:sym<qq>", $P8346)
    nqp_get_sc_object $P8347, "1307835814.0955", 16
    get_how $P8348, $P8347
    nqp_get_sc_object $P8349, "1307835814.0955", 16
    .const 'Sub' $P8350 = "278_1307835824.98345" 
    $P8348."add_method"($P8349, "!PREFIX__quote:sym<qq>", $P8350)
    nqp_get_sc_object $P8351, "1307835814.0955", 16
    get_how $P8352, $P8351
    nqp_get_sc_object $P8353, "1307835814.0955", 16
    .const 'Sub' $P8354 = "279_1307835824.98345" 
    $P8352."add_method"($P8353, "quote:sym<Q>", $P8354)
    nqp_get_sc_object $P8355, "1307835814.0955", 16
    get_how $P8356, $P8355
    nqp_get_sc_object $P8357, "1307835814.0955", 16
    .const 'Sub' $P8358 = "280_1307835824.98345" 
    $P8356."add_method"($P8357, "!PREFIX__quote:sym<Q>", $P8358)
    nqp_get_sc_object $P8359, "1307835814.0955", 16
    get_how $P8360, $P8359
    nqp_get_sc_object $P8361, "1307835814.0955", 16
    .const 'Sub' $P8362 = "281_1307835824.98345" 
    $P8360."add_method"($P8361, "quote:sym<Q:PIR>", $P8362)
    nqp_get_sc_object $P8363, "1307835814.0955", 16
    get_how $P8364, $P8363
    nqp_get_sc_object $P8365, "1307835814.0955", 16
    .const 'Sub' $P8366 = "282_1307835824.98345" 
    $P8364."add_method"($P8365, "!PREFIX__quote:sym<Q:PIR>", $P8366)
    nqp_get_sc_object $P8367, "1307835814.0955", 16
    get_how $P8368, $P8367
    nqp_get_sc_object $P8369, "1307835814.0955", 16
    .const 'Sub' $P8370 = "283_1307835824.98345" 
    $P8368."add_method"($P8369, "quote:sym</ />", $P8370)
    nqp_get_sc_object $P8371, "1307835814.0955", 16
    get_how $P8372, $P8371
    nqp_get_sc_object $P8373, "1307835814.0955", 16
    .const 'Sub' $P8374 = "284_1307835824.98345" 
    $P8372."add_method"($P8373, "!PREFIX__quote:sym</ />", $P8374)
    nqp_get_sc_object $P8375, "1307835814.0955", 16
    get_how $P8376, $P8375
    nqp_get_sc_object $P8377, "1307835814.0955", 16
    .const 'Sub' $P8378 = "285_1307835824.98345" 
    $P8376."add_method"($P8377, "quote_escape:sym<$>", $P8378)
    nqp_get_sc_object $P8379, "1307835814.0955", 16
    get_how $P8380, $P8379
    nqp_get_sc_object $P8381, "1307835814.0955", 16
    .const 'Sub' $P8382 = "286_1307835824.98345" 
    $P8380."add_method"($P8381, "!PREFIX__quote_escape:sym<$>", $P8382)
    nqp_get_sc_object $P8383, "1307835814.0955", 16
    get_how $P8384, $P8383
    nqp_get_sc_object $P8385, "1307835814.0955", 16
    .const 'Sub' $P8386 = "287_1307835824.98345" 
    $P8384."add_method"($P8385, "quote_escape:sym<{ }>", $P8386)
    nqp_get_sc_object $P8387, "1307835814.0955", 16
    get_how $P8388, $P8387
    nqp_get_sc_object $P8389, "1307835814.0955", 16
    .const 'Sub' $P8390 = "288_1307835824.98345" 
    $P8388."add_method"($P8389, "!PREFIX__quote_escape:sym<{ }>", $P8390)
    nqp_get_sc_object $P8391, "1307835814.0955", 16
    get_how $P8392, $P8391
    nqp_get_sc_object $P8393, "1307835814.0955", 16
    .const 'Sub' $P8394 = "289_1307835824.98345" 
    $P8392."add_method"($P8393, "quote_escape:sym<esc>", $P8394)
    nqp_get_sc_object $P8395, "1307835814.0955", 16
    get_how $P8396, $P8395
    nqp_get_sc_object $P8397, "1307835814.0955", 16
    .const 'Sub' $P8398 = "290_1307835824.98345" 
    $P8396."add_method"($P8397, "!PREFIX__quote_escape:sym<esc>", $P8398)
    nqp_get_sc_object $P8399, "1307835814.0955", 16
    get_how $P8400, $P8399
    nqp_get_sc_object $P8401, "1307835814.0955", 16
    .const 'Sub' $P8402 = "291_1307835824.98345" 
    $P8400."add_method"($P8401, "circumfix:sym<( )>", $P8402)
    nqp_get_sc_object $P8403, "1307835814.0955", 16
    get_how $P8404, $P8403
    nqp_get_sc_object $P8405, "1307835814.0955", 16
    .const 'Sub' $P8406 = "292_1307835824.98345" 
    $P8404."add_method"($P8405, "!PREFIX__circumfix:sym<( )>", $P8406)
    nqp_get_sc_object $P8407, "1307835814.0955", 16
    get_how $P8408, $P8407
    nqp_get_sc_object $P8409, "1307835814.0955", 16
    .const 'Sub' $P8410 = "293_1307835824.98345" 
    $P8408."add_method"($P8409, "circumfix:sym<[ ]>", $P8410)
    nqp_get_sc_object $P8411, "1307835814.0955", 16
    get_how $P8412, $P8411
    nqp_get_sc_object $P8413, "1307835814.0955", 16
    .const 'Sub' $P8414 = "294_1307835824.98345" 
    $P8412."add_method"($P8413, "!PREFIX__circumfix:sym<[ ]>", $P8414)
    nqp_get_sc_object $P8415, "1307835814.0955", 16
    get_how $P8416, $P8415
    nqp_get_sc_object $P8417, "1307835814.0955", 16
    .const 'Sub' $P8418 = "295_1307835824.98345" 
    $P8416."add_method"($P8417, "circumfix:sym<ang>", $P8418)
    nqp_get_sc_object $P8419, "1307835814.0955", 16
    get_how $P8420, $P8419
    nqp_get_sc_object $P8421, "1307835814.0955", 16
    .const 'Sub' $P8422 = "296_1307835824.98345" 
    $P8420."add_method"($P8421, "!PREFIX__circumfix:sym<ang>", $P8422)
    nqp_get_sc_object $P8423, "1307835814.0955", 16
    get_how $P8424, $P8423
    nqp_get_sc_object $P8425, "1307835814.0955", 16
    .const 'Sub' $P8426 = "297_1307835824.98345" 
    $P8424."add_method"($P8425, unicode:"circumfix:sym<\x{ab} \x{bb}>", $P8426)
    nqp_get_sc_object $P8427, "1307835814.0955", 16
    get_how $P8428, $P8427
    nqp_get_sc_object $P8429, "1307835814.0955", 16
    .const 'Sub' $P8430 = "298_1307835824.98345" 
    $P8428."add_method"($P8429, unicode:"!PREFIX__circumfix:sym<\x{ab} \x{bb}>", $P8430)
    nqp_get_sc_object $P8431, "1307835814.0955", 16
    get_how $P8432, $P8431
    nqp_get_sc_object $P8433, "1307835814.0955", 16
    .const 'Sub' $P8434 = "299_1307835824.98345" 
    $P8432."add_method"($P8433, "circumfix:sym<{ }>", $P8434)
    nqp_get_sc_object $P8435, "1307835814.0955", 16
    get_how $P8436, $P8435
    nqp_get_sc_object $P8437, "1307835814.0955", 16
    .const 'Sub' $P8438 = "300_1307835824.98345" 
    $P8436."add_method"($P8437, "!PREFIX__circumfix:sym<{ }>", $P8438)
    nqp_get_sc_object $P8439, "1307835814.0955", 16
    get_how $P8440, $P8439
    nqp_get_sc_object $P8441, "1307835814.0955", 16
    .const 'Sub' $P8442 = "301_1307835824.98345" 
    $P8440."add_method"($P8441, "circumfix:sym<sigil>", $P8442)
    nqp_get_sc_object $P8443, "1307835814.0955", 16
    get_how $P8444, $P8443
    nqp_get_sc_object $P8445, "1307835814.0955", 16
    .const 'Sub' $P8446 = "302_1307835824.98345" 
    $P8444."add_method"($P8445, "!PREFIX__circumfix:sym<sigil>", $P8446)
    nqp_get_sc_object $P8447, "1307835814.0955", 16
    get_how $P8448, $P8447
    nqp_get_sc_object $P8449, "1307835814.0955", 16
    .const 'Sub' $P8450 = "303_1307835824.98345" 
    $P8448."add_method"($P8449, "semilist", $P8450)
    nqp_get_sc_object $P8451, "1307835814.0955", 16
    get_how $P8452, $P8451
    nqp_get_sc_object $P8453, "1307835814.0955", 16
    .const 'Sub' $P8454 = "304_1307835824.98345" 
    $P8452."add_method"($P8453, "!PREFIX__semilist", $P8454)
    nqp_get_sc_object $P8455, "1307835814.0955", 16
    get_how $P8456, $P8455
    nqp_get_sc_object $P8457, "1307835814.0955", 16
    .const 'Sub' $P8458 = "305_1307835824.98345" 
    $P8456."add_method"($P8457, "infixish", $P8458)
    nqp_get_sc_object $P8459, "1307835814.0955", 16
    get_how $P8460, $P8459
    nqp_get_sc_object $P8461, "1307835814.0955", 16
    .const 'Sub' $P8462 = "306_1307835824.98345" 
    $P8460."add_method"($P8461, "!PREFIX__infixish", $P8462)
    nqp_get_sc_object $P8463, "1307835814.0955", 16
    get_how $P8464, $P8463
    nqp_get_sc_object $P8465, "1307835814.0955", 16
    .const 'Sub' $P8466 = "307_1307835824.98345" 
    $P8464."add_method"($P8465, "infixstopper", $P8466)
    nqp_get_sc_object $P8467, "1307835814.0955", 16
    get_how $P8468, $P8467
    nqp_get_sc_object $P8469, "1307835814.0955", 16
    .const 'Sub' $P8470 = "308_1307835824.98345" 
    $P8468."add_method"($P8469, "!PREFIX__infixstopper", $P8470)
    nqp_get_sc_object $P8471, "1307835814.0955", 16
    get_how $P8472, $P8471
    nqp_get_sc_object $P8473, "1307835814.0955", 16
    .const 'Sub' $P8474 = "309_1307835824.98345" 
    $P8472."add_method"($P8473, "postcircumfix:sym<[ ]>", $P8474)
    nqp_get_sc_object $P8475, "1307835814.0955", 16
    get_how $P8476, $P8475
    nqp_get_sc_object $P8477, "1307835814.0955", 16
    .const 'Sub' $P8478 = "310_1307835824.98345" 
    $P8476."add_method"($P8477, "!PREFIX__postcircumfix:sym<[ ]>", $P8478)
    nqp_get_sc_object $P8479, "1307835814.0955", 16
    get_how $P8480, $P8479
    nqp_get_sc_object $P8481, "1307835814.0955", 16
    .const 'Sub' $P8482 = "311_1307835824.98345" 
    $P8480."add_method"($P8481, "postcircumfix:sym<{ }>", $P8482)
    nqp_get_sc_object $P8483, "1307835814.0955", 16
    get_how $P8484, $P8483
    nqp_get_sc_object $P8485, "1307835814.0955", 16
    .const 'Sub' $P8486 = "312_1307835824.98345" 
    $P8484."add_method"($P8485, "!PREFIX__postcircumfix:sym<{ }>", $P8486)
    nqp_get_sc_object $P8487, "1307835814.0955", 16
    get_how $P8488, $P8487
    nqp_get_sc_object $P8489, "1307835814.0955", 16
    .const 'Sub' $P8490 = "313_1307835824.98345" 
    $P8488."add_method"($P8489, "postcircumfix:sym<ang>", $P8490)
    nqp_get_sc_object $P8491, "1307835814.0955", 16
    get_how $P8492, $P8491
    nqp_get_sc_object $P8493, "1307835814.0955", 16
    .const 'Sub' $P8494 = "314_1307835824.98345" 
    $P8492."add_method"($P8493, "!PREFIX__postcircumfix:sym<ang>", $P8494)
    nqp_get_sc_object $P8495, "1307835814.0955", 16
    get_how $P8496, $P8495
    nqp_get_sc_object $P8497, "1307835814.0955", 16
    .const 'Sub' $P8498 = "315_1307835824.98345" 
    $P8496."add_method"($P8497, "postcircumfix:sym<( )>", $P8498)
    nqp_get_sc_object $P8499, "1307835814.0955", 16
    get_how $P8500, $P8499
    nqp_get_sc_object $P8501, "1307835814.0955", 16
    .const 'Sub' $P8502 = "316_1307835824.98345" 
    $P8500."add_method"($P8501, "!PREFIX__postcircumfix:sym<( )>", $P8502)
    nqp_get_sc_object $P8503, "1307835814.0955", 16
    get_how $P8504, $P8503
    nqp_get_sc_object $P8505, "1307835814.0955", 16
    .const 'Sub' $P8506 = "317_1307835824.98345" 
    $P8504."add_method"($P8505, "postfix:sym<.>", $P8506)
    nqp_get_sc_object $P8507, "1307835814.0955", 16
    get_how $P8508, $P8507
    nqp_get_sc_object $P8509, "1307835814.0955", 16
    .const 'Sub' $P8510 = "318_1307835824.98345" 
    $P8508."add_method"($P8509, "!PREFIX__postfix:sym<.>", $P8510)
    nqp_get_sc_object $P8511, "1307835814.0955", 16
    get_how $P8512, $P8511
    nqp_get_sc_object $P8513, "1307835814.0955", 16
    .const 'Sub' $P8514 = "319_1307835824.98345" 
    $P8512."add_method"($P8513, "prefix:sym<++>", $P8514)
    nqp_get_sc_object $P8515, "1307835814.0955", 16
    get_how $P8516, $P8515
    nqp_get_sc_object $P8517, "1307835814.0955", 16
    .const 'Sub' $P8518 = "320_1307835824.98345" 
    $P8516."add_method"($P8517, "!PREFIX__prefix:sym<++>", $P8518)
    nqp_get_sc_object $P8519, "1307835814.0955", 16
    get_how $P8520, $P8519
    nqp_get_sc_object $P8521, "1307835814.0955", 16
    .const 'Sub' $P8522 = "321_1307835824.98345" 
    $P8520."add_method"($P8521, "prefix:sym<-->", $P8522)
    nqp_get_sc_object $P8523, "1307835814.0955", 16
    get_how $P8524, $P8523
    nqp_get_sc_object $P8525, "1307835814.0955", 16
    .const 'Sub' $P8526 = "322_1307835824.98345" 
    $P8524."add_method"($P8525, "!PREFIX__prefix:sym<-->", $P8526)
    nqp_get_sc_object $P8527, "1307835814.0955", 16
    get_how $P8528, $P8527
    nqp_get_sc_object $P8529, "1307835814.0955", 16
    .const 'Sub' $P8530 = "323_1307835824.98345" 
    $P8528."add_method"($P8529, "postfix:sym<++>", $P8530)
    nqp_get_sc_object $P8531, "1307835814.0955", 16
    get_how $P8532, $P8531
    nqp_get_sc_object $P8533, "1307835814.0955", 16
    .const 'Sub' $P8534 = "324_1307835824.98345" 
    $P8532."add_method"($P8533, "!PREFIX__postfix:sym<++>", $P8534)
    nqp_get_sc_object $P8535, "1307835814.0955", 16
    get_how $P8536, $P8535
    nqp_get_sc_object $P8537, "1307835814.0955", 16
    .const 'Sub' $P8538 = "325_1307835824.98345" 
    $P8536."add_method"($P8537, "postfix:sym<-->", $P8538)
    nqp_get_sc_object $P8539, "1307835814.0955", 16
    get_how $P8540, $P8539
    nqp_get_sc_object $P8541, "1307835814.0955", 16
    .const 'Sub' $P8542 = "326_1307835824.98345" 
    $P8540."add_method"($P8541, "!PREFIX__postfix:sym<-->", $P8542)
    nqp_get_sc_object $P8543, "1307835814.0955", 16
    get_how $P8544, $P8543
    nqp_get_sc_object $P8545, "1307835814.0955", 16
    .const 'Sub' $P8546 = "327_1307835824.98345" 
    $P8544."add_method"($P8545, "infix:sym<**>", $P8546)
    nqp_get_sc_object $P8547, "1307835814.0955", 16
    get_how $P8548, $P8547
    nqp_get_sc_object $P8549, "1307835814.0955", 16
    .const 'Sub' $P8550 = "328_1307835824.98345" 
    $P8548."add_method"($P8549, "!PREFIX__infix:sym<**>", $P8550)
    nqp_get_sc_object $P8551, "1307835814.0955", 16
    get_how $P8552, $P8551
    nqp_get_sc_object $P8553, "1307835814.0955", 16
    .const 'Sub' $P8554 = "329_1307835824.98345" 
    $P8552."add_method"($P8553, "prefix:sym<+>", $P8554)
    nqp_get_sc_object $P8555, "1307835814.0955", 16
    get_how $P8556, $P8555
    nqp_get_sc_object $P8557, "1307835814.0955", 16
    .const 'Sub' $P8558 = "330_1307835824.98345" 
    $P8556."add_method"($P8557, "!PREFIX__prefix:sym<+>", $P8558)
    nqp_get_sc_object $P8559, "1307835814.0955", 16
    get_how $P8560, $P8559
    nqp_get_sc_object $P8561, "1307835814.0955", 16
    .const 'Sub' $P8562 = "331_1307835824.98345" 
    $P8560."add_method"($P8561, "prefix:sym<~>", $P8562)
    nqp_get_sc_object $P8563, "1307835814.0955", 16
    get_how $P8564, $P8563
    nqp_get_sc_object $P8565, "1307835814.0955", 16
    .const 'Sub' $P8566 = "332_1307835824.98345" 
    $P8564."add_method"($P8565, "!PREFIX__prefix:sym<~>", $P8566)
    nqp_get_sc_object $P8567, "1307835814.0955", 16
    get_how $P8568, $P8567
    nqp_get_sc_object $P8569, "1307835814.0955", 16
    .const 'Sub' $P8570 = "333_1307835824.98345" 
    $P8568."add_method"($P8569, "prefix:sym<->", $P8570)
    nqp_get_sc_object $P8571, "1307835814.0955", 16
    get_how $P8572, $P8571
    nqp_get_sc_object $P8573, "1307835814.0955", 16
    .const 'Sub' $P8574 = "334_1307835824.98345" 
    $P8572."add_method"($P8573, "!PREFIX__prefix:sym<->", $P8574)
    nqp_get_sc_object $P8575, "1307835814.0955", 16
    get_how $P8576, $P8575
    nqp_get_sc_object $P8577, "1307835814.0955", 16
    .const 'Sub' $P8578 = "335_1307835824.98345" 
    $P8576."add_method"($P8577, "prefix:sym<?>", $P8578)
    nqp_get_sc_object $P8579, "1307835814.0955", 16
    get_how $P8580, $P8579
    nqp_get_sc_object $P8581, "1307835814.0955", 16
    .const 'Sub' $P8582 = "336_1307835824.98345" 
    $P8580."add_method"($P8581, "!PREFIX__prefix:sym<?>", $P8582)
    nqp_get_sc_object $P8583, "1307835814.0955", 16
    get_how $P8584, $P8583
    nqp_get_sc_object $P8585, "1307835814.0955", 16
    .const 'Sub' $P8586 = "337_1307835824.98345" 
    $P8584."add_method"($P8585, "prefix:sym<!>", $P8586)
    nqp_get_sc_object $P8587, "1307835814.0955", 16
    get_how $P8588, $P8587
    nqp_get_sc_object $P8589, "1307835814.0955", 16
    .const 'Sub' $P8590 = "338_1307835824.98345" 
    $P8588."add_method"($P8589, "!PREFIX__prefix:sym<!>", $P8590)
    nqp_get_sc_object $P8591, "1307835814.0955", 16
    get_how $P8592, $P8591
    nqp_get_sc_object $P8593, "1307835814.0955", 16
    .const 'Sub' $P8594 = "339_1307835824.98345" 
    $P8592."add_method"($P8593, "prefix:sym<|>", $P8594)
    nqp_get_sc_object $P8595, "1307835814.0955", 16
    get_how $P8596, $P8595
    nqp_get_sc_object $P8597, "1307835814.0955", 16
    .const 'Sub' $P8598 = "340_1307835824.98345" 
    $P8596."add_method"($P8597, "!PREFIX__prefix:sym<|>", $P8598)
    nqp_get_sc_object $P8599, "1307835814.0955", 16
    get_how $P8600, $P8599
    nqp_get_sc_object $P8601, "1307835814.0955", 16
    .const 'Sub' $P8602 = "341_1307835824.98345" 
    $P8600."add_method"($P8601, "infix:sym<*>", $P8602)
    nqp_get_sc_object $P8603, "1307835814.0955", 16
    get_how $P8604, $P8603
    nqp_get_sc_object $P8605, "1307835814.0955", 16
    .const 'Sub' $P8606 = "342_1307835824.98345" 
    $P8604."add_method"($P8605, "!PREFIX__infix:sym<*>", $P8606)
    nqp_get_sc_object $P8607, "1307835814.0955", 16
    get_how $P8608, $P8607
    nqp_get_sc_object $P8609, "1307835814.0955", 16
    .const 'Sub' $P8610 = "343_1307835824.98345" 
    $P8608."add_method"($P8609, "infix:sym</>", $P8610)
    nqp_get_sc_object $P8611, "1307835814.0955", 16
    get_how $P8612, $P8611
    nqp_get_sc_object $P8613, "1307835814.0955", 16
    .const 'Sub' $P8614 = "344_1307835824.98345" 
    $P8612."add_method"($P8613, "!PREFIX__infix:sym</>", $P8614)
    nqp_get_sc_object $P8615, "1307835814.0955", 16
    get_how $P8616, $P8615
    nqp_get_sc_object $P8617, "1307835814.0955", 16
    .const 'Sub' $P8618 = "345_1307835824.98345" 
    $P8616."add_method"($P8617, "infix:sym<%>", $P8618)
    nqp_get_sc_object $P8619, "1307835814.0955", 16
    get_how $P8620, $P8619
    nqp_get_sc_object $P8621, "1307835814.0955", 16
    .const 'Sub' $P8622 = "346_1307835824.98345" 
    $P8620."add_method"($P8621, "!PREFIX__infix:sym<%>", $P8622)
    nqp_get_sc_object $P8623, "1307835814.0955", 16
    get_how $P8624, $P8623
    nqp_get_sc_object $P8625, "1307835814.0955", 16
    .const 'Sub' $P8626 = "347_1307835824.98345" 
    $P8624."add_method"($P8625, "infix:sym<+&>", $P8626)
    nqp_get_sc_object $P8627, "1307835814.0955", 16
    get_how $P8628, $P8627
    nqp_get_sc_object $P8629, "1307835814.0955", 16
    .const 'Sub' $P8630 = "348_1307835824.98345" 
    $P8628."add_method"($P8629, "!PREFIX__infix:sym<+&>", $P8630)
    nqp_get_sc_object $P8631, "1307835814.0955", 16
    get_how $P8632, $P8631
    nqp_get_sc_object $P8633, "1307835814.0955", 16
    .const 'Sub' $P8634 = "349_1307835824.98345" 
    $P8632."add_method"($P8633, "infix:sym<+>", $P8634)
    nqp_get_sc_object $P8635, "1307835814.0955", 16
    get_how $P8636, $P8635
    nqp_get_sc_object $P8637, "1307835814.0955", 16
    .const 'Sub' $P8638 = "350_1307835824.98345" 
    $P8636."add_method"($P8637, "!PREFIX__infix:sym<+>", $P8638)
    nqp_get_sc_object $P8639, "1307835814.0955", 16
    get_how $P8640, $P8639
    nqp_get_sc_object $P8641, "1307835814.0955", 16
    .const 'Sub' $P8642 = "351_1307835824.98345" 
    $P8640."add_method"($P8641, "infix:sym<->", $P8642)
    nqp_get_sc_object $P8643, "1307835814.0955", 16
    get_how $P8644, $P8643
    nqp_get_sc_object $P8645, "1307835814.0955", 16
    .const 'Sub' $P8646 = "352_1307835824.98345" 
    $P8644."add_method"($P8645, "!PREFIX__infix:sym<->", $P8646)
    nqp_get_sc_object $P8647, "1307835814.0955", 16
    get_how $P8648, $P8647
    nqp_get_sc_object $P8649, "1307835814.0955", 16
    .const 'Sub' $P8650 = "353_1307835824.98345" 
    $P8648."add_method"($P8649, "infix:sym<+|>", $P8650)
    nqp_get_sc_object $P8651, "1307835814.0955", 16
    get_how $P8652, $P8651
    nqp_get_sc_object $P8653, "1307835814.0955", 16
    .const 'Sub' $P8654 = "354_1307835824.98345" 
    $P8652."add_method"($P8653, "!PREFIX__infix:sym<+|>", $P8654)
    nqp_get_sc_object $P8655, "1307835814.0955", 16
    get_how $P8656, $P8655
    nqp_get_sc_object $P8657, "1307835814.0955", 16
    .const 'Sub' $P8658 = "355_1307835824.98345" 
    $P8656."add_method"($P8657, "infix:sym<+^>", $P8658)
    nqp_get_sc_object $P8659, "1307835814.0955", 16
    get_how $P8660, $P8659
    nqp_get_sc_object $P8661, "1307835814.0955", 16
    .const 'Sub' $P8662 = "356_1307835824.98345" 
    $P8660."add_method"($P8661, "!PREFIX__infix:sym<+^>", $P8662)
    nqp_get_sc_object $P8663, "1307835814.0955", 16
    get_how $P8664, $P8663
    nqp_get_sc_object $P8665, "1307835814.0955", 16
    .const 'Sub' $P8666 = "357_1307835824.98345" 
    $P8664."add_method"($P8665, "infix:sym<~>", $P8666)
    nqp_get_sc_object $P8667, "1307835814.0955", 16
    get_how $P8668, $P8667
    nqp_get_sc_object $P8669, "1307835814.0955", 16
    .const 'Sub' $P8670 = "358_1307835824.98345" 
    $P8668."add_method"($P8669, "!PREFIX__infix:sym<~>", $P8670)
    nqp_get_sc_object $P8671, "1307835814.0955", 16
    get_how $P8672, $P8671
    nqp_get_sc_object $P8673, "1307835814.0955", 16
    .const 'Sub' $P8674 = "359_1307835824.98345" 
    $P8672."add_method"($P8673, "infix:sym<==>", $P8674)
    nqp_get_sc_object $P8675, "1307835814.0955", 16
    get_how $P8676, $P8675
    nqp_get_sc_object $P8677, "1307835814.0955", 16
    .const 'Sub' $P8678 = "360_1307835824.98345" 
    $P8676."add_method"($P8677, "!PREFIX__infix:sym<==>", $P8678)
    nqp_get_sc_object $P8679, "1307835814.0955", 16
    get_how $P8680, $P8679
    nqp_get_sc_object $P8681, "1307835814.0955", 16
    .const 'Sub' $P8682 = "361_1307835824.98345" 
    $P8680."add_method"($P8681, "infix:sym<!=>", $P8682)
    nqp_get_sc_object $P8683, "1307835814.0955", 16
    get_how $P8684, $P8683
    nqp_get_sc_object $P8685, "1307835814.0955", 16
    .const 'Sub' $P8686 = "362_1307835824.98345" 
    $P8684."add_method"($P8685, "!PREFIX__infix:sym<!=>", $P8686)
    nqp_get_sc_object $P8687, "1307835814.0955", 16
    get_how $P8688, $P8687
    nqp_get_sc_object $P8689, "1307835814.0955", 16
    .const 'Sub' $P8690 = "363_1307835824.98345" 
    $P8688."add_method"($P8689, "infix:sym<<=>", $P8690)
    nqp_get_sc_object $P8691, "1307835814.0955", 16
    get_how $P8692, $P8691
    nqp_get_sc_object $P8693, "1307835814.0955", 16
    .const 'Sub' $P8694 = "364_1307835824.98345" 
    $P8692."add_method"($P8693, "!PREFIX__infix:sym<<=>", $P8694)
    nqp_get_sc_object $P8695, "1307835814.0955", 16
    get_how $P8696, $P8695
    nqp_get_sc_object $P8697, "1307835814.0955", 16
    .const 'Sub' $P8698 = "365_1307835824.98345" 
    $P8696."add_method"($P8697, "infix:sym<>=>", $P8698)
    nqp_get_sc_object $P8699, "1307835814.0955", 16
    get_how $P8700, $P8699
    nqp_get_sc_object $P8701, "1307835814.0955", 16
    .const 'Sub' $P8702 = "366_1307835824.98345" 
    $P8700."add_method"($P8701, "!PREFIX__infix:sym<>=>", $P8702)
    nqp_get_sc_object $P8703, "1307835814.0955", 16
    get_how $P8704, $P8703
    nqp_get_sc_object $P8705, "1307835814.0955", 16
    .const 'Sub' $P8706 = "367_1307835824.98345" 
    $P8704."add_method"($P8705, "infix:sym<<>", $P8706)
    nqp_get_sc_object $P8707, "1307835814.0955", 16
    get_how $P8708, $P8707
    nqp_get_sc_object $P8709, "1307835814.0955", 16
    .const 'Sub' $P8710 = "368_1307835824.98345" 
    $P8708."add_method"($P8709, "!PREFIX__infix:sym<<>", $P8710)
    nqp_get_sc_object $P8711, "1307835814.0955", 16
    get_how $P8712, $P8711
    nqp_get_sc_object $P8713, "1307835814.0955", 16
    .const 'Sub' $P8714 = "369_1307835824.98345" 
    $P8712."add_method"($P8713, "infix:sym<>>", $P8714)
    nqp_get_sc_object $P8715, "1307835814.0955", 16
    get_how $P8716, $P8715
    nqp_get_sc_object $P8717, "1307835814.0955", 16
    .const 'Sub' $P8718 = "370_1307835824.98345" 
    $P8716."add_method"($P8717, "!PREFIX__infix:sym<>>", $P8718)
    nqp_get_sc_object $P8719, "1307835814.0955", 16
    get_how $P8720, $P8719
    nqp_get_sc_object $P8721, "1307835814.0955", 16
    .const 'Sub' $P8722 = "371_1307835824.98345" 
    $P8720."add_method"($P8721, "infix:sym<eq>", $P8722)
    nqp_get_sc_object $P8723, "1307835814.0955", 16
    get_how $P8724, $P8723
    nqp_get_sc_object $P8725, "1307835814.0955", 16
    .const 'Sub' $P8726 = "372_1307835824.98345" 
    $P8724."add_method"($P8725, "!PREFIX__infix:sym<eq>", $P8726)
    nqp_get_sc_object $P8727, "1307835814.0955", 16
    get_how $P8728, $P8727
    nqp_get_sc_object $P8729, "1307835814.0955", 16
    .const 'Sub' $P8730 = "373_1307835824.98345" 
    $P8728."add_method"($P8729, "infix:sym<ne>", $P8730)
    nqp_get_sc_object $P8731, "1307835814.0955", 16
    get_how $P8732, $P8731
    nqp_get_sc_object $P8733, "1307835814.0955", 16
    .const 'Sub' $P8734 = "374_1307835824.98345" 
    $P8732."add_method"($P8733, "!PREFIX__infix:sym<ne>", $P8734)
    nqp_get_sc_object $P8735, "1307835814.0955", 16
    get_how $P8736, $P8735
    nqp_get_sc_object $P8737, "1307835814.0955", 16
    .const 'Sub' $P8738 = "375_1307835824.98345" 
    $P8736."add_method"($P8737, "infix:sym<le>", $P8738)
    nqp_get_sc_object $P8739, "1307835814.0955", 16
    get_how $P8740, $P8739
    nqp_get_sc_object $P8741, "1307835814.0955", 16
    .const 'Sub' $P8742 = "376_1307835824.98345" 
    $P8740."add_method"($P8741, "!PREFIX__infix:sym<le>", $P8742)
    nqp_get_sc_object $P8743, "1307835814.0955", 16
    get_how $P8744, $P8743
    nqp_get_sc_object $P8745, "1307835814.0955", 16
    .const 'Sub' $P8746 = "377_1307835824.98345" 
    $P8744."add_method"($P8745, "infix:sym<ge>", $P8746)
    nqp_get_sc_object $P8747, "1307835814.0955", 16
    get_how $P8748, $P8747
    nqp_get_sc_object $P8749, "1307835814.0955", 16
    .const 'Sub' $P8750 = "378_1307835824.98345" 
    $P8748."add_method"($P8749, "!PREFIX__infix:sym<ge>", $P8750)
    nqp_get_sc_object $P8751, "1307835814.0955", 16
    get_how $P8752, $P8751
    nqp_get_sc_object $P8753, "1307835814.0955", 16
    .const 'Sub' $P8754 = "379_1307835824.98345" 
    $P8752."add_method"($P8753, "infix:sym<lt>", $P8754)
    nqp_get_sc_object $P8755, "1307835814.0955", 16
    get_how $P8756, $P8755
    nqp_get_sc_object $P8757, "1307835814.0955", 16
    .const 'Sub' $P8758 = "380_1307835824.98345" 
    $P8756."add_method"($P8757, "!PREFIX__infix:sym<lt>", $P8758)
    nqp_get_sc_object $P8759, "1307835814.0955", 16
    get_how $P8760, $P8759
    nqp_get_sc_object $P8761, "1307835814.0955", 16
    .const 'Sub' $P8762 = "381_1307835824.98345" 
    $P8760."add_method"($P8761, "infix:sym<gt>", $P8762)
    nqp_get_sc_object $P8763, "1307835814.0955", 16
    get_how $P8764, $P8763
    nqp_get_sc_object $P8765, "1307835814.0955", 16
    .const 'Sub' $P8766 = "382_1307835824.98345" 
    $P8764."add_method"($P8765, "!PREFIX__infix:sym<gt>", $P8766)
    nqp_get_sc_object $P8767, "1307835814.0955", 16
    get_how $P8768, $P8767
    nqp_get_sc_object $P8769, "1307835814.0955", 16
    .const 'Sub' $P8770 = "383_1307835824.98345" 
    $P8768."add_method"($P8769, "infix:sym<=:=>", $P8770)
    nqp_get_sc_object $P8771, "1307835814.0955", 16
    get_how $P8772, $P8771
    nqp_get_sc_object $P8773, "1307835814.0955", 16
    .const 'Sub' $P8774 = "384_1307835824.98345" 
    $P8772."add_method"($P8773, "!PREFIX__infix:sym<=:=>", $P8774)
    nqp_get_sc_object $P8775, "1307835814.0955", 16
    get_how $P8776, $P8775
    nqp_get_sc_object $P8777, "1307835814.0955", 16
    .const 'Sub' $P8778 = "385_1307835824.98345" 
    $P8776."add_method"($P8777, "infix:sym<~~>", $P8778)
    nqp_get_sc_object $P8779, "1307835814.0955", 16
    get_how $P8780, $P8779
    nqp_get_sc_object $P8781, "1307835814.0955", 16
    .const 'Sub' $P8782 = "386_1307835824.98345" 
    $P8780."add_method"($P8781, "!PREFIX__infix:sym<~~>", $P8782)
    nqp_get_sc_object $P8783, "1307835814.0955", 16
    get_how $P8784, $P8783
    nqp_get_sc_object $P8785, "1307835814.0955", 16
    .const 'Sub' $P8786 = "387_1307835824.98345" 
    $P8784."add_method"($P8785, "infix:sym<&&>", $P8786)
    nqp_get_sc_object $P8787, "1307835814.0955", 16
    get_how $P8788, $P8787
    nqp_get_sc_object $P8789, "1307835814.0955", 16
    .const 'Sub' $P8790 = "388_1307835824.98345" 
    $P8788."add_method"($P8789, "!PREFIX__infix:sym<&&>", $P8790)
    nqp_get_sc_object $P8791, "1307835814.0955", 16
    get_how $P8792, $P8791
    nqp_get_sc_object $P8793, "1307835814.0955", 16
    .const 'Sub' $P8794 = "389_1307835824.98345" 
    $P8792."add_method"($P8793, "infix:sym<||>", $P8794)
    nqp_get_sc_object $P8795, "1307835814.0955", 16
    get_how $P8796, $P8795
    nqp_get_sc_object $P8797, "1307835814.0955", 16
    .const 'Sub' $P8798 = "390_1307835824.98345" 
    $P8796."add_method"($P8797, "!PREFIX__infix:sym<||>", $P8798)
    nqp_get_sc_object $P8799, "1307835814.0955", 16
    get_how $P8800, $P8799
    nqp_get_sc_object $P8801, "1307835814.0955", 16
    .const 'Sub' $P8802 = "391_1307835824.98345" 
    $P8800."add_method"($P8801, "infix:sym<//>", $P8802)
    nqp_get_sc_object $P8803, "1307835814.0955", 16
    get_how $P8804, $P8803
    nqp_get_sc_object $P8805, "1307835814.0955", 16
    .const 'Sub' $P8806 = "392_1307835824.98345" 
    $P8804."add_method"($P8805, "!PREFIX__infix:sym<//>", $P8806)
    nqp_get_sc_object $P8807, "1307835814.0955", 16
    get_how $P8808, $P8807
    nqp_get_sc_object $P8809, "1307835814.0955", 16
    .const 'Sub' $P8810 = "393_1307835824.98345" 
    $P8808."add_method"($P8809, "infix:sym<?? !!>", $P8810)
    nqp_get_sc_object $P8811, "1307835814.0955", 16
    get_how $P8812, $P8811
    nqp_get_sc_object $P8813, "1307835814.0955", 16
    .const 'Sub' $P8814 = "394_1307835824.98345" 
    $P8812."add_method"($P8813, "!PREFIX__infix:sym<?? !!>", $P8814)
    nqp_get_sc_object $P8815, "1307835814.0955", 16
    get_how $P8816, $P8815
    nqp_get_sc_object $P8817, "1307835814.0955", 16
    .const 'Sub' $P8818 = "395_1307835824.98345" 
    $P8816."add_method"($P8817, "infix:sym<=>", $P8818)
    nqp_get_sc_object $P8819, "1307835814.0955", 16
    get_how $P8820, $P8819
    nqp_get_sc_object $P8821, "1307835814.0955", 16
    .const 'Sub' $P8822 = "396_1307835824.98345" 
    $P8820."add_method"($P8821, "!PREFIX__infix:sym<=>", $P8822)
    nqp_get_sc_object $P8823, "1307835814.0955", 16
    get_how $P8824, $P8823
    nqp_get_sc_object $P8825, "1307835814.0955", 16
    .const 'Sub' $P8826 = "397_1307835824.98345" 
    $P8824."add_method"($P8825, "infix:sym<:=>", $P8826)
    nqp_get_sc_object $P8827, "1307835814.0955", 16
    get_how $P8828, $P8827
    nqp_get_sc_object $P8829, "1307835814.0955", 16
    .const 'Sub' $P8830 = "398_1307835824.98345" 
    $P8828."add_method"($P8829, "!PREFIX__infix:sym<:=>", $P8830)
    nqp_get_sc_object $P8831, "1307835814.0955", 16
    get_how $P8832, $P8831
    nqp_get_sc_object $P8833, "1307835814.0955", 16
    .const 'Sub' $P8834 = "399_1307835824.98345" 
    $P8832."add_method"($P8833, "infix:sym<::=>", $P8834)
    nqp_get_sc_object $P8835, "1307835814.0955", 16
    get_how $P8836, $P8835
    nqp_get_sc_object $P8837, "1307835814.0955", 16
    .const 'Sub' $P8838 = "400_1307835824.98345" 
    $P8836."add_method"($P8837, "!PREFIX__infix:sym<::=>", $P8838)
    nqp_get_sc_object $P8839, "1307835814.0955", 16
    get_how $P8840, $P8839
    nqp_get_sc_object $P8841, "1307835814.0955", 16
    .const 'Sub' $P8842 = "401_1307835824.98345" 
    $P8840."add_method"($P8841, "infix:sym<,>", $P8842)
    nqp_get_sc_object $P8843, "1307835814.0955", 16
    get_how $P8844, $P8843
    nqp_get_sc_object $P8845, "1307835814.0955", 16
    .const 'Sub' $P8846 = "402_1307835824.98345" 
    $P8844."add_method"($P8845, "!PREFIX__infix:sym<,>", $P8846)
    nqp_get_sc_object $P8847, "1307835814.0955", 16
    get_how $P8848, $P8847
    nqp_get_sc_object $P8849, "1307835814.0955", 16
    .const 'Sub' $P8850 = "403_1307835824.98345" 
    $P8848."add_method"($P8849, "prefix:sym<return>", $P8850)
    nqp_get_sc_object $P8851, "1307835814.0955", 16
    get_how $P8852, $P8851
    nqp_get_sc_object $P8853, "1307835814.0955", 16
    .const 'Sub' $P8854 = "405_1307835824.98345" 
    $P8852."add_method"($P8853, "!PREFIX__prefix:sym<return>", $P8854)
    nqp_get_sc_object $P8855, "1307835814.0955", 16
    get_how $P8856, $P8855
    nqp_get_sc_object $P8857, "1307835814.0955", 16
    .const 'Sub' $P8858 = "406_1307835824.98345" 
    $P8856."add_method"($P8857, "prefix:sym<make>", $P8858)
    nqp_get_sc_object $P8859, "1307835814.0955", 16
    get_how $P8860, $P8859
    nqp_get_sc_object $P8861, "1307835814.0955", 16
    .const 'Sub' $P8862 = "407_1307835824.98345" 
    $P8860."add_method"($P8861, "!PREFIX__prefix:sym<make>", $P8862)
    nqp_get_sc_object $P8863, "1307835814.0955", 16
    get_how $P8864, $P8863
    nqp_get_sc_object $P8865, "1307835814.0955", 16
    .const 'Sub' $P8866 = "408_1307835824.98345" 
    $P8864."add_method"($P8865, "term:sym<last>", $P8866)
    nqp_get_sc_object $P8867, "1307835814.0955", 16
    get_how $P8868, $P8867
    nqp_get_sc_object $P8869, "1307835814.0955", 16
    .const 'Sub' $P8870 = "409_1307835824.98345" 
    $P8868."add_method"($P8869, "!PREFIX__term:sym<last>", $P8870)
    nqp_get_sc_object $P8871, "1307835814.0955", 16
    get_how $P8872, $P8871
    nqp_get_sc_object $P8873, "1307835814.0955", 16
    .const 'Sub' $P8874 = "410_1307835824.98345" 
    $P8872."add_method"($P8873, "term:sym<next>", $P8874)
    nqp_get_sc_object $P8875, "1307835814.0955", 16
    get_how $P8876, $P8875
    nqp_get_sc_object $P8877, "1307835814.0955", 16
    .const 'Sub' $P8878 = "411_1307835824.98345" 
    $P8876."add_method"($P8877, "!PREFIX__term:sym<next>", $P8878)
    nqp_get_sc_object $P8879, "1307835814.0955", 16
    get_how $P8880, $P8879
    nqp_get_sc_object $P8881, "1307835814.0955", 16
    .const 'Sub' $P8882 = "412_1307835824.98345" 
    $P8880."add_method"($P8881, "term:sym<redo>", $P8882)
    nqp_get_sc_object $P8883, "1307835814.0955", 16
    get_how $P8884, $P8883
    nqp_get_sc_object $P8885, "1307835814.0955", 16
    .const 'Sub' $P8886 = "413_1307835824.98345" 
    $P8884."add_method"($P8885, "!PREFIX__term:sym<redo>", $P8886)
    nqp_get_sc_object $P8887, "1307835814.0955", 16
    get_how $P8888, $P8887
    nqp_get_sc_object $P8889, "1307835814.0955", 16
    .const 'Sub' $P8890 = "414_1307835824.98345" 
    $P8888."add_method"($P8889, "smartmatch", $P8890)
    .const 'Sub' $P8891 = "40_1307835824.98345" 
    $P8892 = $P8891."get_lexinfo"()
    nqp_get_sc_object $P8893, "1307835814.0955", 16
    $P8892."set_static_lexpad_value"("$?PACKAGE", $P8893)
    .const 'Sub' $P8894 = "40_1307835824.98345" 
    $P8895 = $P8894."get_lexinfo"()
    $P8895."finish_static_lexpad"()
    .const 'Sub' $P8896 = "40_1307835824.98345" 
    $P8897 = $P8896."get_lexinfo"()
    nqp_get_sc_object $P8898, "1307835814.0955", 16
    $P8897."set_static_lexpad_value"("$?CLASS", $P8898)
    .const 'Sub' $P8899 = "40_1307835824.98345" 
    $P8900 = $P8899."get_lexinfo"()
    $P8900."finish_static_lexpad"()
    nqp_get_sc_object $P8901, "1307835814.0955", 16
    get_how $P8902, $P8901
    nqp_get_sc_object $P8903, "1307835814.0955", 16
    nqp_get_sc_object $P8904, "1307835801.01384", 1
    $P8902."add_parent"($P8903, $P8904)
    nqp_get_sc_object $P8905, "1307835814.0955", 16
    get_how $P8906, $P8905
    nqp_get_sc_object $P8907, "1307835814.0955", 16
    $P8906."compose"($P8907)
    nqp_get_sc_object $P8908, "1307835795.15992", 41
    $P8909 = $P8908."new_type"("NQP::Regex" :named("name"))
    nqp_set_sc_for_object $P8909, cur_sc
    nqp_set_sc_object "1307835814.0955", 377, $P8909
    nqp_get_sc_object $P8910, "1307835814.0955", 377
    nqp_get_sc_object $P8911, "1307835814.0955", 0
    nqp_get_package_through_who $P8912, $P8911, "NQP"
    get_who $P8913, $P8912
    set $P8913["Regex"], $P8910
    nqp_get_sc_object $P8914, "1307835814.0955", 377
    get_how $P8915, $P8914
    nqp_get_sc_object $P8916, "1307835814.0955", 377
    .const 'Sub' $P8917 = "416_1307835824.98345" 
    $P8915."add_method"($P8916, "metachar:sym<:my>", $P8917)
    nqp_get_sc_object $P8918, "1307835814.0955", 377
    get_how $P8919, $P8918
    nqp_get_sc_object $P8920, "1307835814.0955", 377
    .const 'Sub' $P8921 = "418_1307835824.98345" 
    $P8919."add_method"($P8920, "!PREFIX__metachar:sym<:my>", $P8921)
    nqp_get_sc_object $P8922, "1307835814.0955", 377
    get_how $P8923, $P8922
    nqp_get_sc_object $P8924, "1307835814.0955", 377
    .const 'Sub' $P8925 = "419_1307835824.98345" 
    $P8923."add_method"($P8924, "metachar:sym<{ }>", $P8925)
    nqp_get_sc_object $P8926, "1307835814.0955", 377
    get_how $P8927, $P8926
    nqp_get_sc_object $P8928, "1307835814.0955", 377
    .const 'Sub' $P8929 = "420_1307835824.98345" 
    $P8927."add_method"($P8928, "!PREFIX__metachar:sym<{ }>", $P8929)
    nqp_get_sc_object $P8930, "1307835814.0955", 377
    get_how $P8931, $P8930
    nqp_get_sc_object $P8932, "1307835814.0955", 377
    .const 'Sub' $P8933 = "421_1307835824.98345" 
    $P8931."add_method"($P8932, "metachar:sym<nqpvar>", $P8933)
    nqp_get_sc_object $P8934, "1307835814.0955", 377
    get_how $P8935, $P8934
    nqp_get_sc_object $P8936, "1307835814.0955", 377
    .const 'Sub' $P8937 = "423_1307835824.98345" 
    $P8935."add_method"($P8936, "!PREFIX__metachar:sym<nqpvar>", $P8937)
    nqp_get_sc_object $P8938, "1307835814.0955", 377
    get_how $P8939, $P8938
    nqp_get_sc_object $P8940, "1307835814.0955", 377
    .const 'Sub' $P8941 = "424_1307835824.98345" 
    $P8939."add_method"($P8940, "assertion:sym<{ }>", $P8941)
    nqp_get_sc_object $P8942, "1307835814.0955", 377
    get_how $P8943, $P8942
    nqp_get_sc_object $P8944, "1307835814.0955", 377
    .const 'Sub' $P8945 = "425_1307835824.98345" 
    $P8943."add_method"($P8944, "!PREFIX__assertion:sym<{ }>", $P8945)
    nqp_get_sc_object $P8946, "1307835814.0955", 377
    get_how $P8947, $P8946
    nqp_get_sc_object $P8948, "1307835814.0955", 377
    .const 'Sub' $P8949 = "426_1307835824.98345" 
    $P8947."add_method"($P8948, "assertion:sym<?{ }>", $P8949)
    nqp_get_sc_object $P8950, "1307835814.0955", 377
    get_how $P8951, $P8950
    nqp_get_sc_object $P8952, "1307835814.0955", 377
    .const 'Sub' $P8953 = "428_1307835824.98345" 
    $P8951."add_method"($P8952, "!PREFIX__assertion:sym<?{ }>", $P8953)
    nqp_get_sc_object $P8954, "1307835814.0955", 377
    get_how $P8955, $P8954
    nqp_get_sc_object $P8956, "1307835814.0955", 377
    .const 'Sub' $P8957 = "429_1307835824.98345" 
    $P8955."add_method"($P8956, "assertion:sym<name>", $P8957)
    nqp_get_sc_object $P8958, "1307835814.0955", 377
    get_how $P8959, $P8958
    nqp_get_sc_object $P8960, "1307835814.0955", 377
    .const 'Sub' $P8961 = "431_1307835824.98345" 
    $P8959."add_method"($P8960, "!PREFIX__assertion:sym<name>", $P8961)
    nqp_get_sc_object $P8962, "1307835814.0955", 377
    get_how $P8963, $P8962
    nqp_get_sc_object $P8964, "1307835814.0955", 377
    .const 'Sub' $P8965 = "432_1307835824.98345" 
    $P8963."add_method"($P8964, "assertion:sym<var>", $P8965)
    nqp_get_sc_object $P8966, "1307835814.0955", 377
    get_how $P8967, $P8966
    nqp_get_sc_object $P8968, "1307835814.0955", 377
    .const 'Sub' $P8969 = "433_1307835824.98345" 
    $P8967."add_method"($P8968, "!PREFIX__assertion:sym<var>", $P8969)
    nqp_get_sc_object $P8970, "1307835814.0955", 377
    get_how $P8971, $P8970
    nqp_get_sc_object $P8972, "1307835814.0955", 377
    .const 'Sub' $P8973 = "434_1307835824.98345" 
    $P8971."add_method"($P8972, "codeblock", $P8973)
    nqp_get_sc_object $P8974, "1307835814.0955", 377
    get_how $P8975, $P8974
    nqp_get_sc_object $P8976, "1307835814.0955", 377
    .const 'Sub' $P8977 = "435_1307835824.98345" 
    $P8975."add_method"($P8976, "!PREFIX__codeblock", $P8977)
    .const 'Sub' $P8978 = "415_1307835824.98345" 
    $P8979 = $P8978."get_lexinfo"()
    nqp_get_sc_object $P8980, "1307835814.0955", 377
    $P8979."set_static_lexpad_value"("$?PACKAGE", $P8980)
    .const 'Sub' $P8981 = "415_1307835824.98345" 
    $P8982 = $P8981."get_lexinfo"()
    $P8982."finish_static_lexpad"()
    .const 'Sub' $P8983 = "415_1307835824.98345" 
    $P8984 = $P8983."get_lexinfo"()
    nqp_get_sc_object $P8985, "1307835814.0955", 377
    $P8984."set_static_lexpad_value"("$?CLASS", $P8985)
    .const 'Sub' $P8986 = "415_1307835824.98345" 
    $P8987 = $P8986."get_lexinfo"()
    $P8987."finish_static_lexpad"()
    nqp_get_sc_object $P8988, "1307835814.0955", 377
    get_how $P8989, $P8988
    nqp_get_sc_object $P8990, "1307835814.0955", 377
    nqp_get_sc_object $P8991, "1307835808.73942", 1
    $P8989."add_parent"($P8990, $P8991)
    nqp_get_sc_object $P8992, "1307835814.0955", 377
    get_how $P8993, $P8992
    nqp_get_sc_object $P8994, "1307835814.0955", 377
    $P8993."compose"($P8994)
    nqp_get_sc_object $P8995, "1307835795.15992", 41
    $P8996 = $P8995."new_type"("NQP::Actions" :named("name"))
    nqp_set_sc_for_object $P8996, cur_sc
    nqp_set_sc_object "1307835814.0955", 394, $P8996
    nqp_get_sc_object $P8997, "1307835814.0955", 394
    nqp_get_sc_object $P8998, "1307835814.0955", 0
    nqp_get_package_through_who $P8999, $P8998, "NQP"
    get_who $P9000, $P8999
    set $P9000["Actions"], $P8997
    nqp_get_sc_object $P9001, "1307835814.0955", 394
    get_how $P9002, $P9001
    nqp_get_sc_object $P9003, "1307835814.0955", 394
    .const 'Sub' $P9004 = "463_1307835824.98345" 
    $P9002."add_method"($P9003, "TOP", $P9004)
    nqp_get_sc_object $P9005, "1307835814.0955", 394
    get_how $P9006, $P9005
    nqp_get_sc_object $P9007, "1307835814.0955", 394
    .const 'Sub' $P9008 = "464_1307835824.98345" 
    $P9006."add_method"($P9007, "deflongname", $P9008)
    nqp_get_sc_object $P9009, "1307835814.0955", 394
    get_how $P9010, $P9009
    nqp_get_sc_object $P9011, "1307835814.0955", 394
    .const 'Sub' $P9012 = "465_1307835824.98345" 
    $P9010."add_method"($P9011, "comp_unit", $P9012)
    nqp_get_sc_object $P9013, "1307835814.0955", 394
    get_how $P9014, $P9013
    nqp_get_sc_object $P9015, "1307835814.0955", 394
    .const 'Sub' $P9016 = "467_1307835824.98345" 
    $P9014."add_method"($P9015, "statementlist", $P9016)
    nqp_get_sc_object $P9017, "1307835814.0955", 394
    get_how $P9018, $P9017
    nqp_get_sc_object $P9019, "1307835814.0955", 394
    .const 'Sub' $P9020 = "469_1307835824.98345" 
    $P9018."add_method"($P9019, "statement", $P9020)
    nqp_get_sc_object $P9021, "1307835814.0955", 394
    get_how $P9022, $P9021
    nqp_get_sc_object $P9023, "1307835814.0955", 394
    .const 'Sub' $P9024 = "471_1307835824.98345" 
    $P9022."add_method"($P9023, "xblock", $P9024)
    nqp_get_sc_object $P9025, "1307835814.0955", 394
    get_how $P9026, $P9025
    nqp_get_sc_object $P9027, "1307835814.0955", 394
    .const 'Sub' $P9028 = "472_1307835824.98345" 
    $P9026."add_method"($P9027, "pblock", $P9028)
    nqp_get_sc_object $P9029, "1307835814.0955", 394
    get_how $P9030, $P9029
    nqp_get_sc_object $P9031, "1307835814.0955", 394
    .const 'Sub' $P9032 = "473_1307835824.98345" 
    $P9030."add_method"($P9031, "block", $P9032)
    nqp_get_sc_object $P9033, "1307835814.0955", 394
    get_how $P9034, $P9033
    nqp_get_sc_object $P9035, "1307835814.0955", 394
    .const 'Sub' $P9036 = "474_1307835824.98345" 
    $P9034."add_method"($P9035, "blockoid", $P9036)
    nqp_get_sc_object $P9037, "1307835814.0955", 394
    get_how $P9038, $P9037
    nqp_get_sc_object $P9039, "1307835814.0955", 394
    .const 'Sub' $P9040 = "476_1307835824.98345" 
    $P9038."add_method"($P9039, "newpad", $P9040)
    nqp_get_sc_object $P9041, "1307835814.0955", 394
    get_how $P9042, $P9041
    nqp_get_sc_object $P9043, "1307835814.0955", 394
    .const 'Sub' $P9044 = "477_1307835824.98345" 
    $P9042."add_method"($P9043, "outerctx", $P9044)
    nqp_get_sc_object $P9045, "1307835814.0955", 394
    get_how $P9046, $P9045
    nqp_get_sc_object $P9047, "1307835814.0955", 394
    .const 'Sub' $P9048 = "479_1307835824.98345" 
    $P9046."add_method"($P9047, "GLOBALish", $P9048)
    nqp_get_sc_object $P9049, "1307835814.0955", 394
    get_how $P9050, $P9049
    nqp_get_sc_object $P9051, "1307835814.0955", 394
    .const 'Sub' $P9052 = "480_1307835824.98345" 
    $P9050."add_method"($P9051, "you_are_here", $P9052)
    nqp_get_sc_object $P9053, "1307835814.0955", 394
    get_how $P9054, $P9053
    nqp_get_sc_object $P9055, "1307835814.0955", 394
    .const 'Sub' $P9056 = "481_1307835824.98345" 
    $P9054."add_method"($P9055, "statement_control:sym<use>", $P9056)
    nqp_get_sc_object $P9057, "1307835814.0955", 394
    get_how $P9058, $P9057
    nqp_get_sc_object $P9059, "1307835814.0955", 394
    .const 'Sub' $P9060 = "482_1307835824.98345" 
    $P9058."add_method"($P9059, "statement_control:sym<if>", $P9060)
    nqp_get_sc_object $P9061, "1307835814.0955", 394
    get_how $P9062, $P9061
    nqp_get_sc_object $P9063, "1307835814.0955", 394
    .const 'Sub' $P9064 = "484_1307835824.98345" 
    $P9062."add_method"($P9063, "statement_control:sym<unless>", $P9064)
    nqp_get_sc_object $P9065, "1307835814.0955", 394
    get_how $P9066, $P9065
    nqp_get_sc_object $P9067, "1307835814.0955", 394
    .const 'Sub' $P9068 = "485_1307835824.98345" 
    $P9066."add_method"($P9067, "statement_control:sym<while>", $P9068)
    nqp_get_sc_object $P9069, "1307835814.0955", 394
    get_how $P9070, $P9069
    nqp_get_sc_object $P9071, "1307835814.0955", 394
    .const 'Sub' $P9072 = "486_1307835824.98345" 
    $P9070."add_method"($P9071, "statement_control:sym<repeat>", $P9072)
    nqp_get_sc_object $P9073, "1307835814.0955", 394
    get_how $P9074, $P9073
    nqp_get_sc_object $P9075, "1307835814.0955", 394
    .const 'Sub' $P9076 = "487_1307835824.98345" 
    $P9074."add_method"($P9075, "statement_control:sym<for>", $P9076)
    nqp_get_sc_object $P9077, "1307835814.0955", 394
    get_how $P9078, $P9077
    nqp_get_sc_object $P9079, "1307835814.0955", 394
    .const 'Sub' $P9080 = "488_1307835824.98345" 
    $P9078."add_method"($P9079, "statement_control:sym<CATCH>", $P9080)
    nqp_get_sc_object $P9081, "1307835814.0955", 394
    get_how $P9082, $P9081
    nqp_get_sc_object $P9083, "1307835814.0955", 394
    .const 'Sub' $P9084 = "489_1307835824.98345" 
    $P9082."add_method"($P9083, "statement_control:sym<CONTROL>", $P9084)
    nqp_get_sc_object $P9085, "1307835814.0955", 394
    get_how $P9086, $P9085
    nqp_get_sc_object $P9087, "1307835814.0955", 394
    .const 'Sub' $P9088 = "490_1307835824.98345" 
    $P9086."add_method"($P9087, "statement_prefix:sym<INIT>", $P9088)
    nqp_get_sc_object $P9089, "1307835814.0955", 394
    get_how $P9090, $P9089
    nqp_get_sc_object $P9091, "1307835814.0955", 394
    .const 'Sub' $P9092 = "491_1307835824.98345" 
    $P9090."add_method"($P9091, "statement_prefix:sym<try>", $P9092)
    nqp_get_sc_object $P9093, "1307835814.0955", 394
    get_how $P9094, $P9093
    nqp_get_sc_object $P9095, "1307835814.0955", 394
    .const 'Sub' $P9096 = "492_1307835824.98345" 
    $P9094."add_method"($P9095, "blorst", $P9096)
    nqp_get_sc_object $P9097, "1307835814.0955", 394
    get_how $P9098, $P9097
    nqp_get_sc_object $P9099, "1307835814.0955", 394
    .const 'Sub' $P9100 = "493_1307835824.98345" 
    $P9098."add_method"($P9099, "statement_mod_cond:sym<if>", $P9100)
    nqp_get_sc_object $P9101, "1307835814.0955", 394
    get_how $P9102, $P9101
    nqp_get_sc_object $P9103, "1307835814.0955", 394
    .const 'Sub' $P9104 = "494_1307835824.98345" 
    $P9102."add_method"($P9103, "statement_mod_cond:sym<unless>", $P9104)
    nqp_get_sc_object $P9105, "1307835814.0955", 394
    get_how $P9106, $P9105
    nqp_get_sc_object $P9107, "1307835814.0955", 394
    .const 'Sub' $P9108 = "495_1307835824.98345" 
    $P9106."add_method"($P9107, "statement_mod_loop:sym<while>", $P9108)
    nqp_get_sc_object $P9109, "1307835814.0955", 394
    get_how $P9110, $P9109
    nqp_get_sc_object $P9111, "1307835814.0955", 394
    .const 'Sub' $P9112 = "496_1307835824.98345" 
    $P9110."add_method"($P9111, "statement_mod_loop:sym<until>", $P9112)
    nqp_get_sc_object $P9113, "1307835814.0955", 394
    get_how $P9114, $P9113
    nqp_get_sc_object $P9115, "1307835814.0955", 394
    .const 'Sub' $P9116 = "497_1307835824.98345" 
    $P9114."add_method"($P9115, "term:sym<fatarrow>", $P9116)
    nqp_get_sc_object $P9117, "1307835814.0955", 394
    get_how $P9118, $P9117
    nqp_get_sc_object $P9119, "1307835814.0955", 394
    .const 'Sub' $P9120 = "498_1307835824.98345" 
    $P9118."add_method"($P9119, "term:sym<colonpair>", $P9120)
    nqp_get_sc_object $P9121, "1307835814.0955", 394
    get_how $P9122, $P9121
    nqp_get_sc_object $P9123, "1307835814.0955", 394
    .const 'Sub' $P9124 = "499_1307835824.98345" 
    $P9122."add_method"($P9123, "term:sym<variable>", $P9124)
    nqp_get_sc_object $P9125, "1307835814.0955", 394
    get_how $P9126, $P9125
    nqp_get_sc_object $P9127, "1307835814.0955", 394
    .const 'Sub' $P9128 = "500_1307835824.98345" 
    $P9126."add_method"($P9127, "term:sym<package_declarator>", $P9128)
    nqp_get_sc_object $P9129, "1307835814.0955", 394
    get_how $P9130, $P9129
    nqp_get_sc_object $P9131, "1307835814.0955", 394
    .const 'Sub' $P9132 = "501_1307835824.98345" 
    $P9130."add_method"($P9131, "term:sym<scope_declarator>", $P9132)
    nqp_get_sc_object $P9133, "1307835814.0955", 394
    get_how $P9134, $P9133
    nqp_get_sc_object $P9135, "1307835814.0955", 394
    .const 'Sub' $P9136 = "502_1307835824.98345" 
    $P9134."add_method"($P9135, "term:sym<routine_declarator>", $P9136)
    nqp_get_sc_object $P9137, "1307835814.0955", 394
    get_how $P9138, $P9137
    nqp_get_sc_object $P9139, "1307835814.0955", 394
    .const 'Sub' $P9140 = "503_1307835824.98345" 
    $P9138."add_method"($P9139, "term:sym<regex_declarator>", $P9140)
    nqp_get_sc_object $P9141, "1307835814.0955", 394
    get_how $P9142, $P9141
    nqp_get_sc_object $P9143, "1307835814.0955", 394
    .const 'Sub' $P9144 = "504_1307835824.98345" 
    $P9142."add_method"($P9143, "term:sym<statement_prefix>", $P9144)
    nqp_get_sc_object $P9145, "1307835814.0955", 394
    get_how $P9146, $P9145
    nqp_get_sc_object $P9147, "1307835814.0955", 394
    .const 'Sub' $P9148 = "505_1307835824.98345" 
    $P9146."add_method"($P9147, "term:sym<lambda>", $P9148)
    nqp_get_sc_object $P9149, "1307835814.0955", 394
    get_how $P9150, $P9149
    nqp_get_sc_object $P9151, "1307835814.0955", 394
    .const 'Sub' $P9152 = "506_1307835824.98345" 
    $P9150."add_method"($P9151, "fatarrow", $P9152)
    nqp_get_sc_object $P9153, "1307835814.0955", 394
    get_how $P9154, $P9153
    nqp_get_sc_object $P9155, "1307835814.0955", 394
    .const 'Sub' $P9156 = "507_1307835824.98345" 
    $P9154."add_method"($P9155, "colonpair", $P9156)
    nqp_get_sc_object $P9157, "1307835814.0955", 394
    get_how $P9158, $P9157
    nqp_get_sc_object $P9159, "1307835814.0955", 394
    .const 'Sub' $P9160 = "508_1307835824.98345" 
    $P9158."add_method"($P9159, "variable", $P9160)
    nqp_get_sc_object $P9161, "1307835814.0955", 394
    get_how $P9162, $P9161
    nqp_get_sc_object $P9163, "1307835814.0955", 394
    .const 'Sub' $P9164 = "514_1307835824.98345" 
    $P9162."add_method"($P9163, "package_declarator:sym<module>", $P9164)
    nqp_get_sc_object $P9165, "1307835814.0955", 394
    get_how $P9166, $P9165
    nqp_get_sc_object $P9167, "1307835814.0955", 394
    .const 'Sub' $P9168 = "515_1307835824.98345" 
    $P9166."add_method"($P9167, "package_declarator:sym<knowhow>", $P9168)
    nqp_get_sc_object $P9169, "1307835814.0955", 394
    get_how $P9170, $P9169
    nqp_get_sc_object $P9171, "1307835814.0955", 394
    .const 'Sub' $P9172 = "516_1307835824.98345" 
    $P9170."add_method"($P9171, "package_declarator:sym<class>", $P9172)
    nqp_get_sc_object $P9173, "1307835814.0955", 394
    get_how $P9174, $P9173
    nqp_get_sc_object $P9175, "1307835814.0955", 394
    .const 'Sub' $P9176 = "517_1307835824.98345" 
    $P9174."add_method"($P9175, "package_declarator:sym<grammar>", $P9176)
    nqp_get_sc_object $P9177, "1307835814.0955", 394
    get_how $P9178, $P9177
    nqp_get_sc_object $P9179, "1307835814.0955", 394
    .const 'Sub' $P9180 = "518_1307835824.98345" 
    $P9178."add_method"($P9179, "package_declarator:sym<role>", $P9180)
    nqp_get_sc_object $P9181, "1307835814.0955", 394
    get_how $P9182, $P9181
    nqp_get_sc_object $P9183, "1307835814.0955", 394
    .const 'Sub' $P9184 = "519_1307835824.98345" 
    $P9182."add_method"($P9183, "package_declarator:sym<native>", $P9184)
    nqp_get_sc_object $P9185, "1307835814.0955", 394
    get_how $P9186, $P9185
    nqp_get_sc_object $P9187, "1307835814.0955", 394
    .const 'Sub' $P9188 = "520_1307835824.98345" 
    $P9186."add_method"($P9187, "package_declarator:sym<stub>", $P9188)
    nqp_get_sc_object $P9189, "1307835814.0955", 394
    get_how $P9190, $P9189
    nqp_get_sc_object $P9191, "1307835814.0955", 394
    .const 'Sub' $P9192 = "521_1307835824.98345" 
    $P9190."add_method"($P9191, "package_def", $P9192)
    nqp_get_sc_object $P9193, "1307835814.0955", 394
    get_how $P9194, $P9193
    nqp_get_sc_object $P9195, "1307835814.0955", 394
    .const 'Sub' $P9196 = "527_1307835824.98345" 
    $P9194."add_method"($P9195, "scope_declarator:sym<my>", $P9196)
    nqp_get_sc_object $P9197, "1307835814.0955", 394
    get_how $P9198, $P9197
    nqp_get_sc_object $P9199, "1307835814.0955", 394
    .const 'Sub' $P9200 = "528_1307835824.98345" 
    $P9198."add_method"($P9199, "scope_declarator:sym<our>", $P9200)
    nqp_get_sc_object $P9201, "1307835814.0955", 394
    get_how $P9202, $P9201
    nqp_get_sc_object $P9203, "1307835814.0955", 394
    .const 'Sub' $P9204 = "529_1307835824.98345" 
    $P9202."add_method"($P9203, "scope_declarator:sym<has>", $P9204)
    nqp_get_sc_object $P9205, "1307835814.0955", 394
    get_how $P9206, $P9205
    nqp_get_sc_object $P9207, "1307835814.0955", 394
    .const 'Sub' $P9208 = "530_1307835824.98345" 
    $P9206."add_method"($P9207, "scoped", $P9208)
    nqp_get_sc_object $P9209, "1307835814.0955", 394
    get_how $P9210, $P9209
    nqp_get_sc_object $P9211, "1307835814.0955", 394
    .const 'Sub' $P9212 = "531_1307835824.98345" 
    $P9210."add_method"($P9211, "declarator", $P9212)
    nqp_get_sc_object $P9213, "1307835814.0955", 394
    get_how $P9214, $P9213
    nqp_get_sc_object $P9215, "1307835814.0955", 394
    .const 'Sub' $P9216 = "532_1307835824.98345" 
    $P9214."add_method"($P9215, "multi_declarator:sym<multi>", $P9216)
    nqp_get_sc_object $P9217, "1307835814.0955", 394
    get_how $P9218, $P9217
    nqp_get_sc_object $P9219, "1307835814.0955", 394
    .const 'Sub' $P9220 = "533_1307835824.98345" 
    $P9218."add_method"($P9219, "multi_declarator:sym<proto>", $P9220)
    nqp_get_sc_object $P9221, "1307835814.0955", 394
    get_how $P9222, $P9221
    nqp_get_sc_object $P9223, "1307835814.0955", 394
    .const 'Sub' $P9224 = "534_1307835824.98345" 
    $P9222."add_method"($P9223, "multi_declarator:sym<null>", $P9224)
    nqp_get_sc_object $P9225, "1307835814.0955", 394
    get_how $P9226, $P9225
    nqp_get_sc_object $P9227, "1307835814.0955", 394
    .const 'Sub' $P9228 = "535_1307835824.98345" 
    $P9226."add_method"($P9227, "variable_declarator", $P9228)
    nqp_get_sc_object $P9229, "1307835814.0955", 394
    get_how $P9230, $P9229
    nqp_get_sc_object $P9231, "1307835814.0955", 394
    .const 'Sub' $P9232 = "538_1307835824.98345" 
    $P9230."add_method"($P9231, "routine_declarator:sym<sub>", $P9232)
    nqp_get_sc_object $P9233, "1307835814.0955", 394
    get_how $P9234, $P9233
    nqp_get_sc_object $P9235, "1307835814.0955", 394
    .const 'Sub' $P9236 = "539_1307835824.98345" 
    $P9234."add_method"($P9235, "routine_declarator:sym<method>", $P9236)
    nqp_get_sc_object $P9237, "1307835814.0955", 394
    get_how $P9238, $P9237
    nqp_get_sc_object $P9239, "1307835814.0955", 394
    .const 'Sub' $P9240 = "540_1307835824.98345" 
    $P9238."add_method"($P9239, "routine_def", $P9240)
    nqp_get_sc_object $P9241, "1307835814.0955", 394
    get_how $P9242, $P9241
    nqp_get_sc_object $P9243, "1307835814.0955", 394
    .const 'Sub' $P9244 = "547_1307835824.98345" 
    $P9242."add_method"($P9243, "method_def", $P9244)
    nqp_get_sc_object $P9245, "1307835814.0955", 394
    get_how $P9246, $P9245
    nqp_get_sc_object $P9247, "1307835814.0955", 394
    .const 'Sub' $P9248 = "550_1307835824.98345" 
    $P9246."add_method"($P9247, "signature", $P9248)
    nqp_get_sc_object $P9249, "1307835814.0955", 394
    get_how $P9250, $P9249
    nqp_get_sc_object $P9251, "1307835814.0955", 394
    .const 'Sub' $P9252 = "553_1307835824.98345" 
    $P9250."add_method"($P9251, "parameter", $P9252)
    nqp_get_sc_object $P9253, "1307835814.0955", 394
    get_how $P9254, $P9253
    nqp_get_sc_object $P9255, "1307835814.0955", 394
    .const 'Sub' $P9256 = "554_1307835824.98345" 
    $P9254."add_method"($P9255, "param_var", $P9256)
    nqp_get_sc_object $P9257, "1307835814.0955", 394
    get_how $P9258, $P9257
    nqp_get_sc_object $P9259, "1307835814.0955", 394
    .const 'Sub' $P9260 = "555_1307835824.98345" 
    $P9258."add_method"($P9259, "named_param", $P9260)
    nqp_get_sc_object $P9261, "1307835814.0955", 394
    get_how $P9262, $P9261
    nqp_get_sc_object $P9263, "1307835814.0955", 394
    .const 'Sub' $P9264 = "556_1307835824.98345" 
    $P9262."add_method"($P9263, "typename", $P9264)
    nqp_get_sc_object $P9265, "1307835814.0955", 394
    get_how $P9266, $P9265
    nqp_get_sc_object $P9267, "1307835814.0955", 394
    .const 'Sub' $P9268 = "558_1307835824.98345" 
    $P9266."add_method"($P9267, "trait", $P9268)
    nqp_get_sc_object $P9269, "1307835814.0955", 394
    get_how $P9270, $P9269
    nqp_get_sc_object $P9271, "1307835814.0955", 394
    .const 'Sub' $P9272 = "559_1307835824.98345" 
    $P9270."add_method"($P9271, "trait_mod:sym<is>", $P9272)
    nqp_get_sc_object $P9273, "1307835814.0955", 394
    get_how $P9274, $P9273
    nqp_get_sc_object $P9275, "1307835814.0955", 394
    .const 'Sub' $P9276 = "564_1307835824.98345" 
    $P9274."add_method"($P9275, "regex_declarator", $P9276)
    nqp_get_sc_object $P9277, "1307835814.0955", 394
    get_how $P9278, $P9277
    nqp_get_sc_object $P9279, "1307835814.0955", 394
    .const 'Sub' $P9280 = "569_1307835824.98345" 
    $P9278."add_method"($P9279, "dotty", $P9280)
    nqp_get_sc_object $P9281, "1307835814.0955", 394
    get_how $P9282, $P9281
    nqp_get_sc_object $P9283, "1307835814.0955", 394
    .const 'Sub' $P9284 = "570_1307835824.98345" 
    $P9282."add_method"($P9283, "term:sym<self>", $P9284)
    nqp_get_sc_object $P9285, "1307835814.0955", 394
    get_how $P9286, $P9285
    nqp_get_sc_object $P9287, "1307835814.0955", 394
    .const 'Sub' $P9288 = "571_1307835824.98345" 
    $P9286."add_method"($P9287, "term:sym<identifier>", $P9288)
    nqp_get_sc_object $P9289, "1307835814.0955", 394
    get_how $P9290, $P9289
    nqp_get_sc_object $P9291, "1307835814.0955", 394
    .const 'Sub' $P9292 = "572_1307835824.98345" 
    $P9290."add_method"($P9291, "term:sym<name>", $P9292)
    nqp_get_sc_object $P9293, "1307835814.0955", 394
    get_how $P9294, $P9293
    nqp_get_sc_object $P9295, "1307835814.0955", 394
    .const 'Sub' $P9296 = "574_1307835824.98345" 
    $P9294."add_method"($P9295, "term:sym<pir::op>", $P9296)
    nqp_get_sc_object $P9297, "1307835814.0955", 394
    get_how $P9298, $P9297
    nqp_get_sc_object $P9299, "1307835814.0955", 394
    .const 'Sub' $P9300 = "575_1307835824.98345" 
    $P9298."add_method"($P9299, "term:sym<onlystar>", $P9300)
    nqp_get_sc_object $P9301, "1307835814.0955", 394
    get_how $P9302, $P9301
    nqp_get_sc_object $P9303, "1307835814.0955", 394
    .const 'Sub' $P9304 = "576_1307835824.98345" 
    $P9302."add_method"($P9303, "args", $P9304)
    nqp_get_sc_object $P9305, "1307835814.0955", 394
    get_how $P9306, $P9305
    nqp_get_sc_object $P9307, "1307835814.0955", 394
    .const 'Sub' $P9308 = "577_1307835824.98345" 
    $P9306."add_method"($P9307, "arglist", $P9308)
    nqp_get_sc_object $P9309, "1307835814.0955", 394
    get_how $P9310, $P9309
    nqp_get_sc_object $P9311, "1307835814.0955", 394
    .const 'Sub' $P9312 = "580_1307835824.98345" 
    $P9310."add_method"($P9311, "term:sym<multi_declarator>", $P9312)
    nqp_get_sc_object $P9313, "1307835814.0955", 394
    get_how $P9314, $P9313
    nqp_get_sc_object $P9315, "1307835814.0955", 394
    .const 'Sub' $P9316 = "581_1307835824.98345" 
    $P9314."add_method"($P9315, "term:sym<value>", $P9316)
    nqp_get_sc_object $P9317, "1307835814.0955", 394
    get_how $P9318, $P9317
    nqp_get_sc_object $P9319, "1307835814.0955", 394
    .const 'Sub' $P9320 = "582_1307835824.98345" 
    $P9318."add_method"($P9319, "circumfix:sym<( )>", $P9320)
    nqp_get_sc_object $P9321, "1307835814.0955", 394
    get_how $P9322, $P9321
    nqp_get_sc_object $P9323, "1307835814.0955", 394
    .const 'Sub' $P9324 = "583_1307835824.98345" 
    $P9322."add_method"($P9323, "circumfix:sym<[ ]>", $P9324)
    nqp_get_sc_object $P9325, "1307835814.0955", 394
    get_how $P9326, $P9325
    nqp_get_sc_object $P9327, "1307835814.0955", 394
    .const 'Sub' $P9328 = "584_1307835824.98345" 
    $P9326."add_method"($P9327, "circumfix:sym<ang>", $P9328)
    nqp_get_sc_object $P9329, "1307835814.0955", 394
    get_how $P9330, $P9329
    nqp_get_sc_object $P9331, "1307835814.0955", 394
    .const 'Sub' $P9332 = "585_1307835824.98345" 
    $P9330."add_method"($P9331, unicode:"circumfix:sym<\x{ab} \x{bb}>", $P9332)
    nqp_get_sc_object $P9333, "1307835814.0955", 394
    get_how $P9334, $P9333
    nqp_get_sc_object $P9335, "1307835814.0955", 394
    .const 'Sub' $P9336 = "586_1307835824.98345" 
    $P9334."add_method"($P9335, "circumfix:sym<{ }>", $P9336)
    nqp_get_sc_object $P9337, "1307835814.0955", 394
    get_how $P9338, $P9337
    nqp_get_sc_object $P9339, "1307835814.0955", 394
    .const 'Sub' $P9340 = "588_1307835824.98345" 
    $P9338."add_method"($P9339, "circumfix:sym<sigil>", $P9340)
    nqp_get_sc_object $P9341, "1307835814.0955", 394
    get_how $P9342, $P9341
    nqp_get_sc_object $P9343, "1307835814.0955", 394
    .const 'Sub' $P9344 = "589_1307835824.98345" 
    $P9342."add_method"($P9343, "semilist", $P9344)
    nqp_get_sc_object $P9345, "1307835814.0955", 394
    get_how $P9346, $P9345
    nqp_get_sc_object $P9347, "1307835814.0955", 394
    .const 'Sub' $P9348 = "590_1307835824.98345" 
    $P9346."add_method"($P9347, "postcircumfix:sym<[ ]>", $P9348)
    nqp_get_sc_object $P9349, "1307835814.0955", 394
    get_how $P9350, $P9349
    nqp_get_sc_object $P9351, "1307835814.0955", 394
    .const 'Sub' $P9352 = "591_1307835824.98345" 
    $P9350."add_method"($P9351, "postcircumfix:sym<{ }>", $P9352)
    nqp_get_sc_object $P9353, "1307835814.0955", 394
    get_how $P9354, $P9353
    nqp_get_sc_object $P9355, "1307835814.0955", 394
    .const 'Sub' $P9356 = "592_1307835824.98345" 
    $P9354."add_method"($P9355, "postcircumfix:sym<ang>", $P9356)
    nqp_get_sc_object $P9357, "1307835814.0955", 394
    get_how $P9358, $P9357
    nqp_get_sc_object $P9359, "1307835814.0955", 394
    .const 'Sub' $P9360 = "593_1307835824.98345" 
    $P9358."add_method"($P9359, "postcircumfix:sym<( )>", $P9360)
    nqp_get_sc_object $P9361, "1307835814.0955", 394
    get_how $P9362, $P9361
    nqp_get_sc_object $P9363, "1307835814.0955", 394
    .const 'Sub' $P9364 = "594_1307835824.98345" 
    $P9362."add_method"($P9363, "value", $P9364)
    nqp_get_sc_object $P9365, "1307835814.0955", 394
    get_how $P9366, $P9365
    nqp_get_sc_object $P9367, "1307835814.0955", 394
    .const 'Sub' $P9368 = "595_1307835824.98345" 
    $P9366."add_method"($P9367, "number", $P9368)
    nqp_get_sc_object $P9369, "1307835814.0955", 394
    get_how $P9370, $P9369
    nqp_get_sc_object $P9371, "1307835814.0955", 394
    .const 'Sub' $P9372 = "596_1307835824.98345" 
    $P9370."add_method"($P9371, "quote:sym<apos>", $P9372)
    nqp_get_sc_object $P9373, "1307835814.0955", 394
    get_how $P9374, $P9373
    nqp_get_sc_object $P9375, "1307835814.0955", 394
    .const 'Sub' $P9376 = "597_1307835824.98345" 
    $P9374."add_method"($P9375, "quote:sym<dblq>", $P9376)
    nqp_get_sc_object $P9377, "1307835814.0955", 394
    get_how $P9378, $P9377
    nqp_get_sc_object $P9379, "1307835814.0955", 394
    .const 'Sub' $P9380 = "598_1307835824.98345" 
    $P9378."add_method"($P9379, "quote:sym<qq>", $P9380)
    nqp_get_sc_object $P9381, "1307835814.0955", 394
    get_how $P9382, $P9381
    nqp_get_sc_object $P9383, "1307835814.0955", 394
    .const 'Sub' $P9384 = "599_1307835824.98345" 
    $P9382."add_method"($P9383, "quote:sym<q>", $P9384)
    nqp_get_sc_object $P9385, "1307835814.0955", 394
    get_how $P9386, $P9385
    nqp_get_sc_object $P9387, "1307835814.0955", 394
    .const 'Sub' $P9388 = "600_1307835824.98345" 
    $P9386."add_method"($P9387, "quote:sym<Q>", $P9388)
    nqp_get_sc_object $P9389, "1307835814.0955", 394
    get_how $P9390, $P9389
    nqp_get_sc_object $P9391, "1307835814.0955", 394
    .const 'Sub' $P9392 = "601_1307835824.98345" 
    $P9390."add_method"($P9391, "quote:sym<Q:PIR>", $P9392)
    nqp_get_sc_object $P9393, "1307835814.0955", 394
    get_how $P9394, $P9393
    nqp_get_sc_object $P9395, "1307835814.0955", 394
    .const 'Sub' $P9396 = "602_1307835824.98345" 
    $P9394."add_method"($P9395, "quote:sym</ />", $P9396)
    nqp_get_sc_object $P9397, "1307835814.0955", 394
    get_how $P9398, $P9397
    nqp_get_sc_object $P9399, "1307835814.0955", 394
    .const 'Sub' $P9400 = "603_1307835824.98345" 
    $P9398."add_method"($P9399, "quote_escape:sym<$>", $P9400)
    nqp_get_sc_object $P9401, "1307835814.0955", 394
    get_how $P9402, $P9401
    nqp_get_sc_object $P9403, "1307835814.0955", 394
    .const 'Sub' $P9404 = "604_1307835824.98345" 
    $P9402."add_method"($P9403, "quote_escape:sym<{ }>", $P9404)
    nqp_get_sc_object $P9405, "1307835814.0955", 394
    get_how $P9406, $P9405
    nqp_get_sc_object $P9407, "1307835814.0955", 394
    .const 'Sub' $P9408 = "605_1307835824.98345" 
    $P9406."add_method"($P9407, "quote_escape:sym<esc>", $P9408)
    nqp_get_sc_object $P9409, "1307835814.0955", 394
    get_how $P9410, $P9409
    nqp_get_sc_object $P9411, "1307835814.0955", 394
    .const 'Sub' $P9412 = "606_1307835824.98345" 
    $P9410."add_method"($P9411, "postfix:sym<.>", $P9412)
    nqp_get_sc_object $P9413, "1307835814.0955", 394
    get_how $P9414, $P9413
    nqp_get_sc_object $P9415, "1307835814.0955", 394
    .const 'Sub' $P9416 = "607_1307835824.98345" 
    $P9414."add_method"($P9415, "postfix:sym<++>", $P9416)
    nqp_get_sc_object $P9417, "1307835814.0955", 394
    get_how $P9418, $P9417
    nqp_get_sc_object $P9419, "1307835814.0955", 394
    .const 'Sub' $P9420 = "608_1307835824.98345" 
    $P9418."add_method"($P9419, "postfix:sym<-->", $P9420)
    nqp_get_sc_object $P9421, "1307835814.0955", 394
    get_how $P9422, $P9421
    nqp_get_sc_object $P9423, "1307835814.0955", 394
    .const 'Sub' $P9424 = "609_1307835824.98345" 
    $P9422."add_method"($P9423, "prefix:sym<make>", $P9424)
    nqp_get_sc_object $P9425, "1307835814.0955", 394
    get_how $P9426, $P9425
    nqp_get_sc_object $P9427, "1307835814.0955", 394
    .const 'Sub' $P9428 = "610_1307835824.98345" 
    $P9426."add_method"($P9427, "term:sym<next>", $P9428)
    nqp_get_sc_object $P9429, "1307835814.0955", 394
    get_how $P9430, $P9429
    nqp_get_sc_object $P9431, "1307835814.0955", 394
    .const 'Sub' $P9432 = "611_1307835824.98345" 
    $P9430."add_method"($P9431, "term:sym<last>", $P9432)
    nqp_get_sc_object $P9433, "1307835814.0955", 394
    get_how $P9434, $P9433
    nqp_get_sc_object $P9435, "1307835814.0955", 394
    .const 'Sub' $P9436 = "612_1307835824.98345" 
    $P9434."add_method"($P9435, "term:sym<redo>", $P9436)
    nqp_get_sc_object $P9437, "1307835814.0955", 394
    get_how $P9438, $P9437
    nqp_get_sc_object $P9439, "1307835814.0955", 394
    .const 'Sub' $P9440 = "613_1307835824.98345" 
    $P9438."add_method"($P9439, "infix:sym<~~>", $P9440)
    nqp_get_sc_object $P9441, "1307835814.0955", 394
    get_how $P9442, $P9441
    nqp_get_sc_object $P9443, "1307835814.0955", 394
    .const 'Sub' $P9444 = "614_1307835824.98345" 
    $P9442."add_method"($P9443, "known_sym", $P9444)
    .const 'Sub' $P9445 = "436_1307835824.98345" 
    $P9446 = $P9445."get_lexinfo"()
    nqp_get_sc_object $P9447, "1307835814.0955", 394
    $P9446."set_static_lexpad_value"("$?PACKAGE", $P9447)
    .const 'Sub' $P9448 = "436_1307835824.98345" 
    $P9449 = $P9448."get_lexinfo"()
    $P9449."finish_static_lexpad"()
    .const 'Sub' $P9450 = "436_1307835824.98345" 
    $P9451 = $P9450."get_lexinfo"()
    nqp_get_sc_object $P9452, "1307835814.0955", 394
    $P9451."set_static_lexpad_value"("$?CLASS", $P9452)
    .const 'Sub' $P9453 = "436_1307835824.98345" 
    $P9454 = $P9453."get_lexinfo"()
    $P9454."finish_static_lexpad"()
    nqp_get_sc_object $P9455, "1307835814.0955", 394
    get_how $P9456, $P9455
    nqp_get_sc_object $P9457, "1307835814.0955", 394
    nqp_get_sc_object $P9458, "1307835801.01384", 105
    $P9456."add_parent"($P9457, $P9458)
    nqp_get_sc_object $P9459, "1307835814.0955", 394
    get_how $P9460, $P9459
    nqp_get_sc_object $P9461, "1307835814.0955", 394
    $P9460."compose"($P9461)
    nqp_get_sc_object $P9462, "1307835795.15992", 41
    $P9463 = $P9462."new_type"("NQP::RegexActions" :named("name"))
    nqp_set_sc_for_object $P9463, cur_sc
    nqp_set_sc_object "1307835814.0955", 506, $P9463
    nqp_get_sc_object $P9464, "1307835814.0955", 506
    nqp_get_sc_object $P9465, "1307835814.0955", 0
    nqp_get_package_through_who $P9466, $P9465, "NQP"
    get_who $P9467, $P9466
    set $P9467["RegexActions"], $P9464
    nqp_get_sc_object $P9468, "1307835814.0955", 506
    get_how $P9469, $P9468
    nqp_get_sc_object $P9470, "1307835814.0955", 506
    .const 'Sub' $P9471 = "617_1307835824.98345" 
    $P9469."add_method"($P9470, "metachar:sym<:my>", $P9471)
    nqp_get_sc_object $P9472, "1307835814.0955", 506
    get_how $P9473, $P9472
    nqp_get_sc_object $P9474, "1307835814.0955", 506
    .const 'Sub' $P9475 = "618_1307835824.98345" 
    $P9473."add_method"($P9474, "metachar:sym<{ }>", $P9475)
    nqp_get_sc_object $P9476, "1307835814.0955", 506
    get_how $P9477, $P9476
    nqp_get_sc_object $P9478, "1307835814.0955", 506
    .const 'Sub' $P9479 = "619_1307835824.98345" 
    $P9477."add_method"($P9478, "metachar:sym<nqpvar>", $P9479)
    nqp_get_sc_object $P9480, "1307835814.0955", 506
    get_how $P9481, $P9480
    nqp_get_sc_object $P9482, "1307835814.0955", 506
    .const 'Sub' $P9483 = "620_1307835824.98345" 
    $P9481."add_method"($P9482, "assertion:sym<{ }>", $P9483)
    nqp_get_sc_object $P9484, "1307835814.0955", 506
    get_how $P9485, $P9484
    nqp_get_sc_object $P9486, "1307835814.0955", 506
    .const 'Sub' $P9487 = "621_1307835824.98345" 
    $P9485."add_method"($P9486, "assertion:sym<?{ }>", $P9487)
    nqp_get_sc_object $P9488, "1307835814.0955", 506
    get_how $P9489, $P9488
    nqp_get_sc_object $P9490, "1307835814.0955", 506
    .const 'Sub' $P9491 = "622_1307835824.98345" 
    $P9489."add_method"($P9490, "assertion:sym<var>", $P9491)
    nqp_get_sc_object $P9492, "1307835814.0955", 506
    get_how $P9493, $P9492
    nqp_get_sc_object $P9494, "1307835814.0955", 506
    .const 'Sub' $P9495 = "623_1307835824.98345" 
    $P9493."add_method"($P9494, "codeblock", $P9495)
    .const 'Sub' $P9496 = "616_1307835824.98345" 
    $P9497 = $P9496."get_lexinfo"()
    nqp_get_sc_object $P9498, "1307835814.0955", 506
    $P9497."set_static_lexpad_value"("$?PACKAGE", $P9498)
    .const 'Sub' $P9499 = "616_1307835824.98345" 
    $P9500 = $P9499."get_lexinfo"()
    $P9500."finish_static_lexpad"()
    .const 'Sub' $P9501 = "616_1307835824.98345" 
    $P9502 = $P9501."get_lexinfo"()
    nqp_get_sc_object $P9503, "1307835814.0955", 506
    $P9502."set_static_lexpad_value"("$?CLASS", $P9503)
    .const 'Sub' $P9504 = "616_1307835824.98345" 
    $P9505 = $P9504."get_lexinfo"()
    $P9505."finish_static_lexpad"()
    nqp_get_sc_object $P9506, "1307835814.0955", 506
    get_how $P9507, $P9506
    nqp_get_sc_object $P9508, "1307835814.0955", 506
    nqp_get_sc_object $P9509, "1307835808.73942", 145
    $P9507."add_parent"($P9508, $P9509)
    nqp_get_sc_object $P9510, "1307835814.0955", 506
    get_how $P9511, $P9510
    nqp_get_sc_object $P9512, "1307835814.0955", 506
    $P9511."compose"($P9512)
    nqp_get_sc_object $P9513, "1307835795.15992", 41
    $P9514 = $P9513."new_type"("NQP::Compiler" :named("name"))
    nqp_set_sc_for_object $P9514, cur_sc
    nqp_set_sc_object "1307835814.0955", 514, $P9514
    nqp_get_sc_object $P9515, "1307835814.0955", 514
    nqp_get_sc_object $P9516, "1307835814.0955", 0
    nqp_get_package_through_who $P9517, $P9516, "NQP"
    get_who $P9518, $P9517
    set $P9518["Compiler"], $P9515
    .const 'Sub' $P9519 = "624_1307835824.98345" 
    $P9520 = $P9519."get_lexinfo"()
    nqp_get_sc_object $P9521, "1307835814.0955", 514
    $P9520."set_static_lexpad_value"("$?PACKAGE", $P9521)
    .const 'Sub' $P9522 = "624_1307835824.98345" 
    $P9523 = $P9522."get_lexinfo"()
    $P9523."finish_static_lexpad"()
    .const 'Sub' $P9524 = "624_1307835824.98345" 
    $P9525 = $P9524."get_lexinfo"()
    nqp_get_sc_object $P9526, "1307835814.0955", 514
    $P9525."set_static_lexpad_value"("$?CLASS", $P9526)
    .const 'Sub' $P9527 = "624_1307835824.98345" 
    $P9528 = $P9527."get_lexinfo"()
    $P9528."finish_static_lexpad"()
    nqp_get_sc_object $P9529, "1307835814.0955", 514
    get_how $P9530, $P9529
    nqp_get_sc_object $P9531, "1307835814.0955", 514
    nqp_get_sc_object $P9532, "1307835801.01384", 138
    $P9530."add_parent"($P9531, $P9532)
    nqp_get_sc_object $P9533, "1307835814.0955", 514
    get_how $P9534, $P9533
    nqp_get_sc_object $P9535, "1307835814.0955", 514
    $P9534."compose"($P9535)
  if_7341_end:
    nqp_get_sc_object $P10622, "1307835814.0955", 0
    set_hll_global "GLOBAL", $P10622
.end


.HLL "nqp"

.namespace []
.sub "MAIN"  :subid("11_1307835824.98345") :outer("10_1307835824.98345")
    .param pmc param_17
.annotate 'line', 2758
    .lex "@ARGS", param_17
.annotate 'line', 2760
    new $P18, "Undef"
    .lex "$nqpcomp", $P18
.annotate 'line', 2767
    $P19 = root_new ['parrot';'ResizablePMCArray']
    .lex "@clo", $P19
.annotate 'line', 2760
    get_hll_global $P20, "GLOBAL"
    nqp_get_package_through_who $P21, $P20, "NQP"
    get_who $P22, $P21
    set $P23, $P22["Compiler"]
    $P24 = $P23."new"()
    store_lex "$nqpcomp", $P24
.annotate 'line', 2761
    find_lex $P25, "$nqpcomp"
    unless_null $P25, vivify_627
    new $P25, "Undef"
  vivify_627:
    $P25."language"("nqp")
.annotate 'line', 2762
    find_lex $P26, "$nqpcomp"
    unless_null $P26, vivify_628
    new $P26, "Undef"
  vivify_628:
    get_hll_global $P27, "GLOBAL"
    nqp_get_package_through_who $P28, $P27, "NQP"
    get_who $P29, $P28
    set $P30, $P29["Grammar"]
    $P26."parsegrammar"($P30)
.annotate 'line', 2763
    find_lex $P31, "$nqpcomp"
    unless_null $P31, vivify_629
    new $P31, "Undef"
  vivify_629:
    get_hll_global $P32, "GLOBAL"
    nqp_get_package_through_who $P33, $P32, "NQP"
    get_who $P34, $P33
    set $P35, $P34["Actions"]
    $P31."parseactions"($P35)
.annotate 'line', 2764
    find_lex $P36, "$nqpcomp"
    unless_null $P36, vivify_630
    new $P36, "Undef"
  vivify_630:
    $P37 = $P36."config"()
    "hll-config"($P37)
.annotate 'line', 2767
    find_lex $P38, "$nqpcomp"
    unless_null $P38, vivify_631
    new $P38, "Undef"
  vivify_631:
    $P39 = $P38."commandline_options"()
    store_lex "@clo", $P39
.annotate 'line', 2768
    find_lex $P40, "@clo"
    unless_null $P40, vivify_632
    $P40 = root_new ['parrot';'ResizablePMCArray']
  vivify_632:
    $P40."push"("parsetrace")
.annotate 'line', 2769
    find_lex $P41, "@clo"
    unless_null $P41, vivify_633
    $P41 = root_new ['parrot';'ResizablePMCArray']
  vivify_633:
    $P41."push"("setting=s")
.annotate 'line', 2770
    find_lex $P42, "@clo"
    unless_null $P42, vivify_634
    $P42 = root_new ['parrot';'ResizablePMCArray']
  vivify_634:
    $P42."push"("setting-path=s")
.annotate 'line', 2771
    find_lex $P43, "@clo"
    unless_null $P43, vivify_635
    $P43 = root_new ['parrot';'ResizablePMCArray']
  vivify_635:
    $P43."push"("module-path=s")
.annotate 'line', 2772
    find_lex $P44, "@clo"
    unless_null $P44, vivify_636
    $P44 = root_new ['parrot';'ResizablePMCArray']
  vivify_636:
    $P44."push"("vmlibs=s")
.annotate 'line', 2775
    find_lex $P45, "$nqpcomp"
    unless_null $P45, vivify_637
    new $P45, "Undef"
  vivify_637:
    find_lex $P46, "@ARGS"
    unless_null $P46, vivify_638
    $P46 = root_new ['parrot';'ResizablePMCArray']
  vivify_638:
    $P47 = $P45."command_line"($P46, "utf8" :named("encoding"), "ascii iso-8859-1" :named("transcode"))
.annotate 'line', 2758
    .return ($P47)
.end


.HLL "nqp"

.namespace []
.sub "hll-config"  :subid("12_1307835824.98345") :outer("10_1307835824.98345")
    .param pmc param_50
.annotate 'line', 2779
    .lex "$config", param_50
.annotate 'line', 2780
    new $P51, "String"
    assign $P51, "2011.05-57-g6a0f778"
    find_lex $P52, "$config"
    unless_null $P52, vivify_639
    $P52 = root_new ['parrot';'Hash']
    store_lex "$config", $P52
  vivify_639:
    set $P52["version"], $P51
.annotate 'line', 2781
    new $P53, "String"
    assign $P53, "2011-06-11T23:43:33Z"
    find_lex $P54, "$config"
    unless_null $P54, vivify_640
    $P54 = root_new ['parrot';'Hash']
    store_lex "$config", $P54
  vivify_640:
    set $P54["build-date"], $P53
.annotate 'line', 2779
    .return ($P53)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.sub "_block56"  :subid("13_1307835824.98345") :outer("10_1307835824.98345")
.annotate 'line', 9
    .const 'Sub' $P875 = "38_1307835824.98345" 
    capture_lex $P875
    .const 'Sub' $P851 = "37_1307835824.98345" 
    capture_lex $P851
    .const 'Sub' $P821 = "36_1307835824.98345" 
    capture_lex $P821
    .const 'Sub' $P788 = "35_1307835824.98345" 
    capture_lex $P788
    .const 'Sub' $P673 = "30_1307835824.98345" 
    capture_lex $P673
    .const 'Sub' $P626 = "29_1307835824.98345" 
    capture_lex $P626
    .const 'Sub' $P498 = "26_1307835824.98345" 
    capture_lex $P498
    .const 'Sub' $P413 = "23_1307835824.98345" 
    capture_lex $P413
    .const 'Sub' $P336 = "22_1307835824.98345" 
    capture_lex $P336
    .const 'Sub' $P300 = "21_1307835824.98345" 
    capture_lex $P300
    .const 'Sub' $P237 = "20_1307835824.98345" 
    capture_lex $P237
    .const 'Sub' $P161 = "17_1307835824.98345" 
    capture_lex $P161
    .const 'Sub' $P120 = "16_1307835824.98345" 
    capture_lex $P120
    .const 'Sub' $P62 = "14_1307835824.98345" 
    capture_lex $P62
.annotate 'line', 14
    new $P58, "Undef"
    .lex "$loader", $P58
    .lex "$?PACKAGE", $P59
    .lex "$?CLASS", $P60
    get_hll_global $P61, "ModuleLoader"
    store_lex "$loader", $P61
.annotate 'line', 401
    .const 'Sub' $P875 = "38_1307835824.98345" 
    newclosure $P984, $P875
.annotate 'line', 9
    .return ($P984)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.include "except_types.pasm"
.sub "load_setting" :anon :subid("14_1307835824.98345") :outer("13_1307835824.98345")
    .param pmc param_65
    .param pmc param_66
.annotate 'line', 17
    .const 'Sub' $P73 = "15_1307835824.98345" 
    capture_lex $P73
    new $P64, ['ExceptionHandler'], .CONTROL_RETURN
    set_label $P64, control_63
    push_eh $P64
    .lex "self", param_65
    .lex "$setting_name", param_66
.annotate 'line', 19
    find_lex $P69, "$setting_name"
    unless_null $P69, vivify_641
    new $P69, "Undef"
  vivify_641:
    set $S70, $P69
    isne $I71, $S70, "NULL"
    if $I71, if_68
    new $P67, 'Integer'
    set $P67, $I71
    goto if_68_end
  if_68:
    .const 'Sub' $P73 = "15_1307835824.98345" 
    capture_lex $P73
    $P118 = $P73()
    set $P67, $P118
  if_68_end:
.annotate 'line', 17
    .return ($P67)
  control_63:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P119, exception, "payload"
    .return ($P119)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.include "except_types.pasm"
.sub "_block72"  :anon :subid("15_1307835824.98345") :outer("14_1307835824.98345")
.annotate 'line', 23
    new $P74, "Undef"
    .lex "$setting", $P74
.annotate 'line', 24
    find_lex $P75, "$loader"
    unless_null $P75, vivify_642
    new $P75, "Undef"
  vivify_642:
    find_lex $P76, "$setting_name"
    unless_null $P76, vivify_643
    new $P76, "Undef"
  vivify_643:
    $P77 = $P75."load_setting"($P76)
    find_dynamic_lex $P80, "%*COMPILING"
    unless_null $P80, vivify_644
    get_hll_global $P78, "GLOBAL"
    get_who $P79, $P78
    set $P80, $P79["%COMPILING"]
    unless_null $P80, vivify_645
    die "Contextual %*COMPILING not found"
  vivify_645:
    store_dynamic_lex "%*COMPILING", $P80
  vivify_644:
    set $P81, $P80["%?OPTIONS"]
    unless_null $P81, vivify_646
    $P81 = root_new ['parrot';'Hash']
    set $P80["%?OPTIONS"], $P81
  vivify_646:
    set $P81["outer_ctx"], $P77
    store_lex "$setting", $P77
.annotate 'line', 27
    find_lex $P82, "self"
    get_hll_global $P83, "GLOBAL"
    nqp_get_package_through_who $P84, $P83, "PAST"
    get_who $P85, $P84
    set $P86, $P85["Stmts"]
.annotate 'line', 28
    get_hll_global $P87, "GLOBAL"
    nqp_get_package_through_who $P88, $P87, "PAST"
    get_who $P89, $P88
    set $P90, $P89["Op"]
    $P91 = $P90."new"("ModuleLoader.pbc", "load_bytecode vs" :named("pirop"))
.annotate 'line', 31
    get_hll_global $P92, "GLOBAL"
    nqp_get_package_through_who $P93, $P92, "PAST"
    get_who $P94, $P93
    set $P95, $P94["Op"]
.annotate 'line', 33
    get_hll_global $P96, "GLOBAL"
    nqp_get_package_through_who $P97, $P96, "PAST"
    get_who $P98, $P97
    set $P99, $P98["Var"]
    $P100 = $P99."new"("block" :named("name"), "register" :named("scope"))
.annotate 'line', 34
    get_hll_global $P101, "GLOBAL"
    nqp_get_package_through_who $P102, $P101, "PAST"
    get_who $P103, $P102
    set $P104, $P103["Op"]
.annotate 'line', 36
    get_hll_global $P105, "GLOBAL"
    nqp_get_package_through_who $P106, $P105, "PAST"
    get_who $P107, $P106
    set $P108, $P107["Var"]
    new $P109, "ResizablePMCArray"
    $P110 = $P108."new"("ModuleLoader" :named("name"), $P109 :named("namespace"), "package" :named("scope"))
    find_lex $P111, "$setting_name"
    unless_null $P111, vivify_647
    new $P111, "Undef"
  vivify_647:
    $P112 = $P104."new"($P110, $P111, "callmethod" :named("pasttype"), "load_setting" :named("name"))
.annotate 'line', 34
    $P113 = $P95."new"($P100, $P112, "callmethod" :named("pasttype"), "set_outer_ctx" :named("name"))
.annotate 'line', 31
    $P114 = $P86."new"($P91, $P113)
.annotate 'line', 27
    $P82."add_event"($P114 :named("deserialize_past"))
.annotate 'line', 42
    new $P115, "Exception"
    set $P115['type'], .CONTROL_RETURN
    find_lex $P116, "$setting"
    unless_null $P116, vivify_648
    new $P116, "Undef"
  vivify_648:
    getattribute $P117, $P116, "lex_pad"
    setattribute $P115, 'payload', $P117
    throw $P115
.annotate 'line', 19
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.include "except_types.pasm"
.sub "load_module" :anon :subid("16_1307835824.98345") :outer("13_1307835824.98345")
    .param pmc param_123
    .param pmc param_124
    .param pmc param_125
.annotate 'line', 48
    new $P122, ['ExceptionHandler'], .CONTROL_RETURN
    set_label $P122, control_121
    push_eh $P122
    .lex "self", param_123
    .lex "$module_name", param_124
    .lex "$cur_GLOBALish", param_125
.annotate 'line', 50
    new $P126, "Undef"
    .lex "$module", $P126
    find_lex $P127, "$loader"
    unless_null $P127, vivify_649
    new $P127, "Undef"
  vivify_649:
    find_lex $P128, "$module_name"
    unless_null $P128, vivify_650
    new $P128, "Undef"
  vivify_650:
    find_lex $P129, "$cur_GLOBALish"
    unless_null $P129, vivify_651
    new $P129, "Undef"
  vivify_651:
    $P130 = $P127."load_module"($P128, $P129)
    store_lex "$module", $P130
.annotate 'line', 53
    find_lex $P131, "self"
    get_hll_global $P132, "GLOBAL"
    nqp_get_package_through_who $P133, $P132, "PAST"
    get_who $P134, $P133
    set $P135, $P134["Stmts"]
.annotate 'line', 54
    get_hll_global $P136, "GLOBAL"
    nqp_get_package_through_who $P137, $P136, "PAST"
    get_who $P138, $P137
    set $P139, $P138["Op"]
    $P140 = $P139."new"("ModuleLoader.pbc", "load_bytecode vs" :named("pirop"))
.annotate 'line', 57
    get_hll_global $P141, "GLOBAL"
    nqp_get_package_through_who $P142, $P141, "PAST"
    get_who $P143, $P142
    set $P144, $P143["Op"]
.annotate 'line', 59
    get_hll_global $P145, "GLOBAL"
    nqp_get_package_through_who $P146, $P145, "PAST"
    get_who $P147, $P146
    set $P148, $P147["Var"]
    new $P149, "ResizablePMCArray"
    $P150 = $P148."new"("ModuleLoader" :named("name"), $P149 :named("namespace"), "package" :named("scope"))
    find_lex $P151, "$module_name"
    unless_null $P151, vivify_652
    new $P151, "Undef"
  vivify_652:
.annotate 'line', 61
    find_lex $P152, "self"
    find_lex $P153, "$cur_GLOBALish"
    unless_null $P153, vivify_653
    new $P153, "Undef"
  vivify_653:
    $P154 = $P152."get_slot_past_for_object"($P153)
    $P155 = $P144."new"($P150, $P151, $P154, "callmethod" :named("pasttype"), "load_module" :named("name"))
.annotate 'line', 57
    $P156 = $P135."new"($P140, $P155)
.annotate 'line', 53
    $P131."add_event"($P156 :named("deserialize_past"))
.annotate 'line', 64
    new $P157, "Exception"
    set $P157['type'], .CONTROL_RETURN
    find_lex $P158, "$module"
    unless_null $P158, vivify_654
    new $P158, "Undef"
  vivify_654:
    getattribute $P159, $P158, "lex_pad"
    setattribute $P157, 'payload', $P159
    throw $P157
.annotate 'line', 48
    .return ()
  control_121:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P160, exception, "payload"
    .return ($P160)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.include "except_types.pasm"
.sub "install_package_symbol" :anon :subid("17_1307835824.98345") :outer("13_1307835824.98345")
    .param pmc param_162
    .param pmc param_163
    .param pmc param_164
    .param pmc param_165
.annotate 'line', 69
    .const 'Sub' $P202 = "19_1307835824.98345" 
    capture_lex $P202
    .const 'Sub' $P181 = "18_1307835824.98345" 
    capture_lex $P181
    .lex "self", param_162
    .lex "$package", param_163
    .lex "@sym", param_164
    .lex "$obj", param_165
.annotate 'line', 71
    new $P166, "Undef"
    .lex "$name", $P166
.annotate 'line', 74
    new $P167, "Undef"
    .lex "$target", $P167
.annotate 'line', 81
    new $P168, "Undef"
    .lex "$path", $P168
.annotate 'line', 70
    find_lex $P169, "@sym"
    unless_null $P169, vivify_655
    $P169 = root_new ['parrot';'ResizablePMCArray']
  vivify_655:
    clone $P170, $P169
    store_lex "@sym", $P170
.annotate 'line', 71
    find_lex $P171, "@sym"
    unless_null $P171, vivify_656
    $P171 = root_new ['parrot';'ResizablePMCArray']
  vivify_656:
    $P172 = $P171."pop"()
    set $S173, $P172
    new $P174, 'String'
    set $P174, $S173
    store_lex "$name", $P174
.annotate 'line', 74
    find_lex $P175, "$package"
    unless_null $P175, vivify_657
    new $P175, "Undef"
  vivify_657:
    store_lex "$target", $P175
.annotate 'line', 75
    find_lex $P177, "@sym"
    unless_null $P177, vivify_658
    $P177 = root_new ['parrot';'ResizablePMCArray']
  vivify_658:
    defined $I178, $P177
    unless $I178, for_undef_659
    iter $P176, $P177
    new $P188, 'ExceptionHandler'
    set_label $P188, loop187_handler
    $P188."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P188
  loop187_test:
    unless $P176, loop187_done
    shift $P179, $P176
  loop187_redo:
    .const 'Sub' $P181 = "18_1307835824.98345" 
    capture_lex $P181
    $P181($P179)
  loop187_next:
    goto loop187_test
  loop187_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P189, exception, 'type'
    eq $P189, .CONTROL_LOOP_NEXT, loop187_next
    eq $P189, .CONTROL_LOOP_REDO, loop187_redo
  loop187_done:
    pop_eh 
  for_undef_659:
.annotate 'line', 78
    find_lex $P190, "$obj"
    unless_null $P190, vivify_662
    new $P190, "Undef"
  vivify_662:
    find_lex $P191, "$name"
    unless_null $P191, vivify_663
    new $P191, "Undef"
  vivify_663:
    find_lex $P192, "$target"
    unless_null $P192, vivify_664
    new $P192, "Undef"
    store_lex "$target", $P192
  vivify_664:
    get_who $P193, $P192
    set $P193[$P191], $P190
.annotate 'line', 81
    find_lex $P194, "self"
    find_lex $P195, "$package"
    unless_null $P195, vivify_665
    new $P195, "Undef"
  vivify_665:
    $P196 = $P194."get_slot_past_for_object"($P195)
    store_lex "$path", $P196
.annotate 'line', 82
    find_lex $P198, "@sym"
    unless_null $P198, vivify_666
    $P198 = root_new ['parrot';'ResizablePMCArray']
  vivify_666:
    defined $I199, $P198
    unless $I199, for_undef_667
    iter $P197, $P198
    new $P213, 'ExceptionHandler'
    set_label $P213, loop212_handler
    $P213."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P213
  loop212_test:
    unless $P197, loop212_done
    shift $P200, $P197
  loop212_redo:
    .const 'Sub' $P202 = "19_1307835824.98345" 
    capture_lex $P202
    $P202($P200)
  loop212_next:
    goto loop212_test
  loop212_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P214, exception, 'type'
    eq $P214, .CONTROL_LOOP_NEXT, loop212_next
    eq $P214, .CONTROL_LOOP_REDO, loop212_redo
  loop212_done:
    pop_eh 
  for_undef_667:
.annotate 'line', 85
    find_lex $P215, "self"
    get_hll_global $P216, "GLOBAL"
    nqp_get_package_through_who $P217, $P216, "PAST"
    get_who $P218, $P217
    set $P219, $P218["Op"]
.annotate 'line', 87
    get_hll_global $P220, "GLOBAL"
    nqp_get_package_through_who $P221, $P220, "PAST"
    get_who $P222, $P221
    set $P223, $P222["Var"]
.annotate 'line', 89
    get_hll_global $P224, "GLOBAL"
    nqp_get_package_through_who $P225, $P224, "PAST"
    get_who $P226, $P225
    set $P227, $P226["Op"]
    find_lex $P228, "$path"
    unless_null $P228, vivify_670
    new $P228, "Undef"
  vivify_670:
    $P229 = $P227."new"($P228, "get_who PP" :named("pirop"))
    find_lex $P230, "$name"
    unless_null $P230, vivify_671
    new $P230, "Undef"
  vivify_671:
    $P231 = $P223."new"($P229, $P230, "keyed" :named("scope"))
.annotate 'line', 92
    find_lex $P232, "self"
    find_lex $P233, "$obj"
    unless_null $P233, vivify_672
    new $P233, "Undef"
  vivify_672:
    $P234 = $P232."get_slot_past_for_object"($P233)
    $P235 = $P219."new"($P231, $P234, "bind_6model" :named("pasttype"))
.annotate 'line', 85
    $P236 = $P215."add_event"($P235 :named("deserialize_past"))
.annotate 'line', 69
    .return ($P236)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.sub "_block180"  :anon :subid("18_1307835824.98345") :outer("17_1307835824.98345")
    .param pmc param_182
.annotate 'line', 75
    .lex "$_", param_182
.annotate 'line', 76
    find_lex $P183, "$target"
    unless_null $P183, vivify_660
    new $P183, "Undef"
  vivify_660:
    find_lex $P184, "$_"
    unless_null $P184, vivify_661
    new $P184, "Undef"
  vivify_661:
    set $S185, $P184
    nqp_get_package_through_who $P186, $P183, $S185
    store_lex "$target", $P186
.annotate 'line', 75
    .return ($P186)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.sub "_block201"  :anon :subid("19_1307835824.98345") :outer("17_1307835824.98345")
    .param pmc param_203
.annotate 'line', 82
    .lex "$_", param_203
.annotate 'line', 83
    get_hll_global $P204, "GLOBAL"
    nqp_get_package_through_who $P205, $P204, "PAST"
    get_who $P206, $P205
    set $P207, $P206["Op"]
    find_lex $P208, "$path"
    unless_null $P208, vivify_668
    new $P208, "Undef"
  vivify_668:
    find_lex $P209, "$_"
    unless_null $P209, vivify_669
    new $P209, "Undef"
  vivify_669:
    set $S210, $P209
    $P211 = $P207."new"($P208, $S210, "nqp_get_package_through_who PPs" :named("pirop"))
    store_lex "$path", $P211
.annotate 'line', 82
    .return ($P211)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.sub "install_lexical_symbol" :anon :subid("20_1307835824.98345") :outer("13_1307835824.98345")
    .param pmc param_238
    .param pmc param_239
    .param pmc param_240
    .param pmc param_241
.annotate 'line', 100
    .lex "self", param_238
    .lex "$block", param_239
    .lex "$name", param_240
    .lex "$obj", param_241
.annotate 'line', 106
    new $P242, "Undef"
    .lex "$fixup", $P242
.annotate 'line', 102
    find_lex $P243, "$block"
    unless_null $P243, vivify_673
    new $P243, "Undef"
  vivify_673:
    find_lex $P244, "$name"
    unless_null $P244, vivify_674
    new $P244, "Undef"
  vivify_674:
    find_lex $P245, "$obj"
    unless_null $P245, vivify_675
    new $P245, "Undef"
  vivify_675:
    $P243."symbol"($P244, "lexical" :named("scope"), $P245 :named("value"))
.annotate 'line', 103
    find_lex $P246, "$block"
    unless_null $P246, vivify_676
    $P246 = root_new ['parrot';'ResizablePMCArray']
  vivify_676:
    set $P247, $P246[0]
    unless_null $P247, vivify_677
    new $P247, "Undef"
  vivify_677:
    get_hll_global $P248, "GLOBAL"
    nqp_get_package_through_who $P249, $P248, "PAST"
    get_who $P250, $P249
    set $P251, $P250["Var"]
    find_lex $P252, "$name"
    unless_null $P252, vivify_678
    new $P252, "Undef"
  vivify_678:
    $P253 = $P251."new"("lexical" :named("scope"), $P252 :named("name"), 1 :named("isdecl"))
    $P247."push"($P253)
.annotate 'line', 106
    get_hll_global $P254, "GLOBAL"
    nqp_get_package_through_who $P255, $P254, "PAST"
    get_who $P256, $P255
    set $P257, $P256["Stmts"]
.annotate 'line', 107
    get_hll_global $P258, "GLOBAL"
    nqp_get_package_through_who $P259, $P258, "PAST"
    get_who $P260, $P259
    set $P261, $P260["Op"]
.annotate 'line', 109
    get_hll_global $P262, "GLOBAL"
    nqp_get_package_through_who $P263, $P262, "PAST"
    get_who $P264, $P263
    set $P265, $P264["Op"]
.annotate 'line', 111
    get_hll_global $P266, "GLOBAL"
    nqp_get_package_through_who $P267, $P266, "PAST"
    get_who $P268, $P267
    set $P269, $P268["Val"]
    find_lex $P270, "$block"
    unless_null $P270, vivify_679
    new $P270, "Undef"
  vivify_679:
    $P271 = $P269."new"($P270 :named("value"))
    $P272 = $P265."new"($P271, "callmethod" :named("pasttype"), "get_lexinfo" :named("name"))
.annotate 'line', 113
    find_lex $P273, "$name"
    unless_null $P273, vivify_680
    new $P273, "Undef"
  vivify_680:
    set $S274, $P273
    find_lex $P275, "self"
    find_lex $P276, "$obj"
    unless_null $P276, vivify_681
    new $P276, "Undef"
  vivify_681:
    $P277 = $P275."get_slot_past_for_object"($P276)
    $P278 = $P261."new"($P272, $S274, $P277, "callmethod" :named("pasttype"), "set_static_lexpad_value" :named("name"))
.annotate 'line', 117
    get_hll_global $P279, "GLOBAL"
    nqp_get_package_through_who $P280, $P279, "PAST"
    get_who $P281, $P280
    set $P282, $P281["Op"]
.annotate 'line', 119
    get_hll_global $P283, "GLOBAL"
    nqp_get_package_through_who $P284, $P283, "PAST"
    get_who $P285, $P284
    set $P286, $P285["Op"]
.annotate 'line', 121
    get_hll_global $P287, "GLOBAL"
    nqp_get_package_through_who $P288, $P287, "PAST"
    get_who $P289, $P288
    set $P290, $P289["Val"]
    find_lex $P291, "$block"
    unless_null $P291, vivify_682
    new $P291, "Undef"
  vivify_682:
    $P292 = $P290."new"($P291 :named("value"))
    $P293 = $P286."new"($P292, "callmethod" :named("pasttype"), "get_lexinfo" :named("name"))
.annotate 'line', 119
    $P294 = $P282."new"($P293, "callmethod" :named("pasttype"), "finish_static_lexpad" :named("name"))
.annotate 'line', 117
    $P295 = $P257."new"($P278, $P294)
.annotate 'line', 106
    store_lex "$fixup", $P295
.annotate 'line', 125
    find_lex $P296, "self"
    find_lex $P297, "$fixup"
    unless_null $P297, vivify_683
    new $P297, "Undef"
  vivify_683:
    find_lex $P298, "$fixup"
    unless_null $P298, vivify_684
    new $P298, "Undef"
  vivify_684:
    $P299 = $P296."add_event"($P297 :named("deserialize_past"), $P298 :named("fixup_past"))
.annotate 'line', 100
    .return ($P299)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.sub "install_package_routine" :anon :subid("21_1307835824.98345") :outer("13_1307835824.98345")
    .param pmc param_301
    .param pmc param_302
    .param pmc param_303
    .param pmc param_304
.annotate 'line', 130
    .lex "self", param_301
    .lex "$package", param_302
    .lex "$name", param_303
    .lex "$past_block", param_304
.annotate 'line', 131
    new $P305, "Undef"
    .lex "$fixup", $P305
    get_hll_global $P306, "GLOBAL"
    nqp_get_package_through_who $P307, $P306, "PAST"
    get_who $P308, $P307
    set $P309, $P308["Op"]
.annotate 'line', 133
    get_hll_global $P310, "GLOBAL"
    nqp_get_package_through_who $P311, $P310, "PAST"
    get_who $P312, $P311
    set $P313, $P312["Var"]
.annotate 'line', 135
    get_hll_global $P314, "GLOBAL"
    nqp_get_package_through_who $P315, $P314, "PAST"
    get_who $P316, $P315
    set $P317, $P316["Op"]
    find_lex $P318, "self"
    find_lex $P319, "$package"
    unless_null $P319, vivify_685
    new $P319, "Undef"
  vivify_685:
    $P320 = $P318."get_slot_past_for_object"($P319)
    $P321 = $P317."new"($P320, "get_who PP" :named("pirop"))
.annotate 'line', 136
    find_lex $P322, "$name"
    unless_null $P322, vivify_686
    new $P322, "Undef"
  vivify_686:
    set $S323, $P322
    $P324 = $P313."new"($P321, $S323, "keyed" :named("scope"))
.annotate 'line', 138
    get_hll_global $P325, "GLOBAL"
    nqp_get_package_through_who $P326, $P325, "PAST"
    get_who $P327, $P326
    set $P328, $P327["Val"]
    find_lex $P329, "$past_block"
    unless_null $P329, vivify_687
    new $P329, "Undef"
  vivify_687:
    $P330 = $P328."new"($P329 :named("value"))
    $P331 = $P309."new"($P324, $P330, "bind_6model" :named("pasttype"))
.annotate 'line', 131
    store_lex "$fixup", $P331
.annotate 'line', 140
    find_lex $P332, "self"
    find_lex $P333, "$fixup"
    unless_null $P333, vivify_688
    new $P333, "Undef"
  vivify_688:
    find_lex $P334, "$fixup"
    unless_null $P334, vivify_689
    new $P334, "Undef"
  vivify_689:
    $P335 = $P332."add_event"($P333 :named("deserialize_past"), $P334 :named("fixup_past"))
.annotate 'line', 130
    .return ($P335)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.include "except_types.pasm"
.sub "pkg_create_mo" :anon :subid("22_1307835824.98345") :outer("13_1307835824.98345")
    .param pmc param_339
    .param pmc param_340
    .param pmc param_341 :optional :named("name")
    .param int has_param_341 :opt_flag
    .param pmc param_343 :optional :named("repr")
    .param int has_param_343 :opt_flag
.annotate 'line', 145
    new $P338, ['ExceptionHandler'], .CONTROL_RETURN
    set_label $P338, control_337
    push_eh $P338
    .lex "self", param_339
    .lex "$how", param_340
    if has_param_341, optparam_690
    new $P342, "Undef"
    set param_341, $P342
  optparam_690:
    .lex "$name", param_341
    if has_param_343, optparam_691
    new $P344, "Undef"
    set param_343, $P344
  optparam_691:
    .lex "$repr", param_343
.annotate 'line', 147
    $P345 = root_new ['parrot';'Hash']
    .lex "%args", $P345
.annotate 'line', 150
    new $P346, "Undef"
    .lex "$mo", $P346
.annotate 'line', 151
    new $P347, "Undef"
    .lex "$slot", $P347
.annotate 'line', 155
    $P348 = root_new ['parrot';'ResizablePMCArray']
    .lex "@how_ns", $P348
.annotate 'line', 156
    new $P349, "Undef"
    .lex "$how_name", $P349
.annotate 'line', 157
    new $P350, "Undef"
    .lex "$setup_call", $P350
.annotate 'line', 145
    find_lex $P351, "%args"
    unless_null $P351, vivify_692
    $P351 = root_new ['parrot';'Hash']
  vivify_692:
.annotate 'line', 148
    find_lex $P353, "$name"
    unless_null $P353, vivify_693
    new $P353, "Undef"
  vivify_693:
    defined $I354, $P353
    unless $I354, if_352_end
    find_lex $P355, "$name"
    unless_null $P355, vivify_694
    new $P355, "Undef"
  vivify_694:
    find_lex $P356, "%args"
    unless_null $P356, vivify_695
    $P356 = root_new ['parrot';'Hash']
    store_lex "%args", $P356
  vivify_695:
    set $P356["name"], $P355
  if_352_end:
.annotate 'line', 149
    find_lex $P358, "$repr"
    unless_null $P358, vivify_696
    new $P358, "Undef"
  vivify_696:
    defined $I359, $P358
    unless $I359, if_357_end
    find_lex $P360, "$repr"
    unless_null $P360, vivify_697
    new $P360, "Undef"
  vivify_697:
    find_lex $P361, "%args"
    unless_null $P361, vivify_698
    $P361 = root_new ['parrot';'Hash']
    store_lex "%args", $P361
  vivify_698:
    set $P361["repr"], $P360
  if_357_end:
.annotate 'line', 150
    find_lex $P362, "$how"
    unless_null $P362, vivify_699
    new $P362, "Undef"
  vivify_699:
    find_lex $P363, "%args"
    unless_null $P363, vivify_700
    $P363 = root_new ['parrot';'Hash']
  vivify_700:
    $P364 = $P362."new_type"($P363 :flat)
    store_lex "$mo", $P364
.annotate 'line', 151
    find_lex $P365, "self"
    find_lex $P366, "$mo"
    unless_null $P366, vivify_701
    new $P366, "Undef"
  vivify_701:
    $P367 = $P365."add_object"($P366)
    store_lex "$slot", $P367
.annotate 'line', 155
    find_lex $P368, "$how"
    unless_null $P368, vivify_702
    new $P368, "Undef"
  vivify_702:
    get_how $P369, $P368
    find_lex $P370, "$how"
    unless_null $P370, vivify_703
    new $P370, "Undef"
  vivify_703:
    $S371 = $P369."name"($P370)
    split $P372, "::", $S371
    store_lex "@how_ns", $P372
.annotate 'line', 156
    find_lex $P373, "@how_ns"
    unless_null $P373, vivify_704
    $P373 = root_new ['parrot';'ResizablePMCArray']
  vivify_704:
    $P374 = $P373."pop"()
    store_lex "$how_name", $P374
.annotate 'line', 157
    get_hll_global $P375, "GLOBAL"
    nqp_get_package_through_who $P376, $P375, "PAST"
    get_who $P377, $P376
    set $P378, $P377["Op"]
.annotate 'line', 159
    find_lex $P379, "self"
    find_lex $P380, "$how"
    unless_null $P380, vivify_705
    new $P380, "Undef"
  vivify_705:
    $P381 = $P379."get_object_sc_ref_past"($P380)
    $P382 = $P378."new"($P381, "callmethod" :named("pasttype"), "new_type" :named("name"))
.annotate 'line', 157
    store_lex "$setup_call", $P382
.annotate 'line', 161
    find_lex $P384, "$name"
    unless_null $P384, vivify_706
    new $P384, "Undef"
  vivify_706:
    defined $I385, $P384
    unless $I385, if_383_end
.annotate 'line', 162
    find_lex $P386, "$setup_call"
    unless_null $P386, vivify_707
    new $P386, "Undef"
  vivify_707:
    get_hll_global $P387, "GLOBAL"
    nqp_get_package_through_who $P388, $P387, "PAST"
    get_who $P389, $P388
    set $P390, $P389["Val"]
    find_lex $P391, "$name"
    unless_null $P391, vivify_708
    new $P391, "Undef"
  vivify_708:
    $P392 = $P390."new"($P391 :named("value"), "name" :named("named"))
    $P386."push"($P392)
  if_383_end:
.annotate 'line', 164
    find_lex $P394, "$repr"
    unless_null $P394, vivify_709
    new $P394, "Undef"
  vivify_709:
    defined $I395, $P394
    unless $I395, if_393_end
.annotate 'line', 165
    find_lex $P396, "$setup_call"
    unless_null $P396, vivify_710
    new $P396, "Undef"
  vivify_710:
    get_hll_global $P397, "GLOBAL"
    nqp_get_package_through_who $P398, $P397, "PAST"
    get_who $P399, $P398
    set $P400, $P399["Val"]
    find_lex $P401, "$repr"
    unless_null $P401, vivify_711
    new $P401, "Undef"
  vivify_711:
    $P402 = $P400."new"($P401 :named("value"), "repr" :named("named"))
    $P396."push"($P402)
  if_393_end:
.annotate 'line', 167
    find_lex $P403, "self"
.annotate 'line', 168
    find_lex $P404, "self"
    find_lex $P405, "$slot"
    unless_null $P405, vivify_712
    new $P405, "Undef"
  vivify_712:
    find_lex $P406, "self"
    find_lex $P407, "$setup_call"
    unless_null $P407, vivify_713
    new $P407, "Undef"
  vivify_713:
    $P408 = $P406."set_cur_sc"($P407)
    $P409 = $P404."set_slot_past"($P405, $P408)
    $P403."add_event"($P409 :named("deserialize_past"))
.annotate 'line', 171
    new $P410, "Exception"
    set $P410['type'], .CONTROL_RETURN
    find_lex $P411, "$mo"
    unless_null $P411, vivify_714
    new $P411, "Undef"
  vivify_714:
    setattribute $P410, 'payload', $P411
    throw $P410
.annotate 'line', 145
    .return ()
  control_337:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P412, exception, "payload"
    .return ($P412)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.include "except_types.pasm"
.sub "pkg_add_attribute" :anon :subid("23_1307835824.98345") :outer("13_1307835824.98345")
    .param pmc param_414
    .param pmc param_415
    .param pmc param_416
    .param pmc param_417
    .param pmc param_418
.annotate 'line', 179
    .const 'Sub' $P464 = "25_1307835824.98345" 
    capture_lex $P464
    .const 'Sub' $P443 = "24_1307835824.98345" 
    capture_lex $P443
    .lex "self", param_414
    .lex "$obj", param_415
    .lex "$meta_attr", param_416
    .lex "%lit_args", param_417
    .lex "%obj_args", param_418
.annotate 'line', 181
    new $P419, "Undef"
    .lex "$attr", $P419
.annotate 'line', 185
    new $P420, "Undef"
    .lex "$create_call", $P420
.annotate 'line', 197
    new $P421, "Undef"
    .lex "$obj_slot_past", $P421
.annotate 'line', 181
    find_lex $P422, "$meta_attr"
    unless_null $P422, vivify_715
    new $P422, "Undef"
  vivify_715:
    find_lex $P423, "%lit_args"
    unless_null $P423, vivify_716
    $P423 = root_new ['parrot';'Hash']
  vivify_716:
    find_lex $P424, "%obj_args"
    unless_null $P424, vivify_717
    $P424 = root_new ['parrot';'Hash']
  vivify_717:
    $P425 = $P422."new"($P423 :flat, $P424 :flat)
    store_lex "$attr", $P425
.annotate 'line', 182
    find_lex $P426, "$obj"
    unless_null $P426, vivify_718
    new $P426, "Undef"
  vivify_718:
    get_how $P427, $P426
    find_lex $P428, "$obj"
    unless_null $P428, vivify_719
    new $P428, "Undef"
  vivify_719:
    find_lex $P429, "$attr"
    unless_null $P429, vivify_720
    new $P429, "Undef"
  vivify_720:
    $P427."add_attribute"($P428, $P429)
.annotate 'line', 185
    get_hll_global $P430, "GLOBAL"
    nqp_get_package_through_who $P431, $P430, "PAST"
    get_who $P432, $P431
    set $P433, $P432["Op"]
.annotate 'line', 187
    find_lex $P434, "self"
    find_lex $P435, "$meta_attr"
    unless_null $P435, vivify_721
    new $P435, "Undef"
  vivify_721:
    $P436 = $P434."get_object_sc_ref_past"($P435)
    $P437 = $P433."new"($P436, "callmethod" :named("pasttype"), "new" :named("name"))
.annotate 'line', 185
    store_lex "$create_call", $P437
.annotate 'line', 189
    find_lex $P439, "%lit_args"
    unless_null $P439, vivify_722
    $P439 = root_new ['parrot';'Hash']
  vivify_722:
    defined $I440, $P439
    unless $I440, for_undef_723
    iter $P438, $P439
    new $P457, 'ExceptionHandler'
    set_label $P457, loop456_handler
    $P457."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P457
  loop456_test:
    unless $P438, loop456_done
    shift $P441, $P438
  loop456_redo:
    .const 'Sub' $P443 = "24_1307835824.98345" 
    capture_lex $P443
    $P443($P441)
  loop456_next:
    goto loop456_test
  loop456_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P458, exception, 'type'
    eq $P458, .CONTROL_LOOP_NEXT, loop456_next
    eq $P458, .CONTROL_LOOP_REDO, loop456_redo
  loop456_done:
    pop_eh 
  for_undef_723:
.annotate 'line', 192
    find_lex $P460, "%obj_args"
    unless_null $P460, vivify_727
    $P460 = root_new ['parrot';'Hash']
  vivify_727:
    defined $I461, $P460
    unless $I461, for_undef_728
    iter $P459, $P460
    new $P478, 'ExceptionHandler'
    set_label $P478, loop477_handler
    $P478."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P478
  loop477_test:
    unless $P459, loop477_done
    shift $P462, $P459
  loop477_redo:
    .const 'Sub' $P464 = "25_1307835824.98345" 
    capture_lex $P464
    $P464($P462)
  loop477_next:
    goto loop477_test
  loop477_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P479, exception, 'type'
    eq $P479, .CONTROL_LOOP_NEXT, loop477_next
    eq $P479, .CONTROL_LOOP_REDO, loop477_redo
  loop477_done:
    pop_eh 
  for_undef_728:
.annotate 'line', 197
    find_lex $P480, "self"
    find_lex $P481, "$obj"
    unless_null $P481, vivify_734
    new $P481, "Undef"
  vivify_734:
    $P482 = $P480."get_slot_past_for_object"($P481)
    store_lex "$obj_slot_past", $P482
.annotate 'line', 198
    find_lex $P483, "self"
    get_hll_global $P484, "GLOBAL"
    nqp_get_package_through_who $P485, $P484, "PAST"
    get_who $P486, $P485
    set $P487, $P486["Op"]
.annotate 'line', 200
    get_hll_global $P488, "GLOBAL"
    nqp_get_package_through_who $P489, $P488, "PAST"
    get_who $P490, $P489
    set $P491, $P490["Op"]
    find_lex $P492, "$obj_slot_past"
    unless_null $P492, vivify_735
    new $P492, "Undef"
  vivify_735:
    $P493 = $P491."new"($P492, "get_how PP" :named("pirop"))
    find_lex $P494, "$obj_slot_past"
    unless_null $P494, vivify_736
    new $P494, "Undef"
  vivify_736:
    find_lex $P495, "$create_call"
    unless_null $P495, vivify_737
    new $P495, "Undef"
  vivify_737:
    $P496 = $P487."new"($P493, $P494, $P495, "callmethod" :named("pasttype"), "add_attribute" :named("name"))
.annotate 'line', 198
    $P497 = $P483."add_event"($P496 :named("deserialize_past"))
.annotate 'line', 179
    .return ($P497)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.sub "_block442"  :anon :subid("24_1307835824.98345") :outer("23_1307835824.98345")
    .param pmc param_444
.annotate 'line', 189
    .lex "$_", param_444
.annotate 'line', 190
    find_lex $P445, "$create_call"
    unless_null $P445, vivify_724
    new $P445, "Undef"
  vivify_724:
    get_hll_global $P446, "GLOBAL"
    nqp_get_package_through_who $P447, $P446, "PAST"
    get_who $P448, $P447
    set $P449, $P448["Val"]
    find_lex $P450, "$_"
    unless_null $P450, vivify_725
    new $P450, "Undef"
  vivify_725:
    $P451 = $P450."value"()
    find_lex $P452, "$_"
    unless_null $P452, vivify_726
    new $P452, "Undef"
  vivify_726:
    $P453 = $P452."key"()
    $P454 = $P449."new"($P451 :named("value"), $P453 :named("named"))
    $P455 = $P445."push"($P454)
.annotate 'line', 189
    .return ($P455)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.sub "_block463"  :anon :subid("25_1307835824.98345") :outer("23_1307835824.98345")
    .param pmc param_466
.annotate 'line', 193
    new $P465, "Undef"
    .lex "$lookup", $P465
    .lex "$_", param_466
    find_lex $P467, "self"
    find_lex $P468, "$_"
    unless_null $P468, vivify_729
    new $P468, "Undef"
  vivify_729:
    $P469 = $P468."value"()
    $P470 = $P467."get_object_sc_ref_past"($P469)
    store_lex "$lookup", $P470
.annotate 'line', 194
    find_lex $P471, "$lookup"
    unless_null $P471, vivify_730
    new $P471, "Undef"
  vivify_730:
    find_lex $P472, "$_"
    unless_null $P472, vivify_731
    new $P472, "Undef"
  vivify_731:
    $P473 = $P472."key"()
    $P471."named"($P473)
.annotate 'line', 195
    find_lex $P474, "$create_call"
    unless_null $P474, vivify_732
    new $P474, "Undef"
  vivify_732:
    find_lex $P475, "$lookup"
    unless_null $P475, vivify_733
    new $P475, "Undef"
  vivify_733:
    $P476 = $P474."push"($P475)
.annotate 'line', 192
    .return ($P476)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.sub "pkg_add_method" :anon :subid("26_1307835824.98345") :outer("13_1307835824.98345")
    .param pmc param_499
    .param pmc param_500
    .param pmc param_501
    .param pmc param_502
    .param pmc param_503
    .param pmc param_504
.annotate 'line', 209
    .const 'Sub' $P544 = "28_1307835824.98345" 
    capture_lex $P544
    .const 'Sub' $P510 = "27_1307835824.98345" 
    capture_lex $P510
    .lex "self", param_499
    .lex "$obj", param_500
    .lex "$meta_method_name", param_501
    .lex "$name", param_502
    .lex "$method_past", param_503
    .lex "$is_dispatcher", param_504
.annotate 'line', 215
    new $P505, "Undef"
    .lex "$stub_code", $P505
.annotate 'line', 221
    new $P506, "Undef"
    .lex "$fixups", $P506
.annotate 'line', 222
    new $P507, "Undef"
    .lex "$dummy", $P507
.annotate 'line', 267
    new $P508, "Undef"
    .lex "$slot_past", $P508
.annotate 'line', 215
    .const 'Sub' $P510 = "27_1307835824.98345" 
    newclosure $P524, $P510
    store_lex "$stub_code", $P524
.annotate 'line', 221
    get_hll_global $P525, "GLOBAL"
    nqp_get_package_through_who $P526, $P525, "PAST"
    get_who $P527, $P526
    set $P528, $P527["Stmts"]
    $P529 = $P528."new"()
    store_lex "$fixups", $P529
    find_lex $P530, "$dummy"
    unless_null $P530, vivify_742
    new $P530, "Undef"
  vivify_742:
.annotate 'line', 223
    find_lex $P532, "$method_past"
    unless_null $P532, vivify_743
    $P532 = root_new ['parrot';'Hash']
  vivify_743:
    set $P533, $P532["compile_time_dummy"]
    unless_null $P533, vivify_744
    new $P533, "Undef"
  vivify_744:
    defined $I534, $P533
    if $I534, if_531
.annotate 'line', 230
    find_lex $P538, "$is_dispatcher"
    unless_null $P538, vivify_745
    new $P538, "Undef"
  vivify_745:
    if $P538, if_537
.annotate 'line', 246
    find_lex $P567, "$stub_code"
    unless_null $P567, vivify_746
    new $P567, "Undef"
  vivify_746:
    clone $P568, $P567
    store_lex "$dummy", $P568
.annotate 'line', 245
    goto if_537_end
  if_537:
.annotate 'line', 231
    find_lex $P539, "$method_past"
    unless_null $P539, vivify_747
    new $P539, "Undef"
  vivify_747:
    $P539."pirflags"(":instanceof(\"DispatcherSub\")")
.annotate 'line', 232
    new $P540, "DispatcherSub"
    find_lex $P541, "$stub_code"
    unless_null $P541, vivify_748
    new $P541, "Undef"
  vivify_748:
    assign $P540, $P541
    store_lex "$dummy", $P540
.annotate 'line', 236
    find_lex $P542, "$dummy"
    unless_null $P542, vivify_749
    new $P542, "Undef"
  vivify_749:
    .const 'Sub' $P544 = "28_1307835824.98345" 
    newclosure $P566, $P544
    setprop $P542, "CLONE_CALLBACK", $P566
  if_537_end:
.annotate 'line', 248
    find_lex $P569, "$dummy"
    unless_null $P569, vivify_754
    new $P569, "Undef"
  vivify_754:
    find_lex $P570, "$name"
    unless_null $P570, vivify_755
    new $P570, "Undef"
  vivify_755:
    set $S571, $P570
    assign $P569, $S571
.annotate 'line', 249
    find_lex $P572, "self"
    find_lex $P573, "$dummy"
    unless_null $P573, vivify_756
    new $P573, "Undef"
  vivify_756:
    $P572."add_code"($P573)
.annotate 'line', 250
    find_lex $P574, "$dummy"
    unless_null $P574, vivify_757
    new $P574, "Undef"
  vivify_757:
    find_lex $P575, "$method_past"
    unless_null $P575, vivify_758
    $P575 = root_new ['parrot';'Hash']
    store_lex "$method_past", $P575
  vivify_758:
    set $P575["compile_time_dummy"], $P574
.annotate 'line', 226
    goto if_531_end
  if_531:
.annotate 'line', 224
    find_lex $P535, "$method_past"
    unless_null $P535, vivify_759
    $P535 = root_new ['parrot';'Hash']
  vivify_759:
    set $P536, $P535["compile_time_dummy"]
    unless_null $P536, vivify_760
    new $P536, "Undef"
  vivify_760:
    store_lex "$dummy", $P536
  if_531_end:
.annotate 'line', 254
    find_lex $P576, "$dummy"
    unless_null $P576, vivify_761
    new $P576, "Undef"
  vivify_761:
    find_lex $P577, "$method_past"
    unless_null $P577, vivify_762
    new $P577, "Undef"
  vivify_762:
    setprop $P576, "PAST", $P577
.annotate 'line', 257
    find_lex $P578, "$obj"
    unless_null $P578, vivify_763
    new $P578, "Undef"
  vivify_763:
    get_how $P579, $P578
    find_lex $P580, "$obj"
    unless_null $P580, vivify_764
    new $P580, "Undef"
  vivify_764:
    find_lex $P581, "$name"
    unless_null $P581, vivify_765
    new $P581, "Undef"
  vivify_765:
    find_lex $P582, "$dummy"
    unless_null $P582, vivify_766
    new $P582, "Undef"
  vivify_766:
    find_lex $P583, "$meta_method_name"
    unless_null $P583, vivify_767
    new $P583, "Undef"
  vivify_767:
    set $S584, $P583
    $P579.$S584($P580, $P581, $P582)
.annotate 'line', 262
    find_lex $P585, "$fixups"
    unless_null $P585, vivify_768
    new $P585, "Undef"
  vivify_768:
    get_hll_global $P586, "GLOBAL"
    nqp_get_package_through_who $P587, $P586, "PAST"
    get_who $P588, $P587
    set $P589, $P588["Op"]
.annotate 'line', 264
    find_lex $P590, "self"
    find_lex $P591, "$dummy"
    unless_null $P591, vivify_769
    new $P591, "Undef"
  vivify_769:
    $P592 = $P590."get_slot_past_for_object"($P591)
.annotate 'line', 265
    get_hll_global $P593, "GLOBAL"
    nqp_get_package_through_who $P594, $P593, "PAST"
    get_who $P595, $P594
    set $P596, $P595["Val"]
    find_lex $P597, "$method_past"
    unless_null $P597, vivify_770
    new $P597, "Undef"
  vivify_770:
    $P598 = $P596."new"($P597 :named("value"))
    $P599 = $P589."new"($P592, $P598, "assign vPP" :named("pirop"))
.annotate 'line', 262
    $P585."push"($P599)
.annotate 'line', 267
    find_lex $P600, "self"
    find_lex $P601, "$obj"
    unless_null $P601, vivify_771
    new $P601, "Undef"
  vivify_771:
    $P602 = $P600."get_slot_past_for_object"($P601)
    store_lex "$slot_past", $P602
.annotate 'line', 268
    find_lex $P603, "self"
.annotate 'line', 269
    get_hll_global $P604, "GLOBAL"
    nqp_get_package_through_who $P605, $P604, "PAST"
    get_who $P606, $P605
    set $P607, $P606["Op"]
    find_lex $P608, "$meta_method_name"
    unless_null $P608, vivify_772
    new $P608, "Undef"
  vivify_772:
.annotate 'line', 271
    get_hll_global $P609, "GLOBAL"
    nqp_get_package_through_who $P610, $P609, "PAST"
    get_who $P611, $P610
    set $P612, $P611["Op"]
    find_lex $P613, "$slot_past"
    unless_null $P613, vivify_773
    new $P613, "Undef"
  vivify_773:
    $P614 = $P612."new"($P613, "get_how PP" :named("pirop"))
    find_lex $P615, "$slot_past"
    unless_null $P615, vivify_774
    new $P615, "Undef"
  vivify_774:
    find_lex $P616, "$name"
    unless_null $P616, vivify_775
    new $P616, "Undef"
  vivify_775:
.annotate 'line', 274
    get_hll_global $P617, "GLOBAL"
    nqp_get_package_through_who $P618, $P617, "PAST"
    get_who $P619, $P618
    set $P620, $P619["Val"]
    find_lex $P621, "$method_past"
    unless_null $P621, vivify_776
    new $P621, "Undef"
  vivify_776:
    $P622 = $P620."new"($P621 :named("value"))
    $P623 = $P607."new"($P614, $P615, $P616, $P622, "callmethod" :named("pasttype"), $P608 :named("name"))
.annotate 'line', 269
    find_lex $P624, "$fixups"
    unless_null $P624, vivify_777
    new $P624, "Undef"
  vivify_777:
    $P625 = $P603."add_event"($P623 :named("deserialize_past"), $P624 :named("fixup_past"))
.annotate 'line', 209
    .return ($P625)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.sub "_block509"  :anon :subid("27_1307835824.98345") :outer("26_1307835824.98345")
    .param pmc param_511 :slurpy
    .param pmc param_512 :slurpy :named
.annotate 'line', 215
    .lex "@args", param_511
    .lex "%named", param_512
.annotate 'line', 216
    new $P513, "Undef"
    .lex "$compiled", $P513
    get_hll_global $P514, "GLOBAL"
    nqp_get_package_through_who $P515, $P514, "PAST"
    get_who $P516, $P515
    set $P517, $P516["Compiler"]
    find_lex $P518, "$method_past"
    unless_null $P518, vivify_738
    new $P518, "Undef"
  vivify_738:
    $P519 = $P517."compile"($P518)
    store_lex "$compiled", $P519
.annotate 'line', 217
    find_lex $P520, "$compiled"
    unless_null $P520, vivify_739
    new $P520, "Undef"
  vivify_739:
    find_lex $P521, "@args"
    unless_null $P521, vivify_740
    $P521 = root_new ['parrot';'ResizablePMCArray']
  vivify_740:
    find_lex $P522, "%named"
    unless_null $P522, vivify_741
    $P522 = root_new ['parrot';'Hash']
  vivify_741:
    $P523 = $P520($P521 :flat, $P522 :flat)
.annotate 'line', 215
    .return ($P523)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.sub "_block543"  :anon :subid("28_1307835824.98345") :outer("26_1307835824.98345")
    .param pmc param_545
    .param pmc param_546
.annotate 'line', 236
    .lex "$orig", param_545
    .lex "$clone", param_546
.annotate 'line', 237
    find_lex $P547, "self"
    find_lex $P548, "$clone"
    unless_null $P548, vivify_750
    new $P548, "Undef"
  vivify_750:
    $P547."add_code"($P548)
.annotate 'line', 238
    find_lex $P549, "$fixups"
    unless_null $P549, vivify_751
    new $P549, "Undef"
  vivify_751:
    get_hll_global $P550, "GLOBAL"
    nqp_get_package_through_who $P551, $P550, "PAST"
    get_who $P552, $P551
    set $P553, $P552["Op"]
.annotate 'line', 240
    find_lex $P554, "self"
    find_lex $P555, "$clone"
    unless_null $P555, vivify_752
    new $P555, "Undef"
  vivify_752:
    $P556 = $P554."get_slot_past_for_object"($P555)
.annotate 'line', 241
    get_hll_global $P557, "GLOBAL"
    nqp_get_package_through_who $P558, $P557, "PAST"
    get_who $P559, $P558
    set $P560, $P559["Val"]
    find_lex $P561, "$orig"
    unless_null $P561, vivify_753
    new $P561, "Undef"
  vivify_753:
    getprop $P562, "PAST", $P561
    $P563 = $P560."new"($P562 :named("value"))
    $P564 = $P553."new"($P556, $P563, "assign vPP" :named("pirop"))
.annotate 'line', 238
    $P565 = $P549."push"($P564)
.annotate 'line', 236
    .return ($P565)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.sub "set_routine_signature" :anon :subid("29_1307835824.98345") :outer("13_1307835824.98345")
    .param pmc param_627
    .param pmc param_628
    .param pmc param_629
    .param pmc param_630
.annotate 'line', 280
    .lex "self", param_627
    .lex "$routine", param_628
    .lex "$types", param_629
    .lex "$definednesses", param_630
.annotate 'line', 283
    new $P631, "Undef"
    .lex "$fixup", $P631
.annotate 'line', 290
    new $P632, "Undef"
    .lex "$des", $P632
.annotate 'line', 283
    get_hll_global $P633, "GLOBAL"
    nqp_get_package_through_who $P634, $P633, "PAST"
    get_who $P635, $P634
    set $P636, $P635["Op"]
    find_lex $P637, "$types"
    unless_null $P637, vivify_778
    new $P637, "Undef"
  vivify_778:
    find_lex $P638, "$definednesses"
    unless_null $P638, vivify_779
    new $P638, "Undef"
  vivify_779:
    $P639 = $P636."new"($P637, $P638, "set_sub_multisig vPPP" :named("pirop"))
    store_lex "$fixup", $P639
.annotate 'line', 284
    find_lex $P641, "$routine"
    unless_null $P641, vivify_780
    $P641 = root_new ['parrot';'Hash']
  vivify_780:
    set $P642, $P641["compile_time_dummy"]
    unless_null $P642, vivify_781
    new $P642, "Undef"
  vivify_781:
    defined $I643, $P642
    if $I643, if_640
.annotate 'line', 288
    find_lex $P649, "$fixup"
    unless_null $P649, vivify_782
    new $P649, "Undef"
  vivify_782:
    get_hll_global $P650, "GLOBAL"
    nqp_get_package_through_who $P651, $P650, "PAST"
    get_who $P652, $P651
    set $P653, $P652["Val"]
    find_lex $P654, "$routine"
    unless_null $P654, vivify_783
    new $P654, "Undef"
  vivify_783:
    $P655 = $P653."new"($P654 :named("value"))
    $P649."unshift"($P655)
.annotate 'line', 287
    goto if_640_end
  if_640:
.annotate 'line', 285
    find_lex $P644, "$fixup"
    unless_null $P644, vivify_784
    new $P644, "Undef"
  vivify_784:
    find_lex $P645, "self"
    find_lex $P646, "$routine"
    unless_null $P646, vivify_785
    $P646 = root_new ['parrot';'Hash']
  vivify_785:
    set $P647, $P646["compile_time_dummy"]
    unless_null $P647, vivify_786
    new $P647, "Undef"
  vivify_786:
    $P648 = $P645."get_slot_past_for_object"($P647)
    $P644."unshift"($P648)
  if_640_end:
.annotate 'line', 290
    get_hll_global $P656, "GLOBAL"
    nqp_get_package_through_who $P657, $P656, "PAST"
    get_who $P658, $P657
    set $P659, $P658["Op"]
.annotate 'line', 291
    get_hll_global $P660, "GLOBAL"
    nqp_get_package_through_who $P661, $P660, "PAST"
    get_who $P662, $P661
    set $P663, $P662["Val"]
    find_lex $P664, "$routine"
    unless_null $P664, vivify_787
    new $P664, "Undef"
  vivify_787:
    $P665 = $P663."new"($P664 :named("value"))
    find_lex $P666, "$types"
    unless_null $P666, vivify_788
    new $P666, "Undef"
  vivify_788:
    find_lex $P667, "$definednesses"
    unless_null $P667, vivify_789
    new $P667, "Undef"
  vivify_789:
    $P668 = $P659."new"($P665, $P666, $P667, "set_sub_multisig vPPP" :named("pirop"))
.annotate 'line', 290
    store_lex "$des", $P668
.annotate 'line', 293
    find_lex $P669, "self"
    find_lex $P670, "$des"
    unless_null $P670, vivify_790
    new $P670, "Undef"
  vivify_790:
    find_lex $P671, "$fixup"
    unless_null $P671, vivify_791
    new $P671, "Undef"
  vivify_791:
    $P672 = $P669."add_event"($P670 :named("deserialize_past"), $P671 :named("fixup_past"))
.annotate 'line', 280
    .return ($P672)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.sub "pkg_set_body_block" :anon :subid("30_1307835824.98345") :outer("13_1307835824.98345")
    .param pmc param_674
    .param pmc param_675
    .param pmc param_676
.annotate 'line', 297
    .const 'Sub' $P687 = "31_1307835824.98345" 
    capture_lex $P687
    .lex "self", param_674
    .lex "$obj", param_675
    .lex "$body_past", param_676
.annotate 'line', 308
    new $P677, "Undef"
    .lex "$fixups", $P677
.annotate 'line', 309
    new $P678, "Undef"
    .lex "$dummy", $P678
.annotate 'line', 344
    new $P679, "Undef"
    .lex "$slot_past", $P679
.annotate 'line', 345
    new $P680, "Undef"
    .lex "$des", $P680
.annotate 'line', 308
    get_hll_global $P681, "GLOBAL"
    nqp_get_package_through_who $P682, $P681, "PAST"
    get_who $P683, $P682
    set $P684, $P683["Stmts"]
    $P685 = $P684."new"()
    store_lex "$fixups", $P685
.annotate 'line', 309
    .const 'Sub' $P687 = "31_1307835824.98345" 
    newclosure $P758, $P687
    store_lex "$dummy", $P758
.annotate 'line', 341
    find_lex $P759, "$obj"
    unless_null $P759, vivify_809
    new $P759, "Undef"
  vivify_809:
    get_how $P760, $P759
    find_lex $P761, "$obj"
    unless_null $P761, vivify_810
    new $P761, "Undef"
  vivify_810:
    find_lex $P762, "$dummy"
    unless_null $P762, vivify_811
    new $P762, "Undef"
  vivify_811:
    $P760."set_body_block"($P761, $P762)
.annotate 'line', 344
    find_lex $P763, "self"
    find_lex $P764, "$obj"
    unless_null $P764, vivify_812
    new $P764, "Undef"
  vivify_812:
    $P765 = $P763."get_slot_past_for_object"($P764)
    store_lex "$slot_past", $P765
.annotate 'line', 345
    get_hll_global $P766, "GLOBAL"
    nqp_get_package_through_who $P767, $P766, "PAST"
    get_who $P768, $P767
    set $P769, $P768["Op"]
.annotate 'line', 347
    get_hll_global $P770, "GLOBAL"
    nqp_get_package_through_who $P771, $P770, "PAST"
    get_who $P772, $P771
    set $P773, $P772["Op"]
    find_lex $P774, "$slot_past"
    unless_null $P774, vivify_813
    new $P774, "Undef"
  vivify_813:
    $P775 = $P773."new"($P774, "get_how PP" :named("pirop"))
    find_lex $P776, "$slot_past"
    unless_null $P776, vivify_814
    new $P776, "Undef"
  vivify_814:
.annotate 'line', 349
    get_hll_global $P777, "GLOBAL"
    nqp_get_package_through_who $P778, $P777, "PAST"
    get_who $P779, $P778
    set $P780, $P779["Val"]
    find_lex $P781, "$body_past"
    unless_null $P781, vivify_815
    new $P781, "Undef"
  vivify_815:
    $P782 = $P780."new"($P781 :named("value"))
    $P783 = $P769."new"($P775, $P776, $P782, "callmethod" :named("pasttype"), "set_body_block" :named("name"))
.annotate 'line', 345
    store_lex "$des", $P783
.annotate 'line', 352
    find_lex $P784, "self"
    find_lex $P785, "$des"
    unless_null $P785, vivify_816
    new $P785, "Undef"
  vivify_816:
    find_lex $P786, "$fixups"
    unless_null $P786, vivify_817
    new $P786, "Undef"
  vivify_817:
    $P787 = $P784."add_event"($P785 :named("deserialize_past"), $P786 :named("fixup_past"))
.annotate 'line', 297
    .return ($P787)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.include "except_types.pasm"
.sub "_block686"  :anon :subid("31_1307835824.98345") :outer("30_1307835824.98345")
    .param pmc param_688 :slurpy
.annotate 'line', 309
    .const 'Sub' $P726 = "33_1307835824.98345" 
    capture_lex $P726
    .const 'Sub' $P706 = "32_1307835824.98345" 
    capture_lex $P706
    .lex "@type_args", param_688
.annotate 'line', 311
    new $P689, "Undef"
    .lex "$invoke_body", $P689
    get_hll_global $P690, "GLOBAL"
    nqp_get_package_through_who $P691, $P690, "PAST"
    get_who $P692, $P691
    set $P693, $P692["Op"]
.annotate 'line', 313
    get_hll_global $P694, "GLOBAL"
    nqp_get_package_through_who $P695, $P694, "PAST"
    get_who $P696, $P695
    set $P697, $P696["Val"]
    find_lex $P698, "$body_past"
    unless_null $P698, vivify_792
    new $P698, "Undef"
  vivify_792:
    $P699 = $P697."new"($P698 :named("value"))
    $P700 = $P693."new"($P699, "call" :named("pasttype"))
.annotate 'line', 311
    store_lex "$invoke_body", $P700
.annotate 'line', 315
    find_lex $P702, "@type_args"
    unless_null $P702, vivify_793
    $P702 = root_new ['parrot';'ResizablePMCArray']
  vivify_793:
    defined $I703, $P702
    unless $I703, for_undef_794
    iter $P701, $P702
    new $P714, 'ExceptionHandler'
    set_label $P714, loop713_handler
    $P714."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P714
  loop713_test:
    unless $P701, loop713_done
    shift $P704, $P701
  loop713_redo:
    .const 'Sub' $P706 = "32_1307835824.98345" 
    capture_lex $P706
    $P706($P704)
  loop713_next:
    goto loop713_test
  loop713_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P715, exception, 'type'
    eq $P715, .CONTROL_LOOP_NEXT, loop713_next
    eq $P715, .CONTROL_LOOP_REDO, loop713_redo
  loop713_done:
    pop_eh 
  for_undef_794:
.annotate 'line', 318
    find_lex $P716, "$fixups"
    unless_null $P716, vivify_797
    new $P716, "Undef"
  vivify_797:
    find_lex $P717, "$invoke_body"
    unless_null $P717, vivify_798
    new $P717, "Undef"
  vivify_798:
    $P716."push"($P717)
.annotate 'line', 321
    find_lex $P719, "$obj"
    unless_null $P719, vivify_799
    new $P719, "Undef"
  vivify_799:
    get_how $P720, $P719
    find_lex $P721, "$obj"
    unless_null $P721, vivify_800
    new $P721, "Undef"
  vivify_800:
    $P722 = $P720."methods"($P721, 1 :named("local"))
    defined $I723, $P722
    unless $I723, for_undef_801
    iter $P718, $P722
    new $P756, 'ExceptionHandler'
    set_label $P756, loop755_handler
    $P756."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P756
  loop755_test:
    unless $P718, loop755_done
    shift $P724, $P718
  loop755_redo:
    .const 'Sub' $P726 = "33_1307835824.98345" 
    capture_lex $P726
    $P726($P724)
  loop755_next:
    goto loop755_test
  loop755_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P757, exception, 'type'
    eq $P757, .CONTROL_LOOP_NEXT, loop755_next
    eq $P757, .CONTROL_LOOP_REDO, loop755_redo
  loop755_done:
    pop_eh 
  for_undef_801:
.annotate 'line', 309
    .return ($P718)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.sub "_block705"  :anon :subid("32_1307835824.98345") :outer("31_1307835824.98345")
    .param pmc param_707
.annotate 'line', 315
    .lex "$_", param_707
.annotate 'line', 316
    find_lex $P708, "$invoke_body"
    unless_null $P708, vivify_795
    new $P708, "Undef"
  vivify_795:
    find_lex $P709, "self"
    find_lex $P710, "$_"
    unless_null $P710, vivify_796
    new $P710, "Undef"
  vivify_796:
    $P711 = $P709."get_slot_past_for_object"($P710)
    $P712 = $P708."push"($P711)
.annotate 'line', 315
    .return ($P712)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.sub "_block725"  :anon :subid("33_1307835824.98345") :outer("31_1307835824.98345")
    .param pmc param_727
.annotate 'line', 321
    .const 'Sub' $P730 = "34_1307835824.98345" 
    capture_lex $P730
    .lex "$_", param_727
.annotate 'line', 322
    find_lex $P728, "$_"
    unless_null $P728, vivify_802
    new $P728, "Undef"
  vivify_802:
    .const 'Sub' $P730 = "34_1307835824.98345" 
    newclosure $P754, $P730
    setprop $P728, "REIFY_CALLBACK", $P754
.annotate 'line', 321
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.sub "_block729"  :anon :subid("34_1307835824.98345") :outer("33_1307835824.98345")
    .param pmc param_731
.annotate 'line', 322
    .lex "$meth", param_731
.annotate 'line', 324
    new $P732, "Undef"
    .lex "$clone", $P732
    find_lex $P733, "$meth"
    unless_null $P733, vivify_803
    new $P733, "Undef"
  vivify_803:
    clone $P734, $P733
    store_lex "$clone", $P734
.annotate 'line', 325
    find_lex $P735, "self"
    find_lex $P736, "$clone"
    unless_null $P736, vivify_804
    new $P736, "Undef"
  vivify_804:
    $P735."add_code"($P736)
.annotate 'line', 328
    find_lex $P737, "$fixups"
    unless_null $P737, vivify_805
    new $P737, "Undef"
  vivify_805:
    get_hll_global $P738, "GLOBAL"
    nqp_get_package_through_who $P739, $P738, "PAST"
    get_who $P740, $P739
    set $P741, $P740["Op"]
.annotate 'line', 330
    find_lex $P742, "self"
    find_lex $P743, "$clone"
    unless_null $P743, vivify_806
    new $P743, "Undef"
  vivify_806:
    $P744 = $P742."get_slot_past_for_object"($P743)
.annotate 'line', 331
    get_hll_global $P745, "GLOBAL"
    nqp_get_package_through_who $P746, $P745, "PAST"
    get_who $P747, $P746
    set $P748, $P747["Val"]
    find_lex $P749, "$meth"
    unless_null $P749, vivify_807
    new $P749, "Undef"
  vivify_807:
    getprop $P750, "PAST", $P749
    $P751 = $P748."new"($P750 :named("value"))
    $P752 = $P741."new"($P744, $P751, "assign vPP" :named("pirop"))
.annotate 'line', 328
    $P737."push"($P752)
    find_lex $P753, "$clone"
    unless_null $P753, vivify_808
    new $P753, "Undef"
  vivify_808:
.annotate 'line', 322
    .return ($P753)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.sub "pkg_add_parent_or_role" :anon :subid("35_1307835824.98345") :outer("13_1307835824.98345")
    .param pmc param_789
    .param pmc param_790
    .param pmc param_791
    .param pmc param_792
.annotate 'line', 357
    .lex "self", param_789
    .lex "$obj", param_790
    .lex "$meta_method_name", param_791
    .lex "$to_add", param_792
.annotate 'line', 362
    new $P793, "Undef"
    .lex "$slot_past", $P793
.annotate 'line', 359
    find_lex $P794, "$obj"
    unless_null $P794, vivify_818
    new $P794, "Undef"
  vivify_818:
    get_how $P795, $P794
    find_lex $P796, "$obj"
    unless_null $P796, vivify_819
    new $P796, "Undef"
  vivify_819:
    find_lex $P797, "$to_add"
    unless_null $P797, vivify_820
    new $P797, "Undef"
  vivify_820:
    find_lex $P798, "$meta_method_name"
    unless_null $P798, vivify_821
    new $P798, "Undef"
  vivify_821:
    set $S799, $P798
    $P795.$S799($P796, $P797)
.annotate 'line', 362
    find_lex $P800, "self"
    find_lex $P801, "$obj"
    unless_null $P801, vivify_822
    new $P801, "Undef"
  vivify_822:
    $P802 = $P800."get_slot_past_for_object"($P801)
    store_lex "$slot_past", $P802
.annotate 'line', 363
    find_lex $P803, "self"
    get_hll_global $P804, "GLOBAL"
    nqp_get_package_through_who $P805, $P804, "PAST"
    get_who $P806, $P805
    set $P807, $P806["Op"]
    find_lex $P808, "$meta_method_name"
    unless_null $P808, vivify_823
    new $P808, "Undef"
  vivify_823:
.annotate 'line', 365
    get_hll_global $P809, "GLOBAL"
    nqp_get_package_through_who $P810, $P809, "PAST"
    get_who $P811, $P810
    set $P812, $P811["Op"]
    find_lex $P813, "$slot_past"
    unless_null $P813, vivify_824
    new $P813, "Undef"
  vivify_824:
    $P814 = $P812."new"($P813, "get_how PP" :named("pirop"))
    find_lex $P815, "$slot_past"
    unless_null $P815, vivify_825
    new $P815, "Undef"
  vivify_825:
.annotate 'line', 367
    find_lex $P816, "self"
    find_lex $P817, "$to_add"
    unless_null $P817, vivify_826
    new $P817, "Undef"
  vivify_826:
    $P818 = $P816."get_object_sc_ref_past"($P817)
    $P819 = $P807."new"($P814, $P815, $P818, "callmethod" :named("pasttype"), $P808 :named("name"))
.annotate 'line', 363
    $P820 = $P803."add_event"($P819 :named("deserialize_past"))
.annotate 'line', 357
    .return ($P820)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.sub "pkg_add_parrot_vtable_handler_mapping" :anon :subid("36_1307835824.98345") :outer("13_1307835824.98345")
    .param pmc param_822
    .param pmc param_823
    .param pmc param_824
    .param pmc param_825
.annotate 'line', 371
    .lex "self", param_822
    .lex "$obj", param_823
    .lex "$name", param_824
    .lex "$att_name", param_825
.annotate 'line', 376
    new $P826, "Undef"
    .lex "$slot_past", $P826
.annotate 'line', 373
    find_lex $P827, "$obj"
    unless_null $P827, vivify_827
    new $P827, "Undef"
  vivify_827:
    get_how $P828, $P827
    find_lex $P829, "$obj"
    unless_null $P829, vivify_828
    new $P829, "Undef"
  vivify_828:
    find_lex $P830, "$name"
    unless_null $P830, vivify_829
    new $P830, "Undef"
  vivify_829:
    find_lex $P831, "$att_name"
    unless_null $P831, vivify_830
    new $P831, "Undef"
  vivify_830:
    $P828."add_parrot_vtable_handler_mapping"($P829, $P830, $P831)
.annotate 'line', 376
    find_lex $P832, "self"
    find_lex $P833, "$obj"
    unless_null $P833, vivify_831
    new $P833, "Undef"
  vivify_831:
    $P834 = $P832."get_slot_past_for_object"($P833)
    store_lex "$slot_past", $P834
.annotate 'line', 377
    find_lex $P835, "self"
    get_hll_global $P836, "GLOBAL"
    nqp_get_package_through_who $P837, $P836, "PAST"
    get_who $P838, $P837
    set $P839, $P838["Op"]
.annotate 'line', 379
    get_hll_global $P840, "GLOBAL"
    nqp_get_package_through_who $P841, $P840, "PAST"
    get_who $P842, $P841
    set $P843, $P842["Op"]
    find_lex $P844, "$slot_past"
    unless_null $P844, vivify_832
    new $P844, "Undef"
  vivify_832:
    $P845 = $P843."new"($P844, "get_how PP" :named("pirop"))
    find_lex $P846, "$slot_past"
    unless_null $P846, vivify_833
    new $P846, "Undef"
  vivify_833:
    find_lex $P847, "$name"
    unless_null $P847, vivify_834
    new $P847, "Undef"
  vivify_834:
    find_lex $P848, "$att_name"
    unless_null $P848, vivify_835
    new $P848, "Undef"
  vivify_835:
    $P849 = $P839."new"($P845, $P846, $P847, $P848, "callmethod" :named("pasttype"), "add_parrot_vtable_handler_mapping" :named("name"))
.annotate 'line', 377
    $P850 = $P835."add_event"($P849 :named("deserialize_past"))
.annotate 'line', 371
    .return ($P850)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.sub "pkg_compose" :anon :subid("37_1307835824.98345") :outer("13_1307835824.98345")
    .param pmc param_852
    .param pmc param_853
.annotate 'line', 386
    .lex "self", param_852
    .lex "$obj", param_853
.annotate 'line', 391
    new $P854, "Undef"
    .lex "$slot_past", $P854
.annotate 'line', 388
    find_lex $P855, "$obj"
    unless_null $P855, vivify_836
    new $P855, "Undef"
  vivify_836:
    get_how $P856, $P855
    find_lex $P857, "$obj"
    unless_null $P857, vivify_837
    new $P857, "Undef"
  vivify_837:
    $P856."compose"($P857)
.annotate 'line', 391
    find_lex $P858, "self"
    find_lex $P859, "$obj"
    unless_null $P859, vivify_838
    new $P859, "Undef"
  vivify_838:
    $P860 = $P858."get_slot_past_for_object"($P859)
    store_lex "$slot_past", $P860
.annotate 'line', 392
    find_lex $P861, "self"
    get_hll_global $P862, "GLOBAL"
    nqp_get_package_through_who $P863, $P862, "PAST"
    get_who $P864, $P863
    set $P865, $P864["Op"]
.annotate 'line', 394
    get_hll_global $P866, "GLOBAL"
    nqp_get_package_through_who $P867, $P866, "PAST"
    get_who $P868, $P867
    set $P869, $P868["Op"]
    find_lex $P870, "$slot_past"
    unless_null $P870, vivify_839
    new $P870, "Undef"
  vivify_839:
    $P871 = $P869."new"($P870, "get_how PP" :named("pirop"))
    find_lex $P872, "$slot_past"
    unless_null $P872, vivify_840
    new $P872, "Undef"
  vivify_840:
    $P873 = $P865."new"($P871, $P872, "callmethod" :named("pasttype"), "compose" :named("name"))
.annotate 'line', 392
    $P874 = $P861."add_event"($P873 :named("deserialize_past"))
.annotate 'line', 386
    .return ($P874)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.include "except_types.pasm"
.sub "to_past" :anon :subid("38_1307835824.98345") :outer("13_1307835824.98345")
    .param pmc param_876
.annotate 'line', 401
    .const 'Sub' $P895 = "39_1307835824.98345" 
    capture_lex $P895
    .lex "self", param_876
.annotate 'line', 402
    new $P877, "Undef"
    .lex "$des", $P877
.annotate 'line', 403
    new $P878, "Undef"
    .lex "$fix", $P878
.annotate 'line', 402
    get_hll_global $P879, "GLOBAL"
    nqp_get_package_through_who $P880, $P879, "PAST"
    get_who $P881, $P880
    set $P882, $P881["Stmts"]
    $P883 = $P882."new"()
    store_lex "$des", $P883
.annotate 'line', 403
    get_hll_global $P884, "GLOBAL"
    nqp_get_package_through_who $P885, $P884, "PAST"
    get_who $P886, $P885
    set $P887, $P886["Stmts"]
    $P888 = $P887."new"()
    store_lex "$fix", $P888
.annotate 'line', 404
    find_lex $P890, "self"
    $P891 = $P890."event_stream"()
    defined $I892, $P891
    unless $I892, for_undef_841
    iter $P889, $P891
    new $P914, 'ExceptionHandler'
    set_label $P914, loop913_handler
    $P914."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P914
  loop913_test:
    unless $P889, loop913_done
    shift $P893, $P889
  loop913_redo:
    .const 'Sub' $P895 = "39_1307835824.98345" 
    capture_lex $P895
    $P895($P893)
  loop913_next:
    goto loop913_test
  loop913_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P915, exception, 'type'
    eq $P915, .CONTROL_LOOP_NEXT, loop913_next
    eq $P915, .CONTROL_LOOP_REDO, loop913_redo
  loop913_done:
    pop_eh 
  for_undef_841:
.annotate 'line', 408
    find_dynamic_lex $P916, "$/"
    get_hll_global $P917, "GLOBAL"
    nqp_get_package_through_who $P918, $P917, "PAST"
    get_who $P919, $P918
    set $P920, $P919["Op"]
.annotate 'line', 410
    get_hll_global $P921, "GLOBAL"
    nqp_get_package_through_who $P922, $P921, "PAST"
    get_who $P923, $P922
    set $P924, $P923["Op"]
.annotate 'line', 412
    get_hll_global $P925, "GLOBAL"
    nqp_get_package_through_who $P926, $P925, "PAST"
    get_who $P927, $P926
    set $P928, $P927["Op"]
    find_lex $P929, "self"
    $P930 = $P929."handle"()
    $P931 = $P928."new"($P930, "nqp_get_sc Ps" :named("pirop"))
    $P932 = $P924."new"($P931, "isnull IP" :named("pirop"))
.annotate 'line', 414
    get_hll_global $P933, "GLOBAL"
    nqp_get_package_through_who $P934, $P933, "PAST"
    get_who $P935, $P934
    set $P936, $P935["Stmts"]
.annotate 'line', 415
    get_hll_global $P937, "GLOBAL"
    nqp_get_package_through_who $P938, $P937, "PAST"
    get_who $P939, $P938
    set $P940, $P939["Op"]
    $P941 = $P940."new"("nqp_dynop_setup v" :named("pirop"))
.annotate 'line', 416
    get_hll_global $P942, "GLOBAL"
    nqp_get_package_through_who $P943, $P942, "PAST"
    get_who $P944, $P943
    set $P945, $P944["Op"]
.annotate 'line', 418
    get_hll_global $P946, "GLOBAL"
    nqp_get_package_through_who $P947, $P946, "PAST"
    get_who $P948, $P947
    set $P949, $P948["Op"]
    $P950 = $P949."new"("getinterp P" :named("pirop"))
.annotate 'line', 419
    get_hll_global $P951, "GLOBAL"
    nqp_get_package_through_who $P952, $P951, "PAST"
    get_who $P953, $P952
    set $P954, $P953["Op"]
    $P955 = $P954."new"("LexPad", "get_class Ps" :named("pirop"))
.annotate 'line', 420
    get_hll_global $P956, "GLOBAL"
    nqp_get_package_through_who $P957, $P956, "PAST"
    get_who $P958, $P957
    set $P959, $P958["Op"]
    $P960 = $P959."new"("NQPLexPad", "get_class Ps" :named("pirop"))
    $P961 = $P945."new"($P950, $P955, $P960, "callmethod" :named("pasttype"), "hll_map" :named("name"))
.annotate 'line', 422
    get_hll_global $P962, "GLOBAL"
    nqp_get_package_through_who $P963, $P962, "PAST"
    get_who $P964, $P963
    set $P965, $P964["Op"]
.annotate 'line', 424
    get_hll_global $P966, "GLOBAL"
    nqp_get_package_through_who $P967, $P966, "PAST"
    get_who $P968, $P967
    set $P969, $P968["Var"]
    $P970 = $P969."new"("cur_sc" :named("name"), "register" :named("scope"), 1 :named("isdecl"))
.annotate 'line', 425
    get_hll_global $P971, "GLOBAL"
    nqp_get_package_through_who $P972, $P971, "PAST"
    get_who $P973, $P972
    set $P974, $P973["Op"]
    find_lex $P975, "self"
    $P976 = $P975."handle"()
    $P977 = $P974."new"($P976, "nqp_create_sc Ps" :named("pirop"))
    $P978 = $P965."new"($P970, $P977, "bind_6model" :named("pasttype"))
.annotate 'line', 422
    find_lex $P979, "$des"
    unless_null $P979, vivify_848
    new $P979, "Undef"
  vivify_848:
    $P980 = $P936."new"($P941, $P961, $P978, $P979)
.annotate 'line', 414
    find_lex $P981, "$fix"
    unless_null $P981, vivify_849
    new $P981, "Undef"
  vivify_849:
    $P982 = $P920."new"($P932, $P980, $P981, "if" :named("pasttype"))
.annotate 'line', 408
    $P983 = $P916."!make"($P982)
.annotate 'line', 401
    .return ($P983)
.end


.HLL "nqp"

.namespace ["NQP";"SymbolTable"]
.sub "_block894"  :anon :subid("39_1307835824.98345") :outer("38_1307835824.98345")
    .param pmc param_896
.annotate 'line', 404
    .lex "$_", param_896
.annotate 'line', 405
    find_lex $P898, "$_"
    unless_null $P898, vivify_842
    new $P898, "Undef"
  vivify_842:
    $P899 = $P898."deserialize_past"()
    defined $I900, $P899
    unless $I900, if_897_end
    find_lex $P901, "$des"
    unless_null $P901, vivify_843
    new $P901, "Undef"
  vivify_843:
    find_lex $P902, "$_"
    unless_null $P902, vivify_844
    new $P902, "Undef"
  vivify_844:
    $P903 = $P902."deserialize_past"()
    $P901."push"($P903)
  if_897_end:
.annotate 'line', 406
    find_lex $P906, "$_"
    unless_null $P906, vivify_845
    new $P906, "Undef"
  vivify_845:
    $P907 = $P906."fixup_past"()
    defined $I908, $P907
    if $I908, if_905
    new $P904, 'Integer'
    set $P904, $I908
    goto if_905_end
  if_905:
    find_lex $P909, "$fix"
    unless_null $P909, vivify_846
    new $P909, "Undef"
  vivify_846:
    find_lex $P910, "$_"
    unless_null $P910, vivify_847
    new $P910, "Undef"
  vivify_847:
    $P911 = $P910."fixup_past"()
    $P912 = $P909."push"($P911)
    set $P904, $P912
  if_905_end:
.annotate 'line', 404
    .return ($P904)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block985"  :subid("40_1307835824.98345") :outer("10_1307835824.98345")
.annotate 'line', 435
    .const 'Sub' $P2857 = "414_1307835824.98345" 
    capture_lex $P2857
    .const 'Sub' $P2855 = "413_1307835824.98345" 
    capture_lex $P2855
    .const 'Sub' $P2851 = "412_1307835824.98345" 
    capture_lex $P2851
    .const 'Sub' $P2849 = "411_1307835824.98345" 
    capture_lex $P2849
    .const 'Sub' $P2845 = "410_1307835824.98345" 
    capture_lex $P2845
    .const 'Sub' $P2843 = "409_1307835824.98345" 
    capture_lex $P2843
    .const 'Sub' $P2839 = "408_1307835824.98345" 
    capture_lex $P2839
    .const 'Sub' $P2837 = "407_1307835824.98345" 
    capture_lex $P2837
    .const 'Sub' $P2833 = "406_1307835824.98345" 
    capture_lex $P2833
    .const 'Sub' $P2831 = "405_1307835824.98345" 
    capture_lex $P2831
    .const 'Sub' $P2821 = "403_1307835824.98345" 
    capture_lex $P2821
    .const 'Sub' $P2818 = "402_1307835824.98345" 
    capture_lex $P2818
    .const 'Sub' $P2814 = "401_1307835824.98345" 
    capture_lex $P2814
    .const 'Sub' $P2811 = "400_1307835824.98345" 
    capture_lex $P2811
    .const 'Sub' $P2807 = "399_1307835824.98345" 
    capture_lex $P2807
    .const 'Sub' $P2804 = "398_1307835824.98345" 
    capture_lex $P2804
    .const 'Sub' $P2800 = "397_1307835824.98345" 
    capture_lex $P2800
    .const 'Sub' $P2797 = "396_1307835824.98345" 
    capture_lex $P2797
    .const 'Sub' $P2793 = "395_1307835824.98345" 
    capture_lex $P2793
    .const 'Sub' $P2790 = "394_1307835824.98345" 
    capture_lex $P2790
    .const 'Sub' $P2787 = "393_1307835824.98345" 
    capture_lex $P2787
    .const 'Sub' $P2784 = "392_1307835824.98345" 
    capture_lex $P2784
    .const 'Sub' $P2780 = "391_1307835824.98345" 
    capture_lex $P2780
    .const 'Sub' $P2777 = "390_1307835824.98345" 
    capture_lex $P2777
    .const 'Sub' $P2773 = "389_1307835824.98345" 
    capture_lex $P2773
    .const 'Sub' $P2770 = "388_1307835824.98345" 
    capture_lex $P2770
    .const 'Sub' $P2766 = "387_1307835824.98345" 
    capture_lex $P2766
    .const 'Sub' $P2763 = "386_1307835824.98345" 
    capture_lex $P2763
    .const 'Sub' $P2759 = "385_1307835824.98345" 
    capture_lex $P2759
    .const 'Sub' $P2756 = "384_1307835824.98345" 
    capture_lex $P2756
    .const 'Sub' $P2752 = "383_1307835824.98345" 
    capture_lex $P2752
    .const 'Sub' $P2749 = "382_1307835824.98345" 
    capture_lex $P2749
    .const 'Sub' $P2745 = "381_1307835824.98345" 
    capture_lex $P2745
    .const 'Sub' $P2742 = "380_1307835824.98345" 
    capture_lex $P2742
    .const 'Sub' $P2738 = "379_1307835824.98345" 
    capture_lex $P2738
    .const 'Sub' $P2735 = "378_1307835824.98345" 
    capture_lex $P2735
    .const 'Sub' $P2731 = "377_1307835824.98345" 
    capture_lex $P2731
    .const 'Sub' $P2728 = "376_1307835824.98345" 
    capture_lex $P2728
    .const 'Sub' $P2724 = "375_1307835824.98345" 
    capture_lex $P2724
    .const 'Sub' $P2721 = "374_1307835824.98345" 
    capture_lex $P2721
    .const 'Sub' $P2717 = "373_1307835824.98345" 
    capture_lex $P2717
    .const 'Sub' $P2714 = "372_1307835824.98345" 
    capture_lex $P2714
    .const 'Sub' $P2710 = "371_1307835824.98345" 
    capture_lex $P2710
    .const 'Sub' $P2707 = "370_1307835824.98345" 
    capture_lex $P2707
    .const 'Sub' $P2703 = "369_1307835824.98345" 
    capture_lex $P2703
    .const 'Sub' $P2700 = "368_1307835824.98345" 
    capture_lex $P2700
    .const 'Sub' $P2696 = "367_1307835824.98345" 
    capture_lex $P2696
    .const 'Sub' $P2693 = "366_1307835824.98345" 
    capture_lex $P2693
    .const 'Sub' $P2689 = "365_1307835824.98345" 
    capture_lex $P2689
    .const 'Sub' $P2686 = "364_1307835824.98345" 
    capture_lex $P2686
    .const 'Sub' $P2682 = "363_1307835824.98345" 
    capture_lex $P2682
    .const 'Sub' $P2679 = "362_1307835824.98345" 
    capture_lex $P2679
    .const 'Sub' $P2675 = "361_1307835824.98345" 
    capture_lex $P2675
    .const 'Sub' $P2672 = "360_1307835824.98345" 
    capture_lex $P2672
    .const 'Sub' $P2668 = "359_1307835824.98345" 
    capture_lex $P2668
    .const 'Sub' $P2665 = "358_1307835824.98345" 
    capture_lex $P2665
    .const 'Sub' $P2661 = "357_1307835824.98345" 
    capture_lex $P2661
    .const 'Sub' $P2658 = "356_1307835824.98345" 
    capture_lex $P2658
    .const 'Sub' $P2654 = "355_1307835824.98345" 
    capture_lex $P2654
    .const 'Sub' $P2651 = "354_1307835824.98345" 
    capture_lex $P2651
    .const 'Sub' $P2647 = "353_1307835824.98345" 
    capture_lex $P2647
    .const 'Sub' $P2644 = "352_1307835824.98345" 
    capture_lex $P2644
    .const 'Sub' $P2640 = "351_1307835824.98345" 
    capture_lex $P2640
    .const 'Sub' $P2637 = "350_1307835824.98345" 
    capture_lex $P2637
    .const 'Sub' $P2633 = "349_1307835824.98345" 
    capture_lex $P2633
    .const 'Sub' $P2630 = "348_1307835824.98345" 
    capture_lex $P2630
    .const 'Sub' $P2626 = "347_1307835824.98345" 
    capture_lex $P2626
    .const 'Sub' $P2623 = "346_1307835824.98345" 
    capture_lex $P2623
    .const 'Sub' $P2619 = "345_1307835824.98345" 
    capture_lex $P2619
    .const 'Sub' $P2616 = "344_1307835824.98345" 
    capture_lex $P2616
    .const 'Sub' $P2612 = "343_1307835824.98345" 
    capture_lex $P2612
    .const 'Sub' $P2609 = "342_1307835824.98345" 
    capture_lex $P2609
    .const 'Sub' $P2605 = "341_1307835824.98345" 
    capture_lex $P2605
    .const 'Sub' $P2602 = "340_1307835824.98345" 
    capture_lex $P2602
    .const 'Sub' $P2598 = "339_1307835824.98345" 
    capture_lex $P2598
    .const 'Sub' $P2595 = "338_1307835824.98345" 
    capture_lex $P2595
    .const 'Sub' $P2591 = "337_1307835824.98345" 
    capture_lex $P2591
    .const 'Sub' $P2588 = "336_1307835824.98345" 
    capture_lex $P2588
    .const 'Sub' $P2584 = "335_1307835824.98345" 
    capture_lex $P2584
    .const 'Sub' $P2582 = "334_1307835824.98345" 
    capture_lex $P2582
    .const 'Sub' $P2578 = "333_1307835824.98345" 
    capture_lex $P2578
    .const 'Sub' $P2575 = "332_1307835824.98345" 
    capture_lex $P2575
    .const 'Sub' $P2571 = "331_1307835824.98345" 
    capture_lex $P2571
    .const 'Sub' $P2568 = "330_1307835824.98345" 
    capture_lex $P2568
    .const 'Sub' $P2564 = "329_1307835824.98345" 
    capture_lex $P2564
    .const 'Sub' $P2561 = "328_1307835824.98345" 
    capture_lex $P2561
    .const 'Sub' $P2557 = "327_1307835824.98345" 
    capture_lex $P2557
    .const 'Sub' $P2554 = "326_1307835824.98345" 
    capture_lex $P2554
    .const 'Sub' $P2550 = "325_1307835824.98345" 
    capture_lex $P2550
    .const 'Sub' $P2547 = "324_1307835824.98345" 
    capture_lex $P2547
    .const 'Sub' $P2543 = "323_1307835824.98345" 
    capture_lex $P2543
    .const 'Sub' $P2540 = "322_1307835824.98345" 
    capture_lex $P2540
    .const 'Sub' $P2536 = "321_1307835824.98345" 
    capture_lex $P2536
    .const 'Sub' $P2533 = "320_1307835824.98345" 
    capture_lex $P2533
    .const 'Sub' $P2529 = "319_1307835824.98345" 
    capture_lex $P2529
    .const 'Sub' $P2526 = "318_1307835824.98345" 
    capture_lex $P2526
    .const 'Sub' $P2523 = "317_1307835824.98345" 
    capture_lex $P2523
    .const 'Sub' $P2520 = "316_1307835824.98345" 
    capture_lex $P2520
    .const 'Sub' $P2517 = "315_1307835824.98345" 
    capture_lex $P2517
    .const 'Sub' $P2515 = "314_1307835824.98345" 
    capture_lex $P2515
    .const 'Sub' $P2512 = "313_1307835824.98345" 
    capture_lex $P2512
    .const 'Sub' $P2509 = "312_1307835824.98345" 
    capture_lex $P2509
    .const 'Sub' $P2506 = "311_1307835824.98345" 
    capture_lex $P2506
    .const 'Sub' $P2503 = "310_1307835824.98345" 
    capture_lex $P2503
    .const 'Sub' $P2500 = "309_1307835824.98345" 
    capture_lex $P2500
    .const 'Sub' $P2498 = "308_1307835824.98345" 
    capture_lex $P2498
    .const 'Sub' $P2495 = "307_1307835824.98345" 
    capture_lex $P2495
    .const 'Sub' $P2493 = "306_1307835824.98345" 
    capture_lex $P2493
    .const 'Sub' $P2490 = "305_1307835824.98345" 
    capture_lex $P2490
    .const 'Sub' $P2487 = "304_1307835824.98345" 
    capture_lex $P2487
    .const 'Sub' $P2482 = "303_1307835824.98345" 
    capture_lex $P2482
    .const 'Sub' $P2479 = "302_1307835824.98345" 
    capture_lex $P2479
    .const 'Sub' $P2473 = "301_1307835824.98345" 
    capture_lex $P2473
    .const 'Sub' $P2471 = "300_1307835824.98345" 
    capture_lex $P2471
    .const 'Sub' $P2468 = "299_1307835824.98345" 
    capture_lex $P2468
    .const 'Sub' $P2466 = "298_1307835824.98345" 
    capture_lex $P2466
    .const 'Sub' $P2463 = "297_1307835824.98345" 
    capture_lex $P2463
    .const 'Sub' $P2461 = "296_1307835824.98345" 
    capture_lex $P2461
    .const 'Sub' $P2458 = "295_1307835824.98345" 
    capture_lex $P2458
    .const 'Sub' $P2455 = "294_1307835824.98345" 
    capture_lex $P2455
    .const 'Sub' $P2450 = "293_1307835824.98345" 
    capture_lex $P2450
    .const 'Sub' $P2447 = "292_1307835824.98345" 
    capture_lex $P2447
    .const 'Sub' $P2442 = "291_1307835824.98345" 
    capture_lex $P2442
    .const 'Sub' $P2440 = "290_1307835824.98345" 
    capture_lex $P2440
    .const 'Sub' $P2437 = "289_1307835824.98345" 
    capture_lex $P2437
    .const 'Sub' $P2435 = "288_1307835824.98345" 
    capture_lex $P2435
    .const 'Sub' $P2432 = "287_1307835824.98345" 
    capture_lex $P2432
    .const 'Sub' $P2430 = "286_1307835824.98345" 
    capture_lex $P2430
    .const 'Sub' $P2427 = "285_1307835824.98345" 
    capture_lex $P2427
    .const 'Sub' $P2424 = "284_1307835824.98345" 
    capture_lex $P2424
    .const 'Sub' $P2421 = "283_1307835824.98345" 
    capture_lex $P2421
    .const 'Sub' $P2418 = "282_1307835824.98345" 
    capture_lex $P2418
    .const 'Sub' $P2414 = "281_1307835824.98345" 
    capture_lex $P2414
    .const 'Sub' $P2411 = "280_1307835824.98345" 
    capture_lex $P2411
    .const 'Sub' $P2407 = "279_1307835824.98345" 
    capture_lex $P2407
    .const 'Sub' $P2404 = "278_1307835824.98345" 
    capture_lex $P2404
    .const 'Sub' $P2400 = "277_1307835824.98345" 
    capture_lex $P2400
    .const 'Sub' $P2397 = "276_1307835824.98345" 
    capture_lex $P2397
    .const 'Sub' $P2393 = "275_1307835824.98345" 
    capture_lex $P2393
    .const 'Sub' $P2391 = "274_1307835824.98345" 
    capture_lex $P2391
    .const 'Sub' $P2388 = "273_1307835824.98345" 
    capture_lex $P2388
    .const 'Sub' $P2386 = "272_1307835824.98345" 
    capture_lex $P2386
    .const 'Sub' $P2383 = "271_1307835824.98345" 
    capture_lex $P2383
    .const 'Sub' $P2375 = "268_1307835824.98345" 
    capture_lex $P2375
    .const 'Sub' $P2369 = "267_1307835824.98345" 
    capture_lex $P2369
    .const 'Sub' $P2365 = "266_1307835824.98345" 
    capture_lex $P2365
    .const 'Sub' $P2361 = "265_1307835824.98345" 
    capture_lex $P2361
    .const 'Sub' $P2358 = "264_1307835824.98345" 
    capture_lex $P2358
    .const 'Sub' $P2355 = "263_1307835824.98345" 
    capture_lex $P2355
    .const 'Sub' $P2352 = "262_1307835824.98345" 
    capture_lex $P2352
    .const 'Sub' $P2348 = "261_1307835824.98345" 
    capture_lex $P2348
    .const 'Sub' $P2345 = "260_1307835824.98345" 
    capture_lex $P2345
    .const 'Sub' $P2342 = "259_1307835824.98345" 
    capture_lex $P2342
    .const 'Sub' $P2340 = "258_1307835824.98345" 
    capture_lex $P2340
    .const 'Sub' $P2326 = "256_1307835824.98345" 
    capture_lex $P2326
    .const 'Sub' $P2324 = "255_1307835824.98345" 
    capture_lex $P2324
    .const 'Sub' $P2318 = "254_1307835824.98345" 
    capture_lex $P2318
    .const 'Sub' $P2315 = "253_1307835824.98345" 
    capture_lex $P2315
    .const 'Sub' $P2310 = "252_1307835824.98345" 
    capture_lex $P2310
    .const 'Sub' $P2307 = "251_1307835824.98345" 
    capture_lex $P2307
    .const 'Sub' $P2304 = "250_1307835824.98345" 
    capture_lex $P2304
    .const 'Sub' $P2302 = "249_1307835824.98345" 
    capture_lex $P2302
    .const 'Sub' $P2298 = "248_1307835824.98345" 
    capture_lex $P2298
    .const 'Sub' $P2289 = "245_1307835824.98345" 
    capture_lex $P2289
    .const 'Sub' $P2282 = "244_1307835824.98345" 
    capture_lex $P2282
    .const 'Sub' $P2279 = "243_1307835824.98345" 
    capture_lex $P2279
    .const 'Sub' $P2241 = "242_1307835824.98345" 
    capture_lex $P2241
    .const 'Sub' $P2238 = "241_1307835824.98345" 
    capture_lex $P2238
    .const 'Sub' $P2230 = "240_1307835824.98345" 
    capture_lex $P2230
    .const 'Sub' $P2221 = "237_1307835824.98345" 
    capture_lex $P2221
    .const 'Sub' $P2216 = "236_1307835824.98345" 
    capture_lex $P2216
    .const 'Sub' $P2213 = "235_1307835824.98345" 
    capture_lex $P2213
    .const 'Sub' $P2207 = "234_1307835824.98345" 
    capture_lex $P2207
    .const 'Sub' $P2204 = "233_1307835824.98345" 
    capture_lex $P2204
    .const 'Sub' $P2201 = "232_1307835824.98345" 
    capture_lex $P2201
    .const 'Sub' $P2198 = "231_1307835824.98345" 
    capture_lex $P2198
    .const 'Sub' $P2191 = "230_1307835824.98345" 
    capture_lex $P2191
    .const 'Sub' $P2189 = "229_1307835824.98345" 
    capture_lex $P2189
    .const 'Sub' $P2176 = "228_1307835824.98345" 
    capture_lex $P2176
    .const 'Sub' $P2174 = "227_1307835824.98345" 
    capture_lex $P2174
    .const 'Sub' $P2160 = "225_1307835824.98345" 
    capture_lex $P2160
    .const 'Sub' $P2157 = "224_1307835824.98345" 
    capture_lex $P2157
    .const 'Sub' $P2152 = "223_1307835824.98345" 
    capture_lex $P2152
    .const 'Sub' $P2149 = "222_1307835824.98345" 
    capture_lex $P2149
    .const 'Sub' $P2142 = "221_1307835824.98345" 
    capture_lex $P2142
    .const 'Sub' $P2139 = "220_1307835824.98345" 
    capture_lex $P2139
    .const 'Sub' $P2132 = "219_1307835824.98345" 
    capture_lex $P2132
    .const 'Sub' $P2124 = "216_1307835824.98345" 
    capture_lex $P2124
    .const 'Sub' $P2111 = "214_1307835824.98345" 
    capture_lex $P2111
    .const 'Sub' $P2108 = "213_1307835824.98345" 
    capture_lex $P2108
    .const 'Sub' $P2067 = "211_1307835824.98345" 
    capture_lex $P2067
    .const 'Sub' $P2064 = "210_1307835824.98345" 
    capture_lex $P2064
    .const 'Sub' $P2033 = "209_1307835824.98345" 
    capture_lex $P2033
    .const 'Sub' $P2030 = "208_1307835824.98345" 
    capture_lex $P2030
    .const 'Sub' $P2026 = "207_1307835824.98345" 
    capture_lex $P2026
    .const 'Sub' $P2023 = "206_1307835824.98345" 
    capture_lex $P2023
    .const 'Sub' $P2019 = "205_1307835824.98345" 
    capture_lex $P2019
    .const 'Sub' $P2010 = "202_1307835824.98345" 
    capture_lex $P2010
    .const 'Sub' $P1989 = "200_1307835824.98345" 
    capture_lex $P1989
    .const 'Sub' $P1985 = "199_1307835824.98345" 
    capture_lex $P1985
    .const 'Sub' $P1981 = "198_1307835824.98345" 
    capture_lex $P1981
    .const 'Sub' $P1978 = "197_1307835824.98345" 
    capture_lex $P1978
    .const 'Sub' $P1962 = "195_1307835824.98345" 
    capture_lex $P1962
    .const 'Sub' $P1957 = "194_1307835824.98345" 
    capture_lex $P1957
    .const 'Sub' $P1946 = "193_1307835824.98345" 
    capture_lex $P1946
    .const 'Sub' $P1943 = "192_1307835824.98345" 
    capture_lex $P1943
    .const 'Sub' $P1939 = "191_1307835824.98345" 
    capture_lex $P1939
    .const 'Sub' $P1936 = "190_1307835824.98345" 
    capture_lex $P1936
    .const 'Sub' $P1932 = "189_1307835824.98345" 
    capture_lex $P1932
    .const 'Sub' $P1929 = "188_1307835824.98345" 
    capture_lex $P1929
    .const 'Sub' $P1925 = "187_1307835824.98345" 
    capture_lex $P1925
    .const 'Sub' $P1916 = "184_1307835824.98345" 
    capture_lex $P1916
    .const 'Sub' $P1752 = "182_1307835824.98345" 
    capture_lex $P1752
    .const 'Sub' $P1749 = "181_1307835824.98345" 
    capture_lex $P1749
    .const 'Sub' $P1729 = "180_1307835824.98345" 
    capture_lex $P1729
    .const 'Sub' $P1726 = "179_1307835824.98345" 
    capture_lex $P1726
    .const 'Sub' $P1716 = "178_1307835824.98345" 
    capture_lex $P1716
    .const 'Sub' $P1713 = "177_1307835824.98345" 
    capture_lex $P1713
    .const 'Sub' $P1703 = "176_1307835824.98345" 
    capture_lex $P1703
    .const 'Sub' $P1700 = "175_1307835824.98345" 
    capture_lex $P1700
    .const 'Sub' $P1690 = "174_1307835824.98345" 
    capture_lex $P1690
    .const 'Sub' $P1687 = "173_1307835824.98345" 
    capture_lex $P1687
    .const 'Sub' $P1677 = "172_1307835824.98345" 
    capture_lex $P1677
    .const 'Sub' $P1674 = "171_1307835824.98345" 
    capture_lex $P1674
    .const 'Sub' $P1664 = "170_1307835824.98345" 
    capture_lex $P1664
    .const 'Sub' $P1661 = "169_1307835824.98345" 
    capture_lex $P1661
    .const 'Sub' $P1651 = "168_1307835824.98345" 
    capture_lex $P1651
    .const 'Sub' $P1643 = "165_1307835824.98345" 
    capture_lex $P1643
    .const 'Sub' $P1640 = "164_1307835824.98345" 
    capture_lex $P1640
    .const 'Sub' $P1638 = "163_1307835824.98345" 
    capture_lex $P1638
    .const 'Sub' $P1635 = "162_1307835824.98345" 
    capture_lex $P1635
    .const 'Sub' $P1631 = "161_1307835824.98345" 
    capture_lex $P1631
    .const 'Sub' $P1623 = "160_1307835824.98345" 
    capture_lex $P1623
    .const 'Sub' $P1618 = "159_1307835824.98345" 
    capture_lex $P1618
    .const 'Sub' $P1611 = "158_1307835824.98345" 
    capture_lex $P1611
    .const 'Sub' $P1608 = "157_1307835824.98345" 
    capture_lex $P1608
    .const 'Sub' $P1604 = "156_1307835824.98345" 
    capture_lex $P1604
    .const 'Sub' $P1602 = "155_1307835824.98345" 
    capture_lex $P1602
    .const 'Sub' $P1599 = "154_1307835824.98345" 
    capture_lex $P1599
    .const 'Sub' $P1596 = "153_1307835824.98345" 
    capture_lex $P1596
    .const 'Sub' $P1593 = "152_1307835824.98345" 
    capture_lex $P1593
    .const 'Sub' $P1590 = "151_1307835824.98345" 
    capture_lex $P1590
    .const 'Sub' $P1587 = "150_1307835824.98345" 
    capture_lex $P1587
    .const 'Sub' $P1585 = "149_1307835824.98345" 
    capture_lex $P1585
    .const 'Sub' $P1572 = "146_1307835824.98345" 
    capture_lex $P1572
    .const 'Sub' $P1569 = "145_1307835824.98345" 
    capture_lex $P1569
    .const 'Sub' $P1566 = "144_1307835824.98345" 
    capture_lex $P1566
    .const 'Sub' $P1563 = "143_1307835824.98345" 
    capture_lex $P1563
    .const 'Sub' $P1560 = "142_1307835824.98345" 
    capture_lex $P1560
    .const 'Sub' $P1557 = "141_1307835824.98345" 
    capture_lex $P1557
    .const 'Sub' $P1554 = "140_1307835824.98345" 
    capture_lex $P1554
    .const 'Sub' $P1551 = "139_1307835824.98345" 
    capture_lex $P1551
    .const 'Sub' $P1548 = "138_1307835824.98345" 
    capture_lex $P1548
    .const 'Sub' $P1545 = "137_1307835824.98345" 
    capture_lex $P1545
    .const 'Sub' $P1542 = "136_1307835824.98345" 
    capture_lex $P1542
    .const 'Sub' $P1539 = "135_1307835824.98345" 
    capture_lex $P1539
    .const 'Sub' $P1536 = "134_1307835824.98345" 
    capture_lex $P1536
    .const 'Sub' $P1533 = "133_1307835824.98345" 
    capture_lex $P1533
    .const 'Sub' $P1527 = "132_1307835824.98345" 
    capture_lex $P1527
    .const 'Sub' $P1524 = "131_1307835824.98345" 
    capture_lex $P1524
    .const 'Sub' $P1518 = "130_1307835824.98345" 
    capture_lex $P1518
    .const 'Sub' $P1515 = "129_1307835824.98345" 
    capture_lex $P1515
    .const 'Sub' $P1509 = "128_1307835824.98345" 
    capture_lex $P1509
    .const 'Sub' $P1500 = "125_1307835824.98345" 
    capture_lex $P1500
    .const 'Sub' $P1494 = "124_1307835824.98345" 
    capture_lex $P1494
    .const 'Sub' $P1491 = "123_1307835824.98345" 
    capture_lex $P1491
    .const 'Sub' $P1485 = "122_1307835824.98345" 
    capture_lex $P1485
    .const 'Sub' $P1477 = "119_1307835824.98345" 
    capture_lex $P1477
    .const 'Sub' $P1473 = "118_1307835824.98345" 
    capture_lex $P1473
    .const 'Sub' $P1470 = "117_1307835824.98345" 
    capture_lex $P1470
    .const 'Sub' $P1466 = "116_1307835824.98345" 
    capture_lex $P1466
    .const 'Sub' $P1463 = "115_1307835824.98345" 
    capture_lex $P1463
    .const 'Sub' $P1459 = "114_1307835824.98345" 
    capture_lex $P1459
    .const 'Sub' $P1451 = "111_1307835824.98345" 
    capture_lex $P1451
    .const 'Sub' $P1445 = "110_1307835824.98345" 
    capture_lex $P1445
    .const 'Sub' $P1443 = "109_1307835824.98345" 
    capture_lex $P1443
    .const 'Sub' $P1437 = "108_1307835824.98345" 
    capture_lex $P1437
    .const 'Sub' $P1435 = "107_1307835824.98345" 
    capture_lex $P1435
    .const 'Sub' $P1429 = "106_1307835824.98345" 
    capture_lex $P1429
    .const 'Sub' $P1427 = "105_1307835824.98345" 
    capture_lex $P1427
    .const 'Sub' $P1409 = "104_1307835824.98345" 
    capture_lex $P1409
    .const 'Sub' $P1407 = "103_1307835824.98345" 
    capture_lex $P1407
    .const 'Sub' $P1400 = "102_1307835824.98345" 
    capture_lex $P1400
    .const 'Sub' $P1398 = "101_1307835824.98345" 
    capture_lex $P1398
    .const 'Sub' $P1382 = "99_1307835824.98345" 
    capture_lex $P1382
    .const 'Sub' $P1380 = "98_1307835824.98345" 
    capture_lex $P1380
    .const 'Sub' $P1364 = "97_1307835824.98345" 
    capture_lex $P1364
    .const 'Sub' $P1362 = "96_1307835824.98345" 
    capture_lex $P1362
    .const 'Sub' $P1356 = "95_1307835824.98345" 
    capture_lex $P1356
    .const 'Sub' $P1348 = "92_1307835824.98345" 
    capture_lex $P1348
    .const 'Sub' $P1345 = "91_1307835824.98345" 
    capture_lex $P1345
    .const 'Sub' $P1343 = "90_1307835824.98345" 
    capture_lex $P1343
    .const 'Sub' $P1340 = "89_1307835824.98345" 
    capture_lex $P1340
    .const 'Sub' $P1332 = "86_1307835824.98345" 
    capture_lex $P1332
    .const 'Sub' $P1329 = "85_1307835824.98345" 
    capture_lex $P1329
    .const 'Sub' $P1327 = "84_1307835824.98345" 
    capture_lex $P1327
    .const 'Sub' $P1324 = "83_1307835824.98345" 
    capture_lex $P1324
    .const 'Sub' $P1322 = "82_1307835824.98345" 
    capture_lex $P1322
    .const 'Sub' $P1319 = "81_1307835824.98345" 
    capture_lex $P1319
    .const 'Sub' $P1317 = "80_1307835824.98345" 
    capture_lex $P1317
    .const 'Sub' $P1314 = "79_1307835824.98345" 
    capture_lex $P1314
    .const 'Sub' $P1312 = "78_1307835824.98345" 
    capture_lex $P1312
    .const 'Sub' $P1309 = "77_1307835824.98345" 
    capture_lex $P1309
    .const 'Sub' $P1306 = "76_1307835824.98345" 
    capture_lex $P1306
    .const 'Sub' $P1299 = "75_1307835824.98345" 
    capture_lex $P1299
    .const 'Sub' $P1296 = "74_1307835824.98345" 
    capture_lex $P1296
    .const 'Sub' $P1292 = "73_1307835824.98345" 
    capture_lex $P1292
    .const 'Sub' $P1290 = "72_1307835824.98345" 
    capture_lex $P1290
    .const 'Sub' $P1286 = "71_1307835824.98345" 
    capture_lex $P1286
    .const 'Sub' $P1282 = "70_1307835824.98345" 
    capture_lex $P1282
    .const 'Sub' $P1278 = "69_1307835824.98345" 
    capture_lex $P1278
    .const 'Sub' $P1275 = "68_1307835824.98345" 
    capture_lex $P1275
    .const 'Sub' $P1272 = "67_1307835824.98345" 
    capture_lex $P1272
    .const 'Sub' $P1270 = "66_1307835824.98345" 
    capture_lex $P1270
    .const 'Sub' $P1266 = "65_1307835824.98345" 
    capture_lex $P1266
    .const 'Sub' $P1264 = "64_1307835824.98345" 
    capture_lex $P1264
    .const 'Sub' $P1251 = "62_1307835824.98345" 
    capture_lex $P1251
    .const 'Sub' $P1247 = "61_1307835824.98345" 
    capture_lex $P1247
    .const 'Sub' $P1237 = "60_1307835824.98345" 
    capture_lex $P1237
    .const 'Sub' $P1234 = "59_1307835824.98345" 
    capture_lex $P1234
    .const 'Sub' $P1214 = "58_1307835824.98345" 
    capture_lex $P1214
    .const 'Sub' $P1212 = "57_1307835824.98345" 
    capture_lex $P1212
    .const 'Sub' $P1175 = "55_1307835824.98345" 
    capture_lex $P1175
    .const 'Sub' $P1173 = "54_1307835824.98345" 
    capture_lex $P1173
    .const 'Sub' $P1160 = "52_1307835824.98345" 
    capture_lex $P1160
    .const 'Sub' $P1158 = "51_1307835824.98345" 
    capture_lex $P1158
    .const 'Sub' $P1149 = "50_1307835824.98345" 
    capture_lex $P1149
    .const 'Sub' $P1147 = "49_1307835824.98345" 
    capture_lex $P1147
    .const 'Sub' $P1137 = "48_1307835824.98345" 
    capture_lex $P1137
    .const 'Sub' $P1134 = "47_1307835824.98345" 
    capture_lex $P1134
    .const 'Sub' $P1129 = "46_1307835824.98345" 
    capture_lex $P1129
    .const 'Sub' $P1127 = "45_1307835824.98345" 
    capture_lex $P1127
    .const 'Sub' $P1122 = "44_1307835824.98345" 
    capture_lex $P1122
    .const 'Sub' $P1119 = "43_1307835824.98345" 
    capture_lex $P1119
    .const 'Sub' $P1115 = "42_1307835824.98345" 
    capture_lex $P1115
    .const 'Sub' $P1049 = "41_1307835824.98345" 
    capture_lex $P1049
    .lex "$?PACKAGE", $P987
    .lex "$?CLASS", $P988
.annotate 'line', 1039
    get_hll_global $P989, "GLOBAL"
    nqp_get_package_through_who $P990, $P989, "NQP"
    get_who $P991, $P990
    set $P992, $P991["Grammar"]
    $P992."O"(":prec<y=>, :assoc<unary>", "%methodop")
.annotate 'line', 1040
    get_hll_global $P993, "GLOBAL"
    nqp_get_package_through_who $P994, $P993, "NQP"
    get_who $P995, $P994
    set $P996, $P995["Grammar"]
    $P996."O"(":prec<x=>, :assoc<unary>", "%autoincrement")
.annotate 'line', 1041
    get_hll_global $P997, "GLOBAL"
    nqp_get_package_through_who $P998, $P997, "NQP"
    get_who $P999, $P998
    set $P1000, $P999["Grammar"]
    $P1000."O"(":prec<w=>, :assoc<left>", "%exponentiation")
.annotate 'line', 1042
    get_hll_global $P1001, "GLOBAL"
    nqp_get_package_through_who $P1002, $P1001, "NQP"
    get_who $P1003, $P1002
    set $P1004, $P1003["Grammar"]
    $P1004."O"(":prec<v=>, :assoc<unary>", "%symbolic_unary")
.annotate 'line', 1043
    get_hll_global $P1005, "GLOBAL"
    nqp_get_package_through_who $P1006, $P1005, "NQP"
    get_who $P1007, $P1006
    set $P1008, $P1007["Grammar"]
    $P1008."O"(":prec<u=>, :assoc<left>", "%multiplicative")
.annotate 'line', 1044
    get_hll_global $P1009, "GLOBAL"
    nqp_get_package_through_who $P1010, $P1009, "NQP"
    get_who $P1011, $P1010
    set $P1012, $P1011["Grammar"]
    $P1012."O"(":prec<t=>, :assoc<left>", "%additive")
.annotate 'line', 1045
    get_hll_global $P1013, "GLOBAL"
    nqp_get_package_through_who $P1014, $P1013, "NQP"
    get_who $P1015, $P1014
    set $P1016, $P1015["Grammar"]
    $P1016."O"(":prec<r=>, :assoc<left>", "%concatenation")
.annotate 'line', 1046
    get_hll_global $P1017, "GLOBAL"
    nqp_get_package_through_who $P1018, $P1017, "NQP"
    get_who $P1019, $P1018
    set $P1020, $P1019["Grammar"]
    $P1020."O"(":prec<m=>, :assoc<left>", "%relational")
.annotate 'line', 1047
    get_hll_global $P1021, "GLOBAL"
    nqp_get_package_through_who $P1022, $P1021, "NQP"
    get_who $P1023, $P1022
    set $P1024, $P1023["Grammar"]
    $P1024."O"(":prec<l=>, :assoc<left>", "%tight_and")
.annotate 'line', 1048
    get_hll_global $P1025, "GLOBAL"
    nqp_get_package_through_who $P1026, $P1025, "NQP"
    get_who $P1027, $P1026
    set $P1028, $P1027["Grammar"]
    $P1028."O"(":prec<k=>, :assoc<left>", "%tight_or")
.annotate 'line', 1049
    get_hll_global $P1029, "GLOBAL"
    nqp_get_package_through_who $P1030, $P1029, "NQP"
    get_who $P1031, $P1030
    set $P1032, $P1031["Grammar"]
    $P1032."O"(":prec<j=>, :assoc<right>", "%conditional")
.annotate 'line', 1050
    get_hll_global $P1033, "GLOBAL"
    nqp_get_package_through_who $P1034, $P1033, "NQP"
    get_who $P1035, $P1034
    set $P1036, $P1035["Grammar"]
    $P1036."O"(":prec<i=>, :assoc<right>", "%assignment")
.annotate 'line', 1051
    get_hll_global $P1037, "GLOBAL"
    nqp_get_package_through_who $P1038, $P1037, "NQP"
    get_who $P1039, $P1038
    set $P1040, $P1039["Grammar"]
    $P1040."O"(":prec<g=>, :assoc<list>, :nextterm<nulltermish>", "%comma")
.annotate 'line', 1052
    get_hll_global $P1041, "GLOBAL"
    nqp_get_package_through_who $P1042, $P1041, "NQP"
    get_who $P1043, $P1042
    set $P1044, $P1043["Grammar"]
    $P1044."O"(":prec<f=>, :assoc<list>", "%list_infix")
.annotate 'line', 1053
    get_hll_global $P1045, "GLOBAL"
    nqp_get_package_through_who $P1046, $P1045, "NQP"
    get_who $P1047, $P1046
    set $P1048, $P1047["Grammar"]
    $P1048."O"(":prec<e=>, :assoc<unary>", "%list_prefix")
.annotate 'line', 1152
    .const 'Sub' $P2857 = "414_1307835824.98345" 
    newclosure $P2868, $P2857
.annotate 'line', 435
    .return ($P2868)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "TOP" :anon :subid("41_1307835824.98345") :outer("40_1307835824.98345")
    .param pmc param_1050
.annotate 'line', 436
    .lex "self", param_1050
.annotate 'line', 438
    $P1051 = root_new ['parrot';'Hash']
    .lex "%*LANG", $P1051
.annotate 'line', 447
    $P1052 = root_new ['parrot';'Hash']
    .lex "%*HOW", $P1052
.annotate 'line', 454
    new $P1053, "Undef"
    .lex "$*SC", $P1053
.annotate 'line', 458
    new $P1054, "Undef"
    .lex "$*SCOPE", $P1054
.annotate 'line', 459
    new $P1055, "Undef"
    .lex "$*MULTINESS", $P1055
.annotate 'line', 460
    new $P1056, "Undef"
    .lex "$*PKGDECL", $P1056
.annotate 'line', 461
    new $P1057, "Undef"
    .lex "$*INVOCANT_OK", $P1057
.annotate 'line', 462
    new $P1058, "Undef"
    .lex "$*RETURN_USED", $P1058
.annotate 'line', 436
    find_lex $P1061, "%*LANG"
    unless_null $P1061, vivify_850
    get_hll_global $P1059, "GLOBAL"
    get_who $P1060, $P1059
    set $P1061, $P1060["%LANG"]
    unless_null $P1061, vivify_851
    die "Contextual %*LANG not found"
  vivify_851:
  vivify_850:
.annotate 'line', 439
    get_hll_global $P1062, "GLOBAL"
    nqp_get_package_through_who $P1063, $P1062, "NQP"
    get_who $P1064, $P1063
    set $P1065, $P1064["Regex"]
    find_lex $P1068, "%*LANG"
    unless_null $P1068, vivify_852
    get_hll_global $P1066, "GLOBAL"
    get_who $P1067, $P1066
    set $P1068, $P1067["%LANG"]
    unless_null $P1068, vivify_853
    die "Contextual %*LANG not found"
  vivify_853:
    store_lex "%*LANG", $P1068
  vivify_852:
    set $P1068["Regex"], $P1065
.annotate 'line', 440
    get_hll_global $P1069, "GLOBAL"
    nqp_get_package_through_who $P1070, $P1069, "NQP"
    get_who $P1071, $P1070
    set $P1072, $P1071["RegexActions"]
    find_lex $P1075, "%*LANG"
    unless_null $P1075, vivify_854
    get_hll_global $P1073, "GLOBAL"
    get_who $P1074, $P1073
    set $P1075, $P1074["%LANG"]
    unless_null $P1075, vivify_855
    die "Contextual %*LANG not found"
  vivify_855:
    store_lex "%*LANG", $P1075
  vivify_854:
    set $P1075["Regex-actions"], $P1072
.annotate 'line', 441
    get_hll_global $P1076, "GLOBAL"
    nqp_get_package_through_who $P1077, $P1076, "NQP"
    get_who $P1078, $P1077
    set $P1079, $P1078["Grammar"]
    find_lex $P1082, "%*LANG"
    unless_null $P1082, vivify_856
    get_hll_global $P1080, "GLOBAL"
    get_who $P1081, $P1080
    set $P1082, $P1081["%LANG"]
    unless_null $P1082, vivify_857
    die "Contextual %*LANG not found"
  vivify_857:
    store_lex "%*LANG", $P1082
  vivify_856:
    set $P1082["MAIN"], $P1079
.annotate 'line', 442
    get_hll_global $P1083, "GLOBAL"
    nqp_get_package_through_who $P1084, $P1083, "NQP"
    get_who $P1085, $P1084
    set $P1086, $P1085["Actions"]
    find_lex $P1089, "%*LANG"
    unless_null $P1089, vivify_858
    get_hll_global $P1087, "GLOBAL"
    get_who $P1088, $P1087
    set $P1089, $P1088["%LANG"]
    unless_null $P1089, vivify_859
    die "Contextual %*LANG not found"
  vivify_859:
    store_lex "%*LANG", $P1089
  vivify_858:
    set $P1089["MAIN-actions"], $P1086
    find_lex $P1092, "%*HOW"
    unless_null $P1092, vivify_860
    get_hll_global $P1090, "GLOBAL"
    get_who $P1091, $P1090
    set $P1092, $P1091["%HOW"]
    unless_null $P1092, vivify_861
    die "Contextual %*HOW not found"
  vivify_861:
  vivify_860:
.annotate 'line', 448
    get_knowhow $P1093
    find_lex $P1096, "%*HOW"
    unless_null $P1096, vivify_862
    get_hll_global $P1094, "GLOBAL"
    get_who $P1095, $P1094
    set $P1096, $P1095["%HOW"]
    unless_null $P1096, vivify_863
    die "Contextual %*HOW not found"
  vivify_863:
    store_lex "%*HOW", $P1096
  vivify_862:
    set $P1096["knowhow"], $P1093
.annotate 'line', 449
    get_knowhow_attribute $P1097
    find_lex $P1100, "%*HOW"
    unless_null $P1100, vivify_864
    get_hll_global $P1098, "GLOBAL"
    get_who $P1099, $P1098
    set $P1100, $P1099["%HOW"]
    unless_null $P1100, vivify_865
    die "Contextual %*HOW not found"
  vivify_865:
    store_lex "%*HOW", $P1100
  vivify_864:
    set $P1100["knowhow-attr"], $P1097
.annotate 'line', 454
    get_hll_global $P1101, "GLOBAL"
    nqp_get_package_through_who $P1102, $P1101, "NQP"
    get_who $P1103, $P1102
    set $P1104, $P1103["SymbolTable"]
.annotate 'line', 456
    time $N1105
    set $S1106, $N1105
    $P1107 = $P1104."new"($S1106 :named("handle"))
.annotate 'line', 454
    store_lex "$*SC", $P1107
.annotate 'line', 458
    new $P1108, "String"
    assign $P1108, ""
    store_lex "$*SCOPE", $P1108
.annotate 'line', 459
    new $P1109, "String"
    assign $P1109, ""
    store_lex "$*MULTINESS", $P1109
.annotate 'line', 460
    new $P1110, "String"
    assign $P1110, ""
    store_lex "$*PKGDECL", $P1110
.annotate 'line', 461
    new $P1111, "Integer"
    assign $P1111, 0
    store_lex "$*INVOCANT_OK", $P1111
.annotate 'line', 462
    new $P1112, "Integer"
    assign $P1112, 0
    store_lex "$*RETURN_USED", $P1112
.annotate 'line', 463
    find_lex $P1113, "self"
    $P1114 = $P1113."comp_unit"()
.annotate 'line', 436
    .return ($P1114)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "identifier"  :subid("42_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1116_tgt
    .local int rx1116_pos
    .local int rx1116_off
    .local int rx1116_eos
    .local int rx1116_rep
    .local pmc rx1116_cur
    .local pmc rx1116_debug
    (rx1116_cur, rx1116_pos, rx1116_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1116_cur
    .local pmc match
    .lex "$/", match
    length rx1116_eos, rx1116_tgt
    gt rx1116_pos, rx1116_eos, rx1116_done
    set rx1116_off, 0
    lt rx1116_pos, 2, rx1116_start
    sub rx1116_off, rx1116_pos, 1
    substr rx1116_tgt, rx1116_tgt, rx1116_off
  rx1116_start:
    eq $I10, 1, rx1116_restart
    if_null rx1116_debug, debug_866
    rx1116_cur."!cursor_debug"("START", "identifier")
  debug_866:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1117_done
    goto rxscan1117_scan
  rxscan1117_loop:
    (rx1116_pos) = rx1116_cur."from"()
    inc rx1116_pos
    rx1116_cur."!cursor_from"(rx1116_pos)
    ge rx1116_pos, rx1116_eos, rxscan1117_done
  rxscan1117_scan:
    set_addr $I10, rxscan1117_loop
    rx1116_cur."!mark_push"(0, rx1116_pos, $I10)
  rxscan1117_done:
.annotate 'line', 468
  # rx subrule "ident" subtype=method negate=
    rx1116_cur."!cursor_pos"(rx1116_pos)
    $P10 = rx1116_cur."ident"()
    unless $P10, rx1116_fail
    rx1116_pos = $P10."pos"()
  # rx rxquantr1118 ** 0..*
    set_addr $I10, rxquantr1118_done
    rx1116_cur."!mark_push"(0, rx1116_pos, $I10)
  rxquantr1118_loop:
  # rx enumcharlist negate=0 
    ge rx1116_pos, rx1116_eos, rx1116_fail
    sub $I10, rx1116_pos, rx1116_off
    substr $S10, rx1116_tgt, $I10, 1
    index $I11, "-'", $S10
    lt $I11, 0, rx1116_fail
    inc rx1116_pos
  # rx subrule "ident" subtype=method negate=
    rx1116_cur."!cursor_pos"(rx1116_pos)
    $P10 = rx1116_cur."ident"()
    unless $P10, rx1116_fail
    rx1116_pos = $P10."pos"()
    set_addr $I10, rxquantr1118_done
    (rx1116_rep) = rx1116_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1118_done
    rx1116_cur."!mark_push"(rx1116_rep, rx1116_pos, $I10)
    goto rxquantr1118_loop
  rxquantr1118_done:
  # rx pass
    rx1116_cur."!cursor_pass"(rx1116_pos, "identifier")
    if_null rx1116_debug, debug_867
    rx1116_cur."!cursor_debug"("PASS", "identifier", " at pos=", rx1116_pos)
  debug_867:
    .return (rx1116_cur)
  rx1116_restart:
.annotate 'line', 436
    if_null rx1116_debug, debug_868
    rx1116_cur."!cursor_debug"("NEXT", "identifier")
  debug_868:
  rx1116_fail:
    (rx1116_rep, rx1116_pos, $I10, $P10) = rx1116_cur."!mark_fail"(0)
    lt rx1116_pos, -1, rx1116_done
    eq rx1116_pos, -1, rx1116_fail
    jump $I10
  rx1116_done:
    rx1116_cur."!cursor_fail"()
    if_null rx1116_debug, debug_869
    rx1116_cur."!cursor_debug"("FAIL", "identifier")
  debug_869:
    .return (rx1116_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__identifier"  :subid("43_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1120 = self."!PREFIX__!subrule"("ident", "")
    new $P1121, "ResizablePMCArray"
    push $P1121, $P1120
    .return ($P1121)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "name"  :subid("44_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1123_tgt
    .local int rx1123_pos
    .local int rx1123_off
    .local int rx1123_eos
    .local int rx1123_rep
    .local pmc rx1123_cur
    .local pmc rx1123_debug
    (rx1123_cur, rx1123_pos, rx1123_tgt, $I10) = self."!cursor_start"()
    rx1123_cur."!cursor_caparray"("identifier")
    .lex unicode:"$\x{a2}", rx1123_cur
    .local pmc match
    .lex "$/", match
    length rx1123_eos, rx1123_tgt
    gt rx1123_pos, rx1123_eos, rx1123_done
    set rx1123_off, 0
    lt rx1123_pos, 2, rx1123_start
    sub rx1123_off, rx1123_pos, 1
    substr rx1123_tgt, rx1123_tgt, rx1123_off
  rx1123_start:
    eq $I10, 1, rx1123_restart
    if_null rx1123_debug, debug_870
    rx1123_cur."!cursor_debug"("START", "name")
  debug_870:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1124_done
    goto rxscan1124_scan
  rxscan1124_loop:
    (rx1123_pos) = rx1123_cur."from"()
    inc rx1123_pos
    rx1123_cur."!cursor_from"(rx1123_pos)
    ge rx1123_pos, rx1123_eos, rxscan1124_done
  rxscan1124_scan:
    set_addr $I10, rxscan1124_loop
    rx1123_cur."!mark_push"(0, rx1123_pos, $I10)
  rxscan1124_done:
.annotate 'line', 470
  # rx rxquantr1125 ** 1..*
    set_addr $I10, rxquantr1125_done
    rx1123_cur."!mark_push"(0, -1, $I10)
  rxquantr1125_loop:
  # rx subrule "identifier" subtype=capture negate=
    rx1123_cur."!cursor_pos"(rx1123_pos)
    $P10 = rx1123_cur."identifier"()
    unless $P10, rx1123_fail
    goto rxsubrule1126_pass
  rxsubrule1126_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1123_fail
  rxsubrule1126_pass:
    set_addr $I10, rxsubrule1126_back
    rx1123_cur."!mark_push"(0, rx1123_pos, $I10, $P10)
    $P10."!cursor_names"("identifier")
    rx1123_pos = $P10."pos"()
    set_addr $I10, rxquantr1125_done
    (rx1123_rep) = rx1123_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1125_done
    rx1123_cur."!mark_push"(rx1123_rep, rx1123_pos, $I10)
  # rx literal  "::"
    add $I11, rx1123_pos, 2
    gt $I11, rx1123_eos, rx1123_fail
    sub $I11, rx1123_pos, rx1123_off
    substr $S10, rx1123_tgt, $I11, 2
    ne $S10, "::", rx1123_fail
    add rx1123_pos, 2
    goto rxquantr1125_loop
  rxquantr1125_done:
  # rx pass
    rx1123_cur."!cursor_pass"(rx1123_pos, "name")
    if_null rx1123_debug, debug_871
    rx1123_cur."!cursor_debug"("PASS", "name", " at pos=", rx1123_pos)
  debug_871:
    .return (rx1123_cur)
  rx1123_restart:
.annotate 'line', 436
    if_null rx1123_debug, debug_872
    rx1123_cur."!cursor_debug"("NEXT", "name")
  debug_872:
  rx1123_fail:
    (rx1123_rep, rx1123_pos, $I10, $P10) = rx1123_cur."!mark_fail"(0)
    lt rx1123_pos, -1, rx1123_done
    eq rx1123_pos, -1, rx1123_fail
    jump $I10
  rx1123_done:
    rx1123_cur."!cursor_fail"()
    if_null rx1123_debug, debug_873
    rx1123_cur."!cursor_debug"("FAIL", "name")
  debug_873:
    .return (rx1123_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__name"  :subid("45_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1128, "ResizablePMCArray"
    push $P1128, ""
    .return ($P1128)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "deflongname"  :subid("46_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1130_tgt
    .local int rx1130_pos
    .local int rx1130_off
    .local int rx1130_eos
    .local int rx1130_rep
    .local pmc rx1130_cur
    .local pmc rx1130_debug
    (rx1130_cur, rx1130_pos, rx1130_tgt, $I10) = self."!cursor_start"()
    rx1130_cur."!cursor_caparray"("colonpair")
    .lex unicode:"$\x{a2}", rx1130_cur
    .local pmc match
    .lex "$/", match
    length rx1130_eos, rx1130_tgt
    gt rx1130_pos, rx1130_eos, rx1130_done
    set rx1130_off, 0
    lt rx1130_pos, 2, rx1130_start
    sub rx1130_off, rx1130_pos, 1
    substr rx1130_tgt, rx1130_tgt, rx1130_off
  rx1130_start:
    eq $I10, 1, rx1130_restart
    if_null rx1130_debug, debug_874
    rx1130_cur."!cursor_debug"("START", "deflongname")
  debug_874:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1131_done
    goto rxscan1131_scan
  rxscan1131_loop:
    (rx1130_pos) = rx1130_cur."from"()
    inc rx1130_pos
    rx1130_cur."!cursor_from"(rx1130_pos)
    ge rx1130_pos, rx1130_eos, rxscan1131_done
  rxscan1131_scan:
    set_addr $I10, rxscan1131_loop
    rx1130_cur."!mark_push"(0, rx1130_pos, $I10)
  rxscan1131_done:
.annotate 'line', 473
  # rx subrule "identifier" subtype=capture negate=
    rx1130_cur."!cursor_pos"(rx1130_pos)
    $P10 = rx1130_cur."identifier"()
    unless $P10, rx1130_fail
    rx1130_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx1130_pos = $P10."pos"()
  # rx rxquantr1132 ** 0..1
    set_addr $I10, rxquantr1132_done
    rx1130_cur."!mark_push"(0, rx1130_pos, $I10)
  rxquantr1132_loop:
  # rx subrule "colonpair" subtype=capture negate=
    rx1130_cur."!cursor_pos"(rx1130_pos)
    $P10 = rx1130_cur."colonpair"()
    unless $P10, rx1130_fail
    goto rxsubrule1133_pass
  rxsubrule1133_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1130_fail
  rxsubrule1133_pass:
    set_addr $I10, rxsubrule1133_back
    rx1130_cur."!mark_push"(0, rx1130_pos, $I10, $P10)
    $P10."!cursor_names"("colonpair")
    rx1130_pos = $P10."pos"()
    set_addr $I10, rxquantr1132_done
    (rx1130_rep) = rx1130_cur."!mark_commit"($I10)
  rxquantr1132_done:
.annotate 'line', 472
  # rx pass
    rx1130_cur."!cursor_pass"(rx1130_pos, "deflongname")
    if_null rx1130_debug, debug_875
    rx1130_cur."!cursor_debug"("PASS", "deflongname", " at pos=", rx1130_pos)
  debug_875:
    .return (rx1130_cur)
  rx1130_restart:
.annotate 'line', 436
    if_null rx1130_debug, debug_876
    rx1130_cur."!cursor_debug"("NEXT", "deflongname")
  debug_876:
  rx1130_fail:
    (rx1130_rep, rx1130_pos, $I10, $P10) = rx1130_cur."!mark_fail"(0)
    lt rx1130_pos, -1, rx1130_done
    eq rx1130_pos, -1, rx1130_fail
    jump $I10
  rx1130_done:
    rx1130_cur."!cursor_fail"()
    if_null rx1130_debug, debug_877
    rx1130_cur."!cursor_debug"("FAIL", "deflongname")
  debug_877:
    .return (rx1130_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__deflongname"  :subid("47_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1135 = self."!PREFIX__!subrule"("identifier", "")
    new $P1136, "ResizablePMCArray"
    push $P1136, $P1135
    .return ($P1136)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "ENDSTMT"  :subid("48_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1138_tgt
    .local int rx1138_pos
    .local int rx1138_off
    .local int rx1138_eos
    .local int rx1138_rep
    .local pmc rx1138_cur
    .local pmc rx1138_debug
    (rx1138_cur, rx1138_pos, rx1138_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1138_cur
    .local pmc match
    .lex "$/", match
    length rx1138_eos, rx1138_tgt
    gt rx1138_pos, rx1138_eos, rx1138_done
    set rx1138_off, 0
    lt rx1138_pos, 2, rx1138_start
    sub rx1138_off, rx1138_pos, 1
    substr rx1138_tgt, rx1138_tgt, rx1138_off
  rx1138_start:
    eq $I10, 1, rx1138_restart
    if_null rx1138_debug, debug_878
    rx1138_cur."!cursor_debug"("START", "ENDSTMT")
  debug_878:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1139_done
    goto rxscan1139_scan
  rxscan1139_loop:
    (rx1138_pos) = rx1138_cur."from"()
    inc rx1138_pos
    rx1138_cur."!cursor_from"(rx1138_pos)
    ge rx1138_pos, rx1138_eos, rxscan1139_done
  rxscan1139_scan:
    set_addr $I10, rxscan1139_loop
    rx1138_cur."!mark_push"(0, rx1138_pos, $I10)
  rxscan1139_done:
.annotate 'line', 480
  # rx rxquantr1140 ** 0..1
    set_addr $I10, rxquantr1140_done
    rx1138_cur."!mark_push"(0, rx1138_pos, $I10)
  rxquantr1140_loop:
  alt1141_0:
.annotate 'line', 477
    set_addr $I10, alt1141_1
    rx1138_cur."!mark_push"(0, rx1138_pos, $I10)
.annotate 'line', 478
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1138_pos, rx1138_off
    set rx1138_rep, 0
    sub $I12, rx1138_eos, rx1138_pos
  rxenumcharlistq1142_loop:
    le $I12, 0, rxenumcharlistq1142_done
    substr $S10, rx1138_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1142_done
    inc rx1138_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1142_loop
  rxenumcharlistq1142_done:
    add rx1138_pos, rx1138_pos, rx1138_rep
  # rxanchor eol
    sub $I10, rx1138_pos, rx1138_off
    is_cclass $I11, 4096, rx1138_tgt, $I10
    if $I11, rxanchor1143_done
    ne rx1138_pos, rx1138_eos, rx1138_fail
    eq rx1138_pos, 0, rxanchor1143_done
    dec $I10
    is_cclass $I11, 4096, rx1138_tgt, $I10
    if $I11, rx1138_fail
  rxanchor1143_done:
  # rx subrule "ws" subtype=method negate=
    rx1138_cur."!cursor_pos"(rx1138_pos)
    $P10 = rx1138_cur."ws"()
    unless $P10, rx1138_fail
    rx1138_pos = $P10."pos"()
  # rx subrule "MARKER" subtype=zerowidth negate=
    rx1138_cur."!cursor_pos"(rx1138_pos)
    $P10 = rx1138_cur."MARKER"("endstmt")
    unless $P10, rx1138_fail
    goto alt1141_end
  alt1141_1:
.annotate 'line', 479
  # rx rxquantr1144 ** 0..1
    set_addr $I10, rxquantr1144_done
    rx1138_cur."!mark_push"(0, rx1138_pos, $I10)
  rxquantr1144_loop:
  # rx subrule "unv" subtype=method negate=
    rx1138_cur."!cursor_pos"(rx1138_pos)
    $P10 = rx1138_cur."unv"()
    unless $P10, rx1138_fail
    goto rxsubrule1145_pass
  rxsubrule1145_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1138_fail
  rxsubrule1145_pass:
    set_addr $I10, rxsubrule1145_back
    rx1138_cur."!mark_push"(0, rx1138_pos, $I10, $P10)
    rx1138_pos = $P10."pos"()
    set_addr $I10, rxquantr1144_done
    (rx1138_rep) = rx1138_cur."!mark_commit"($I10)
  rxquantr1144_done:
  # rxanchor eol
    sub $I10, rx1138_pos, rx1138_off
    is_cclass $I11, 4096, rx1138_tgt, $I10
    if $I11, rxanchor1146_done
    ne rx1138_pos, rx1138_eos, rx1138_fail
    eq rx1138_pos, 0, rxanchor1146_done
    dec $I10
    is_cclass $I11, 4096, rx1138_tgt, $I10
    if $I11, rx1138_fail
  rxanchor1146_done:
  # rx subrule "ws" subtype=method negate=
    rx1138_cur."!cursor_pos"(rx1138_pos)
    $P10 = rx1138_cur."ws"()
    unless $P10, rx1138_fail
    rx1138_pos = $P10."pos"()
  # rx subrule "MARKER" subtype=zerowidth negate=
    rx1138_cur."!cursor_pos"(rx1138_pos)
    $P10 = rx1138_cur."MARKER"("endstmt")
    unless $P10, rx1138_fail
  alt1141_end:
.annotate 'line', 480
    set_addr $I10, rxquantr1140_done
    (rx1138_rep) = rx1138_cur."!mark_commit"($I10)
  rxquantr1140_done:
.annotate 'line', 476
  # rx pass
    rx1138_cur."!cursor_pass"(rx1138_pos, "ENDSTMT")
    if_null rx1138_debug, debug_879
    rx1138_cur."!cursor_debug"("PASS", "ENDSTMT", " at pos=", rx1138_pos)
  debug_879:
    .return (rx1138_cur)
  rx1138_restart:
.annotate 'line', 436
    if_null rx1138_debug, debug_880
    rx1138_cur."!cursor_debug"("NEXT", "ENDSTMT")
  debug_880:
  rx1138_fail:
    (rx1138_rep, rx1138_pos, $I10, $P10) = rx1138_cur."!mark_fail"(0)
    lt rx1138_pos, -1, rx1138_done
    eq rx1138_pos, -1, rx1138_fail
    jump $I10
  rx1138_done:
    rx1138_cur."!cursor_fail"()
    if_null rx1138_debug, debug_881
    rx1138_cur."!cursor_debug"("FAIL", "ENDSTMT")
  debug_881:
    .return (rx1138_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__ENDSTMT"  :subid("49_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1148, "ResizablePMCArray"
    push $P1148, ""
    .return ($P1148)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "ws"  :subid("50_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1150_tgt
    .local int rx1150_pos
    .local int rx1150_off
    .local int rx1150_eos
    .local int rx1150_rep
    .local pmc rx1150_cur
    .local pmc rx1150_debug
    (rx1150_cur, rx1150_pos, rx1150_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1150_cur
    .local pmc match
    .lex "$/", match
    length rx1150_eos, rx1150_tgt
    gt rx1150_pos, rx1150_eos, rx1150_done
    set rx1150_off, 0
    lt rx1150_pos, 2, rx1150_start
    sub rx1150_off, rx1150_pos, 1
    substr rx1150_tgt, rx1150_tgt, rx1150_off
  rx1150_start:
    eq $I10, 1, rx1150_restart
    if_null rx1150_debug, debug_882
    rx1150_cur."!cursor_debug"("START", "ws")
  debug_882:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1151_done
    goto rxscan1151_scan
  rxscan1151_loop:
    (rx1150_pos) = rx1150_cur."from"()
    inc rx1150_pos
    rx1150_cur."!cursor_from"(rx1150_pos)
    ge rx1150_pos, rx1150_eos, rxscan1151_done
  rxscan1151_scan:
    set_addr $I10, rxscan1151_loop
    rx1150_cur."!mark_push"(0, rx1150_pos, $I10)
  rxscan1151_done:
  alt1152_0:
.annotate 'line', 483
    set_addr $I10, alt1152_1
    rx1150_cur."!mark_push"(0, rx1150_pos, $I10)
.annotate 'line', 484
  # rx subrule "MARKED" subtype=zerowidth negate=
    rx1150_cur."!cursor_pos"(rx1150_pos)
    $P10 = rx1150_cur."MARKED"("ws")
    unless $P10, rx1150_fail
    goto alt1152_end
  alt1152_1:
.annotate 'line', 485
  # rx subrule "ww" subtype=zerowidth negate=1
    rx1150_cur."!cursor_pos"(rx1150_pos)
    $P10 = rx1150_cur."ww"()
    if $P10, rx1150_fail
.annotate 'line', 490
  # rx rxquantr1153 ** 0..*
    set_addr $I10, rxquantr1153_done
    rx1150_cur."!mark_push"(0, rx1150_pos, $I10)
  rxquantr1153_loop:
  alt1154_0:
.annotate 'line', 486
    set_addr $I10, alt1154_1
    rx1150_cur."!mark_push"(0, rx1150_pos, $I10)
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1150_pos, rx1150_off
    set rx1150_rep, 0
    sub $I12, rx1150_eos, rx1150_pos
  rxenumcharlistq1155_loop:
    le $I12, 0, rxenumcharlistq1155_done
    substr $S10, rx1150_tgt, $I10, 1
    index $I11, unicode:"\n\x{b}\f\r\x{85}\u2028\u2029", $S10
    lt $I11, 0, rxenumcharlistq1155_done
    inc rx1150_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1155_loop
  rxenumcharlistq1155_done:
    lt rx1150_rep, 1, rx1150_fail
    add rx1150_pos, rx1150_pos, rx1150_rep
    goto alt1154_end
  alt1154_1:
    set_addr $I10, alt1154_2
    rx1150_cur."!mark_push"(0, rx1150_pos, $I10)
.annotate 'line', 487
  # rx literal  "#"
    add $I11, rx1150_pos, 1
    gt $I11, rx1150_eos, rx1150_fail
    sub $I11, rx1150_pos, rx1150_off
    ord $I11, rx1150_tgt, $I11
    ne $I11, 35, rx1150_fail
    add rx1150_pos, 1
  # rx charclass_q N r 0..-1
    sub $I10, rx1150_pos, rx1150_off
    find_cclass $I11, 4096, rx1150_tgt, $I10, rx1150_eos
    add rx1150_pos, rx1150_off, $I11
    goto alt1154_end
  alt1154_2:
    set_addr $I10, alt1154_3
    rx1150_cur."!mark_push"(0, rx1150_pos, $I10)
.annotate 'line', 488
  # rxanchor bol
    eq rx1150_pos, 0, rxanchor1156_done
    ge rx1150_pos, rx1150_eos, rx1150_fail
    sub $I10, rx1150_pos, rx1150_off
    dec $I10
    is_cclass $I11, 4096, rx1150_tgt, $I10
    unless $I11, rx1150_fail
  rxanchor1156_done:
  # rx subrule "pod_comment" subtype=method negate=
    rx1150_cur."!cursor_pos"(rx1150_pos)
    $P10 = rx1150_cur."pod_comment"()
    unless $P10, rx1150_fail
    rx1150_pos = $P10."pos"()
    goto alt1154_end
  alt1154_3:
.annotate 'line', 489
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1150_pos, rx1150_off
    set rx1150_rep, 0
    sub $I12, rx1150_eos, rx1150_pos
  rxenumcharlistq1157_loop:
    le $I12, 0, rxenumcharlistq1157_done
    substr $S10, rx1150_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1157_done
    inc rx1150_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1157_loop
  rxenumcharlistq1157_done:
    lt rx1150_rep, 1, rx1150_fail
    add rx1150_pos, rx1150_pos, rx1150_rep
  alt1154_end:
.annotate 'line', 490
    set_addr $I10, rxquantr1153_done
    (rx1150_rep) = rx1150_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1153_done
    rx1150_cur."!mark_push"(rx1150_rep, rx1150_pos, $I10)
    goto rxquantr1153_loop
  rxquantr1153_done:
.annotate 'line', 491
  # rx subrule "MARKER" subtype=zerowidth negate=
    rx1150_cur."!cursor_pos"(rx1150_pos)
    $P10 = rx1150_cur."MARKER"("ws")
    unless $P10, rx1150_fail
  alt1152_end:
.annotate 'line', 483
  # rx pass
    rx1150_cur."!cursor_pass"(rx1150_pos, "ws")
    if_null rx1150_debug, debug_883
    rx1150_cur."!cursor_debug"("PASS", "ws", " at pos=", rx1150_pos)
  debug_883:
    .return (rx1150_cur)
  rx1150_restart:
.annotate 'line', 436
    if_null rx1150_debug, debug_884
    rx1150_cur."!cursor_debug"("NEXT", "ws")
  debug_884:
  rx1150_fail:
    (rx1150_rep, rx1150_pos, $I10, $P10) = rx1150_cur."!mark_fail"(0)
    lt rx1150_pos, -1, rx1150_done
    eq rx1150_pos, -1, rx1150_fail
    jump $I10
  rx1150_done:
    rx1150_cur."!cursor_fail"()
    if_null rx1150_debug, debug_885
    rx1150_cur."!cursor_debug"("FAIL", "ws")
  debug_885:
    .return (rx1150_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__ws"  :subid("51_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1159, "ResizablePMCArray"
    push $P1159, ""
    push $P1159, ""
    .return ($P1159)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "unv"  :subid("52_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .const 'Sub' $P1166 = "53_1307835824.98345" 
    capture_lex $P1166
    .local string rx1161_tgt
    .local int rx1161_pos
    .local int rx1161_off
    .local int rx1161_eos
    .local int rx1161_rep
    .local pmc rx1161_cur
    .local pmc rx1161_debug
    (rx1161_cur, rx1161_pos, rx1161_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1161_cur
    .local pmc match
    .lex "$/", match
    length rx1161_eos, rx1161_tgt
    gt rx1161_pos, rx1161_eos, rx1161_done
    set rx1161_off, 0
    lt rx1161_pos, 2, rx1161_start
    sub rx1161_off, rx1161_pos, 1
    substr rx1161_tgt, rx1161_tgt, rx1161_off
  rx1161_start:
    eq $I10, 1, rx1161_restart
    if_null rx1161_debug, debug_886
    rx1161_cur."!cursor_debug"("START", "unv")
  debug_886:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1162_done
    goto rxscan1162_scan
  rxscan1162_loop:
    (rx1161_pos) = rx1161_cur."from"()
    inc rx1161_pos
    rx1161_cur."!cursor_from"(rx1161_pos)
    ge rx1161_pos, rx1161_eos, rxscan1162_done
  rxscan1162_scan:
    set_addr $I10, rxscan1162_loop
    rx1161_cur."!mark_push"(0, rx1161_pos, $I10)
  rxscan1162_done:
  alt1163_0:
.annotate 'line', 496
    set_addr $I10, alt1163_1
    rx1161_cur."!mark_push"(0, rx1161_pos, $I10)
.annotate 'line', 497
  # rxanchor bol
    eq rx1161_pos, 0, rxanchor1164_done
    ge rx1161_pos, rx1161_eos, rx1161_fail
    sub $I10, rx1161_pos, rx1161_off
    dec $I10
    is_cclass $I11, 4096, rx1161_tgt, $I10
    unless $I11, rx1161_fail
  rxanchor1164_done:
  # rx subrule "before" subtype=zerowidth negate=
    rx1161_cur."!cursor_pos"(rx1161_pos)
    .const 'Sub' $P1166 = "53_1307835824.98345" 
    capture_lex $P1166
    $P10 = rx1161_cur."before"($P1166)
    unless $P10, rx1161_fail
  # rx subrule "pod_comment" subtype=method negate=
    rx1161_cur."!cursor_pos"(rx1161_pos)
    $P10 = rx1161_cur."pod_comment"()
    unless $P10, rx1161_fail
    rx1161_pos = $P10."pos"()
    goto alt1163_end
  alt1163_1:
    set_addr $I10, alt1163_2
    rx1161_cur."!mark_push"(0, rx1161_pos, $I10)
.annotate 'line', 498
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1161_pos, rx1161_off
    set rx1161_rep, 0
    sub $I12, rx1161_eos, rx1161_pos
  rxenumcharlistq1171_loop:
    le $I12, 0, rxenumcharlistq1171_done
    substr $S10, rx1161_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1171_done
    inc rx1161_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1171_loop
  rxenumcharlistq1171_done:
    add rx1161_pos, rx1161_pos, rx1161_rep
  # rx literal  "#"
    add $I11, rx1161_pos, 1
    gt $I11, rx1161_eos, rx1161_fail
    sub $I11, rx1161_pos, rx1161_off
    ord $I11, rx1161_tgt, $I11
    ne $I11, 35, rx1161_fail
    add rx1161_pos, 1
  # rx charclass_q N r 0..-1
    sub $I10, rx1161_pos, rx1161_off
    find_cclass $I11, 4096, rx1161_tgt, $I10, rx1161_eos
    add rx1161_pos, rx1161_off, $I11
    goto alt1163_end
  alt1163_2:
.annotate 'line', 499
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1161_pos, rx1161_off
    set rx1161_rep, 0
    sub $I12, rx1161_eos, rx1161_pos
  rxenumcharlistq1172_loop:
    le $I12, 0, rxenumcharlistq1172_done
    substr $S10, rx1161_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1172_done
    inc rx1161_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1172_loop
  rxenumcharlistq1172_done:
    lt rx1161_rep, 1, rx1161_fail
    add rx1161_pos, rx1161_pos, rx1161_rep
  alt1163_end:
.annotate 'line', 494
  # rx pass
    rx1161_cur."!cursor_pass"(rx1161_pos, "unv")
    if_null rx1161_debug, debug_891
    rx1161_cur."!cursor_debug"("PASS", "unv", " at pos=", rx1161_pos)
  debug_891:
    .return (rx1161_cur)
  rx1161_restart:
.annotate 'line', 436
    if_null rx1161_debug, debug_892
    rx1161_cur."!cursor_debug"("NEXT", "unv")
  debug_892:
  rx1161_fail:
    (rx1161_rep, rx1161_pos, $I10, $P10) = rx1161_cur."!mark_fail"(0)
    lt rx1161_pos, -1, rx1161_done
    eq rx1161_pos, -1, rx1161_fail
    jump $I10
  rx1161_done:
    rx1161_cur."!cursor_fail"()
    if_null rx1161_debug, debug_893
    rx1161_cur."!cursor_debug"("FAIL", "unv")
  debug_893:
    .return (rx1161_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1165"  :anon :subid("53_1307835824.98345") :method :outer("52_1307835824.98345")
.annotate 'line', 497
    .local string rx1167_tgt
    .local int rx1167_pos
    .local int rx1167_off
    .local int rx1167_eos
    .local int rx1167_rep
    .local pmc rx1167_cur
    .local pmc rx1167_debug
    (rx1167_cur, rx1167_pos, rx1167_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1167_cur
    .local pmc match
    .lex "$/", match
    length rx1167_eos, rx1167_tgt
    gt rx1167_pos, rx1167_eos, rx1167_done
    set rx1167_off, 0
    lt rx1167_pos, 2, rx1167_start
    sub rx1167_off, rx1167_pos, 1
    substr rx1167_tgt, rx1167_tgt, rx1167_off
  rx1167_start:
    eq $I10, 1, rx1167_restart
    if_null rx1167_debug, debug_887
    rx1167_cur."!cursor_debug"("START", "")
  debug_887:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1168_done
    goto rxscan1168_scan
  rxscan1168_loop:
    (rx1167_pos) = rx1167_cur."from"()
    inc rx1167_pos
    rx1167_cur."!cursor_from"(rx1167_pos)
    ge rx1167_pos, rx1167_eos, rxscan1168_done
  rxscan1168_scan:
    set_addr $I10, rxscan1168_loop
    rx1167_cur."!mark_push"(0, rx1167_pos, $I10)
  rxscan1168_done:
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1167_pos, rx1167_off
    set rx1167_rep, 0
    sub $I12, rx1167_eos, rx1167_pos
  rxenumcharlistq1169_loop:
    le $I12, 0, rxenumcharlistq1169_done
    substr $S10, rx1167_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1169_done
    inc rx1167_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1169_loop
  rxenumcharlistq1169_done:
    add rx1167_pos, rx1167_pos, rx1167_rep
  # rx literal  "="
    add $I11, rx1167_pos, 1
    gt $I11, rx1167_eos, rx1167_fail
    sub $I11, rx1167_pos, rx1167_off
    ord $I11, rx1167_tgt, $I11
    ne $I11, 61, rx1167_fail
    add rx1167_pos, 1
  alt1170_0:
    set_addr $I10, alt1170_1
    rx1167_cur."!mark_push"(0, rx1167_pos, $I10)
  # rx charclass w
    ge rx1167_pos, rx1167_eos, rx1167_fail
    sub $I10, rx1167_pos, rx1167_off
    is_cclass $I11, 8192, rx1167_tgt, $I10
    unless $I11, rx1167_fail
    inc rx1167_pos
    goto alt1170_end
  alt1170_1:
  # rx literal  "\\"
    add $I11, rx1167_pos, 1
    gt $I11, rx1167_eos, rx1167_fail
    sub $I11, rx1167_pos, rx1167_off
    ord $I11, rx1167_tgt, $I11
    ne $I11, 92, rx1167_fail
    add rx1167_pos, 1
  alt1170_end:
  # rx pass
    rx1167_cur."!cursor_pass"(rx1167_pos, "")
    if_null rx1167_debug, debug_888
    rx1167_cur."!cursor_debug"("PASS", "", " at pos=", rx1167_pos)
  debug_888:
    .return (rx1167_cur)
  rx1167_restart:
    if_null rx1167_debug, debug_889
    rx1167_cur."!cursor_debug"("NEXT", "")
  debug_889:
  rx1167_fail:
    (rx1167_rep, rx1167_pos, $I10, $P10) = rx1167_cur."!mark_fail"(0)
    lt rx1167_pos, -1, rx1167_done
    eq rx1167_pos, -1, rx1167_fail
    jump $I10
  rx1167_done:
    rx1167_cur."!cursor_fail"()
    if_null rx1167_debug, debug_890
    rx1167_cur."!cursor_debug"("FAIL", "")
  debug_890:
    .return (rx1167_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__unv"  :subid("54_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1174, "ResizablePMCArray"
    push $P1174, ""
    push $P1174, ""
    push $P1174, ""
    .return ($P1174)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "pod_comment"  :subid("55_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .const 'Sub' $P1205 = "56_1307835824.98345" 
    capture_lex $P1205
    .local string rx1176_tgt
    .local int rx1176_pos
    .local int rx1176_off
    .local int rx1176_eos
    .local int rx1176_rep
    .local pmc rx1176_cur
    .local pmc rx1176_debug
    (rx1176_cur, rx1176_pos, rx1176_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1176_cur
    .local pmc match
    .lex "$/", match
    length rx1176_eos, rx1176_tgt
    gt rx1176_pos, rx1176_eos, rx1176_done
    set rx1176_off, 0
    lt rx1176_pos, 2, rx1176_start
    sub rx1176_off, rx1176_pos, 1
    substr rx1176_tgt, rx1176_tgt, rx1176_off
  rx1176_start:
    eq $I10, 1, rx1176_restart
    if_null rx1176_debug, debug_894
    rx1176_cur."!cursor_debug"("START", "pod_comment")
  debug_894:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1177_done
    goto rxscan1177_scan
  rxscan1177_loop:
    (rx1176_pos) = rx1176_cur."from"()
    inc rx1176_pos
    rx1176_cur."!cursor_from"(rx1176_pos)
    ge rx1176_pos, rx1176_eos, rxscan1177_done
  rxscan1177_scan:
    set_addr $I10, rxscan1177_loop
    rx1176_cur."!mark_push"(0, rx1176_pos, $I10)
  rxscan1177_done:
.annotate 'line', 504
  # rxanchor bol
    eq rx1176_pos, 0, rxanchor1178_done
    ge rx1176_pos, rx1176_eos, rx1176_fail
    sub $I10, rx1176_pos, rx1176_off
    dec $I10
    is_cclass $I11, 4096, rx1176_tgt, $I10
    unless $I11, rx1176_fail
  rxanchor1178_done:
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1176_pos, rx1176_off
    set rx1176_rep, 0
    sub $I12, rx1176_eos, rx1176_pos
  rxenumcharlistq1179_loop:
    le $I12, 0, rxenumcharlistq1179_done
    substr $S10, rx1176_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1179_done
    inc rx1176_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1179_loop
  rxenumcharlistq1179_done:
    add rx1176_pos, rx1176_pos, rx1176_rep
  # rx literal  "="
    add $I11, rx1176_pos, 1
    gt $I11, rx1176_eos, rx1176_fail
    sub $I11, rx1176_pos, rx1176_off
    ord $I11, rx1176_tgt, $I11
    ne $I11, 61, rx1176_fail
    add rx1176_pos, 1
  alt1180_0:
.annotate 'line', 505
    set_addr $I10, alt1180_1
    rx1176_cur."!mark_push"(0, rx1176_pos, $I10)
.annotate 'line', 506
  # rx literal  "begin"
    add $I11, rx1176_pos, 5
    gt $I11, rx1176_eos, rx1176_fail
    sub $I11, rx1176_pos, rx1176_off
    substr $S10, rx1176_tgt, $I11, 5
    ne $S10, "begin", rx1176_fail
    add rx1176_pos, 5
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1176_pos, rx1176_off
    set rx1176_rep, 0
    sub $I12, rx1176_eos, rx1176_pos
  rxenumcharlistq1181_loop:
    le $I12, 0, rxenumcharlistq1181_done
    substr $S10, rx1176_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1181_done
    inc rx1176_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1181_loop
  rxenumcharlistq1181_done:
    lt rx1176_rep, 1, rx1176_fail
    add rx1176_pos, rx1176_pos, rx1176_rep
  # rx literal  "END"
    add $I11, rx1176_pos, 3
    gt $I11, rx1176_eos, rx1176_fail
    sub $I11, rx1176_pos, rx1176_off
    substr $S10, rx1176_tgt, $I11, 3
    ne $S10, "END", rx1176_fail
    add rx1176_pos, 3
  # rxanchor rwb
    le rx1176_pos, 0, rx1176_fail
    sub $I10, rx1176_pos, rx1176_off
    is_cclass $I11, 8192, rx1176_tgt, $I10
    if $I11, rx1176_fail
    dec $I10
    is_cclass $I11, 8192, rx1176_tgt, $I10
    unless $I11, rx1176_fail
  alt1182_0:
.annotate 'line', 507
    set_addr $I10, alt1182_1
    rx1176_cur."!mark_push"(0, rx1176_pos, $I10)
  # rx rxquantf1183 ** 0..*
    set_addr $I10, rxquantf1183_loop
    rx1176_cur."!mark_push"(0, rx1176_pos, $I10)
    goto rxquantf1183_done
  rxquantf1183_loop:
  # rx charclass .
    ge rx1176_pos, rx1176_eos, rx1176_fail
    inc rx1176_pos
    set_addr $I10, rxquantf1183_loop
    rx1176_cur."!mark_push"(rx1176_rep, rx1176_pos, $I10)
  rxquantf1183_done:
  # rx charclass nl
    ge rx1176_pos, rx1176_eos, rx1176_fail
    sub $I10, rx1176_pos, rx1176_off
    is_cclass $I11, 4096, rx1176_tgt, $I10
    unless $I11, rx1176_fail
    substr $S10, rx1176_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx1176_pos, $I11
    inc rx1176_pos
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1176_pos, rx1176_off
    set rx1176_rep, 0
    sub $I12, rx1176_eos, rx1176_pos
  rxenumcharlistq1185_loop:
    le $I12, 0, rxenumcharlistq1185_done
    substr $S10, rx1176_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1185_done
    inc rx1176_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1185_loop
  rxenumcharlistq1185_done:
    add rx1176_pos, rx1176_pos, rx1176_rep
  # rx literal  "=end"
    add $I11, rx1176_pos, 4
    gt $I11, rx1176_eos, rx1176_fail
    sub $I11, rx1176_pos, rx1176_off
    substr $S10, rx1176_tgt, $I11, 4
    ne $S10, "=end", rx1176_fail
    add rx1176_pos, 4
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1176_pos, rx1176_off
    set rx1176_rep, 0
    sub $I12, rx1176_eos, rx1176_pos
  rxenumcharlistq1186_loop:
    le $I12, 0, rxenumcharlistq1186_done
    substr $S10, rx1176_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1186_done
    inc rx1176_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1186_loop
  rxenumcharlistq1186_done:
    lt rx1176_rep, 1, rx1176_fail
    add rx1176_pos, rx1176_pos, rx1176_rep
  # rx literal  "END"
    add $I11, rx1176_pos, 3
    gt $I11, rx1176_eos, rx1176_fail
    sub $I11, rx1176_pos, rx1176_off
    substr $S10, rx1176_tgt, $I11, 3
    ne $S10, "END", rx1176_fail
    add rx1176_pos, 3
  # rxanchor rwb
    le rx1176_pos, 0, rx1176_fail
    sub $I10, rx1176_pos, rx1176_off
    is_cclass $I11, 8192, rx1176_tgt, $I10
    if $I11, rx1176_fail
    dec $I10
    is_cclass $I11, 8192, rx1176_tgt, $I10
    unless $I11, rx1176_fail
  # rx charclass_q N r 0..-1
    sub $I10, rx1176_pos, rx1176_off
    find_cclass $I11, 4096, rx1176_tgt, $I10, rx1176_eos
    add rx1176_pos, rx1176_off, $I11
    goto alt1182_end
  alt1182_1:
  # rx charclass_q . r 0..-1
    sub $I10, rx1176_pos, rx1176_off
    find_not_cclass $I11, 65535, rx1176_tgt, $I10, rx1176_eos
    add rx1176_pos, rx1176_off, $I11
  alt1182_end:
.annotate 'line', 506
    goto alt1180_end
  alt1180_1:
    set_addr $I10, alt1180_2
    rx1176_cur."!mark_push"(0, rx1176_pos, $I10)
.annotate 'line', 508
  # rx literal  "begin"
    add $I11, rx1176_pos, 5
    gt $I11, rx1176_eos, rx1176_fail
    sub $I11, rx1176_pos, rx1176_off
    substr $S10, rx1176_tgt, $I11, 5
    ne $S10, "begin", rx1176_fail
    add rx1176_pos, 5
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1176_pos, rx1176_off
    set rx1176_rep, 0
    sub $I12, rx1176_eos, rx1176_pos
  rxenumcharlistq1187_loop:
    le $I12, 0, rxenumcharlistq1187_done
    substr $S10, rx1176_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1187_done
    inc rx1176_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1187_loop
  rxenumcharlistq1187_done:
    lt rx1176_rep, 1, rx1176_fail
    add rx1176_pos, rx1176_pos, rx1176_rep
  # rx subrule "identifier" subtype=capture negate=
    rx1176_cur."!cursor_pos"(rx1176_pos)
    $P10 = rx1176_cur."identifier"()
    unless $P10, rx1176_fail
    rx1176_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx1176_pos = $P10."pos"()
  alt1188_0:
.annotate 'line', 509
    set_addr $I10, alt1188_1
    rx1176_cur."!mark_push"(0, rx1176_pos, $I10)
.annotate 'line', 510
  # rx rxquantf1189 ** 0..*
    set_addr $I10, rxquantf1189_loop
    rx1176_cur."!mark_push"(0, rx1176_pos, $I10)
    goto rxquantf1189_done
  rxquantf1189_loop:
  # rx charclass .
    ge rx1176_pos, rx1176_eos, rx1176_fail
    inc rx1176_pos
    set_addr $I10, rxquantf1189_loop
    rx1176_cur."!mark_push"(rx1176_rep, rx1176_pos, $I10)
  rxquantf1189_done:
  # rx charclass nl
    ge rx1176_pos, rx1176_eos, rx1176_fail
    sub $I10, rx1176_pos, rx1176_off
    is_cclass $I11, 4096, rx1176_tgt, $I10
    unless $I11, rx1176_fail
    substr $S10, rx1176_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx1176_pos, $I11
    inc rx1176_pos
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1176_pos, rx1176_off
    set rx1176_rep, 0
    sub $I12, rx1176_eos, rx1176_pos
  rxenumcharlistq1191_loop:
    le $I12, 0, rxenumcharlistq1191_done
    substr $S10, rx1176_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1191_done
    inc rx1176_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1191_loop
  rxenumcharlistq1191_done:
    add rx1176_pos, rx1176_pos, rx1176_rep
  # rx literal  "=end"
    add $I11, rx1176_pos, 4
    gt $I11, rx1176_eos, rx1176_fail
    sub $I11, rx1176_pos, rx1176_off
    substr $S10, rx1176_tgt, $I11, 4
    ne $S10, "=end", rx1176_fail
    add rx1176_pos, 4
  # rx enumcharlist_q negate=0  r 1..-1
    sub $I10, rx1176_pos, rx1176_off
    set rx1176_rep, 0
    sub $I12, rx1176_eos, rx1176_pos
  rxenumcharlistq1192_loop:
    le $I12, 0, rxenumcharlistq1192_done
    substr $S10, rx1176_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1192_done
    inc rx1176_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1192_loop
  rxenumcharlistq1192_done:
    lt rx1176_rep, 1, rx1176_fail
    add rx1176_pos, rx1176_pos, rx1176_rep
  # rx subrule "!BACKREF" subtype=method negate=
    rx1176_cur."!cursor_pos"(rx1176_pos)
    $P10 = rx1176_cur."!BACKREF"("identifier")
    unless $P10, rx1176_fail
    rx1176_pos = $P10."pos"()
  # rxanchor rwb
    le rx1176_pos, 0, rx1176_fail
    sub $I10, rx1176_pos, rx1176_off
    is_cclass $I11, 8192, rx1176_tgt, $I10
    if $I11, rx1176_fail
    dec $I10
    is_cclass $I11, 8192, rx1176_tgt, $I10
    unless $I11, rx1176_fail
  # rx charclass_q N r 0..-1
    sub $I10, rx1176_pos, rx1176_off
    find_cclass $I11, 4096, rx1176_tgt, $I10, rx1176_eos
    add rx1176_pos, rx1176_off, $I11
    goto alt1188_end
  alt1188_1:
.annotate 'line', 511
  # rx subrule "panic" subtype=method negate=
    rx1176_cur."!cursor_pos"(rx1176_pos)
    $P10 = rx1176_cur."panic"("=begin without matching =end")
    unless $P10, rx1176_fail
    rx1176_pos = $P10."pos"()
  alt1188_end:
.annotate 'line', 508
    goto alt1180_end
  alt1180_2:
    set_addr $I10, alt1180_3
    rx1176_cur."!mark_push"(0, rx1176_pos, $I10)
.annotate 'line', 513
  # rx literal  "begin"
    add $I11, rx1176_pos, 5
    gt $I11, rx1176_eos, rx1176_fail
    sub $I11, rx1176_pos, rx1176_off
    substr $S10, rx1176_tgt, $I11, 5
    ne $S10, "begin", rx1176_fail
    add rx1176_pos, 5
  # rxanchor rwb
    le rx1176_pos, 0, rx1176_fail
    sub $I10, rx1176_pos, rx1176_off
    is_cclass $I11, 8192, rx1176_tgt, $I10
    if $I11, rx1176_fail
    dec $I10
    is_cclass $I11, 8192, rx1176_tgt, $I10
    unless $I11, rx1176_fail
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1176_pos, rx1176_off
    set rx1176_rep, 0
    sub $I12, rx1176_eos, rx1176_pos
  rxenumcharlistq1194_loop:
    le $I12, 0, rxenumcharlistq1194_done
    substr $S10, rx1176_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1194_done
    inc rx1176_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1194_loop
  rxenumcharlistq1194_done:
    add rx1176_pos, rx1176_pos, rx1176_rep
  alt1195_0:
.annotate 'line', 514
    set_addr $I10, alt1195_1
    rx1176_cur."!mark_push"(0, rx1176_pos, $I10)
  # rxanchor eol
    sub $I10, rx1176_pos, rx1176_off
    is_cclass $I11, 4096, rx1176_tgt, $I10
    if $I11, rxanchor1196_done
    ne rx1176_pos, rx1176_eos, rx1176_fail
    eq rx1176_pos, 0, rxanchor1196_done
    dec $I10
    is_cclass $I11, 4096, rx1176_tgt, $I10
    if $I11, rx1176_fail
  rxanchor1196_done:
    goto alt1195_end
  alt1195_1:
    set_addr $I10, alt1195_2
    rx1176_cur."!mark_push"(0, rx1176_pos, $I10)
  # rx literal  "#"
    add $I11, rx1176_pos, 1
    gt $I11, rx1176_eos, rx1176_fail
    sub $I11, rx1176_pos, rx1176_off
    ord $I11, rx1176_tgt, $I11
    ne $I11, 35, rx1176_fail
    add rx1176_pos, 1
    goto alt1195_end
  alt1195_2:
  # rx subrule "panic" subtype=method negate=
    rx1176_cur."!cursor_pos"(rx1176_pos)
    $P10 = rx1176_cur."panic"("Unrecognized token after =begin")
    unless $P10, rx1176_fail
    rx1176_pos = $P10."pos"()
  alt1195_end:
  alt1197_0:
.annotate 'line', 515
    set_addr $I10, alt1197_1
    rx1176_cur."!mark_push"(0, rx1176_pos, $I10)
.annotate 'line', 516
  # rx rxquantf1198 ** 0..*
    set_addr $I10, rxquantf1198_loop
    rx1176_cur."!mark_push"(0, rx1176_pos, $I10)
    goto rxquantf1198_done
  rxquantf1198_loop:
  # rx charclass .
    ge rx1176_pos, rx1176_eos, rx1176_fail
    inc rx1176_pos
    set_addr $I10, rxquantf1198_loop
    rx1176_cur."!mark_push"(rx1176_rep, rx1176_pos, $I10)
  rxquantf1198_done:
  # rx charclass nl
    ge rx1176_pos, rx1176_eos, rx1176_fail
    sub $I10, rx1176_pos, rx1176_off
    is_cclass $I11, 4096, rx1176_tgt, $I10
    unless $I11, rx1176_fail
    substr $S10, rx1176_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx1176_pos, $I11
    inc rx1176_pos
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1176_pos, rx1176_off
    set rx1176_rep, 0
    sub $I12, rx1176_eos, rx1176_pos
  rxenumcharlistq1200_loop:
    le $I12, 0, rxenumcharlistq1200_done
    substr $S10, rx1176_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1200_done
    inc rx1176_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1200_loop
  rxenumcharlistq1200_done:
    add rx1176_pos, rx1176_pos, rx1176_rep
  # rx literal  "=end"
    add $I11, rx1176_pos, 4
    gt $I11, rx1176_eos, rx1176_fail
    sub $I11, rx1176_pos, rx1176_off
    substr $S10, rx1176_tgt, $I11, 4
    ne $S10, "=end", rx1176_fail
    add rx1176_pos, 4
  # rxanchor rwb
    le rx1176_pos, 0, rx1176_fail
    sub $I10, rx1176_pos, rx1176_off
    is_cclass $I11, 8192, rx1176_tgt, $I10
    if $I11, rx1176_fail
    dec $I10
    is_cclass $I11, 8192, rx1176_tgt, $I10
    unless $I11, rx1176_fail
  # rx charclass_q N r 0..-1
    sub $I10, rx1176_pos, rx1176_off
    find_cclass $I11, 4096, rx1176_tgt, $I10, rx1176_eos
    add rx1176_pos, rx1176_off, $I11
    goto alt1197_end
  alt1197_1:
.annotate 'line', 517
  # rx subrule "panic" subtype=method negate=
    rx1176_cur."!cursor_pos"(rx1176_pos)
    $P10 = rx1176_cur."panic"("=begin without matching =end")
    unless $P10, rx1176_fail
    rx1176_pos = $P10."pos"()
  alt1197_end:
.annotate 'line', 513
    goto alt1180_end
  alt1180_3:
    set_addr $I10, alt1180_4
    rx1176_cur."!mark_push"(0, rx1176_pos, $I10)
.annotate 'line', 519
  # rx subrule "identifier" subtype=capture negate=
    rx1176_cur."!cursor_pos"(rx1176_pos)
    $P10 = rx1176_cur."identifier"()
    unless $P10, rx1176_fail
    rx1176_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx1176_pos = $P10."pos"()
.annotate 'line', 520
  # rx rxquantf1201 ** 0..*
    set_addr $I10, rxquantf1201_loop
    rx1176_cur."!mark_push"(0, rx1176_pos, $I10)
    goto rxquantf1201_done
  rxquantf1201_loop:
  # rx charclass .
    ge rx1176_pos, rx1176_eos, rx1176_fail
    inc rx1176_pos
    set_addr $I10, rxquantf1201_loop
    rx1176_cur."!mark_push"(rx1176_rep, rx1176_pos, $I10)
  rxquantf1201_done:
  # rxanchor bol
    eq rx1176_pos, 0, rxanchor1203_done
    ge rx1176_pos, rx1176_eos, rx1176_fail
    sub $I10, rx1176_pos, rx1176_off
    dec $I10
    is_cclass $I11, 4096, rx1176_tgt, $I10
    unless $I11, rx1176_fail
  rxanchor1203_done:
  # rx subrule "before" subtype=zerowidth negate=
    rx1176_cur."!cursor_pos"(rx1176_pos)
    .const 'Sub' $P1205 = "56_1307835824.98345" 
    capture_lex $P1205
    $P10 = rx1176_cur."before"($P1205)
    unless $P10, rx1176_fail
.annotate 'line', 519
    goto alt1180_end
  alt1180_4:
  alt1211_0:
.annotate 'line', 526
    set_addr $I10, alt1211_1
    rx1176_cur."!mark_push"(0, rx1176_pos, $I10)
  # rx charclass s
    ge rx1176_pos, rx1176_eos, rx1176_fail
    sub $I10, rx1176_pos, rx1176_off
    is_cclass $I11, 32, rx1176_tgt, $I10
    unless $I11, rx1176_fail
    inc rx1176_pos
    goto alt1211_end
  alt1211_1:
  # rx subrule "panic" subtype=method negate=
    rx1176_cur."!cursor_pos"(rx1176_pos)
    $P10 = rx1176_cur."panic"("Illegal pod directive")
    unless $P10, rx1176_fail
    rx1176_pos = $P10."pos"()
  alt1211_end:
.annotate 'line', 527
  # rx charclass_q N r 0..-1
    sub $I10, rx1176_pos, rx1176_off
    find_cclass $I11, 4096, rx1176_tgt, $I10, rx1176_eos
    add rx1176_pos, rx1176_off, $I11
  alt1180_end:
.annotate 'line', 503
  # rx pass
    rx1176_cur."!cursor_pass"(rx1176_pos, "pod_comment")
    if_null rx1176_debug, debug_899
    rx1176_cur."!cursor_debug"("PASS", "pod_comment", " at pos=", rx1176_pos)
  debug_899:
    .return (rx1176_cur)
  rx1176_restart:
.annotate 'line', 436
    if_null rx1176_debug, debug_900
    rx1176_cur."!cursor_debug"("NEXT", "pod_comment")
  debug_900:
  rx1176_fail:
    (rx1176_rep, rx1176_pos, $I10, $P10) = rx1176_cur."!mark_fail"(0)
    lt rx1176_pos, -1, rx1176_done
    eq rx1176_pos, -1, rx1176_fail
    jump $I10
  rx1176_done:
    rx1176_cur."!cursor_fail"()
    if_null rx1176_debug, debug_901
    rx1176_cur."!cursor_debug"("FAIL", "pod_comment")
  debug_901:
    .return (rx1176_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1204"  :anon :subid("56_1307835824.98345") :method :outer("55_1307835824.98345")
.annotate 'line', 520
    .local string rx1206_tgt
    .local int rx1206_pos
    .local int rx1206_off
    .local int rx1206_eos
    .local int rx1206_rep
    .local pmc rx1206_cur
    .local pmc rx1206_debug
    (rx1206_cur, rx1206_pos, rx1206_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1206_cur
    .local pmc match
    .lex "$/", match
    length rx1206_eos, rx1206_tgt
    gt rx1206_pos, rx1206_eos, rx1206_done
    set rx1206_off, 0
    lt rx1206_pos, 2, rx1206_start
    sub rx1206_off, rx1206_pos, 1
    substr rx1206_tgt, rx1206_tgt, rx1206_off
  rx1206_start:
    eq $I10, 1, rx1206_restart
    if_null rx1206_debug, debug_895
    rx1206_cur."!cursor_debug"("START", "")
  debug_895:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1207_done
    goto rxscan1207_scan
  rxscan1207_loop:
    (rx1206_pos) = rx1206_cur."from"()
    inc rx1206_pos
    rx1206_cur."!cursor_from"(rx1206_pos)
    ge rx1206_pos, rx1206_eos, rxscan1207_done
  rxscan1207_scan:
    set_addr $I10, rxscan1207_loop
    rx1206_cur."!mark_push"(0, rx1206_pos, $I10)
  rxscan1207_done:
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1206_pos, rx1206_off
    set rx1206_rep, 0
    sub $I12, rx1206_eos, rx1206_pos
  rxenumcharlistq1208_loop:
    le $I12, 0, rxenumcharlistq1208_done
    substr $S10, rx1206_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1208_done
    inc rx1206_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1208_loop
  rxenumcharlistq1208_done:
    add rx1206_pos, rx1206_pos, rx1206_rep
  alt1209_0:
    set_addr $I10, alt1209_1
    rx1206_cur."!mark_push"(0, rx1206_pos, $I10)
.annotate 'line', 521
  # rx literal  "="
    add $I11, rx1206_pos, 1
    gt $I11, rx1206_eos, rx1206_fail
    sub $I11, rx1206_pos, rx1206_off
    ord $I11, rx1206_tgt, $I11
    ne $I11, 61, rx1206_fail
    add rx1206_pos, 1
.annotate 'line', 523
  # rx rxquantr1210 ** 0..1
    set_addr $I10, rxquantr1210_done
    rx1206_cur."!mark_push"(0, rx1206_pos, $I10)
  rxquantr1210_loop:
.annotate 'line', 522
  # rx literal  "cut"
    add $I11, rx1206_pos, 3
    gt $I11, rx1206_eos, rx1206_fail
    sub $I11, rx1206_pos, rx1206_off
    substr $S10, rx1206_tgt, $I11, 3
    ne $S10, "cut", rx1206_fail
    add rx1206_pos, 3
  # rxanchor rwb
    le rx1206_pos, 0, rx1206_fail
    sub $I10, rx1206_pos, rx1206_off
    is_cclass $I11, 8192, rx1206_tgt, $I10
    if $I11, rx1206_fail
    dec $I10
    is_cclass $I11, 8192, rx1206_tgt, $I10
    unless $I11, rx1206_fail
.annotate 'line', 523
  # rx subrule "panic" subtype=method negate=
    rx1206_cur."!cursor_pos"(rx1206_pos)
    $P10 = rx1206_cur."panic"("Obsolete pod format, please use =begin/=end instead")
    unless $P10, rx1206_fail
    rx1206_pos = $P10."pos"()
    set_addr $I10, rxquantr1210_done
    (rx1206_rep) = rx1206_cur."!mark_commit"($I10)
  rxquantr1210_done:
.annotate 'line', 520
    goto alt1209_end
  alt1209_1:
.annotate 'line', 524
  # rx charclass nl
    ge rx1206_pos, rx1206_eos, rx1206_fail
    sub $I10, rx1206_pos, rx1206_off
    is_cclass $I11, 4096, rx1206_tgt, $I10
    unless $I11, rx1206_fail
    substr $S10, rx1206_tgt, $I10, 2
    iseq $I11, $S10, "\r\n"
    add rx1206_pos, $I11
    inc rx1206_pos
  alt1209_end:
.annotate 'line', 520
  # rx pass
    rx1206_cur."!cursor_pass"(rx1206_pos, "")
    if_null rx1206_debug, debug_896
    rx1206_cur."!cursor_debug"("PASS", "", " at pos=", rx1206_pos)
  debug_896:
    .return (rx1206_cur)
  rx1206_restart:
    if_null rx1206_debug, debug_897
    rx1206_cur."!cursor_debug"("NEXT", "")
  debug_897:
  rx1206_fail:
    (rx1206_rep, rx1206_pos, $I10, $P10) = rx1206_cur."!mark_fail"(0)
    lt rx1206_pos, -1, rx1206_done
    eq rx1206_pos, -1, rx1206_fail
    jump $I10
  rx1206_done:
    rx1206_cur."!cursor_fail"()
    if_null rx1206_debug, debug_898
    rx1206_cur."!cursor_debug"("FAIL", "")
  debug_898:
    .return (rx1206_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__pod_comment"  :subid("57_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1213, "ResizablePMCArray"
    push $P1213, ""
    .return ($P1213)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "comp_unit"  :subid("58_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 535
    new $P1215, "Undef"
    .lex "$*IN_DECL", $P1215
.annotate 'line', 537
    new $P1216, "Undef"
    .lex "$*HAS_YOU_ARE_HERE", $P1216
.annotate 'line', 538
    new $P1217, "Undef"
    .lex "$*MAIN_SUB", $P1217
.annotate 'line', 541
    new $P1218, "Undef"
    .lex "$*PACKAGE", $P1218
.annotate 'line', 542
    new $P1219, "Undef"
    .lex "$*GLOBALish", $P1219
.annotate 'line', 436
    .local string rx1220_tgt
    .local int rx1220_pos
    .local int rx1220_off
    .local int rx1220_eos
    .local int rx1220_rep
    .local pmc rx1220_cur
    .local pmc rx1220_debug
    (rx1220_cur, rx1220_pos, rx1220_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1220_cur
    .local pmc match
    .lex "$/", match
    length rx1220_eos, rx1220_tgt
    gt rx1220_pos, rx1220_eos, rx1220_done
    set rx1220_off, 0
    lt rx1220_pos, 2, rx1220_start
    sub rx1220_off, rx1220_pos, 1
    substr rx1220_tgt, rx1220_tgt, rx1220_off
  rx1220_start:
    eq $I10, 1, rx1220_restart
    if_null rx1220_debug, debug_902
    rx1220_cur."!cursor_debug"("START", "comp_unit")
  debug_902:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1221_done
    goto rxscan1221_scan
  rxscan1221_loop:
    (rx1220_pos) = rx1220_cur."from"()
    inc rx1220_pos
    rx1220_cur."!cursor_from"(rx1220_pos)
    ge rx1220_pos, rx1220_eos, rxscan1221_done
  rxscan1221_scan:
    set_addr $I10, rxscan1221_loop
    rx1220_cur."!mark_push"(0, rx1220_pos, $I10)
  rxscan1221_done:
.annotate 'line', 535
    rx1220_cur."!cursor_pos"(rx1220_pos)
    new $P1222, "String"
    assign $P1222, ""
    store_lex "$*IN_DECL", $P1222
.annotate 'line', 537
    rx1220_cur."!cursor_pos"(rx1220_pos)
    new $P1223, "Integer"
    assign $P1223, 0
    store_lex "$*HAS_YOU_ARE_HERE", $P1223
.annotate 'line', 538
    rx1220_cur."!cursor_pos"(rx1220_pos)
    find_lex $P1226, "$*MAIN_SUB"
    unless_null $P1226, vivify_903
    get_hll_global $P1224, "GLOBAL"
    get_who $P1225, $P1224
    set $P1226, $P1225["$MAIN_SUB"]
    unless_null $P1226, vivify_904
    die "Contextual $*MAIN_SUB not found"
  vivify_904:
  vivify_903:
.annotate 'line', 539
  # rx subrule "newpad" subtype=method negate=
    rx1220_cur."!cursor_pos"(rx1220_pos)
    $P10 = rx1220_cur."newpad"()
    unless $P10, rx1220_fail
    rx1220_pos = $P10."pos"()
.annotate 'line', 541
    rx1220_cur."!cursor_pos"(rx1220_pos)
    find_lex $P1229, "$*PACKAGE"
    unless_null $P1229, vivify_905
    get_hll_global $P1227, "GLOBAL"
    get_who $P1228, $P1227
    set $P1229, $P1228["$PACKAGE"]
    unless_null $P1229, vivify_906
    die "Contextual $*PACKAGE not found"
  vivify_906:
  vivify_905:
.annotate 'line', 542
    rx1220_cur."!cursor_pos"(rx1220_pos)
    find_lex $P1232, "$*GLOBALish"
    unless_null $P1232, vivify_907
    get_hll_global $P1230, "GLOBAL"
    get_who $P1231, $P1230
    set $P1232, $P1231["$GLOBALish"]
    unless_null $P1232, vivify_908
    die "Contextual $*GLOBALish not found"
  vivify_908:
  vivify_907:
.annotate 'line', 543
  # rx subrule "GLOBALish" subtype=method negate=
    rx1220_cur."!cursor_pos"(rx1220_pos)
    $P10 = rx1220_cur."GLOBALish"()
    unless $P10, rx1220_fail
    rx1220_pos = $P10."pos"()
.annotate 'line', 545
  # rx subrule "outerctx" subtype=method negate=
    rx1220_cur."!cursor_pos"(rx1220_pos)
    $P10 = rx1220_cur."outerctx"()
    unless $P10, rx1220_fail
    rx1220_pos = $P10."pos"()
.annotate 'line', 547
  # rx subrule "statementlist" subtype=capture negate=
    rx1220_cur."!cursor_pos"(rx1220_pos)
    $P10 = rx1220_cur."statementlist"()
    unless $P10, rx1220_fail
    rx1220_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statementlist")
    rx1220_pos = $P10."pos"()
  alt1233_0:
.annotate 'line', 548
    set_addr $I10, alt1233_1
    rx1220_cur."!mark_push"(0, rx1220_pos, $I10)
  # rxanchor eos
    ne rx1220_pos, rx1220_eos, rx1220_fail
    goto alt1233_end
  alt1233_1:
  # rx subrule "panic" subtype=method negate=
    rx1220_cur."!cursor_pos"(rx1220_pos)
    $P10 = rx1220_cur."panic"("Confused")
    unless $P10, rx1220_fail
    rx1220_pos = $P10."pos"()
  alt1233_end:
.annotate 'line', 534
  # rx pass
    rx1220_cur."!cursor_pass"(rx1220_pos, "comp_unit")
    if_null rx1220_debug, debug_909
    rx1220_cur."!cursor_debug"("PASS", "comp_unit", " at pos=", rx1220_pos)
  debug_909:
    .return (rx1220_cur)
  rx1220_restart:
.annotate 'line', 436
    if_null rx1220_debug, debug_910
    rx1220_cur."!cursor_debug"("NEXT", "comp_unit")
  debug_910:
  rx1220_fail:
    (rx1220_rep, rx1220_pos, $I10, $P10) = rx1220_cur."!mark_fail"(0)
    lt rx1220_pos, -1, rx1220_done
    eq rx1220_pos, -1, rx1220_fail
    jump $I10
  rx1220_done:
    rx1220_cur."!cursor_fail"()
    if_null rx1220_debug, debug_911
    rx1220_cur."!cursor_debug"("FAIL", "comp_unit")
  debug_911:
    .return (rx1220_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__comp_unit"  :subid("59_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1235 = self."!PREFIX__!subrule"("newpad", "")
    new $P1236, "ResizablePMCArray"
    push $P1236, $P1235
    .return ($P1236)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statementlist"  :subid("60_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1238_tgt
    .local int rx1238_pos
    .local int rx1238_off
    .local int rx1238_eos
    .local int rx1238_rep
    .local pmc rx1238_cur
    .local pmc rx1238_debug
    (rx1238_cur, rx1238_pos, rx1238_tgt, $I10) = self."!cursor_start"()
    rx1238_cur."!cursor_caparray"("statement")
    .lex unicode:"$\x{a2}", rx1238_cur
    .local pmc match
    .lex "$/", match
    length rx1238_eos, rx1238_tgt
    gt rx1238_pos, rx1238_eos, rx1238_done
    set rx1238_off, 0
    lt rx1238_pos, 2, rx1238_start
    sub rx1238_off, rx1238_pos, 1
    substr rx1238_tgt, rx1238_tgt, rx1238_off
  rx1238_start:
    eq $I10, 1, rx1238_restart
    if_null rx1238_debug, debug_912
    rx1238_cur."!cursor_debug"("START", "statementlist")
  debug_912:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1239_done
    goto rxscan1239_scan
  rxscan1239_loop:
    (rx1238_pos) = rx1238_cur."from"()
    inc rx1238_pos
    rx1238_cur."!cursor_from"(rx1238_pos)
    ge rx1238_pos, rx1238_eos, rxscan1239_done
  rxscan1239_scan:
    set_addr $I10, rxscan1239_loop
    rx1238_cur."!mark_push"(0, rx1238_pos, $I10)
  rxscan1239_done:
  alt1240_0:
.annotate 'line', 551
    set_addr $I10, alt1240_1
    rx1238_cur."!mark_push"(0, rx1238_pos, $I10)
.annotate 'line', 552
  # rx subrule "ws" subtype=method negate=
    rx1238_cur."!cursor_pos"(rx1238_pos)
    $P10 = rx1238_cur."ws"()
    unless $P10, rx1238_fail
    rx1238_pos = $P10."pos"()
  # rxanchor eos
    ne rx1238_pos, rx1238_eos, rx1238_fail
  # rx subrule "ws" subtype=method negate=
    rx1238_cur."!cursor_pos"(rx1238_pos)
    $P10 = rx1238_cur."ws"()
    unless $P10, rx1238_fail
    rx1238_pos = $P10."pos"()
    goto alt1240_end
  alt1240_1:
.annotate 'line', 553
  # rx subrule "ws" subtype=method negate=
    rx1238_cur."!cursor_pos"(rx1238_pos)
    $P10 = rx1238_cur."ws"()
    unless $P10, rx1238_fail
    rx1238_pos = $P10."pos"()
  # rx rxquantr1244 ** 0..*
    set_addr $I10, rxquantr1244_done
    rx1238_cur."!mark_push"(0, rx1238_pos, $I10)
  rxquantr1244_loop:
  # rx subrule "statement" subtype=capture negate=
    rx1238_cur."!cursor_pos"(rx1238_pos)
    $P10 = rx1238_cur."statement"()
    unless $P10, rx1238_fail
    rx1238_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx1238_pos = $P10."pos"()
  # rx subrule "eat_terminator" subtype=method negate=
    rx1238_cur."!cursor_pos"(rx1238_pos)
    $P10 = rx1238_cur."eat_terminator"()
    unless $P10, rx1238_fail
    rx1238_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1238_cur."!cursor_pos"(rx1238_pos)
    $P10 = rx1238_cur."ws"()
    unless $P10, rx1238_fail
    rx1238_pos = $P10."pos"()
    set_addr $I10, rxquantr1244_done
    (rx1238_rep) = rx1238_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1244_done
    rx1238_cur."!mark_push"(rx1238_rep, rx1238_pos, $I10)
    goto rxquantr1244_loop
  rxquantr1244_done:
  # rx subrule "ws" subtype=method negate=
    rx1238_cur."!cursor_pos"(rx1238_pos)
    $P10 = rx1238_cur."ws"()
    unless $P10, rx1238_fail
    rx1238_pos = $P10."pos"()
  alt1240_end:
.annotate 'line', 551
  # rx pass
    rx1238_cur."!cursor_pass"(rx1238_pos, "statementlist")
    if_null rx1238_debug, debug_913
    rx1238_cur."!cursor_debug"("PASS", "statementlist", " at pos=", rx1238_pos)
  debug_913:
    .return (rx1238_cur)
  rx1238_restart:
.annotate 'line', 436
    if_null rx1238_debug, debug_914
    rx1238_cur."!cursor_debug"("NEXT", "statementlist")
  debug_914:
  rx1238_fail:
    (rx1238_rep, rx1238_pos, $I10, $P10) = rx1238_cur."!mark_fail"(0)
    lt rx1238_pos, -1, rx1238_done
    eq rx1238_pos, -1, rx1238_fail
    jump $I10
  rx1238_done:
    rx1238_cur."!cursor_fail"()
    if_null rx1238_debug, debug_915
    rx1238_cur."!cursor_debug"("FAIL", "statementlist")
  debug_915:
    .return (rx1238_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statementlist"  :subid("61_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1248 = self."!PREFIX__!subrule"("ws", "")
    $P1249 = self."!PREFIX__!subrule"("ws", "")
    new $P1250, "ResizablePMCArray"
    push $P1250, $P1248
    push $P1250, $P1249
    .return ($P1250)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement"  :subid("62_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .const 'Sub' $P1255 = "63_1307835824.98345" 
    capture_lex $P1255
    .local string rx1252_tgt
    .local int rx1252_pos
    .local int rx1252_off
    .local int rx1252_eos
    .local int rx1252_rep
    .local pmc rx1252_cur
    .local pmc rx1252_debug
    (rx1252_cur, rx1252_pos, rx1252_tgt, $I10) = self."!cursor_start"()
    rx1252_cur."!cursor_caparray"("statement_mod_cond", "statement_mod_loop")
    .lex unicode:"$\x{a2}", rx1252_cur
    .local pmc match
    .lex "$/", match
    length rx1252_eos, rx1252_tgt
    gt rx1252_pos, rx1252_eos, rx1252_done
    set rx1252_off, 0
    lt rx1252_pos, 2, rx1252_start
    sub rx1252_off, rx1252_pos, 1
    substr rx1252_tgt, rx1252_tgt, rx1252_off
  rx1252_start:
    eq $I10, 1, rx1252_restart
    if_null rx1252_debug, debug_916
    rx1252_cur."!cursor_debug"("START", "statement")
  debug_916:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1253_done
    goto rxscan1253_scan
  rxscan1253_loop:
    (rx1252_pos) = rx1252_cur."from"()
    inc rx1252_pos
    rx1252_cur."!cursor_from"(rx1252_pos)
    ge rx1252_pos, rx1252_eos, rxscan1253_done
  rxscan1253_scan:
    set_addr $I10, rxscan1253_loop
    rx1252_cur."!mark_push"(0, rx1252_pos, $I10)
  rxscan1253_done:
.annotate 'line', 557
  # rx subrule "before" subtype=zerowidth negate=1
    rx1252_cur."!cursor_pos"(rx1252_pos)
    .const 'Sub' $P1255 = "63_1307835824.98345" 
    capture_lex $P1255
    $P10 = rx1252_cur."before"($P1255)
    if $P10, rx1252_fail
  alt1259_0:
.annotate 'line', 558
    set_addr $I10, alt1259_1
    rx1252_cur."!mark_push"(0, rx1252_pos, $I10)
.annotate 'line', 559
  # rx subrule "statement_control" subtype=capture negate=
    rx1252_cur."!cursor_pos"(rx1252_pos)
    $P10 = rx1252_cur."statement_control"()
    unless $P10, rx1252_fail
    rx1252_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_control")
    rx1252_pos = $P10."pos"()
    goto alt1259_end
  alt1259_1:
.annotate 'line', 560
  # rx subrule "EXPR" subtype=capture negate=
    rx1252_cur."!cursor_pos"(rx1252_pos)
    $P10 = rx1252_cur."EXPR"()
    unless $P10, rx1252_fail
    rx1252_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx1252_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1252_cur."!cursor_pos"(rx1252_pos)
    $P10 = rx1252_cur."ws"()
    unless $P10, rx1252_fail
    rx1252_pos = $P10."pos"()
.annotate 'line', 565
  # rx rxquantr1260 ** 0..1
    set_addr $I10, rxquantr1260_done
    rx1252_cur."!mark_push"(0, rx1252_pos, $I10)
  rxquantr1260_loop:
  alt1261_0:
.annotate 'line', 561
    set_addr $I10, alt1261_1
    rx1252_cur."!mark_push"(0, rx1252_pos, $I10)
.annotate 'line', 562
  # rx subrule "MARKED" subtype=zerowidth negate=
    rx1252_cur."!cursor_pos"(rx1252_pos)
    $P10 = rx1252_cur."MARKED"("endstmt")
    unless $P10, rx1252_fail
    goto alt1261_end
  alt1261_1:
    set_addr $I10, alt1261_2
    rx1252_cur."!mark_push"(0, rx1252_pos, $I10)
.annotate 'line', 563
  # rx subrule "statement_mod_cond" subtype=capture negate=
    rx1252_cur."!cursor_pos"(rx1252_pos)
    $P10 = rx1252_cur."statement_mod_cond"()
    unless $P10, rx1252_fail
    rx1252_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_mod_cond")
    rx1252_pos = $P10."pos"()
  # rx rxquantr1262 ** 0..1
    set_addr $I10, rxquantr1262_done
    rx1252_cur."!mark_push"(0, rx1252_pos, $I10)
  rxquantr1262_loop:
  # rx subrule "statement_mod_loop" subtype=capture negate=
    rx1252_cur."!cursor_pos"(rx1252_pos)
    $P10 = rx1252_cur."statement_mod_loop"()
    unless $P10, rx1252_fail
    goto rxsubrule1263_pass
  rxsubrule1263_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1252_fail
  rxsubrule1263_pass:
    set_addr $I10, rxsubrule1263_back
    rx1252_cur."!mark_push"(0, rx1252_pos, $I10, $P10)
    $P10."!cursor_names"("statement_mod_loop")
    rx1252_pos = $P10."pos"()
    set_addr $I10, rxquantr1262_done
    (rx1252_rep) = rx1252_cur."!mark_commit"($I10)
  rxquantr1262_done:
    goto alt1261_end
  alt1261_2:
.annotate 'line', 564
  # rx subrule "statement_mod_loop" subtype=capture negate=
    rx1252_cur."!cursor_pos"(rx1252_pos)
    $P10 = rx1252_cur."statement_mod_loop"()
    unless $P10, rx1252_fail
    rx1252_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_mod_loop")
    rx1252_pos = $P10."pos"()
  alt1261_end:
.annotate 'line', 565
    set_addr $I10, rxquantr1260_done
    (rx1252_rep) = rx1252_cur."!mark_commit"($I10)
  rxquantr1260_done:
  alt1259_end:
.annotate 'line', 556
  # rx pass
    rx1252_cur."!cursor_pass"(rx1252_pos, "statement")
    if_null rx1252_debug, debug_921
    rx1252_cur."!cursor_debug"("PASS", "statement", " at pos=", rx1252_pos)
  debug_921:
    .return (rx1252_cur)
  rx1252_restart:
.annotate 'line', 436
    if_null rx1252_debug, debug_922
    rx1252_cur."!cursor_debug"("NEXT", "statement")
  debug_922:
  rx1252_fail:
    (rx1252_rep, rx1252_pos, $I10, $P10) = rx1252_cur."!mark_fail"(0)
    lt rx1252_pos, -1, rx1252_done
    eq rx1252_pos, -1, rx1252_fail
    jump $I10
  rx1252_done:
    rx1252_cur."!cursor_fail"()
    if_null rx1252_debug, debug_923
    rx1252_cur."!cursor_debug"("FAIL", "statement")
  debug_923:
    .return (rx1252_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1254"  :anon :subid("63_1307835824.98345") :method :outer("62_1307835824.98345")
.annotate 'line', 557
    .local string rx1256_tgt
    .local int rx1256_pos
    .local int rx1256_off
    .local int rx1256_eos
    .local int rx1256_rep
    .local pmc rx1256_cur
    .local pmc rx1256_debug
    (rx1256_cur, rx1256_pos, rx1256_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1256_cur
    .local pmc match
    .lex "$/", match
    length rx1256_eos, rx1256_tgt
    gt rx1256_pos, rx1256_eos, rx1256_done
    set rx1256_off, 0
    lt rx1256_pos, 2, rx1256_start
    sub rx1256_off, rx1256_pos, 1
    substr rx1256_tgt, rx1256_tgt, rx1256_off
  rx1256_start:
    eq $I10, 1, rx1256_restart
    if_null rx1256_debug, debug_917
    rx1256_cur."!cursor_debug"("START", "")
  debug_917:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1257_done
    goto rxscan1257_scan
  rxscan1257_loop:
    (rx1256_pos) = rx1256_cur."from"()
    inc rx1256_pos
    rx1256_cur."!cursor_from"(rx1256_pos)
    ge rx1256_pos, rx1256_eos, rxscan1257_done
  rxscan1257_scan:
    set_addr $I10, rxscan1257_loop
    rx1256_cur."!mark_push"(0, rx1256_pos, $I10)
  rxscan1257_done:
  alt1258_0:
    set_addr $I10, alt1258_1
    rx1256_cur."!mark_push"(0, rx1256_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx1256_pos, rx1256_eos, rx1256_fail
    sub $I10, rx1256_pos, rx1256_off
    substr $S10, rx1256_tgt, $I10, 1
    index $I11, "])}", $S10
    lt $I11, 0, rx1256_fail
    inc rx1256_pos
    goto alt1258_end
  alt1258_1:
  # rxanchor eos
    ne rx1256_pos, rx1256_eos, rx1256_fail
  alt1258_end:
  # rx pass
    rx1256_cur."!cursor_pass"(rx1256_pos, "")
    if_null rx1256_debug, debug_918
    rx1256_cur."!cursor_debug"("PASS", "", " at pos=", rx1256_pos)
  debug_918:
    .return (rx1256_cur)
  rx1256_restart:
    if_null rx1256_debug, debug_919
    rx1256_cur."!cursor_debug"("NEXT", "")
  debug_919:
  rx1256_fail:
    (rx1256_rep, rx1256_pos, $I10, $P10) = rx1256_cur."!mark_fail"(0)
    lt rx1256_pos, -1, rx1256_done
    eq rx1256_pos, -1, rx1256_fail
    jump $I10
  rx1256_done:
    rx1256_cur."!cursor_fail"()
    if_null rx1256_debug, debug_920
    rx1256_cur."!cursor_debug"("FAIL", "")
  debug_920:
    .return (rx1256_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement"  :subid("64_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1265, "ResizablePMCArray"
    push $P1265, ""
    .return ($P1265)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "eat_terminator"  :subid("65_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1267_tgt
    .local int rx1267_pos
    .local int rx1267_off
    .local int rx1267_eos
    .local int rx1267_rep
    .local pmc rx1267_cur
    .local pmc rx1267_debug
    (rx1267_cur, rx1267_pos, rx1267_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1267_cur
    .local pmc match
    .lex "$/", match
    length rx1267_eos, rx1267_tgt
    gt rx1267_pos, rx1267_eos, rx1267_done
    set rx1267_off, 0
    lt rx1267_pos, 2, rx1267_start
    sub rx1267_off, rx1267_pos, 1
    substr rx1267_tgt, rx1267_tgt, rx1267_off
  rx1267_start:
    eq $I10, 1, rx1267_restart
    if_null rx1267_debug, debug_924
    rx1267_cur."!cursor_debug"("START", "eat_terminator")
  debug_924:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1268_done
    goto rxscan1268_scan
  rxscan1268_loop:
    (rx1267_pos) = rx1267_cur."from"()
    inc rx1267_pos
    rx1267_cur."!cursor_from"(rx1267_pos)
    ge rx1267_pos, rx1267_eos, rxscan1268_done
  rxscan1268_scan:
    set_addr $I10, rxscan1268_loop
    rx1267_cur."!mark_push"(0, rx1267_pos, $I10)
  rxscan1268_done:
  alt1269_0:
.annotate 'line', 569
    set_addr $I10, alt1269_1
    rx1267_cur."!mark_push"(0, rx1267_pos, $I10)
.annotate 'line', 570
  # rx literal  ";"
    add $I11, rx1267_pos, 1
    gt $I11, rx1267_eos, rx1267_fail
    sub $I11, rx1267_pos, rx1267_off
    ord $I11, rx1267_tgt, $I11
    ne $I11, 59, rx1267_fail
    add rx1267_pos, 1
    goto alt1269_end
  alt1269_1:
    set_addr $I10, alt1269_2
    rx1267_cur."!mark_push"(0, rx1267_pos, $I10)
.annotate 'line', 571
  # rx subrule "MARKED" subtype=zerowidth negate=
    rx1267_cur."!cursor_pos"(rx1267_pos)
    $P10 = rx1267_cur."MARKED"("endstmt")
    unless $P10, rx1267_fail
    goto alt1269_end
  alt1269_2:
    set_addr $I10, alt1269_3
    rx1267_cur."!mark_push"(0, rx1267_pos, $I10)
.annotate 'line', 572
  # rx subrule "terminator" subtype=zerowidth negate=
    rx1267_cur."!cursor_pos"(rx1267_pos)
    $P10 = rx1267_cur."terminator"()
    unless $P10, rx1267_fail
    goto alt1269_end
  alt1269_3:
.annotate 'line', 573
  # rxanchor eos
    ne rx1267_pos, rx1267_eos, rx1267_fail
  alt1269_end:
.annotate 'line', 569
  # rx pass
    rx1267_cur."!cursor_pass"(rx1267_pos, "eat_terminator")
    if_null rx1267_debug, debug_925
    rx1267_cur."!cursor_debug"("PASS", "eat_terminator", " at pos=", rx1267_pos)
  debug_925:
    .return (rx1267_cur)
  rx1267_restart:
.annotate 'line', 436
    if_null rx1267_debug, debug_926
    rx1267_cur."!cursor_debug"("NEXT", "eat_terminator")
  debug_926:
  rx1267_fail:
    (rx1267_rep, rx1267_pos, $I10, $P10) = rx1267_cur."!mark_fail"(0)
    lt rx1267_pos, -1, rx1267_done
    eq rx1267_pos, -1, rx1267_fail
    jump $I10
  rx1267_done:
    rx1267_cur."!cursor_fail"()
    if_null rx1267_debug, debug_927
    rx1267_cur."!cursor_debug"("FAIL", "eat_terminator")
  debug_927:
    .return (rx1267_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__eat_terminator"  :subid("66_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1271, "ResizablePMCArray"
    push $P1271, ""
    push $P1271, ""
    push $P1271, ""
    push $P1271, ";"
    .return ($P1271)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "xblock"  :subid("67_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1273_tgt
    .local int rx1273_pos
    .local int rx1273_off
    .local int rx1273_eos
    .local int rx1273_rep
    .local pmc rx1273_cur
    .local pmc rx1273_debug
    (rx1273_cur, rx1273_pos, rx1273_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1273_cur
    .local pmc match
    .lex "$/", match
    length rx1273_eos, rx1273_tgt
    gt rx1273_pos, rx1273_eos, rx1273_done
    set rx1273_off, 0
    lt rx1273_pos, 2, rx1273_start
    sub rx1273_off, rx1273_pos, 1
    substr rx1273_tgt, rx1273_tgt, rx1273_off
  rx1273_start:
    eq $I10, 1, rx1273_restart
    if_null rx1273_debug, debug_928
    rx1273_cur."!cursor_debug"("START", "xblock")
  debug_928:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1274_done
    goto rxscan1274_scan
  rxscan1274_loop:
    (rx1273_pos) = rx1273_cur."from"()
    inc rx1273_pos
    rx1273_cur."!cursor_from"(rx1273_pos)
    ge rx1273_pos, rx1273_eos, rxscan1274_done
  rxscan1274_scan:
    set_addr $I10, rxscan1274_loop
    rx1273_cur."!mark_push"(0, rx1273_pos, $I10)
  rxscan1274_done:
.annotate 'line', 577
  # rx subrule "EXPR" subtype=capture negate=
    rx1273_cur."!cursor_pos"(rx1273_pos)
    $P10 = rx1273_cur."EXPR"()
    unless $P10, rx1273_fail
    rx1273_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx1273_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1273_cur."!cursor_pos"(rx1273_pos)
    $P10 = rx1273_cur."ws"()
    unless $P10, rx1273_fail
    rx1273_pos = $P10."pos"()
  # rx subrule "pblock" subtype=capture negate=
    rx1273_cur."!cursor_pos"(rx1273_pos)
    $P10 = rx1273_cur."pblock"()
    unless $P10, rx1273_fail
    rx1273_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx1273_pos = $P10."pos"()
.annotate 'line', 576
  # rx pass
    rx1273_cur."!cursor_pass"(rx1273_pos, "xblock")
    if_null rx1273_debug, debug_929
    rx1273_cur."!cursor_debug"("PASS", "xblock", " at pos=", rx1273_pos)
  debug_929:
    .return (rx1273_cur)
  rx1273_restart:
.annotate 'line', 436
    if_null rx1273_debug, debug_930
    rx1273_cur."!cursor_debug"("NEXT", "xblock")
  debug_930:
  rx1273_fail:
    (rx1273_rep, rx1273_pos, $I10, $P10) = rx1273_cur."!mark_fail"(0)
    lt rx1273_pos, -1, rx1273_done
    eq rx1273_pos, -1, rx1273_fail
    jump $I10
  rx1273_done:
    rx1273_cur."!cursor_fail"()
    if_null rx1273_debug, debug_931
    rx1273_cur."!cursor_debug"("FAIL", "xblock")
  debug_931:
    .return (rx1273_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__xblock"  :subid("68_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1276 = self."!PREFIX__!subrule"("EXPR", "")
    new $P1277, "ResizablePMCArray"
    push $P1277, $P1276
    .return ($P1277)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "pblock"  :subid("69_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1279_tgt
    .local int rx1279_pos
    .local int rx1279_off
    .local int rx1279_eos
    .local int rx1279_rep
    .local pmc rx1279_cur
    .local pmc rx1279_debug
    (rx1279_cur, rx1279_pos, rx1279_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1279_cur
    .local pmc match
    .lex "$/", match
    length rx1279_eos, rx1279_tgt
    gt rx1279_pos, rx1279_eos, rx1279_done
    set rx1279_off, 0
    lt rx1279_pos, 2, rx1279_start
    sub rx1279_off, rx1279_pos, 1
    substr rx1279_tgt, rx1279_tgt, rx1279_off
  rx1279_start:
    eq $I10, 1, rx1279_restart
    if_null rx1279_debug, debug_932
    rx1279_cur."!cursor_debug"("START", "pblock")
  debug_932:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1280_done
    goto rxscan1280_scan
  rxscan1280_loop:
    (rx1279_pos) = rx1279_cur."from"()
    inc rx1279_pos
    rx1279_cur."!cursor_from"(rx1279_pos)
    ge rx1279_pos, rx1279_eos, rxscan1280_done
  rxscan1280_scan:
    set_addr $I10, rxscan1280_loop
    rx1279_cur."!mark_push"(0, rx1279_pos, $I10)
  rxscan1280_done:
  alt1281_0:
.annotate 'line', 580
    set_addr $I10, alt1281_1
    rx1279_cur."!mark_push"(0, rx1279_pos, $I10)
.annotate 'line', 581
  # rx subrule "lambda" subtype=method negate=
    rx1279_cur."!cursor_pos"(rx1279_pos)
    $P10 = rx1279_cur."lambda"()
    unless $P10, rx1279_fail
    rx1279_pos = $P10."pos"()
.annotate 'line', 582
  # rx subrule "newpad" subtype=method negate=
    rx1279_cur."!cursor_pos"(rx1279_pos)
    $P10 = rx1279_cur."newpad"()
    unless $P10, rx1279_fail
    rx1279_pos = $P10."pos"()
.annotate 'line', 583
  # rx subrule "signature" subtype=capture negate=
    rx1279_cur."!cursor_pos"(rx1279_pos)
    $P10 = rx1279_cur."signature"()
    unless $P10, rx1279_fail
    rx1279_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx1279_pos = $P10."pos"()
.annotate 'line', 584
  # rx subrule "blockoid" subtype=capture negate=
    rx1279_cur."!cursor_pos"(rx1279_pos)
    $P10 = rx1279_cur."blockoid"()
    unless $P10, rx1279_fail
    rx1279_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx1279_pos = $P10."pos"()
.annotate 'line', 581
    goto alt1281_end
  alt1281_1:
    set_addr $I10, alt1281_2
    rx1279_cur."!mark_push"(0, rx1279_pos, $I10)
.annotate 'line', 585
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1279_pos, rx1279_off
    substr $S10, rx1279_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx1279_fail
.annotate 'line', 586
  # rx subrule "newpad" subtype=method negate=
    rx1279_cur."!cursor_pos"(rx1279_pos)
    $P10 = rx1279_cur."newpad"()
    unless $P10, rx1279_fail
    rx1279_pos = $P10."pos"()
.annotate 'line', 587
  # rx subrule "blockoid" subtype=capture negate=
    rx1279_cur."!cursor_pos"(rx1279_pos)
    $P10 = rx1279_cur."blockoid"()
    unless $P10, rx1279_fail
    rx1279_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx1279_pos = $P10."pos"()
.annotate 'line', 585
    goto alt1281_end
  alt1281_2:
.annotate 'line', 588
  # rx subrule "panic" subtype=method negate=
    rx1279_cur."!cursor_pos"(rx1279_pos)
    $P10 = rx1279_cur."panic"("Missing block")
    unless $P10, rx1279_fail
    rx1279_pos = $P10."pos"()
  alt1281_end:
.annotate 'line', 580
  # rx pass
    rx1279_cur."!cursor_pass"(rx1279_pos, "pblock")
    if_null rx1279_debug, debug_933
    rx1279_cur."!cursor_debug"("PASS", "pblock", " at pos=", rx1279_pos)
  debug_933:
    .return (rx1279_cur)
  rx1279_restart:
.annotate 'line', 436
    if_null rx1279_debug, debug_934
    rx1279_cur."!cursor_debug"("NEXT", "pblock")
  debug_934:
  rx1279_fail:
    (rx1279_rep, rx1279_pos, $I10, $P10) = rx1279_cur."!mark_fail"(0)
    lt rx1279_pos, -1, rx1279_done
    eq rx1279_pos, -1, rx1279_fail
    jump $I10
  rx1279_done:
    rx1279_cur."!cursor_fail"()
    if_null rx1279_debug, debug_935
    rx1279_cur."!cursor_debug"("FAIL", "pblock")
  debug_935:
    .return (rx1279_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__pblock"  :subid("70_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1283 = self."!PREFIX__!subrule"("panic", "")
    $P1284 = self."!PREFIX__!subrule"("lambda", "")
    new $P1285, "ResizablePMCArray"
    push $P1285, $P1283
    push $P1285, "{"
    push $P1285, $P1284
    .return ($P1285)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "lambda"  :subid("71_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1287_tgt
    .local int rx1287_pos
    .local int rx1287_off
    .local int rx1287_eos
    .local int rx1287_rep
    .local pmc rx1287_cur
    .local pmc rx1287_debug
    (rx1287_cur, rx1287_pos, rx1287_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1287_cur
    .local pmc match
    .lex "$/", match
    length rx1287_eos, rx1287_tgt
    gt rx1287_pos, rx1287_eos, rx1287_done
    set rx1287_off, 0
    lt rx1287_pos, 2, rx1287_start
    sub rx1287_off, rx1287_pos, 1
    substr rx1287_tgt, rx1287_tgt, rx1287_off
  rx1287_start:
    eq $I10, 1, rx1287_restart
    if_null rx1287_debug, debug_936
    rx1287_cur."!cursor_debug"("START", "lambda")
  debug_936:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1288_done
    goto rxscan1288_scan
  rxscan1288_loop:
    (rx1287_pos) = rx1287_cur."from"()
    inc rx1287_pos
    rx1287_cur."!cursor_from"(rx1287_pos)
    ge rx1287_pos, rx1287_eos, rxscan1288_done
  rxscan1288_scan:
    set_addr $I10, rxscan1288_loop
    rx1287_cur."!mark_push"(0, rx1287_pos, $I10)
  rxscan1288_done:
  alt1289_0:
.annotate 'line', 591
    set_addr $I10, alt1289_1
    rx1287_cur."!mark_push"(0, rx1287_pos, $I10)
  # rx literal  "->"
    add $I11, rx1287_pos, 2
    gt $I11, rx1287_eos, rx1287_fail
    sub $I11, rx1287_pos, rx1287_off
    substr $S10, rx1287_tgt, $I11, 2
    ne $S10, "->", rx1287_fail
    add rx1287_pos, 2
    goto alt1289_end
  alt1289_1:
  # rx literal  "<->"
    add $I11, rx1287_pos, 3
    gt $I11, rx1287_eos, rx1287_fail
    sub $I11, rx1287_pos, rx1287_off
    substr $S10, rx1287_tgt, $I11, 3
    ne $S10, "<->", rx1287_fail
    add rx1287_pos, 3
  alt1289_end:
  # rx pass
    rx1287_cur."!cursor_pass"(rx1287_pos, "lambda")
    if_null rx1287_debug, debug_937
    rx1287_cur."!cursor_debug"("PASS", "lambda", " at pos=", rx1287_pos)
  debug_937:
    .return (rx1287_cur)
  rx1287_restart:
.annotate 'line', 436
    if_null rx1287_debug, debug_938
    rx1287_cur."!cursor_debug"("NEXT", "lambda")
  debug_938:
  rx1287_fail:
    (rx1287_rep, rx1287_pos, $I10, $P10) = rx1287_cur."!mark_fail"(0)
    lt rx1287_pos, -1, rx1287_done
    eq rx1287_pos, -1, rx1287_fail
    jump $I10
  rx1287_done:
    rx1287_cur."!cursor_fail"()
    if_null rx1287_debug, debug_939
    rx1287_cur."!cursor_debug"("FAIL", "lambda")
  debug_939:
    .return (rx1287_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__lambda"  :subid("72_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1291, "ResizablePMCArray"
    push $P1291, "<->"
    push $P1291, "->"
    .return ($P1291)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "block"  :subid("73_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1293_tgt
    .local int rx1293_pos
    .local int rx1293_off
    .local int rx1293_eos
    .local int rx1293_rep
    .local pmc rx1293_cur
    .local pmc rx1293_debug
    (rx1293_cur, rx1293_pos, rx1293_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1293_cur
    .local pmc match
    .lex "$/", match
    length rx1293_eos, rx1293_tgt
    gt rx1293_pos, rx1293_eos, rx1293_done
    set rx1293_off, 0
    lt rx1293_pos, 2, rx1293_start
    sub rx1293_off, rx1293_pos, 1
    substr rx1293_tgt, rx1293_tgt, rx1293_off
  rx1293_start:
    eq $I10, 1, rx1293_restart
    if_null rx1293_debug, debug_940
    rx1293_cur."!cursor_debug"("START", "block")
  debug_940:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1294_done
    goto rxscan1294_scan
  rxscan1294_loop:
    (rx1293_pos) = rx1293_cur."from"()
    inc rx1293_pos
    rx1293_cur."!cursor_from"(rx1293_pos)
    ge rx1293_pos, rx1293_eos, rxscan1294_done
  rxscan1294_scan:
    set_addr $I10, rxscan1294_loop
    rx1293_cur."!mark_push"(0, rx1293_pos, $I10)
  rxscan1294_done:
  alt1295_0:
.annotate 'line', 594
    set_addr $I10, alt1295_1
    rx1293_cur."!mark_push"(0, rx1293_pos, $I10)
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1293_pos, rx1293_off
    substr $S10, rx1293_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx1293_fail
    goto alt1295_end
  alt1295_1:
  # rx subrule "panic" subtype=method negate=
    rx1293_cur."!cursor_pos"(rx1293_pos)
    $P10 = rx1293_cur."panic"("Missing block")
    unless $P10, rx1293_fail
    rx1293_pos = $P10."pos"()
  alt1295_end:
.annotate 'line', 595
  # rx subrule "newpad" subtype=method negate=
    rx1293_cur."!cursor_pos"(rx1293_pos)
    $P10 = rx1293_cur."newpad"()
    unless $P10, rx1293_fail
    rx1293_pos = $P10."pos"()
.annotate 'line', 596
  # rx subrule "blockoid" subtype=capture negate=
    rx1293_cur."!cursor_pos"(rx1293_pos)
    $P10 = rx1293_cur."blockoid"()
    unless $P10, rx1293_fail
    rx1293_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx1293_pos = $P10."pos"()
.annotate 'line', 593
  # rx pass
    rx1293_cur."!cursor_pass"(rx1293_pos, "block")
    if_null rx1293_debug, debug_941
    rx1293_cur."!cursor_debug"("PASS", "block", " at pos=", rx1293_pos)
  debug_941:
    .return (rx1293_cur)
  rx1293_restart:
.annotate 'line', 436
    if_null rx1293_debug, debug_942
    rx1293_cur."!cursor_debug"("NEXT", "block")
  debug_942:
  rx1293_fail:
    (rx1293_rep, rx1293_pos, $I10, $P10) = rx1293_cur."!mark_fail"(0)
    lt rx1293_pos, -1, rx1293_done
    eq rx1293_pos, -1, rx1293_fail
    jump $I10
  rx1293_done:
    rx1293_cur."!cursor_fail"()
    if_null rx1293_debug, debug_943
    rx1293_cur."!cursor_debug"("FAIL", "block")
  debug_943:
    .return (rx1293_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__block"  :subid("74_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1297 = self."!PREFIX__!subrule"("panic", "")
    new $P1298, "ResizablePMCArray"
    push $P1298, $P1297
    push $P1298, "{"
    .return ($P1298)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "blockoid"  :subid("75_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1300_tgt
    .local int rx1300_pos
    .local int rx1300_off
    .local int rx1300_eos
    .local int rx1300_rep
    .local pmc rx1300_cur
    .local pmc rx1300_debug
    (rx1300_cur, rx1300_pos, rx1300_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1300_cur
    .local pmc match
    .lex "$/", match
    length rx1300_eos, rx1300_tgt
    gt rx1300_pos, rx1300_eos, rx1300_done
    set rx1300_off, 0
    lt rx1300_pos, 2, rx1300_start
    sub rx1300_off, rx1300_pos, 1
    substr rx1300_tgt, rx1300_tgt, rx1300_off
  rx1300_start:
    eq $I10, 1, rx1300_restart
    if_null rx1300_debug, debug_944
    rx1300_cur."!cursor_debug"("START", "blockoid")
  debug_944:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1301_done
    goto rxscan1301_scan
  rxscan1301_loop:
    (rx1300_pos) = rx1300_cur."from"()
    inc rx1300_pos
    rx1300_cur."!cursor_from"(rx1300_pos)
    ge rx1300_pos, rx1300_eos, rxscan1301_done
  rxscan1301_scan:
    set_addr $I10, rxscan1301_loop
    rx1300_cur."!mark_push"(0, rx1300_pos, $I10)
  rxscan1301_done:
.annotate 'line', 600
  # rx subrule "finishpad" subtype=method negate=
    rx1300_cur."!cursor_pos"(rx1300_pos)
    $P10 = rx1300_cur."finishpad"()
    unless $P10, rx1300_fail
    rx1300_pos = $P10."pos"()
  alt1302_0:
.annotate 'line', 601
    set_addr $I10, alt1302_1
    rx1300_cur."!mark_push"(0, rx1300_pos, $I10)
.annotate 'line', 602
  # rx literal  "{YOU_ARE_HERE}"
    add $I11, rx1300_pos, 14
    gt $I11, rx1300_eos, rx1300_fail
    sub $I11, rx1300_pos, rx1300_off
    substr $S10, rx1300_tgt, $I11, 14
    ne $S10, "{YOU_ARE_HERE}", rx1300_fail
    add rx1300_pos, 14
  # rx subrule "you_are_here" subtype=capture negate=
    rx1300_cur."!cursor_pos"(rx1300_pos)
    $P10 = rx1300_cur."you_are_here"()
    unless $P10, rx1300_fail
    rx1300_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("you_are_here")
    rx1300_pos = $P10."pos"()
    goto alt1302_end
  alt1302_1:
.annotate 'line', 603
  # rx literal  "{"
    add $I11, rx1300_pos, 1
    gt $I11, rx1300_eos, rx1300_fail
    sub $I11, rx1300_pos, rx1300_off
    ord $I11, rx1300_tgt, $I11
    ne $I11, 123, rx1300_fail
    add rx1300_pos, 1
  # rx subrule "statementlist" subtype=capture negate=
    rx1300_cur."!cursor_pos"(rx1300_pos)
    $P10 = rx1300_cur."statementlist"()
    unless $P10, rx1300_fail
    rx1300_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statementlist")
    rx1300_pos = $P10."pos"()
  alt1303_0:
    set_addr $I10, alt1303_1
    rx1300_cur."!mark_push"(0, rx1300_pos, $I10)
  # rx literal  "}"
    add $I11, rx1300_pos, 1
    gt $I11, rx1300_eos, rx1300_fail
    sub $I11, rx1300_pos, rx1300_off
    ord $I11, rx1300_tgt, $I11
    ne $I11, 125, rx1300_fail
    add rx1300_pos, 1
    goto alt1303_end
  alt1303_1:
  # rx subrule "FAILGOAL" subtype=method negate=
    rx1300_cur."!cursor_pos"(rx1300_pos)
    $P10 = rx1300_cur."FAILGOAL"("'}'")
    unless $P10, rx1300_fail
    goto rxsubrule1305_pass
  rxsubrule1305_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1300_fail
  rxsubrule1305_pass:
    set_addr $I10, rxsubrule1305_back
    rx1300_cur."!mark_push"(0, rx1300_pos, $I10, $P10)
    rx1300_pos = $P10."pos"()
  alt1303_end:
  alt1302_end:
.annotate 'line', 605
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx1300_cur."!cursor_pos"(rx1300_pos)
    $P10 = rx1300_cur."ENDSTMT"()
    unless $P10, rx1300_fail
.annotate 'line', 599
  # rx pass
    rx1300_cur."!cursor_pass"(rx1300_pos, "blockoid")
    if_null rx1300_debug, debug_945
    rx1300_cur."!cursor_debug"("PASS", "blockoid", " at pos=", rx1300_pos)
  debug_945:
    .return (rx1300_cur)
  rx1300_restart:
.annotate 'line', 436
    if_null rx1300_debug, debug_946
    rx1300_cur."!cursor_debug"("NEXT", "blockoid")
  debug_946:
  rx1300_fail:
    (rx1300_rep, rx1300_pos, $I10, $P10) = rx1300_cur."!mark_fail"(0)
    lt rx1300_pos, -1, rx1300_done
    eq rx1300_pos, -1, rx1300_fail
    jump $I10
  rx1300_done:
    rx1300_cur."!cursor_fail"()
    if_null rx1300_debug, debug_947
    rx1300_cur."!cursor_debug"("FAIL", "blockoid")
  debug_947:
    .return (rx1300_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__blockoid"  :subid("76_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1307 = self."!PREFIX__!subrule"("finishpad", "")
    new $P1308, "ResizablePMCArray"
    push $P1308, $P1307
    .return ($P1308)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "newpad"  :subid("77_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1310_tgt
    .local int rx1310_pos
    .local int rx1310_off
    .local int rx1310_eos
    .local int rx1310_rep
    .local pmc rx1310_cur
    .local pmc rx1310_debug
    (rx1310_cur, rx1310_pos, rx1310_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1310_cur
    .local pmc match
    .lex "$/", match
    length rx1310_eos, rx1310_tgt
    gt rx1310_pos, rx1310_eos, rx1310_done
    set rx1310_off, 0
    lt rx1310_pos, 2, rx1310_start
    sub rx1310_off, rx1310_pos, 1
    substr rx1310_tgt, rx1310_tgt, rx1310_off
  rx1310_start:
    eq $I10, 1, rx1310_restart
    if_null rx1310_debug, debug_948
    rx1310_cur."!cursor_debug"("START", "newpad")
  debug_948:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1311_done
    goto rxscan1311_scan
  rxscan1311_loop:
    (rx1310_pos) = rx1310_cur."from"()
    inc rx1310_pos
    rx1310_cur."!cursor_from"(rx1310_pos)
    ge rx1310_pos, rx1310_eos, rxscan1311_done
  rxscan1311_scan:
    set_addr $I10, rxscan1311_loop
    rx1310_cur."!mark_push"(0, rx1310_pos, $I10)
  rxscan1311_done:
.annotate 'line', 608
  # rx pass
    rx1310_cur."!cursor_pass"(rx1310_pos, "newpad")
    if_null rx1310_debug, debug_949
    rx1310_cur."!cursor_debug"("PASS", "newpad", " at pos=", rx1310_pos)
  debug_949:
    .return (rx1310_cur)
  rx1310_restart:
.annotate 'line', 436
    if_null rx1310_debug, debug_950
    rx1310_cur."!cursor_debug"("NEXT", "newpad")
  debug_950:
  rx1310_fail:
    (rx1310_rep, rx1310_pos, $I10, $P10) = rx1310_cur."!mark_fail"(0)
    lt rx1310_pos, -1, rx1310_done
    eq rx1310_pos, -1, rx1310_fail
    jump $I10
  rx1310_done:
    rx1310_cur."!cursor_fail"()
    if_null rx1310_debug, debug_951
    rx1310_cur."!cursor_debug"("FAIL", "newpad")
  debug_951:
    .return (rx1310_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__newpad"  :subid("78_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1313, "ResizablePMCArray"
    push $P1313, ""
    .return ($P1313)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "outerctx"  :subid("79_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1315_tgt
    .local int rx1315_pos
    .local int rx1315_off
    .local int rx1315_eos
    .local int rx1315_rep
    .local pmc rx1315_cur
    .local pmc rx1315_debug
    (rx1315_cur, rx1315_pos, rx1315_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1315_cur
    .local pmc match
    .lex "$/", match
    length rx1315_eos, rx1315_tgt
    gt rx1315_pos, rx1315_eos, rx1315_done
    set rx1315_off, 0
    lt rx1315_pos, 2, rx1315_start
    sub rx1315_off, rx1315_pos, 1
    substr rx1315_tgt, rx1315_tgt, rx1315_off
  rx1315_start:
    eq $I10, 1, rx1315_restart
    if_null rx1315_debug, debug_952
    rx1315_cur."!cursor_debug"("START", "outerctx")
  debug_952:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1316_done
    goto rxscan1316_scan
  rxscan1316_loop:
    (rx1315_pos) = rx1315_cur."from"()
    inc rx1315_pos
    rx1315_cur."!cursor_from"(rx1315_pos)
    ge rx1315_pos, rx1315_eos, rxscan1316_done
  rxscan1316_scan:
    set_addr $I10, rxscan1316_loop
    rx1315_cur."!mark_push"(0, rx1315_pos, $I10)
  rxscan1316_done:
.annotate 'line', 609
  # rx pass
    rx1315_cur."!cursor_pass"(rx1315_pos, "outerctx")
    if_null rx1315_debug, debug_953
    rx1315_cur."!cursor_debug"("PASS", "outerctx", " at pos=", rx1315_pos)
  debug_953:
    .return (rx1315_cur)
  rx1315_restart:
.annotate 'line', 436
    if_null rx1315_debug, debug_954
    rx1315_cur."!cursor_debug"("NEXT", "outerctx")
  debug_954:
  rx1315_fail:
    (rx1315_rep, rx1315_pos, $I10, $P10) = rx1315_cur."!mark_fail"(0)
    lt rx1315_pos, -1, rx1315_done
    eq rx1315_pos, -1, rx1315_fail
    jump $I10
  rx1315_done:
    rx1315_cur."!cursor_fail"()
    if_null rx1315_debug, debug_955
    rx1315_cur."!cursor_debug"("FAIL", "outerctx")
  debug_955:
    .return (rx1315_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__outerctx"  :subid("80_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1318, "ResizablePMCArray"
    push $P1318, ""
    .return ($P1318)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "GLOBALish"  :subid("81_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1320_tgt
    .local int rx1320_pos
    .local int rx1320_off
    .local int rx1320_eos
    .local int rx1320_rep
    .local pmc rx1320_cur
    .local pmc rx1320_debug
    (rx1320_cur, rx1320_pos, rx1320_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1320_cur
    .local pmc match
    .lex "$/", match
    length rx1320_eos, rx1320_tgt
    gt rx1320_pos, rx1320_eos, rx1320_done
    set rx1320_off, 0
    lt rx1320_pos, 2, rx1320_start
    sub rx1320_off, rx1320_pos, 1
    substr rx1320_tgt, rx1320_tgt, rx1320_off
  rx1320_start:
    eq $I10, 1, rx1320_restart
    if_null rx1320_debug, debug_956
    rx1320_cur."!cursor_debug"("START", "GLOBALish")
  debug_956:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1321_done
    goto rxscan1321_scan
  rxscan1321_loop:
    (rx1320_pos) = rx1320_cur."from"()
    inc rx1320_pos
    rx1320_cur."!cursor_from"(rx1320_pos)
    ge rx1320_pos, rx1320_eos, rxscan1321_done
  rxscan1321_scan:
    set_addr $I10, rxscan1321_loop
    rx1320_cur."!mark_push"(0, rx1320_pos, $I10)
  rxscan1321_done:
.annotate 'line', 610
  # rx pass
    rx1320_cur."!cursor_pass"(rx1320_pos, "GLOBALish")
    if_null rx1320_debug, debug_957
    rx1320_cur."!cursor_debug"("PASS", "GLOBALish", " at pos=", rx1320_pos)
  debug_957:
    .return (rx1320_cur)
  rx1320_restart:
.annotate 'line', 436
    if_null rx1320_debug, debug_958
    rx1320_cur."!cursor_debug"("NEXT", "GLOBALish")
  debug_958:
  rx1320_fail:
    (rx1320_rep, rx1320_pos, $I10, $P10) = rx1320_cur."!mark_fail"(0)
    lt rx1320_pos, -1, rx1320_done
    eq rx1320_pos, -1, rx1320_fail
    jump $I10
  rx1320_done:
    rx1320_cur."!cursor_fail"()
    if_null rx1320_debug, debug_959
    rx1320_cur."!cursor_debug"("FAIL", "GLOBALish")
  debug_959:
    .return (rx1320_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__GLOBALish"  :subid("82_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1323, "ResizablePMCArray"
    push $P1323, ""
    .return ($P1323)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "finishpad"  :subid("83_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1325_tgt
    .local int rx1325_pos
    .local int rx1325_off
    .local int rx1325_eos
    .local int rx1325_rep
    .local pmc rx1325_cur
    .local pmc rx1325_debug
    (rx1325_cur, rx1325_pos, rx1325_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1325_cur
    .local pmc match
    .lex "$/", match
    length rx1325_eos, rx1325_tgt
    gt rx1325_pos, rx1325_eos, rx1325_done
    set rx1325_off, 0
    lt rx1325_pos, 2, rx1325_start
    sub rx1325_off, rx1325_pos, 1
    substr rx1325_tgt, rx1325_tgt, rx1325_off
  rx1325_start:
    eq $I10, 1, rx1325_restart
    if_null rx1325_debug, debug_960
    rx1325_cur."!cursor_debug"("START", "finishpad")
  debug_960:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1326_done
    goto rxscan1326_scan
  rxscan1326_loop:
    (rx1325_pos) = rx1325_cur."from"()
    inc rx1325_pos
    rx1325_cur."!cursor_from"(rx1325_pos)
    ge rx1325_pos, rx1325_eos, rxscan1326_done
  rxscan1326_scan:
    set_addr $I10, rxscan1326_loop
    rx1325_cur."!mark_push"(0, rx1325_pos, $I10)
  rxscan1326_done:
.annotate 'line', 611
  # rx pass
    rx1325_cur."!cursor_pass"(rx1325_pos, "finishpad")
    if_null rx1325_debug, debug_961
    rx1325_cur."!cursor_debug"("PASS", "finishpad", " at pos=", rx1325_pos)
  debug_961:
    .return (rx1325_cur)
  rx1325_restart:
.annotate 'line', 436
    if_null rx1325_debug, debug_962
    rx1325_cur."!cursor_debug"("NEXT", "finishpad")
  debug_962:
  rx1325_fail:
    (rx1325_rep, rx1325_pos, $I10, $P10) = rx1325_cur."!mark_fail"(0)
    lt rx1325_pos, -1, rx1325_done
    eq rx1325_pos, -1, rx1325_fail
    jump $I10
  rx1325_done:
    rx1325_cur."!cursor_fail"()
    if_null rx1325_debug, debug_963
    rx1325_cur."!cursor_debug"("FAIL", "finishpad")
  debug_963:
    .return (rx1325_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__finishpad"  :subid("84_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1328, "ResizablePMCArray"
    push $P1328, ""
    .return ($P1328)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "you_are_here"  :subid("85_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1330_tgt
    .local int rx1330_pos
    .local int rx1330_off
    .local int rx1330_eos
    .local int rx1330_rep
    .local pmc rx1330_cur
    .local pmc rx1330_debug
    (rx1330_cur, rx1330_pos, rx1330_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1330_cur
    .local pmc match
    .lex "$/", match
    length rx1330_eos, rx1330_tgt
    gt rx1330_pos, rx1330_eos, rx1330_done
    set rx1330_off, 0
    lt rx1330_pos, 2, rx1330_start
    sub rx1330_off, rx1330_pos, 1
    substr rx1330_tgt, rx1330_tgt, rx1330_off
  rx1330_start:
    eq $I10, 1, rx1330_restart
    if_null rx1330_debug, debug_964
    rx1330_cur."!cursor_debug"("START", "you_are_here")
  debug_964:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1331_done
    goto rxscan1331_scan
  rxscan1331_loop:
    (rx1330_pos) = rx1330_cur."from"()
    inc rx1330_pos
    rx1330_cur."!cursor_from"(rx1330_pos)
    ge rx1330_pos, rx1330_eos, rxscan1331_done
  rxscan1331_scan:
    set_addr $I10, rxscan1331_loop
    rx1330_cur."!mark_push"(0, rx1330_pos, $I10)
  rxscan1331_done:
.annotate 'line', 612
  # rx pass
    rx1330_cur."!cursor_pass"(rx1330_pos, "you_are_here")
    if_null rx1330_debug, debug_965
    rx1330_cur."!cursor_debug"("PASS", "you_are_here", " at pos=", rx1330_pos)
  debug_965:
    .return (rx1330_cur)
  rx1330_restart:
.annotate 'line', 436
    if_null rx1330_debug, debug_966
    rx1330_cur."!cursor_debug"("NEXT", "you_are_here")
  debug_966:
  rx1330_fail:
    (rx1330_rep, rx1330_pos, $I10, $P10) = rx1330_cur."!mark_fail"(0)
    lt rx1330_pos, -1, rx1330_done
    eq rx1330_pos, -1, rx1330_fail
    jump $I10
  rx1330_done:
    rx1330_cur."!cursor_fail"()
    if_null rx1330_debug, debug_967
    rx1330_cur."!cursor_debug"("FAIL", "you_are_here")
  debug_967:
    .return (rx1330_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__you_are_here"  :subid("86_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1333, "ResizablePMCArray"
    push $P1333, ""
    .return ($P1333)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator"  :subid("87_1307835824.98345")
    .param pmc param_1335
.annotate 'line', 614
    .lex "self", param_1335
    $P1336 = param_1335."!protoregex"("terminator")
    .return ($P1336)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__terminator"  :subid("88_1307835824.98345")
    .param pmc param_1338
.annotate 'line', 614
    .lex "self", param_1338
    $P1339 = param_1338."!PREFIX__!protoregex"("terminator")
    .return ($P1339)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator:sym<;>"  :subid("89_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1341_tgt
    .local int rx1341_pos
    .local int rx1341_off
    .local int rx1341_eos
    .local int rx1341_rep
    .local pmc rx1341_cur
    .local pmc rx1341_debug
    (rx1341_cur, rx1341_pos, rx1341_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1341_cur
    .local pmc match
    .lex "$/", match
    length rx1341_eos, rx1341_tgt
    gt rx1341_pos, rx1341_eos, rx1341_done
    set rx1341_off, 0
    lt rx1341_pos, 2, rx1341_start
    sub rx1341_off, rx1341_pos, 1
    substr rx1341_tgt, rx1341_tgt, rx1341_off
  rx1341_start:
    eq $I10, 1, rx1341_restart
    if_null rx1341_debug, debug_968
    rx1341_cur."!cursor_debug"("START", "terminator:sym<;>")
  debug_968:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1342_done
    goto rxscan1342_scan
  rxscan1342_loop:
    (rx1341_pos) = rx1341_cur."from"()
    inc rx1341_pos
    rx1341_cur."!cursor_from"(rx1341_pos)
    ge rx1341_pos, rx1341_eos, rxscan1342_done
  rxscan1342_scan:
    set_addr $I10, rxscan1342_loop
    rx1341_cur."!mark_push"(0, rx1341_pos, $I10)
  rxscan1342_done:
.annotate 'line', 616
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1341_pos, rx1341_off
    substr $S10, rx1341_tgt, $I10, 1
    index $I11, ";", $S10
    lt $I11, 0, rx1341_fail
  # rx pass
    rx1341_cur."!cursor_pass"(rx1341_pos, "terminator:sym<;>")
    if_null rx1341_debug, debug_969
    rx1341_cur."!cursor_debug"("PASS", "terminator:sym<;>", " at pos=", rx1341_pos)
  debug_969:
    .return (rx1341_cur)
  rx1341_restart:
.annotate 'line', 436
    if_null rx1341_debug, debug_970
    rx1341_cur."!cursor_debug"("NEXT", "terminator:sym<;>")
  debug_970:
  rx1341_fail:
    (rx1341_rep, rx1341_pos, $I10, $P10) = rx1341_cur."!mark_fail"(0)
    lt rx1341_pos, -1, rx1341_done
    eq rx1341_pos, -1, rx1341_fail
    jump $I10
  rx1341_done:
    rx1341_cur."!cursor_fail"()
    if_null rx1341_debug, debug_971
    rx1341_cur."!cursor_debug"("FAIL", "terminator:sym<;>")
  debug_971:
    .return (rx1341_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__terminator:sym<;>"  :subid("90_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1344, "ResizablePMCArray"
    push $P1344, ";"
    .return ($P1344)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "terminator:sym<}>"  :subid("91_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1346_tgt
    .local int rx1346_pos
    .local int rx1346_off
    .local int rx1346_eos
    .local int rx1346_rep
    .local pmc rx1346_cur
    .local pmc rx1346_debug
    (rx1346_cur, rx1346_pos, rx1346_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1346_cur
    .local pmc match
    .lex "$/", match
    length rx1346_eos, rx1346_tgt
    gt rx1346_pos, rx1346_eos, rx1346_done
    set rx1346_off, 0
    lt rx1346_pos, 2, rx1346_start
    sub rx1346_off, rx1346_pos, 1
    substr rx1346_tgt, rx1346_tgt, rx1346_off
  rx1346_start:
    eq $I10, 1, rx1346_restart
    if_null rx1346_debug, debug_972
    rx1346_cur."!cursor_debug"("START", "terminator:sym<}>")
  debug_972:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1347_done
    goto rxscan1347_scan
  rxscan1347_loop:
    (rx1346_pos) = rx1346_cur."from"()
    inc rx1346_pos
    rx1346_cur."!cursor_from"(rx1346_pos)
    ge rx1346_pos, rx1346_eos, rxscan1347_done
  rxscan1347_scan:
    set_addr $I10, rxscan1347_loop
    rx1346_cur."!mark_push"(0, rx1346_pos, $I10)
  rxscan1347_done:
.annotate 'line', 617
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1346_pos, rx1346_off
    substr $S10, rx1346_tgt, $I10, 1
    index $I11, "}", $S10
    lt $I11, 0, rx1346_fail
  # rx pass
    rx1346_cur."!cursor_pass"(rx1346_pos, "terminator:sym<}>")
    if_null rx1346_debug, debug_973
    rx1346_cur."!cursor_debug"("PASS", "terminator:sym<}>", " at pos=", rx1346_pos)
  debug_973:
    .return (rx1346_cur)
  rx1346_restart:
.annotate 'line', 436
    if_null rx1346_debug, debug_974
    rx1346_cur."!cursor_debug"("NEXT", "terminator:sym<}>")
  debug_974:
  rx1346_fail:
    (rx1346_rep, rx1346_pos, $I10, $P10) = rx1346_cur."!mark_fail"(0)
    lt rx1346_pos, -1, rx1346_done
    eq rx1346_pos, -1, rx1346_fail
    jump $I10
  rx1346_done:
    rx1346_cur."!cursor_fail"()
    if_null rx1346_debug, debug_975
    rx1346_cur."!cursor_debug"("FAIL", "terminator:sym<}>")
  debug_975:
    .return (rx1346_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__terminator:sym<}>"  :subid("92_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1349, "ResizablePMCArray"
    push $P1349, "}"
    .return ($P1349)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control"  :subid("93_1307835824.98345")
    .param pmc param_1351
.annotate 'line', 621
    .lex "self", param_1351
    $P1352 = param_1351."!protoregex"("statement_control")
    .return ($P1352)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control"  :subid("94_1307835824.98345")
    .param pmc param_1354
.annotate 'line', 621
    .lex "self", param_1354
    $P1355 = param_1354."!PREFIX__!protoregex"("statement_control")
    .return ($P1355)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<use>"  :subid("95_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1357_tgt
    .local int rx1357_pos
    .local int rx1357_off
    .local int rx1357_eos
    .local int rx1357_rep
    .local pmc rx1357_cur
    .local pmc rx1357_debug
    (rx1357_cur, rx1357_pos, rx1357_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1357_cur
    .local pmc match
    .lex "$/", match
    length rx1357_eos, rx1357_tgt
    gt rx1357_pos, rx1357_eos, rx1357_done
    set rx1357_off, 0
    lt rx1357_pos, 2, rx1357_start
    sub rx1357_off, rx1357_pos, 1
    substr rx1357_tgt, rx1357_tgt, rx1357_off
  rx1357_start:
    eq $I10, 1, rx1357_restart
    if_null rx1357_debug, debug_976
    rx1357_cur."!cursor_debug"("START", "statement_control:sym<use>")
  debug_976:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1358_done
    goto rxscan1358_scan
  rxscan1358_loop:
    (rx1357_pos) = rx1357_cur."from"()
    inc rx1357_pos
    rx1357_cur."!cursor_from"(rx1357_pos)
    ge rx1357_pos, rx1357_eos, rxscan1358_done
  rxscan1358_scan:
    set_addr $I10, rxscan1358_loop
    rx1357_cur."!mark_push"(0, rx1357_pos, $I10)
  rxscan1358_done:
.annotate 'line', 624
  # rx subcapture "sym"
    set_addr $I10, rxcap_1359_fail
    rx1357_cur."!mark_push"(0, rx1357_pos, $I10)
  # rx literal  "use"
    add $I11, rx1357_pos, 3
    gt $I11, rx1357_eos, rx1357_fail
    sub $I11, rx1357_pos, rx1357_off
    substr $S10, rx1357_tgt, $I11, 3
    ne $S10, "use", rx1357_fail
    add rx1357_pos, 3
    set_addr $I10, rxcap_1359_fail
    ($I12, $I11) = rx1357_cur."!mark_peek"($I10)
    rx1357_cur."!cursor_pos"($I11)
    ($P10) = rx1357_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1357_pos, "")
    rx1357_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1359_done
  rxcap_1359_fail:
    goto rx1357_fail
  rxcap_1359_done:
  # rx charclass s
    ge rx1357_pos, rx1357_eos, rx1357_fail
    sub $I10, rx1357_pos, rx1357_off
    is_cclass $I11, 32, rx1357_tgt, $I10
    unless $I11, rx1357_fail
    inc rx1357_pos
  # rx subrule "ws" subtype=method negate=
    rx1357_cur."!cursor_pos"(rx1357_pos)
    $P10 = rx1357_cur."ws"()
    unless $P10, rx1357_fail
    rx1357_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx1357_cur."!cursor_pos"(rx1357_pos)
    $P10 = rx1357_cur."name"()
    unless $P10, rx1357_fail
    rx1357_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx1357_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1357_cur."!cursor_pos"(rx1357_pos)
    $P10 = rx1357_cur."ws"()
    unless $P10, rx1357_fail
    rx1357_pos = $P10."pos"()
.annotate 'line', 623
  # rx pass
    rx1357_cur."!cursor_pass"(rx1357_pos, "statement_control:sym<use>")
    if_null rx1357_debug, debug_977
    rx1357_cur."!cursor_debug"("PASS", "statement_control:sym<use>", " at pos=", rx1357_pos)
  debug_977:
    .return (rx1357_cur)
  rx1357_restart:
.annotate 'line', 436
    if_null rx1357_debug, debug_978
    rx1357_cur."!cursor_debug"("NEXT", "statement_control:sym<use>")
  debug_978:
  rx1357_fail:
    (rx1357_rep, rx1357_pos, $I10, $P10) = rx1357_cur."!mark_fail"(0)
    lt rx1357_pos, -1, rx1357_done
    eq rx1357_pos, -1, rx1357_fail
    jump $I10
  rx1357_done:
    rx1357_cur."!cursor_fail"()
    if_null rx1357_debug, debug_979
    rx1357_cur."!cursor_debug"("FAIL", "statement_control:sym<use>")
  debug_979:
    .return (rx1357_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<use>"  :subid("96_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1363, "ResizablePMCArray"
    push $P1363, "use"
    .return ($P1363)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<if>"  :subid("97_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1365_tgt
    .local int rx1365_pos
    .local int rx1365_off
    .local int rx1365_eos
    .local int rx1365_rep
    .local pmc rx1365_cur
    .local pmc rx1365_debug
    (rx1365_cur, rx1365_pos, rx1365_tgt, $I10) = self."!cursor_start"()
    rx1365_cur."!cursor_caparray"("xblock", "else")
    .lex unicode:"$\x{a2}", rx1365_cur
    .local pmc match
    .lex "$/", match
    length rx1365_eos, rx1365_tgt
    gt rx1365_pos, rx1365_eos, rx1365_done
    set rx1365_off, 0
    lt rx1365_pos, 2, rx1365_start
    sub rx1365_off, rx1365_pos, 1
    substr rx1365_tgt, rx1365_tgt, rx1365_off
  rx1365_start:
    eq $I10, 1, rx1365_restart
    if_null rx1365_debug, debug_980
    rx1365_cur."!cursor_debug"("START", "statement_control:sym<if>")
  debug_980:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1366_done
    goto rxscan1366_scan
  rxscan1366_loop:
    (rx1365_pos) = rx1365_cur."from"()
    inc rx1365_pos
    rx1365_cur."!cursor_from"(rx1365_pos)
    ge rx1365_pos, rx1365_eos, rxscan1366_done
  rxscan1366_scan:
    set_addr $I10, rxscan1366_loop
    rx1365_cur."!mark_push"(0, rx1365_pos, $I10)
  rxscan1366_done:
.annotate 'line', 628
  # rx subcapture "sym"
    set_addr $I10, rxcap_1367_fail
    rx1365_cur."!mark_push"(0, rx1365_pos, $I10)
  # rx literal  "if"
    add $I11, rx1365_pos, 2
    gt $I11, rx1365_eos, rx1365_fail
    sub $I11, rx1365_pos, rx1365_off
    substr $S10, rx1365_tgt, $I11, 2
    ne $S10, "if", rx1365_fail
    add rx1365_pos, 2
    set_addr $I10, rxcap_1367_fail
    ($I12, $I11) = rx1365_cur."!mark_peek"($I10)
    rx1365_cur."!cursor_pos"($I11)
    ($P10) = rx1365_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1365_pos, "")
    rx1365_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1367_done
  rxcap_1367_fail:
    goto rx1365_fail
  rxcap_1367_done:
  # rx charclass s
    ge rx1365_pos, rx1365_eos, rx1365_fail
    sub $I10, rx1365_pos, rx1365_off
    is_cclass $I11, 32, rx1365_tgt, $I10
    unless $I11, rx1365_fail
    inc rx1365_pos
  # rx subrule "ws" subtype=method negate=
    rx1365_cur."!cursor_pos"(rx1365_pos)
    $P10 = rx1365_cur."ws"()
    unless $P10, rx1365_fail
    rx1365_pos = $P10."pos"()
.annotate 'line', 629
  # rx subrule "xblock" subtype=capture negate=
    rx1365_cur."!cursor_pos"(rx1365_pos)
    $P10 = rx1365_cur."xblock"()
    unless $P10, rx1365_fail
    rx1365_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1365_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1365_cur."!cursor_pos"(rx1365_pos)
    $P10 = rx1365_cur."ws"()
    unless $P10, rx1365_fail
    rx1365_pos = $P10."pos"()
.annotate 'line', 630
  # rx rxquantr1370 ** 0..*
    set_addr $I10, rxquantr1370_done
    rx1365_cur."!mark_push"(0, rx1365_pos, $I10)
  rxquantr1370_loop:
  # rx subrule "ws" subtype=method negate=
    rx1365_cur."!cursor_pos"(rx1365_pos)
    $P10 = rx1365_cur."ws"()
    unless $P10, rx1365_fail
    rx1365_pos = $P10."pos"()
  # rx literal  "elsif"
    add $I11, rx1365_pos, 5
    gt $I11, rx1365_eos, rx1365_fail
    sub $I11, rx1365_pos, rx1365_off
    substr $S10, rx1365_tgt, $I11, 5
    ne $S10, "elsif", rx1365_fail
    add rx1365_pos, 5
  # rx charclass s
    ge rx1365_pos, rx1365_eos, rx1365_fail
    sub $I10, rx1365_pos, rx1365_off
    is_cclass $I11, 32, rx1365_tgt, $I10
    unless $I11, rx1365_fail
    inc rx1365_pos
  # rx subrule "ws" subtype=method negate=
    rx1365_cur."!cursor_pos"(rx1365_pos)
    $P10 = rx1365_cur."ws"()
    unless $P10, rx1365_fail
    rx1365_pos = $P10."pos"()
  # rx subrule "xblock" subtype=capture negate=
    rx1365_cur."!cursor_pos"(rx1365_pos)
    $P10 = rx1365_cur."xblock"()
    unless $P10, rx1365_fail
    rx1365_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1365_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1365_cur."!cursor_pos"(rx1365_pos)
    $P10 = rx1365_cur."ws"()
    unless $P10, rx1365_fail
    rx1365_pos = $P10."pos"()
    set_addr $I10, rxquantr1370_done
    (rx1365_rep) = rx1365_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1370_done
    rx1365_cur."!mark_push"(rx1365_rep, rx1365_pos, $I10)
    goto rxquantr1370_loop
  rxquantr1370_done:
  # rx subrule "ws" subtype=method negate=
    rx1365_cur."!cursor_pos"(rx1365_pos)
    $P10 = rx1365_cur."ws"()
    unless $P10, rx1365_fail
    rx1365_pos = $P10."pos"()
.annotate 'line', 631
  # rx rxquantr1375 ** 0..1
    set_addr $I10, rxquantr1375_done
    rx1365_cur."!mark_push"(0, rx1365_pos, $I10)
  rxquantr1375_loop:
  # rx subrule "ws" subtype=method negate=
    rx1365_cur."!cursor_pos"(rx1365_pos)
    $P10 = rx1365_cur."ws"()
    unless $P10, rx1365_fail
    rx1365_pos = $P10."pos"()
  # rx literal  "else"
    add $I11, rx1365_pos, 4
    gt $I11, rx1365_eos, rx1365_fail
    sub $I11, rx1365_pos, rx1365_off
    substr $S10, rx1365_tgt, $I11, 4
    ne $S10, "else", rx1365_fail
    add rx1365_pos, 4
  # rx charclass s
    ge rx1365_pos, rx1365_eos, rx1365_fail
    sub $I10, rx1365_pos, rx1365_off
    is_cclass $I11, 32, rx1365_tgt, $I10
    unless $I11, rx1365_fail
    inc rx1365_pos
  # rx subrule "ws" subtype=method negate=
    rx1365_cur."!cursor_pos"(rx1365_pos)
    $P10 = rx1365_cur."ws"()
    unless $P10, rx1365_fail
    rx1365_pos = $P10."pos"()
  # rx subrule "pblock" subtype=capture negate=
    rx1365_cur."!cursor_pos"(rx1365_pos)
    $P10 = rx1365_cur."pblock"()
    unless $P10, rx1365_fail
    rx1365_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("else")
    rx1365_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1365_cur."!cursor_pos"(rx1365_pos)
    $P10 = rx1365_cur."ws"()
    unless $P10, rx1365_fail
    rx1365_pos = $P10."pos"()
    set_addr $I10, rxquantr1375_done
    (rx1365_rep) = rx1365_cur."!mark_commit"($I10)
  rxquantr1375_done:
  # rx subrule "ws" subtype=method negate=
    rx1365_cur."!cursor_pos"(rx1365_pos)
    $P10 = rx1365_cur."ws"()
    unless $P10, rx1365_fail
    rx1365_pos = $P10."pos"()
.annotate 'line', 627
  # rx pass
    rx1365_cur."!cursor_pass"(rx1365_pos, "statement_control:sym<if>")
    if_null rx1365_debug, debug_981
    rx1365_cur."!cursor_debug"("PASS", "statement_control:sym<if>", " at pos=", rx1365_pos)
  debug_981:
    .return (rx1365_cur)
  rx1365_restart:
.annotate 'line', 436
    if_null rx1365_debug, debug_982
    rx1365_cur."!cursor_debug"("NEXT", "statement_control:sym<if>")
  debug_982:
  rx1365_fail:
    (rx1365_rep, rx1365_pos, $I10, $P10) = rx1365_cur."!mark_fail"(0)
    lt rx1365_pos, -1, rx1365_done
    eq rx1365_pos, -1, rx1365_fail
    jump $I10
  rx1365_done:
    rx1365_cur."!cursor_fail"()
    if_null rx1365_debug, debug_983
    rx1365_cur."!cursor_debug"("FAIL", "statement_control:sym<if>")
  debug_983:
    .return (rx1365_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<if>"  :subid("98_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1381, "ResizablePMCArray"
    push $P1381, "if"
    .return ($P1381)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<unless>"  :subid("99_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .const 'Sub' $P1391 = "100_1307835824.98345" 
    capture_lex $P1391
    .local string rx1383_tgt
    .local int rx1383_pos
    .local int rx1383_off
    .local int rx1383_eos
    .local int rx1383_rep
    .local pmc rx1383_cur
    .local pmc rx1383_debug
    (rx1383_cur, rx1383_pos, rx1383_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1383_cur
    .local pmc match
    .lex "$/", match
    length rx1383_eos, rx1383_tgt
    gt rx1383_pos, rx1383_eos, rx1383_done
    set rx1383_off, 0
    lt rx1383_pos, 2, rx1383_start
    sub rx1383_off, rx1383_pos, 1
    substr rx1383_tgt, rx1383_tgt, rx1383_off
  rx1383_start:
    eq $I10, 1, rx1383_restart
    if_null rx1383_debug, debug_984
    rx1383_cur."!cursor_debug"("START", "statement_control:sym<unless>")
  debug_984:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1384_done
    goto rxscan1384_scan
  rxscan1384_loop:
    (rx1383_pos) = rx1383_cur."from"()
    inc rx1383_pos
    rx1383_cur."!cursor_from"(rx1383_pos)
    ge rx1383_pos, rx1383_eos, rxscan1384_done
  rxscan1384_scan:
    set_addr $I10, rxscan1384_loop
    rx1383_cur."!mark_push"(0, rx1383_pos, $I10)
  rxscan1384_done:
.annotate 'line', 635
  # rx subcapture "sym"
    set_addr $I10, rxcap_1385_fail
    rx1383_cur."!mark_push"(0, rx1383_pos, $I10)
  # rx literal  "unless"
    add $I11, rx1383_pos, 6
    gt $I11, rx1383_eos, rx1383_fail
    sub $I11, rx1383_pos, rx1383_off
    substr $S10, rx1383_tgt, $I11, 6
    ne $S10, "unless", rx1383_fail
    add rx1383_pos, 6
    set_addr $I10, rxcap_1385_fail
    ($I12, $I11) = rx1383_cur."!mark_peek"($I10)
    rx1383_cur."!cursor_pos"($I11)
    ($P10) = rx1383_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1383_pos, "")
    rx1383_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1385_done
  rxcap_1385_fail:
    goto rx1383_fail
  rxcap_1385_done:
  # rx charclass s
    ge rx1383_pos, rx1383_eos, rx1383_fail
    sub $I10, rx1383_pos, rx1383_off
    is_cclass $I11, 32, rx1383_tgt, $I10
    unless $I11, rx1383_fail
    inc rx1383_pos
  # rx subrule "ws" subtype=method negate=
    rx1383_cur."!cursor_pos"(rx1383_pos)
    $P10 = rx1383_cur."ws"()
    unless $P10, rx1383_fail
    rx1383_pos = $P10."pos"()
.annotate 'line', 636
  # rx subrule "xblock" subtype=capture negate=
    rx1383_cur."!cursor_pos"(rx1383_pos)
    $P10 = rx1383_cur."xblock"()
    unless $P10, rx1383_fail
    rx1383_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1383_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1383_cur."!cursor_pos"(rx1383_pos)
    $P10 = rx1383_cur."ws"()
    unless $P10, rx1383_fail
    rx1383_pos = $P10."pos"()
  alt1388_0:
.annotate 'line', 637
    set_addr $I10, alt1388_1
    rx1383_cur."!mark_push"(0, rx1383_pos, $I10)
  # rx subrule "ws" subtype=method negate=
    rx1383_cur."!cursor_pos"(rx1383_pos)
    $P10 = rx1383_cur."ws"()
    unless $P10, rx1383_fail
    rx1383_pos = $P10."pos"()
  # rx subrule "before" subtype=zerowidth negate=1
    rx1383_cur."!cursor_pos"(rx1383_pos)
    .const 'Sub' $P1391 = "100_1307835824.98345" 
    capture_lex $P1391
    $P10 = rx1383_cur."before"($P1391)
    if $P10, rx1383_fail
  # rx subrule "ws" subtype=method negate=
    rx1383_cur."!cursor_pos"(rx1383_pos)
    $P10 = rx1383_cur."ws"()
    unless $P10, rx1383_fail
    rx1383_pos = $P10."pos"()
    goto alt1388_end
  alt1388_1:
  # rx subrule "ws" subtype=method negate=
    rx1383_cur."!cursor_pos"(rx1383_pos)
    $P10 = rx1383_cur."ws"()
    unless $P10, rx1383_fail
    rx1383_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx1383_cur."!cursor_pos"(rx1383_pos)
    $P10 = rx1383_cur."panic"("unless does not take \"else\", please rewrite using \"if\"")
    unless $P10, rx1383_fail
    rx1383_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1383_cur."!cursor_pos"(rx1383_pos)
    $P10 = rx1383_cur."ws"()
    unless $P10, rx1383_fail
    rx1383_pos = $P10."pos"()
  alt1388_end:
  # rx subrule "ws" subtype=method negate=
    rx1383_cur."!cursor_pos"(rx1383_pos)
    $P10 = rx1383_cur."ws"()
    unless $P10, rx1383_fail
    rx1383_pos = $P10."pos"()
.annotate 'line', 634
  # rx pass
    rx1383_cur."!cursor_pass"(rx1383_pos, "statement_control:sym<unless>")
    if_null rx1383_debug, debug_989
    rx1383_cur."!cursor_debug"("PASS", "statement_control:sym<unless>", " at pos=", rx1383_pos)
  debug_989:
    .return (rx1383_cur)
  rx1383_restart:
.annotate 'line', 436
    if_null rx1383_debug, debug_990
    rx1383_cur."!cursor_debug"("NEXT", "statement_control:sym<unless>")
  debug_990:
  rx1383_fail:
    (rx1383_rep, rx1383_pos, $I10, $P10) = rx1383_cur."!mark_fail"(0)
    lt rx1383_pos, -1, rx1383_done
    eq rx1383_pos, -1, rx1383_fail
    jump $I10
  rx1383_done:
    rx1383_cur."!cursor_fail"()
    if_null rx1383_debug, debug_991
    rx1383_cur."!cursor_debug"("FAIL", "statement_control:sym<unless>")
  debug_991:
    .return (rx1383_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1390"  :anon :subid("100_1307835824.98345") :method :outer("99_1307835824.98345")
.annotate 'line', 637
    .local string rx1392_tgt
    .local int rx1392_pos
    .local int rx1392_off
    .local int rx1392_eos
    .local int rx1392_rep
    .local pmc rx1392_cur
    .local pmc rx1392_debug
    (rx1392_cur, rx1392_pos, rx1392_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1392_cur
    .local pmc match
    .lex "$/", match
    length rx1392_eos, rx1392_tgt
    gt rx1392_pos, rx1392_eos, rx1392_done
    set rx1392_off, 0
    lt rx1392_pos, 2, rx1392_start
    sub rx1392_off, rx1392_pos, 1
    substr rx1392_tgt, rx1392_tgt, rx1392_off
  rx1392_start:
    eq $I10, 1, rx1392_restart
    if_null rx1392_debug, debug_985
    rx1392_cur."!cursor_debug"("START", "")
  debug_985:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1393_done
    goto rxscan1393_scan
  rxscan1393_loop:
    (rx1392_pos) = rx1392_cur."from"()
    inc rx1392_pos
    rx1392_cur."!cursor_from"(rx1392_pos)
    ge rx1392_pos, rx1392_eos, rxscan1393_done
  rxscan1393_scan:
    set_addr $I10, rxscan1393_loop
    rx1392_cur."!mark_push"(0, rx1392_pos, $I10)
  rxscan1393_done:
  # rx literal  "else"
    add $I11, rx1392_pos, 4
    gt $I11, rx1392_eos, rx1392_fail
    sub $I11, rx1392_pos, rx1392_off
    substr $S10, rx1392_tgt, $I11, 4
    ne $S10, "else", rx1392_fail
    add rx1392_pos, 4
  # rx pass
    rx1392_cur."!cursor_pass"(rx1392_pos, "")
    if_null rx1392_debug, debug_986
    rx1392_cur."!cursor_debug"("PASS", "", " at pos=", rx1392_pos)
  debug_986:
    .return (rx1392_cur)
  rx1392_restart:
    if_null rx1392_debug, debug_987
    rx1392_cur."!cursor_debug"("NEXT", "")
  debug_987:
  rx1392_fail:
    (rx1392_rep, rx1392_pos, $I10, $P10) = rx1392_cur."!mark_fail"(0)
    lt rx1392_pos, -1, rx1392_done
    eq rx1392_pos, -1, rx1392_fail
    jump $I10
  rx1392_done:
    rx1392_cur."!cursor_fail"()
    if_null rx1392_debug, debug_988
    rx1392_cur."!cursor_debug"("FAIL", "")
  debug_988:
    .return (rx1392_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<unless>"  :subid("101_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1399, "ResizablePMCArray"
    push $P1399, "unless"
    .return ($P1399)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<while>"  :subid("102_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1401_tgt
    .local int rx1401_pos
    .local int rx1401_off
    .local int rx1401_eos
    .local int rx1401_rep
    .local pmc rx1401_cur
    .local pmc rx1401_debug
    (rx1401_cur, rx1401_pos, rx1401_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1401_cur
    .local pmc match
    .lex "$/", match
    length rx1401_eos, rx1401_tgt
    gt rx1401_pos, rx1401_eos, rx1401_done
    set rx1401_off, 0
    lt rx1401_pos, 2, rx1401_start
    sub rx1401_off, rx1401_pos, 1
    substr rx1401_tgt, rx1401_tgt, rx1401_off
  rx1401_start:
    eq $I10, 1, rx1401_restart
    if_null rx1401_debug, debug_992
    rx1401_cur."!cursor_debug"("START", "statement_control:sym<while>")
  debug_992:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1402_done
    goto rxscan1402_scan
  rxscan1402_loop:
    (rx1401_pos) = rx1401_cur."from"()
    inc rx1401_pos
    rx1401_cur."!cursor_from"(rx1401_pos)
    ge rx1401_pos, rx1401_eos, rxscan1402_done
  rxscan1402_scan:
    set_addr $I10, rxscan1402_loop
    rx1401_cur."!mark_push"(0, rx1401_pos, $I10)
  rxscan1402_done:
.annotate 'line', 641
  # rx subcapture "sym"
    set_addr $I10, rxcap_1404_fail
    rx1401_cur."!mark_push"(0, rx1401_pos, $I10)
  alt1403_0:
    set_addr $I10, alt1403_1
    rx1401_cur."!mark_push"(0, rx1401_pos, $I10)
  # rx literal  "while"
    add $I11, rx1401_pos, 5
    gt $I11, rx1401_eos, rx1401_fail
    sub $I11, rx1401_pos, rx1401_off
    substr $S10, rx1401_tgt, $I11, 5
    ne $S10, "while", rx1401_fail
    add rx1401_pos, 5
    goto alt1403_end
  alt1403_1:
  # rx literal  "until"
    add $I11, rx1401_pos, 5
    gt $I11, rx1401_eos, rx1401_fail
    sub $I11, rx1401_pos, rx1401_off
    substr $S10, rx1401_tgt, $I11, 5
    ne $S10, "until", rx1401_fail
    add rx1401_pos, 5
  alt1403_end:
    set_addr $I10, rxcap_1404_fail
    ($I12, $I11) = rx1401_cur."!mark_peek"($I10)
    rx1401_cur."!cursor_pos"($I11)
    ($P10) = rx1401_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1401_pos, "")
    rx1401_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1404_done
  rxcap_1404_fail:
    goto rx1401_fail
  rxcap_1404_done:
  # rx charclass s
    ge rx1401_pos, rx1401_eos, rx1401_fail
    sub $I10, rx1401_pos, rx1401_off
    is_cclass $I11, 32, rx1401_tgt, $I10
    unless $I11, rx1401_fail
    inc rx1401_pos
  # rx subrule "ws" subtype=method negate=
    rx1401_cur."!cursor_pos"(rx1401_pos)
    $P10 = rx1401_cur."ws"()
    unless $P10, rx1401_fail
    rx1401_pos = $P10."pos"()
.annotate 'line', 642
  # rx subrule "xblock" subtype=capture negate=
    rx1401_cur."!cursor_pos"(rx1401_pos)
    $P10 = rx1401_cur."xblock"()
    unless $P10, rx1401_fail
    rx1401_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1401_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1401_cur."!cursor_pos"(rx1401_pos)
    $P10 = rx1401_cur."ws"()
    unless $P10, rx1401_fail
    rx1401_pos = $P10."pos"()
.annotate 'line', 640
  # rx pass
    rx1401_cur."!cursor_pass"(rx1401_pos, "statement_control:sym<while>")
    if_null rx1401_debug, debug_993
    rx1401_cur."!cursor_debug"("PASS", "statement_control:sym<while>", " at pos=", rx1401_pos)
  debug_993:
    .return (rx1401_cur)
  rx1401_restart:
.annotate 'line', 436
    if_null rx1401_debug, debug_994
    rx1401_cur."!cursor_debug"("NEXT", "statement_control:sym<while>")
  debug_994:
  rx1401_fail:
    (rx1401_rep, rx1401_pos, $I10, $P10) = rx1401_cur."!mark_fail"(0)
    lt rx1401_pos, -1, rx1401_done
    eq rx1401_pos, -1, rx1401_fail
    jump $I10
  rx1401_done:
    rx1401_cur."!cursor_fail"()
    if_null rx1401_debug, debug_995
    rx1401_cur."!cursor_debug"("FAIL", "statement_control:sym<while>")
  debug_995:
    .return (rx1401_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<while>"  :subid("103_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1408, "ResizablePMCArray"
    push $P1408, "until"
    push $P1408, "while"
    .return ($P1408)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<repeat>"  :subid("104_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1410_tgt
    .local int rx1410_pos
    .local int rx1410_off
    .local int rx1410_eos
    .local int rx1410_rep
    .local pmc rx1410_cur
    .local pmc rx1410_debug
    (rx1410_cur, rx1410_pos, rx1410_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1410_cur
    .local pmc match
    .lex "$/", match
    length rx1410_eos, rx1410_tgt
    gt rx1410_pos, rx1410_eos, rx1410_done
    set rx1410_off, 0
    lt rx1410_pos, 2, rx1410_start
    sub rx1410_off, rx1410_pos, 1
    substr rx1410_tgt, rx1410_tgt, rx1410_off
  rx1410_start:
    eq $I10, 1, rx1410_restart
    if_null rx1410_debug, debug_996
    rx1410_cur."!cursor_debug"("START", "statement_control:sym<repeat>")
  debug_996:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1411_done
    goto rxscan1411_scan
  rxscan1411_loop:
    (rx1410_pos) = rx1410_cur."from"()
    inc rx1410_pos
    rx1410_cur."!cursor_from"(rx1410_pos)
    ge rx1410_pos, rx1410_eos, rxscan1411_done
  rxscan1411_scan:
    set_addr $I10, rxscan1411_loop
    rx1410_cur."!mark_push"(0, rx1410_pos, $I10)
  rxscan1411_done:
.annotate 'line', 646
  # rx subcapture "sym"
    set_addr $I10, rxcap_1412_fail
    rx1410_cur."!mark_push"(0, rx1410_pos, $I10)
  # rx literal  "repeat"
    add $I11, rx1410_pos, 6
    gt $I11, rx1410_eos, rx1410_fail
    sub $I11, rx1410_pos, rx1410_off
    substr $S10, rx1410_tgt, $I11, 6
    ne $S10, "repeat", rx1410_fail
    add rx1410_pos, 6
    set_addr $I10, rxcap_1412_fail
    ($I12, $I11) = rx1410_cur."!mark_peek"($I10)
    rx1410_cur."!cursor_pos"($I11)
    ($P10) = rx1410_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1410_pos, "")
    rx1410_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1412_done
  rxcap_1412_fail:
    goto rx1410_fail
  rxcap_1412_done:
  # rx charclass s
    ge rx1410_pos, rx1410_eos, rx1410_fail
    sub $I10, rx1410_pos, rx1410_off
    is_cclass $I11, 32, rx1410_tgt, $I10
    unless $I11, rx1410_fail
    inc rx1410_pos
  # rx subrule "ws" subtype=method negate=
    rx1410_cur."!cursor_pos"(rx1410_pos)
    $P10 = rx1410_cur."ws"()
    unless $P10, rx1410_fail
    rx1410_pos = $P10."pos"()
  alt1414_0:
.annotate 'line', 647
    set_addr $I10, alt1414_1
    rx1410_cur."!mark_push"(0, rx1410_pos, $I10)
.annotate 'line', 648
  # rx subrule "ws" subtype=method negate=
    rx1410_cur."!cursor_pos"(rx1410_pos)
    $P10 = rx1410_cur."ws"()
    unless $P10, rx1410_fail
    rx1410_pos = $P10."pos"()
  # rx subcapture "wu"
    set_addr $I10, rxcap_1417_fail
    rx1410_cur."!mark_push"(0, rx1410_pos, $I10)
  alt1416_0:
    set_addr $I10, alt1416_1
    rx1410_cur."!mark_push"(0, rx1410_pos, $I10)
  # rx literal  "while"
    add $I11, rx1410_pos, 5
    gt $I11, rx1410_eos, rx1410_fail
    sub $I11, rx1410_pos, rx1410_off
    substr $S10, rx1410_tgt, $I11, 5
    ne $S10, "while", rx1410_fail
    add rx1410_pos, 5
    goto alt1416_end
  alt1416_1:
  # rx literal  "until"
    add $I11, rx1410_pos, 5
    gt $I11, rx1410_eos, rx1410_fail
    sub $I11, rx1410_pos, rx1410_off
    substr $S10, rx1410_tgt, $I11, 5
    ne $S10, "until", rx1410_fail
    add rx1410_pos, 5
  alt1416_end:
    set_addr $I10, rxcap_1417_fail
    ($I12, $I11) = rx1410_cur."!mark_peek"($I10)
    rx1410_cur."!cursor_pos"($I11)
    ($P10) = rx1410_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1410_pos, "")
    rx1410_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("wu")
    goto rxcap_1417_done
  rxcap_1417_fail:
    goto rx1410_fail
  rxcap_1417_done:
  # rx charclass s
    ge rx1410_pos, rx1410_eos, rx1410_fail
    sub $I10, rx1410_pos, rx1410_off
    is_cclass $I11, 32, rx1410_tgt, $I10
    unless $I11, rx1410_fail
    inc rx1410_pos
  # rx subrule "ws" subtype=method negate=
    rx1410_cur."!cursor_pos"(rx1410_pos)
    $P10 = rx1410_cur."ws"()
    unless $P10, rx1410_fail
    rx1410_pos = $P10."pos"()
  # rx subrule "xblock" subtype=capture negate=
    rx1410_cur."!cursor_pos"(rx1410_pos)
    $P10 = rx1410_cur."xblock"()
    unless $P10, rx1410_fail
    rx1410_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1410_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1410_cur."!cursor_pos"(rx1410_pos)
    $P10 = rx1410_cur."ws"()
    unless $P10, rx1410_fail
    rx1410_pos = $P10."pos"()
    goto alt1414_end
  alt1414_1:
.annotate 'line', 649
  # rx subrule "ws" subtype=method negate=
    rx1410_cur."!cursor_pos"(rx1410_pos)
    $P10 = rx1410_cur."ws"()
    unless $P10, rx1410_fail
    rx1410_pos = $P10."pos"()
  # rx subrule "pblock" subtype=capture negate=
    rx1410_cur."!cursor_pos"(rx1410_pos)
    $P10 = rx1410_cur."pblock"()
    unless $P10, rx1410_fail
    rx1410_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx1410_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1410_cur."!cursor_pos"(rx1410_pos)
    $P10 = rx1410_cur."ws"()
    unless $P10, rx1410_fail
    rx1410_pos = $P10."pos"()
  # rx subcapture "wu"
    set_addr $I10, rxcap_1423_fail
    rx1410_cur."!mark_push"(0, rx1410_pos, $I10)
  alt1422_0:
    set_addr $I10, alt1422_1
    rx1410_cur."!mark_push"(0, rx1410_pos, $I10)
  # rx literal  "while"
    add $I11, rx1410_pos, 5
    gt $I11, rx1410_eos, rx1410_fail
    sub $I11, rx1410_pos, rx1410_off
    substr $S10, rx1410_tgt, $I11, 5
    ne $S10, "while", rx1410_fail
    add rx1410_pos, 5
    goto alt1422_end
  alt1422_1:
  # rx literal  "until"
    add $I11, rx1410_pos, 5
    gt $I11, rx1410_eos, rx1410_fail
    sub $I11, rx1410_pos, rx1410_off
    substr $S10, rx1410_tgt, $I11, 5
    ne $S10, "until", rx1410_fail
    add rx1410_pos, 5
  alt1422_end:
    set_addr $I10, rxcap_1423_fail
    ($I12, $I11) = rx1410_cur."!mark_peek"($I10)
    rx1410_cur."!cursor_pos"($I11)
    ($P10) = rx1410_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1410_pos, "")
    rx1410_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("wu")
    goto rxcap_1423_done
  rxcap_1423_fail:
    goto rx1410_fail
  rxcap_1423_done:
  # rx charclass s
    ge rx1410_pos, rx1410_eos, rx1410_fail
    sub $I10, rx1410_pos, rx1410_off
    is_cclass $I11, 32, rx1410_tgt, $I10
    unless $I11, rx1410_fail
    inc rx1410_pos
  # rx subrule "ws" subtype=method negate=
    rx1410_cur."!cursor_pos"(rx1410_pos)
    $P10 = rx1410_cur."ws"()
    unless $P10, rx1410_fail
    rx1410_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1410_cur."!cursor_pos"(rx1410_pos)
    $P10 = rx1410_cur."EXPR"()
    unless $P10, rx1410_fail
    rx1410_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx1410_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1410_cur."!cursor_pos"(rx1410_pos)
    $P10 = rx1410_cur."ws"()
    unless $P10, rx1410_fail
    rx1410_pos = $P10."pos"()
  alt1414_end:
.annotate 'line', 650
  # rx subrule "ws" subtype=method negate=
    rx1410_cur."!cursor_pos"(rx1410_pos)
    $P10 = rx1410_cur."ws"()
    unless $P10, rx1410_fail
    rx1410_pos = $P10."pos"()
.annotate 'line', 645
  # rx pass
    rx1410_cur."!cursor_pass"(rx1410_pos, "statement_control:sym<repeat>")
    if_null rx1410_debug, debug_997
    rx1410_cur."!cursor_debug"("PASS", "statement_control:sym<repeat>", " at pos=", rx1410_pos)
  debug_997:
    .return (rx1410_cur)
  rx1410_restart:
.annotate 'line', 436
    if_null rx1410_debug, debug_998
    rx1410_cur."!cursor_debug"("NEXT", "statement_control:sym<repeat>")
  debug_998:
  rx1410_fail:
    (rx1410_rep, rx1410_pos, $I10, $P10) = rx1410_cur."!mark_fail"(0)
    lt rx1410_pos, -1, rx1410_done
    eq rx1410_pos, -1, rx1410_fail
    jump $I10
  rx1410_done:
    rx1410_cur."!cursor_fail"()
    if_null rx1410_debug, debug_999
    rx1410_cur."!cursor_debug"("FAIL", "statement_control:sym<repeat>")
  debug_999:
    .return (rx1410_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<repeat>"  :subid("105_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1428, "ResizablePMCArray"
    push $P1428, "repeat"
    .return ($P1428)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<for>"  :subid("106_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1430_tgt
    .local int rx1430_pos
    .local int rx1430_off
    .local int rx1430_eos
    .local int rx1430_rep
    .local pmc rx1430_cur
    .local pmc rx1430_debug
    (rx1430_cur, rx1430_pos, rx1430_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1430_cur
    .local pmc match
    .lex "$/", match
    length rx1430_eos, rx1430_tgt
    gt rx1430_pos, rx1430_eos, rx1430_done
    set rx1430_off, 0
    lt rx1430_pos, 2, rx1430_start
    sub rx1430_off, rx1430_pos, 1
    substr rx1430_tgt, rx1430_tgt, rx1430_off
  rx1430_start:
    eq $I10, 1, rx1430_restart
    if_null rx1430_debug, debug_1000
    rx1430_cur."!cursor_debug"("START", "statement_control:sym<for>")
  debug_1000:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1431_done
    goto rxscan1431_scan
  rxscan1431_loop:
    (rx1430_pos) = rx1430_cur."from"()
    inc rx1430_pos
    rx1430_cur."!cursor_from"(rx1430_pos)
    ge rx1430_pos, rx1430_eos, rxscan1431_done
  rxscan1431_scan:
    set_addr $I10, rxscan1431_loop
    rx1430_cur."!mark_push"(0, rx1430_pos, $I10)
  rxscan1431_done:
.annotate 'line', 654
  # rx subcapture "sym"
    set_addr $I10, rxcap_1432_fail
    rx1430_cur."!mark_push"(0, rx1430_pos, $I10)
  # rx literal  "for"
    add $I11, rx1430_pos, 3
    gt $I11, rx1430_eos, rx1430_fail
    sub $I11, rx1430_pos, rx1430_off
    substr $S10, rx1430_tgt, $I11, 3
    ne $S10, "for", rx1430_fail
    add rx1430_pos, 3
    set_addr $I10, rxcap_1432_fail
    ($I12, $I11) = rx1430_cur."!mark_peek"($I10)
    rx1430_cur."!cursor_pos"($I11)
    ($P10) = rx1430_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1430_pos, "")
    rx1430_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1432_done
  rxcap_1432_fail:
    goto rx1430_fail
  rxcap_1432_done:
  # rx charclass s
    ge rx1430_pos, rx1430_eos, rx1430_fail
    sub $I10, rx1430_pos, rx1430_off
    is_cclass $I11, 32, rx1430_tgt, $I10
    unless $I11, rx1430_fail
    inc rx1430_pos
  # rx subrule "ws" subtype=method negate=
    rx1430_cur."!cursor_pos"(rx1430_pos)
    $P10 = rx1430_cur."ws"()
    unless $P10, rx1430_fail
    rx1430_pos = $P10."pos"()
.annotate 'line', 655
  # rx subrule "xblock" subtype=capture negate=
    rx1430_cur."!cursor_pos"(rx1430_pos)
    $P10 = rx1430_cur."xblock"()
    unless $P10, rx1430_fail
    rx1430_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("xblock")
    rx1430_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1430_cur."!cursor_pos"(rx1430_pos)
    $P10 = rx1430_cur."ws"()
    unless $P10, rx1430_fail
    rx1430_pos = $P10."pos"()
.annotate 'line', 653
  # rx pass
    rx1430_cur."!cursor_pass"(rx1430_pos, "statement_control:sym<for>")
    if_null rx1430_debug, debug_1001
    rx1430_cur."!cursor_debug"("PASS", "statement_control:sym<for>", " at pos=", rx1430_pos)
  debug_1001:
    .return (rx1430_cur)
  rx1430_restart:
.annotate 'line', 436
    if_null rx1430_debug, debug_1002
    rx1430_cur."!cursor_debug"("NEXT", "statement_control:sym<for>")
  debug_1002:
  rx1430_fail:
    (rx1430_rep, rx1430_pos, $I10, $P10) = rx1430_cur."!mark_fail"(0)
    lt rx1430_pos, -1, rx1430_done
    eq rx1430_pos, -1, rx1430_fail
    jump $I10
  rx1430_done:
    rx1430_cur."!cursor_fail"()
    if_null rx1430_debug, debug_1003
    rx1430_cur."!cursor_debug"("FAIL", "statement_control:sym<for>")
  debug_1003:
    .return (rx1430_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<for>"  :subid("107_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1436, "ResizablePMCArray"
    push $P1436, "for"
    .return ($P1436)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<CATCH>"  :subid("108_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1438_tgt
    .local int rx1438_pos
    .local int rx1438_off
    .local int rx1438_eos
    .local int rx1438_rep
    .local pmc rx1438_cur
    .local pmc rx1438_debug
    (rx1438_cur, rx1438_pos, rx1438_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1438_cur
    .local pmc match
    .lex "$/", match
    length rx1438_eos, rx1438_tgt
    gt rx1438_pos, rx1438_eos, rx1438_done
    set rx1438_off, 0
    lt rx1438_pos, 2, rx1438_start
    sub rx1438_off, rx1438_pos, 1
    substr rx1438_tgt, rx1438_tgt, rx1438_off
  rx1438_start:
    eq $I10, 1, rx1438_restart
    if_null rx1438_debug, debug_1004
    rx1438_cur."!cursor_debug"("START", "statement_control:sym<CATCH>")
  debug_1004:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1439_done
    goto rxscan1439_scan
  rxscan1439_loop:
    (rx1438_pos) = rx1438_cur."from"()
    inc rx1438_pos
    rx1438_cur."!cursor_from"(rx1438_pos)
    ge rx1438_pos, rx1438_eos, rxscan1439_done
  rxscan1439_scan:
    set_addr $I10, rxscan1439_loop
    rx1438_cur."!mark_push"(0, rx1438_pos, $I10)
  rxscan1439_done:
.annotate 'line', 659
  # rx subcapture "sym"
    set_addr $I10, rxcap_1440_fail
    rx1438_cur."!mark_push"(0, rx1438_pos, $I10)
  # rx literal  "CATCH"
    add $I11, rx1438_pos, 5
    gt $I11, rx1438_eos, rx1438_fail
    sub $I11, rx1438_pos, rx1438_off
    substr $S10, rx1438_tgt, $I11, 5
    ne $S10, "CATCH", rx1438_fail
    add rx1438_pos, 5
    set_addr $I10, rxcap_1440_fail
    ($I12, $I11) = rx1438_cur."!mark_peek"($I10)
    rx1438_cur."!cursor_pos"($I11)
    ($P10) = rx1438_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1438_pos, "")
    rx1438_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1440_done
  rxcap_1440_fail:
    goto rx1438_fail
  rxcap_1440_done:
  # rx charclass s
    ge rx1438_pos, rx1438_eos, rx1438_fail
    sub $I10, rx1438_pos, rx1438_off
    is_cclass $I11, 32, rx1438_tgt, $I10
    unless $I11, rx1438_fail
    inc rx1438_pos
  # rx subrule "ws" subtype=method negate=
    rx1438_cur."!cursor_pos"(rx1438_pos)
    $P10 = rx1438_cur."ws"()
    unless $P10, rx1438_fail
    rx1438_pos = $P10."pos"()
.annotate 'line', 660
  # rx subrule "block" subtype=capture negate=
    rx1438_cur."!cursor_pos"(rx1438_pos)
    $P10 = rx1438_cur."block"()
    unless $P10, rx1438_fail
    rx1438_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx1438_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1438_cur."!cursor_pos"(rx1438_pos)
    $P10 = rx1438_cur."ws"()
    unless $P10, rx1438_fail
    rx1438_pos = $P10."pos"()
.annotate 'line', 658
  # rx pass
    rx1438_cur."!cursor_pass"(rx1438_pos, "statement_control:sym<CATCH>")
    if_null rx1438_debug, debug_1005
    rx1438_cur."!cursor_debug"("PASS", "statement_control:sym<CATCH>", " at pos=", rx1438_pos)
  debug_1005:
    .return (rx1438_cur)
  rx1438_restart:
.annotate 'line', 436
    if_null rx1438_debug, debug_1006
    rx1438_cur."!cursor_debug"("NEXT", "statement_control:sym<CATCH>")
  debug_1006:
  rx1438_fail:
    (rx1438_rep, rx1438_pos, $I10, $P10) = rx1438_cur."!mark_fail"(0)
    lt rx1438_pos, -1, rx1438_done
    eq rx1438_pos, -1, rx1438_fail
    jump $I10
  rx1438_done:
    rx1438_cur."!cursor_fail"()
    if_null rx1438_debug, debug_1007
    rx1438_cur."!cursor_debug"("FAIL", "statement_control:sym<CATCH>")
  debug_1007:
    .return (rx1438_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<CATCH>"  :subid("109_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1444, "ResizablePMCArray"
    push $P1444, "CATCH"
    .return ($P1444)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_control:sym<CONTROL>"  :subid("110_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1446_tgt
    .local int rx1446_pos
    .local int rx1446_off
    .local int rx1446_eos
    .local int rx1446_rep
    .local pmc rx1446_cur
    .local pmc rx1446_debug
    (rx1446_cur, rx1446_pos, rx1446_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1446_cur
    .local pmc match
    .lex "$/", match
    length rx1446_eos, rx1446_tgt
    gt rx1446_pos, rx1446_eos, rx1446_done
    set rx1446_off, 0
    lt rx1446_pos, 2, rx1446_start
    sub rx1446_off, rx1446_pos, 1
    substr rx1446_tgt, rx1446_tgt, rx1446_off
  rx1446_start:
    eq $I10, 1, rx1446_restart
    if_null rx1446_debug, debug_1008
    rx1446_cur."!cursor_debug"("START", "statement_control:sym<CONTROL>")
  debug_1008:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1447_done
    goto rxscan1447_scan
  rxscan1447_loop:
    (rx1446_pos) = rx1446_cur."from"()
    inc rx1446_pos
    rx1446_cur."!cursor_from"(rx1446_pos)
    ge rx1446_pos, rx1446_eos, rxscan1447_done
  rxscan1447_scan:
    set_addr $I10, rxscan1447_loop
    rx1446_cur."!mark_push"(0, rx1446_pos, $I10)
  rxscan1447_done:
.annotate 'line', 664
  # rx subcapture "sym"
    set_addr $I10, rxcap_1448_fail
    rx1446_cur."!mark_push"(0, rx1446_pos, $I10)
  # rx literal  "CONTROL"
    add $I11, rx1446_pos, 7
    gt $I11, rx1446_eos, rx1446_fail
    sub $I11, rx1446_pos, rx1446_off
    substr $S10, rx1446_tgt, $I11, 7
    ne $S10, "CONTROL", rx1446_fail
    add rx1446_pos, 7
    set_addr $I10, rxcap_1448_fail
    ($I12, $I11) = rx1446_cur."!mark_peek"($I10)
    rx1446_cur."!cursor_pos"($I11)
    ($P10) = rx1446_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1446_pos, "")
    rx1446_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1448_done
  rxcap_1448_fail:
    goto rx1446_fail
  rxcap_1448_done:
  # rx charclass s
    ge rx1446_pos, rx1446_eos, rx1446_fail
    sub $I10, rx1446_pos, rx1446_off
    is_cclass $I11, 32, rx1446_tgt, $I10
    unless $I11, rx1446_fail
    inc rx1446_pos
  # rx subrule "ws" subtype=method negate=
    rx1446_cur."!cursor_pos"(rx1446_pos)
    $P10 = rx1446_cur."ws"()
    unless $P10, rx1446_fail
    rx1446_pos = $P10."pos"()
.annotate 'line', 665
  # rx subrule "block" subtype=capture negate=
    rx1446_cur."!cursor_pos"(rx1446_pos)
    $P10 = rx1446_cur."block"()
    unless $P10, rx1446_fail
    rx1446_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx1446_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1446_cur."!cursor_pos"(rx1446_pos)
    $P10 = rx1446_cur."ws"()
    unless $P10, rx1446_fail
    rx1446_pos = $P10."pos"()
.annotate 'line', 663
  # rx pass
    rx1446_cur."!cursor_pass"(rx1446_pos, "statement_control:sym<CONTROL>")
    if_null rx1446_debug, debug_1009
    rx1446_cur."!cursor_debug"("PASS", "statement_control:sym<CONTROL>", " at pos=", rx1446_pos)
  debug_1009:
    .return (rx1446_cur)
  rx1446_restart:
.annotate 'line', 436
    if_null rx1446_debug, debug_1010
    rx1446_cur."!cursor_debug"("NEXT", "statement_control:sym<CONTROL>")
  debug_1010:
  rx1446_fail:
    (rx1446_rep, rx1446_pos, $I10, $P10) = rx1446_cur."!mark_fail"(0)
    lt rx1446_pos, -1, rx1446_done
    eq rx1446_pos, -1, rx1446_fail
    jump $I10
  rx1446_done:
    rx1446_cur."!cursor_fail"()
    if_null rx1446_debug, debug_1011
    rx1446_cur."!cursor_debug"("FAIL", "statement_control:sym<CONTROL>")
  debug_1011:
    .return (rx1446_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_control:sym<CONTROL>"  :subid("111_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1452, "ResizablePMCArray"
    push $P1452, "CONTROL"
    .return ($P1452)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix"  :subid("112_1307835824.98345")
    .param pmc param_1454
.annotate 'line', 668
    .lex "self", param_1454
    $P1455 = param_1454."!protoregex"("statement_prefix")
    .return ($P1455)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_prefix"  :subid("113_1307835824.98345")
    .param pmc param_1457
.annotate 'line', 668
    .lex "self", param_1457
    $P1458 = param_1457."!PREFIX__!protoregex"("statement_prefix")
    .return ($P1458)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix:sym<INIT>"  :subid("114_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1460_tgt
    .local int rx1460_pos
    .local int rx1460_off
    .local int rx1460_eos
    .local int rx1460_rep
    .local pmc rx1460_cur
    .local pmc rx1460_debug
    (rx1460_cur, rx1460_pos, rx1460_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1460_cur
    .local pmc match
    .lex "$/", match
    length rx1460_eos, rx1460_tgt
    gt rx1460_pos, rx1460_eos, rx1460_done
    set rx1460_off, 0
    lt rx1460_pos, 2, rx1460_start
    sub rx1460_off, rx1460_pos, 1
    substr rx1460_tgt, rx1460_tgt, rx1460_off
  rx1460_start:
    eq $I10, 1, rx1460_restart
    if_null rx1460_debug, debug_1012
    rx1460_cur."!cursor_debug"("START", "statement_prefix:sym<INIT>")
  debug_1012:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1461_done
    goto rxscan1461_scan
  rxscan1461_loop:
    (rx1460_pos) = rx1460_cur."from"()
    inc rx1460_pos
    rx1460_cur."!cursor_from"(rx1460_pos)
    ge rx1460_pos, rx1460_eos, rxscan1461_done
  rxscan1461_scan:
    set_addr $I10, rxscan1461_loop
    rx1460_cur."!mark_push"(0, rx1460_pos, $I10)
  rxscan1461_done:
.annotate 'line', 669
  # rx subcapture "sym"
    set_addr $I10, rxcap_1462_fail
    rx1460_cur."!mark_push"(0, rx1460_pos, $I10)
  # rx literal  "INIT"
    add $I11, rx1460_pos, 4
    gt $I11, rx1460_eos, rx1460_fail
    sub $I11, rx1460_pos, rx1460_off
    substr $S10, rx1460_tgt, $I11, 4
    ne $S10, "INIT", rx1460_fail
    add rx1460_pos, 4
    set_addr $I10, rxcap_1462_fail
    ($I12, $I11) = rx1460_cur."!mark_peek"($I10)
    rx1460_cur."!cursor_pos"($I11)
    ($P10) = rx1460_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1460_pos, "")
    rx1460_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1462_done
  rxcap_1462_fail:
    goto rx1460_fail
  rxcap_1462_done:
  # rx subrule "blorst" subtype=capture negate=
    rx1460_cur."!cursor_pos"(rx1460_pos)
    $P10 = rx1460_cur."blorst"()
    unless $P10, rx1460_fail
    rx1460_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blorst")
    rx1460_pos = $P10."pos"()
  # rx pass
    rx1460_cur."!cursor_pass"(rx1460_pos, "statement_prefix:sym<INIT>")
    if_null rx1460_debug, debug_1013
    rx1460_cur."!cursor_debug"("PASS", "statement_prefix:sym<INIT>", " at pos=", rx1460_pos)
  debug_1013:
    .return (rx1460_cur)
  rx1460_restart:
.annotate 'line', 436
    if_null rx1460_debug, debug_1014
    rx1460_cur."!cursor_debug"("NEXT", "statement_prefix:sym<INIT>")
  debug_1014:
  rx1460_fail:
    (rx1460_rep, rx1460_pos, $I10, $P10) = rx1460_cur."!mark_fail"(0)
    lt rx1460_pos, -1, rx1460_done
    eq rx1460_pos, -1, rx1460_fail
    jump $I10
  rx1460_done:
    rx1460_cur."!cursor_fail"()
    if_null rx1460_debug, debug_1015
    rx1460_cur."!cursor_debug"("FAIL", "statement_prefix:sym<INIT>")
  debug_1015:
    .return (rx1460_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_prefix:sym<INIT>"  :subid("115_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1464 = self."!PREFIX__!subrule"("blorst", "INIT")
    new $P1465, "ResizablePMCArray"
    push $P1465, $P1464
    .return ($P1465)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_prefix:sym<try>"  :subid("116_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1467_tgt
    .local int rx1467_pos
    .local int rx1467_off
    .local int rx1467_eos
    .local int rx1467_rep
    .local pmc rx1467_cur
    .local pmc rx1467_debug
    (rx1467_cur, rx1467_pos, rx1467_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1467_cur
    .local pmc match
    .lex "$/", match
    length rx1467_eos, rx1467_tgt
    gt rx1467_pos, rx1467_eos, rx1467_done
    set rx1467_off, 0
    lt rx1467_pos, 2, rx1467_start
    sub rx1467_off, rx1467_pos, 1
    substr rx1467_tgt, rx1467_tgt, rx1467_off
  rx1467_start:
    eq $I10, 1, rx1467_restart
    if_null rx1467_debug, debug_1016
    rx1467_cur."!cursor_debug"("START", "statement_prefix:sym<try>")
  debug_1016:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1468_done
    goto rxscan1468_scan
  rxscan1468_loop:
    (rx1467_pos) = rx1467_cur."from"()
    inc rx1467_pos
    rx1467_cur."!cursor_from"(rx1467_pos)
    ge rx1467_pos, rx1467_eos, rxscan1468_done
  rxscan1468_scan:
    set_addr $I10, rxscan1468_loop
    rx1467_cur."!mark_push"(0, rx1467_pos, $I10)
  rxscan1468_done:
.annotate 'line', 672
  # rx subcapture "sym"
    set_addr $I10, rxcap_1469_fail
    rx1467_cur."!mark_push"(0, rx1467_pos, $I10)
  # rx literal  "try"
    add $I11, rx1467_pos, 3
    gt $I11, rx1467_eos, rx1467_fail
    sub $I11, rx1467_pos, rx1467_off
    substr $S10, rx1467_tgt, $I11, 3
    ne $S10, "try", rx1467_fail
    add rx1467_pos, 3
    set_addr $I10, rxcap_1469_fail
    ($I12, $I11) = rx1467_cur."!mark_peek"($I10)
    rx1467_cur."!cursor_pos"($I11)
    ($P10) = rx1467_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1467_pos, "")
    rx1467_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1469_done
  rxcap_1469_fail:
    goto rx1467_fail
  rxcap_1469_done:
.annotate 'line', 673
  # rx subrule "blorst" subtype=capture negate=
    rx1467_cur."!cursor_pos"(rx1467_pos)
    $P10 = rx1467_cur."blorst"()
    unless $P10, rx1467_fail
    rx1467_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blorst")
    rx1467_pos = $P10."pos"()
.annotate 'line', 671
  # rx pass
    rx1467_cur."!cursor_pass"(rx1467_pos, "statement_prefix:sym<try>")
    if_null rx1467_debug, debug_1017
    rx1467_cur."!cursor_debug"("PASS", "statement_prefix:sym<try>", " at pos=", rx1467_pos)
  debug_1017:
    .return (rx1467_cur)
  rx1467_restart:
.annotate 'line', 436
    if_null rx1467_debug, debug_1018
    rx1467_cur."!cursor_debug"("NEXT", "statement_prefix:sym<try>")
  debug_1018:
  rx1467_fail:
    (rx1467_rep, rx1467_pos, $I10, $P10) = rx1467_cur."!mark_fail"(0)
    lt rx1467_pos, -1, rx1467_done
    eq rx1467_pos, -1, rx1467_fail
    jump $I10
  rx1467_done:
    rx1467_cur."!cursor_fail"()
    if_null rx1467_debug, debug_1019
    rx1467_cur."!cursor_debug"("FAIL", "statement_prefix:sym<try>")
  debug_1019:
    .return (rx1467_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_prefix:sym<try>"  :subid("117_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1471 = self."!PREFIX__!subrule"("blorst", "try")
    new $P1472, "ResizablePMCArray"
    push $P1472, $P1471
    .return ($P1472)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "blorst"  :subid("118_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1474_tgt
    .local int rx1474_pos
    .local int rx1474_off
    .local int rx1474_eos
    .local int rx1474_rep
    .local pmc rx1474_cur
    .local pmc rx1474_debug
    (rx1474_cur, rx1474_pos, rx1474_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1474_cur
    .local pmc match
    .lex "$/", match
    length rx1474_eos, rx1474_tgt
    gt rx1474_pos, rx1474_eos, rx1474_done
    set rx1474_off, 0
    lt rx1474_pos, 2, rx1474_start
    sub rx1474_off, rx1474_pos, 1
    substr rx1474_tgt, rx1474_tgt, rx1474_off
  rx1474_start:
    eq $I10, 1, rx1474_restart
    if_null rx1474_debug, debug_1020
    rx1474_cur."!cursor_debug"("START", "blorst")
  debug_1020:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1475_done
    goto rxscan1475_scan
  rxscan1475_loop:
    (rx1474_pos) = rx1474_cur."from"()
    inc rx1474_pos
    rx1474_cur."!cursor_from"(rx1474_pos)
    ge rx1474_pos, rx1474_eos, rxscan1475_done
  rxscan1475_scan:
    set_addr $I10, rxscan1475_loop
    rx1474_cur."!mark_push"(0, rx1474_pos, $I10)
  rxscan1475_done:
.annotate 'line', 677
  # rx charclass s
    ge rx1474_pos, rx1474_eos, rx1474_fail
    sub $I10, rx1474_pos, rx1474_off
    is_cclass $I11, 32, rx1474_tgt, $I10
    unless $I11, rx1474_fail
    inc rx1474_pos
  # rx subrule "ws" subtype=method negate=
    rx1474_cur."!cursor_pos"(rx1474_pos)
    $P10 = rx1474_cur."ws"()
    unless $P10, rx1474_fail
    rx1474_pos = $P10."pos"()
  alt1476_0:
    set_addr $I10, alt1476_1
    rx1474_cur."!mark_push"(0, rx1474_pos, $I10)
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1474_pos, rx1474_off
    substr $S10, rx1474_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx1474_fail
  # rx subrule "block" subtype=capture negate=
    rx1474_cur."!cursor_pos"(rx1474_pos)
    $P10 = rx1474_cur."block"()
    unless $P10, rx1474_fail
    rx1474_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx1474_pos = $P10."pos"()
    goto alt1476_end
  alt1476_1:
  # rx subrule "statement" subtype=capture negate=
    rx1474_cur."!cursor_pos"(rx1474_pos)
    $P10 = rx1474_cur."statement"()
    unless $P10, rx1474_fail
    rx1474_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx1474_pos = $P10."pos"()
  alt1476_end:
.annotate 'line', 676
  # rx pass
    rx1474_cur."!cursor_pass"(rx1474_pos, "blorst")
    if_null rx1474_debug, debug_1021
    rx1474_cur."!cursor_debug"("PASS", "blorst", " at pos=", rx1474_pos)
  debug_1021:
    .return (rx1474_cur)
  rx1474_restart:
.annotate 'line', 436
    if_null rx1474_debug, debug_1022
    rx1474_cur."!cursor_debug"("NEXT", "blorst")
  debug_1022:
  rx1474_fail:
    (rx1474_rep, rx1474_pos, $I10, $P10) = rx1474_cur."!mark_fail"(0)
    lt rx1474_pos, -1, rx1474_done
    eq rx1474_pos, -1, rx1474_fail
    jump $I10
  rx1474_done:
    rx1474_cur."!cursor_fail"()
    if_null rx1474_debug, debug_1023
    rx1474_cur."!cursor_debug"("FAIL", "blorst")
  debug_1023:
    .return (rx1474_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__blorst"  :subid("119_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1478, "ResizablePMCArray"
    push $P1478, ""
    .return ($P1478)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond"  :subid("120_1307835824.98345")
    .param pmc param_1480
.annotate 'line', 682
    .lex "self", param_1480
    $P1481 = param_1480."!protoregex"("statement_mod_cond")
    .return ($P1481)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_cond"  :subid("121_1307835824.98345")
    .param pmc param_1483
.annotate 'line', 682
    .lex "self", param_1483
    $P1484 = param_1483."!PREFIX__!protoregex"("statement_mod_cond")
    .return ($P1484)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond:sym<if>"  :subid("122_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1486_tgt
    .local int rx1486_pos
    .local int rx1486_off
    .local int rx1486_eos
    .local int rx1486_rep
    .local pmc rx1486_cur
    .local pmc rx1486_debug
    (rx1486_cur, rx1486_pos, rx1486_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1486_cur
    .local pmc match
    .lex "$/", match
    length rx1486_eos, rx1486_tgt
    gt rx1486_pos, rx1486_eos, rx1486_done
    set rx1486_off, 0
    lt rx1486_pos, 2, rx1486_start
    sub rx1486_off, rx1486_pos, 1
    substr rx1486_tgt, rx1486_tgt, rx1486_off
  rx1486_start:
    eq $I10, 1, rx1486_restart
    if_null rx1486_debug, debug_1024
    rx1486_cur."!cursor_debug"("START", "statement_mod_cond:sym<if>")
  debug_1024:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1487_done
    goto rxscan1487_scan
  rxscan1487_loop:
    (rx1486_pos) = rx1486_cur."from"()
    inc rx1486_pos
    rx1486_cur."!cursor_from"(rx1486_pos)
    ge rx1486_pos, rx1486_eos, rxscan1487_done
  rxscan1487_scan:
    set_addr $I10, rxscan1487_loop
    rx1486_cur."!mark_push"(0, rx1486_pos, $I10)
  rxscan1487_done:
.annotate 'line', 684
  # rx subcapture "sym"
    set_addr $I10, rxcap_1488_fail
    rx1486_cur."!mark_push"(0, rx1486_pos, $I10)
  # rx literal  "if"
    add $I11, rx1486_pos, 2
    gt $I11, rx1486_eos, rx1486_fail
    sub $I11, rx1486_pos, rx1486_off
    substr $S10, rx1486_tgt, $I11, 2
    ne $S10, "if", rx1486_fail
    add rx1486_pos, 2
    set_addr $I10, rxcap_1488_fail
    ($I12, $I11) = rx1486_cur."!mark_peek"($I10)
    rx1486_cur."!cursor_pos"($I11)
    ($P10) = rx1486_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1486_pos, "")
    rx1486_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1488_done
  rxcap_1488_fail:
    goto rx1486_fail
  rxcap_1488_done:
  # rx subrule "ws" subtype=method negate=
    rx1486_cur."!cursor_pos"(rx1486_pos)
    $P10 = rx1486_cur."ws"()
    unless $P10, rx1486_fail
    rx1486_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1486_cur."!cursor_pos"(rx1486_pos)
    $P10 = rx1486_cur."EXPR"()
    unless $P10, rx1486_fail
    rx1486_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx1486_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1486_cur."!cursor_pos"(rx1486_pos)
    $P10 = rx1486_cur."ws"()
    unless $P10, rx1486_fail
    rx1486_pos = $P10."pos"()
  # rx pass
    rx1486_cur."!cursor_pass"(rx1486_pos, "statement_mod_cond:sym<if>")
    if_null rx1486_debug, debug_1025
    rx1486_cur."!cursor_debug"("PASS", "statement_mod_cond:sym<if>", " at pos=", rx1486_pos)
  debug_1025:
    .return (rx1486_cur)
  rx1486_restart:
.annotate 'line', 436
    if_null rx1486_debug, debug_1026
    rx1486_cur."!cursor_debug"("NEXT", "statement_mod_cond:sym<if>")
  debug_1026:
  rx1486_fail:
    (rx1486_rep, rx1486_pos, $I10, $P10) = rx1486_cur."!mark_fail"(0)
    lt rx1486_pos, -1, rx1486_done
    eq rx1486_pos, -1, rx1486_fail
    jump $I10
  rx1486_done:
    rx1486_cur."!cursor_fail"()
    if_null rx1486_debug, debug_1027
    rx1486_cur."!cursor_debug"("FAIL", "statement_mod_cond:sym<if>")
  debug_1027:
    .return (rx1486_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_cond:sym<if>"  :subid("123_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1492 = self."!PREFIX__!subrule"("ws", "if")
    new $P1493, "ResizablePMCArray"
    push $P1493, $P1492
    .return ($P1493)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_cond:sym<unless>"  :subid("124_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1495_tgt
    .local int rx1495_pos
    .local int rx1495_off
    .local int rx1495_eos
    .local int rx1495_rep
    .local pmc rx1495_cur
    .local pmc rx1495_debug
    (rx1495_cur, rx1495_pos, rx1495_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1495_cur
    .local pmc match
    .lex "$/", match
    length rx1495_eos, rx1495_tgt
    gt rx1495_pos, rx1495_eos, rx1495_done
    set rx1495_off, 0
    lt rx1495_pos, 2, rx1495_start
    sub rx1495_off, rx1495_pos, 1
    substr rx1495_tgt, rx1495_tgt, rx1495_off
  rx1495_start:
    eq $I10, 1, rx1495_restart
    if_null rx1495_debug, debug_1028
    rx1495_cur."!cursor_debug"("START", "statement_mod_cond:sym<unless>")
  debug_1028:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1496_done
    goto rxscan1496_scan
  rxscan1496_loop:
    (rx1495_pos) = rx1495_cur."from"()
    inc rx1495_pos
    rx1495_cur."!cursor_from"(rx1495_pos)
    ge rx1495_pos, rx1495_eos, rxscan1496_done
  rxscan1496_scan:
    set_addr $I10, rxscan1496_loop
    rx1495_cur."!mark_push"(0, rx1495_pos, $I10)
  rxscan1496_done:
.annotate 'line', 685
  # rx subcapture "sym"
    set_addr $I10, rxcap_1497_fail
    rx1495_cur."!mark_push"(0, rx1495_pos, $I10)
  # rx literal  "unless"
    add $I11, rx1495_pos, 6
    gt $I11, rx1495_eos, rx1495_fail
    sub $I11, rx1495_pos, rx1495_off
    substr $S10, rx1495_tgt, $I11, 6
    ne $S10, "unless", rx1495_fail
    add rx1495_pos, 6
    set_addr $I10, rxcap_1497_fail
    ($I12, $I11) = rx1495_cur."!mark_peek"($I10)
    rx1495_cur."!cursor_pos"($I11)
    ($P10) = rx1495_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1495_pos, "")
    rx1495_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1497_done
  rxcap_1497_fail:
    goto rx1495_fail
  rxcap_1497_done:
  # rx subrule "ws" subtype=method negate=
    rx1495_cur."!cursor_pos"(rx1495_pos)
    $P10 = rx1495_cur."ws"()
    unless $P10, rx1495_fail
    rx1495_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1495_cur."!cursor_pos"(rx1495_pos)
    $P10 = rx1495_cur."EXPR"()
    unless $P10, rx1495_fail
    rx1495_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx1495_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1495_cur."!cursor_pos"(rx1495_pos)
    $P10 = rx1495_cur."ws"()
    unless $P10, rx1495_fail
    rx1495_pos = $P10."pos"()
  # rx pass
    rx1495_cur."!cursor_pass"(rx1495_pos, "statement_mod_cond:sym<unless>")
    if_null rx1495_debug, debug_1029
    rx1495_cur."!cursor_debug"("PASS", "statement_mod_cond:sym<unless>", " at pos=", rx1495_pos)
  debug_1029:
    .return (rx1495_cur)
  rx1495_restart:
.annotate 'line', 436
    if_null rx1495_debug, debug_1030
    rx1495_cur."!cursor_debug"("NEXT", "statement_mod_cond:sym<unless>")
  debug_1030:
  rx1495_fail:
    (rx1495_rep, rx1495_pos, $I10, $P10) = rx1495_cur."!mark_fail"(0)
    lt rx1495_pos, -1, rx1495_done
    eq rx1495_pos, -1, rx1495_fail
    jump $I10
  rx1495_done:
    rx1495_cur."!cursor_fail"()
    if_null rx1495_debug, debug_1031
    rx1495_cur."!cursor_debug"("FAIL", "statement_mod_cond:sym<unless>")
  debug_1031:
    .return (rx1495_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_cond:sym<unless>"  :subid("125_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1501 = self."!PREFIX__!subrule"("ws", "unless")
    new $P1502, "ResizablePMCArray"
    push $P1502, $P1501
    .return ($P1502)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop"  :subid("126_1307835824.98345")
    .param pmc param_1504
.annotate 'line', 687
    .lex "self", param_1504
    $P1505 = param_1504."!protoregex"("statement_mod_loop")
    .return ($P1505)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop"  :subid("127_1307835824.98345")
    .param pmc param_1507
.annotate 'line', 687
    .lex "self", param_1507
    $P1508 = param_1507."!PREFIX__!protoregex"("statement_mod_loop")
    .return ($P1508)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<while>"  :subid("128_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1510_tgt
    .local int rx1510_pos
    .local int rx1510_off
    .local int rx1510_eos
    .local int rx1510_rep
    .local pmc rx1510_cur
    .local pmc rx1510_debug
    (rx1510_cur, rx1510_pos, rx1510_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1510_cur
    .local pmc match
    .lex "$/", match
    length rx1510_eos, rx1510_tgt
    gt rx1510_pos, rx1510_eos, rx1510_done
    set rx1510_off, 0
    lt rx1510_pos, 2, rx1510_start
    sub rx1510_off, rx1510_pos, 1
    substr rx1510_tgt, rx1510_tgt, rx1510_off
  rx1510_start:
    eq $I10, 1, rx1510_restart
    if_null rx1510_debug, debug_1032
    rx1510_cur."!cursor_debug"("START", "statement_mod_loop:sym<while>")
  debug_1032:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1511_done
    goto rxscan1511_scan
  rxscan1511_loop:
    (rx1510_pos) = rx1510_cur."from"()
    inc rx1510_pos
    rx1510_cur."!cursor_from"(rx1510_pos)
    ge rx1510_pos, rx1510_eos, rxscan1511_done
  rxscan1511_scan:
    set_addr $I10, rxscan1511_loop
    rx1510_cur."!mark_push"(0, rx1510_pos, $I10)
  rxscan1511_done:
.annotate 'line', 689
  # rx subcapture "sym"
    set_addr $I10, rxcap_1512_fail
    rx1510_cur."!mark_push"(0, rx1510_pos, $I10)
  # rx literal  "while"
    add $I11, rx1510_pos, 5
    gt $I11, rx1510_eos, rx1510_fail
    sub $I11, rx1510_pos, rx1510_off
    substr $S10, rx1510_tgt, $I11, 5
    ne $S10, "while", rx1510_fail
    add rx1510_pos, 5
    set_addr $I10, rxcap_1512_fail
    ($I12, $I11) = rx1510_cur."!mark_peek"($I10)
    rx1510_cur."!cursor_pos"($I11)
    ($P10) = rx1510_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1510_pos, "")
    rx1510_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1512_done
  rxcap_1512_fail:
    goto rx1510_fail
  rxcap_1512_done:
  # rx subrule "ws" subtype=method negate=
    rx1510_cur."!cursor_pos"(rx1510_pos)
    $P10 = rx1510_cur."ws"()
    unless $P10, rx1510_fail
    rx1510_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1510_cur."!cursor_pos"(rx1510_pos)
    $P10 = rx1510_cur."EXPR"()
    unless $P10, rx1510_fail
    rx1510_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx1510_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1510_cur."!cursor_pos"(rx1510_pos)
    $P10 = rx1510_cur."ws"()
    unless $P10, rx1510_fail
    rx1510_pos = $P10."pos"()
  # rx pass
    rx1510_cur."!cursor_pass"(rx1510_pos, "statement_mod_loop:sym<while>")
    if_null rx1510_debug, debug_1033
    rx1510_cur."!cursor_debug"("PASS", "statement_mod_loop:sym<while>", " at pos=", rx1510_pos)
  debug_1033:
    .return (rx1510_cur)
  rx1510_restart:
.annotate 'line', 436
    if_null rx1510_debug, debug_1034
    rx1510_cur."!cursor_debug"("NEXT", "statement_mod_loop:sym<while>")
  debug_1034:
  rx1510_fail:
    (rx1510_rep, rx1510_pos, $I10, $P10) = rx1510_cur."!mark_fail"(0)
    lt rx1510_pos, -1, rx1510_done
    eq rx1510_pos, -1, rx1510_fail
    jump $I10
  rx1510_done:
    rx1510_cur."!cursor_fail"()
    if_null rx1510_debug, debug_1035
    rx1510_cur."!cursor_debug"("FAIL", "statement_mod_loop:sym<while>")
  debug_1035:
    .return (rx1510_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop:sym<while>"  :subid("129_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1516 = self."!PREFIX__!subrule"("ws", "while")
    new $P1517, "ResizablePMCArray"
    push $P1517, $P1516
    .return ($P1517)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<until>"  :subid("130_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1519_tgt
    .local int rx1519_pos
    .local int rx1519_off
    .local int rx1519_eos
    .local int rx1519_rep
    .local pmc rx1519_cur
    .local pmc rx1519_debug
    (rx1519_cur, rx1519_pos, rx1519_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1519_cur
    .local pmc match
    .lex "$/", match
    length rx1519_eos, rx1519_tgt
    gt rx1519_pos, rx1519_eos, rx1519_done
    set rx1519_off, 0
    lt rx1519_pos, 2, rx1519_start
    sub rx1519_off, rx1519_pos, 1
    substr rx1519_tgt, rx1519_tgt, rx1519_off
  rx1519_start:
    eq $I10, 1, rx1519_restart
    if_null rx1519_debug, debug_1036
    rx1519_cur."!cursor_debug"("START", "statement_mod_loop:sym<until>")
  debug_1036:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1520_done
    goto rxscan1520_scan
  rxscan1520_loop:
    (rx1519_pos) = rx1519_cur."from"()
    inc rx1519_pos
    rx1519_cur."!cursor_from"(rx1519_pos)
    ge rx1519_pos, rx1519_eos, rxscan1520_done
  rxscan1520_scan:
    set_addr $I10, rxscan1520_loop
    rx1519_cur."!mark_push"(0, rx1519_pos, $I10)
  rxscan1520_done:
.annotate 'line', 690
  # rx subcapture "sym"
    set_addr $I10, rxcap_1521_fail
    rx1519_cur."!mark_push"(0, rx1519_pos, $I10)
  # rx literal  "until"
    add $I11, rx1519_pos, 5
    gt $I11, rx1519_eos, rx1519_fail
    sub $I11, rx1519_pos, rx1519_off
    substr $S10, rx1519_tgt, $I11, 5
    ne $S10, "until", rx1519_fail
    add rx1519_pos, 5
    set_addr $I10, rxcap_1521_fail
    ($I12, $I11) = rx1519_cur."!mark_peek"($I10)
    rx1519_cur."!cursor_pos"($I11)
    ($P10) = rx1519_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1519_pos, "")
    rx1519_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1521_done
  rxcap_1521_fail:
    goto rx1519_fail
  rxcap_1521_done:
  # rx subrule "ws" subtype=method negate=
    rx1519_cur."!cursor_pos"(rx1519_pos)
    $P10 = rx1519_cur."ws"()
    unless $P10, rx1519_fail
    rx1519_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1519_cur."!cursor_pos"(rx1519_pos)
    $P10 = rx1519_cur."EXPR"()
    unless $P10, rx1519_fail
    rx1519_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx1519_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1519_cur."!cursor_pos"(rx1519_pos)
    $P10 = rx1519_cur."ws"()
    unless $P10, rx1519_fail
    rx1519_pos = $P10."pos"()
  # rx pass
    rx1519_cur."!cursor_pass"(rx1519_pos, "statement_mod_loop:sym<until>")
    if_null rx1519_debug, debug_1037
    rx1519_cur."!cursor_debug"("PASS", "statement_mod_loop:sym<until>", " at pos=", rx1519_pos)
  debug_1037:
    .return (rx1519_cur)
  rx1519_restart:
.annotate 'line', 436
    if_null rx1519_debug, debug_1038
    rx1519_cur."!cursor_debug"("NEXT", "statement_mod_loop:sym<until>")
  debug_1038:
  rx1519_fail:
    (rx1519_rep, rx1519_pos, $I10, $P10) = rx1519_cur."!mark_fail"(0)
    lt rx1519_pos, -1, rx1519_done
    eq rx1519_pos, -1, rx1519_fail
    jump $I10
  rx1519_done:
    rx1519_cur."!cursor_fail"()
    if_null rx1519_debug, debug_1039
    rx1519_cur."!cursor_debug"("FAIL", "statement_mod_loop:sym<until>")
  debug_1039:
    .return (rx1519_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop:sym<until>"  :subid("131_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1525 = self."!PREFIX__!subrule"("ws", "until")
    new $P1526, "ResizablePMCArray"
    push $P1526, $P1525
    .return ($P1526)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "statement_mod_loop:sym<for>"  :subid("132_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1528_tgt
    .local int rx1528_pos
    .local int rx1528_off
    .local int rx1528_eos
    .local int rx1528_rep
    .local pmc rx1528_cur
    .local pmc rx1528_debug
    (rx1528_cur, rx1528_pos, rx1528_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1528_cur
    .local pmc match
    .lex "$/", match
    length rx1528_eos, rx1528_tgt
    gt rx1528_pos, rx1528_eos, rx1528_done
    set rx1528_off, 0
    lt rx1528_pos, 2, rx1528_start
    sub rx1528_off, rx1528_pos, 1
    substr rx1528_tgt, rx1528_tgt, rx1528_off
  rx1528_start:
    eq $I10, 1, rx1528_restart
    if_null rx1528_debug, debug_1040
    rx1528_cur."!cursor_debug"("START", "statement_mod_loop:sym<for>")
  debug_1040:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1529_done
    goto rxscan1529_scan
  rxscan1529_loop:
    (rx1528_pos) = rx1528_cur."from"()
    inc rx1528_pos
    rx1528_cur."!cursor_from"(rx1528_pos)
    ge rx1528_pos, rx1528_eos, rxscan1529_done
  rxscan1529_scan:
    set_addr $I10, rxscan1529_loop
    rx1528_cur."!mark_push"(0, rx1528_pos, $I10)
  rxscan1529_done:
.annotate 'line', 691
  # rx subcapture "sym"
    set_addr $I10, rxcap_1530_fail
    rx1528_cur."!mark_push"(0, rx1528_pos, $I10)
  # rx literal  "for"
    add $I11, rx1528_pos, 3
    gt $I11, rx1528_eos, rx1528_fail
    sub $I11, rx1528_pos, rx1528_off
    substr $S10, rx1528_tgt, $I11, 3
    ne $S10, "for", rx1528_fail
    add rx1528_pos, 3
    set_addr $I10, rxcap_1530_fail
    ($I12, $I11) = rx1528_cur."!mark_peek"($I10)
    rx1528_cur."!cursor_pos"($I11)
    ($P10) = rx1528_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1528_pos, "")
    rx1528_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1530_done
  rxcap_1530_fail:
    goto rx1528_fail
  rxcap_1530_done:
  # rx subrule "ws" subtype=method negate=
    rx1528_cur."!cursor_pos"(rx1528_pos)
    $P10 = rx1528_cur."ws"()
    unless $P10, rx1528_fail
    rx1528_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1528_cur."!cursor_pos"(rx1528_pos)
    $P10 = rx1528_cur."EXPR"()
    unless $P10, rx1528_fail
    rx1528_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("cond")
    rx1528_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1528_cur."!cursor_pos"(rx1528_pos)
    $P10 = rx1528_cur."ws"()
    unless $P10, rx1528_fail
    rx1528_pos = $P10."pos"()
  # rx pass
    rx1528_cur."!cursor_pass"(rx1528_pos, "statement_mod_loop:sym<for>")
    if_null rx1528_debug, debug_1041
    rx1528_cur."!cursor_debug"("PASS", "statement_mod_loop:sym<for>", " at pos=", rx1528_pos)
  debug_1041:
    .return (rx1528_cur)
  rx1528_restart:
.annotate 'line', 436
    if_null rx1528_debug, debug_1042
    rx1528_cur."!cursor_debug"("NEXT", "statement_mod_loop:sym<for>")
  debug_1042:
  rx1528_fail:
    (rx1528_rep, rx1528_pos, $I10, $P10) = rx1528_cur."!mark_fail"(0)
    lt rx1528_pos, -1, rx1528_done
    eq rx1528_pos, -1, rx1528_fail
    jump $I10
  rx1528_done:
    rx1528_cur."!cursor_fail"()
    if_null rx1528_debug, debug_1043
    rx1528_cur."!cursor_debug"("FAIL", "statement_mod_loop:sym<for>")
  debug_1043:
    .return (rx1528_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__statement_mod_loop:sym<for>"  :subid("133_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1534 = self."!PREFIX__!subrule"("ws", "for")
    new $P1535, "ResizablePMCArray"
    push $P1535, $P1534
    .return ($P1535)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<fatarrow>"  :subid("134_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1537_tgt
    .local int rx1537_pos
    .local int rx1537_off
    .local int rx1537_eos
    .local int rx1537_rep
    .local pmc rx1537_cur
    .local pmc rx1537_debug
    (rx1537_cur, rx1537_pos, rx1537_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1537_cur
    .local pmc match
    .lex "$/", match
    length rx1537_eos, rx1537_tgt
    gt rx1537_pos, rx1537_eos, rx1537_done
    set rx1537_off, 0
    lt rx1537_pos, 2, rx1537_start
    sub rx1537_off, rx1537_pos, 1
    substr rx1537_tgt, rx1537_tgt, rx1537_off
  rx1537_start:
    eq $I10, 1, rx1537_restart
    if_null rx1537_debug, debug_1044
    rx1537_cur."!cursor_debug"("START", "term:sym<fatarrow>")
  debug_1044:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1538_done
    goto rxscan1538_scan
  rxscan1538_loop:
    (rx1537_pos) = rx1537_cur."from"()
    inc rx1537_pos
    rx1537_cur."!cursor_from"(rx1537_pos)
    ge rx1537_pos, rx1537_eos, rxscan1538_done
  rxscan1538_scan:
    set_addr $I10, rxscan1538_loop
    rx1537_cur."!mark_push"(0, rx1537_pos, $I10)
  rxscan1538_done:
.annotate 'line', 695
  # rx subrule "fatarrow" subtype=capture negate=
    rx1537_cur."!cursor_pos"(rx1537_pos)
    $P10 = rx1537_cur."fatarrow"()
    unless $P10, rx1537_fail
    rx1537_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("fatarrow")
    rx1537_pos = $P10."pos"()
  # rx pass
    rx1537_cur."!cursor_pass"(rx1537_pos, "term:sym<fatarrow>")
    if_null rx1537_debug, debug_1045
    rx1537_cur."!cursor_debug"("PASS", "term:sym<fatarrow>", " at pos=", rx1537_pos)
  debug_1045:
    .return (rx1537_cur)
  rx1537_restart:
.annotate 'line', 436
    if_null rx1537_debug, debug_1046
    rx1537_cur."!cursor_debug"("NEXT", "term:sym<fatarrow>")
  debug_1046:
  rx1537_fail:
    (rx1537_rep, rx1537_pos, $I10, $P10) = rx1537_cur."!mark_fail"(0)
    lt rx1537_pos, -1, rx1537_done
    eq rx1537_pos, -1, rx1537_fail
    jump $I10
  rx1537_done:
    rx1537_cur."!cursor_fail"()
    if_null rx1537_debug, debug_1047
    rx1537_cur."!cursor_debug"("FAIL", "term:sym<fatarrow>")
  debug_1047:
    .return (rx1537_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<fatarrow>"  :subid("135_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1540 = self."!PREFIX__!subrule"("fatarrow", "")
    new $P1541, "ResizablePMCArray"
    push $P1541, $P1540
    .return ($P1541)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<colonpair>"  :subid("136_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1543_tgt
    .local int rx1543_pos
    .local int rx1543_off
    .local int rx1543_eos
    .local int rx1543_rep
    .local pmc rx1543_cur
    .local pmc rx1543_debug
    (rx1543_cur, rx1543_pos, rx1543_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1543_cur
    .local pmc match
    .lex "$/", match
    length rx1543_eos, rx1543_tgt
    gt rx1543_pos, rx1543_eos, rx1543_done
    set rx1543_off, 0
    lt rx1543_pos, 2, rx1543_start
    sub rx1543_off, rx1543_pos, 1
    substr rx1543_tgt, rx1543_tgt, rx1543_off
  rx1543_start:
    eq $I10, 1, rx1543_restart
    if_null rx1543_debug, debug_1048
    rx1543_cur."!cursor_debug"("START", "term:sym<colonpair>")
  debug_1048:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1544_done
    goto rxscan1544_scan
  rxscan1544_loop:
    (rx1543_pos) = rx1543_cur."from"()
    inc rx1543_pos
    rx1543_cur."!cursor_from"(rx1543_pos)
    ge rx1543_pos, rx1543_eos, rxscan1544_done
  rxscan1544_scan:
    set_addr $I10, rxscan1544_loop
    rx1543_cur."!mark_push"(0, rx1543_pos, $I10)
  rxscan1544_done:
.annotate 'line', 696
  # rx subrule "colonpair" subtype=capture negate=
    rx1543_cur."!cursor_pos"(rx1543_pos)
    $P10 = rx1543_cur."colonpair"()
    unless $P10, rx1543_fail
    rx1543_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("colonpair")
    rx1543_pos = $P10."pos"()
  # rx pass
    rx1543_cur."!cursor_pass"(rx1543_pos, "term:sym<colonpair>")
    if_null rx1543_debug, debug_1049
    rx1543_cur."!cursor_debug"("PASS", "term:sym<colonpair>", " at pos=", rx1543_pos)
  debug_1049:
    .return (rx1543_cur)
  rx1543_restart:
.annotate 'line', 436
    if_null rx1543_debug, debug_1050
    rx1543_cur."!cursor_debug"("NEXT", "term:sym<colonpair>")
  debug_1050:
  rx1543_fail:
    (rx1543_rep, rx1543_pos, $I10, $P10) = rx1543_cur."!mark_fail"(0)
    lt rx1543_pos, -1, rx1543_done
    eq rx1543_pos, -1, rx1543_fail
    jump $I10
  rx1543_done:
    rx1543_cur."!cursor_fail"()
    if_null rx1543_debug, debug_1051
    rx1543_cur."!cursor_debug"("FAIL", "term:sym<colonpair>")
  debug_1051:
    .return (rx1543_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<colonpair>"  :subid("137_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1546 = self."!PREFIX__!subrule"("colonpair", "")
    new $P1547, "ResizablePMCArray"
    push $P1547, $P1546
    .return ($P1547)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<variable>"  :subid("138_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1549_tgt
    .local int rx1549_pos
    .local int rx1549_off
    .local int rx1549_eos
    .local int rx1549_rep
    .local pmc rx1549_cur
    .local pmc rx1549_debug
    (rx1549_cur, rx1549_pos, rx1549_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1549_cur
    .local pmc match
    .lex "$/", match
    length rx1549_eos, rx1549_tgt
    gt rx1549_pos, rx1549_eos, rx1549_done
    set rx1549_off, 0
    lt rx1549_pos, 2, rx1549_start
    sub rx1549_off, rx1549_pos, 1
    substr rx1549_tgt, rx1549_tgt, rx1549_off
  rx1549_start:
    eq $I10, 1, rx1549_restart
    if_null rx1549_debug, debug_1052
    rx1549_cur."!cursor_debug"("START", "term:sym<variable>")
  debug_1052:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1550_done
    goto rxscan1550_scan
  rxscan1550_loop:
    (rx1549_pos) = rx1549_cur."from"()
    inc rx1549_pos
    rx1549_cur."!cursor_from"(rx1549_pos)
    ge rx1549_pos, rx1549_eos, rxscan1550_done
  rxscan1550_scan:
    set_addr $I10, rxscan1550_loop
    rx1549_cur."!mark_push"(0, rx1549_pos, $I10)
  rxscan1550_done:
.annotate 'line', 697
  # rx subrule "variable" subtype=capture negate=
    rx1549_cur."!cursor_pos"(rx1549_pos)
    $P10 = rx1549_cur."variable"()
    unless $P10, rx1549_fail
    rx1549_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable")
    rx1549_pos = $P10."pos"()
  # rx pass
    rx1549_cur."!cursor_pass"(rx1549_pos, "term:sym<variable>")
    if_null rx1549_debug, debug_1053
    rx1549_cur."!cursor_debug"("PASS", "term:sym<variable>", " at pos=", rx1549_pos)
  debug_1053:
    .return (rx1549_cur)
  rx1549_restart:
.annotate 'line', 436
    if_null rx1549_debug, debug_1054
    rx1549_cur."!cursor_debug"("NEXT", "term:sym<variable>")
  debug_1054:
  rx1549_fail:
    (rx1549_rep, rx1549_pos, $I10, $P10) = rx1549_cur."!mark_fail"(0)
    lt rx1549_pos, -1, rx1549_done
    eq rx1549_pos, -1, rx1549_fail
    jump $I10
  rx1549_done:
    rx1549_cur."!cursor_fail"()
    if_null rx1549_debug, debug_1055
    rx1549_cur."!cursor_debug"("FAIL", "term:sym<variable>")
  debug_1055:
    .return (rx1549_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<variable>"  :subid("139_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1552 = self."!PREFIX__!subrule"("variable", "")
    new $P1553, "ResizablePMCArray"
    push $P1553, $P1552
    .return ($P1553)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<package_declarator>"  :subid("140_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1555_tgt
    .local int rx1555_pos
    .local int rx1555_off
    .local int rx1555_eos
    .local int rx1555_rep
    .local pmc rx1555_cur
    .local pmc rx1555_debug
    (rx1555_cur, rx1555_pos, rx1555_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1555_cur
    .local pmc match
    .lex "$/", match
    length rx1555_eos, rx1555_tgt
    gt rx1555_pos, rx1555_eos, rx1555_done
    set rx1555_off, 0
    lt rx1555_pos, 2, rx1555_start
    sub rx1555_off, rx1555_pos, 1
    substr rx1555_tgt, rx1555_tgt, rx1555_off
  rx1555_start:
    eq $I10, 1, rx1555_restart
    if_null rx1555_debug, debug_1056
    rx1555_cur."!cursor_debug"("START", "term:sym<package_declarator>")
  debug_1056:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1556_done
    goto rxscan1556_scan
  rxscan1556_loop:
    (rx1555_pos) = rx1555_cur."from"()
    inc rx1555_pos
    rx1555_cur."!cursor_from"(rx1555_pos)
    ge rx1555_pos, rx1555_eos, rxscan1556_done
  rxscan1556_scan:
    set_addr $I10, rxscan1556_loop
    rx1555_cur."!mark_push"(0, rx1555_pos, $I10)
  rxscan1556_done:
.annotate 'line', 698
  # rx subrule "package_declarator" subtype=capture negate=
    rx1555_cur."!cursor_pos"(rx1555_pos)
    $P10 = rx1555_cur."package_declarator"()
    unless $P10, rx1555_fail
    rx1555_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_declarator")
    rx1555_pos = $P10."pos"()
  # rx pass
    rx1555_cur."!cursor_pass"(rx1555_pos, "term:sym<package_declarator>")
    if_null rx1555_debug, debug_1057
    rx1555_cur."!cursor_debug"("PASS", "term:sym<package_declarator>", " at pos=", rx1555_pos)
  debug_1057:
    .return (rx1555_cur)
  rx1555_restart:
.annotate 'line', 436
    if_null rx1555_debug, debug_1058
    rx1555_cur."!cursor_debug"("NEXT", "term:sym<package_declarator>")
  debug_1058:
  rx1555_fail:
    (rx1555_rep, rx1555_pos, $I10, $P10) = rx1555_cur."!mark_fail"(0)
    lt rx1555_pos, -1, rx1555_done
    eq rx1555_pos, -1, rx1555_fail
    jump $I10
  rx1555_done:
    rx1555_cur."!cursor_fail"()
    if_null rx1555_debug, debug_1059
    rx1555_cur."!cursor_debug"("FAIL", "term:sym<package_declarator>")
  debug_1059:
    .return (rx1555_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<package_declarator>"  :subid("141_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1558 = self."!PREFIX__!subrule"("package_declarator", "")
    new $P1559, "ResizablePMCArray"
    push $P1559, $P1558
    .return ($P1559)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<scope_declarator>"  :subid("142_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1561_tgt
    .local int rx1561_pos
    .local int rx1561_off
    .local int rx1561_eos
    .local int rx1561_rep
    .local pmc rx1561_cur
    .local pmc rx1561_debug
    (rx1561_cur, rx1561_pos, rx1561_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1561_cur
    .local pmc match
    .lex "$/", match
    length rx1561_eos, rx1561_tgt
    gt rx1561_pos, rx1561_eos, rx1561_done
    set rx1561_off, 0
    lt rx1561_pos, 2, rx1561_start
    sub rx1561_off, rx1561_pos, 1
    substr rx1561_tgt, rx1561_tgt, rx1561_off
  rx1561_start:
    eq $I10, 1, rx1561_restart
    if_null rx1561_debug, debug_1060
    rx1561_cur."!cursor_debug"("START", "term:sym<scope_declarator>")
  debug_1060:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1562_done
    goto rxscan1562_scan
  rxscan1562_loop:
    (rx1561_pos) = rx1561_cur."from"()
    inc rx1561_pos
    rx1561_cur."!cursor_from"(rx1561_pos)
    ge rx1561_pos, rx1561_eos, rxscan1562_done
  rxscan1562_scan:
    set_addr $I10, rxscan1562_loop
    rx1561_cur."!mark_push"(0, rx1561_pos, $I10)
  rxscan1562_done:
.annotate 'line', 699
  # rx subrule "scope_declarator" subtype=capture negate=
    rx1561_cur."!cursor_pos"(rx1561_pos)
    $P10 = rx1561_cur."scope_declarator"()
    unless $P10, rx1561_fail
    rx1561_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scope_declarator")
    rx1561_pos = $P10."pos"()
  # rx pass
    rx1561_cur."!cursor_pass"(rx1561_pos, "term:sym<scope_declarator>")
    if_null rx1561_debug, debug_1061
    rx1561_cur."!cursor_debug"("PASS", "term:sym<scope_declarator>", " at pos=", rx1561_pos)
  debug_1061:
    .return (rx1561_cur)
  rx1561_restart:
.annotate 'line', 436
    if_null rx1561_debug, debug_1062
    rx1561_cur."!cursor_debug"("NEXT", "term:sym<scope_declarator>")
  debug_1062:
  rx1561_fail:
    (rx1561_rep, rx1561_pos, $I10, $P10) = rx1561_cur."!mark_fail"(0)
    lt rx1561_pos, -1, rx1561_done
    eq rx1561_pos, -1, rx1561_fail
    jump $I10
  rx1561_done:
    rx1561_cur."!cursor_fail"()
    if_null rx1561_debug, debug_1063
    rx1561_cur."!cursor_debug"("FAIL", "term:sym<scope_declarator>")
  debug_1063:
    .return (rx1561_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<scope_declarator>"  :subid("143_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1564 = self."!PREFIX__!subrule"("scope_declarator", "")
    new $P1565, "ResizablePMCArray"
    push $P1565, $P1564
    .return ($P1565)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<routine_declarator>"  :subid("144_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1567_tgt
    .local int rx1567_pos
    .local int rx1567_off
    .local int rx1567_eos
    .local int rx1567_rep
    .local pmc rx1567_cur
    .local pmc rx1567_debug
    (rx1567_cur, rx1567_pos, rx1567_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1567_cur
    .local pmc match
    .lex "$/", match
    length rx1567_eos, rx1567_tgt
    gt rx1567_pos, rx1567_eos, rx1567_done
    set rx1567_off, 0
    lt rx1567_pos, 2, rx1567_start
    sub rx1567_off, rx1567_pos, 1
    substr rx1567_tgt, rx1567_tgt, rx1567_off
  rx1567_start:
    eq $I10, 1, rx1567_restart
    if_null rx1567_debug, debug_1064
    rx1567_cur."!cursor_debug"("START", "term:sym<routine_declarator>")
  debug_1064:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1568_done
    goto rxscan1568_scan
  rxscan1568_loop:
    (rx1567_pos) = rx1567_cur."from"()
    inc rx1567_pos
    rx1567_cur."!cursor_from"(rx1567_pos)
    ge rx1567_pos, rx1567_eos, rxscan1568_done
  rxscan1568_scan:
    set_addr $I10, rxscan1568_loop
    rx1567_cur."!mark_push"(0, rx1567_pos, $I10)
  rxscan1568_done:
.annotate 'line', 700
  # rx subrule "routine_declarator" subtype=capture negate=
    rx1567_cur."!cursor_pos"(rx1567_pos)
    $P10 = rx1567_cur."routine_declarator"()
    unless $P10, rx1567_fail
    rx1567_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_declarator")
    rx1567_pos = $P10."pos"()
  # rx pass
    rx1567_cur."!cursor_pass"(rx1567_pos, "term:sym<routine_declarator>")
    if_null rx1567_debug, debug_1065
    rx1567_cur."!cursor_debug"("PASS", "term:sym<routine_declarator>", " at pos=", rx1567_pos)
  debug_1065:
    .return (rx1567_cur)
  rx1567_restart:
.annotate 'line', 436
    if_null rx1567_debug, debug_1066
    rx1567_cur."!cursor_debug"("NEXT", "term:sym<routine_declarator>")
  debug_1066:
  rx1567_fail:
    (rx1567_rep, rx1567_pos, $I10, $P10) = rx1567_cur."!mark_fail"(0)
    lt rx1567_pos, -1, rx1567_done
    eq rx1567_pos, -1, rx1567_fail
    jump $I10
  rx1567_done:
    rx1567_cur."!cursor_fail"()
    if_null rx1567_debug, debug_1067
    rx1567_cur."!cursor_debug"("FAIL", "term:sym<routine_declarator>")
  debug_1067:
    .return (rx1567_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<routine_declarator>"  :subid("145_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1570 = self."!PREFIX__!subrule"("routine_declarator", "")
    new $P1571, "ResizablePMCArray"
    push $P1571, $P1570
    .return ($P1571)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<multi_declarator>"  :subid("146_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .const 'Sub' $P1581 = "148_1307835824.98345" 
    capture_lex $P1581
    .const 'Sub' $P1576 = "147_1307835824.98345" 
    capture_lex $P1576
    .local string rx1573_tgt
    .local int rx1573_pos
    .local int rx1573_off
    .local int rx1573_eos
    .local int rx1573_rep
    .local pmc rx1573_cur
    .local pmc rx1573_debug
    (rx1573_cur, rx1573_pos, rx1573_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1573_cur
    .local pmc match
    .lex "$/", match
    length rx1573_eos, rx1573_tgt
    gt rx1573_pos, rx1573_eos, rx1573_done
    set rx1573_off, 0
    lt rx1573_pos, 2, rx1573_start
    sub rx1573_off, rx1573_pos, 1
    substr rx1573_tgt, rx1573_tgt, rx1573_off
  rx1573_start:
    eq $I10, 1, rx1573_restart
    if_null rx1573_debug, debug_1068
    rx1573_cur."!cursor_debug"("START", "term:sym<multi_declarator>")
  debug_1068:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1574_done
    goto rxscan1574_scan
  rxscan1574_loop:
    (rx1573_pos) = rx1573_cur."from"()
    inc rx1573_pos
    rx1573_cur."!cursor_from"(rx1573_pos)
    ge rx1573_pos, rx1573_eos, rxscan1574_done
  rxscan1574_scan:
    set_addr $I10, rxscan1574_loop
    rx1573_cur."!mark_push"(0, rx1573_pos, $I10)
  rxscan1574_done:
.annotate 'line', 702
  # rx subrule "before" subtype=zerowidth negate=
    rx1573_cur."!cursor_pos"(rx1573_pos)
    .const 'Sub' $P1576 = "147_1307835824.98345" 
    capture_lex $P1576
    $P10 = rx1573_cur."before"($P1576)
    unless $P10, rx1573_fail
.annotate 'line', 703
  # rx subrule "before" subtype=zerowidth negate=1
    rx1573_cur."!cursor_pos"(rx1573_pos)
    .const 'Sub' $P1581 = "148_1307835824.98345" 
    capture_lex $P1581
    $P10 = rx1573_cur."before"($P1581)
    if $P10, rx1573_fail
.annotate 'line', 704
  # rx subrule "multi_declarator" subtype=capture negate=
    rx1573_cur."!cursor_pos"(rx1573_pos)
    $P10 = rx1573_cur."multi_declarator"()
    unless $P10, rx1573_fail
    rx1573_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("multi_declarator")
    rx1573_pos = $P10."pos"()
.annotate 'line', 701
  # rx pass
    rx1573_cur."!cursor_pass"(rx1573_pos, "term:sym<multi_declarator>")
    if_null rx1573_debug, debug_1077
    rx1573_cur."!cursor_debug"("PASS", "term:sym<multi_declarator>", " at pos=", rx1573_pos)
  debug_1077:
    .return (rx1573_cur)
  rx1573_restart:
.annotate 'line', 436
    if_null rx1573_debug, debug_1078
    rx1573_cur."!cursor_debug"("NEXT", "term:sym<multi_declarator>")
  debug_1078:
  rx1573_fail:
    (rx1573_rep, rx1573_pos, $I10, $P10) = rx1573_cur."!mark_fail"(0)
    lt rx1573_pos, -1, rx1573_done
    eq rx1573_pos, -1, rx1573_fail
    jump $I10
  rx1573_done:
    rx1573_cur."!cursor_fail"()
    if_null rx1573_debug, debug_1079
    rx1573_cur."!cursor_debug"("FAIL", "term:sym<multi_declarator>")
  debug_1079:
    .return (rx1573_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1575"  :anon :subid("147_1307835824.98345") :method :outer("146_1307835824.98345")
.annotate 'line', 702
    .local string rx1577_tgt
    .local int rx1577_pos
    .local int rx1577_off
    .local int rx1577_eos
    .local int rx1577_rep
    .local pmc rx1577_cur
    .local pmc rx1577_debug
    (rx1577_cur, rx1577_pos, rx1577_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1577_cur
    .local pmc match
    .lex "$/", match
    length rx1577_eos, rx1577_tgt
    gt rx1577_pos, rx1577_eos, rx1577_done
    set rx1577_off, 0
    lt rx1577_pos, 2, rx1577_start
    sub rx1577_off, rx1577_pos, 1
    substr rx1577_tgt, rx1577_tgt, rx1577_off
  rx1577_start:
    eq $I10, 1, rx1577_restart
    if_null rx1577_debug, debug_1069
    rx1577_cur."!cursor_debug"("START", "")
  debug_1069:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1578_done
    goto rxscan1578_scan
  rxscan1578_loop:
    (rx1577_pos) = rx1577_cur."from"()
    inc rx1577_pos
    rx1577_cur."!cursor_from"(rx1577_pos)
    ge rx1577_pos, rx1577_eos, rxscan1578_done
  rxscan1578_scan:
    set_addr $I10, rxscan1578_loop
    rx1577_cur."!mark_push"(0, rx1577_pos, $I10)
  rxscan1578_done:
  alt1579_0:
    set_addr $I10, alt1579_1
    rx1577_cur."!mark_push"(0, rx1577_pos, $I10)
  # rx literal  "multi"
    add $I11, rx1577_pos, 5
    gt $I11, rx1577_eos, rx1577_fail
    sub $I11, rx1577_pos, rx1577_off
    substr $S10, rx1577_tgt, $I11, 5
    ne $S10, "multi", rx1577_fail
    add rx1577_pos, 5
    goto alt1579_end
  alt1579_1:
    set_addr $I10, alt1579_2
    rx1577_cur."!mark_push"(0, rx1577_pos, $I10)
  # rx literal  "proto"
    add $I11, rx1577_pos, 5
    gt $I11, rx1577_eos, rx1577_fail
    sub $I11, rx1577_pos, rx1577_off
    substr $S10, rx1577_tgt, $I11, 5
    ne $S10, "proto", rx1577_fail
    add rx1577_pos, 5
    goto alt1579_end
  alt1579_2:
  # rx literal  "only"
    add $I11, rx1577_pos, 4
    gt $I11, rx1577_eos, rx1577_fail
    sub $I11, rx1577_pos, rx1577_off
    substr $S10, rx1577_tgt, $I11, 4
    ne $S10, "only", rx1577_fail
    add rx1577_pos, 4
  alt1579_end:
  # rx pass
    rx1577_cur."!cursor_pass"(rx1577_pos, "")
    if_null rx1577_debug, debug_1070
    rx1577_cur."!cursor_debug"("PASS", "", " at pos=", rx1577_pos)
  debug_1070:
    .return (rx1577_cur)
  rx1577_restart:
    if_null rx1577_debug, debug_1071
    rx1577_cur."!cursor_debug"("NEXT", "")
  debug_1071:
  rx1577_fail:
    (rx1577_rep, rx1577_pos, $I10, $P10) = rx1577_cur."!mark_fail"(0)
    lt rx1577_pos, -1, rx1577_done
    eq rx1577_pos, -1, rx1577_fail
    jump $I10
  rx1577_done:
    rx1577_cur."!cursor_fail"()
    if_null rx1577_debug, debug_1072
    rx1577_cur."!cursor_debug"("FAIL", "")
  debug_1072:
    .return (rx1577_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1580"  :anon :subid("148_1307835824.98345") :method :outer("146_1307835824.98345")
.annotate 'line', 703
    .local string rx1582_tgt
    .local int rx1582_pos
    .local int rx1582_off
    .local int rx1582_eos
    .local int rx1582_rep
    .local pmc rx1582_cur
    .local pmc rx1582_debug
    (rx1582_cur, rx1582_pos, rx1582_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1582_cur
    .local pmc match
    .lex "$/", match
    length rx1582_eos, rx1582_tgt
    gt rx1582_pos, rx1582_eos, rx1582_done
    set rx1582_off, 0
    lt rx1582_pos, 2, rx1582_start
    sub rx1582_off, rx1582_pos, 1
    substr rx1582_tgt, rx1582_tgt, rx1582_off
  rx1582_start:
    eq $I10, 1, rx1582_restart
    if_null rx1582_debug, debug_1073
    rx1582_cur."!cursor_debug"("START", "")
  debug_1073:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1583_done
    goto rxscan1583_scan
  rxscan1583_loop:
    (rx1582_pos) = rx1582_cur."from"()
    inc rx1582_pos
    rx1582_cur."!cursor_from"(rx1582_pos)
    ge rx1582_pos, rx1582_eos, rxscan1583_done
  rxscan1583_scan:
    set_addr $I10, rxscan1583_loop
    rx1582_cur."!mark_push"(0, rx1582_pos, $I10)
  rxscan1583_done:
  # rx literal  "proto"
    add $I11, rx1582_pos, 5
    gt $I11, rx1582_eos, rx1582_fail
    sub $I11, rx1582_pos, rx1582_off
    substr $S10, rx1582_tgt, $I11, 5
    ne $S10, "proto", rx1582_fail
    add rx1582_pos, 5
  # rx subrule "ws" subtype=method negate=
    rx1582_cur."!cursor_pos"(rx1582_pos)
    $P10 = rx1582_cur."ws"()
    unless $P10, rx1582_fail
    rx1582_pos = $P10."pos"()
  alt1584_0:
    set_addr $I10, alt1584_1
    rx1582_cur."!mark_push"(0, rx1582_pos, $I10)
  # rx literal  "regex"
    add $I11, rx1582_pos, 5
    gt $I11, rx1582_eos, rx1582_fail
    sub $I11, rx1582_pos, rx1582_off
    substr $S10, rx1582_tgt, $I11, 5
    ne $S10, "regex", rx1582_fail
    add rx1582_pos, 5
    goto alt1584_end
  alt1584_1:
    set_addr $I10, alt1584_2
    rx1582_cur."!mark_push"(0, rx1582_pos, $I10)
  # rx literal  "token"
    add $I11, rx1582_pos, 5
    gt $I11, rx1582_eos, rx1582_fail
    sub $I11, rx1582_pos, rx1582_off
    substr $S10, rx1582_tgt, $I11, 5
    ne $S10, "token", rx1582_fail
    add rx1582_pos, 5
    goto alt1584_end
  alt1584_2:
  # rx literal  "rule"
    add $I11, rx1582_pos, 4
    gt $I11, rx1582_eos, rx1582_fail
    sub $I11, rx1582_pos, rx1582_off
    substr $S10, rx1582_tgt, $I11, 4
    ne $S10, "rule", rx1582_fail
    add rx1582_pos, 4
  alt1584_end:
  # rx pass
    rx1582_cur."!cursor_pass"(rx1582_pos, "")
    if_null rx1582_debug, debug_1074
    rx1582_cur."!cursor_debug"("PASS", "", " at pos=", rx1582_pos)
  debug_1074:
    .return (rx1582_cur)
  rx1582_restart:
    if_null rx1582_debug, debug_1075
    rx1582_cur."!cursor_debug"("NEXT", "")
  debug_1075:
  rx1582_fail:
    (rx1582_rep, rx1582_pos, $I10, $P10) = rx1582_cur."!mark_fail"(0)
    lt rx1582_pos, -1, rx1582_done
    eq rx1582_pos, -1, rx1582_fail
    jump $I10
  rx1582_done:
    rx1582_cur."!cursor_fail"()
    if_null rx1582_debug, debug_1076
    rx1582_cur."!cursor_debug"("FAIL", "")
  debug_1076:
    .return (rx1582_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<multi_declarator>"  :subid("149_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1586, "ResizablePMCArray"
    push $P1586, ""
    .return ($P1586)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<regex_declarator>"  :subid("150_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1588_tgt
    .local int rx1588_pos
    .local int rx1588_off
    .local int rx1588_eos
    .local int rx1588_rep
    .local pmc rx1588_cur
    .local pmc rx1588_debug
    (rx1588_cur, rx1588_pos, rx1588_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1588_cur
    .local pmc match
    .lex "$/", match
    length rx1588_eos, rx1588_tgt
    gt rx1588_pos, rx1588_eos, rx1588_done
    set rx1588_off, 0
    lt rx1588_pos, 2, rx1588_start
    sub rx1588_off, rx1588_pos, 1
    substr rx1588_tgt, rx1588_tgt, rx1588_off
  rx1588_start:
    eq $I10, 1, rx1588_restart
    if_null rx1588_debug, debug_1080
    rx1588_cur."!cursor_debug"("START", "term:sym<regex_declarator>")
  debug_1080:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1589_done
    goto rxscan1589_scan
  rxscan1589_loop:
    (rx1588_pos) = rx1588_cur."from"()
    inc rx1588_pos
    rx1588_cur."!cursor_from"(rx1588_pos)
    ge rx1588_pos, rx1588_eos, rxscan1589_done
  rxscan1589_scan:
    set_addr $I10, rxscan1589_loop
    rx1588_cur."!mark_push"(0, rx1588_pos, $I10)
  rxscan1589_done:
.annotate 'line', 706
  # rx subrule "regex_declarator" subtype=capture negate=
    rx1588_cur."!cursor_pos"(rx1588_pos)
    $P10 = rx1588_cur."regex_declarator"()
    unless $P10, rx1588_fail
    rx1588_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("regex_declarator")
    rx1588_pos = $P10."pos"()
  # rx pass
    rx1588_cur."!cursor_pass"(rx1588_pos, "term:sym<regex_declarator>")
    if_null rx1588_debug, debug_1081
    rx1588_cur."!cursor_debug"("PASS", "term:sym<regex_declarator>", " at pos=", rx1588_pos)
  debug_1081:
    .return (rx1588_cur)
  rx1588_restart:
.annotate 'line', 436
    if_null rx1588_debug, debug_1082
    rx1588_cur."!cursor_debug"("NEXT", "term:sym<regex_declarator>")
  debug_1082:
  rx1588_fail:
    (rx1588_rep, rx1588_pos, $I10, $P10) = rx1588_cur."!mark_fail"(0)
    lt rx1588_pos, -1, rx1588_done
    eq rx1588_pos, -1, rx1588_fail
    jump $I10
  rx1588_done:
    rx1588_cur."!cursor_fail"()
    if_null rx1588_debug, debug_1083
    rx1588_cur."!cursor_debug"("FAIL", "term:sym<regex_declarator>")
  debug_1083:
    .return (rx1588_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<regex_declarator>"  :subid("151_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1591 = self."!PREFIX__!subrule"("regex_declarator", "")
    new $P1592, "ResizablePMCArray"
    push $P1592, $P1591
    .return ($P1592)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<statement_prefix>"  :subid("152_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1594_tgt
    .local int rx1594_pos
    .local int rx1594_off
    .local int rx1594_eos
    .local int rx1594_rep
    .local pmc rx1594_cur
    .local pmc rx1594_debug
    (rx1594_cur, rx1594_pos, rx1594_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1594_cur
    .local pmc match
    .lex "$/", match
    length rx1594_eos, rx1594_tgt
    gt rx1594_pos, rx1594_eos, rx1594_done
    set rx1594_off, 0
    lt rx1594_pos, 2, rx1594_start
    sub rx1594_off, rx1594_pos, 1
    substr rx1594_tgt, rx1594_tgt, rx1594_off
  rx1594_start:
    eq $I10, 1, rx1594_restart
    if_null rx1594_debug, debug_1084
    rx1594_cur."!cursor_debug"("START", "term:sym<statement_prefix>")
  debug_1084:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1595_done
    goto rxscan1595_scan
  rxscan1595_loop:
    (rx1594_pos) = rx1594_cur."from"()
    inc rx1594_pos
    rx1594_cur."!cursor_from"(rx1594_pos)
    ge rx1594_pos, rx1594_eos, rxscan1595_done
  rxscan1595_scan:
    set_addr $I10, rxscan1595_loop
    rx1594_cur."!mark_push"(0, rx1594_pos, $I10)
  rxscan1595_done:
.annotate 'line', 707
  # rx subrule "statement_prefix" subtype=capture negate=
    rx1594_cur."!cursor_pos"(rx1594_pos)
    $P10 = rx1594_cur."statement_prefix"()
    unless $P10, rx1594_fail
    rx1594_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement_prefix")
    rx1594_pos = $P10."pos"()
  # rx pass
    rx1594_cur."!cursor_pass"(rx1594_pos, "term:sym<statement_prefix>")
    if_null rx1594_debug, debug_1085
    rx1594_cur."!cursor_debug"("PASS", "term:sym<statement_prefix>", " at pos=", rx1594_pos)
  debug_1085:
    .return (rx1594_cur)
  rx1594_restart:
.annotate 'line', 436
    if_null rx1594_debug, debug_1086
    rx1594_cur."!cursor_debug"("NEXT", "term:sym<statement_prefix>")
  debug_1086:
  rx1594_fail:
    (rx1594_rep, rx1594_pos, $I10, $P10) = rx1594_cur."!mark_fail"(0)
    lt rx1594_pos, -1, rx1594_done
    eq rx1594_pos, -1, rx1594_fail
    jump $I10
  rx1594_done:
    rx1594_cur."!cursor_fail"()
    if_null rx1594_debug, debug_1087
    rx1594_cur."!cursor_debug"("FAIL", "term:sym<statement_prefix>")
  debug_1087:
    .return (rx1594_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<statement_prefix>"  :subid("153_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1597 = self."!PREFIX__!subrule"("statement_prefix", "")
    new $P1598, "ResizablePMCArray"
    push $P1598, $P1597
    .return ($P1598)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<lambda>"  :subid("154_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1600_tgt
    .local int rx1600_pos
    .local int rx1600_off
    .local int rx1600_eos
    .local int rx1600_rep
    .local pmc rx1600_cur
    .local pmc rx1600_debug
    (rx1600_cur, rx1600_pos, rx1600_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1600_cur
    .local pmc match
    .lex "$/", match
    length rx1600_eos, rx1600_tgt
    gt rx1600_pos, rx1600_eos, rx1600_done
    set rx1600_off, 0
    lt rx1600_pos, 2, rx1600_start
    sub rx1600_off, rx1600_pos, 1
    substr rx1600_tgt, rx1600_tgt, rx1600_off
  rx1600_start:
    eq $I10, 1, rx1600_restart
    if_null rx1600_debug, debug_1088
    rx1600_cur."!cursor_debug"("START", "term:sym<lambda>")
  debug_1088:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1601_done
    goto rxscan1601_scan
  rxscan1601_loop:
    (rx1600_pos) = rx1600_cur."from"()
    inc rx1600_pos
    rx1600_cur."!cursor_from"(rx1600_pos)
    ge rx1600_pos, rx1600_eos, rxscan1601_done
  rxscan1601_scan:
    set_addr $I10, rxscan1601_loop
    rx1600_cur."!mark_push"(0, rx1600_pos, $I10)
  rxscan1601_done:
.annotate 'line', 708
  # rx subrule "lambda" subtype=zerowidth negate=
    rx1600_cur."!cursor_pos"(rx1600_pos)
    $P10 = rx1600_cur."lambda"()
    unless $P10, rx1600_fail
  # rx subrule "pblock" subtype=capture negate=
    rx1600_cur."!cursor_pos"(rx1600_pos)
    $P10 = rx1600_cur."pblock"()
    unless $P10, rx1600_fail
    rx1600_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx1600_pos = $P10."pos"()
  # rx pass
    rx1600_cur."!cursor_pass"(rx1600_pos, "term:sym<lambda>")
    if_null rx1600_debug, debug_1089
    rx1600_cur."!cursor_debug"("PASS", "term:sym<lambda>", " at pos=", rx1600_pos)
  debug_1089:
    .return (rx1600_cur)
  rx1600_restart:
.annotate 'line', 436
    if_null rx1600_debug, debug_1090
    rx1600_cur."!cursor_debug"("NEXT", "term:sym<lambda>")
  debug_1090:
  rx1600_fail:
    (rx1600_rep, rx1600_pos, $I10, $P10) = rx1600_cur."!mark_fail"(0)
    lt rx1600_pos, -1, rx1600_done
    eq rx1600_pos, -1, rx1600_fail
    jump $I10
  rx1600_done:
    rx1600_cur."!cursor_fail"()
    if_null rx1600_debug, debug_1091
    rx1600_cur."!cursor_debug"("FAIL", "term:sym<lambda>")
  debug_1091:
    .return (rx1600_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<lambda>"  :subid("155_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1603, "ResizablePMCArray"
    push $P1603, ""
    .return ($P1603)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "fatarrow"  :subid("156_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1605_tgt
    .local int rx1605_pos
    .local int rx1605_off
    .local int rx1605_eos
    .local int rx1605_rep
    .local pmc rx1605_cur
    .local pmc rx1605_debug
    (rx1605_cur, rx1605_pos, rx1605_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1605_cur
    .local pmc match
    .lex "$/", match
    length rx1605_eos, rx1605_tgt
    gt rx1605_pos, rx1605_eos, rx1605_done
    set rx1605_off, 0
    lt rx1605_pos, 2, rx1605_start
    sub rx1605_off, rx1605_pos, 1
    substr rx1605_tgt, rx1605_tgt, rx1605_off
  rx1605_start:
    eq $I10, 1, rx1605_restart
    if_null rx1605_debug, debug_1092
    rx1605_cur."!cursor_debug"("START", "fatarrow")
  debug_1092:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1606_done
    goto rxscan1606_scan
  rxscan1606_loop:
    (rx1605_pos) = rx1605_cur."from"()
    inc rx1605_pos
    rx1605_cur."!cursor_from"(rx1605_pos)
    ge rx1605_pos, rx1605_eos, rxscan1606_done
  rxscan1606_scan:
    set_addr $I10, rxscan1606_loop
    rx1605_cur."!mark_push"(0, rx1605_pos, $I10)
  rxscan1606_done:
.annotate 'line', 711
  # rx subrule "identifier" subtype=capture negate=
    rx1605_cur."!cursor_pos"(rx1605_pos)
    $P10 = rx1605_cur."identifier"()
    unless $P10, rx1605_fail
    rx1605_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("key")
    rx1605_pos = $P10."pos"()
  # rx enumcharlist_q negate=0  r 0..-1
    sub $I10, rx1605_pos, rx1605_off
    set rx1605_rep, 0
    sub $I12, rx1605_eos, rx1605_pos
  rxenumcharlistq1607_loop:
    le $I12, 0, rxenumcharlistq1607_done
    substr $S10, rx1605_tgt, $I10, 1
    index $I11, unicode:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S10
    lt $I11, 0, rxenumcharlistq1607_done
    inc rx1605_rep
    inc $I10
    dec $I12
    goto rxenumcharlistq1607_loop
  rxenumcharlistq1607_done:
    add rx1605_pos, rx1605_pos, rx1605_rep
  # rx literal  "=>"
    add $I11, rx1605_pos, 2
    gt $I11, rx1605_eos, rx1605_fail
    sub $I11, rx1605_pos, rx1605_off
    substr $S10, rx1605_tgt, $I11, 2
    ne $S10, "=>", rx1605_fail
    add rx1605_pos, 2
  # rx subrule "ws" subtype=method negate=
    rx1605_cur."!cursor_pos"(rx1605_pos)
    $P10 = rx1605_cur."ws"()
    unless $P10, rx1605_fail
    rx1605_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx1605_cur."!cursor_pos"(rx1605_pos)
    $P10 = rx1605_cur."EXPR"("i=")
    unless $P10, rx1605_fail
    rx1605_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("val")
    rx1605_pos = $P10."pos"()
.annotate 'line', 710
  # rx pass
    rx1605_cur."!cursor_pass"(rx1605_pos, "fatarrow")
    if_null rx1605_debug, debug_1093
    rx1605_cur."!cursor_debug"("PASS", "fatarrow", " at pos=", rx1605_pos)
  debug_1093:
    .return (rx1605_cur)
  rx1605_restart:
.annotate 'line', 436
    if_null rx1605_debug, debug_1094
    rx1605_cur."!cursor_debug"("NEXT", "fatarrow")
  debug_1094:
  rx1605_fail:
    (rx1605_rep, rx1605_pos, $I10, $P10) = rx1605_cur."!mark_fail"(0)
    lt rx1605_pos, -1, rx1605_done
    eq rx1605_pos, -1, rx1605_fail
    jump $I10
  rx1605_done:
    rx1605_cur."!cursor_fail"()
    if_null rx1605_debug, debug_1095
    rx1605_cur."!cursor_debug"("FAIL", "fatarrow")
  debug_1095:
    .return (rx1605_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__fatarrow"  :subid("157_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1609 = self."!PREFIX__!subrule"("identifier", "")
    new $P1610, "ResizablePMCArray"
    push $P1610, $P1609
    .return ($P1610)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "colonpair"  :subid("158_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1612_tgt
    .local int rx1612_pos
    .local int rx1612_off
    .local int rx1612_eos
    .local int rx1612_rep
    .local pmc rx1612_cur
    .local pmc rx1612_debug
    (rx1612_cur, rx1612_pos, rx1612_tgt, $I10) = self."!cursor_start"()
    rx1612_cur."!cursor_caparray"("circumfix")
    .lex unicode:"$\x{a2}", rx1612_cur
    .local pmc match
    .lex "$/", match
    length rx1612_eos, rx1612_tgt
    gt rx1612_pos, rx1612_eos, rx1612_done
    set rx1612_off, 0
    lt rx1612_pos, 2, rx1612_start
    sub rx1612_off, rx1612_pos, 1
    substr rx1612_tgt, rx1612_tgt, rx1612_off
  rx1612_start:
    eq $I10, 1, rx1612_restart
    if_null rx1612_debug, debug_1096
    rx1612_cur."!cursor_debug"("START", "colonpair")
  debug_1096:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1613_done
    goto rxscan1613_scan
  rxscan1613_loop:
    (rx1612_pos) = rx1612_cur."from"()
    inc rx1612_pos
    rx1612_cur."!cursor_from"(rx1612_pos)
    ge rx1612_pos, rx1612_eos, rxscan1613_done
  rxscan1613_scan:
    set_addr $I10, rxscan1613_loop
    rx1612_cur."!mark_push"(0, rx1612_pos, $I10)
  rxscan1613_done:
.annotate 'line', 715
  # rx literal  ":"
    add $I11, rx1612_pos, 1
    gt $I11, rx1612_eos, rx1612_fail
    sub $I11, rx1612_pos, rx1612_off
    ord $I11, rx1612_tgt, $I11
    ne $I11, 58, rx1612_fail
    add rx1612_pos, 1
  alt1614_0:
.annotate 'line', 716
    set_addr $I10, alt1614_1
    rx1612_cur."!mark_push"(0, rx1612_pos, $I10)
.annotate 'line', 717
  # rx subcapture "not"
    set_addr $I10, rxcap_1615_fail
    rx1612_cur."!mark_push"(0, rx1612_pos, $I10)
  # rx literal  "!"
    add $I11, rx1612_pos, 1
    gt $I11, rx1612_eos, rx1612_fail
    sub $I11, rx1612_pos, rx1612_off
    ord $I11, rx1612_tgt, $I11
    ne $I11, 33, rx1612_fail
    add rx1612_pos, 1
    set_addr $I10, rxcap_1615_fail
    ($I12, $I11) = rx1612_cur."!mark_peek"($I10)
    rx1612_cur."!cursor_pos"($I11)
    ($P10) = rx1612_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1612_pos, "")
    rx1612_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("not")
    goto rxcap_1615_done
  rxcap_1615_fail:
    goto rx1612_fail
  rxcap_1615_done:
  # rx subrule "identifier" subtype=capture negate=
    rx1612_cur."!cursor_pos"(rx1612_pos)
    $P10 = rx1612_cur."identifier"()
    unless $P10, rx1612_fail
    rx1612_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx1612_pos = $P10."pos"()
    goto alt1614_end
  alt1614_1:
    set_addr $I10, alt1614_2
    rx1612_cur."!mark_push"(0, rx1612_pos, $I10)
.annotate 'line', 718
  # rx subrule "identifier" subtype=capture negate=
    rx1612_cur."!cursor_pos"(rx1612_pos)
    $P10 = rx1612_cur."identifier"()
    unless $P10, rx1612_fail
    rx1612_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("identifier")
    rx1612_pos = $P10."pos"()
  # rx rxquantr1616 ** 0..1
    set_addr $I10, rxquantr1616_done
    rx1612_cur."!mark_push"(0, rx1612_pos, $I10)
  rxquantr1616_loop:
  # rx subrule "circumfix" subtype=capture negate=
    rx1612_cur."!cursor_pos"(rx1612_pos)
    $P10 = rx1612_cur."circumfix"()
    unless $P10, rx1612_fail
    goto rxsubrule1617_pass
  rxsubrule1617_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1612_fail
  rxsubrule1617_pass:
    set_addr $I10, rxsubrule1617_back
    rx1612_cur."!mark_push"(0, rx1612_pos, $I10, $P10)
    $P10."!cursor_names"("circumfix")
    rx1612_pos = $P10."pos"()
    set_addr $I10, rxquantr1616_done
    (rx1612_rep) = rx1612_cur."!mark_commit"($I10)
  rxquantr1616_done:
    goto alt1614_end
  alt1614_2:
.annotate 'line', 719
  # rx subrule "circumfix" subtype=capture negate=
    rx1612_cur."!cursor_pos"(rx1612_pos)
    $P10 = rx1612_cur."circumfix"()
    unless $P10, rx1612_fail
    rx1612_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("circumfix")
    rx1612_pos = $P10."pos"()
  alt1614_end:
.annotate 'line', 714
  # rx pass
    rx1612_cur."!cursor_pass"(rx1612_pos, "colonpair")
    if_null rx1612_debug, debug_1097
    rx1612_cur."!cursor_debug"("PASS", "colonpair", " at pos=", rx1612_pos)
  debug_1097:
    .return (rx1612_cur)
  rx1612_restart:
.annotate 'line', 436
    if_null rx1612_debug, debug_1098
    rx1612_cur."!cursor_debug"("NEXT", "colonpair")
  debug_1098:
  rx1612_fail:
    (rx1612_rep, rx1612_pos, $I10, $P10) = rx1612_cur."!mark_fail"(0)
    lt rx1612_pos, -1, rx1612_done
    eq rx1612_pos, -1, rx1612_fail
    jump $I10
  rx1612_done:
    rx1612_cur."!cursor_fail"()
    if_null rx1612_debug, debug_1099
    rx1612_cur."!cursor_debug"("FAIL", "colonpair")
  debug_1099:
    .return (rx1612_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__colonpair"  :subid("159_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1619 = self."!PREFIX__!subrule"("circumfix", ":")
    $P1620 = self."!PREFIX__!subrule"("identifier", ":")
    $P1621 = self."!PREFIX__!subrule"("identifier", ":!")
    new $P1622, "ResizablePMCArray"
    push $P1622, $P1619
    push $P1622, $P1620
    push $P1622, $P1621
    .return ($P1622)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "variable"  :subid("160_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1624_tgt
    .local int rx1624_pos
    .local int rx1624_off
    .local int rx1624_eos
    .local int rx1624_rep
    .local pmc rx1624_cur
    .local pmc rx1624_debug
    (rx1624_cur, rx1624_pos, rx1624_tgt, $I10) = self."!cursor_start"()
    rx1624_cur."!cursor_caparray"("twigil")
    .lex unicode:"$\x{a2}", rx1624_cur
    .local pmc match
    .lex "$/", match
    length rx1624_eos, rx1624_tgt
    gt rx1624_pos, rx1624_eos, rx1624_done
    set rx1624_off, 0
    lt rx1624_pos, 2, rx1624_start
    sub rx1624_off, rx1624_pos, 1
    substr rx1624_tgt, rx1624_tgt, rx1624_off
  rx1624_start:
    eq $I10, 1, rx1624_restart
    if_null rx1624_debug, debug_1100
    rx1624_cur."!cursor_debug"("START", "variable")
  debug_1100:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1625_done
    goto rxscan1625_scan
  rxscan1625_loop:
    (rx1624_pos) = rx1624_cur."from"()
    inc rx1624_pos
    rx1624_cur."!cursor_from"(rx1624_pos)
    ge rx1624_pos, rx1624_eos, rxscan1625_done
  rxscan1625_scan:
    set_addr $I10, rxscan1625_loop
    rx1624_cur."!mark_push"(0, rx1624_pos, $I10)
  rxscan1625_done:
  alt1626_0:
.annotate 'line', 723
    set_addr $I10, alt1626_1
    rx1624_cur."!mark_push"(0, rx1624_pos, $I10)
.annotate 'line', 724
  # rx subrule "sigil" subtype=capture negate=
    rx1624_cur."!cursor_pos"(rx1624_pos)
    $P10 = rx1624_cur."sigil"()
    unless $P10, rx1624_fail
    rx1624_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx1624_pos = $P10."pos"()
  # rx rxquantr1627 ** 0..1
    set_addr $I10, rxquantr1627_done
    rx1624_cur."!mark_push"(0, rx1624_pos, $I10)
  rxquantr1627_loop:
  # rx subrule "twigil" subtype=capture negate=
    rx1624_cur."!cursor_pos"(rx1624_pos)
    $P10 = rx1624_cur."twigil"()
    unless $P10, rx1624_fail
    goto rxsubrule1628_pass
  rxsubrule1628_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1624_fail
  rxsubrule1628_pass:
    set_addr $I10, rxsubrule1628_back
    rx1624_cur."!mark_push"(0, rx1624_pos, $I10, $P10)
    $P10."!cursor_names"("twigil")
    rx1624_pos = $P10."pos"()
    set_addr $I10, rxquantr1627_done
    (rx1624_rep) = rx1624_cur."!mark_commit"($I10)
  rxquantr1627_done:
  # rx subrule "name" subtype=capture negate=
    rx1624_cur."!cursor_pos"(rx1624_pos)
    $P10 = rx1624_cur."name"()
    unless $P10, rx1624_fail
    rx1624_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("desigilname")
    rx1624_pos = $P10."pos"()
    goto alt1626_end
  alt1626_1:
    set_addr $I10, alt1626_2
    rx1624_cur."!mark_push"(0, rx1624_pos, $I10)
.annotate 'line', 725
  # rx subrule "sigil" subtype=capture negate=
    rx1624_cur."!cursor_pos"(rx1624_pos)
    $P10 = rx1624_cur."sigil"()
    unless $P10, rx1624_fail
    rx1624_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx1624_pos = $P10."pos"()
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1624_pos, rx1624_off
    substr $S10, rx1624_tgt, $I10, 1
    index $I11, "<[", $S10
    lt $I11, 0, rx1624_fail
  # rx subrule "postcircumfix" subtype=capture negate=
    rx1624_cur."!cursor_pos"(rx1624_pos)
    $P10 = rx1624_cur."postcircumfix"()
    unless $P10, rx1624_fail
    rx1624_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("postcircumfix")
    rx1624_pos = $P10."pos"()
    goto alt1626_end
  alt1626_2:
.annotate 'line', 726
  # rx subcapture "sigil"
    set_addr $I10, rxcap_1629_fail
    rx1624_cur."!mark_push"(0, rx1624_pos, $I10)
  # rx literal  "$"
    add $I11, rx1624_pos, 1
    gt $I11, rx1624_eos, rx1624_fail
    sub $I11, rx1624_pos, rx1624_off
    ord $I11, rx1624_tgt, $I11
    ne $I11, 36, rx1624_fail
    add rx1624_pos, 1
    set_addr $I10, rxcap_1629_fail
    ($I12, $I11) = rx1624_cur."!mark_peek"($I10)
    rx1624_cur."!cursor_pos"($I11)
    ($P10) = rx1624_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1624_pos, "")
    rx1624_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    goto rxcap_1629_done
  rxcap_1629_fail:
    goto rx1624_fail
  rxcap_1629_done:
  # rx subcapture "desigilname"
    set_addr $I10, rxcap_1630_fail
    rx1624_cur."!mark_push"(0, rx1624_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx1624_pos, rx1624_eos, rx1624_fail
    sub $I10, rx1624_pos, rx1624_off
    substr $S10, rx1624_tgt, $I10, 1
    index $I11, "/_!", $S10
    lt $I11, 0, rx1624_fail
    inc rx1624_pos
    set_addr $I10, rxcap_1630_fail
    ($I12, $I11) = rx1624_cur."!mark_peek"($I10)
    rx1624_cur."!cursor_pos"($I11)
    ($P10) = rx1624_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1624_pos, "")
    rx1624_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("desigilname")
    goto rxcap_1630_done
  rxcap_1630_fail:
    goto rx1624_fail
  rxcap_1630_done:
  alt1626_end:
.annotate 'line', 723
  # rx pass
    rx1624_cur."!cursor_pass"(rx1624_pos, "variable")
    if_null rx1624_debug, debug_1101
    rx1624_cur."!cursor_debug"("PASS", "variable", " at pos=", rx1624_pos)
  debug_1101:
    .return (rx1624_cur)
  rx1624_restart:
.annotate 'line', 436
    if_null rx1624_debug, debug_1102
    rx1624_cur."!cursor_debug"("NEXT", "variable")
  debug_1102:
  rx1624_fail:
    (rx1624_rep, rx1624_pos, $I10, $P10) = rx1624_cur."!mark_fail"(0)
    lt rx1624_pos, -1, rx1624_done
    eq rx1624_pos, -1, rx1624_fail
    jump $I10
  rx1624_done:
    rx1624_cur."!cursor_fail"()
    if_null rx1624_debug, debug_1103
    rx1624_cur."!cursor_debug"("FAIL", "variable")
  debug_1103:
    .return (rx1624_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__variable"  :subid("161_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1632 = self."!PREFIX__!subrule"("sigil", "")
    $P1633 = self."!PREFIX__!subrule"("sigil", "")
    new $P1634, "ResizablePMCArray"
    push $P1634, "/"
    push $P1634, "_"
    push $P1634, "!"
    push $P1634, $P1632
    push $P1634, $P1633
    .return ($P1634)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "sigil"  :subid("162_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1636_tgt
    .local int rx1636_pos
    .local int rx1636_off
    .local int rx1636_eos
    .local int rx1636_rep
    .local pmc rx1636_cur
    .local pmc rx1636_debug
    (rx1636_cur, rx1636_pos, rx1636_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1636_cur
    .local pmc match
    .lex "$/", match
    length rx1636_eos, rx1636_tgt
    gt rx1636_pos, rx1636_eos, rx1636_done
    set rx1636_off, 0
    lt rx1636_pos, 2, rx1636_start
    sub rx1636_off, rx1636_pos, 1
    substr rx1636_tgt, rx1636_tgt, rx1636_off
  rx1636_start:
    eq $I10, 1, rx1636_restart
    if_null rx1636_debug, debug_1104
    rx1636_cur."!cursor_debug"("START", "sigil")
  debug_1104:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1637_done
    goto rxscan1637_scan
  rxscan1637_loop:
    (rx1636_pos) = rx1636_cur."from"()
    inc rx1636_pos
    rx1636_cur."!cursor_from"(rx1636_pos)
    ge rx1636_pos, rx1636_eos, rxscan1637_done
  rxscan1637_scan:
    set_addr $I10, rxscan1637_loop
    rx1636_cur."!mark_push"(0, rx1636_pos, $I10)
  rxscan1637_done:
.annotate 'line', 729
  # rx enumcharlist negate=0 
    ge rx1636_pos, rx1636_eos, rx1636_fail
    sub $I10, rx1636_pos, rx1636_off
    substr $S10, rx1636_tgt, $I10, 1
    index $I11, "$@%&", $S10
    lt $I11, 0, rx1636_fail
    inc rx1636_pos
  # rx pass
    rx1636_cur."!cursor_pass"(rx1636_pos, "sigil")
    if_null rx1636_debug, debug_1105
    rx1636_cur."!cursor_debug"("PASS", "sigil", " at pos=", rx1636_pos)
  debug_1105:
    .return (rx1636_cur)
  rx1636_restart:
.annotate 'line', 436
    if_null rx1636_debug, debug_1106
    rx1636_cur."!cursor_debug"("NEXT", "sigil")
  debug_1106:
  rx1636_fail:
    (rx1636_rep, rx1636_pos, $I10, $P10) = rx1636_cur."!mark_fail"(0)
    lt rx1636_pos, -1, rx1636_done
    eq rx1636_pos, -1, rx1636_fail
    jump $I10
  rx1636_done:
    rx1636_cur."!cursor_fail"()
    if_null rx1636_debug, debug_1107
    rx1636_cur."!cursor_debug"("FAIL", "sigil")
  debug_1107:
    .return (rx1636_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__sigil"  :subid("163_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1639, "ResizablePMCArray"
    push $P1639, "$"
    push $P1639, "@"
    push $P1639, "%"
    push $P1639, "&"
    .return ($P1639)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "twigil"  :subid("164_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1641_tgt
    .local int rx1641_pos
    .local int rx1641_off
    .local int rx1641_eos
    .local int rx1641_rep
    .local pmc rx1641_cur
    .local pmc rx1641_debug
    (rx1641_cur, rx1641_pos, rx1641_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1641_cur
    .local pmc match
    .lex "$/", match
    length rx1641_eos, rx1641_tgt
    gt rx1641_pos, rx1641_eos, rx1641_done
    set rx1641_off, 0
    lt rx1641_pos, 2, rx1641_start
    sub rx1641_off, rx1641_pos, 1
    substr rx1641_tgt, rx1641_tgt, rx1641_off
  rx1641_start:
    eq $I10, 1, rx1641_restart
    if_null rx1641_debug, debug_1108
    rx1641_cur."!cursor_debug"("START", "twigil")
  debug_1108:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1642_done
    goto rxscan1642_scan
  rxscan1642_loop:
    (rx1641_pos) = rx1641_cur."from"()
    inc rx1641_pos
    rx1641_cur."!cursor_from"(rx1641_pos)
    ge rx1641_pos, rx1641_eos, rxscan1642_done
  rxscan1642_scan:
    set_addr $I10, rxscan1642_loop
    rx1641_cur."!mark_push"(0, rx1641_pos, $I10)
  rxscan1642_done:
.annotate 'line', 731
  # rx enumcharlist negate=0 
    ge rx1641_pos, rx1641_eos, rx1641_fail
    sub $I10, rx1641_pos, rx1641_off
    substr $S10, rx1641_tgt, $I10, 1
    index $I11, "*!?", $S10
    lt $I11, 0, rx1641_fail
    inc rx1641_pos
  # rx pass
    rx1641_cur."!cursor_pass"(rx1641_pos, "twigil")
    if_null rx1641_debug, debug_1109
    rx1641_cur."!cursor_debug"("PASS", "twigil", " at pos=", rx1641_pos)
  debug_1109:
    .return (rx1641_cur)
  rx1641_restart:
.annotate 'line', 436
    if_null rx1641_debug, debug_1110
    rx1641_cur."!cursor_debug"("NEXT", "twigil")
  debug_1110:
  rx1641_fail:
    (rx1641_rep, rx1641_pos, $I10, $P10) = rx1641_cur."!mark_fail"(0)
    lt rx1641_pos, -1, rx1641_done
    eq rx1641_pos, -1, rx1641_fail
    jump $I10
  rx1641_done:
    rx1641_cur."!cursor_fail"()
    if_null rx1641_debug, debug_1111
    rx1641_cur."!cursor_debug"("FAIL", "twigil")
  debug_1111:
    .return (rx1641_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__twigil"  :subid("165_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P1644, "ResizablePMCArray"
    push $P1644, "*"
    push $P1644, "!"
    push $P1644, "?"
    .return ($P1644)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator"  :subid("166_1307835824.98345")
    .param pmc param_1646
.annotate 'line', 733
    .lex "self", param_1646
    $P1647 = param_1646."!protoregex"("package_declarator")
    .return ($P1647)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator"  :subid("167_1307835824.98345")
    .param pmc param_1649
.annotate 'line', 733
    .lex "self", param_1649
    $P1650 = param_1649."!PREFIX__!protoregex"("package_declarator")
    .return ($P1650)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<module>"  :subid("168_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 735
    new $P1652, "Undef"
    .lex "$*OUTERPACKAGE", $P1652
.annotate 'line', 736
    new $P1653, "Undef"
    .lex "$*PKGDECL", $P1653
.annotate 'line', 436
    .local string rx1654_tgt
    .local int rx1654_pos
    .local int rx1654_off
    .local int rx1654_eos
    .local int rx1654_rep
    .local pmc rx1654_cur
    .local pmc rx1654_debug
    (rx1654_cur, rx1654_pos, rx1654_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1654_cur
    .local pmc match
    .lex "$/", match
    length rx1654_eos, rx1654_tgt
    gt rx1654_pos, rx1654_eos, rx1654_done
    set rx1654_off, 0
    lt rx1654_pos, 2, rx1654_start
    sub rx1654_off, rx1654_pos, 1
    substr rx1654_tgt, rx1654_tgt, rx1654_off
  rx1654_start:
    eq $I10, 1, rx1654_restart
    if_null rx1654_debug, debug_1112
    rx1654_cur."!cursor_debug"("START", "package_declarator:sym<module>")
  debug_1112:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1655_done
    goto rxscan1655_scan
  rxscan1655_loop:
    (rx1654_pos) = rx1654_cur."from"()
    inc rx1654_pos
    rx1654_cur."!cursor_from"(rx1654_pos)
    ge rx1654_pos, rx1654_eos, rxscan1655_done
  rxscan1655_scan:
    set_addr $I10, rxscan1655_loop
    rx1654_cur."!mark_push"(0, rx1654_pos, $I10)
  rxscan1655_done:
.annotate 'line', 735
    rx1654_cur."!cursor_pos"(rx1654_pos)
    find_dynamic_lex $P1658, "$*PACKAGE"
    unless_null $P1658, vivify_1113
    get_hll_global $P1656, "GLOBAL"
    get_who $P1657, $P1656
    set $P1658, $P1657["$PACKAGE"]
    unless_null $P1658, vivify_1114
    die "Contextual $*PACKAGE not found"
  vivify_1114:
  vivify_1113:
    store_lex "$*OUTERPACKAGE", $P1658
.annotate 'line', 736
    rx1654_cur."!cursor_pos"(rx1654_pos)
    new $P1659, "String"
    assign $P1659, "module"
    store_lex "$*PKGDECL", $P1659
.annotate 'line', 737
  # rx subcapture "sym"
    set_addr $I10, rxcap_1660_fail
    rx1654_cur."!mark_push"(0, rx1654_pos, $I10)
  # rx literal  "module"
    add $I11, rx1654_pos, 6
    gt $I11, rx1654_eos, rx1654_fail
    sub $I11, rx1654_pos, rx1654_off
    substr $S10, rx1654_tgt, $I11, 6
    ne $S10, "module", rx1654_fail
    add rx1654_pos, 6
    set_addr $I10, rxcap_1660_fail
    ($I12, $I11) = rx1654_cur."!mark_peek"($I10)
    rx1654_cur."!cursor_pos"($I11)
    ($P10) = rx1654_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1654_pos, "")
    rx1654_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1660_done
  rxcap_1660_fail:
    goto rx1654_fail
  rxcap_1660_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1654_cur."!cursor_pos"(rx1654_pos)
    $P10 = rx1654_cur."package_def"()
    unless $P10, rx1654_fail
    rx1654_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1654_pos = $P10."pos"()
.annotate 'line', 734
  # rx pass
    rx1654_cur."!cursor_pass"(rx1654_pos, "package_declarator:sym<module>")
    if_null rx1654_debug, debug_1115
    rx1654_cur."!cursor_debug"("PASS", "package_declarator:sym<module>", " at pos=", rx1654_pos)
  debug_1115:
    .return (rx1654_cur)
  rx1654_restart:
.annotate 'line', 436
    if_null rx1654_debug, debug_1116
    rx1654_cur."!cursor_debug"("NEXT", "package_declarator:sym<module>")
  debug_1116:
  rx1654_fail:
    (rx1654_rep, rx1654_pos, $I10, $P10) = rx1654_cur."!mark_fail"(0)
    lt rx1654_pos, -1, rx1654_done
    eq rx1654_pos, -1, rx1654_fail
    jump $I10
  rx1654_done:
    rx1654_cur."!cursor_fail"()
    if_null rx1654_debug, debug_1117
    rx1654_cur."!cursor_debug"("FAIL", "package_declarator:sym<module>")
  debug_1117:
    .return (rx1654_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<module>"  :subid("169_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1662 = self."!PREFIX__!subrule"("package_def", "module")
    new $P1663, "ResizablePMCArray"
    push $P1663, $P1662
    .return ($P1663)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<knowhow>"  :subid("170_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 740
    new $P1665, "Undef"
    .lex "$*OUTERPACKAGE", $P1665
.annotate 'line', 741
    new $P1666, "Undef"
    .lex "$*PKGDECL", $P1666
.annotate 'line', 436
    .local string rx1667_tgt
    .local int rx1667_pos
    .local int rx1667_off
    .local int rx1667_eos
    .local int rx1667_rep
    .local pmc rx1667_cur
    .local pmc rx1667_debug
    (rx1667_cur, rx1667_pos, rx1667_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1667_cur
    .local pmc match
    .lex "$/", match
    length rx1667_eos, rx1667_tgt
    gt rx1667_pos, rx1667_eos, rx1667_done
    set rx1667_off, 0
    lt rx1667_pos, 2, rx1667_start
    sub rx1667_off, rx1667_pos, 1
    substr rx1667_tgt, rx1667_tgt, rx1667_off
  rx1667_start:
    eq $I10, 1, rx1667_restart
    if_null rx1667_debug, debug_1118
    rx1667_cur."!cursor_debug"("START", "package_declarator:sym<knowhow>")
  debug_1118:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1668_done
    goto rxscan1668_scan
  rxscan1668_loop:
    (rx1667_pos) = rx1667_cur."from"()
    inc rx1667_pos
    rx1667_cur."!cursor_from"(rx1667_pos)
    ge rx1667_pos, rx1667_eos, rxscan1668_done
  rxscan1668_scan:
    set_addr $I10, rxscan1668_loop
    rx1667_cur."!mark_push"(0, rx1667_pos, $I10)
  rxscan1668_done:
.annotate 'line', 740
    rx1667_cur."!cursor_pos"(rx1667_pos)
    find_dynamic_lex $P1671, "$*PACKAGE"
    unless_null $P1671, vivify_1119
    get_hll_global $P1669, "GLOBAL"
    get_who $P1670, $P1669
    set $P1671, $P1670["$PACKAGE"]
    unless_null $P1671, vivify_1120
    die "Contextual $*PACKAGE not found"
  vivify_1120:
  vivify_1119:
    store_lex "$*OUTERPACKAGE", $P1671
.annotate 'line', 741
    rx1667_cur."!cursor_pos"(rx1667_pos)
    new $P1672, "String"
    assign $P1672, "knowhow"
    store_lex "$*PKGDECL", $P1672
.annotate 'line', 742
  # rx subcapture "sym"
    set_addr $I10, rxcap_1673_fail
    rx1667_cur."!mark_push"(0, rx1667_pos, $I10)
  # rx literal  "knowhow"
    add $I11, rx1667_pos, 7
    gt $I11, rx1667_eos, rx1667_fail
    sub $I11, rx1667_pos, rx1667_off
    substr $S10, rx1667_tgt, $I11, 7
    ne $S10, "knowhow", rx1667_fail
    add rx1667_pos, 7
    set_addr $I10, rxcap_1673_fail
    ($I12, $I11) = rx1667_cur."!mark_peek"($I10)
    rx1667_cur."!cursor_pos"($I11)
    ($P10) = rx1667_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1667_pos, "")
    rx1667_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1673_done
  rxcap_1673_fail:
    goto rx1667_fail
  rxcap_1673_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1667_cur."!cursor_pos"(rx1667_pos)
    $P10 = rx1667_cur."package_def"()
    unless $P10, rx1667_fail
    rx1667_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1667_pos = $P10."pos"()
.annotate 'line', 739
  # rx pass
    rx1667_cur."!cursor_pass"(rx1667_pos, "package_declarator:sym<knowhow>")
    if_null rx1667_debug, debug_1121
    rx1667_cur."!cursor_debug"("PASS", "package_declarator:sym<knowhow>", " at pos=", rx1667_pos)
  debug_1121:
    .return (rx1667_cur)
  rx1667_restart:
.annotate 'line', 436
    if_null rx1667_debug, debug_1122
    rx1667_cur."!cursor_debug"("NEXT", "package_declarator:sym<knowhow>")
  debug_1122:
  rx1667_fail:
    (rx1667_rep, rx1667_pos, $I10, $P10) = rx1667_cur."!mark_fail"(0)
    lt rx1667_pos, -1, rx1667_done
    eq rx1667_pos, -1, rx1667_fail
    jump $I10
  rx1667_done:
    rx1667_cur."!cursor_fail"()
    if_null rx1667_debug, debug_1123
    rx1667_cur."!cursor_debug"("FAIL", "package_declarator:sym<knowhow>")
  debug_1123:
    .return (rx1667_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<knowhow>"  :subid("171_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1675 = self."!PREFIX__!subrule"("package_def", "knowhow")
    new $P1676, "ResizablePMCArray"
    push $P1676, $P1675
    .return ($P1676)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<class>"  :subid("172_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 745
    new $P1678, "Undef"
    .lex "$*OUTERPACKAGE", $P1678
.annotate 'line', 746
    new $P1679, "Undef"
    .lex "$*PKGDECL", $P1679
.annotate 'line', 436
    .local string rx1680_tgt
    .local int rx1680_pos
    .local int rx1680_off
    .local int rx1680_eos
    .local int rx1680_rep
    .local pmc rx1680_cur
    .local pmc rx1680_debug
    (rx1680_cur, rx1680_pos, rx1680_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1680_cur
    .local pmc match
    .lex "$/", match
    length rx1680_eos, rx1680_tgt
    gt rx1680_pos, rx1680_eos, rx1680_done
    set rx1680_off, 0
    lt rx1680_pos, 2, rx1680_start
    sub rx1680_off, rx1680_pos, 1
    substr rx1680_tgt, rx1680_tgt, rx1680_off
  rx1680_start:
    eq $I10, 1, rx1680_restart
    if_null rx1680_debug, debug_1124
    rx1680_cur."!cursor_debug"("START", "package_declarator:sym<class>")
  debug_1124:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1681_done
    goto rxscan1681_scan
  rxscan1681_loop:
    (rx1680_pos) = rx1680_cur."from"()
    inc rx1680_pos
    rx1680_cur."!cursor_from"(rx1680_pos)
    ge rx1680_pos, rx1680_eos, rxscan1681_done
  rxscan1681_scan:
    set_addr $I10, rxscan1681_loop
    rx1680_cur."!mark_push"(0, rx1680_pos, $I10)
  rxscan1681_done:
.annotate 'line', 745
    rx1680_cur."!cursor_pos"(rx1680_pos)
    find_dynamic_lex $P1684, "$*PACKAGE"
    unless_null $P1684, vivify_1125
    get_hll_global $P1682, "GLOBAL"
    get_who $P1683, $P1682
    set $P1684, $P1683["$PACKAGE"]
    unless_null $P1684, vivify_1126
    die "Contextual $*PACKAGE not found"
  vivify_1126:
  vivify_1125:
    store_lex "$*OUTERPACKAGE", $P1684
.annotate 'line', 746
    rx1680_cur."!cursor_pos"(rx1680_pos)
    new $P1685, "String"
    assign $P1685, "class"
    store_lex "$*PKGDECL", $P1685
.annotate 'line', 747
  # rx subcapture "sym"
    set_addr $I10, rxcap_1686_fail
    rx1680_cur."!mark_push"(0, rx1680_pos, $I10)
  # rx literal  "class"
    add $I11, rx1680_pos, 5
    gt $I11, rx1680_eos, rx1680_fail
    sub $I11, rx1680_pos, rx1680_off
    substr $S10, rx1680_tgt, $I11, 5
    ne $S10, "class", rx1680_fail
    add rx1680_pos, 5
    set_addr $I10, rxcap_1686_fail
    ($I12, $I11) = rx1680_cur."!mark_peek"($I10)
    rx1680_cur."!cursor_pos"($I11)
    ($P10) = rx1680_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1680_pos, "")
    rx1680_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1686_done
  rxcap_1686_fail:
    goto rx1680_fail
  rxcap_1686_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1680_cur."!cursor_pos"(rx1680_pos)
    $P10 = rx1680_cur."package_def"()
    unless $P10, rx1680_fail
    rx1680_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1680_pos = $P10."pos"()
.annotate 'line', 744
  # rx pass
    rx1680_cur."!cursor_pass"(rx1680_pos, "package_declarator:sym<class>")
    if_null rx1680_debug, debug_1127
    rx1680_cur."!cursor_debug"("PASS", "package_declarator:sym<class>", " at pos=", rx1680_pos)
  debug_1127:
    .return (rx1680_cur)
  rx1680_restart:
.annotate 'line', 436
    if_null rx1680_debug, debug_1128
    rx1680_cur."!cursor_debug"("NEXT", "package_declarator:sym<class>")
  debug_1128:
  rx1680_fail:
    (rx1680_rep, rx1680_pos, $I10, $P10) = rx1680_cur."!mark_fail"(0)
    lt rx1680_pos, -1, rx1680_done
    eq rx1680_pos, -1, rx1680_fail
    jump $I10
  rx1680_done:
    rx1680_cur."!cursor_fail"()
    if_null rx1680_debug, debug_1129
    rx1680_cur."!cursor_debug"("FAIL", "package_declarator:sym<class>")
  debug_1129:
    .return (rx1680_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<class>"  :subid("173_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1688 = self."!PREFIX__!subrule"("package_def", "class")
    new $P1689, "ResizablePMCArray"
    push $P1689, $P1688
    .return ($P1689)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<grammar>"  :subid("174_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 750
    new $P1691, "Undef"
    .lex "$*OUTERPACKAGE", $P1691
.annotate 'line', 751
    new $P1692, "Undef"
    .lex "$*PKGDECL", $P1692
.annotate 'line', 436
    .local string rx1693_tgt
    .local int rx1693_pos
    .local int rx1693_off
    .local int rx1693_eos
    .local int rx1693_rep
    .local pmc rx1693_cur
    .local pmc rx1693_debug
    (rx1693_cur, rx1693_pos, rx1693_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1693_cur
    .local pmc match
    .lex "$/", match
    length rx1693_eos, rx1693_tgt
    gt rx1693_pos, rx1693_eos, rx1693_done
    set rx1693_off, 0
    lt rx1693_pos, 2, rx1693_start
    sub rx1693_off, rx1693_pos, 1
    substr rx1693_tgt, rx1693_tgt, rx1693_off
  rx1693_start:
    eq $I10, 1, rx1693_restart
    if_null rx1693_debug, debug_1130
    rx1693_cur."!cursor_debug"("START", "package_declarator:sym<grammar>")
  debug_1130:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1694_done
    goto rxscan1694_scan
  rxscan1694_loop:
    (rx1693_pos) = rx1693_cur."from"()
    inc rx1693_pos
    rx1693_cur."!cursor_from"(rx1693_pos)
    ge rx1693_pos, rx1693_eos, rxscan1694_done
  rxscan1694_scan:
    set_addr $I10, rxscan1694_loop
    rx1693_cur."!mark_push"(0, rx1693_pos, $I10)
  rxscan1694_done:
.annotate 'line', 750
    rx1693_cur."!cursor_pos"(rx1693_pos)
    find_dynamic_lex $P1697, "$*PACKAGE"
    unless_null $P1697, vivify_1131
    get_hll_global $P1695, "GLOBAL"
    get_who $P1696, $P1695
    set $P1697, $P1696["$PACKAGE"]
    unless_null $P1697, vivify_1132
    die "Contextual $*PACKAGE not found"
  vivify_1132:
  vivify_1131:
    store_lex "$*OUTERPACKAGE", $P1697
.annotate 'line', 751
    rx1693_cur."!cursor_pos"(rx1693_pos)
    new $P1698, "String"
    assign $P1698, "grammar"
    store_lex "$*PKGDECL", $P1698
.annotate 'line', 752
  # rx subcapture "sym"
    set_addr $I10, rxcap_1699_fail
    rx1693_cur."!mark_push"(0, rx1693_pos, $I10)
  # rx literal  "grammar"
    add $I11, rx1693_pos, 7
    gt $I11, rx1693_eos, rx1693_fail
    sub $I11, rx1693_pos, rx1693_off
    substr $S10, rx1693_tgt, $I11, 7
    ne $S10, "grammar", rx1693_fail
    add rx1693_pos, 7
    set_addr $I10, rxcap_1699_fail
    ($I12, $I11) = rx1693_cur."!mark_peek"($I10)
    rx1693_cur."!cursor_pos"($I11)
    ($P10) = rx1693_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1693_pos, "")
    rx1693_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1699_done
  rxcap_1699_fail:
    goto rx1693_fail
  rxcap_1699_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1693_cur."!cursor_pos"(rx1693_pos)
    $P10 = rx1693_cur."package_def"()
    unless $P10, rx1693_fail
    rx1693_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1693_pos = $P10."pos"()
.annotate 'line', 749
  # rx pass
    rx1693_cur."!cursor_pass"(rx1693_pos, "package_declarator:sym<grammar>")
    if_null rx1693_debug, debug_1133
    rx1693_cur."!cursor_debug"("PASS", "package_declarator:sym<grammar>", " at pos=", rx1693_pos)
  debug_1133:
    .return (rx1693_cur)
  rx1693_restart:
.annotate 'line', 436
    if_null rx1693_debug, debug_1134
    rx1693_cur."!cursor_debug"("NEXT", "package_declarator:sym<grammar>")
  debug_1134:
  rx1693_fail:
    (rx1693_rep, rx1693_pos, $I10, $P10) = rx1693_cur."!mark_fail"(0)
    lt rx1693_pos, -1, rx1693_done
    eq rx1693_pos, -1, rx1693_fail
    jump $I10
  rx1693_done:
    rx1693_cur."!cursor_fail"()
    if_null rx1693_debug, debug_1135
    rx1693_cur."!cursor_debug"("FAIL", "package_declarator:sym<grammar>")
  debug_1135:
    .return (rx1693_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<grammar>"  :subid("175_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1701 = self."!PREFIX__!subrule"("package_def", "grammar")
    new $P1702, "ResizablePMCArray"
    push $P1702, $P1701
    .return ($P1702)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<role>"  :subid("176_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 755
    new $P1704, "Undef"
    .lex "$*OUTERPACKAGE", $P1704
.annotate 'line', 756
    new $P1705, "Undef"
    .lex "$*PKGDECL", $P1705
.annotate 'line', 436
    .local string rx1706_tgt
    .local int rx1706_pos
    .local int rx1706_off
    .local int rx1706_eos
    .local int rx1706_rep
    .local pmc rx1706_cur
    .local pmc rx1706_debug
    (rx1706_cur, rx1706_pos, rx1706_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1706_cur
    .local pmc match
    .lex "$/", match
    length rx1706_eos, rx1706_tgt
    gt rx1706_pos, rx1706_eos, rx1706_done
    set rx1706_off, 0
    lt rx1706_pos, 2, rx1706_start
    sub rx1706_off, rx1706_pos, 1
    substr rx1706_tgt, rx1706_tgt, rx1706_off
  rx1706_start:
    eq $I10, 1, rx1706_restart
    if_null rx1706_debug, debug_1136
    rx1706_cur."!cursor_debug"("START", "package_declarator:sym<role>")
  debug_1136:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1707_done
    goto rxscan1707_scan
  rxscan1707_loop:
    (rx1706_pos) = rx1706_cur."from"()
    inc rx1706_pos
    rx1706_cur."!cursor_from"(rx1706_pos)
    ge rx1706_pos, rx1706_eos, rxscan1707_done
  rxscan1707_scan:
    set_addr $I10, rxscan1707_loop
    rx1706_cur."!mark_push"(0, rx1706_pos, $I10)
  rxscan1707_done:
.annotate 'line', 755
    rx1706_cur."!cursor_pos"(rx1706_pos)
    find_dynamic_lex $P1710, "$*PACKAGE"
    unless_null $P1710, vivify_1137
    get_hll_global $P1708, "GLOBAL"
    get_who $P1709, $P1708
    set $P1710, $P1709["$PACKAGE"]
    unless_null $P1710, vivify_1138
    die "Contextual $*PACKAGE not found"
  vivify_1138:
  vivify_1137:
    store_lex "$*OUTERPACKAGE", $P1710
.annotate 'line', 756
    rx1706_cur."!cursor_pos"(rx1706_pos)
    new $P1711, "String"
    assign $P1711, "role"
    store_lex "$*PKGDECL", $P1711
.annotate 'line', 757
  # rx subcapture "sym"
    set_addr $I10, rxcap_1712_fail
    rx1706_cur."!mark_push"(0, rx1706_pos, $I10)
  # rx literal  "role"
    add $I11, rx1706_pos, 4
    gt $I11, rx1706_eos, rx1706_fail
    sub $I11, rx1706_pos, rx1706_off
    substr $S10, rx1706_tgt, $I11, 4
    ne $S10, "role", rx1706_fail
    add rx1706_pos, 4
    set_addr $I10, rxcap_1712_fail
    ($I12, $I11) = rx1706_cur."!mark_peek"($I10)
    rx1706_cur."!cursor_pos"($I11)
    ($P10) = rx1706_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1706_pos, "")
    rx1706_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1712_done
  rxcap_1712_fail:
    goto rx1706_fail
  rxcap_1712_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1706_cur."!cursor_pos"(rx1706_pos)
    $P10 = rx1706_cur."package_def"()
    unless $P10, rx1706_fail
    rx1706_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1706_pos = $P10."pos"()
.annotate 'line', 754
  # rx pass
    rx1706_cur."!cursor_pass"(rx1706_pos, "package_declarator:sym<role>")
    if_null rx1706_debug, debug_1139
    rx1706_cur."!cursor_debug"("PASS", "package_declarator:sym<role>", " at pos=", rx1706_pos)
  debug_1139:
    .return (rx1706_cur)
  rx1706_restart:
.annotate 'line', 436
    if_null rx1706_debug, debug_1140
    rx1706_cur."!cursor_debug"("NEXT", "package_declarator:sym<role>")
  debug_1140:
  rx1706_fail:
    (rx1706_rep, rx1706_pos, $I10, $P10) = rx1706_cur."!mark_fail"(0)
    lt rx1706_pos, -1, rx1706_done
    eq rx1706_pos, -1, rx1706_fail
    jump $I10
  rx1706_done:
    rx1706_cur."!cursor_fail"()
    if_null rx1706_debug, debug_1141
    rx1706_cur."!cursor_debug"("FAIL", "package_declarator:sym<role>")
  debug_1141:
    .return (rx1706_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<role>"  :subid("177_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1714 = self."!PREFIX__!subrule"("package_def", "role")
    new $P1715, "ResizablePMCArray"
    push $P1715, $P1714
    .return ($P1715)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<native>"  :subid("178_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 760
    new $P1717, "Undef"
    .lex "$*OUTERPACKAGE", $P1717
.annotate 'line', 761
    new $P1718, "Undef"
    .lex "$*PKGDECL", $P1718
.annotate 'line', 436
    .local string rx1719_tgt
    .local int rx1719_pos
    .local int rx1719_off
    .local int rx1719_eos
    .local int rx1719_rep
    .local pmc rx1719_cur
    .local pmc rx1719_debug
    (rx1719_cur, rx1719_pos, rx1719_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1719_cur
    .local pmc match
    .lex "$/", match
    length rx1719_eos, rx1719_tgt
    gt rx1719_pos, rx1719_eos, rx1719_done
    set rx1719_off, 0
    lt rx1719_pos, 2, rx1719_start
    sub rx1719_off, rx1719_pos, 1
    substr rx1719_tgt, rx1719_tgt, rx1719_off
  rx1719_start:
    eq $I10, 1, rx1719_restart
    if_null rx1719_debug, debug_1142
    rx1719_cur."!cursor_debug"("START", "package_declarator:sym<native>")
  debug_1142:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1720_done
    goto rxscan1720_scan
  rxscan1720_loop:
    (rx1719_pos) = rx1719_cur."from"()
    inc rx1719_pos
    rx1719_cur."!cursor_from"(rx1719_pos)
    ge rx1719_pos, rx1719_eos, rxscan1720_done
  rxscan1720_scan:
    set_addr $I10, rxscan1720_loop
    rx1719_cur."!mark_push"(0, rx1719_pos, $I10)
  rxscan1720_done:
.annotate 'line', 760
    rx1719_cur."!cursor_pos"(rx1719_pos)
    find_dynamic_lex $P1723, "$*PACKAGE"
    unless_null $P1723, vivify_1143
    get_hll_global $P1721, "GLOBAL"
    get_who $P1722, $P1721
    set $P1723, $P1722["$PACKAGE"]
    unless_null $P1723, vivify_1144
    die "Contextual $*PACKAGE not found"
  vivify_1144:
  vivify_1143:
    store_lex "$*OUTERPACKAGE", $P1723
.annotate 'line', 761
    rx1719_cur."!cursor_pos"(rx1719_pos)
    new $P1724, "String"
    assign $P1724, "native"
    store_lex "$*PKGDECL", $P1724
.annotate 'line', 762
  # rx subcapture "sym"
    set_addr $I10, rxcap_1725_fail
    rx1719_cur."!mark_push"(0, rx1719_pos, $I10)
  # rx literal  "native"
    add $I11, rx1719_pos, 6
    gt $I11, rx1719_eos, rx1719_fail
    sub $I11, rx1719_pos, rx1719_off
    substr $S10, rx1719_tgt, $I11, 6
    ne $S10, "native", rx1719_fail
    add rx1719_pos, 6
    set_addr $I10, rxcap_1725_fail
    ($I12, $I11) = rx1719_cur."!mark_peek"($I10)
    rx1719_cur."!cursor_pos"($I11)
    ($P10) = rx1719_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1719_pos, "")
    rx1719_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1725_done
  rxcap_1725_fail:
    goto rx1719_fail
  rxcap_1725_done:
  # rx subrule "package_def" subtype=capture negate=
    rx1719_cur."!cursor_pos"(rx1719_pos)
    $P10 = rx1719_cur."package_def"()
    unless $P10, rx1719_fail
    rx1719_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_def")
    rx1719_pos = $P10."pos"()
.annotate 'line', 759
  # rx pass
    rx1719_cur."!cursor_pass"(rx1719_pos, "package_declarator:sym<native>")
    if_null rx1719_debug, debug_1145
    rx1719_cur."!cursor_debug"("PASS", "package_declarator:sym<native>", " at pos=", rx1719_pos)
  debug_1145:
    .return (rx1719_cur)
  rx1719_restart:
.annotate 'line', 436
    if_null rx1719_debug, debug_1146
    rx1719_cur."!cursor_debug"("NEXT", "package_declarator:sym<native>")
  debug_1146:
  rx1719_fail:
    (rx1719_rep, rx1719_pos, $I10, $P10) = rx1719_cur."!mark_fail"(0)
    lt rx1719_pos, -1, rx1719_done
    eq rx1719_pos, -1, rx1719_fail
    jump $I10
  rx1719_done:
    rx1719_cur."!cursor_fail"()
    if_null rx1719_debug, debug_1147
    rx1719_cur."!cursor_debug"("FAIL", "package_declarator:sym<native>")
  debug_1147:
    .return (rx1719_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<native>"  :subid("179_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1727 = self."!PREFIX__!subrule"("package_def", "native")
    new $P1728, "ResizablePMCArray"
    push $P1728, $P1727
    .return ($P1728)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_declarator:sym<stub>"  :subid("180_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 765
    new $P1730, "Undef"
    .lex "$*OUTERPACKAGE", $P1730
.annotate 'line', 766
    new $P1731, "Undef"
    .lex "$*PKGDECL", $P1731
.annotate 'line', 436
    .local string rx1732_tgt
    .local int rx1732_pos
    .local int rx1732_off
    .local int rx1732_eos
    .local int rx1732_rep
    .local pmc rx1732_cur
    .local pmc rx1732_debug
    (rx1732_cur, rx1732_pos, rx1732_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1732_cur
    .local pmc match
    .lex "$/", match
    length rx1732_eos, rx1732_tgt
    gt rx1732_pos, rx1732_eos, rx1732_done
    set rx1732_off, 0
    lt rx1732_pos, 2, rx1732_start
    sub rx1732_off, rx1732_pos, 1
    substr rx1732_tgt, rx1732_tgt, rx1732_off
  rx1732_start:
    eq $I10, 1, rx1732_restart
    if_null rx1732_debug, debug_1148
    rx1732_cur."!cursor_debug"("START", "package_declarator:sym<stub>")
  debug_1148:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1733_done
    goto rxscan1733_scan
  rxscan1733_loop:
    (rx1732_pos) = rx1732_cur."from"()
    inc rx1732_pos
    rx1732_cur."!cursor_from"(rx1732_pos)
    ge rx1732_pos, rx1732_eos, rxscan1733_done
  rxscan1733_scan:
    set_addr $I10, rxscan1733_loop
    rx1732_cur."!mark_push"(0, rx1732_pos, $I10)
  rxscan1733_done:
.annotate 'line', 764
  # rx subrule "ws" subtype=method negate=
    rx1732_cur."!cursor_pos"(rx1732_pos)
    $P10 = rx1732_cur."ws"()
    unless $P10, rx1732_fail
    rx1732_pos = $P10."pos"()
.annotate 'line', 765
    rx1732_cur."!cursor_pos"(rx1732_pos)
    find_dynamic_lex $P1737, "$*PACKAGE"
    unless_null $P1737, vivify_1149
    get_hll_global $P1735, "GLOBAL"
    get_who $P1736, $P1735
    set $P1737, $P1736["$PACKAGE"]
    unless_null $P1737, vivify_1150
    die "Contextual $*PACKAGE not found"
  vivify_1150:
  vivify_1149:
    store_lex "$*OUTERPACKAGE", $P1737
  # rx subrule "ws" subtype=method negate=
    rx1732_cur."!cursor_pos"(rx1732_pos)
    $P10 = rx1732_cur."ws"()
    unless $P10, rx1732_fail
    rx1732_pos = $P10."pos"()
.annotate 'line', 766
    rx1732_cur."!cursor_pos"(rx1732_pos)
    new $P1739, "String"
    assign $P1739, "stub"
    store_lex "$*PKGDECL", $P1739
  # rx subrule "ws" subtype=method negate=
    rx1732_cur."!cursor_pos"(rx1732_pos)
    $P10 = rx1732_cur."ws"()
    unless $P10, rx1732_fail
    rx1732_pos = $P10."pos"()
.annotate 'line', 767
  # rx subcapture "sym"
    set_addr $I10, rxcap_1741_fail
    rx1732_cur."!mark_push"(0, rx1732_pos, $I10)
  # rx literal  "stub"
    add $I11, rx1732_pos, 4
    gt $I11, rx1732_eos, rx1732_fail
    sub $I11, rx1732_pos, rx1732_off
    substr $S10, rx1732_tgt, $I11, 4
    ne $S10, "stub", rx1732_fail
    add rx1732_pos, 4
    set_addr $I10, rxcap_1741_fail
    ($I12, $I11) = rx1732_cur."!mark_peek"($I10)
    rx1732_cur."!cursor_pos"($I11)
    ($P10) = rx1732_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1732_pos, "")
    rx1732_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1741_done
  rxcap_1741_fail:
    goto rx1732_fail
  rxcap_1741_done:
  # rx subrule "ws" subtype=method negate=
    rx1732_cur."!cursor_pos"(rx1732_pos)
    $P10 = rx1732_cur."ws"()
    unless $P10, rx1732_fail
    rx1732_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx1732_cur."!cursor_pos"(rx1732_pos)
    $P10 = rx1732_cur."name"()
    unless $P10, rx1732_fail
    rx1732_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx1732_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1732_cur."!cursor_pos"(rx1732_pos)
    $P10 = rx1732_cur."ws"()
    unless $P10, rx1732_fail
    rx1732_pos = $P10."pos"()
.annotate 'line', 768
  # rx literal  "metaclass"
    add $I11, rx1732_pos, 9
    gt $I11, rx1732_eos, rx1732_fail
    sub $I11, rx1732_pos, rx1732_off
    substr $S10, rx1732_tgt, $I11, 9
    ne $S10, "metaclass", rx1732_fail
    add rx1732_pos, 9
  # rx subrule "ws" subtype=method negate=
    rx1732_cur."!cursor_pos"(rx1732_pos)
    $P10 = rx1732_cur."ws"()
    unless $P10, rx1732_fail
    rx1732_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx1732_cur."!cursor_pos"(rx1732_pos)
    $P10 = rx1732_cur."name"()
    unless $P10, rx1732_fail
    rx1732_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("metaclass")
    rx1732_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1732_cur."!cursor_pos"(rx1732_pos)
    $P10 = rx1732_cur."ws"()
    unless $P10, rx1732_fail
    rx1732_pos = $P10."pos"()
.annotate 'line', 769
  # rx literal  "{"
    add $I11, rx1732_pos, 1
    gt $I11, rx1732_eos, rx1732_fail
    sub $I11, rx1732_pos, rx1732_off
    ord $I11, rx1732_tgt, $I11
    ne $I11, 123, rx1732_fail
    add rx1732_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1732_cur."!cursor_pos"(rx1732_pos)
    $P10 = rx1732_cur."ws"()
    unless $P10, rx1732_fail
    rx1732_pos = $P10."pos"()
  # rx literal  "..."
    add $I11, rx1732_pos, 3
    gt $I11, rx1732_eos, rx1732_fail
    sub $I11, rx1732_pos, rx1732_off
    substr $S10, rx1732_tgt, $I11, 3
    ne $S10, "...", rx1732_fail
    add rx1732_pos, 3
  # rx subrule "ws" subtype=method negate=
    rx1732_cur."!cursor_pos"(rx1732_pos)
    $P10 = rx1732_cur."ws"()
    unless $P10, rx1732_fail
    rx1732_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx1732_pos, 1
    gt $I11, rx1732_eos, rx1732_fail
    sub $I11, rx1732_pos, rx1732_off
    ord $I11, rx1732_tgt, $I11
    ne $I11, 125, rx1732_fail
    add rx1732_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1732_cur."!cursor_pos"(rx1732_pos)
    $P10 = rx1732_cur."ws"()
    unless $P10, rx1732_fail
    rx1732_pos = $P10."pos"()
.annotate 'line', 764
  # rx pass
    rx1732_cur."!cursor_pass"(rx1732_pos, "package_declarator:sym<stub>")
    if_null rx1732_debug, debug_1151
    rx1732_cur."!cursor_debug"("PASS", "package_declarator:sym<stub>", " at pos=", rx1732_pos)
  debug_1151:
    .return (rx1732_cur)
  rx1732_restart:
.annotate 'line', 436
    if_null rx1732_debug, debug_1152
    rx1732_cur."!cursor_debug"("NEXT", "package_declarator:sym<stub>")
  debug_1152:
  rx1732_fail:
    (rx1732_rep, rx1732_pos, $I10, $P10) = rx1732_cur."!mark_fail"(0)
    lt rx1732_pos, -1, rx1732_done
    eq rx1732_pos, -1, rx1732_fail
    jump $I10
  rx1732_done:
    rx1732_cur."!cursor_fail"()
    if_null rx1732_debug, debug_1153
    rx1732_cur."!cursor_debug"("FAIL", "package_declarator:sym<stub>")
  debug_1153:
    .return (rx1732_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_declarator:sym<stub>"  :subid("181_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1750 = self."!PREFIX__!subrule"("ws", "")
    new $P1751, "ResizablePMCArray"
    push $P1751, $P1750
    .return ($P1751)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "package_def"  :subid("182_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .const 'Sub' $P1772 = "183_1307835824.98345" 
    capture_lex $P1772
.annotate 'line', 773
    new $P1753, "Undef"
    .lex "$*PACKAGE", $P1753
.annotate 'line', 436
    .local string rx1754_tgt
    .local int rx1754_pos
    .local int rx1754_off
    .local int rx1754_eos
    .local int rx1754_rep
    .local pmc rx1754_cur
    .local pmc rx1754_debug
    (rx1754_cur, rx1754_pos, rx1754_tgt, $I10) = self."!cursor_start"()
    rx1754_cur."!cursor_caparray"("repr", "parent", "role")
    .lex unicode:"$\x{a2}", rx1754_cur
    .local pmc match
    .lex "$/", match
    length rx1754_eos, rx1754_tgt
    gt rx1754_pos, rx1754_eos, rx1754_done
    set rx1754_off, 0
    lt rx1754_pos, 2, rx1754_start
    sub rx1754_off, rx1754_pos, 1
    substr rx1754_tgt, rx1754_tgt, rx1754_off
  rx1754_start:
    eq $I10, 1, rx1754_restart
    if_null rx1754_debug, debug_1154
    rx1754_cur."!cursor_debug"("START", "package_def")
  debug_1154:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1755_done
    goto rxscan1755_scan
  rxscan1755_loop:
    (rx1754_pos) = rx1754_cur."from"()
    inc rx1754_pos
    rx1754_cur."!cursor_from"(rx1754_pos)
    ge rx1754_pos, rx1754_eos, rxscan1755_done
  rxscan1755_scan:
    set_addr $I10, rxscan1755_loop
    rx1754_cur."!mark_push"(0, rx1754_pos, $I10)
  rxscan1755_done:
.annotate 'line', 772
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
.annotate 'line', 773
    rx1754_cur."!cursor_pos"(rx1754_pos)
    find_lex $P1759, "$*PACKAGE"
    unless_null $P1759, vivify_1155
    get_hll_global $P1757, "GLOBAL"
    get_who $P1758, $P1757
    set $P1759, $P1758["$PACKAGE"]
    unless_null $P1759, vivify_1156
    die "Contextual $*PACKAGE not found"
  vivify_1156:
  vivify_1155:
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
.annotate 'line', 775
  # rx subrule "name" subtype=capture negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."name"()
    unless $P10, rx1754_fail
    rx1754_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx1754_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
.annotate 'line', 776
  # rx rxquantr1762 ** 0..1
    set_addr $I10, rxquantr1762_done
    rx1754_cur."!mark_push"(0, rx1754_pos, $I10)
  rxquantr1762_loop:
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
  # rx literal  "is"
    add $I11, rx1754_pos, 2
    gt $I11, rx1754_eos, rx1754_fail
    sub $I11, rx1754_pos, rx1754_off
    substr $S10, rx1754_tgt, $I11, 2
    ne $S10, "is", rx1754_fail
    add rx1754_pos, 2
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
  # rx literal  "repr("
    add $I11, rx1754_pos, 5
    gt $I11, rx1754_eos, rx1754_fail
    sub $I11, rx1754_pos, rx1754_off
    substr $S10, rx1754_tgt, $I11, 5
    ne $S10, "repr(", rx1754_fail
    add rx1754_pos, 5
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."quote_EXPR"()
    unless $P10, rx1754_fail
    rx1754_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("repr")
    rx1754_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx1754_pos, 1
    gt $I11, rx1754_eos, rx1754_fail
    sub $I11, rx1754_pos, rx1754_off
    ord $I11, rx1754_tgt, $I11
    ne $I11, 41, rx1754_fail
    add rx1754_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
    set_addr $I10, rxquantr1762_done
    (rx1754_rep) = rx1754_cur."!mark_commit"($I10)
  rxquantr1762_done:
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
.annotate 'line', 778
    rx1754_cur."!cursor_pos"(rx1754_pos)
    find_lex $P1769, unicode:"$\x{a2}"
    $P1770 = $P1769."MATCH"()
    store_lex "$/", $P1770
    .const 'Sub' $P1772 = "183_1307835824.98345" 
    capture_lex $P1772
    $P1894 = $P1772()
.annotate 'line', 804
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
.annotate 'line', 806
  # rx rxquantr1896 ** 0..1
    set_addr $I10, rxquantr1896_done
    rx1754_cur."!mark_push"(0, rx1754_pos, $I10)
  rxquantr1896_loop:
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
  # rx literal  "is"
    add $I11, rx1754_pos, 2
    gt $I11, rx1754_eos, rx1754_fail
    sub $I11, rx1754_pos, rx1754_off
    substr $S10, rx1754_tgt, $I11, 2
    ne $S10, "is", rx1754_fail
    add rx1754_pos, 2
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."name"()
    unless $P10, rx1754_fail
    rx1754_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("parent")
    rx1754_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
    set_addr $I10, rxquantr1896_done
    (rx1754_rep) = rx1754_cur."!mark_commit"($I10)
  rxquantr1896_done:
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
.annotate 'line', 807
  # rx rxquantr1901 ** 0..*
    set_addr $I10, rxquantr1901_done
    rx1754_cur."!mark_push"(0, rx1754_pos, $I10)
  rxquantr1901_loop:
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
  # rx literal  "does"
    add $I11, rx1754_pos, 4
    gt $I11, rx1754_eos, rx1754_fail
    sub $I11, rx1754_pos, rx1754_off
    substr $S10, rx1754_tgt, $I11, 4
    ne $S10, "does", rx1754_fail
    add rx1754_pos, 4
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
  # rx subrule "name" subtype=capture negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."name"()
    unless $P10, rx1754_fail
    rx1754_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("role")
    rx1754_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
    set_addr $I10, rxquantr1901_done
    (rx1754_rep) = rx1754_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr1901_done
    rx1754_cur."!mark_push"(rx1754_rep, rx1754_pos, $I10)
    goto rxquantr1901_loop
  rxquantr1901_done:
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
  alt1906_0:
.annotate 'line', 808
    set_addr $I10, alt1906_1
    rx1754_cur."!mark_push"(0, rx1754_pos, $I10)
.annotate 'line', 809
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
  # rx literal  ";"
    add $I11, rx1754_pos, 1
    gt $I11, rx1754_eos, rx1754_fail
    sub $I11, rx1754_pos, rx1754_off
    ord $I11, rx1754_tgt, $I11
    ne $I11, 59, rx1754_fail
    add rx1754_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
  # rx subrule "comp_unit" subtype=capture negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."comp_unit"()
    unless $P10, rx1754_fail
    rx1754_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("comp_unit")
    rx1754_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
    goto alt1906_end
  alt1906_1:
    set_addr $I10, alt1906_2
    rx1754_cur."!mark_push"(0, rx1754_pos, $I10)
.annotate 'line', 810
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx1754_pos, rx1754_off
    substr $S10, rx1754_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx1754_fail
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
  # rx subrule "block" subtype=capture negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."block"()
    unless $P10, rx1754_fail
    rx1754_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx1754_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
    goto alt1906_end
  alt1906_2:
.annotate 'line', 811
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."panic"("Malformed package declaration")
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
  alt1906_end:
.annotate 'line', 812
  # rx subrule "ws" subtype=method negate=
    rx1754_cur."!cursor_pos"(rx1754_pos)
    $P10 = rx1754_cur."ws"()
    unless $P10, rx1754_fail
    rx1754_pos = $P10."pos"()
.annotate 'line', 772
  # rx pass
    rx1754_cur."!cursor_pass"(rx1754_pos, "package_def")
    if_null rx1754_debug, debug_1224
    rx1754_cur."!cursor_debug"("PASS", "package_def", " at pos=", rx1754_pos)
  debug_1224:
    .return (rx1754_cur)
  rx1754_restart:
.annotate 'line', 436
    if_null rx1754_debug, debug_1225
    rx1754_cur."!cursor_debug"("NEXT", "package_def")
  debug_1225:
  rx1754_fail:
    (rx1754_rep, rx1754_pos, $I10, $P10) = rx1754_cur."!mark_fail"(0)
    lt rx1754_pos, -1, rx1754_done
    eq rx1754_pos, -1, rx1754_fail
    jump $I10
  rx1754_done:
    rx1754_cur."!cursor_fail"()
    if_null rx1754_debug, debug_1226
    rx1754_cur."!cursor_debug"("FAIL", "package_def")
  debug_1226:
    .return (rx1754_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1771"  :anon :subid("183_1307835824.98345") :outer("182_1307835824.98345")
.annotate 'line', 781
    $P1773 = root_new ['parrot';'Hash']
    .lex "%args", $P1773
.annotate 'line', 778
    find_lex $P1774, "%args"
    unless_null $P1774, vivify_1157
    $P1774 = root_new ['parrot';'Hash']
  vivify_1157:
.annotate 'line', 782
    find_lex $P1775, "$/"
    unless_null $P1775, vivify_1158
    $P1775 = root_new ['parrot';'Hash']
  vivify_1158:
    set $P1776, $P1775["name"]
    unless_null $P1776, vivify_1159
    new $P1776, "Undef"
  vivify_1159:
    set $S1777, $P1776
    new $P1778, 'String'
    set $P1778, $S1777
    find_lex $P1779, "%args"
    unless_null $P1779, vivify_1160
    $P1779 = root_new ['parrot';'Hash']
    store_lex "%args", $P1779
  vivify_1160:
    set $P1779["name"], $P1778
.annotate 'line', 783
    find_lex $P1781, "$/"
    unless_null $P1781, vivify_1161
    $P1781 = root_new ['parrot';'Hash']
  vivify_1161:
    set $P1782, $P1781["repr"]
    unless_null $P1782, vivify_1162
    new $P1782, "Undef"
  vivify_1162:
    unless $P1782, if_1780_end
.annotate 'line', 784
    find_lex $P1783, "$/"
    unless_null $P1783, vivify_1163
    $P1783 = root_new ['parrot';'Hash']
  vivify_1163:
    set $P1784, $P1783["repr"]
    unless_null $P1784, vivify_1164
    $P1784 = root_new ['parrot';'ResizablePMCArray']
  vivify_1164:
    set $P1785, $P1784[0]
    unless_null $P1785, vivify_1165
    $P1785 = root_new ['parrot';'Hash']
  vivify_1165:
    set $P1786, $P1785["quote_delimited"]
    unless_null $P1786, vivify_1166
    $P1786 = root_new ['parrot';'Hash']
  vivify_1166:
    set $P1787, $P1786["quote_atom"]
    unless_null $P1787, vivify_1167
    $P1787 = root_new ['parrot';'ResizablePMCArray']
  vivify_1167:
    set $P1788, $P1787[0]
    unless_null $P1788, vivify_1168
    new $P1788, "Undef"
  vivify_1168:
    set $S1789, $P1788
    new $P1790, 'String'
    set $P1790, $S1789
    find_lex $P1791, "%args"
    unless_null $P1791, vivify_1169
    $P1791 = root_new ['parrot';'Hash']
    store_lex "%args", $P1791
  vivify_1169:
    set $P1791["repr"], $P1790
  if_1780_end:
.annotate 'line', 786
    find_dynamic_lex $P1794, "$*SC"
    unless_null $P1794, vivify_1170
    get_hll_global $P1792, "GLOBAL"
    get_who $P1793, $P1792
    set $P1794, $P1793["$SC"]
    unless_null $P1794, vivify_1171
    die "Contextual $*SC not found"
  vivify_1171:
  vivify_1170:
    find_dynamic_lex $P1797, "$*PKGDECL"
    unless_null $P1797, vivify_1172
    get_hll_global $P1795, "GLOBAL"
    get_who $P1796, $P1795
    set $P1797, $P1796["$PKGDECL"]
    unless_null $P1797, vivify_1173
    die "Contextual $*PKGDECL not found"
  vivify_1173:
  vivify_1172:
    find_dynamic_lex $P1800, "%*HOW"
    unless_null $P1800, vivify_1174
    get_hll_global $P1798, "GLOBAL"
    get_who $P1799, $P1798
    set $P1800, $P1799["%HOW"]
    unless_null $P1800, vivify_1175
    die "Contextual %*HOW not found"
  vivify_1175:
  vivify_1174:
    set $P1801, $P1800[$P1797]
    unless_null $P1801, vivify_1176
    new $P1801, "Undef"
  vivify_1176:
    find_lex $P1802, "%args"
    unless_null $P1802, vivify_1177
    $P1802 = root_new ['parrot';'Hash']
  vivify_1177:
    $P1803 = $P1794."pkg_create_mo"($P1801, $P1802 :flat)
    store_dynamic_lex "$*PACKAGE", $P1803
.annotate 'line', 789
    find_dynamic_lex $P1810, "$*SCOPE"
    unless_null $P1810, vivify_1178
    get_hll_global $P1808, "GLOBAL"
    get_who $P1809, $P1808
    set $P1810, $P1809["$SCOPE"]
    unless_null $P1810, vivify_1179
    die "Contextual $*SCOPE not found"
  vivify_1179:
  vivify_1178:
    set $S1811, $P1810
    iseq $I1812, $S1811, "our"
    unless $I1812, unless_1807
    new $P1806, 'Integer'
    set $P1806, $I1812
    goto unless_1807_end
  unless_1807:
    find_dynamic_lex $P1815, "$*SCOPE"
    unless_null $P1815, vivify_1180
    get_hll_global $P1813, "GLOBAL"
    get_who $P1814, $P1813
    set $P1815, $P1814["$SCOPE"]
    unless_null $P1815, vivify_1181
    die "Contextual $*SCOPE not found"
  vivify_1181:
  vivify_1180:
    set $S1816, $P1815
    iseq $I1817, $S1816, ""
    new $P1806, 'Integer'
    set $P1806, $I1817
  unless_1807_end:
    if $P1806, if_1805
.annotate 'line', 795
    find_dynamic_lex $P1858, "$*SCOPE"
    unless_null $P1858, vivify_1182
    get_hll_global $P1856, "GLOBAL"
    get_who $P1857, $P1856
    set $P1858, $P1857["$SCOPE"]
    unless_null $P1858, vivify_1183
    die "Contextual $*SCOPE not found"
  vivify_1183:
  vivify_1182:
    set $S1859, $P1858
    iseq $I1860, $S1859, "my"
    if $I1860, if_1855
.annotate 'line', 802
    find_lex $P1887, "$/"
    unless_null $P1887, vivify_1184
    new $P1887, "Undef"
  vivify_1184:
    $P1888 = $P1887."CURSOR"()
    find_dynamic_lex $P1891, "$*SCOPE"
    unless_null $P1891, vivify_1185
    get_hll_global $P1889, "GLOBAL"
    get_who $P1890, $P1889
    set $P1891, $P1890["$SCOPE"]
    unless_null $P1891, vivify_1186
    die "Contextual $*SCOPE not found"
  vivify_1186:
  vivify_1185:
    concat $P1892, $P1891, " scoped packages are not supported"
    $P1893 = $P1888."panic"($P1892)
.annotate 'line', 801
    set $P1854, $P1893
.annotate 'line', 795
    goto if_1855_end
  if_1855:
.annotate 'line', 796
    find_lex $P1862, "$/"
    unless_null $P1862, vivify_1187
    $P1862 = root_new ['parrot';'Hash']
  vivify_1187:
    set $P1863, $P1862["name"]
    unless_null $P1863, vivify_1188
    $P1863 = root_new ['parrot';'Hash']
  vivify_1188:
    set $P1864, $P1863["identifier"]
    unless_null $P1864, vivify_1189
    new $P1864, "Undef"
  vivify_1189:
    set $N1865, $P1864
    isne $I1866, $N1865, 1.0
    unless $I1866, if_1861_end
.annotate 'line', 797
    find_lex $P1867, "$/"
    unless_null $P1867, vivify_1190
    $P1867 = root_new ['parrot';'Hash']
  vivify_1190:
    set $P1868, $P1867["name"]
    unless_null $P1868, vivify_1191
    new $P1868, "Undef"
  vivify_1191:
    $P1869 = $P1868."CURSOR"()
    $P1869."panic"("A my scoped package cannot have a multi-part name yet")
  if_1861_end:
.annotate 'line', 799
    find_dynamic_lex $P1872, "$*SC"
    unless_null $P1872, vivify_1192
    get_hll_global $P1870, "GLOBAL"
    get_who $P1871, $P1870
    set $P1872, $P1871["$SC"]
    unless_null $P1872, vivify_1193
    die "Contextual $*SC not found"
  vivify_1193:
  vivify_1192:
    get_hll_global $P1873, "GLOBAL"
    nqp_get_package_through_who $P1874, $P1873, "NQP"
    nqp_get_package_through_who $P1875, $P1874, "Actions"
    get_who $P1876, $P1875
    set $P1877, $P1876["@BLOCK"]
    unless_null $P1877, vivify_1194
    $P1877 = root_new ['parrot';'ResizablePMCArray']
  vivify_1194:
    set $P1878, $P1877[0]
    unless_null $P1878, vivify_1195
    new $P1878, "Undef"
  vivify_1195:
    find_lex $P1879, "$/"
    unless_null $P1879, vivify_1196
    $P1879 = root_new ['parrot';'Hash']
  vivify_1196:
    set $P1880, $P1879["name"]
    unless_null $P1880, vivify_1197
    $P1880 = root_new ['parrot';'Hash']
  vivify_1197:
    set $P1881, $P1880["identifier"]
    unless_null $P1881, vivify_1198
    $P1881 = root_new ['parrot';'ResizablePMCArray']
  vivify_1198:
    set $P1882, $P1881[0]
    unless_null $P1882, vivify_1199
    new $P1882, "Undef"
  vivify_1199:
    find_dynamic_lex $P1885, "$*PACKAGE"
    unless_null $P1885, vivify_1200
    get_hll_global $P1883, "GLOBAL"
    get_who $P1884, $P1883
    set $P1885, $P1884["$PACKAGE"]
    unless_null $P1885, vivify_1201
    die "Contextual $*PACKAGE not found"
  vivify_1201:
  vivify_1200:
    $P1886 = $P1872."install_lexical_symbol"($P1878, $P1882, $P1885)
.annotate 'line', 795
    set $P1854, $P1886
  if_1855_end:
    set $P1804, $P1854
.annotate 'line', 789
    goto if_1805_end
  if_1805:
.annotate 'line', 790
    find_dynamic_lex $P1820, "$*SC"
    unless_null $P1820, vivify_1202
    get_hll_global $P1818, "GLOBAL"
    get_who $P1819, $P1818
    set $P1820, $P1819["$SC"]
    unless_null $P1820, vivify_1203
    die "Contextual $*SC not found"
  vivify_1203:
  vivify_1202:
    find_dynamic_lex $P1823, "$*OUTERPACKAGE"
    unless_null $P1823, vivify_1204
    get_hll_global $P1821, "GLOBAL"
    get_who $P1822, $P1821
    set $P1823, $P1822["$OUTERPACKAGE"]
    unless_null $P1823, vivify_1205
    die "Contextual $*OUTERPACKAGE not found"
  vivify_1205:
  vivify_1204:
    find_lex $P1824, "$/"
    unless_null $P1824, vivify_1206
    $P1824 = root_new ['parrot';'Hash']
  vivify_1206:
    set $P1825, $P1824["name"]
    unless_null $P1825, vivify_1207
    $P1825 = root_new ['parrot';'Hash']
  vivify_1207:
    set $P1826, $P1825["identifier"]
    unless_null $P1826, vivify_1208
    new $P1826, "Undef"
  vivify_1208:
    find_dynamic_lex $P1829, "$*PACKAGE"
    unless_null $P1829, vivify_1209
    get_hll_global $P1827, "GLOBAL"
    get_who $P1828, $P1827
    set $P1829, $P1828["$PACKAGE"]
    unless_null $P1829, vivify_1210
    die "Contextual $*PACKAGE not found"
  vivify_1210:
  vivify_1209:
    $P1820."install_package_symbol"($P1823, $P1826, $P1829)
.annotate 'line', 791
    find_lex $P1832, "$/"
    unless_null $P1832, vivify_1211
    $P1832 = root_new ['parrot';'Hash']
  vivify_1211:
    set $P1833, $P1832["name"]
    unless_null $P1833, vivify_1212
    $P1833 = root_new ['parrot';'Hash']
  vivify_1212:
    set $P1834, $P1833["identifier"]
    unless_null $P1834, vivify_1213
    new $P1834, "Undef"
  vivify_1213:
    set $N1835, $P1834
    iseq $I1836, $N1835, 1.0
    if $I1836, if_1831
    new $P1830, 'Integer'
    set $P1830, $I1836
    goto if_1831_end
  if_1831:
.annotate 'line', 792
    find_dynamic_lex $P1839, "$*SC"
    unless_null $P1839, vivify_1214
    get_hll_global $P1837, "GLOBAL"
    get_who $P1838, $P1837
    set $P1839, $P1838["$SC"]
    unless_null $P1839, vivify_1215
    die "Contextual $*SC not found"
  vivify_1215:
  vivify_1214:
    get_hll_global $P1840, "GLOBAL"
    nqp_get_package_through_who $P1841, $P1840, "NQP"
    nqp_get_package_through_who $P1842, $P1841, "Actions"
    get_who $P1843, $P1842
    set $P1844, $P1843["@BLOCK"]
    unless_null $P1844, vivify_1216
    $P1844 = root_new ['parrot';'ResizablePMCArray']
  vivify_1216:
    set $P1845, $P1844[0]
    unless_null $P1845, vivify_1217
    new $P1845, "Undef"
  vivify_1217:
    find_lex $P1846, "$/"
    unless_null $P1846, vivify_1218
    $P1846 = root_new ['parrot';'Hash']
  vivify_1218:
    set $P1847, $P1846["name"]
    unless_null $P1847, vivify_1219
    $P1847 = root_new ['parrot';'Hash']
  vivify_1219:
    set $P1848, $P1847["identifier"]
    unless_null $P1848, vivify_1220
    $P1848 = root_new ['parrot';'ResizablePMCArray']
  vivify_1220:
    set $P1849, $P1848[0]
    unless_null $P1849, vivify_1221
    new $P1849, "Undef"
  vivify_1221:
    find_dynamic_lex $P1852, "$*PACKAGE"
    unless_null $P1852, vivify_1222
    get_hll_global $P1850, "GLOBAL"
    get_who $P1851, $P1850
    set $P1852, $P1851["$PACKAGE"]
    unless_null $P1852, vivify_1223
    die "Contextual $*PACKAGE not found"
  vivify_1223:
  vivify_1222:
    $P1853 = $P1839."install_lexical_symbol"($P1845, $P1849, $P1852)
.annotate 'line', 791
    set $P1830, $P1853
  if_1831_end:
.annotate 'line', 789
    set $P1804, $P1830
  if_1805_end:
.annotate 'line', 778
    .return ($P1804)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__package_def"  :subid("184_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1917 = self."!PREFIX__!subrule"("ws", "")
    new $P1918, "ResizablePMCArray"
    push $P1918, $P1917
    .return ($P1918)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator"  :subid("185_1307835824.98345")
    .param pmc param_1920
.annotate 'line', 815
    .lex "self", param_1920
    $P1921 = param_1920."!protoregex"("scope_declarator")
    .return ($P1921)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator"  :subid("186_1307835824.98345")
    .param pmc param_1923
.annotate 'line', 815
    .lex "self", param_1923
    $P1924 = param_1923."!PREFIX__!protoregex"("scope_declarator")
    .return ($P1924)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<my>"  :subid("187_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1926_tgt
    .local int rx1926_pos
    .local int rx1926_off
    .local int rx1926_eos
    .local int rx1926_rep
    .local pmc rx1926_cur
    .local pmc rx1926_debug
    (rx1926_cur, rx1926_pos, rx1926_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1926_cur
    .local pmc match
    .lex "$/", match
    length rx1926_eos, rx1926_tgt
    gt rx1926_pos, rx1926_eos, rx1926_done
    set rx1926_off, 0
    lt rx1926_pos, 2, rx1926_start
    sub rx1926_off, rx1926_pos, 1
    substr rx1926_tgt, rx1926_tgt, rx1926_off
  rx1926_start:
    eq $I10, 1, rx1926_restart
    if_null rx1926_debug, debug_1227
    rx1926_cur."!cursor_debug"("START", "scope_declarator:sym<my>")
  debug_1227:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1927_done
    goto rxscan1927_scan
  rxscan1927_loop:
    (rx1926_pos) = rx1926_cur."from"()
    inc rx1926_pos
    rx1926_cur."!cursor_from"(rx1926_pos)
    ge rx1926_pos, rx1926_eos, rxscan1927_done
  rxscan1927_scan:
    set_addr $I10, rxscan1927_loop
    rx1926_cur."!mark_push"(0, rx1926_pos, $I10)
  rxscan1927_done:
.annotate 'line', 816
  # rx subcapture "sym"
    set_addr $I10, rxcap_1928_fail
    rx1926_cur."!mark_push"(0, rx1926_pos, $I10)
  # rx literal  "my"
    add $I11, rx1926_pos, 2
    gt $I11, rx1926_eos, rx1926_fail
    sub $I11, rx1926_pos, rx1926_off
    substr $S10, rx1926_tgt, $I11, 2
    ne $S10, "my", rx1926_fail
    add rx1926_pos, 2
    set_addr $I10, rxcap_1928_fail
    ($I12, $I11) = rx1926_cur."!mark_peek"($I10)
    rx1926_cur."!cursor_pos"($I11)
    ($P10) = rx1926_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1926_pos, "")
    rx1926_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1928_done
  rxcap_1928_fail:
    goto rx1926_fail
  rxcap_1928_done:
  # rx subrule "scoped" subtype=capture negate=
    rx1926_cur."!cursor_pos"(rx1926_pos)
    $P10 = rx1926_cur."scoped"("my")
    unless $P10, rx1926_fail
    rx1926_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scoped")
    rx1926_pos = $P10."pos"()
  # rx pass
    rx1926_cur."!cursor_pass"(rx1926_pos, "scope_declarator:sym<my>")
    if_null rx1926_debug, debug_1228
    rx1926_cur."!cursor_debug"("PASS", "scope_declarator:sym<my>", " at pos=", rx1926_pos)
  debug_1228:
    .return (rx1926_cur)
  rx1926_restart:
.annotate 'line', 436
    if_null rx1926_debug, debug_1229
    rx1926_cur."!cursor_debug"("NEXT", "scope_declarator:sym<my>")
  debug_1229:
  rx1926_fail:
    (rx1926_rep, rx1926_pos, $I10, $P10) = rx1926_cur."!mark_fail"(0)
    lt rx1926_pos, -1, rx1926_done
    eq rx1926_pos, -1, rx1926_fail
    jump $I10
  rx1926_done:
    rx1926_cur."!cursor_fail"()
    if_null rx1926_debug, debug_1230
    rx1926_cur."!cursor_debug"("FAIL", "scope_declarator:sym<my>")
  debug_1230:
    .return (rx1926_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator:sym<my>"  :subid("188_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1930 = self."!PREFIX__!subrule"("scoped", "my")
    new $P1931, "ResizablePMCArray"
    push $P1931, $P1930
    .return ($P1931)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<our>"  :subid("189_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1933_tgt
    .local int rx1933_pos
    .local int rx1933_off
    .local int rx1933_eos
    .local int rx1933_rep
    .local pmc rx1933_cur
    .local pmc rx1933_debug
    (rx1933_cur, rx1933_pos, rx1933_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1933_cur
    .local pmc match
    .lex "$/", match
    length rx1933_eos, rx1933_tgt
    gt rx1933_pos, rx1933_eos, rx1933_done
    set rx1933_off, 0
    lt rx1933_pos, 2, rx1933_start
    sub rx1933_off, rx1933_pos, 1
    substr rx1933_tgt, rx1933_tgt, rx1933_off
  rx1933_start:
    eq $I10, 1, rx1933_restart
    if_null rx1933_debug, debug_1231
    rx1933_cur."!cursor_debug"("START", "scope_declarator:sym<our>")
  debug_1231:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1934_done
    goto rxscan1934_scan
  rxscan1934_loop:
    (rx1933_pos) = rx1933_cur."from"()
    inc rx1933_pos
    rx1933_cur."!cursor_from"(rx1933_pos)
    ge rx1933_pos, rx1933_eos, rxscan1934_done
  rxscan1934_scan:
    set_addr $I10, rxscan1934_loop
    rx1933_cur."!mark_push"(0, rx1933_pos, $I10)
  rxscan1934_done:
.annotate 'line', 817
  # rx subcapture "sym"
    set_addr $I10, rxcap_1935_fail
    rx1933_cur."!mark_push"(0, rx1933_pos, $I10)
  # rx literal  "our"
    add $I11, rx1933_pos, 3
    gt $I11, rx1933_eos, rx1933_fail
    sub $I11, rx1933_pos, rx1933_off
    substr $S10, rx1933_tgt, $I11, 3
    ne $S10, "our", rx1933_fail
    add rx1933_pos, 3
    set_addr $I10, rxcap_1935_fail
    ($I12, $I11) = rx1933_cur."!mark_peek"($I10)
    rx1933_cur."!cursor_pos"($I11)
    ($P10) = rx1933_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1933_pos, "")
    rx1933_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1935_done
  rxcap_1935_fail:
    goto rx1933_fail
  rxcap_1935_done:
  # rx subrule "scoped" subtype=capture negate=
    rx1933_cur."!cursor_pos"(rx1933_pos)
    $P10 = rx1933_cur."scoped"("our")
    unless $P10, rx1933_fail
    rx1933_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scoped")
    rx1933_pos = $P10."pos"()
  # rx pass
    rx1933_cur."!cursor_pass"(rx1933_pos, "scope_declarator:sym<our>")
    if_null rx1933_debug, debug_1232
    rx1933_cur."!cursor_debug"("PASS", "scope_declarator:sym<our>", " at pos=", rx1933_pos)
  debug_1232:
    .return (rx1933_cur)
  rx1933_restart:
.annotate 'line', 436
    if_null rx1933_debug, debug_1233
    rx1933_cur."!cursor_debug"("NEXT", "scope_declarator:sym<our>")
  debug_1233:
  rx1933_fail:
    (rx1933_rep, rx1933_pos, $I10, $P10) = rx1933_cur."!mark_fail"(0)
    lt rx1933_pos, -1, rx1933_done
    eq rx1933_pos, -1, rx1933_fail
    jump $I10
  rx1933_done:
    rx1933_cur."!cursor_fail"()
    if_null rx1933_debug, debug_1234
    rx1933_cur."!cursor_debug"("FAIL", "scope_declarator:sym<our>")
  debug_1234:
    .return (rx1933_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator:sym<our>"  :subid("190_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1937 = self."!PREFIX__!subrule"("scoped", "our")
    new $P1938, "ResizablePMCArray"
    push $P1938, $P1937
    .return ($P1938)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scope_declarator:sym<has>"  :subid("191_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1940_tgt
    .local int rx1940_pos
    .local int rx1940_off
    .local int rx1940_eos
    .local int rx1940_rep
    .local pmc rx1940_cur
    .local pmc rx1940_debug
    (rx1940_cur, rx1940_pos, rx1940_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1940_cur
    .local pmc match
    .lex "$/", match
    length rx1940_eos, rx1940_tgt
    gt rx1940_pos, rx1940_eos, rx1940_done
    set rx1940_off, 0
    lt rx1940_pos, 2, rx1940_start
    sub rx1940_off, rx1940_pos, 1
    substr rx1940_tgt, rx1940_tgt, rx1940_off
  rx1940_start:
    eq $I10, 1, rx1940_restart
    if_null rx1940_debug, debug_1235
    rx1940_cur."!cursor_debug"("START", "scope_declarator:sym<has>")
  debug_1235:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1941_done
    goto rxscan1941_scan
  rxscan1941_loop:
    (rx1940_pos) = rx1940_cur."from"()
    inc rx1940_pos
    rx1940_cur."!cursor_from"(rx1940_pos)
    ge rx1940_pos, rx1940_eos, rxscan1941_done
  rxscan1941_scan:
    set_addr $I10, rxscan1941_loop
    rx1940_cur."!mark_push"(0, rx1940_pos, $I10)
  rxscan1941_done:
.annotate 'line', 818
  # rx subcapture "sym"
    set_addr $I10, rxcap_1942_fail
    rx1940_cur."!mark_push"(0, rx1940_pos, $I10)
  # rx literal  "has"
    add $I11, rx1940_pos, 3
    gt $I11, rx1940_eos, rx1940_fail
    sub $I11, rx1940_pos, rx1940_off
    substr $S10, rx1940_tgt, $I11, 3
    ne $S10, "has", rx1940_fail
    add rx1940_pos, 3
    set_addr $I10, rxcap_1942_fail
    ($I12, $I11) = rx1940_cur."!mark_peek"($I10)
    rx1940_cur."!cursor_pos"($I11)
    ($P10) = rx1940_cur."!cursor_start"()
    $P10."!cursor_pass"(rx1940_pos, "")
    rx1940_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_1942_done
  rxcap_1942_fail:
    goto rx1940_fail
  rxcap_1942_done:
  # rx subrule "scoped" subtype=capture negate=
    rx1940_cur."!cursor_pos"(rx1940_pos)
    $P10 = rx1940_cur."scoped"("has")
    unless $P10, rx1940_fail
    rx1940_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("scoped")
    rx1940_pos = $P10."pos"()
  # rx pass
    rx1940_cur."!cursor_pass"(rx1940_pos, "scope_declarator:sym<has>")
    if_null rx1940_debug, debug_1236
    rx1940_cur."!cursor_debug"("PASS", "scope_declarator:sym<has>", " at pos=", rx1940_pos)
  debug_1236:
    .return (rx1940_cur)
  rx1940_restart:
.annotate 'line', 436
    if_null rx1940_debug, debug_1237
    rx1940_cur."!cursor_debug"("NEXT", "scope_declarator:sym<has>")
  debug_1237:
  rx1940_fail:
    (rx1940_rep, rx1940_pos, $I10, $P10) = rx1940_cur."!mark_fail"(0)
    lt rx1940_pos, -1, rx1940_done
    eq rx1940_pos, -1, rx1940_fail
    jump $I10
  rx1940_done:
    rx1940_cur."!cursor_fail"()
    if_null rx1940_debug, debug_1238
    rx1940_cur."!cursor_debug"("FAIL", "scope_declarator:sym<has>")
  debug_1238:
    .return (rx1940_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scope_declarator:sym<has>"  :subid("192_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1944 = self."!PREFIX__!subrule"("scoped", "has")
    new $P1945, "ResizablePMCArray"
    push $P1945, $P1944
    .return ($P1945)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "scoped"  :subid("193_1307835824.98345") :method :outer("40_1307835824.98345")
    .param pmc param_1947
.annotate 'line', 820
    .lex "$*SCOPE", param_1947
.annotate 'line', 436
    .local string rx1948_tgt
    .local int rx1948_pos
    .local int rx1948_off
    .local int rx1948_eos
    .local int rx1948_rep
    .local pmc rx1948_cur
    .local pmc rx1948_debug
    (rx1948_cur, rx1948_pos, rx1948_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1948_cur
    .local pmc match
    .lex "$/", match
    length rx1948_eos, rx1948_tgt
    gt rx1948_pos, rx1948_eos, rx1948_done
    set rx1948_off, 0
    lt rx1948_pos, 2, rx1948_start
    sub rx1948_off, rx1948_pos, 1
    substr rx1948_tgt, rx1948_tgt, rx1948_off
  rx1948_start:
    eq $I10, 1, rx1948_restart
    if_null rx1948_debug, debug_1239
    rx1948_cur."!cursor_debug"("START", "scoped")
  debug_1239:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1949_done
    goto rxscan1949_scan
  rxscan1949_loop:
    (rx1948_pos) = rx1948_cur."from"()
    inc rx1948_pos
    rx1948_cur."!cursor_from"(rx1948_pos)
    ge rx1948_pos, rx1948_eos, rxscan1949_done
  rxscan1949_scan:
    set_addr $I10, rxscan1949_loop
    rx1948_cur."!mark_push"(0, rx1948_pos, $I10)
  rxscan1949_done:
  alt1950_0:
.annotate 'line', 820
    set_addr $I10, alt1950_1
    rx1948_cur."!mark_push"(0, rx1948_pos, $I10)
.annotate 'line', 821
  # rx subrule "ws" subtype=method negate=
    rx1948_cur."!cursor_pos"(rx1948_pos)
    $P10 = rx1948_cur."ws"()
    unless $P10, rx1948_fail
    rx1948_pos = $P10."pos"()
  # rx subrule "declarator" subtype=capture negate=
    rx1948_cur."!cursor_pos"(rx1948_pos)
    $P10 = rx1948_cur."declarator"()
    unless $P10, rx1948_fail
    rx1948_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx1948_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1948_cur."!cursor_pos"(rx1948_pos)
    $P10 = rx1948_cur."ws"()
    unless $P10, rx1948_fail
    rx1948_pos = $P10."pos"()
    goto alt1950_end
  alt1950_1:
    set_addr $I10, alt1950_2
    rx1948_cur."!mark_push"(0, rx1948_pos, $I10)
.annotate 'line', 822
  # rx subrule "ws" subtype=method negate=
    rx1948_cur."!cursor_pos"(rx1948_pos)
    $P10 = rx1948_cur."ws"()
    unless $P10, rx1948_fail
    rx1948_pos = $P10."pos"()
  # rx subrule "multi_declarator" subtype=capture negate=
    rx1948_cur."!cursor_pos"(rx1948_pos)
    $P10 = rx1948_cur."multi_declarator"()
    unless $P10, rx1948_fail
    rx1948_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("multi_declarator")
    rx1948_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1948_cur."!cursor_pos"(rx1948_pos)
    $P10 = rx1948_cur."ws"()
    unless $P10, rx1948_fail
    rx1948_pos = $P10."pos"()
    goto alt1950_end
  alt1950_2:
.annotate 'line', 823
  # rx subrule "ws" subtype=method negate=
    rx1948_cur."!cursor_pos"(rx1948_pos)
    $P10 = rx1948_cur."ws"()
    unless $P10, rx1948_fail
    rx1948_pos = $P10."pos"()
  # rx subrule "package_declarator" subtype=capture negate=
    rx1948_cur."!cursor_pos"(rx1948_pos)
    $P10 = rx1948_cur."package_declarator"()
    unless $P10, rx1948_fail
    rx1948_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("package_declarator")
    rx1948_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1948_cur."!cursor_pos"(rx1948_pos)
    $P10 = rx1948_cur."ws"()
    unless $P10, rx1948_fail
    rx1948_pos = $P10."pos"()
  alt1950_end:
.annotate 'line', 820
  # rx pass
    rx1948_cur."!cursor_pass"(rx1948_pos, "scoped")
    if_null rx1948_debug, debug_1240
    rx1948_cur."!cursor_debug"("PASS", "scoped", " at pos=", rx1948_pos)
  debug_1240:
    .return (rx1948_cur)
  rx1948_restart:
.annotate 'line', 436
    if_null rx1948_debug, debug_1241
    rx1948_cur."!cursor_debug"("NEXT", "scoped")
  debug_1241:
  rx1948_fail:
    (rx1948_rep, rx1948_pos, $I10, $P10) = rx1948_cur."!mark_fail"(0)
    lt rx1948_pos, -1, rx1948_done
    eq rx1948_pos, -1, rx1948_fail
    jump $I10
  rx1948_done:
    rx1948_cur."!cursor_fail"()
    if_null rx1948_debug, debug_1242
    rx1948_cur."!cursor_debug"("FAIL", "scoped")
  debug_1242:
    .return (rx1948_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__scoped"  :subid("194_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1958 = self."!PREFIX__!subrule"("ws", "")
    $P1959 = self."!PREFIX__!subrule"("ws", "")
    $P1960 = self."!PREFIX__!subrule"("ws", "")
    new $P1961, "ResizablePMCArray"
    push $P1961, $P1958
    push $P1961, $P1959
    push $P1961, $P1960
    .return ($P1961)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "typename"  :subid("195_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .const 'Sub' $P1968 = "196_1307835824.98345" 
    capture_lex $P1968
    .local string rx1963_tgt
    .local int rx1963_pos
    .local int rx1963_off
    .local int rx1963_eos
    .local int rx1963_rep
    .local pmc rx1963_cur
    .local pmc rx1963_debug
    (rx1963_cur, rx1963_pos, rx1963_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1963_cur
    .local pmc match
    .lex "$/", match
    length rx1963_eos, rx1963_tgt
    gt rx1963_pos, rx1963_eos, rx1963_done
    set rx1963_off, 0
    lt rx1963_pos, 2, rx1963_start
    sub rx1963_off, rx1963_pos, 1
    substr rx1963_tgt, rx1963_tgt, rx1963_off
  rx1963_start:
    eq $I10, 1, rx1963_restart
    if_null rx1963_debug, debug_1243
    rx1963_cur."!cursor_debug"("START", "typename")
  debug_1243:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1964_done
    goto rxscan1964_scan
  rxscan1964_loop:
    (rx1963_pos) = rx1963_cur."from"()
    inc rx1963_pos
    rx1963_cur."!cursor_from"(rx1963_pos)
    ge rx1963_pos, rx1963_eos, rxscan1964_done
  rxscan1964_scan:
    set_addr $I10, rxscan1964_loop
    rx1963_cur."!mark_push"(0, rx1963_pos, $I10)
  rxscan1964_done:
.annotate 'line', 827
  # rx subrule "name" subtype=capture negate=
    rx1963_cur."!cursor_pos"(rx1963_pos)
    $P10 = rx1963_cur."name"()
    unless $P10, rx1963_fail
    rx1963_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx1963_pos = $P10."pos"()
.annotate 'line', 828
    rx1963_cur."!cursor_pos"(rx1963_pos)
    find_lex $P1965, unicode:"$\x{a2}"
    $P1966 = $P1965."MATCH"()
    store_lex "$/", $P1966
    .const 'Sub' $P1968 = "196_1307835824.98345" 
    capture_lex $P1968
    $P1977 = $P1968()
    unless $P1977, rx1963_fail
.annotate 'line', 826
  # rx pass
    rx1963_cur."!cursor_pass"(rx1963_pos, "typename")
    if_null rx1963_debug, debug_1250
    rx1963_cur."!cursor_debug"("PASS", "typename", " at pos=", rx1963_pos)
  debug_1250:
    .return (rx1963_cur)
  rx1963_restart:
.annotate 'line', 436
    if_null rx1963_debug, debug_1251
    rx1963_cur."!cursor_debug"("NEXT", "typename")
  debug_1251:
  rx1963_fail:
    (rx1963_rep, rx1963_pos, $I10, $P10) = rx1963_cur."!mark_fail"(0)
    lt rx1963_pos, -1, rx1963_done
    eq rx1963_pos, -1, rx1963_fail
    jump $I10
  rx1963_done:
    rx1963_cur."!cursor_fail"()
    if_null rx1963_debug, debug_1252
    rx1963_cur."!cursor_debug"("FAIL", "typename")
  debug_1252:
    .return (rx1963_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block1967"  :anon :subid("196_1307835824.98345") :outer("195_1307835824.98345")
.annotate 'line', 828
    find_dynamic_lex $P1971, "$*ACTIONS"
    unless_null $P1971, vivify_1244
    get_hll_global $P1969, "GLOBAL"
    get_who $P1970, $P1969
    set $P1971, $P1970["$ACTIONS"]
    unless_null $P1971, vivify_1245
    die "Contextual $*ACTIONS not found"
  vivify_1245:
  vivify_1244:
    find_lex $P1972, "$/"
    unless_null $P1972, vivify_1246
    new $P1972, "Undef"
  vivify_1246:
    find_lex $P1973, "$/"
    unless_null $P1973, vivify_1247
    $P1973 = root_new ['parrot';'Hash']
  vivify_1247:
    set $P1974, $P1973["name"]
    unless_null $P1974, vivify_1248
    $P1974 = root_new ['parrot';'Hash']
  vivify_1248:
    set $P1975, $P1974["identifier"]
    unless_null $P1975, vivify_1249
    new $P1975, "Undef"
  vivify_1249:
    $P1976 = $P1971."known_sym"($P1972, $P1975)
    .return ($P1976)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__typename"  :subid("197_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1979 = self."!PREFIX__!subrule"("name", "")
    new $P1980, "ResizablePMCArray"
    push $P1980, $P1979
    .return ($P1980)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "declarator"  :subid("198_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx1982_tgt
    .local int rx1982_pos
    .local int rx1982_off
    .local int rx1982_eos
    .local int rx1982_rep
    .local pmc rx1982_cur
    .local pmc rx1982_debug
    (rx1982_cur, rx1982_pos, rx1982_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx1982_cur
    .local pmc match
    .lex "$/", match
    length rx1982_eos, rx1982_tgt
    gt rx1982_pos, rx1982_eos, rx1982_done
    set rx1982_off, 0
    lt rx1982_pos, 2, rx1982_start
    sub rx1982_off, rx1982_pos, 1
    substr rx1982_tgt, rx1982_tgt, rx1982_off
  rx1982_start:
    eq $I10, 1, rx1982_restart
    if_null rx1982_debug, debug_1253
    rx1982_cur."!cursor_debug"("START", "declarator")
  debug_1253:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1983_done
    goto rxscan1983_scan
  rxscan1983_loop:
    (rx1982_pos) = rx1982_cur."from"()
    inc rx1982_pos
    rx1982_cur."!cursor_from"(rx1982_pos)
    ge rx1982_pos, rx1982_eos, rxscan1983_done
  rxscan1983_scan:
    set_addr $I10, rxscan1983_loop
    rx1982_cur."!mark_push"(0, rx1982_pos, $I10)
  rxscan1983_done:
  alt1984_0:
.annotate 'line', 831
    set_addr $I10, alt1984_1
    rx1982_cur."!mark_push"(0, rx1982_pos, $I10)
.annotate 'line', 832
  # rx subrule "variable_declarator" subtype=capture negate=
    rx1982_cur."!cursor_pos"(rx1982_pos)
    $P10 = rx1982_cur."variable_declarator"()
    unless $P10, rx1982_fail
    rx1982_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable_declarator")
    rx1982_pos = $P10."pos"()
    goto alt1984_end
  alt1984_1:
.annotate 'line', 833
  # rx subrule "routine_declarator" subtype=capture negate=
    rx1982_cur."!cursor_pos"(rx1982_pos)
    $P10 = rx1982_cur."routine_declarator"()
    unless $P10, rx1982_fail
    rx1982_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_declarator")
    rx1982_pos = $P10."pos"()
  alt1984_end:
.annotate 'line', 831
  # rx pass
    rx1982_cur."!cursor_pass"(rx1982_pos, "declarator")
    if_null rx1982_debug, debug_1254
    rx1982_cur."!cursor_debug"("PASS", "declarator", " at pos=", rx1982_pos)
  debug_1254:
    .return (rx1982_cur)
  rx1982_restart:
.annotate 'line', 436
    if_null rx1982_debug, debug_1255
    rx1982_cur."!cursor_debug"("NEXT", "declarator")
  debug_1255:
  rx1982_fail:
    (rx1982_rep, rx1982_pos, $I10, $P10) = rx1982_cur."!mark_fail"(0)
    lt rx1982_pos, -1, rx1982_done
    eq rx1982_pos, -1, rx1982_fail
    jump $I10
  rx1982_done:
    rx1982_cur."!cursor_fail"()
    if_null rx1982_debug, debug_1256
    rx1982_cur."!cursor_debug"("FAIL", "declarator")
  debug_1256:
    .return (rx1982_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__declarator"  :subid("199_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P1986 = self."!PREFIX__!subrule"("routine_declarator", "")
    $P1987 = self."!PREFIX__!subrule"("variable_declarator", "")
    new $P1988, "ResizablePMCArray"
    push $P1988, $P1986
    push $P1988, $P1987
    .return ($P1988)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "variable_declarator"  :subid("200_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .const 'Sub' $P2003 = "201_1307835824.98345" 
    capture_lex $P2003
.annotate 'line', 838
    new $P1990, "Undef"
    .lex "$*IN_DECL", $P1990
.annotate 'line', 436
    .local string rx1991_tgt
    .local int rx1991_pos
    .local int rx1991_off
    .local int rx1991_eos
    .local int rx1991_rep
    .local pmc rx1991_cur
    .local pmc rx1991_debug
    (rx1991_cur, rx1991_pos, rx1991_tgt, $I10) = self."!cursor_start"()
    rx1991_cur."!cursor_caparray"("typename", "trait")
    .lex unicode:"$\x{a2}", rx1991_cur
    .local pmc match
    .lex "$/", match
    length rx1991_eos, rx1991_tgt
    gt rx1991_pos, rx1991_eos, rx1991_done
    set rx1991_off, 0
    lt rx1991_pos, 2, rx1991_start
    sub rx1991_off, rx1991_pos, 1
    substr rx1991_tgt, rx1991_tgt, rx1991_off
  rx1991_start:
    eq $I10, 1, rx1991_restart
    if_null rx1991_debug, debug_1257
    rx1991_cur."!cursor_debug"("START", "variable_declarator")
  debug_1257:
    $I10 = self.'from'()
    ne $I10, -1, rxscan1992_done
    goto rxscan1992_scan
  rxscan1992_loop:
    (rx1991_pos) = rx1991_cur."from"()
    inc rx1991_pos
    rx1991_cur."!cursor_from"(rx1991_pos)
    ge rx1991_pos, rx1991_eos, rxscan1992_done
  rxscan1992_scan:
    set_addr $I10, rxscan1992_loop
    rx1991_cur."!mark_push"(0, rx1991_pos, $I10)
  rxscan1992_done:
.annotate 'line', 836
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
.annotate 'line', 837
  # rx rxquantr1994 ** 0..1
    set_addr $I10, rxquantr1994_done
    rx1991_cur."!mark_push"(0, rx1991_pos, $I10)
  rxquantr1994_loop:
  # rx subrule "typename" subtype=capture negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."typename"()
    unless $P10, rx1991_fail
    goto rxsubrule1995_pass
  rxsubrule1995_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1991_fail
  rxsubrule1995_pass:
    set_addr $I10, rxsubrule1995_back
    rx1991_cur."!mark_push"(0, rx1991_pos, $I10, $P10)
    $P10."!cursor_names"("typename")
    rx1991_pos = $P10."pos"()
    set_addr $I10, rxquantr1994_done
    (rx1991_rep) = rx1991_cur."!mark_commit"($I10)
  rxquantr1994_done:
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
.annotate 'line', 838
    rx1991_cur."!cursor_pos"(rx1991_pos)
    new $P1997, "String"
    assign $P1997, "variable"
    store_lex "$*IN_DECL", $P1997
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
.annotate 'line', 839
  # rx subrule "variable" subtype=capture negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."variable"()
    unless $P10, rx1991_fail
    rx1991_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable")
    rx1991_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
.annotate 'line', 840
    rx1991_cur."!cursor_pos"(rx1991_pos)
    find_lex $P2000, unicode:"$\x{a2}"
    $P2001 = $P2000."MATCH"()
    store_lex "$/", $P2001
    .const 'Sub' $P2003 = "201_1307835824.98345" 
    capture_lex $P2003
    $P2005 = $P2003()
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
.annotate 'line', 841
  # rx rxquantr2007 ** 0..*
    set_addr $I10, rxquantr2007_done
    rx1991_cur."!mark_push"(0, rx1991_pos, $I10)
  rxquantr2007_loop:
  # rx subrule "trait" subtype=capture negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."trait"()
    unless $P10, rx1991_fail
    goto rxsubrule2008_pass
  rxsubrule2008_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx1991_fail
  rxsubrule2008_pass:
    set_addr $I10, rxsubrule2008_back
    rx1991_cur."!mark_push"(0, rx1991_pos, $I10, $P10)
    $P10."!cursor_names"("trait")
    rx1991_pos = $P10."pos"()
    set_addr $I10, rxquantr2007_done
    (rx1991_rep) = rx1991_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr2007_done
    rx1991_cur."!mark_push"(rx1991_rep, rx1991_pos, $I10)
    goto rxquantr2007_loop
  rxquantr2007_done:
  # rx subrule "ws" subtype=method negate=
    rx1991_cur."!cursor_pos"(rx1991_pos)
    $P10 = rx1991_cur."ws"()
    unless $P10, rx1991_fail
    rx1991_pos = $P10."pos"()
.annotate 'line', 836
  # rx pass
    rx1991_cur."!cursor_pass"(rx1991_pos, "variable_declarator")
    if_null rx1991_debug, debug_1258
    rx1991_cur."!cursor_debug"("PASS", "variable_declarator", " at pos=", rx1991_pos)
  debug_1258:
    .return (rx1991_cur)
  rx1991_restart:
.annotate 'line', 436
    if_null rx1991_debug, debug_1259
    rx1991_cur."!cursor_debug"("NEXT", "variable_declarator")
  debug_1259:
  rx1991_fail:
    (rx1991_rep, rx1991_pos, $I10, $P10) = rx1991_cur."!mark_fail"(0)
    lt rx1991_pos, -1, rx1991_done
    eq rx1991_pos, -1, rx1991_fail
    jump $I10
  rx1991_done:
    rx1991_cur."!cursor_fail"()
    if_null rx1991_debug, debug_1260
    rx1991_cur."!cursor_debug"("FAIL", "variable_declarator")
  debug_1260:
    .return (rx1991_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2002"  :anon :subid("201_1307835824.98345") :outer("200_1307835824.98345")
.annotate 'line', 840
    new $P2004, "Integer"
    assign $P2004, 0
    store_dynamic_lex "$*IN_DECL", $P2004
    .return ($P2004)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__variable_declarator"  :subid("202_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2011 = self."!PREFIX__!subrule"("ws", "")
    new $P2012, "ResizablePMCArray"
    push $P2012, $P2011
    .return ($P2012)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator"  :subid("203_1307835824.98345")
    .param pmc param_2014
.annotate 'line', 844
    .lex "self", param_2014
    $P2015 = param_2014."!protoregex"("routine_declarator")
    .return ($P2015)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_declarator"  :subid("204_1307835824.98345")
    .param pmc param_2017
.annotate 'line', 844
    .lex "self", param_2017
    $P2018 = param_2017."!PREFIX__!protoregex"("routine_declarator")
    .return ($P2018)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator:sym<sub>"  :subid("205_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2020_tgt
    .local int rx2020_pos
    .local int rx2020_off
    .local int rx2020_eos
    .local int rx2020_rep
    .local pmc rx2020_cur
    .local pmc rx2020_debug
    (rx2020_cur, rx2020_pos, rx2020_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2020_cur
    .local pmc match
    .lex "$/", match
    length rx2020_eos, rx2020_tgt
    gt rx2020_pos, rx2020_eos, rx2020_done
    set rx2020_off, 0
    lt rx2020_pos, 2, rx2020_start
    sub rx2020_off, rx2020_pos, 1
    substr rx2020_tgt, rx2020_tgt, rx2020_off
  rx2020_start:
    eq $I10, 1, rx2020_restart
    if_null rx2020_debug, debug_1261
    rx2020_cur."!cursor_debug"("START", "routine_declarator:sym<sub>")
  debug_1261:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2021_done
    goto rxscan2021_scan
  rxscan2021_loop:
    (rx2020_pos) = rx2020_cur."from"()
    inc rx2020_pos
    rx2020_cur."!cursor_from"(rx2020_pos)
    ge rx2020_pos, rx2020_eos, rxscan2021_done
  rxscan2021_scan:
    set_addr $I10, rxscan2021_loop
    rx2020_cur."!mark_push"(0, rx2020_pos, $I10)
  rxscan2021_done:
.annotate 'line', 845
  # rx subcapture "sym"
    set_addr $I10, rxcap_2022_fail
    rx2020_cur."!mark_push"(0, rx2020_pos, $I10)
  # rx literal  "sub"
    add $I11, rx2020_pos, 3
    gt $I11, rx2020_eos, rx2020_fail
    sub $I11, rx2020_pos, rx2020_off
    substr $S10, rx2020_tgt, $I11, 3
    ne $S10, "sub", rx2020_fail
    add rx2020_pos, 3
    set_addr $I10, rxcap_2022_fail
    ($I12, $I11) = rx2020_cur."!mark_peek"($I10)
    rx2020_cur."!cursor_pos"($I11)
    ($P10) = rx2020_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2020_pos, "")
    rx2020_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2022_done
  rxcap_2022_fail:
    goto rx2020_fail
  rxcap_2022_done:
  # rx subrule "routine_def" subtype=capture negate=
    rx2020_cur."!cursor_pos"(rx2020_pos)
    $P10 = rx2020_cur."routine_def"()
    unless $P10, rx2020_fail
    rx2020_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_def")
    rx2020_pos = $P10."pos"()
  # rx pass
    rx2020_cur."!cursor_pass"(rx2020_pos, "routine_declarator:sym<sub>")
    if_null rx2020_debug, debug_1262
    rx2020_cur."!cursor_debug"("PASS", "routine_declarator:sym<sub>", " at pos=", rx2020_pos)
  debug_1262:
    .return (rx2020_cur)
  rx2020_restart:
.annotate 'line', 436
    if_null rx2020_debug, debug_1263
    rx2020_cur."!cursor_debug"("NEXT", "routine_declarator:sym<sub>")
  debug_1263:
  rx2020_fail:
    (rx2020_rep, rx2020_pos, $I10, $P10) = rx2020_cur."!mark_fail"(0)
    lt rx2020_pos, -1, rx2020_done
    eq rx2020_pos, -1, rx2020_fail
    jump $I10
  rx2020_done:
    rx2020_cur."!cursor_fail"()
    if_null rx2020_debug, debug_1264
    rx2020_cur."!cursor_debug"("FAIL", "routine_declarator:sym<sub>")
  debug_1264:
    .return (rx2020_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_declarator:sym<sub>"  :subid("206_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2024 = self."!PREFIX__!subrule"("routine_def", "sub")
    new $P2025, "ResizablePMCArray"
    push $P2025, $P2024
    .return ($P2025)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_declarator:sym<method>"  :subid("207_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2027_tgt
    .local int rx2027_pos
    .local int rx2027_off
    .local int rx2027_eos
    .local int rx2027_rep
    .local pmc rx2027_cur
    .local pmc rx2027_debug
    (rx2027_cur, rx2027_pos, rx2027_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2027_cur
    .local pmc match
    .lex "$/", match
    length rx2027_eos, rx2027_tgt
    gt rx2027_pos, rx2027_eos, rx2027_done
    set rx2027_off, 0
    lt rx2027_pos, 2, rx2027_start
    sub rx2027_off, rx2027_pos, 1
    substr rx2027_tgt, rx2027_tgt, rx2027_off
  rx2027_start:
    eq $I10, 1, rx2027_restart
    if_null rx2027_debug, debug_1265
    rx2027_cur."!cursor_debug"("START", "routine_declarator:sym<method>")
  debug_1265:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2028_done
    goto rxscan2028_scan
  rxscan2028_loop:
    (rx2027_pos) = rx2027_cur."from"()
    inc rx2027_pos
    rx2027_cur."!cursor_from"(rx2027_pos)
    ge rx2027_pos, rx2027_eos, rxscan2028_done
  rxscan2028_scan:
    set_addr $I10, rxscan2028_loop
    rx2027_cur."!mark_push"(0, rx2027_pos, $I10)
  rxscan2028_done:
.annotate 'line', 846
  # rx subcapture "sym"
    set_addr $I10, rxcap_2029_fail
    rx2027_cur."!mark_push"(0, rx2027_pos, $I10)
  # rx literal  "method"
    add $I11, rx2027_pos, 6
    gt $I11, rx2027_eos, rx2027_fail
    sub $I11, rx2027_pos, rx2027_off
    substr $S10, rx2027_tgt, $I11, 6
    ne $S10, "method", rx2027_fail
    add rx2027_pos, 6
    set_addr $I10, rxcap_2029_fail
    ($I12, $I11) = rx2027_cur."!mark_peek"($I10)
    rx2027_cur."!cursor_pos"($I11)
    ($P10) = rx2027_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2027_pos, "")
    rx2027_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2029_done
  rxcap_2029_fail:
    goto rx2027_fail
  rxcap_2029_done:
  # rx subrule "method_def" subtype=capture negate=
    rx2027_cur."!cursor_pos"(rx2027_pos)
    $P10 = rx2027_cur."method_def"()
    unless $P10, rx2027_fail
    rx2027_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("method_def")
    rx2027_pos = $P10."pos"()
  # rx pass
    rx2027_cur."!cursor_pass"(rx2027_pos, "routine_declarator:sym<method>")
    if_null rx2027_debug, debug_1266
    rx2027_cur."!cursor_debug"("PASS", "routine_declarator:sym<method>", " at pos=", rx2027_pos)
  debug_1266:
    .return (rx2027_cur)
  rx2027_restart:
.annotate 'line', 436
    if_null rx2027_debug, debug_1267
    rx2027_cur."!cursor_debug"("NEXT", "routine_declarator:sym<method>")
  debug_1267:
  rx2027_fail:
    (rx2027_rep, rx2027_pos, $I10, $P10) = rx2027_cur."!mark_fail"(0)
    lt rx2027_pos, -1, rx2027_done
    eq rx2027_pos, -1, rx2027_fail
    jump $I10
  rx2027_done:
    rx2027_cur."!cursor_fail"()
    if_null rx2027_debug, debug_1268
    rx2027_cur."!cursor_debug"("FAIL", "routine_declarator:sym<method>")
  debug_1268:
    .return (rx2027_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_declarator:sym<method>"  :subid("208_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2031 = self."!PREFIX__!subrule"("method_def", "method")
    new $P2032, "ResizablePMCArray"
    push $P2032, $P2031
    .return ($P2032)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "routine_def"  :subid("209_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 849
    new $P2034, "Undef"
    .lex "$*RETURN_USED", $P2034
.annotate 'line', 436
    .local string rx2035_tgt
    .local int rx2035_pos
    .local int rx2035_off
    .local int rx2035_eos
    .local int rx2035_rep
    .local pmc rx2035_cur
    .local pmc rx2035_debug
    (rx2035_cur, rx2035_pos, rx2035_tgt, $I10) = self."!cursor_start"()
    rx2035_cur."!cursor_caparray"("sigil", "deflongname", "trait")
    .lex unicode:"$\x{a2}", rx2035_cur
    .local pmc match
    .lex "$/", match
    length rx2035_eos, rx2035_tgt
    gt rx2035_pos, rx2035_eos, rx2035_done
    set rx2035_off, 0
    lt rx2035_pos, 2, rx2035_start
    sub rx2035_off, rx2035_pos, 1
    substr rx2035_tgt, rx2035_tgt, rx2035_off
  rx2035_start:
    eq $I10, 1, rx2035_restart
    if_null rx2035_debug, debug_1269
    rx2035_cur."!cursor_debug"("START", "routine_def")
  debug_1269:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2036_done
    goto rxscan2036_scan
  rxscan2036_loop:
    (rx2035_pos) = rx2035_cur."from"()
    inc rx2035_pos
    rx2035_cur."!cursor_from"(rx2035_pos)
    ge rx2035_pos, rx2035_eos, rxscan2036_done
  rxscan2036_scan:
    set_addr $I10, rxscan2036_loop
    rx2035_cur."!mark_push"(0, rx2035_pos, $I10)
  rxscan2036_done:
.annotate 'line', 848
  # rx subrule "ws" subtype=method negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."ws"()
    unless $P10, rx2035_fail
    rx2035_pos = $P10."pos"()
.annotate 'line', 849
    rx2035_cur."!cursor_pos"(rx2035_pos)
    new $P2038, "Integer"
    assign $P2038, 0
    store_lex "$*RETURN_USED", $P2038
  # rx subrule "ws" subtype=method negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."ws"()
    unless $P10, rx2035_fail
    rx2035_pos = $P10."pos"()
.annotate 'line', 850
  # rx rxquantr2040 ** 0..1
    set_addr $I10, rxquantr2040_done
    rx2035_cur."!mark_push"(0, rx2035_pos, $I10)
  rxquantr2040_loop:
  # rx subrule "ws" subtype=method negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."ws"()
    unless $P10, rx2035_fail
    rx2035_pos = $P10."pos"()
  # rx subcapture "sigil"
    set_addr $I10, rxcap_2043_fail
    rx2035_cur."!mark_push"(0, rx2035_pos, $I10)
  # rx rxquantr2042 ** 0..1
    set_addr $I10, rxquantr2042_done
    rx2035_cur."!mark_push"(0, rx2035_pos, $I10)
  rxquantr2042_loop:
  # rx literal  "&"
    add $I11, rx2035_pos, 1
    gt $I11, rx2035_eos, rx2035_fail
    sub $I11, rx2035_pos, rx2035_off
    ord $I11, rx2035_tgt, $I11
    ne $I11, 38, rx2035_fail
    add rx2035_pos, 1
    set_addr $I10, rxquantr2042_done
    (rx2035_rep) = rx2035_cur."!mark_commit"($I10)
  rxquantr2042_done:
    set_addr $I10, rxcap_2043_fail
    ($I12, $I11) = rx2035_cur."!mark_peek"($I10)
    rx2035_cur."!cursor_pos"($I11)
    ($P10) = rx2035_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2035_pos, "")
    rx2035_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    goto rxcap_2043_done
  rxcap_2043_fail:
    goto rx2035_fail
  rxcap_2043_done:
  # rx subrule "deflongname" subtype=capture negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."deflongname"()
    unless $P10, rx2035_fail
    rx2035_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx2035_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."ws"()
    unless $P10, rx2035_fail
    rx2035_pos = $P10."pos"()
    set_addr $I10, rxquantr2040_done
    (rx2035_rep) = rx2035_cur."!mark_commit"($I10)
  rxquantr2040_done:
  # rx subrule "ws" subtype=method negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."ws"()
    unless $P10, rx2035_fail
    rx2035_pos = $P10."pos"()
.annotate 'line', 851
  # rx subrule "newpad" subtype=method negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."newpad"()
    unless $P10, rx2035_fail
    rx2035_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."ws"()
    unless $P10, rx2035_fail
    rx2035_pos = $P10."pos"()
  alt2047_0:
.annotate 'line', 852
    set_addr $I10, alt2047_1
    rx2035_cur."!mark_push"(0, rx2035_pos, $I10)
  # rx subrule "ws" subtype=method negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."ws"()
    unless $P10, rx2035_fail
    rx2035_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx2035_pos, 1
    gt $I11, rx2035_eos, rx2035_fail
    sub $I11, rx2035_pos, rx2035_off
    ord $I11, rx2035_tgt, $I11
    ne $I11, 40, rx2035_fail
    add rx2035_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."ws"()
    unless $P10, rx2035_fail
    rx2035_pos = $P10."pos"()
  # rx subrule "signature" subtype=capture negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."signature"()
    unless $P10, rx2035_fail
    rx2035_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx2035_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."ws"()
    unless $P10, rx2035_fail
    rx2035_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx2035_pos, 1
    gt $I11, rx2035_eos, rx2035_fail
    sub $I11, rx2035_pos, rx2035_off
    ord $I11, rx2035_tgt, $I11
    ne $I11, 41, rx2035_fail
    add rx2035_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."ws"()
    unless $P10, rx2035_fail
    rx2035_pos = $P10."pos"()
    goto alt2047_end
  alt2047_1:
.annotate 'line', 853
  # rx subrule "ws" subtype=method negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."ws"()
    unless $P10, rx2035_fail
    rx2035_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."panic"("Routine declaration requires a signature")
    unless $P10, rx2035_fail
    rx2035_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."ws"()
    unless $P10, rx2035_fail
    rx2035_pos = $P10."pos"()
  alt2047_end:
  # rx subrule "ws" subtype=method negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."ws"()
    unless $P10, rx2035_fail
    rx2035_pos = $P10."pos"()
.annotate 'line', 854
  # rx rxquantr2055 ** 0..*
    set_addr $I10, rxquantr2055_done
    rx2035_cur."!mark_push"(0, rx2035_pos, $I10)
  rxquantr2055_loop:
  # rx subrule "trait" subtype=capture negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."trait"()
    unless $P10, rx2035_fail
    goto rxsubrule2056_pass
  rxsubrule2056_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2035_fail
  rxsubrule2056_pass:
    set_addr $I10, rxsubrule2056_back
    rx2035_cur."!mark_push"(0, rx2035_pos, $I10, $P10)
    $P10."!cursor_names"("trait")
    rx2035_pos = $P10."pos"()
    set_addr $I10, rxquantr2055_done
    (rx2035_rep) = rx2035_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr2055_done
    rx2035_cur."!mark_push"(rx2035_rep, rx2035_pos, $I10)
    goto rxquantr2055_loop
  rxquantr2055_done:
  # rx subrule "ws" subtype=method negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."ws"()
    unless $P10, rx2035_fail
    rx2035_pos = $P10."pos"()
  alt2058_0:
.annotate 'line', 855
    set_addr $I10, alt2058_1
    rx2035_cur."!mark_push"(0, rx2035_pos, $I10)
.annotate 'line', 856
  # rx subrule "ws" subtype=method negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."ws"()
    unless $P10, rx2035_fail
    rx2035_pos = $P10."pos"()
  # rx subrule "onlystar" subtype=capture negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."onlystar"()
    unless $P10, rx2035_fail
    rx2035_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("onlystar")
    rx2035_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."ws"()
    unless $P10, rx2035_fail
    rx2035_pos = $P10."pos"()
    goto alt2058_end
  alt2058_1:
.annotate 'line', 857
  # rx subrule "ws" subtype=method negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."ws"()
    unless $P10, rx2035_fail
    rx2035_pos = $P10."pos"()
  # rx subrule "blockoid" subtype=capture negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."blockoid"()
    unless $P10, rx2035_fail
    rx2035_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx2035_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."ws"()
    unless $P10, rx2035_fail
    rx2035_pos = $P10."pos"()
  alt2058_end:
.annotate 'line', 858
  # rx subrule "ws" subtype=method negate=
    rx2035_cur."!cursor_pos"(rx2035_pos)
    $P10 = rx2035_cur."ws"()
    unless $P10, rx2035_fail
    rx2035_pos = $P10."pos"()
.annotate 'line', 848
  # rx pass
    rx2035_cur."!cursor_pass"(rx2035_pos, "routine_def")
    if_null rx2035_debug, debug_1270
    rx2035_cur."!cursor_debug"("PASS", "routine_def", " at pos=", rx2035_pos)
  debug_1270:
    .return (rx2035_cur)
  rx2035_restart:
.annotate 'line', 436
    if_null rx2035_debug, debug_1271
    rx2035_cur."!cursor_debug"("NEXT", "routine_def")
  debug_1271:
  rx2035_fail:
    (rx2035_rep, rx2035_pos, $I10, $P10) = rx2035_cur."!mark_fail"(0)
    lt rx2035_pos, -1, rx2035_done
    eq rx2035_pos, -1, rx2035_fail
    jump $I10
  rx2035_done:
    rx2035_cur."!cursor_fail"()
    if_null rx2035_debug, debug_1272
    rx2035_cur."!cursor_debug"("FAIL", "routine_def")
  debug_1272:
    .return (rx2035_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__routine_def"  :subid("210_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2065 = self."!PREFIX__!subrule"("ws", "")
    new $P2066, "ResizablePMCArray"
    push $P2066, $P2065
    .return ($P2066)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "method_def"  :subid("211_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .const 'Sub' $P2095 = "212_1307835824.98345" 
    capture_lex $P2095
.annotate 'line', 862
    new $P2068, "Undef"
    .lex "$*RETURN_USED", $P2068
.annotate 'line', 863
    new $P2069, "Undef"
    .lex "$*INVOCANT_OK", $P2069
.annotate 'line', 436
    .local string rx2070_tgt
    .local int rx2070_pos
    .local int rx2070_off
    .local int rx2070_eos
    .local int rx2070_rep
    .local pmc rx2070_cur
    .local pmc rx2070_debug
    (rx2070_cur, rx2070_pos, rx2070_tgt, $I10) = self."!cursor_start"()
    rx2070_cur."!cursor_caparray"("deflongname", "trait")
    .lex unicode:"$\x{a2}", rx2070_cur
    .local pmc match
    .lex "$/", match
    length rx2070_eos, rx2070_tgt
    gt rx2070_pos, rx2070_eos, rx2070_done
    set rx2070_off, 0
    lt rx2070_pos, 2, rx2070_start
    sub rx2070_off, rx2070_pos, 1
    substr rx2070_tgt, rx2070_tgt, rx2070_off
  rx2070_start:
    eq $I10, 1, rx2070_restart
    if_null rx2070_debug, debug_1273
    rx2070_cur."!cursor_debug"("START", "method_def")
  debug_1273:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2071_done
    goto rxscan2071_scan
  rxscan2071_loop:
    (rx2070_pos) = rx2070_cur."from"()
    inc rx2070_pos
    rx2070_cur."!cursor_from"(rx2070_pos)
    ge rx2070_pos, rx2070_eos, rxscan2071_done
  rxscan2071_scan:
    set_addr $I10, rxscan2071_loop
    rx2070_cur."!mark_push"(0, rx2070_pos, $I10)
  rxscan2071_done:
.annotate 'line', 861
  # rx subrule "ws" subtype=method negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."ws"()
    unless $P10, rx2070_fail
    rx2070_pos = $P10."pos"()
.annotate 'line', 862
    rx2070_cur."!cursor_pos"(rx2070_pos)
    new $P2073, "Integer"
    assign $P2073, 0
    store_lex "$*RETURN_USED", $P2073
  # rx subrule "ws" subtype=method negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."ws"()
    unless $P10, rx2070_fail
    rx2070_pos = $P10."pos"()
.annotate 'line', 863
    rx2070_cur."!cursor_pos"(rx2070_pos)
    new $P2075, "Integer"
    assign $P2075, 1
    store_lex "$*INVOCANT_OK", $P2075
  # rx subrule "ws" subtype=method negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."ws"()
    unless $P10, rx2070_fail
    rx2070_pos = $P10."pos"()
.annotate 'line', 864
  # rx subcapture "private"
    set_addr $I10, rxcap_2078_fail
    rx2070_cur."!mark_push"(0, rx2070_pos, $I10)
  # rx rxquantr2077 ** 0..1
    set_addr $I10, rxquantr2077_done
    rx2070_cur."!mark_push"(0, rx2070_pos, $I10)
  rxquantr2077_loop:
  # rx literal  "!"
    add $I11, rx2070_pos, 1
    gt $I11, rx2070_eos, rx2070_fail
    sub $I11, rx2070_pos, rx2070_off
    ord $I11, rx2070_tgt, $I11
    ne $I11, 33, rx2070_fail
    add rx2070_pos, 1
    set_addr $I10, rxquantr2077_done
    (rx2070_rep) = rx2070_cur."!mark_commit"($I10)
  rxquantr2077_done:
    set_addr $I10, rxcap_2078_fail
    ($I12, $I11) = rx2070_cur."!mark_peek"($I10)
    rx2070_cur."!cursor_pos"($I11)
    ($P10) = rx2070_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2070_pos, "")
    rx2070_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("private")
    goto rxcap_2078_done
  rxcap_2078_fail:
    goto rx2070_fail
  rxcap_2078_done:
  # rx subrule "ws" subtype=method negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."ws"()
    unless $P10, rx2070_fail
    rx2070_pos = $P10."pos"()
.annotate 'line', 865
  # rx rxquantr2080 ** 0..1
    set_addr $I10, rxquantr2080_done
    rx2070_cur."!mark_push"(0, rx2070_pos, $I10)
  rxquantr2080_loop:
  # rx subrule "deflongname" subtype=capture negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."deflongname"()
    unless $P10, rx2070_fail
    goto rxsubrule2081_pass
  rxsubrule2081_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2070_fail
  rxsubrule2081_pass:
    set_addr $I10, rxsubrule2081_back
    rx2070_cur."!mark_push"(0, rx2070_pos, $I10, $P10)
    $P10."!cursor_names"("deflongname")
    rx2070_pos = $P10."pos"()
    set_addr $I10, rxquantr2080_done
    (rx2070_rep) = rx2070_cur."!mark_commit"($I10)
  rxquantr2080_done:
  # rx subrule "ws" subtype=method negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."ws"()
    unless $P10, rx2070_fail
    rx2070_pos = $P10."pos"()
.annotate 'line', 866
  # rx subrule "newpad" subtype=method negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."newpad"()
    unless $P10, rx2070_fail
    rx2070_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."ws"()
    unless $P10, rx2070_fail
    rx2070_pos = $P10."pos"()
  alt2084_0:
.annotate 'line', 867
    set_addr $I10, alt2084_1
    rx2070_cur."!mark_push"(0, rx2070_pos, $I10)
  # rx subrule "ws" subtype=method negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."ws"()
    unless $P10, rx2070_fail
    rx2070_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx2070_pos, 1
    gt $I11, rx2070_eos, rx2070_fail
    sub $I11, rx2070_pos, rx2070_off
    ord $I11, rx2070_tgt, $I11
    ne $I11, 40, rx2070_fail
    add rx2070_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."ws"()
    unless $P10, rx2070_fail
    rx2070_pos = $P10."pos"()
  # rx subrule "signature" subtype=capture negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."signature"()
    unless $P10, rx2070_fail
    rx2070_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx2070_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."ws"()
    unless $P10, rx2070_fail
    rx2070_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx2070_pos, 1
    gt $I11, rx2070_eos, rx2070_fail
    sub $I11, rx2070_pos, rx2070_off
    ord $I11, rx2070_tgt, $I11
    ne $I11, 41, rx2070_fail
    add rx2070_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."ws"()
    unless $P10, rx2070_fail
    rx2070_pos = $P10."pos"()
    goto alt2084_end
  alt2084_1:
.annotate 'line', 868
  # rx subrule "ws" subtype=method negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."ws"()
    unless $P10, rx2070_fail
    rx2070_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."panic"("Routine declaration requires a signature")
    unless $P10, rx2070_fail
    rx2070_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."ws"()
    unless $P10, rx2070_fail
    rx2070_pos = $P10."pos"()
  alt2084_end:
  # rx subrule "ws" subtype=method negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."ws"()
    unless $P10, rx2070_fail
    rx2070_pos = $P10."pos"()
.annotate 'line', 869
    rx2070_cur."!cursor_pos"(rx2070_pos)
    find_lex $P2092, unicode:"$\x{a2}"
    $P2093 = $P2092."MATCH"()
    store_lex "$/", $P2093
    .const 'Sub' $P2095 = "212_1307835824.98345" 
    capture_lex $P2095
    $P2097 = $P2095()
  # rx subrule "ws" subtype=method negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."ws"()
    unless $P10, rx2070_fail
    rx2070_pos = $P10."pos"()
.annotate 'line', 870
  # rx rxquantr2099 ** 0..*
    set_addr $I10, rxquantr2099_done
    rx2070_cur."!mark_push"(0, rx2070_pos, $I10)
  rxquantr2099_loop:
  # rx subrule "trait" subtype=capture negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."trait"()
    unless $P10, rx2070_fail
    goto rxsubrule2100_pass
  rxsubrule2100_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2070_fail
  rxsubrule2100_pass:
    set_addr $I10, rxsubrule2100_back
    rx2070_cur."!mark_push"(0, rx2070_pos, $I10, $P10)
    $P10."!cursor_names"("trait")
    rx2070_pos = $P10."pos"()
    set_addr $I10, rxquantr2099_done
    (rx2070_rep) = rx2070_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr2099_done
    rx2070_cur."!mark_push"(rx2070_rep, rx2070_pos, $I10)
    goto rxquantr2099_loop
  rxquantr2099_done:
  # rx subrule "ws" subtype=method negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."ws"()
    unless $P10, rx2070_fail
    rx2070_pos = $P10."pos"()
  alt2102_0:
.annotate 'line', 871
    set_addr $I10, alt2102_1
    rx2070_cur."!mark_push"(0, rx2070_pos, $I10)
.annotate 'line', 872
  # rx subrule "ws" subtype=method negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."ws"()
    unless $P10, rx2070_fail
    rx2070_pos = $P10."pos"()
  # rx subrule "onlystar" subtype=capture negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."onlystar"()
    unless $P10, rx2070_fail
    rx2070_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("onlystar")
    rx2070_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."ws"()
    unless $P10, rx2070_fail
    rx2070_pos = $P10."pos"()
    goto alt2102_end
  alt2102_1:
.annotate 'line', 873
  # rx subrule "ws" subtype=method negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."ws"()
    unless $P10, rx2070_fail
    rx2070_pos = $P10."pos"()
  # rx subrule "blockoid" subtype=capture negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."blockoid"()
    unless $P10, rx2070_fail
    rx2070_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("blockoid")
    rx2070_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."ws"()
    unless $P10, rx2070_fail
    rx2070_pos = $P10."pos"()
  alt2102_end:
.annotate 'line', 874
  # rx subrule "ws" subtype=method negate=
    rx2070_cur."!cursor_pos"(rx2070_pos)
    $P10 = rx2070_cur."ws"()
    unless $P10, rx2070_fail
    rx2070_pos = $P10."pos"()
.annotate 'line', 861
  # rx pass
    rx2070_cur."!cursor_pass"(rx2070_pos, "method_def")
    if_null rx2070_debug, debug_1274
    rx2070_cur."!cursor_debug"("PASS", "method_def", " at pos=", rx2070_pos)
  debug_1274:
    .return (rx2070_cur)
  rx2070_restart:
.annotate 'line', 436
    if_null rx2070_debug, debug_1275
    rx2070_cur."!cursor_debug"("NEXT", "method_def")
  debug_1275:
  rx2070_fail:
    (rx2070_rep, rx2070_pos, $I10, $P10) = rx2070_cur."!mark_fail"(0)
    lt rx2070_pos, -1, rx2070_done
    eq rx2070_pos, -1, rx2070_fail
    jump $I10
  rx2070_done:
    rx2070_cur."!cursor_fail"()
    if_null rx2070_debug, debug_1276
    rx2070_cur."!cursor_debug"("FAIL", "method_def")
  debug_1276:
    .return (rx2070_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2094"  :anon :subid("212_1307835824.98345") :outer("211_1307835824.98345")
.annotate 'line', 869
    new $P2096, "Integer"
    assign $P2096, 0
    store_dynamic_lex "$*INVOCANT_OK", $P2096
    .return ($P2096)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__method_def"  :subid("213_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2109 = self."!PREFIX__!subrule"("ws", "")
    new $P2110, "ResizablePMCArray"
    push $P2110, $P2109
    .return ($P2110)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "onlystar"  :subid("214_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .const 'Sub' $P2117 = "215_1307835824.98345" 
    capture_lex $P2117
    .local string rx2112_tgt
    .local int rx2112_pos
    .local int rx2112_off
    .local int rx2112_eos
    .local int rx2112_rep
    .local pmc rx2112_cur
    .local pmc rx2112_debug
    (rx2112_cur, rx2112_pos, rx2112_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2112_cur
    .local pmc match
    .lex "$/", match
    length rx2112_eos, rx2112_tgt
    gt rx2112_pos, rx2112_eos, rx2112_done
    set rx2112_off, 0
    lt rx2112_pos, 2, rx2112_start
    sub rx2112_off, rx2112_pos, 1
    substr rx2112_tgt, rx2112_tgt, rx2112_off
  rx2112_start:
    eq $I10, 1, rx2112_restart
    if_null rx2112_debug, debug_1277
    rx2112_cur."!cursor_debug"("START", "onlystar")
  debug_1277:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2113_done
    goto rxscan2113_scan
  rxscan2113_loop:
    (rx2112_pos) = rx2112_cur."from"()
    inc rx2112_pos
    rx2112_cur."!cursor_from"(rx2112_pos)
    ge rx2112_pos, rx2112_eos, rxscan2113_done
  rxscan2113_scan:
    set_addr $I10, rxscan2113_loop
    rx2112_cur."!mark_push"(0, rx2112_pos, $I10)
  rxscan2113_done:
.annotate 'line', 878
    rx2112_cur."!cursor_pos"(rx2112_pos)
    find_lex $P2114, unicode:"$\x{a2}"
    $P2115 = $P2114."MATCH"()
    store_lex "$/", $P2115
    .const 'Sub' $P2117 = "215_1307835824.98345" 
    capture_lex $P2117
    $P2123 = $P2117()
    unless $P2123, rx2112_fail
.annotate 'line', 879
  # rx literal  "{"
    add $I11, rx2112_pos, 1
    gt $I11, rx2112_eos, rx2112_fail
    sub $I11, rx2112_pos, rx2112_off
    ord $I11, rx2112_tgt, $I11
    ne $I11, 123, rx2112_fail
    add rx2112_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2112_cur."!cursor_pos"(rx2112_pos)
    $P10 = rx2112_cur."ws"()
    unless $P10, rx2112_fail
    rx2112_pos = $P10."pos"()
  # rx literal  "*"
    add $I11, rx2112_pos, 1
    gt $I11, rx2112_eos, rx2112_fail
    sub $I11, rx2112_pos, rx2112_off
    ord $I11, rx2112_tgt, $I11
    ne $I11, 42, rx2112_fail
    add rx2112_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2112_cur."!cursor_pos"(rx2112_pos)
    $P10 = rx2112_cur."ws"()
    unless $P10, rx2112_fail
    rx2112_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx2112_pos, 1
    gt $I11, rx2112_eos, rx2112_fail
    sub $I11, rx2112_pos, rx2112_off
    ord $I11, rx2112_tgt, $I11
    ne $I11, 125, rx2112_fail
    add rx2112_pos, 1
.annotate 'line', 880
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx2112_cur."!cursor_pos"(rx2112_pos)
    $P10 = rx2112_cur."ENDSTMT"()
    unless $P10, rx2112_fail
.annotate 'line', 881
  # rx subrule "finishpad" subtype=method negate=
    rx2112_cur."!cursor_pos"(rx2112_pos)
    $P10 = rx2112_cur."finishpad"()
    unless $P10, rx2112_fail
    rx2112_pos = $P10."pos"()
.annotate 'line', 877
  # rx pass
    rx2112_cur."!cursor_pass"(rx2112_pos, "onlystar")
    if_null rx2112_debug, debug_1280
    rx2112_cur."!cursor_debug"("PASS", "onlystar", " at pos=", rx2112_pos)
  debug_1280:
    .return (rx2112_cur)
  rx2112_restart:
.annotate 'line', 436
    if_null rx2112_debug, debug_1281
    rx2112_cur."!cursor_debug"("NEXT", "onlystar")
  debug_1281:
  rx2112_fail:
    (rx2112_rep, rx2112_pos, $I10, $P10) = rx2112_cur."!mark_fail"(0)
    lt rx2112_pos, -1, rx2112_done
    eq rx2112_pos, -1, rx2112_fail
    jump $I10
  rx2112_done:
    rx2112_cur."!cursor_fail"()
    if_null rx2112_debug, debug_1282
    rx2112_cur."!cursor_debug"("FAIL", "onlystar")
  debug_1282:
    .return (rx2112_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2116"  :anon :subid("215_1307835824.98345") :outer("214_1307835824.98345")
.annotate 'line', 878
    find_dynamic_lex $P2120, "$*MULTINESS"
    unless_null $P2120, vivify_1278
    get_hll_global $P2118, "GLOBAL"
    get_who $P2119, $P2118
    set $P2120, $P2119["$MULTINESS"]
    unless_null $P2120, vivify_1279
    die "Contextual $*MULTINESS not found"
  vivify_1279:
  vivify_1278:
    set $S2121, $P2120
    iseq $I2122, $S2121, "proto"
    .return ($I2122)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__onlystar"  :subid("216_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2125, "ResizablePMCArray"
    push $P2125, ""
    .return ($P2125)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator"  :subid("217_1307835824.98345")
    .param pmc param_2127
.annotate 'line', 884
    .lex "self", param_2127
    $P2128 = param_2127."!protoregex"("multi_declarator")
    .return ($P2128)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator"  :subid("218_1307835824.98345")
    .param pmc param_2130
.annotate 'line', 884
    .lex "self", param_2130
    $P2131 = param_2130."!PREFIX__!protoregex"("multi_declarator")
    .return ($P2131)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<multi>"  :subid("219_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 886
    new $P2133, "Undef"
    .lex "$*MULTINESS", $P2133
.annotate 'line', 436
    .local string rx2134_tgt
    .local int rx2134_pos
    .local int rx2134_off
    .local int rx2134_eos
    .local int rx2134_rep
    .local pmc rx2134_cur
    .local pmc rx2134_debug
    (rx2134_cur, rx2134_pos, rx2134_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2134_cur
    .local pmc match
    .lex "$/", match
    length rx2134_eos, rx2134_tgt
    gt rx2134_pos, rx2134_eos, rx2134_done
    set rx2134_off, 0
    lt rx2134_pos, 2, rx2134_start
    sub rx2134_off, rx2134_pos, 1
    substr rx2134_tgt, rx2134_tgt, rx2134_off
  rx2134_start:
    eq $I10, 1, rx2134_restart
    if_null rx2134_debug, debug_1283
    rx2134_cur."!cursor_debug"("START", "multi_declarator:sym<multi>")
  debug_1283:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2135_done
    goto rxscan2135_scan
  rxscan2135_loop:
    (rx2134_pos) = rx2134_cur."from"()
    inc rx2134_pos
    rx2134_cur."!cursor_from"(rx2134_pos)
    ge rx2134_pos, rx2134_eos, rxscan2135_done
  rxscan2135_scan:
    set_addr $I10, rxscan2135_loop
    rx2134_cur."!mark_push"(0, rx2134_pos, $I10)
  rxscan2135_done:
.annotate 'line', 886
    rx2134_cur."!cursor_pos"(rx2134_pos)
    new $P2136, "String"
    assign $P2136, "multi"
    store_lex "$*MULTINESS", $P2136
.annotate 'line', 887
  # rx subcapture "sym"
    set_addr $I10, rxcap_2137_fail
    rx2134_cur."!mark_push"(0, rx2134_pos, $I10)
  # rx literal  "multi"
    add $I11, rx2134_pos, 5
    gt $I11, rx2134_eos, rx2134_fail
    sub $I11, rx2134_pos, rx2134_off
    substr $S10, rx2134_tgt, $I11, 5
    ne $S10, "multi", rx2134_fail
    add rx2134_pos, 5
    set_addr $I10, rxcap_2137_fail
    ($I12, $I11) = rx2134_cur."!mark_peek"($I10)
    rx2134_cur."!cursor_pos"($I11)
    ($P10) = rx2134_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2134_pos, "")
    rx2134_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2137_done
  rxcap_2137_fail:
    goto rx2134_fail
  rxcap_2137_done:
.annotate 'line', 888
  # rx subrule "ws" subtype=method negate=
    rx2134_cur."!cursor_pos"(rx2134_pos)
    $P10 = rx2134_cur."ws"()
    unless $P10, rx2134_fail
    rx2134_pos = $P10."pos"()
  alt2138_0:
    set_addr $I10, alt2138_1
    rx2134_cur."!mark_push"(0, rx2134_pos, $I10)
  # rx subrule "declarator" subtype=capture negate=
    rx2134_cur."!cursor_pos"(rx2134_pos)
    $P10 = rx2134_cur."declarator"()
    unless $P10, rx2134_fail
    rx2134_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx2134_pos = $P10."pos"()
    goto alt2138_end
  alt2138_1:
    set_addr $I10, alt2138_2
    rx2134_cur."!mark_push"(0, rx2134_pos, $I10)
  # rx subrule "routine_def" subtype=capture negate=
    rx2134_cur."!cursor_pos"(rx2134_pos)
    $P10 = rx2134_cur."routine_def"()
    unless $P10, rx2134_fail
    rx2134_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_def")
    rx2134_pos = $P10."pos"()
    goto alt2138_end
  alt2138_2:
  # rx subrule "panic" subtype=method negate=
    rx2134_cur."!cursor_pos"(rx2134_pos)
    $P10 = rx2134_cur."panic"("Malformed multi")
    unless $P10, rx2134_fail
    rx2134_pos = $P10."pos"()
  alt2138_end:
.annotate 'line', 885
  # rx pass
    rx2134_cur."!cursor_pass"(rx2134_pos, "multi_declarator:sym<multi>")
    if_null rx2134_debug, debug_1284
    rx2134_cur."!cursor_debug"("PASS", "multi_declarator:sym<multi>", " at pos=", rx2134_pos)
  debug_1284:
    .return (rx2134_cur)
  rx2134_restart:
.annotate 'line', 436
    if_null rx2134_debug, debug_1285
    rx2134_cur."!cursor_debug"("NEXT", "multi_declarator:sym<multi>")
  debug_1285:
  rx2134_fail:
    (rx2134_rep, rx2134_pos, $I10, $P10) = rx2134_cur."!mark_fail"(0)
    lt rx2134_pos, -1, rx2134_done
    eq rx2134_pos, -1, rx2134_fail
    jump $I10
  rx2134_done:
    rx2134_cur."!cursor_fail"()
    if_null rx2134_debug, debug_1286
    rx2134_cur."!cursor_debug"("FAIL", "multi_declarator:sym<multi>")
  debug_1286:
    .return (rx2134_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator:sym<multi>"  :subid("220_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2140 = self."!PREFIX__!subrule"("ws", "multi")
    new $P2141, "ResizablePMCArray"
    push $P2141, $P2140
    .return ($P2141)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<proto>"  :subid("221_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 891
    new $P2143, "Undef"
    .lex "$*MULTINESS", $P2143
.annotate 'line', 436
    .local string rx2144_tgt
    .local int rx2144_pos
    .local int rx2144_off
    .local int rx2144_eos
    .local int rx2144_rep
    .local pmc rx2144_cur
    .local pmc rx2144_debug
    (rx2144_cur, rx2144_pos, rx2144_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2144_cur
    .local pmc match
    .lex "$/", match
    length rx2144_eos, rx2144_tgt
    gt rx2144_pos, rx2144_eos, rx2144_done
    set rx2144_off, 0
    lt rx2144_pos, 2, rx2144_start
    sub rx2144_off, rx2144_pos, 1
    substr rx2144_tgt, rx2144_tgt, rx2144_off
  rx2144_start:
    eq $I10, 1, rx2144_restart
    if_null rx2144_debug, debug_1287
    rx2144_cur."!cursor_debug"("START", "multi_declarator:sym<proto>")
  debug_1287:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2145_done
    goto rxscan2145_scan
  rxscan2145_loop:
    (rx2144_pos) = rx2144_cur."from"()
    inc rx2144_pos
    rx2144_cur."!cursor_from"(rx2144_pos)
    ge rx2144_pos, rx2144_eos, rxscan2145_done
  rxscan2145_scan:
    set_addr $I10, rxscan2145_loop
    rx2144_cur."!mark_push"(0, rx2144_pos, $I10)
  rxscan2145_done:
.annotate 'line', 891
    rx2144_cur."!cursor_pos"(rx2144_pos)
    new $P2146, "String"
    assign $P2146, "proto"
    store_lex "$*MULTINESS", $P2146
.annotate 'line', 892
  # rx subcapture "sym"
    set_addr $I10, rxcap_2147_fail
    rx2144_cur."!mark_push"(0, rx2144_pos, $I10)
  # rx literal  "proto"
    add $I11, rx2144_pos, 5
    gt $I11, rx2144_eos, rx2144_fail
    sub $I11, rx2144_pos, rx2144_off
    substr $S10, rx2144_tgt, $I11, 5
    ne $S10, "proto", rx2144_fail
    add rx2144_pos, 5
    set_addr $I10, rxcap_2147_fail
    ($I12, $I11) = rx2144_cur."!mark_peek"($I10)
    rx2144_cur."!cursor_pos"($I11)
    ($P10) = rx2144_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2144_pos, "")
    rx2144_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2147_done
  rxcap_2147_fail:
    goto rx2144_fail
  rxcap_2147_done:
.annotate 'line', 893
  # rx subrule "ws" subtype=method negate=
    rx2144_cur."!cursor_pos"(rx2144_pos)
    $P10 = rx2144_cur."ws"()
    unless $P10, rx2144_fail
    rx2144_pos = $P10."pos"()
  alt2148_0:
    set_addr $I10, alt2148_1
    rx2144_cur."!mark_push"(0, rx2144_pos, $I10)
  # rx subrule "declarator" subtype=capture negate=
    rx2144_cur."!cursor_pos"(rx2144_pos)
    $P10 = rx2144_cur."declarator"()
    unless $P10, rx2144_fail
    rx2144_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx2144_pos = $P10."pos"()
    goto alt2148_end
  alt2148_1:
    set_addr $I10, alt2148_2
    rx2144_cur."!mark_push"(0, rx2144_pos, $I10)
  # rx subrule "routine_def" subtype=capture negate=
    rx2144_cur."!cursor_pos"(rx2144_pos)
    $P10 = rx2144_cur."routine_def"()
    unless $P10, rx2144_fail
    rx2144_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("routine_def")
    rx2144_pos = $P10."pos"()
    goto alt2148_end
  alt2148_2:
  # rx subrule "panic" subtype=method negate=
    rx2144_cur."!cursor_pos"(rx2144_pos)
    $P10 = rx2144_cur."panic"("Malformed proto")
    unless $P10, rx2144_fail
    rx2144_pos = $P10."pos"()
  alt2148_end:
.annotate 'line', 890
  # rx pass
    rx2144_cur."!cursor_pass"(rx2144_pos, "multi_declarator:sym<proto>")
    if_null rx2144_debug, debug_1288
    rx2144_cur."!cursor_debug"("PASS", "multi_declarator:sym<proto>", " at pos=", rx2144_pos)
  debug_1288:
    .return (rx2144_cur)
  rx2144_restart:
.annotate 'line', 436
    if_null rx2144_debug, debug_1289
    rx2144_cur."!cursor_debug"("NEXT", "multi_declarator:sym<proto>")
  debug_1289:
  rx2144_fail:
    (rx2144_rep, rx2144_pos, $I10, $P10) = rx2144_cur."!mark_fail"(0)
    lt rx2144_pos, -1, rx2144_done
    eq rx2144_pos, -1, rx2144_fail
    jump $I10
  rx2144_done:
    rx2144_cur."!cursor_fail"()
    if_null rx2144_debug, debug_1290
    rx2144_cur."!cursor_debug"("FAIL", "multi_declarator:sym<proto>")
  debug_1290:
    .return (rx2144_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator:sym<proto>"  :subid("222_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2150 = self."!PREFIX__!subrule"("ws", "proto")
    new $P2151, "ResizablePMCArray"
    push $P2151, $P2150
    .return ($P2151)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "multi_declarator:sym<null>"  :subid("223_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 896
    new $P2153, "Undef"
    .lex "$*MULTINESS", $P2153
.annotate 'line', 436
    .local string rx2154_tgt
    .local int rx2154_pos
    .local int rx2154_off
    .local int rx2154_eos
    .local int rx2154_rep
    .local pmc rx2154_cur
    .local pmc rx2154_debug
    (rx2154_cur, rx2154_pos, rx2154_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2154_cur
    .local pmc match
    .lex "$/", match
    length rx2154_eos, rx2154_tgt
    gt rx2154_pos, rx2154_eos, rx2154_done
    set rx2154_off, 0
    lt rx2154_pos, 2, rx2154_start
    sub rx2154_off, rx2154_pos, 1
    substr rx2154_tgt, rx2154_tgt, rx2154_off
  rx2154_start:
    eq $I10, 1, rx2154_restart
    if_null rx2154_debug, debug_1291
    rx2154_cur."!cursor_debug"("START", "multi_declarator:sym<null>")
  debug_1291:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2155_done
    goto rxscan2155_scan
  rxscan2155_loop:
    (rx2154_pos) = rx2154_cur."from"()
    inc rx2154_pos
    rx2154_cur."!cursor_from"(rx2154_pos)
    ge rx2154_pos, rx2154_eos, rxscan2155_done
  rxscan2155_scan:
    set_addr $I10, rxscan2155_loop
    rx2154_cur."!mark_push"(0, rx2154_pos, $I10)
  rxscan2155_done:
.annotate 'line', 896
    rx2154_cur."!cursor_pos"(rx2154_pos)
    new $P2156, "String"
    assign $P2156, ""
    store_lex "$*MULTINESS", $P2156
.annotate 'line', 897
  # rx subrule "declarator" subtype=capture negate=
    rx2154_cur."!cursor_pos"(rx2154_pos)
    $P10 = rx2154_cur."declarator"()
    unless $P10, rx2154_fail
    rx2154_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("declarator")
    rx2154_pos = $P10."pos"()
.annotate 'line', 895
  # rx pass
    rx2154_cur."!cursor_pass"(rx2154_pos, "multi_declarator:sym<null>")
    if_null rx2154_debug, debug_1292
    rx2154_cur."!cursor_debug"("PASS", "multi_declarator:sym<null>", " at pos=", rx2154_pos)
  debug_1292:
    .return (rx2154_cur)
  rx2154_restart:
.annotate 'line', 436
    if_null rx2154_debug, debug_1293
    rx2154_cur."!cursor_debug"("NEXT", "multi_declarator:sym<null>")
  debug_1293:
  rx2154_fail:
    (rx2154_rep, rx2154_pos, $I10, $P10) = rx2154_cur."!mark_fail"(0)
    lt rx2154_pos, -1, rx2154_done
    eq rx2154_pos, -1, rx2154_fail
    jump $I10
  rx2154_done:
    rx2154_cur."!cursor_fail"()
    if_null rx2154_debug, debug_1294
    rx2154_cur."!cursor_debug"("FAIL", "multi_declarator:sym<null>")
  debug_1294:
    .return (rx2154_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__multi_declarator:sym<null>"  :subid("224_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2158 = self."!PREFIX__!subrule"("declarator", "")
    new $P2159, "ResizablePMCArray"
    push $P2159, $P2158
    .return ($P2159)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "signature"  :subid("225_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .const 'Sub' $P2167 = "226_1307835824.98345" 
    capture_lex $P2167
    .local string rx2161_tgt
    .local int rx2161_pos
    .local int rx2161_off
    .local int rx2161_eos
    .local int rx2161_rep
    .local pmc rx2161_cur
    .local pmc rx2161_debug
    (rx2161_cur, rx2161_pos, rx2161_tgt, $I10) = self."!cursor_start"()
    rx2161_cur."!cursor_caparray"("invocant", "parameter")
    .lex unicode:"$\x{a2}", rx2161_cur
    .local pmc match
    .lex "$/", match
    length rx2161_eos, rx2161_tgt
    gt rx2161_pos, rx2161_eos, rx2161_done
    set rx2161_off, 0
    lt rx2161_pos, 2, rx2161_start
    sub rx2161_off, rx2161_pos, 1
    substr rx2161_tgt, rx2161_tgt, rx2161_off
  rx2161_start:
    eq $I10, 1, rx2161_restart
    if_null rx2161_debug, debug_1295
    rx2161_cur."!cursor_debug"("START", "signature")
  debug_1295:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2162_done
    goto rxscan2162_scan
  rxscan2162_loop:
    (rx2161_pos) = rx2161_cur."from"()
    inc rx2161_pos
    rx2161_cur."!cursor_from"(rx2161_pos)
    ge rx2161_pos, rx2161_eos, rxscan2162_done
  rxscan2162_scan:
    set_addr $I10, rxscan2162_loop
    rx2161_cur."!mark_push"(0, rx2161_pos, $I10)
  rxscan2162_done:
.annotate 'line', 901
  # rx rxquantr2163 ** 0..1
    set_addr $I10, rxquantr2163_done
    rx2161_cur."!mark_push"(0, rx2161_pos, $I10)
  rxquantr2163_loop:
    rx2161_cur."!cursor_pos"(rx2161_pos)
    find_lex $P2164, unicode:"$\x{a2}"
    $P2165 = $P2164."MATCH"()
    store_lex "$/", $P2165
    .const 'Sub' $P2167 = "226_1307835824.98345" 
    capture_lex $P2167
    $P2171 = $P2167()
    unless $P2171, rx2161_fail
  # rx subrule "ws" subtype=method negate=
    rx2161_cur."!cursor_pos"(rx2161_pos)
    $P10 = rx2161_cur."ws"()
    unless $P10, rx2161_fail
    rx2161_pos = $P10."pos"()
  # rx subrule "parameter" subtype=capture negate=
    rx2161_cur."!cursor_pos"(rx2161_pos)
    $P10 = rx2161_cur."parameter"()
    unless $P10, rx2161_fail
    rx2161_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("invocant")
    rx2161_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2161_cur."!cursor_pos"(rx2161_pos)
    $P10 = rx2161_cur."ws"()
    unless $P10, rx2161_fail
    rx2161_pos = $P10."pos"()
  # rx literal  ":"
    add $I11, rx2161_pos, 1
    gt $I11, rx2161_eos, rx2161_fail
    sub $I11, rx2161_pos, rx2161_off
    ord $I11, rx2161_tgt, $I11
    ne $I11, 58, rx2161_fail
    add rx2161_pos, 1
    set_addr $I10, rxquantr2163_done
    (rx2161_rep) = rx2161_cur."!mark_commit"($I10)
  rxquantr2163_done:
.annotate 'line', 902
  # rx rxquantr2172 ** 0..1
    set_addr $I10, rxquantr2172_done
    rx2161_cur."!mark_push"(0, rx2161_pos, $I10)
  rxquantr2172_loop:
  # rx rxquantr2173 ** 1..*
    set_addr $I10, rxquantr2173_done
    rx2161_cur."!mark_push"(0, -1, $I10)
  rxquantr2173_loop:
  # rx subrule "ws" subtype=method negate=
    rx2161_cur."!cursor_pos"(rx2161_pos)
    $P10 = rx2161_cur."ws"()
    unless $P10, rx2161_fail
    rx2161_pos = $P10."pos"()
  # rx subrule "parameter" subtype=capture negate=
    rx2161_cur."!cursor_pos"(rx2161_pos)
    $P10 = rx2161_cur."parameter"()
    unless $P10, rx2161_fail
    rx2161_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("parameter")
    rx2161_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2161_cur."!cursor_pos"(rx2161_pos)
    $P10 = rx2161_cur."ws"()
    unless $P10, rx2161_fail
    rx2161_pos = $P10."pos"()
    set_addr $I10, rxquantr2173_done
    (rx2161_rep) = rx2161_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr2173_done
    rx2161_cur."!mark_push"(rx2161_rep, rx2161_pos, $I10)
  # rx literal  ","
    add $I11, rx2161_pos, 1
    gt $I11, rx2161_eos, rx2161_fail
    sub $I11, rx2161_pos, rx2161_off
    ord $I11, rx2161_tgt, $I11
    ne $I11, 44, rx2161_fail
    add rx2161_pos, 1
    goto rxquantr2173_loop
  rxquantr2173_done:
    set_addr $I10, rxquantr2172_done
    (rx2161_rep) = rx2161_cur."!mark_commit"($I10)
  rxquantr2172_done:
.annotate 'line', 900
  # rx pass
    rx2161_cur."!cursor_pass"(rx2161_pos, "signature")
    if_null rx2161_debug, debug_1298
    rx2161_cur."!cursor_debug"("PASS", "signature", " at pos=", rx2161_pos)
  debug_1298:
    .return (rx2161_cur)
  rx2161_restart:
.annotate 'line', 436
    if_null rx2161_debug, debug_1299
    rx2161_cur."!cursor_debug"("NEXT", "signature")
  debug_1299:
  rx2161_fail:
    (rx2161_rep, rx2161_pos, $I10, $P10) = rx2161_cur."!mark_fail"(0)
    lt rx2161_pos, -1, rx2161_done
    eq rx2161_pos, -1, rx2161_fail
    jump $I10
  rx2161_done:
    rx2161_cur."!cursor_fail"()
    if_null rx2161_debug, debug_1300
    rx2161_cur."!cursor_debug"("FAIL", "signature")
  debug_1300:
    .return (rx2161_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2166"  :anon :subid("226_1307835824.98345") :outer("225_1307835824.98345")
.annotate 'line', 901
    find_dynamic_lex $P2170, "$*INVOCANT_OK"
    unless_null $P2170, vivify_1296
    get_hll_global $P2168, "GLOBAL"
    get_who $P2169, $P2168
    set $P2170, $P2169["$INVOCANT_OK"]
    unless_null $P2170, vivify_1297
    die "Contextual $*INVOCANT_OK not found"
  vivify_1297:
  vivify_1296:
    .return ($P2170)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__signature"  :subid("227_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2175, "ResizablePMCArray"
    push $P2175, ""
    .return ($P2175)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "parameter"  :subid("228_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2177_tgt
    .local int rx2177_pos
    .local int rx2177_off
    .local int rx2177_eos
    .local int rx2177_rep
    .local pmc rx2177_cur
    .local pmc rx2177_debug
    (rx2177_cur, rx2177_pos, rx2177_tgt, $I10) = self."!cursor_start"()
    rx2177_cur."!cursor_caparray"("typename", "definedness", "default_value")
    .lex unicode:"$\x{a2}", rx2177_cur
    .local pmc match
    .lex "$/", match
    length rx2177_eos, rx2177_tgt
    gt rx2177_pos, rx2177_eos, rx2177_done
    set rx2177_off, 0
    lt rx2177_pos, 2, rx2177_start
    sub rx2177_off, rx2177_pos, 1
    substr rx2177_tgt, rx2177_tgt, rx2177_off
  rx2177_start:
    eq $I10, 1, rx2177_restart
    if_null rx2177_debug, debug_1301
    rx2177_cur."!cursor_debug"("START", "parameter")
  debug_1301:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2178_done
    goto rxscan2178_scan
  rxscan2178_loop:
    (rx2177_pos) = rx2177_cur."from"()
    inc rx2177_pos
    rx2177_cur."!cursor_from"(rx2177_pos)
    ge rx2177_pos, rx2177_eos, rxscan2178_done
  rxscan2178_scan:
    set_addr $I10, rxscan2178_loop
    rx2177_cur."!mark_push"(0, rx2177_pos, $I10)
  rxscan2178_done:
.annotate 'line', 906
  # rx rxquantr2179 ** 0..*
    set_addr $I10, rxquantr2179_done
    rx2177_cur."!mark_push"(0, rx2177_pos, $I10)
  rxquantr2179_loop:
  # rx subrule "typename" subtype=capture negate=
    rx2177_cur."!cursor_pos"(rx2177_pos)
    $P10 = rx2177_cur."typename"()
    unless $P10, rx2177_fail
    rx2177_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("typename")
    rx2177_pos = $P10."pos"()
  # rx rxquantr2180 ** 0..1
    set_addr $I10, rxquantr2180_done
    rx2177_cur."!mark_push"(0, rx2177_pos, $I10)
  rxquantr2180_loop:
  # rx literal  ":"
    add $I11, rx2177_pos, 1
    gt $I11, rx2177_eos, rx2177_fail
    sub $I11, rx2177_pos, rx2177_off
    ord $I11, rx2177_tgt, $I11
    ne $I11, 58, rx2177_fail
    add rx2177_pos, 1
  # rx subcapture "definedness"
    set_addr $I10, rxcap_2181_fail
    rx2177_cur."!mark_push"(0, rx2177_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx2177_pos, rx2177_eos, rx2177_fail
    sub $I10, rx2177_pos, rx2177_off
    substr $S10, rx2177_tgt, $I10, 1
    index $I11, "_DU", $S10
    lt $I11, 0, rx2177_fail
    inc rx2177_pos
    set_addr $I10, rxcap_2181_fail
    ($I12, $I11) = rx2177_cur."!mark_peek"($I10)
    rx2177_cur."!cursor_pos"($I11)
    ($P10) = rx2177_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2177_pos, "")
    rx2177_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("definedness")
    goto rxcap_2181_done
  rxcap_2181_fail:
    goto rx2177_fail
  rxcap_2181_done:
    set_addr $I10, rxquantr2180_done
    (rx2177_rep) = rx2177_cur."!mark_commit"($I10)
  rxquantr2180_done:
  # rx subrule "ws" subtype=method negate=
    rx2177_cur."!cursor_pos"(rx2177_pos)
    $P10 = rx2177_cur."ws"()
    unless $P10, rx2177_fail
    rx2177_pos = $P10."pos"()
    set_addr $I10, rxquantr2179_done
    (rx2177_rep) = rx2177_cur."!mark_commit"($I10)
    set_addr $I10, rxquantr2179_done
    rx2177_cur."!mark_push"(rx2177_rep, rx2177_pos, $I10)
    goto rxquantr2179_loop
  rxquantr2179_done:
  alt2182_0:
.annotate 'line', 907
    set_addr $I10, alt2182_1
    rx2177_cur."!mark_push"(0, rx2177_pos, $I10)
.annotate 'line', 908
  # rx subcapture "quant"
    set_addr $I10, rxcap_2183_fail
    rx2177_cur."!mark_push"(0, rx2177_pos, $I10)
  # rx literal  "*"
    add $I11, rx2177_pos, 1
    gt $I11, rx2177_eos, rx2177_fail
    sub $I11, rx2177_pos, rx2177_off
    ord $I11, rx2177_tgt, $I11
    ne $I11, 42, rx2177_fail
    add rx2177_pos, 1
    set_addr $I10, rxcap_2183_fail
    ($I12, $I11) = rx2177_cur."!mark_peek"($I10)
    rx2177_cur."!cursor_pos"($I11)
    ($P10) = rx2177_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2177_pos, "")
    rx2177_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quant")
    goto rxcap_2183_done
  rxcap_2183_fail:
    goto rx2177_fail
  rxcap_2183_done:
  # rx subrule "param_var" subtype=capture negate=
    rx2177_cur."!cursor_pos"(rx2177_pos)
    $P10 = rx2177_cur."param_var"()
    unless $P10, rx2177_fail
    rx2177_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("param_var")
    rx2177_pos = $P10."pos"()
    goto alt2182_end
  alt2182_1:
  alt2184_0:
.annotate 'line', 909
    set_addr $I10, alt2184_1
    rx2177_cur."!mark_push"(0, rx2177_pos, $I10)
  # rx subrule "param_var" subtype=capture negate=
    rx2177_cur."!cursor_pos"(rx2177_pos)
    $P10 = rx2177_cur."param_var"()
    unless $P10, rx2177_fail
    rx2177_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("param_var")
    rx2177_pos = $P10."pos"()
    goto alt2184_end
  alt2184_1:
  # rx subrule "named_param" subtype=capture negate=
    rx2177_cur."!cursor_pos"(rx2177_pos)
    $P10 = rx2177_cur."named_param"()
    unless $P10, rx2177_fail
    rx2177_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("named_param")
    rx2177_pos = $P10."pos"()
  alt2184_end:
  # rx subcapture "quant"
    set_addr $I10, rxcap_2186_fail
    rx2177_cur."!mark_push"(0, rx2177_pos, $I10)
  alt2185_0:
    set_addr $I10, alt2185_1
    rx2177_cur."!mark_push"(0, rx2177_pos, $I10)
  # rx literal  "?"
    add $I11, rx2177_pos, 1
    gt $I11, rx2177_eos, rx2177_fail
    sub $I11, rx2177_pos, rx2177_off
    ord $I11, rx2177_tgt, $I11
    ne $I11, 63, rx2177_fail
    add rx2177_pos, 1
    goto alt2185_end
  alt2185_1:
    set_addr $I10, alt2185_2
    rx2177_cur."!mark_push"(0, rx2177_pos, $I10)
  # rx literal  "!"
    add $I11, rx2177_pos, 1
    gt $I11, rx2177_eos, rx2177_fail
    sub $I11, rx2177_pos, rx2177_off
    ord $I11, rx2177_tgt, $I11
    ne $I11, 33, rx2177_fail
    add rx2177_pos, 1
    goto alt2185_end
  alt2185_2:
  alt2185_end:
    set_addr $I10, rxcap_2186_fail
    ($I12, $I11) = rx2177_cur."!mark_peek"($I10)
    rx2177_cur."!cursor_pos"($I11)
    ($P10) = rx2177_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2177_pos, "")
    rx2177_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quant")
    goto rxcap_2186_done
  rxcap_2186_fail:
    goto rx2177_fail
  rxcap_2186_done:
  alt2182_end:
.annotate 'line', 911
  # rx rxquantr2187 ** 0..1
    set_addr $I10, rxquantr2187_done
    rx2177_cur."!mark_push"(0, rx2177_pos, $I10)
  rxquantr2187_loop:
  # rx subrule "default_value" subtype=capture negate=
    rx2177_cur."!cursor_pos"(rx2177_pos)
    $P10 = rx2177_cur."default_value"()
    unless $P10, rx2177_fail
    goto rxsubrule2188_pass
  rxsubrule2188_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2177_fail
  rxsubrule2188_pass:
    set_addr $I10, rxsubrule2188_back
    rx2177_cur."!mark_push"(0, rx2177_pos, $I10, $P10)
    $P10."!cursor_names"("default_value")
    rx2177_pos = $P10."pos"()
    set_addr $I10, rxquantr2187_done
    (rx2177_rep) = rx2177_cur."!mark_commit"($I10)
  rxquantr2187_done:
.annotate 'line', 905
  # rx pass
    rx2177_cur."!cursor_pass"(rx2177_pos, "parameter")
    if_null rx2177_debug, debug_1302
    rx2177_cur."!cursor_debug"("PASS", "parameter", " at pos=", rx2177_pos)
  debug_1302:
    .return (rx2177_cur)
  rx2177_restart:
.annotate 'line', 436
    if_null rx2177_debug, debug_1303
    rx2177_cur."!cursor_debug"("NEXT", "parameter")
  debug_1303:
  rx2177_fail:
    (rx2177_rep, rx2177_pos, $I10, $P10) = rx2177_cur."!mark_fail"(0)
    lt rx2177_pos, -1, rx2177_done
    eq rx2177_pos, -1, rx2177_fail
    jump $I10
  rx2177_done:
    rx2177_cur."!cursor_fail"()
    if_null rx2177_debug, debug_1304
    rx2177_cur."!cursor_debug"("FAIL", "parameter")
  debug_1304:
    .return (rx2177_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__parameter"  :subid("229_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2190, "ResizablePMCArray"
    push $P2190, ""
    .return ($P2190)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "param_var"  :subid("230_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2192_tgt
    .local int rx2192_pos
    .local int rx2192_off
    .local int rx2192_eos
    .local int rx2192_rep
    .local pmc rx2192_cur
    .local pmc rx2192_debug
    (rx2192_cur, rx2192_pos, rx2192_tgt, $I10) = self."!cursor_start"()
    rx2192_cur."!cursor_caparray"("twigil")
    .lex unicode:"$\x{a2}", rx2192_cur
    .local pmc match
    .lex "$/", match
    length rx2192_eos, rx2192_tgt
    gt rx2192_pos, rx2192_eos, rx2192_done
    set rx2192_off, 0
    lt rx2192_pos, 2, rx2192_start
    sub rx2192_off, rx2192_pos, 1
    substr rx2192_tgt, rx2192_tgt, rx2192_off
  rx2192_start:
    eq $I10, 1, rx2192_restart
    if_null rx2192_debug, debug_1305
    rx2192_cur."!cursor_debug"("START", "param_var")
  debug_1305:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2193_done
    goto rxscan2193_scan
  rxscan2193_loop:
    (rx2192_pos) = rx2192_cur."from"()
    inc rx2192_pos
    rx2192_cur."!cursor_from"(rx2192_pos)
    ge rx2192_pos, rx2192_eos, rxscan2193_done
  rxscan2193_scan:
    set_addr $I10, rxscan2193_loop
    rx2192_cur."!mark_push"(0, rx2192_pos, $I10)
  rxscan2193_done:
.annotate 'line', 915
  # rx subrule "sigil" subtype=capture negate=
    rx2192_cur."!cursor_pos"(rx2192_pos)
    $P10 = rx2192_cur."sigil"()
    unless $P10, rx2192_fail
    rx2192_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx2192_pos = $P10."pos"()
  # rx rxquantr2194 ** 0..1
    set_addr $I10, rxquantr2194_done
    rx2192_cur."!mark_push"(0, rx2192_pos, $I10)
  rxquantr2194_loop:
  # rx subrule "twigil" subtype=capture negate=
    rx2192_cur."!cursor_pos"(rx2192_pos)
    $P10 = rx2192_cur."twigil"()
    unless $P10, rx2192_fail
    goto rxsubrule2195_pass
  rxsubrule2195_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2192_fail
  rxsubrule2195_pass:
    set_addr $I10, rxsubrule2195_back
    rx2192_cur."!mark_push"(0, rx2192_pos, $I10, $P10)
    $P10."!cursor_names"("twigil")
    rx2192_pos = $P10."pos"()
    set_addr $I10, rxquantr2194_done
    (rx2192_rep) = rx2192_cur."!mark_commit"($I10)
  rxquantr2194_done:
  alt2196_0:
.annotate 'line', 916
    set_addr $I10, alt2196_1
    rx2192_cur."!mark_push"(0, rx2192_pos, $I10)
  # rx subrule "ident" subtype=capture negate=
    rx2192_cur."!cursor_pos"(rx2192_pos)
    $P10 = rx2192_cur."ident"()
    unless $P10, rx2192_fail
    rx2192_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx2192_pos = $P10."pos"()
    goto alt2196_end
  alt2196_1:
  # rx subcapture "name"
    set_addr $I10, rxcap_2197_fail
    rx2192_cur."!mark_push"(0, rx2192_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx2192_pos, rx2192_eos, rx2192_fail
    sub $I10, rx2192_pos, rx2192_off
    substr $S10, rx2192_tgt, $I10, 1
    index $I11, "/!", $S10
    lt $I11, 0, rx2192_fail
    inc rx2192_pos
    set_addr $I10, rxcap_2197_fail
    ($I12, $I11) = rx2192_cur."!mark_peek"($I10)
    rx2192_cur."!cursor_pos"($I11)
    ($P10) = rx2192_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2192_pos, "")
    rx2192_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    goto rxcap_2197_done
  rxcap_2197_fail:
    goto rx2192_fail
  rxcap_2197_done:
  alt2196_end:
.annotate 'line', 914
  # rx pass
    rx2192_cur."!cursor_pass"(rx2192_pos, "param_var")
    if_null rx2192_debug, debug_1306
    rx2192_cur."!cursor_debug"("PASS", "param_var", " at pos=", rx2192_pos)
  debug_1306:
    .return (rx2192_cur)
  rx2192_restart:
.annotate 'line', 436
    if_null rx2192_debug, debug_1307
    rx2192_cur."!cursor_debug"("NEXT", "param_var")
  debug_1307:
  rx2192_fail:
    (rx2192_rep, rx2192_pos, $I10, $P10) = rx2192_cur."!mark_fail"(0)
    lt rx2192_pos, -1, rx2192_done
    eq rx2192_pos, -1, rx2192_fail
    jump $I10
  rx2192_done:
    rx2192_cur."!cursor_fail"()
    if_null rx2192_debug, debug_1308
    rx2192_cur."!cursor_debug"("FAIL", "param_var")
  debug_1308:
    .return (rx2192_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__param_var"  :subid("231_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2199 = self."!PREFIX__!subrule"("sigil", "")
    new $P2200, "ResizablePMCArray"
    push $P2200, $P2199
    .return ($P2200)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "named_param"  :subid("232_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2202_tgt
    .local int rx2202_pos
    .local int rx2202_off
    .local int rx2202_eos
    .local int rx2202_rep
    .local pmc rx2202_cur
    .local pmc rx2202_debug
    (rx2202_cur, rx2202_pos, rx2202_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2202_cur
    .local pmc match
    .lex "$/", match
    length rx2202_eos, rx2202_tgt
    gt rx2202_pos, rx2202_eos, rx2202_done
    set rx2202_off, 0
    lt rx2202_pos, 2, rx2202_start
    sub rx2202_off, rx2202_pos, 1
    substr rx2202_tgt, rx2202_tgt, rx2202_off
  rx2202_start:
    eq $I10, 1, rx2202_restart
    if_null rx2202_debug, debug_1309
    rx2202_cur."!cursor_debug"("START", "named_param")
  debug_1309:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2203_done
    goto rxscan2203_scan
  rxscan2203_loop:
    (rx2202_pos) = rx2202_cur."from"()
    inc rx2202_pos
    rx2202_cur."!cursor_from"(rx2202_pos)
    ge rx2202_pos, rx2202_eos, rxscan2203_done
  rxscan2203_scan:
    set_addr $I10, rxscan2203_loop
    rx2202_cur."!mark_push"(0, rx2202_pos, $I10)
  rxscan2203_done:
.annotate 'line', 920
  # rx literal  ":"
    add $I11, rx2202_pos, 1
    gt $I11, rx2202_eos, rx2202_fail
    sub $I11, rx2202_pos, rx2202_off
    ord $I11, rx2202_tgt, $I11
    ne $I11, 58, rx2202_fail
    add rx2202_pos, 1
  # rx subrule "param_var" subtype=capture negate=
    rx2202_cur."!cursor_pos"(rx2202_pos)
    $P10 = rx2202_cur."param_var"()
    unless $P10, rx2202_fail
    rx2202_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("param_var")
    rx2202_pos = $P10."pos"()
.annotate 'line', 919
  # rx pass
    rx2202_cur."!cursor_pass"(rx2202_pos, "named_param")
    if_null rx2202_debug, debug_1310
    rx2202_cur."!cursor_debug"("PASS", "named_param", " at pos=", rx2202_pos)
  debug_1310:
    .return (rx2202_cur)
  rx2202_restart:
.annotate 'line', 436
    if_null rx2202_debug, debug_1311
    rx2202_cur."!cursor_debug"("NEXT", "named_param")
  debug_1311:
  rx2202_fail:
    (rx2202_rep, rx2202_pos, $I10, $P10) = rx2202_cur."!mark_fail"(0)
    lt rx2202_pos, -1, rx2202_done
    eq rx2202_pos, -1, rx2202_fail
    jump $I10
  rx2202_done:
    rx2202_cur."!cursor_fail"()
    if_null rx2202_debug, debug_1312
    rx2202_cur."!cursor_debug"("FAIL", "named_param")
  debug_1312:
    .return (rx2202_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__named_param"  :subid("233_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2205 = self."!PREFIX__!subrule"("param_var", ":")
    new $P2206, "ResizablePMCArray"
    push $P2206, $P2205
    .return ($P2206)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "default_value"  :subid("234_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2208_tgt
    .local int rx2208_pos
    .local int rx2208_off
    .local int rx2208_eos
    .local int rx2208_rep
    .local pmc rx2208_cur
    .local pmc rx2208_debug
    (rx2208_cur, rx2208_pos, rx2208_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2208_cur
    .local pmc match
    .lex "$/", match
    length rx2208_eos, rx2208_tgt
    gt rx2208_pos, rx2208_eos, rx2208_done
    set rx2208_off, 0
    lt rx2208_pos, 2, rx2208_start
    sub rx2208_off, rx2208_pos, 1
    substr rx2208_tgt, rx2208_tgt, rx2208_off
  rx2208_start:
    eq $I10, 1, rx2208_restart
    if_null rx2208_debug, debug_1313
    rx2208_cur."!cursor_debug"("START", "default_value")
  debug_1313:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2209_done
    goto rxscan2209_scan
  rxscan2209_loop:
    (rx2208_pos) = rx2208_cur."from"()
    inc rx2208_pos
    rx2208_cur."!cursor_from"(rx2208_pos)
    ge rx2208_pos, rx2208_eos, rxscan2209_done
  rxscan2209_scan:
    set_addr $I10, rxscan2209_loop
    rx2208_cur."!mark_push"(0, rx2208_pos, $I10)
  rxscan2209_done:
.annotate 'line', 923
  # rx subrule "ws" subtype=method negate=
    rx2208_cur."!cursor_pos"(rx2208_pos)
    $P10 = rx2208_cur."ws"()
    unless $P10, rx2208_fail
    rx2208_pos = $P10."pos"()
  # rx literal  "="
    add $I11, rx2208_pos, 1
    gt $I11, rx2208_eos, rx2208_fail
    sub $I11, rx2208_pos, rx2208_off
    ord $I11, rx2208_tgt, $I11
    ne $I11, 61, rx2208_fail
    add rx2208_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2208_cur."!cursor_pos"(rx2208_pos)
    $P10 = rx2208_cur."ws"()
    unless $P10, rx2208_fail
    rx2208_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx2208_cur."!cursor_pos"(rx2208_pos)
    $P10 = rx2208_cur."EXPR"("i=")
    unless $P10, rx2208_fail
    rx2208_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx2208_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2208_cur."!cursor_pos"(rx2208_pos)
    $P10 = rx2208_cur."ws"()
    unless $P10, rx2208_fail
    rx2208_pos = $P10."pos"()
  # rx pass
    rx2208_cur."!cursor_pass"(rx2208_pos, "default_value")
    if_null rx2208_debug, debug_1314
    rx2208_cur."!cursor_debug"("PASS", "default_value", " at pos=", rx2208_pos)
  debug_1314:
    .return (rx2208_cur)
  rx2208_restart:
.annotate 'line', 436
    if_null rx2208_debug, debug_1315
    rx2208_cur."!cursor_debug"("NEXT", "default_value")
  debug_1315:
  rx2208_fail:
    (rx2208_rep, rx2208_pos, $I10, $P10) = rx2208_cur."!mark_fail"(0)
    lt rx2208_pos, -1, rx2208_done
    eq rx2208_pos, -1, rx2208_fail
    jump $I10
  rx2208_done:
    rx2208_cur."!cursor_fail"()
    if_null rx2208_debug, debug_1316
    rx2208_cur."!cursor_debug"("FAIL", "default_value")
  debug_1316:
    .return (rx2208_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__default_value"  :subid("235_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2214 = self."!PREFIX__!subrule"("ws", "")
    new $P2215, "ResizablePMCArray"
    push $P2215, $P2214
    .return ($P2215)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait"  :subid("236_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2217_tgt
    .local int rx2217_pos
    .local int rx2217_off
    .local int rx2217_eos
    .local int rx2217_rep
    .local pmc rx2217_cur
    .local pmc rx2217_debug
    (rx2217_cur, rx2217_pos, rx2217_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2217_cur
    .local pmc match
    .lex "$/", match
    length rx2217_eos, rx2217_tgt
    gt rx2217_pos, rx2217_eos, rx2217_done
    set rx2217_off, 0
    lt rx2217_pos, 2, rx2217_start
    sub rx2217_off, rx2217_pos, 1
    substr rx2217_tgt, rx2217_tgt, rx2217_off
  rx2217_start:
    eq $I10, 1, rx2217_restart
    if_null rx2217_debug, debug_1317
    rx2217_cur."!cursor_debug"("START", "trait")
  debug_1317:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2218_done
    goto rxscan2218_scan
  rxscan2218_loop:
    (rx2217_pos) = rx2217_cur."from"()
    inc rx2217_pos
    rx2217_cur."!cursor_from"(rx2217_pos)
    ge rx2217_pos, rx2217_eos, rxscan2218_done
  rxscan2218_scan:
    set_addr $I10, rxscan2218_loop
    rx2217_cur."!mark_push"(0, rx2217_pos, $I10)
  rxscan2218_done:
.annotate 'line', 925
  # rx subrule "ws" subtype=method negate=
    rx2217_cur."!cursor_pos"(rx2217_pos)
    $P10 = rx2217_cur."ws"()
    unless $P10, rx2217_fail
    rx2217_pos = $P10."pos"()
  # rx subrule "trait_mod" subtype=capture negate=
    rx2217_cur."!cursor_pos"(rx2217_pos)
    $P10 = rx2217_cur."trait_mod"()
    unless $P10, rx2217_fail
    rx2217_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("trait_mod")
    rx2217_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2217_cur."!cursor_pos"(rx2217_pos)
    $P10 = rx2217_cur."ws"()
    unless $P10, rx2217_fail
    rx2217_pos = $P10."pos"()
  # rx pass
    rx2217_cur."!cursor_pass"(rx2217_pos, "trait")
    if_null rx2217_debug, debug_1318
    rx2217_cur."!cursor_debug"("PASS", "trait", " at pos=", rx2217_pos)
  debug_1318:
    .return (rx2217_cur)
  rx2217_restart:
.annotate 'line', 436
    if_null rx2217_debug, debug_1319
    rx2217_cur."!cursor_debug"("NEXT", "trait")
  debug_1319:
  rx2217_fail:
    (rx2217_rep, rx2217_pos, $I10, $P10) = rx2217_cur."!mark_fail"(0)
    lt rx2217_pos, -1, rx2217_done
    eq rx2217_pos, -1, rx2217_fail
    jump $I10
  rx2217_done:
    rx2217_cur."!cursor_fail"()
    if_null rx2217_debug, debug_1320
    rx2217_cur."!cursor_debug"("FAIL", "trait")
  debug_1320:
    .return (rx2217_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__trait"  :subid("237_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2222 = self."!PREFIX__!subrule"("ws", "")
    new $P2223, "ResizablePMCArray"
    push $P2223, $P2222
    .return ($P2223)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait_mod"  :subid("238_1307835824.98345")
    .param pmc param_2225
.annotate 'line', 927
    .lex "self", param_2225
    $P2226 = param_2225."!protoregex"("trait_mod")
    .return ($P2226)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__trait_mod"  :subid("239_1307835824.98345")
    .param pmc param_2228
.annotate 'line', 927
    .lex "self", param_2228
    $P2229 = param_2228."!PREFIX__!protoregex"("trait_mod")
    .return ($P2229)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "trait_mod:sym<is>"  :subid("240_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2231_tgt
    .local int rx2231_pos
    .local int rx2231_off
    .local int rx2231_eos
    .local int rx2231_rep
    .local pmc rx2231_cur
    .local pmc rx2231_debug
    (rx2231_cur, rx2231_pos, rx2231_tgt, $I10) = self."!cursor_start"()
    rx2231_cur."!cursor_caparray"("circumfix")
    .lex unicode:"$\x{a2}", rx2231_cur
    .local pmc match
    .lex "$/", match
    length rx2231_eos, rx2231_tgt
    gt rx2231_pos, rx2231_eos, rx2231_done
    set rx2231_off, 0
    lt rx2231_pos, 2, rx2231_start
    sub rx2231_off, rx2231_pos, 1
    substr rx2231_tgt, rx2231_tgt, rx2231_off
  rx2231_start:
    eq $I10, 1, rx2231_restart
    if_null rx2231_debug, debug_1321
    rx2231_cur."!cursor_debug"("START", "trait_mod:sym<is>")
  debug_1321:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2232_done
    goto rxscan2232_scan
  rxscan2232_loop:
    (rx2231_pos) = rx2231_cur."from"()
    inc rx2231_pos
    rx2231_cur."!cursor_from"(rx2231_pos)
    ge rx2231_pos, rx2231_eos, rxscan2232_done
  rxscan2232_scan:
    set_addr $I10, rxscan2232_loop
    rx2231_cur."!mark_push"(0, rx2231_pos, $I10)
  rxscan2232_done:
.annotate 'line', 928
  # rx subcapture "sym"
    set_addr $I10, rxcap_2233_fail
    rx2231_cur."!mark_push"(0, rx2231_pos, $I10)
  # rx literal  "is"
    add $I11, rx2231_pos, 2
    gt $I11, rx2231_eos, rx2231_fail
    sub $I11, rx2231_pos, rx2231_off
    substr $S10, rx2231_tgt, $I11, 2
    ne $S10, "is", rx2231_fail
    add rx2231_pos, 2
    set_addr $I10, rxcap_2233_fail
    ($I12, $I11) = rx2231_cur."!mark_peek"($I10)
    rx2231_cur."!cursor_pos"($I11)
    ($P10) = rx2231_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2231_pos, "")
    rx2231_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2233_done
  rxcap_2233_fail:
    goto rx2231_fail
  rxcap_2233_done:
  # rx subrule "ws" subtype=method negate=
    rx2231_cur."!cursor_pos"(rx2231_pos)
    $P10 = rx2231_cur."ws"()
    unless $P10, rx2231_fail
    rx2231_pos = $P10."pos"()
  # rx subrule "deflongname" subtype=capture negate=
    rx2231_cur."!cursor_pos"(rx2231_pos)
    $P10 = rx2231_cur."deflongname"()
    unless $P10, rx2231_fail
    rx2231_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("longname")
    rx2231_pos = $P10."pos"()
  # rx rxquantr2235 ** 0..1
    set_addr $I10, rxquantr2235_done
    rx2231_cur."!mark_push"(0, rx2231_pos, $I10)
  rxquantr2235_loop:
  # rx subrule "circumfix" subtype=capture negate=
    rx2231_cur."!cursor_pos"(rx2231_pos)
    $P10 = rx2231_cur."circumfix"()
    unless $P10, rx2231_fail
    goto rxsubrule2236_pass
  rxsubrule2236_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2231_fail
  rxsubrule2236_pass:
    set_addr $I10, rxsubrule2236_back
    rx2231_cur."!mark_push"(0, rx2231_pos, $I10, $P10)
    $P10."!cursor_names"("circumfix")
    rx2231_pos = $P10."pos"()
    set_addr $I10, rxquantr2235_done
    (rx2231_rep) = rx2231_cur."!mark_commit"($I10)
  rxquantr2235_done:
  # rx subrule "ws" subtype=method negate=
    rx2231_cur."!cursor_pos"(rx2231_pos)
    $P10 = rx2231_cur."ws"()
    unless $P10, rx2231_fail
    rx2231_pos = $P10."pos"()
  # rx pass
    rx2231_cur."!cursor_pass"(rx2231_pos, "trait_mod:sym<is>")
    if_null rx2231_debug, debug_1322
    rx2231_cur."!cursor_debug"("PASS", "trait_mod:sym<is>", " at pos=", rx2231_pos)
  debug_1322:
    .return (rx2231_cur)
  rx2231_restart:
.annotate 'line', 436
    if_null rx2231_debug, debug_1323
    rx2231_cur."!cursor_debug"("NEXT", "trait_mod:sym<is>")
  debug_1323:
  rx2231_fail:
    (rx2231_rep, rx2231_pos, $I10, $P10) = rx2231_cur."!mark_fail"(0)
    lt rx2231_pos, -1, rx2231_done
    eq rx2231_pos, -1, rx2231_fail
    jump $I10
  rx2231_done:
    rx2231_cur."!cursor_fail"()
    if_null rx2231_debug, debug_1324
    rx2231_cur."!cursor_debug"("FAIL", "trait_mod:sym<is>")
  debug_1324:
    .return (rx2231_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__trait_mod:sym<is>"  :subid("241_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2239 = self."!PREFIX__!subrule"("ws", "is")
    new $P2240, "ResizablePMCArray"
    push $P2240, $P2239
    .return ($P2240)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "regex_declarator"  :subid("242_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2242_tgt
    .local int rx2242_pos
    .local int rx2242_off
    .local int rx2242_eos
    .local int rx2242_rep
    .local pmc rx2242_cur
    .local pmc rx2242_debug
    (rx2242_cur, rx2242_pos, rx2242_tgt, $I10) = self."!cursor_start"()
    rx2242_cur."!cursor_caparray"("signature")
    .lex unicode:"$\x{a2}", rx2242_cur
    .local pmc match
    .lex "$/", match
    length rx2242_eos, rx2242_tgt
    gt rx2242_pos, rx2242_eos, rx2242_done
    set rx2242_off, 0
    lt rx2242_pos, 2, rx2242_start
    sub rx2242_off, rx2242_pos, 1
    substr rx2242_tgt, rx2242_tgt, rx2242_off
  rx2242_start:
    eq $I10, 1, rx2242_restart
    if_null rx2242_debug, debug_1325
    rx2242_cur."!cursor_debug"("START", "regex_declarator")
  debug_1325:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2243_done
    goto rxscan2243_scan
  rxscan2243_loop:
    (rx2242_pos) = rx2242_cur."from"()
    inc rx2242_pos
    rx2242_cur."!cursor_from"(rx2242_pos)
    ge rx2242_pos, rx2242_eos, rxscan2243_done
  rxscan2243_scan:
    set_addr $I10, rxscan2243_loop
    rx2242_cur."!mark_push"(0, rx2242_pos, $I10)
  rxscan2243_done:
.annotate 'line', 930
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
  alt2245_0:
.annotate 'line', 931
    set_addr $I10, alt2245_1
    rx2242_cur."!mark_push"(0, rx2242_pos, $I10)
.annotate 'line', 932
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
  # rx subcapture "proto"
    set_addr $I10, rxcap_2247_fail
    rx2242_cur."!mark_push"(0, rx2242_pos, $I10)
  # rx literal  "proto"
    add $I11, rx2242_pos, 5
    gt $I11, rx2242_eos, rx2242_fail
    sub $I11, rx2242_pos, rx2242_off
    substr $S10, rx2242_tgt, $I11, 5
    ne $S10, "proto", rx2242_fail
    add rx2242_pos, 5
    set_addr $I10, rxcap_2247_fail
    ($I12, $I11) = rx2242_cur."!mark_peek"($I10)
    rx2242_cur."!cursor_pos"($I11)
    ($P10) = rx2242_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2242_pos, "")
    rx2242_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("proto")
    goto rxcap_2247_done
  rxcap_2247_fail:
    goto rx2242_fail
  rxcap_2247_done:
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
  alt2249_0:
    set_addr $I10, alt2249_1
    rx2242_cur."!mark_push"(0, rx2242_pos, $I10)
  # rx literal  "regex"
    add $I11, rx2242_pos, 5
    gt $I11, rx2242_eos, rx2242_fail
    sub $I11, rx2242_pos, rx2242_off
    substr $S10, rx2242_tgt, $I11, 5
    ne $S10, "regex", rx2242_fail
    add rx2242_pos, 5
    goto alt2249_end
  alt2249_1:
    set_addr $I10, alt2249_2
    rx2242_cur."!mark_push"(0, rx2242_pos, $I10)
  # rx literal  "token"
    add $I11, rx2242_pos, 5
    gt $I11, rx2242_eos, rx2242_fail
    sub $I11, rx2242_pos, rx2242_off
    substr $S10, rx2242_tgt, $I11, 5
    ne $S10, "token", rx2242_fail
    add rx2242_pos, 5
    goto alt2249_end
  alt2249_2:
  # rx literal  "rule"
    add $I11, rx2242_pos, 4
    gt $I11, rx2242_eos, rx2242_fail
    sub $I11, rx2242_pos, rx2242_off
    substr $S10, rx2242_tgt, $I11, 4
    ne $S10, "rule", rx2242_fail
    add rx2242_pos, 4
  alt2249_end:
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
.annotate 'line', 933
  # rx subrule "deflongname" subtype=capture negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."deflongname"()
    unless $P10, rx2242_fail
    rx2242_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx2242_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
  alt2252_0:
.annotate 'line', 934
    set_addr $I10, alt2252_1
    rx2242_cur."!mark_push"(0, rx2242_pos, $I10)
.annotate 'line', 935
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
  # rx literal  "{"
    add $I11, rx2242_pos, 1
    gt $I11, rx2242_eos, rx2242_fail
    sub $I11, rx2242_pos, rx2242_off
    ord $I11, rx2242_tgt, $I11
    ne $I11, 123, rx2242_fail
    add rx2242_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
  # rx literal  "<...>"
    add $I11, rx2242_pos, 5
    gt $I11, rx2242_eos, rx2242_fail
    sub $I11, rx2242_pos, rx2242_off
    substr $S10, rx2242_tgt, $I11, 5
    ne $S10, "<...>", rx2242_fail
    add rx2242_pos, 5
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx2242_pos, 1
    gt $I11, rx2242_eos, rx2242_fail
    sub $I11, rx2242_pos, rx2242_off
    ord $I11, rx2242_tgt, $I11
    ne $I11, 125, rx2242_fail
    add rx2242_pos, 1
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ENDSTMT"()
    unless $P10, rx2242_fail
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
    goto alt2252_end
  alt2252_1:
    set_addr $I10, alt2252_2
    rx2242_cur."!mark_push"(0, rx2242_pos, $I10)
.annotate 'line', 936
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
  # rx literal  "{"
    add $I11, rx2242_pos, 1
    gt $I11, rx2242_eos, rx2242_fail
    sub $I11, rx2242_pos, rx2242_off
    ord $I11, rx2242_tgt, $I11
    ne $I11, 123, rx2242_fail
    add rx2242_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
  # rx literal  "<*>"
    add $I11, rx2242_pos, 3
    gt $I11, rx2242_eos, rx2242_fail
    sub $I11, rx2242_pos, rx2242_off
    substr $S10, rx2242_tgt, $I11, 3
    ne $S10, "<*>", rx2242_fail
    add rx2242_pos, 3
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx2242_pos, 1
    gt $I11, rx2242_eos, rx2242_fail
    sub $I11, rx2242_pos, rx2242_off
    ord $I11, rx2242_tgt, $I11
    ne $I11, 125, rx2242_fail
    add rx2242_pos, 1
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ENDSTMT"()
    unless $P10, rx2242_fail
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
    goto alt2252_end
  alt2252_2:
.annotate 'line', 937
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
  # rx subrule "panic" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."panic"("Proto regex body must be <*> (or <...>, which is deprecated)")
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
  alt2252_end:
.annotate 'line', 938
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
.annotate 'line', 932
    goto alt2245_end
  alt2245_1:
.annotate 'line', 939
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
  # rx subcapture "sym"
    set_addr $I10, rxcap_2266_fail
    rx2242_cur."!mark_push"(0, rx2242_pos, $I10)
  alt2265_0:
    set_addr $I10, alt2265_1
    rx2242_cur."!mark_push"(0, rx2242_pos, $I10)
  # rx literal  "regex"
    add $I11, rx2242_pos, 5
    gt $I11, rx2242_eos, rx2242_fail
    sub $I11, rx2242_pos, rx2242_off
    substr $S10, rx2242_tgt, $I11, 5
    ne $S10, "regex", rx2242_fail
    add rx2242_pos, 5
    goto alt2265_end
  alt2265_1:
    set_addr $I10, alt2265_2
    rx2242_cur."!mark_push"(0, rx2242_pos, $I10)
  # rx literal  "token"
    add $I11, rx2242_pos, 5
    gt $I11, rx2242_eos, rx2242_fail
    sub $I11, rx2242_pos, rx2242_off
    substr $S10, rx2242_tgt, $I11, 5
    ne $S10, "token", rx2242_fail
    add rx2242_pos, 5
    goto alt2265_end
  alt2265_2:
  # rx literal  "rule"
    add $I11, rx2242_pos, 4
    gt $I11, rx2242_eos, rx2242_fail
    sub $I11, rx2242_pos, rx2242_off
    substr $S10, rx2242_tgt, $I11, 4
    ne $S10, "rule", rx2242_fail
    add rx2242_pos, 4
  alt2265_end:
    set_addr $I10, rxcap_2266_fail
    ($I12, $I11) = rx2242_cur."!mark_peek"($I10)
    rx2242_cur."!cursor_pos"($I11)
    ($P10) = rx2242_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2242_pos, "")
    rx2242_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2266_done
  rxcap_2266_fail:
    goto rx2242_fail
  rxcap_2266_done:
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
.annotate 'line', 940
  # rx subrule "deflongname" subtype=capture negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."deflongname"()
    unless $P10, rx2242_fail
    rx2242_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx2242_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
.annotate 'line', 941
  # rx subrule "newpad" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."newpad"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
.annotate 'line', 942
  # rx rxquantr2270 ** 0..1
    set_addr $I10, rxquantr2270_done
    rx2242_cur."!mark_push"(0, rx2242_pos, $I10)
  rxquantr2270_loop:
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx2242_pos, 1
    gt $I11, rx2242_eos, rx2242_fail
    sub $I11, rx2242_pos, rx2242_off
    ord $I11, rx2242_tgt, $I11
    ne $I11, 40, rx2242_fail
    add rx2242_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
  # rx subrule "signature" subtype=capture negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."signature"()
    unless $P10, rx2242_fail
    rx2242_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("signature")
    rx2242_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx2242_pos, 1
    gt $I11, rx2242_eos, rx2242_fail
    sub $I11, rx2242_pos, rx2242_off
    ord $I11, rx2242_tgt, $I11
    ne $I11, 41, rx2242_fail
    add rx2242_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
    set_addr $I10, rxquantr2270_done
    (rx2242_rep) = rx2242_cur."!mark_commit"($I10)
  rxquantr2270_done:
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
.annotate 'line', 943
  # rx reduce name="regex_declarator" key="open"
    rx2242_cur."!cursor_pos"(rx2242_pos)
    rx2242_cur."!reduce"("regex_declarator", "open")
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
.annotate 'line', 944
  # rx literal  "{"
    add $I11, rx2242_pos, 1
    gt $I11, rx2242_eos, rx2242_fail
    sub $I11, rx2242_pos, rx2242_off
    ord $I11, rx2242_tgt, $I11
    ne $I11, 123, rx2242_fail
    add rx2242_pos, 1
  # rx subrule "LANG" subtype=capture negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."LANG"("Regex", "nibbler")
    unless $P10, rx2242_fail
    rx2242_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("p6regex")
    rx2242_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx2242_pos, 1
    gt $I11, rx2242_eos, rx2242_fail
    sub $I11, rx2242_pos, rx2242_off
    ord $I11, rx2242_tgt, $I11
    ne $I11, 125, rx2242_fail
    add rx2242_pos, 1
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ENDSTMT"()
    unless $P10, rx2242_fail
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
  alt2245_end:
.annotate 'line', 945
  # rx subrule "ws" subtype=method negate=
    rx2242_cur."!cursor_pos"(rx2242_pos)
    $P10 = rx2242_cur."ws"()
    unless $P10, rx2242_fail
    rx2242_pos = $P10."pos"()
.annotate 'line', 930
  # rx pass
    rx2242_cur."!cursor_pass"(rx2242_pos, "regex_declarator")
    if_null rx2242_debug, debug_1326
    rx2242_cur."!cursor_debug"("PASS", "regex_declarator", " at pos=", rx2242_pos)
  debug_1326:
    .return (rx2242_cur)
  rx2242_restart:
.annotate 'line', 436
    if_null rx2242_debug, debug_1327
    rx2242_cur."!cursor_debug"("NEXT", "regex_declarator")
  debug_1327:
  rx2242_fail:
    (rx2242_rep, rx2242_pos, $I10, $P10) = rx2242_cur."!mark_fail"(0)
    lt rx2242_pos, -1, rx2242_done
    eq rx2242_pos, -1, rx2242_fail
    jump $I10
  rx2242_done:
    rx2242_cur."!cursor_fail"()
    if_null rx2242_debug, debug_1328
    rx2242_cur."!cursor_debug"("FAIL", "regex_declarator")
  debug_1328:
    .return (rx2242_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__regex_declarator"  :subid("243_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2280 = self."!PREFIX__!subrule"("ws", "")
    new $P2281, "ResizablePMCArray"
    push $P2281, $P2280
    .return ($P2281)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "dotty"  :subid("244_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2283_tgt
    .local int rx2283_pos
    .local int rx2283_off
    .local int rx2283_eos
    .local int rx2283_rep
    .local pmc rx2283_cur
    .local pmc rx2283_debug
    (rx2283_cur, rx2283_pos, rx2283_tgt, $I10) = self."!cursor_start"()
    rx2283_cur."!cursor_caparray"("args")
    .lex unicode:"$\x{a2}", rx2283_cur
    .local pmc match
    .lex "$/", match
    length rx2283_eos, rx2283_tgt
    gt rx2283_pos, rx2283_eos, rx2283_done
    set rx2283_off, 0
    lt rx2283_pos, 2, rx2283_start
    sub rx2283_off, rx2283_pos, 1
    substr rx2283_tgt, rx2283_tgt, rx2283_off
  rx2283_start:
    eq $I10, 1, rx2283_restart
    if_null rx2283_debug, debug_1329
    rx2283_cur."!cursor_debug"("START", "dotty")
  debug_1329:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2284_done
    goto rxscan2284_scan
  rxscan2284_loop:
    (rx2283_pos) = rx2283_cur."from"()
    inc rx2283_pos
    rx2283_cur."!cursor_from"(rx2283_pos)
    ge rx2283_pos, rx2283_eos, rxscan2284_done
  rxscan2284_scan:
    set_addr $I10, rxscan2284_loop
    rx2283_cur."!mark_push"(0, rx2283_pos, $I10)
  rxscan2284_done:
.annotate 'line', 949
  # rx literal  "."
    add $I11, rx2283_pos, 1
    gt $I11, rx2283_eos, rx2283_fail
    sub $I11, rx2283_pos, rx2283_off
    ord $I11, rx2283_tgt, $I11
    ne $I11, 46, rx2283_fail
    add rx2283_pos, 1
  alt2285_0:
.annotate 'line', 950
    set_addr $I10, alt2285_1
    rx2283_cur."!mark_push"(0, rx2283_pos, $I10)
  # rx subrule "deflongname" subtype=capture negate=
    rx2283_cur."!cursor_pos"(rx2283_pos)
    $P10 = rx2283_cur."deflongname"()
    unless $P10, rx2283_fail
    rx2283_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("longname=deflongname")
    rx2283_pos = $P10."pos"()
    goto alt2285_end
  alt2285_1:
.annotate 'line', 951
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2283_pos, rx2283_off
    substr $S10, rx2283_tgt, $I10, 1
    index $I11, "'\"", $S10
    lt $I11, 0, rx2283_fail
  # rx subrule "quote" subtype=capture negate=
    rx2283_cur."!cursor_pos"(rx2283_pos)
    $P10 = rx2283_cur."quote"()
    unless $P10, rx2283_fail
    rx2283_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote")
    rx2283_pos = $P10."pos"()
  alt2286_0:
.annotate 'line', 952
    set_addr $I10, alt2286_1
    rx2283_cur."!mark_push"(0, rx2283_pos, $I10)
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2283_pos, rx2283_off
    substr $S10, rx2283_tgt, $I10, 1
    index $I11, "(", $S10
    lt $I11, 0, rx2283_fail
    goto alt2286_end
  alt2286_1:
  # rx subrule "panic" subtype=method negate=
    rx2283_cur."!cursor_pos"(rx2283_pos)
    $P10 = rx2283_cur."panic"("Quoted method name requires parenthesized arguments")
    unless $P10, rx2283_fail
    rx2283_pos = $P10."pos"()
  alt2286_end:
  alt2285_end:
.annotate 'line', 958
  # rx rxquantr2287 ** 0..1
    set_addr $I10, rxquantr2287_done
    rx2283_cur."!mark_push"(0, rx2283_pos, $I10)
  rxquantr2287_loop:
  alt2288_0:
.annotate 'line', 955
    set_addr $I10, alt2288_1
    rx2283_cur."!mark_push"(0, rx2283_pos, $I10)
.annotate 'line', 956
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2283_pos, rx2283_off
    substr $S10, rx2283_tgt, $I10, 1
    index $I11, "(", $S10
    lt $I11, 0, rx2283_fail
  # rx subrule "args" subtype=capture negate=
    rx2283_cur."!cursor_pos"(rx2283_pos)
    $P10 = rx2283_cur."args"()
    unless $P10, rx2283_fail
    rx2283_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("args")
    rx2283_pos = $P10."pos"()
    goto alt2288_end
  alt2288_1:
.annotate 'line', 957
  # rx literal  ":"
    add $I11, rx2283_pos, 1
    gt $I11, rx2283_eos, rx2283_fail
    sub $I11, rx2283_pos, rx2283_off
    ord $I11, rx2283_tgt, $I11
    ne $I11, 58, rx2283_fail
    add rx2283_pos, 1
  # rx charclass s
    ge rx2283_pos, rx2283_eos, rx2283_fail
    sub $I10, rx2283_pos, rx2283_off
    is_cclass $I11, 32, rx2283_tgt, $I10
    unless $I11, rx2283_fail
    inc rx2283_pos
  # rx subrule "arglist" subtype=capture negate=
    rx2283_cur."!cursor_pos"(rx2283_pos)
    $P10 = rx2283_cur."arglist"()
    unless $P10, rx2283_fail
    rx2283_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("args")
    rx2283_pos = $P10."pos"()
  alt2288_end:
.annotate 'line', 958
    set_addr $I10, rxquantr2287_done
    (rx2283_rep) = rx2283_cur."!mark_commit"($I10)
  rxquantr2287_done:
.annotate 'line', 948
  # rx pass
    rx2283_cur."!cursor_pass"(rx2283_pos, "dotty")
    if_null rx2283_debug, debug_1330
    rx2283_cur."!cursor_debug"("PASS", "dotty", " at pos=", rx2283_pos)
  debug_1330:
    .return (rx2283_cur)
  rx2283_restart:
.annotate 'line', 436
    if_null rx2283_debug, debug_1331
    rx2283_cur."!cursor_debug"("NEXT", "dotty")
  debug_1331:
  rx2283_fail:
    (rx2283_rep, rx2283_pos, $I10, $P10) = rx2283_cur."!mark_fail"(0)
    lt rx2283_pos, -1, rx2283_done
    eq rx2283_pos, -1, rx2283_fail
    jump $I10
  rx2283_done:
    rx2283_cur."!cursor_fail"()
    if_null rx2283_debug, debug_1332
    rx2283_cur."!cursor_debug"("FAIL", "dotty")
  debug_1332:
    .return (rx2283_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__dotty"  :subid("245_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2290 = self."!PREFIX__!subrule"("deflongname", ".")
    new $P2291, "ResizablePMCArray"
    push $P2291, "'"
    push $P2291, "\""
    push $P2291, $P2290
    .return ($P2291)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term"  :subid("246_1307835824.98345")
    .param pmc param_2293
.annotate 'line', 962
    .lex "self", param_2293
    $P2294 = param_2293."!protoregex"("term")
    .return ($P2294)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term"  :subid("247_1307835824.98345")
    .param pmc param_2296
.annotate 'line', 962
    .lex "self", param_2296
    $P2297 = param_2296."!PREFIX__!protoregex"("term")
    .return ($P2297)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<self>"  :subid("248_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2299_tgt
    .local int rx2299_pos
    .local int rx2299_off
    .local int rx2299_eos
    .local int rx2299_rep
    .local pmc rx2299_cur
    .local pmc rx2299_debug
    (rx2299_cur, rx2299_pos, rx2299_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2299_cur
    .local pmc match
    .lex "$/", match
    length rx2299_eos, rx2299_tgt
    gt rx2299_pos, rx2299_eos, rx2299_done
    set rx2299_off, 0
    lt rx2299_pos, 2, rx2299_start
    sub rx2299_off, rx2299_pos, 1
    substr rx2299_tgt, rx2299_tgt, rx2299_off
  rx2299_start:
    eq $I10, 1, rx2299_restart
    if_null rx2299_debug, debug_1333
    rx2299_cur."!cursor_debug"("START", "term:sym<self>")
  debug_1333:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2300_done
    goto rxscan2300_scan
  rxscan2300_loop:
    (rx2299_pos) = rx2299_cur."from"()
    inc rx2299_pos
    rx2299_cur."!cursor_from"(rx2299_pos)
    ge rx2299_pos, rx2299_eos, rxscan2300_done
  rxscan2300_scan:
    set_addr $I10, rxscan2300_loop
    rx2299_cur."!mark_push"(0, rx2299_pos, $I10)
  rxscan2300_done:
.annotate 'line', 964
  # rx subcapture "sym"
    set_addr $I10, rxcap_2301_fail
    rx2299_cur."!mark_push"(0, rx2299_pos, $I10)
  # rx literal  "self"
    add $I11, rx2299_pos, 4
    gt $I11, rx2299_eos, rx2299_fail
    sub $I11, rx2299_pos, rx2299_off
    substr $S10, rx2299_tgt, $I11, 4
    ne $S10, "self", rx2299_fail
    add rx2299_pos, 4
    set_addr $I10, rxcap_2301_fail
    ($I12, $I11) = rx2299_cur."!mark_peek"($I10)
    rx2299_cur."!cursor_pos"($I11)
    ($P10) = rx2299_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2299_pos, "")
    rx2299_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2301_done
  rxcap_2301_fail:
    goto rx2299_fail
  rxcap_2301_done:
  # rxanchor rwb
    le rx2299_pos, 0, rx2299_fail
    sub $I10, rx2299_pos, rx2299_off
    is_cclass $I11, 8192, rx2299_tgt, $I10
    if $I11, rx2299_fail
    dec $I10
    is_cclass $I11, 8192, rx2299_tgt, $I10
    unless $I11, rx2299_fail
  # rx pass
    rx2299_cur."!cursor_pass"(rx2299_pos, "term:sym<self>")
    if_null rx2299_debug, debug_1334
    rx2299_cur."!cursor_debug"("PASS", "term:sym<self>", " at pos=", rx2299_pos)
  debug_1334:
    .return (rx2299_cur)
  rx2299_restart:
.annotate 'line', 436
    if_null rx2299_debug, debug_1335
    rx2299_cur."!cursor_debug"("NEXT", "term:sym<self>")
  debug_1335:
  rx2299_fail:
    (rx2299_rep, rx2299_pos, $I10, $P10) = rx2299_cur."!mark_fail"(0)
    lt rx2299_pos, -1, rx2299_done
    eq rx2299_pos, -1, rx2299_fail
    jump $I10
  rx2299_done:
    rx2299_cur."!cursor_fail"()
    if_null rx2299_debug, debug_1336
    rx2299_cur."!cursor_debug"("FAIL", "term:sym<self>")
  debug_1336:
    .return (rx2299_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<self>"  :subid("249_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2303, "ResizablePMCArray"
    push $P2303, "self"
    .return ($P2303)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<identifier>"  :subid("250_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2305_tgt
    .local int rx2305_pos
    .local int rx2305_off
    .local int rx2305_eos
    .local int rx2305_rep
    .local pmc rx2305_cur
    .local pmc rx2305_debug
    (rx2305_cur, rx2305_pos, rx2305_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2305_cur
    .local pmc match
    .lex "$/", match
    length rx2305_eos, rx2305_tgt
    gt rx2305_pos, rx2305_eos, rx2305_done
    set rx2305_off, 0
    lt rx2305_pos, 2, rx2305_start
    sub rx2305_off, rx2305_pos, 1
    substr rx2305_tgt, rx2305_tgt, rx2305_off
  rx2305_start:
    eq $I10, 1, rx2305_restart
    if_null rx2305_debug, debug_1337
    rx2305_cur."!cursor_debug"("START", "term:sym<identifier>")
  debug_1337:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2306_done
    goto rxscan2306_scan
  rxscan2306_loop:
    (rx2305_pos) = rx2305_cur."from"()
    inc rx2305_pos
    rx2305_cur."!cursor_from"(rx2305_pos)
    ge rx2305_pos, rx2305_eos, rxscan2306_done
  rxscan2306_scan:
    set_addr $I10, rxscan2306_loop
    rx2305_cur."!mark_push"(0, rx2305_pos, $I10)
  rxscan2306_done:
.annotate 'line', 967
  # rx subrule "deflongname" subtype=capture negate=
    rx2305_cur."!cursor_pos"(rx2305_pos)
    $P10 = rx2305_cur."deflongname"()
    unless $P10, rx2305_fail
    rx2305_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("deflongname")
    rx2305_pos = $P10."pos"()
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2305_pos, rx2305_off
    substr $S10, rx2305_tgt, $I10, 1
    index $I11, "(", $S10
    lt $I11, 0, rx2305_fail
  # rx subrule "args" subtype=capture negate=
    rx2305_cur."!cursor_pos"(rx2305_pos)
    $P10 = rx2305_cur."args"()
    unless $P10, rx2305_fail
    rx2305_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("args")
    rx2305_pos = $P10."pos"()
.annotate 'line', 966
  # rx pass
    rx2305_cur."!cursor_pass"(rx2305_pos, "term:sym<identifier>")
    if_null rx2305_debug, debug_1338
    rx2305_cur."!cursor_debug"("PASS", "term:sym<identifier>", " at pos=", rx2305_pos)
  debug_1338:
    .return (rx2305_cur)
  rx2305_restart:
.annotate 'line', 436
    if_null rx2305_debug, debug_1339
    rx2305_cur."!cursor_debug"("NEXT", "term:sym<identifier>")
  debug_1339:
  rx2305_fail:
    (rx2305_rep, rx2305_pos, $I10, $P10) = rx2305_cur."!mark_fail"(0)
    lt rx2305_pos, -1, rx2305_done
    eq rx2305_pos, -1, rx2305_fail
    jump $I10
  rx2305_done:
    rx2305_cur."!cursor_fail"()
    if_null rx2305_debug, debug_1340
    rx2305_cur."!cursor_debug"("FAIL", "term:sym<identifier>")
  debug_1340:
    .return (rx2305_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<identifier>"  :subid("251_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2308 = self."!PREFIX__!subrule"("deflongname", "")
    new $P2309, "ResizablePMCArray"
    push $P2309, $P2308
    .return ($P2309)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<name>"  :subid("252_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2311_tgt
    .local int rx2311_pos
    .local int rx2311_off
    .local int rx2311_eos
    .local int rx2311_rep
    .local pmc rx2311_cur
    .local pmc rx2311_debug
    (rx2311_cur, rx2311_pos, rx2311_tgt, $I10) = self."!cursor_start"()
    rx2311_cur."!cursor_caparray"("args")
    .lex unicode:"$\x{a2}", rx2311_cur
    .local pmc match
    .lex "$/", match
    length rx2311_eos, rx2311_tgt
    gt rx2311_pos, rx2311_eos, rx2311_done
    set rx2311_off, 0
    lt rx2311_pos, 2, rx2311_start
    sub rx2311_off, rx2311_pos, 1
    substr rx2311_tgt, rx2311_tgt, rx2311_off
  rx2311_start:
    eq $I10, 1, rx2311_restart
    if_null rx2311_debug, debug_1341
    rx2311_cur."!cursor_debug"("START", "term:sym<name>")
  debug_1341:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2312_done
    goto rxscan2312_scan
  rxscan2312_loop:
    (rx2311_pos) = rx2311_cur."from"()
    inc rx2311_pos
    rx2311_cur."!cursor_from"(rx2311_pos)
    ge rx2311_pos, rx2311_eos, rxscan2312_done
  rxscan2312_scan:
    set_addr $I10, rxscan2312_loop
    rx2311_cur."!mark_push"(0, rx2311_pos, $I10)
  rxscan2312_done:
.annotate 'line', 971
  # rx subrule "name" subtype=capture negate=
    rx2311_cur."!cursor_pos"(rx2311_pos)
    $P10 = rx2311_cur."name"()
    unless $P10, rx2311_fail
    rx2311_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("name")
    rx2311_pos = $P10."pos"()
  # rx rxquantr2313 ** 0..1
    set_addr $I10, rxquantr2313_done
    rx2311_cur."!mark_push"(0, rx2311_pos, $I10)
  rxquantr2313_loop:
  # rx subrule "args" subtype=capture negate=
    rx2311_cur."!cursor_pos"(rx2311_pos)
    $P10 = rx2311_cur."args"()
    unless $P10, rx2311_fail
    goto rxsubrule2314_pass
  rxsubrule2314_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2311_fail
  rxsubrule2314_pass:
    set_addr $I10, rxsubrule2314_back
    rx2311_cur."!mark_push"(0, rx2311_pos, $I10, $P10)
    $P10."!cursor_names"("args")
    rx2311_pos = $P10."pos"()
    set_addr $I10, rxquantr2313_done
    (rx2311_rep) = rx2311_cur."!mark_commit"($I10)
  rxquantr2313_done:
.annotate 'line', 970
  # rx pass
    rx2311_cur."!cursor_pass"(rx2311_pos, "term:sym<name>")
    if_null rx2311_debug, debug_1342
    rx2311_cur."!cursor_debug"("PASS", "term:sym<name>", " at pos=", rx2311_pos)
  debug_1342:
    .return (rx2311_cur)
  rx2311_restart:
.annotate 'line', 436
    if_null rx2311_debug, debug_1343
    rx2311_cur."!cursor_debug"("NEXT", "term:sym<name>")
  debug_1343:
  rx2311_fail:
    (rx2311_rep, rx2311_pos, $I10, $P10) = rx2311_cur."!mark_fail"(0)
    lt rx2311_pos, -1, rx2311_done
    eq rx2311_pos, -1, rx2311_fail
    jump $I10
  rx2311_done:
    rx2311_cur."!cursor_fail"()
    if_null rx2311_debug, debug_1344
    rx2311_cur."!cursor_debug"("FAIL", "term:sym<name>")
  debug_1344:
    .return (rx2311_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<name>"  :subid("253_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2316 = self."!PREFIX__!subrule"("name", "")
    new $P2317, "ResizablePMCArray"
    push $P2317, $P2316
    .return ($P2317)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<pir::op>"  :subid("254_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2319_tgt
    .local int rx2319_pos
    .local int rx2319_off
    .local int rx2319_eos
    .local int rx2319_rep
    .local pmc rx2319_cur
    .local pmc rx2319_debug
    (rx2319_cur, rx2319_pos, rx2319_tgt, $I10) = self."!cursor_start"()
    rx2319_cur."!cursor_caparray"("args")
    .lex unicode:"$\x{a2}", rx2319_cur
    .local pmc match
    .lex "$/", match
    length rx2319_eos, rx2319_tgt
    gt rx2319_pos, rx2319_eos, rx2319_done
    set rx2319_off, 0
    lt rx2319_pos, 2, rx2319_start
    sub rx2319_off, rx2319_pos, 1
    substr rx2319_tgt, rx2319_tgt, rx2319_off
  rx2319_start:
    eq $I10, 1, rx2319_restart
    if_null rx2319_debug, debug_1345
    rx2319_cur."!cursor_debug"("START", "term:sym<pir::op>")
  debug_1345:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2320_done
    goto rxscan2320_scan
  rxscan2320_loop:
    (rx2319_pos) = rx2319_cur."from"()
    inc rx2319_pos
    rx2319_cur."!cursor_from"(rx2319_pos)
    ge rx2319_pos, rx2319_eos, rxscan2320_done
  rxscan2320_scan:
    set_addr $I10, rxscan2320_loop
    rx2319_cur."!mark_push"(0, rx2319_pos, $I10)
  rxscan2320_done:
.annotate 'line', 975
  # rx literal  "pir::"
    add $I11, rx2319_pos, 5
    gt $I11, rx2319_eos, rx2319_fail
    sub $I11, rx2319_pos, rx2319_off
    substr $S10, rx2319_tgt, $I11, 5
    ne $S10, "pir::", rx2319_fail
    add rx2319_pos, 5
  # rx subcapture "op"
    set_addr $I10, rxcap_2321_fail
    rx2319_cur."!mark_push"(0, rx2319_pos, $I10)
  # rx charclass_q w r 1..-1
    sub $I10, rx2319_pos, rx2319_off
    find_not_cclass $I11, 8192, rx2319_tgt, $I10, rx2319_eos
    add $I12, $I10, 1
    lt $I11, $I12, rx2319_fail
    add rx2319_pos, rx2319_off, $I11
    set_addr $I10, rxcap_2321_fail
    ($I12, $I11) = rx2319_cur."!mark_peek"($I10)
    rx2319_cur."!cursor_pos"($I11)
    ($P10) = rx2319_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2319_pos, "")
    rx2319_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("op")
    goto rxcap_2321_done
  rxcap_2321_fail:
    goto rx2319_fail
  rxcap_2321_done:
  # rx rxquantr2322 ** 0..1
    set_addr $I10, rxquantr2322_done
    rx2319_cur."!mark_push"(0, rx2319_pos, $I10)
  rxquantr2322_loop:
  # rx subrule "args" subtype=capture negate=
    rx2319_cur."!cursor_pos"(rx2319_pos)
    $P10 = rx2319_cur."args"()
    unless $P10, rx2319_fail
    goto rxsubrule2323_pass
  rxsubrule2323_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2319_fail
  rxsubrule2323_pass:
    set_addr $I10, rxsubrule2323_back
    rx2319_cur."!mark_push"(0, rx2319_pos, $I10, $P10)
    $P10."!cursor_names"("args")
    rx2319_pos = $P10."pos"()
    set_addr $I10, rxquantr2322_done
    (rx2319_rep) = rx2319_cur."!mark_commit"($I10)
  rxquantr2322_done:
.annotate 'line', 974
  # rx pass
    rx2319_cur."!cursor_pass"(rx2319_pos, "term:sym<pir::op>")
    if_null rx2319_debug, debug_1346
    rx2319_cur."!cursor_debug"("PASS", "term:sym<pir::op>", " at pos=", rx2319_pos)
  debug_1346:
    .return (rx2319_cur)
  rx2319_restart:
.annotate 'line', 436
    if_null rx2319_debug, debug_1347
    rx2319_cur."!cursor_debug"("NEXT", "term:sym<pir::op>")
  debug_1347:
  rx2319_fail:
    (rx2319_rep, rx2319_pos, $I10, $P10) = rx2319_cur."!mark_fail"(0)
    lt rx2319_pos, -1, rx2319_done
    eq rx2319_pos, -1, rx2319_fail
    jump $I10
  rx2319_done:
    rx2319_cur."!cursor_fail"()
    if_null rx2319_debug, debug_1348
    rx2319_cur."!cursor_debug"("FAIL", "term:sym<pir::op>")
  debug_1348:
    .return (rx2319_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<pir::op>"  :subid("255_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2325, "ResizablePMCArray"
    push $P2325, "pir::"
    .return ($P2325)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<onlystar>"  :subid("256_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .const 'Sub' $P2333 = "257_1307835824.98345" 
    capture_lex $P2333
    .local string rx2327_tgt
    .local int rx2327_pos
    .local int rx2327_off
    .local int rx2327_eos
    .local int rx2327_rep
    .local pmc rx2327_cur
    .local pmc rx2327_debug
    (rx2327_cur, rx2327_pos, rx2327_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2327_cur
    .local pmc match
    .lex "$/", match
    length rx2327_eos, rx2327_tgt
    gt rx2327_pos, rx2327_eos, rx2327_done
    set rx2327_off, 0
    lt rx2327_pos, 2, rx2327_start
    sub rx2327_off, rx2327_pos, 1
    substr rx2327_tgt, rx2327_tgt, rx2327_off
  rx2327_start:
    eq $I10, 1, rx2327_restart
    if_null rx2327_debug, debug_1349
    rx2327_cur."!cursor_debug"("START", "term:sym<onlystar>")
  debug_1349:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2328_done
    goto rxscan2328_scan
  rxscan2328_loop:
    (rx2327_pos) = rx2327_cur."from"()
    inc rx2327_pos
    rx2327_cur."!cursor_from"(rx2327_pos)
    ge rx2327_pos, rx2327_eos, rxscan2328_done
  rxscan2328_scan:
    set_addr $I10, rxscan2328_loop
    rx2327_cur."!mark_push"(0, rx2327_pos, $I10)
  rxscan2328_done:
.annotate 'line', 979
  # rx literal  "{*}"
    add $I11, rx2327_pos, 3
    gt $I11, rx2327_eos, rx2327_fail
    sub $I11, rx2327_pos, rx2327_off
    substr $S10, rx2327_tgt, $I11, 3
    ne $S10, "{*}", rx2327_fail
    add rx2327_pos, 3
  # rx subrule "ENDSTMT" subtype=zerowidth negate=
    rx2327_cur."!cursor_pos"(rx2327_pos)
    $P10 = rx2327_cur."ENDSTMT"()
    unless $P10, rx2327_fail
  alt2329_0:
.annotate 'line', 980
    set_addr $I10, alt2329_1
    rx2327_cur."!mark_push"(0, rx2327_pos, $I10)
    rx2327_cur."!cursor_pos"(rx2327_pos)
    find_lex $P2330, unicode:"$\x{a2}"
    $P2331 = $P2330."MATCH"()
    store_lex "$/", $P2331
    .const 'Sub' $P2333 = "257_1307835824.98345" 
    capture_lex $P2333
    $P2339 = $P2333()
    unless $P2339, rx2327_fail
    goto alt2329_end
  alt2329_1:
  # rx subrule "panic" subtype=method negate=
    rx2327_cur."!cursor_pos"(rx2327_pos)
    $P10 = rx2327_cur."panic"("{*} may only appear in proto")
    unless $P10, rx2327_fail
    rx2327_pos = $P10."pos"()
  alt2329_end:
.annotate 'line', 978
  # rx pass
    rx2327_cur."!cursor_pass"(rx2327_pos, "term:sym<onlystar>")
    if_null rx2327_debug, debug_1352
    rx2327_cur."!cursor_debug"("PASS", "term:sym<onlystar>", " at pos=", rx2327_pos)
  debug_1352:
    .return (rx2327_cur)
  rx2327_restart:
.annotate 'line', 436
    if_null rx2327_debug, debug_1353
    rx2327_cur."!cursor_debug"("NEXT", "term:sym<onlystar>")
  debug_1353:
  rx2327_fail:
    (rx2327_rep, rx2327_pos, $I10, $P10) = rx2327_cur."!mark_fail"(0)
    lt rx2327_pos, -1, rx2327_done
    eq rx2327_pos, -1, rx2327_fail
    jump $I10
  rx2327_done:
    rx2327_cur."!cursor_fail"()
    if_null rx2327_debug, debug_1354
    rx2327_cur."!cursor_debug"("FAIL", "term:sym<onlystar>")
  debug_1354:
    .return (rx2327_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2332"  :anon :subid("257_1307835824.98345") :outer("256_1307835824.98345")
.annotate 'line', 980
    find_dynamic_lex $P2336, "$*MULTINESS"
    unless_null $P2336, vivify_1350
    get_hll_global $P2334, "GLOBAL"
    get_who $P2335, $P2334
    set $P2336, $P2335["$MULTINESS"]
    unless_null $P2336, vivify_1351
    die "Contextual $*MULTINESS not found"
  vivify_1351:
  vivify_1350:
    set $S2337, $P2336
    iseq $I2338, $S2337, "proto"
    .return ($I2338)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<onlystar>"  :subid("258_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2341, "ResizablePMCArray"
    push $P2341, "{*}"
    .return ($P2341)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "args"  :subid("259_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2343_tgt
    .local int rx2343_pos
    .local int rx2343_off
    .local int rx2343_eos
    .local int rx2343_rep
    .local pmc rx2343_cur
    .local pmc rx2343_debug
    (rx2343_cur, rx2343_pos, rx2343_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2343_cur
    .local pmc match
    .lex "$/", match
    length rx2343_eos, rx2343_tgt
    gt rx2343_pos, rx2343_eos, rx2343_done
    set rx2343_off, 0
    lt rx2343_pos, 2, rx2343_start
    sub rx2343_off, rx2343_pos, 1
    substr rx2343_tgt, rx2343_tgt, rx2343_off
  rx2343_start:
    eq $I10, 1, rx2343_restart
    if_null rx2343_debug, debug_1355
    rx2343_cur."!cursor_debug"("START", "args")
  debug_1355:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2344_done
    goto rxscan2344_scan
  rxscan2344_loop:
    (rx2343_pos) = rx2343_cur."from"()
    inc rx2343_pos
    rx2343_cur."!cursor_from"(rx2343_pos)
    ge rx2343_pos, rx2343_eos, rxscan2344_done
  rxscan2344_scan:
    set_addr $I10, rxscan2344_loop
    rx2343_cur."!mark_push"(0, rx2343_pos, $I10)
  rxscan2344_done:
.annotate 'line', 984
  # rx literal  "("
    add $I11, rx2343_pos, 1
    gt $I11, rx2343_eos, rx2343_fail
    sub $I11, rx2343_pos, rx2343_off
    ord $I11, rx2343_tgt, $I11
    ne $I11, 40, rx2343_fail
    add rx2343_pos, 1
  # rx subrule "arglist" subtype=capture negate=
    rx2343_cur."!cursor_pos"(rx2343_pos)
    $P10 = rx2343_cur."arglist"()
    unless $P10, rx2343_fail
    rx2343_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx2343_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx2343_pos, 1
    gt $I11, rx2343_eos, rx2343_fail
    sub $I11, rx2343_pos, rx2343_off
    ord $I11, rx2343_tgt, $I11
    ne $I11, 41, rx2343_fail
    add rx2343_pos, 1
  # rx pass
    rx2343_cur."!cursor_pass"(rx2343_pos, "args")
    if_null rx2343_debug, debug_1356
    rx2343_cur."!cursor_debug"("PASS", "args", " at pos=", rx2343_pos)
  debug_1356:
    .return (rx2343_cur)
  rx2343_restart:
.annotate 'line', 436
    if_null rx2343_debug, debug_1357
    rx2343_cur."!cursor_debug"("NEXT", "args")
  debug_1357:
  rx2343_fail:
    (rx2343_rep, rx2343_pos, $I10, $P10) = rx2343_cur."!mark_fail"(0)
    lt rx2343_pos, -1, rx2343_done
    eq rx2343_pos, -1, rx2343_fail
    jump $I10
  rx2343_done:
    rx2343_cur."!cursor_fail"()
    if_null rx2343_debug, debug_1358
    rx2343_cur."!cursor_debug"("FAIL", "args")
  debug_1358:
    .return (rx2343_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__args"  :subid("260_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2346 = self."!PREFIX__!subrule"("arglist", "(")
    new $P2347, "ResizablePMCArray"
    push $P2347, $P2346
    .return ($P2347)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "arglist"  :subid("261_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2349_tgt
    .local int rx2349_pos
    .local int rx2349_off
    .local int rx2349_eos
    .local int rx2349_rep
    .local pmc rx2349_cur
    .local pmc rx2349_debug
    (rx2349_cur, rx2349_pos, rx2349_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2349_cur
    .local pmc match
    .lex "$/", match
    length rx2349_eos, rx2349_tgt
    gt rx2349_pos, rx2349_eos, rx2349_done
    set rx2349_off, 0
    lt rx2349_pos, 2, rx2349_start
    sub rx2349_off, rx2349_pos, 1
    substr rx2349_tgt, rx2349_tgt, rx2349_off
  rx2349_start:
    eq $I10, 1, rx2349_restart
    if_null rx2349_debug, debug_1359
    rx2349_cur."!cursor_debug"("START", "arglist")
  debug_1359:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2350_done
    goto rxscan2350_scan
  rxscan2350_loop:
    (rx2349_pos) = rx2349_cur."from"()
    inc rx2349_pos
    rx2349_cur."!cursor_from"(rx2349_pos)
    ge rx2349_pos, rx2349_eos, rxscan2350_done
  rxscan2350_scan:
    set_addr $I10, rxscan2350_loop
    rx2349_cur."!mark_push"(0, rx2349_pos, $I10)
  rxscan2350_done:
.annotate 'line', 988
  # rx subrule "ws" subtype=method negate=
    rx2349_cur."!cursor_pos"(rx2349_pos)
    $P10 = rx2349_cur."ws"()
    unless $P10, rx2349_fail
    rx2349_pos = $P10."pos"()
  alt2351_0:
.annotate 'line', 989
    set_addr $I10, alt2351_1
    rx2349_cur."!mark_push"(0, rx2349_pos, $I10)
.annotate 'line', 990
  # rx subrule "EXPR" subtype=capture negate=
    rx2349_cur."!cursor_pos"(rx2349_pos)
    $P10 = rx2349_cur."EXPR"("f=")
    unless $P10, rx2349_fail
    rx2349_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx2349_pos = $P10."pos"()
    goto alt2351_end
  alt2351_1:
  alt2351_end:
.annotate 'line', 987
  # rx pass
    rx2349_cur."!cursor_pass"(rx2349_pos, "arglist")
    if_null rx2349_debug, debug_1360
    rx2349_cur."!cursor_debug"("PASS", "arglist", " at pos=", rx2349_pos)
  debug_1360:
    .return (rx2349_cur)
  rx2349_restart:
.annotate 'line', 436
    if_null rx2349_debug, debug_1361
    rx2349_cur."!cursor_debug"("NEXT", "arglist")
  debug_1361:
  rx2349_fail:
    (rx2349_rep, rx2349_pos, $I10, $P10) = rx2349_cur."!mark_fail"(0)
    lt rx2349_pos, -1, rx2349_done
    eq rx2349_pos, -1, rx2349_fail
    jump $I10
  rx2349_done:
    rx2349_cur."!cursor_fail"()
    if_null rx2349_debug, debug_1362
    rx2349_cur."!cursor_debug"("FAIL", "arglist")
  debug_1362:
    .return (rx2349_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__arglist"  :subid("262_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2353 = self."!PREFIX__!subrule"("ws", "")
    new $P2354, "ResizablePMCArray"
    push $P2354, $P2353
    .return ($P2354)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<value>"  :subid("263_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2356_tgt
    .local int rx2356_pos
    .local int rx2356_off
    .local int rx2356_eos
    .local int rx2356_rep
    .local pmc rx2356_cur
    .local pmc rx2356_debug
    (rx2356_cur, rx2356_pos, rx2356_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2356_cur
    .local pmc match
    .lex "$/", match
    length rx2356_eos, rx2356_tgt
    gt rx2356_pos, rx2356_eos, rx2356_done
    set rx2356_off, 0
    lt rx2356_pos, 2, rx2356_start
    sub rx2356_off, rx2356_pos, 1
    substr rx2356_tgt, rx2356_tgt, rx2356_off
  rx2356_start:
    eq $I10, 1, rx2356_restart
    if_null rx2356_debug, debug_1363
    rx2356_cur."!cursor_debug"("START", "term:sym<value>")
  debug_1363:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2357_done
    goto rxscan2357_scan
  rxscan2357_loop:
    (rx2356_pos) = rx2356_cur."from"()
    inc rx2356_pos
    rx2356_cur."!cursor_from"(rx2356_pos)
    ge rx2356_pos, rx2356_eos, rxscan2357_done
  rxscan2357_scan:
    set_addr $I10, rxscan2357_loop
    rx2356_cur."!mark_push"(0, rx2356_pos, $I10)
  rxscan2357_done:
.annotate 'line', 996
  # rx subrule "value" subtype=capture negate=
    rx2356_cur."!cursor_pos"(rx2356_pos)
    $P10 = rx2356_cur."value"()
    unless $P10, rx2356_fail
    rx2356_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("value")
    rx2356_pos = $P10."pos"()
  # rx pass
    rx2356_cur."!cursor_pass"(rx2356_pos, "term:sym<value>")
    if_null rx2356_debug, debug_1364
    rx2356_cur."!cursor_debug"("PASS", "term:sym<value>", " at pos=", rx2356_pos)
  debug_1364:
    .return (rx2356_cur)
  rx2356_restart:
.annotate 'line', 436
    if_null rx2356_debug, debug_1365
    rx2356_cur."!cursor_debug"("NEXT", "term:sym<value>")
  debug_1365:
  rx2356_fail:
    (rx2356_rep, rx2356_pos, $I10, $P10) = rx2356_cur."!mark_fail"(0)
    lt rx2356_pos, -1, rx2356_done
    eq rx2356_pos, -1, rx2356_fail
    jump $I10
  rx2356_done:
    rx2356_cur."!cursor_fail"()
    if_null rx2356_debug, debug_1366
    rx2356_cur."!cursor_debug"("FAIL", "term:sym<value>")
  debug_1366:
    .return (rx2356_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<value>"  :subid("264_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2359 = self."!PREFIX__!subrule"("value", "")
    new $P2360, "ResizablePMCArray"
    push $P2360, $P2359
    .return ($P2360)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "value"  :subid("265_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2362_tgt
    .local int rx2362_pos
    .local int rx2362_off
    .local int rx2362_eos
    .local int rx2362_rep
    .local pmc rx2362_cur
    .local pmc rx2362_debug
    (rx2362_cur, rx2362_pos, rx2362_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2362_cur
    .local pmc match
    .lex "$/", match
    length rx2362_eos, rx2362_tgt
    gt rx2362_pos, rx2362_eos, rx2362_done
    set rx2362_off, 0
    lt rx2362_pos, 2, rx2362_start
    sub rx2362_off, rx2362_pos, 1
    substr rx2362_tgt, rx2362_tgt, rx2362_off
  rx2362_start:
    eq $I10, 1, rx2362_restart
    if_null rx2362_debug, debug_1367
    rx2362_cur."!cursor_debug"("START", "value")
  debug_1367:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2363_done
    goto rxscan2363_scan
  rxscan2363_loop:
    (rx2362_pos) = rx2362_cur."from"()
    inc rx2362_pos
    rx2362_cur."!cursor_from"(rx2362_pos)
    ge rx2362_pos, rx2362_eos, rxscan2363_done
  rxscan2363_scan:
    set_addr $I10, rxscan2363_loop
    rx2362_cur."!mark_push"(0, rx2362_pos, $I10)
  rxscan2363_done:
  alt2364_0:
.annotate 'line', 998
    set_addr $I10, alt2364_1
    rx2362_cur."!mark_push"(0, rx2362_pos, $I10)
.annotate 'line', 999
  # rx subrule "quote" subtype=capture negate=
    rx2362_cur."!cursor_pos"(rx2362_pos)
    $P10 = rx2362_cur."quote"()
    unless $P10, rx2362_fail
    rx2362_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote")
    rx2362_pos = $P10."pos"()
    goto alt2364_end
  alt2364_1:
.annotate 'line', 1000
  # rx subrule "number" subtype=capture negate=
    rx2362_cur."!cursor_pos"(rx2362_pos)
    $P10 = rx2362_cur."number"()
    unless $P10, rx2362_fail
    rx2362_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("number")
    rx2362_pos = $P10."pos"()
  alt2364_end:
.annotate 'line', 998
  # rx pass
    rx2362_cur."!cursor_pass"(rx2362_pos, "value")
    if_null rx2362_debug, debug_1368
    rx2362_cur."!cursor_debug"("PASS", "value", " at pos=", rx2362_pos)
  debug_1368:
    .return (rx2362_cur)
  rx2362_restart:
.annotate 'line', 436
    if_null rx2362_debug, debug_1369
    rx2362_cur."!cursor_debug"("NEXT", "value")
  debug_1369:
  rx2362_fail:
    (rx2362_rep, rx2362_pos, $I10, $P10) = rx2362_cur."!mark_fail"(0)
    lt rx2362_pos, -1, rx2362_done
    eq rx2362_pos, -1, rx2362_fail
    jump $I10
  rx2362_done:
    rx2362_cur."!cursor_fail"()
    if_null rx2362_debug, debug_1370
    rx2362_cur."!cursor_debug"("FAIL", "value")
  debug_1370:
    .return (rx2362_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__value"  :subid("266_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2366 = self."!PREFIX__!subrule"("number", "")
    $P2367 = self."!PREFIX__!subrule"("quote", "")
    new $P2368, "ResizablePMCArray"
    push $P2368, $P2366
    push $P2368, $P2367
    .return ($P2368)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "number"  :subid("267_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2370_tgt
    .local int rx2370_pos
    .local int rx2370_off
    .local int rx2370_eos
    .local int rx2370_rep
    .local pmc rx2370_cur
    .local pmc rx2370_debug
    (rx2370_cur, rx2370_pos, rx2370_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2370_cur
    .local pmc match
    .lex "$/", match
    length rx2370_eos, rx2370_tgt
    gt rx2370_pos, rx2370_eos, rx2370_done
    set rx2370_off, 0
    lt rx2370_pos, 2, rx2370_start
    sub rx2370_off, rx2370_pos, 1
    substr rx2370_tgt, rx2370_tgt, rx2370_off
  rx2370_start:
    eq $I10, 1, rx2370_restart
    if_null rx2370_debug, debug_1371
    rx2370_cur."!cursor_debug"("START", "number")
  debug_1371:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2371_done
    goto rxscan2371_scan
  rxscan2371_loop:
    (rx2370_pos) = rx2370_cur."from"()
    inc rx2370_pos
    rx2370_cur."!cursor_from"(rx2370_pos)
    ge rx2370_pos, rx2370_eos, rxscan2371_done
  rxscan2371_scan:
    set_addr $I10, rxscan2371_loop
    rx2370_cur."!mark_push"(0, rx2370_pos, $I10)
  rxscan2371_done:
.annotate 'line', 1004
  # rx subcapture "sign"
    set_addr $I10, rxcap_2373_fail
    rx2370_cur."!mark_push"(0, rx2370_pos, $I10)
  # rx enumcharlist_q negate=0  r 0..1
    sub $I10, rx2370_pos, rx2370_off
    set rx2370_rep, 0
    sub $I12, rx2370_eos, rx2370_pos
    le $I12, 1, rxenumcharlistq2372_loop
    set $I12, 1
  rxenumcharlistq2372_loop:
    le $I12, 0, rxenumcharlistq2372_done
    substr $S10, rx2370_tgt, $I10, 1
    index $I11, "+-", $S10
    lt $I11, 0, rxenumcharlistq2372_done
    inc rx2370_rep
  rxenumcharlistq2372_done:
    add rx2370_pos, rx2370_pos, rx2370_rep
    set_addr $I10, rxcap_2373_fail
    ($I12, $I11) = rx2370_cur."!mark_peek"($I10)
    rx2370_cur."!cursor_pos"($I11)
    ($P10) = rx2370_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2370_pos, "")
    rx2370_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sign")
    goto rxcap_2373_done
  rxcap_2373_fail:
    goto rx2370_fail
  rxcap_2373_done:
  alt2374_0:
.annotate 'line', 1005
    set_addr $I10, alt2374_1
    rx2370_cur."!mark_push"(0, rx2370_pos, $I10)
  # rx subrule "dec_number" subtype=capture negate=
    rx2370_cur."!cursor_pos"(rx2370_pos)
    $P10 = rx2370_cur."dec_number"()
    unless $P10, rx2370_fail
    rx2370_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("dec_number")
    rx2370_pos = $P10."pos"()
    goto alt2374_end
  alt2374_1:
  # rx subrule "integer" subtype=capture negate=
    rx2370_cur."!cursor_pos"(rx2370_pos)
    $P10 = rx2370_cur."integer"()
    unless $P10, rx2370_fail
    rx2370_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("integer")
    rx2370_pos = $P10."pos"()
  alt2374_end:
.annotate 'line', 1003
  # rx pass
    rx2370_cur."!cursor_pass"(rx2370_pos, "number")
    if_null rx2370_debug, debug_1372
    rx2370_cur."!cursor_debug"("PASS", "number", " at pos=", rx2370_pos)
  debug_1372:
    .return (rx2370_cur)
  rx2370_restart:
.annotate 'line', 436
    if_null rx2370_debug, debug_1373
    rx2370_cur."!cursor_debug"("NEXT", "number")
  debug_1373:
  rx2370_fail:
    (rx2370_rep, rx2370_pos, $I10, $P10) = rx2370_cur."!mark_fail"(0)
    lt rx2370_pos, -1, rx2370_done
    eq rx2370_pos, -1, rx2370_fail
    jump $I10
  rx2370_done:
    rx2370_cur."!cursor_fail"()
    if_null rx2370_debug, debug_1374
    rx2370_cur."!cursor_debug"("FAIL", "number")
  debug_1374:
    .return (rx2370_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__number"  :subid("268_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2376, "ResizablePMCArray"
    push $P2376, ""
    .return ($P2376)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote"  :subid("269_1307835824.98345")
    .param pmc param_2378
.annotate 'line', 1008
    .lex "self", param_2378
    $P2379 = param_2378."!protoregex"("quote")
    .return ($P2379)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote"  :subid("270_1307835824.98345")
    .param pmc param_2381
.annotate 'line', 1008
    .lex "self", param_2381
    $P2382 = param_2381."!PREFIX__!protoregex"("quote")
    .return ($P2382)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<apos>"  :subid("271_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2384_tgt
    .local int rx2384_pos
    .local int rx2384_off
    .local int rx2384_eos
    .local int rx2384_rep
    .local pmc rx2384_cur
    .local pmc rx2384_debug
    (rx2384_cur, rx2384_pos, rx2384_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2384_cur
    .local pmc match
    .lex "$/", match
    length rx2384_eos, rx2384_tgt
    gt rx2384_pos, rx2384_eos, rx2384_done
    set rx2384_off, 0
    lt rx2384_pos, 2, rx2384_start
    sub rx2384_off, rx2384_pos, 1
    substr rx2384_tgt, rx2384_tgt, rx2384_off
  rx2384_start:
    eq $I10, 1, rx2384_restart
    if_null rx2384_debug, debug_1375
    rx2384_cur."!cursor_debug"("START", "quote:sym<apos>")
  debug_1375:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2385_done
    goto rxscan2385_scan
  rxscan2385_loop:
    (rx2384_pos) = rx2384_cur."from"()
    inc rx2384_pos
    rx2384_cur."!cursor_from"(rx2384_pos)
    ge rx2384_pos, rx2384_eos, rxscan2385_done
  rxscan2385_scan:
    set_addr $I10, rxscan2385_loop
    rx2384_cur."!mark_push"(0, rx2384_pos, $I10)
  rxscan2385_done:
.annotate 'line', 1009
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2384_pos, rx2384_off
    substr $S10, rx2384_tgt, $I10, 1
    index $I11, "'", $S10
    lt $I11, 0, rx2384_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2384_cur."!cursor_pos"(rx2384_pos)
    $P10 = rx2384_cur."quote_EXPR"(":q")
    unless $P10, rx2384_fail
    rx2384_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2384_pos = $P10."pos"()
  # rx pass
    rx2384_cur."!cursor_pass"(rx2384_pos, "quote:sym<apos>")
    if_null rx2384_debug, debug_1376
    rx2384_cur."!cursor_debug"("PASS", "quote:sym<apos>", " at pos=", rx2384_pos)
  debug_1376:
    .return (rx2384_cur)
  rx2384_restart:
.annotate 'line', 436
    if_null rx2384_debug, debug_1377
    rx2384_cur."!cursor_debug"("NEXT", "quote:sym<apos>")
  debug_1377:
  rx2384_fail:
    (rx2384_rep, rx2384_pos, $I10, $P10) = rx2384_cur."!mark_fail"(0)
    lt rx2384_pos, -1, rx2384_done
    eq rx2384_pos, -1, rx2384_fail
    jump $I10
  rx2384_done:
    rx2384_cur."!cursor_fail"()
    if_null rx2384_debug, debug_1378
    rx2384_cur."!cursor_debug"("FAIL", "quote:sym<apos>")
  debug_1378:
    .return (rx2384_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<apos>"  :subid("272_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2387, "ResizablePMCArray"
    push $P2387, "'"
    .return ($P2387)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<dblq>"  :subid("273_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2389_tgt
    .local int rx2389_pos
    .local int rx2389_off
    .local int rx2389_eos
    .local int rx2389_rep
    .local pmc rx2389_cur
    .local pmc rx2389_debug
    (rx2389_cur, rx2389_pos, rx2389_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2389_cur
    .local pmc match
    .lex "$/", match
    length rx2389_eos, rx2389_tgt
    gt rx2389_pos, rx2389_eos, rx2389_done
    set rx2389_off, 0
    lt rx2389_pos, 2, rx2389_start
    sub rx2389_off, rx2389_pos, 1
    substr rx2389_tgt, rx2389_tgt, rx2389_off
  rx2389_start:
    eq $I10, 1, rx2389_restart
    if_null rx2389_debug, debug_1379
    rx2389_cur."!cursor_debug"("START", "quote:sym<dblq>")
  debug_1379:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2390_done
    goto rxscan2390_scan
  rxscan2390_loop:
    (rx2389_pos) = rx2389_cur."from"()
    inc rx2389_pos
    rx2389_cur."!cursor_from"(rx2389_pos)
    ge rx2389_pos, rx2389_eos, rxscan2390_done
  rxscan2390_scan:
    set_addr $I10, rxscan2390_loop
    rx2389_cur."!mark_push"(0, rx2389_pos, $I10)
  rxscan2390_done:
.annotate 'line', 1010
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2389_pos, rx2389_off
    substr $S10, rx2389_tgt, $I10, 1
    index $I11, "\"", $S10
    lt $I11, 0, rx2389_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2389_cur."!cursor_pos"(rx2389_pos)
    $P10 = rx2389_cur."quote_EXPR"(":qq")
    unless $P10, rx2389_fail
    rx2389_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2389_pos = $P10."pos"()
  # rx pass
    rx2389_cur."!cursor_pass"(rx2389_pos, "quote:sym<dblq>")
    if_null rx2389_debug, debug_1380
    rx2389_cur."!cursor_debug"("PASS", "quote:sym<dblq>", " at pos=", rx2389_pos)
  debug_1380:
    .return (rx2389_cur)
  rx2389_restart:
.annotate 'line', 436
    if_null rx2389_debug, debug_1381
    rx2389_cur."!cursor_debug"("NEXT", "quote:sym<dblq>")
  debug_1381:
  rx2389_fail:
    (rx2389_rep, rx2389_pos, $I10, $P10) = rx2389_cur."!mark_fail"(0)
    lt rx2389_pos, -1, rx2389_done
    eq rx2389_pos, -1, rx2389_fail
    jump $I10
  rx2389_done:
    rx2389_cur."!cursor_fail"()
    if_null rx2389_debug, debug_1382
    rx2389_cur."!cursor_debug"("FAIL", "quote:sym<dblq>")
  debug_1382:
    .return (rx2389_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<dblq>"  :subid("274_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2392, "ResizablePMCArray"
    push $P2392, "\""
    .return ($P2392)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<q>"  :subid("275_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2394_tgt
    .local int rx2394_pos
    .local int rx2394_off
    .local int rx2394_eos
    .local int rx2394_rep
    .local pmc rx2394_cur
    .local pmc rx2394_debug
    (rx2394_cur, rx2394_pos, rx2394_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2394_cur
    .local pmc match
    .lex "$/", match
    length rx2394_eos, rx2394_tgt
    gt rx2394_pos, rx2394_eos, rx2394_done
    set rx2394_off, 0
    lt rx2394_pos, 2, rx2394_start
    sub rx2394_off, rx2394_pos, 1
    substr rx2394_tgt, rx2394_tgt, rx2394_off
  rx2394_start:
    eq $I10, 1, rx2394_restart
    if_null rx2394_debug, debug_1383
    rx2394_cur."!cursor_debug"("START", "quote:sym<q>")
  debug_1383:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2395_done
    goto rxscan2395_scan
  rxscan2395_loop:
    (rx2394_pos) = rx2394_cur."from"()
    inc rx2394_pos
    rx2394_cur."!cursor_from"(rx2394_pos)
    ge rx2394_pos, rx2394_eos, rxscan2395_done
  rxscan2395_scan:
    set_addr $I10, rxscan2395_loop
    rx2394_cur."!mark_push"(0, rx2394_pos, $I10)
  rxscan2395_done:
.annotate 'line', 1011
  # rx subcapture "sym"
    set_addr $I10, rxcap_2396_fail
    rx2394_cur."!mark_push"(0, rx2394_pos, $I10)
  # rx literal  "q"
    add $I11, rx2394_pos, 1
    gt $I11, rx2394_eos, rx2394_fail
    sub $I11, rx2394_pos, rx2394_off
    ord $I11, rx2394_tgt, $I11
    ne $I11, 113, rx2394_fail
    add rx2394_pos, 1
    set_addr $I10, rxcap_2396_fail
    ($I12, $I11) = rx2394_cur."!mark_peek"($I10)
    rx2394_cur."!cursor_pos"($I11)
    ($P10) = rx2394_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2394_pos, "")
    rx2394_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2396_done
  rxcap_2396_fail:
    goto rx2394_fail
  rxcap_2396_done:
  # rxanchor rwb
    le rx2394_pos, 0, rx2394_fail
    sub $I10, rx2394_pos, rx2394_off
    is_cclass $I11, 8192, rx2394_tgt, $I10
    if $I11, rx2394_fail
    dec $I10
    is_cclass $I11, 8192, rx2394_tgt, $I10
    unless $I11, rx2394_fail
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx2394_pos, rx2394_off
    substr $S10, rx2394_tgt, $I10, 1
    index $I11, "(", $S10
    ge $I11, 0, rx2394_fail
  # rx subrule "ws" subtype=method negate=
    rx2394_cur."!cursor_pos"(rx2394_pos)
    $P10 = rx2394_cur."ws"()
    unless $P10, rx2394_fail
    rx2394_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2394_cur."!cursor_pos"(rx2394_pos)
    $P10 = rx2394_cur."quote_EXPR"(":q")
    unless $P10, rx2394_fail
    rx2394_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2394_pos = $P10."pos"()
  # rx pass
    rx2394_cur."!cursor_pass"(rx2394_pos, "quote:sym<q>")
    if_null rx2394_debug, debug_1384
    rx2394_cur."!cursor_debug"("PASS", "quote:sym<q>", " at pos=", rx2394_pos)
  debug_1384:
    .return (rx2394_cur)
  rx2394_restart:
.annotate 'line', 436
    if_null rx2394_debug, debug_1385
    rx2394_cur."!cursor_debug"("NEXT", "quote:sym<q>")
  debug_1385:
  rx2394_fail:
    (rx2394_rep, rx2394_pos, $I10, $P10) = rx2394_cur."!mark_fail"(0)
    lt rx2394_pos, -1, rx2394_done
    eq rx2394_pos, -1, rx2394_fail
    jump $I10
  rx2394_done:
    rx2394_cur."!cursor_fail"()
    if_null rx2394_debug, debug_1386
    rx2394_cur."!cursor_debug"("FAIL", "quote:sym<q>")
  debug_1386:
    .return (rx2394_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<q>"  :subid("276_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2398 = self."!PREFIX__!subrule"("ws", "q")
    new $P2399, "ResizablePMCArray"
    push $P2399, $P2398
    .return ($P2399)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<qq>"  :subid("277_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2401_tgt
    .local int rx2401_pos
    .local int rx2401_off
    .local int rx2401_eos
    .local int rx2401_rep
    .local pmc rx2401_cur
    .local pmc rx2401_debug
    (rx2401_cur, rx2401_pos, rx2401_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2401_cur
    .local pmc match
    .lex "$/", match
    length rx2401_eos, rx2401_tgt
    gt rx2401_pos, rx2401_eos, rx2401_done
    set rx2401_off, 0
    lt rx2401_pos, 2, rx2401_start
    sub rx2401_off, rx2401_pos, 1
    substr rx2401_tgt, rx2401_tgt, rx2401_off
  rx2401_start:
    eq $I10, 1, rx2401_restart
    if_null rx2401_debug, debug_1387
    rx2401_cur."!cursor_debug"("START", "quote:sym<qq>")
  debug_1387:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2402_done
    goto rxscan2402_scan
  rxscan2402_loop:
    (rx2401_pos) = rx2401_cur."from"()
    inc rx2401_pos
    rx2401_cur."!cursor_from"(rx2401_pos)
    ge rx2401_pos, rx2401_eos, rxscan2402_done
  rxscan2402_scan:
    set_addr $I10, rxscan2402_loop
    rx2401_cur."!mark_push"(0, rx2401_pos, $I10)
  rxscan2402_done:
.annotate 'line', 1012
  # rx subcapture "sym"
    set_addr $I10, rxcap_2403_fail
    rx2401_cur."!mark_push"(0, rx2401_pos, $I10)
  # rx literal  "qq"
    add $I11, rx2401_pos, 2
    gt $I11, rx2401_eos, rx2401_fail
    sub $I11, rx2401_pos, rx2401_off
    substr $S10, rx2401_tgt, $I11, 2
    ne $S10, "qq", rx2401_fail
    add rx2401_pos, 2
    set_addr $I10, rxcap_2403_fail
    ($I12, $I11) = rx2401_cur."!mark_peek"($I10)
    rx2401_cur."!cursor_pos"($I11)
    ($P10) = rx2401_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2401_pos, "")
    rx2401_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2403_done
  rxcap_2403_fail:
    goto rx2401_fail
  rxcap_2403_done:
  # rxanchor rwb
    le rx2401_pos, 0, rx2401_fail
    sub $I10, rx2401_pos, rx2401_off
    is_cclass $I11, 8192, rx2401_tgt, $I10
    if $I11, rx2401_fail
    dec $I10
    is_cclass $I11, 8192, rx2401_tgt, $I10
    unless $I11, rx2401_fail
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx2401_pos, rx2401_off
    substr $S10, rx2401_tgt, $I10, 1
    index $I11, "(", $S10
    ge $I11, 0, rx2401_fail
  # rx subrule "ws" subtype=method negate=
    rx2401_cur."!cursor_pos"(rx2401_pos)
    $P10 = rx2401_cur."ws"()
    unless $P10, rx2401_fail
    rx2401_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2401_cur."!cursor_pos"(rx2401_pos)
    $P10 = rx2401_cur."quote_EXPR"(":qq")
    unless $P10, rx2401_fail
    rx2401_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2401_pos = $P10."pos"()
  # rx pass
    rx2401_cur."!cursor_pass"(rx2401_pos, "quote:sym<qq>")
    if_null rx2401_debug, debug_1388
    rx2401_cur."!cursor_debug"("PASS", "quote:sym<qq>", " at pos=", rx2401_pos)
  debug_1388:
    .return (rx2401_cur)
  rx2401_restart:
.annotate 'line', 436
    if_null rx2401_debug, debug_1389
    rx2401_cur."!cursor_debug"("NEXT", "quote:sym<qq>")
  debug_1389:
  rx2401_fail:
    (rx2401_rep, rx2401_pos, $I10, $P10) = rx2401_cur."!mark_fail"(0)
    lt rx2401_pos, -1, rx2401_done
    eq rx2401_pos, -1, rx2401_fail
    jump $I10
  rx2401_done:
    rx2401_cur."!cursor_fail"()
    if_null rx2401_debug, debug_1390
    rx2401_cur."!cursor_debug"("FAIL", "quote:sym<qq>")
  debug_1390:
    .return (rx2401_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<qq>"  :subid("278_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2405 = self."!PREFIX__!subrule"("ws", "qq")
    new $P2406, "ResizablePMCArray"
    push $P2406, $P2405
    .return ($P2406)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<Q>"  :subid("279_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2408_tgt
    .local int rx2408_pos
    .local int rx2408_off
    .local int rx2408_eos
    .local int rx2408_rep
    .local pmc rx2408_cur
    .local pmc rx2408_debug
    (rx2408_cur, rx2408_pos, rx2408_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2408_cur
    .local pmc match
    .lex "$/", match
    length rx2408_eos, rx2408_tgt
    gt rx2408_pos, rx2408_eos, rx2408_done
    set rx2408_off, 0
    lt rx2408_pos, 2, rx2408_start
    sub rx2408_off, rx2408_pos, 1
    substr rx2408_tgt, rx2408_tgt, rx2408_off
  rx2408_start:
    eq $I10, 1, rx2408_restart
    if_null rx2408_debug, debug_1391
    rx2408_cur."!cursor_debug"("START", "quote:sym<Q>")
  debug_1391:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2409_done
    goto rxscan2409_scan
  rxscan2409_loop:
    (rx2408_pos) = rx2408_cur."from"()
    inc rx2408_pos
    rx2408_cur."!cursor_from"(rx2408_pos)
    ge rx2408_pos, rx2408_eos, rxscan2409_done
  rxscan2409_scan:
    set_addr $I10, rxscan2409_loop
    rx2408_cur."!mark_push"(0, rx2408_pos, $I10)
  rxscan2409_done:
.annotate 'line', 1013
  # rx subcapture "sym"
    set_addr $I10, rxcap_2410_fail
    rx2408_cur."!mark_push"(0, rx2408_pos, $I10)
  # rx literal  "Q"
    add $I11, rx2408_pos, 1
    gt $I11, rx2408_eos, rx2408_fail
    sub $I11, rx2408_pos, rx2408_off
    ord $I11, rx2408_tgt, $I11
    ne $I11, 81, rx2408_fail
    add rx2408_pos, 1
    set_addr $I10, rxcap_2410_fail
    ($I12, $I11) = rx2408_cur."!mark_peek"($I10)
    rx2408_cur."!cursor_pos"($I11)
    ($P10) = rx2408_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2408_pos, "")
    rx2408_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2410_done
  rxcap_2410_fail:
    goto rx2408_fail
  rxcap_2410_done:
  # rxanchor rwb
    le rx2408_pos, 0, rx2408_fail
    sub $I10, rx2408_pos, rx2408_off
    is_cclass $I11, 8192, rx2408_tgt, $I10
    if $I11, rx2408_fail
    dec $I10
    is_cclass $I11, 8192, rx2408_tgt, $I10
    unless $I11, rx2408_fail
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx2408_pos, rx2408_off
    substr $S10, rx2408_tgt, $I10, 1
    index $I11, "(", $S10
    ge $I11, 0, rx2408_fail
  # rx subrule "ws" subtype=method negate=
    rx2408_cur."!cursor_pos"(rx2408_pos)
    $P10 = rx2408_cur."ws"()
    unless $P10, rx2408_fail
    rx2408_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2408_cur."!cursor_pos"(rx2408_pos)
    $P10 = rx2408_cur."quote_EXPR"()
    unless $P10, rx2408_fail
    rx2408_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2408_pos = $P10."pos"()
  # rx pass
    rx2408_cur."!cursor_pass"(rx2408_pos, "quote:sym<Q>")
    if_null rx2408_debug, debug_1392
    rx2408_cur."!cursor_debug"("PASS", "quote:sym<Q>", " at pos=", rx2408_pos)
  debug_1392:
    .return (rx2408_cur)
  rx2408_restart:
.annotate 'line', 436
    if_null rx2408_debug, debug_1393
    rx2408_cur."!cursor_debug"("NEXT", "quote:sym<Q>")
  debug_1393:
  rx2408_fail:
    (rx2408_rep, rx2408_pos, $I10, $P10) = rx2408_cur."!mark_fail"(0)
    lt rx2408_pos, -1, rx2408_done
    eq rx2408_pos, -1, rx2408_fail
    jump $I10
  rx2408_done:
    rx2408_cur."!cursor_fail"()
    if_null rx2408_debug, debug_1394
    rx2408_cur."!cursor_debug"("FAIL", "quote:sym<Q>")
  debug_1394:
    .return (rx2408_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<Q>"  :subid("280_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2412 = self."!PREFIX__!subrule"("ws", "Q")
    new $P2413, "ResizablePMCArray"
    push $P2413, $P2412
    .return ($P2413)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym<Q:PIR>"  :subid("281_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2415_tgt
    .local int rx2415_pos
    .local int rx2415_off
    .local int rx2415_eos
    .local int rx2415_rep
    .local pmc rx2415_cur
    .local pmc rx2415_debug
    (rx2415_cur, rx2415_pos, rx2415_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2415_cur
    .local pmc match
    .lex "$/", match
    length rx2415_eos, rx2415_tgt
    gt rx2415_pos, rx2415_eos, rx2415_done
    set rx2415_off, 0
    lt rx2415_pos, 2, rx2415_start
    sub rx2415_off, rx2415_pos, 1
    substr rx2415_tgt, rx2415_tgt, rx2415_off
  rx2415_start:
    eq $I10, 1, rx2415_restart
    if_null rx2415_debug, debug_1395
    rx2415_cur."!cursor_debug"("START", "quote:sym<Q:PIR>")
  debug_1395:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2416_done
    goto rxscan2416_scan
  rxscan2416_loop:
    (rx2415_pos) = rx2415_cur."from"()
    inc rx2415_pos
    rx2415_cur."!cursor_from"(rx2415_pos)
    ge rx2415_pos, rx2415_eos, rxscan2416_done
  rxscan2416_scan:
    set_addr $I10, rxscan2416_loop
    rx2415_cur."!mark_push"(0, rx2415_pos, $I10)
  rxscan2416_done:
.annotate 'line', 1014
  # rx subcapture "sym"
    set_addr $I10, rxcap_2417_fail
    rx2415_cur."!mark_push"(0, rx2415_pos, $I10)
  # rx literal  "Q:PIR"
    add $I11, rx2415_pos, 5
    gt $I11, rx2415_eos, rx2415_fail
    sub $I11, rx2415_pos, rx2415_off
    substr $S10, rx2415_tgt, $I11, 5
    ne $S10, "Q:PIR", rx2415_fail
    add rx2415_pos, 5
    set_addr $I10, rxcap_2417_fail
    ($I12, $I11) = rx2415_cur."!mark_peek"($I10)
    rx2415_cur."!cursor_pos"($I11)
    ($P10) = rx2415_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2415_pos, "")
    rx2415_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2417_done
  rxcap_2417_fail:
    goto rx2415_fail
  rxcap_2417_done:
  # rx subrule "ws" subtype=method negate=
    rx2415_cur."!cursor_pos"(rx2415_pos)
    $P10 = rx2415_cur."ws"()
    unless $P10, rx2415_fail
    rx2415_pos = $P10."pos"()
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2415_cur."!cursor_pos"(rx2415_pos)
    $P10 = rx2415_cur."quote_EXPR"()
    unless $P10, rx2415_fail
    rx2415_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2415_pos = $P10."pos"()
  # rx pass
    rx2415_cur."!cursor_pass"(rx2415_pos, "quote:sym<Q:PIR>")
    if_null rx2415_debug, debug_1396
    rx2415_cur."!cursor_debug"("PASS", "quote:sym<Q:PIR>", " at pos=", rx2415_pos)
  debug_1396:
    .return (rx2415_cur)
  rx2415_restart:
.annotate 'line', 436
    if_null rx2415_debug, debug_1397
    rx2415_cur."!cursor_debug"("NEXT", "quote:sym<Q:PIR>")
  debug_1397:
  rx2415_fail:
    (rx2415_rep, rx2415_pos, $I10, $P10) = rx2415_cur."!mark_fail"(0)
    lt rx2415_pos, -1, rx2415_done
    eq rx2415_pos, -1, rx2415_fail
    jump $I10
  rx2415_done:
    rx2415_cur."!cursor_fail"()
    if_null rx2415_debug, debug_1398
    rx2415_cur."!cursor_debug"("FAIL", "quote:sym<Q:PIR>")
  debug_1398:
    .return (rx2415_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym<Q:PIR>"  :subid("282_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2419 = self."!PREFIX__!subrule"("ws", "Q:PIR")
    new $P2420, "ResizablePMCArray"
    push $P2420, $P2419
    .return ($P2420)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote:sym</ />"  :subid("283_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2422_tgt
    .local int rx2422_pos
    .local int rx2422_off
    .local int rx2422_eos
    .local int rx2422_rep
    .local pmc rx2422_cur
    .local pmc rx2422_debug
    (rx2422_cur, rx2422_pos, rx2422_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2422_cur
    .local pmc match
    .lex "$/", match
    length rx2422_eos, rx2422_tgt
    gt rx2422_pos, rx2422_eos, rx2422_done
    set rx2422_off, 0
    lt rx2422_pos, 2, rx2422_start
    sub rx2422_off, rx2422_pos, 1
    substr rx2422_tgt, rx2422_tgt, rx2422_off
  rx2422_start:
    eq $I10, 1, rx2422_restart
    if_null rx2422_debug, debug_1399
    rx2422_cur."!cursor_debug"("START", "quote:sym</ />")
  debug_1399:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2423_done
    goto rxscan2423_scan
  rxscan2423_loop:
    (rx2422_pos) = rx2422_cur."from"()
    inc rx2422_pos
    rx2422_cur."!cursor_from"(rx2422_pos)
    ge rx2422_pos, rx2422_eos, rxscan2423_done
  rxscan2423_scan:
    set_addr $I10, rxscan2423_loop
    rx2422_cur."!mark_push"(0, rx2422_pos, $I10)
  rxscan2423_done:
.annotate 'line', 1016
  # rx literal  "/"
    add $I11, rx2422_pos, 1
    gt $I11, rx2422_eos, rx2422_fail
    sub $I11, rx2422_pos, rx2422_off
    ord $I11, rx2422_tgt, $I11
    ne $I11, 47, rx2422_fail
    add rx2422_pos, 1
.annotate 'line', 1017
  # rx subrule "newpad" subtype=method negate=
    rx2422_cur."!cursor_pos"(rx2422_pos)
    $P10 = rx2422_cur."newpad"()
    unless $P10, rx2422_fail
    rx2422_pos = $P10."pos"()
.annotate 'line', 1018
  # rx reduce name="quote:sym</ />" key="open"
    rx2422_cur."!cursor_pos"(rx2422_pos)
    rx2422_cur."!reduce"("quote:sym</ />", "open")
.annotate 'line', 1019
  # rx subrule "LANG" subtype=capture negate=
    rx2422_cur."!cursor_pos"(rx2422_pos)
    $P10 = rx2422_cur."LANG"("Regex", "nibbler")
    unless $P10, rx2422_fail
    rx2422_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("p6regex")
    rx2422_pos = $P10."pos"()
.annotate 'line', 1020
  # rx literal  "/"
    add $I11, rx2422_pos, 1
    gt $I11, rx2422_eos, rx2422_fail
    sub $I11, rx2422_pos, rx2422_off
    ord $I11, rx2422_tgt, $I11
    ne $I11, 47, rx2422_fail
    add rx2422_pos, 1
.annotate 'line', 1015
  # rx pass
    rx2422_cur."!cursor_pass"(rx2422_pos, "quote:sym</ />")
    if_null rx2422_debug, debug_1400
    rx2422_cur."!cursor_debug"("PASS", "quote:sym</ />", " at pos=", rx2422_pos)
  debug_1400:
    .return (rx2422_cur)
  rx2422_restart:
.annotate 'line', 436
    if_null rx2422_debug, debug_1401
    rx2422_cur."!cursor_debug"("NEXT", "quote:sym</ />")
  debug_1401:
  rx2422_fail:
    (rx2422_rep, rx2422_pos, $I10, $P10) = rx2422_cur."!mark_fail"(0)
    lt rx2422_pos, -1, rx2422_done
    eq rx2422_pos, -1, rx2422_fail
    jump $I10
  rx2422_done:
    rx2422_cur."!cursor_fail"()
    if_null rx2422_debug, debug_1402
    rx2422_cur."!cursor_debug"("FAIL", "quote:sym</ />")
  debug_1402:
    .return (rx2422_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote:sym</ />"  :subid("284_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2425 = self."!PREFIX__!subrule"("newpad", "/")
    new $P2426, "ResizablePMCArray"
    push $P2426, $P2425
    .return ($P2426)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<$>"  :subid("285_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2428_tgt
    .local int rx2428_pos
    .local int rx2428_off
    .local int rx2428_eos
    .local int rx2428_rep
    .local pmc rx2428_cur
    .local pmc rx2428_debug
    (rx2428_cur, rx2428_pos, rx2428_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2428_cur
    .local pmc match
    .lex "$/", match
    length rx2428_eos, rx2428_tgt
    gt rx2428_pos, rx2428_eos, rx2428_done
    set rx2428_off, 0
    lt rx2428_pos, 2, rx2428_start
    sub rx2428_off, rx2428_pos, 1
    substr rx2428_tgt, rx2428_tgt, rx2428_off
  rx2428_start:
    eq $I10, 1, rx2428_restart
    if_null rx2428_debug, debug_1403
    rx2428_cur."!cursor_debug"("START", "quote_escape:sym<$>")
  debug_1403:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2429_done
    goto rxscan2429_scan
  rxscan2429_loop:
    (rx2428_pos) = rx2428_cur."from"()
    inc rx2428_pos
    rx2428_cur."!cursor_from"(rx2428_pos)
    ge rx2428_pos, rx2428_eos, rxscan2429_done
  rxscan2429_scan:
    set_addr $I10, rxscan2429_loop
    rx2428_cur."!mark_push"(0, rx2428_pos, $I10)
  rxscan2429_done:
.annotate 'line', 1023
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2428_pos, rx2428_off
    substr $S10, rx2428_tgt, $I10, 1
    index $I11, "$", $S10
    lt $I11, 0, rx2428_fail
  # rx subrule "quotemod_check" subtype=zerowidth negate=
    rx2428_cur."!cursor_pos"(rx2428_pos)
    $P10 = rx2428_cur."quotemod_check"("s")
    unless $P10, rx2428_fail
  # rx subrule "variable" subtype=capture negate=
    rx2428_cur."!cursor_pos"(rx2428_pos)
    $P10 = rx2428_cur."variable"()
    unless $P10, rx2428_fail
    rx2428_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("variable")
    rx2428_pos = $P10."pos"()
  # rx pass
    rx2428_cur."!cursor_pass"(rx2428_pos, "quote_escape:sym<$>")
    if_null rx2428_debug, debug_1404
    rx2428_cur."!cursor_debug"("PASS", "quote_escape:sym<$>", " at pos=", rx2428_pos)
  debug_1404:
    .return (rx2428_cur)
  rx2428_restart:
.annotate 'line', 436
    if_null rx2428_debug, debug_1405
    rx2428_cur."!cursor_debug"("NEXT", "quote_escape:sym<$>")
  debug_1405:
  rx2428_fail:
    (rx2428_rep, rx2428_pos, $I10, $P10) = rx2428_cur."!mark_fail"(0)
    lt rx2428_pos, -1, rx2428_done
    eq rx2428_pos, -1, rx2428_fail
    jump $I10
  rx2428_done:
    rx2428_cur."!cursor_fail"()
    if_null rx2428_debug, debug_1406
    rx2428_cur."!cursor_debug"("FAIL", "quote_escape:sym<$>")
  debug_1406:
    .return (rx2428_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote_escape:sym<$>"  :subid("286_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2431, "ResizablePMCArray"
    push $P2431, "$"
    .return ($P2431)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<{ }>"  :subid("287_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2433_tgt
    .local int rx2433_pos
    .local int rx2433_off
    .local int rx2433_eos
    .local int rx2433_rep
    .local pmc rx2433_cur
    .local pmc rx2433_debug
    (rx2433_cur, rx2433_pos, rx2433_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2433_cur
    .local pmc match
    .lex "$/", match
    length rx2433_eos, rx2433_tgt
    gt rx2433_pos, rx2433_eos, rx2433_done
    set rx2433_off, 0
    lt rx2433_pos, 2, rx2433_start
    sub rx2433_off, rx2433_pos, 1
    substr rx2433_tgt, rx2433_tgt, rx2433_off
  rx2433_start:
    eq $I10, 1, rx2433_restart
    if_null rx2433_debug, debug_1407
    rx2433_cur."!cursor_debug"("START", "quote_escape:sym<{ }>")
  debug_1407:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2434_done
    goto rxscan2434_scan
  rxscan2434_loop:
    (rx2433_pos) = rx2433_cur."from"()
    inc rx2433_pos
    rx2433_cur."!cursor_from"(rx2433_pos)
    ge rx2433_pos, rx2433_eos, rxscan2434_done
  rxscan2434_scan:
    set_addr $I10, rxscan2434_loop
    rx2433_cur."!mark_push"(0, rx2433_pos, $I10)
  rxscan2434_done:
.annotate 'line', 1024
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2433_pos, rx2433_off
    substr $S10, rx2433_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx2433_fail
  # rx subrule "quotemod_check" subtype=zerowidth negate=
    rx2433_cur."!cursor_pos"(rx2433_pos)
    $P10 = rx2433_cur."quotemod_check"("c")
    unless $P10, rx2433_fail
  # rx subrule "block" subtype=capture negate=
    rx2433_cur."!cursor_pos"(rx2433_pos)
    $P10 = rx2433_cur."block"()
    unless $P10, rx2433_fail
    rx2433_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx2433_pos = $P10."pos"()
  # rx pass
    rx2433_cur."!cursor_pass"(rx2433_pos, "quote_escape:sym<{ }>")
    if_null rx2433_debug, debug_1408
    rx2433_cur."!cursor_debug"("PASS", "quote_escape:sym<{ }>", " at pos=", rx2433_pos)
  debug_1408:
    .return (rx2433_cur)
  rx2433_restart:
.annotate 'line', 436
    if_null rx2433_debug, debug_1409
    rx2433_cur."!cursor_debug"("NEXT", "quote_escape:sym<{ }>")
  debug_1409:
  rx2433_fail:
    (rx2433_rep, rx2433_pos, $I10, $P10) = rx2433_cur."!mark_fail"(0)
    lt rx2433_pos, -1, rx2433_done
    eq rx2433_pos, -1, rx2433_fail
    jump $I10
  rx2433_done:
    rx2433_cur."!cursor_fail"()
    if_null rx2433_debug, debug_1410
    rx2433_cur."!cursor_debug"("FAIL", "quote_escape:sym<{ }>")
  debug_1410:
    .return (rx2433_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote_escape:sym<{ }>"  :subid("288_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2436, "ResizablePMCArray"
    push $P2436, "{"
    .return ($P2436)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "quote_escape:sym<esc>"  :subid("289_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2438_tgt
    .local int rx2438_pos
    .local int rx2438_off
    .local int rx2438_eos
    .local int rx2438_rep
    .local pmc rx2438_cur
    .local pmc rx2438_debug
    (rx2438_cur, rx2438_pos, rx2438_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2438_cur
    .local pmc match
    .lex "$/", match
    length rx2438_eos, rx2438_tgt
    gt rx2438_pos, rx2438_eos, rx2438_done
    set rx2438_off, 0
    lt rx2438_pos, 2, rx2438_start
    sub rx2438_off, rx2438_pos, 1
    substr rx2438_tgt, rx2438_tgt, rx2438_off
  rx2438_start:
    eq $I10, 1, rx2438_restart
    if_null rx2438_debug, debug_1411
    rx2438_cur."!cursor_debug"("START", "quote_escape:sym<esc>")
  debug_1411:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2439_done
    goto rxscan2439_scan
  rxscan2439_loop:
    (rx2438_pos) = rx2438_cur."from"()
    inc rx2438_pos
    rx2438_cur."!cursor_from"(rx2438_pos)
    ge rx2438_pos, rx2438_eos, rxscan2439_done
  rxscan2439_scan:
    set_addr $I10, rxscan2439_loop
    rx2438_cur."!mark_push"(0, rx2438_pos, $I10)
  rxscan2439_done:
.annotate 'line', 1025
  # rx literal  "\\e"
    add $I11, rx2438_pos, 2
    gt $I11, rx2438_eos, rx2438_fail
    sub $I11, rx2438_pos, rx2438_off
    substr $S10, rx2438_tgt, $I11, 2
    ne $S10, "\\e", rx2438_fail
    add rx2438_pos, 2
  # rx subrule "quotemod_check" subtype=zerowidth negate=
    rx2438_cur."!cursor_pos"(rx2438_pos)
    $P10 = rx2438_cur."quotemod_check"("b")
    unless $P10, rx2438_fail
  # rx pass
    rx2438_cur."!cursor_pass"(rx2438_pos, "quote_escape:sym<esc>")
    if_null rx2438_debug, debug_1412
    rx2438_cur."!cursor_debug"("PASS", "quote_escape:sym<esc>", " at pos=", rx2438_pos)
  debug_1412:
    .return (rx2438_cur)
  rx2438_restart:
.annotate 'line', 436
    if_null rx2438_debug, debug_1413
    rx2438_cur."!cursor_debug"("NEXT", "quote_escape:sym<esc>")
  debug_1413:
  rx2438_fail:
    (rx2438_rep, rx2438_pos, $I10, $P10) = rx2438_cur."!mark_fail"(0)
    lt rx2438_pos, -1, rx2438_done
    eq rx2438_pos, -1, rx2438_fail
    jump $I10
  rx2438_done:
    rx2438_cur."!cursor_fail"()
    if_null rx2438_debug, debug_1414
    rx2438_cur."!cursor_debug"("FAIL", "quote_escape:sym<esc>")
  debug_1414:
    .return (rx2438_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__quote_escape:sym<esc>"  :subid("290_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2441, "ResizablePMCArray"
    push $P2441, "\\e"
    .return ($P2441)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<( )>"  :subid("291_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2443_tgt
    .local int rx2443_pos
    .local int rx2443_off
    .local int rx2443_eos
    .local int rx2443_rep
    .local pmc rx2443_cur
    .local pmc rx2443_debug
    (rx2443_cur, rx2443_pos, rx2443_tgt, $I10) = self."!cursor_start"()
    rx2443_cur."!cursor_caparray"("EXPR")
    .lex unicode:"$\x{a2}", rx2443_cur
    .local pmc match
    .lex "$/", match
    length rx2443_eos, rx2443_tgt
    gt rx2443_pos, rx2443_eos, rx2443_done
    set rx2443_off, 0
    lt rx2443_pos, 2, rx2443_start
    sub rx2443_off, rx2443_pos, 1
    substr rx2443_tgt, rx2443_tgt, rx2443_off
  rx2443_start:
    eq $I10, 1, rx2443_restart
    if_null rx2443_debug, debug_1415
    rx2443_cur."!cursor_debug"("START", "circumfix:sym<( )>")
  debug_1415:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2444_done
    goto rxscan2444_scan
  rxscan2444_loop:
    (rx2443_pos) = rx2443_cur."from"()
    inc rx2443_pos
    rx2443_cur."!cursor_from"(rx2443_pos)
    ge rx2443_pos, rx2443_eos, rxscan2444_done
  rxscan2444_scan:
    set_addr $I10, rxscan2444_loop
    rx2443_cur."!mark_push"(0, rx2443_pos, $I10)
  rxscan2444_done:
.annotate 'line', 1027
  # rx literal  "("
    add $I11, rx2443_pos, 1
    gt $I11, rx2443_eos, rx2443_fail
    sub $I11, rx2443_pos, rx2443_off
    ord $I11, rx2443_tgt, $I11
    ne $I11, 40, rx2443_fail
    add rx2443_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2443_cur."!cursor_pos"(rx2443_pos)
    $P10 = rx2443_cur."ws"()
    unless $P10, rx2443_fail
    rx2443_pos = $P10."pos"()
  # rx rxquantr2445 ** 0..1
    set_addr $I10, rxquantr2445_done
    rx2443_cur."!mark_push"(0, rx2443_pos, $I10)
  rxquantr2445_loop:
  # rx subrule "EXPR" subtype=capture negate=
    rx2443_cur."!cursor_pos"(rx2443_pos)
    $P10 = rx2443_cur."EXPR"()
    unless $P10, rx2443_fail
    goto rxsubrule2446_pass
  rxsubrule2446_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2443_fail
  rxsubrule2446_pass:
    set_addr $I10, rxsubrule2446_back
    rx2443_cur."!mark_push"(0, rx2443_pos, $I10, $P10)
    $P10."!cursor_names"("EXPR")
    rx2443_pos = $P10."pos"()
    set_addr $I10, rxquantr2445_done
    (rx2443_rep) = rx2443_cur."!mark_commit"($I10)
  rxquantr2445_done:
  # rx literal  ")"
    add $I11, rx2443_pos, 1
    gt $I11, rx2443_eos, rx2443_fail
    sub $I11, rx2443_pos, rx2443_off
    ord $I11, rx2443_tgt, $I11
    ne $I11, 41, rx2443_fail
    add rx2443_pos, 1
  # rx pass
    rx2443_cur."!cursor_pass"(rx2443_pos, "circumfix:sym<( )>")
    if_null rx2443_debug, debug_1416
    rx2443_cur."!cursor_debug"("PASS", "circumfix:sym<( )>", " at pos=", rx2443_pos)
  debug_1416:
    .return (rx2443_cur)
  rx2443_restart:
.annotate 'line', 436
    if_null rx2443_debug, debug_1417
    rx2443_cur."!cursor_debug"("NEXT", "circumfix:sym<( )>")
  debug_1417:
  rx2443_fail:
    (rx2443_rep, rx2443_pos, $I10, $P10) = rx2443_cur."!mark_fail"(0)
    lt rx2443_pos, -1, rx2443_done
    eq rx2443_pos, -1, rx2443_fail
    jump $I10
  rx2443_done:
    rx2443_cur."!cursor_fail"()
    if_null rx2443_debug, debug_1418
    rx2443_cur."!cursor_debug"("FAIL", "circumfix:sym<( )>")
  debug_1418:
    .return (rx2443_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<( )>"  :subid("292_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2448 = self."!PREFIX__!subrule"("ws", "(")
    new $P2449, "ResizablePMCArray"
    push $P2449, $P2448
    .return ($P2449)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<[ ]>"  :subid("293_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2451_tgt
    .local int rx2451_pos
    .local int rx2451_off
    .local int rx2451_eos
    .local int rx2451_rep
    .local pmc rx2451_cur
    .local pmc rx2451_debug
    (rx2451_cur, rx2451_pos, rx2451_tgt, $I10) = self."!cursor_start"()
    rx2451_cur."!cursor_caparray"("EXPR")
    .lex unicode:"$\x{a2}", rx2451_cur
    .local pmc match
    .lex "$/", match
    length rx2451_eos, rx2451_tgt
    gt rx2451_pos, rx2451_eos, rx2451_done
    set rx2451_off, 0
    lt rx2451_pos, 2, rx2451_start
    sub rx2451_off, rx2451_pos, 1
    substr rx2451_tgt, rx2451_tgt, rx2451_off
  rx2451_start:
    eq $I10, 1, rx2451_restart
    if_null rx2451_debug, debug_1419
    rx2451_cur."!cursor_debug"("START", "circumfix:sym<[ ]>")
  debug_1419:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2452_done
    goto rxscan2452_scan
  rxscan2452_loop:
    (rx2451_pos) = rx2451_cur."from"()
    inc rx2451_pos
    rx2451_cur."!cursor_from"(rx2451_pos)
    ge rx2451_pos, rx2451_eos, rxscan2452_done
  rxscan2452_scan:
    set_addr $I10, rxscan2452_loop
    rx2451_cur."!mark_push"(0, rx2451_pos, $I10)
  rxscan2452_done:
.annotate 'line', 1028
  # rx literal  "["
    add $I11, rx2451_pos, 1
    gt $I11, rx2451_eos, rx2451_fail
    sub $I11, rx2451_pos, rx2451_off
    ord $I11, rx2451_tgt, $I11
    ne $I11, 91, rx2451_fail
    add rx2451_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2451_cur."!cursor_pos"(rx2451_pos)
    $P10 = rx2451_cur."ws"()
    unless $P10, rx2451_fail
    rx2451_pos = $P10."pos"()
  # rx rxquantr2453 ** 0..1
    set_addr $I10, rxquantr2453_done
    rx2451_cur."!mark_push"(0, rx2451_pos, $I10)
  rxquantr2453_loop:
  # rx subrule "EXPR" subtype=capture negate=
    rx2451_cur."!cursor_pos"(rx2451_pos)
    $P10 = rx2451_cur."EXPR"()
    unless $P10, rx2451_fail
    goto rxsubrule2454_pass
  rxsubrule2454_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2451_fail
  rxsubrule2454_pass:
    set_addr $I10, rxsubrule2454_back
    rx2451_cur."!mark_push"(0, rx2451_pos, $I10, $P10)
    $P10."!cursor_names"("EXPR")
    rx2451_pos = $P10."pos"()
    set_addr $I10, rxquantr2453_done
    (rx2451_rep) = rx2451_cur."!mark_commit"($I10)
  rxquantr2453_done:
  # rx literal  "]"
    add $I11, rx2451_pos, 1
    gt $I11, rx2451_eos, rx2451_fail
    sub $I11, rx2451_pos, rx2451_off
    ord $I11, rx2451_tgt, $I11
    ne $I11, 93, rx2451_fail
    add rx2451_pos, 1
  # rx pass
    rx2451_cur."!cursor_pass"(rx2451_pos, "circumfix:sym<[ ]>")
    if_null rx2451_debug, debug_1420
    rx2451_cur."!cursor_debug"("PASS", "circumfix:sym<[ ]>", " at pos=", rx2451_pos)
  debug_1420:
    .return (rx2451_cur)
  rx2451_restart:
.annotate 'line', 436
    if_null rx2451_debug, debug_1421
    rx2451_cur."!cursor_debug"("NEXT", "circumfix:sym<[ ]>")
  debug_1421:
  rx2451_fail:
    (rx2451_rep, rx2451_pos, $I10, $P10) = rx2451_cur."!mark_fail"(0)
    lt rx2451_pos, -1, rx2451_done
    eq rx2451_pos, -1, rx2451_fail
    jump $I10
  rx2451_done:
    rx2451_cur."!cursor_fail"()
    if_null rx2451_debug, debug_1422
    rx2451_cur."!cursor_debug"("FAIL", "circumfix:sym<[ ]>")
  debug_1422:
    .return (rx2451_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<[ ]>"  :subid("294_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2456 = self."!PREFIX__!subrule"("ws", "[")
    new $P2457, "ResizablePMCArray"
    push $P2457, $P2456
    .return ($P2457)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<ang>"  :subid("295_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2459_tgt
    .local int rx2459_pos
    .local int rx2459_off
    .local int rx2459_eos
    .local int rx2459_rep
    .local pmc rx2459_cur
    .local pmc rx2459_debug
    (rx2459_cur, rx2459_pos, rx2459_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2459_cur
    .local pmc match
    .lex "$/", match
    length rx2459_eos, rx2459_tgt
    gt rx2459_pos, rx2459_eos, rx2459_done
    set rx2459_off, 0
    lt rx2459_pos, 2, rx2459_start
    sub rx2459_off, rx2459_pos, 1
    substr rx2459_tgt, rx2459_tgt, rx2459_off
  rx2459_start:
    eq $I10, 1, rx2459_restart
    if_null rx2459_debug, debug_1423
    rx2459_cur."!cursor_debug"("START", "circumfix:sym<ang>")
  debug_1423:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2460_done
    goto rxscan2460_scan
  rxscan2460_loop:
    (rx2459_pos) = rx2459_cur."from"()
    inc rx2459_pos
    rx2459_cur."!cursor_from"(rx2459_pos)
    ge rx2459_pos, rx2459_eos, rxscan2460_done
  rxscan2460_scan:
    set_addr $I10, rxscan2460_loop
    rx2459_cur."!mark_push"(0, rx2459_pos, $I10)
  rxscan2460_done:
.annotate 'line', 1029
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2459_pos, rx2459_off
    substr $S10, rx2459_tgt, $I10, 1
    index $I11, "<", $S10
    lt $I11, 0, rx2459_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2459_cur."!cursor_pos"(rx2459_pos)
    $P10 = rx2459_cur."quote_EXPR"(":q", ":w")
    unless $P10, rx2459_fail
    rx2459_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2459_pos = $P10."pos"()
  # rx pass
    rx2459_cur."!cursor_pass"(rx2459_pos, "circumfix:sym<ang>")
    if_null rx2459_debug, debug_1424
    rx2459_cur."!cursor_debug"("PASS", "circumfix:sym<ang>", " at pos=", rx2459_pos)
  debug_1424:
    .return (rx2459_cur)
  rx2459_restart:
.annotate 'line', 436
    if_null rx2459_debug, debug_1425
    rx2459_cur."!cursor_debug"("NEXT", "circumfix:sym<ang>")
  debug_1425:
  rx2459_fail:
    (rx2459_rep, rx2459_pos, $I10, $P10) = rx2459_cur."!mark_fail"(0)
    lt rx2459_pos, -1, rx2459_done
    eq rx2459_pos, -1, rx2459_fail
    jump $I10
  rx2459_done:
    rx2459_cur."!cursor_fail"()
    if_null rx2459_debug, debug_1426
    rx2459_cur."!cursor_debug"("FAIL", "circumfix:sym<ang>")
  debug_1426:
    .return (rx2459_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<ang>"  :subid("296_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2462, "ResizablePMCArray"
    push $P2462, "<"
    .return ($P2462)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub unicode:"circumfix:sym<\x{ab} \x{bb}>"  :subid("297_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2464_tgt
    .local int rx2464_pos
    .local int rx2464_off
    .local int rx2464_eos
    .local int rx2464_rep
    .local pmc rx2464_cur
    .local pmc rx2464_debug
    (rx2464_cur, rx2464_pos, rx2464_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2464_cur
    .local pmc match
    .lex "$/", match
    length rx2464_eos, rx2464_tgt
    gt rx2464_pos, rx2464_eos, rx2464_done
    set rx2464_off, 0
    lt rx2464_pos, 2, rx2464_start
    sub rx2464_off, rx2464_pos, 1
    substr rx2464_tgt, rx2464_tgt, rx2464_off
  rx2464_start:
    eq $I10, 1, rx2464_restart
    if_null rx2464_debug, debug_1427
    rx2464_cur."!cursor_debug"("START", unicode:"circumfix:sym<\x{ab} \x{bb}>")
  debug_1427:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2465_done
    goto rxscan2465_scan
  rxscan2465_loop:
    (rx2464_pos) = rx2464_cur."from"()
    inc rx2464_pos
    rx2464_cur."!cursor_from"(rx2464_pos)
    ge rx2464_pos, rx2464_eos, rxscan2465_done
  rxscan2465_scan:
    set_addr $I10, rxscan2465_loop
    rx2464_cur."!mark_push"(0, rx2464_pos, $I10)
  rxscan2465_done:
.annotate 'line', 1030
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2464_pos, rx2464_off
    substr $S10, rx2464_tgt, $I10, 1
    index $I11, unicode:"\x{ab}", $S10
    lt $I11, 0, rx2464_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2464_cur."!cursor_pos"(rx2464_pos)
    $P10 = rx2464_cur."quote_EXPR"(":qq", ":w")
    unless $P10, rx2464_fail
    rx2464_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2464_pos = $P10."pos"()
  # rx pass
    rx2464_cur."!cursor_pass"(rx2464_pos, unicode:"circumfix:sym<\x{ab} \x{bb}>")
    if_null rx2464_debug, debug_1428
    rx2464_cur."!cursor_debug"("PASS", unicode:"circumfix:sym<\x{ab} \x{bb}>", " at pos=", rx2464_pos)
  debug_1428:
    .return (rx2464_cur)
  rx2464_restart:
.annotate 'line', 436
    if_null rx2464_debug, debug_1429
    rx2464_cur."!cursor_debug"("NEXT", unicode:"circumfix:sym<\x{ab} \x{bb}>")
  debug_1429:
  rx2464_fail:
    (rx2464_rep, rx2464_pos, $I10, $P10) = rx2464_cur."!mark_fail"(0)
    lt rx2464_pos, -1, rx2464_done
    eq rx2464_pos, -1, rx2464_fail
    jump $I10
  rx2464_done:
    rx2464_cur."!cursor_fail"()
    if_null rx2464_debug, debug_1430
    rx2464_cur."!cursor_debug"("FAIL", unicode:"circumfix:sym<\x{ab} \x{bb}>")
  debug_1430:
    .return (rx2464_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub unicode:"!PREFIX__circumfix:sym<\x{ab} \x{bb}>"  :subid("298_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2467, "ResizablePMCArray"
    push $P2467, unicode:"\x{ab}"
    .return ($P2467)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<{ }>"  :subid("299_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2469_tgt
    .local int rx2469_pos
    .local int rx2469_off
    .local int rx2469_eos
    .local int rx2469_rep
    .local pmc rx2469_cur
    .local pmc rx2469_debug
    (rx2469_cur, rx2469_pos, rx2469_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2469_cur
    .local pmc match
    .lex "$/", match
    length rx2469_eos, rx2469_tgt
    gt rx2469_pos, rx2469_eos, rx2469_done
    set rx2469_off, 0
    lt rx2469_pos, 2, rx2469_start
    sub rx2469_off, rx2469_pos, 1
    substr rx2469_tgt, rx2469_tgt, rx2469_off
  rx2469_start:
    eq $I10, 1, rx2469_restart
    if_null rx2469_debug, debug_1431
    rx2469_cur."!cursor_debug"("START", "circumfix:sym<{ }>")
  debug_1431:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2470_done
    goto rxscan2470_scan
  rxscan2470_loop:
    (rx2469_pos) = rx2469_cur."from"()
    inc rx2469_pos
    rx2469_cur."!cursor_from"(rx2469_pos)
    ge rx2469_pos, rx2469_eos, rxscan2470_done
  rxscan2470_scan:
    set_addr $I10, rxscan2470_loop
    rx2469_cur."!mark_push"(0, rx2469_pos, $I10)
  rxscan2470_done:
.annotate 'line', 1031
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2469_pos, rx2469_off
    substr $S10, rx2469_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx2469_fail
  # rx subrule "pblock" subtype=capture negate=
    rx2469_cur."!cursor_pos"(rx2469_pos)
    $P10 = rx2469_cur."pblock"()
    unless $P10, rx2469_fail
    rx2469_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("pblock")
    rx2469_pos = $P10."pos"()
  # rx pass
    rx2469_cur."!cursor_pass"(rx2469_pos, "circumfix:sym<{ }>")
    if_null rx2469_debug, debug_1432
    rx2469_cur."!cursor_debug"("PASS", "circumfix:sym<{ }>", " at pos=", rx2469_pos)
  debug_1432:
    .return (rx2469_cur)
  rx2469_restart:
.annotate 'line', 436
    if_null rx2469_debug, debug_1433
    rx2469_cur."!cursor_debug"("NEXT", "circumfix:sym<{ }>")
  debug_1433:
  rx2469_fail:
    (rx2469_rep, rx2469_pos, $I10, $P10) = rx2469_cur."!mark_fail"(0)
    lt rx2469_pos, -1, rx2469_done
    eq rx2469_pos, -1, rx2469_fail
    jump $I10
  rx2469_done:
    rx2469_cur."!cursor_fail"()
    if_null rx2469_debug, debug_1434
    rx2469_cur."!cursor_debug"("FAIL", "circumfix:sym<{ }>")
  debug_1434:
    .return (rx2469_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<{ }>"  :subid("300_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2472, "ResizablePMCArray"
    push $P2472, "{"
    .return ($P2472)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "circumfix:sym<sigil>"  :subid("301_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2474_tgt
    .local int rx2474_pos
    .local int rx2474_off
    .local int rx2474_eos
    .local int rx2474_rep
    .local pmc rx2474_cur
    .local pmc rx2474_debug
    (rx2474_cur, rx2474_pos, rx2474_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2474_cur
    .local pmc match
    .lex "$/", match
    length rx2474_eos, rx2474_tgt
    gt rx2474_pos, rx2474_eos, rx2474_done
    set rx2474_off, 0
    lt rx2474_pos, 2, rx2474_start
    sub rx2474_off, rx2474_pos, 1
    substr rx2474_tgt, rx2474_tgt, rx2474_off
  rx2474_start:
    eq $I10, 1, rx2474_restart
    if_null rx2474_debug, debug_1435
    rx2474_cur."!cursor_debug"("START", "circumfix:sym<sigil>")
  debug_1435:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2475_done
    goto rxscan2475_scan
  rxscan2475_loop:
    (rx2474_pos) = rx2474_cur."from"()
    inc rx2474_pos
    rx2474_cur."!cursor_from"(rx2474_pos)
    ge rx2474_pos, rx2474_eos, rxscan2475_done
  rxscan2475_scan:
    set_addr $I10, rxscan2475_loop
    rx2474_cur."!mark_push"(0, rx2474_pos, $I10)
  rxscan2475_done:
.annotate 'line', 1032
  # rx subrule "sigil" subtype=capture negate=
    rx2474_cur."!cursor_pos"(rx2474_pos)
    $P10 = rx2474_cur."sigil"()
    unless $P10, rx2474_fail
    rx2474_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sigil")
    rx2474_pos = $P10."pos"()
  # rx literal  "("
    add $I11, rx2474_pos, 1
    gt $I11, rx2474_eos, rx2474_fail
    sub $I11, rx2474_pos, rx2474_off
    ord $I11, rx2474_tgt, $I11
    ne $I11, 40, rx2474_fail
    add rx2474_pos, 1
  # rx subrule "semilist" subtype=capture negate=
    rx2474_cur."!cursor_pos"(rx2474_pos)
    $P10 = rx2474_cur."semilist"()
    unless $P10, rx2474_fail
    rx2474_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("semilist")
    rx2474_pos = $P10."pos"()
  alt2476_0:
    set_addr $I10, alt2476_1
    rx2474_cur."!mark_push"(0, rx2474_pos, $I10)
  # rx literal  ")"
    add $I11, rx2474_pos, 1
    gt $I11, rx2474_eos, rx2474_fail
    sub $I11, rx2474_pos, rx2474_off
    ord $I11, rx2474_tgt, $I11
    ne $I11, 41, rx2474_fail
    add rx2474_pos, 1
    goto alt2476_end
  alt2476_1:
  # rx subrule "FAILGOAL" subtype=method negate=
    rx2474_cur."!cursor_pos"(rx2474_pos)
    $P10 = rx2474_cur."FAILGOAL"("')'")
    unless $P10, rx2474_fail
    goto rxsubrule2478_pass
  rxsubrule2478_back:
    $P10 = $P10."!cursor_next"()
    unless $P10, rx2474_fail
  rxsubrule2478_pass:
    set_addr $I10, rxsubrule2478_back
    rx2474_cur."!mark_push"(0, rx2474_pos, $I10, $P10)
    rx2474_pos = $P10."pos"()
  alt2476_end:
  # rx pass
    rx2474_cur."!cursor_pass"(rx2474_pos, "circumfix:sym<sigil>")
    if_null rx2474_debug, debug_1436
    rx2474_cur."!cursor_debug"("PASS", "circumfix:sym<sigil>", " at pos=", rx2474_pos)
  debug_1436:
    .return (rx2474_cur)
  rx2474_restart:
.annotate 'line', 436
    if_null rx2474_debug, debug_1437
    rx2474_cur."!cursor_debug"("NEXT", "circumfix:sym<sigil>")
  debug_1437:
  rx2474_fail:
    (rx2474_rep, rx2474_pos, $I10, $P10) = rx2474_cur."!mark_fail"(0)
    lt rx2474_pos, -1, rx2474_done
    eq rx2474_pos, -1, rx2474_fail
    jump $I10
  rx2474_done:
    rx2474_cur."!cursor_fail"()
    if_null rx2474_debug, debug_1438
    rx2474_cur."!cursor_debug"("FAIL", "circumfix:sym<sigil>")
  debug_1438:
    .return (rx2474_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__circumfix:sym<sigil>"  :subid("302_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2480 = self."!PREFIX__!subrule"("sigil", "")
    new $P2481, "ResizablePMCArray"
    push $P2481, $P2480
    .return ($P2481)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "semilist"  :subid("303_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2483_tgt
    .local int rx2483_pos
    .local int rx2483_off
    .local int rx2483_eos
    .local int rx2483_rep
    .local pmc rx2483_cur
    .local pmc rx2483_debug
    (rx2483_cur, rx2483_pos, rx2483_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2483_cur
    .local pmc match
    .lex "$/", match
    length rx2483_eos, rx2483_tgt
    gt rx2483_pos, rx2483_eos, rx2483_done
    set rx2483_off, 0
    lt rx2483_pos, 2, rx2483_start
    sub rx2483_off, rx2483_pos, 1
    substr rx2483_tgt, rx2483_tgt, rx2483_off
  rx2483_start:
    eq $I10, 1, rx2483_restart
    if_null rx2483_debug, debug_1439
    rx2483_cur."!cursor_debug"("START", "semilist")
  debug_1439:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2484_done
    goto rxscan2484_scan
  rxscan2484_loop:
    (rx2483_pos) = rx2483_cur."from"()
    inc rx2483_pos
    rx2483_cur."!cursor_from"(rx2483_pos)
    ge rx2483_pos, rx2483_eos, rxscan2484_done
  rxscan2484_scan:
    set_addr $I10, rxscan2484_loop
    rx2483_cur."!mark_push"(0, rx2483_pos, $I10)
  rxscan2484_done:
.annotate 'line', 1034
  # rx subrule "ws" subtype=method negate=
    rx2483_cur."!cursor_pos"(rx2483_pos)
    $P10 = rx2483_cur."ws"()
    unless $P10, rx2483_fail
    rx2483_pos = $P10."pos"()
  # rx subrule "statement" subtype=capture negate=
    rx2483_cur."!cursor_pos"(rx2483_pos)
    $P10 = rx2483_cur."statement"()
    unless $P10, rx2483_fail
    rx2483_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx2483_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2483_cur."!cursor_pos"(rx2483_pos)
    $P10 = rx2483_cur."ws"()
    unless $P10, rx2483_fail
    rx2483_pos = $P10."pos"()
  # rx pass
    rx2483_cur."!cursor_pass"(rx2483_pos, "semilist")
    if_null rx2483_debug, debug_1440
    rx2483_cur."!cursor_debug"("PASS", "semilist", " at pos=", rx2483_pos)
  debug_1440:
    .return (rx2483_cur)
  rx2483_restart:
.annotate 'line', 436
    if_null rx2483_debug, debug_1441
    rx2483_cur."!cursor_debug"("NEXT", "semilist")
  debug_1441:
  rx2483_fail:
    (rx2483_rep, rx2483_pos, $I10, $P10) = rx2483_cur."!mark_fail"(0)
    lt rx2483_pos, -1, rx2483_done
    eq rx2483_pos, -1, rx2483_fail
    jump $I10
  rx2483_done:
    rx2483_cur."!cursor_fail"()
    if_null rx2483_debug, debug_1442
    rx2483_cur."!cursor_debug"("FAIL", "semilist")
  debug_1442:
    .return (rx2483_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__semilist"  :subid("304_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2488 = self."!PREFIX__!subrule"("ws", "")
    new $P2489, "ResizablePMCArray"
    push $P2489, $P2488
    .return ($P2489)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infixish"  :subid("305_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2491_tgt
    .local int rx2491_pos
    .local int rx2491_off
    .local int rx2491_eos
    .local int rx2491_rep
    .local pmc rx2491_cur
    .local pmc rx2491_debug
    (rx2491_cur, rx2491_pos, rx2491_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2491_cur
    .local pmc match
    .lex "$/", match
    length rx2491_eos, rx2491_tgt
    gt rx2491_pos, rx2491_eos, rx2491_done
    set rx2491_off, 0
    lt rx2491_pos, 2, rx2491_start
    sub rx2491_off, rx2491_pos, 1
    substr rx2491_tgt, rx2491_tgt, rx2491_off
  rx2491_start:
    eq $I10, 1, rx2491_restart
    if_null rx2491_debug, debug_1443
    rx2491_cur."!cursor_debug"("START", "infixish")
  debug_1443:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2492_done
    goto rxscan2492_scan
  rxscan2492_loop:
    (rx2491_pos) = rx2491_cur."from"()
    inc rx2491_pos
    rx2491_cur."!cursor_from"(rx2491_pos)
    ge rx2491_pos, rx2491_eos, rxscan2492_done
  rxscan2492_scan:
    set_addr $I10, rxscan2492_loop
    rx2491_cur."!mark_push"(0, rx2491_pos, $I10)
  rxscan2492_done:
.annotate 'line', 1057
  # rx subrule "infixstopper" subtype=zerowidth negate=1
    rx2491_cur."!cursor_pos"(rx2491_pos)
    $P10 = rx2491_cur."infixstopper"()
    if $P10, rx2491_fail
  # rx subrule "infix" subtype=capture negate=
    rx2491_cur."!cursor_pos"(rx2491_pos)
    $P10 = rx2491_cur."infix"()
    unless $P10, rx2491_fail
    rx2491_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("OPER=infix")
    rx2491_pos = $P10."pos"()
  # rx pass
    rx2491_cur."!cursor_pass"(rx2491_pos, "infixish")
    if_null rx2491_debug, debug_1444
    rx2491_cur."!cursor_debug"("PASS", "infixish", " at pos=", rx2491_pos)
  debug_1444:
    .return (rx2491_cur)
  rx2491_restart:
.annotate 'line', 436
    if_null rx2491_debug, debug_1445
    rx2491_cur."!cursor_debug"("NEXT", "infixish")
  debug_1445:
  rx2491_fail:
    (rx2491_rep, rx2491_pos, $I10, $P10) = rx2491_cur."!mark_fail"(0)
    lt rx2491_pos, -1, rx2491_done
    eq rx2491_pos, -1, rx2491_fail
    jump $I10
  rx2491_done:
    rx2491_cur."!cursor_fail"()
    if_null rx2491_debug, debug_1446
    rx2491_cur."!cursor_debug"("FAIL", "infixish")
  debug_1446:
    .return (rx2491_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infixish"  :subid("306_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2494, "ResizablePMCArray"
    push $P2494, ""
    .return ($P2494)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infixstopper"  :subid("307_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2496_tgt
    .local int rx2496_pos
    .local int rx2496_off
    .local int rx2496_eos
    .local int rx2496_rep
    .local pmc rx2496_cur
    .local pmc rx2496_debug
    (rx2496_cur, rx2496_pos, rx2496_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2496_cur
    .local pmc match
    .lex "$/", match
    length rx2496_eos, rx2496_tgt
    gt rx2496_pos, rx2496_eos, rx2496_done
    set rx2496_off, 0
    lt rx2496_pos, 2, rx2496_start
    sub rx2496_off, rx2496_pos, 1
    substr rx2496_tgt, rx2496_tgt, rx2496_off
  rx2496_start:
    eq $I10, 1, rx2496_restart
    if_null rx2496_debug, debug_1447
    rx2496_cur."!cursor_debug"("START", "infixstopper")
  debug_1447:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2497_done
    goto rxscan2497_scan
  rxscan2497_loop:
    (rx2496_pos) = rx2496_cur."from"()
    inc rx2496_pos
    rx2496_cur."!cursor_from"(rx2496_pos)
    ge rx2496_pos, rx2496_eos, rxscan2497_done
  rxscan2497_scan:
    set_addr $I10, rxscan2497_loop
    rx2496_cur."!mark_push"(0, rx2496_pos, $I10)
  rxscan2497_done:
.annotate 'line', 1058
  # rx subrule "lambda" subtype=zerowidth negate=
    rx2496_cur."!cursor_pos"(rx2496_pos)
    $P10 = rx2496_cur."lambda"()
    unless $P10, rx2496_fail
  # rx pass
    rx2496_cur."!cursor_pass"(rx2496_pos, "infixstopper")
    if_null rx2496_debug, debug_1448
    rx2496_cur."!cursor_debug"("PASS", "infixstopper", " at pos=", rx2496_pos)
  debug_1448:
    .return (rx2496_cur)
  rx2496_restart:
.annotate 'line', 436
    if_null rx2496_debug, debug_1449
    rx2496_cur."!cursor_debug"("NEXT", "infixstopper")
  debug_1449:
  rx2496_fail:
    (rx2496_rep, rx2496_pos, $I10, $P10) = rx2496_cur."!mark_fail"(0)
    lt rx2496_pos, -1, rx2496_done
    eq rx2496_pos, -1, rx2496_fail
    jump $I10
  rx2496_done:
    rx2496_cur."!cursor_fail"()
    if_null rx2496_debug, debug_1450
    rx2496_cur."!cursor_debug"("FAIL", "infixstopper")
  debug_1450:
    .return (rx2496_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infixstopper"  :subid("308_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2499, "ResizablePMCArray"
    push $P2499, ""
    .return ($P2499)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<[ ]>"  :subid("309_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2501_tgt
    .local int rx2501_pos
    .local int rx2501_off
    .local int rx2501_eos
    .local int rx2501_rep
    .local pmc rx2501_cur
    .local pmc rx2501_debug
    (rx2501_cur, rx2501_pos, rx2501_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2501_cur
    .local pmc match
    .lex "$/", match
    length rx2501_eos, rx2501_tgt
    gt rx2501_pos, rx2501_eos, rx2501_done
    set rx2501_off, 0
    lt rx2501_pos, 2, rx2501_start
    sub rx2501_off, rx2501_pos, 1
    substr rx2501_tgt, rx2501_tgt, rx2501_off
  rx2501_start:
    eq $I10, 1, rx2501_restart
    if_null rx2501_debug, debug_1451
    rx2501_cur."!cursor_debug"("START", "postcircumfix:sym<[ ]>")
  debug_1451:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2502_done
    goto rxscan2502_scan
  rxscan2502_loop:
    (rx2501_pos) = rx2501_cur."from"()
    inc rx2501_pos
    rx2501_cur."!cursor_from"(rx2501_pos)
    ge rx2501_pos, rx2501_eos, rxscan2502_done
  rxscan2502_scan:
    set_addr $I10, rxscan2502_loop
    rx2501_cur."!mark_push"(0, rx2501_pos, $I10)
  rxscan2502_done:
.annotate 'line', 1061
  # rx literal  "["
    add $I11, rx2501_pos, 1
    gt $I11, rx2501_eos, rx2501_fail
    sub $I11, rx2501_pos, rx2501_off
    ord $I11, rx2501_tgt, $I11
    ne $I11, 91, rx2501_fail
    add rx2501_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2501_cur."!cursor_pos"(rx2501_pos)
    $P10 = rx2501_cur."ws"()
    unless $P10, rx2501_fail
    rx2501_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx2501_cur."!cursor_pos"(rx2501_pos)
    $P10 = rx2501_cur."EXPR"()
    unless $P10, rx2501_fail
    rx2501_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx2501_pos = $P10."pos"()
  # rx literal  "]"
    add $I11, rx2501_pos, 1
    gt $I11, rx2501_eos, rx2501_fail
    sub $I11, rx2501_pos, rx2501_off
    ord $I11, rx2501_tgt, $I11
    ne $I11, 93, rx2501_fail
    add rx2501_pos, 1
.annotate 'line', 1062
  # rx subrule "O" subtype=capture negate=
    rx2501_cur."!cursor_pos"(rx2501_pos)
    $P10 = rx2501_cur."O"("%methodop")
    unless $P10, rx2501_fail
    rx2501_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2501_pos = $P10."pos"()
.annotate 'line', 1060
  # rx pass
    rx2501_cur."!cursor_pass"(rx2501_pos, "postcircumfix:sym<[ ]>")
    if_null rx2501_debug, debug_1452
    rx2501_cur."!cursor_debug"("PASS", "postcircumfix:sym<[ ]>", " at pos=", rx2501_pos)
  debug_1452:
    .return (rx2501_cur)
  rx2501_restart:
.annotate 'line', 436
    if_null rx2501_debug, debug_1453
    rx2501_cur."!cursor_debug"("NEXT", "postcircumfix:sym<[ ]>")
  debug_1453:
  rx2501_fail:
    (rx2501_rep, rx2501_pos, $I10, $P10) = rx2501_cur."!mark_fail"(0)
    lt rx2501_pos, -1, rx2501_done
    eq rx2501_pos, -1, rx2501_fail
    jump $I10
  rx2501_done:
    rx2501_cur."!cursor_fail"()
    if_null rx2501_debug, debug_1454
    rx2501_cur."!cursor_debug"("FAIL", "postcircumfix:sym<[ ]>")
  debug_1454:
    .return (rx2501_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<[ ]>"  :subid("310_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2504 = self."!PREFIX__!subrule"("ws", "[")
    new $P2505, "ResizablePMCArray"
    push $P2505, $P2504
    .return ($P2505)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<{ }>"  :subid("311_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2507_tgt
    .local int rx2507_pos
    .local int rx2507_off
    .local int rx2507_eos
    .local int rx2507_rep
    .local pmc rx2507_cur
    .local pmc rx2507_debug
    (rx2507_cur, rx2507_pos, rx2507_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2507_cur
    .local pmc match
    .lex "$/", match
    length rx2507_eos, rx2507_tgt
    gt rx2507_pos, rx2507_eos, rx2507_done
    set rx2507_off, 0
    lt rx2507_pos, 2, rx2507_start
    sub rx2507_off, rx2507_pos, 1
    substr rx2507_tgt, rx2507_tgt, rx2507_off
  rx2507_start:
    eq $I10, 1, rx2507_restart
    if_null rx2507_debug, debug_1455
    rx2507_cur."!cursor_debug"("START", "postcircumfix:sym<{ }>")
  debug_1455:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2508_done
    goto rxscan2508_scan
  rxscan2508_loop:
    (rx2507_pos) = rx2507_cur."from"()
    inc rx2507_pos
    rx2507_cur."!cursor_from"(rx2507_pos)
    ge rx2507_pos, rx2507_eos, rxscan2508_done
  rxscan2508_scan:
    set_addr $I10, rxscan2508_loop
    rx2507_cur."!mark_push"(0, rx2507_pos, $I10)
  rxscan2508_done:
.annotate 'line', 1066
  # rx literal  "{"
    add $I11, rx2507_pos, 1
    gt $I11, rx2507_eos, rx2507_fail
    sub $I11, rx2507_pos, rx2507_off
    ord $I11, rx2507_tgt, $I11
    ne $I11, 123, rx2507_fail
    add rx2507_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2507_cur."!cursor_pos"(rx2507_pos)
    $P10 = rx2507_cur."ws"()
    unless $P10, rx2507_fail
    rx2507_pos = $P10."pos"()
  # rx subrule "EXPR" subtype=capture negate=
    rx2507_cur."!cursor_pos"(rx2507_pos)
    $P10 = rx2507_cur."EXPR"()
    unless $P10, rx2507_fail
    rx2507_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx2507_pos = $P10."pos"()
  # rx literal  "}"
    add $I11, rx2507_pos, 1
    gt $I11, rx2507_eos, rx2507_fail
    sub $I11, rx2507_pos, rx2507_off
    ord $I11, rx2507_tgt, $I11
    ne $I11, 125, rx2507_fail
    add rx2507_pos, 1
.annotate 'line', 1067
  # rx subrule "O" subtype=capture negate=
    rx2507_cur."!cursor_pos"(rx2507_pos)
    $P10 = rx2507_cur."O"("%methodop")
    unless $P10, rx2507_fail
    rx2507_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2507_pos = $P10."pos"()
.annotate 'line', 1065
  # rx pass
    rx2507_cur."!cursor_pass"(rx2507_pos, "postcircumfix:sym<{ }>")
    if_null rx2507_debug, debug_1456
    rx2507_cur."!cursor_debug"("PASS", "postcircumfix:sym<{ }>", " at pos=", rx2507_pos)
  debug_1456:
    .return (rx2507_cur)
  rx2507_restart:
.annotate 'line', 436
    if_null rx2507_debug, debug_1457
    rx2507_cur."!cursor_debug"("NEXT", "postcircumfix:sym<{ }>")
  debug_1457:
  rx2507_fail:
    (rx2507_rep, rx2507_pos, $I10, $P10) = rx2507_cur."!mark_fail"(0)
    lt rx2507_pos, -1, rx2507_done
    eq rx2507_pos, -1, rx2507_fail
    jump $I10
  rx2507_done:
    rx2507_cur."!cursor_fail"()
    if_null rx2507_debug, debug_1458
    rx2507_cur."!cursor_debug"("FAIL", "postcircumfix:sym<{ }>")
  debug_1458:
    .return (rx2507_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<{ }>"  :subid("312_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2510 = self."!PREFIX__!subrule"("ws", "{")
    new $P2511, "ResizablePMCArray"
    push $P2511, $P2510
    .return ($P2511)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<ang>"  :subid("313_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2513_tgt
    .local int rx2513_pos
    .local int rx2513_off
    .local int rx2513_eos
    .local int rx2513_rep
    .local pmc rx2513_cur
    .local pmc rx2513_debug
    (rx2513_cur, rx2513_pos, rx2513_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2513_cur
    .local pmc match
    .lex "$/", match
    length rx2513_eos, rx2513_tgt
    gt rx2513_pos, rx2513_eos, rx2513_done
    set rx2513_off, 0
    lt rx2513_pos, 2, rx2513_start
    sub rx2513_off, rx2513_pos, 1
    substr rx2513_tgt, rx2513_tgt, rx2513_off
  rx2513_start:
    eq $I10, 1, rx2513_restart
    if_null rx2513_debug, debug_1459
    rx2513_cur."!cursor_debug"("START", "postcircumfix:sym<ang>")
  debug_1459:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2514_done
    goto rxscan2514_scan
  rxscan2514_loop:
    (rx2513_pos) = rx2513_cur."from"()
    inc rx2513_pos
    rx2513_cur."!cursor_from"(rx2513_pos)
    ge rx2513_pos, rx2513_eos, rxscan2514_done
  rxscan2514_scan:
    set_addr $I10, rxscan2514_loop
    rx2513_cur."!mark_push"(0, rx2513_pos, $I10)
  rxscan2514_done:
.annotate 'line', 1071
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2513_pos, rx2513_off
    substr $S10, rx2513_tgt, $I10, 1
    index $I11, "<", $S10
    lt $I11, 0, rx2513_fail
  # rx subrule "quote_EXPR" subtype=capture negate=
    rx2513_cur."!cursor_pos"(rx2513_pos)
    $P10 = rx2513_cur."quote_EXPR"(":q")
    unless $P10, rx2513_fail
    rx2513_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("quote_EXPR")
    rx2513_pos = $P10."pos"()
.annotate 'line', 1072
  # rx subrule "O" subtype=capture negate=
    rx2513_cur."!cursor_pos"(rx2513_pos)
    $P10 = rx2513_cur."O"("%methodop")
    unless $P10, rx2513_fail
    rx2513_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2513_pos = $P10."pos"()
.annotate 'line', 1070
  # rx pass
    rx2513_cur."!cursor_pass"(rx2513_pos, "postcircumfix:sym<ang>")
    if_null rx2513_debug, debug_1460
    rx2513_cur."!cursor_debug"("PASS", "postcircumfix:sym<ang>", " at pos=", rx2513_pos)
  debug_1460:
    .return (rx2513_cur)
  rx2513_restart:
.annotate 'line', 436
    if_null rx2513_debug, debug_1461
    rx2513_cur."!cursor_debug"("NEXT", "postcircumfix:sym<ang>")
  debug_1461:
  rx2513_fail:
    (rx2513_rep, rx2513_pos, $I10, $P10) = rx2513_cur."!mark_fail"(0)
    lt rx2513_pos, -1, rx2513_done
    eq rx2513_pos, -1, rx2513_fail
    jump $I10
  rx2513_done:
    rx2513_cur."!cursor_fail"()
    if_null rx2513_debug, debug_1462
    rx2513_cur."!cursor_debug"("FAIL", "postcircumfix:sym<ang>")
  debug_1462:
    .return (rx2513_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<ang>"  :subid("314_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2516, "ResizablePMCArray"
    push $P2516, "<"
    .return ($P2516)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postcircumfix:sym<( )>"  :subid("315_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2518_tgt
    .local int rx2518_pos
    .local int rx2518_off
    .local int rx2518_eos
    .local int rx2518_rep
    .local pmc rx2518_cur
    .local pmc rx2518_debug
    (rx2518_cur, rx2518_pos, rx2518_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2518_cur
    .local pmc match
    .lex "$/", match
    length rx2518_eos, rx2518_tgt
    gt rx2518_pos, rx2518_eos, rx2518_done
    set rx2518_off, 0
    lt rx2518_pos, 2, rx2518_start
    sub rx2518_off, rx2518_pos, 1
    substr rx2518_tgt, rx2518_tgt, rx2518_off
  rx2518_start:
    eq $I10, 1, rx2518_restart
    if_null rx2518_debug, debug_1463
    rx2518_cur."!cursor_debug"("START", "postcircumfix:sym<( )>")
  debug_1463:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2519_done
    goto rxscan2519_scan
  rxscan2519_loop:
    (rx2518_pos) = rx2518_cur."from"()
    inc rx2518_pos
    rx2518_cur."!cursor_from"(rx2518_pos)
    ge rx2518_pos, rx2518_eos, rxscan2519_done
  rxscan2519_scan:
    set_addr $I10, rxscan2519_loop
    rx2518_cur."!mark_push"(0, rx2518_pos, $I10)
  rxscan2519_done:
.annotate 'line', 1076
  # rx literal  "("
    add $I11, rx2518_pos, 1
    gt $I11, rx2518_eos, rx2518_fail
    sub $I11, rx2518_pos, rx2518_off
    ord $I11, rx2518_tgt, $I11
    ne $I11, 40, rx2518_fail
    add rx2518_pos, 1
  # rx subrule "ws" subtype=method negate=
    rx2518_cur."!cursor_pos"(rx2518_pos)
    $P10 = rx2518_cur."ws"()
    unless $P10, rx2518_fail
    rx2518_pos = $P10."pos"()
  # rx subrule "arglist" subtype=capture negate=
    rx2518_cur."!cursor_pos"(rx2518_pos)
    $P10 = rx2518_cur."arglist"()
    unless $P10, rx2518_fail
    rx2518_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx2518_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx2518_pos, 1
    gt $I11, rx2518_eos, rx2518_fail
    sub $I11, rx2518_pos, rx2518_off
    ord $I11, rx2518_tgt, $I11
    ne $I11, 41, rx2518_fail
    add rx2518_pos, 1
.annotate 'line', 1077
  # rx subrule "O" subtype=capture negate=
    rx2518_cur."!cursor_pos"(rx2518_pos)
    $P10 = rx2518_cur."O"("%methodop")
    unless $P10, rx2518_fail
    rx2518_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2518_pos = $P10."pos"()
.annotate 'line', 1075
  # rx pass
    rx2518_cur."!cursor_pass"(rx2518_pos, "postcircumfix:sym<( )>")
    if_null rx2518_debug, debug_1464
    rx2518_cur."!cursor_debug"("PASS", "postcircumfix:sym<( )>", " at pos=", rx2518_pos)
  debug_1464:
    .return (rx2518_cur)
  rx2518_restart:
.annotate 'line', 436
    if_null rx2518_debug, debug_1465
    rx2518_cur."!cursor_debug"("NEXT", "postcircumfix:sym<( )>")
  debug_1465:
  rx2518_fail:
    (rx2518_rep, rx2518_pos, $I10, $P10) = rx2518_cur."!mark_fail"(0)
    lt rx2518_pos, -1, rx2518_done
    eq rx2518_pos, -1, rx2518_fail
    jump $I10
  rx2518_done:
    rx2518_cur."!cursor_fail"()
    if_null rx2518_debug, debug_1466
    rx2518_cur."!cursor_debug"("FAIL", "postcircumfix:sym<( )>")
  debug_1466:
    .return (rx2518_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postcircumfix:sym<( )>"  :subid("316_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2521 = self."!PREFIX__!subrule"("ws", "(")
    new $P2522, "ResizablePMCArray"
    push $P2522, $P2521
    .return ($P2522)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<.>"  :subid("317_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2524_tgt
    .local int rx2524_pos
    .local int rx2524_off
    .local int rx2524_eos
    .local int rx2524_rep
    .local pmc rx2524_cur
    .local pmc rx2524_debug
    (rx2524_cur, rx2524_pos, rx2524_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2524_cur
    .local pmc match
    .lex "$/", match
    length rx2524_eos, rx2524_tgt
    gt rx2524_pos, rx2524_eos, rx2524_done
    set rx2524_off, 0
    lt rx2524_pos, 2, rx2524_start
    sub rx2524_off, rx2524_pos, 1
    substr rx2524_tgt, rx2524_tgt, rx2524_off
  rx2524_start:
    eq $I10, 1, rx2524_restart
    if_null rx2524_debug, debug_1467
    rx2524_cur."!cursor_debug"("START", "postfix:sym<.>")
  debug_1467:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2525_done
    goto rxscan2525_scan
  rxscan2525_loop:
    (rx2524_pos) = rx2524_cur."from"()
    inc rx2524_pos
    rx2524_cur."!cursor_from"(rx2524_pos)
    ge rx2524_pos, rx2524_eos, rxscan2525_done
  rxscan2525_scan:
    set_addr $I10, rxscan2525_loop
    rx2524_cur."!mark_push"(0, rx2524_pos, $I10)
  rxscan2525_done:
.annotate 'line', 1080
  # rx subrule "dotty" subtype=capture negate=
    rx2524_cur."!cursor_pos"(rx2524_pos)
    $P10 = rx2524_cur."dotty"()
    unless $P10, rx2524_fail
    rx2524_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("dotty")
    rx2524_pos = $P10."pos"()
  # rx subrule "O" subtype=capture negate=
    rx2524_cur."!cursor_pos"(rx2524_pos)
    $P10 = rx2524_cur."O"("%methodop")
    unless $P10, rx2524_fail
    rx2524_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2524_pos = $P10."pos"()
  # rx pass
    rx2524_cur."!cursor_pass"(rx2524_pos, "postfix:sym<.>")
    if_null rx2524_debug, debug_1468
    rx2524_cur."!cursor_debug"("PASS", "postfix:sym<.>", " at pos=", rx2524_pos)
  debug_1468:
    .return (rx2524_cur)
  rx2524_restart:
.annotate 'line', 436
    if_null rx2524_debug, debug_1469
    rx2524_cur."!cursor_debug"("NEXT", "postfix:sym<.>")
  debug_1469:
  rx2524_fail:
    (rx2524_rep, rx2524_pos, $I10, $P10) = rx2524_cur."!mark_fail"(0)
    lt rx2524_pos, -1, rx2524_done
    eq rx2524_pos, -1, rx2524_fail
    jump $I10
  rx2524_done:
    rx2524_cur."!cursor_fail"()
    if_null rx2524_debug, debug_1470
    rx2524_cur."!cursor_debug"("FAIL", "postfix:sym<.>")
  debug_1470:
    .return (rx2524_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postfix:sym<.>"  :subid("318_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2527 = self."!PREFIX__!subrule"("dotty", "")
    new $P2528, "ResizablePMCArray"
    push $P2528, $P2527
    .return ($P2528)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<++>"  :subid("319_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2530_tgt
    .local int rx2530_pos
    .local int rx2530_off
    .local int rx2530_eos
    .local int rx2530_rep
    .local pmc rx2530_cur
    .local pmc rx2530_debug
    (rx2530_cur, rx2530_pos, rx2530_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2530_cur
    .local pmc match
    .lex "$/", match
    length rx2530_eos, rx2530_tgt
    gt rx2530_pos, rx2530_eos, rx2530_done
    set rx2530_off, 0
    lt rx2530_pos, 2, rx2530_start
    sub rx2530_off, rx2530_pos, 1
    substr rx2530_tgt, rx2530_tgt, rx2530_off
  rx2530_start:
    eq $I10, 1, rx2530_restart
    if_null rx2530_debug, debug_1471
    rx2530_cur."!cursor_debug"("START", "prefix:sym<++>")
  debug_1471:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2531_done
    goto rxscan2531_scan
  rxscan2531_loop:
    (rx2530_pos) = rx2530_cur."from"()
    inc rx2530_pos
    rx2530_cur."!cursor_from"(rx2530_pos)
    ge rx2530_pos, rx2530_eos, rxscan2531_done
  rxscan2531_scan:
    set_addr $I10, rxscan2531_loop
    rx2530_cur."!mark_push"(0, rx2530_pos, $I10)
  rxscan2531_done:
.annotate 'line', 1082
  # rx subcapture "sym"
    set_addr $I10, rxcap_2532_fail
    rx2530_cur."!mark_push"(0, rx2530_pos, $I10)
  # rx literal  "++"
    add $I11, rx2530_pos, 2
    gt $I11, rx2530_eos, rx2530_fail
    sub $I11, rx2530_pos, rx2530_off
    substr $S10, rx2530_tgt, $I11, 2
    ne $S10, "++", rx2530_fail
    add rx2530_pos, 2
    set_addr $I10, rxcap_2532_fail
    ($I12, $I11) = rx2530_cur."!mark_peek"($I10)
    rx2530_cur."!cursor_pos"($I11)
    ($P10) = rx2530_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2530_pos, "")
    rx2530_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2532_done
  rxcap_2532_fail:
    goto rx2530_fail
  rxcap_2532_done:
  # rx subrule "O" subtype=capture negate=
    rx2530_cur."!cursor_pos"(rx2530_pos)
    $P10 = rx2530_cur."O"("%autoincrement, :pirop<inc>")
    unless $P10, rx2530_fail
    rx2530_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2530_pos = $P10."pos"()
  # rx pass
    rx2530_cur."!cursor_pass"(rx2530_pos, "prefix:sym<++>")
    if_null rx2530_debug, debug_1472
    rx2530_cur."!cursor_debug"("PASS", "prefix:sym<++>", " at pos=", rx2530_pos)
  debug_1472:
    .return (rx2530_cur)
  rx2530_restart:
.annotate 'line', 436
    if_null rx2530_debug, debug_1473
    rx2530_cur."!cursor_debug"("NEXT", "prefix:sym<++>")
  debug_1473:
  rx2530_fail:
    (rx2530_rep, rx2530_pos, $I10, $P10) = rx2530_cur."!mark_fail"(0)
    lt rx2530_pos, -1, rx2530_done
    eq rx2530_pos, -1, rx2530_fail
    jump $I10
  rx2530_done:
    rx2530_cur."!cursor_fail"()
    if_null rx2530_debug, debug_1474
    rx2530_cur."!cursor_debug"("FAIL", "prefix:sym<++>")
  debug_1474:
    .return (rx2530_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<++>"  :subid("320_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2534 = self."!PREFIX__!subrule"("O", "++")
    new $P2535, "ResizablePMCArray"
    push $P2535, $P2534
    .return ($P2535)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<-->"  :subid("321_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2537_tgt
    .local int rx2537_pos
    .local int rx2537_off
    .local int rx2537_eos
    .local int rx2537_rep
    .local pmc rx2537_cur
    .local pmc rx2537_debug
    (rx2537_cur, rx2537_pos, rx2537_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2537_cur
    .local pmc match
    .lex "$/", match
    length rx2537_eos, rx2537_tgt
    gt rx2537_pos, rx2537_eos, rx2537_done
    set rx2537_off, 0
    lt rx2537_pos, 2, rx2537_start
    sub rx2537_off, rx2537_pos, 1
    substr rx2537_tgt, rx2537_tgt, rx2537_off
  rx2537_start:
    eq $I10, 1, rx2537_restart
    if_null rx2537_debug, debug_1475
    rx2537_cur."!cursor_debug"("START", "prefix:sym<-->")
  debug_1475:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2538_done
    goto rxscan2538_scan
  rxscan2538_loop:
    (rx2537_pos) = rx2537_cur."from"()
    inc rx2537_pos
    rx2537_cur."!cursor_from"(rx2537_pos)
    ge rx2537_pos, rx2537_eos, rxscan2538_done
  rxscan2538_scan:
    set_addr $I10, rxscan2538_loop
    rx2537_cur."!mark_push"(0, rx2537_pos, $I10)
  rxscan2538_done:
.annotate 'line', 1083
  # rx subcapture "sym"
    set_addr $I10, rxcap_2539_fail
    rx2537_cur."!mark_push"(0, rx2537_pos, $I10)
  # rx literal  "--"
    add $I11, rx2537_pos, 2
    gt $I11, rx2537_eos, rx2537_fail
    sub $I11, rx2537_pos, rx2537_off
    substr $S10, rx2537_tgt, $I11, 2
    ne $S10, "--", rx2537_fail
    add rx2537_pos, 2
    set_addr $I10, rxcap_2539_fail
    ($I12, $I11) = rx2537_cur."!mark_peek"($I10)
    rx2537_cur."!cursor_pos"($I11)
    ($P10) = rx2537_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2537_pos, "")
    rx2537_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2539_done
  rxcap_2539_fail:
    goto rx2537_fail
  rxcap_2539_done:
  # rx subrule "O" subtype=capture negate=
    rx2537_cur."!cursor_pos"(rx2537_pos)
    $P10 = rx2537_cur."O"("%autoincrement, :pirop<dec>")
    unless $P10, rx2537_fail
    rx2537_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2537_pos = $P10."pos"()
  # rx pass
    rx2537_cur."!cursor_pass"(rx2537_pos, "prefix:sym<-->")
    if_null rx2537_debug, debug_1476
    rx2537_cur."!cursor_debug"("PASS", "prefix:sym<-->", " at pos=", rx2537_pos)
  debug_1476:
    .return (rx2537_cur)
  rx2537_restart:
.annotate 'line', 436
    if_null rx2537_debug, debug_1477
    rx2537_cur."!cursor_debug"("NEXT", "prefix:sym<-->")
  debug_1477:
  rx2537_fail:
    (rx2537_rep, rx2537_pos, $I10, $P10) = rx2537_cur."!mark_fail"(0)
    lt rx2537_pos, -1, rx2537_done
    eq rx2537_pos, -1, rx2537_fail
    jump $I10
  rx2537_done:
    rx2537_cur."!cursor_fail"()
    if_null rx2537_debug, debug_1478
    rx2537_cur."!cursor_debug"("FAIL", "prefix:sym<-->")
  debug_1478:
    .return (rx2537_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<-->"  :subid("322_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2541 = self."!PREFIX__!subrule"("O", "--")
    new $P2542, "ResizablePMCArray"
    push $P2542, $P2541
    .return ($P2542)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<++>"  :subid("323_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2544_tgt
    .local int rx2544_pos
    .local int rx2544_off
    .local int rx2544_eos
    .local int rx2544_rep
    .local pmc rx2544_cur
    .local pmc rx2544_debug
    (rx2544_cur, rx2544_pos, rx2544_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2544_cur
    .local pmc match
    .lex "$/", match
    length rx2544_eos, rx2544_tgt
    gt rx2544_pos, rx2544_eos, rx2544_done
    set rx2544_off, 0
    lt rx2544_pos, 2, rx2544_start
    sub rx2544_off, rx2544_pos, 1
    substr rx2544_tgt, rx2544_tgt, rx2544_off
  rx2544_start:
    eq $I10, 1, rx2544_restart
    if_null rx2544_debug, debug_1479
    rx2544_cur."!cursor_debug"("START", "postfix:sym<++>")
  debug_1479:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2545_done
    goto rxscan2545_scan
  rxscan2545_loop:
    (rx2544_pos) = rx2544_cur."from"()
    inc rx2544_pos
    rx2544_cur."!cursor_from"(rx2544_pos)
    ge rx2544_pos, rx2544_eos, rxscan2545_done
  rxscan2545_scan:
    set_addr $I10, rxscan2545_loop
    rx2544_cur."!mark_push"(0, rx2544_pos, $I10)
  rxscan2545_done:
.annotate 'line', 1086
  # rx subcapture "sym"
    set_addr $I10, rxcap_2546_fail
    rx2544_cur."!mark_push"(0, rx2544_pos, $I10)
  # rx literal  "++"
    add $I11, rx2544_pos, 2
    gt $I11, rx2544_eos, rx2544_fail
    sub $I11, rx2544_pos, rx2544_off
    substr $S10, rx2544_tgt, $I11, 2
    ne $S10, "++", rx2544_fail
    add rx2544_pos, 2
    set_addr $I10, rxcap_2546_fail
    ($I12, $I11) = rx2544_cur."!mark_peek"($I10)
    rx2544_cur."!cursor_pos"($I11)
    ($P10) = rx2544_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2544_pos, "")
    rx2544_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2546_done
  rxcap_2546_fail:
    goto rx2544_fail
  rxcap_2546_done:
  # rx subrule "O" subtype=capture negate=
    rx2544_cur."!cursor_pos"(rx2544_pos)
    $P10 = rx2544_cur."O"("%autoincrement")
    unless $P10, rx2544_fail
    rx2544_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2544_pos = $P10."pos"()
  # rx pass
    rx2544_cur."!cursor_pass"(rx2544_pos, "postfix:sym<++>")
    if_null rx2544_debug, debug_1480
    rx2544_cur."!cursor_debug"("PASS", "postfix:sym<++>", " at pos=", rx2544_pos)
  debug_1480:
    .return (rx2544_cur)
  rx2544_restart:
.annotate 'line', 436
    if_null rx2544_debug, debug_1481
    rx2544_cur."!cursor_debug"("NEXT", "postfix:sym<++>")
  debug_1481:
  rx2544_fail:
    (rx2544_rep, rx2544_pos, $I10, $P10) = rx2544_cur."!mark_fail"(0)
    lt rx2544_pos, -1, rx2544_done
    eq rx2544_pos, -1, rx2544_fail
    jump $I10
  rx2544_done:
    rx2544_cur."!cursor_fail"()
    if_null rx2544_debug, debug_1482
    rx2544_cur."!cursor_debug"("FAIL", "postfix:sym<++>")
  debug_1482:
    .return (rx2544_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postfix:sym<++>"  :subid("324_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2548 = self."!PREFIX__!subrule"("O", "++")
    new $P2549, "ResizablePMCArray"
    push $P2549, $P2548
    .return ($P2549)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "postfix:sym<-->"  :subid("325_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2551_tgt
    .local int rx2551_pos
    .local int rx2551_off
    .local int rx2551_eos
    .local int rx2551_rep
    .local pmc rx2551_cur
    .local pmc rx2551_debug
    (rx2551_cur, rx2551_pos, rx2551_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2551_cur
    .local pmc match
    .lex "$/", match
    length rx2551_eos, rx2551_tgt
    gt rx2551_pos, rx2551_eos, rx2551_done
    set rx2551_off, 0
    lt rx2551_pos, 2, rx2551_start
    sub rx2551_off, rx2551_pos, 1
    substr rx2551_tgt, rx2551_tgt, rx2551_off
  rx2551_start:
    eq $I10, 1, rx2551_restart
    if_null rx2551_debug, debug_1483
    rx2551_cur."!cursor_debug"("START", "postfix:sym<-->")
  debug_1483:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2552_done
    goto rxscan2552_scan
  rxscan2552_loop:
    (rx2551_pos) = rx2551_cur."from"()
    inc rx2551_pos
    rx2551_cur."!cursor_from"(rx2551_pos)
    ge rx2551_pos, rx2551_eos, rxscan2552_done
  rxscan2552_scan:
    set_addr $I10, rxscan2552_loop
    rx2551_cur."!mark_push"(0, rx2551_pos, $I10)
  rxscan2552_done:
.annotate 'line', 1087
  # rx subcapture "sym"
    set_addr $I10, rxcap_2553_fail
    rx2551_cur."!mark_push"(0, rx2551_pos, $I10)
  # rx literal  "--"
    add $I11, rx2551_pos, 2
    gt $I11, rx2551_eos, rx2551_fail
    sub $I11, rx2551_pos, rx2551_off
    substr $S10, rx2551_tgt, $I11, 2
    ne $S10, "--", rx2551_fail
    add rx2551_pos, 2
    set_addr $I10, rxcap_2553_fail
    ($I12, $I11) = rx2551_cur."!mark_peek"($I10)
    rx2551_cur."!cursor_pos"($I11)
    ($P10) = rx2551_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2551_pos, "")
    rx2551_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2553_done
  rxcap_2553_fail:
    goto rx2551_fail
  rxcap_2553_done:
  # rx subrule "O" subtype=capture negate=
    rx2551_cur."!cursor_pos"(rx2551_pos)
    $P10 = rx2551_cur."O"("%autoincrement")
    unless $P10, rx2551_fail
    rx2551_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2551_pos = $P10."pos"()
  # rx pass
    rx2551_cur."!cursor_pass"(rx2551_pos, "postfix:sym<-->")
    if_null rx2551_debug, debug_1484
    rx2551_cur."!cursor_debug"("PASS", "postfix:sym<-->", " at pos=", rx2551_pos)
  debug_1484:
    .return (rx2551_cur)
  rx2551_restart:
.annotate 'line', 436
    if_null rx2551_debug, debug_1485
    rx2551_cur."!cursor_debug"("NEXT", "postfix:sym<-->")
  debug_1485:
  rx2551_fail:
    (rx2551_rep, rx2551_pos, $I10, $P10) = rx2551_cur."!mark_fail"(0)
    lt rx2551_pos, -1, rx2551_done
    eq rx2551_pos, -1, rx2551_fail
    jump $I10
  rx2551_done:
    rx2551_cur."!cursor_fail"()
    if_null rx2551_debug, debug_1486
    rx2551_cur."!cursor_debug"("FAIL", "postfix:sym<-->")
  debug_1486:
    .return (rx2551_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__postfix:sym<-->"  :subid("326_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2555 = self."!PREFIX__!subrule"("O", "--")
    new $P2556, "ResizablePMCArray"
    push $P2556, $P2555
    .return ($P2556)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<**>"  :subid("327_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2558_tgt
    .local int rx2558_pos
    .local int rx2558_off
    .local int rx2558_eos
    .local int rx2558_rep
    .local pmc rx2558_cur
    .local pmc rx2558_debug
    (rx2558_cur, rx2558_pos, rx2558_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2558_cur
    .local pmc match
    .lex "$/", match
    length rx2558_eos, rx2558_tgt
    gt rx2558_pos, rx2558_eos, rx2558_done
    set rx2558_off, 0
    lt rx2558_pos, 2, rx2558_start
    sub rx2558_off, rx2558_pos, 1
    substr rx2558_tgt, rx2558_tgt, rx2558_off
  rx2558_start:
    eq $I10, 1, rx2558_restart
    if_null rx2558_debug, debug_1487
    rx2558_cur."!cursor_debug"("START", "infix:sym<**>")
  debug_1487:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2559_done
    goto rxscan2559_scan
  rxscan2559_loop:
    (rx2558_pos) = rx2558_cur."from"()
    inc rx2558_pos
    rx2558_cur."!cursor_from"(rx2558_pos)
    ge rx2558_pos, rx2558_eos, rxscan2559_done
  rxscan2559_scan:
    set_addr $I10, rxscan2559_loop
    rx2558_cur."!mark_push"(0, rx2558_pos, $I10)
  rxscan2559_done:
.annotate 'line', 1089
  # rx subcapture "sym"
    set_addr $I10, rxcap_2560_fail
    rx2558_cur."!mark_push"(0, rx2558_pos, $I10)
  # rx literal  "**"
    add $I11, rx2558_pos, 2
    gt $I11, rx2558_eos, rx2558_fail
    sub $I11, rx2558_pos, rx2558_off
    substr $S10, rx2558_tgt, $I11, 2
    ne $S10, "**", rx2558_fail
    add rx2558_pos, 2
    set_addr $I10, rxcap_2560_fail
    ($I12, $I11) = rx2558_cur."!mark_peek"($I10)
    rx2558_cur."!cursor_pos"($I11)
    ($P10) = rx2558_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2558_pos, "")
    rx2558_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2560_done
  rxcap_2560_fail:
    goto rx2558_fail
  rxcap_2560_done:
  # rx subrule "O" subtype=capture negate=
    rx2558_cur."!cursor_pos"(rx2558_pos)
    $P10 = rx2558_cur."O"("%exponentiation, :pirop<pow__NNN>")
    unless $P10, rx2558_fail
    rx2558_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2558_pos = $P10."pos"()
  # rx pass
    rx2558_cur."!cursor_pass"(rx2558_pos, "infix:sym<**>")
    if_null rx2558_debug, debug_1488
    rx2558_cur."!cursor_debug"("PASS", "infix:sym<**>", " at pos=", rx2558_pos)
  debug_1488:
    .return (rx2558_cur)
  rx2558_restart:
.annotate 'line', 436
    if_null rx2558_debug, debug_1489
    rx2558_cur."!cursor_debug"("NEXT", "infix:sym<**>")
  debug_1489:
  rx2558_fail:
    (rx2558_rep, rx2558_pos, $I10, $P10) = rx2558_cur."!mark_fail"(0)
    lt rx2558_pos, -1, rx2558_done
    eq rx2558_pos, -1, rx2558_fail
    jump $I10
  rx2558_done:
    rx2558_cur."!cursor_fail"()
    if_null rx2558_debug, debug_1490
    rx2558_cur."!cursor_debug"("FAIL", "infix:sym<**>")
  debug_1490:
    .return (rx2558_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<**>"  :subid("328_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2562 = self."!PREFIX__!subrule"("O", "**")
    new $P2563, "ResizablePMCArray"
    push $P2563, $P2562
    .return ($P2563)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<+>"  :subid("329_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2565_tgt
    .local int rx2565_pos
    .local int rx2565_off
    .local int rx2565_eos
    .local int rx2565_rep
    .local pmc rx2565_cur
    .local pmc rx2565_debug
    (rx2565_cur, rx2565_pos, rx2565_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2565_cur
    .local pmc match
    .lex "$/", match
    length rx2565_eos, rx2565_tgt
    gt rx2565_pos, rx2565_eos, rx2565_done
    set rx2565_off, 0
    lt rx2565_pos, 2, rx2565_start
    sub rx2565_off, rx2565_pos, 1
    substr rx2565_tgt, rx2565_tgt, rx2565_off
  rx2565_start:
    eq $I10, 1, rx2565_restart
    if_null rx2565_debug, debug_1491
    rx2565_cur."!cursor_debug"("START", "prefix:sym<+>")
  debug_1491:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2566_done
    goto rxscan2566_scan
  rxscan2566_loop:
    (rx2565_pos) = rx2565_cur."from"()
    inc rx2565_pos
    rx2565_cur."!cursor_from"(rx2565_pos)
    ge rx2565_pos, rx2565_eos, rxscan2566_done
  rxscan2566_scan:
    set_addr $I10, rxscan2566_loop
    rx2565_cur."!mark_push"(0, rx2565_pos, $I10)
  rxscan2566_done:
.annotate 'line', 1091
  # rx subcapture "sym"
    set_addr $I10, rxcap_2567_fail
    rx2565_cur."!mark_push"(0, rx2565_pos, $I10)
  # rx literal  "+"
    add $I11, rx2565_pos, 1
    gt $I11, rx2565_eos, rx2565_fail
    sub $I11, rx2565_pos, rx2565_off
    ord $I11, rx2565_tgt, $I11
    ne $I11, 43, rx2565_fail
    add rx2565_pos, 1
    set_addr $I10, rxcap_2567_fail
    ($I12, $I11) = rx2565_cur."!mark_peek"($I10)
    rx2565_cur."!cursor_pos"($I11)
    ($P10) = rx2565_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2565_pos, "")
    rx2565_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2567_done
  rxcap_2567_fail:
    goto rx2565_fail
  rxcap_2567_done:
  # rx subrule "O" subtype=capture negate=
    rx2565_cur."!cursor_pos"(rx2565_pos)
    $P10 = rx2565_cur."O"("%symbolic_unary, :pirop<set N*>")
    unless $P10, rx2565_fail
    rx2565_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2565_pos = $P10."pos"()
  # rx pass
    rx2565_cur."!cursor_pass"(rx2565_pos, "prefix:sym<+>")
    if_null rx2565_debug, debug_1492
    rx2565_cur."!cursor_debug"("PASS", "prefix:sym<+>", " at pos=", rx2565_pos)
  debug_1492:
    .return (rx2565_cur)
  rx2565_restart:
.annotate 'line', 436
    if_null rx2565_debug, debug_1493
    rx2565_cur."!cursor_debug"("NEXT", "prefix:sym<+>")
  debug_1493:
  rx2565_fail:
    (rx2565_rep, rx2565_pos, $I10, $P10) = rx2565_cur."!mark_fail"(0)
    lt rx2565_pos, -1, rx2565_done
    eq rx2565_pos, -1, rx2565_fail
    jump $I10
  rx2565_done:
    rx2565_cur."!cursor_fail"()
    if_null rx2565_debug, debug_1494
    rx2565_cur."!cursor_debug"("FAIL", "prefix:sym<+>")
  debug_1494:
    .return (rx2565_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<+>"  :subid("330_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2569 = self."!PREFIX__!subrule"("O", "+")
    new $P2570, "ResizablePMCArray"
    push $P2570, $P2569
    .return ($P2570)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<~>"  :subid("331_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2572_tgt
    .local int rx2572_pos
    .local int rx2572_off
    .local int rx2572_eos
    .local int rx2572_rep
    .local pmc rx2572_cur
    .local pmc rx2572_debug
    (rx2572_cur, rx2572_pos, rx2572_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2572_cur
    .local pmc match
    .lex "$/", match
    length rx2572_eos, rx2572_tgt
    gt rx2572_pos, rx2572_eos, rx2572_done
    set rx2572_off, 0
    lt rx2572_pos, 2, rx2572_start
    sub rx2572_off, rx2572_pos, 1
    substr rx2572_tgt, rx2572_tgt, rx2572_off
  rx2572_start:
    eq $I10, 1, rx2572_restart
    if_null rx2572_debug, debug_1495
    rx2572_cur."!cursor_debug"("START", "prefix:sym<~>")
  debug_1495:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2573_done
    goto rxscan2573_scan
  rxscan2573_loop:
    (rx2572_pos) = rx2572_cur."from"()
    inc rx2572_pos
    rx2572_cur."!cursor_from"(rx2572_pos)
    ge rx2572_pos, rx2572_eos, rxscan2573_done
  rxscan2573_scan:
    set_addr $I10, rxscan2573_loop
    rx2572_cur."!mark_push"(0, rx2572_pos, $I10)
  rxscan2573_done:
.annotate 'line', 1092
  # rx subcapture "sym"
    set_addr $I10, rxcap_2574_fail
    rx2572_cur."!mark_push"(0, rx2572_pos, $I10)
  # rx literal  "~"
    add $I11, rx2572_pos, 1
    gt $I11, rx2572_eos, rx2572_fail
    sub $I11, rx2572_pos, rx2572_off
    ord $I11, rx2572_tgt, $I11
    ne $I11, 126, rx2572_fail
    add rx2572_pos, 1
    set_addr $I10, rxcap_2574_fail
    ($I12, $I11) = rx2572_cur."!mark_peek"($I10)
    rx2572_cur."!cursor_pos"($I11)
    ($P10) = rx2572_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2572_pos, "")
    rx2572_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2574_done
  rxcap_2574_fail:
    goto rx2572_fail
  rxcap_2574_done:
  # rx subrule "O" subtype=capture negate=
    rx2572_cur."!cursor_pos"(rx2572_pos)
    $P10 = rx2572_cur."O"("%symbolic_unary, :pirop<set S*>")
    unless $P10, rx2572_fail
    rx2572_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2572_pos = $P10."pos"()
  # rx pass
    rx2572_cur."!cursor_pass"(rx2572_pos, "prefix:sym<~>")
    if_null rx2572_debug, debug_1496
    rx2572_cur."!cursor_debug"("PASS", "prefix:sym<~>", " at pos=", rx2572_pos)
  debug_1496:
    .return (rx2572_cur)
  rx2572_restart:
.annotate 'line', 436
    if_null rx2572_debug, debug_1497
    rx2572_cur."!cursor_debug"("NEXT", "prefix:sym<~>")
  debug_1497:
  rx2572_fail:
    (rx2572_rep, rx2572_pos, $I10, $P10) = rx2572_cur."!mark_fail"(0)
    lt rx2572_pos, -1, rx2572_done
    eq rx2572_pos, -1, rx2572_fail
    jump $I10
  rx2572_done:
    rx2572_cur."!cursor_fail"()
    if_null rx2572_debug, debug_1498
    rx2572_cur."!cursor_debug"("FAIL", "prefix:sym<~>")
  debug_1498:
    .return (rx2572_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<~>"  :subid("332_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2576 = self."!PREFIX__!subrule"("O", "~")
    new $P2577, "ResizablePMCArray"
    push $P2577, $P2576
    .return ($P2577)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<->"  :subid("333_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2579_tgt
    .local int rx2579_pos
    .local int rx2579_off
    .local int rx2579_eos
    .local int rx2579_rep
    .local pmc rx2579_cur
    .local pmc rx2579_debug
    (rx2579_cur, rx2579_pos, rx2579_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2579_cur
    .local pmc match
    .lex "$/", match
    length rx2579_eos, rx2579_tgt
    gt rx2579_pos, rx2579_eos, rx2579_done
    set rx2579_off, 0
    lt rx2579_pos, 2, rx2579_start
    sub rx2579_off, rx2579_pos, 1
    substr rx2579_tgt, rx2579_tgt, rx2579_off
  rx2579_start:
    eq $I10, 1, rx2579_restart
    if_null rx2579_debug, debug_1499
    rx2579_cur."!cursor_debug"("START", "prefix:sym<->")
  debug_1499:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2580_done
    goto rxscan2580_scan
  rxscan2580_loop:
    (rx2579_pos) = rx2579_cur."from"()
    inc rx2579_pos
    rx2579_cur."!cursor_from"(rx2579_pos)
    ge rx2579_pos, rx2579_eos, rxscan2580_done
  rxscan2580_scan:
    set_addr $I10, rxscan2580_loop
    rx2579_cur."!mark_push"(0, rx2579_pos, $I10)
  rxscan2580_done:
.annotate 'line', 1093
  # rx subcapture "sym"
    set_addr $I10, rxcap_2581_fail
    rx2579_cur."!mark_push"(0, rx2579_pos, $I10)
  # rx literal  "-"
    add $I11, rx2579_pos, 1
    gt $I11, rx2579_eos, rx2579_fail
    sub $I11, rx2579_pos, rx2579_off
    ord $I11, rx2579_tgt, $I11
    ne $I11, 45, rx2579_fail
    add rx2579_pos, 1
    set_addr $I10, rxcap_2581_fail
    ($I12, $I11) = rx2579_cur."!mark_peek"($I10)
    rx2579_cur."!cursor_pos"($I11)
    ($P10) = rx2579_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2579_pos, "")
    rx2579_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2581_done
  rxcap_2581_fail:
    goto rx2579_fail
  rxcap_2581_done:
  # rx enumcharlist negate=1 zerowidth
    sub $I10, rx2579_pos, rx2579_off
    substr $S10, rx2579_tgt, $I10, 1
    index $I11, ">", $S10
    ge $I11, 0, rx2579_fail
  # rx subrule "number" subtype=zerowidth negate=1
    rx2579_cur."!cursor_pos"(rx2579_pos)
    $P10 = rx2579_cur."number"()
    if $P10, rx2579_fail
  # rx subrule "O" subtype=capture negate=
    rx2579_cur."!cursor_pos"(rx2579_pos)
    $P10 = rx2579_cur."O"("%symbolic_unary, :pirop<neg>")
    unless $P10, rx2579_fail
    rx2579_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2579_pos = $P10."pos"()
  # rx pass
    rx2579_cur."!cursor_pass"(rx2579_pos, "prefix:sym<->")
    if_null rx2579_debug, debug_1500
    rx2579_cur."!cursor_debug"("PASS", "prefix:sym<->", " at pos=", rx2579_pos)
  debug_1500:
    .return (rx2579_cur)
  rx2579_restart:
.annotate 'line', 436
    if_null rx2579_debug, debug_1501
    rx2579_cur."!cursor_debug"("NEXT", "prefix:sym<->")
  debug_1501:
  rx2579_fail:
    (rx2579_rep, rx2579_pos, $I10, $P10) = rx2579_cur."!mark_fail"(0)
    lt rx2579_pos, -1, rx2579_done
    eq rx2579_pos, -1, rx2579_fail
    jump $I10
  rx2579_done:
    rx2579_cur."!cursor_fail"()
    if_null rx2579_debug, debug_1502
    rx2579_cur."!cursor_debug"("FAIL", "prefix:sym<->")
  debug_1502:
    .return (rx2579_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<->"  :subid("334_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2583, "ResizablePMCArray"
    push $P2583, "-"
    .return ($P2583)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<?>"  :subid("335_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2585_tgt
    .local int rx2585_pos
    .local int rx2585_off
    .local int rx2585_eos
    .local int rx2585_rep
    .local pmc rx2585_cur
    .local pmc rx2585_debug
    (rx2585_cur, rx2585_pos, rx2585_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2585_cur
    .local pmc match
    .lex "$/", match
    length rx2585_eos, rx2585_tgt
    gt rx2585_pos, rx2585_eos, rx2585_done
    set rx2585_off, 0
    lt rx2585_pos, 2, rx2585_start
    sub rx2585_off, rx2585_pos, 1
    substr rx2585_tgt, rx2585_tgt, rx2585_off
  rx2585_start:
    eq $I10, 1, rx2585_restart
    if_null rx2585_debug, debug_1503
    rx2585_cur."!cursor_debug"("START", "prefix:sym<?>")
  debug_1503:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2586_done
    goto rxscan2586_scan
  rxscan2586_loop:
    (rx2585_pos) = rx2585_cur."from"()
    inc rx2585_pos
    rx2585_cur."!cursor_from"(rx2585_pos)
    ge rx2585_pos, rx2585_eos, rxscan2586_done
  rxscan2586_scan:
    set_addr $I10, rxscan2586_loop
    rx2585_cur."!mark_push"(0, rx2585_pos, $I10)
  rxscan2586_done:
.annotate 'line', 1094
  # rx subcapture "sym"
    set_addr $I10, rxcap_2587_fail
    rx2585_cur."!mark_push"(0, rx2585_pos, $I10)
  # rx literal  "?"
    add $I11, rx2585_pos, 1
    gt $I11, rx2585_eos, rx2585_fail
    sub $I11, rx2585_pos, rx2585_off
    ord $I11, rx2585_tgt, $I11
    ne $I11, 63, rx2585_fail
    add rx2585_pos, 1
    set_addr $I10, rxcap_2587_fail
    ($I12, $I11) = rx2585_cur."!mark_peek"($I10)
    rx2585_cur."!cursor_pos"($I11)
    ($P10) = rx2585_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2585_pos, "")
    rx2585_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2587_done
  rxcap_2587_fail:
    goto rx2585_fail
  rxcap_2587_done:
  # rx subrule "O" subtype=capture negate=
    rx2585_cur."!cursor_pos"(rx2585_pos)
    $P10 = rx2585_cur."O"("%symbolic_unary, :pirop<istrue>")
    unless $P10, rx2585_fail
    rx2585_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2585_pos = $P10."pos"()
  # rx pass
    rx2585_cur."!cursor_pass"(rx2585_pos, "prefix:sym<?>")
    if_null rx2585_debug, debug_1504
    rx2585_cur."!cursor_debug"("PASS", "prefix:sym<?>", " at pos=", rx2585_pos)
  debug_1504:
    .return (rx2585_cur)
  rx2585_restart:
.annotate 'line', 436
    if_null rx2585_debug, debug_1505
    rx2585_cur."!cursor_debug"("NEXT", "prefix:sym<?>")
  debug_1505:
  rx2585_fail:
    (rx2585_rep, rx2585_pos, $I10, $P10) = rx2585_cur."!mark_fail"(0)
    lt rx2585_pos, -1, rx2585_done
    eq rx2585_pos, -1, rx2585_fail
    jump $I10
  rx2585_done:
    rx2585_cur."!cursor_fail"()
    if_null rx2585_debug, debug_1506
    rx2585_cur."!cursor_debug"("FAIL", "prefix:sym<?>")
  debug_1506:
    .return (rx2585_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<?>"  :subid("336_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2589 = self."!PREFIX__!subrule"("O", "?")
    new $P2590, "ResizablePMCArray"
    push $P2590, $P2589
    .return ($P2590)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<!>"  :subid("337_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2592_tgt
    .local int rx2592_pos
    .local int rx2592_off
    .local int rx2592_eos
    .local int rx2592_rep
    .local pmc rx2592_cur
    .local pmc rx2592_debug
    (rx2592_cur, rx2592_pos, rx2592_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2592_cur
    .local pmc match
    .lex "$/", match
    length rx2592_eos, rx2592_tgt
    gt rx2592_pos, rx2592_eos, rx2592_done
    set rx2592_off, 0
    lt rx2592_pos, 2, rx2592_start
    sub rx2592_off, rx2592_pos, 1
    substr rx2592_tgt, rx2592_tgt, rx2592_off
  rx2592_start:
    eq $I10, 1, rx2592_restart
    if_null rx2592_debug, debug_1507
    rx2592_cur."!cursor_debug"("START", "prefix:sym<!>")
  debug_1507:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2593_done
    goto rxscan2593_scan
  rxscan2593_loop:
    (rx2592_pos) = rx2592_cur."from"()
    inc rx2592_pos
    rx2592_cur."!cursor_from"(rx2592_pos)
    ge rx2592_pos, rx2592_eos, rxscan2593_done
  rxscan2593_scan:
    set_addr $I10, rxscan2593_loop
    rx2592_cur."!mark_push"(0, rx2592_pos, $I10)
  rxscan2593_done:
.annotate 'line', 1095
  # rx subcapture "sym"
    set_addr $I10, rxcap_2594_fail
    rx2592_cur."!mark_push"(0, rx2592_pos, $I10)
  # rx literal  "!"
    add $I11, rx2592_pos, 1
    gt $I11, rx2592_eos, rx2592_fail
    sub $I11, rx2592_pos, rx2592_off
    ord $I11, rx2592_tgt, $I11
    ne $I11, 33, rx2592_fail
    add rx2592_pos, 1
    set_addr $I10, rxcap_2594_fail
    ($I12, $I11) = rx2592_cur."!mark_peek"($I10)
    rx2592_cur."!cursor_pos"($I11)
    ($P10) = rx2592_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2592_pos, "")
    rx2592_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2594_done
  rxcap_2594_fail:
    goto rx2592_fail
  rxcap_2594_done:
  # rx subrule "O" subtype=capture negate=
    rx2592_cur."!cursor_pos"(rx2592_pos)
    $P10 = rx2592_cur."O"("%symbolic_unary, :pirop<isfalse>")
    unless $P10, rx2592_fail
    rx2592_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2592_pos = $P10."pos"()
  # rx pass
    rx2592_cur."!cursor_pass"(rx2592_pos, "prefix:sym<!>")
    if_null rx2592_debug, debug_1508
    rx2592_cur."!cursor_debug"("PASS", "prefix:sym<!>", " at pos=", rx2592_pos)
  debug_1508:
    .return (rx2592_cur)
  rx2592_restart:
.annotate 'line', 436
    if_null rx2592_debug, debug_1509
    rx2592_cur."!cursor_debug"("NEXT", "prefix:sym<!>")
  debug_1509:
  rx2592_fail:
    (rx2592_rep, rx2592_pos, $I10, $P10) = rx2592_cur."!mark_fail"(0)
    lt rx2592_pos, -1, rx2592_done
    eq rx2592_pos, -1, rx2592_fail
    jump $I10
  rx2592_done:
    rx2592_cur."!cursor_fail"()
    if_null rx2592_debug, debug_1510
    rx2592_cur."!cursor_debug"("FAIL", "prefix:sym<!>")
  debug_1510:
    .return (rx2592_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<!>"  :subid("338_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2596 = self."!PREFIX__!subrule"("O", "!")
    new $P2597, "ResizablePMCArray"
    push $P2597, $P2596
    .return ($P2597)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<|>"  :subid("339_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2599_tgt
    .local int rx2599_pos
    .local int rx2599_off
    .local int rx2599_eos
    .local int rx2599_rep
    .local pmc rx2599_cur
    .local pmc rx2599_debug
    (rx2599_cur, rx2599_pos, rx2599_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2599_cur
    .local pmc match
    .lex "$/", match
    length rx2599_eos, rx2599_tgt
    gt rx2599_pos, rx2599_eos, rx2599_done
    set rx2599_off, 0
    lt rx2599_pos, 2, rx2599_start
    sub rx2599_off, rx2599_pos, 1
    substr rx2599_tgt, rx2599_tgt, rx2599_off
  rx2599_start:
    eq $I10, 1, rx2599_restart
    if_null rx2599_debug, debug_1511
    rx2599_cur."!cursor_debug"("START", "prefix:sym<|>")
  debug_1511:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2600_done
    goto rxscan2600_scan
  rxscan2600_loop:
    (rx2599_pos) = rx2599_cur."from"()
    inc rx2599_pos
    rx2599_cur."!cursor_from"(rx2599_pos)
    ge rx2599_pos, rx2599_eos, rxscan2600_done
  rxscan2600_scan:
    set_addr $I10, rxscan2600_loop
    rx2599_cur."!mark_push"(0, rx2599_pos, $I10)
  rxscan2600_done:
.annotate 'line', 1096
  # rx subcapture "sym"
    set_addr $I10, rxcap_2601_fail
    rx2599_cur."!mark_push"(0, rx2599_pos, $I10)
  # rx literal  "|"
    add $I11, rx2599_pos, 1
    gt $I11, rx2599_eos, rx2599_fail
    sub $I11, rx2599_pos, rx2599_off
    ord $I11, rx2599_tgt, $I11
    ne $I11, 124, rx2599_fail
    add rx2599_pos, 1
    set_addr $I10, rxcap_2601_fail
    ($I12, $I11) = rx2599_cur."!mark_peek"($I10)
    rx2599_cur."!cursor_pos"($I11)
    ($P10) = rx2599_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2599_pos, "")
    rx2599_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2601_done
  rxcap_2601_fail:
    goto rx2599_fail
  rxcap_2601_done:
  # rx subrule "O" subtype=capture negate=
    rx2599_cur."!cursor_pos"(rx2599_pos)
    $P10 = rx2599_cur."O"("%symbolic_unary")
    unless $P10, rx2599_fail
    rx2599_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2599_pos = $P10."pos"()
  # rx pass
    rx2599_cur."!cursor_pass"(rx2599_pos, "prefix:sym<|>")
    if_null rx2599_debug, debug_1512
    rx2599_cur."!cursor_debug"("PASS", "prefix:sym<|>", " at pos=", rx2599_pos)
  debug_1512:
    .return (rx2599_cur)
  rx2599_restart:
.annotate 'line', 436
    if_null rx2599_debug, debug_1513
    rx2599_cur."!cursor_debug"("NEXT", "prefix:sym<|>")
  debug_1513:
  rx2599_fail:
    (rx2599_rep, rx2599_pos, $I10, $P10) = rx2599_cur."!mark_fail"(0)
    lt rx2599_pos, -1, rx2599_done
    eq rx2599_pos, -1, rx2599_fail
    jump $I10
  rx2599_done:
    rx2599_cur."!cursor_fail"()
    if_null rx2599_debug, debug_1514
    rx2599_cur."!cursor_debug"("FAIL", "prefix:sym<|>")
  debug_1514:
    .return (rx2599_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<|>"  :subid("340_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2603 = self."!PREFIX__!subrule"("O", "|")
    new $P2604, "ResizablePMCArray"
    push $P2604, $P2603
    .return ($P2604)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<*>"  :subid("341_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2606_tgt
    .local int rx2606_pos
    .local int rx2606_off
    .local int rx2606_eos
    .local int rx2606_rep
    .local pmc rx2606_cur
    .local pmc rx2606_debug
    (rx2606_cur, rx2606_pos, rx2606_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2606_cur
    .local pmc match
    .lex "$/", match
    length rx2606_eos, rx2606_tgt
    gt rx2606_pos, rx2606_eos, rx2606_done
    set rx2606_off, 0
    lt rx2606_pos, 2, rx2606_start
    sub rx2606_off, rx2606_pos, 1
    substr rx2606_tgt, rx2606_tgt, rx2606_off
  rx2606_start:
    eq $I10, 1, rx2606_restart
    if_null rx2606_debug, debug_1515
    rx2606_cur."!cursor_debug"("START", "infix:sym<*>")
  debug_1515:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2607_done
    goto rxscan2607_scan
  rxscan2607_loop:
    (rx2606_pos) = rx2606_cur."from"()
    inc rx2606_pos
    rx2606_cur."!cursor_from"(rx2606_pos)
    ge rx2606_pos, rx2606_eos, rxscan2607_done
  rxscan2607_scan:
    set_addr $I10, rxscan2607_loop
    rx2606_cur."!mark_push"(0, rx2606_pos, $I10)
  rxscan2607_done:
.annotate 'line', 1098
  # rx subcapture "sym"
    set_addr $I10, rxcap_2608_fail
    rx2606_cur."!mark_push"(0, rx2606_pos, $I10)
  # rx literal  "*"
    add $I11, rx2606_pos, 1
    gt $I11, rx2606_eos, rx2606_fail
    sub $I11, rx2606_pos, rx2606_off
    ord $I11, rx2606_tgt, $I11
    ne $I11, 42, rx2606_fail
    add rx2606_pos, 1
    set_addr $I10, rxcap_2608_fail
    ($I12, $I11) = rx2606_cur."!mark_peek"($I10)
    rx2606_cur."!cursor_pos"($I11)
    ($P10) = rx2606_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2606_pos, "")
    rx2606_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2608_done
  rxcap_2608_fail:
    goto rx2606_fail
  rxcap_2608_done:
  # rx subrule "O" subtype=capture negate=
    rx2606_cur."!cursor_pos"(rx2606_pos)
    $P10 = rx2606_cur."O"("%multiplicative, :pirop<mul>")
    unless $P10, rx2606_fail
    rx2606_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2606_pos = $P10."pos"()
  # rx pass
    rx2606_cur."!cursor_pass"(rx2606_pos, "infix:sym<*>")
    if_null rx2606_debug, debug_1516
    rx2606_cur."!cursor_debug"("PASS", "infix:sym<*>", " at pos=", rx2606_pos)
  debug_1516:
    .return (rx2606_cur)
  rx2606_restart:
.annotate 'line', 436
    if_null rx2606_debug, debug_1517
    rx2606_cur."!cursor_debug"("NEXT", "infix:sym<*>")
  debug_1517:
  rx2606_fail:
    (rx2606_rep, rx2606_pos, $I10, $P10) = rx2606_cur."!mark_fail"(0)
    lt rx2606_pos, -1, rx2606_done
    eq rx2606_pos, -1, rx2606_fail
    jump $I10
  rx2606_done:
    rx2606_cur."!cursor_fail"()
    if_null rx2606_debug, debug_1518
    rx2606_cur."!cursor_debug"("FAIL", "infix:sym<*>")
  debug_1518:
    .return (rx2606_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<*>"  :subid("342_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2610 = self."!PREFIX__!subrule"("O", "*")
    new $P2611, "ResizablePMCArray"
    push $P2611, $P2610
    .return ($P2611)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym</>"  :subid("343_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2613_tgt
    .local int rx2613_pos
    .local int rx2613_off
    .local int rx2613_eos
    .local int rx2613_rep
    .local pmc rx2613_cur
    .local pmc rx2613_debug
    (rx2613_cur, rx2613_pos, rx2613_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2613_cur
    .local pmc match
    .lex "$/", match
    length rx2613_eos, rx2613_tgt
    gt rx2613_pos, rx2613_eos, rx2613_done
    set rx2613_off, 0
    lt rx2613_pos, 2, rx2613_start
    sub rx2613_off, rx2613_pos, 1
    substr rx2613_tgt, rx2613_tgt, rx2613_off
  rx2613_start:
    eq $I10, 1, rx2613_restart
    if_null rx2613_debug, debug_1519
    rx2613_cur."!cursor_debug"("START", "infix:sym</>")
  debug_1519:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2614_done
    goto rxscan2614_scan
  rxscan2614_loop:
    (rx2613_pos) = rx2613_cur."from"()
    inc rx2613_pos
    rx2613_cur."!cursor_from"(rx2613_pos)
    ge rx2613_pos, rx2613_eos, rxscan2614_done
  rxscan2614_scan:
    set_addr $I10, rxscan2614_loop
    rx2613_cur."!mark_push"(0, rx2613_pos, $I10)
  rxscan2614_done:
.annotate 'line', 1099
  # rx subcapture "sym"
    set_addr $I10, rxcap_2615_fail
    rx2613_cur."!mark_push"(0, rx2613_pos, $I10)
  # rx literal  "/"
    add $I11, rx2613_pos, 1
    gt $I11, rx2613_eos, rx2613_fail
    sub $I11, rx2613_pos, rx2613_off
    ord $I11, rx2613_tgt, $I11
    ne $I11, 47, rx2613_fail
    add rx2613_pos, 1
    set_addr $I10, rxcap_2615_fail
    ($I12, $I11) = rx2613_cur."!mark_peek"($I10)
    rx2613_cur."!cursor_pos"($I11)
    ($P10) = rx2613_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2613_pos, "")
    rx2613_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2615_done
  rxcap_2615_fail:
    goto rx2613_fail
  rxcap_2615_done:
  # rx subrule "O" subtype=capture negate=
    rx2613_cur."!cursor_pos"(rx2613_pos)
    $P10 = rx2613_cur."O"("%multiplicative, :pirop<div>")
    unless $P10, rx2613_fail
    rx2613_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2613_pos = $P10."pos"()
  # rx pass
    rx2613_cur."!cursor_pass"(rx2613_pos, "infix:sym</>")
    if_null rx2613_debug, debug_1520
    rx2613_cur."!cursor_debug"("PASS", "infix:sym</>", " at pos=", rx2613_pos)
  debug_1520:
    .return (rx2613_cur)
  rx2613_restart:
.annotate 'line', 436
    if_null rx2613_debug, debug_1521
    rx2613_cur."!cursor_debug"("NEXT", "infix:sym</>")
  debug_1521:
  rx2613_fail:
    (rx2613_rep, rx2613_pos, $I10, $P10) = rx2613_cur."!mark_fail"(0)
    lt rx2613_pos, -1, rx2613_done
    eq rx2613_pos, -1, rx2613_fail
    jump $I10
  rx2613_done:
    rx2613_cur."!cursor_fail"()
    if_null rx2613_debug, debug_1522
    rx2613_cur."!cursor_debug"("FAIL", "infix:sym</>")
  debug_1522:
    .return (rx2613_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym</>"  :subid("344_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2617 = self."!PREFIX__!subrule"("O", "/")
    new $P2618, "ResizablePMCArray"
    push $P2618, $P2617
    .return ($P2618)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<%>"  :subid("345_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2620_tgt
    .local int rx2620_pos
    .local int rx2620_off
    .local int rx2620_eos
    .local int rx2620_rep
    .local pmc rx2620_cur
    .local pmc rx2620_debug
    (rx2620_cur, rx2620_pos, rx2620_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2620_cur
    .local pmc match
    .lex "$/", match
    length rx2620_eos, rx2620_tgt
    gt rx2620_pos, rx2620_eos, rx2620_done
    set rx2620_off, 0
    lt rx2620_pos, 2, rx2620_start
    sub rx2620_off, rx2620_pos, 1
    substr rx2620_tgt, rx2620_tgt, rx2620_off
  rx2620_start:
    eq $I10, 1, rx2620_restart
    if_null rx2620_debug, debug_1523
    rx2620_cur."!cursor_debug"("START", "infix:sym<%>")
  debug_1523:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2621_done
    goto rxscan2621_scan
  rxscan2621_loop:
    (rx2620_pos) = rx2620_cur."from"()
    inc rx2620_pos
    rx2620_cur."!cursor_from"(rx2620_pos)
    ge rx2620_pos, rx2620_eos, rxscan2621_done
  rxscan2621_scan:
    set_addr $I10, rxscan2621_loop
    rx2620_cur."!mark_push"(0, rx2620_pos, $I10)
  rxscan2621_done:
.annotate 'line', 1100
  # rx subcapture "sym"
    set_addr $I10, rxcap_2622_fail
    rx2620_cur."!mark_push"(0, rx2620_pos, $I10)
  # rx literal  "%"
    add $I11, rx2620_pos, 1
    gt $I11, rx2620_eos, rx2620_fail
    sub $I11, rx2620_pos, rx2620_off
    ord $I11, rx2620_tgt, $I11
    ne $I11, 37, rx2620_fail
    add rx2620_pos, 1
    set_addr $I10, rxcap_2622_fail
    ($I12, $I11) = rx2620_cur."!mark_peek"($I10)
    rx2620_cur."!cursor_pos"($I11)
    ($P10) = rx2620_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2620_pos, "")
    rx2620_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2622_done
  rxcap_2622_fail:
    goto rx2620_fail
  rxcap_2622_done:
  # rx subrule "O" subtype=capture negate=
    rx2620_cur."!cursor_pos"(rx2620_pos)
    $P10 = rx2620_cur."O"("%multiplicative, :pirop<mod>")
    unless $P10, rx2620_fail
    rx2620_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2620_pos = $P10."pos"()
  # rx pass
    rx2620_cur."!cursor_pass"(rx2620_pos, "infix:sym<%>")
    if_null rx2620_debug, debug_1524
    rx2620_cur."!cursor_debug"("PASS", "infix:sym<%>", " at pos=", rx2620_pos)
  debug_1524:
    .return (rx2620_cur)
  rx2620_restart:
.annotate 'line', 436
    if_null rx2620_debug, debug_1525
    rx2620_cur."!cursor_debug"("NEXT", "infix:sym<%>")
  debug_1525:
  rx2620_fail:
    (rx2620_rep, rx2620_pos, $I10, $P10) = rx2620_cur."!mark_fail"(0)
    lt rx2620_pos, -1, rx2620_done
    eq rx2620_pos, -1, rx2620_fail
    jump $I10
  rx2620_done:
    rx2620_cur."!cursor_fail"()
    if_null rx2620_debug, debug_1526
    rx2620_cur."!cursor_debug"("FAIL", "infix:sym<%>")
  debug_1526:
    .return (rx2620_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<%>"  :subid("346_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2624 = self."!PREFIX__!subrule"("O", "%")
    new $P2625, "ResizablePMCArray"
    push $P2625, $P2624
    .return ($P2625)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+&>"  :subid("347_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2627_tgt
    .local int rx2627_pos
    .local int rx2627_off
    .local int rx2627_eos
    .local int rx2627_rep
    .local pmc rx2627_cur
    .local pmc rx2627_debug
    (rx2627_cur, rx2627_pos, rx2627_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2627_cur
    .local pmc match
    .lex "$/", match
    length rx2627_eos, rx2627_tgt
    gt rx2627_pos, rx2627_eos, rx2627_done
    set rx2627_off, 0
    lt rx2627_pos, 2, rx2627_start
    sub rx2627_off, rx2627_pos, 1
    substr rx2627_tgt, rx2627_tgt, rx2627_off
  rx2627_start:
    eq $I10, 1, rx2627_restart
    if_null rx2627_debug, debug_1527
    rx2627_cur."!cursor_debug"("START", "infix:sym<+&>")
  debug_1527:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2628_done
    goto rxscan2628_scan
  rxscan2628_loop:
    (rx2627_pos) = rx2627_cur."from"()
    inc rx2627_pos
    rx2627_cur."!cursor_from"(rx2627_pos)
    ge rx2627_pos, rx2627_eos, rxscan2628_done
  rxscan2628_scan:
    set_addr $I10, rxscan2628_loop
    rx2627_cur."!mark_push"(0, rx2627_pos, $I10)
  rxscan2628_done:
.annotate 'line', 1101
  # rx subcapture "sym"
    set_addr $I10, rxcap_2629_fail
    rx2627_cur."!mark_push"(0, rx2627_pos, $I10)
  # rx literal  "+&"
    add $I11, rx2627_pos, 2
    gt $I11, rx2627_eos, rx2627_fail
    sub $I11, rx2627_pos, rx2627_off
    substr $S10, rx2627_tgt, $I11, 2
    ne $S10, "+&", rx2627_fail
    add rx2627_pos, 2
    set_addr $I10, rxcap_2629_fail
    ($I12, $I11) = rx2627_cur."!mark_peek"($I10)
    rx2627_cur."!cursor_pos"($I11)
    ($P10) = rx2627_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2627_pos, "")
    rx2627_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2629_done
  rxcap_2629_fail:
    goto rx2627_fail
  rxcap_2629_done:
  # rx subrule "O" subtype=capture negate=
    rx2627_cur."!cursor_pos"(rx2627_pos)
    $P10 = rx2627_cur."O"("%multiplicative, :pirop<band III>")
    unless $P10, rx2627_fail
    rx2627_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2627_pos = $P10."pos"()
  # rx pass
    rx2627_cur."!cursor_pass"(rx2627_pos, "infix:sym<+&>")
    if_null rx2627_debug, debug_1528
    rx2627_cur."!cursor_debug"("PASS", "infix:sym<+&>", " at pos=", rx2627_pos)
  debug_1528:
    .return (rx2627_cur)
  rx2627_restart:
.annotate 'line', 436
    if_null rx2627_debug, debug_1529
    rx2627_cur."!cursor_debug"("NEXT", "infix:sym<+&>")
  debug_1529:
  rx2627_fail:
    (rx2627_rep, rx2627_pos, $I10, $P10) = rx2627_cur."!mark_fail"(0)
    lt rx2627_pos, -1, rx2627_done
    eq rx2627_pos, -1, rx2627_fail
    jump $I10
  rx2627_done:
    rx2627_cur."!cursor_fail"()
    if_null rx2627_debug, debug_1530
    rx2627_cur."!cursor_debug"("FAIL", "infix:sym<+&>")
  debug_1530:
    .return (rx2627_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+&>"  :subid("348_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2631 = self."!PREFIX__!subrule"("O", "+&")
    new $P2632, "ResizablePMCArray"
    push $P2632, $P2631
    .return ($P2632)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+>"  :subid("349_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2634_tgt
    .local int rx2634_pos
    .local int rx2634_off
    .local int rx2634_eos
    .local int rx2634_rep
    .local pmc rx2634_cur
    .local pmc rx2634_debug
    (rx2634_cur, rx2634_pos, rx2634_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2634_cur
    .local pmc match
    .lex "$/", match
    length rx2634_eos, rx2634_tgt
    gt rx2634_pos, rx2634_eos, rx2634_done
    set rx2634_off, 0
    lt rx2634_pos, 2, rx2634_start
    sub rx2634_off, rx2634_pos, 1
    substr rx2634_tgt, rx2634_tgt, rx2634_off
  rx2634_start:
    eq $I10, 1, rx2634_restart
    if_null rx2634_debug, debug_1531
    rx2634_cur."!cursor_debug"("START", "infix:sym<+>")
  debug_1531:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2635_done
    goto rxscan2635_scan
  rxscan2635_loop:
    (rx2634_pos) = rx2634_cur."from"()
    inc rx2634_pos
    rx2634_cur."!cursor_from"(rx2634_pos)
    ge rx2634_pos, rx2634_eos, rxscan2635_done
  rxscan2635_scan:
    set_addr $I10, rxscan2635_loop
    rx2634_cur."!mark_push"(0, rx2634_pos, $I10)
  rxscan2635_done:
.annotate 'line', 1103
  # rx subcapture "sym"
    set_addr $I10, rxcap_2636_fail
    rx2634_cur."!mark_push"(0, rx2634_pos, $I10)
  # rx literal  "+"
    add $I11, rx2634_pos, 1
    gt $I11, rx2634_eos, rx2634_fail
    sub $I11, rx2634_pos, rx2634_off
    ord $I11, rx2634_tgt, $I11
    ne $I11, 43, rx2634_fail
    add rx2634_pos, 1
    set_addr $I10, rxcap_2636_fail
    ($I12, $I11) = rx2634_cur."!mark_peek"($I10)
    rx2634_cur."!cursor_pos"($I11)
    ($P10) = rx2634_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2634_pos, "")
    rx2634_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2636_done
  rxcap_2636_fail:
    goto rx2634_fail
  rxcap_2636_done:
  # rx subrule "O" subtype=capture negate=
    rx2634_cur."!cursor_pos"(rx2634_pos)
    $P10 = rx2634_cur."O"("%additive, :pirop<add>")
    unless $P10, rx2634_fail
    rx2634_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2634_pos = $P10."pos"()
  # rx pass
    rx2634_cur."!cursor_pass"(rx2634_pos, "infix:sym<+>")
    if_null rx2634_debug, debug_1532
    rx2634_cur."!cursor_debug"("PASS", "infix:sym<+>", " at pos=", rx2634_pos)
  debug_1532:
    .return (rx2634_cur)
  rx2634_restart:
.annotate 'line', 436
    if_null rx2634_debug, debug_1533
    rx2634_cur."!cursor_debug"("NEXT", "infix:sym<+>")
  debug_1533:
  rx2634_fail:
    (rx2634_rep, rx2634_pos, $I10, $P10) = rx2634_cur."!mark_fail"(0)
    lt rx2634_pos, -1, rx2634_done
    eq rx2634_pos, -1, rx2634_fail
    jump $I10
  rx2634_done:
    rx2634_cur."!cursor_fail"()
    if_null rx2634_debug, debug_1534
    rx2634_cur."!cursor_debug"("FAIL", "infix:sym<+>")
  debug_1534:
    .return (rx2634_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+>"  :subid("350_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2638 = self."!PREFIX__!subrule"("O", "+")
    new $P2639, "ResizablePMCArray"
    push $P2639, $P2638
    .return ($P2639)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<->"  :subid("351_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2641_tgt
    .local int rx2641_pos
    .local int rx2641_off
    .local int rx2641_eos
    .local int rx2641_rep
    .local pmc rx2641_cur
    .local pmc rx2641_debug
    (rx2641_cur, rx2641_pos, rx2641_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2641_cur
    .local pmc match
    .lex "$/", match
    length rx2641_eos, rx2641_tgt
    gt rx2641_pos, rx2641_eos, rx2641_done
    set rx2641_off, 0
    lt rx2641_pos, 2, rx2641_start
    sub rx2641_off, rx2641_pos, 1
    substr rx2641_tgt, rx2641_tgt, rx2641_off
  rx2641_start:
    eq $I10, 1, rx2641_restart
    if_null rx2641_debug, debug_1535
    rx2641_cur."!cursor_debug"("START", "infix:sym<->")
  debug_1535:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2642_done
    goto rxscan2642_scan
  rxscan2642_loop:
    (rx2641_pos) = rx2641_cur."from"()
    inc rx2641_pos
    rx2641_cur."!cursor_from"(rx2641_pos)
    ge rx2641_pos, rx2641_eos, rxscan2642_done
  rxscan2642_scan:
    set_addr $I10, rxscan2642_loop
    rx2641_cur."!mark_push"(0, rx2641_pos, $I10)
  rxscan2642_done:
.annotate 'line', 1104
  # rx subcapture "sym"
    set_addr $I10, rxcap_2643_fail
    rx2641_cur."!mark_push"(0, rx2641_pos, $I10)
  # rx literal  "-"
    add $I11, rx2641_pos, 1
    gt $I11, rx2641_eos, rx2641_fail
    sub $I11, rx2641_pos, rx2641_off
    ord $I11, rx2641_tgt, $I11
    ne $I11, 45, rx2641_fail
    add rx2641_pos, 1
    set_addr $I10, rxcap_2643_fail
    ($I12, $I11) = rx2641_cur."!mark_peek"($I10)
    rx2641_cur."!cursor_pos"($I11)
    ($P10) = rx2641_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2641_pos, "")
    rx2641_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2643_done
  rxcap_2643_fail:
    goto rx2641_fail
  rxcap_2643_done:
  # rx subrule "O" subtype=capture negate=
    rx2641_cur."!cursor_pos"(rx2641_pos)
    $P10 = rx2641_cur."O"("%additive, :pirop<sub>")
    unless $P10, rx2641_fail
    rx2641_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2641_pos = $P10."pos"()
  # rx pass
    rx2641_cur."!cursor_pass"(rx2641_pos, "infix:sym<->")
    if_null rx2641_debug, debug_1536
    rx2641_cur."!cursor_debug"("PASS", "infix:sym<->", " at pos=", rx2641_pos)
  debug_1536:
    .return (rx2641_cur)
  rx2641_restart:
.annotate 'line', 436
    if_null rx2641_debug, debug_1537
    rx2641_cur."!cursor_debug"("NEXT", "infix:sym<->")
  debug_1537:
  rx2641_fail:
    (rx2641_rep, rx2641_pos, $I10, $P10) = rx2641_cur."!mark_fail"(0)
    lt rx2641_pos, -1, rx2641_done
    eq rx2641_pos, -1, rx2641_fail
    jump $I10
  rx2641_done:
    rx2641_cur."!cursor_fail"()
    if_null rx2641_debug, debug_1538
    rx2641_cur."!cursor_debug"("FAIL", "infix:sym<->")
  debug_1538:
    .return (rx2641_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<->"  :subid("352_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2645 = self."!PREFIX__!subrule"("O", "-")
    new $P2646, "ResizablePMCArray"
    push $P2646, $P2645
    .return ($P2646)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+|>"  :subid("353_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2648_tgt
    .local int rx2648_pos
    .local int rx2648_off
    .local int rx2648_eos
    .local int rx2648_rep
    .local pmc rx2648_cur
    .local pmc rx2648_debug
    (rx2648_cur, rx2648_pos, rx2648_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2648_cur
    .local pmc match
    .lex "$/", match
    length rx2648_eos, rx2648_tgt
    gt rx2648_pos, rx2648_eos, rx2648_done
    set rx2648_off, 0
    lt rx2648_pos, 2, rx2648_start
    sub rx2648_off, rx2648_pos, 1
    substr rx2648_tgt, rx2648_tgt, rx2648_off
  rx2648_start:
    eq $I10, 1, rx2648_restart
    if_null rx2648_debug, debug_1539
    rx2648_cur."!cursor_debug"("START", "infix:sym<+|>")
  debug_1539:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2649_done
    goto rxscan2649_scan
  rxscan2649_loop:
    (rx2648_pos) = rx2648_cur."from"()
    inc rx2648_pos
    rx2648_cur."!cursor_from"(rx2648_pos)
    ge rx2648_pos, rx2648_eos, rxscan2649_done
  rxscan2649_scan:
    set_addr $I10, rxscan2649_loop
    rx2648_cur."!mark_push"(0, rx2648_pos, $I10)
  rxscan2649_done:
.annotate 'line', 1105
  # rx subcapture "sym"
    set_addr $I10, rxcap_2650_fail
    rx2648_cur."!mark_push"(0, rx2648_pos, $I10)
  # rx literal  "+|"
    add $I11, rx2648_pos, 2
    gt $I11, rx2648_eos, rx2648_fail
    sub $I11, rx2648_pos, rx2648_off
    substr $S10, rx2648_tgt, $I11, 2
    ne $S10, "+|", rx2648_fail
    add rx2648_pos, 2
    set_addr $I10, rxcap_2650_fail
    ($I12, $I11) = rx2648_cur."!mark_peek"($I10)
    rx2648_cur."!cursor_pos"($I11)
    ($P10) = rx2648_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2648_pos, "")
    rx2648_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2650_done
  rxcap_2650_fail:
    goto rx2648_fail
  rxcap_2650_done:
  # rx subrule "O" subtype=capture negate=
    rx2648_cur."!cursor_pos"(rx2648_pos)
    $P10 = rx2648_cur."O"("%additive, :pirop<bor III>")
    unless $P10, rx2648_fail
    rx2648_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2648_pos = $P10."pos"()
  # rx pass
    rx2648_cur."!cursor_pass"(rx2648_pos, "infix:sym<+|>")
    if_null rx2648_debug, debug_1540
    rx2648_cur."!cursor_debug"("PASS", "infix:sym<+|>", " at pos=", rx2648_pos)
  debug_1540:
    .return (rx2648_cur)
  rx2648_restart:
.annotate 'line', 436
    if_null rx2648_debug, debug_1541
    rx2648_cur."!cursor_debug"("NEXT", "infix:sym<+|>")
  debug_1541:
  rx2648_fail:
    (rx2648_rep, rx2648_pos, $I10, $P10) = rx2648_cur."!mark_fail"(0)
    lt rx2648_pos, -1, rx2648_done
    eq rx2648_pos, -1, rx2648_fail
    jump $I10
  rx2648_done:
    rx2648_cur."!cursor_fail"()
    if_null rx2648_debug, debug_1542
    rx2648_cur."!cursor_debug"("FAIL", "infix:sym<+|>")
  debug_1542:
    .return (rx2648_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+|>"  :subid("354_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2652 = self."!PREFIX__!subrule"("O", "+|")
    new $P2653, "ResizablePMCArray"
    push $P2653, $P2652
    .return ($P2653)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<+^>"  :subid("355_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2655_tgt
    .local int rx2655_pos
    .local int rx2655_off
    .local int rx2655_eos
    .local int rx2655_rep
    .local pmc rx2655_cur
    .local pmc rx2655_debug
    (rx2655_cur, rx2655_pos, rx2655_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2655_cur
    .local pmc match
    .lex "$/", match
    length rx2655_eos, rx2655_tgt
    gt rx2655_pos, rx2655_eos, rx2655_done
    set rx2655_off, 0
    lt rx2655_pos, 2, rx2655_start
    sub rx2655_off, rx2655_pos, 1
    substr rx2655_tgt, rx2655_tgt, rx2655_off
  rx2655_start:
    eq $I10, 1, rx2655_restart
    if_null rx2655_debug, debug_1543
    rx2655_cur."!cursor_debug"("START", "infix:sym<+^>")
  debug_1543:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2656_done
    goto rxscan2656_scan
  rxscan2656_loop:
    (rx2655_pos) = rx2655_cur."from"()
    inc rx2655_pos
    rx2655_cur."!cursor_from"(rx2655_pos)
    ge rx2655_pos, rx2655_eos, rxscan2656_done
  rxscan2656_scan:
    set_addr $I10, rxscan2656_loop
    rx2655_cur."!mark_push"(0, rx2655_pos, $I10)
  rxscan2656_done:
.annotate 'line', 1106
  # rx subcapture "sym"
    set_addr $I10, rxcap_2657_fail
    rx2655_cur."!mark_push"(0, rx2655_pos, $I10)
  # rx literal  "+^"
    add $I11, rx2655_pos, 2
    gt $I11, rx2655_eos, rx2655_fail
    sub $I11, rx2655_pos, rx2655_off
    substr $S10, rx2655_tgt, $I11, 2
    ne $S10, "+^", rx2655_fail
    add rx2655_pos, 2
    set_addr $I10, rxcap_2657_fail
    ($I12, $I11) = rx2655_cur."!mark_peek"($I10)
    rx2655_cur."!cursor_pos"($I11)
    ($P10) = rx2655_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2655_pos, "")
    rx2655_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2657_done
  rxcap_2657_fail:
    goto rx2655_fail
  rxcap_2657_done:
  # rx subrule "O" subtype=capture negate=
    rx2655_cur."!cursor_pos"(rx2655_pos)
    $P10 = rx2655_cur."O"("%additive, :pirop<bxor III>")
    unless $P10, rx2655_fail
    rx2655_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2655_pos = $P10."pos"()
  # rx pass
    rx2655_cur."!cursor_pass"(rx2655_pos, "infix:sym<+^>")
    if_null rx2655_debug, debug_1544
    rx2655_cur."!cursor_debug"("PASS", "infix:sym<+^>", " at pos=", rx2655_pos)
  debug_1544:
    .return (rx2655_cur)
  rx2655_restart:
.annotate 'line', 436
    if_null rx2655_debug, debug_1545
    rx2655_cur."!cursor_debug"("NEXT", "infix:sym<+^>")
  debug_1545:
  rx2655_fail:
    (rx2655_rep, rx2655_pos, $I10, $P10) = rx2655_cur."!mark_fail"(0)
    lt rx2655_pos, -1, rx2655_done
    eq rx2655_pos, -1, rx2655_fail
    jump $I10
  rx2655_done:
    rx2655_cur."!cursor_fail"()
    if_null rx2655_debug, debug_1546
    rx2655_cur."!cursor_debug"("FAIL", "infix:sym<+^>")
  debug_1546:
    .return (rx2655_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<+^>"  :subid("356_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2659 = self."!PREFIX__!subrule"("O", "+^")
    new $P2660, "ResizablePMCArray"
    push $P2660, $P2659
    .return ($P2660)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<~>"  :subid("357_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2662_tgt
    .local int rx2662_pos
    .local int rx2662_off
    .local int rx2662_eos
    .local int rx2662_rep
    .local pmc rx2662_cur
    .local pmc rx2662_debug
    (rx2662_cur, rx2662_pos, rx2662_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2662_cur
    .local pmc match
    .lex "$/", match
    length rx2662_eos, rx2662_tgt
    gt rx2662_pos, rx2662_eos, rx2662_done
    set rx2662_off, 0
    lt rx2662_pos, 2, rx2662_start
    sub rx2662_off, rx2662_pos, 1
    substr rx2662_tgt, rx2662_tgt, rx2662_off
  rx2662_start:
    eq $I10, 1, rx2662_restart
    if_null rx2662_debug, debug_1547
    rx2662_cur."!cursor_debug"("START", "infix:sym<~>")
  debug_1547:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2663_done
    goto rxscan2663_scan
  rxscan2663_loop:
    (rx2662_pos) = rx2662_cur."from"()
    inc rx2662_pos
    rx2662_cur."!cursor_from"(rx2662_pos)
    ge rx2662_pos, rx2662_eos, rxscan2663_done
  rxscan2663_scan:
    set_addr $I10, rxscan2663_loop
    rx2662_cur."!mark_push"(0, rx2662_pos, $I10)
  rxscan2663_done:
.annotate 'line', 1108
  # rx subcapture "sym"
    set_addr $I10, rxcap_2664_fail
    rx2662_cur."!mark_push"(0, rx2662_pos, $I10)
  # rx literal  "~"
    add $I11, rx2662_pos, 1
    gt $I11, rx2662_eos, rx2662_fail
    sub $I11, rx2662_pos, rx2662_off
    ord $I11, rx2662_tgt, $I11
    ne $I11, 126, rx2662_fail
    add rx2662_pos, 1
    set_addr $I10, rxcap_2664_fail
    ($I12, $I11) = rx2662_cur."!mark_peek"($I10)
    rx2662_cur."!cursor_pos"($I11)
    ($P10) = rx2662_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2662_pos, "")
    rx2662_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2664_done
  rxcap_2664_fail:
    goto rx2662_fail
  rxcap_2664_done:
  # rx subrule "O" subtype=capture negate=
    rx2662_cur."!cursor_pos"(rx2662_pos)
    $P10 = rx2662_cur."O"("%concatenation , :pirop<concat>")
    unless $P10, rx2662_fail
    rx2662_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2662_pos = $P10."pos"()
  # rx pass
    rx2662_cur."!cursor_pass"(rx2662_pos, "infix:sym<~>")
    if_null rx2662_debug, debug_1548
    rx2662_cur."!cursor_debug"("PASS", "infix:sym<~>", " at pos=", rx2662_pos)
  debug_1548:
    .return (rx2662_cur)
  rx2662_restart:
.annotate 'line', 436
    if_null rx2662_debug, debug_1549
    rx2662_cur."!cursor_debug"("NEXT", "infix:sym<~>")
  debug_1549:
  rx2662_fail:
    (rx2662_rep, rx2662_pos, $I10, $P10) = rx2662_cur."!mark_fail"(0)
    lt rx2662_pos, -1, rx2662_done
    eq rx2662_pos, -1, rx2662_fail
    jump $I10
  rx2662_done:
    rx2662_cur."!cursor_fail"()
    if_null rx2662_debug, debug_1550
    rx2662_cur."!cursor_debug"("FAIL", "infix:sym<~>")
  debug_1550:
    .return (rx2662_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<~>"  :subid("358_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2666 = self."!PREFIX__!subrule"("O", "~")
    new $P2667, "ResizablePMCArray"
    push $P2667, $P2666
    .return ($P2667)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<==>"  :subid("359_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2669_tgt
    .local int rx2669_pos
    .local int rx2669_off
    .local int rx2669_eos
    .local int rx2669_rep
    .local pmc rx2669_cur
    .local pmc rx2669_debug
    (rx2669_cur, rx2669_pos, rx2669_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2669_cur
    .local pmc match
    .lex "$/", match
    length rx2669_eos, rx2669_tgt
    gt rx2669_pos, rx2669_eos, rx2669_done
    set rx2669_off, 0
    lt rx2669_pos, 2, rx2669_start
    sub rx2669_off, rx2669_pos, 1
    substr rx2669_tgt, rx2669_tgt, rx2669_off
  rx2669_start:
    eq $I10, 1, rx2669_restart
    if_null rx2669_debug, debug_1551
    rx2669_cur."!cursor_debug"("START", "infix:sym<==>")
  debug_1551:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2670_done
    goto rxscan2670_scan
  rxscan2670_loop:
    (rx2669_pos) = rx2669_cur."from"()
    inc rx2669_pos
    rx2669_cur."!cursor_from"(rx2669_pos)
    ge rx2669_pos, rx2669_eos, rxscan2670_done
  rxscan2670_scan:
    set_addr $I10, rxscan2670_loop
    rx2669_cur."!mark_push"(0, rx2669_pos, $I10)
  rxscan2670_done:
.annotate 'line', 1110
  # rx subcapture "sym"
    set_addr $I10, rxcap_2671_fail
    rx2669_cur."!mark_push"(0, rx2669_pos, $I10)
  # rx literal  "=="
    add $I11, rx2669_pos, 2
    gt $I11, rx2669_eos, rx2669_fail
    sub $I11, rx2669_pos, rx2669_off
    substr $S10, rx2669_tgt, $I11, 2
    ne $S10, "==", rx2669_fail
    add rx2669_pos, 2
    set_addr $I10, rxcap_2671_fail
    ($I12, $I11) = rx2669_cur."!mark_peek"($I10)
    rx2669_cur."!cursor_pos"($I11)
    ($P10) = rx2669_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2669_pos, "")
    rx2669_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2671_done
  rxcap_2671_fail:
    goto rx2669_fail
  rxcap_2671_done:
  # rx subrule "O" subtype=capture negate=
    rx2669_cur."!cursor_pos"(rx2669_pos)
    $P10 = rx2669_cur."O"("%relational, :pirop<iseq INn>")
    unless $P10, rx2669_fail
    rx2669_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2669_pos = $P10."pos"()
  # rx pass
    rx2669_cur."!cursor_pass"(rx2669_pos, "infix:sym<==>")
    if_null rx2669_debug, debug_1552
    rx2669_cur."!cursor_debug"("PASS", "infix:sym<==>", " at pos=", rx2669_pos)
  debug_1552:
    .return (rx2669_cur)
  rx2669_restart:
.annotate 'line', 436
    if_null rx2669_debug, debug_1553
    rx2669_cur."!cursor_debug"("NEXT", "infix:sym<==>")
  debug_1553:
  rx2669_fail:
    (rx2669_rep, rx2669_pos, $I10, $P10) = rx2669_cur."!mark_fail"(0)
    lt rx2669_pos, -1, rx2669_done
    eq rx2669_pos, -1, rx2669_fail
    jump $I10
  rx2669_done:
    rx2669_cur."!cursor_fail"()
    if_null rx2669_debug, debug_1554
    rx2669_cur."!cursor_debug"("FAIL", "infix:sym<==>")
  debug_1554:
    .return (rx2669_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<==>"  :subid("360_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2673 = self."!PREFIX__!subrule"("O", "==")
    new $P2674, "ResizablePMCArray"
    push $P2674, $P2673
    .return ($P2674)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<!=>"  :subid("361_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2676_tgt
    .local int rx2676_pos
    .local int rx2676_off
    .local int rx2676_eos
    .local int rx2676_rep
    .local pmc rx2676_cur
    .local pmc rx2676_debug
    (rx2676_cur, rx2676_pos, rx2676_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2676_cur
    .local pmc match
    .lex "$/", match
    length rx2676_eos, rx2676_tgt
    gt rx2676_pos, rx2676_eos, rx2676_done
    set rx2676_off, 0
    lt rx2676_pos, 2, rx2676_start
    sub rx2676_off, rx2676_pos, 1
    substr rx2676_tgt, rx2676_tgt, rx2676_off
  rx2676_start:
    eq $I10, 1, rx2676_restart
    if_null rx2676_debug, debug_1555
    rx2676_cur."!cursor_debug"("START", "infix:sym<!=>")
  debug_1555:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2677_done
    goto rxscan2677_scan
  rxscan2677_loop:
    (rx2676_pos) = rx2676_cur."from"()
    inc rx2676_pos
    rx2676_cur."!cursor_from"(rx2676_pos)
    ge rx2676_pos, rx2676_eos, rxscan2677_done
  rxscan2677_scan:
    set_addr $I10, rxscan2677_loop
    rx2676_cur."!mark_push"(0, rx2676_pos, $I10)
  rxscan2677_done:
.annotate 'line', 1111
  # rx subcapture "sym"
    set_addr $I10, rxcap_2678_fail
    rx2676_cur."!mark_push"(0, rx2676_pos, $I10)
  # rx literal  "!="
    add $I11, rx2676_pos, 2
    gt $I11, rx2676_eos, rx2676_fail
    sub $I11, rx2676_pos, rx2676_off
    substr $S10, rx2676_tgt, $I11, 2
    ne $S10, "!=", rx2676_fail
    add rx2676_pos, 2
    set_addr $I10, rxcap_2678_fail
    ($I12, $I11) = rx2676_cur."!mark_peek"($I10)
    rx2676_cur."!cursor_pos"($I11)
    ($P10) = rx2676_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2676_pos, "")
    rx2676_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2678_done
  rxcap_2678_fail:
    goto rx2676_fail
  rxcap_2678_done:
  # rx subrule "O" subtype=capture negate=
    rx2676_cur."!cursor_pos"(rx2676_pos)
    $P10 = rx2676_cur."O"("%relational, :pirop<isne INn>")
    unless $P10, rx2676_fail
    rx2676_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2676_pos = $P10."pos"()
  # rx pass
    rx2676_cur."!cursor_pass"(rx2676_pos, "infix:sym<!=>")
    if_null rx2676_debug, debug_1556
    rx2676_cur."!cursor_debug"("PASS", "infix:sym<!=>", " at pos=", rx2676_pos)
  debug_1556:
    .return (rx2676_cur)
  rx2676_restart:
.annotate 'line', 436
    if_null rx2676_debug, debug_1557
    rx2676_cur."!cursor_debug"("NEXT", "infix:sym<!=>")
  debug_1557:
  rx2676_fail:
    (rx2676_rep, rx2676_pos, $I10, $P10) = rx2676_cur."!mark_fail"(0)
    lt rx2676_pos, -1, rx2676_done
    eq rx2676_pos, -1, rx2676_fail
    jump $I10
  rx2676_done:
    rx2676_cur."!cursor_fail"()
    if_null rx2676_debug, debug_1558
    rx2676_cur."!cursor_debug"("FAIL", "infix:sym<!=>")
  debug_1558:
    .return (rx2676_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<!=>"  :subid("362_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2680 = self."!PREFIX__!subrule"("O", "!=")
    new $P2681, "ResizablePMCArray"
    push $P2681, $P2680
    .return ($P2681)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<<=>"  :subid("363_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2683_tgt
    .local int rx2683_pos
    .local int rx2683_off
    .local int rx2683_eos
    .local int rx2683_rep
    .local pmc rx2683_cur
    .local pmc rx2683_debug
    (rx2683_cur, rx2683_pos, rx2683_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2683_cur
    .local pmc match
    .lex "$/", match
    length rx2683_eos, rx2683_tgt
    gt rx2683_pos, rx2683_eos, rx2683_done
    set rx2683_off, 0
    lt rx2683_pos, 2, rx2683_start
    sub rx2683_off, rx2683_pos, 1
    substr rx2683_tgt, rx2683_tgt, rx2683_off
  rx2683_start:
    eq $I10, 1, rx2683_restart
    if_null rx2683_debug, debug_1559
    rx2683_cur."!cursor_debug"("START", "infix:sym<<=>")
  debug_1559:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2684_done
    goto rxscan2684_scan
  rxscan2684_loop:
    (rx2683_pos) = rx2683_cur."from"()
    inc rx2683_pos
    rx2683_cur."!cursor_from"(rx2683_pos)
    ge rx2683_pos, rx2683_eos, rxscan2684_done
  rxscan2684_scan:
    set_addr $I10, rxscan2684_loop
    rx2683_cur."!mark_push"(0, rx2683_pos, $I10)
  rxscan2684_done:
.annotate 'line', 1112
  # rx subcapture "sym"
    set_addr $I10, rxcap_2685_fail
    rx2683_cur."!mark_push"(0, rx2683_pos, $I10)
  # rx literal  "<="
    add $I11, rx2683_pos, 2
    gt $I11, rx2683_eos, rx2683_fail
    sub $I11, rx2683_pos, rx2683_off
    substr $S10, rx2683_tgt, $I11, 2
    ne $S10, "<=", rx2683_fail
    add rx2683_pos, 2
    set_addr $I10, rxcap_2685_fail
    ($I12, $I11) = rx2683_cur."!mark_peek"($I10)
    rx2683_cur."!cursor_pos"($I11)
    ($P10) = rx2683_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2683_pos, "")
    rx2683_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2685_done
  rxcap_2685_fail:
    goto rx2683_fail
  rxcap_2685_done:
  # rx subrule "O" subtype=capture negate=
    rx2683_cur."!cursor_pos"(rx2683_pos)
    $P10 = rx2683_cur."O"("%relational, :pirop<isle INn>")
    unless $P10, rx2683_fail
    rx2683_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2683_pos = $P10."pos"()
  # rx pass
    rx2683_cur."!cursor_pass"(rx2683_pos, "infix:sym<<=>")
    if_null rx2683_debug, debug_1560
    rx2683_cur."!cursor_debug"("PASS", "infix:sym<<=>", " at pos=", rx2683_pos)
  debug_1560:
    .return (rx2683_cur)
  rx2683_restart:
.annotate 'line', 436
    if_null rx2683_debug, debug_1561
    rx2683_cur."!cursor_debug"("NEXT", "infix:sym<<=>")
  debug_1561:
  rx2683_fail:
    (rx2683_rep, rx2683_pos, $I10, $P10) = rx2683_cur."!mark_fail"(0)
    lt rx2683_pos, -1, rx2683_done
    eq rx2683_pos, -1, rx2683_fail
    jump $I10
  rx2683_done:
    rx2683_cur."!cursor_fail"()
    if_null rx2683_debug, debug_1562
    rx2683_cur."!cursor_debug"("FAIL", "infix:sym<<=>")
  debug_1562:
    .return (rx2683_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<<=>"  :subid("364_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2687 = self."!PREFIX__!subrule"("O", "<=")
    new $P2688, "ResizablePMCArray"
    push $P2688, $P2687
    .return ($P2688)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<>=>"  :subid("365_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2690_tgt
    .local int rx2690_pos
    .local int rx2690_off
    .local int rx2690_eos
    .local int rx2690_rep
    .local pmc rx2690_cur
    .local pmc rx2690_debug
    (rx2690_cur, rx2690_pos, rx2690_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2690_cur
    .local pmc match
    .lex "$/", match
    length rx2690_eos, rx2690_tgt
    gt rx2690_pos, rx2690_eos, rx2690_done
    set rx2690_off, 0
    lt rx2690_pos, 2, rx2690_start
    sub rx2690_off, rx2690_pos, 1
    substr rx2690_tgt, rx2690_tgt, rx2690_off
  rx2690_start:
    eq $I10, 1, rx2690_restart
    if_null rx2690_debug, debug_1563
    rx2690_cur."!cursor_debug"("START", "infix:sym<>=>")
  debug_1563:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2691_done
    goto rxscan2691_scan
  rxscan2691_loop:
    (rx2690_pos) = rx2690_cur."from"()
    inc rx2690_pos
    rx2690_cur."!cursor_from"(rx2690_pos)
    ge rx2690_pos, rx2690_eos, rxscan2691_done
  rxscan2691_scan:
    set_addr $I10, rxscan2691_loop
    rx2690_cur."!mark_push"(0, rx2690_pos, $I10)
  rxscan2691_done:
.annotate 'line', 1113
  # rx subcapture "sym"
    set_addr $I10, rxcap_2692_fail
    rx2690_cur."!mark_push"(0, rx2690_pos, $I10)
  # rx literal  ">="
    add $I11, rx2690_pos, 2
    gt $I11, rx2690_eos, rx2690_fail
    sub $I11, rx2690_pos, rx2690_off
    substr $S10, rx2690_tgt, $I11, 2
    ne $S10, ">=", rx2690_fail
    add rx2690_pos, 2
    set_addr $I10, rxcap_2692_fail
    ($I12, $I11) = rx2690_cur."!mark_peek"($I10)
    rx2690_cur."!cursor_pos"($I11)
    ($P10) = rx2690_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2690_pos, "")
    rx2690_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2692_done
  rxcap_2692_fail:
    goto rx2690_fail
  rxcap_2692_done:
  # rx subrule "O" subtype=capture negate=
    rx2690_cur."!cursor_pos"(rx2690_pos)
    $P10 = rx2690_cur."O"("%relational, :pirop<isge INn>")
    unless $P10, rx2690_fail
    rx2690_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2690_pos = $P10."pos"()
  # rx pass
    rx2690_cur."!cursor_pass"(rx2690_pos, "infix:sym<>=>")
    if_null rx2690_debug, debug_1564
    rx2690_cur."!cursor_debug"("PASS", "infix:sym<>=>", " at pos=", rx2690_pos)
  debug_1564:
    .return (rx2690_cur)
  rx2690_restart:
.annotate 'line', 436
    if_null rx2690_debug, debug_1565
    rx2690_cur."!cursor_debug"("NEXT", "infix:sym<>=>")
  debug_1565:
  rx2690_fail:
    (rx2690_rep, rx2690_pos, $I10, $P10) = rx2690_cur."!mark_fail"(0)
    lt rx2690_pos, -1, rx2690_done
    eq rx2690_pos, -1, rx2690_fail
    jump $I10
  rx2690_done:
    rx2690_cur."!cursor_fail"()
    if_null rx2690_debug, debug_1566
    rx2690_cur."!cursor_debug"("FAIL", "infix:sym<>=>")
  debug_1566:
    .return (rx2690_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<>=>"  :subid("366_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2694 = self."!PREFIX__!subrule"("O", ">=")
    new $P2695, "ResizablePMCArray"
    push $P2695, $P2694
    .return ($P2695)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<<>"  :subid("367_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2697_tgt
    .local int rx2697_pos
    .local int rx2697_off
    .local int rx2697_eos
    .local int rx2697_rep
    .local pmc rx2697_cur
    .local pmc rx2697_debug
    (rx2697_cur, rx2697_pos, rx2697_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2697_cur
    .local pmc match
    .lex "$/", match
    length rx2697_eos, rx2697_tgt
    gt rx2697_pos, rx2697_eos, rx2697_done
    set rx2697_off, 0
    lt rx2697_pos, 2, rx2697_start
    sub rx2697_off, rx2697_pos, 1
    substr rx2697_tgt, rx2697_tgt, rx2697_off
  rx2697_start:
    eq $I10, 1, rx2697_restart
    if_null rx2697_debug, debug_1567
    rx2697_cur."!cursor_debug"("START", "infix:sym<<>")
  debug_1567:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2698_done
    goto rxscan2698_scan
  rxscan2698_loop:
    (rx2697_pos) = rx2697_cur."from"()
    inc rx2697_pos
    rx2697_cur."!cursor_from"(rx2697_pos)
    ge rx2697_pos, rx2697_eos, rxscan2698_done
  rxscan2698_scan:
    set_addr $I10, rxscan2698_loop
    rx2697_cur."!mark_push"(0, rx2697_pos, $I10)
  rxscan2698_done:
.annotate 'line', 1114
  # rx subcapture "sym"
    set_addr $I10, rxcap_2699_fail
    rx2697_cur."!mark_push"(0, rx2697_pos, $I10)
  # rx literal  "<"
    add $I11, rx2697_pos, 1
    gt $I11, rx2697_eos, rx2697_fail
    sub $I11, rx2697_pos, rx2697_off
    ord $I11, rx2697_tgt, $I11
    ne $I11, 60, rx2697_fail
    add rx2697_pos, 1
    set_addr $I10, rxcap_2699_fail
    ($I12, $I11) = rx2697_cur."!mark_peek"($I10)
    rx2697_cur."!cursor_pos"($I11)
    ($P10) = rx2697_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2697_pos, "")
    rx2697_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2699_done
  rxcap_2699_fail:
    goto rx2697_fail
  rxcap_2699_done:
  # rx subrule "O" subtype=capture negate=
    rx2697_cur."!cursor_pos"(rx2697_pos)
    $P10 = rx2697_cur."O"("%relational, :pirop<islt INn>")
    unless $P10, rx2697_fail
    rx2697_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2697_pos = $P10."pos"()
  # rx pass
    rx2697_cur."!cursor_pass"(rx2697_pos, "infix:sym<<>")
    if_null rx2697_debug, debug_1568
    rx2697_cur."!cursor_debug"("PASS", "infix:sym<<>", " at pos=", rx2697_pos)
  debug_1568:
    .return (rx2697_cur)
  rx2697_restart:
.annotate 'line', 436
    if_null rx2697_debug, debug_1569
    rx2697_cur."!cursor_debug"("NEXT", "infix:sym<<>")
  debug_1569:
  rx2697_fail:
    (rx2697_rep, rx2697_pos, $I10, $P10) = rx2697_cur."!mark_fail"(0)
    lt rx2697_pos, -1, rx2697_done
    eq rx2697_pos, -1, rx2697_fail
    jump $I10
  rx2697_done:
    rx2697_cur."!cursor_fail"()
    if_null rx2697_debug, debug_1570
    rx2697_cur."!cursor_debug"("FAIL", "infix:sym<<>")
  debug_1570:
    .return (rx2697_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<<>"  :subid("368_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2701 = self."!PREFIX__!subrule"("O", "<")
    new $P2702, "ResizablePMCArray"
    push $P2702, $P2701
    .return ($P2702)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<>>"  :subid("369_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2704_tgt
    .local int rx2704_pos
    .local int rx2704_off
    .local int rx2704_eos
    .local int rx2704_rep
    .local pmc rx2704_cur
    .local pmc rx2704_debug
    (rx2704_cur, rx2704_pos, rx2704_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2704_cur
    .local pmc match
    .lex "$/", match
    length rx2704_eos, rx2704_tgt
    gt rx2704_pos, rx2704_eos, rx2704_done
    set rx2704_off, 0
    lt rx2704_pos, 2, rx2704_start
    sub rx2704_off, rx2704_pos, 1
    substr rx2704_tgt, rx2704_tgt, rx2704_off
  rx2704_start:
    eq $I10, 1, rx2704_restart
    if_null rx2704_debug, debug_1571
    rx2704_cur."!cursor_debug"("START", "infix:sym<>>")
  debug_1571:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2705_done
    goto rxscan2705_scan
  rxscan2705_loop:
    (rx2704_pos) = rx2704_cur."from"()
    inc rx2704_pos
    rx2704_cur."!cursor_from"(rx2704_pos)
    ge rx2704_pos, rx2704_eos, rxscan2705_done
  rxscan2705_scan:
    set_addr $I10, rxscan2705_loop
    rx2704_cur."!mark_push"(0, rx2704_pos, $I10)
  rxscan2705_done:
.annotate 'line', 1115
  # rx subcapture "sym"
    set_addr $I10, rxcap_2706_fail
    rx2704_cur."!mark_push"(0, rx2704_pos, $I10)
  # rx literal  ">"
    add $I11, rx2704_pos, 1
    gt $I11, rx2704_eos, rx2704_fail
    sub $I11, rx2704_pos, rx2704_off
    ord $I11, rx2704_tgt, $I11
    ne $I11, 62, rx2704_fail
    add rx2704_pos, 1
    set_addr $I10, rxcap_2706_fail
    ($I12, $I11) = rx2704_cur."!mark_peek"($I10)
    rx2704_cur."!cursor_pos"($I11)
    ($P10) = rx2704_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2704_pos, "")
    rx2704_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2706_done
  rxcap_2706_fail:
    goto rx2704_fail
  rxcap_2706_done:
  # rx subrule "O" subtype=capture negate=
    rx2704_cur."!cursor_pos"(rx2704_pos)
    $P10 = rx2704_cur."O"("%relational, :pirop<isgt INn>")
    unless $P10, rx2704_fail
    rx2704_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2704_pos = $P10."pos"()
  # rx pass
    rx2704_cur."!cursor_pass"(rx2704_pos, "infix:sym<>>")
    if_null rx2704_debug, debug_1572
    rx2704_cur."!cursor_debug"("PASS", "infix:sym<>>", " at pos=", rx2704_pos)
  debug_1572:
    .return (rx2704_cur)
  rx2704_restart:
.annotate 'line', 436
    if_null rx2704_debug, debug_1573
    rx2704_cur."!cursor_debug"("NEXT", "infix:sym<>>")
  debug_1573:
  rx2704_fail:
    (rx2704_rep, rx2704_pos, $I10, $P10) = rx2704_cur."!mark_fail"(0)
    lt rx2704_pos, -1, rx2704_done
    eq rx2704_pos, -1, rx2704_fail
    jump $I10
  rx2704_done:
    rx2704_cur."!cursor_fail"()
    if_null rx2704_debug, debug_1574
    rx2704_cur."!cursor_debug"("FAIL", "infix:sym<>>")
  debug_1574:
    .return (rx2704_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<>>"  :subid("370_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2708 = self."!PREFIX__!subrule"("O", ">")
    new $P2709, "ResizablePMCArray"
    push $P2709, $P2708
    .return ($P2709)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<eq>"  :subid("371_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2711_tgt
    .local int rx2711_pos
    .local int rx2711_off
    .local int rx2711_eos
    .local int rx2711_rep
    .local pmc rx2711_cur
    .local pmc rx2711_debug
    (rx2711_cur, rx2711_pos, rx2711_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2711_cur
    .local pmc match
    .lex "$/", match
    length rx2711_eos, rx2711_tgt
    gt rx2711_pos, rx2711_eos, rx2711_done
    set rx2711_off, 0
    lt rx2711_pos, 2, rx2711_start
    sub rx2711_off, rx2711_pos, 1
    substr rx2711_tgt, rx2711_tgt, rx2711_off
  rx2711_start:
    eq $I10, 1, rx2711_restart
    if_null rx2711_debug, debug_1575
    rx2711_cur."!cursor_debug"("START", "infix:sym<eq>")
  debug_1575:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2712_done
    goto rxscan2712_scan
  rxscan2712_loop:
    (rx2711_pos) = rx2711_cur."from"()
    inc rx2711_pos
    rx2711_cur."!cursor_from"(rx2711_pos)
    ge rx2711_pos, rx2711_eos, rxscan2712_done
  rxscan2712_scan:
    set_addr $I10, rxscan2712_loop
    rx2711_cur."!mark_push"(0, rx2711_pos, $I10)
  rxscan2712_done:
.annotate 'line', 1116
  # rx subcapture "sym"
    set_addr $I10, rxcap_2713_fail
    rx2711_cur."!mark_push"(0, rx2711_pos, $I10)
  # rx literal  "eq"
    add $I11, rx2711_pos, 2
    gt $I11, rx2711_eos, rx2711_fail
    sub $I11, rx2711_pos, rx2711_off
    substr $S10, rx2711_tgt, $I11, 2
    ne $S10, "eq", rx2711_fail
    add rx2711_pos, 2
    set_addr $I10, rxcap_2713_fail
    ($I12, $I11) = rx2711_cur."!mark_peek"($I10)
    rx2711_cur."!cursor_pos"($I11)
    ($P10) = rx2711_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2711_pos, "")
    rx2711_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2713_done
  rxcap_2713_fail:
    goto rx2711_fail
  rxcap_2713_done:
  # rx subrule "O" subtype=capture negate=
    rx2711_cur."!cursor_pos"(rx2711_pos)
    $P10 = rx2711_cur."O"("%relational, :pirop<iseq ISs>")
    unless $P10, rx2711_fail
    rx2711_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2711_pos = $P10."pos"()
  # rx pass
    rx2711_cur."!cursor_pass"(rx2711_pos, "infix:sym<eq>")
    if_null rx2711_debug, debug_1576
    rx2711_cur."!cursor_debug"("PASS", "infix:sym<eq>", " at pos=", rx2711_pos)
  debug_1576:
    .return (rx2711_cur)
  rx2711_restart:
.annotate 'line', 436
    if_null rx2711_debug, debug_1577
    rx2711_cur."!cursor_debug"("NEXT", "infix:sym<eq>")
  debug_1577:
  rx2711_fail:
    (rx2711_rep, rx2711_pos, $I10, $P10) = rx2711_cur."!mark_fail"(0)
    lt rx2711_pos, -1, rx2711_done
    eq rx2711_pos, -1, rx2711_fail
    jump $I10
  rx2711_done:
    rx2711_cur."!cursor_fail"()
    if_null rx2711_debug, debug_1578
    rx2711_cur."!cursor_debug"("FAIL", "infix:sym<eq>")
  debug_1578:
    .return (rx2711_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<eq>"  :subid("372_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2715 = self."!PREFIX__!subrule"("O", "eq")
    new $P2716, "ResizablePMCArray"
    push $P2716, $P2715
    .return ($P2716)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<ne>"  :subid("373_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2718_tgt
    .local int rx2718_pos
    .local int rx2718_off
    .local int rx2718_eos
    .local int rx2718_rep
    .local pmc rx2718_cur
    .local pmc rx2718_debug
    (rx2718_cur, rx2718_pos, rx2718_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2718_cur
    .local pmc match
    .lex "$/", match
    length rx2718_eos, rx2718_tgt
    gt rx2718_pos, rx2718_eos, rx2718_done
    set rx2718_off, 0
    lt rx2718_pos, 2, rx2718_start
    sub rx2718_off, rx2718_pos, 1
    substr rx2718_tgt, rx2718_tgt, rx2718_off
  rx2718_start:
    eq $I10, 1, rx2718_restart
    if_null rx2718_debug, debug_1579
    rx2718_cur."!cursor_debug"("START", "infix:sym<ne>")
  debug_1579:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2719_done
    goto rxscan2719_scan
  rxscan2719_loop:
    (rx2718_pos) = rx2718_cur."from"()
    inc rx2718_pos
    rx2718_cur."!cursor_from"(rx2718_pos)
    ge rx2718_pos, rx2718_eos, rxscan2719_done
  rxscan2719_scan:
    set_addr $I10, rxscan2719_loop
    rx2718_cur."!mark_push"(0, rx2718_pos, $I10)
  rxscan2719_done:
.annotate 'line', 1117
  # rx subcapture "sym"
    set_addr $I10, rxcap_2720_fail
    rx2718_cur."!mark_push"(0, rx2718_pos, $I10)
  # rx literal  "ne"
    add $I11, rx2718_pos, 2
    gt $I11, rx2718_eos, rx2718_fail
    sub $I11, rx2718_pos, rx2718_off
    substr $S10, rx2718_tgt, $I11, 2
    ne $S10, "ne", rx2718_fail
    add rx2718_pos, 2
    set_addr $I10, rxcap_2720_fail
    ($I12, $I11) = rx2718_cur."!mark_peek"($I10)
    rx2718_cur."!cursor_pos"($I11)
    ($P10) = rx2718_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2718_pos, "")
    rx2718_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2720_done
  rxcap_2720_fail:
    goto rx2718_fail
  rxcap_2720_done:
  # rx subrule "O" subtype=capture negate=
    rx2718_cur."!cursor_pos"(rx2718_pos)
    $P10 = rx2718_cur."O"("%relational, :pirop<isne ISs>")
    unless $P10, rx2718_fail
    rx2718_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2718_pos = $P10."pos"()
  # rx pass
    rx2718_cur."!cursor_pass"(rx2718_pos, "infix:sym<ne>")
    if_null rx2718_debug, debug_1580
    rx2718_cur."!cursor_debug"("PASS", "infix:sym<ne>", " at pos=", rx2718_pos)
  debug_1580:
    .return (rx2718_cur)
  rx2718_restart:
.annotate 'line', 436
    if_null rx2718_debug, debug_1581
    rx2718_cur."!cursor_debug"("NEXT", "infix:sym<ne>")
  debug_1581:
  rx2718_fail:
    (rx2718_rep, rx2718_pos, $I10, $P10) = rx2718_cur."!mark_fail"(0)
    lt rx2718_pos, -1, rx2718_done
    eq rx2718_pos, -1, rx2718_fail
    jump $I10
  rx2718_done:
    rx2718_cur."!cursor_fail"()
    if_null rx2718_debug, debug_1582
    rx2718_cur."!cursor_debug"("FAIL", "infix:sym<ne>")
  debug_1582:
    .return (rx2718_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<ne>"  :subid("374_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2722 = self."!PREFIX__!subrule"("O", "ne")
    new $P2723, "ResizablePMCArray"
    push $P2723, $P2722
    .return ($P2723)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<le>"  :subid("375_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2725_tgt
    .local int rx2725_pos
    .local int rx2725_off
    .local int rx2725_eos
    .local int rx2725_rep
    .local pmc rx2725_cur
    .local pmc rx2725_debug
    (rx2725_cur, rx2725_pos, rx2725_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2725_cur
    .local pmc match
    .lex "$/", match
    length rx2725_eos, rx2725_tgt
    gt rx2725_pos, rx2725_eos, rx2725_done
    set rx2725_off, 0
    lt rx2725_pos, 2, rx2725_start
    sub rx2725_off, rx2725_pos, 1
    substr rx2725_tgt, rx2725_tgt, rx2725_off
  rx2725_start:
    eq $I10, 1, rx2725_restart
    if_null rx2725_debug, debug_1583
    rx2725_cur."!cursor_debug"("START", "infix:sym<le>")
  debug_1583:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2726_done
    goto rxscan2726_scan
  rxscan2726_loop:
    (rx2725_pos) = rx2725_cur."from"()
    inc rx2725_pos
    rx2725_cur."!cursor_from"(rx2725_pos)
    ge rx2725_pos, rx2725_eos, rxscan2726_done
  rxscan2726_scan:
    set_addr $I10, rxscan2726_loop
    rx2725_cur."!mark_push"(0, rx2725_pos, $I10)
  rxscan2726_done:
.annotate 'line', 1118
  # rx subcapture "sym"
    set_addr $I10, rxcap_2727_fail
    rx2725_cur."!mark_push"(0, rx2725_pos, $I10)
  # rx literal  "le"
    add $I11, rx2725_pos, 2
    gt $I11, rx2725_eos, rx2725_fail
    sub $I11, rx2725_pos, rx2725_off
    substr $S10, rx2725_tgt, $I11, 2
    ne $S10, "le", rx2725_fail
    add rx2725_pos, 2
    set_addr $I10, rxcap_2727_fail
    ($I12, $I11) = rx2725_cur."!mark_peek"($I10)
    rx2725_cur."!cursor_pos"($I11)
    ($P10) = rx2725_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2725_pos, "")
    rx2725_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2727_done
  rxcap_2727_fail:
    goto rx2725_fail
  rxcap_2727_done:
  # rx subrule "O" subtype=capture negate=
    rx2725_cur."!cursor_pos"(rx2725_pos)
    $P10 = rx2725_cur."O"("%relational, :pirop<isle ISs>")
    unless $P10, rx2725_fail
    rx2725_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2725_pos = $P10."pos"()
  # rx pass
    rx2725_cur."!cursor_pass"(rx2725_pos, "infix:sym<le>")
    if_null rx2725_debug, debug_1584
    rx2725_cur."!cursor_debug"("PASS", "infix:sym<le>", " at pos=", rx2725_pos)
  debug_1584:
    .return (rx2725_cur)
  rx2725_restart:
.annotate 'line', 436
    if_null rx2725_debug, debug_1585
    rx2725_cur."!cursor_debug"("NEXT", "infix:sym<le>")
  debug_1585:
  rx2725_fail:
    (rx2725_rep, rx2725_pos, $I10, $P10) = rx2725_cur."!mark_fail"(0)
    lt rx2725_pos, -1, rx2725_done
    eq rx2725_pos, -1, rx2725_fail
    jump $I10
  rx2725_done:
    rx2725_cur."!cursor_fail"()
    if_null rx2725_debug, debug_1586
    rx2725_cur."!cursor_debug"("FAIL", "infix:sym<le>")
  debug_1586:
    .return (rx2725_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<le>"  :subid("376_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2729 = self."!PREFIX__!subrule"("O", "le")
    new $P2730, "ResizablePMCArray"
    push $P2730, $P2729
    .return ($P2730)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<ge>"  :subid("377_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2732_tgt
    .local int rx2732_pos
    .local int rx2732_off
    .local int rx2732_eos
    .local int rx2732_rep
    .local pmc rx2732_cur
    .local pmc rx2732_debug
    (rx2732_cur, rx2732_pos, rx2732_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2732_cur
    .local pmc match
    .lex "$/", match
    length rx2732_eos, rx2732_tgt
    gt rx2732_pos, rx2732_eos, rx2732_done
    set rx2732_off, 0
    lt rx2732_pos, 2, rx2732_start
    sub rx2732_off, rx2732_pos, 1
    substr rx2732_tgt, rx2732_tgt, rx2732_off
  rx2732_start:
    eq $I10, 1, rx2732_restart
    if_null rx2732_debug, debug_1587
    rx2732_cur."!cursor_debug"("START", "infix:sym<ge>")
  debug_1587:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2733_done
    goto rxscan2733_scan
  rxscan2733_loop:
    (rx2732_pos) = rx2732_cur."from"()
    inc rx2732_pos
    rx2732_cur."!cursor_from"(rx2732_pos)
    ge rx2732_pos, rx2732_eos, rxscan2733_done
  rxscan2733_scan:
    set_addr $I10, rxscan2733_loop
    rx2732_cur."!mark_push"(0, rx2732_pos, $I10)
  rxscan2733_done:
.annotate 'line', 1119
  # rx subcapture "sym"
    set_addr $I10, rxcap_2734_fail
    rx2732_cur."!mark_push"(0, rx2732_pos, $I10)
  # rx literal  "ge"
    add $I11, rx2732_pos, 2
    gt $I11, rx2732_eos, rx2732_fail
    sub $I11, rx2732_pos, rx2732_off
    substr $S10, rx2732_tgt, $I11, 2
    ne $S10, "ge", rx2732_fail
    add rx2732_pos, 2
    set_addr $I10, rxcap_2734_fail
    ($I12, $I11) = rx2732_cur."!mark_peek"($I10)
    rx2732_cur."!cursor_pos"($I11)
    ($P10) = rx2732_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2732_pos, "")
    rx2732_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2734_done
  rxcap_2734_fail:
    goto rx2732_fail
  rxcap_2734_done:
  # rx subrule "O" subtype=capture negate=
    rx2732_cur."!cursor_pos"(rx2732_pos)
    $P10 = rx2732_cur."O"("%relational, :pirop<isge ISs>")
    unless $P10, rx2732_fail
    rx2732_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2732_pos = $P10."pos"()
  # rx pass
    rx2732_cur."!cursor_pass"(rx2732_pos, "infix:sym<ge>")
    if_null rx2732_debug, debug_1588
    rx2732_cur."!cursor_debug"("PASS", "infix:sym<ge>", " at pos=", rx2732_pos)
  debug_1588:
    .return (rx2732_cur)
  rx2732_restart:
.annotate 'line', 436
    if_null rx2732_debug, debug_1589
    rx2732_cur."!cursor_debug"("NEXT", "infix:sym<ge>")
  debug_1589:
  rx2732_fail:
    (rx2732_rep, rx2732_pos, $I10, $P10) = rx2732_cur."!mark_fail"(0)
    lt rx2732_pos, -1, rx2732_done
    eq rx2732_pos, -1, rx2732_fail
    jump $I10
  rx2732_done:
    rx2732_cur."!cursor_fail"()
    if_null rx2732_debug, debug_1590
    rx2732_cur."!cursor_debug"("FAIL", "infix:sym<ge>")
  debug_1590:
    .return (rx2732_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<ge>"  :subid("378_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2736 = self."!PREFIX__!subrule"("O", "ge")
    new $P2737, "ResizablePMCArray"
    push $P2737, $P2736
    .return ($P2737)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<lt>"  :subid("379_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2739_tgt
    .local int rx2739_pos
    .local int rx2739_off
    .local int rx2739_eos
    .local int rx2739_rep
    .local pmc rx2739_cur
    .local pmc rx2739_debug
    (rx2739_cur, rx2739_pos, rx2739_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2739_cur
    .local pmc match
    .lex "$/", match
    length rx2739_eos, rx2739_tgt
    gt rx2739_pos, rx2739_eos, rx2739_done
    set rx2739_off, 0
    lt rx2739_pos, 2, rx2739_start
    sub rx2739_off, rx2739_pos, 1
    substr rx2739_tgt, rx2739_tgt, rx2739_off
  rx2739_start:
    eq $I10, 1, rx2739_restart
    if_null rx2739_debug, debug_1591
    rx2739_cur."!cursor_debug"("START", "infix:sym<lt>")
  debug_1591:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2740_done
    goto rxscan2740_scan
  rxscan2740_loop:
    (rx2739_pos) = rx2739_cur."from"()
    inc rx2739_pos
    rx2739_cur."!cursor_from"(rx2739_pos)
    ge rx2739_pos, rx2739_eos, rxscan2740_done
  rxscan2740_scan:
    set_addr $I10, rxscan2740_loop
    rx2739_cur."!mark_push"(0, rx2739_pos, $I10)
  rxscan2740_done:
.annotate 'line', 1120
  # rx subcapture "sym"
    set_addr $I10, rxcap_2741_fail
    rx2739_cur."!mark_push"(0, rx2739_pos, $I10)
  # rx literal  "lt"
    add $I11, rx2739_pos, 2
    gt $I11, rx2739_eos, rx2739_fail
    sub $I11, rx2739_pos, rx2739_off
    substr $S10, rx2739_tgt, $I11, 2
    ne $S10, "lt", rx2739_fail
    add rx2739_pos, 2
    set_addr $I10, rxcap_2741_fail
    ($I12, $I11) = rx2739_cur."!mark_peek"($I10)
    rx2739_cur."!cursor_pos"($I11)
    ($P10) = rx2739_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2739_pos, "")
    rx2739_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2741_done
  rxcap_2741_fail:
    goto rx2739_fail
  rxcap_2741_done:
  # rx subrule "O" subtype=capture negate=
    rx2739_cur."!cursor_pos"(rx2739_pos)
    $P10 = rx2739_cur."O"("%relational, :pirop<islt ISs>")
    unless $P10, rx2739_fail
    rx2739_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2739_pos = $P10."pos"()
  # rx pass
    rx2739_cur."!cursor_pass"(rx2739_pos, "infix:sym<lt>")
    if_null rx2739_debug, debug_1592
    rx2739_cur."!cursor_debug"("PASS", "infix:sym<lt>", " at pos=", rx2739_pos)
  debug_1592:
    .return (rx2739_cur)
  rx2739_restart:
.annotate 'line', 436
    if_null rx2739_debug, debug_1593
    rx2739_cur."!cursor_debug"("NEXT", "infix:sym<lt>")
  debug_1593:
  rx2739_fail:
    (rx2739_rep, rx2739_pos, $I10, $P10) = rx2739_cur."!mark_fail"(0)
    lt rx2739_pos, -1, rx2739_done
    eq rx2739_pos, -1, rx2739_fail
    jump $I10
  rx2739_done:
    rx2739_cur."!cursor_fail"()
    if_null rx2739_debug, debug_1594
    rx2739_cur."!cursor_debug"("FAIL", "infix:sym<lt>")
  debug_1594:
    .return (rx2739_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<lt>"  :subid("380_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2743 = self."!PREFIX__!subrule"("O", "lt")
    new $P2744, "ResizablePMCArray"
    push $P2744, $P2743
    .return ($P2744)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<gt>"  :subid("381_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2746_tgt
    .local int rx2746_pos
    .local int rx2746_off
    .local int rx2746_eos
    .local int rx2746_rep
    .local pmc rx2746_cur
    .local pmc rx2746_debug
    (rx2746_cur, rx2746_pos, rx2746_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2746_cur
    .local pmc match
    .lex "$/", match
    length rx2746_eos, rx2746_tgt
    gt rx2746_pos, rx2746_eos, rx2746_done
    set rx2746_off, 0
    lt rx2746_pos, 2, rx2746_start
    sub rx2746_off, rx2746_pos, 1
    substr rx2746_tgt, rx2746_tgt, rx2746_off
  rx2746_start:
    eq $I10, 1, rx2746_restart
    if_null rx2746_debug, debug_1595
    rx2746_cur."!cursor_debug"("START", "infix:sym<gt>")
  debug_1595:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2747_done
    goto rxscan2747_scan
  rxscan2747_loop:
    (rx2746_pos) = rx2746_cur."from"()
    inc rx2746_pos
    rx2746_cur."!cursor_from"(rx2746_pos)
    ge rx2746_pos, rx2746_eos, rxscan2747_done
  rxscan2747_scan:
    set_addr $I10, rxscan2747_loop
    rx2746_cur."!mark_push"(0, rx2746_pos, $I10)
  rxscan2747_done:
.annotate 'line', 1121
  # rx subcapture "sym"
    set_addr $I10, rxcap_2748_fail
    rx2746_cur."!mark_push"(0, rx2746_pos, $I10)
  # rx literal  "gt"
    add $I11, rx2746_pos, 2
    gt $I11, rx2746_eos, rx2746_fail
    sub $I11, rx2746_pos, rx2746_off
    substr $S10, rx2746_tgt, $I11, 2
    ne $S10, "gt", rx2746_fail
    add rx2746_pos, 2
    set_addr $I10, rxcap_2748_fail
    ($I12, $I11) = rx2746_cur."!mark_peek"($I10)
    rx2746_cur."!cursor_pos"($I11)
    ($P10) = rx2746_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2746_pos, "")
    rx2746_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2748_done
  rxcap_2748_fail:
    goto rx2746_fail
  rxcap_2748_done:
  # rx subrule "O" subtype=capture negate=
    rx2746_cur."!cursor_pos"(rx2746_pos)
    $P10 = rx2746_cur."O"("%relational, :pirop<isgt ISs>")
    unless $P10, rx2746_fail
    rx2746_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2746_pos = $P10."pos"()
  # rx pass
    rx2746_cur."!cursor_pass"(rx2746_pos, "infix:sym<gt>")
    if_null rx2746_debug, debug_1596
    rx2746_cur."!cursor_debug"("PASS", "infix:sym<gt>", " at pos=", rx2746_pos)
  debug_1596:
    .return (rx2746_cur)
  rx2746_restart:
.annotate 'line', 436
    if_null rx2746_debug, debug_1597
    rx2746_cur."!cursor_debug"("NEXT", "infix:sym<gt>")
  debug_1597:
  rx2746_fail:
    (rx2746_rep, rx2746_pos, $I10, $P10) = rx2746_cur."!mark_fail"(0)
    lt rx2746_pos, -1, rx2746_done
    eq rx2746_pos, -1, rx2746_fail
    jump $I10
  rx2746_done:
    rx2746_cur."!cursor_fail"()
    if_null rx2746_debug, debug_1598
    rx2746_cur."!cursor_debug"("FAIL", "infix:sym<gt>")
  debug_1598:
    .return (rx2746_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<gt>"  :subid("382_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2750 = self."!PREFIX__!subrule"("O", "gt")
    new $P2751, "ResizablePMCArray"
    push $P2751, $P2750
    .return ($P2751)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<=:=>"  :subid("383_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2753_tgt
    .local int rx2753_pos
    .local int rx2753_off
    .local int rx2753_eos
    .local int rx2753_rep
    .local pmc rx2753_cur
    .local pmc rx2753_debug
    (rx2753_cur, rx2753_pos, rx2753_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2753_cur
    .local pmc match
    .lex "$/", match
    length rx2753_eos, rx2753_tgt
    gt rx2753_pos, rx2753_eos, rx2753_done
    set rx2753_off, 0
    lt rx2753_pos, 2, rx2753_start
    sub rx2753_off, rx2753_pos, 1
    substr rx2753_tgt, rx2753_tgt, rx2753_off
  rx2753_start:
    eq $I10, 1, rx2753_restart
    if_null rx2753_debug, debug_1599
    rx2753_cur."!cursor_debug"("START", "infix:sym<=:=>")
  debug_1599:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2754_done
    goto rxscan2754_scan
  rxscan2754_loop:
    (rx2753_pos) = rx2753_cur."from"()
    inc rx2753_pos
    rx2753_cur."!cursor_from"(rx2753_pos)
    ge rx2753_pos, rx2753_eos, rxscan2754_done
  rxscan2754_scan:
    set_addr $I10, rxscan2754_loop
    rx2753_cur."!mark_push"(0, rx2753_pos, $I10)
  rxscan2754_done:
.annotate 'line', 1122
  # rx subcapture "sym"
    set_addr $I10, rxcap_2755_fail
    rx2753_cur."!mark_push"(0, rx2753_pos, $I10)
  # rx literal  "=:="
    add $I11, rx2753_pos, 3
    gt $I11, rx2753_eos, rx2753_fail
    sub $I11, rx2753_pos, rx2753_off
    substr $S10, rx2753_tgt, $I11, 3
    ne $S10, "=:=", rx2753_fail
    add rx2753_pos, 3
    set_addr $I10, rxcap_2755_fail
    ($I12, $I11) = rx2753_cur."!mark_peek"($I10)
    rx2753_cur."!cursor_pos"($I11)
    ($P10) = rx2753_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2753_pos, "")
    rx2753_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2755_done
  rxcap_2755_fail:
    goto rx2753_fail
  rxcap_2755_done:
  # rx subrule "O" subtype=capture negate=
    rx2753_cur."!cursor_pos"(rx2753_pos)
    $P10 = rx2753_cur."O"("%relational, :pirop<issame>")
    unless $P10, rx2753_fail
    rx2753_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2753_pos = $P10."pos"()
  # rx pass
    rx2753_cur."!cursor_pass"(rx2753_pos, "infix:sym<=:=>")
    if_null rx2753_debug, debug_1600
    rx2753_cur."!cursor_debug"("PASS", "infix:sym<=:=>", " at pos=", rx2753_pos)
  debug_1600:
    .return (rx2753_cur)
  rx2753_restart:
.annotate 'line', 436
    if_null rx2753_debug, debug_1601
    rx2753_cur."!cursor_debug"("NEXT", "infix:sym<=:=>")
  debug_1601:
  rx2753_fail:
    (rx2753_rep, rx2753_pos, $I10, $P10) = rx2753_cur."!mark_fail"(0)
    lt rx2753_pos, -1, rx2753_done
    eq rx2753_pos, -1, rx2753_fail
    jump $I10
  rx2753_done:
    rx2753_cur."!cursor_fail"()
    if_null rx2753_debug, debug_1602
    rx2753_cur."!cursor_debug"("FAIL", "infix:sym<=:=>")
  debug_1602:
    .return (rx2753_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<=:=>"  :subid("384_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2757 = self."!PREFIX__!subrule"("O", "=:=")
    new $P2758, "ResizablePMCArray"
    push $P2758, $P2757
    .return ($P2758)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<~~>"  :subid("385_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2760_tgt
    .local int rx2760_pos
    .local int rx2760_off
    .local int rx2760_eos
    .local int rx2760_rep
    .local pmc rx2760_cur
    .local pmc rx2760_debug
    (rx2760_cur, rx2760_pos, rx2760_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2760_cur
    .local pmc match
    .lex "$/", match
    length rx2760_eos, rx2760_tgt
    gt rx2760_pos, rx2760_eos, rx2760_done
    set rx2760_off, 0
    lt rx2760_pos, 2, rx2760_start
    sub rx2760_off, rx2760_pos, 1
    substr rx2760_tgt, rx2760_tgt, rx2760_off
  rx2760_start:
    eq $I10, 1, rx2760_restart
    if_null rx2760_debug, debug_1603
    rx2760_cur."!cursor_debug"("START", "infix:sym<~~>")
  debug_1603:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2761_done
    goto rxscan2761_scan
  rxscan2761_loop:
    (rx2760_pos) = rx2760_cur."from"()
    inc rx2760_pos
    rx2760_cur."!cursor_from"(rx2760_pos)
    ge rx2760_pos, rx2760_eos, rxscan2761_done
  rxscan2761_scan:
    set_addr $I10, rxscan2761_loop
    rx2760_cur."!mark_push"(0, rx2760_pos, $I10)
  rxscan2761_done:
.annotate 'line', 1123
  # rx subcapture "sym"
    set_addr $I10, rxcap_2762_fail
    rx2760_cur."!mark_push"(0, rx2760_pos, $I10)
  # rx literal  "~~"
    add $I11, rx2760_pos, 2
    gt $I11, rx2760_eos, rx2760_fail
    sub $I11, rx2760_pos, rx2760_off
    substr $S10, rx2760_tgt, $I11, 2
    ne $S10, "~~", rx2760_fail
    add rx2760_pos, 2
    set_addr $I10, rxcap_2762_fail
    ($I12, $I11) = rx2760_cur."!mark_peek"($I10)
    rx2760_cur."!cursor_pos"($I11)
    ($P10) = rx2760_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2760_pos, "")
    rx2760_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2762_done
  rxcap_2762_fail:
    goto rx2760_fail
  rxcap_2762_done:
  # rx subrule "O" subtype=capture negate=
    rx2760_cur."!cursor_pos"(rx2760_pos)
    $P10 = rx2760_cur."O"("%relational, :reducecheck<smartmatch>")
    unless $P10, rx2760_fail
    rx2760_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2760_pos = $P10."pos"()
  # rx pass
    rx2760_cur."!cursor_pass"(rx2760_pos, "infix:sym<~~>")
    if_null rx2760_debug, debug_1604
    rx2760_cur."!cursor_debug"("PASS", "infix:sym<~~>", " at pos=", rx2760_pos)
  debug_1604:
    .return (rx2760_cur)
  rx2760_restart:
.annotate 'line', 436
    if_null rx2760_debug, debug_1605
    rx2760_cur."!cursor_debug"("NEXT", "infix:sym<~~>")
  debug_1605:
  rx2760_fail:
    (rx2760_rep, rx2760_pos, $I10, $P10) = rx2760_cur."!mark_fail"(0)
    lt rx2760_pos, -1, rx2760_done
    eq rx2760_pos, -1, rx2760_fail
    jump $I10
  rx2760_done:
    rx2760_cur."!cursor_fail"()
    if_null rx2760_debug, debug_1606
    rx2760_cur."!cursor_debug"("FAIL", "infix:sym<~~>")
  debug_1606:
    .return (rx2760_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<~~>"  :subid("386_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2764 = self."!PREFIX__!subrule"("O", "~~")
    new $P2765, "ResizablePMCArray"
    push $P2765, $P2764
    .return ($P2765)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<&&>"  :subid("387_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2767_tgt
    .local int rx2767_pos
    .local int rx2767_off
    .local int rx2767_eos
    .local int rx2767_rep
    .local pmc rx2767_cur
    .local pmc rx2767_debug
    (rx2767_cur, rx2767_pos, rx2767_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2767_cur
    .local pmc match
    .lex "$/", match
    length rx2767_eos, rx2767_tgt
    gt rx2767_pos, rx2767_eos, rx2767_done
    set rx2767_off, 0
    lt rx2767_pos, 2, rx2767_start
    sub rx2767_off, rx2767_pos, 1
    substr rx2767_tgt, rx2767_tgt, rx2767_off
  rx2767_start:
    eq $I10, 1, rx2767_restart
    if_null rx2767_debug, debug_1607
    rx2767_cur."!cursor_debug"("START", "infix:sym<&&>")
  debug_1607:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2768_done
    goto rxscan2768_scan
  rxscan2768_loop:
    (rx2767_pos) = rx2767_cur."from"()
    inc rx2767_pos
    rx2767_cur."!cursor_from"(rx2767_pos)
    ge rx2767_pos, rx2767_eos, rxscan2768_done
  rxscan2768_scan:
    set_addr $I10, rxscan2768_loop
    rx2767_cur."!mark_push"(0, rx2767_pos, $I10)
  rxscan2768_done:
.annotate 'line', 1125
  # rx subcapture "sym"
    set_addr $I10, rxcap_2769_fail
    rx2767_cur."!mark_push"(0, rx2767_pos, $I10)
  # rx literal  "&&"
    add $I11, rx2767_pos, 2
    gt $I11, rx2767_eos, rx2767_fail
    sub $I11, rx2767_pos, rx2767_off
    substr $S10, rx2767_tgt, $I11, 2
    ne $S10, "&&", rx2767_fail
    add rx2767_pos, 2
    set_addr $I10, rxcap_2769_fail
    ($I12, $I11) = rx2767_cur."!mark_peek"($I10)
    rx2767_cur."!cursor_pos"($I11)
    ($P10) = rx2767_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2767_pos, "")
    rx2767_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2769_done
  rxcap_2769_fail:
    goto rx2767_fail
  rxcap_2769_done:
  # rx subrule "O" subtype=capture negate=
    rx2767_cur."!cursor_pos"(rx2767_pos)
    $P10 = rx2767_cur."O"("%tight_and, :pasttype<if>")
    unless $P10, rx2767_fail
    rx2767_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2767_pos = $P10."pos"()
  # rx pass
    rx2767_cur."!cursor_pass"(rx2767_pos, "infix:sym<&&>")
    if_null rx2767_debug, debug_1608
    rx2767_cur."!cursor_debug"("PASS", "infix:sym<&&>", " at pos=", rx2767_pos)
  debug_1608:
    .return (rx2767_cur)
  rx2767_restart:
.annotate 'line', 436
    if_null rx2767_debug, debug_1609
    rx2767_cur."!cursor_debug"("NEXT", "infix:sym<&&>")
  debug_1609:
  rx2767_fail:
    (rx2767_rep, rx2767_pos, $I10, $P10) = rx2767_cur."!mark_fail"(0)
    lt rx2767_pos, -1, rx2767_done
    eq rx2767_pos, -1, rx2767_fail
    jump $I10
  rx2767_done:
    rx2767_cur."!cursor_fail"()
    if_null rx2767_debug, debug_1610
    rx2767_cur."!cursor_debug"("FAIL", "infix:sym<&&>")
  debug_1610:
    .return (rx2767_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<&&>"  :subid("388_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2771 = self."!PREFIX__!subrule"("O", "&&")
    new $P2772, "ResizablePMCArray"
    push $P2772, $P2771
    .return ($P2772)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<||>"  :subid("389_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2774_tgt
    .local int rx2774_pos
    .local int rx2774_off
    .local int rx2774_eos
    .local int rx2774_rep
    .local pmc rx2774_cur
    .local pmc rx2774_debug
    (rx2774_cur, rx2774_pos, rx2774_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2774_cur
    .local pmc match
    .lex "$/", match
    length rx2774_eos, rx2774_tgt
    gt rx2774_pos, rx2774_eos, rx2774_done
    set rx2774_off, 0
    lt rx2774_pos, 2, rx2774_start
    sub rx2774_off, rx2774_pos, 1
    substr rx2774_tgt, rx2774_tgt, rx2774_off
  rx2774_start:
    eq $I10, 1, rx2774_restart
    if_null rx2774_debug, debug_1611
    rx2774_cur."!cursor_debug"("START", "infix:sym<||>")
  debug_1611:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2775_done
    goto rxscan2775_scan
  rxscan2775_loop:
    (rx2774_pos) = rx2774_cur."from"()
    inc rx2774_pos
    rx2774_cur."!cursor_from"(rx2774_pos)
    ge rx2774_pos, rx2774_eos, rxscan2775_done
  rxscan2775_scan:
    set_addr $I10, rxscan2775_loop
    rx2774_cur."!mark_push"(0, rx2774_pos, $I10)
  rxscan2775_done:
.annotate 'line', 1127
  # rx subcapture "sym"
    set_addr $I10, rxcap_2776_fail
    rx2774_cur."!mark_push"(0, rx2774_pos, $I10)
  # rx literal  "||"
    add $I11, rx2774_pos, 2
    gt $I11, rx2774_eos, rx2774_fail
    sub $I11, rx2774_pos, rx2774_off
    substr $S10, rx2774_tgt, $I11, 2
    ne $S10, "||", rx2774_fail
    add rx2774_pos, 2
    set_addr $I10, rxcap_2776_fail
    ($I12, $I11) = rx2774_cur."!mark_peek"($I10)
    rx2774_cur."!cursor_pos"($I11)
    ($P10) = rx2774_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2774_pos, "")
    rx2774_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2776_done
  rxcap_2776_fail:
    goto rx2774_fail
  rxcap_2776_done:
  # rx subrule "O" subtype=capture negate=
    rx2774_cur."!cursor_pos"(rx2774_pos)
    $P10 = rx2774_cur."O"("%tight_or, :pasttype<unless>")
    unless $P10, rx2774_fail
    rx2774_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2774_pos = $P10."pos"()
  # rx pass
    rx2774_cur."!cursor_pass"(rx2774_pos, "infix:sym<||>")
    if_null rx2774_debug, debug_1612
    rx2774_cur."!cursor_debug"("PASS", "infix:sym<||>", " at pos=", rx2774_pos)
  debug_1612:
    .return (rx2774_cur)
  rx2774_restart:
.annotate 'line', 436
    if_null rx2774_debug, debug_1613
    rx2774_cur."!cursor_debug"("NEXT", "infix:sym<||>")
  debug_1613:
  rx2774_fail:
    (rx2774_rep, rx2774_pos, $I10, $P10) = rx2774_cur."!mark_fail"(0)
    lt rx2774_pos, -1, rx2774_done
    eq rx2774_pos, -1, rx2774_fail
    jump $I10
  rx2774_done:
    rx2774_cur."!cursor_fail"()
    if_null rx2774_debug, debug_1614
    rx2774_cur."!cursor_debug"("FAIL", "infix:sym<||>")
  debug_1614:
    .return (rx2774_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<||>"  :subid("390_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2778 = self."!PREFIX__!subrule"("O", "||")
    new $P2779, "ResizablePMCArray"
    push $P2779, $P2778
    .return ($P2779)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<//>"  :subid("391_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2781_tgt
    .local int rx2781_pos
    .local int rx2781_off
    .local int rx2781_eos
    .local int rx2781_rep
    .local pmc rx2781_cur
    .local pmc rx2781_debug
    (rx2781_cur, rx2781_pos, rx2781_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2781_cur
    .local pmc match
    .lex "$/", match
    length rx2781_eos, rx2781_tgt
    gt rx2781_pos, rx2781_eos, rx2781_done
    set rx2781_off, 0
    lt rx2781_pos, 2, rx2781_start
    sub rx2781_off, rx2781_pos, 1
    substr rx2781_tgt, rx2781_tgt, rx2781_off
  rx2781_start:
    eq $I10, 1, rx2781_restart
    if_null rx2781_debug, debug_1615
    rx2781_cur."!cursor_debug"("START", "infix:sym<//>")
  debug_1615:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2782_done
    goto rxscan2782_scan
  rxscan2782_loop:
    (rx2781_pos) = rx2781_cur."from"()
    inc rx2781_pos
    rx2781_cur."!cursor_from"(rx2781_pos)
    ge rx2781_pos, rx2781_eos, rxscan2782_done
  rxscan2782_scan:
    set_addr $I10, rxscan2782_loop
    rx2781_cur."!mark_push"(0, rx2781_pos, $I10)
  rxscan2782_done:
.annotate 'line', 1128
  # rx subcapture "sym"
    set_addr $I10, rxcap_2783_fail
    rx2781_cur."!mark_push"(0, rx2781_pos, $I10)
  # rx literal  "//"
    add $I11, rx2781_pos, 2
    gt $I11, rx2781_eos, rx2781_fail
    sub $I11, rx2781_pos, rx2781_off
    substr $S10, rx2781_tgt, $I11, 2
    ne $S10, "//", rx2781_fail
    add rx2781_pos, 2
    set_addr $I10, rxcap_2783_fail
    ($I12, $I11) = rx2781_cur."!mark_peek"($I10)
    rx2781_cur."!cursor_pos"($I11)
    ($P10) = rx2781_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2781_pos, "")
    rx2781_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2783_done
  rxcap_2783_fail:
    goto rx2781_fail
  rxcap_2783_done:
  # rx subrule "O" subtype=capture negate=
    rx2781_cur."!cursor_pos"(rx2781_pos)
    $P10 = rx2781_cur."O"("%tight_or, :pasttype<def_or>")
    unless $P10, rx2781_fail
    rx2781_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2781_pos = $P10."pos"()
  # rx pass
    rx2781_cur."!cursor_pass"(rx2781_pos, "infix:sym<//>")
    if_null rx2781_debug, debug_1616
    rx2781_cur."!cursor_debug"("PASS", "infix:sym<//>", " at pos=", rx2781_pos)
  debug_1616:
    .return (rx2781_cur)
  rx2781_restart:
.annotate 'line', 436
    if_null rx2781_debug, debug_1617
    rx2781_cur."!cursor_debug"("NEXT", "infix:sym<//>")
  debug_1617:
  rx2781_fail:
    (rx2781_rep, rx2781_pos, $I10, $P10) = rx2781_cur."!mark_fail"(0)
    lt rx2781_pos, -1, rx2781_done
    eq rx2781_pos, -1, rx2781_fail
    jump $I10
  rx2781_done:
    rx2781_cur."!cursor_fail"()
    if_null rx2781_debug, debug_1618
    rx2781_cur."!cursor_debug"("FAIL", "infix:sym<//>")
  debug_1618:
    .return (rx2781_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<//>"  :subid("392_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2785 = self."!PREFIX__!subrule"("O", "//")
    new $P2786, "ResizablePMCArray"
    push $P2786, $P2785
    .return ($P2786)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<?? !!>"  :subid("393_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2788_tgt
    .local int rx2788_pos
    .local int rx2788_off
    .local int rx2788_eos
    .local int rx2788_rep
    .local pmc rx2788_cur
    .local pmc rx2788_debug
    (rx2788_cur, rx2788_pos, rx2788_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2788_cur
    .local pmc match
    .lex "$/", match
    length rx2788_eos, rx2788_tgt
    gt rx2788_pos, rx2788_eos, rx2788_done
    set rx2788_off, 0
    lt rx2788_pos, 2, rx2788_start
    sub rx2788_off, rx2788_pos, 1
    substr rx2788_tgt, rx2788_tgt, rx2788_off
  rx2788_start:
    eq $I10, 1, rx2788_restart
    if_null rx2788_debug, debug_1619
    rx2788_cur."!cursor_debug"("START", "infix:sym<?? !!>")
  debug_1619:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2789_done
    goto rxscan2789_scan
  rxscan2789_loop:
    (rx2788_pos) = rx2788_cur."from"()
    inc rx2788_pos
    rx2788_cur."!cursor_from"(rx2788_pos)
    ge rx2788_pos, rx2788_eos, rxscan2789_done
  rxscan2789_scan:
    set_addr $I10, rxscan2789_loop
    rx2788_cur."!mark_push"(0, rx2788_pos, $I10)
  rxscan2789_done:
.annotate 'line', 1131
  # rx literal  "??"
    add $I11, rx2788_pos, 2
    gt $I11, rx2788_eos, rx2788_fail
    sub $I11, rx2788_pos, rx2788_off
    substr $S10, rx2788_tgt, $I11, 2
    ne $S10, "??", rx2788_fail
    add rx2788_pos, 2
.annotate 'line', 1132
  # rx subrule "ws" subtype=method negate=
    rx2788_cur."!cursor_pos"(rx2788_pos)
    $P10 = rx2788_cur."ws"()
    unless $P10, rx2788_fail
    rx2788_pos = $P10."pos"()
.annotate 'line', 1133
  # rx subrule "EXPR" subtype=capture negate=
    rx2788_cur."!cursor_pos"(rx2788_pos)
    $P10 = rx2788_cur."EXPR"("i=")
    unless $P10, rx2788_fail
    rx2788_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("EXPR")
    rx2788_pos = $P10."pos"()
.annotate 'line', 1134
  # rx literal  "!!"
    add $I11, rx2788_pos, 2
    gt $I11, rx2788_eos, rx2788_fail
    sub $I11, rx2788_pos, rx2788_off
    substr $S10, rx2788_tgt, $I11, 2
    ne $S10, "!!", rx2788_fail
    add rx2788_pos, 2
.annotate 'line', 1135
  # rx subrule "O" subtype=capture negate=
    rx2788_cur."!cursor_pos"(rx2788_pos)
    $P10 = rx2788_cur."O"("%conditional, :reducecheck<ternary>, :pasttype<if>")
    unless $P10, rx2788_fail
    rx2788_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2788_pos = $P10."pos"()
.annotate 'line', 1130
  # rx pass
    rx2788_cur."!cursor_pass"(rx2788_pos, "infix:sym<?? !!>")
    if_null rx2788_debug, debug_1620
    rx2788_cur."!cursor_debug"("PASS", "infix:sym<?? !!>", " at pos=", rx2788_pos)
  debug_1620:
    .return (rx2788_cur)
  rx2788_restart:
.annotate 'line', 436
    if_null rx2788_debug, debug_1621
    rx2788_cur."!cursor_debug"("NEXT", "infix:sym<?? !!>")
  debug_1621:
  rx2788_fail:
    (rx2788_rep, rx2788_pos, $I10, $P10) = rx2788_cur."!mark_fail"(0)
    lt rx2788_pos, -1, rx2788_done
    eq rx2788_pos, -1, rx2788_fail
    jump $I10
  rx2788_done:
    rx2788_cur."!cursor_fail"()
    if_null rx2788_debug, debug_1622
    rx2788_cur."!cursor_debug"("FAIL", "infix:sym<?? !!>")
  debug_1622:
    .return (rx2788_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<?? !!>"  :subid("394_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2791 = self."!PREFIX__!subrule"("ws", "??")
    new $P2792, "ResizablePMCArray"
    push $P2792, $P2791
    .return ($P2792)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<=>"  :subid("395_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2794_tgt
    .local int rx2794_pos
    .local int rx2794_off
    .local int rx2794_eos
    .local int rx2794_rep
    .local pmc rx2794_cur
    .local pmc rx2794_debug
    (rx2794_cur, rx2794_pos, rx2794_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2794_cur
    .local pmc match
    .lex "$/", match
    length rx2794_eos, rx2794_tgt
    gt rx2794_pos, rx2794_eos, rx2794_done
    set rx2794_off, 0
    lt rx2794_pos, 2, rx2794_start
    sub rx2794_off, rx2794_pos, 1
    substr rx2794_tgt, rx2794_tgt, rx2794_off
  rx2794_start:
    eq $I10, 1, rx2794_restart
    if_null rx2794_debug, debug_1623
    rx2794_cur."!cursor_debug"("START", "infix:sym<=>")
  debug_1623:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2795_done
    goto rxscan2795_scan
  rxscan2795_loop:
    (rx2794_pos) = rx2794_cur."from"()
    inc rx2794_pos
    rx2794_cur."!cursor_from"(rx2794_pos)
    ge rx2794_pos, rx2794_eos, rxscan2795_done
  rxscan2795_scan:
    set_addr $I10, rxscan2795_loop
    rx2794_cur."!mark_push"(0, rx2794_pos, $I10)
  rxscan2795_done:
.annotate 'line', 1139
  # rx subcapture "sym"
    set_addr $I10, rxcap_2796_fail
    rx2794_cur."!mark_push"(0, rx2794_pos, $I10)
  # rx literal  "="
    add $I11, rx2794_pos, 1
    gt $I11, rx2794_eos, rx2794_fail
    sub $I11, rx2794_pos, rx2794_off
    ord $I11, rx2794_tgt, $I11
    ne $I11, 61, rx2794_fail
    add rx2794_pos, 1
    set_addr $I10, rxcap_2796_fail
    ($I12, $I11) = rx2794_cur."!mark_peek"($I10)
    rx2794_cur."!cursor_pos"($I11)
    ($P10) = rx2794_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2794_pos, "")
    rx2794_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2796_done
  rxcap_2796_fail:
    goto rx2794_fail
  rxcap_2796_done:
  # rx subrule "panic" subtype=method negate=
    rx2794_cur."!cursor_pos"(rx2794_pos)
    $P10 = rx2794_cur."panic"("Assignment (\"=\") not supported in NQP, use \":=\" instead")
    unless $P10, rx2794_fail
    rx2794_pos = $P10."pos"()
.annotate 'line', 1138
  # rx pass
    rx2794_cur."!cursor_pass"(rx2794_pos, "infix:sym<=>")
    if_null rx2794_debug, debug_1624
    rx2794_cur."!cursor_debug"("PASS", "infix:sym<=>", " at pos=", rx2794_pos)
  debug_1624:
    .return (rx2794_cur)
  rx2794_restart:
.annotate 'line', 436
    if_null rx2794_debug, debug_1625
    rx2794_cur."!cursor_debug"("NEXT", "infix:sym<=>")
  debug_1625:
  rx2794_fail:
    (rx2794_rep, rx2794_pos, $I10, $P10) = rx2794_cur."!mark_fail"(0)
    lt rx2794_pos, -1, rx2794_done
    eq rx2794_pos, -1, rx2794_fail
    jump $I10
  rx2794_done:
    rx2794_cur."!cursor_fail"()
    if_null rx2794_debug, debug_1626
    rx2794_cur."!cursor_debug"("FAIL", "infix:sym<=>")
  debug_1626:
    .return (rx2794_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<=>"  :subid("396_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2798 = self."!PREFIX__!subrule"("panic", "=")
    new $P2799, "ResizablePMCArray"
    push $P2799, $P2798
    .return ($P2799)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<:=>"  :subid("397_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2801_tgt
    .local int rx2801_pos
    .local int rx2801_off
    .local int rx2801_eos
    .local int rx2801_rep
    .local pmc rx2801_cur
    .local pmc rx2801_debug
    (rx2801_cur, rx2801_pos, rx2801_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2801_cur
    .local pmc match
    .lex "$/", match
    length rx2801_eos, rx2801_tgt
    gt rx2801_pos, rx2801_eos, rx2801_done
    set rx2801_off, 0
    lt rx2801_pos, 2, rx2801_start
    sub rx2801_off, rx2801_pos, 1
    substr rx2801_tgt, rx2801_tgt, rx2801_off
  rx2801_start:
    eq $I10, 1, rx2801_restart
    if_null rx2801_debug, debug_1627
    rx2801_cur."!cursor_debug"("START", "infix:sym<:=>")
  debug_1627:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2802_done
    goto rxscan2802_scan
  rxscan2802_loop:
    (rx2801_pos) = rx2801_cur."from"()
    inc rx2801_pos
    rx2801_cur."!cursor_from"(rx2801_pos)
    ge rx2801_pos, rx2801_eos, rxscan2802_done
  rxscan2802_scan:
    set_addr $I10, rxscan2802_loop
    rx2801_cur."!mark_push"(0, rx2801_pos, $I10)
  rxscan2802_done:
.annotate 'line', 1141
  # rx subcapture "sym"
    set_addr $I10, rxcap_2803_fail
    rx2801_cur."!mark_push"(0, rx2801_pos, $I10)
  # rx literal  ":="
    add $I11, rx2801_pos, 2
    gt $I11, rx2801_eos, rx2801_fail
    sub $I11, rx2801_pos, rx2801_off
    substr $S10, rx2801_tgt, $I11, 2
    ne $S10, ":=", rx2801_fail
    add rx2801_pos, 2
    set_addr $I10, rxcap_2803_fail
    ($I12, $I11) = rx2801_cur."!mark_peek"($I10)
    rx2801_cur."!cursor_pos"($I11)
    ($P10) = rx2801_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2801_pos, "")
    rx2801_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2803_done
  rxcap_2803_fail:
    goto rx2801_fail
  rxcap_2803_done:
  # rx subrule "O" subtype=capture negate=
    rx2801_cur."!cursor_pos"(rx2801_pos)
    $P10 = rx2801_cur."O"("%assignment, :pasttype<bind_6model>")
    unless $P10, rx2801_fail
    rx2801_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2801_pos = $P10."pos"()
  # rx pass
    rx2801_cur."!cursor_pass"(rx2801_pos, "infix:sym<:=>")
    if_null rx2801_debug, debug_1628
    rx2801_cur."!cursor_debug"("PASS", "infix:sym<:=>", " at pos=", rx2801_pos)
  debug_1628:
    .return (rx2801_cur)
  rx2801_restart:
.annotate 'line', 436
    if_null rx2801_debug, debug_1629
    rx2801_cur."!cursor_debug"("NEXT", "infix:sym<:=>")
  debug_1629:
  rx2801_fail:
    (rx2801_rep, rx2801_pos, $I10, $P10) = rx2801_cur."!mark_fail"(0)
    lt rx2801_pos, -1, rx2801_done
    eq rx2801_pos, -1, rx2801_fail
    jump $I10
  rx2801_done:
    rx2801_cur."!cursor_fail"()
    if_null rx2801_debug, debug_1630
    rx2801_cur."!cursor_debug"("FAIL", "infix:sym<:=>")
  debug_1630:
    .return (rx2801_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<:=>"  :subid("398_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2805 = self."!PREFIX__!subrule"("O", ":=")
    new $P2806, "ResizablePMCArray"
    push $P2806, $P2805
    .return ($P2806)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<::=>"  :subid("399_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2808_tgt
    .local int rx2808_pos
    .local int rx2808_off
    .local int rx2808_eos
    .local int rx2808_rep
    .local pmc rx2808_cur
    .local pmc rx2808_debug
    (rx2808_cur, rx2808_pos, rx2808_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2808_cur
    .local pmc match
    .lex "$/", match
    length rx2808_eos, rx2808_tgt
    gt rx2808_pos, rx2808_eos, rx2808_done
    set rx2808_off, 0
    lt rx2808_pos, 2, rx2808_start
    sub rx2808_off, rx2808_pos, 1
    substr rx2808_tgt, rx2808_tgt, rx2808_off
  rx2808_start:
    eq $I10, 1, rx2808_restart
    if_null rx2808_debug, debug_1631
    rx2808_cur."!cursor_debug"("START", "infix:sym<::=>")
  debug_1631:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2809_done
    goto rxscan2809_scan
  rxscan2809_loop:
    (rx2808_pos) = rx2808_cur."from"()
    inc rx2808_pos
    rx2808_cur."!cursor_from"(rx2808_pos)
    ge rx2808_pos, rx2808_eos, rxscan2809_done
  rxscan2809_scan:
    set_addr $I10, rxscan2809_loop
    rx2808_cur."!mark_push"(0, rx2808_pos, $I10)
  rxscan2809_done:
.annotate 'line', 1142
  # rx subcapture "sym"
    set_addr $I10, rxcap_2810_fail
    rx2808_cur."!mark_push"(0, rx2808_pos, $I10)
  # rx literal  "::="
    add $I11, rx2808_pos, 3
    gt $I11, rx2808_eos, rx2808_fail
    sub $I11, rx2808_pos, rx2808_off
    substr $S10, rx2808_tgt, $I11, 3
    ne $S10, "::=", rx2808_fail
    add rx2808_pos, 3
    set_addr $I10, rxcap_2810_fail
    ($I12, $I11) = rx2808_cur."!mark_peek"($I10)
    rx2808_cur."!cursor_pos"($I11)
    ($P10) = rx2808_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2808_pos, "")
    rx2808_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2810_done
  rxcap_2810_fail:
    goto rx2808_fail
  rxcap_2810_done:
  # rx subrule "O" subtype=capture negate=
    rx2808_cur."!cursor_pos"(rx2808_pos)
    $P10 = rx2808_cur."O"("%assignment, :pasttype<bind_6model>")
    unless $P10, rx2808_fail
    rx2808_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2808_pos = $P10."pos"()
  # rx pass
    rx2808_cur."!cursor_pass"(rx2808_pos, "infix:sym<::=>")
    if_null rx2808_debug, debug_1632
    rx2808_cur."!cursor_debug"("PASS", "infix:sym<::=>", " at pos=", rx2808_pos)
  debug_1632:
    .return (rx2808_cur)
  rx2808_restart:
.annotate 'line', 436
    if_null rx2808_debug, debug_1633
    rx2808_cur."!cursor_debug"("NEXT", "infix:sym<::=>")
  debug_1633:
  rx2808_fail:
    (rx2808_rep, rx2808_pos, $I10, $P10) = rx2808_cur."!mark_fail"(0)
    lt rx2808_pos, -1, rx2808_done
    eq rx2808_pos, -1, rx2808_fail
    jump $I10
  rx2808_done:
    rx2808_cur."!cursor_fail"()
    if_null rx2808_debug, debug_1634
    rx2808_cur."!cursor_debug"("FAIL", "infix:sym<::=>")
  debug_1634:
    .return (rx2808_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<::=>"  :subid("400_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2812 = self."!PREFIX__!subrule"("O", "::=")
    new $P2813, "ResizablePMCArray"
    push $P2813, $P2812
    .return ($P2813)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "infix:sym<,>"  :subid("401_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2815_tgt
    .local int rx2815_pos
    .local int rx2815_off
    .local int rx2815_eos
    .local int rx2815_rep
    .local pmc rx2815_cur
    .local pmc rx2815_debug
    (rx2815_cur, rx2815_pos, rx2815_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2815_cur
    .local pmc match
    .lex "$/", match
    length rx2815_eos, rx2815_tgt
    gt rx2815_pos, rx2815_eos, rx2815_done
    set rx2815_off, 0
    lt rx2815_pos, 2, rx2815_start
    sub rx2815_off, rx2815_pos, 1
    substr rx2815_tgt, rx2815_tgt, rx2815_off
  rx2815_start:
    eq $I10, 1, rx2815_restart
    if_null rx2815_debug, debug_1635
    rx2815_cur."!cursor_debug"("START", "infix:sym<,>")
  debug_1635:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2816_done
    goto rxscan2816_scan
  rxscan2816_loop:
    (rx2815_pos) = rx2815_cur."from"()
    inc rx2815_pos
    rx2815_cur."!cursor_from"(rx2815_pos)
    ge rx2815_pos, rx2815_eos, rxscan2816_done
  rxscan2816_scan:
    set_addr $I10, rxscan2816_loop
    rx2815_cur."!mark_push"(0, rx2815_pos, $I10)
  rxscan2816_done:
.annotate 'line', 1144
  # rx subcapture "sym"
    set_addr $I10, rxcap_2817_fail
    rx2815_cur."!mark_push"(0, rx2815_pos, $I10)
  # rx literal  ","
    add $I11, rx2815_pos, 1
    gt $I11, rx2815_eos, rx2815_fail
    sub $I11, rx2815_pos, rx2815_off
    ord $I11, rx2815_tgt, $I11
    ne $I11, 44, rx2815_fail
    add rx2815_pos, 1
    set_addr $I10, rxcap_2817_fail
    ($I12, $I11) = rx2815_cur."!mark_peek"($I10)
    rx2815_cur."!cursor_pos"($I11)
    ($P10) = rx2815_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2815_pos, "")
    rx2815_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2817_done
  rxcap_2817_fail:
    goto rx2815_fail
  rxcap_2817_done:
  # rx subrule "O" subtype=capture negate=
    rx2815_cur."!cursor_pos"(rx2815_pos)
    $P10 = rx2815_cur."O"("%comma, :pasttype<list>")
    unless $P10, rx2815_fail
    rx2815_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2815_pos = $P10."pos"()
  # rx pass
    rx2815_cur."!cursor_pass"(rx2815_pos, "infix:sym<,>")
    if_null rx2815_debug, debug_1636
    rx2815_cur."!cursor_debug"("PASS", "infix:sym<,>", " at pos=", rx2815_pos)
  debug_1636:
    .return (rx2815_cur)
  rx2815_restart:
.annotate 'line', 436
    if_null rx2815_debug, debug_1637
    rx2815_cur."!cursor_debug"("NEXT", "infix:sym<,>")
  debug_1637:
  rx2815_fail:
    (rx2815_rep, rx2815_pos, $I10, $P10) = rx2815_cur."!mark_fail"(0)
    lt rx2815_pos, -1, rx2815_done
    eq rx2815_pos, -1, rx2815_fail
    jump $I10
  rx2815_done:
    rx2815_cur."!cursor_fail"()
    if_null rx2815_debug, debug_1638
    rx2815_cur."!cursor_debug"("FAIL", "infix:sym<,>")
  debug_1638:
    .return (rx2815_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__infix:sym<,>"  :subid("402_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    $P2819 = self."!PREFIX__!subrule"("O", ",")
    new $P2820, "ResizablePMCArray"
    push $P2820, $P2819
    .return ($P2820)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<return>"  :subid("403_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .const 'Sub' $P2828 = "404_1307835824.98345" 
    capture_lex $P2828
    .local string rx2822_tgt
    .local int rx2822_pos
    .local int rx2822_off
    .local int rx2822_eos
    .local int rx2822_rep
    .local pmc rx2822_cur
    .local pmc rx2822_debug
    (rx2822_cur, rx2822_pos, rx2822_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2822_cur
    .local pmc match
    .lex "$/", match
    length rx2822_eos, rx2822_tgt
    gt rx2822_pos, rx2822_eos, rx2822_done
    set rx2822_off, 0
    lt rx2822_pos, 2, rx2822_start
    sub rx2822_off, rx2822_pos, 1
    substr rx2822_tgt, rx2822_tgt, rx2822_off
  rx2822_start:
    eq $I10, 1, rx2822_restart
    if_null rx2822_debug, debug_1639
    rx2822_cur."!cursor_debug"("START", "prefix:sym<return>")
  debug_1639:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2823_done
    goto rxscan2823_scan
  rxscan2823_loop:
    (rx2822_pos) = rx2822_cur."from"()
    inc rx2822_pos
    rx2822_cur."!cursor_from"(rx2822_pos)
    ge rx2822_pos, rx2822_eos, rxscan2823_done
  rxscan2823_scan:
    set_addr $I10, rxscan2823_loop
    rx2822_cur."!mark_push"(0, rx2822_pos, $I10)
  rxscan2823_done:
.annotate 'line', 1146
  # rx subcapture "sym"
    set_addr $I10, rxcap_2824_fail
    rx2822_cur."!mark_push"(0, rx2822_pos, $I10)
  # rx literal  "return"
    add $I11, rx2822_pos, 6
    gt $I11, rx2822_eos, rx2822_fail
    sub $I11, rx2822_pos, rx2822_off
    substr $S10, rx2822_tgt, $I11, 6
    ne $S10, "return", rx2822_fail
    add rx2822_pos, 6
    set_addr $I10, rxcap_2824_fail
    ($I12, $I11) = rx2822_cur."!mark_peek"($I10)
    rx2822_cur."!cursor_pos"($I11)
    ($P10) = rx2822_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2822_pos, "")
    rx2822_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2824_done
  rxcap_2824_fail:
    goto rx2822_fail
  rxcap_2824_done:
  # rx charclass s
    ge rx2822_pos, rx2822_eos, rx2822_fail
    sub $I10, rx2822_pos, rx2822_off
    is_cclass $I11, 32, rx2822_tgt, $I10
    unless $I11, rx2822_fail
    inc rx2822_pos
  # rx subrule "O" subtype=capture negate=
    rx2822_cur."!cursor_pos"(rx2822_pos)
    $P10 = rx2822_cur."O"("%list_prefix, :pasttype<return>")
    unless $P10, rx2822_fail
    rx2822_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2822_pos = $P10."pos"()
    rx2822_cur."!cursor_pos"(rx2822_pos)
    find_lex $P2825, unicode:"$\x{a2}"
    $P2826 = $P2825."MATCH"()
    store_lex "$/", $P2826
    .const 'Sub' $P2828 = "404_1307835824.98345" 
    capture_lex $P2828
    $P2830 = $P2828()
  # rx pass
    rx2822_cur."!cursor_pass"(rx2822_pos, "prefix:sym<return>")
    if_null rx2822_debug, debug_1640
    rx2822_cur."!cursor_debug"("PASS", "prefix:sym<return>", " at pos=", rx2822_pos)
  debug_1640:
    .return (rx2822_cur)
  rx2822_restart:
.annotate 'line', 436
    if_null rx2822_debug, debug_1641
    rx2822_cur."!cursor_debug"("NEXT", "prefix:sym<return>")
  debug_1641:
  rx2822_fail:
    (rx2822_rep, rx2822_pos, $I10, $P10) = rx2822_cur."!mark_fail"(0)
    lt rx2822_pos, -1, rx2822_done
    eq rx2822_pos, -1, rx2822_fail
    jump $I10
  rx2822_done:
    rx2822_cur."!cursor_fail"()
    if_null rx2822_debug, debug_1642
    rx2822_cur."!cursor_debug"("FAIL", "prefix:sym<return>")
  debug_1642:
    .return (rx2822_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "_block2827"  :anon :subid("404_1307835824.98345") :outer("403_1307835824.98345")
.annotate 'line', 1146
    new $P2829, "Integer"
    assign $P2829, 1
    store_dynamic_lex "$*RETURN_USED", $P2829
    .return ($P2829)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<return>"  :subid("405_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2832, "ResizablePMCArray"
    push $P2832, "return"
    .return ($P2832)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "prefix:sym<make>"  :subid("406_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2834_tgt
    .local int rx2834_pos
    .local int rx2834_off
    .local int rx2834_eos
    .local int rx2834_rep
    .local pmc rx2834_cur
    .local pmc rx2834_debug
    (rx2834_cur, rx2834_pos, rx2834_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2834_cur
    .local pmc match
    .lex "$/", match
    length rx2834_eos, rx2834_tgt
    gt rx2834_pos, rx2834_eos, rx2834_done
    set rx2834_off, 0
    lt rx2834_pos, 2, rx2834_start
    sub rx2834_off, rx2834_pos, 1
    substr rx2834_tgt, rx2834_tgt, rx2834_off
  rx2834_start:
    eq $I10, 1, rx2834_restart
    if_null rx2834_debug, debug_1643
    rx2834_cur."!cursor_debug"("START", "prefix:sym<make>")
  debug_1643:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2835_done
    goto rxscan2835_scan
  rxscan2835_loop:
    (rx2834_pos) = rx2834_cur."from"()
    inc rx2834_pos
    rx2834_cur."!cursor_from"(rx2834_pos)
    ge rx2834_pos, rx2834_eos, rxscan2835_done
  rxscan2835_scan:
    set_addr $I10, rxscan2835_loop
    rx2834_cur."!mark_push"(0, rx2834_pos, $I10)
  rxscan2835_done:
.annotate 'line', 1147
  # rx subcapture "sym"
    set_addr $I10, rxcap_2836_fail
    rx2834_cur."!mark_push"(0, rx2834_pos, $I10)
  # rx literal  "make"
    add $I11, rx2834_pos, 4
    gt $I11, rx2834_eos, rx2834_fail
    sub $I11, rx2834_pos, rx2834_off
    substr $S10, rx2834_tgt, $I11, 4
    ne $S10, "make", rx2834_fail
    add rx2834_pos, 4
    set_addr $I10, rxcap_2836_fail
    ($I12, $I11) = rx2834_cur."!mark_peek"($I10)
    rx2834_cur."!cursor_pos"($I11)
    ($P10) = rx2834_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2834_pos, "")
    rx2834_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2836_done
  rxcap_2836_fail:
    goto rx2834_fail
  rxcap_2836_done:
  # rx charclass s
    ge rx2834_pos, rx2834_eos, rx2834_fail
    sub $I10, rx2834_pos, rx2834_off
    is_cclass $I11, 32, rx2834_tgt, $I10
    unless $I11, rx2834_fail
    inc rx2834_pos
  # rx subrule "O" subtype=capture negate=
    rx2834_cur."!cursor_pos"(rx2834_pos)
    $P10 = rx2834_cur."O"("%list_prefix")
    unless $P10, rx2834_fail
    rx2834_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("O")
    rx2834_pos = $P10."pos"()
  # rx pass
    rx2834_cur."!cursor_pass"(rx2834_pos, "prefix:sym<make>")
    if_null rx2834_debug, debug_1644
    rx2834_cur."!cursor_debug"("PASS", "prefix:sym<make>", " at pos=", rx2834_pos)
  debug_1644:
    .return (rx2834_cur)
  rx2834_restart:
.annotate 'line', 436
    if_null rx2834_debug, debug_1645
    rx2834_cur."!cursor_debug"("NEXT", "prefix:sym<make>")
  debug_1645:
  rx2834_fail:
    (rx2834_rep, rx2834_pos, $I10, $P10) = rx2834_cur."!mark_fail"(0)
    lt rx2834_pos, -1, rx2834_done
    eq rx2834_pos, -1, rx2834_fail
    jump $I10
  rx2834_done:
    rx2834_cur."!cursor_fail"()
    if_null rx2834_debug, debug_1646
    rx2834_cur."!cursor_debug"("FAIL", "prefix:sym<make>")
  debug_1646:
    .return (rx2834_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__prefix:sym<make>"  :subid("407_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2838, "ResizablePMCArray"
    push $P2838, "make"
    .return ($P2838)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<last>"  :subid("408_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2840_tgt
    .local int rx2840_pos
    .local int rx2840_off
    .local int rx2840_eos
    .local int rx2840_rep
    .local pmc rx2840_cur
    .local pmc rx2840_debug
    (rx2840_cur, rx2840_pos, rx2840_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2840_cur
    .local pmc match
    .lex "$/", match
    length rx2840_eos, rx2840_tgt
    gt rx2840_pos, rx2840_eos, rx2840_done
    set rx2840_off, 0
    lt rx2840_pos, 2, rx2840_start
    sub rx2840_off, rx2840_pos, 1
    substr rx2840_tgt, rx2840_tgt, rx2840_off
  rx2840_start:
    eq $I10, 1, rx2840_restart
    if_null rx2840_debug, debug_1647
    rx2840_cur."!cursor_debug"("START", "term:sym<last>")
  debug_1647:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2841_done
    goto rxscan2841_scan
  rxscan2841_loop:
    (rx2840_pos) = rx2840_cur."from"()
    inc rx2840_pos
    rx2840_cur."!cursor_from"(rx2840_pos)
    ge rx2840_pos, rx2840_eos, rxscan2841_done
  rxscan2841_scan:
    set_addr $I10, rxscan2841_loop
    rx2840_cur."!mark_push"(0, rx2840_pos, $I10)
  rxscan2841_done:
.annotate 'line', 1148
  # rx subcapture "sym"
    set_addr $I10, rxcap_2842_fail
    rx2840_cur."!mark_push"(0, rx2840_pos, $I10)
  # rx literal  "last"
    add $I11, rx2840_pos, 4
    gt $I11, rx2840_eos, rx2840_fail
    sub $I11, rx2840_pos, rx2840_off
    substr $S10, rx2840_tgt, $I11, 4
    ne $S10, "last", rx2840_fail
    add rx2840_pos, 4
    set_addr $I10, rxcap_2842_fail
    ($I12, $I11) = rx2840_cur."!mark_peek"($I10)
    rx2840_cur."!cursor_pos"($I11)
    ($P10) = rx2840_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2840_pos, "")
    rx2840_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2842_done
  rxcap_2842_fail:
    goto rx2840_fail
  rxcap_2842_done:
  # rx pass
    rx2840_cur."!cursor_pass"(rx2840_pos, "term:sym<last>")
    if_null rx2840_debug, debug_1648
    rx2840_cur."!cursor_debug"("PASS", "term:sym<last>", " at pos=", rx2840_pos)
  debug_1648:
    .return (rx2840_cur)
  rx2840_restart:
.annotate 'line', 436
    if_null rx2840_debug, debug_1649
    rx2840_cur."!cursor_debug"("NEXT", "term:sym<last>")
  debug_1649:
  rx2840_fail:
    (rx2840_rep, rx2840_pos, $I10, $P10) = rx2840_cur."!mark_fail"(0)
    lt rx2840_pos, -1, rx2840_done
    eq rx2840_pos, -1, rx2840_fail
    jump $I10
  rx2840_done:
    rx2840_cur."!cursor_fail"()
    if_null rx2840_debug, debug_1650
    rx2840_cur."!cursor_debug"("FAIL", "term:sym<last>")
  debug_1650:
    .return (rx2840_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<last>"  :subid("409_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2844, "ResizablePMCArray"
    push $P2844, "last"
    .return ($P2844)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<next>"  :subid("410_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2846_tgt
    .local int rx2846_pos
    .local int rx2846_off
    .local int rx2846_eos
    .local int rx2846_rep
    .local pmc rx2846_cur
    .local pmc rx2846_debug
    (rx2846_cur, rx2846_pos, rx2846_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2846_cur
    .local pmc match
    .lex "$/", match
    length rx2846_eos, rx2846_tgt
    gt rx2846_pos, rx2846_eos, rx2846_done
    set rx2846_off, 0
    lt rx2846_pos, 2, rx2846_start
    sub rx2846_off, rx2846_pos, 1
    substr rx2846_tgt, rx2846_tgt, rx2846_off
  rx2846_start:
    eq $I10, 1, rx2846_restart
    if_null rx2846_debug, debug_1651
    rx2846_cur."!cursor_debug"("START", "term:sym<next>")
  debug_1651:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2847_done
    goto rxscan2847_scan
  rxscan2847_loop:
    (rx2846_pos) = rx2846_cur."from"()
    inc rx2846_pos
    rx2846_cur."!cursor_from"(rx2846_pos)
    ge rx2846_pos, rx2846_eos, rxscan2847_done
  rxscan2847_scan:
    set_addr $I10, rxscan2847_loop
    rx2846_cur."!mark_push"(0, rx2846_pos, $I10)
  rxscan2847_done:
.annotate 'line', 1149
  # rx subcapture "sym"
    set_addr $I10, rxcap_2848_fail
    rx2846_cur."!mark_push"(0, rx2846_pos, $I10)
  # rx literal  "next"
    add $I11, rx2846_pos, 4
    gt $I11, rx2846_eos, rx2846_fail
    sub $I11, rx2846_pos, rx2846_off
    substr $S10, rx2846_tgt, $I11, 4
    ne $S10, "next", rx2846_fail
    add rx2846_pos, 4
    set_addr $I10, rxcap_2848_fail
    ($I12, $I11) = rx2846_cur."!mark_peek"($I10)
    rx2846_cur."!cursor_pos"($I11)
    ($P10) = rx2846_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2846_pos, "")
    rx2846_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2848_done
  rxcap_2848_fail:
    goto rx2846_fail
  rxcap_2848_done:
  # rx pass
    rx2846_cur."!cursor_pass"(rx2846_pos, "term:sym<next>")
    if_null rx2846_debug, debug_1652
    rx2846_cur."!cursor_debug"("PASS", "term:sym<next>", " at pos=", rx2846_pos)
  debug_1652:
    .return (rx2846_cur)
  rx2846_restart:
.annotate 'line', 436
    if_null rx2846_debug, debug_1653
    rx2846_cur."!cursor_debug"("NEXT", "term:sym<next>")
  debug_1653:
  rx2846_fail:
    (rx2846_rep, rx2846_pos, $I10, $P10) = rx2846_cur."!mark_fail"(0)
    lt rx2846_pos, -1, rx2846_done
    eq rx2846_pos, -1, rx2846_fail
    jump $I10
  rx2846_done:
    rx2846_cur."!cursor_fail"()
    if_null rx2846_debug, debug_1654
    rx2846_cur."!cursor_debug"("FAIL", "term:sym<next>")
  debug_1654:
    .return (rx2846_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<next>"  :subid("411_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2850, "ResizablePMCArray"
    push $P2850, "next"
    .return ($P2850)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "term:sym<redo>"  :subid("412_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    .local string rx2852_tgt
    .local int rx2852_pos
    .local int rx2852_off
    .local int rx2852_eos
    .local int rx2852_rep
    .local pmc rx2852_cur
    .local pmc rx2852_debug
    (rx2852_cur, rx2852_pos, rx2852_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2852_cur
    .local pmc match
    .lex "$/", match
    length rx2852_eos, rx2852_tgt
    gt rx2852_pos, rx2852_eos, rx2852_done
    set rx2852_off, 0
    lt rx2852_pos, 2, rx2852_start
    sub rx2852_off, rx2852_pos, 1
    substr rx2852_tgt, rx2852_tgt, rx2852_off
  rx2852_start:
    eq $I10, 1, rx2852_restart
    if_null rx2852_debug, debug_1655
    rx2852_cur."!cursor_debug"("START", "term:sym<redo>")
  debug_1655:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2853_done
    goto rxscan2853_scan
  rxscan2853_loop:
    (rx2852_pos) = rx2852_cur."from"()
    inc rx2852_pos
    rx2852_cur."!cursor_from"(rx2852_pos)
    ge rx2852_pos, rx2852_eos, rxscan2853_done
  rxscan2853_scan:
    set_addr $I10, rxscan2853_loop
    rx2852_cur."!mark_push"(0, rx2852_pos, $I10)
  rxscan2853_done:
.annotate 'line', 1150
  # rx subcapture "sym"
    set_addr $I10, rxcap_2854_fail
    rx2852_cur."!mark_push"(0, rx2852_pos, $I10)
  # rx literal  "redo"
    add $I11, rx2852_pos, 4
    gt $I11, rx2852_eos, rx2852_fail
    sub $I11, rx2852_pos, rx2852_off
    substr $S10, rx2852_tgt, $I11, 4
    ne $S10, "redo", rx2852_fail
    add rx2852_pos, 4
    set_addr $I10, rxcap_2854_fail
    ($I12, $I11) = rx2852_cur."!mark_peek"($I10)
    rx2852_cur."!cursor_pos"($I11)
    ($P10) = rx2852_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2852_pos, "")
    rx2852_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("sym")
    goto rxcap_2854_done
  rxcap_2854_fail:
    goto rx2852_fail
  rxcap_2854_done:
  # rx pass
    rx2852_cur."!cursor_pass"(rx2852_pos, "term:sym<redo>")
    if_null rx2852_debug, debug_1656
    rx2852_cur."!cursor_debug"("PASS", "term:sym<redo>", " at pos=", rx2852_pos)
  debug_1656:
    .return (rx2852_cur)
  rx2852_restart:
.annotate 'line', 436
    if_null rx2852_debug, debug_1657
    rx2852_cur."!cursor_debug"("NEXT", "term:sym<redo>")
  debug_1657:
  rx2852_fail:
    (rx2852_rep, rx2852_pos, $I10, $P10) = rx2852_cur."!mark_fail"(0)
    lt rx2852_pos, -1, rx2852_done
    eq rx2852_pos, -1, rx2852_fail
    jump $I10
  rx2852_done:
    rx2852_cur."!cursor_fail"()
    if_null rx2852_debug, debug_1658
    rx2852_cur."!cursor_debug"("FAIL", "term:sym<redo>")
  debug_1658:
    .return (rx2852_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "!PREFIX__term:sym<redo>"  :subid("413_1307835824.98345") :method :outer("40_1307835824.98345")
.annotate 'line', 436
    new $P2856, "ResizablePMCArray"
    push $P2856, "redo"
    .return ($P2856)
.end


.HLL "nqp"

.namespace ["NQP";"Grammar"]
.sub "smartmatch" :anon :subid("414_1307835824.98345") :outer("40_1307835824.98345")
    .param pmc param_2858
    .param pmc param_2859
.annotate 'line', 1152
    .lex "self", param_2858
    .lex "$/", param_2859
.annotate 'line', 1154
    new $P2860, "Undef"
    .lex "$t", $P2860
    find_lex $P2861, "$/"
    unless_null $P2861, vivify_1659
    $P2861 = root_new ['parrot';'ResizablePMCArray']
  vivify_1659:
    set $P2862, $P2861[0]
    unless_null $P2862, vivify_1660
    new $P2862, "Undef"
  vivify_1660:
    store_lex "$t", $P2862
    find_lex $P2863, "$/"
    unless_null $P2863, vivify_1661
    $P2863 = root_new ['parrot';'ResizablePMCArray']
  vivify_1661:
    set $P2864, $P2863[1]
    unless_null $P2864, vivify_1662
    new $P2864, "Undef"
  vivify_1662:
    find_lex $P2865, "$/"
    unless_null $P2865, vivify_1663
    $P2865 = root_new ['parrot';'ResizablePMCArray']
    store_lex "$/", $P2865
  vivify_1663:
    set $P2865[0], $P2864
    find_lex $P2866, "$t"
    unless_null $P2866, vivify_1664
    new $P2866, "Undef"
  vivify_1664:
    find_lex $P2867, "$/"
    unless_null $P2867, vivify_1665
    $P2867 = root_new ['parrot';'ResizablePMCArray']
    store_lex "$/", $P2867
  vivify_1665:
    set $P2867[1], $P2866
.annotate 'line', 1152
    .return ($P2866)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2869"  :subid("415_1307835824.98345") :outer("10_1307835824.98345")
.annotate 'line', 1158
    .const 'Sub' $P2931 = "435_1307835824.98345" 
    capture_lex $P2931
    .const 'Sub' $P2928 = "434_1307835824.98345" 
    capture_lex $P2928
    .const 'Sub' $P2926 = "433_1307835824.98345" 
    capture_lex $P2926
    .const 'Sub' $P2923 = "432_1307835824.98345" 
    capture_lex $P2923
    .const 'Sub' $P2920 = "431_1307835824.98345" 
    capture_lex $P2920
    .const 'Sub' $P2911 = "429_1307835824.98345" 
    capture_lex $P2911
    .const 'Sub' $P2909 = "428_1307835824.98345" 
    capture_lex $P2909
    .const 'Sub' $P2901 = "426_1307835824.98345" 
    capture_lex $P2901
    .const 'Sub' $P2899 = "425_1307835824.98345" 
    capture_lex $P2899
    .const 'Sub' $P2896 = "424_1307835824.98345" 
    capture_lex $P2896
    .const 'Sub' $P2894 = "423_1307835824.98345" 
    capture_lex $P2894
    .const 'Sub' $P2887 = "421_1307835824.98345" 
    capture_lex $P2887
    .const 'Sub' $P2885 = "420_1307835824.98345" 
    capture_lex $P2885
    .const 'Sub' $P2882 = "419_1307835824.98345" 
    capture_lex $P2882
    .const 'Sub' $P2880 = "418_1307835824.98345" 
    capture_lex $P2880
    .const 'Sub' $P2873 = "416_1307835824.98345" 
    capture_lex $P2873
    .lex "$?PACKAGE", $P2871
    .lex "$?CLASS", $P2872
    .const 'Sub' $P2931 = "435_1307835824.98345" 
    capture_lex $P2931
    .return ($P2931)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<:my>"  :subid("416_1307835824.98345") :method :outer("415_1307835824.98345")
.annotate 'line', 1158
    .const 'Sub' $P2877 = "417_1307835824.98345" 
    capture_lex $P2877
    .local string rx2874_tgt
    .local int rx2874_pos
    .local int rx2874_off
    .local int rx2874_eos
    .local int rx2874_rep
    .local pmc rx2874_cur
    .local pmc rx2874_debug
    (rx2874_cur, rx2874_pos, rx2874_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2874_cur
    .local pmc match
    .lex "$/", match
    length rx2874_eos, rx2874_tgt
    gt rx2874_pos, rx2874_eos, rx2874_done
    set rx2874_off, 0
    lt rx2874_pos, 2, rx2874_start
    sub rx2874_off, rx2874_pos, 1
    substr rx2874_tgt, rx2874_tgt, rx2874_off
  rx2874_start:
    eq $I10, 1, rx2874_restart
    if_null rx2874_debug, debug_1666
    rx2874_cur."!cursor_debug"("START", "metachar:sym<:my>")
  debug_1666:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2875_done
    goto rxscan2875_scan
  rxscan2875_loop:
    (rx2874_pos) = rx2874_cur."from"()
    inc rx2874_pos
    rx2874_cur."!cursor_from"(rx2874_pos)
    ge rx2874_pos, rx2874_eos, rxscan2875_done
  rxscan2875_scan:
    set_addr $I10, rxscan2875_loop
    rx2874_cur."!mark_push"(0, rx2874_pos, $I10)
  rxscan2875_done:
.annotate 'line', 1160
  # rx literal  ":"
    add $I11, rx2874_pos, 1
    gt $I11, rx2874_eos, rx2874_fail
    sub $I11, rx2874_pos, rx2874_off
    ord $I11, rx2874_tgt, $I11
    ne $I11, 58, rx2874_fail
    add rx2874_pos, 1
  # rx subrule "before" subtype=zerowidth negate=
    rx2874_cur."!cursor_pos"(rx2874_pos)
    .const 'Sub' $P2877 = "417_1307835824.98345" 
    capture_lex $P2877
    $P10 = rx2874_cur."before"($P2877)
    unless $P10, rx2874_fail
  # rx subrule "LANG" subtype=capture negate=
    rx2874_cur."!cursor_pos"(rx2874_pos)
    $P10 = rx2874_cur."LANG"("MAIN", "statement")
    unless $P10, rx2874_fail
    rx2874_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("statement")
    rx2874_pos = $P10."pos"()
  # rx subrule "ws" subtype=method negate=
    rx2874_cur."!cursor_pos"(rx2874_pos)
    $P10 = rx2874_cur."ws"()
    unless $P10, rx2874_fail
    rx2874_pos = $P10."pos"()
  # rx literal  ";"
    add $I11, rx2874_pos, 1
    gt $I11, rx2874_eos, rx2874_fail
    sub $I11, rx2874_pos, rx2874_off
    ord $I11, rx2874_tgt, $I11
    ne $I11, 59, rx2874_fail
    add rx2874_pos, 1
.annotate 'line', 1159
  # rx pass
    rx2874_cur."!cursor_pass"(rx2874_pos, "metachar:sym<:my>")
    if_null rx2874_debug, debug_1671
    rx2874_cur."!cursor_debug"("PASS", "metachar:sym<:my>", " at pos=", rx2874_pos)
  debug_1671:
    .return (rx2874_cur)
  rx2874_restart:
.annotate 'line', 1158
    if_null rx2874_debug, debug_1672
    rx2874_cur."!cursor_debug"("NEXT", "metachar:sym<:my>")
  debug_1672:
  rx2874_fail:
    (rx2874_rep, rx2874_pos, $I10, $P10) = rx2874_cur."!mark_fail"(0)
    lt rx2874_pos, -1, rx2874_done
    eq rx2874_pos, -1, rx2874_fail
    jump $I10
  rx2874_done:
    rx2874_cur."!cursor_fail"()
    if_null rx2874_debug, debug_1673
    rx2874_cur."!cursor_debug"("FAIL", "metachar:sym<:my>")
  debug_1673:
    .return (rx2874_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2876"  :anon :subid("417_1307835824.98345") :method :outer("416_1307835824.98345")
.annotate 'line', 1160
    .local string rx2878_tgt
    .local int rx2878_pos
    .local int rx2878_off
    .local int rx2878_eos
    .local int rx2878_rep
    .local pmc rx2878_cur
    .local pmc rx2878_debug
    (rx2878_cur, rx2878_pos, rx2878_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2878_cur
    .local pmc match
    .lex "$/", match
    length rx2878_eos, rx2878_tgt
    gt rx2878_pos, rx2878_eos, rx2878_done
    set rx2878_off, 0
    lt rx2878_pos, 2, rx2878_start
    sub rx2878_off, rx2878_pos, 1
    substr rx2878_tgt, rx2878_tgt, rx2878_off
  rx2878_start:
    eq $I10, 1, rx2878_restart
    if_null rx2878_debug, debug_1667
    rx2878_cur."!cursor_debug"("START", "")
  debug_1667:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2879_done
    goto rxscan2879_scan
  rxscan2879_loop:
    (rx2878_pos) = rx2878_cur."from"()
    inc rx2878_pos
    rx2878_cur."!cursor_from"(rx2878_pos)
    ge rx2878_pos, rx2878_eos, rxscan2879_done
  rxscan2879_scan:
    set_addr $I10, rxscan2879_loop
    rx2878_cur."!mark_push"(0, rx2878_pos, $I10)
  rxscan2879_done:
  # rx literal  "my"
    add $I11, rx2878_pos, 2
    gt $I11, rx2878_eos, rx2878_fail
    sub $I11, rx2878_pos, rx2878_off
    substr $S10, rx2878_tgt, $I11, 2
    ne $S10, "my", rx2878_fail
    add rx2878_pos, 2
  # rx pass
    rx2878_cur."!cursor_pass"(rx2878_pos, "")
    if_null rx2878_debug, debug_1668
    rx2878_cur."!cursor_debug"("PASS", "", " at pos=", rx2878_pos)
  debug_1668:
    .return (rx2878_cur)
  rx2878_restart:
    if_null rx2878_debug, debug_1669
    rx2878_cur."!cursor_debug"("NEXT", "")
  debug_1669:
  rx2878_fail:
    (rx2878_rep, rx2878_pos, $I10, $P10) = rx2878_cur."!mark_fail"(0)
    lt rx2878_pos, -1, rx2878_done
    eq rx2878_pos, -1, rx2878_fail
    jump $I10
  rx2878_done:
    rx2878_cur."!cursor_fail"()
    if_null rx2878_debug, debug_1670
    rx2878_cur."!cursor_debug"("FAIL", "")
  debug_1670:
    .return (rx2878_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__metachar:sym<:my>"  :subid("418_1307835824.98345") :method :outer("415_1307835824.98345")
.annotate 'line', 1158
    new $P2881, "ResizablePMCArray"
    push $P2881, ":"
    .return ($P2881)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<{ }>"  :subid("419_1307835824.98345") :method :outer("415_1307835824.98345")
.annotate 'line', 1158
    .local string rx2883_tgt
    .local int rx2883_pos
    .local int rx2883_off
    .local int rx2883_eos
    .local int rx2883_rep
    .local pmc rx2883_cur
    .local pmc rx2883_debug
    (rx2883_cur, rx2883_pos, rx2883_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2883_cur
    .local pmc match
    .lex "$/", match
    length rx2883_eos, rx2883_tgt
    gt rx2883_pos, rx2883_eos, rx2883_done
    set rx2883_off, 0
    lt rx2883_pos, 2, rx2883_start
    sub rx2883_off, rx2883_pos, 1
    substr rx2883_tgt, rx2883_tgt, rx2883_off
  rx2883_start:
    eq $I10, 1, rx2883_restart
    if_null rx2883_debug, debug_1674
    rx2883_cur."!cursor_debug"("START", "metachar:sym<{ }>")
  debug_1674:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2884_done
    goto rxscan2884_scan
  rxscan2884_loop:
    (rx2883_pos) = rx2883_cur."from"()
    inc rx2883_pos
    rx2883_cur."!cursor_from"(rx2883_pos)
    ge rx2883_pos, rx2883_eos, rxscan2884_done
  rxscan2884_scan:
    set_addr $I10, rxscan2884_loop
    rx2883_cur."!mark_push"(0, rx2883_pos, $I10)
  rxscan2884_done:
.annotate 'line', 1164
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2883_pos, rx2883_off
    substr $S10, rx2883_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx2883_fail
  # rx subrule "codeblock" subtype=capture negate=
    rx2883_cur."!cursor_pos"(rx2883_pos)
    $P10 = rx2883_cur."codeblock"()
    unless $P10, rx2883_fail
    rx2883_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("codeblock")
    rx2883_pos = $P10."pos"()
.annotate 'line', 1163
  # rx pass
    rx2883_cur."!cursor_pass"(rx2883_pos, "metachar:sym<{ }>")
    if_null rx2883_debug, debug_1675
    rx2883_cur."!cursor_debug"("PASS", "metachar:sym<{ }>", " at pos=", rx2883_pos)
  debug_1675:
    .return (rx2883_cur)
  rx2883_restart:
.annotate 'line', 1158
    if_null rx2883_debug, debug_1676
    rx2883_cur."!cursor_debug"("NEXT", "metachar:sym<{ }>")
  debug_1676:
  rx2883_fail:
    (rx2883_rep, rx2883_pos, $I10, $P10) = rx2883_cur."!mark_fail"(0)
    lt rx2883_pos, -1, rx2883_done
    eq rx2883_pos, -1, rx2883_fail
    jump $I10
  rx2883_done:
    rx2883_cur."!cursor_fail"()
    if_null rx2883_debug, debug_1677
    rx2883_cur."!cursor_debug"("FAIL", "metachar:sym<{ }>")
  debug_1677:
    .return (rx2883_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__metachar:sym<{ }>"  :subid("420_1307835824.98345") :method :outer("415_1307835824.98345")
.annotate 'line', 1158
    new $P2886, "ResizablePMCArray"
    push $P2886, "{"
    .return ($P2886)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "metachar:sym<nqpvar>"  :subid("421_1307835824.98345") :method :outer("415_1307835824.98345")
.annotate 'line', 1158
    .const 'Sub' $P2891 = "422_1307835824.98345" 
    capture_lex $P2891
    .local string rx2888_tgt
    .local int rx2888_pos
    .local int rx2888_off
    .local int rx2888_eos
    .local int rx2888_rep
    .local pmc rx2888_cur
    .local pmc rx2888_debug
    (rx2888_cur, rx2888_pos, rx2888_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2888_cur
    .local pmc match
    .lex "$/", match
    length rx2888_eos, rx2888_tgt
    gt rx2888_pos, rx2888_eos, rx2888_done
    set rx2888_off, 0
    lt rx2888_pos, 2, rx2888_start
    sub rx2888_off, rx2888_pos, 1
    substr rx2888_tgt, rx2888_tgt, rx2888_off
  rx2888_start:
    eq $I10, 1, rx2888_restart
    if_null rx2888_debug, debug_1678
    rx2888_cur."!cursor_debug"("START", "metachar:sym<nqpvar>")
  debug_1678:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2889_done
    goto rxscan2889_scan
  rxscan2889_loop:
    (rx2888_pos) = rx2888_cur."from"()
    inc rx2888_pos
    rx2888_cur."!cursor_from"(rx2888_pos)
    ge rx2888_pos, rx2888_eos, rxscan2889_done
  rxscan2889_scan:
    set_addr $I10, rxscan2889_loop
    rx2888_cur."!mark_push"(0, rx2888_pos, $I10)
  rxscan2889_done:
.annotate 'line', 1168
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2888_pos, rx2888_off
    substr $S10, rx2888_tgt, $I10, 1
    index $I11, "$@", $S10
    lt $I11, 0, rx2888_fail
  # rx subrule "before" subtype=zerowidth negate=
    rx2888_cur."!cursor_pos"(rx2888_pos)
    .const 'Sub' $P2891 = "422_1307835824.98345" 
    capture_lex $P2891
    $P10 = rx2888_cur."before"($P2891)
    unless $P10, rx2888_fail
  # rx subrule "LANG" subtype=capture negate=
    rx2888_cur."!cursor_pos"(rx2888_pos)
    $P10 = rx2888_cur."LANG"("MAIN", "variable")
    unless $P10, rx2888_fail
    rx2888_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("var")
    rx2888_pos = $P10."pos"()
.annotate 'line', 1167
  # rx pass
    rx2888_cur."!cursor_pass"(rx2888_pos, "metachar:sym<nqpvar>")
    if_null rx2888_debug, debug_1683
    rx2888_cur."!cursor_debug"("PASS", "metachar:sym<nqpvar>", " at pos=", rx2888_pos)
  debug_1683:
    .return (rx2888_cur)
  rx2888_restart:
.annotate 'line', 1158
    if_null rx2888_debug, debug_1684
    rx2888_cur."!cursor_debug"("NEXT", "metachar:sym<nqpvar>")
  debug_1684:
  rx2888_fail:
    (rx2888_rep, rx2888_pos, $I10, $P10) = rx2888_cur."!mark_fail"(0)
    lt rx2888_pos, -1, rx2888_done
    eq rx2888_pos, -1, rx2888_fail
    jump $I10
  rx2888_done:
    rx2888_cur."!cursor_fail"()
    if_null rx2888_debug, debug_1685
    rx2888_cur."!cursor_debug"("FAIL", "metachar:sym<nqpvar>")
  debug_1685:
    .return (rx2888_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2890"  :anon :subid("422_1307835824.98345") :method :outer("421_1307835824.98345")
.annotate 'line', 1168
    .local string rx2892_tgt
    .local int rx2892_pos
    .local int rx2892_off
    .local int rx2892_eos
    .local int rx2892_rep
    .local pmc rx2892_cur
    .local pmc rx2892_debug
    (rx2892_cur, rx2892_pos, rx2892_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2892_cur
    .local pmc match
    .lex "$/", match
    length rx2892_eos, rx2892_tgt
    gt rx2892_pos, rx2892_eos, rx2892_done
    set rx2892_off, 0
    lt rx2892_pos, 2, rx2892_start
    sub rx2892_off, rx2892_pos, 1
    substr rx2892_tgt, rx2892_tgt, rx2892_off
  rx2892_start:
    eq $I10, 1, rx2892_restart
    if_null rx2892_debug, debug_1679
    rx2892_cur."!cursor_debug"("START", "")
  debug_1679:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2893_done
    goto rxscan2893_scan
  rxscan2893_loop:
    (rx2892_pos) = rx2892_cur."from"()
    inc rx2892_pos
    rx2892_cur."!cursor_from"(rx2892_pos)
    ge rx2892_pos, rx2892_eos, rxscan2893_done
  rxscan2893_scan:
    set_addr $I10, rxscan2893_loop
    rx2892_cur."!mark_push"(0, rx2892_pos, $I10)
  rxscan2893_done:
  # rx charclass .
    ge rx2892_pos, rx2892_eos, rx2892_fail
    inc rx2892_pos
  # rx charclass w
    ge rx2892_pos, rx2892_eos, rx2892_fail
    sub $I10, rx2892_pos, rx2892_off
    is_cclass $I11, 8192, rx2892_tgt, $I10
    unless $I11, rx2892_fail
    inc rx2892_pos
  # rx pass
    rx2892_cur."!cursor_pass"(rx2892_pos, "")
    if_null rx2892_debug, debug_1680
    rx2892_cur."!cursor_debug"("PASS", "", " at pos=", rx2892_pos)
  debug_1680:
    .return (rx2892_cur)
  rx2892_restart:
    if_null rx2892_debug, debug_1681
    rx2892_cur."!cursor_debug"("NEXT", "")
  debug_1681:
  rx2892_fail:
    (rx2892_rep, rx2892_pos, $I10, $P10) = rx2892_cur."!mark_fail"(0)
    lt rx2892_pos, -1, rx2892_done
    eq rx2892_pos, -1, rx2892_fail
    jump $I10
  rx2892_done:
    rx2892_cur."!cursor_fail"()
    if_null rx2892_debug, debug_1682
    rx2892_cur."!cursor_debug"("FAIL", "")
  debug_1682:
    .return (rx2892_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__metachar:sym<nqpvar>"  :subid("423_1307835824.98345") :method :outer("415_1307835824.98345")
.annotate 'line', 1158
    new $P2895, "ResizablePMCArray"
    push $P2895, "$"
    push $P2895, "@"
    .return ($P2895)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<{ }>"  :subid("424_1307835824.98345") :method :outer("415_1307835824.98345")
.annotate 'line', 1158
    .local string rx2897_tgt
    .local int rx2897_pos
    .local int rx2897_off
    .local int rx2897_eos
    .local int rx2897_rep
    .local pmc rx2897_cur
    .local pmc rx2897_debug
    (rx2897_cur, rx2897_pos, rx2897_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2897_cur
    .local pmc match
    .lex "$/", match
    length rx2897_eos, rx2897_tgt
    gt rx2897_pos, rx2897_eos, rx2897_done
    set rx2897_off, 0
    lt rx2897_pos, 2, rx2897_start
    sub rx2897_off, rx2897_pos, 1
    substr rx2897_tgt, rx2897_tgt, rx2897_off
  rx2897_start:
    eq $I10, 1, rx2897_restart
    if_null rx2897_debug, debug_1686
    rx2897_cur."!cursor_debug"("START", "assertion:sym<{ }>")
  debug_1686:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2898_done
    goto rxscan2898_scan
  rxscan2898_loop:
    (rx2897_pos) = rx2897_cur."from"()
    inc rx2897_pos
    rx2897_cur."!cursor_from"(rx2897_pos)
    ge rx2897_pos, rx2897_eos, rxscan2898_done
  rxscan2898_scan:
    set_addr $I10, rxscan2898_loop
    rx2897_cur."!mark_push"(0, rx2897_pos, $I10)
  rxscan2898_done:
.annotate 'line', 1172
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2897_pos, rx2897_off
    substr $S10, rx2897_tgt, $I10, 1
    index $I11, "{", $S10
    lt $I11, 0, rx2897_fail
  # rx subrule "codeblock" subtype=capture negate=
    rx2897_cur."!cursor_pos"(rx2897_pos)
    $P10 = rx2897_cur."codeblock"()
    unless $P10, rx2897_fail
    rx2897_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("codeblock")
    rx2897_pos = $P10."pos"()
.annotate 'line', 1171
  # rx pass
    rx2897_cur."!cursor_pass"(rx2897_pos, "assertion:sym<{ }>")
    if_null rx2897_debug, debug_1687
    rx2897_cur."!cursor_debug"("PASS", "assertion:sym<{ }>", " at pos=", rx2897_pos)
  debug_1687:
    .return (rx2897_cur)
  rx2897_restart:
.annotate 'line', 1158
    if_null rx2897_debug, debug_1688
    rx2897_cur."!cursor_debug"("NEXT", "assertion:sym<{ }>")
  debug_1688:
  rx2897_fail:
    (rx2897_rep, rx2897_pos, $I10, $P10) = rx2897_cur."!mark_fail"(0)
    lt rx2897_pos, -1, rx2897_done
    eq rx2897_pos, -1, rx2897_fail
    jump $I10
  rx2897_done:
    rx2897_cur."!cursor_fail"()
    if_null rx2897_debug, debug_1689
    rx2897_cur."!cursor_debug"("FAIL", "assertion:sym<{ }>")
  debug_1689:
    .return (rx2897_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<{ }>"  :subid("425_1307835824.98345") :method :outer("415_1307835824.98345")
.annotate 'line', 1158
    new $P2900, "ResizablePMCArray"
    push $P2900, "{"
    .return ($P2900)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<?{ }>"  :subid("426_1307835824.98345") :method :outer("415_1307835824.98345")
.annotate 'line', 1158
    .const 'Sub' $P2905 = "427_1307835824.98345" 
    capture_lex $P2905
    .local string rx2902_tgt
    .local int rx2902_pos
    .local int rx2902_off
    .local int rx2902_eos
    .local int rx2902_rep
    .local pmc rx2902_cur
    .local pmc rx2902_debug
    (rx2902_cur, rx2902_pos, rx2902_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2902_cur
    .local pmc match
    .lex "$/", match
    length rx2902_eos, rx2902_tgt
    gt rx2902_pos, rx2902_eos, rx2902_done
    set rx2902_off, 0
    lt rx2902_pos, 2, rx2902_start
    sub rx2902_off, rx2902_pos, 1
    substr rx2902_tgt, rx2902_tgt, rx2902_off
  rx2902_start:
    eq $I10, 1, rx2902_restart
    if_null rx2902_debug, debug_1690
    rx2902_cur."!cursor_debug"("START", "assertion:sym<?{ }>")
  debug_1690:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2903_done
    goto rxscan2903_scan
  rxscan2903_loop:
    (rx2902_pos) = rx2902_cur."from"()
    inc rx2902_pos
    rx2902_cur."!cursor_from"(rx2902_pos)
    ge rx2902_pos, rx2902_eos, rxscan2903_done
  rxscan2903_scan:
    set_addr $I10, rxscan2903_loop
    rx2902_cur."!mark_push"(0, rx2902_pos, $I10)
  rxscan2903_done:
.annotate 'line', 1176
  # rx subcapture "zw"
    set_addr $I10, rxcap_2908_fail
    rx2902_cur."!mark_push"(0, rx2902_pos, $I10)
  # rx enumcharlist negate=0 
    ge rx2902_pos, rx2902_eos, rx2902_fail
    sub $I10, rx2902_pos, rx2902_off
    substr $S10, rx2902_tgt, $I10, 1
    index $I11, "?!", $S10
    lt $I11, 0, rx2902_fail
    inc rx2902_pos
  # rx subrule "before" subtype=zerowidth negate=
    rx2902_cur."!cursor_pos"(rx2902_pos)
    .const 'Sub' $P2905 = "427_1307835824.98345" 
    capture_lex $P2905
    $P10 = rx2902_cur."before"($P2905)
    unless $P10, rx2902_fail
    set_addr $I10, rxcap_2908_fail
    ($I12, $I11) = rx2902_cur."!mark_peek"($I10)
    rx2902_cur."!cursor_pos"($I11)
    ($P10) = rx2902_cur."!cursor_start"()
    $P10."!cursor_pass"(rx2902_pos, "")
    rx2902_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("zw")
    goto rxcap_2908_done
  rxcap_2908_fail:
    goto rx2902_fail
  rxcap_2908_done:
  # rx subrule "codeblock" subtype=capture negate=
    rx2902_cur."!cursor_pos"(rx2902_pos)
    $P10 = rx2902_cur."codeblock"()
    unless $P10, rx2902_fail
    rx2902_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("codeblock")
    rx2902_pos = $P10."pos"()
.annotate 'line', 1175
  # rx pass
    rx2902_cur."!cursor_pass"(rx2902_pos, "assertion:sym<?{ }>")
    if_null rx2902_debug, debug_1695
    rx2902_cur."!cursor_debug"("PASS", "assertion:sym<?{ }>", " at pos=", rx2902_pos)
  debug_1695:
    .return (rx2902_cur)
  rx2902_restart:
.annotate 'line', 1158
    if_null rx2902_debug, debug_1696
    rx2902_cur."!cursor_debug"("NEXT", "assertion:sym<?{ }>")
  debug_1696:
  rx2902_fail:
    (rx2902_rep, rx2902_pos, $I10, $P10) = rx2902_cur."!mark_fail"(0)
    lt rx2902_pos, -1, rx2902_done
    eq rx2902_pos, -1, rx2902_fail
    jump $I10
  rx2902_done:
    rx2902_cur."!cursor_fail"()
    if_null rx2902_debug, debug_1697
    rx2902_cur."!cursor_debug"("FAIL", "assertion:sym<?{ }>")
  debug_1697:
    .return (rx2902_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2904"  :anon :subid("427_1307835824.98345") :method :outer("426_1307835824.98345")
.annotate 'line', 1176
    .local string rx2906_tgt
    .local int rx2906_pos
    .local int rx2906_off
    .local int rx2906_eos
    .local int rx2906_rep
    .local pmc rx2906_cur
    .local pmc rx2906_debug
    (rx2906_cur, rx2906_pos, rx2906_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2906_cur
    .local pmc match
    .lex "$/", match
    length rx2906_eos, rx2906_tgt
    gt rx2906_pos, rx2906_eos, rx2906_done
    set rx2906_off, 0
    lt rx2906_pos, 2, rx2906_start
    sub rx2906_off, rx2906_pos, 1
    substr rx2906_tgt, rx2906_tgt, rx2906_off
  rx2906_start:
    eq $I10, 1, rx2906_restart
    if_null rx2906_debug, debug_1691
    rx2906_cur."!cursor_debug"("START", "")
  debug_1691:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2907_done
    goto rxscan2907_scan
  rxscan2907_loop:
    (rx2906_pos) = rx2906_cur."from"()
    inc rx2906_pos
    rx2906_cur."!cursor_from"(rx2906_pos)
    ge rx2906_pos, rx2906_eos, rxscan2907_done
  rxscan2907_scan:
    set_addr $I10, rxscan2907_loop
    rx2906_cur."!mark_push"(0, rx2906_pos, $I10)
  rxscan2907_done:
  # rx literal  "{"
    add $I11, rx2906_pos, 1
    gt $I11, rx2906_eos, rx2906_fail
    sub $I11, rx2906_pos, rx2906_off
    ord $I11, rx2906_tgt, $I11
    ne $I11, 123, rx2906_fail
    add rx2906_pos, 1
  # rx pass
    rx2906_cur."!cursor_pass"(rx2906_pos, "")
    if_null rx2906_debug, debug_1692
    rx2906_cur."!cursor_debug"("PASS", "", " at pos=", rx2906_pos)
  debug_1692:
    .return (rx2906_cur)
  rx2906_restart:
    if_null rx2906_debug, debug_1693
    rx2906_cur."!cursor_debug"("NEXT", "")
  debug_1693:
  rx2906_fail:
    (rx2906_rep, rx2906_pos, $I10, $P10) = rx2906_cur."!mark_fail"(0)
    lt rx2906_pos, -1, rx2906_done
    eq rx2906_pos, -1, rx2906_fail
    jump $I10
  rx2906_done:
    rx2906_cur."!cursor_fail"()
    if_null rx2906_debug, debug_1694
    rx2906_cur."!cursor_debug"("FAIL", "")
  debug_1694:
    .return (rx2906_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<?{ }>"  :subid("428_1307835824.98345") :method :outer("415_1307835824.98345")
.annotate 'line', 1158
    new $P2910, "ResizablePMCArray"
    push $P2910, "!"
    push $P2910, "?"
    .return ($P2910)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<name>"  :subid("429_1307835824.98345") :method :outer("415_1307835824.98345")
.annotate 'line', 1158
    .const 'Sub' $P2917 = "430_1307835824.98345" 
    capture_lex $P2917
    .local string rx2912_tgt
    .local int rx2912_pos
    .local int rx2912_off
    .local int rx2912_eos
    .local int rx2912_rep
    .local pmc rx2912_cur
    .local pmc rx2912_debug
    (rx2912_cur, rx2912_pos, rx2912_tgt, $I10) = self."!cursor_start"()
    rx2912_cur."!cursor_caparray"("assertion", "arglist", "nibbler")
    .lex unicode:"$\x{a2}", rx2912_cur
    .local pmc match
    .lex "$/", match
    length rx2912_eos, rx2912_tgt
    gt rx2912_pos, rx2912_eos, rx2912_done
    set rx2912_off, 0
    lt rx2912_pos, 2, rx2912_start
    sub rx2912_off, rx2912_pos, 1
    substr rx2912_tgt, rx2912_tgt, rx2912_off
  rx2912_start:
    eq $I10, 1, rx2912_restart
    if_null rx2912_debug, debug_1698
    rx2912_cur."!cursor_debug"("START", "assertion:sym<name>")
  debug_1698:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2913_done
    goto rxscan2913_scan
  rxscan2913_loop:
    (rx2912_pos) = rx2912_cur."from"()
    inc rx2912_pos
    rx2912_cur."!cursor_from"(rx2912_pos)
    ge rx2912_pos, rx2912_eos, rxscan2913_done
  rxscan2913_scan:
    set_addr $I10, rxscan2913_loop
    rx2912_cur."!mark_push"(0, rx2912_pos, $I10)
  rxscan2913_done:
.annotate 'line', 1180
  # rx subrule "identifier" subtype=capture negate=
    rx2912_cur."!cursor_pos"(rx2912_pos)
    $P10 = rx2912_cur."identifier"()
    unless $P10, rx2912_fail
    rx2912_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("longname")
    rx2912_pos = $P10."pos"()
.annotate 'line', 1187
  # rx rxquantr2914 ** 0..1
    set_addr $I10, rxquantr2914_done
    rx2912_cur."!mark_push"(0, rx2912_pos, $I10)
  rxquantr2914_loop:
  alt2915_0:
.annotate 'line', 1181
    set_addr $I10, alt2915_1
    rx2912_cur."!mark_push"(0, rx2912_pos, $I10)
.annotate 'line', 1182
  # rx subrule "before" subtype=zerowidth negate=
    rx2912_cur."!cursor_pos"(rx2912_pos)
    .const 'Sub' $P2917 = "430_1307835824.98345" 
    capture_lex $P2917
    $P10 = rx2912_cur."before"($P2917)
    unless $P10, rx2912_fail
    goto alt2915_end
  alt2915_1:
    set_addr $I10, alt2915_2
    rx2912_cur."!mark_push"(0, rx2912_pos, $I10)
.annotate 'line', 1183
  # rx literal  "="
    add $I11, rx2912_pos, 1
    gt $I11, rx2912_eos, rx2912_fail
    sub $I11, rx2912_pos, rx2912_off
    ord $I11, rx2912_tgt, $I11
    ne $I11, 61, rx2912_fail
    add rx2912_pos, 1
  # rx subrule "assertion" subtype=capture negate=
    rx2912_cur."!cursor_pos"(rx2912_pos)
    $P10 = rx2912_cur."assertion"()
    unless $P10, rx2912_fail
    rx2912_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("assertion")
    rx2912_pos = $P10."pos"()
    goto alt2915_end
  alt2915_2:
    set_addr $I10, alt2915_3
    rx2912_cur."!mark_push"(0, rx2912_pos, $I10)
.annotate 'line', 1184
  # rx literal  ":"
    add $I11, rx2912_pos, 1
    gt $I11, rx2912_eos, rx2912_fail
    sub $I11, rx2912_pos, rx2912_off
    ord $I11, rx2912_tgt, $I11
    ne $I11, 58, rx2912_fail
    add rx2912_pos, 1
  # rx subrule "arglist" subtype=capture negate=
    rx2912_cur."!cursor_pos"(rx2912_pos)
    $P10 = rx2912_cur."arglist"()
    unless $P10, rx2912_fail
    rx2912_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx2912_pos = $P10."pos"()
    goto alt2915_end
  alt2915_3:
    set_addr $I10, alt2915_4
    rx2912_cur."!mark_push"(0, rx2912_pos, $I10)
.annotate 'line', 1185
  # rx literal  "("
    add $I11, rx2912_pos, 1
    gt $I11, rx2912_eos, rx2912_fail
    sub $I11, rx2912_pos, rx2912_off
    ord $I11, rx2912_tgt, $I11
    ne $I11, 40, rx2912_fail
    add rx2912_pos, 1
  # rx subrule "LANG" subtype=capture negate=
    rx2912_cur."!cursor_pos"(rx2912_pos)
    $P10 = rx2912_cur."LANG"("MAIN", "arglist")
    unless $P10, rx2912_fail
    rx2912_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("arglist")
    rx2912_pos = $P10."pos"()
  # rx literal  ")"
    add $I11, rx2912_pos, 1
    gt $I11, rx2912_eos, rx2912_fail
    sub $I11, rx2912_pos, rx2912_off
    ord $I11, rx2912_tgt, $I11
    ne $I11, 41, rx2912_fail
    add rx2912_pos, 1
    goto alt2915_end
  alt2915_4:
.annotate 'line', 1186
  # rx subrule "normspace" subtype=method negate=
    rx2912_cur."!cursor_pos"(rx2912_pos)
    $P10 = rx2912_cur."normspace"()
    unless $P10, rx2912_fail
    rx2912_pos = $P10."pos"()
  # rx subrule "nibbler" subtype=capture negate=
    rx2912_cur."!cursor_pos"(rx2912_pos)
    $P10 = rx2912_cur."nibbler"()
    unless $P10, rx2912_fail
    rx2912_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("nibbler")
    rx2912_pos = $P10."pos"()
  alt2915_end:
.annotate 'line', 1187
    set_addr $I10, rxquantr2914_done
    (rx2912_rep) = rx2912_cur."!mark_commit"($I10)
  rxquantr2914_done:
.annotate 'line', 1179
  # rx pass
    rx2912_cur."!cursor_pass"(rx2912_pos, "assertion:sym<name>")
    if_null rx2912_debug, debug_1703
    rx2912_cur."!cursor_debug"("PASS", "assertion:sym<name>", " at pos=", rx2912_pos)
  debug_1703:
    .return (rx2912_cur)
  rx2912_restart:
.annotate 'line', 1158
    if_null rx2912_debug, debug_1704
    rx2912_cur."!cursor_debug"("NEXT", "assertion:sym<name>")
  debug_1704:
  rx2912_fail:
    (rx2912_rep, rx2912_pos, $I10, $P10) = rx2912_cur."!mark_fail"(0)
    lt rx2912_pos, -1, rx2912_done
    eq rx2912_pos, -1, rx2912_fail
    jump $I10
  rx2912_done:
    rx2912_cur."!cursor_fail"()
    if_null rx2912_debug, debug_1705
    rx2912_cur."!cursor_debug"("FAIL", "assertion:sym<name>")
  debug_1705:
    .return (rx2912_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "_block2916"  :anon :subid("430_1307835824.98345") :method :outer("429_1307835824.98345")
.annotate 'line', 1182
    .local string rx2918_tgt
    .local int rx2918_pos
    .local int rx2918_off
    .local int rx2918_eos
    .local int rx2918_rep
    .local pmc rx2918_cur
    .local pmc rx2918_debug
    (rx2918_cur, rx2918_pos, rx2918_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2918_cur
    .local pmc match
    .lex "$/", match
    length rx2918_eos, rx2918_tgt
    gt rx2918_pos, rx2918_eos, rx2918_done
    set rx2918_off, 0
    lt rx2918_pos, 2, rx2918_start
    sub rx2918_off, rx2918_pos, 1
    substr rx2918_tgt, rx2918_tgt, rx2918_off
  rx2918_start:
    eq $I10, 1, rx2918_restart
    if_null rx2918_debug, debug_1699
    rx2918_cur."!cursor_debug"("START", "")
  debug_1699:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2919_done
    goto rxscan2919_scan
  rxscan2919_loop:
    (rx2918_pos) = rx2918_cur."from"()
    inc rx2918_pos
    rx2918_cur."!cursor_from"(rx2918_pos)
    ge rx2918_pos, rx2918_eos, rxscan2919_done
  rxscan2919_scan:
    set_addr $I10, rxscan2919_loop
    rx2918_cur."!mark_push"(0, rx2918_pos, $I10)
  rxscan2919_done:
  # rx literal  ">"
    add $I11, rx2918_pos, 1
    gt $I11, rx2918_eos, rx2918_fail
    sub $I11, rx2918_pos, rx2918_off
    ord $I11, rx2918_tgt, $I11
    ne $I11, 62, rx2918_fail
    add rx2918_pos, 1
  # rx pass
    rx2918_cur."!cursor_pass"(rx2918_pos, "")
    if_null rx2918_debug, debug_1700
    rx2918_cur."!cursor_debug"("PASS", "", " at pos=", rx2918_pos)
  debug_1700:
    .return (rx2918_cur)
  rx2918_restart:
    if_null rx2918_debug, debug_1701
    rx2918_cur."!cursor_debug"("NEXT", "")
  debug_1701:
  rx2918_fail:
    (rx2918_rep, rx2918_pos, $I10, $P10) = rx2918_cur."!mark_fail"(0)
    lt rx2918_pos, -1, rx2918_done
    eq rx2918_pos, -1, rx2918_fail
    jump $I10
  rx2918_done:
    rx2918_cur."!cursor_fail"()
    if_null rx2918_debug, debug_1702
    rx2918_cur."!cursor_debug"("FAIL", "")
  debug_1702:
    .return (rx2918_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<name>"  :subid("431_1307835824.98345") :method :outer("415_1307835824.98345")
.annotate 'line', 1158
    $P2921 = self."!PREFIX__!subrule"("identifier", "")
    new $P2922, "ResizablePMCArray"
    push $P2922, $P2921
    .return ($P2922)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "assertion:sym<var>"  :subid("432_1307835824.98345") :method :outer("415_1307835824.98345")
.annotate 'line', 1158
    .local string rx2924_tgt
    .local int rx2924_pos
    .local int rx2924_off
    .local int rx2924_eos
    .local int rx2924_rep
    .local pmc rx2924_cur
    .local pmc rx2924_debug
    (rx2924_cur, rx2924_pos, rx2924_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2924_cur
    .local pmc match
    .lex "$/", match
    length rx2924_eos, rx2924_tgt
    gt rx2924_pos, rx2924_eos, rx2924_done
    set rx2924_off, 0
    lt rx2924_pos, 2, rx2924_start
    sub rx2924_off, rx2924_pos, 1
    substr rx2924_tgt, rx2924_tgt, rx2924_off
  rx2924_start:
    eq $I10, 1, rx2924_restart
    if_null rx2924_debug, debug_1706
    rx2924_cur."!cursor_debug"("START", "assertion:sym<var>")
  debug_1706:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2925_done
    goto rxscan2925_scan
  rxscan2925_loop:
    (rx2924_pos) = rx2924_cur."from"()
    inc rx2924_pos
    rx2924_cur."!cursor_from"(rx2924_pos)
    ge rx2924_pos, rx2924_eos, rxscan2925_done
  rxscan2925_scan:
    set_addr $I10, rxscan2925_loop
    rx2924_cur."!mark_push"(0, rx2924_pos, $I10)
  rxscan2925_done:
.annotate 'line', 1191
  # rx enumcharlist negate=0 zerowidth
    sub $I10, rx2924_pos, rx2924_off
    substr $S10, rx2924_tgt, $I10, 1
    index $I11, "$@", $S10
    lt $I11, 0, rx2924_fail
  # rx subrule "LANG" subtype=capture negate=
    rx2924_cur."!cursor_pos"(rx2924_pos)
    $P10 = rx2924_cur."LANG"("MAIN", "variable")
    unless $P10, rx2924_fail
    rx2924_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("var")
    rx2924_pos = $P10."pos"()
.annotate 'line', 1190
  # rx pass
    rx2924_cur."!cursor_pass"(rx2924_pos, "assertion:sym<var>")
    if_null rx2924_debug, debug_1707
    rx2924_cur."!cursor_debug"("PASS", "assertion:sym<var>", " at pos=", rx2924_pos)
  debug_1707:
    .return (rx2924_cur)
  rx2924_restart:
.annotate 'line', 1158
    if_null rx2924_debug, debug_1708
    rx2924_cur."!cursor_debug"("NEXT", "assertion:sym<var>")
  debug_1708:
  rx2924_fail:
    (rx2924_rep, rx2924_pos, $I10, $P10) = rx2924_cur."!mark_fail"(0)
    lt rx2924_pos, -1, rx2924_done
    eq rx2924_pos, -1, rx2924_fail
    jump $I10
  rx2924_done:
    rx2924_cur."!cursor_fail"()
    if_null rx2924_debug, debug_1709
    rx2924_cur."!cursor_debug"("FAIL", "assertion:sym<var>")
  debug_1709:
    .return (rx2924_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__assertion:sym<var>"  :subid("433_1307835824.98345") :method :outer("415_1307835824.98345")
.annotate 'line', 1158
    new $P2927, "ResizablePMCArray"
    push $P2927, "$"
    push $P2927, "@"
    .return ($P2927)
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "codeblock"  :subid("434_1307835824.98345") :method :outer("415_1307835824.98345")
.annotate 'line', 1158
    .local string rx2929_tgt
    .local int rx2929_pos
    .local int rx2929_off
    .local int rx2929_eos
    .local int rx2929_rep
    .local pmc rx2929_cur
    .local pmc rx2929_debug
    (rx2929_cur, rx2929_pos, rx2929_tgt, $I10) = self."!cursor_start"()
    .lex unicode:"$\x{a2}", rx2929_cur
    .local pmc match
    .lex "$/", match
    length rx2929_eos, rx2929_tgt
    gt rx2929_pos, rx2929_eos, rx2929_done
    set rx2929_off, 0
    lt rx2929_pos, 2, rx2929_start
    sub rx2929_off, rx2929_pos, 1
    substr rx2929_tgt, rx2929_tgt, rx2929_off
  rx2929_start:
    eq $I10, 1, rx2929_restart
    if_null rx2929_debug, debug_1710
    rx2929_cur."!cursor_debug"("START", "codeblock")
  debug_1710:
    $I10 = self.'from'()
    ne $I10, -1, rxscan2930_done
    goto rxscan2930_scan
  rxscan2930_loop:
    (rx2929_pos) = rx2929_cur."from"()
    inc rx2929_pos
    rx2929_cur."!cursor_from"(rx2929_pos)
    ge rx2929_pos, rx2929_eos, rxscan2930_done
  rxscan2930_scan:
    set_addr $I10, rxscan2930_loop
    rx2929_cur."!mark_push"(0, rx2929_pos, $I10)
  rxscan2930_done:
.annotate 'line', 1195
  # rx subrule "LANG" subtype=capture negate=
    rx2929_cur."!cursor_pos"(rx2929_pos)
    $P10 = rx2929_cur."LANG"("MAIN", "pblock")
    unless $P10, rx2929_fail
    rx2929_cur."!mark_push"(0, -1, 0, $P10)
    $P10."!cursor_names"("block")
    rx2929_pos = $P10."pos"()
.annotate 'line', 1194
  # rx pass
    rx2929_cur."!cursor_pass"(rx2929_pos, "codeblock")
    if_null rx2929_debug, debug_1711
    rx2929_cur."!cursor_debug"("PASS", "codeblock", " at pos=", rx2929_pos)
  debug_1711:
    .return (rx2929_cur)
  rx2929_restart:
.annotate 'line', 1158
    if_null rx2929_debug, debug_1712
    rx2929_cur."!cursor_debug"("NEXT", "codeblock")
  debug_1712:
  rx2929_fail:
    (rx2929_rep, rx2929_pos, $I10, $P10) = rx2929_cur."!mark_fail"(0)
    lt rx2929_pos, -1, rx2929_done
    eq rx2929_pos, -1, rx2929_fail
    jump $I10
  rx2929_done:
    rx2929_cur."!cursor_fail"()
    if_null rx2929_debug, debug_1713
    rx2929_cur."!cursor_debug"("FAIL", "codeblock")
  debug_1713:
    .return (rx2929_cur)
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Regex"]
.sub "!PREFIX__codeblock"  :subid("435_1307835824.98345") :method :outer("415_1307835824.98345")
.annotate 'line', 1158
    $P2932 = self."!PREFIX__!subrule"("LANG", "")
    new $P2933, "ResizablePMCArray"
    push $P2933, $P2932
    .return ($P2933)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2934"  :subid("436_1307835824.98345") :outer("10_1307835824.98345")
.annotate 'line', 1201
    .const 'Sub' $P7169 = "614_1307835824.98345" 
    capture_lex $P7169
    .const 'Sub' $P7154 = "613_1307835824.98345" 
    capture_lex $P7154
    .const 'Sub' $P7149 = "612_1307835824.98345" 
    capture_lex $P7149
    .const 'Sub' $P7144 = "611_1307835824.98345" 
    capture_lex $P7144
    .const 'Sub' $P7139 = "610_1307835824.98345" 
    capture_lex $P7139
    .const 'Sub' $P7122 = "609_1307835824.98345" 
    capture_lex $P7122
    .const 'Sub' $P7111 = "608_1307835824.98345" 
    capture_lex $P7111
    .const 'Sub' $P7100 = "607_1307835824.98345" 
    capture_lex $P7100
    .const 'Sub' $P7092 = "606_1307835824.98345" 
    capture_lex $P7092
    .const 'Sub' $P7087 = "605_1307835824.98345" 
    capture_lex $P7087
    .const 'Sub' $P7072 = "604_1307835824.98345" 
    capture_lex $P7072
    .const 'Sub' $P7064 = "603_1307835824.98345" 
    capture_lex $P7064
    .const 'Sub' $P7006 = "602_1307835824.98345" 
    capture_lex $P7006
    .const 'Sub' $P6991 = "601_1307835824.98345" 
    capture_lex $P6991
    .const 'Sub' $P6983 = "600_1307835824.98345" 
    capture_lex $P6983
    .const 'Sub' $P6975 = "599_1307835824.98345" 
    capture_lex $P6975
    .const 'Sub' $P6967 = "598_1307835824.98345" 
    capture_lex $P6967
    .const 'Sub' $P6959 = "597_1307835824.98345" 
    capture_lex $P6959
    .const 'Sub' $P6951 = "596_1307835824.98345" 
    capture_lex $P6951
    .const 'Sub' $P6922 = "595_1307835824.98345" 
    capture_lex $P6922
    .const 'Sub' $P6907 = "594_1307835824.98345" 
    capture_lex $P6907
    .const 'Sub' $P6899 = "593_1307835824.98345" 
    capture_lex $P6899
    .const 'Sub' $P6885 = "592_1307835824.98345" 
    capture_lex $P6885
    .const 'Sub' $P6871 = "591_1307835824.98345" 
    capture_lex $P6871
    .const 'Sub' $P6857 = "590_1307835824.98345" 
    capture_lex $P6857
    .const 'Sub' $P6849 = "589_1307835824.98345" 
    capture_lex $P6849
    .const 'Sub' $P6819 = "588_1307835824.98345" 
    capture_lex $P6819
    .const 'Sub' $P6781 = "586_1307835824.98345" 
    capture_lex $P6781
    .const 'Sub' $P6773 = "585_1307835824.98345" 
    capture_lex $P6773
    .const 'Sub' $P6765 = "584_1307835824.98345" 
    capture_lex $P6765
    .const 'Sub' $P6734 = "583_1307835824.98345" 
    capture_lex $P6734
    .const 'Sub' $P6715 = "582_1307835824.98345" 
    capture_lex $P6715
    .const 'Sub' $P6707 = "581_1307835824.98345" 
    capture_lex $P6707
    .const 'Sub' $P6699 = "580_1307835824.98345" 
    capture_lex $P6699
    .const 'Sub' $P6591 = "577_1307835824.98345" 
    capture_lex $P6591
    .const 'Sub' $P6583 = "576_1307835824.98345" 
    capture_lex $P6583
    .const 'Sub' $P6573 = "575_1307835824.98345" 
    capture_lex $P6573
    .const 'Sub' $P6539 = "574_1307835824.98345" 
    capture_lex $P6539
    .const 'Sub' $P6497 = "572_1307835824.98345" 
    capture_lex $P6497
    .const 'Sub' $P6483 = "571_1307835824.98345" 
    capture_lex $P6483
    .const 'Sub' $P6473 = "570_1307835824.98345" 
    capture_lex $P6473
    .const 'Sub' $P6421 = "569_1307835824.98345" 
    capture_lex $P6421
    .const 'Sub' $P6192 = "564_1307835824.98345" 
    capture_lex $P6192
    .const 'Sub' $P6074 = "559_1307835824.98345" 
    capture_lex $P6074
    .const 'Sub' $P6066 = "558_1307835824.98345" 
    capture_lex $P6066
    .const 'Sub' $P6022 = "556_1307835824.98345" 
    capture_lex $P6022
    .const 'Sub' $P6007 = "555_1307835824.98345" 
    capture_lex $P6007
    .const 'Sub' $P5984 = "554_1307835824.98345" 
    capture_lex $P5984
    .const 'Sub' $P5881 = "553_1307835824.98345" 
    capture_lex $P5881
    .const 'Sub' $P5827 = "550_1307835824.98345" 
    capture_lex $P5827
    .const 'Sub' $P5685 = "547_1307835824.98345" 
    capture_lex $P5685
    .const 'Sub' $P5358 = "540_1307835824.98345" 
    capture_lex $P5358
    .const 'Sub' $P5350 = "539_1307835824.98345" 
    capture_lex $P5350
    .const 'Sub' $P5342 = "538_1307835824.98345" 
    capture_lex $P5342
    .const 'Sub' $P5199 = "535_1307835824.98345" 
    capture_lex $P5199
    .const 'Sub' $P5191 = "534_1307835824.98345" 
    capture_lex $P5191
    .const 'Sub' $P5176 = "533_1307835824.98345" 
    capture_lex $P5176
    .const 'Sub' $P5161 = "532_1307835824.98345" 
    capture_lex $P5161
    .const 'Sub' $P5146 = "531_1307835824.98345" 
    capture_lex $P5146
    .const 'Sub' $P5124 = "530_1307835824.98345" 
    capture_lex $P5124
    .const 'Sub' $P5116 = "529_1307835824.98345" 
    capture_lex $P5116
    .const 'Sub' $P5108 = "528_1307835824.98345" 
    capture_lex $P5108
    .const 'Sub' $P5100 = "527_1307835824.98345" 
    capture_lex $P5100
    .const 'Sub' $P4866 = "521_1307835824.98345" 
    capture_lex $P4866
    .const 'Sub' $P4767 = "520_1307835824.98345" 
    capture_lex $P4767
    .const 'Sub' $P4759 = "519_1307835824.98345" 
    capture_lex $P4759
    .const 'Sub' $P4751 = "518_1307835824.98345" 
    capture_lex $P4751
    .const 'Sub' $P4743 = "517_1307835824.98345" 
    capture_lex $P4743
    .const 'Sub' $P4735 = "516_1307835824.98345" 
    capture_lex $P4735
    .const 'Sub' $P4727 = "515_1307835824.98345" 
    capture_lex $P4727
    .const 'Sub' $P4719 = "514_1307835824.98345" 
    capture_lex $P4719
    .const 'Sub' $P4517 = "508_1307835824.98345" 
    capture_lex $P4517
    .const 'Sub' $P4490 = "507_1307835824.98345" 
    capture_lex $P4490
    .const 'Sub' $P4476 = "506_1307835824.98345" 
    capture_lex $P4476
    .const 'Sub' $P4468 = "505_1307835824.98345" 
    capture_lex $P4468
    .const 'Sub' $P4460 = "504_1307835824.98345" 
    capture_lex $P4460
    .const 'Sub' $P4452 = "503_1307835824.98345" 
    capture_lex $P4452
    .const 'Sub' $P4444 = "502_1307835824.98345" 
    capture_lex $P4444
    .const 'Sub' $P4436 = "501_1307835824.98345" 
    capture_lex $P4436
    .const 'Sub' $P4428 = "500_1307835824.98345" 
    capture_lex $P4428
    .const 'Sub' $P4420 = "499_1307835824.98345" 
    capture_lex $P4420
    .const 'Sub' $P4412 = "498_1307835824.98345" 
    capture_lex $P4412
    .const 'Sub' $P4404 = "497_1307835824.98345" 
    capture_lex $P4404
    .const 'Sub' $P4396 = "496_1307835824.98345" 
    capture_lex $P4396
    .const 'Sub' $P4388 = "495_1307835824.98345" 
    capture_lex $P4388
    .const 'Sub' $P4380 = "494_1307835824.98345" 
    capture_lex $P4380
    .const 'Sub' $P4372 = "493_1307835824.98345" 
    capture_lex $P4372
    .const 'Sub' $P4356 = "492_1307835824.98345" 
    capture_lex $P4356
    .const 'Sub' $P4302 = "491_1307835824.98345" 
    capture_lex $P4302
    .const 'Sub' $P4285 = "490_1307835824.98345" 
    capture_lex $P4285
    .const 'Sub' $P4261 = "489_1307835824.98345" 
    capture_lex $P4261
    .const 'Sub' $P4238 = "488_1307835824.98345" 
    capture_lex $P4238
    .const 'Sub' $P4211 = "487_1307835824.98345" 
    capture_lex $P4211
    .const 'Sub' $P4174 = "486_1307835824.98345" 
    capture_lex $P4174
    .const 'Sub' $P4159 = "485_1307835824.98345" 
    capture_lex $P4159
    .const 'Sub' $P4147 = "484_1307835824.98345" 
    capture_lex $P4147
    .const 'Sub' $P4096 = "482_1307835824.98345" 
    capture_lex $P4096
    .const 'Sub' $P4071 = "481_1307835824.98345" 
    capture_lex $P4071
    .const 'Sub' $P4064 = "480_1307835824.98345" 
    capture_lex $P4064
    .const 'Sub' $P4022 = "479_1307835824.98345" 
    capture_lex $P4022
    .const 'Sub' $P3972 = "477_1307835824.98345" 
    capture_lex $P3972
    .const 'Sub' $P3955 = "476_1307835824.98345" 
    capture_lex $P3955
    .const 'Sub' $P3916 = "474_1307835824.98345" 
    capture_lex $P3916
    .const 'Sub' $P3908 = "473_1307835824.98345" 
    capture_lex $P3908
    .const 'Sub' $P3900 = "472_1307835824.98345" 
    capture_lex $P3900
    .const 'Sub' $P3883 = "471_1307835824.98345" 
    capture_lex $P3883
    .const 'Sub' $P3787 = "469_1307835824.98345" 
    capture_lex $P3787
    .const 'Sub' $P3743 = "467_1307835824.98345" 
    capture_lex $P3743
    .const 'Sub' $P3566 = "465_1307835824.98345" 
    capture_lex $P3566
    .const 'Sub' $P3535 = "464_1307835824.98345" 
    capture_lex $P3535
    .const 'Sub' $P3527 = "463_1307835824.98345" 
    capture_lex $P3527
    .const 'Sub' $P3399 = "457_1307835824.98345" 
    capture_lex $P3399
    .const 'Sub' $P3364 = "455_1307835824.98345" 
    capture_lex $P3364
    .const 'Sub' $P3359 = "454_1307835824.98345" 
    capture_lex $P3359
    .const 'Sub' $P3354 = "453_1307835824.98345" 
    capture_lex $P3354
    .const 'Sub' $P3241 = "450_1307835824.98345" 
    capture_lex $P3241
    .const 'Sub' $P3223 = "449_1307835824.98345" 
    capture_lex $P3223
    .const 'Sub' $P3148 = "447_1307835824.98345" 
    capture_lex $P3148
    .const 'Sub' $P3133 = "446_1307835824.98345" 
    capture_lex $P3133
    .const 'Sub' $P3046 = "445_1307835824.98345" 
    capture_lex $P3046
    .const 'Sub' $P3020 = "443_1307835824.98345" 
    capture_lex $P3020
    .const 'Sub' $P3004 = "442_1307835824.98345" 
    capture_lex $P3004
    .const 'Sub' $P2980 = "441_1307835824.98345" 
    capture_lex $P2980
    .const 'Sub' $P2944 = "438_1307835824.98345" 
    capture_lex $P2944
    .const 'Sub' $P2936 = "437_1307835824.98345" 
    capture_lex $P2936
.annotate 'line', 1205
    .const 'Sub' $P2936 = "437_1307835824.98345" 
    newclosure $P2943, $P2936
    .lex "xblock_immediate", $P2943
.annotate 'line', 1210
    .const 'Sub' $P2944 = "438_1307835824.98345" 
    newclosure $P2979, $P2944
    .lex "block_immediate", $P2979
.annotate 'line', 1220
    .const 'Sub' $P2980 = "441_1307835824.98345" 
    newclosure $P3003, $P2980
    .lex "vivitype", $P3003
.annotate 'line', 1239
    .const 'Sub' $P3004 = "442_1307835824.98345" 
    newclosure $P3019, $P3004
    .lex "colonpair_str", $P3019
.annotate 'line', 1418
    .const 'Sub' $P3020 = "443_1307835824.98345" 
    newclosure $P3045, $P3020
    .lex "import_HOW_exports", $P3045
.annotate 'line', 1523
    .const 'Sub' $P3046 = "445_1307835824.98345" 
    newclosure $P3132, $P3046
    .lex "push_block_handler", $P3132
.annotate 'line', 2068
    .const 'Sub' $P3133 = "446_1307835824.98345" 
    newclosure $P3147, $P3133
    .lex "only_star_block", $P3147
.annotate 'line', 2077
    .const 'Sub' $P3148 = "447_1307835824.98345" 
    newclosure $P3222, $P3148
    .lex "attach_multi_signature", $P3222
.annotate 'line', 2540
    .const 'Sub' $P3223 = "449_1307835824.98345" 
    newclosure $P3240, $P3223
    .lex "control", $P3240
.annotate 'line', 2559
    .const 'Sub' $P3241 = "450_1307835824.98345" 
    newclosure $P3353, $P3241
    .lex "lexical_package_lookup", $P3353
.annotate 'line', 2608
    .const 'Sub' $P3354 = "453_1307835824.98345" 
    newclosure $P3358, $P3354
    .lex "is_lexical", $P3358
.annotate 'line', 2614
    .const 'Sub' $P3359 = "454_1307835824.98345" 
    newclosure $P3363, $P3359
    .lex "is_package", $P3363
.annotate 'line', 2620
    .const 'Sub' $P3364 = "455_1307835824.98345" 
    newclosure $P3398, $P3364
    .lex "is_scope", $P3398
.annotate 'line', 2643
    .const 'Sub' $P3399 = "457_1307835824.98345" 
    newclosure $P3518, $P3399
    .lex "find_sym", $P3518
.annotate 'line', 1201
    .lex "$?PACKAGE", $P3519
    .lex "$?CLASS", $P3520
.annotate 'line', 1203
    new $P3521, "ResizablePMCArray"
    find_lex $P3522, "$?PACKAGE"
    get_who $P3523, $P3522
    set $P3523["@BLOCK"], $P3521
    find_lex $P3524, "xblock_immediate"
    find_lex $P3525, "block_immediate"
    find_lex $P3526, "vivitype"
.annotate 'line', 1231
    find_lex $P3565, "colonpair_str"
.annotate 'line', 1401
    find_lex $P4021, "import_HOW_exports"
.annotate 'line', 1516
    find_lex $P4284, "push_block_handler"
.annotate 'line', 2009
    find_lex $P5825, "only_star_block"
    find_lex $P5826, "attach_multi_signature"
.annotate 'line', 2531
    find_lex $P7138, "control"
.annotate 'line', 2553
    find_lex $P7165, "lexical_package_lookup"
    find_lex $P7166, "is_lexical"
    find_lex $P7167, "is_package"
    find_lex $P7168, "is_scope"
.annotate 'line', 2631
    find_lex $P7188, "find_sym"
.annotate 'line', 1201
    .return ($P7188)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "xblock_immediate"  :subid("437_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_2937
.annotate 'line', 1205
    .lex "$xblock", param_2937
.annotate 'line', 1206
    find_lex $P2938, "$xblock"
    unless_null $P2938, vivify_1714
    $P2938 = root_new ['parrot';'ResizablePMCArray']
  vivify_1714:
    set $P2939, $P2938[1]
    unless_null $P2939, vivify_1715
    new $P2939, "Undef"
  vivify_1715:
    $P2940 = "block_immediate"($P2939)
    find_lex $P2941, "$xblock"
    unless_null $P2941, vivify_1716
    $P2941 = root_new ['parrot';'ResizablePMCArray']
    store_lex "$xblock", $P2941
  vivify_1716:
    set $P2941[1], $P2940
    find_lex $P2942, "$xblock"
    unless_null $P2942, vivify_1717
    new $P2942, "Undef"
  vivify_1717:
.annotate 'line', 1205
    .return ($P2942)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "block_immediate"  :subid("438_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_2945
.annotate 'line', 1210
    .const 'Sub' $P2955 = "439_1307835824.98345" 
    capture_lex $P2955
    .lex "$block", param_2945
.annotate 'line', 1211
    find_lex $P2946, "$block"
    unless_null $P2946, vivify_1718
    new $P2946, "Undef"
  vivify_1718:
    $P2946."blocktype"("immediate")
.annotate 'line', 1212
    find_lex $P2950, "$block"
    unless_null $P2950, vivify_1719
    new $P2950, "Undef"
  vivify_1719:
    $P2951 = $P2950."symtable"()
    unless $P2951, unless_2949
    set $P2948, $P2951
    goto unless_2949_end
  unless_2949:
    find_lex $P2952, "$block"
    unless_null $P2952, vivify_1720
    new $P2952, "Undef"
  vivify_1720:
    $P2953 = $P2952."handlers"()
    set $P2948, $P2953
  unless_2949_end:
    if $P2948, unless_2947_end
    .const 'Sub' $P2955 = "439_1307835824.98345" 
    capture_lex $P2955
    $P2955()
  unless_2947_end:
    find_lex $P2978, "$block"
    unless_null $P2978, vivify_1727
    new $P2978, "Undef"
  vivify_1727:
.annotate 'line', 1210
    .return ($P2978)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block2954"  :anon :subid("439_1307835824.98345") :outer("438_1307835824.98345")
.annotate 'line', 1212
    .const 'Sub' $P2969 = "440_1307835824.98345" 
    capture_lex $P2969
.annotate 'line', 1213
    new $P2956, "Undef"
    .lex "$stmts", $P2956
    get_hll_global $P2957, "GLOBAL"
    nqp_get_package_through_who $P2958, $P2957, "PAST"
    get_who $P2959, $P2958
    set $P2960, $P2959["Stmts"]
    find_lex $P2961, "$block"
    unless_null $P2961, vivify_1721
    new $P2961, "Undef"
  vivify_1721:
    $P2962 = $P2960."new"($P2961 :named("node"))
    store_lex "$stmts", $P2962
.annotate 'line', 1214
    find_lex $P2964, "$block"
    unless_null $P2964, vivify_1722
    new $P2964, "Undef"
  vivify_1722:
    $P2965 = $P2964."list"()
    defined $I2966, $P2965
    unless $I2966, for_undef_1723
    iter $P2963, $P2965
    new $P2975, 'ExceptionHandler'
    set_label $P2975, loop2974_handler
    $P2975."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P2975
  loop2974_test:
    unless $P2963, loop2974_done
    shift $P2967, $P2963
  loop2974_redo:
    .const 'Sub' $P2969 = "440_1307835824.98345" 
    capture_lex $P2969
    $P2969($P2967)
  loop2974_next:
    goto loop2974_test
  loop2974_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P2976, exception, 'type'
    eq $P2976, .CONTROL_LOOP_NEXT, loop2974_next
    eq $P2976, .CONTROL_LOOP_REDO, loop2974_redo
  loop2974_done:
    pop_eh 
  for_undef_1723:
.annotate 'line', 1215
    find_lex $P2977, "$stmts"
    unless_null $P2977, vivify_1726
    new $P2977, "Undef"
  vivify_1726:
    store_lex "$block", $P2977
.annotate 'line', 1212
    .return ($P2977)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block2968"  :anon :subid("440_1307835824.98345") :outer("439_1307835824.98345")
    .param pmc param_2970
.annotate 'line', 1214
    .lex "$_", param_2970
    find_lex $P2971, "$stmts"
    unless_null $P2971, vivify_1724
    new $P2971, "Undef"
  vivify_1724:
    find_lex $P2972, "$_"
    unless_null $P2972, vivify_1725
    new $P2972, "Undef"
  vivify_1725:
    $P2973 = $P2971."push"($P2972)
    .return ($P2973)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "vivitype"  :subid("441_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_2981
.annotate 'line', 1220
    .lex "$sigil", param_2981
.annotate 'line', 1221
    find_lex $P2984, "$sigil"
    unless_null $P2984, vivify_1728
    new $P2984, "Undef"
  vivify_1728:
    set $S2985, $P2984
    iseq $I2986, $S2985, "%"
    if $I2986, if_2983
.annotate 'line', 1223
    find_lex $P2994, "$sigil"
    unless_null $P2994, vivify_1729
    new $P2994, "Undef"
  vivify_1729:
    set $S2995, $P2994
    iseq $I2996, $S2995, "@"
    if $I2996, if_2993
    new $P3002, "String"
    assign $P3002, "Undef"
    set $P2992, $P3002
    goto if_2993_end
  if_2993:
.annotate 'line', 1224
    get_hll_global $P2997, "GLOBAL"
    nqp_get_package_through_who $P2998, $P2997, "PAST"
    get_who $P2999, $P2998
    set $P3000, $P2999["Op"]
    $P3001 = $P3000."new"("    %r = root_new ['parrot';'ResizablePMCArray']" :named("inline"))
    set $P2992, $P3001
  if_2993_end:
    set $P2982, $P2992
.annotate 'line', 1221
    goto if_2983_end
  if_2983:
.annotate 'line', 1222
    get_hll_global $P2987, "GLOBAL"
    nqp_get_package_through_who $P2988, $P2987, "PAST"
    get_who $P2989, $P2988
    set $P2990, $P2989["Op"]
    $P2991 = $P2990."new"("    %r = root_new ['parrot';'Hash']" :named("inline"))
    set $P2982, $P2991
  if_2983_end:
.annotate 'line', 1220
    .return ($P2982)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "colonpair_str"  :subid("442_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_3005
.annotate 'line', 1239
    .lex "$ast", param_3005
.annotate 'line', 1240
    get_hll_global $P3008, "GLOBAL"
    nqp_get_package_through_who $P3009, $P3008, "PAST"
    get_who $P3010, $P3009
    set $P3011, $P3010["Op"]
    find_lex $P3012, "$ast"
    unless_null $P3012, vivify_1730
    new $P3012, "Undef"
  vivify_1730:
    $P3013 = $P3011."ACCEPTS"($P3012)
    if $P3013, if_3007
.annotate 'line', 1242
    find_lex $P3017, "$ast"
    unless_null $P3017, vivify_1731
    new $P3017, "Undef"
  vivify_1731:
    $P3018 = $P3017."value"()
    set $P3006, $P3018
.annotate 'line', 1240
    goto if_3007_end
  if_3007:
.annotate 'line', 1241
    find_lex $P3014, "$ast"
    unless_null $P3014, vivify_1732
    new $P3014, "Undef"
  vivify_1732:
    $P3015 = $P3014."list"()
    join $S3016, " ", $P3015
    new $P3006, 'String'
    set $P3006, $S3016
  if_3007_end:
.annotate 'line', 1239
    .return ($P3006)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "import_HOW_exports"  :subid("443_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_3021
.annotate 'line', 1418
    .const 'Sub' $P3033 = "444_1307835824.98345" 
    capture_lex $P3033
    .lex "$UNIT", param_3021
.annotate 'line', 1420
    find_lex $P3024, "$UNIT"
    unless_null $P3024, vivify_1733
    new $P3024, "Undef"
  vivify_1733:
    exists $I3025, $P3024["EXPORTHOW"]
    if $I3025, if_3023
    new $P3022, 'Integer'
    set $P3022, $I3025
    goto if_3023_end
  if_3023:
.annotate 'line', 1421
    find_lex $P3027, "$UNIT"
    unless_null $P3027, vivify_1734
    $P3027 = root_new ['parrot';'Hash']
  vivify_1734:
    set $P3028, $P3027["EXPORTHOW"]
    unless_null $P3028, vivify_1735
    new $P3028, "Undef"
  vivify_1735:
    get_who $P3029, $P3028
    defined $I3030, $P3029
    unless $I3030, for_undef_1736
    iter $P3026, $P3029
    new $P3043, 'ExceptionHandler'
    set_label $P3043, loop3042_handler
    $P3043."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P3043
  loop3042_test:
    unless $P3026, loop3042_done
    shift $P3031, $P3026
  loop3042_redo:
    .const 'Sub' $P3033 = "444_1307835824.98345" 
    capture_lex $P3033
    $P3033($P3031)
  loop3042_next:
    goto loop3042_test
  loop3042_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P3044, exception, 'type'
    eq $P3044, .CONTROL_LOOP_NEXT, loop3042_next
    eq $P3044, .CONTROL_LOOP_REDO, loop3042_redo
  loop3042_done:
    pop_eh 
  for_undef_1736:
.annotate 'line', 1420
    set $P3022, $P3026
  if_3023_end:
.annotate 'line', 1418
    .return ($P3022)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3032"  :anon :subid("444_1307835824.98345") :outer("443_1307835824.98345")
    .param pmc param_3034
.annotate 'line', 1421
    .lex "$_", param_3034
.annotate 'line', 1422
    find_lex $P3035, "$_"
    unless_null $P3035, vivify_1737
    new $P3035, "Undef"
  vivify_1737:
    $P3036 = $P3035."value"()
    find_lex $P3037, "$_"
    unless_null $P3037, vivify_1738
    new $P3037, "Undef"
  vivify_1738:
    $P3038 = $P3037."key"()
    find_dynamic_lex $P3041, "%*HOW"
    unless_null $P3041, vivify_1739
    get_hll_global $P3039, "GLOBAL"
    get_who $P3040, $P3039
    set $P3041, $P3040["%HOW"]
    unless_null $P3041, vivify_1740
    die "Contextual %*HOW not found"
  vivify_1740:
    store_dynamic_lex "%*HOW", $P3041
  vivify_1739:
    set $P3041[$P3038], $P3036
.annotate 'line', 1421
    .return ($P3036)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "push_block_handler"  :subid("445_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_3047
    .param pmc param_3048
.annotate 'line', 1523
    .lex "$/", param_3047
    .lex "$block", param_3048
.annotate 'line', 1524
    find_lex $P3050, "$?PACKAGE"
    get_who $P3051, $P3050
    set $P3052, $P3051["@BLOCK"]
    unless_null $P3052, vivify_1741
    $P3052 = root_new ['parrot';'ResizablePMCArray']
  vivify_1741:
    set $P3053, $P3052[0]
    unless_null $P3053, vivify_1742
    new $P3053, "Undef"
  vivify_1742:
    $P3054 = $P3053."handlers"()
    if $P3054, unless_3049_end
.annotate 'line', 1525
    find_lex $P3055, "$?PACKAGE"
    get_who $P3056, $P3055
    set $P3057, $P3056["@BLOCK"]
    unless_null $P3057, vivify_1743
    $P3057 = root_new ['parrot';'ResizablePMCArray']
  vivify_1743:
    set $P3058, $P3057[0]
    unless_null $P3058, vivify_1744
    new $P3058, "Undef"
  vivify_1744:
    new $P3059, "ResizablePMCArray"
    $P3058."handlers"($P3059)
  unless_3049_end:
.annotate 'line', 1527
    find_lex $P3061, "$block"
    unless_null $P3061, vivify_1745
    new $P3061, "Undef"
  vivify_1745:
    $P3062 = $P3061."arity"()
    if $P3062, unless_3060_end
.annotate 'line', 1528
    find_lex $P3063, "$block"
    unless_null $P3063, vivify_1746
    new $P3063, "Undef"
  vivify_1746:
.annotate 'line', 1529
    get_hll_global $P3064, "GLOBAL"
    nqp_get_package_through_who $P3065, $P3064, "PAST"
    get_who $P3066, $P3065
    set $P3067, $P3066["Op"]
.annotate 'line', 1530
    get_hll_global $P3068, "GLOBAL"
    nqp_get_package_through_who $P3069, $P3068, "PAST"
    get_who $P3070, $P3069
    set $P3071, $P3070["Var"]
    $P3072 = $P3071."new"("lexical" :named("scope"), "$!" :named("name"), 1 :named("isdecl"))
.annotate 'line', 1531
    get_hll_global $P3073, "GLOBAL"
    nqp_get_package_through_who $P3074, $P3073, "PAST"
    get_who $P3075, $P3074
    set $P3076, $P3075["Var"]
    $P3077 = $P3076."new"("lexical" :named("scope"), "$_" :named("name"))
    $P3078 = $P3067."new"($P3072, $P3077, "bind_6model" :named("pasttype"))
.annotate 'line', 1529
    $P3063."unshift"($P3078)
.annotate 'line', 1534
    find_lex $P3079, "$block"
    unless_null $P3079, vivify_1747
    new $P3079, "Undef"
  vivify_1747:
    get_hll_global $P3080, "GLOBAL"
    nqp_get_package_through_who $P3081, $P3080, "PAST"
    get_who $P3082, $P3081
    set $P3083, $P3082["Var"]
    $P3084 = $P3083."new"("$_" :named("name"), "parameter" :named("scope"))
    $P3079."unshift"($P3084)
.annotate 'line', 1535
    find_lex $P3085, "$block"
    unless_null $P3085, vivify_1748
    new $P3085, "Undef"
  vivify_1748:
    $P3085."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1536
    find_lex $P3086, "$block"
    unless_null $P3086, vivify_1749
    new $P3086, "Undef"
  vivify_1749:
    $P3086."symbol"("$!", "lexical" :named("scope"))
.annotate 'line', 1537
    find_lex $P3087, "$block"
    unless_null $P3087, vivify_1750
    new $P3087, "Undef"
  vivify_1750:
    $P3087."arity"(1)
  unless_3060_end:
.annotate 'line', 1539
    find_lex $P3088, "$block"
    unless_null $P3088, vivify_1751
    new $P3088, "Undef"
  vivify_1751:
    $P3088."blocktype"("declaration")
.annotate 'line', 1540
    find_lex $P3089, "$?PACKAGE"
    get_who $P3090, $P3089
    set $P3091, $P3090["@BLOCK"]
    unless_null $P3091, vivify_1752
    $P3091 = root_new ['parrot';'ResizablePMCArray']
  vivify_1752:
    set $P3092, $P3091[0]
    unless_null $P3092, vivify_1753
    new $P3092, "Undef"
  vivify_1753:
    $P3093 = $P3092."handlers"()
.annotate 'line', 1541
    get_hll_global $P3094, "GLOBAL"
    nqp_get_package_through_who $P3095, $P3094, "PAST"
    get_who $P3096, $P3095
    set $P3097, $P3096["Control"]
    find_lex $P3098, "$/"
    unless_null $P3098, vivify_1754
    new $P3098, "Undef"
  vivify_1754:
.annotate 'line', 1543
    get_hll_global $P3099, "GLOBAL"
    nqp_get_package_through_who $P3100, $P3099, "PAST"
    get_who $P3101, $P3100
    set $P3102, $P3101["Stmts"]
.annotate 'line', 1544
    get_hll_global $P3103, "GLOBAL"
    nqp_get_package_through_who $P3104, $P3103, "PAST"
    get_who $P3105, $P3104
    set $P3106, $P3105["Op"]
    find_lex $P3107, "$block"
    unless_null $P3107, vivify_1755
    new $P3107, "Undef"
  vivify_1755:
.annotate 'line', 1546
    get_hll_global $P3108, "GLOBAL"
    nqp_get_package_through_who $P3109, $P3108, "PAST"
    get_who $P3110, $P3109
    set $P3111, $P3110["Var"]
    $P3112 = $P3111."new"("register" :named("scope"), "exception" :named("name"))
    $P3113 = $P3106."new"($P3107, $P3112, "call" :named("pasttype"))
.annotate 'line', 1548
    get_hll_global $P3114, "GLOBAL"
    nqp_get_package_through_who $P3115, $P3114, "PAST"
    get_who $P3116, $P3115
    set $P3117, $P3116["Op"]
.annotate 'line', 1549
    get_hll_global $P3118, "GLOBAL"
    nqp_get_package_through_who $P3119, $P3118, "PAST"
    get_who $P3120, $P3119
    set $P3121, $P3120["Var"]
.annotate 'line', 1550
    get_hll_global $P3122, "GLOBAL"
    nqp_get_package_through_who $P3123, $P3122, "PAST"
    get_who $P3124, $P3123
    set $P3125, $P3124["Var"]
    $P3126 = $P3125."new"("register" :named("scope"), "exception" :named("name"))
    $P3127 = $P3121."new"($P3126, "handled", "keyed" :named("scope"))
.annotate 'line', 1549
    $P3128 = $P3117."new"($P3127, 1, "bind_6model" :named("pasttype"))
.annotate 'line', 1548
    $P3129 = $P3102."new"($P3113, $P3128)
.annotate 'line', 1543
    $P3130 = $P3097."new"($P3129, $P3098 :named("node"))
.annotate 'line', 1541
    $P3131 = $P3093."unshift"($P3130)
.annotate 'line', 1523
    .return ($P3131)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "only_star_block"  :subid("446_1307835824.98345") :outer("436_1307835824.98345")
.annotate 'line', 2069
    new $P3134, "Undef"
    .lex "$past", $P3134
    find_lex $P3135, "$?PACKAGE"
    get_who $P3136, $P3135
    set $P3137, $P3136["@BLOCK"]
    unless_null $P3137, vivify_1756
    $P3137 = root_new ['parrot';'ResizablePMCArray']
  vivify_1756:
    $P3138 = $P3137."shift"()
    store_lex "$past", $P3138
.annotate 'line', 2070
    find_lex $P3139, "$past"
    unless_null $P3139, vivify_1757
    new $P3139, "Undef"
  vivify_1757:
    $P3139."closure"(1)
.annotate 'line', 2071
    find_lex $P3140, "$past"
    unless_null $P3140, vivify_1758
    new $P3140, "Undef"
  vivify_1758:
    get_hll_global $P3141, "GLOBAL"
    nqp_get_package_through_who $P3142, $P3141, "PAST"
    get_who $P3143, $P3142
    set $P3144, $P3143["Op"]
    $P3145 = $P3144."new"("multi_dispatch_over_lexical_candidates P" :named("pirop"))
    $P3140."push"($P3145)
    find_lex $P3146, "$past"
    unless_null $P3146, vivify_1759
    new $P3146, "Undef"
  vivify_1759:
.annotate 'line', 2068
    .return ($P3146)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "attach_multi_signature"  :subid("447_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_3149
.annotate 'line', 2077
    .const 'Sub' $P3169 = "448_1307835824.98345" 
    capture_lex $P3169
    .lex "$routine", param_3149
.annotate 'line', 2081
    new $P3150, "Undef"
    .lex "$types", $P3150
.annotate 'line', 2082
    new $P3151, "Undef"
    .lex "$definednesses", $P3151
.annotate 'line', 2081
    get_hll_global $P3152, "GLOBAL"
    nqp_get_package_through_who $P3153, $P3152, "PAST"
    get_who $P3154, $P3153
    set $P3155, $P3154["Op"]
    $P3156 = $P3155."new"("list" :named("pasttype"))
    store_lex "$types", $P3156
.annotate 'line', 2082
    get_hll_global $P3157, "GLOBAL"
    nqp_get_package_through_who $P3158, $P3157, "PAST"
    get_who $P3159, $P3158
    set $P3160, $P3159["Op"]
    $P3161 = $P3160."new"("list" :named("pasttype"))
    store_lex "$definednesses", $P3161
.annotate 'line', 2083
    find_lex $P3163, "$routine"
    unless_null $P3163, vivify_1760
    $P3163 = root_new ['parrot';'ResizablePMCArray']
  vivify_1760:
    set $P3164, $P3163[0]
    unless_null $P3164, vivify_1761
    new $P3164, "Undef"
  vivify_1761:
    $P3165 = $P3164."list"()
    defined $I3166, $P3165
    unless $I3166, for_undef_1762
    iter $P3162, $P3165
    new $P3213, 'ExceptionHandler'
    set_label $P3213, loop3212_handler
    $P3213."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P3213
  loop3212_test:
    unless $P3162, loop3212_done
    shift $P3167, $P3162
  loop3212_redo:
    .const 'Sub' $P3169 = "448_1307835824.98345" 
    capture_lex $P3169
    $P3169($P3167)
  loop3212_next:
    goto loop3212_test
  loop3212_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P3214, exception, 'type'
    eq $P3214, .CONTROL_LOOP_NEXT, loop3212_next
    eq $P3214, .CONTROL_LOOP_REDO, loop3212_redo
  loop3212_done:
    pop_eh 
  for_undef_1762:
.annotate 'line', 2090
    find_dynamic_lex $P3217, "$*SC"
    unless_null $P3217, vivify_1772
    get_hll_global $P3215, "GLOBAL"
    get_who $P3216, $P3215
    set $P3217, $P3216["$SC"]
    unless_null $P3217, vivify_1773
    die "Contextual $*SC not found"
  vivify_1773:
  vivify_1772:
    find_lex $P3218, "$routine"
    unless_null $P3218, vivify_1774
    new $P3218, "Undef"
  vivify_1774:
    find_lex $P3219, "$types"
    unless_null $P3219, vivify_1775
    new $P3219, "Undef"
  vivify_1775:
    find_lex $P3220, "$definednesses"
    unless_null $P3220, vivify_1776
    new $P3220, "Undef"
  vivify_1776:
    $P3221 = $P3217."set_routine_signature"($P3218, $P3219, $P3220)
.annotate 'line', 2077
    .return ($P3221)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3168"  :anon :subid("448_1307835824.98345") :outer("447_1307835824.98345")
    .param pmc param_3170
.annotate 'line', 2083
    .lex "$_", param_3170
.annotate 'line', 2084
    get_hll_global $P3175, "GLOBAL"
    nqp_get_package_through_who $P3176, $P3175, "PAST"
    get_who $P3177, $P3176
    set $P3178, $P3177["Var"]
    find_lex $P3179, "$_"
    unless_null $P3179, vivify_1763
    new $P3179, "Undef"
  vivify_1763:
    $P3180 = $P3178."ACCEPTS"($P3179)
    if $P3180, if_3174
    set $P3173, $P3180
    goto if_3174_end
  if_3174:
    find_lex $P3181, "$_"
    unless_null $P3181, vivify_1764
    new $P3181, "Undef"
  vivify_1764:
    $S3182 = $P3181."scope"()
    iseq $I3183, $S3182, "parameter"
    new $P3173, 'Integer'
    set $P3173, $I3183
  if_3174_end:
    if $P3173, if_3172
    set $P3171, $P3173
    goto if_3172_end
  if_3172:
.annotate 'line', 2085
    find_lex $P3184, "$types"
    unless_null $P3184, vivify_1765
    new $P3184, "Undef"
  vivify_1765:
    find_lex $P3186, "$_"
    unless_null $P3186, vivify_1766
    new $P3186, "Undef"
  vivify_1766:
    $P3187 = $P3186."multitype"()
    set $P3185, $P3187
    defined $I3189, $P3185
    if $I3189, default_3188
    get_hll_global $P3190, "GLOBAL"
    nqp_get_package_through_who $P3191, $P3190, "PAST"
    get_who $P3192, $P3191
    set $P3193, $P3192["Op"]
    $P3194 = $P3193."new"("null P" :named("pirop"))
    set $P3185, $P3194
  default_3188:
    $P3184."push"($P3185)
.annotate 'line', 2086
    find_lex $P3195, "$definednesses"
    unless_null $P3195, vivify_1767
    new $P3195, "Undef"
  vivify_1767:
    find_lex $P3198, "$_"
    unless_null $P3198, vivify_1768
    $P3198 = root_new ['parrot';'Hash']
  vivify_1768:
    set $P3199, $P3198["definedness"]
    unless_null $P3199, vivify_1769
    new $P3199, "Undef"
  vivify_1769:
    set $S3200, $P3199
    iseq $I3201, $S3200, "D"
    if $I3201, if_3197
.annotate 'line', 2087
    find_lex $P3205, "$_"
    unless_null $P3205, vivify_1770
    $P3205 = root_new ['parrot';'Hash']
  vivify_1770:
    set $P3206, $P3205["definedness"]
    unless_null $P3206, vivify_1771
    new $P3206, "Undef"
  vivify_1771:
    set $S3207, $P3206
    iseq $I3208, $S3207, "U"
    if $I3208, if_3204
    new $P3210, "Integer"
    assign $P3210, 0
    set $P3203, $P3210
    goto if_3204_end
  if_3204:
    new $P3209, "Integer"
    assign $P3209, 2
    set $P3203, $P3209
  if_3204_end:
    set $P3196, $P3203
.annotate 'line', 2086
    goto if_3197_end
  if_3197:
    new $P3202, "Integer"
    assign $P3202, 1
    set $P3196, $P3202
  if_3197_end:
    $P3211 = $P3195."push"($P3196)
.annotate 'line', 2084
    set $P3171, $P3211
  if_3172_end:
.annotate 'line', 2083
    .return ($P3171)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "control"  :subid("449_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_3224
    .param pmc param_3225
.annotate 'line', 2540
    .lex "$/", param_3224
    .lex "$type", param_3225
.annotate 'line', 2541
    find_lex $P3226, "$/"
    get_hll_global $P3227, "GLOBAL"
    nqp_get_package_through_who $P3228, $P3227, "PAST"
    get_who $P3229, $P3228
    set $P3230, $P3229["Op"]
    find_lex $P3231, "$/"
    unless_null $P3231, vivify_1777
    new $P3231, "Undef"
  vivify_1777:
.annotate 'line', 2545
    get_hll_global $P3232, "GLOBAL"
    nqp_get_package_through_who $P3233, $P3232, "PAST"
    get_who $P3234, $P3233
    set $P3235, $P3234["Val"]
    find_lex $P3236, "$type"
    unless_null $P3236, vivify_1778
    new $P3236, "Undef"
  vivify_1778:
    $P3237 = $P3235."new"($P3236 :named("value"), "!macro_const" :named("returns"))
    $P3238 = $P3230."new"(0, $P3237, $P3231 :named("node"), "die__vii" :named("pirop"))
.annotate 'line', 2541
    $P3239 = $P3226."!make"($P3238)
.annotate 'line', 2540
    .return ($P3239)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "lexical_package_lookup"  :subid("450_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_3244
    .param pmc param_3245
.annotate 'line', 2559
    .const 'Sub' $P3298 = "451_1307835824.98345" 
    capture_lex $P3298
    new $P3243, ['ExceptionHandler'], .CONTROL_RETURN
    set_label $P3243, control_3242
    push_eh $P3243
    .lex "@name", param_3244
    .lex "$/", param_3245
.annotate 'line', 2565
    new $P3246, "Undef"
    .lex "$final_name", $P3246
.annotate 'line', 2566
    new $P3247, "Undef"
    .lex "$lookup", $P3247
.annotate 'line', 2561
    find_lex $P3249, "@name"
    unless_null $P3249, vivify_1779
    $P3249 = root_new ['parrot';'ResizablePMCArray']
  vivify_1779:
    set $N3250, $P3249
    iseq $I3251, $N3250, 0.0
    unless $I3251, if_3248_end
    find_lex $P3252, "$/"
    unless_null $P3252, vivify_1780
    new $P3252, "Undef"
  vivify_1780:
    $P3253 = $P3252."CURSOR"()
    $P3253."panic"("Cannot compile empty name")
  if_3248_end:
.annotate 'line', 2565
    find_lex $P3254, "@name"
    unless_null $P3254, vivify_1781
    $P3254 = root_new ['parrot';'ResizablePMCArray']
  vivify_1781:
    $P3255 = $P3254."pop"()
    store_lex "$final_name", $P3255
.annotate 'line', 2566
    get_hll_global $P3256, "GLOBAL"
    nqp_get_package_through_who $P3257, $P3256, "PAST"
    get_who $P3258, $P3257
    set $P3259, $P3258["Var"]
    find_lex $P3260, "$final_name"
    unless_null $P3260, vivify_1782
    new $P3260, "Undef"
  vivify_1782:
    set $S3261, $P3260
    $P3262 = $P3259."new"($S3261, "keyed" :named("scope"))
    store_lex "$lookup", $P3262
.annotate 'line', 2570
    find_lex $P3264, "@name"
    unless_null $P3264, vivify_1783
    $P3264 = root_new ['parrot';'ResizablePMCArray']
  vivify_1783:
    set $N3265, $P3264
    iseq $I3266, $N3265, 0.0
    if $I3266, if_3263
.annotate 'line', 2588
    .const 'Sub' $P3298 = "451_1307835824.98345" 
    capture_lex $P3298
    $P3298()
    goto if_3263_end
  if_3263:
.annotate 'line', 2571
    find_lex $P3267, "$lookup"
    unless_null $P3267, vivify_1796
    new $P3267, "Undef"
  vivify_1796:
    get_hll_global $P3268, "GLOBAL"
    nqp_get_package_through_who $P3269, $P3268, "PAST"
    get_who $P3270, $P3269
    set $P3271, $P3270["Op"]
.annotate 'line', 2573
    get_hll_global $P3272, "GLOBAL"
    nqp_get_package_through_who $P3273, $P3272, "PAST"
    get_who $P3274, $P3273
    set $P3275, $P3274["Var"]
    $P3276 = $P3275."new"("$?PACKAGE" :named("name"), "lexical" :named("scope"))
    $P3277 = $P3271."new"($P3276, "get_who PP" :named("pirop"))
.annotate 'line', 2571
    $P3267."unshift"($P3277)
.annotate 'line', 2575
    find_lex $P3278, "$lookup"
    unless_null $P3278, vivify_1797
    new $P3278, "Undef"
  vivify_1797:
    get_hll_global $P3279, "GLOBAL"
    nqp_get_package_through_who $P3280, $P3279, "PAST"
    get_who $P3281, $P3280
    set $P3282, $P3281["Var"]
.annotate 'line', 2577
    get_hll_global $P3283, "GLOBAL"
    nqp_get_package_through_who $P3284, $P3283, "PAST"
    get_who $P3285, $P3284
    set $P3286, $P3285["Op"]
.annotate 'line', 2579
    get_hll_global $P3287, "GLOBAL"
    nqp_get_package_through_who $P3288, $P3287, "PAST"
    get_who $P3289, $P3288
    set $P3290, $P3289["Var"]
    new $P3291, "ResizablePMCArray"
    $P3292 = $P3290."new"("GLOBAL" :named("name"), $P3291 :named("namespace"), "package" :named("scope"))
    $P3293 = $P3286."new"($P3292, "get_who PP" :named("pirop"))
.annotate 'line', 2581
    find_lex $P3294, "$final_name"
    unless_null $P3294, vivify_1798
    new $P3294, "Undef"
  vivify_1798:
    set $S3295, $P3294
    $P3296 = $P3282."new"($P3293, $S3295, "keyed" :named("scope"))
.annotate 'line', 2575
    $P3278."viviself"($P3296)
  if_3263_end:
.annotate 'line', 2603
    new $P3350, "Exception"
    set $P3350['type'], .CONTROL_RETURN
    find_lex $P3351, "$lookup"
    unless_null $P3351, vivify_1799
    new $P3351, "Undef"
  vivify_1799:
    setattribute $P3350, 'payload', $P3351
    throw $P3350
.annotate 'line', 2559
    .return ()
  control_3242:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P3352, exception, "payload"
    .return ($P3352)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3297"  :anon :subid("451_1307835824.98345") :outer("450_1307835824.98345")
.annotate 'line', 2588
    .const 'Sub' $P3329 = "452_1307835824.98345" 
    capture_lex $P3329
.annotate 'line', 2589
    new $P3299, "Undef"
    .lex "$path", $P3299
    find_lex $P3302, "@name"
    unless_null $P3302, vivify_1784
    $P3302 = root_new ['parrot';'ResizablePMCArray']
  vivify_1784:
    set $P3303, $P3302[0]
    unless_null $P3303, vivify_1785
    new $P3303, "Undef"
  vivify_1785:
    $P3304 = "is_lexical"($P3303)
    if $P3304, if_3301
.annotate 'line', 2591
    get_hll_global $P3312, "GLOBAL"
    nqp_get_package_through_who $P3313, $P3312, "PAST"
    get_who $P3314, $P3313
    set $P3315, $P3314["Var"]
    new $P3316, "ResizablePMCArray"
    $P3317 = $P3315."new"("GLOBAL" :named("name"), $P3316 :named("namespace"), "package" :named("scope"))
    set $P3300, $P3317
.annotate 'line', 2589
    goto if_3301_end
  if_3301:
.annotate 'line', 2590
    get_hll_global $P3305, "GLOBAL"
    nqp_get_package_through_who $P3306, $P3305, "PAST"
    get_who $P3307, $P3306
    set $P3308, $P3307["Var"]
    find_lex $P3309, "@name"
    unless_null $P3309, vivify_1786
    $P3309 = root_new ['parrot';'ResizablePMCArray']
  vivify_1786:
    $P3310 = $P3309."shift"()
    $P3311 = $P3308."new"($P3310 :named("name"), "lexical" :named("scope"))
    set $P3300, $P3311
  if_3301_end:
.annotate 'line', 2589
    store_lex "$path", $P3300
.annotate 'line', 2592
    find_lex $P3319, "@name"
    unless_null $P3319, vivify_1787
    $P3319 = root_new ['parrot';'ResizablePMCArray']
  vivify_1787:
    set $P3320, $P3319[0]
    unless_null $P3320, vivify_1788
    new $P3320, "Undef"
  vivify_1788:
    set $S3321, $P3320
    iseq $I3322, $S3321, "GLOBAL"
    unless $I3322, if_3318_end
.annotate 'line', 2593
    find_lex $P3323, "@name"
    unless_null $P3323, vivify_1789
    $P3323 = root_new ['parrot';'ResizablePMCArray']
  vivify_1789:
    $P3323."shift"()
  if_3318_end:
.annotate 'line', 2595
    find_lex $P3325, "@name"
    unless_null $P3325, vivify_1790
    $P3325 = root_new ['parrot';'ResizablePMCArray']
  vivify_1790:
    defined $I3326, $P3325
    unless $I3326, for_undef_1791
    iter $P3324, $P3325
    new $P3340, 'ExceptionHandler'
    set_label $P3340, loop3339_handler
    $P3340."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P3340
  loop3339_test:
    unless $P3324, loop3339_done
    shift $P3327, $P3324
  loop3339_redo:
    .const 'Sub' $P3329 = "452_1307835824.98345" 
    capture_lex $P3329
    $P3329($P3327)
  loop3339_next:
    goto loop3339_test
  loop3339_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P3341, exception, 'type'
    eq $P3341, .CONTROL_LOOP_NEXT, loop3339_next
    eq $P3341, .CONTROL_LOOP_REDO, loop3339_redo
  loop3339_done:
    pop_eh 
  for_undef_1791:
.annotate 'line', 2600
    find_lex $P3342, "$lookup"
    unless_null $P3342, vivify_1794
    new $P3342, "Undef"
  vivify_1794:
    get_hll_global $P3343, "GLOBAL"
    nqp_get_package_through_who $P3344, $P3343, "PAST"
    get_who $P3345, $P3344
    set $P3346, $P3345["Op"]
    find_lex $P3347, "$path"
    unless_null $P3347, vivify_1795
    new $P3347, "Undef"
  vivify_1795:
    $P3348 = $P3346."new"($P3347, "get_who PP" :named("pirop"))
    $P3349 = $P3342."unshift"($P3348)
.annotate 'line', 2588
    .return ($P3349)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3328"  :anon :subid("452_1307835824.98345") :outer("451_1307835824.98345")
    .param pmc param_3330
.annotate 'line', 2595
    .lex "$_", param_3330
.annotate 'line', 2596
    get_hll_global $P3331, "GLOBAL"
    nqp_get_package_through_who $P3332, $P3331, "PAST"
    get_who $P3333, $P3332
    set $P3334, $P3333["Op"]
    find_lex $P3335, "$path"
    unless_null $P3335, vivify_1792
    new $P3335, "Undef"
  vivify_1792:
.annotate 'line', 2598
    find_lex $P3336, "$_"
    unless_null $P3336, vivify_1793
    new $P3336, "Undef"
  vivify_1793:
    set $S3337, $P3336
    $P3338 = $P3334."new"($P3335, $S3337, "nqp_get_package_through_who PPs" :named("pirop"))
.annotate 'line', 2596
    store_lex "$path", $P3338
.annotate 'line', 2595
    .return ($P3338)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "is_lexical"  :subid("453_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_3355
.annotate 'line', 2608
    .lex "$name", param_3355
.annotate 'line', 2609
    find_lex $P3356, "$name"
    unless_null $P3356, vivify_1800
    new $P3356, "Undef"
  vivify_1800:
    $P3357 = "is_scope"($P3356, "lexical")
.annotate 'line', 2608
    .return ($P3357)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "is_package"  :subid("454_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_3360
.annotate 'line', 2614
    .lex "$name", param_3360
.annotate 'line', 2615
    find_lex $P3361, "$name"
    unless_null $P3361, vivify_1801
    new $P3361, "Undef"
  vivify_1801:
    $P3362 = "is_scope"($P3361, "package")
.annotate 'line', 2614
    .return ($P3362)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "is_scope"  :subid("455_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_3367
    .param pmc param_3368
.annotate 'line', 2620
    .const 'Sub' $P3376 = "456_1307835824.98345" 
    capture_lex $P3376
    new $P3366, ['ExceptionHandler'], .CONTROL_RETURN
    set_label $P3366, control_3365
    push_eh $P3366
    .lex "$name", param_3367
    .lex "$wanted_scope", param_3368
.annotate 'line', 2621
    find_lex $P3370, "$?PACKAGE"
    get_who $P3371, $P3370
    set $P3372, $P3371["@BLOCK"]
    unless_null $P3372, vivify_1802
    $P3372 = root_new ['parrot';'ResizablePMCArray']
  vivify_1802:
    defined $I3373, $P3372
    unless $I3373, for_undef_1803
    iter $P3369, $P3372
    new $P3395, 'ExceptionHandler'
    set_label $P3395, loop3394_handler
    $P3395."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P3395
  loop3394_test:
    unless $P3369, loop3394_done
    shift $P3374, $P3369
  loop3394_redo:
    .const 'Sub' $P3376 = "456_1307835824.98345" 
    capture_lex $P3376
    $P3376($P3374)
  loop3394_next:
    goto loop3394_test
  loop3394_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P3396, exception, 'type'
    eq $P3396, .CONTROL_LOOP_NEXT, loop3394_next
    eq $P3396, .CONTROL_LOOP_REDO, loop3394_redo
  loop3394_done:
    pop_eh 
  for_undef_1803:
.annotate 'line', 2620
    .return (0)
  control_3365:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P3397, exception, "payload"
    .return ($P3397)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3375"  :anon :subid("456_1307835824.98345") :outer("455_1307835824.98345")
    .param pmc param_3378
.annotate 'line', 2622
    $P3377 = root_new ['parrot';'Hash']
    .lex "%sym", $P3377
    .lex "$_", param_3378
    find_lex $P3379, "$_"
    unless_null $P3379, vivify_1804
    new $P3379, "Undef"
  vivify_1804:
    find_lex $P3380, "$name"
    unless_null $P3380, vivify_1805
    new $P3380, "Undef"
  vivify_1805:
    $P3381 = $P3379."symbol"($P3380)
    store_lex "%sym", $P3381
.annotate 'line', 2623
    find_lex $P3384, "%sym"
    unless_null $P3384, vivify_1806
    $P3384 = root_new ['parrot';'Hash']
  vivify_1806:
    set $N3385, $P3384
    if $N3385, if_3383
    new $P3382, 'Float'
    set $P3382, $N3385
    goto if_3383_end
  if_3383:
.annotate 'line', 2624
    new $P3386, "Exception"
    set $P3386['type'], .CONTROL_RETURN
    find_lex $P3387, "%sym"
    unless_null $P3387, vivify_1807
    $P3387 = root_new ['parrot';'Hash']
  vivify_1807:
    set $P3388, $P3387["scope"]
    unless_null $P3388, vivify_1808
    new $P3388, "Undef"
  vivify_1808:
    set $S3389, $P3388
    find_lex $P3390, "$wanted_scope"
    unless_null $P3390, vivify_1809
    new $P3390, "Undef"
  vivify_1809:
    set $S3391, $P3390
    iseq $I3392, $S3389, $S3391
    new $P3393, 'Integer'
    set $P3393, $I3392
    setattribute $P3386, 'payload', $P3393
    throw $P3386
  if_3383_end:
.annotate 'line', 2621
    .return ($P3382)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "find_sym"  :subid("457_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_3402
    .param pmc param_3403
.annotate 'line', 2643
    .const 'Sub' $P3496 = "462_1307835824.98345" 
    capture_lex $P3496
    .const 'Sub' $P3457 = "460_1307835824.98345" 
    capture_lex $P3457
    .const 'Sub' $P3415 = "458_1307835824.98345" 
    capture_lex $P3415
    new $P3401, ['ExceptionHandler'], .CONTROL_RETURN
    set_label $P3401, control_3400
    push_eh $P3401
    .lex "@name", param_3402
    .lex "$/", param_3403
.annotate 'line', 2667
    new $P3404, "Undef"
    .lex "$result", $P3404
.annotate 'line', 2645
    find_lex $P3406, "@name"
    unless_null $P3406, vivify_1810
    $P3406 = root_new ['parrot';'ResizablePMCArray']
  vivify_1810:
    set $N3407, $P3406
    if $N3407, unless_3405_end
    find_lex $P3408, "$/"
    unless_null $P3408, vivify_1811
    new $P3408, "Undef"
  vivify_1811:
    $P3409 = $P3408."CURSOR"()
    $P3409."panic"("Cannot look up empty name")
  unless_3405_end:
.annotate 'line', 2649
    find_lex $P3411, "@name"
    unless_null $P3411, vivify_1812
    $P3411 = root_new ['parrot';'ResizablePMCArray']
  vivify_1812:
    set $N3412, $P3411
    iseq $I3413, $N3412, 1.0
    unless $I3413, if_3410_end
    .const 'Sub' $P3415 = "458_1307835824.98345" 
    capture_lex $P3415
    $P3415()
  if_3410_end:
.annotate 'line', 2667
    find_dynamic_lex $P3451, "$*GLOBALish"
    unless_null $P3451, vivify_1824
    get_hll_global $P3449, "GLOBAL"
    get_who $P3450, $P3449
    set $P3451, $P3450["$GLOBALish"]
    unless_null $P3451, vivify_1825
    die "Contextual $*GLOBALish not found"
  vivify_1825:
  vivify_1824:
    store_lex "$result", $P3451
.annotate 'line', 2668
    find_lex $P3453, "@name"
    unless_null $P3453, vivify_1826
    $P3453 = root_new ['parrot';'ResizablePMCArray']
  vivify_1826:
    set $N3454, $P3453
    isge $I3455, $N3454, 2.0
    unless $I3455, if_3452_end
    .const 'Sub' $P3457 = "460_1307835824.98345" 
    capture_lex $P3457
    $P3457()
  if_3452_end:
.annotate 'line', 2686
    find_lex $P3492, "@name"
    unless_null $P3492, vivify_1839
    $P3492 = root_new ['parrot';'ResizablePMCArray']
  vivify_1839:
    defined $I3493, $P3492
    unless $I3493, for_undef_1840
    iter $P3491, $P3492
    new $P3514, 'ExceptionHandler'
    set_label $P3514, loop3513_handler
    $P3514."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P3514
  loop3513_test:
    unless $P3491, loop3513_done
    shift $P3494, $P3491
  loop3513_redo:
    .const 'Sub' $P3496 = "462_1307835824.98345" 
    capture_lex $P3496
    $P3496($P3494)
  loop3513_next:
    goto loop3513_test
  loop3513_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P3515, exception, 'type'
    eq $P3515, .CONTROL_LOOP_NEXT, loop3513_next
    eq $P3515, .CONTROL_LOOP_REDO, loop3513_redo
  loop3513_done:
    pop_eh 
  for_undef_1840:
    find_lex $P3516, "$result"
    unless_null $P3516, vivify_1847
    new $P3516, "Undef"
  vivify_1847:
.annotate 'line', 2643
    .return ($P3516)
  control_3400:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P3517, exception, "payload"
    .return ($P3517)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3414"  :anon :subid("458_1307835824.98345") :outer("457_1307835824.98345")
.annotate 'line', 2649
    .const 'Sub' $P3426 = "459_1307835824.98345" 
    capture_lex $P3426
.annotate 'line', 2650
    new $P3416, "Undef"
    .lex "$final_name", $P3416
    find_lex $P3417, "@name"
    unless_null $P3417, vivify_1813
    $P3417 = root_new ['parrot';'ResizablePMCArray']
  vivify_1813:
    set $P3418, $P3417[0]
    unless_null $P3418, vivify_1814
    new $P3418, "Undef"
  vivify_1814:
    store_lex "$final_name", $P3418
.annotate 'line', 2651
    find_lex $P3420, "$?PACKAGE"
    get_who $P3421, $P3420
    set $P3422, $P3421["@BLOCK"]
    unless_null $P3422, vivify_1815
    $P3422 = root_new ['parrot';'ResizablePMCArray']
  vivify_1815:
    defined $I3423, $P3422
    unless $I3423, for_undef_1816
    iter $P3419, $P3422
    new $P3447, 'ExceptionHandler'
    set_label $P3447, loop3446_handler
    $P3447."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P3447
  loop3446_test:
    unless $P3419, loop3446_done
    shift $P3424, $P3419
  loop3446_redo:
    .const 'Sub' $P3426 = "459_1307835824.98345" 
    capture_lex $P3426
    $P3426($P3424)
  loop3446_next:
    goto loop3446_test
  loop3446_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P3448, exception, 'type'
    eq $P3448, .CONTROL_LOOP_NEXT, loop3446_next
    eq $P3448, .CONTROL_LOOP_REDO, loop3446_redo
  loop3446_done:
    pop_eh 
  for_undef_1816:
.annotate 'line', 2649
    .return ($P3419)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3425"  :anon :subid("459_1307835824.98345") :outer("458_1307835824.98345")
    .param pmc param_3428
.annotate 'line', 2652
    $P3427 = root_new ['parrot';'Hash']
    .lex "%sym", $P3427
    .lex "$_", param_3428
    find_lex $P3429, "$_"
    unless_null $P3429, vivify_1817
    new $P3429, "Undef"
  vivify_1817:
    find_lex $P3430, "$final_name"
    unless_null $P3430, vivify_1818
    new $P3430, "Undef"
  vivify_1818:
    $P3431 = $P3429."symbol"($P3430)
    store_lex "%sym", $P3431
.annotate 'line', 2653
    find_lex $P3434, "%sym"
    unless_null $P3434, vivify_1819
    $P3434 = root_new ['parrot';'Hash']
  vivify_1819:
    set $N3435, $P3434
    if $N3435, if_3433
    new $P3432, 'Float'
    set $P3432, $N3435
    goto if_3433_end
  if_3433:
.annotate 'line', 2654
    find_lex $P3438, "%sym"
    unless_null $P3438, vivify_1820
    $P3438 = root_new ['parrot';'Hash']
  vivify_1820:
    exists $I3439, $P3438["value"]
    if $I3439, if_3437
.annotate 'line', 2658
    new $P3443, 'String'
    set $P3443, "No compile-time value for "
    find_lex $P3444, "$final_name"
    unless_null $P3444, vivify_1821
    new $P3444, "Undef"
  vivify_1821:
    concat $P3445, $P3443, $P3444
    die $P3445
.annotate 'line', 2657
    goto if_3437_end
  if_3437:
.annotate 'line', 2655
    new $P3440, "Exception"
    set $P3440['type'], .CONTROL_RETURN
    find_lex $P3441, "%sym"
    unless_null $P3441, vivify_1822
    $P3441 = root_new ['parrot';'Hash']
  vivify_1822:
    set $P3442, $P3441["value"]
    unless_null $P3442, vivify_1823
    new $P3442, "Undef"
  vivify_1823:
    setattribute $P3440, 'payload', $P3442
    throw $P3440
  if_3437_end:
.annotate 'line', 2653
    set $P3432, $P3436
  if_3433_end:
.annotate 'line', 2651
    .return ($P3432)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block3456"  :anon :subid("460_1307835824.98345") :outer("457_1307835824.98345")
.annotate 'line', 2668
    .const 'Sub' $P3468 = "461_1307835824.98345" 
    capture_lex $P3468
.annotate 'line', 2669
    new $P3458, "Undef"
    .lex "$first", $P3458
    find_lex $P3459, "@name"
    unless_null $P3459, vivify_1827
    $P3459 = root_new ['parrot';'ResizablePMCArray']
  vivify_1827:
    set $P3460, $P3459[0]
    unless_null $P3460, vivify_1828
    new $P3460, "Undef"
  vivify_1828:
    store_lex "$first", $P3460
.annotate 'line', 2670
    find_lex $P3462, "$?PACKAGE"
    get_who $P3463, $P3462
    set $P3464, $P3463["@BLOCK"]
    unless_null $P3464, vivify_1829
    $P3464 = root_new ['parrot';'ResizablePMCArray']
  vivify_1829:
    defined $I3465, $P3464
    unless $I3465, for_undef_1830
    iter $P3461, $P3464
    new $P3489, 'ExceptionHandler'
    set_label $P3489, loop3488_handler
    $P3489."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P3489
  loop3488_test:
    unless $P3461, loop3488_done
    shift $P3466, $P3461
  loop3488_redo:
    .const 'Sub' $P3468 = "461_1307835824.98345" 
    capture_lex $P3468
    $P3468($P3466)
  loop3488_next:
    goto loop3488_test
  loop3488_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P3490, exception, 'type'
    eq $P3490, .CONTROL_LOOP_NEXT, loop3488_next
    eq $P3490, .CONTROL_LOOP_REDO, loop3488_redo
  loop3488_done:
    pop_eh 
  for_undef_1830:
.annotate 'line', 2668
    .return ($P3461)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3467"  :anon :subid("461_1307835824.98345") :outer("460_1307835824.98345")
    .param pmc param_3470
.annotate 'line', 2671
    $P3469 = root_new ['parrot';'Hash']
    .lex "%sym", $P3469
    .lex "$_", param_3470
    find_lex $P3471, "$_"
    unless_null $P3471, vivify_1831
    new $P3471, "Undef"
  vivify_1831:
    find_lex $P3472, "$first"
    unless_null $P3472, vivify_1832
    new $P3472, "Undef"
  vivify_1832:
    $P3473 = $P3471."symbol"($P3472)
    store_lex "%sym", $P3473
.annotate 'line', 2672
    find_lex $P3476, "%sym"
    unless_null $P3476, vivify_1833
    $P3476 = root_new ['parrot';'Hash']
  vivify_1833:
    set $N3477, $P3476
    if $N3477, if_3475
    new $P3474, 'Float'
    set $P3474, $N3477
    goto if_3475_end
  if_3475:
.annotate 'line', 2673
    find_lex $P3480, "%sym"
    unless_null $P3480, vivify_1834
    $P3480 = root_new ['parrot';'Hash']
  vivify_1834:
    exists $I3481, $P3480["value"]
    if $I3481, if_3479
.annotate 'line', 2679
    new $P3485, 'String'
    set $P3485, "No compile-time value for "
    find_lex $P3486, "$first"
    unless_null $P3486, vivify_1835
    new $P3486, "Undef"
  vivify_1835:
    concat $P3487, $P3485, $P3486
    die $P3487
.annotate 'line', 2678
    goto if_3479_end
  if_3479:
.annotate 'line', 2674
    find_lex $P3482, "%sym"
    unless_null $P3482, vivify_1836
    $P3482 = root_new ['parrot';'Hash']
  vivify_1836:
    set $P3483, $P3482["value"]
    unless_null $P3483, vivify_1837
    new $P3483, "Undef"
  vivify_1837:
    store_lex "$result", $P3483
.annotate 'line', 2675
    find_lex $P3484, "@name"
    unless_null $P3484, vivify_1838
    $P3484 = root_new ['parrot';'ResizablePMCArray']
  vivify_1838:
    $P3484."shift"()
.annotate 'line', 2676
    die 0, .CONTROL_LOOP_LAST
  if_3479_end:
.annotate 'line', 2672
    set $P3474, $P3478
  if_3475_end:
.annotate 'line', 2670
    .return ($P3474)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3495"  :anon :subid("462_1307835824.98345") :outer("457_1307835824.98345")
    .param pmc param_3497
.annotate 'line', 2686
    .lex "$_", param_3497
.annotate 'line', 2687
    find_lex $P3502, "$_"
    unless_null $P3502, vivify_1841
    new $P3502, "Undef"
  vivify_1841:
    set $S3503, $P3502
    find_lex $P3500, "$result"
    unless_null $P3500, vivify_1842
    new $P3500, "Undef"
  vivify_1842:
    get_who $P3501, $P3500
    exists $I3504, $P3501[$S3503]
    if $I3504, if_3499
.annotate 'line', 2691
    new $P3509, "String"
    assign $P3509, "Could not locate compile-time value for symbol "
.annotate 'line', 2692
    find_lex $P3510, "@name"
    unless_null $P3510, vivify_1843
    $P3510 = root_new ['parrot';'ResizablePMCArray']
  vivify_1843:
    join $S3511, "::", $P3510
    concat $P3512, $P3509, $S3511
.annotate 'line', 2691
    die $P3512
.annotate 'line', 2690
    goto if_3499_end
  if_3499:
.annotate 'line', 2688
    find_lex $P3505, "$_"
    unless_null $P3505, vivify_1844
    new $P3505, "Undef"
  vivify_1844:
    find_lex $P3506, "$result"
    unless_null $P3506, vivify_1845
    new $P3506, "Undef"
  vivify_1845:
    get_who $P3507, $P3506
    set $P3508, $P3507[$P3505]
    unless_null $P3508, vivify_1846
    new $P3508, "Undef"
  vivify_1846:
    store_lex "$result", $P3508
.annotate 'line', 2687
    set $P3498, $P3508
  if_3499_end:
.annotate 'line', 2686
    .return ($P3498)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "TOP" :anon :subid("463_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_3528
    .param pmc param_3529
.annotate 'line', 1229
    .lex "self", param_3528
    .lex "$/", param_3529
    find_lex $P3530, "$/"
    find_lex $P3531, "$/"
    unless_null $P3531, vivify_1848
    $P3531 = root_new ['parrot';'Hash']
  vivify_1848:
    set $P3532, $P3531["comp_unit"]
    unless_null $P3532, vivify_1849
    new $P3532, "Undef"
  vivify_1849:
    $P3533 = $P3532."ast"()
    $P3534 = $P3530."!make"($P3533)
    .return ($P3534)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "deflongname" :anon :subid("464_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_3536
    .param pmc param_3537
.annotate 'line', 1231
    .lex "self", param_3536
    .lex "$/", param_3537
.annotate 'line', 1232
    find_lex $P3538, "$/"
.annotate 'line', 1233
    find_lex $P3541, "$/"
    unless_null $P3541, vivify_1850
    $P3541 = root_new ['parrot';'Hash']
  vivify_1850:
    set $P3542, $P3541["colonpair"]
    unless_null $P3542, vivify_1851
    new $P3542, "Undef"
  vivify_1851:
    if $P3542, if_3540
.annotate 'line', 1235
    find_lex $P3562, "$/"
    unless_null $P3562, vivify_1852
    new $P3562, "Undef"
  vivify_1852:
    set $S3563, $P3562
    new $P3539, 'String'
    set $P3539, $S3563
.annotate 'line', 1233
    goto if_3540_end
  if_3540:
    find_lex $P3543, "$/"
    unless_null $P3543, vivify_1853
    $P3543 = root_new ['parrot';'Hash']
  vivify_1853:
    set $P3544, $P3543["identifier"]
    unless_null $P3544, vivify_1854
    new $P3544, "Undef"
  vivify_1854:
    set $S3545, $P3544
    new $P3546, 'String'
    set $P3546, $S3545
    concat $P3547, $P3546, ":"
    find_lex $P3548, "$/"
    unless_null $P3548, vivify_1855
    $P3548 = root_new ['parrot';'Hash']
  vivify_1855:
    set $P3549, $P3548["colonpair"]
    unless_null $P3549, vivify_1856
    $P3549 = root_new ['parrot';'ResizablePMCArray']
  vivify_1856:
    set $P3550, $P3549[0]
    unless_null $P3550, vivify_1857
    new $P3550, "Undef"
  vivify_1857:
    $P3551 = $P3550."ast"()
    $S3552 = $P3551."named"()
    concat $P3553, $P3547, $S3552
    concat $P3554, $P3553, "<"
.annotate 'line', 1234
    find_lex $P3555, "$/"
    unless_null $P3555, vivify_1858
    $P3555 = root_new ['parrot';'Hash']
  vivify_1858:
    set $P3556, $P3555["colonpair"]
    unless_null $P3556, vivify_1859
    $P3556 = root_new ['parrot';'ResizablePMCArray']
  vivify_1859:
    set $P3557, $P3556[0]
    unless_null $P3557, vivify_1860
    new $P3557, "Undef"
  vivify_1860:
    $P3558 = $P3557."ast"()
    $S3559 = "colonpair_str"($P3558)
    concat $P3560, $P3554, $S3559
    concat $P3561, $P3560, ">"
    set $P3539, $P3561
  if_3540_end:
.annotate 'line', 1233
    $P3564 = $P3538."!make"($P3539)
.annotate 'line', 1231
    .return ($P3564)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "comp_unit" :anon :subid("465_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_3567
    .param pmc param_3568
.annotate 'line', 1245
    .const 'Sub' $P3631 = "466_1307835824.98345" 
    capture_lex $P3631
    .lex "self", param_3567
    .lex "$/", param_3568
.annotate 'line', 1246
    new $P3569, "Undef"
    .lex "$mainline", $P3569
.annotate 'line', 1247
    new $P3570, "Undef"
    .lex "$unit", $P3570
.annotate 'line', 1270
    $P3571 = root_new ['parrot';'ResizablePMCArray']
    .lex "@loadlibs", $P3571
.annotate 'line', 1283
    new $P3572, "Undef"
    .lex "$main_tasks", $P3572
.annotate 'line', 1246
    find_lex $P3573, "$/"
    unless_null $P3573, vivify_1861
    $P3573 = root_new ['parrot';'Hash']
  vivify_1861:
    set $P3574, $P3573["statementlist"]
    unless_null $P3574, vivify_1862
    new $P3574, "Undef"
  vivify_1862:
    $P3575 = $P3574."ast"()
    store_lex "$mainline", $P3575
.annotate 'line', 1247
    find_lex $P3576, "$?PACKAGE"
    get_who $P3577, $P3576
    set $P3578, $P3577["@BLOCK"]
    unless_null $P3578, vivify_1863
    $P3578 = root_new ['parrot';'ResizablePMCArray']
  vivify_1863:
    $P3579 = $P3578."shift"()
    store_lex "$unit", $P3579
.annotate 'line', 1251
    find_lex $P3580, "$unit"
    unless_null $P3580, vivify_1864
    new $P3580, "Undef"
  vivify_1864:
    $P3581 = $P3580."loadinit"()
    find_dynamic_lex $P3584, "$*SC"
    unless_null $P3584, vivify_1865
    get_hll_global $P3582, "GLOBAL"
    get_who $P3583, $P3582
    set $P3584, $P3583["$SC"]
    unless_null $P3584, vivify_1866
    die "Contextual $*SC not found"
  vivify_1866:
  vivify_1865:
    $P3585 = $P3584."to_past"()
    $P3581."push"($P3585)
.annotate 'line', 1256
    find_lex $P3586, "$unit"
    unless_null $P3586, vivify_1867
    new $P3586, "Undef"
  vivify_1867:
    $P3587 = $P3586."loadinit"()
    get_hll_global $P3588, "GLOBAL"
    nqp_get_package_through_who $P3589, $P3588, "PAST"
    get_who $P3590, $P3589
    set $P3591, $P3590["Op"]
.annotate 'line', 1258
    get_hll_global $P3592, "GLOBAL"
    nqp_get_package_through_who $P3593, $P3592, "PAST"
    get_who $P3594, $P3593
    set $P3595, $P3594["Var"]
    new $P3596, "ResizablePMCArray"
    $P3597 = $P3595."new"("GLOBAL" :named("name"), $P3596 :named("namespace"), "package" :named("scope"))
.annotate 'line', 1259
    find_dynamic_lex $P3600, "$*SC"
    unless_null $P3600, vivify_1868
    get_hll_global $P3598, "GLOBAL"
    get_who $P3599, $P3598
    set $P3600, $P3599["$SC"]
    unless_null $P3600, vivify_1869
    die "Contextual $*SC not found"
  vivify_1869:
  vivify_1868:
    find_dynamic_lex $P3603, "$*PACKAGE"
    unless_null $P3603, vivify_1870
    get_hll_global $P3601, "GLOBAL"
    get_who $P3602, $P3601
    set $P3603, $P3602["$PACKAGE"]
    unless_null $P3603, vivify_1871
    die "Contextual $*PACKAGE not found"
  vivify_1871:
  vivify_1870:
    $P3604 = $P3600."get_slot_past_for_object"($P3603)
    $P3605 = $P3591."new"($P3597, $P3604, "bind_6model" :named("pasttype"))
.annotate 'line', 1256
    $P3587."push"($P3605)
.annotate 'line', 1265
    find_dynamic_lex $P3609, "$*HAS_YOU_ARE_HERE"
    unless_null $P3609, vivify_1872
    get_hll_global $P3607, "GLOBAL"
    get_who $P3608, $P3607
    set $P3609, $P3608["$HAS_YOU_ARE_HERE"]
    unless_null $P3609, vivify_1873
    die "Contextual $*HAS_YOU_ARE_HERE not found"
  vivify_1873:
  vivify_1872:
    if $P3609, unless_3606_end
.annotate 'line', 1266
    find_lex $P3610, "$unit"
    unless_null $P3610, vivify_1874
    new $P3610, "Undef"
  vivify_1874:
    find_lex $P3611, "self"
    $P3612 = $P3611."CTXSAVE"()
    $P3610."push"($P3612)
  unless_3606_end:
.annotate 'line', 1270
    new $P3613, "ResizablePMCArray"
    push $P3613, "nqp_group"
    push $P3613, "nqp_ops"
    push $P3613, "trans_ops"
    push $P3613, "io_ops"
    store_lex "@loadlibs", $P3613
.annotate 'line', 1271
    find_dynamic_lex $P3617, "%*COMPILING"
    unless_null $P3617, vivify_1875
    get_hll_global $P3615, "GLOBAL"
    get_who $P3616, $P3615
    set $P3617, $P3616["%COMPILING"]
    unless_null $P3617, vivify_1876
    die "Contextual %*COMPILING not found"
  vivify_1876:
  vivify_1875:
    set $P3618, $P3617["%?OPTIONS"]
    unless_null $P3618, vivify_1877
    $P3618 = root_new ['parrot';'Hash']
  vivify_1877:
    set $P3619, $P3618["vmlibs"]
    unless_null $P3619, vivify_1878
    new $P3619, "Undef"
  vivify_1878:
    unless $P3619, if_3614_end
.annotate 'line', 1272
    find_dynamic_lex $P3623, "%*COMPILING"
    unless_null $P3623, vivify_1879
    get_hll_global $P3621, "GLOBAL"
    get_who $P3622, $P3621
    set $P3623, $P3622["%COMPILING"]
    unless_null $P3623, vivify_1880
    die "Contextual %*COMPILING not found"
  vivify_1880:
  vivify_1879:
    set $P3624, $P3623["%?OPTIONS"]
    unless_null $P3624, vivify_1881
    $P3624 = root_new ['parrot';'Hash']
  vivify_1881:
    set $P3625, $P3624["vmlibs"]
    unless_null $P3625, vivify_1882
    new $P3625, "Undef"
  vivify_1882:
    set $S3626, $P3625
    split $P3627, ",", $S3626
    defined $I3628, $P3627
    unless $I3628, for_undef_1883
    iter $P3620, $P3627
    new $P3637, 'ExceptionHandler'
    set_label $P3637, loop3636_handler
    $P3637."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P3637
  loop3636_test:
    unless $P3620, loop3636_done
    shift $P3629, $P3620
  loop3636_redo:
    .const 'Sub' $P3631 = "466_1307835824.98345" 
    capture_lex $P3631
    $P3631($P3629)
  loop3636_next:
    goto loop3636_test
  loop3636_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P3638, exception, 'type'
    eq $P3638, .CONTROL_LOOP_NEXT, loop3636_next
    eq $P3638, .CONTROL_LOOP_REDO, loop3636_redo
  loop3636_done:
    pop_eh 
  for_undef_1883:
  if_3614_end:
.annotate 'line', 1276
    find_lex $P3639, "$unit"
    unless_null $P3639, vivify_1886
    new $P3639, "Undef"
  vivify_1886:
    find_lex $P3640, "@loadlibs"
    unless_null $P3640, vivify_1887
    $P3640 = root_new ['parrot';'ResizablePMCArray']
  vivify_1887:
    $P3639."loadlibs"($P3640 :flat)
.annotate 'line', 1282
    find_lex $P3641, "$unit"
    unless_null $P3641, vivify_1888
    new $P3641, "Undef"
  vivify_1888:
    get_hll_global $P3642, "GLOBAL"
    nqp_get_package_through_who $P3643, $P3642, "PAST"
    get_who $P3644, $P3643
    set $P3645, $P3644["Var"]
    $P3646 = $P3645."new"("parameter" :named("scope"), "@ARGS" :named("name"), 1 :named("slurpy"))
    $P3641."unshift"($P3646)
.annotate 'line', 1283
    get_hll_global $P3647, "GLOBAL"
    nqp_get_package_through_who $P3648, $P3647, "PAST"
    get_who $P3649, $P3648
    set $P3650, $P3649["Stmts"]
.annotate 'line', 1284
    get_hll_global $P3651, "GLOBAL"
    nqp_get_package_through_who $P3652, $P3651, "PAST"
    get_who $P3653, $P3652
    set $P3654, $P3653["Op"]
    $P3655 = $P3654."new"("ModuleLoader.pbc", "load_bytecode vs" :named("pirop"))
.annotate 'line', 1285
    get_hll_global $P3656, "GLOBAL"
    nqp_get_package_through_who $P3657, $P3656, "PAST"
    get_who $P3658, $P3657
    set $P3659, $P3658["Op"]
.annotate 'line', 1287
    get_hll_global $P3660, "GLOBAL"
    nqp_get_package_through_who $P3661, $P3660, "PAST"
    get_who $P3662, $P3661
    set $P3663, $P3662["Var"]
    new $P3664, "ResizablePMCArray"
    $P3665 = $P3663."new"("ModuleLoader" :named("name"), $P3664 :named("namespace"), "package" :named("scope"))
.annotate 'line', 1288
    get_hll_global $P3666, "GLOBAL"
    nqp_get_package_through_who $P3667, $P3666, "PAST"
    get_who $P3668, $P3667
    set $P3669, $P3668["Var"]
    get_hll_global $P3670, "GLOBAL"
    nqp_get_package_through_who $P3671, $P3670, "PAST"
    get_who $P3672, $P3671
    set $P3673, $P3672["Op"]
    $P3674 = $P3673."new"("getinterp P" :named("pirop"))
    $P3675 = $P3669."new"($P3674, "context", "keyed" :named("scope"))
    $P3676 = $P3659."new"($P3665, $P3675, "callmethod" :named("pasttype"), "set_mainline_module" :named("name"))
.annotate 'line', 1285
    $P3677 = $P3650."new"($P3655, $P3676)
.annotate 'line', 1283
    store_lex "$main_tasks", $P3677
.annotate 'line', 1291
    find_dynamic_lex $P3681, "$*MAIN_SUB"
    unless_null $P3681, vivify_1889
    get_hll_global $P3679, "GLOBAL"
    get_who $P3680, $P3679
    set $P3681, $P3680["$MAIN_SUB"]
    unless_null $P3681, vivify_1890
    die "Contextual $*MAIN_SUB not found"
  vivify_1890:
  vivify_1889:
    unless $P3681, if_3678_end
.annotate 'line', 1292
    find_lex $P3682, "$main_tasks"
    unless_null $P3682, vivify_1891
    new $P3682, "Undef"
  vivify_1891:
    get_hll_global $P3683, "GLOBAL"
    nqp_get_package_through_who $P3684, $P3683, "PAST"
    get_who $P3685, $P3684
    set $P3686, $P3685["Op"]
.annotate 'line', 1293
    get_hll_global $P3687, "GLOBAL"
    nqp_get_package_through_who $P3688, $P3687, "PAST"
    get_who $P3689, $P3688
    set $P3690, $P3689["Val"]
    find_dynamic_lex $P3693, "$*MAIN_SUB"
    unless_null $P3693, vivify_1892
    get_hll_global $P3691, "GLOBAL"
    get_who $P3692, $P3691
    set $P3693, $P3692["$MAIN_SUB"]
    unless_null $P3693, vivify_1893
    die "Contextual $*MAIN_SUB not found"
  vivify_1893:
  vivify_1892:
    $P3694 = $P3690."new"($P3693 :named("value"))
.annotate 'line', 1294
    get_hll_global $P3695, "GLOBAL"
    nqp_get_package_through_who $P3696, $P3695, "PAST"
    get_who $P3697, $P3696
    set $P3698, $P3697["Var"]
    $P3699 = $P3698."new"("lexical" :named("scope"), "@ARGS" :named("name"), 1 :named("flat"))
    $P3700 = $P3686."new"($P3694, $P3699, "call" :named("pasttype"))
.annotate 'line', 1292
    $P3682."push"($P3700)
  if_3678_end:
.annotate 'line', 1297
    find_lex $P3701, "$mainline"
    unless_null $P3701, vivify_1894
    new $P3701, "Undef"
  vivify_1894:
    get_hll_global $P3702, "GLOBAL"
    nqp_get_package_through_who $P3703, $P3702, "PAST"
    get_who $P3704, $P3703
    set $P3705, $P3704["Op"]
.annotate 'line', 1299
    get_hll_global $P3706, "GLOBAL"
    nqp_get_package_through_who $P3707, $P3706, "PAST"
    get_who $P3708, $P3707
    set $P3709, $P3708["Var"]
    $P3710 = $P3709."new"("lexical" :named("scope"), "@ARGS" :named("name"))
    find_lex $P3711, "$main_tasks"
    unless_null $P3711, vivify_1895
    new $P3711, "Undef"
  vivify_1895:
    $P3712 = $P3705."new"($P3710, $P3711, "if" :named("pasttype"))
.annotate 'line', 1297
    $P3701."push"($P3712)
.annotate 'line', 1306
    find_lex $P3713, "$unit"
    unless_null $P3713, vivify_1896
    new $P3713, "Undef"
  vivify_1896:
.annotate 'line', 1307
    get_hll_global $P3714, "GLOBAL"
    nqp_get_package_through_who $P3715, $P3714, "PAST"
    get_who $P3716, $P3715
    set $P3717, $P3716["Op"]
    find_lex $P3718, "$mainline"
    unless_null $P3718, vivify_1897
    new $P3718, "Undef"
  vivify_1897:
    $P3719 = $P3717."new"($P3718, "return" :named("pirop"))
    $P3713."push"($P3719)
.annotate 'line', 1312
    find_lex $P3720, "$unit"
    unless_null $P3720, vivify_1898
    new $P3720, "Undef"
  vivify_1898:
.annotate 'line', 1313
    get_hll_global $P3721, "GLOBAL"
    nqp_get_package_through_who $P3722, $P3721, "PAST"
    get_who $P3723, $P3722
    set $P3724, $P3723["Block"]
.annotate 'line', 1315
    get_hll_global $P3725, "GLOBAL"
    nqp_get_package_through_who $P3726, $P3725, "PAST"
    get_who $P3727, $P3726
    set $P3728, $P3727["Op"]
    get_hll_global $P3729, "GLOBAL"
    nqp_get_package_through_who $P3730, $P3729, "PAST"
    get_who $P3731, $P3730
    set $P3732, $P3731["Val"]
    find_lex $P3733, "$unit"
    unless_null $P3733, vivify_1899
    new $P3733, "Undef"
  vivify_1899:
    $P3734 = $P3732."new"($P3733 :named("value"))
    $P3735 = $P3728."new"($P3734, "call" :named("pasttype"))
    $P3736 = $P3724."new"($P3735, ":load" :named("pirflags"), 0 :named("lexical"), "" :named("namespace"))
.annotate 'line', 1313
    $P3720."push"($P3736)
.annotate 'line', 1318
    find_lex $P3737, "$unit"
    unless_null $P3737, vivify_1900
    new $P3737, "Undef"
  vivify_1900:
    find_lex $P3738, "$/"
    unless_null $P3738, vivify_1901
    new $P3738, "Undef"
  vivify_1901:
    $P3737."node"($P3738)
.annotate 'line', 1321
    find_lex $P3739, "$unit"
    unless_null $P3739, vivify_1902
    new $P3739, "Undef"
  vivify_1902:
    $P3739."hll"("nqp")
.annotate 'line', 1323
    find_lex $P3740, "$/"
    find_lex $P3741, "$unit"
    unless_null $P3741, vivify_1903
    new $P3741, "Undef"
  vivify_1903:
    $P3742 = $P3740."!make"($P3741)
.annotate 'line', 1245
    .return ($P3742)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3630"  :anon :subid("466_1307835824.98345") :outer("465_1307835824.98345")
    .param pmc param_3632
.annotate 'line', 1272
    .lex "$_", param_3632
.annotate 'line', 1273
    find_lex $P3633, "@loadlibs"
    unless_null $P3633, vivify_1884
    $P3633 = root_new ['parrot';'ResizablePMCArray']
  vivify_1884:
    find_lex $P3634, "$_"
    unless_null $P3634, vivify_1885
    new $P3634, "Undef"
  vivify_1885:
    $P3635 = $P3633."push"($P3634)
.annotate 'line', 1272
    .return ($P3635)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "statementlist" :anon :subid("467_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_3744
    .param pmc param_3745
.annotate 'line', 1326
    .const 'Sub' $P3762 = "468_1307835824.98345" 
    capture_lex $P3762
    .lex "self", param_3744
    .lex "$/", param_3745
.annotate 'line', 1327
    new $P3746, "Undef"
    .lex "$past", $P3746
    get_hll_global $P3747, "GLOBAL"
    nqp_get_package_through_who $P3748, $P3747, "PAST"
    get_who $P3749, $P3748
    set $P3750, $P3749["Stmts"]
    find_lex $P3751, "$/"
    unless_null $P3751, vivify_1904
    new $P3751, "Undef"
  vivify_1904:
    $P3752 = $P3750."new"($P3751 :named("node"))
    store_lex "$past", $P3752
.annotate 'line', 1328
    find_lex $P3754, "$/"
    unless_null $P3754, vivify_1905
    $P3754 = root_new ['parrot';'Hash']
  vivify_1905:
    set $P3755, $P3754["statement"]
    unless_null $P3755, vivify_1906
    new $P3755, "Undef"
  vivify_1906:
    unless $P3755, if_3753_end
.annotate 'line', 1329
    find_lex $P3757, "$/"
    unless_null $P3757, vivify_1907
    $P3757 = root_new ['parrot';'Hash']
  vivify_1907:
    set $P3758, $P3757["statement"]
    unless_null $P3758, vivify_1908
    new $P3758, "Undef"
  vivify_1908:
    defined $I3759, $P3758
    unless $I3759, for_undef_1909
    iter $P3756, $P3758
    new $P3782, 'ExceptionHandler'
    set_label $P3782, loop3781_handler
    $P3782."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P3782
  loop3781_test:
    unless $P3756, loop3781_done
    shift $P3760, $P3756
  loop3781_redo:
    .const 'Sub' $P3762 = "468_1307835824.98345" 
    capture_lex $P3762
    $P3762($P3760)
  loop3781_next:
    goto loop3781_test
  loop3781_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P3783, exception, 'type'
    eq $P3783, .CONTROL_LOOP_NEXT, loop3781_next
    eq $P3783, .CONTROL_LOOP_REDO, loop3781_redo
  loop3781_done:
    pop_eh 
  for_undef_1909:
  if_3753_end:
.annotate 'line', 1336
    find_lex $P3784, "$/"
    find_lex $P3785, "$past"
    unless_null $P3785, vivify_1920
    new $P3785, "Undef"
  vivify_1920:
    $P3786 = $P3784."!make"($P3785)
.annotate 'line', 1326
    .return ($P3786)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3761"  :anon :subid("468_1307835824.98345") :outer("467_1307835824.98345")
    .param pmc param_3764
.annotate 'line', 1330
    new $P3763, "Undef"
    .lex "$ast", $P3763
    .lex "$_", param_3764
    find_lex $P3765, "$_"
    unless_null $P3765, vivify_1910
    new $P3765, "Undef"
  vivify_1910:
    $P3766 = $P3765."ast"()
    store_lex "$ast", $P3766
.annotate 'line', 1331
    find_lex $P3768, "$ast"
    unless_null $P3768, vivify_1911
    $P3768 = root_new ['parrot';'Hash']
  vivify_1911:
    set $P3769, $P3768["sink"]
    unless_null $P3769, vivify_1912
    new $P3769, "Undef"
  vivify_1912:
    defined $I3770, $P3769
    unless $I3770, if_3767_end
    find_lex $P3771, "$ast"
    unless_null $P3771, vivify_1913
    $P3771 = root_new ['parrot';'Hash']
  vivify_1913:
    set $P3772, $P3771["sink"]
    unless_null $P3772, vivify_1914
    new $P3772, "Undef"
  vivify_1914:
    store_lex "$ast", $P3772
  if_3767_end:
.annotate 'line', 1332
    find_lex $P3774, "$ast"
    unless_null $P3774, vivify_1915
    $P3774 = root_new ['parrot';'Hash']
  vivify_1915:
    set $P3775, $P3774["bareblock"]
    unless_null $P3775, vivify_1916
    new $P3775, "Undef"
  vivify_1916:
    unless $P3775, if_3773_end
    find_lex $P3776, "$ast"
    unless_null $P3776, vivify_1917
    new $P3776, "Undef"
  vivify_1917:
    $P3777 = "block_immediate"($P3776)
    store_lex "$ast", $P3777
  if_3773_end:
.annotate 'line', 1333
    find_lex $P3778, "$past"
    unless_null $P3778, vivify_1918
    new $P3778, "Undef"
  vivify_1918:
    find_lex $P3779, "$ast"
    unless_null $P3779, vivify_1919
    new $P3779, "Undef"
  vivify_1919:
    $P3780 = $P3778."push"($P3779)
.annotate 'line', 1329
    .return ($P3780)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement" :anon :subid("469_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_3788
    .param pmc param_3789
    .param pmc param_3790 :optional
    .param int has_param_3790 :opt_flag
.annotate 'line', 1339
    .const 'Sub' $P3798 = "470_1307835824.98345" 
    capture_lex $P3798
    .lex "self", param_3788
    .lex "$/", param_3789
    if has_param_3790, optparam_1921
    new $P3791, "Undef"
    set param_3790, $P3791
  optparam_1921:
    .lex "$key", param_3790
.annotate 'line', 1340
    new $P3792, "Undef"
    .lex "$past", $P3792
.annotate 'line', 1339
    find_lex $P3793, "$past"
    unless_null $P3793, vivify_1922
    new $P3793, "Undef"
  vivify_1922:
.annotate 'line', 1341
    find_lex $P3795, "$/"
    unless_null $P3795, vivify_1923
    $P3795 = root_new ['parrot';'Hash']
  vivify_1923:
    set $P3796, $P3795["EXPR"]
    unless_null $P3796, vivify_1924
    new $P3796, "Undef"
  vivify_1924:
    if $P3796, if_3794
.annotate 'line', 1362
    find_lex $P3874, "$/"
    unless_null $P3874, vivify_1925
    $P3874 = root_new ['parrot';'Hash']
  vivify_1925:
    set $P3875, $P3874["statement_control"]
    unless_null $P3875, vivify_1926
    new $P3875, "Undef"
  vivify_1926:
    if $P3875, if_3873
.annotate 'line', 1363
    new $P3879, "Integer"
    assign $P3879, 0
    store_lex "$past", $P3879
    goto if_3873_end
  if_3873:
.annotate 'line', 1362
    find_lex $P3876, "$/"
    unless_null $P3876, vivify_1927
    $P3876 = root_new ['parrot';'Hash']
  vivify_1927:
    set $P3877, $P3876["statement_control"]
    unless_null $P3877, vivify_1928
    new $P3877, "Undef"
  vivify_1928:
    $P3878 = $P3877."ast"()
    store_lex "$past", $P3878
  if_3873_end:
    goto if_3794_end
  if_3794:
.annotate 'line', 1341
    .const 'Sub' $P3798 = "470_1307835824.98345" 
    capture_lex $P3798
    $P3798()
  if_3794_end:
.annotate 'line', 1364
    find_lex $P3880, "$/"
    find_lex $P3881, "$past"
    unless_null $P3881, vivify_1962
    new $P3881, "Undef"
  vivify_1962:
    $P3882 = $P3880."!make"($P3881)
.annotate 'line', 1339
    .return ($P3882)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3797"  :anon :subid("470_1307835824.98345") :outer("469_1307835824.98345")
.annotate 'line', 1342
    new $P3799, "Undef"
    .lex "$mc", $P3799
.annotate 'line', 1343
    new $P3800, "Undef"
    .lex "$ml", $P3800
.annotate 'line', 1342
    find_lex $P3801, "$/"
    unless_null $P3801, vivify_1929
    $P3801 = root_new ['parrot';'Hash']
  vivify_1929:
    set $P3802, $P3801["statement_mod_cond"]
    unless_null $P3802, vivify_1930
    $P3802 = root_new ['parrot';'ResizablePMCArray']
  vivify_1930:
    set $P3803, $P3802[0]
    unless_null $P3803, vivify_1931
    new $P3803, "Undef"
  vivify_1931:
    store_lex "$mc", $P3803
.annotate 'line', 1343
    find_lex $P3804, "$/"
    unless_null $P3804, vivify_1932
    $P3804 = root_new ['parrot';'Hash']
  vivify_1932:
    set $P3805, $P3804["statement_mod_loop"]
    unless_null $P3805, vivify_1933
    $P3805 = root_new ['parrot';'ResizablePMCArray']
  vivify_1933:
    set $P3806, $P3805[0]
    unless_null $P3806, vivify_1934
    new $P3806, "Undef"
  vivify_1934:
    store_lex "$ml", $P3806
.annotate 'line', 1344
    find_lex $P3807, "$/"
    unless_null $P3807, vivify_1935
    $P3807 = root_new ['parrot';'Hash']
  vivify_1935:
    set $P3808, $P3807["EXPR"]
    unless_null $P3808, vivify_1936
    new $P3808, "Undef"
  vivify_1936:
    $P3809 = $P3808."ast"()
    store_lex "$past", $P3809
.annotate 'line', 1345
    find_lex $P3811, "$mc"
    unless_null $P3811, vivify_1937
    new $P3811, "Undef"
  vivify_1937:
    unless $P3811, if_3810_end
.annotate 'line', 1346
    get_hll_global $P3812, "GLOBAL"
    nqp_get_package_through_who $P3813, $P3812, "PAST"
    get_who $P3814, $P3813
    set $P3815, $P3814["Op"]
    find_lex $P3816, "$mc"
    unless_null $P3816, vivify_1938
    $P3816 = root_new ['parrot';'Hash']
  vivify_1938:
    set $P3817, $P3816["cond"]
    unless_null $P3817, vivify_1939
    new $P3817, "Undef"
  vivify_1939:
    $P3818 = $P3817."ast"()
    find_lex $P3819, "$past"
    unless_null $P3819, vivify_1940
    new $P3819, "Undef"
  vivify_1940:
    find_lex $P3820, "$mc"
    unless_null $P3820, vivify_1941
    $P3820 = root_new ['parrot';'Hash']
  vivify_1941:
    set $P3821, $P3820["sym"]
    unless_null $P3821, vivify_1942
    new $P3821, "Undef"
  vivify_1942:
    set $S3822, $P3821
    find_lex $P3823, "$/"
    unless_null $P3823, vivify_1943
    new $P3823, "Undef"
  vivify_1943:
    $P3824 = $P3815."new"($P3818, $P3819, $S3822 :named("pasttype"), $P3823 :named("node"))
    store_lex "$past", $P3824
  if_3810_end:
.annotate 'line', 1348
    find_lex $P3827, "$ml"
    unless_null $P3827, vivify_1944
    new $P3827, "Undef"
  vivify_1944:
    if $P3827, if_3826
    set $P3825, $P3827
    goto if_3826_end
  if_3826:
.annotate 'line', 1349
    find_lex $P3830, "$ml"
    unless_null $P3830, vivify_1945
    $P3830 = root_new ['parrot';'Hash']
  vivify_1945:
    set $P3831, $P3830["sym"]
    unless_null $P3831, vivify_1946
    new $P3831, "Undef"
  vivify_1946:
    set $S3832, $P3831
    iseq $I3833, $S3832, "for"
    if $I3833, if_3829
.annotate 'line', 1358
    get_hll_global $P3860, "GLOBAL"
    nqp_get_package_through_who $P3861, $P3860, "PAST"
    get_who $P3862, $P3861
    set $P3863, $P3862["Op"]
    find_lex $P3864, "$ml"
    unless_null $P3864, vivify_1947
    $P3864 = root_new ['parrot';'Hash']
  vivify_1947:
    set $P3865, $P3864["cond"]
    unless_null $P3865, vivify_1948
    new $P3865, "Undef"
  vivify_1948:
    $P3866 = $P3865."ast"()
    find_lex $P3867, "$past"
    unless_null $P3867, vivify_1949
    new $P3867, "Undef"
  vivify_1949:
    find_lex $P3868, "$ml"
    unless_null $P3868, vivify_1950
    $P3868 = root_new ['parrot';'Hash']
  vivify_1950:
    set $P3869, $P3868["sym"]
    unless_null $P3869, vivify_1951
    new $P3869, "Undef"
  vivify_1951:
    set $S3870, $P3869
    find_lex $P3871, "$/"
    unless_null $P3871, vivify_1952
    new $P3871, "Undef"
  vivify_1952:
    $P3872 = $P3863."new"($P3866, $P3867, $S3870 :named("pasttype"), $P3871 :named("node"))
    store_lex "$past", $P3872
.annotate 'line', 1357
    set $P3828, $P3872
.annotate 'line', 1349
    goto if_3829_end
  if_3829:
.annotate 'line', 1350
    get_hll_global $P3834, "GLOBAL"
    nqp_get_package_through_who $P3835, $P3834, "PAST"
    get_who $P3836, $P3835
    set $P3837, $P3836["Block"]
.annotate 'line', 1351
    get_hll_global $P3838, "GLOBAL"
    nqp_get_package_through_who $P3839, $P3838, "PAST"
    get_who $P3840, $P3839
    set $P3841, $P3840["Var"]
    $P3842 = $P3841."new"("$_" :named("name"), "parameter" :named("scope"), 1 :named("isdecl"))
    find_lex $P3843, "$past"
    unless_null $P3843, vivify_1953
    new $P3843, "Undef"
  vivify_1953:
    $P3844 = $P3837."new"($P3842, $P3843, "immediate" :named("blocktype"))
.annotate 'line', 1350
    store_lex "$past", $P3844
.annotate 'line', 1353
    find_lex $P3845, "$past"
    unless_null $P3845, vivify_1954
    new $P3845, "Undef"
  vivify_1954:
    $P3845."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1354
    find_lex $P3846, "$past"
    unless_null $P3846, vivify_1955
    new $P3846, "Undef"
  vivify_1955:
    $P3846."arity"(1)
.annotate 'line', 1355
    get_hll_global $P3847, "GLOBAL"
    nqp_get_package_through_who $P3848, $P3847, "PAST"
    get_who $P3849, $P3848
    set $P3850, $P3849["Op"]
    find_lex $P3851, "$ml"
    unless_null $P3851, vivify_1956
    $P3851 = root_new ['parrot';'Hash']
  vivify_1956:
    set $P3852, $P3851["cond"]
    unless_null $P3852, vivify_1957
    new $P3852, "Undef"
  vivify_1957:
    $P3853 = $P3852."ast"()
    find_lex $P3854, "$past"
    unless_null $P3854, vivify_1958
    new $P3854, "Undef"
  vivify_1958:
    find_lex $P3855, "$ml"
    unless_null $P3855, vivify_1959
    $P3855 = root_new ['parrot';'Hash']
  vivify_1959:
    set $P3856, $P3855["sym"]
    unless_null $P3856, vivify_1960
    new $P3856, "Undef"
  vivify_1960:
    set $S3857, $P3856
    find_lex $P3858, "$/"
    unless_null $P3858, vivify_1961
    new $P3858, "Undef"
  vivify_1961:
    $P3859 = $P3850."new"($P3853, $P3854, $S3857 :named("pasttype"), $P3858 :named("node"))
    store_lex "$past", $P3859
.annotate 'line', 1349
    set $P3828, $P3859
  if_3829_end:
.annotate 'line', 1348
    set $P3825, $P3828
  if_3826_end:
.annotate 'line', 1341
    .return ($P3825)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "xblock" :anon :subid("471_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_3884
    .param pmc param_3885
.annotate 'line', 1367
    .lex "self", param_3884
    .lex "$/", param_3885
.annotate 'line', 1368
    find_lex $P3886, "$/"
    get_hll_global $P3887, "GLOBAL"
    nqp_get_package_through_who $P3888, $P3887, "PAST"
    get_who $P3889, $P3888
    set $P3890, $P3889["Op"]
    find_lex $P3891, "$/"
    unless_null $P3891, vivify_1963
    $P3891 = root_new ['parrot';'Hash']
  vivify_1963:
    set $P3892, $P3891["EXPR"]
    unless_null $P3892, vivify_1964
    new $P3892, "Undef"
  vivify_1964:
    $P3893 = $P3892."ast"()
    find_lex $P3894, "$/"
    unless_null $P3894, vivify_1965
    $P3894 = root_new ['parrot';'Hash']
  vivify_1965:
    set $P3895, $P3894["pblock"]
    unless_null $P3895, vivify_1966
    new $P3895, "Undef"
  vivify_1966:
    $P3896 = $P3895."ast"()
    find_lex $P3897, "$/"
    unless_null $P3897, vivify_1967
    new $P3897, "Undef"
  vivify_1967:
    $P3898 = $P3890."new"($P3893, $P3896, "if" :named("pasttype"), $P3897 :named("node"))
    $P3899 = $P3886."!make"($P3898)
.annotate 'line', 1367
    .return ($P3899)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "pblock" :anon :subid("472_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_3901
    .param pmc param_3902
.annotate 'line', 1371
    .lex "self", param_3901
    .lex "$/", param_3902
.annotate 'line', 1372
    find_lex $P3903, "$/"
    find_lex $P3904, "$/"
    unless_null $P3904, vivify_1968
    $P3904 = root_new ['parrot';'Hash']
  vivify_1968:
    set $P3905, $P3904["blockoid"]
    unless_null $P3905, vivify_1969
    new $P3905, "Undef"
  vivify_1969:
    $P3906 = $P3905."ast"()
    $P3907 = $P3903."!make"($P3906)
.annotate 'line', 1371
    .return ($P3907)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "block" :anon :subid("473_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_3909
    .param pmc param_3910
.annotate 'line', 1375
    .lex "self", param_3909
    .lex "$/", param_3910
.annotate 'line', 1376
    find_lex $P3911, "$/"
    find_lex $P3912, "$/"
    unless_null $P3912, vivify_1970
    $P3912 = root_new ['parrot';'Hash']
  vivify_1970:
    set $P3913, $P3912["blockoid"]
    unless_null $P3913, vivify_1971
    new $P3913, "Undef"
  vivify_1971:
    $P3914 = $P3913."ast"()
    $P3915 = $P3911."!make"($P3914)
.annotate 'line', 1375
    .return ($P3915)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "blockoid" :anon :subid("474_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_3917
    .param pmc param_3918
.annotate 'line', 1379
    .const 'Sub' $P3929 = "475_1307835824.98345" 
    capture_lex $P3929
    .lex "self", param_3917
    .lex "$/", param_3918
.annotate 'line', 1380
    new $P3919, "Undef"
    .lex "$BLOCK", $P3919
    find_lex $P3920, "$?PACKAGE"
    get_who $P3921, $P3920
    set $P3922, $P3921["@BLOCK"]
    unless_null $P3922, vivify_1972
    $P3922 = root_new ['parrot';'ResizablePMCArray']
  vivify_1972:
    $P3923 = $P3922."shift"()
    store_lex "$BLOCK", $P3923
.annotate 'line', 1381
    find_lex $P3926, "$/"
    unless_null $P3926, vivify_1973
    $P3926 = root_new ['parrot';'Hash']
  vivify_1973:
    set $P3927, $P3926["statementlist"]
    unless_null $P3927, vivify_1974
    new $P3927, "Undef"
  vivify_1974:
    if $P3927, if_3925
.annotate 'line', 1389
    find_dynamic_lex $P3946, "$*HAS_YOU_ARE_HERE"
    unless_null $P3946, vivify_1975
    get_hll_global $P3944, "GLOBAL"
    get_who $P3945, $P3944
    set $P3946, $P3945["$HAS_YOU_ARE_HERE"]
    unless_null $P3946, vivify_1976
    die "Contextual $*HAS_YOU_ARE_HERE not found"
  vivify_1976:
  vivify_1975:
    unless $P3946, if_3943_end
.annotate 'line', 1390
    find_lex $P3947, "$/"
    unless_null $P3947, vivify_1977
    new $P3947, "Undef"
  vivify_1977:
    $P3948 = $P3947."CURSOR"()
    $P3948."panic"("{YOU_ARE_HERE} may only appear once in a setting")
  if_3943_end:
.annotate 'line', 1392
    new $P3949, "Integer"
    assign $P3949, 1
    store_dynamic_lex "$*HAS_YOU_ARE_HERE", $P3949
.annotate 'line', 1393
    find_lex $P3950, "$/"
    find_lex $P3951, "$/"
    unless_null $P3951, vivify_1978
    $P3951 = root_new ['parrot';'Hash']
  vivify_1978:
    set $P3952, $P3951["you_are_here"]
    unless_null $P3952, vivify_1979
    new $P3952, "Undef"
  vivify_1979:
    $P3953 = $P3952."ast"()
    $P3954 = $P3950."!make"($P3953)
.annotate 'line', 1388
    set $P3924, $P3954
.annotate 'line', 1381
    goto if_3925_end
  if_3925:
    .const 'Sub' $P3929 = "475_1307835824.98345" 
    capture_lex $P3929
    $P3942 = $P3929()
    set $P3924, $P3942
  if_3925_end:
.annotate 'line', 1379
    .return ($P3924)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3928"  :anon :subid("475_1307835824.98345") :outer("474_1307835824.98345")
.annotate 'line', 1382
    new $P3930, "Undef"
    .lex "$past", $P3930
    find_lex $P3931, "$/"
    unless_null $P3931, vivify_1980
    $P3931 = root_new ['parrot';'Hash']
  vivify_1980:
    set $P3932, $P3931["statementlist"]
    unless_null $P3932, vivify_1981
    new $P3932, "Undef"
  vivify_1981:
    $P3933 = $P3932."ast"()
    store_lex "$past", $P3933
.annotate 'line', 1383
    find_lex $P3934, "$BLOCK"
    unless_null $P3934, vivify_1982
    new $P3934, "Undef"
  vivify_1982:
    find_lex $P3935, "$past"
    unless_null $P3935, vivify_1983
    new $P3935, "Undef"
  vivify_1983:
    $P3934."push"($P3935)
.annotate 'line', 1384
    find_lex $P3936, "$BLOCK"
    unless_null $P3936, vivify_1984
    new $P3936, "Undef"
  vivify_1984:
    find_lex $P3937, "$/"
    unless_null $P3937, vivify_1985
    new $P3937, "Undef"
  vivify_1985:
    $P3936."node"($P3937)
.annotate 'line', 1385
    find_lex $P3938, "$BLOCK"
    unless_null $P3938, vivify_1986
    new $P3938, "Undef"
  vivify_1986:
    $P3938."closure"(1)
.annotate 'line', 1386
    find_dynamic_lex $P3939, "$/"
    find_lex $P3940, "$BLOCK"
    unless_null $P3940, vivify_1987
    new $P3940, "Undef"
  vivify_1987:
    $P3941 = $P3939."!make"($P3940)
.annotate 'line', 1381
    .return ($P3941)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "newpad" :anon :subid("476_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_3956
    .param pmc param_3957
.annotate 'line', 1397
    .lex "self", param_3956
    .lex "$/", param_3957
.annotate 'line', 1398
    find_lex $P3958, "$?PACKAGE"
    get_who $P3959, $P3958
    set $P3960, $P3959["@BLOCK"]
    unless_null $P3960, vivify_1988
    $P3960 = root_new ['parrot';'ResizablePMCArray']
  vivify_1988:
    get_hll_global $P3961, "GLOBAL"
    nqp_get_package_through_who $P3962, $P3961, "PAST"
    get_who $P3963, $P3962
    set $P3964, $P3963["Block"]
    get_hll_global $P3965, "GLOBAL"
    nqp_get_package_through_who $P3966, $P3965, "PAST"
    get_who $P3967, $P3966
    set $P3968, $P3967["Stmts"]
    $P3969 = $P3968."new"()
    $P3970 = $P3964."new"($P3969)
    $P3971 = $P3960."unshift"($P3970)
.annotate 'line', 1397
    .return ($P3971)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "outerctx" :anon :subid("477_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_3973
    .param pmc param_3974
.annotate 'line', 1401
    .const 'Sub' $P3983 = "478_1307835824.98345" 
    capture_lex $P3983
    .lex "self", param_3973
    .lex "$/", param_3974
.annotate 'line', 1402
    find_dynamic_lex $P3978, "%*COMPILING"
    unless_null $P3978, vivify_1989
    get_hll_global $P3976, "GLOBAL"
    get_who $P3977, $P3976
    set $P3978, $P3977["%COMPILING"]
    unless_null $P3978, vivify_1990
    die "Contextual %*COMPILING not found"
  vivify_1990:
  vivify_1989:
    set $P3979, $P3978["%?OPTIONS"]
    unless_null $P3979, vivify_1991
    $P3979 = root_new ['parrot';'Hash']
  vivify_1991:
    set $P3980, $P3979["outer_ctx"]
    unless_null $P3980, vivify_1992
    new $P3980, "Undef"
  vivify_1992:
    defined $I3981, $P3980
    if $I3981, unless_3975_end
    .const 'Sub' $P3983 = "478_1307835824.98345" 
    capture_lex $P3983
    $P3983()
  unless_3975_end:
.annotate 'line', 1415
    find_lex $P4015, "self"
    find_lex $P4016, "$?PACKAGE"
    get_who $P4017, $P4016
    set $P4018, $P4017["@BLOCK"]
    unless_null $P4018, vivify_2008
    $P4018 = root_new ['parrot';'ResizablePMCArray']
  vivify_2008:
    set $P4019, $P4018[0]
    unless_null $P4019, vivify_2009
    new $P4019, "Undef"
  vivify_2009:
    $P4020 = $P4015."SET_BLOCK_OUTER_CTX"($P4019)
.annotate 'line', 1401
    .return ($P4020)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block3982"  :anon :subid("478_1307835824.98345") :outer("477_1307835824.98345")
.annotate 'line', 1405
    new $P3984, "Undef"
    .lex "$SETTING", $P3984
    find_dynamic_lex $P3987, "$*SC"
    unless_null $P3987, vivify_1993
    get_hll_global $P3985, "GLOBAL"
    get_who $P3986, $P3985
    set $P3987, $P3986["$SC"]
    unless_null $P3987, vivify_1994
    die "Contextual $*SC not found"
  vivify_1994:
  vivify_1993:
    find_dynamic_lex $P3991, "%*COMPILING"
    unless_null $P3991, vivify_1995
    get_hll_global $P3989, "GLOBAL"
    get_who $P3990, $P3989
    set $P3991, $P3990["%COMPILING"]
    unless_null $P3991, vivify_1996
    die "Contextual %*COMPILING not found"
  vivify_1996:
  vivify_1995:
    set $P3992, $P3991["%?OPTIONS"]
    unless_null $P3992, vivify_1997
    $P3992 = root_new ['parrot';'Hash']
  vivify_1997:
    set $P3993, $P3992["setting"]
    unless_null $P3993, vivify_1998
    new $P3993, "Undef"
  vivify_1998:
    set $P3988, $P3993
    defined $I3995, $P3988
    if $I3995, default_3994
    new $P3996, "String"
    assign $P3996, "NQPCORE"
    set $P3988, $P3996
  default_3994:
    $P3997 = $P3987."load_setting"($P3988)
    store_lex "$SETTING", $P3997
.annotate 'line', 1410
    find_dynamic_lex $P4002, "%*COMPILING"
    unless_null $P4002, vivify_1999
    get_hll_global $P4000, "GLOBAL"
    get_who $P4001, $P4000
    set $P4002, $P4001["%COMPILING"]
    unless_null $P4002, vivify_2000
    die "Contextual %*COMPILING not found"
  vivify_2000:
  vivify_1999:
    set $P4003, $P4002["%?OPTIONS"]
    unless_null $P4003, vivify_2001
    $P4003 = root_new ['parrot';'Hash']
  vivify_2001:
    set $P4004, $P4003["setting"]
    unless_null $P4004, vivify_2002
    new $P4004, "Undef"
  vivify_2002:
    set $S4005, $P4004
    iseq $I4006, $S4005, "NULL"
    unless $I4006, unless_3999
    new $P3998, 'Integer'
    set $P3998, $I4006
    goto unless_3999_end
  unless_3999:
.annotate 'line', 1411
    find_lex $P4007, "$SETTING"
    unless_null $P4007, vivify_2003
    new $P4007, "Undef"
  vivify_2003:
    "import_HOW_exports"($P4007)
.annotate 'line', 1412
    find_dynamic_lex $P4010, "$*SC"
    unless_null $P4010, vivify_2004
    get_hll_global $P4008, "GLOBAL"
    get_who $P4009, $P4008
    set $P4010, $P4009["$SC"]
    unless_null $P4010, vivify_2005
    die "Contextual $*SC not found"
  vivify_2005:
  vivify_2004:
    find_dynamic_lex $P4013, "$*GLOBALish"
    unless_null $P4013, vivify_2006
    get_hll_global $P4011, "GLOBAL"
    get_who $P4012, $P4011
    set $P4013, $P4012["$GLOBALish"]
    unless_null $P4013, vivify_2007
    die "Contextual $*GLOBALish not found"
  vivify_2007:
  vivify_2006:
    $P4014 = $P4010."load_module"("NQPRegex", $P4013)
.annotate 'line', 1410
    set $P3998, $P4014
  unless_3999_end:
.annotate 'line', 1402
    .return ($P3998)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "GLOBALish" :anon :subid("479_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4023
    .param pmc param_4024
.annotate 'line', 1427
    .lex "self", param_4023
    .lex "$/", param_4024
.annotate 'line', 1431
    find_dynamic_lex $P4027, "$*SC"
    unless_null $P4027, vivify_2010
    get_hll_global $P4025, "GLOBAL"
    get_who $P4026, $P4025
    set $P4027, $P4026["$SC"]
    unless_null $P4027, vivify_2011
    die "Contextual $*SC not found"
  vivify_2011:
  vivify_2010:
    find_dynamic_lex $P4030, "%*HOW"
    unless_null $P4030, vivify_2012
    get_hll_global $P4028, "GLOBAL"
    get_who $P4029, $P4028
    set $P4030, $P4029["%HOW"]
    unless_null $P4030, vivify_2013
    die "Contextual %*HOW not found"
  vivify_2013:
  vivify_2012:
    set $P4031, $P4030["knowhow"]
    unless_null $P4031, vivify_2014
    new $P4031, "Undef"
  vivify_2014:
    $P4032 = $P4027."pkg_create_mo"($P4031, "GLOBALish" :named("name"))
    store_dynamic_lex "$*GLOBALish", $P4032
.annotate 'line', 1432
    find_dynamic_lex $P4035, "$*GLOBALish"
    unless_null $P4035, vivify_2015
    get_hll_global $P4033, "GLOBAL"
    get_who $P4034, $P4033
    set $P4035, $P4034["$GLOBALish"]
    unless_null $P4035, vivify_2016
    die "Contextual $*GLOBALish not found"
  vivify_2016:
  vivify_2015:
    get_how $P4036, $P4035
    find_dynamic_lex $P4039, "$*GLOBALish"
    unless_null $P4039, vivify_2017
    get_hll_global $P4037, "GLOBAL"
    get_who $P4038, $P4037
    set $P4039, $P4038["$GLOBALish"]
    unless_null $P4039, vivify_2018
    die "Contextual $*GLOBALish not found"
  vivify_2018:
  vivify_2017:
    $P4036."compose"($P4039)
.annotate 'line', 1433
    find_dynamic_lex $P4042, "$*SC"
    unless_null $P4042, vivify_2019
    get_hll_global $P4040, "GLOBAL"
    get_who $P4041, $P4040
    set $P4042, $P4041["$SC"]
    unless_null $P4042, vivify_2020
    die "Contextual $*SC not found"
  vivify_2020:
  vivify_2019:
    find_lex $P4043, "$?PACKAGE"
    get_who $P4044, $P4043
    set $P4045, $P4044["@BLOCK"]
    unless_null $P4045, vivify_2021
    $P4045 = root_new ['parrot';'ResizablePMCArray']
  vivify_2021:
    set $P4046, $P4045[0]
    unless_null $P4046, vivify_2022
    new $P4046, "Undef"
  vivify_2022:
    find_dynamic_lex $P4049, "$*GLOBALish"
    unless_null $P4049, vivify_2023
    get_hll_global $P4047, "GLOBAL"
    get_who $P4048, $P4047
    set $P4049, $P4048["$GLOBALish"]
    unless_null $P4049, vivify_2024
    die "Contextual $*GLOBALish not found"
  vivify_2024:
  vivify_2023:
    $P4042."install_lexical_symbol"($P4046, "GLOBALish", $P4049)
.annotate 'line', 1436
    find_dynamic_lex $P4052, "$*GLOBALish"
    unless_null $P4052, vivify_2025
    get_hll_global $P4050, "GLOBAL"
    get_who $P4051, $P4050
    set $P4052, $P4051["$GLOBALish"]
    unless_null $P4052, vivify_2026
    die "Contextual $*GLOBALish not found"
  vivify_2026:
  vivify_2025:
    store_dynamic_lex "$*PACKAGE", $P4052
.annotate 'line', 1437
    find_dynamic_lex $P4055, "$*SC"
    unless_null $P4055, vivify_2027
    get_hll_global $P4053, "GLOBAL"
    get_who $P4054, $P4053
    set $P4055, $P4054["$SC"]
    unless_null $P4055, vivify_2028
    die "Contextual $*SC not found"
  vivify_2028:
  vivify_2027:
    find_lex $P4056, "$?PACKAGE"
    get_who $P4057, $P4056
    set $P4058, $P4057["@BLOCK"]
    unless_null $P4058, vivify_2029
    $P4058 = root_new ['parrot';'ResizablePMCArray']
  vivify_2029:
    set $P4059, $P4058[0]
    unless_null $P4059, vivify_2030
    new $P4059, "Undef"
  vivify_2030:
    find_dynamic_lex $P4062, "$*PACKAGE"
    unless_null $P4062, vivify_2031
    get_hll_global $P4060, "GLOBAL"
    get_who $P4061, $P4060
    set $P4062, $P4061["$PACKAGE"]
    unless_null $P4062, vivify_2032
    die "Contextual $*PACKAGE not found"
  vivify_2032:
  vivify_2031:
    $P4063 = $P4055."install_lexical_symbol"($P4059, "$?PACKAGE", $P4062)
.annotate 'line', 1427
    .return ($P4063)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "you_are_here" :anon :subid("480_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4065
    .param pmc param_4066
.annotate 'line', 1440
    .lex "self", param_4065
    .lex "$/", param_4066
.annotate 'line', 1441
    find_lex $P4067, "$/"
    find_lex $P4068, "self"
    $P4069 = $P4068."CTXSAVE"()
    $P4070 = $P4067."!make"($P4069)
.annotate 'line', 1440
    .return ($P4070)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<use>" :anon :subid("481_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4072
    .param pmc param_4073
.annotate 'line', 1446
    .lex "self", param_4072
    .lex "$/", param_4073
.annotate 'line', 1447
    new $P4074, "Undef"
    .lex "$module", $P4074
    find_dynamic_lex $P4077, "$*SC"
    unless_null $P4077, vivify_2033
    get_hll_global $P4075, "GLOBAL"
    get_who $P4076, $P4075
    set $P4077, $P4076["$SC"]
    unless_null $P4077, vivify_2034
    die "Contextual $*SC not found"
  vivify_2034:
  vivify_2033:
    find_lex $P4078, "$/"
    unless_null $P4078, vivify_2035
    $P4078 = root_new ['parrot';'Hash']
  vivify_2035:
    set $P4079, $P4078["name"]
    unless_null $P4079, vivify_2036
    new $P4079, "Undef"
  vivify_2036:
    set $S4080, $P4079
    find_dynamic_lex $P4083, "$*GLOBALish"
    unless_null $P4083, vivify_2037
    get_hll_global $P4081, "GLOBAL"
    get_who $P4082, $P4081
    set $P4083, $P4082["$GLOBALish"]
    unless_null $P4083, vivify_2038
    die "Contextual $*GLOBALish not found"
  vivify_2038:
  vivify_2037:
    $P4084 = $P4077."load_module"($S4080, $P4083)
    store_lex "$module", $P4084
.annotate 'line', 1448
    find_lex $P4086, "$module"
    unless_null $P4086, vivify_2039
    new $P4086, "Undef"
  vivify_2039:
    defined $I4087, $P4086
    unless $I4087, if_4085_end
.annotate 'line', 1449
    find_lex $P4088, "$module"
    unless_null $P4088, vivify_2040
    new $P4088, "Undef"
  vivify_2040:
    "import_HOW_exports"($P4088)
  if_4085_end:
.annotate 'line', 1451
    find_lex $P4089, "$/"
    get_hll_global $P4090, "GLOBAL"
    nqp_get_package_through_who $P4091, $P4090, "PAST"
    get_who $P4092, $P4091
    set $P4093, $P4092["Stmts"]
    $P4094 = $P4093."new"()
    $P4095 = $P4089."!make"($P4094)
.annotate 'line', 1446
    .return ($P4095)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "statement_control:sym<if>" :anon :subid("482_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4097
    .param pmc param_4098
.annotate 'line', 1454
    .const 'Sub' $P4126 = "483_1307835824.98345" 
    capture_lex $P4126
    .lex "self", param_4097
    .lex "$/", param_4098
.annotate 'line', 1455
    new $P4099, "Undef"
    .lex "$count", $P4099
.annotate 'line', 1456
    new $P4100, "Undef"
    .lex "$past", $P4100
.annotate 'line', 1455
    find_lex $P4101, "$/"
    unless_null $P4101, vivify_2041
    $P4101 = root_new ['parrot';'Hash']
  vivify_2041:
    set $P4102, $P4101["xblock"]
    unless_null $P4102, vivify_2042
    new $P4102, "Undef"
  vivify_2042:
    set $N4103, $P4102
    new $P4104, 'Float'
    set $P4104, $N4103
    sub $P4105, $P4104, 1
    store_lex "$count", $P4105
.annotate 'line', 1456
    find_lex $P4106, "$count"
    unless_null $P4106, vivify_2043
    new $P4106, "Undef"
  vivify_2043:
    set $I4107, $P4106
    find_lex $P4108, "$/"
    unless_null $P4108, vivify_2044
    $P4108 = root_new ['parrot';'Hash']
  vivify_2044:
    set $P4109, $P4108["xblock"]
    unless_null $P4109, vivify_2045
    $P4109 = root_new ['parrot';'ResizablePMCArray']
  vivify_2045:
    set $P4110, $P4109[$I4107]
    unless_null $P4110, vivify_2046
    new $P4110, "Undef"
  vivify_2046:
    $P4111 = $P4110."ast"()
    $P4112 = "xblock_immediate"($P4111)
    store_lex "$past", $P4112
.annotate 'line', 1457
    find_lex $P4114, "$/"
    unless_null $P4114, vivify_2047
    $P4114 = root_new ['parrot';'Hash']
  vivify_2047:
    set $P4115, $P4114["else"]
    unless_null $P4115, vivify_2048
    new $P4115, "Undef"
  vivify_2048:
    unless $P4115, if_4113_end
.annotate 'line', 1458
    find_lex $P4116, "$past"
    unless_null $P4116, vivify_2049
    new $P4116, "Undef"
  vivify_2049:
    find_lex $P4117, "$/"
    unless_null $P4117, vivify_2050
    $P4117 = root_new ['parrot';'Hash']
  vivify_2050:
    set $P4118, $P4117["else"]
    unless_null $P4118, vivify_2051
    $P4118 = root_new ['parrot';'ResizablePMCArray']
  vivify_2051:
    set $P4119, $P4118[0]
    unless_null $P4119, vivify_2052
    new $P4119, "Undef"
  vivify_2052:
    $P4120 = $P4119."ast"()
    $P4121 = "block_immediate"($P4120)
    $P4116."push"($P4121)
  if_4113_end:
.annotate 'line', 1461
    new $P4142, 'ExceptionHandler'
    set_label $P4142, loop4141_handler
    $P4142."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P4142
  loop4141_test:
    find_lex $P4122, "$count"
    unless_null $P4122, vivify_2053
    new $P4122, "Undef"
  vivify_2053:
    set $N4123, $P4122
    isgt $I4124, $N4123, 0.0
    unless $I4124, loop4141_done
  loop4141_redo:
    .const 'Sub' $P4126 = "483_1307835824.98345" 
    capture_lex $P4126
    $P4126()
  loop4141_next:
    goto loop4141_test
  loop4141_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P4143, exception, 'type'
    eq $P4143, .CONTROL_LOOP_NEXT, loop4141_next
    eq $P4143, .CONTROL_LOOP_REDO, loop4141_redo
  loop4141_done:
    pop_eh 
.annotate 'line', 1467
    find_lex $P4144, "$/"
    find_lex $P4145, "$past"
    unless_null $P4145, vivify_2062
    new $P4145, "Undef"
  vivify_2062:
    $P4146 = $P4144."!make"($P4145)
.annotate 'line', 1454
    .return ($P4146)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block4125"  :anon :subid("483_1307835824.98345") :outer("482_1307835824.98345")
.annotate 'line', 1463
    new $P4127, "Undef"
    .lex "$else", $P4127
.annotate 'line', 1461
    find_lex $P4128, "$count"
    unless_null $P4128, vivify_2054
    new $P4128, "Undef"
  vivify_2054:
    clone $P4129, $P4128
    dec $P4128
.annotate 'line', 1463
    find_lex $P4130, "$past"
    unless_null $P4130, vivify_2055
    new $P4130, "Undef"
  vivify_2055:
    store_lex "$else", $P4130
.annotate 'line', 1464
    find_lex $P4131, "$count"
    unless_null $P4131, vivify_2056
    new $P4131, "Undef"
  vivify_2056:
    set $I4132, $P4131
    find_lex $P4133, "$/"
    unless_null $P4133, vivify_2057
    $P4133 = root_new ['parrot';'Hash']
  vivify_2057:
    set $P4134, $P4133["xblock"]
    unless_null $P4134, vivify_2058
    $P4134 = root_new ['parrot';'ResizablePMCArray']
  vivify_2058:
    set $P4135, $P4134[$I4132]
    unless_null $P4135, vivify_2059
    new $P4135, "Undef"
  vivify_2059:
    $P4136 = $P4135."ast"()
    $P4137 = "xblock_immediate"($P4136)
    store_lex "$past", $P4137
.annotate 'line', 1465
    find_lex $P4138, "$past"
    unless_null $P4138, vivify_2060
    new $P4138, "Undef"
  vivify_2060:
    find_lex $P4139, "$else"
    unless_null $P4139, vivify_2061
    new $P4139, "Undef"
  vivify_2061:
    $P4140 = $P4138."push"($P4139)
.annotate 'line', 1461
    .return ($P4140)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<unless>" :anon :subid("484_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4148
    .param pmc param_4149
.annotate 'line', 1470
    .lex "self", param_4148
    .lex "$/", param_4149
.annotate 'line', 1471
    new $P4150, "Undef"
    .lex "$past", $P4150
    find_lex $P4151, "$/"
    unless_null $P4151, vivify_2063
    $P4151 = root_new ['parrot';'Hash']
  vivify_2063:
    set $P4152, $P4151["xblock"]
    unless_null $P4152, vivify_2064
    new $P4152, "Undef"
  vivify_2064:
    $P4153 = $P4152."ast"()
    $P4154 = "xblock_immediate"($P4153)
    store_lex "$past", $P4154
.annotate 'line', 1472
    find_lex $P4155, "$past"
    unless_null $P4155, vivify_2065
    new $P4155, "Undef"
  vivify_2065:
    $P4155."pasttype"("unless")
.annotate 'line', 1473
    find_lex $P4156, "$/"
    find_lex $P4157, "$past"
    unless_null $P4157, vivify_2066
    new $P4157, "Undef"
  vivify_2066:
    $P4158 = $P4156."!make"($P4157)
.annotate 'line', 1470
    .return ($P4158)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<while>" :anon :subid("485_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4160
    .param pmc param_4161
.annotate 'line', 1476
    .lex "self", param_4160
    .lex "$/", param_4161
.annotate 'line', 1477
    new $P4162, "Undef"
    .lex "$past", $P4162
    find_lex $P4163, "$/"
    unless_null $P4163, vivify_2067
    $P4163 = root_new ['parrot';'Hash']
  vivify_2067:
    set $P4164, $P4163["xblock"]
    unless_null $P4164, vivify_2068
    new $P4164, "Undef"
  vivify_2068:
    $P4165 = $P4164."ast"()
    $P4166 = "xblock_immediate"($P4165)
    store_lex "$past", $P4166
.annotate 'line', 1478
    find_lex $P4167, "$past"
    unless_null $P4167, vivify_2069
    new $P4167, "Undef"
  vivify_2069:
    find_lex $P4168, "$/"
    unless_null $P4168, vivify_2070
    $P4168 = root_new ['parrot';'Hash']
  vivify_2070:
    set $P4169, $P4168["sym"]
    unless_null $P4169, vivify_2071
    new $P4169, "Undef"
  vivify_2071:
    set $S4170, $P4169
    $P4167."pasttype"($S4170)
.annotate 'line', 1479
    find_lex $P4171, "$/"
    find_lex $P4172, "$past"
    unless_null $P4172, vivify_2072
    new $P4172, "Undef"
  vivify_2072:
    $P4173 = $P4171."!make"($P4172)
.annotate 'line', 1476
    .return ($P4173)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<repeat>" :anon :subid("486_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4175
    .param pmc param_4176
.annotate 'line', 1482
    .lex "self", param_4175
    .lex "$/", param_4176
.annotate 'line', 1483
    new $P4177, "Undef"
    .lex "$pasttype", $P4177
.annotate 'line', 1484
    new $P4178, "Undef"
    .lex "$past", $P4178
.annotate 'line', 1483
    new $P4179, "String"
    assign $P4179, "repeat_"
    find_lex $P4180, "$/"
    unless_null $P4180, vivify_2073
    $P4180 = root_new ['parrot';'Hash']
  vivify_2073:
    set $P4181, $P4180["wu"]
    unless_null $P4181, vivify_2074
    new $P4181, "Undef"
  vivify_2074:
    set $S4182, $P4181
    concat $P4183, $P4179, $S4182
    store_lex "$pasttype", $P4183
    find_lex $P4184, "$past"
    unless_null $P4184, vivify_2075
    new $P4184, "Undef"
  vivify_2075:
.annotate 'line', 1485
    find_lex $P4186, "$/"
    unless_null $P4186, vivify_2076
    $P4186 = root_new ['parrot';'Hash']
  vivify_2076:
    set $P4187, $P4186["xblock"]
    unless_null $P4187, vivify_2077
    new $P4187, "Undef"
  vivify_2077:
    if $P4187, if_4185
.annotate 'line', 1490
    get_hll_global $P4194, "GLOBAL"
    nqp_get_package_through_who $P4195, $P4194, "PAST"
    get_who $P4196, $P4195
    set $P4197, $P4196["Op"]
    find_lex $P4198, "$/"
    unless_null $P4198, vivify_2078
    $P4198 = root_new ['parrot';'Hash']
  vivify_2078:
    set $P4199, $P4198["EXPR"]
    unless_null $P4199, vivify_2079
    new $P4199, "Undef"
  vivify_2079:
    $P4200 = $P4199."ast"()
    find_lex $P4201, "$/"
    unless_null $P4201, vivify_2080
    $P4201 = root_new ['parrot';'Hash']
  vivify_2080:
    set $P4202, $P4201["pblock"]
    unless_null $P4202, vivify_2081
    new $P4202, "Undef"
  vivify_2081:
    $P4203 = $P4202."ast"()
    $P4204 = "block_immediate"($P4203)
    find_lex $P4205, "$pasttype"
    unless_null $P4205, vivify_2082
    new $P4205, "Undef"
  vivify_2082:
    find_lex $P4206, "$/"
    unless_null $P4206, vivify_2083
    new $P4206, "Undef"
  vivify_2083:
    $P4207 = $P4197."new"($P4200, $P4204, $P4205 :named("pasttype"), $P4206 :named("node"))
    store_lex "$past", $P4207
.annotate 'line', 1489
    goto if_4185_end
  if_4185:
.annotate 'line', 1486
    find_lex $P4188, "$/"
    unless_null $P4188, vivify_2084
    $P4188 = root_new ['parrot';'Hash']
  vivify_2084:
    set $P4189, $P4188["xblock"]
    unless_null $P4189, vivify_2085
    new $P4189, "Undef"
  vivify_2085:
    $P4190 = $P4189."ast"()
    $P4191 = "xblock_immediate"($P4190)
    store_lex "$past", $P4191
.annotate 'line', 1487
    find_lex $P4192, "$past"
    unless_null $P4192, vivify_2086
    new $P4192, "Undef"
  vivify_2086:
    find_lex $P4193, "$pasttype"
    unless_null $P4193, vivify_2087
    new $P4193, "Undef"
  vivify_2087:
    $P4192."pasttype"($P4193)
  if_4185_end:
.annotate 'line', 1493
    find_lex $P4208, "$/"
    find_lex $P4209, "$past"
    unless_null $P4209, vivify_2088
    new $P4209, "Undef"
  vivify_2088:
    $P4210 = $P4208."!make"($P4209)
.annotate 'line', 1482
    .return ($P4210)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<for>" :anon :subid("487_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4212
    .param pmc param_4213
.annotate 'line', 1496
    .lex "self", param_4212
    .lex "$/", param_4213
.annotate 'line', 1497
    new $P4214, "Undef"
    .lex "$past", $P4214
.annotate 'line', 1499
    new $P4215, "Undef"
    .lex "$block", $P4215
.annotate 'line', 1497
    find_lex $P4216, "$/"
    unless_null $P4216, vivify_2089
    $P4216 = root_new ['parrot';'Hash']
  vivify_2089:
    set $P4217, $P4216["xblock"]
    unless_null $P4217, vivify_2090
    new $P4217, "Undef"
  vivify_2090:
    $P4218 = $P4217."ast"()
    store_lex "$past", $P4218
.annotate 'line', 1498
    find_lex $P4219, "$past"
    unless_null $P4219, vivify_2091
    new $P4219, "Undef"
  vivify_2091:
    $P4219."pasttype"("for")
.annotate 'line', 1499
    find_lex $P4220, "$past"
    unless_null $P4220, vivify_2092
    $P4220 = root_new ['parrot';'ResizablePMCArray']
  vivify_2092:
    set $P4221, $P4220[1]
    unless_null $P4221, vivify_2093
    new $P4221, "Undef"
  vivify_2093:
    store_lex "$block", $P4221
.annotate 'line', 1500
    find_lex $P4223, "$block"
    unless_null $P4223, vivify_2094
    new $P4223, "Undef"
  vivify_2094:
    $P4224 = $P4223."arity"()
    if $P4224, unless_4222_end
.annotate 'line', 1501
    find_lex $P4225, "$block"
    unless_null $P4225, vivify_2095
    $P4225 = root_new ['parrot';'ResizablePMCArray']
  vivify_2095:
    set $P4226, $P4225[0]
    unless_null $P4226, vivify_2096
    new $P4226, "Undef"
  vivify_2096:
    get_hll_global $P4227, "GLOBAL"
    nqp_get_package_through_who $P4228, $P4227, "PAST"
    get_who $P4229, $P4228
    set $P4230, $P4229["Var"]
    $P4231 = $P4230."new"("$_" :named("name"), "parameter" :named("scope"))
    $P4226."push"($P4231)
.annotate 'line', 1502
    find_lex $P4232, "$block"
    unless_null $P4232, vivify_2097
    new $P4232, "Undef"
  vivify_2097:
    $P4232."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1503
    find_lex $P4233, "$block"
    unless_null $P4233, vivify_2098
    new $P4233, "Undef"
  vivify_2098:
    $P4233."arity"(1)
  unless_4222_end:
.annotate 'line', 1505
    find_lex $P4234, "$block"
    unless_null $P4234, vivify_2099
    new $P4234, "Undef"
  vivify_2099:
    $P4234."blocktype"("immediate")
.annotate 'line', 1506
    find_lex $P4235, "$/"
    find_lex $P4236, "$past"
    unless_null $P4236, vivify_2100
    new $P4236, "Undef"
  vivify_2100:
    $P4237 = $P4235."!make"($P4236)
.annotate 'line', 1496
    .return ($P4237)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<CATCH>" :anon :subid("488_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4239
    .param pmc param_4240
.annotate 'line', 1509
    .lex "self", param_4239
    .lex "$/", param_4240
.annotate 'line', 1510
    new $P4241, "Undef"
    .lex "$block", $P4241
    find_lex $P4242, "$/"
    unless_null $P4242, vivify_2101
    $P4242 = root_new ['parrot';'Hash']
  vivify_2101:
    set $P4243, $P4242["block"]
    unless_null $P4243, vivify_2102
    new $P4243, "Undef"
  vivify_2102:
    $P4244 = $P4243."ast"()
    store_lex "$block", $P4244
.annotate 'line', 1511
    find_lex $P4245, "$/"
    unless_null $P4245, vivify_2103
    new $P4245, "Undef"
  vivify_2103:
    find_lex $P4246, "$block"
    unless_null $P4246, vivify_2104
    new $P4246, "Undef"
  vivify_2104:
    "push_block_handler"($P4245, $P4246)
.annotate 'line', 1512
    find_lex $P4247, "$?PACKAGE"
    get_who $P4248, $P4247
    set $P4249, $P4248["@BLOCK"]
    unless_null $P4249, vivify_2105
    $P4249 = root_new ['parrot';'ResizablePMCArray']
  vivify_2105:
    set $P4250, $P4249[0]
    unless_null $P4250, vivify_2106
    new $P4250, "Undef"
  vivify_2106:
    $P4251 = $P4250."handlers"()
    set $P4252, $P4251[0]
    unless_null $P4252, vivify_2107
    new $P4252, "Undef"
  vivify_2107:
    $P4252."handle_types_except"("CONTROL")
.annotate 'line', 1513
    find_lex $P4253, "$/"
    get_hll_global $P4254, "GLOBAL"
    nqp_get_package_through_who $P4255, $P4254, "PAST"
    get_who $P4256, $P4255
    set $P4257, $P4256["Stmts"]
    find_lex $P4258, "$/"
    unless_null $P4258, vivify_2108
    new $P4258, "Undef"
  vivify_2108:
    $P4259 = $P4257."new"($P4258 :named("node"))
    $P4260 = $P4253."!make"($P4259)
.annotate 'line', 1509
    .return ($P4260)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_control:sym<CONTROL>" :anon :subid("489_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4262
    .param pmc param_4263
.annotate 'line', 1516
    .lex "self", param_4262
    .lex "$/", param_4263
.annotate 'line', 1517
    new $P4264, "Undef"
    .lex "$block", $P4264
    find_lex $P4265, "$/"
    unless_null $P4265, vivify_2109
    $P4265 = root_new ['parrot';'Hash']
  vivify_2109:
    set $P4266, $P4265["block"]
    unless_null $P4266, vivify_2110
    new $P4266, "Undef"
  vivify_2110:
    $P4267 = $P4266."ast"()
    store_lex "$block", $P4267
.annotate 'line', 1518
    find_lex $P4268, "$/"
    unless_null $P4268, vivify_2111
    new $P4268, "Undef"
  vivify_2111:
    find_lex $P4269, "$block"
    unless_null $P4269, vivify_2112
    new $P4269, "Undef"
  vivify_2112:
    "push_block_handler"($P4268, $P4269)
.annotate 'line', 1519
    find_lex $P4270, "$?PACKAGE"
    get_who $P4271, $P4270
    set $P4272, $P4271["@BLOCK"]
    unless_null $P4272, vivify_2113
    $P4272 = root_new ['parrot';'ResizablePMCArray']
  vivify_2113:
    set $P4273, $P4272[0]
    unless_null $P4273, vivify_2114
    new $P4273, "Undef"
  vivify_2114:
    $P4274 = $P4273."handlers"()
    set $P4275, $P4274[0]
    unless_null $P4275, vivify_2115
    new $P4275, "Undef"
  vivify_2115:
    $P4275."handle_types"("CONTROL")
.annotate 'line', 1520
    find_lex $P4276, "$/"
    get_hll_global $P4277, "GLOBAL"
    nqp_get_package_through_who $P4278, $P4277, "PAST"
    get_who $P4279, $P4278
    set $P4280, $P4279["Stmts"]
    find_lex $P4281, "$/"
    unless_null $P4281, vivify_2116
    new $P4281, "Undef"
  vivify_2116:
    $P4282 = $P4280."new"($P4281 :named("node"))
    $P4283 = $P4276."!make"($P4282)
.annotate 'line', 1516
    .return ($P4283)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_prefix:sym<INIT>" :anon :subid("490_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4286
    .param pmc param_4287
.annotate 'line', 1560
    .lex "self", param_4286
    .lex "$/", param_4287
.annotate 'line', 1561
    find_lex $P4288, "$?PACKAGE"
    get_who $P4289, $P4288
    set $P4290, $P4289["@BLOCK"]
    unless_null $P4290, vivify_2117
    $P4290 = root_new ['parrot';'ResizablePMCArray']
  vivify_2117:
    set $P4291, $P4290[0]
    unless_null $P4291, vivify_2118
    new $P4291, "Undef"
  vivify_2118:
    find_lex $P4292, "$/"
    unless_null $P4292, vivify_2119
    $P4292 = root_new ['parrot';'Hash']
  vivify_2119:
    set $P4293, $P4292["blorst"]
    unless_null $P4293, vivify_2120
    new $P4293, "Undef"
  vivify_2120:
    $P4294 = $P4293."ast"()
    $P4291."push"($P4294)
.annotate 'line', 1562
    find_lex $P4295, "$/"
    get_hll_global $P4296, "GLOBAL"
    nqp_get_package_through_who $P4297, $P4296, "PAST"
    get_who $P4298, $P4297
    set $P4299, $P4298["Stmts"]
    $P4300 = $P4299."new"()
    $P4301 = $P4295."!make"($P4300)
.annotate 'line', 1560
    .return ($P4301)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_prefix:sym<try>" :anon :subid("491_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4303
    .param pmc param_4304
.annotate 'line', 1565
    .lex "self", param_4303
    .lex "$/", param_4304
.annotate 'line', 1566
    new $P4305, "Undef"
    .lex "$past", $P4305
    find_lex $P4306, "$/"
    unless_null $P4306, vivify_2121
    $P4306 = root_new ['parrot';'Hash']
  vivify_2121:
    set $P4307, $P4306["blorst"]
    unless_null $P4307, vivify_2122
    new $P4307, "Undef"
  vivify_2122:
    $P4308 = $P4307."ast"()
    store_lex "$past", $P4308
.annotate 'line', 1567
    get_hll_global $P4310, "GLOBAL"
    nqp_get_package_through_who $P4311, $P4310, "PAST"
    get_who $P4312, $P4311
    set $P4313, $P4312["Block"]
    find_lex $P4314, "$past"
    unless_null $P4314, vivify_2123
    new $P4314, "Undef"
  vivify_2123:
    $P4315 = $P4313."ACCEPTS"($P4314)
    if $P4315, unless_4309_end
.annotate 'line', 1568
    get_hll_global $P4316, "GLOBAL"
    nqp_get_package_through_who $P4317, $P4316, "PAST"
    get_who $P4318, $P4317
    set $P4319, $P4318["Block"]
    find_lex $P4320, "$past"
    unless_null $P4320, vivify_2124
    new $P4320, "Undef"
  vivify_2124:
    find_lex $P4321, "$/"
    unless_null $P4321, vivify_2125
    new $P4321, "Undef"
  vivify_2125:
    $P4322 = $P4319."new"($P4320, "immediate" :named("blocktype"), $P4321 :named("node"))
    store_lex "$past", $P4322
  unless_4309_end:
.annotate 'line', 1570
    find_lex $P4324, "$past"
    unless_null $P4324, vivify_2126
    new $P4324, "Undef"
  vivify_2126:
    $P4325 = $P4324."handlers"()
    if $P4325, unless_4323_end
.annotate 'line', 1571
    find_lex $P4326, "$past"
    unless_null $P4326, vivify_2127
    new $P4326, "Undef"
  vivify_2127:
    get_hll_global $P4327, "GLOBAL"
    nqp_get_package_through_who $P4328, $P4327, "PAST"
    get_who $P4329, $P4328
    set $P4330, $P4329["Control"]
.annotate 'line', 1573
    get_hll_global $P4331, "GLOBAL"
    nqp_get_package_through_who $P4332, $P4331, "PAST"
    get_who $P4333, $P4332
    set $P4334, $P4333["Stmts"]
.annotate 'line', 1574
    get_hll_global $P4335, "GLOBAL"
    nqp_get_package_through_who $P4336, $P4335, "PAST"
    get_who $P4337, $P4336
    set $P4338, $P4337["Op"]
.annotate 'line', 1575
    get_hll_global $P4339, "GLOBAL"
    nqp_get_package_through_who $P4340, $P4339, "PAST"
    get_who $P4341, $P4340
    set $P4342, $P4341["Var"]
.annotate 'line', 1576
    get_hll_global $P4343, "GLOBAL"
    nqp_get_package_through_who $P4344, $P4343, "PAST"
    get_who $P4345, $P4344
    set $P4346, $P4345["Var"]
    $P4347 = $P4346."new"("register" :named("scope"), "exception" :named("name"))
    $P4348 = $P4342."new"($P4347, "handled", "keyed" :named("scope"))
.annotate 'line', 1575
    $P4349 = $P4338."new"($P4348, 1, "bind_6model" :named("pasttype"))
.annotate 'line', 1574
    $P4350 = $P4334."new"($P4349)
.annotate 'line', 1573
    $P4351 = $P4330."new"($P4350, "CONTROL" :named("handle_types_except"))
.annotate 'line', 1571
    new $P4352, "ResizablePMCArray"
    push $P4352, $P4351
    $P4326."handlers"($P4352)
  unless_4323_end:
.annotate 'line', 1585
    find_lex $P4353, "$/"
    find_lex $P4354, "$past"
    unless_null $P4354, vivify_2128
    new $P4354, "Undef"
  vivify_2128:
    $P4355 = $P4353."!make"($P4354)
.annotate 'line', 1565
    .return ($P4355)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "blorst" :anon :subid("492_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4357
    .param pmc param_4358
.annotate 'line', 1588
    .lex "self", param_4357
    .lex "$/", param_4358
.annotate 'line', 1589
    find_lex $P4359, "$/"
.annotate 'line', 1590
    find_lex $P4362, "$/"
    unless_null $P4362, vivify_2129
    $P4362 = root_new ['parrot';'Hash']
  vivify_2129:
    set $P4363, $P4362["block"]
    unless_null $P4363, vivify_2130
    new $P4363, "Undef"
  vivify_2130:
    if $P4363, if_4361
.annotate 'line', 1591
    find_lex $P4368, "$/"
    unless_null $P4368, vivify_2131
    $P4368 = root_new ['parrot';'Hash']
  vivify_2131:
    set $P4369, $P4368["statement"]
    unless_null $P4369, vivify_2132
    new $P4369, "Undef"
  vivify_2132:
    $P4370 = $P4369."ast"()
    set $P4360, $P4370
.annotate 'line', 1590
    goto if_4361_end
  if_4361:
    find_lex $P4364, "$/"
    unless_null $P4364, vivify_2133
    $P4364 = root_new ['parrot';'Hash']
  vivify_2133:
    set $P4365, $P4364["block"]
    unless_null $P4365, vivify_2134
    new $P4365, "Undef"
  vivify_2134:
    $P4366 = $P4365."ast"()
    $P4367 = "block_immediate"($P4366)
    set $P4360, $P4367
  if_4361_end:
    $P4371 = $P4359."!make"($P4360)
.annotate 'line', 1588
    .return ($P4371)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_cond:sym<if>" :anon :subid("493_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4373
    .param pmc param_4374
.annotate 'line', 1596
    .lex "self", param_4373
    .lex "$/", param_4374
    find_lex $P4375, "$/"
    find_lex $P4376, "$/"
    unless_null $P4376, vivify_2135
    $P4376 = root_new ['parrot';'Hash']
  vivify_2135:
    set $P4377, $P4376["cond"]
    unless_null $P4377, vivify_2136
    new $P4377, "Undef"
  vivify_2136:
    $P4378 = $P4377."ast"()
    $P4379 = $P4375."!make"($P4378)
    .return ($P4379)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_cond:sym<unless>" :anon :subid("494_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4381
    .param pmc param_4382
.annotate 'line', 1597
    .lex "self", param_4381
    .lex "$/", param_4382
    find_lex $P4383, "$/"
    find_lex $P4384, "$/"
    unless_null $P4384, vivify_2137
    $P4384 = root_new ['parrot';'Hash']
  vivify_2137:
    set $P4385, $P4384["cond"]
    unless_null $P4385, vivify_2138
    new $P4385, "Undef"
  vivify_2138:
    $P4386 = $P4385."ast"()
    $P4387 = $P4383."!make"($P4386)
    .return ($P4387)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_loop:sym<while>" :anon :subid("495_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4389
    .param pmc param_4390
.annotate 'line', 1599
    .lex "self", param_4389
    .lex "$/", param_4390
    find_lex $P4391, "$/"
    find_lex $P4392, "$/"
    unless_null $P4392, vivify_2139
    $P4392 = root_new ['parrot';'Hash']
  vivify_2139:
    set $P4393, $P4392["cond"]
    unless_null $P4393, vivify_2140
    new $P4393, "Undef"
  vivify_2140:
    $P4394 = $P4393."ast"()
    $P4395 = $P4391."!make"($P4394)
    .return ($P4395)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "statement_mod_loop:sym<until>" :anon :subid("496_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4397
    .param pmc param_4398
.annotate 'line', 1600
    .lex "self", param_4397
    .lex "$/", param_4398
    find_lex $P4399, "$/"
    find_lex $P4400, "$/"
    unless_null $P4400, vivify_2141
    $P4400 = root_new ['parrot';'Hash']
  vivify_2141:
    set $P4401, $P4400["cond"]
    unless_null $P4401, vivify_2142
    new $P4401, "Undef"
  vivify_2142:
    $P4402 = $P4401."ast"()
    $P4403 = $P4399."!make"($P4402)
    .return ($P4403)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<fatarrow>" :anon :subid("497_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4405
    .param pmc param_4406
.annotate 'line', 1604
    .lex "self", param_4405
    .lex "$/", param_4406
    find_lex $P4407, "$/"
    find_lex $P4408, "$/"
    unless_null $P4408, vivify_2143
    $P4408 = root_new ['parrot';'Hash']
  vivify_2143:
    set $P4409, $P4408["fatarrow"]
    unless_null $P4409, vivify_2144
    new $P4409, "Undef"
  vivify_2144:
    $P4410 = $P4409."ast"()
    $P4411 = $P4407."!make"($P4410)
    .return ($P4411)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<colonpair>" :anon :subid("498_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4413
    .param pmc param_4414
.annotate 'line', 1605
    .lex "self", param_4413
    .lex "$/", param_4414
    find_lex $P4415, "$/"
    find_lex $P4416, "$/"
    unless_null $P4416, vivify_2145
    $P4416 = root_new ['parrot';'Hash']
  vivify_2145:
    set $P4417, $P4416["colonpair"]
    unless_null $P4417, vivify_2146
    new $P4417, "Undef"
  vivify_2146:
    $P4418 = $P4417."ast"()
    $P4419 = $P4415."!make"($P4418)
    .return ($P4419)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<variable>" :anon :subid("499_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4421
    .param pmc param_4422
.annotate 'line', 1606
    .lex "self", param_4421
    .lex "$/", param_4422
    find_lex $P4423, "$/"
    find_lex $P4424, "$/"
    unless_null $P4424, vivify_2147
    $P4424 = root_new ['parrot';'Hash']
  vivify_2147:
    set $P4425, $P4424["variable"]
    unless_null $P4425, vivify_2148
    new $P4425, "Undef"
  vivify_2148:
    $P4426 = $P4425."ast"()
    $P4427 = $P4423."!make"($P4426)
    .return ($P4427)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<package_declarator>" :anon :subid("500_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4429
    .param pmc param_4430
.annotate 'line', 1607
    .lex "self", param_4429
    .lex "$/", param_4430
    find_lex $P4431, "$/"
    find_lex $P4432, "$/"
    unless_null $P4432, vivify_2149
    $P4432 = root_new ['parrot';'Hash']
  vivify_2149:
    set $P4433, $P4432["package_declarator"]
    unless_null $P4433, vivify_2150
    new $P4433, "Undef"
  vivify_2150:
    $P4434 = $P4433."ast"()
    $P4435 = $P4431."!make"($P4434)
    .return ($P4435)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<scope_declarator>" :anon :subid("501_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4437
    .param pmc param_4438
.annotate 'line', 1608
    .lex "self", param_4437
    .lex "$/", param_4438
    find_lex $P4439, "$/"
    find_lex $P4440, "$/"
    unless_null $P4440, vivify_2151
    $P4440 = root_new ['parrot';'Hash']
  vivify_2151:
    set $P4441, $P4440["scope_declarator"]
    unless_null $P4441, vivify_2152
    new $P4441, "Undef"
  vivify_2152:
    $P4442 = $P4441."ast"()
    $P4443 = $P4439."!make"($P4442)
    .return ($P4443)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<routine_declarator>" :anon :subid("502_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4445
    .param pmc param_4446
.annotate 'line', 1609
    .lex "self", param_4445
    .lex "$/", param_4446
    find_lex $P4447, "$/"
    find_lex $P4448, "$/"
    unless_null $P4448, vivify_2153
    $P4448 = root_new ['parrot';'Hash']
  vivify_2153:
    set $P4449, $P4448["routine_declarator"]
    unless_null $P4449, vivify_2154
    new $P4449, "Undef"
  vivify_2154:
    $P4450 = $P4449."ast"()
    $P4451 = $P4447."!make"($P4450)
    .return ($P4451)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<regex_declarator>" :anon :subid("503_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4453
    .param pmc param_4454
.annotate 'line', 1610
    .lex "self", param_4453
    .lex "$/", param_4454
    find_lex $P4455, "$/"
    find_lex $P4456, "$/"
    unless_null $P4456, vivify_2155
    $P4456 = root_new ['parrot';'Hash']
  vivify_2155:
    set $P4457, $P4456["regex_declarator"]
    unless_null $P4457, vivify_2156
    new $P4457, "Undef"
  vivify_2156:
    $P4458 = $P4457."ast"()
    $P4459 = $P4455."!make"($P4458)
    .return ($P4459)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<statement_prefix>" :anon :subid("504_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4461
    .param pmc param_4462
.annotate 'line', 1611
    .lex "self", param_4461
    .lex "$/", param_4462
    find_lex $P4463, "$/"
    find_lex $P4464, "$/"
    unless_null $P4464, vivify_2157
    $P4464 = root_new ['parrot';'Hash']
  vivify_2157:
    set $P4465, $P4464["statement_prefix"]
    unless_null $P4465, vivify_2158
    new $P4465, "Undef"
  vivify_2158:
    $P4466 = $P4465."ast"()
    $P4467 = $P4463."!make"($P4466)
    .return ($P4467)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<lambda>" :anon :subid("505_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4469
    .param pmc param_4470
.annotate 'line', 1612
    .lex "self", param_4469
    .lex "$/", param_4470
    find_lex $P4471, "$/"
    find_lex $P4472, "$/"
    unless_null $P4472, vivify_2159
    $P4472 = root_new ['parrot';'Hash']
  vivify_2159:
    set $P4473, $P4472["pblock"]
    unless_null $P4473, vivify_2160
    new $P4473, "Undef"
  vivify_2160:
    $P4474 = $P4473."ast"()
    $P4475 = $P4471."!make"($P4474)
    .return ($P4475)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "fatarrow" :anon :subid("506_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4477
    .param pmc param_4478
.annotate 'line', 1614
    .lex "self", param_4477
    .lex "$/", param_4478
.annotate 'line', 1615
    new $P4479, "Undef"
    .lex "$past", $P4479
    find_lex $P4480, "$/"
    unless_null $P4480, vivify_2161
    $P4480 = root_new ['parrot';'Hash']
  vivify_2161:
    set $P4481, $P4480["val"]
    unless_null $P4481, vivify_2162
    new $P4481, "Undef"
  vivify_2162:
    $P4482 = $P4481."ast"()
    store_lex "$past", $P4482
.annotate 'line', 1616
    find_lex $P4483, "$past"
    unless_null $P4483, vivify_2163
    new $P4483, "Undef"
  vivify_2163:
    find_lex $P4484, "$/"
    unless_null $P4484, vivify_2164
    $P4484 = root_new ['parrot';'Hash']
  vivify_2164:
    set $P4485, $P4484["key"]
    unless_null $P4485, vivify_2165
    new $P4485, "Undef"
  vivify_2165:
    $P4486 = $P4485."Str"()
    $P4483."named"($P4486)
.annotate 'line', 1617
    find_lex $P4487, "$/"
    find_lex $P4488, "$past"
    unless_null $P4488, vivify_2166
    new $P4488, "Undef"
  vivify_2166:
    $P4489 = $P4487."!make"($P4488)
.annotate 'line', 1614
    .return ($P4489)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "colonpair" :anon :subid("507_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4491
    .param pmc param_4492
.annotate 'line', 1620
    .lex "self", param_4491
    .lex "$/", param_4492
.annotate 'line', 1621
    new $P4493, "Undef"
    .lex "$past", $P4493
.annotate 'line', 1622
    find_lex $P4496, "$/"
    unless_null $P4496, vivify_2167
    $P4496 = root_new ['parrot';'Hash']
  vivify_2167:
    set $P4497, $P4496["circumfix"]
    unless_null $P4497, vivify_2168
    new $P4497, "Undef"
  vivify_2168:
    if $P4497, if_4495
.annotate 'line', 1623
    get_hll_global $P4502, "GLOBAL"
    nqp_get_package_through_who $P4503, $P4502, "PAST"
    get_who $P4504, $P4503
    set $P4505, $P4504["Val"]
    find_lex $P4506, "$/"
    unless_null $P4506, vivify_2169
    $P4506 = root_new ['parrot';'Hash']
  vivify_2169:
    set $P4507, $P4506["not"]
    unless_null $P4507, vivify_2170
    new $P4507, "Undef"
  vivify_2170:
    isfalse $I4508, $P4507
    $P4509 = $P4505."new"($I4508 :named("value"))
    set $P4494, $P4509
.annotate 'line', 1622
    goto if_4495_end
  if_4495:
    find_lex $P4498, "$/"
    unless_null $P4498, vivify_2171
    $P4498 = root_new ['parrot';'Hash']
  vivify_2171:
    set $P4499, $P4498["circumfix"]
    unless_null $P4499, vivify_2172
    $P4499 = root_new ['parrot';'ResizablePMCArray']
  vivify_2172:
    set $P4500, $P4499[0]
    unless_null $P4500, vivify_2173
    new $P4500, "Undef"
  vivify_2173:
    $P4501 = $P4500."ast"()
    set $P4494, $P4501
  if_4495_end:
    store_lex "$past", $P4494
.annotate 'line', 1624
    find_lex $P4510, "$past"
    unless_null $P4510, vivify_2174
    new $P4510, "Undef"
  vivify_2174:
    find_lex $P4511, "$/"
    unless_null $P4511, vivify_2175
    $P4511 = root_new ['parrot';'Hash']
  vivify_2175:
    set $P4512, $P4511["identifier"]
    unless_null $P4512, vivify_2176
    new $P4512, "Undef"
  vivify_2176:
    set $S4513, $P4512
    $P4510."named"($S4513)
.annotate 'line', 1625
    find_lex $P4514, "$/"
    find_lex $P4515, "$past"
    unless_null $P4515, vivify_2177
    new $P4515, "Undef"
  vivify_2177:
    $P4516 = $P4514."!make"($P4515)
.annotate 'line', 1620
    .return ($P4516)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "variable" :anon :subid("508_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4518
    .param pmc param_4519
.annotate 'line', 1628
    .const 'Sub' $P4535 = "509_1307835824.98345" 
    capture_lex $P4535
    .lex "self", param_4518
    .lex "$/", param_4519
.annotate 'line', 1629
    new $P4520, "Undef"
    .lex "$past", $P4520
.annotate 'line', 1628
    find_lex $P4521, "$past"
    unless_null $P4521, vivify_2178
    new $P4521, "Undef"
  vivify_2178:
.annotate 'line', 1630
    find_lex $P4523, "$/"
    unless_null $P4523, vivify_2179
    $P4523 = root_new ['parrot';'Hash']
  vivify_2179:
    set $P4524, $P4523["postcircumfix"]
    unless_null $P4524, vivify_2180
    new $P4524, "Undef"
  vivify_2180:
    if $P4524, if_4522
.annotate 'line', 1634
    .const 'Sub' $P4535 = "509_1307835824.98345" 
    capture_lex $P4535
    $P4535()
    goto if_4522_end
  if_4522:
.annotate 'line', 1631
    find_lex $P4525, "$/"
    unless_null $P4525, vivify_2237
    $P4525 = root_new ['parrot';'Hash']
  vivify_2237:
    set $P4526, $P4525["postcircumfix"]
    unless_null $P4526, vivify_2238
    new $P4526, "Undef"
  vivify_2238:
    $P4527 = $P4526."ast"()
    store_lex "$past", $P4527
.annotate 'line', 1632
    find_lex $P4528, "$past"
    unless_null $P4528, vivify_2239
    new $P4528, "Undef"
  vivify_2239:
    get_hll_global $P4529, "GLOBAL"
    nqp_get_package_through_who $P4530, $P4529, "PAST"
    get_who $P4531, $P4530
    set $P4532, $P4531["Var"]
    $P4533 = $P4532."new"("$/" :named("name"))
    $P4528."unshift"($P4533)
  if_4522_end:
.annotate 'line', 1693
    find_lex $P4716, "$/"
    find_lex $P4717, "$past"
    unless_null $P4717, vivify_2240
    new $P4717, "Undef"
  vivify_2240:
    $P4718 = $P4716."!make"($P4717)
.annotate 'line', 1628
    .return ($P4718)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block4534"  :anon :subid("509_1307835824.98345") :outer("508_1307835824.98345")
.annotate 'line', 1634
    .const 'Sub' $P4611 = "511_1307835824.98345" 
    capture_lex $P4611
    .const 'Sub' $P4570 = "510_1307835824.98345" 
    capture_lex $P4570
.annotate 'line', 1635
    $P4536 = root_new ['parrot';'ResizablePMCArray']
    .lex "@name", $P4536
    get_hll_global $P4537, "GLOBAL"
    nqp_get_package_through_who $P4538, $P4537, "NQP"
    get_who $P4539, $P4538
    set $P4540, $P4539["Compiler"]
    find_lex $P4541, "$/"
    unless_null $P4541, vivify_2181
    new $P4541, "Undef"
  vivify_2181:
    set $S4542, $P4541
    $P4543 = $P4540."parse_name"($S4542)
    store_lex "@name", $P4543
.annotate 'line', 1636
    find_lex $P4546, "@name"
    unless_null $P4546, vivify_2182
    $P4546 = root_new ['parrot';'ResizablePMCArray']
  vivify_2182:
    set $N4547, $P4546
    isgt $I4548, $N4547, 1.0
    if $I4548, if_4545
.annotate 'line', 1643
    find_lex $P4564, "$/"
    unless_null $P4564, vivify_2183
    $P4564 = root_new ['parrot';'Hash']
  vivify_2183:
    set $P4565, $P4564["twigil"]
    unless_null $P4565, vivify_2184
    $P4565 = root_new ['parrot';'ResizablePMCArray']
  vivify_2184:
    set $P4566, $P4565[0]
    unless_null $P4566, vivify_2185
    new $P4566, "Undef"
  vivify_2185:
    set $S4567, $P4566
    iseq $I4568, $S4567, "*"
    if $I4568, if_4563
.annotate 'line', 1654
    find_lex $P4605, "$/"
    unless_null $P4605, vivify_2186
    $P4605 = root_new ['parrot';'Hash']
  vivify_2186:
    set $P4606, $P4605["twigil"]
    unless_null $P4606, vivify_2187
    $P4606 = root_new ['parrot';'ResizablePMCArray']
  vivify_2187:
    set $P4607, $P4606[0]
    unless_null $P4607, vivify_2188
    new $P4607, "Undef"
  vivify_2188:
    set $S4608, $P4607
    iseq $I4609, $S4608, "!"
    if $I4609, if_4604
.annotate 'line', 1683
    find_lex $P4693, "@name"
    unless_null $P4693, vivify_2189
    $P4693 = root_new ['parrot';'ResizablePMCArray']
  vivify_2189:
    set $P4694, $P4693[0]
    unless_null $P4694, vivify_2190
    new $P4694, "Undef"
  vivify_2190:
    set $S4695, $P4694
    $P4696 = "is_package"($S4695)
    if $P4696, if_4692
.annotate 'line', 1688
    get_hll_global $P4705, "GLOBAL"
    nqp_get_package_through_who $P4706, $P4705, "PAST"
    get_who $P4707, $P4706
    set $P4708, $P4707["Var"]
.annotate 'line', 1689
    find_lex $P4709, "@name"
    unless_null $P4709, vivify_2191
    $P4709 = root_new ['parrot';'ResizablePMCArray']
  vivify_2191:
    $P4710 = $P4709."pop"()
    set $S4711, $P4710
    find_lex $P4712, "$/"
    unless_null $P4712, vivify_2192
    $P4712 = root_new ['parrot';'Hash']
  vivify_2192:
    set $P4713, $P4712["sigil"]
    unless_null $P4713, vivify_2193
    new $P4713, "Undef"
  vivify_2193:
    $P4714 = "vivitype"($P4713)
    $P4715 = $P4708."new"($S4711 :named("name"), $P4714 :named("viviself"))
.annotate 'line', 1688
    store_lex "$past", $P4715
.annotate 'line', 1687
    set $P4691, $P4715
.annotate 'line', 1683
    goto if_4692_end
  if_4692:
.annotate 'line', 1684
    find_lex $P4697, "@name"
    unless_null $P4697, vivify_2194
    $P4697 = root_new ['parrot';'ResizablePMCArray']
  vivify_2194:
    find_lex $P4698, "$/"
    unless_null $P4698, vivify_2195
    new $P4698, "Undef"
  vivify_2195:
    $P4699 = "lexical_package_lookup"($P4697, $P4698)
    store_lex "$past", $P4699
.annotate 'line', 1685
    find_lex $P4700, "$past"
    unless_null $P4700, vivify_2196
    new $P4700, "Undef"
  vivify_2196:
    find_lex $P4701, "$/"
    unless_null $P4701, vivify_2197
    $P4701 = root_new ['parrot';'Hash']
  vivify_2197:
    set $P4702, $P4701["sigil"]
    unless_null $P4702, vivify_2198
    new $P4702, "Undef"
  vivify_2198:
    $P4703 = "vivitype"($P4702)
    $P4704 = $P4700."viviself"($P4703)
.annotate 'line', 1683
    set $P4691, $P4704
  if_4692_end:
    set $P4603, $P4691
.annotate 'line', 1654
    goto if_4604_end
  if_4604:
    .const 'Sub' $P4611 = "511_1307835824.98345" 
    capture_lex $P4611
    $P4690 = $P4611()
    set $P4603, $P4690
  if_4604_end:
    set $P4562, $P4603
.annotate 'line', 1643
    goto if_4563_end
  if_4563:
    .const 'Sub' $P4570 = "510_1307835824.98345" 
    capture_lex $P4570
    $P4602 = $P4570()
    set $P4562, $P4602
  if_4563_end:
    set $P4544, $P4562
.annotate 'line', 1636
    goto if_4545_end
  if_4545:
.annotate 'line', 1637
    find_lex $P4550, "$/"
    unless_null $P4550, vivify_2229
    $P4550 = root_new ['parrot';'Hash']
  vivify_2229:
    set $P4551, $P4550["twigil"]
    unless_null $P4551, vivify_2230
    new $P4551, "Undef"
  vivify_2230:
    unless $P4551, if_4549_end
.annotate 'line', 1638
    find_lex $P4552, "$/"
    unless_null $P4552, vivify_2231
    new $P4552, "Undef"
  vivify_2231:
    $P4553 = $P4552."CURSOR"()
    $P4553."panic"("Twigil not allowed on multi-part name")
  if_4549_end:
.annotate 'line', 1640
    find_lex $P4554, "@name"
    unless_null $P4554, vivify_2232
    $P4554 = root_new ['parrot';'ResizablePMCArray']
  vivify_2232:
    find_lex $P4555, "$/"
    unless_null $P4555, vivify_2233
    new $P4555, "Undef"
  vivify_2233:
    $P4556 = "lexical_package_lookup"($P4554, $P4555)
    store_lex "$past", $P4556
.annotate 'line', 1641
    find_lex $P4557, "$past"
    unless_null $P4557, vivify_2234
    new $P4557, "Undef"
  vivify_2234:
    find_lex $P4558, "$/"
    unless_null $P4558, vivify_2235
    $P4558 = root_new ['parrot';'Hash']
  vivify_2235:
    set $P4559, $P4558["sigil"]
    unless_null $P4559, vivify_2236
    new $P4559, "Undef"
  vivify_2236:
    $P4560 = "vivitype"($P4559)
    $P4561 = $P4557."viviself"($P4560)
.annotate 'line', 1636
    set $P4544, $P4561
  if_4545_end:
.annotate 'line', 1634
    .return ($P4544)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block4610"  :anon :subid("511_1307835824.98345") :outer("509_1307835824.98345")
.annotate 'line', 1654
    .const 'Sub' $P4642 = "512_1307835824.98345" 
    capture_lex $P4642
.annotate 'line', 1656
    new $P4612, "Undef"
    .lex "$name", $P4612
    find_lex $P4613, "@name"
    unless_null $P4613, vivify_2199
    $P4613 = root_new ['parrot';'ResizablePMCArray']
  vivify_2199:
    $P4614 = $P4613."pop"()
    set $S4615, $P4614
    new $P4616, 'String'
    set $P4616, $S4615
    store_lex "$name", $P4616
.annotate 'line', 1657
    get_hll_global $P4617, "GLOBAL"
    nqp_get_package_through_who $P4618, $P4617, "PAST"
    get_who $P4619, $P4618
    set $P4620, $P4619["Var"]
    find_lex $P4621, "$name"
    unless_null $P4621, vivify_2200
    new $P4621, "Undef"
  vivify_2200:
.annotate 'line', 1659
    find_lex $P4622, "$/"
    unless_null $P4622, vivify_2201
    $P4622 = root_new ['parrot';'Hash']
  vivify_2201:
    set $P4623, $P4622["sigil"]
    unless_null $P4623, vivify_2202
    new $P4623, "Undef"
  vivify_2202:
    $P4624 = "vivitype"($P4623)
.annotate 'line', 1660
    get_hll_global $P4625, "GLOBAL"
    nqp_get_package_through_who $P4626, $P4625, "PAST"
    get_who $P4627, $P4626
    set $P4628, $P4627["Var"]
    $P4629 = $P4628."new"("self" :named("name"))
.annotate 'line', 1661
    get_hll_global $P4630, "GLOBAL"
    nqp_get_package_through_who $P4631, $P4630, "PAST"
    get_who $P4632, $P4631
    set $P4633, $P4632["Var"]
    $P4634 = $P4633."new"("$?CLASS" :named("name"))
    $P4635 = $P4620."new"($P4629, $P4634, $P4621 :named("name"), "attribute_6model" :named("scope"), $P4624 :named("viviself"))
.annotate 'line', 1657
    store_lex "$past", $P4635
.annotate 'line', 1665
    find_dynamic_lex $P4640, "$*IN_DECL"
    unless_null $P4640, vivify_2203
    get_hll_global $P4638, "GLOBAL"
    get_who $P4639, $P4638
    set $P4640, $P4639["$IN_DECL"]
    unless_null $P4640, vivify_2204
    die "Contextual $*IN_DECL not found"
  vivify_2204:
  vivify_2203:
    unless $P4640, unless_4637
    set $P4636, $P4640
    goto unless_4637_end
  unless_4637:
    .const 'Sub' $P4642 = "512_1307835824.98345" 
    capture_lex $P4642
    $P4689 = $P4642()
    set $P4636, $P4689
  unless_4637_end:
.annotate 'line', 1654
    .return ($P4636)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block4641"  :anon :subid("512_1307835824.98345") :outer("511_1307835824.98345")
.annotate 'line', 1665
    .const 'Sub' $P4657 = "513_1307835824.98345" 
    capture_lex $P4657
.annotate 'line', 1666
    new $P4643, "Undef"
    .lex "$attr", $P4643
.annotate 'line', 1665
    find_lex $P4644, "$attr"
    unless_null $P4644, vivify_2205
    new $P4644, "Undef"
  vivify_2205:
.annotate 'line', 1667
    find_dynamic_lex $P4648, "$*PACKAGE"
    unless_null $P4648, vivify_2206
    get_hll_global $P4646, "GLOBAL"
    get_who $P4647, $P4646
    set $P4648, $P4647["$PACKAGE"]
    unless_null $P4648, vivify_2207
    die "Contextual $*PACKAGE not found"
  vivify_2207:
  vivify_2206:
    get_how $P4649, $P4648
    find_dynamic_lex $P4652, "$*PACKAGE"
    unless_null $P4652, vivify_2208
    get_hll_global $P4650, "GLOBAL"
    get_who $P4651, $P4650
    set $P4652, $P4651["$PACKAGE"]
    unless_null $P4652, vivify_2209
    die "Contextual $*PACKAGE not found"
  vivify_2209:
  vivify_2208:
    $P4653 = $P4649."attributes"($P4652, 1 :named("local"))
    defined $I4654, $P4653
    unless $I4654, for_undef_2210
    iter $P4645, $P4653
    new $P4668, 'ExceptionHandler'
    set_label $P4668, loop4667_handler
    $P4668."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P4668
  loop4667_test:
    unless $P4645, loop4667_done
    shift $P4655, $P4645
  loop4667_redo:
    .const 'Sub' $P4657 = "513_1307835824.98345" 
    capture_lex $P4657
    $P4657($P4655)
  loop4667_next:
    goto loop4667_test
  loop4667_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P4669, exception, 'type'
    eq $P4669, .CONTROL_LOOP_NEXT, loop4667_next
    eq $P4669, .CONTROL_LOOP_REDO, loop4667_redo
  loop4667_done:
    pop_eh 
  for_undef_2210:
.annotate 'line', 1673
    find_lex $P4672, "$attr"
    unless_null $P4672, vivify_2214
    new $P4672, "Undef"
  vivify_2214:
    defined $I4673, $P4672
    if $I4673, if_4671
.annotate 'line', 1679
    find_lex $P4682, "$/"
    unless_null $P4682, vivify_2215
    new $P4682, "Undef"
  vivify_2215:
    $P4683 = $P4682."CURSOR"()
    new $P4684, 'String'
    set $P4684, "Attribute '"
    find_lex $P4685, "$name"
    unless_null $P4685, vivify_2216
    new $P4685, "Undef"
  vivify_2216:
    concat $P4686, $P4684, $P4685
    concat $P4687, $P4686, "' not declared"
    $P4688 = $P4683."panic"($P4687)
.annotate 'line', 1678
    set $P4670, $P4688
.annotate 'line', 1673
    goto if_4671_end
  if_4671:
.annotate 'line', 1674
    find_lex $P4676, "$attr"
    unless_null $P4676, vivify_2217
    new $P4676, "Undef"
  vivify_2217:
    can $I4677, $P4676, "type"
    if $I4677, if_4675
    new $P4674, 'Integer'
    set $P4674, $I4677
    goto if_4675_end
  if_4675:
.annotate 'line', 1675
    find_lex $P4678, "$past"
    unless_null $P4678, vivify_2218
    new $P4678, "Undef"
  vivify_2218:
    find_lex $P4679, "$attr"
    unless_null $P4679, vivify_2219
    new $P4679, "Undef"
  vivify_2219:
    $P4680 = $P4679."type"()
    $P4681 = $P4678."type"($P4680)
.annotate 'line', 1674
    set $P4674, $P4681
  if_4675_end:
.annotate 'line', 1673
    set $P4670, $P4674
  if_4671_end:
.annotate 'line', 1665
    .return ($P4670)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block4656"  :anon :subid("513_1307835824.98345") :outer("512_1307835824.98345")
    .param pmc param_4658
.annotate 'line', 1667
    .lex "$_", param_4658
.annotate 'line', 1668
    find_lex $P4661, "$_"
    unless_null $P4661, vivify_2211
    new $P4661, "Undef"
  vivify_2211:
    $S4662 = $P4661."name"()
    find_lex $P4663, "$name"
    unless_null $P4663, vivify_2212
    new $P4663, "Undef"
  vivify_2212:
    set $S4664, $P4663
    iseq $I4665, $S4662, $S4664
    if $I4665, if_4660
    new $P4659, 'Integer'
    set $P4659, $I4665
    goto if_4660_end
  if_4660:
.annotate 'line', 1669
    find_lex $P4666, "$_"
    unless_null $P4666, vivify_2213
    new $P4666, "Undef"
  vivify_2213:
    store_lex "$attr", $P4666
.annotate 'line', 1670
    die 0, .CONTROL_LOOP_LAST
  if_4660_end:
.annotate 'line', 1667
    .return ($P4659)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block4569"  :anon :subid("510_1307835824.98345") :outer("509_1307835824.98345")
.annotate 'line', 1644
    new $P4571, "Undef"
    .lex "$global_fallback", $P4571
    find_lex $P4572, "$/"
    unless_null $P4572, vivify_2220
    $P4572 = root_new ['parrot';'Hash']
  vivify_2220:
    set $P4573, $P4572["sigil"]
    unless_null $P4573, vivify_2221
    new $P4573, "Undef"
  vivify_2221:
    set $S4574, $P4573
    new $P4575, 'String'
    set $P4575, $S4574
    find_lex $P4576, "$/"
    unless_null $P4576, vivify_2222
    $P4576 = root_new ['parrot';'Hash']
  vivify_2222:
    set $P4577, $P4576["desigilname"]
    unless_null $P4577, vivify_2223
    new $P4577, "Undef"
  vivify_2223:
    concat $P4578, $P4575, $P4577
    new $P4579, "ResizablePMCArray"
    push $P4579, "GLOBAL"
    push $P4579, $P4578
    find_lex $P4580, "$/"
    unless_null $P4580, vivify_2224
    new $P4580, "Undef"
  vivify_2224:
    $P4581 = "lexical_package_lookup"($P4579, $P4580)
    store_lex "$global_fallback", $P4581
.annotate 'line', 1645
    find_lex $P4582, "$global_fallback"
    unless_null $P4582, vivify_2225
    new $P4582, "Undef"
  vivify_2225:
    get_hll_global $P4583, "GLOBAL"
    nqp_get_package_through_who $P4584, $P4583, "PAST"
    get_who $P4585, $P4584
    set $P4586, $P4585["Op"]
.annotate 'line', 1646
    new $P4587, "String"
    assign $P4587, "Contextual "
    find_lex $P4588, "$/"
    unless_null $P4588, vivify_2226
    new $P4588, "Undef"
  vivify_2226:
    set $S4589, $P4588
    concat $P4590, $P4587, $S4589
    concat $P4591, $P4590, " not found"
    $P4592 = $P4586."new"($P4591, "die" :named("pirop"))
.annotate 'line', 1645
    $P4582."viviself"($P4592)
.annotate 'line', 1649
    get_hll_global $P4593, "GLOBAL"
    nqp_get_package_through_who $P4594, $P4593, "PAST"
    get_who $P4595, $P4594
    set $P4596, $P4595["Var"]
.annotate 'line', 1650
    find_lex $P4597, "@name"
    unless_null $P4597, vivify_2227
    $P4597 = root_new ['parrot';'ResizablePMCArray']
  vivify_2227:
    $P4598 = $P4597."pop"()
    set $S4599, $P4598
    find_lex $P4600, "$global_fallback"
    unless_null $P4600, vivify_2228
    new $P4600, "Undef"
  vivify_2228:
    $P4601 = $P4596."new"($S4599 :named("name"), "contextual" :named("scope"), $P4600 :named("viviself"))
.annotate 'line', 1649
    store_lex "$past", $P4601
.annotate 'line', 1643
    .return ($P4601)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<module>" :anon :subid("514_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4720
    .param pmc param_4721
.annotate 'line', 1696
    .lex "self", param_4720
    .lex "$/", param_4721
    find_lex $P4722, "$/"
    find_lex $P4723, "$/"
    unless_null $P4723, vivify_2241
    $P4723 = root_new ['parrot';'Hash']
  vivify_2241:
    set $P4724, $P4723["package_def"]
    unless_null $P4724, vivify_2242
    new $P4724, "Undef"
  vivify_2242:
    $P4725 = $P4724."ast"()
    $P4726 = $P4722."!make"($P4725)
    .return ($P4726)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<knowhow>" :anon :subid("515_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4728
    .param pmc param_4729
.annotate 'line', 1697
    .lex "self", param_4728
    .lex "$/", param_4729
    find_lex $P4730, "$/"
    find_lex $P4731, "$/"
    unless_null $P4731, vivify_2243
    $P4731 = root_new ['parrot';'Hash']
  vivify_2243:
    set $P4732, $P4731["package_def"]
    unless_null $P4732, vivify_2244
    new $P4732, "Undef"
  vivify_2244:
    $P4733 = $P4732."ast"()
    $P4734 = $P4730."!make"($P4733)
    .return ($P4734)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<class>" :anon :subid("516_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4736
    .param pmc param_4737
.annotate 'line', 1698
    .lex "self", param_4736
    .lex "$/", param_4737
    find_lex $P4738, "$/"
    find_lex $P4739, "$/"
    unless_null $P4739, vivify_2245
    $P4739 = root_new ['parrot';'Hash']
  vivify_2245:
    set $P4740, $P4739["package_def"]
    unless_null $P4740, vivify_2246
    new $P4740, "Undef"
  vivify_2246:
    $P4741 = $P4740."ast"()
    $P4742 = $P4738."!make"($P4741)
    .return ($P4742)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<grammar>" :anon :subid("517_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4744
    .param pmc param_4745
.annotate 'line', 1699
    .lex "self", param_4744
    .lex "$/", param_4745
    find_lex $P4746, "$/"
    find_lex $P4747, "$/"
    unless_null $P4747, vivify_2247
    $P4747 = root_new ['parrot';'Hash']
  vivify_2247:
    set $P4748, $P4747["package_def"]
    unless_null $P4748, vivify_2248
    new $P4748, "Undef"
  vivify_2248:
    $P4749 = $P4748."ast"()
    $P4750 = $P4746."!make"($P4749)
    .return ($P4750)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<role>" :anon :subid("518_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4752
    .param pmc param_4753
.annotate 'line', 1700
    .lex "self", param_4752
    .lex "$/", param_4753
    find_lex $P4754, "$/"
    find_lex $P4755, "$/"
    unless_null $P4755, vivify_2249
    $P4755 = root_new ['parrot';'Hash']
  vivify_2249:
    set $P4756, $P4755["package_def"]
    unless_null $P4756, vivify_2250
    new $P4756, "Undef"
  vivify_2250:
    $P4757 = $P4756."ast"()
    $P4758 = $P4754."!make"($P4757)
    .return ($P4758)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<native>" :anon :subid("519_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4760
    .param pmc param_4761
.annotate 'line', 1701
    .lex "self", param_4760
    .lex "$/", param_4761
    find_lex $P4762, "$/"
    find_lex $P4763, "$/"
    unless_null $P4763, vivify_2251
    $P4763 = root_new ['parrot';'Hash']
  vivify_2251:
    set $P4764, $P4763["package_def"]
    unless_null $P4764, vivify_2252
    new $P4764, "Undef"
  vivify_2252:
    $P4765 = $P4764."ast"()
    $P4766 = $P4762."!make"($P4765)
    .return ($P4766)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "package_declarator:sym<stub>" :anon :subid("520_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4768
    .param pmc param_4769
.annotate 'line', 1703
    .lex "self", param_4768
    .lex "$/", param_4769
.annotate 'line', 1706
    new $P4770, "Undef"
    .lex "$HOW", $P4770
.annotate 'line', 1707
    new $P4771, "Undef"
    .lex "$PACKAGE", $P4771
.annotate 'line', 1706
    find_lex $P4772, "$/"
    unless_null $P4772, vivify_2253
    $P4772 = root_new ['parrot';'Hash']
  vivify_2253:
    set $P4773, $P4772["metaclass"]
    unless_null $P4773, vivify_2254
    $P4773 = root_new ['parrot';'Hash']
  vivify_2254:
    set $P4774, $P4773["identifier"]
    unless_null $P4774, vivify_2255
    new $P4774, "Undef"
  vivify_2255:
    find_lex $P4775, "$/"
    unless_null $P4775, vivify_2256
    new $P4775, "Undef"
  vivify_2256:
    $P4776 = "find_sym"($P4774, $P4775)
    store_lex "$HOW", $P4776
.annotate 'line', 1707
    find_dynamic_lex $P4779, "$*SC"
    unless_null $P4779, vivify_2257
    get_hll_global $P4777, "GLOBAL"
    get_who $P4778, $P4777
    set $P4779, $P4778["$SC"]
    unless_null $P4779, vivify_2258
    die "Contextual $*SC not found"
  vivify_2258:
  vivify_2257:
    find_lex $P4780, "$HOW"
    unless_null $P4780, vivify_2259
    new $P4780, "Undef"
  vivify_2259:
    find_lex $P4781, "$/"
    unless_null $P4781, vivify_2260
    $P4781 = root_new ['parrot';'Hash']
  vivify_2260:
    set $P4782, $P4781["name"]
    unless_null $P4782, vivify_2261
    new $P4782, "Undef"
  vivify_2261:
    set $S4783, $P4782
    $P4784 = $P4779."pkg_create_mo"($P4780, $S4783 :named("name"))
    store_lex "$PACKAGE", $P4784
.annotate 'line', 1710
    find_dynamic_lex $P4790, "$*SCOPE"
    unless_null $P4790, vivify_2262
    get_hll_global $P4788, "GLOBAL"
    get_who $P4789, $P4788
    set $P4790, $P4789["$SCOPE"]
    unless_null $P4790, vivify_2263
    die "Contextual $*SCOPE not found"
  vivify_2263:
  vivify_2262:
    set $S4791, $P4790
    iseq $I4792, $S4791, "our"
    unless $I4792, unless_4787
    new $P4786, 'Integer'
    set $P4786, $I4792
    goto unless_4787_end
  unless_4787:
    find_dynamic_lex $P4795, "$*SCOPE"
    unless_null $P4795, vivify_2264
    get_hll_global $P4793, "GLOBAL"
    get_who $P4794, $P4793
    set $P4795, $P4794["$SCOPE"]
    unless_null $P4795, vivify_2265
    die "Contextual $*SCOPE not found"
  vivify_2265:
  vivify_2264:
    set $S4796, $P4795
    iseq $I4797, $S4796, ""
    new $P4786, 'Integer'
    set $P4786, $I4797
  unless_4787_end:
    if $P4786, if_4785
.annotate 'line', 1716
    find_dynamic_lex $P4829, "$*SCOPE"
    unless_null $P4829, vivify_2266
    get_hll_global $P4827, "GLOBAL"
    get_who $P4828, $P4827
    set $P4829, $P4828["$SCOPE"]
    unless_null $P4829, vivify_2267
    die "Contextual $*SCOPE not found"
  vivify_2267:
  vivify_2266:
    set $S4830, $P4829
    iseq $I4831, $S4830, "my"
    if $I4831, if_4826
.annotate 'line', 1723
    find_lex $P4853, "$/"
    unless_null $P4853, vivify_2268
    new $P4853, "Undef"
  vivify_2268:
    $P4854 = $P4853."CURSOR"()
    find_dynamic_lex $P4857, "$*SCOPE"
    unless_null $P4857, vivify_2269
    get_hll_global $P4855, "GLOBAL"
    get_who $P4856, $P4855
    set $P4857, $P4856["$SCOPE"]
    unless_null $P4857, vivify_2270
    die "Contextual $*SCOPE not found"
  vivify_2270:
  vivify_2269:
    concat $P4858, $P4857, " scoped packages are not supported"
    $P4854."panic"($P4858)
.annotate 'line', 1722
    goto if_4826_end
  if_4826:
.annotate 'line', 1717
    find_lex $P4833, "$/"
    unless_null $P4833, vivify_2271
    $P4833 = root_new ['parrot';'Hash']
  vivify_2271:
    set $P4834, $P4833["name"]
    unless_null $P4834, vivify_2272
    $P4834 = root_new ['parrot';'Hash']
  vivify_2272:
    set $P4835, $P4834["identifier"]
    unless_null $P4835, vivify_2273
    new $P4835, "Undef"
  vivify_2273:
    set $N4836, $P4835
    isne $I4837, $N4836, 1.0
    unless $I4837, if_4832_end
.annotate 'line', 1718
    find_lex $P4838, "$/"
    unless_null $P4838, vivify_2274
    $P4838 = root_new ['parrot';'Hash']
  vivify_2274:
    set $P4839, $P4838["name"]
    unless_null $P4839, vivify_2275
    new $P4839, "Undef"
  vivify_2275:
    $P4840 = $P4839."CURSOR"()
    $P4840."panic"("A my scoped package cannot have a multi-part name yet")
  if_4832_end:
.annotate 'line', 1720
    find_dynamic_lex $P4843, "$*SC"
    unless_null $P4843, vivify_2276
    get_hll_global $P4841, "GLOBAL"
    get_who $P4842, $P4841
    set $P4843, $P4842["$SC"]
    unless_null $P4843, vivify_2277
    die "Contextual $*SC not found"
  vivify_2277:
  vivify_2276:
    find_lex $P4844, "$?PACKAGE"
    get_who $P4845, $P4844
    set $P4846, $P4845["@BLOCK"]
    unless_null $P4846, vivify_2278
    $P4846 = root_new ['parrot';'ResizablePMCArray']
  vivify_2278:
    set $P4847, $P4846[0]
    unless_null $P4847, vivify_2279
    new $P4847, "Undef"
  vivify_2279:
    find_lex $P4848, "$/"
    unless_null $P4848, vivify_2280
    $P4848 = root_new ['parrot';'Hash']
  vivify_2280:
    set $P4849, $P4848["name"]
    unless_null $P4849, vivify_2281
    $P4849 = root_new ['parrot';'Hash']
  vivify_2281:
    set $P4850, $P4849["identifier"]
    unless_null $P4850, vivify_2282
    $P4850 = root_new ['parrot';'ResizablePMCArray']
  vivify_2282:
    set $P4851, $P4850[0]
    unless_null $P4851, vivify_2283
    new $P4851, "Undef"
  vivify_2283:
    find_lex $P4852, "$PACKAGE"
    unless_null $P4852, vivify_2284
    new $P4852, "Undef"
  vivify_2284:
    $P4843."install_lexical_symbol"($P4847, $P4851, $P4852)
  if_4826_end:
.annotate 'line', 1716
    goto if_4785_end
  if_4785:
.annotate 'line', 1711
    find_dynamic_lex $P4800, "$*SC"
    unless_null $P4800, vivify_2285
    get_hll_global $P4798, "GLOBAL"
    get_who $P4799, $P4798
    set $P4800, $P4799["$SC"]
    unless_null $P4800, vivify_2286
    die "Contextual $*SC not found"
  vivify_2286:
  vivify_2285:
    find_dynamic_lex $P4803, "$*OUTERPACKAGE"
    unless_null $P4803, vivify_2287
    get_hll_global $P4801, "GLOBAL"
    get_who $P4802, $P4801
    set $P4803, $P4802["$OUTERPACKAGE"]
    unless_null $P4803, vivify_2288
    die "Contextual $*OUTERPACKAGE not found"
  vivify_2288:
  vivify_2287:
    find_lex $P4804, "$/"
    unless_null $P4804, vivify_2289
    $P4804 = root_new ['parrot';'Hash']
  vivify_2289:
    set $P4805, $P4804["name"]
    unless_null $P4805, vivify_2290
    $P4805 = root_new ['parrot';'Hash']
  vivify_2290:
    set $P4806, $P4805["identifier"]
    unless_null $P4806, vivify_2291
    new $P4806, "Undef"
  vivify_2291:
    find_lex $P4807, "$PACKAGE"
    unless_null $P4807, vivify_2292
    new $P4807, "Undef"
  vivify_2292:
    $P4800."install_package_symbol"($P4803, $P4806, $P4807)
.annotate 'line', 1712
    find_lex $P4809, "$/"
    unless_null $P4809, vivify_2293
    $P4809 = root_new ['parrot';'Hash']
  vivify_2293:
    set $P4810, $P4809["name"]
    unless_null $P4810, vivify_2294
    $P4810 = root_new ['parrot';'Hash']
  vivify_2294:
    set $P4811, $P4810["identifier"]
    unless_null $P4811, vivify_2295
    new $P4811, "Undef"
  vivify_2295:
    set $N4812, $P4811
    iseq $I4813, $N4812, 1.0
    unless $I4813, if_4808_end
.annotate 'line', 1713
    find_dynamic_lex $P4816, "$*SC"
    unless_null $P4816, vivify_2296
    get_hll_global $P4814, "GLOBAL"
    get_who $P4815, $P4814
    set $P4816, $P4815["$SC"]
    unless_null $P4816, vivify_2297
    die "Contextual $*SC not found"
  vivify_2297:
  vivify_2296:
    find_lex $P4817, "$?PACKAGE"
    get_who $P4818, $P4817
    set $P4819, $P4818["@BLOCK"]
    unless_null $P4819, vivify_2298
    $P4819 = root_new ['parrot';'ResizablePMCArray']
  vivify_2298:
    set $P4820, $P4819[0]
    unless_null $P4820, vivify_2299
    new $P4820, "Undef"
  vivify_2299:
    find_lex $P4821, "$/"
    unless_null $P4821, vivify_2300
    $P4821 = root_new ['parrot';'Hash']
  vivify_2300:
    set $P4822, $P4821["name"]
    unless_null $P4822, vivify_2301
    $P4822 = root_new ['parrot';'Hash']
  vivify_2301:
    set $P4823, $P4822["identifier"]
    unless_null $P4823, vivify_2302
    $P4823 = root_new ['parrot';'ResizablePMCArray']
  vivify_2302:
    set $P4824, $P4823[0]
    unless_null $P4824, vivify_2303
    new $P4824, "Undef"
  vivify_2303:
    find_lex $P4825, "$PACKAGE"
    unless_null $P4825, vivify_2304
    new $P4825, "Undef"
  vivify_2304:
    $P4816."install_lexical_symbol"($P4820, $P4824, $P4825)
  if_4808_end:
  if_4785_end:
.annotate 'line', 1726
    find_lex $P4859, "$/"
    get_hll_global $P4860, "GLOBAL"
    nqp_get_package_through_who $P4861, $P4860, "PAST"
    get_who $P4862, $P4861
    set $P4863, $P4862["Stmts"]
    $P4864 = $P4863."new"()
    $P4865 = $P4859."!make"($P4864)
.annotate 'line', 1703
    .return ($P4865)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "package_def" :anon :subid("521_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_4867
    .param pmc param_4868
.annotate 'line', 1729
    .const 'Sub' $P5048 = "525_1307835824.98345" 
    capture_lex $P5048
    .const 'Sub' $P5018 = "524_1307835824.98345" 
    capture_lex $P5018
    .const 'Sub' $P4971 = "522_1307835824.98345" 
    capture_lex $P4971
    .lex "self", param_4867
    .lex "$/", param_4868
.annotate 'line', 1731
    $P4869 = root_new ['parrot';'ResizablePMCArray']
    .lex "@ns", $P4869
.annotate 'line', 1732
    new $P4870, "Undef"
    .lex "$name", $P4870
.annotate 'line', 1733
    new $P4871, "Undef"
    .lex "$how", $P4871
.annotate 'line', 1736
    new $P4872, "Undef"
    .lex "$past", $P4872
.annotate 'line', 1731
    find_lex $P4873, "$/"
    unless_null $P4873, vivify_2305
    $P4873 = root_new ['parrot';'Hash']
  vivify_2305:
    set $P4874, $P4873["name"]
    unless_null $P4874, vivify_2306
    $P4874 = root_new ['parrot';'Hash']
  vivify_2306:
    set $P4875, $P4874["identifier"]
    unless_null $P4875, vivify_2307
    new $P4875, "Undef"
  vivify_2307:
    clone $P4876, $P4875
    store_lex "@ns", $P4876
.annotate 'line', 1732
    find_lex $P4877, "@ns"
    unless_null $P4877, vivify_2308
    $P4877 = root_new ['parrot';'ResizablePMCArray']
  vivify_2308:
    $P4878 = $P4877."pop"()
    set $S4879, $P4878
    new $P4880, 'String'
    set $P4880, $S4879
    store_lex "$name", $P4880
.annotate 'line', 1733
    find_dynamic_lex $P4883, "$*PKGDECL"
    unless_null $P4883, vivify_2309
    get_hll_global $P4881, "GLOBAL"
    get_who $P4882, $P4881
    set $P4883, $P4882["$PKGDECL"]
    unless_null $P4883, vivify_2310
    die "Contextual $*PKGDECL not found"
  vivify_2310:
  vivify_2309:
    find_dynamic_lex $P4886, "%*HOW"
    unless_null $P4886, vivify_2311
    get_hll_global $P4884, "GLOBAL"
    get_who $P4885, $P4884
    set $P4886, $P4885["%HOW"]
    unless_null $P4886, vivify_2312
    die "Contextual %*HOW not found"
  vivify_2312:
  vivify_2311:
    set $P4887, $P4886[$P4883]
    unless_null $P4887, vivify_2313
    new $P4887, "Undef"
  vivify_2313:
    store_lex "$how", $P4887
.annotate 'line', 1736
    find_lex $P4890, "$/"
    unless_null $P4890, vivify_2314
    $P4890 = root_new ['parrot';'Hash']
  vivify_2314:
    set $P4891, $P4890["block"]
    unless_null $P4891, vivify_2315
    new $P4891, "Undef"
  vivify_2315:
    if $P4891, if_4889
    find_lex $P4895, "$/"
    unless_null $P4895, vivify_2316
    $P4895 = root_new ['parrot';'Hash']
  vivify_2316:
    set $P4896, $P4895["comp_unit"]
    unless_null $P4896, vivify_2317
    new $P4896, "Undef"
  vivify_2317:
    $P4897 = $P4896."ast"()
    set $P4888, $P4897
    goto if_4889_end
  if_4889:
    find_lex $P4892, "$/"
    unless_null $P4892, vivify_2318
    $P4892 = root_new ['parrot';'Hash']
  vivify_2318:
    set $P4893, $P4892["block"]
    unless_null $P4893, vivify_2319
    new $P4893, "Undef"
  vivify_2319:
    $P4894 = $P4893."ast"()
    set $P4888, $P4894
  if_4889_end:
    store_lex "$past", $P4888
.annotate 'line', 1737
    find_dynamic_lex $P4903, "$*SCOPE"
    unless_null $P4903, vivify_2320
    get_hll_global $P4901, "GLOBAL"
    get_who $P4902, $P4901
    set $P4903, $P4902["$SCOPE"]
    unless_null $P4903, vivify_2321
    die "Contextual $*SCOPE not found"
  vivify_2321:
  vivify_2320:
    set $S4904, $P4903
    iseq $I4905, $S4904, "our"
    unless $I4905, unless_4900
    new $P4899, 'Integer'
    set $P4899, $I4905
    goto unless_4900_end
  unless_4900:
    find_dynamic_lex $P4908, "$*SCOPE"
    unless_null $P4908, vivify_2322
    get_hll_global $P4906, "GLOBAL"
    get_who $P4907, $P4906
    set $P4908, $P4907["$SCOPE"]
    unless_null $P4908, vivify_2323
    die "Contextual $*SCOPE not found"
  vivify_2323:
  vivify_2322:
    set $S4909, $P4908
    iseq $I4910, $S4909, ""
    new $P4899, 'Integer'
    set $P4899, $I4910
  unless_4900_end:
    unless $P4899, if_4898_end
.annotate 'line', 1738
    find_lex $P4911, "$past"
    unless_null $P4911, vivify_2324
    new $P4911, "Undef"
  vivify_2324:
    find_lex $P4912, "$/"
    unless_null $P4912, vivify_2325
    $P4912 = root_new ['parrot';'Hash']
  vivify_2325:
    set $P4913, $P4912["name"]
    unless_null $P4913, vivify_2326
    $P4913 = root_new ['parrot';'Hash']
  vivify_2326:
    set $P4914, $P4913["identifier"]
    unless_null $P4914, vivify_2327
    new $P4914, "Undef"
  vivify_2327:
    $P4911."namespace"($P4914)
  if_4898_end:
.annotate 'line', 1745
    find_lex $P4918, "$how"
    unless_null $P4918, vivify_2328
    new $P4918, "Undef"
  vivify_2328:
    can $I4919, $P4918, "parametric"
    if $I4919, if_4917
    new $P4916, 'Integer'
    set $P4916, $I4919
    goto if_4917_end
  if_4917:
    find_lex $P4920, "$how"
    unless_null $P4920, vivify_2329
    new $P4920, "Undef"
  vivify_2329:
    find_lex $P4921, "$how"
    unless_null $P4921, vivify_2330
    new $P4921, "Undef"
  vivify_2330:
    $P4922 = $P4920."parametric"($P4921)
    set $P4916, $P4922
  if_4917_end:
    if $P4916, if_4915
.annotate 'line', 1754
    find_lex $P4952, "$past"
    unless_null $P4952, vivify_2331
    new $P4952, "Undef"
  vivify_2331:
    $P4952."blocktype"("immediate")
.annotate 'line', 1755
    find_dynamic_lex $P4955, "$*SC"
    unless_null $P4955, vivify_2332
    get_hll_global $P4953, "GLOBAL"
    get_who $P4954, $P4953
    set $P4955, $P4954["$SC"]
    unless_null $P4955, vivify_2333
    die "Contextual $*SC not found"
  vivify_2333:
  vivify_2332:
    find_lex $P4956, "$past"
    unless_null $P4956, vivify_2334
    new $P4956, "Undef"
  vivify_2334:
    find_dynamic_lex $P4959, "$*PACKAGE"
    unless_null $P4959, vivify_2335
    get_hll_global $P4957, "GLOBAL"
    get_who $P4958, $P4957
    set $P4959, $P4958["$PACKAGE"]
    unless_null $P4959, vivify_2336
    die "Contextual $*PACKAGE not found"
  vivify_2336:
  vivify_2335:
    $P4955."install_lexical_symbol"($P4956, "$?PACKAGE", $P4959)
.annotate 'line', 1756
    find_dynamic_lex $P4962, "$*SC"
    unless_null $P4962, vivify_2337
    get_hll_global $P4960, "GLOBAL"
    get_who $P4961, $P4960
    set $P4962, $P4961["$SC"]
    unless_null $P4962, vivify_2338
    die "Contextual $*SC not found"
  vivify_2338:
  vivify_2337:
    find_lex $P4963, "$past"
    unless_null $P4963, vivify_2339
    new $P4963, "Undef"
  vivify_2339:
    find_dynamic_lex $P4966, "$*PACKAGE"
    unless_null $P4966, vivify_2340
    get_hll_global $P4964, "GLOBAL"
    get_who $P4965, $P4964
    set $P4966, $P4965["$PACKAGE"]
    unless_null $P4966, vivify_2341
    die "Contextual $*PACKAGE not found"
  vivify_2341:
  vivify_2340:
    $P4962."install_lexical_symbol"($P4963, "$?CLASS", $P4966)
.annotate 'line', 1753
    goto if_4915_end
  if_4915:
.annotate 'line', 1746
    find_lex $P4923, "$past"
    unless_null $P4923, vivify_2342
    new $P4923, "Undef"
  vivify_2342:
    $P4923."blocktype"("declaration")
.annotate 'line', 1747
    find_lex $P4924, "$past"
    unless_null $P4924, vivify_2343
    new $P4924, "Undef"
  vivify_2343:
    get_hll_global $P4925, "GLOBAL"
    nqp_get_package_through_who $P4926, $P4925, "PAST"
    get_who $P4927, $P4926
    set $P4928, $P4927["Var"]
    $P4929 = $P4928."new"("$?CLASS" :named("name"), "parameter" :named("scope"))
    $P4924."unshift"($P4929)
.annotate 'line', 1748
    find_lex $P4930, "$past"
    unless_null $P4930, vivify_2344
    new $P4930, "Undef"
  vivify_2344:
    $P4930."symbol"("$?CLASS", "lexical" :named("scope"))
.annotate 'line', 1749
    find_dynamic_lex $P4933, "$*SC"
    unless_null $P4933, vivify_2345
    get_hll_global $P4931, "GLOBAL"
    get_who $P4932, $P4931
    set $P4933, $P4932["$SC"]
    unless_null $P4933, vivify_2346
    die "Contextual $*SC not found"
  vivify_2346:
  vivify_2345:
    find_dynamic_lex $P4936, "$*PACKAGE"
    unless_null $P4936, vivify_2347
    get_hll_global $P4934, "GLOBAL"
    get_who $P4935, $P4934
    set $P4936, $P4935["$PACKAGE"]
    unless_null $P4936, vivify_2348
    die "Contextual $*PACKAGE not found"
  vivify_2348:
  vivify_2347:
    find_lex $P4937, "$past"
    unless_null $P4937, vivify_2349
    new $P4937, "Undef"
  vivify_2349:
    $P4933."pkg_set_body_block"($P4936, $P4937)
.annotate 'line', 1750
    find_dynamic_lex $P4940, "$*SC"
    unless_null $P4940, vivify_2350
    get_hll_global $P4938, "GLOBAL"
    get_who $P4939, $P4938
    set $P4940, $P4939["$SC"]
    unless_null $P4940, vivify_2351
    die "Contextual $*SC not found"
  vivify_2351:
  vivify_2350:
    find_lex $P4941, "$past"
    unless_null $P4941, vivify_2352
    new $P4941, "Undef"
  vivify_2352:
    find_dynamic_lex $P4944, "$*PACKAGE"
    unless_null $P4944, vivify_2353
    get_hll_global $P4942, "GLOBAL"
    get_who $P4943, $P4942
    set $P4944, $P4943["$PACKAGE"]
    unless_null $P4944, vivify_2354
    die "Contextual $*PACKAGE not found"
  vivify_2354:
  vivify_2353:
    $P4940."install_lexical_symbol"($P4941, "$?PACKAGE", $P4944)
.annotate 'line', 1751
    find_dynamic_lex $P4947, "$*SC"
    unless_null $P4947, vivify_2355
    get_hll_global $P4945, "GLOBAL"
    get_who $P4946, $P4945
    set $P4947, $P4946["$SC"]
    unless_null $P4947, vivify_2356
    die "Contextual $*SC not found"
  vivify_2356:
  vivify_2355:
    find_lex $P4948, "$past"
    unless_null $P4948, vivify_2357
    new $P4948, "Undef"
  vivify_2357:
    find_dynamic_lex $P4951, "$*PACKAGE"
    unless_null $P4951, vivify_2358
    get_hll_global $P4949, "GLOBAL"
    get_who $P4950, $P4949
    set $P4951, $P4950["$PACKAGE"]
    unless_null $P4951, vivify_2359
    die "Contextual $*PACKAGE not found"
  vivify_2359:
  vivify_2358:
    $P4947."install_lexical_symbol"($P4948, "$?ROLE", $P4951)
  if_4915_end:
.annotate 'line', 1760
    find_lex $P4968, "$/"
    unless_null $P4968, vivify_2360
    $P4968 = root_new ['parrot';'Hash']
  vivify_2360:
    set $P4969, $P4968["parent"]
    unless_null $P4969, vivify_2361
    new $P4969, "Undef"
  vivify_2361:
    if $P4969, if_4967
.annotate 'line', 1774
    find_lex $P5015, "$how"
    unless_null $P5015, vivify_2362
    new $P5015, "Undef"
  vivify_2362:
    can $I5016, $P5015, "set_default_parent"
    unless $I5016, if_5014_end
    .const 'Sub' $P5018 = "524_1307835824.98345" 
    capture_lex $P5018
    $P5018()
  if_5014_end:
    goto if_4967_end
  if_4967:
.annotate 'line', 1760
    .const 'Sub' $P4971 = "522_1307835824.98345" 
    capture_lex $P4971
    $P4971()
  if_4967_end:
.annotate 'line', 1781
    find_lex $P5040, "$/"
    unless_null $P5040, vivify_2388
    $P5040 = root_new ['parrot';'Hash']
  vivify_2388:
    set $P5041, $P5040["role"]
    unless_null $P5041, vivify_2389
    new $P5041, "Undef"
  vivify_2389:
    unless $P5041, if_5039_end
.annotate 'line', 1782
    find_lex $P5043, "$/"
    unless_null $P5043, vivify_2390
    $P5043 = root_new ['parrot';'Hash']
  vivify_2390:
    set $P5044, $P5043["role"]
    unless_null $P5044, vivify_2391
    new $P5044, "Undef"
  vivify_2391:
    defined $I5045, $P5044
    unless $I5045, for_undef_2392
    iter $P5042, $P5044
    new $P5089, 'ExceptionHandler'
    set_label $P5089, loop5088_handler
    $P5089."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P5089
  loop5088_test:
    unless $P5042, loop5088_done
    shift $P5046, $P5042
  loop5088_redo:
    .const 'Sub' $P5048 = "525_1307835824.98345" 
    capture_lex $P5048
    $P5048($P5046)
  loop5088_next:
    goto loop5088_test
  loop5088_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P5090, exception, 'type'
    eq $P5090, .CONTROL_LOOP_NEXT, loop5088_next
    eq $P5090, .CONTROL_LOOP_REDO, loop5088_redo
  loop5088_done:
    pop_eh 
  for_undef_2392:
  if_5039_end:
.annotate 'line', 1799
    find_dynamic_lex $P5093, "$*SC"
    unless_null $P5093, vivify_2406
    get_hll_global $P5091, "GLOBAL"
    get_who $P5092, $P5091
    set $P5093, $P5092["$SC"]
    unless_null $P5093, vivify_2407
    die "Contextual $*SC not found"
  vivify_2407:
  vivify_2406:
    find_dynamic_lex $P5096, "$*PACKAGE"
    unless_null $P5096, vivify_2408
    get_hll_global $P5094, "GLOBAL"
    get_who $P5095, $P5094
    set $P5096, $P5095["$PACKAGE"]
    unless_null $P5096, vivify_2409
    die "Contextual $*PACKAGE not found"
  vivify_2409:
  vivify_2408:
    $P5093."pkg_compose"($P5096)
.annotate 'line', 1801
    find_lex $P5097, "$/"
    find_lex $P5098, "$past"
    unless_null $P5098, vivify_2410
    new $P5098, "Undef"
  vivify_2410:
    $P5099 = $P5097."!make"($P5098)
.annotate 'line', 1729
    .return ($P5099)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block5017"  :anon :subid("524_1307835824.98345") :outer("521_1307835824.98345")
.annotate 'line', 1775
    new $P5019, "Undef"
    .lex "$default", $P5019
    find_dynamic_lex $P5024, "$*PKGDECL"
    unless_null $P5024, vivify_2363
    get_hll_global $P5022, "GLOBAL"
    get_who $P5023, $P5022
    set $P5024, $P5023["$PKGDECL"]
    unless_null $P5024, vivify_2364
    die "Contextual $*PKGDECL not found"
  vivify_2364:
  vivify_2363:
    set $S5025, $P5024
    iseq $I5026, $S5025, "grammar"
    if $I5026, if_5021
    new $P5028, "ResizablePMCArray"
    push $P5028, "NQPMu"
    set $P5020, $P5028
    goto if_5021_end
  if_5021:
    new $P5027, "ResizablePMCArray"
    push $P5027, "Regex"
    push $P5027, "Cursor"
    set $P5020, $P5027
  if_5021_end:
    store_lex "$default", $P5020
.annotate 'line', 1776
    find_dynamic_lex $P5031, "$*SC"
    unless_null $P5031, vivify_2365
    get_hll_global $P5029, "GLOBAL"
    get_who $P5030, $P5029
    set $P5031, $P5030["$SC"]
    unless_null $P5031, vivify_2366
    die "Contextual $*SC not found"
  vivify_2366:
  vivify_2365:
    find_dynamic_lex $P5034, "$*PACKAGE"
    unless_null $P5034, vivify_2367
    get_hll_global $P5032, "GLOBAL"
    get_who $P5033, $P5032
    set $P5034, $P5033["$PACKAGE"]
    unless_null $P5034, vivify_2368
    die "Contextual $*PACKAGE not found"
  vivify_2368:
  vivify_2367:
.annotate 'line', 1777
    find_lex $P5035, "$default"
    unless_null $P5035, vivify_2369
    new $P5035, "Undef"
  vivify_2369:
    find_lex $P5036, "$/"
    unless_null $P5036, vivify_2370
    new $P5036, "Undef"
  vivify_2370:
    $P5037 = "find_sym"($P5035, $P5036)
    $P5038 = $P5031."pkg_add_parent_or_role"($P5034, "set_default_parent", $P5037)
.annotate 'line', 1774
    .return ($P5038)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block4970"  :anon :subid("522_1307835824.98345") :outer("521_1307835824.98345")
.annotate 'line', 1760
    .const 'Sub' $P4977 = "523_1307835824.98345" 
    capture_lex $P4977
.annotate 'line', 1761
    new $P4972, "Undef"
    .lex "$parent", $P4972
.annotate 'line', 1762
    new $P4973, "Undef"
    .lex "$parent_found", $P4973
.annotate 'line', 1760
    find_lex $P4974, "$parent"
    unless_null $P4974, vivify_2371
    new $P4974, "Undef"
  vivify_2371:
    find_lex $P4975, "$parent_found"
    unless_null $P4975, vivify_2372
    new $P4975, "Undef"
  vivify_2372:
.annotate 'line', 1763
    .const 'Sub' $P4977 = "523_1307835824.98345" 
    capture_lex $P4977
    $P4977()
.annotate 'line', 1767
    find_lex $P4995, "$parent_found"
    unless_null $P4995, vivify_2378
    new $P4995, "Undef"
  vivify_2378:
    if $P4995, if_4994
.annotate 'line', 1771
    find_lex $P5004, "$/"
    unless_null $P5004, vivify_2379
    new $P5004, "Undef"
  vivify_2379:
    $P5005 = $P5004."CURSOR"()
    new $P5006, "String"
    assign $P5006, "Could not find parent class '"
    find_lex $P5007, "$/"
    unless_null $P5007, vivify_2380
    $P5007 = root_new ['parrot';'Hash']
  vivify_2380:
    set $P5008, $P5007["parent"]
    unless_null $P5008, vivify_2381
    $P5008 = root_new ['parrot';'ResizablePMCArray']
  vivify_2381:
    set $P5009, $P5008[0]
    unless_null $P5009, vivify_2382
    new $P5009, "Undef"
  vivify_2382:
    set $S5010, $P5009
    concat $P5011, $P5006, $S5010
    concat $P5012, $P5011, "'"
    $P5013 = $P5005."panic"($P5012)
.annotate 'line', 1770
    set $P4993, $P5013
.annotate 'line', 1767
    goto if_4994_end
  if_4994:
.annotate 'line', 1768
    find_dynamic_lex $P4998, "$*SC"
    unless_null $P4998, vivify_2383
    get_hll_global $P4996, "GLOBAL"
    get_who $P4997, $P4996
    set $P4998, $P4997["$SC"]
    unless_null $P4998, vivify_2384
    die "Contextual $*SC not found"
  vivify_2384:
  vivify_2383:
    find_dynamic_lex $P5001, "$*PACKAGE"
    unless_null $P5001, vivify_2385
    get_hll_global $P4999, "GLOBAL"
    get_who $P5000, $P4999
    set $P5001, $P5000["$PACKAGE"]
    unless_null $P5001, vivify_2386
    die "Contextual $*PACKAGE not found"
  vivify_2386:
  vivify_2385:
    find_lex $P5002, "$parent"
    unless_null $P5002, vivify_2387
    new $P5002, "Undef"
  vivify_2387:
    $P5003 = $P4998."pkg_add_parent_or_role"($P5001, "add_parent", $P5002)
.annotate 'line', 1767
    set $P4993, $P5003
  if_4994_end:
.annotate 'line', 1760
    .return ($P4993)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block4976"  :anon :subid("523_1307835824.98345") :outer("522_1307835824.98345")
.annotate 'line', 1763
    new $P4988, 'ExceptionHandler'
    set_label $P4988, control_4987
    $P4988."handle_types_except"(.CONTROL_RETURN,  .CONTROL_OK,  .CONTROL_BREAK,  .CONTROL_CONTINUE,  .CONTROL_TAKE,  .CONTROL_LEAVE,  .CONTROL_EXIT,  .CONTROL_LOOP_NEXT,  .CONTROL_LOOP_LAST,  .CONTROL_LOOP_REDO)
    push_eh $P4988
.annotate 'line', 1764
    find_lex $P4978, "$/"
    unless_null $P4978, vivify_2373
    $P4978 = root_new ['parrot';'Hash']
  vivify_2373:
    set $P4979, $P4978["parent"]
    unless_null $P4979, vivify_2374
    $P4979 = root_new ['parrot';'ResizablePMCArray']
  vivify_2374:
    set $P4980, $P4979[0]
    unless_null $P4980, vivify_2375
    $P4980 = root_new ['parrot';'Hash']
  vivify_2375:
    set $P4981, $P4980["identifier"]
    unless_null $P4981, vivify_2376
    new $P4981, "Undef"
  vivify_2376:
    clone $P4982, $P4981
    find_lex $P4983, "$/"
    unless_null $P4983, vivify_2377
    new $P4983, "Undef"
  vivify_2377:
    $P4984 = "find_sym"($P4982, $P4983)
    store_lex "$parent", $P4984
.annotate 'line', 1765
    new $P4985, "Integer"
    assign $P4985, 1
    store_lex "$parent_found", $P4985
.annotate 'line', 1763
    pop_eh 
    goto skip_handler_4986
  control_4987:
    .local pmc exception 
    .get_results (exception) 
    new $P4991, 'Integer'
    set $P4991, 1
    set exception["handled"], $P4991
    set $I4992, exception["handled"]
    ne $I4992, 1, nothandled_4990
  handled_4989:
    .return (exception)
  nothandled_4990:
    rethrow exception
  skip_handler_4986:
    .return ($P4985)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block5047"  :anon :subid("525_1307835824.98345") :outer("521_1307835824.98345")
    .param pmc param_5051
.annotate 'line', 1782
    .const 'Sub' $P5055 = "526_1307835824.98345" 
    capture_lex $P5055
.annotate 'line', 1783
    new $P5049, "Undef"
    .lex "$role", $P5049
.annotate 'line', 1784
    new $P5050, "Undef"
    .lex "$role_found", $P5050
    .lex "$_", param_5051
.annotate 'line', 1782
    find_lex $P5052, "$role"
    unless_null $P5052, vivify_2393
    new $P5052, "Undef"
  vivify_2393:
    find_lex $P5053, "$role_found"
    unless_null $P5053, vivify_2394
    new $P5053, "Undef"
  vivify_2394:
.annotate 'line', 1785
    .const 'Sub' $P5055 = "526_1307835824.98345" 
    capture_lex $P5055
    $P5055()
.annotate 'line', 1789
    find_lex $P5071, "$role_found"
    unless_null $P5071, vivify_2398
    new $P5071, "Undef"
  vivify_2398:
    if $P5071, if_5070
.annotate 'line', 1793
    find_lex $P5080, "$/"
    unless_null $P5080, vivify_2399
    new $P5080, "Undef"
  vivify_2399:
    $P5081 = $P5080."CURSOR"()
    new $P5082, "String"
    assign $P5082, "Could not find role '"
    find_lex $P5083, "$_"
    unless_null $P5083, vivify_2400
    new $P5083, "Undef"
  vivify_2400:
    set $S5084, $P5083
    concat $P5085, $P5082, $S5084
    concat $P5086, $P5085, "'"
    $P5087 = $P5081."panic"($P5086)
.annotate 'line', 1792
    set $P5069, $P5087
.annotate 'line', 1789
    goto if_5070_end
  if_5070:
.annotate 'line', 1790
    find_dynamic_lex $P5074, "$*SC"
    unless_null $P5074, vivify_2401
    get_hll_global $P5072, "GLOBAL"
    get_who $P5073, $P5072
    set $P5074, $P5073["$SC"]
    unless_null $P5074, vivify_2402
    die "Contextual $*SC not found"
  vivify_2402:
  vivify_2401:
    find_dynamic_lex $P5077, "$*PACKAGE"
    unless_null $P5077, vivify_2403
    get_hll_global $P5075, "GLOBAL"
    get_who $P5076, $P5075
    set $P5077, $P5076["$PACKAGE"]
    unless_null $P5077, vivify_2404
    die "Contextual $*PACKAGE not found"
  vivify_2404:
  vivify_2403:
    find_lex $P5078, "$role"
    unless_null $P5078, vivify_2405
    new $P5078, "Undef"
  vivify_2405:
    $P5079 = $P5074."pkg_add_parent_or_role"($P5077, "add_role", $P5078)
.annotate 'line', 1789
    set $P5069, $P5079
  if_5070_end:
.annotate 'line', 1782
    .return ($P5069)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block5054"  :anon :subid("526_1307835824.98345") :outer("525_1307835824.98345")
.annotate 'line', 1785
    new $P5064, 'ExceptionHandler'
    set_label $P5064, control_5063
    $P5064."handle_types_except"(.CONTROL_RETURN,  .CONTROL_OK,  .CONTROL_BREAK,  .CONTROL_CONTINUE,  .CONTROL_TAKE,  .CONTROL_LEAVE,  .CONTROL_EXIT,  .CONTROL_LOOP_NEXT,  .CONTROL_LOOP_LAST,  .CONTROL_LOOP_REDO)
    push_eh $P5064
.annotate 'line', 1786
    find_lex $P5056, "$_"
    unless_null $P5056, vivify_2395
    $P5056 = root_new ['parrot';'Hash']
  vivify_2395:
    set $P5057, $P5056["identifier"]
    unless_null $P5057, vivify_2396
    new $P5057, "Undef"
  vivify_2396:
    clone $P5058, $P5057
    find_lex $P5059, "$/"
    unless_null $P5059, vivify_2397
    new $P5059, "Undef"
  vivify_2397:
    $P5060 = "find_sym"($P5058, $P5059)
    store_lex "$role", $P5060
.annotate 'line', 1787
    new $P5061, "Integer"
    assign $P5061, 1
    store_lex "$role_found", $P5061
.annotate 'line', 1785
    pop_eh 
    goto skip_handler_5062
  control_5063:
    .local pmc exception 
    .get_results (exception) 
    new $P5067, 'Integer'
    set $P5067, 1
    set exception["handled"], $P5067
    set $I5068, exception["handled"]
    ne $I5068, 1, nothandled_5066
  handled_5065:
    .return (exception)
  nothandled_5066:
    rethrow exception
  skip_handler_5062:
    .return ($P5061)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<my>" :anon :subid("527_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_5101
    .param pmc param_5102
.annotate 'line', 1804
    .lex "self", param_5101
    .lex "$/", param_5102
    find_lex $P5103, "$/"
    find_lex $P5104, "$/"
    unless_null $P5104, vivify_2411
    $P5104 = root_new ['parrot';'Hash']
  vivify_2411:
    set $P5105, $P5104["scoped"]
    unless_null $P5105, vivify_2412
    new $P5105, "Undef"
  vivify_2412:
    $P5106 = $P5105."ast"()
    $P5107 = $P5103."!make"($P5106)
    .return ($P5107)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<our>" :anon :subid("528_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_5109
    .param pmc param_5110
.annotate 'line', 1805
    .lex "self", param_5109
    .lex "$/", param_5110
    find_lex $P5111, "$/"
    find_lex $P5112, "$/"
    unless_null $P5112, vivify_2413
    $P5112 = root_new ['parrot';'Hash']
  vivify_2413:
    set $P5113, $P5112["scoped"]
    unless_null $P5113, vivify_2414
    new $P5113, "Undef"
  vivify_2414:
    $P5114 = $P5113."ast"()
    $P5115 = $P5111."!make"($P5114)
    .return ($P5115)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scope_declarator:sym<has>" :anon :subid("529_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_5117
    .param pmc param_5118
.annotate 'line', 1806
    .lex "self", param_5117
    .lex "$/", param_5118
    find_lex $P5119, "$/"
    find_lex $P5120, "$/"
    unless_null $P5120, vivify_2415
    $P5120 = root_new ['parrot';'Hash']
  vivify_2415:
    set $P5121, $P5120["scoped"]
    unless_null $P5121, vivify_2416
    new $P5121, "Undef"
  vivify_2416:
    $P5122 = $P5121."ast"()
    $P5123 = $P5119."!make"($P5122)
    .return ($P5123)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "scoped" :anon :subid("530_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_5125
    .param pmc param_5126
.annotate 'line', 1808
    .lex "self", param_5125
    .lex "$/", param_5126
.annotate 'line', 1809
    find_lex $P5127, "$/"
    find_lex $P5130, "$/"
    unless_null $P5130, vivify_2417
    $P5130 = root_new ['parrot';'Hash']
  vivify_2417:
    set $P5131, $P5130["declarator"]
    unless_null $P5131, vivify_2418
    new $P5131, "Undef"
  vivify_2418:
    if $P5131, if_5129
.annotate 'line', 1810
    find_lex $P5137, "$/"
    unless_null $P5137, vivify_2419
    $P5137 = root_new ['parrot';'Hash']
  vivify_2419:
    set $P5138, $P5137["multi_declarator"]
    unless_null $P5138, vivify_2420
    new $P5138, "Undef"
  vivify_2420:
    if $P5138, if_5136
.annotate 'line', 1811
    find_lex $P5142, "$/"
    unless_null $P5142, vivify_2421
    $P5142 = root_new ['parrot';'Hash']
  vivify_2421:
    set $P5143, $P5142["package_declarator"]
    unless_null $P5143, vivify_2422
    new $P5143, "Undef"
  vivify_2422:
    $P5144 = $P5143."ast"()
    set $P5135, $P5144
.annotate 'line', 1810
    goto if_5136_end
  if_5136:
    find_lex $P5139, "$/"
    unless_null $P5139, vivify_2423
    $P5139 = root_new ['parrot';'Hash']
  vivify_2423:
    set $P5140, $P5139["multi_declarator"]
    unless_null $P5140, vivify_2424
    new $P5140, "Undef"
  vivify_2424:
    $P5141 = $P5140."ast"()
    set $P5135, $P5141
  if_5136_end:
    set $P5128, $P5135
.annotate 'line', 1809
    goto if_5129_end
  if_5129:
    find_lex $P5132, "$/"
    unless_null $P5132, vivify_2425
    $P5132 = root_new ['parrot';'Hash']
  vivify_2425:
    set $P5133, $P5132["declarator"]
    unless_null $P5133, vivify_2426
    new $P5133, "Undef"
  vivify_2426:
    $P5134 = $P5133."ast"()
    set $P5128, $P5134
  if_5129_end:
    $P5145 = $P5127."!make"($P5128)
.annotate 'line', 1808
    .return ($P5145)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "declarator" :anon :subid("531_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_5147
    .param pmc param_5148
.annotate 'line', 1814
    .lex "self", param_5147
    .lex "$/", param_5148
.annotate 'line', 1815
    find_lex $P5149, "$/"
.annotate 'line', 1816
    find_lex $P5152, "$/"
    unless_null $P5152, vivify_2427
    $P5152 = root_new ['parrot';'Hash']
  vivify_2427:
    set $P5153, $P5152["routine_declarator"]
    unless_null $P5153, vivify_2428
    new $P5153, "Undef"
  vivify_2428:
    if $P5153, if_5151
.annotate 'line', 1817
    find_lex $P5157, "$/"
    unless_null $P5157, vivify_2429
    $P5157 = root_new ['parrot';'Hash']
  vivify_2429:
    set $P5158, $P5157["variable_declarator"]
    unless_null $P5158, vivify_2430
    new $P5158, "Undef"
  vivify_2430:
    $P5159 = $P5158."ast"()
    set $P5150, $P5159
.annotate 'line', 1816
    goto if_5151_end
  if_5151:
    find_lex $P5154, "$/"
    unless_null $P5154, vivify_2431
    $P5154 = root_new ['parrot';'Hash']
  vivify_2431:
    set $P5155, $P5154["routine_declarator"]
    unless_null $P5155, vivify_2432
    new $P5155, "Undef"
  vivify_2432:
    $P5156 = $P5155."ast"()
    set $P5150, $P5156
  if_5151_end:
    $P5160 = $P5149."!make"($P5150)
.annotate 'line', 1814
    .return ($P5160)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<multi>" :anon :subid("532_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_5162
    .param pmc param_5163
.annotate 'line', 1820
    .lex "self", param_5162
    .lex "$/", param_5163
    find_lex $P5164, "$/"
    find_lex $P5167, "$/"
    unless_null $P5167, vivify_2433
    $P5167 = root_new ['parrot';'Hash']
  vivify_2433:
    set $P5168, $P5167["declarator"]
    unless_null $P5168, vivify_2434
    new $P5168, "Undef"
  vivify_2434:
    if $P5168, if_5166
    find_lex $P5172, "$/"
    unless_null $P5172, vivify_2435
    $P5172 = root_new ['parrot';'Hash']
  vivify_2435:
    set $P5173, $P5172["routine_def"]
    unless_null $P5173, vivify_2436
    new $P5173, "Undef"
  vivify_2436:
    $P5174 = $P5173."ast"()
    set $P5165, $P5174
    goto if_5166_end
  if_5166:
    find_lex $P5169, "$/"
    unless_null $P5169, vivify_2437
    $P5169 = root_new ['parrot';'Hash']
  vivify_2437:
    set $P5170, $P5169["declarator"]
    unless_null $P5170, vivify_2438
    new $P5170, "Undef"
  vivify_2438:
    $P5171 = $P5170."ast"()
    set $P5165, $P5171
  if_5166_end:
    $P5175 = $P5164."!make"($P5165)
    .return ($P5175)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<proto>" :anon :subid("533_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_5177
    .param pmc param_5178
.annotate 'line', 1821
    .lex "self", param_5177
    .lex "$/", param_5178
    find_lex $P5179, "$/"
    find_lex $P5182, "$/"
    unless_null $P5182, vivify_2439
    $P5182 = root_new ['parrot';'Hash']
  vivify_2439:
    set $P5183, $P5182["declarator"]
    unless_null $P5183, vivify_2440
    new $P5183, "Undef"
  vivify_2440:
    if $P5183, if_5181
    find_lex $P5187, "$/"
    unless_null $P5187, vivify_2441
    $P5187 = root_new ['parrot';'Hash']
  vivify_2441:
    set $P5188, $P5187["routine_def"]
    unless_null $P5188, vivify_2442
    new $P5188, "Undef"
  vivify_2442:
    $P5189 = $P5188."ast"()
    set $P5180, $P5189
    goto if_5181_end
  if_5181:
    find_lex $P5184, "$/"
    unless_null $P5184, vivify_2443
    $P5184 = root_new ['parrot';'Hash']
  vivify_2443:
    set $P5185, $P5184["declarator"]
    unless_null $P5185, vivify_2444
    new $P5185, "Undef"
  vivify_2444:
    $P5186 = $P5185."ast"()
    set $P5180, $P5186
  if_5181_end:
    $P5190 = $P5179."!make"($P5180)
    .return ($P5190)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "multi_declarator:sym<null>" :anon :subid("534_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_5192
    .param pmc param_5193
.annotate 'line', 1822
    .lex "self", param_5192
    .lex "$/", param_5193
    find_lex $P5194, "$/"
    find_lex $P5195, "$/"
    unless_null $P5195, vivify_2445
    $P5195 = root_new ['parrot';'Hash']
  vivify_2445:
    set $P5196, $P5195["declarator"]
    unless_null $P5196, vivify_2446
    new $P5196, "Undef"
  vivify_2446:
    $P5197 = $P5196."ast"()
    $P5198 = $P5194."!make"($P5197)
    .return ($P5198)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "variable_declarator" :anon :subid("535_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_5200
    .param pmc param_5201
.annotate 'line', 1825
    .const 'Sub' $P5333 = "537_1307835824.98345" 
    capture_lex $P5333
    .const 'Sub' $P5235 = "536_1307835824.98345" 
    capture_lex $P5235
    .lex "self", param_5200
    .lex "$/", param_5201
.annotate 'line', 1826
    new $P5202, "Undef"
    .lex "$past", $P5202
.annotate 'line', 1827
    new $P5203, "Undef"
    .lex "$sigil", $P5203
.annotate 'line', 1828
    new $P5204, "Undef"
    .lex "$name", $P5204
.annotate 'line', 1829
    new $P5205, "Undef"
    .lex "$BLOCK", $P5205
.annotate 'line', 1826
    find_lex $P5206, "$/"
    unless_null $P5206, vivify_2447
    $P5206 = root_new ['parrot';'Hash']
  vivify_2447:
    set $P5207, $P5206["variable"]
    unless_null $P5207, vivify_2448
    new $P5207, "Undef"
  vivify_2448:
    $P5208 = $P5207."ast"()
    store_lex "$past", $P5208
.annotate 'line', 1827
    find_lex $P5209, "$/"
    unless_null $P5209, vivify_2449
    $P5209 = root_new ['parrot';'Hash']
  vivify_2449:
    set $P5210, $P5209["variable"]
    unless_null $P5210, vivify_2450
    $P5210 = root_new ['parrot';'Hash']
  vivify_2450:
    set $P5211, $P5210["sigil"]
    unless_null $P5211, vivify_2451
    new $P5211, "Undef"
  vivify_2451:
    store_lex "$sigil", $P5211
.annotate 'line', 1828
    find_lex $P5212, "$past"
    unless_null $P5212, vivify_2452
    new $P5212, "Undef"
  vivify_2452:
    $P5213 = $P5212."name"()
    store_lex "$name", $P5213
.annotate 'line', 1829
    find_lex $P5214, "$?PACKAGE"
    get_who $P5215, $P5214
    set $P5216, $P5215["@BLOCK"]
    unless_null $P5216, vivify_2453
    $P5216 = root_new ['parrot';'ResizablePMCArray']
  vivify_2453:
    set $P5217, $P5216[0]
    unless_null $P5217, vivify_2454
    new $P5217, "Undef"
  vivify_2454:
    store_lex "$BLOCK", $P5217
.annotate 'line', 1830
    find_lex $P5221, "$name"
    unless_null $P5221, vivify_2455
    new $P5221, "Undef"
  vivify_2455:
    if $P5221, if_5220
    set $P5219, $P5221
    goto if_5220_end
  if_5220:
    find_lex $P5222, "$BLOCK"
    unless_null $P5222, vivify_2456
    new $P5222, "Undef"
  vivify_2456:
    find_lex $P5223, "$name"
    unless_null $P5223, vivify_2457
    new $P5223, "Undef"
  vivify_2457:
    $P5224 = $P5222."symbol"($P5223)
    set $P5219, $P5224
  if_5220_end:
    unless $P5219, if_5218_end
.annotate 'line', 1831
    find_lex $P5225, "$/"
    unless_null $P5225, vivify_2458
    new $P5225, "Undef"
  vivify_2458:
    $P5226 = $P5225."CURSOR"()
    find_lex $P5227, "$name"
    unless_null $P5227, vivify_2459
    new $P5227, "Undef"
  vivify_2459:
    $P5226."panic"("Redeclaration of symbol ", $P5227)
  if_5218_end:
.annotate 'line', 1833
    find_dynamic_lex $P5231, "$*SCOPE"
    unless_null $P5231, vivify_2460
    get_hll_global $P5229, "GLOBAL"
    get_who $P5230, $P5229
    set $P5231, $P5230["$SCOPE"]
    unless_null $P5231, vivify_2461
    die "Contextual $*SCOPE not found"
  vivify_2461:
  vivify_2460:
    set $S5232, $P5231
    iseq $I5233, $S5232, "has"
    if $I5233, if_5228
.annotate 'line', 1853
    find_dynamic_lex $P5292, "$*SCOPE"
    unless_null $P5292, vivify_2462
    get_hll_global $P5290, "GLOBAL"
    get_who $P5291, $P5290
    set $P5292, $P5291["$SCOPE"]
    unless_null $P5292, vivify_2463
    die "Contextual $*SCOPE not found"
  vivify_2463:
  vivify_2462:
    set $S5293, $P5292
    iseq $I5294, $S5293, "our"
    if $I5294, if_5289
.annotate 'line', 1863
    find_lex $P5308, "$BLOCK"
    unless_null $P5308, vivify_2464
    $P5308 = root_new ['parrot';'ResizablePMCArray']
  vivify_2464:
    set $P5309, $P5308[0]
    unless_null $P5309, vivify_2465
    new $P5309, "Undef"
  vivify_2465:
    get_hll_global $P5310, "GLOBAL"
    nqp_get_package_through_who $P5311, $P5310, "PAST"
    get_who $P5312, $P5311
    set $P5313, $P5312["Var"]
    find_lex $P5314, "$name"
    unless_null $P5314, vivify_2466
    new $P5314, "Undef"
  vivify_2466:
.annotate 'line', 1865
    find_lex $P5315, "$sigil"
    unless_null $P5315, vivify_2467
    new $P5315, "Undef"
  vivify_2467:
    $P5316 = "vivitype"($P5315)
    find_lex $P5317, "$/"
    unless_null $P5317, vivify_2468
    new $P5317, "Undef"
  vivify_2468:
    $P5318 = $P5313."new"($P5314 :named("name"), "lexical" :named("scope"), 1 :named("isdecl"), 1 :named("lvalue"), $P5316 :named("viviself"), $P5317 :named("node"))
.annotate 'line', 1863
    $P5309."push"($P5318)
.annotate 'line', 1868
    find_lex $P5319, "$BLOCK"
    unless_null $P5319, vivify_2469
    new $P5319, "Undef"
  vivify_2469:
    find_lex $P5320, "$name"
    unless_null $P5320, vivify_2470
    new $P5320, "Undef"
  vivify_2470:
    $P5319."symbol"($P5320, "lexical" :named("scope"))
.annotate 'line', 1862
    goto if_5289_end
  if_5289:
.annotate 'line', 1857
    find_lex $P5295, "$/"
    unless_null $P5295, vivify_2471
    $P5295 = root_new ['parrot';'Hash']
  vivify_2471:
    set $P5296, $P5295["variable"]
    unless_null $P5296, vivify_2472
    new $P5296, "Undef"
  vivify_2472:
    set $S5297, $P5296
    new $P5298, 'String'
    set $P5298, $S5297
    store_lex "$name", $P5298
.annotate 'line', 1858
    find_lex $P5299, "$name"
    unless_null $P5299, vivify_2473
    new $P5299, "Undef"
  vivify_2473:
    new $P5300, "ResizablePMCArray"
    push $P5300, $P5299
    find_lex $P5301, "$/"
    unless_null $P5301, vivify_2474
    new $P5301, "Undef"
  vivify_2474:
    $P5302 = "lexical_package_lookup"($P5300, $P5301)
    store_lex "$past", $P5302
.annotate 'line', 1859
    find_lex $P5303, "$past"
    unless_null $P5303, vivify_2475
    new $P5303, "Undef"
  vivify_2475:
    find_lex $P5304, "$sigil"
    unless_null $P5304, vivify_2476
    new $P5304, "Undef"
  vivify_2476:
    $P5305 = "vivitype"($P5304)
    $P5303."viviself"($P5305)
.annotate 'line', 1860
    find_lex $P5306, "$BLOCK"
    unless_null $P5306, vivify_2477
    new $P5306, "Undef"
  vivify_2477:
    find_lex $P5307, "$name"
    unless_null $P5307, vivify_2478
    new $P5307, "Undef"
  vivify_2478:
    $P5306."symbol"($P5307, "package" :named("scope"))
  if_5289_end:
.annotate 'line', 1853
    goto if_5228_end
  if_5228:
.annotate 'line', 1833
    .const 'Sub' $P5235 = "536_1307835824.98345" 
    capture_lex $P5235
    $P5235()
  if_5228_end:
.annotate 'line', 1872
    find_lex $P5321, "$/"
    find_lex $P5322, "$past"
    unless_null $P5322, vivify_2508
    new $P5322, "Undef"
  vivify_2508:
    $P5321."!make"($P5322)
.annotate 'line', 1874
    find_lex $P5325, "$/"
    unless_null $P5325, vivify_2509
    $P5325 = root_new ['parrot';'Hash']
  vivify_2509:
    set $P5326, $P5325["trait"]
    unless_null $P5326, vivify_2510
    new $P5326, "Undef"
  vivify_2510:
    if $P5326, if_5324
    set $P5323, $P5326
    goto if_5324_end
  if_5324:
.annotate 'line', 1875
    find_lex $P5328, "$/"
    unless_null $P5328, vivify_2511
    $P5328 = root_new ['parrot';'Hash']
  vivify_2511:
    set $P5329, $P5328["trait"]
    unless_null $P5329, vivify_2512
    new $P5329, "Undef"
  vivify_2512:
    defined $I5330, $P5329
    unless $I5330, for_undef_2513
    iter $P5327, $P5329
    new $P5340, 'ExceptionHandler'
    set_label $P5340, loop5339_handler
    $P5340."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P5340
  loop5339_test:
    unless $P5327, loop5339_done
    shift $P5331, $P5327
  loop5339_redo:
    .const 'Sub' $P5333 = "537_1307835824.98345" 
    capture_lex $P5333
    $P5333($P5331)
  loop5339_next:
    goto loop5339_test
  loop5339_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P5341, exception, 'type'
    eq $P5341, .CONTROL_LOOP_NEXT, loop5339_next
    eq $P5341, .CONTROL_LOOP_REDO, loop5339_redo
  loop5339_done:
    pop_eh 
  for_undef_2513:
.annotate 'line', 1874
    set $P5323, $P5327
  if_5324_end:
.annotate 'line', 1825
    .return ($P5323)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block5234"  :anon :subid("536_1307835824.98345") :outer("535_1307835824.98345")
.annotate 'line', 1840
    $P5236 = root_new ['parrot';'Hash']
    .lex "%lit_args", $P5236
.annotate 'line', 1841
    $P5237 = root_new ['parrot';'Hash']
    .lex "%obj_args", $P5237
.annotate 'line', 1835
    find_dynamic_lex $P5244, "$*PKGDECL"
    unless_null $P5244, vivify_2479
    get_hll_global $P5242, "GLOBAL"
    get_who $P5243, $P5242
    set $P5244, $P5243["$PKGDECL"]
    unless_null $P5244, vivify_2480
    die "Contextual $*PKGDECL not found"
  vivify_2480:
  vivify_2479:
    concat $P5245, $P5244, "-attr"
    find_dynamic_lex $P5241, "%*HOW"
    unless_null $P5241, vivify_2481
    get_hll_global $P5239, "GLOBAL"
    get_who $P5240, $P5239
    set $P5241, $P5240["%HOW"]
    unless_null $P5241, vivify_2482
    die "Contextual %*HOW not found"
  vivify_2482:
  vivify_2481:
    exists $I5246, $P5241[$P5245]
    if $I5246, unless_5238_end
.annotate 'line', 1836
    find_lex $P5247, "$/"
    unless_null $P5247, vivify_2483
    new $P5247, "Undef"
  vivify_2483:
    $P5248 = $P5247."CURSOR"()
    find_dynamic_lex $P5251, "$*PKGDECL"
    unless_null $P5251, vivify_2484
    get_hll_global $P5249, "GLOBAL"
    get_who $P5250, $P5249
    set $P5251, $P5250["$PKGDECL"]
    unless_null $P5251, vivify_2485
    die "Contextual $*PKGDECL not found"
  vivify_2485:
  vivify_2484:
    concat $P5252, $P5251, " packages do not support attributes"
    $P5248."panic"($P5252)
  unless_5238_end:
.annotate 'line', 1835
    find_lex $P5253, "%lit_args"
    unless_null $P5253, vivify_2486
    $P5253 = root_new ['parrot';'Hash']
  vivify_2486:
    find_lex $P5254, "%obj_args"
    unless_null $P5254, vivify_2487
    $P5254 = root_new ['parrot';'Hash']
  vivify_2487:
.annotate 'line', 1842
    find_lex $P5255, "$name"
    unless_null $P5255, vivify_2488
    new $P5255, "Undef"
  vivify_2488:
    find_lex $P5256, "%lit_args"
    unless_null $P5256, vivify_2489
    $P5256 = root_new ['parrot';'Hash']
    store_lex "%lit_args", $P5256
  vivify_2489:
    set $P5256["name"], $P5255
.annotate 'line', 1843
    find_lex $P5258, "$/"
    unless_null $P5258, vivify_2490
    $P5258 = root_new ['parrot';'Hash']
  vivify_2490:
    set $P5259, $P5258["typename"]
    unless_null $P5259, vivify_2491
    new $P5259, "Undef"
  vivify_2491:
    unless $P5259, if_5257_end
.annotate 'line', 1844
    find_lex $P5260, "$/"
    unless_null $P5260, vivify_2492
    $P5260 = root_new ['parrot';'Hash']
  vivify_2492:
    set $P5261, $P5260["typename"]
    unless_null $P5261, vivify_2493
    $P5261 = root_new ['parrot';'ResizablePMCArray']
  vivify_2493:
    set $P5262, $P5261[0]
    unless_null $P5262, vivify_2494
    new $P5262, "Undef"
  vivify_2494:
    set $S5263, $P5262
    new $P5264, "ResizablePMCArray"
    push $P5264, $S5263
    find_lex $P5265, "$/"
    unless_null $P5265, vivify_2495
    new $P5265, "Undef"
  vivify_2495:
    $P5266 = "find_sym"($P5264, $P5265)
    find_lex $P5267, "%obj_args"
    unless_null $P5267, vivify_2496
    $P5267 = root_new ['parrot';'Hash']
    store_lex "%obj_args", $P5267
  vivify_2496:
    set $P5267["type"], $P5266
  if_5257_end:
.annotate 'line', 1848
    find_dynamic_lex $P5270, "$*SC"
    unless_null $P5270, vivify_2497
    get_hll_global $P5268, "GLOBAL"
    get_who $P5269, $P5268
    set $P5270, $P5269["$SC"]
    unless_null $P5270, vivify_2498
    die "Contextual $*SC not found"
  vivify_2498:
  vivify_2497:
    find_dynamic_lex $P5273, "$*PACKAGE"
    unless_null $P5273, vivify_2499
    get_hll_global $P5271, "GLOBAL"
    get_who $P5272, $P5271
    set $P5273, $P5272["$PACKAGE"]
    unless_null $P5273, vivify_2500
    die "Contextual $*PACKAGE not found"
  vivify_2500:
  vivify_2499:
    find_dynamic_lex $P5276, "$*PKGDECL"
    unless_null $P5276, vivify_2501
    get_hll_global $P5274, "GLOBAL"
    get_who $P5275, $P5274
    set $P5276, $P5275["$PKGDECL"]
    unless_null $P5276, vivify_2502
    die "Contextual $*PKGDECL not found"
  vivify_2502:
  vivify_2501:
    concat $P5277, $P5276, "-attr"
    find_dynamic_lex $P5280, "%*HOW"
    unless_null $P5280, vivify_2503
    get_hll_global $P5278, "GLOBAL"
    get_who $P5279, $P5278
    set $P5280, $P5279["%HOW"]
    unless_null $P5280, vivify_2504
    die "Contextual %*HOW not found"
  vivify_2504:
  vivify_2503:
    set $P5281, $P5280[$P5277]
    unless_null $P5281, vivify_2505
    new $P5281, "Undef"
  vivify_2505:
    find_lex $P5282, "%lit_args"
    unless_null $P5282, vivify_2506
    $P5282 = root_new ['parrot';'Hash']
  vivify_2506:
    find_lex $P5283, "%obj_args"
    unless_null $P5283, vivify_2507
    $P5283 = root_new ['parrot';'Hash']
  vivify_2507:
    $P5270."pkg_add_attribute"($P5273, $P5281, $P5282, $P5283)
.annotate 'line', 1851
    get_hll_global $P5284, "GLOBAL"
    nqp_get_package_through_who $P5285, $P5284, "PAST"
    get_who $P5286, $P5285
    set $P5287, $P5286["Stmts"]
    $P5288 = $P5287."new"()
    store_lex "$past", $P5288
.annotate 'line', 1833
    .return ($P5288)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block5332"  :anon :subid("537_1307835824.98345") :outer("535_1307835824.98345")
    .param pmc param_5334
.annotate 'line', 1875
    .lex "$_", param_5334
    find_lex $P5335, "$_"
    unless_null $P5335, vivify_2514
    new $P5335, "Undef"
  vivify_2514:
    $P5336 = $P5335."ast"()
    find_lex $P5337, "$/"
    unless_null $P5337, vivify_2515
    new $P5337, "Undef"
  vivify_2515:
    $P5338 = $P5336($P5337)
    .return ($P5338)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "routine_declarator:sym<sub>" :anon :subid("538_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_5343
    .param pmc param_5344
.annotate 'line', 1880
    .lex "self", param_5343
    .lex "$/", param_5344
    find_lex $P5345, "$/"
    find_lex $P5346, "$/"
    unless_null $P5346, vivify_2516
    $P5346 = root_new ['parrot';'Hash']
  vivify_2516:
    set $P5347, $P5346["routine_def"]
    unless_null $P5347, vivify_2517
    new $P5347, "Undef"
  vivify_2517:
    $P5348 = $P5347."ast"()
    $P5349 = $P5345."!make"($P5348)
    .return ($P5349)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "routine_declarator:sym<method>" :anon :subid("539_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_5351
    .param pmc param_5352
.annotate 'line', 1881
    .lex "self", param_5351
    .lex "$/", param_5352
    find_lex $P5353, "$/"
    find_lex $P5354, "$/"
    unless_null $P5354, vivify_2518
    $P5354 = root_new ['parrot';'Hash']
  vivify_2518:
    set $P5355, $P5354["method_def"]
    unless_null $P5355, vivify_2519
    new $P5355, "Undef"
  vivify_2519:
    $P5356 = $P5355."ast"()
    $P5357 = $P5353."!make"($P5356)
    .return ($P5357)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "routine_def" :anon :subid("540_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_5359
    .param pmc param_5360
.annotate 'line', 1883
    .const 'Sub' $P5673 = "546_1307835824.98345" 
    capture_lex $P5673
    .const 'Sub' $P5382 = "541_1307835824.98345" 
    capture_lex $P5382
    .lex "self", param_5359
    .lex "$/", param_5360
.annotate 'line', 1886
    new $P5361, "Undef"
    .lex "$past", $P5361
.annotate 'line', 1897
    new $P5362, "Undef"
    .lex "$block", $P5362
.annotate 'line', 1883
    find_lex $P5363, "$past"
    unless_null $P5363, vivify_2520
    new $P5363, "Undef"
  vivify_2520:
.annotate 'line', 1887
    find_lex $P5365, "$/"
    unless_null $P5365, vivify_2521
    $P5365 = root_new ['parrot';'Hash']
  vivify_2521:
    set $P5366, $P5365["onlystar"]
    unless_null $P5366, vivify_2522
    new $P5366, "Undef"
  vivify_2522:
    if $P5366, if_5364
.annotate 'line', 1891
    find_lex $P5368, "$/"
    unless_null $P5368, vivify_2523
    $P5368 = root_new ['parrot';'Hash']
  vivify_2523:
    set $P5369, $P5368["blockoid"]
    unless_null $P5369, vivify_2524
    new $P5369, "Undef"
  vivify_2524:
    $P5370 = $P5369."ast"()
    store_lex "$past", $P5370
.annotate 'line', 1892
    find_lex $P5371, "$past"
    unless_null $P5371, vivify_2525
    new $P5371, "Undef"
  vivify_2525:
    $P5371."blocktype"("declaration")
.annotate 'line', 1893
    find_dynamic_lex $P5375, "$*RETURN_USED"
    unless_null $P5375, vivify_2526
    get_hll_global $P5373, "GLOBAL"
    get_who $P5374, $P5373
    set $P5375, $P5374["$RETURN_USED"]
    unless_null $P5375, vivify_2527
    die "Contextual $*RETURN_USED not found"
  vivify_2527:
  vivify_2526:
    unless $P5375, if_5372_end
.annotate 'line', 1894
    find_lex $P5376, "$past"
    unless_null $P5376, vivify_2528
    new $P5376, "Undef"
  vivify_2528:
    $P5376."control"("return_pir")
  if_5372_end:
.annotate 'line', 1890
    goto if_5364_end
  if_5364:
.annotate 'line', 1888
    $P5367 = "only_star_block"()
    store_lex "$past", $P5367
  if_5364_end:
.annotate 'line', 1897
    find_lex $P5377, "$past"
    unless_null $P5377, vivify_2529
    new $P5377, "Undef"
  vivify_2529:
    store_lex "$block", $P5377
.annotate 'line', 1899
    find_lex $P5379, "$/"
    unless_null $P5379, vivify_2530
    $P5379 = root_new ['parrot';'Hash']
  vivify_2530:
    set $P5380, $P5379["deflongname"]
    unless_null $P5380, vivify_2531
    new $P5380, "Undef"
  vivify_2531:
    unless $P5380, if_5378_end
    .const 'Sub' $P5382 = "541_1307835824.98345" 
    capture_lex $P5382
    $P5382()
  if_5378_end:
.annotate 'line', 2000
    find_lex $P5662, "$block"
    unless_null $P5662, vivify_2637
    new $P5662, "Undef"
  vivify_2637:
    find_lex $P5663, "$past"
    unless_null $P5663, vivify_2638
    $P5663 = root_new ['parrot';'Hash']
    store_lex "$past", $P5663
  vivify_2638:
    set $P5663["block_past"], $P5662
.annotate 'line', 2001
    find_lex $P5665, "$/"
    unless_null $P5665, vivify_2639
    $P5665 = root_new ['parrot';'Hash']
  vivify_2639:
    set $P5666, $P5665["trait"]
    unless_null $P5666, vivify_2640
    new $P5666, "Undef"
  vivify_2640:
    unless $P5666, if_5664_end
.annotate 'line', 2002
    find_lex $P5668, "$/"
    unless_null $P5668, vivify_2641
    $P5668 = root_new ['parrot';'Hash']
  vivify_2641:
    set $P5669, $P5668["trait"]
    unless_null $P5669, vivify_2642
    new $P5669, "Undef"
  vivify_2642:
    defined $I5670, $P5669
    unless $I5670, for_undef_2643
    iter $P5667, $P5669
    new $P5680, 'ExceptionHandler'
    set_label $P5680, loop5679_handler
    $P5680."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P5680
  loop5679_test:
    unless $P5667, loop5679_done
    shift $P5671, $P5667
  loop5679_redo:
    .const 'Sub' $P5673 = "546_1307835824.98345" 
    capture_lex $P5673
    $P5673($P5671)
  loop5679_next:
    goto loop5679_test
  loop5679_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P5681, exception, 'type'
    eq $P5681, .CONTROL_LOOP_NEXT, loop5679_next
    eq $P5681, .CONTROL_LOOP_REDO, loop5679_redo
  loop5679_done:
    pop_eh 
  for_undef_2643:
  if_5664_end:
.annotate 'line', 2005
    find_lex $P5682, "$/"
    find_lex $P5683, "$past"
    unless_null $P5683, vivify_2646
    new $P5683, "Undef"
  vivify_2646:
    $P5684 = $P5682."!make"($P5683)
.annotate 'line', 1883
    .return ($P5684)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block5381"  :anon :subid("541_1307835824.98345") :outer("540_1307835824.98345")
.annotate 'line', 1899
    .const 'Sub' $P5536 = "545_1307835824.98345" 
    capture_lex $P5536
    .const 'Sub' $P5423 = "542_1307835824.98345" 
    capture_lex $P5423
.annotate 'line', 1900
    new $P5383, "Undef"
    .lex "$name", $P5383
    find_lex $P5384, "$/"
    unless_null $P5384, vivify_2532
    $P5384 = root_new ['parrot';'Hash']
  vivify_2532:
    set $P5385, $P5384["sigil"]
    unless_null $P5385, vivify_2533
    $P5385 = root_new ['parrot';'ResizablePMCArray']
  vivify_2533:
    set $P5386, $P5385[0]
    unless_null $P5386, vivify_2534
    new $P5386, "Undef"
  vivify_2534:
    set $S5387, $P5386
    new $P5388, 'String'
    set $P5388, $S5387
    find_lex $P5389, "$/"
    unless_null $P5389, vivify_2535
    $P5389 = root_new ['parrot';'Hash']
  vivify_2535:
    set $P5390, $P5389["deflongname"]
    unless_null $P5390, vivify_2536
    $P5390 = root_new ['parrot';'ResizablePMCArray']
  vivify_2536:
    set $P5391, $P5390[0]
    unless_null $P5391, vivify_2537
    new $P5391, "Undef"
  vivify_2537:
    $S5392 = $P5391."ast"()
    concat $P5393, $P5388, $S5392
    store_lex "$name", $P5393
.annotate 'line', 1901
    find_lex $P5394, "$past"
    unless_null $P5394, vivify_2538
    new $P5394, "Undef"
  vivify_2538:
    find_lex $P5395, "$name"
    unless_null $P5395, vivify_2539
    new $P5395, "Undef"
  vivify_2539:
    $P5394."name"($P5395)
.annotate 'line', 1902
    find_dynamic_lex $P5403, "$*SCOPE"
    unless_null $P5403, vivify_2540
    get_hll_global $P5401, "GLOBAL"
    get_who $P5402, $P5401
    set $P5403, $P5402["$SCOPE"]
    unless_null $P5403, vivify_2541
    die "Contextual $*SCOPE not found"
  vivify_2541:
  vivify_2540:
    set $S5404, $P5403
    iseq $I5405, $S5404, ""
    unless $I5405, unless_5400
    new $P5399, 'Integer'
    set $P5399, $I5405
    goto unless_5400_end
  unless_5400:
    find_dynamic_lex $P5408, "$*SCOPE"
    unless_null $P5408, vivify_2542
    get_hll_global $P5406, "GLOBAL"
    get_who $P5407, $P5406
    set $P5408, $P5407["$SCOPE"]
    unless_null $P5408, vivify_2543
    die "Contextual $*SCOPE not found"
  vivify_2543:
  vivify_2542:
    set $S5409, $P5408
    iseq $I5410, $S5409, "my"
    new $P5399, 'Integer'
    set $P5399, $I5410
  unless_5400_end:
    unless $P5399, unless_5398
    set $P5397, $P5399
    goto unless_5398_end
  unless_5398:
    find_dynamic_lex $P5413, "$*SCOPE"
    unless_null $P5413, vivify_2544
    get_hll_global $P5411, "GLOBAL"
    get_who $P5412, $P5411
    set $P5413, $P5412["$SCOPE"]
    unless_null $P5413, vivify_2545
    die "Contextual $*SCOPE not found"
  vivify_2545:
  vivify_2544:
    set $S5414, $P5413
    iseq $I5415, $S5414, "our"
    new $P5397, 'Integer'
    set $P5397, $I5415
  unless_5398_end:
    if $P5397, if_5396
.annotate 'line', 1990
    find_lex $P5643, "$/"
    unless_null $P5643, vivify_2546
    new $P5643, "Undef"
  vivify_2546:
    $P5644 = $P5643."CURSOR"()
    find_dynamic_lex $P5647, "$*SCOPE"
    unless_null $P5647, vivify_2547
    get_hll_global $P5645, "GLOBAL"
    get_who $P5646, $P5645
    set $P5647, $P5646["$SCOPE"]
    unless_null $P5647, vivify_2548
    die "Contextual $*SCOPE not found"
  vivify_2548:
  vivify_2547:
    concat $P5648, $P5647, " scoped routines are not supported yet"
    $P5644."panic"($P5648)
.annotate 'line', 1989
    goto if_5396_end
  if_5396:
.annotate 'line', 1903
    find_dynamic_lex $P5419, "$*MULTINESS"
    unless_null $P5419, vivify_2549
    get_hll_global $P5417, "GLOBAL"
    get_who $P5418, $P5417
    set $P5419, $P5418["$MULTINESS"]
    unless_null $P5419, vivify_2550
    die "Contextual $*MULTINESS not found"
  vivify_2550:
  vivify_2549:
    set $S5420, $P5419
    iseq $I5421, $S5420, "multi"
    if $I5421, if_5416
.annotate 'line', 1954
    find_dynamic_lex $P5532, "$*MULTINESS"
    unless_null $P5532, vivify_2551
    get_hll_global $P5530, "GLOBAL"
    get_who $P5531, $P5530
    set $P5532, $P5531["$MULTINESS"]
    unless_null $P5532, vivify_2552
    die "Contextual $*MULTINESS not found"
  vivify_2552:
  vivify_2551:
    set $S5533, $P5532
    iseq $I5534, $S5533, "proto"
    if $I5534, if_5529
.annotate 'line', 1973
    find_lex $P5586, "$?PACKAGE"
    get_who $P5587, $P5586
    set $P5588, $P5587["@BLOCK"]
    unless_null $P5588, vivify_2553
    $P5588 = root_new ['parrot';'ResizablePMCArray']
  vivify_2553:
    set $P5589, $P5588[0]
    unless_null $P5589, vivify_2554
    $P5589 = root_new ['parrot';'ResizablePMCArray']
  vivify_2554:
    set $P5590, $P5589[0]
    unless_null $P5590, vivify_2555
    new $P5590, "Undef"
  vivify_2555:
    get_hll_global $P5591, "GLOBAL"
    nqp_get_package_through_who $P5592, $P5591, "PAST"
    get_who $P5593, $P5592
    set $P5594, $P5593["Var"]
    find_lex $P5595, "$name"
    unless_null $P5595, vivify_2556
    new $P5595, "Undef"
  vivify_2556:
    find_lex $P5596, "$past"
    unless_null $P5596, vivify_2557
    new $P5596, "Undef"
  vivify_2557:
    $P5597 = $P5594."new"($P5595 :named("name"), 1 :named("isdecl"), $P5596 :named("viviself"), "lexical" :named("scope"))
    $P5590."push"($P5597)
.annotate 'line', 1975
    find_lex $P5598, "$?PACKAGE"
    get_who $P5599, $P5598
    set $P5600, $P5599["@BLOCK"]
    unless_null $P5600, vivify_2558
    $P5600 = root_new ['parrot';'ResizablePMCArray']
  vivify_2558:
    set $P5601, $P5600[0]
    unless_null $P5601, vivify_2559
    new $P5601, "Undef"
  vivify_2559:
    find_lex $P5602, "$name"
    unless_null $P5602, vivify_2560
    new $P5602, "Undef"
  vivify_2560:
    $P5601."symbol"($P5602, "lexical" :named("scope"))
.annotate 'line', 1976
    find_dynamic_lex $P5606, "$*SCOPE"
    unless_null $P5606, vivify_2561
    get_hll_global $P5604, "GLOBAL"
    get_who $P5605, $P5604
    set $P5606, $P5605["$SCOPE"]
    unless_null $P5606, vivify_2562
    die "Contextual $*SCOPE not found"
  vivify_2562:
  vivify_2561:
    set $S5607, $P5606
    iseq $I5608, $S5607, "our"
    unless $I5608, if_5603_end
.annotate 'line', 1979
    find_dynamic_lex $P5611, "$*SC"
    unless_null $P5611, vivify_2563
    get_hll_global $P5609, "GLOBAL"
    get_who $P5610, $P5609
    set $P5611, $P5610["$SC"]
    unless_null $P5611, vivify_2564
    die "Contextual $*SC not found"
  vivify_2564:
  vivify_2563:
    find_dynamic_lex $P5614, "$*PACKAGE"
    unless_null $P5614, vivify_2565
    get_hll_global $P5612, "GLOBAL"
    get_who $P5613, $P5612
    set $P5614, $P5613["$PACKAGE"]
    unless_null $P5614, vivify_2566
    die "Contextual $*PACKAGE not found"
  vivify_2566:
  vivify_2565:
    find_lex $P5615, "$name"
    unless_null $P5615, vivify_2567
    new $P5615, "Undef"
  vivify_2567:
    find_lex $P5616, "$past"
    unless_null $P5616, vivify_2568
    new $P5616, "Undef"
  vivify_2568:
    $P5611."install_package_routine"($P5614, $P5615, $P5616)
.annotate 'line', 1980
    find_lex $P5617, "$?PACKAGE"
    get_who $P5618, $P5617
    set $P5619, $P5618["@BLOCK"]
    unless_null $P5619, vivify_2569
    $P5619 = root_new ['parrot';'ResizablePMCArray']
  vivify_2569:
    set $P5620, $P5619[0]
    unless_null $P5620, vivify_2570
    $P5620 = root_new ['parrot';'ResizablePMCArray']
  vivify_2570:
    set $P5621, $P5620[0]
    unless_null $P5621, vivify_2571
    new $P5621, "Undef"
  vivify_2571:
    get_hll_global $P5622, "GLOBAL"
    nqp_get_package_through_who $P5623, $P5622, "PAST"
    get_who $P5624, $P5623
    set $P5625, $P5624["Op"]
.annotate 'line', 1982
    find_lex $P5626, "$name"
    unless_null $P5626, vivify_2572
    new $P5626, "Undef"
  vivify_2572:
    new $P5627, "ResizablePMCArray"
    push $P5627, $P5626
    find_lex $P5628, "$/"
    unless_null $P5628, vivify_2573
    new $P5628, "Undef"
  vivify_2573:
    $P5629 = "lexical_package_lookup"($P5627, $P5628)
.annotate 'line', 1983
    get_hll_global $P5630, "GLOBAL"
    nqp_get_package_through_who $P5631, $P5630, "PAST"
    get_who $P5632, $P5631
    set $P5633, $P5632["Var"]
    find_lex $P5634, "$name"
    unless_null $P5634, vivify_2574
    new $P5634, "Undef"
  vivify_2574:
    $P5635 = $P5633."new"($P5634 :named("name"), "lexical" :named("scope"))
    $P5636 = $P5625."new"($P5629, $P5635, "bind_6model" :named("pasttype"))
.annotate 'line', 1980
    $P5621."push"($P5636)
  if_5603_end:
.annotate 'line', 1972
    goto if_5529_end
  if_5529:
.annotate 'line', 1954
    .const 'Sub' $P5536 = "545_1307835824.98345" 
    capture_lex $P5536
    $P5536()
  if_5529_end:
    goto if_5416_end
  if_5416:
.annotate 'line', 1903
    .const 'Sub' $P5423 = "542_1307835824.98345" 
    capture_lex $P5423
    $P5423()
  if_5416_end:
.annotate 'line', 1987
    get_hll_global $P5637, "GLOBAL"
    nqp_get_package_through_who $P5638, $P5637, "PAST"
    get_who $P5639, $P5638
    set $P5640, $P5639["Var"]
    find_lex $P5641, "$name"
    unless_null $P5641, vivify_2632
    new $P5641, "Undef"
  vivify_2632:
    $P5642 = $P5640."new"($P5641 :named("name"))
    store_lex "$past", $P5642
  if_5396_end:
.annotate 'line', 1994
    find_lex $P5653, "$name"
    unless_null $P5653, vivify_2633
    new $P5653, "Undef"
  vivify_2633:
    set $S5654, $P5653
    iseq $I5655, $S5654, "MAIN"
    if $I5655, if_5652
    new $P5651, 'Integer'
    set $P5651, $I5655
    goto if_5652_end
  if_5652:
    find_dynamic_lex $P5658, "$*MULTINESS"
    unless_null $P5658, vivify_2634
    get_hll_global $P5656, "GLOBAL"
    get_who $P5657, $P5656
    set $P5658, $P5657["$MULTINESS"]
    unless_null $P5658, vivify_2635
    die "Contextual $*MULTINESS not found"
  vivify_2635:
  vivify_2634:
    set $S5659, $P5658
    isne $I5660, $S5659, "multi"
    new $P5651, 'Integer'
    set $P5651, $I5660
  if_5652_end:
    if $P5651, if_5650
    set $P5649, $P5651
    goto if_5650_end
  if_5650:
.annotate 'line', 1995
    find_lex $P5661, "$block"
    unless_null $P5661, vivify_2636
    new $P5661, "Undef"
  vivify_2636:
    store_dynamic_lex "$*MAIN_SUB", $P5661
.annotate 'line', 1994
    set $P5649, $P5661
  if_5650_end:
.annotate 'line', 1899
    .return ($P5649)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block5535"  :anon :subid("545_1307835824.98345") :outer("541_1307835824.98345")
.annotate 'line', 1959
    new $P5537, "Undef"
    .lex "$cholder", $P5537
.annotate 'line', 1958
    find_dynamic_lex $P5541, "$*SCOPE"
    unless_null $P5541, vivify_2575
    get_hll_global $P5539, "GLOBAL"
    get_who $P5540, $P5539
    set $P5541, $P5540["$SCOPE"]
    unless_null $P5541, vivify_2576
    die "Contextual $*SCOPE not found"
  vivify_2576:
  vivify_2575:
    set $S5542, $P5541
    iseq $I5543, $S5542, "our"
    unless $I5543, if_5538_end
    die "our-scoped protos not yet implemented"
  if_5538_end:
.annotate 'line', 1959
    get_hll_global $P5544, "GLOBAL"
    nqp_get_package_through_who $P5545, $P5544, "PAST"
    get_who $P5546, $P5545
    set $P5547, $P5546["Op"]
    $P5548 = $P5547."new"("list" :named("pasttype"))
    store_lex "$cholder", $P5548
.annotate 'line', 1960
    find_lex $P5549, "$?PACKAGE"
    get_who $P5550, $P5549
    set $P5551, $P5550["@BLOCK"]
    unless_null $P5551, vivify_2577
    $P5551 = root_new ['parrot';'ResizablePMCArray']
  vivify_2577:
    set $P5552, $P5551[0]
    unless_null $P5552, vivify_2578
    $P5552 = root_new ['parrot';'ResizablePMCArray']
  vivify_2578:
    set $P5553, $P5552[0]
    unless_null $P5553, vivify_2579
    new $P5553, "Undef"
  vivify_2579:
    get_hll_global $P5554, "GLOBAL"
    nqp_get_package_through_who $P5555, $P5554, "PAST"
    get_who $P5556, $P5555
    set $P5557, $P5556["Var"]
    find_lex $P5558, "$name"
    unless_null $P5558, vivify_2580
    new $P5558, "Undef"
  vivify_2580:
    find_lex $P5559, "$past"
    unless_null $P5559, vivify_2581
    new $P5559, "Undef"
  vivify_2581:
    $P5560 = $P5557."new"($P5558 :named("name"), 1 :named("isdecl"), $P5559 :named("viviself"), "lexical" :named("scope"))
    $P5553."push"($P5560)
.annotate 'line', 1962
    find_lex $P5561, "$?PACKAGE"
    get_who $P5562, $P5561
    set $P5563, $P5562["@BLOCK"]
    unless_null $P5563, vivify_2582
    $P5563 = root_new ['parrot';'ResizablePMCArray']
  vivify_2582:
    set $P5564, $P5563[0]
    unless_null $P5564, vivify_2583
    $P5564 = root_new ['parrot';'ResizablePMCArray']
  vivify_2583:
    set $P5565, $P5564[0]
    unless_null $P5565, vivify_2584
    new $P5565, "Undef"
  vivify_2584:
    get_hll_global $P5566, "GLOBAL"
    nqp_get_package_through_who $P5567, $P5566, "PAST"
    get_who $P5568, $P5567
    set $P5569, $P5568["Op"]
.annotate 'line', 1964
    get_hll_global $P5570, "GLOBAL"
    nqp_get_package_through_who $P5571, $P5570, "PAST"
    get_who $P5572, $P5571
    set $P5573, $P5572["Var"]
    find_lex $P5574, "$name"
    unless_null $P5574, vivify_2585
    new $P5574, "Undef"
  vivify_2585:
    $P5575 = $P5573."new"($P5574 :named("name"))
    find_lex $P5576, "$cholder"
    unless_null $P5576, vivify_2586
    new $P5576, "Undef"
  vivify_2586:
    $P5577 = $P5569."new"($P5575, $P5576, "set_dispatchees 0PP" :named("pirop"))
.annotate 'line', 1962
    $P5565."push"($P5577)
.annotate 'line', 1967
    find_lex $P5578, "$?PACKAGE"
    get_who $P5579, $P5578
    set $P5580, $P5579["@BLOCK"]
    unless_null $P5580, vivify_2587
    $P5580 = root_new ['parrot';'ResizablePMCArray']
  vivify_2587:
    set $P5581, $P5580[0]
    unless_null $P5581, vivify_2588
    new $P5581, "Undef"
  vivify_2588:
    find_lex $P5582, "$name"
    unless_null $P5582, vivify_2589
    new $P5582, "Undef"
  vivify_2589:
    find_lex $P5583, "$cholder"
    unless_null $P5583, vivify_2590
    new $P5583, "Undef"
  vivify_2590:
    $P5581."symbol"($P5582, "lexical" :named("scope"), 1 :named("proto"), $P5583 :named("cholder"))
.annotate 'line', 1970
    find_lex $P5584, "$past"
    unless_null $P5584, vivify_2591
    new $P5584, "Undef"
  vivify_2591:
    $P5585 = $P5584."pirflags"(":instanceof(\"DispatcherSub\")")
.annotate 'line', 1954
    .return ($P5585)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block5422"  :anon :subid("542_1307835824.98345") :outer("541_1307835824.98345")
.annotate 'line', 1903
    .const 'Sub' $P5445 = "543_1307835824.98345" 
    capture_lex $P5445
.annotate 'line', 1906
    new $P5424, "Undef"
    .lex "$cholder", $P5424
.annotate 'line', 1907
    $P5425 = root_new ['parrot';'Hash']
    .lex "%sym", $P5425
.annotate 'line', 1905
    find_dynamic_lex $P5429, "$*SCOPE"
    unless_null $P5429, vivify_2592
    get_hll_global $P5427, "GLOBAL"
    get_who $P5428, $P5427
    set $P5429, $P5428["$SCOPE"]
    unless_null $P5429, vivify_2593
    die "Contextual $*SCOPE not found"
  vivify_2593:
  vivify_2592:
    set $S5430, $P5429
    iseq $I5431, $S5430, "our"
    unless $I5431, if_5426_end
    die "our-scoped multis not yet implemented"
  if_5426_end:
    find_lex $P5432, "$cholder"
    unless_null $P5432, vivify_2594
    new $P5432, "Undef"
  vivify_2594:
.annotate 'line', 1907
    find_lex $P5433, "$?PACKAGE"
    get_who $P5434, $P5433
    set $P5435, $P5434["@BLOCK"]
    unless_null $P5435, vivify_2595
    $P5435 = root_new ['parrot';'ResizablePMCArray']
  vivify_2595:
    set $P5436, $P5435[0]
    unless_null $P5436, vivify_2596
    new $P5436, "Undef"
  vivify_2596:
    find_lex $P5437, "$name"
    unless_null $P5437, vivify_2597
    new $P5437, "Undef"
  vivify_2597:
    $P5438 = $P5436."symbol"($P5437)
    store_lex "%sym", $P5438
.annotate 'line', 1908
    find_lex $P5440, "%sym"
    unless_null $P5440, vivify_2598
    $P5440 = root_new ['parrot';'Hash']
  vivify_2598:
    set $P5441, $P5440["cholder"]
    unless_null $P5441, vivify_2599
    new $P5441, "Undef"
  vivify_2599:
    if $P5441, if_5439
.annotate 'line', 1913
    .const 'Sub' $P5445 = "543_1307835824.98345" 
    capture_lex $P5445
    $P5445()
    goto if_5439_end
  if_5439:
.annotate 'line', 1909
    find_lex $P5442, "%sym"
    unless_null $P5442, vivify_2627
    $P5442 = root_new ['parrot';'Hash']
  vivify_2627:
    set $P5443, $P5442["cholder"]
    unless_null $P5443, vivify_2628
    new $P5443, "Undef"
  vivify_2628:
    store_lex "$cholder", $P5443
  if_5439_end:
.annotate 'line', 1949
    find_lex $P5525, "$cholder"
    unless_null $P5525, vivify_2629
    new $P5525, "Undef"
  vivify_2629:
    find_lex $P5526, "$past"
    unless_null $P5526, vivify_2630
    new $P5526, "Undef"
  vivify_2630:
    $P5525."push"($P5526)
.annotate 'line', 1952
    find_lex $P5527, "$past"
    unless_null $P5527, vivify_2631
    new $P5527, "Undef"
  vivify_2631:
    $P5528 = "attach_multi_signature"($P5527)
.annotate 'line', 1903
    .return ($P5528)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block5444"  :anon :subid("543_1307835824.98345") :outer("542_1307835824.98345")
.annotate 'line', 1913
    .const 'Sub' $P5461 = "544_1307835824.98345" 
    capture_lex $P5461
.annotate 'line', 1920
    new $P5446, "Undef"
    .lex "$found_proto", $P5446
.annotate 'line', 1938
    new $P5447, "Undef"
    .lex "$dispatch_setup", $P5447
.annotate 'line', 1915
    find_lex $P5449, "%sym"
    unless_null $P5449, vivify_2600
    $P5449 = root_new ['parrot';'Hash']
  vivify_2600:
    set $P5450, $P5449["proto"]
    unless_null $P5450, vivify_2601
    new $P5450, "Undef"
  vivify_2601:
    unless $P5450, if_5448_end
.annotate 'line', 1918
    find_lex $P5451, "$/"
    unless_null $P5451, vivify_2602
    new $P5451, "Undef"
  vivify_2602:
    $P5452 = $P5451."CURSOR"()
    $P5452."panic"("Internal Error: Current scope has a proto, but no candidate list holder was set up. (This should never happen.)")
  if_5448_end:
.annotate 'line', 1915
    find_lex $P5453, "$found_proto"
    unless_null $P5453, vivify_2603
    new $P5453, "Undef"
  vivify_2603:
.annotate 'line', 1921
    find_lex $P5455, "$?PACKAGE"
    get_who $P5456, $P5455
    set $P5457, $P5456["@BLOCK"]
    unless_null $P5457, vivify_2604
    $P5457 = root_new ['parrot';'ResizablePMCArray']
  vivify_2604:
    defined $I5458, $P5457
    unless $I5458, for_undef_2605
    iter $P5454, $P5457
    new $P5483, 'ExceptionHandler'
    set_label $P5483, loop5482_handler
    $P5483."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P5483
  loop5482_test:
    unless $P5454, loop5482_done
    shift $P5459, $P5454
  loop5482_redo:
    .const 'Sub' $P5461 = "544_1307835824.98345" 
    capture_lex $P5461
    $P5461($P5459)
  loop5482_next:
    goto loop5482_test
  loop5482_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P5484, exception, 'type'
    eq $P5484, .CONTROL_LOOP_NEXT, loop5482_next
    eq $P5484, .CONTROL_LOOP_REDO, loop5482_redo
  loop5482_done:
    pop_eh 
  for_undef_2605:
.annotate 'line', 1932
    find_lex $P5486, "$found_proto"
    unless_null $P5486, vivify_2614
    new $P5486, "Undef"
  vivify_2614:
    if $P5486, unless_5485_end
.annotate 'line', 1933
    find_lex $P5487, "$/"
    unless_null $P5487, vivify_2615
    new $P5487, "Undef"
  vivify_2615:
    $P5488 = $P5487."CURSOR"()
    $P5488."panic"("Sorry, no proto sub in scope, and auto-generation of protos is not yet implemented.")
  unless_5485_end:
.annotate 'line', 1937
    get_hll_global $P5489, "GLOBAL"
    nqp_get_package_through_who $P5490, $P5489, "PAST"
    get_who $P5491, $P5490
    set $P5492, $P5491["Op"]
    $P5493 = $P5492."new"("list" :named("pasttype"))
    store_lex "$cholder", $P5493
.annotate 'line', 1938
    get_hll_global $P5494, "GLOBAL"
    nqp_get_package_through_who $P5495, $P5494, "PAST"
    get_who $P5496, $P5495
    set $P5497, $P5496["Op"]
.annotate 'line', 1940
    get_hll_global $P5498, "GLOBAL"
    nqp_get_package_through_who $P5499, $P5498, "PAST"
    get_who $P5500, $P5499
    set $P5501, $P5500["Var"]
    find_lex $P5502, "$name"
    unless_null $P5502, vivify_2616
    new $P5502, "Undef"
  vivify_2616:
    $P5503 = $P5501."new"($P5502 :named("name"), "outer" :named("scope"))
    find_lex $P5504, "$cholder"
    unless_null $P5504, vivify_2617
    new $P5504, "Undef"
  vivify_2617:
    $P5505 = $P5497."new"($P5503, $P5504, "create_dispatch_and_add_candidates PPP" :named("pirop"))
.annotate 'line', 1938
    store_lex "$dispatch_setup", $P5505
.annotate 'line', 1943
    find_lex $P5506, "$?PACKAGE"
    get_who $P5507, $P5506
    set $P5508, $P5507["@BLOCK"]
    unless_null $P5508, vivify_2618
    $P5508 = root_new ['parrot';'ResizablePMCArray']
  vivify_2618:
    set $P5509, $P5508[0]
    unless_null $P5509, vivify_2619
    $P5509 = root_new ['parrot';'ResizablePMCArray']
  vivify_2619:
    set $P5510, $P5509[0]
    unless_null $P5510, vivify_2620
    new $P5510, "Undef"
  vivify_2620:
    get_hll_global $P5511, "GLOBAL"
    nqp_get_package_through_who $P5512, $P5511, "PAST"
    get_who $P5513, $P5512
    set $P5514, $P5513["Var"]
    find_lex $P5515, "$name"
    unless_null $P5515, vivify_2621
    new $P5515, "Undef"
  vivify_2621:
    find_lex $P5516, "$dispatch_setup"
    unless_null $P5516, vivify_2622
    new $P5516, "Undef"
  vivify_2622:
    $P5517 = $P5514."new"($P5515 :named("name"), 1 :named("isdecl"), $P5516 :named("viviself"), "lexical" :named("scope"))
    $P5510."push"($P5517)
.annotate 'line', 1945
    find_lex $P5518, "$?PACKAGE"
    get_who $P5519, $P5518
    set $P5520, $P5519["@BLOCK"]
    unless_null $P5520, vivify_2623
    $P5520 = root_new ['parrot';'ResizablePMCArray']
  vivify_2623:
    set $P5521, $P5520[0]
    unless_null $P5521, vivify_2624
    new $P5521, "Undef"
  vivify_2624:
    find_lex $P5522, "$name"
    unless_null $P5522, vivify_2625
    new $P5522, "Undef"
  vivify_2625:
    find_lex $P5523, "$cholder"
    unless_null $P5523, vivify_2626
    new $P5523, "Undef"
  vivify_2626:
    $P5524 = $P5521."symbol"($P5522, "lexical" :named("scope"), $P5523 :named("cholder"))
.annotate 'line', 1913
    .return ($P5524)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block5460"  :anon :subid("544_1307835824.98345") :outer("543_1307835824.98345")
    .param pmc param_5463
.annotate 'line', 1922
    $P5462 = root_new ['parrot';'Hash']
    .lex "%sym", $P5462
    .lex "$_", param_5463
    find_lex $P5464, "$_"
    unless_null $P5464, vivify_2606
    new $P5464, "Undef"
  vivify_2606:
    find_lex $P5465, "$name"
    unless_null $P5465, vivify_2607
    new $P5465, "Undef"
  vivify_2607:
    $P5466 = $P5464."symbol"($P5465)
    store_lex "%sym", $P5466
.annotate 'line', 1923
    find_lex $P5471, "%sym"
    unless_null $P5471, vivify_2608
    $P5471 = root_new ['parrot';'Hash']
  vivify_2608:
    set $P5472, $P5471["proto"]
    unless_null $P5472, vivify_2609
    new $P5472, "Undef"
  vivify_2609:
    unless $P5472, unless_5470
    set $P5469, $P5472
    goto unless_5470_end
  unless_5470:
    find_lex $P5473, "%sym"
    unless_null $P5473, vivify_2610
    $P5473 = root_new ['parrot';'Hash']
  vivify_2610:
    set $P5474, $P5473["cholder"]
    unless_null $P5474, vivify_2611
    new $P5474, "Undef"
  vivify_2611:
    set $P5469, $P5474
  unless_5470_end:
    if $P5469, if_5468
.annotate 'line', 1926
    find_lex $P5478, "%sym"
    unless_null $P5478, vivify_2612
    $P5478 = root_new ['parrot';'Hash']
  vivify_2612:
    if $P5478, if_5477
    set $P5476, $P5478
    goto if_5477_end
  if_5477:
.annotate 'line', 1927
    find_lex $P5479, "$/"
    unless_null $P5479, vivify_2613
    new $P5479, "Undef"
  vivify_2613:
    $P5480 = $P5479."CURSOR"()
    $P5481 = $P5480."panic"("Cannot declare a multi when an only is already in scope.")
.annotate 'line', 1926
    set $P5476, $P5481
  if_5477_end:
    set $P5467, $P5476
.annotate 'line', 1923
    goto if_5468_end
  if_5468:
.annotate 'line', 1924
    new $P5475, "Integer"
    assign $P5475, 1
    store_lex "$found_proto", $P5475
.annotate 'line', 1923
    set $P5467, $P5475
  if_5468_end:
.annotate 'line', 1921
    .return ($P5467)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block5672"  :anon :subid("546_1307835824.98345") :outer("540_1307835824.98345")
    .param pmc param_5674
.annotate 'line', 2002
    .lex "$_", param_5674
    find_lex $P5675, "$_"
    unless_null $P5675, vivify_2644
    new $P5675, "Undef"
  vivify_2644:
    $P5676 = $P5675."ast"()
    find_lex $P5677, "$/"
    unless_null $P5677, vivify_2645
    new $P5677, "Undef"
  vivify_2645:
    $P5678 = $P5676($P5677)
    .return ($P5678)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "method_def" :anon :subid("547_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_5686
    .param pmc param_5687
.annotate 'line', 2009
    .const 'Sub' $P5816 = "549_1307835824.98345" 
    capture_lex $P5816
    .const 'Sub' $P5725 = "548_1307835824.98345" 
    capture_lex $P5725
    .lex "self", param_5686
    .lex "$/", param_5687
.annotate 'line', 2012
    new $P5688, "Undef"
    .lex "$past", $P5688
.annotate 'line', 2009
    find_lex $P5689, "$past"
    unless_null $P5689, vivify_2647
    new $P5689, "Undef"
  vivify_2647:
.annotate 'line', 2013
    find_lex $P5691, "$/"
    unless_null $P5691, vivify_2648
    $P5691 = root_new ['parrot';'Hash']
  vivify_2648:
    set $P5692, $P5691["onlystar"]
    unless_null $P5692, vivify_2649
    new $P5692, "Undef"
  vivify_2649:
    if $P5692, if_5690
.annotate 'line', 2017
    find_lex $P5694, "$/"
    unless_null $P5694, vivify_2650
    $P5694 = root_new ['parrot';'Hash']
  vivify_2650:
    set $P5695, $P5694["blockoid"]
    unless_null $P5695, vivify_2651
    new $P5695, "Undef"
  vivify_2651:
    $P5696 = $P5695."ast"()
    store_lex "$past", $P5696
.annotate 'line', 2018
    find_lex $P5697, "$past"
    unless_null $P5697, vivify_2652
    new $P5697, "Undef"
  vivify_2652:
    $P5697."blocktype"("declaration")
.annotate 'line', 2019
    find_dynamic_lex $P5701, "$*RETURN_USED"
    unless_null $P5701, vivify_2653
    get_hll_global $P5699, "GLOBAL"
    get_who $P5700, $P5699
    set $P5701, $P5700["$RETURN_USED"]
    unless_null $P5701, vivify_2654
    die "Contextual $*RETURN_USED not found"
  vivify_2654:
  vivify_2653:
    unless $P5701, if_5698_end
.annotate 'line', 2020
    find_lex $P5702, "$past"
    unless_null $P5702, vivify_2655
    new $P5702, "Undef"
  vivify_2655:
    $P5702."control"("return_pir")
  if_5698_end:
.annotate 'line', 2016
    goto if_5690_end
  if_5690:
.annotate 'line', 2014
    $P5693 = "only_star_block"()
    store_lex "$past", $P5693
  if_5690_end:
.annotate 'line', 2025
    find_lex $P5704, "$past"
    unless_null $P5704, vivify_2656
    $P5704 = root_new ['parrot';'Hash']
  vivify_2656:
    set $P5705, $P5704["signature_has_invocant"]
    unless_null $P5705, vivify_2657
    new $P5705, "Undef"
  vivify_2657:
    if $P5705, unless_5703_end
.annotate 'line', 2026
    find_lex $P5706, "$past"
    unless_null $P5706, vivify_2658
    $P5706 = root_new ['parrot';'ResizablePMCArray']
  vivify_2658:
    set $P5707, $P5706[0]
    unless_null $P5707, vivify_2659
    new $P5707, "Undef"
  vivify_2659:
    get_hll_global $P5708, "GLOBAL"
    nqp_get_package_through_who $P5709, $P5708, "PAST"
    get_who $P5710, $P5709
    set $P5711, $P5710["Var"]
.annotate 'line', 2028
    find_dynamic_lex $P5714, "$*SC"
    unless_null $P5714, vivify_2660
    get_hll_global $P5712, "GLOBAL"
    get_who $P5713, $P5712
    set $P5714, $P5713["$SC"]
    unless_null $P5714, vivify_2661
    die "Contextual $*SC not found"
  vivify_2661:
  vivify_2660:
    find_dynamic_lex $P5717, "$*PACKAGE"
    unless_null $P5717, vivify_2662
    get_hll_global $P5715, "GLOBAL"
    get_who $P5716, $P5715
    set $P5717, $P5716["$PACKAGE"]
    unless_null $P5717, vivify_2663
    die "Contextual $*PACKAGE not found"
  vivify_2663:
  vivify_2662:
    $P5718 = $P5714."get_object_sc_ref_past"($P5717)
    $P5719 = $P5711."new"("self" :named("name"), "parameter" :named("scope"), $P5718 :named("multitype"))
.annotate 'line', 2026
    $P5707."unshift"($P5719)
  unless_5703_end:
.annotate 'line', 2031
    find_lex $P5720, "$past"
    unless_null $P5720, vivify_2664
    new $P5720, "Undef"
  vivify_2664:
    $P5720."symbol"("self", "lexical" :named("scope"))
.annotate 'line', 2034
    find_lex $P5722, "$/"
    unless_null $P5722, vivify_2665
    $P5722 = root_new ['parrot';'Hash']
  vivify_2665:
    set $P5723, $P5722["deflongname"]
    unless_null $P5723, vivify_2666
    new $P5723, "Undef"
  vivify_2666:
    unless $P5723, if_5721_end
    .const 'Sub' $P5725 = "548_1307835824.98345" 
    capture_lex $P5725
    $P5725()
  if_5721_end:
.annotate 'line', 2061
    find_lex $P5802, "$/"
    find_lex $P5803, "$past"
    unless_null $P5803, vivify_2701
    new $P5803, "Undef"
  vivify_2701:
    $P5802."!make"($P5803)
.annotate 'line', 2062
    find_lex $P5804, "$past"
    unless_null $P5804, vivify_2702
    new $P5804, "Undef"
  vivify_2702:
    find_lex $P5805, "$past"
    unless_null $P5805, vivify_2703
    $P5805 = root_new ['parrot';'Hash']
    store_lex "$past", $P5805
  vivify_2703:
    set $P5805["block_past"], $P5804
.annotate 'line', 2063
    find_lex $P5808, "$/"
    unless_null $P5808, vivify_2704
    $P5808 = root_new ['parrot';'Hash']
  vivify_2704:
    set $P5809, $P5808["trait"]
    unless_null $P5809, vivify_2705
    new $P5809, "Undef"
  vivify_2705:
    if $P5809, if_5807
    set $P5806, $P5809
    goto if_5807_end
  if_5807:
.annotate 'line', 2064
    find_lex $P5811, "$/"
    unless_null $P5811, vivify_2706
    $P5811 = root_new ['parrot';'Hash']
  vivify_2706:
    set $P5812, $P5811["trait"]
    unless_null $P5812, vivify_2707
    new $P5812, "Undef"
  vivify_2707:
    defined $I5813, $P5812
    unless $I5813, for_undef_2708
    iter $P5810, $P5812
    new $P5823, 'ExceptionHandler'
    set_label $P5823, loop5822_handler
    $P5823."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P5823
  loop5822_test:
    unless $P5810, loop5822_done
    shift $P5814, $P5810
  loop5822_redo:
    .const 'Sub' $P5816 = "549_1307835824.98345" 
    capture_lex $P5816
    $P5816($P5814)
  loop5822_next:
    goto loop5822_test
  loop5822_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P5824, exception, 'type'
    eq $P5824, .CONTROL_LOOP_NEXT, loop5822_next
    eq $P5824, .CONTROL_LOOP_REDO, loop5822_redo
  loop5822_done:
    pop_eh 
  for_undef_2708:
.annotate 'line', 2063
    set $P5806, $P5810
  if_5807_end:
.annotate 'line', 2009
    .return ($P5806)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block5724"  :anon :subid("548_1307835824.98345") :outer("547_1307835824.98345")
.annotate 'line', 2036
    new $P5726, "Undef"
    .lex "$name", $P5726
.annotate 'line', 2044
    new $P5727, "Undef"
    .lex "$meta_meth", $P5727
.annotate 'line', 2045
    new $P5728, "Undef"
    .lex "$is_dispatcher", $P5728
.annotate 'line', 2036
    find_lex $P5729, "$/"
    unless_null $P5729, vivify_2667
    $P5729 = root_new ['parrot';'Hash']
  vivify_2667:
    set $P5730, $P5729["private"]
    unless_null $P5730, vivify_2668
    new $P5730, "Undef"
  vivify_2668:
    set $S5731, $P5730
    new $P5732, 'String'
    set $P5732, $S5731
    find_lex $P5733, "$/"
    unless_null $P5733, vivify_2669
    $P5733 = root_new ['parrot';'Hash']
  vivify_2669:
    set $P5734, $P5733["deflongname"]
    unless_null $P5734, vivify_2670
    $P5734 = root_new ['parrot';'ResizablePMCArray']
  vivify_2670:
    set $P5735, $P5734[0]
    unless_null $P5735, vivify_2671
    new $P5735, "Undef"
  vivify_2671:
    $P5736 = $P5735."ast"()
    set $S5737, $P5736
    concat $P5738, $P5732, $S5737
    store_lex "$name", $P5738
.annotate 'line', 2037
    find_lex $P5739, "$past"
    unless_null $P5739, vivify_2672
    new $P5739, "Undef"
  vivify_2672:
    find_lex $P5740, "$name"
    unless_null $P5740, vivify_2673
    new $P5740, "Undef"
  vivify_2673:
    $P5739."name"($P5740)
.annotate 'line', 2041
    find_dynamic_lex $P5744, "$*MULTINESS"
    unless_null $P5744, vivify_2674
    get_hll_global $P5742, "GLOBAL"
    get_who $P5743, $P5742
    set $P5744, $P5743["$MULTINESS"]
    unless_null $P5744, vivify_2675
    die "Contextual $*MULTINESS not found"
  vivify_2675:
  vivify_2674:
    set $S5745, $P5744
    iseq $I5746, $S5745, "multi"
    unless $I5746, if_5741_end
    find_lex $P5747, "$past"
    unless_null $P5747, vivify_2676
    new $P5747, "Undef"
  vivify_2676:
    "attach_multi_signature"($P5747)
  if_5741_end:
.annotate 'line', 2044
    find_dynamic_lex $P5752, "$*MULTINESS"
    unless_null $P5752, vivify_2677
    get_hll_global $P5750, "GLOBAL"
    get_who $P5751, $P5750
    set $P5752, $P5751["$MULTINESS"]
    unless_null $P5752, vivify_2678
    die "Contextual $*MULTINESS not found"
  vivify_2678:
  vivify_2677:
    set $S5753, $P5752
    iseq $I5754, $S5753, "multi"
    if $I5754, if_5749
    new $P5756, "String"
    assign $P5756, "add_method"
    set $P5748, $P5756
    goto if_5749_end
  if_5749:
    new $P5755, "String"
    assign $P5755, "add_multi_method"
    set $P5748, $P5755
  if_5749_end:
    store_lex "$meta_meth", $P5748
.annotate 'line', 2045
    find_dynamic_lex $P5759, "$*MULTINESS"
    unless_null $P5759, vivify_2679
    get_hll_global $P5757, "GLOBAL"
    get_who $P5758, $P5757
    set $P5759, $P5758["$MULTINESS"]
    unless_null $P5759, vivify_2680
    die "Contextual $*MULTINESS not found"
  vivify_2680:
  vivify_2679:
    set $S5760, $P5759
    iseq $I5761, $S5760, "proto"
    new $P5762, 'Integer'
    set $P5762, $I5761
    store_lex "$is_dispatcher", $P5762
.annotate 'line', 2046
    find_dynamic_lex $P5765, "$*SC"
    unless_null $P5765, vivify_2681
    get_hll_global $P5763, "GLOBAL"
    get_who $P5764, $P5763
    set $P5765, $P5764["$SC"]
    unless_null $P5765, vivify_2682
    die "Contextual $*SC not found"
  vivify_2682:
  vivify_2681:
    find_dynamic_lex $P5768, "$*PACKAGE"
    unless_null $P5768, vivify_2683
    get_hll_global $P5766, "GLOBAL"
    get_who $P5767, $P5766
    set $P5768, $P5767["$PACKAGE"]
    unless_null $P5768, vivify_2684
    die "Contextual $*PACKAGE not found"
  vivify_2684:
  vivify_2683:
    find_lex $P5769, "$meta_meth"
    unless_null $P5769, vivify_2685
    new $P5769, "Undef"
  vivify_2685:
    find_lex $P5770, "$name"
    unless_null $P5770, vivify_2686
    new $P5770, "Undef"
  vivify_2686:
    find_lex $P5771, "$past"
    unless_null $P5771, vivify_2687
    new $P5771, "Undef"
  vivify_2687:
    find_lex $P5772, "$is_dispatcher"
    unless_null $P5772, vivify_2688
    new $P5772, "Undef"
  vivify_2688:
    $P5765."pkg_add_method"($P5768, $P5769, $P5770, $P5771, $P5772)
.annotate 'line', 2049
    find_dynamic_lex $P5777, "$*SCOPE"
    unless_null $P5777, vivify_2689
    get_hll_global $P5775, "GLOBAL"
    get_who $P5776, $P5775
    set $P5777, $P5776["$SCOPE"]
    unless_null $P5777, vivify_2690
    die "Contextual $*SCOPE not found"
  vivify_2690:
  vivify_2689:
    set $S5778, $P5777
    iseq $I5779, $S5778, "our"
    if $I5779, if_5774
.annotate 'line', 2052
    find_lex $P5791, "$past"
    unless_null $P5791, vivify_2691
    new $P5791, "Undef"
  vivify_2691:
    $P5792 = $P5791."pirflags"()
    if $P5792, if_5790
.annotate 'line', 2055
    find_lex $P5800, "$past"
    unless_null $P5800, vivify_2692
    new $P5800, "Undef"
  vivify_2692:
    $P5801 = $P5800."pirflags"(":anon")
.annotate 'line', 2054
    set $P5789, $P5801
.annotate 'line', 2052
    goto if_5790_end
  if_5790:
.annotate 'line', 2053
    find_lex $P5793, "$past"
    unless_null $P5793, vivify_2693
    new $P5793, "Undef"
  vivify_2693:
    find_lex $P5794, "$past"
    unless_null $P5794, vivify_2694
    new $P5794, "Undef"
  vivify_2694:
    $P5795 = $P5794."pirflags"()
    set $S5796, $P5795
    new $P5797, 'String'
    set $P5797, $S5796
    concat $P5798, $P5797, ":anon"
    $P5799 = $P5793."pirflags"($P5798)
.annotate 'line', 2052
    set $P5789, $P5799
  if_5790_end:
.annotate 'line', 2051
    set $P5773, $P5789
.annotate 'line', 2049
    goto if_5774_end
  if_5774:
.annotate 'line', 2050
    find_dynamic_lex $P5782, "$*SC"
    unless_null $P5782, vivify_2695
    get_hll_global $P5780, "GLOBAL"
    get_who $P5781, $P5780
    set $P5782, $P5781["$SC"]
    unless_null $P5782, vivify_2696
    die "Contextual $*SC not found"
  vivify_2696:
  vivify_2695:
    find_dynamic_lex $P5785, "$*PACKAGE"
    unless_null $P5785, vivify_2697
    get_hll_global $P5783, "GLOBAL"
    get_who $P5784, $P5783
    set $P5785, $P5784["$PACKAGE"]
    unless_null $P5785, vivify_2698
    die "Contextual $*PACKAGE not found"
  vivify_2698:
  vivify_2697:
    find_lex $P5786, "$name"
    unless_null $P5786, vivify_2699
    new $P5786, "Undef"
  vivify_2699:
    find_lex $P5787, "$past"
    unless_null $P5787, vivify_2700
    new $P5787, "Undef"
  vivify_2700:
    $P5788 = $P5782."install_package_routine"($P5785, $P5786, $P5787)
.annotate 'line', 2049
    set $P5773, $P5788
  if_5774_end:
.annotate 'line', 2034
    .return ($P5773)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block5815"  :anon :subid("549_1307835824.98345") :outer("547_1307835824.98345")
    .param pmc param_5817
.annotate 'line', 2064
    .lex "$_", param_5817
    find_lex $P5818, "$_"
    unless_null $P5818, vivify_2709
    new $P5818, "Undef"
  vivify_2709:
    $P5819 = $P5818."ast"()
    find_lex $P5820, "$/"
    unless_null $P5820, vivify_2710
    new $P5820, "Undef"
  vivify_2710:
    $P5821 = $P5819($P5820)
    .return ($P5821)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "signature" :anon :subid("550_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_5828
    .param pmc param_5829
.annotate 'line', 2093
    .const 'Sub' $P5872 = "552_1307835824.98345" 
    capture_lex $P5872
    .const 'Sub' $P5840 = "551_1307835824.98345" 
    capture_lex $P5840
    .lex "self", param_5828
    .lex "$/", param_5829
.annotate 'line', 2094
    new $P5830, "Undef"
    .lex "$BLOCKINIT", $P5830
    find_lex $P5831, "$?PACKAGE"
    get_who $P5832, $P5831
    set $P5833, $P5832["@BLOCK"]
    unless_null $P5833, vivify_2711
    $P5833 = root_new ['parrot';'ResizablePMCArray']
  vivify_2711:
    set $P5834, $P5833[0]
    unless_null $P5834, vivify_2712
    $P5834 = root_new ['parrot';'ResizablePMCArray']
  vivify_2712:
    set $P5835, $P5834[0]
    unless_null $P5835, vivify_2713
    new $P5835, "Undef"
  vivify_2713:
    store_lex "$BLOCKINIT", $P5835
.annotate 'line', 2095
    find_lex $P5837, "$/"
    unless_null $P5837, vivify_2714
    $P5837 = root_new ['parrot';'Hash']
  vivify_2714:
    set $P5838, $P5837["invocant"]
    unless_null $P5838, vivify_2715
    new $P5838, "Undef"
  vivify_2715:
    unless $P5838, if_5836_end
    .const 'Sub' $P5840 = "551_1307835824.98345" 
    capture_lex $P5840
    $P5840()
  if_5836_end:
.annotate 'line', 2104
    find_lex $P5867, "$/"
    unless_null $P5867, vivify_2725
    $P5867 = root_new ['parrot';'Hash']
  vivify_2725:
    set $P5868, $P5867["parameter"]
    unless_null $P5868, vivify_2726
    new $P5868, "Undef"
  vivify_2726:
    defined $I5869, $P5868
    unless $I5869, for_undef_2727
    iter $P5866, $P5868
    new $P5879, 'ExceptionHandler'
    set_label $P5879, loop5878_handler
    $P5879."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P5879
  loop5878_test:
    unless $P5866, loop5878_done
    shift $P5870, $P5866
  loop5878_redo:
    .const 'Sub' $P5872 = "552_1307835824.98345" 
    capture_lex $P5872
    $P5872($P5870)
  loop5878_next:
    goto loop5878_test
  loop5878_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P5880, exception, 'type'
    eq $P5880, .CONTROL_LOOP_NEXT, loop5878_next
    eq $P5880, .CONTROL_LOOP_REDO, loop5878_redo
  loop5878_done:
    pop_eh 
  for_undef_2727:
.annotate 'line', 2093
    .return ($P5866)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block5839"  :anon :subid("551_1307835824.98345") :outer("550_1307835824.98345")
.annotate 'line', 2096
    new $P5841, "Undef"
    .lex "$inv", $P5841
    find_lex $P5842, "$/"
    unless_null $P5842, vivify_2716
    $P5842 = root_new ['parrot';'Hash']
  vivify_2716:
    set $P5843, $P5842["invocant"]
    unless_null $P5843, vivify_2717
    $P5843 = root_new ['parrot';'ResizablePMCArray']
  vivify_2717:
    set $P5844, $P5843[0]
    unless_null $P5844, vivify_2718
    new $P5844, "Undef"
  vivify_2718:
    $P5845 = $P5844."ast"()
    store_lex "$inv", $P5845
.annotate 'line', 2097
    find_lex $P5846, "$BLOCKINIT"
    unless_null $P5846, vivify_2719
    new $P5846, "Undef"
  vivify_2719:
    find_lex $P5847, "$inv"
    unless_null $P5847, vivify_2720
    new $P5847, "Undef"
  vivify_2720:
    $P5846."push"($P5847)
.annotate 'line', 2098
    find_lex $P5848, "$BLOCKINIT"
    unless_null $P5848, vivify_2721
    new $P5848, "Undef"
  vivify_2721:
    get_hll_global $P5849, "GLOBAL"
    nqp_get_package_through_who $P5850, $P5849, "PAST"
    get_who $P5851, $P5850
    set $P5852, $P5851["Var"]
.annotate 'line', 2100
    get_hll_global $P5853, "GLOBAL"
    nqp_get_package_through_who $P5854, $P5853, "PAST"
    get_who $P5855, $P5854
    set $P5856, $P5855["Var"]
    find_lex $P5857, "$inv"
    unless_null $P5857, vivify_2722
    new $P5857, "Undef"
  vivify_2722:
    $P5858 = $P5857."name"()
    $P5859 = $P5856."new"("lexical" :named("scope"), $P5858 :named("name"))
    $P5860 = $P5852."new"("self" :named("name"), "lexical" :named("scope"), 1 :named("isdecl"), $P5859 :named("viviself"))
.annotate 'line', 2098
    $P5848."push"($P5860)
.annotate 'line', 2102
    new $P5861, "Integer"
    assign $P5861, 1
    find_lex $P5862, "$?PACKAGE"
    get_who $P5863, $P5862
    set $P5864, $P5863["@BLOCK"]
    unless_null $P5864, vivify_2723
    $P5864 = root_new ['parrot';'ResizablePMCArray']
    set $P5863["@BLOCK"], $P5864
  vivify_2723:
    set $P5865, $P5864[0]
    unless_null $P5865, vivify_2724
    $P5865 = root_new ['parrot';'Hash']
    set $P5864[0], $P5865
  vivify_2724:
    set $P5865["signature_has_invocant"], $P5861
.annotate 'line', 2095
    .return ($P5861)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block5871"  :anon :subid("552_1307835824.98345") :outer("550_1307835824.98345")
    .param pmc param_5873
.annotate 'line', 2104
    .lex "$_", param_5873
    find_lex $P5874, "$BLOCKINIT"
    unless_null $P5874, vivify_2728
    new $P5874, "Undef"
  vivify_2728:
    find_lex $P5875, "$_"
    unless_null $P5875, vivify_2729
    new $P5875, "Undef"
  vivify_2729:
    $P5876 = $P5875."ast"()
    $P5877 = $P5874."push"($P5876)
    .return ($P5877)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "parameter" :anon :subid("553_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_5882
    .param pmc param_5883
.annotate 'line', 2107
    .lex "self", param_5882
    .lex "$/", param_5883
.annotate 'line', 2108
    new $P5884, "Undef"
    .lex "$quant", $P5884
.annotate 'line', 2109
    new $P5885, "Undef"
    .lex "$past", $P5885
.annotate 'line', 2108
    find_lex $P5886, "$/"
    unless_null $P5886, vivify_2730
    $P5886 = root_new ['parrot';'Hash']
  vivify_2730:
    set $P5887, $P5886["quant"]
    unless_null $P5887, vivify_2731
    new $P5887, "Undef"
  vivify_2731:
    store_lex "$quant", $P5887
    find_lex $P5888, "$past"
    unless_null $P5888, vivify_2732
    new $P5888, "Undef"
  vivify_2732:
.annotate 'line', 2110
    find_lex $P5890, "$/"
    unless_null $P5890, vivify_2733
    $P5890 = root_new ['parrot';'Hash']
  vivify_2733:
    set $P5891, $P5890["named_param"]
    unless_null $P5891, vivify_2734
    new $P5891, "Undef"
  vivify_2734:
    if $P5891, if_5889
.annotate 'line', 2117
    find_lex $P5905, "$/"
    unless_null $P5905, vivify_2735
    $P5905 = root_new ['parrot';'Hash']
  vivify_2735:
    set $P5906, $P5905["param_var"]
    unless_null $P5906, vivify_2736
    new $P5906, "Undef"
  vivify_2736:
    $P5907 = $P5906."ast"()
    store_lex "$past", $P5907
.annotate 'line', 2118
    find_lex $P5909, "$quant"
    unless_null $P5909, vivify_2737
    new $P5909, "Undef"
  vivify_2737:
    set $S5910, $P5909
    iseq $I5911, $S5910, "*"
    if $I5911, if_5908
.annotate 'line', 2122
    find_lex $P5920, "$quant"
    unless_null $P5920, vivify_2738
    new $P5920, "Undef"
  vivify_2738:
    set $S5921, $P5920
    iseq $I5922, $S5921, "?"
    unless $I5922, if_5919_end
.annotate 'line', 2123
    find_lex $P5923, "$past"
    unless_null $P5923, vivify_2739
    new $P5923, "Undef"
  vivify_2739:
    find_lex $P5924, "$/"
    unless_null $P5924, vivify_2740
    $P5924 = root_new ['parrot';'Hash']
  vivify_2740:
    set $P5925, $P5924["param_var"]
    unless_null $P5925, vivify_2741
    $P5925 = root_new ['parrot';'Hash']
  vivify_2741:
    set $P5926, $P5925["sigil"]
    unless_null $P5926, vivify_2742
    new $P5926, "Undef"
  vivify_2742:
    $P5927 = "vivitype"($P5926)
    $P5923."viviself"($P5927)
  if_5919_end:
.annotate 'line', 2122
    goto if_5908_end
  if_5908:
.annotate 'line', 2119
    find_lex $P5912, "$past"
    unless_null $P5912, vivify_2743
    new $P5912, "Undef"
  vivify_2743:
    $P5912."slurpy"(1)
.annotate 'line', 2120
    find_lex $P5913, "$past"
    unless_null $P5913, vivify_2744
    new $P5913, "Undef"
  vivify_2744:
    find_lex $P5914, "$/"
    unless_null $P5914, vivify_2745
    $P5914 = root_new ['parrot';'Hash']
  vivify_2745:
    set $P5915, $P5914["param_var"]
    unless_null $P5915, vivify_2746
    $P5915 = root_new ['parrot';'Hash']
  vivify_2746:
    set $P5916, $P5915["sigil"]
    unless_null $P5916, vivify_2747
    new $P5916, "Undef"
  vivify_2747:
    set $S5917, $P5916
    iseq $I5918, $S5917, "%"
    $P5913."named"($I5918)
  if_5908_end:
.annotate 'line', 2116
    goto if_5889_end
  if_5889:
.annotate 'line', 2111
    find_lex $P5892, "$/"
    unless_null $P5892, vivify_2748
    $P5892 = root_new ['parrot';'Hash']
  vivify_2748:
    set $P5893, $P5892["named_param"]
    unless_null $P5893, vivify_2749
    new $P5893, "Undef"
  vivify_2749:
    $P5894 = $P5893."ast"()
    store_lex "$past", $P5894
.annotate 'line', 2112
    find_lex $P5896, "$quant"
    unless_null $P5896, vivify_2750
    new $P5896, "Undef"
  vivify_2750:
    set $S5897, $P5896
    isne $I5898, $S5897, "!"
    unless $I5898, if_5895_end
.annotate 'line', 2113
    find_lex $P5899, "$past"
    unless_null $P5899, vivify_2751
    new $P5899, "Undef"
  vivify_2751:
    find_lex $P5900, "$/"
    unless_null $P5900, vivify_2752
    $P5900 = root_new ['parrot';'Hash']
  vivify_2752:
    set $P5901, $P5900["named_param"]
    unless_null $P5901, vivify_2753
    $P5901 = root_new ['parrot';'Hash']
  vivify_2753:
    set $P5902, $P5901["param_var"]
    unless_null $P5902, vivify_2754
    $P5902 = root_new ['parrot';'Hash']
  vivify_2754:
    set $P5903, $P5902["sigil"]
    unless_null $P5903, vivify_2755
    new $P5903, "Undef"
  vivify_2755:
    $P5904 = "vivitype"($P5903)
    $P5899."viviself"($P5904)
  if_5895_end:
  if_5889_end:
.annotate 'line', 2126
    find_lex $P5929, "$/"
    unless_null $P5929, vivify_2756
    $P5929 = root_new ['parrot';'Hash']
  vivify_2756:
    set $P5930, $P5929["default_value"]
    unless_null $P5930, vivify_2757
    new $P5930, "Undef"
  vivify_2757:
    unless $P5930, if_5928_end
.annotate 'line', 2127
    find_lex $P5932, "$quant"
    unless_null $P5932, vivify_2758
    new $P5932, "Undef"
  vivify_2758:
    set $S5933, $P5932
    iseq $I5934, $S5933, "*"
    unless $I5934, if_5931_end
.annotate 'line', 2128
    find_lex $P5935, "$/"
    unless_null $P5935, vivify_2759
    new $P5935, "Undef"
  vivify_2759:
    $P5936 = $P5935."CURSOR"()
    $P5936."panic"("Can't put default on slurpy parameter")
  if_5931_end:
.annotate 'line', 2130
    find_lex $P5938, "$quant"
    unless_null $P5938, vivify_2760
    new $P5938, "Undef"
  vivify_2760:
    set $S5939, $P5938
    iseq $I5940, $S5939, "!"
    unless $I5940, if_5937_end
.annotate 'line', 2131
    find_lex $P5941, "$/"
    unless_null $P5941, vivify_2761
    new $P5941, "Undef"
  vivify_2761:
    $P5942 = $P5941."CURSOR"()
    $P5942."panic"("Can't put default on required parameter")
  if_5937_end:
.annotate 'line', 2133
    find_lex $P5943, "$past"
    unless_null $P5943, vivify_2762
    new $P5943, "Undef"
  vivify_2762:
    find_lex $P5944, "$/"
    unless_null $P5944, vivify_2763
    $P5944 = root_new ['parrot';'Hash']
  vivify_2763:
    set $P5945, $P5944["default_value"]
    unless_null $P5945, vivify_2764
    $P5945 = root_new ['parrot';'ResizablePMCArray']
  vivify_2764:
    set $P5946, $P5945[0]
    unless_null $P5946, vivify_2765
    $P5946 = root_new ['parrot';'Hash']
  vivify_2765:
    set $P5947, $P5946["EXPR"]
    unless_null $P5947, vivify_2766
    new $P5947, "Undef"
  vivify_2766:
    $P5948 = $P5947."ast"()
    $P5943."viviself"($P5948)
  if_5928_end:
.annotate 'line', 2135
    find_lex $P5950, "$past"
    unless_null $P5950, vivify_2767
    new $P5950, "Undef"
  vivify_2767:
    $P5951 = $P5950."viviself"()
    if $P5951, unless_5949_end
    find_lex $P5952, "$?PACKAGE"
    get_who $P5953, $P5952
    set $P5954, $P5953["@BLOCK"]
    unless_null $P5954, vivify_2768
    $P5954 = root_new ['parrot';'ResizablePMCArray']
  vivify_2768:
    set $P5955, $P5954[0]
    unless_null $P5955, vivify_2769
    new $P5955, "Undef"
  vivify_2769:
    find_lex $P5956, "$?PACKAGE"
    get_who $P5957, $P5956
    set $P5958, $P5957["@BLOCK"]
    unless_null $P5958, vivify_2770
    $P5958 = root_new ['parrot';'ResizablePMCArray']
  vivify_2770:
    set $P5959, $P5958[0]
    unless_null $P5959, vivify_2771
    new $P5959, "Undef"
  vivify_2771:
    $P5960 = $P5959."arity"()
    set $N5961, $P5960
    new $P5962, 'Float'
    set $P5962, $N5961
    add $P5963, $P5962, 1
    $P5955."arity"($P5963)
  unless_5949_end:
.annotate 'line', 2139
    find_lex $P5965, "$/"
    unless_null $P5965, vivify_2772
    $P5965 = root_new ['parrot';'Hash']
  vivify_2772:
    set $P5966, $P5965["typename"]
    unless_null $P5966, vivify_2773
    new $P5966, "Undef"
  vivify_2773:
    unless $P5966, if_5964_end
.annotate 'line', 2140
    find_lex $P5967, "$past"
    unless_null $P5967, vivify_2774
    new $P5967, "Undef"
  vivify_2774:
    find_lex $P5968, "$/"
    unless_null $P5968, vivify_2775
    $P5968 = root_new ['parrot';'Hash']
  vivify_2775:
    set $P5969, $P5968["typename"]
    unless_null $P5969, vivify_2776
    $P5969 = root_new ['parrot';'ResizablePMCArray']
  vivify_2776:
    set $P5970, $P5969[0]
    unless_null $P5970, vivify_2777
    new $P5970, "Undef"
  vivify_2777:
    $P5971 = $P5970."ast"()
    $P5967."multitype"($P5971)
  if_5964_end:
.annotate 'line', 2144
    find_lex $P5973, "$/"
    unless_null $P5973, vivify_2778
    $P5973 = root_new ['parrot';'Hash']
  vivify_2778:
    set $P5974, $P5973["definedness"]
    unless_null $P5974, vivify_2779
    new $P5974, "Undef"
  vivify_2779:
    unless $P5974, if_5972_end
.annotate 'line', 2145
    find_lex $P5975, "$/"
    unless_null $P5975, vivify_2780
    $P5975 = root_new ['parrot';'Hash']
  vivify_2780:
    set $P5976, $P5975["definedness"]
    unless_null $P5976, vivify_2781
    $P5976 = root_new ['parrot';'ResizablePMCArray']
  vivify_2781:
    set $P5977, $P5976[0]
    unless_null $P5977, vivify_2782
    new $P5977, "Undef"
  vivify_2782:
    set $S5978, $P5977
    new $P5979, 'String'
    set $P5979, $S5978
    find_lex $P5980, "$past"
    unless_null $P5980, vivify_2783
    $P5980 = root_new ['parrot';'Hash']
    store_lex "$past", $P5980
  vivify_2783:
    set $P5980["definedness"], $P5979
  if_5972_end:
.annotate 'line', 2148
    find_lex $P5981, "$/"
    find_lex $P5982, "$past"
    unless_null $P5982, vivify_2784
    new $P5982, "Undef"
  vivify_2784:
    $P5983 = $P5981."!make"($P5982)
.annotate 'line', 2107
    .return ($P5983)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "param_var" :anon :subid("554_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_5985
    .param pmc param_5986
.annotate 'line', 2151
    .lex "self", param_5985
    .lex "$/", param_5986
.annotate 'line', 2152
    new $P5987, "Undef"
    .lex "$name", $P5987
.annotate 'line', 2153
    new $P5988, "Undef"
    .lex "$past", $P5988
.annotate 'line', 2152
    find_lex $P5989, "$/"
    unless_null $P5989, vivify_2785
    new $P5989, "Undef"
  vivify_2785:
    set $S5990, $P5989
    new $P5991, 'String'
    set $P5991, $S5990
    store_lex "$name", $P5991
.annotate 'line', 2153
    get_hll_global $P5992, "GLOBAL"
    nqp_get_package_through_who $P5993, $P5992, "PAST"
    get_who $P5994, $P5993
    set $P5995, $P5994["Var"]
    find_lex $P5996, "$name"
    unless_null $P5996, vivify_2786
    new $P5996, "Undef"
  vivify_2786:
    find_lex $P5997, "$/"
    unless_null $P5997, vivify_2787
    new $P5997, "Undef"
  vivify_2787:
    $P5998 = $P5995."new"($P5996 :named("name"), "parameter" :named("scope"), 1 :named("isdecl"), $P5997 :named("node"))
    store_lex "$past", $P5998
.annotate 'line', 2155
    find_lex $P5999, "$?PACKAGE"
    get_who $P6000, $P5999
    set $P6001, $P6000["@BLOCK"]
    unless_null $P6001, vivify_2788
    $P6001 = root_new ['parrot';'ResizablePMCArray']
  vivify_2788:
    set $P6002, $P6001[0]
    unless_null $P6002, vivify_2789
    new $P6002, "Undef"
  vivify_2789:
    find_lex $P6003, "$name"
    unless_null $P6003, vivify_2790
    new $P6003, "Undef"
  vivify_2790:
    $P6002."symbol"($P6003, "lexical" :named("scope"))
.annotate 'line', 2156
    find_lex $P6004, "$/"
    find_lex $P6005, "$past"
    unless_null $P6005, vivify_2791
    new $P6005, "Undef"
  vivify_2791:
    $P6006 = $P6004."!make"($P6005)
.annotate 'line', 2151
    .return ($P6006)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "named_param" :anon :subid("555_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6008
    .param pmc param_6009
.annotate 'line', 2159
    .lex "self", param_6008
    .lex "$/", param_6009
.annotate 'line', 2160
    new $P6010, "Undef"
    .lex "$past", $P6010
    find_lex $P6011, "$/"
    unless_null $P6011, vivify_2792
    $P6011 = root_new ['parrot';'Hash']
  vivify_2792:
    set $P6012, $P6011["param_var"]
    unless_null $P6012, vivify_2793
    new $P6012, "Undef"
  vivify_2793:
    $P6013 = $P6012."ast"()
    store_lex "$past", $P6013
.annotate 'line', 2161
    find_lex $P6014, "$past"
    unless_null $P6014, vivify_2794
    new $P6014, "Undef"
  vivify_2794:
    find_lex $P6015, "$/"
    unless_null $P6015, vivify_2795
    $P6015 = root_new ['parrot';'Hash']
  vivify_2795:
    set $P6016, $P6015["param_var"]
    unless_null $P6016, vivify_2796
    $P6016 = root_new ['parrot';'Hash']
  vivify_2796:
    set $P6017, $P6016["name"]
    unless_null $P6017, vivify_2797
    new $P6017, "Undef"
  vivify_2797:
    set $S6018, $P6017
    $P6014."named"($S6018)
.annotate 'line', 2162
    find_lex $P6019, "$/"
    find_lex $P6020, "$past"
    unless_null $P6020, vivify_2798
    new $P6020, "Undef"
  vivify_2798:
    $P6021 = $P6019."!make"($P6020)
.annotate 'line', 2159
    .return ($P6021)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "typename" :anon :subid("556_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6023
    .param pmc param_6024
.annotate 'line', 2165
    .const 'Sub' $P6036 = "557_1307835824.98345" 
    capture_lex $P6036
    .lex "self", param_6023
    .lex "$/", param_6024
.annotate 'line', 2169
    $P6025 = root_new ['parrot';'ResizablePMCArray']
    .lex "@name", $P6025
.annotate 'line', 2170
    new $P6026, "Undef"
    .lex "$found", $P6026
.annotate 'line', 2169
    get_hll_global $P6027, "GLOBAL"
    nqp_get_package_through_who $P6028, $P6027, "HLL"
    get_who $P6029, $P6028
    set $P6030, $P6029["Compiler"]
    find_lex $P6031, "$/"
    unless_null $P6031, vivify_2799
    new $P6031, "Undef"
  vivify_2799:
    set $S6032, $P6031
    $P6033 = $P6030."parse_name"($S6032)
    store_lex "@name", $P6033
.annotate 'line', 2170
    new $P6034, "Integer"
    assign $P6034, 0
    store_lex "$found", $P6034
.annotate 'line', 2171
    .const 'Sub' $P6036 = "557_1307835824.98345" 
    capture_lex $P6036
    $P6036()
.annotate 'line', 2176
    find_lex $P6057, "$found"
    unless_null $P6057, vivify_2805
    new $P6057, "Undef"
  vivify_2805:
    unless $P6057, unless_6056
    set $P6055, $P6057
    goto unless_6056_end
  unless_6056:
.annotate 'line', 2177
    find_lex $P6058, "$/"
    unless_null $P6058, vivify_2806
    new $P6058, "Undef"
  vivify_2806:
    $P6059 = $P6058."CURSOR"()
    new $P6060, "String"
    assign $P6060, "Use of undeclared type '"
    find_lex $P6061, "$/"
    unless_null $P6061, vivify_2807
    new $P6061, "Undef"
  vivify_2807:
    set $S6062, $P6061
    concat $P6063, $P6060, $S6062
    concat $P6064, $P6063, "'"
    $P6065 = $P6059."panic"($P6064)
.annotate 'line', 2176
    set $P6055, $P6065
  unless_6056_end:
.annotate 'line', 2165
    .return ($P6055)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block6035"  :anon :subid("557_1307835824.98345") :outer("556_1307835824.98345")
.annotate 'line', 2171
    new $P6050, 'ExceptionHandler'
    set_label $P6050, control_6049
    $P6050."handle_types_except"(.CONTROL_RETURN,  .CONTROL_OK,  .CONTROL_BREAK,  .CONTROL_CONTINUE,  .CONTROL_TAKE,  .CONTROL_LEAVE,  .CONTROL_EXIT,  .CONTROL_LOOP_NEXT,  .CONTROL_LOOP_LAST,  .CONTROL_LOOP_REDO)
    push_eh $P6050
.annotate 'line', 2172
    new $P6037, "Undef"
    .lex "$sym", $P6037
    find_lex $P6038, "@name"
    unless_null $P6038, vivify_2800
    $P6038 = root_new ['parrot';'ResizablePMCArray']
  vivify_2800:
    find_lex $P6039, "$/"
    unless_null $P6039, vivify_2801
    new $P6039, "Undef"
  vivify_2801:
    $P6040 = "find_sym"($P6038, $P6039)
    store_lex "$sym", $P6040
.annotate 'line', 2173
    find_dynamic_lex $P6041, "$/"
    find_dynamic_lex $P6044, "$*SC"
    unless_null $P6044, vivify_2802
    get_hll_global $P6042, "GLOBAL"
    get_who $P6043, $P6042
    set $P6044, $P6043["$SC"]
    unless_null $P6044, vivify_2803
    die "Contextual $*SC not found"
  vivify_2803:
  vivify_2802:
    find_lex $P6045, "$sym"
    unless_null $P6045, vivify_2804
    new $P6045, "Undef"
  vivify_2804:
    $P6046 = $P6044."get_object_sc_ref_past"($P6045)
    $P6041."!make"($P6046)
.annotate 'line', 2174
    new $P6047, "Integer"
    assign $P6047, 1
    store_lex "$found", $P6047
.annotate 'line', 2171
    pop_eh 
    goto skip_handler_6048
  control_6049:
    .local pmc exception 
    .get_results (exception) 
    new $P6053, 'Integer'
    set $P6053, 1
    set exception["handled"], $P6053
    set $I6054, exception["handled"]
    ne $I6054, 1, nothandled_6052
  handled_6051:
    .return (exception)
  nothandled_6052:
    rethrow exception
  skip_handler_6048:
    .return ($P6047)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "trait" :anon :subid("558_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6067
    .param pmc param_6068
.annotate 'line', 2181
    .lex "self", param_6067
    .lex "$/", param_6068
.annotate 'line', 2182
    find_lex $P6069, "$/"
    find_lex $P6070, "$/"
    unless_null $P6070, vivify_2808
    $P6070 = root_new ['parrot';'Hash']
  vivify_2808:
    set $P6071, $P6070["trait_mod"]
    unless_null $P6071, vivify_2809
    new $P6071, "Undef"
  vivify_2809:
    $P6072 = $P6071."ast"()
    $P6073 = $P6069."!make"($P6072)
.annotate 'line', 2181
    .return ($P6073)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "trait_mod:sym<is>" :anon :subid("559_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6075
    .param pmc param_6076
.annotate 'line', 2185
    .const 'Sub' $P6137 = "562_1307835824.98345" 
    capture_lex $P6137
    .const 'Sub' $P6084 = "560_1307835824.98345" 
    capture_lex $P6084
    .lex "self", param_6075
    .lex "$/", param_6076
.annotate 'line', 2186
    find_lex $P6079, "$/"
    unless_null $P6079, vivify_2810
    $P6079 = root_new ['parrot';'Hash']
  vivify_2810:
    set $P6080, $P6079["longname"]
    unless_null $P6080, vivify_2811
    new $P6080, "Undef"
  vivify_2811:
    set $S6081, $P6080
    iseq $I6082, $S6081, "parrot_vtable"
    if $I6082, if_6078
.annotate 'line', 2199
    find_lex $P6132, "$/"
    unless_null $P6132, vivify_2812
    $P6132 = root_new ['parrot';'Hash']
  vivify_2812:
    set $P6133, $P6132["longname"]
    unless_null $P6133, vivify_2813
    new $P6133, "Undef"
  vivify_2813:
    set $S6134, $P6133
    iseq $I6135, $S6134, "parrot_vtable_handler"
    if $I6135, if_6131
.annotate 'line', 2210
    find_lex $P6177, "$/"
    unless_null $P6177, vivify_2814
    $P6177 = root_new ['parrot';'Hash']
  vivify_2814:
    set $P6178, $P6177["longname"]
    unless_null $P6178, vivify_2815
    new $P6178, "Undef"
  vivify_2815:
    set $S6179, $P6178
    iseq $I6180, $S6179, "pirflags"
    if $I6180, if_6176
.annotate 'line', 2214
    find_lex $P6184, "$/"
    unless_null $P6184, vivify_2816
    new $P6184, "Undef"
  vivify_2816:
    $P6185 = $P6184."CURSOR"()
    new $P6186, 'String'
    set $P6186, "Trait '"
    find_lex $P6187, "$/"
    unless_null $P6187, vivify_2817
    $P6187 = root_new ['parrot';'Hash']
  vivify_2817:
    set $P6188, $P6187["longname"]
    unless_null $P6188, vivify_2818
    new $P6188, "Undef"
  vivify_2818:
    concat $P6189, $P6186, $P6188
    concat $P6190, $P6189, "' not implemented"
    $P6191 = $P6185."panic"($P6190)
.annotate 'line', 2213
    set $P6175, $P6191
.annotate 'line', 2210
    goto if_6176_end
  if_6176:
.annotate 'line', 2211
    find_lex $P6181, "$/"
    unless_null $P6181, vivify_2819
    new $P6181, "Undef"
  vivify_2819:
    $P6182 = $P6181."CURSOR"()
    $P6183 = $P6182."panic"("Trait 'pirflags' no longer supported; use 'is vtable'")
.annotate 'line', 2210
    set $P6175, $P6183
  if_6176_end:
    set $P6130, $P6175
.annotate 'line', 2199
    goto if_6131_end
  if_6131:
    .const 'Sub' $P6137 = "562_1307835824.98345" 
    capture_lex $P6137
    $P6174 = $P6137()
    set $P6130, $P6174
  if_6131_end:
    set $P6077, $P6130
.annotate 'line', 2186
    goto if_6078_end
  if_6078:
    .const 'Sub' $P6084 = "560_1307835824.98345" 
    capture_lex $P6084
    $P6129 = $P6084()
    set $P6077, $P6129
  if_6078_end:
.annotate 'line', 2185
    .return ($P6077)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block6136"  :anon :subid("562_1307835824.98345") :outer("559_1307835824.98345")
.annotate 'line', 2199
    .const 'Sub' $P6161 = "563_1307835824.98345" 
    capture_lex $P6161
.annotate 'line', 2201
    new $P6138, "Undef"
    .lex "$cpast", $P6138
.annotate 'line', 2204
    new $P6139, "Undef"
    .lex "$name", $P6139
.annotate 'line', 2205
    new $P6140, "Undef"
    .lex "$package", $P6140
.annotate 'line', 2201
    find_lex $P6141, "$/"
    unless_null $P6141, vivify_2820
    $P6141 = root_new ['parrot';'Hash']
  vivify_2820:
    set $P6142, $P6141["circumfix"]
    unless_null $P6142, vivify_2821
    $P6142 = root_new ['parrot';'ResizablePMCArray']
  vivify_2821:
    set $P6143, $P6142[0]
    unless_null $P6143, vivify_2822
    new $P6143, "Undef"
  vivify_2822:
    $P6144 = $P6143."ast"()
    store_lex "$cpast", $P6144
.annotate 'line', 2203
    get_hll_global $P6146, "GLOBAL"
    nqp_get_package_through_who $P6147, $P6146, "PAST"
    get_who $P6148, $P6147
    set $P6149, $P6148["Val"]
    find_lex $P6150, "$cpast"
    unless_null $P6150, vivify_2823
    new $P6150, "Undef"
  vivify_2823:
    $P6151 = $P6149."ACCEPTS"($P6150)
    if $P6151, unless_6145_end
.annotate 'line', 2202
    find_lex $P6152, "$/"
    unless_null $P6152, vivify_2824
    new $P6152, "Undef"
  vivify_2824:
    $P6153 = $P6152."CURSOR"()
    $P6153."panic"("Trait 'parrot_vtable_handler' requires constant scalar argument")
  unless_6145_end:
.annotate 'line', 2204
    find_lex $P6154, "$cpast"
    unless_null $P6154, vivify_2825
    new $P6154, "Undef"
  vivify_2825:
    $P6155 = $P6154."value"()
    store_lex "$name", $P6155
.annotate 'line', 2205
    find_dynamic_lex $P6158, "$*PACKAGE"
    unless_null $P6158, vivify_2826
    get_hll_global $P6156, "GLOBAL"
    get_who $P6157, $P6156
    set $P6158, $P6157["$PACKAGE"]
    unless_null $P6158, vivify_2827
    die "Contextual $*PACKAGE not found"
  vivify_2827:
  vivify_2826:
    store_lex "$package", $P6158
.annotate 'line', 2206
    find_dynamic_lex $P6159, "$/"
    .const 'Sub' $P6161 = "563_1307835824.98345" 
    newclosure $P6172, $P6161
    $P6173 = $P6159."!make"($P6172)
.annotate 'line', 2199
    .return ($P6173)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block6160"  :anon :subid("563_1307835824.98345") :outer("562_1307835824.98345")
    .param pmc param_6162
.annotate 'line', 2206
    .lex "$match", param_6162
.annotate 'line', 2207
    find_dynamic_lex $P6165, "$*SC"
    unless_null $P6165, vivify_2828
    get_hll_global $P6163, "GLOBAL"
    get_who $P6164, $P6163
    set $P6165, $P6164["$SC"]
    unless_null $P6165, vivify_2829
    die "Contextual $*SC not found"
  vivify_2829:
  vivify_2828:
    find_lex $P6166, "$package"
    unless_null $P6166, vivify_2830
    new $P6166, "Undef"
  vivify_2830:
    find_lex $P6167, "$name"
    unless_null $P6167, vivify_2831
    new $P6167, "Undef"
  vivify_2831:
    find_lex $P6168, "$match"
    unless_null $P6168, vivify_2832
    $P6168 = root_new ['parrot';'Hash']
  vivify_2832:
    set $P6169, $P6168["variable"]
    unless_null $P6169, vivify_2833
    new $P6169, "Undef"
  vivify_2833:
    set $S6170, $P6169
    $P6171 = $P6165."pkg_add_parrot_vtable_handler_mapping"($P6166, $P6167, $S6170)
.annotate 'line', 2206
    .return ($P6171)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block6083"  :anon :subid("560_1307835824.98345") :outer("559_1307835824.98345")
.annotate 'line', 2186
    .const 'Sub' $P6115 = "561_1307835824.98345" 
    capture_lex $P6115
.annotate 'line', 2188
    new $P6085, "Undef"
    .lex "$cpast", $P6085
.annotate 'line', 2191
    new $P6086, "Undef"
    .lex "$name", $P6086
.annotate 'line', 2192
    new $P6087, "Undef"
    .lex "$package", $P6087
.annotate 'line', 2193
    new $P6088, "Undef"
    .lex "$is_dispatcher", $P6088
.annotate 'line', 2188
    find_lex $P6089, "$/"
    unless_null $P6089, vivify_2834
    $P6089 = root_new ['parrot';'Hash']
  vivify_2834:
    set $P6090, $P6089["circumfix"]
    unless_null $P6090, vivify_2835
    $P6090 = root_new ['parrot';'ResizablePMCArray']
  vivify_2835:
    set $P6091, $P6090[0]
    unless_null $P6091, vivify_2836
    new $P6091, "Undef"
  vivify_2836:
    $P6092 = $P6091."ast"()
    store_lex "$cpast", $P6092
.annotate 'line', 2190
    get_hll_global $P6094, "GLOBAL"
    nqp_get_package_through_who $P6095, $P6094, "PAST"
    get_who $P6096, $P6095
    set $P6097, $P6096["Val"]
    find_lex $P6098, "$cpast"
    unless_null $P6098, vivify_2837
    new $P6098, "Undef"
  vivify_2837:
    $P6099 = $P6097."ACCEPTS"($P6098)
    if $P6099, unless_6093_end
.annotate 'line', 2189
    find_lex $P6100, "$/"
    unless_null $P6100, vivify_2838
    new $P6100, "Undef"
  vivify_2838:
    $P6101 = $P6100."CURSOR"()
    $P6101."panic"("Trait 'parrot_vtable' requires constant scalar argument")
  unless_6093_end:
.annotate 'line', 2191
    find_lex $P6102, "$cpast"
    unless_null $P6102, vivify_2839
    new $P6102, "Undef"
  vivify_2839:
    $P6103 = $P6102."value"()
    store_lex "$name", $P6103
.annotate 'line', 2192
    find_dynamic_lex $P6106, "$*PACKAGE"
    unless_null $P6106, vivify_2840
    get_hll_global $P6104, "GLOBAL"
    get_who $P6105, $P6104
    set $P6106, $P6105["$PACKAGE"]
    unless_null $P6106, vivify_2841
    die "Contextual $*PACKAGE not found"
  vivify_2841:
  vivify_2840:
    store_lex "$package", $P6106
.annotate 'line', 2193
    find_dynamic_lex $P6109, "$*SCOPE"
    unless_null $P6109, vivify_2842
    get_hll_global $P6107, "GLOBAL"
    get_who $P6108, $P6107
    set $P6109, $P6108["$SCOPE"]
    unless_null $P6109, vivify_2843
    die "Contextual $*SCOPE not found"
  vivify_2843:
  vivify_2842:
    set $S6110, $P6109
    iseq $I6111, $S6110, "proto"
    new $P6112, 'Integer'
    set $P6112, $I6111
    store_lex "$is_dispatcher", $P6112
.annotate 'line', 2194
    find_dynamic_lex $P6113, "$/"
    .const 'Sub' $P6115 = "561_1307835824.98345" 
    newclosure $P6127, $P6115
    $P6128 = $P6113."!make"($P6127)
.annotate 'line', 2186
    .return ($P6128)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block6114"  :anon :subid("561_1307835824.98345") :outer("560_1307835824.98345")
    .param pmc param_6116
.annotate 'line', 2194
    .lex "$match", param_6116
.annotate 'line', 2195
    find_dynamic_lex $P6119, "$*SC"
    unless_null $P6119, vivify_2844
    get_hll_global $P6117, "GLOBAL"
    get_who $P6118, $P6117
    set $P6119, $P6118["$SC"]
    unless_null $P6119, vivify_2845
    die "Contextual $*SC not found"
  vivify_2845:
  vivify_2844:
    find_lex $P6120, "$package"
    unless_null $P6120, vivify_2846
    new $P6120, "Undef"
  vivify_2846:
    find_lex $P6121, "$name"
    unless_null $P6121, vivify_2847
    new $P6121, "Undef"
  vivify_2847:
.annotate 'line', 2196
    find_lex $P6122, "$match"
    unless_null $P6122, vivify_2848
    new $P6122, "Undef"
  vivify_2848:
    $P6123 = $P6122."ast"()
    set $P6124, $P6123["block_past"]
    unless_null $P6124, vivify_2849
    new $P6124, "Undef"
  vivify_2849:
.annotate 'line', 2195
    find_lex $P6125, "$is_dispatcher"
    unless_null $P6125, vivify_2850
    new $P6125, "Undef"
  vivify_2850:
    $P6126 = $P6119."pkg_add_method"($P6120, "add_parrot_vtable_mapping", $P6121, $P6124, $P6125)
.annotate 'line', 2194
    .return ($P6126)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "regex_declarator" :anon :subid("564_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6195
    .param pmc param_6196
    .param pmc param_6197 :optional
    .param int has_param_6197 :opt_flag
.annotate 'line', 2218
    .const 'Sub' $P6324 = "567_1307835824.98345" 
    capture_lex $P6324
    .const 'Sub' $P6286 = "566_1307835824.98345" 
    capture_lex $P6286
    .const 'Sub' $P6266 = "565_1307835824.98345" 
    capture_lex $P6266
    new $P6194, ['ExceptionHandler'], .CONTROL_RETURN
    set_label $P6194, control_6193
    push_eh $P6194
    .lex "self", param_6195
    .lex "$/", param_6196
    if has_param_6197, optparam_2851
    new $P6198, "Undef"
    set param_6197, $P6198
  optparam_2851:
    .lex "$key", param_6197
.annotate 'line', 2219
    $P6199 = root_new ['parrot';'ResizablePMCArray']
    .lex "@MODIFIERS", $P6199
.annotate 'line', 2220
    new $P6200, "Undef"
    .lex "$name", $P6200
.annotate 'line', 2221
    new $P6201, "Undef"
    .lex "$past", $P6201
.annotate 'line', 2219
    get_hll_global $P6202, "GLOBAL"
    nqp_get_package_through_who $P6203, $P6202, "Regex"
    nqp_get_package_through_who $P6204, $P6203, "P6Regex"
    nqp_get_package_through_who $P6205, $P6204, "Actions"
    get_who $P6206, $P6205
    set $P6207, $P6206["@MODIFIERS"]
    unless_null $P6207, vivify_2852
    $P6207 = root_new ['parrot';'ResizablePMCArray']
  vivify_2852:
    store_lex "@MODIFIERS", $P6207
.annotate 'line', 2220
    find_lex $P6208, "$/"
    unless_null $P6208, vivify_2853
    $P6208 = root_new ['parrot';'Hash']
  vivify_2853:
    set $P6209, $P6208["deflongname"]
    unless_null $P6209, vivify_2854
    new $P6209, "Undef"
  vivify_2854:
    $P6210 = $P6209."ast"()
    set $S6211, $P6210
    new $P6212, 'String'
    set $P6212, $S6211
    store_lex "$name", $P6212
    find_lex $P6213, "$past"
    unless_null $P6213, vivify_2855
    new $P6213, "Undef"
  vivify_2855:
.annotate 'line', 2222
    find_lex $P6215, "$/"
    unless_null $P6215, vivify_2856
    $P6215 = root_new ['parrot';'Hash']
  vivify_2856:
    set $P6216, $P6215["proto"]
    unless_null $P6216, vivify_2857
    new $P6216, "Undef"
  vivify_2857:
    if $P6216, if_6214
.annotate 'line', 2252
    find_lex $P6282, "$key"
    unless_null $P6282, vivify_2858
    new $P6282, "Undef"
  vivify_2858:
    set $S6283, $P6282
    iseq $I6284, $S6283, "open"
    if $I6284, if_6281
.annotate 'line', 2262
    .const 'Sub' $P6324 = "567_1307835824.98345" 
    capture_lex $P6324
    $P6324()
    goto if_6281_end
  if_6281:
.annotate 'line', 2252
    .const 'Sub' $P6286 = "566_1307835824.98345" 
    capture_lex $P6286
    $P6286()
  if_6281_end:
    goto if_6214_end
  if_6214:
.annotate 'line', 2224
    get_hll_global $P6217, "GLOBAL"
    nqp_get_package_through_who $P6218, $P6217, "PAST"
    get_who $P6219, $P6218
    set $P6220, $P6219["Stmts"]
.annotate 'line', 2225
    get_hll_global $P6221, "GLOBAL"
    nqp_get_package_through_who $P6222, $P6221, "PAST"
    get_who $P6223, $P6222
    set $P6224, $P6223["Block"]
    find_lex $P6225, "$name"
    unless_null $P6225, vivify_2908
    new $P6225, "Undef"
  vivify_2908:
.annotate 'line', 2226
    get_hll_global $P6226, "GLOBAL"
    nqp_get_package_through_who $P6227, $P6226, "PAST"
    get_who $P6228, $P6227
    set $P6229, $P6228["Op"]
.annotate 'line', 2227
    get_hll_global $P6230, "GLOBAL"
    nqp_get_package_through_who $P6231, $P6230, "PAST"
    get_who $P6232, $P6231
    set $P6233, $P6232["Var"]
    $P6234 = $P6233."new"("self" :named("name"), "parameter" :named("scope"))
    find_lex $P6235, "$name"
    unless_null $P6235, vivify_2909
    new $P6235, "Undef"
  vivify_2909:
    $P6236 = $P6229."new"($P6234, $P6235, "!protoregex" :named("name"), "callmethod" :named("pasttype"))
.annotate 'line', 2226
    find_lex $P6237, "$/"
    unless_null $P6237, vivify_2910
    new $P6237, "Undef"
  vivify_2910:
    $P6238 = $P6224."new"($P6236, $P6225 :named("name"), "declaration" :named("blocktype"), 0 :named("lexical"), $P6237 :named("node"))
.annotate 'line', 2236
    get_hll_global $P6239, "GLOBAL"
    nqp_get_package_through_who $P6240, $P6239, "PAST"
    get_who $P6241, $P6240
    set $P6242, $P6241["Block"]
    new $P6243, "String"
    assign $P6243, "!PREFIX__"
    find_lex $P6244, "$name"
    unless_null $P6244, vivify_2911
    new $P6244, "Undef"
  vivify_2911:
    concat $P6245, $P6243, $P6244
.annotate 'line', 2237
    get_hll_global $P6246, "GLOBAL"
    nqp_get_package_through_who $P6247, $P6246, "PAST"
    get_who $P6248, $P6247
    set $P6249, $P6248["Op"]
.annotate 'line', 2238
    get_hll_global $P6250, "GLOBAL"
    nqp_get_package_through_who $P6251, $P6250, "PAST"
    get_who $P6252, $P6251
    set $P6253, $P6252["Var"]
    $P6254 = $P6253."new"("self" :named("name"), "parameter" :named("scope"))
    find_lex $P6255, "$name"
    unless_null $P6255, vivify_2912
    new $P6255, "Undef"
  vivify_2912:
    $P6256 = $P6249."new"($P6254, $P6255, "!PREFIX__!protoregex" :named("name"), "callmethod" :named("pasttype"))
.annotate 'line', 2237
    find_lex $P6257, "$/"
    unless_null $P6257, vivify_2913
    new $P6257, "Undef"
  vivify_2913:
    $P6258 = $P6242."new"($P6256, $P6245 :named("name"), "declaration" :named("blocktype"), 0 :named("lexical"), $P6257 :named("node"))
.annotate 'line', 2236
    $P6259 = $P6220."new"($P6238, $P6258)
.annotate 'line', 2224
    store_lex "$past", $P6259
.annotate 'line', 2248
    find_lex $P6261, "$past"
    unless_null $P6261, vivify_2914
    new $P6261, "Undef"
  vivify_2914:
    $P6262 = $P6261."list"()
    defined $I6263, $P6262
    unless $I6263, for_undef_2915
    iter $P6260, $P6262
    new $P6279, 'ExceptionHandler'
    set_label $P6279, loop6278_handler
    $P6279."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P6279
  loop6278_test:
    unless $P6260, loop6278_done
    shift $P6264, $P6260
  loop6278_redo:
    .const 'Sub' $P6266 = "565_1307835824.98345" 
    capture_lex $P6266
    $P6266($P6264)
  loop6278_next:
    goto loop6278_test
  loop6278_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P6280, exception, 'type'
    eq $P6280, .CONTROL_LOOP_NEXT, loop6278_next
    eq $P6280, .CONTROL_LOOP_REDO, loop6278_redo
  loop6278_done:
    pop_eh 
  for_undef_2915:
  if_6214_end:
.annotate 'line', 2293
    find_lex $P6417, "$/"
    find_lex $P6418, "$past"
    unless_null $P6418, vivify_2922
    new $P6418, "Undef"
  vivify_2922:
    $P6419 = $P6417."!make"($P6418)
.annotate 'line', 2218
    .return ($P6419)
  control_6193:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P6420, exception, "payload"
    .return ($P6420)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block6323"  :anon :subid("567_1307835824.98345") :outer("564_1307835824.98345")
.annotate 'line', 2262
    .const 'Sub' $P6356 = "568_1307835824.98345" 
    capture_lex $P6356
.annotate 'line', 2263
    new $P6325, "Undef"
    .lex "$regex", $P6325
.annotate 'line', 2266
    new $P6326, "Undef"
    .lex "$prefix_meth", $P6326
.annotate 'line', 2264
    get_hll_global $P6327, "GLOBAL"
    nqp_get_package_through_who $P6328, $P6327, "Regex"
    nqp_get_package_through_who $P6329, $P6328, "P6Regex"
    nqp_get_package_through_who $P6330, $P6329, "Actions"
    get_who $P6331, $P6330
    set $P6332, $P6331["buildsub"]
    find_lex $P6333, "$/"
    unless_null $P6333, vivify_2859
    $P6333 = root_new ['parrot';'Hash']
  vivify_2859:
    set $P6334, $P6333["p6regex"]
    unless_null $P6334, vivify_2860
    new $P6334, "Undef"
  vivify_2860:
    $P6335 = $P6334."ast"()
    find_lex $P6336, "$?PACKAGE"
    get_who $P6337, $P6336
    set $P6338, $P6337["@BLOCK"]
    unless_null $P6338, vivify_2861
    $P6338 = root_new ['parrot';'ResizablePMCArray']
  vivify_2861:
    $P6339 = $P6338."shift"()
    $P6340 = $P6332($P6335, $P6339)
    store_lex "$regex", $P6340
.annotate 'line', 2265
    find_lex $P6341, "$regex"
    unless_null $P6341, vivify_2862
    new $P6341, "Undef"
  vivify_2862:
    find_lex $P6342, "$name"
    unless_null $P6342, vivify_2863
    new $P6342, "Undef"
  vivify_2863:
    $P6341."name"($P6342)
    find_lex $P6343, "$prefix_meth"
    unless_null $P6343, vivify_2864
    new $P6343, "Undef"
  vivify_2864:
.annotate 'line', 2268
    find_dynamic_lex $P6349, "$*PKGDECL"
    unless_null $P6349, vivify_2865
    get_hll_global $P6347, "GLOBAL"
    get_who $P6348, $P6347
    set $P6349, $P6348["$PKGDECL"]
    unless_null $P6349, vivify_2866
    die "Contextual $*PKGDECL not found"
  vivify_2866:
  vivify_2865:
    if $P6349, if_6346
    set $P6345, $P6349
    goto if_6346_end
  if_6346:
    find_dynamic_lex $P6352, "$*PACKAGE"
    unless_null $P6352, vivify_2867
    get_hll_global $P6350, "GLOBAL"
    get_who $P6351, $P6350
    set $P6352, $P6351["$PACKAGE"]
    unless_null $P6352, vivify_2868
    die "Contextual $*PACKAGE not found"
  vivify_2868:
  vivify_2867:
    get_how $P6353, $P6352
    can $I6354, $P6353, "add_method"
    new $P6345, 'Integer'
    set $P6345, $I6354
  if_6346_end:
    unless $P6345, if_6344_end
    .const 'Sub' $P6356 = "568_1307835824.98345" 
    capture_lex $P6356
    $P6356()
  if_6344_end:
.annotate 'line', 2283
    get_hll_global $P6394, "GLOBAL"
    nqp_get_package_through_who $P6395, $P6394, "PAST"
    get_who $P6396, $P6395
    set $P6397, $P6396["Op"]
.annotate 'line', 2285
    new $P6398, "ResizablePMCArray"
    push $P6398, "Regex"
    push $P6398, "Method"
    find_lex $P6399, "$/"
    unless_null $P6399, vivify_2885
    new $P6399, "Undef"
  vivify_2885:
    $P6400 = "lexical_package_lookup"($P6398, $P6399)
    find_lex $P6401, "$regex"
    unless_null $P6401, vivify_2886
    new $P6401, "Undef"
  vivify_2886:
    $P6402 = $P6397."new"($P6400, $P6401, "callmethod" :named("pasttype"), "new" :named("name"))
.annotate 'line', 2283
    store_lex "$past", $P6402
.annotate 'line', 2288
    find_lex $P6405, "$prefix_meth"
    unless_null $P6405, vivify_2887
    new $P6405, "Undef"
  vivify_2887:
    if $P6405, if_6404
    find_lex $P6413, "$regex"
    unless_null $P6413, vivify_2888
    new $P6413, "Undef"
  vivify_2888:
    set $P6403, $P6413
    goto if_6404_end
  if_6404:
.annotate 'line', 2289
    get_hll_global $P6406, "GLOBAL"
    nqp_get_package_through_who $P6407, $P6406, "PAST"
    get_who $P6408, $P6407
    set $P6409, $P6408["Stmts"]
    find_lex $P6410, "$regex"
    unless_null $P6410, vivify_2889
    new $P6410, "Undef"
  vivify_2889:
    find_lex $P6411, "$prefix_meth"
    unless_null $P6411, vivify_2890
    new $P6411, "Undef"
  vivify_2890:
    $P6412 = $P6409."new"($P6410, $P6411)
    set $P6403, $P6412
  if_6404_end:
.annotate 'line', 2288
    find_lex $P6414, "$past"
    unless_null $P6414, vivify_2891
    $P6414 = root_new ['parrot';'Hash']
    store_lex "$past", $P6414
  vivify_2891:
    set $P6414["sink"], $P6403
.annotate 'line', 2291
    find_lex $P6415, "@MODIFIERS"
    unless_null $P6415, vivify_2892
    $P6415 = root_new ['parrot';'ResizablePMCArray']
  vivify_2892:
    $P6416 = $P6415."shift"()
.annotate 'line', 2262
    .return ($P6416)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block6355"  :anon :subid("568_1307835824.98345") :outer("567_1307835824.98345")
.annotate 'line', 2273
    $P6357 = root_new ['parrot';'ResizablePMCArray']
    .lex "@prefixes", $P6357
.annotate 'line', 2270
    find_dynamic_lex $P6360, "$*SC"
    unless_null $P6360, vivify_2869
    get_hll_global $P6358, "GLOBAL"
    get_who $P6359, $P6358
    set $P6360, $P6359["$SC"]
    unless_null $P6360, vivify_2870
    die "Contextual $*SC not found"
  vivify_2870:
  vivify_2869:
    find_dynamic_lex $P6363, "$*PACKAGE"
    unless_null $P6363, vivify_2871
    get_hll_global $P6361, "GLOBAL"
    get_who $P6362, $P6361
    set $P6363, $P6362["$PACKAGE"]
    unless_null $P6363, vivify_2872
    die "Contextual $*PACKAGE not found"
  vivify_2872:
  vivify_2871:
    find_lex $P6364, "$name"
    unless_null $P6364, vivify_2873
    new $P6364, "Undef"
  vivify_2873:
    find_lex $P6365, "$regex"
    unless_null $P6365, vivify_2874
    new $P6365, "Undef"
  vivify_2874:
    $P6360."pkg_add_method"($P6363, "add_method", $P6364, $P6365, 0)
.annotate 'line', 2273
    find_lex $P6366, "$/"
    unless_null $P6366, vivify_2875
    $P6366 = root_new ['parrot';'Hash']
  vivify_2875:
    set $P6367, $P6366["p6regex"]
    unless_null $P6367, vivify_2876
    new $P6367, "Undef"
  vivify_2876:
    $P6368 = $P6367."ast"()
    $P6369 = $P6368."prefix_list"()
    store_lex "@prefixes", $P6369
.annotate 'line', 2274
    get_hll_global $P6370, "GLOBAL"
    nqp_get_package_through_who $P6371, $P6370, "PAST"
    get_who $P6372, $P6371
    set $P6373, $P6372["Block"]
.annotate 'line', 2275
    new $P6374, "String"
    assign $P6374, "!PREFIX__"
    find_lex $P6375, "$name"
    unless_null $P6375, vivify_2877
    new $P6375, "Undef"
  vivify_2877:
    concat $P6376, $P6374, $P6375
.annotate 'line', 2276
    get_hll_global $P6377, "GLOBAL"
    nqp_get_package_through_who $P6378, $P6377, "PAST"
    get_who $P6379, $P6378
    set $P6380, $P6379["Op"]
    find_lex $P6381, "@prefixes"
    unless_null $P6381, vivify_2878
    $P6381 = root_new ['parrot';'ResizablePMCArray']
  vivify_2878:
    $P6382 = $P6380."new"($P6381 :flat, "list" :named("pasttype"))
    $P6383 = $P6373."new"($P6382, $P6376 :named("name"), "method" :named("blocktype"))
.annotate 'line', 2274
    store_lex "$prefix_meth", $P6383
.annotate 'line', 2278
    find_dynamic_lex $P6386, "$*SC"
    unless_null $P6386, vivify_2879
    get_hll_global $P6384, "GLOBAL"
    get_who $P6385, $P6384
    set $P6386, $P6385["$SC"]
    unless_null $P6386, vivify_2880
    die "Contextual $*SC not found"
  vivify_2880:
  vivify_2879:
    find_dynamic_lex $P6389, "$*PACKAGE"
    unless_null $P6389, vivify_2881
    get_hll_global $P6387, "GLOBAL"
    get_who $P6388, $P6387
    set $P6389, $P6388["$PACKAGE"]
    unless_null $P6389, vivify_2882
    die "Contextual $*PACKAGE not found"
  vivify_2882:
  vivify_2881:
    find_lex $P6390, "$prefix_meth"
    unless_null $P6390, vivify_2883
    new $P6390, "Undef"
  vivify_2883:
    $P6391 = $P6390."name"()
    find_lex $P6392, "$prefix_meth"
    unless_null $P6392, vivify_2884
    new $P6392, "Undef"
  vivify_2884:
    $P6393 = $P6386."pkg_add_method"($P6389, "add_method", $P6391, $P6392, 0)
.annotate 'line', 2268
    .return ($P6393)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block6285"  :anon :subid("566_1307835824.98345") :outer("564_1307835824.98345")
.annotate 'line', 2253
    $P6287 = root_new ['parrot';'Hash']
    .lex "%h", $P6287
.annotate 'line', 2252
    find_lex $P6288, "%h"
    unless_null $P6288, vivify_2893
    $P6288 = root_new ['parrot';'Hash']
  vivify_2893:
.annotate 'line', 2254
    find_lex $P6290, "$/"
    unless_null $P6290, vivify_2894
    $P6290 = root_new ['parrot';'Hash']
  vivify_2894:
    set $P6291, $P6290["sym"]
    unless_null $P6291, vivify_2895
    new $P6291, "Undef"
  vivify_2895:
    set $S6292, $P6291
    iseq $I6293, $S6292, "token"
    unless $I6293, if_6289_end
    new $P6294, "Integer"
    assign $P6294, 1
    find_lex $P6295, "%h"
    unless_null $P6295, vivify_2896
    $P6295 = root_new ['parrot';'Hash']
    store_lex "%h", $P6295
  vivify_2896:
    set $P6295["r"], $P6294
  if_6289_end:
.annotate 'line', 2255
    find_lex $P6297, "$/"
    unless_null $P6297, vivify_2897
    $P6297 = root_new ['parrot';'Hash']
  vivify_2897:
    set $P6298, $P6297["sym"]
    unless_null $P6298, vivify_2898
    new $P6298, "Undef"
  vivify_2898:
    set $S6299, $P6298
    iseq $I6300, $S6299, "rule"
    unless $I6300, if_6296_end
    new $P6301, "Integer"
    assign $P6301, 1
    find_lex $P6302, "%h"
    unless_null $P6302, vivify_2899
    $P6302 = root_new ['parrot';'Hash']
    store_lex "%h", $P6302
  vivify_2899:
    set $P6302["r"], $P6301
    new $P6303, "Integer"
    assign $P6303, 1
    find_lex $P6304, "%h"
    unless_null $P6304, vivify_2900
    $P6304 = root_new ['parrot';'Hash']
    store_lex "%h", $P6304
  vivify_2900:
    set $P6304["s"], $P6303
  if_6296_end:
.annotate 'line', 2256
    find_lex $P6305, "@MODIFIERS"
    unless_null $P6305, vivify_2901
    $P6305 = root_new ['parrot';'ResizablePMCArray']
  vivify_2901:
    find_lex $P6306, "%h"
    unless_null $P6306, vivify_2902
    $P6306 = root_new ['parrot';'Hash']
  vivify_2902:
    $P6305."unshift"($P6306)
.annotate 'line', 2257
    find_lex $P6307, "$name"
    unless_null $P6307, vivify_2903
    new $P6307, "Undef"
  vivify_2903:
    get_hll_global $P6308, "GLOBAL"
    nqp_get_package_through_who $P6309, $P6308, "Regex"
    nqp_get_package_through_who $P6310, $P6309, "P6Regex"
    nqp_get_package_through_who $P6311, $P6310, "Actions"
    get_who $P6312, $P6311
    set $P6312["$REGEXNAME"], $P6307
.annotate 'line', 2258
    find_lex $P6313, "$?PACKAGE"
    get_who $P6314, $P6313
    set $P6315, $P6314["@BLOCK"]
    unless_null $P6315, vivify_2904
    $P6315 = root_new ['parrot';'ResizablePMCArray']
  vivify_2904:
    set $P6316, $P6315[0]
    unless_null $P6316, vivify_2905
    new $P6316, "Undef"
  vivify_2905:
    $P6316."symbol"(unicode:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2259
    find_lex $P6317, "$?PACKAGE"
    get_who $P6318, $P6317
    set $P6319, $P6318["@BLOCK"]
    unless_null $P6319, vivify_2906
    $P6319 = root_new ['parrot';'ResizablePMCArray']
  vivify_2906:
    set $P6320, $P6319[0]
    unless_null $P6320, vivify_2907
    new $P6320, "Undef"
  vivify_2907:
    $P6320."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2260
    new $P6321, "Exception"
    set $P6321['type'], .CONTROL_RETURN
    new $P6322, "Integer"
    assign $P6322, 0
    setattribute $P6321, 'payload', $P6322
    throw $P6321
.annotate 'line', 2252
    .return ()
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block6265"  :anon :subid("565_1307835824.98345") :outer("564_1307835824.98345")
    .param pmc param_6267
.annotate 'line', 2248
    .lex "$_", param_6267
.annotate 'line', 2249
    find_dynamic_lex $P6270, "$*SC"
    unless_null $P6270, vivify_2916
    get_hll_global $P6268, "GLOBAL"
    get_who $P6269, $P6268
    set $P6270, $P6269["$SC"]
    unless_null $P6270, vivify_2917
    die "Contextual $*SC not found"
  vivify_2917:
  vivify_2916:
    find_dynamic_lex $P6273, "$*PACKAGE"
    unless_null $P6273, vivify_2918
    get_hll_global $P6271, "GLOBAL"
    get_who $P6272, $P6271
    set $P6273, $P6272["$PACKAGE"]
    unless_null $P6273, vivify_2919
    die "Contextual $*PACKAGE not found"
  vivify_2919:
  vivify_2918:
    find_lex $P6274, "$_"
    unless_null $P6274, vivify_2920
    new $P6274, "Undef"
  vivify_2920:
    $P6275 = $P6274."name"()
    find_lex $P6276, "$_"
    unless_null $P6276, vivify_2921
    new $P6276, "Undef"
  vivify_2921:
    $P6277 = $P6270."pkg_add_method"($P6273, "add_method", $P6275, $P6276, 0)
.annotate 'line', 2248
    .return ($P6277)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "dotty" :anon :subid("569_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6422
    .param pmc param_6423
.annotate 'line', 2297
    .lex "self", param_6422
    .lex "$/", param_6423
.annotate 'line', 2298
    new $P6424, "Undef"
    .lex "$past", $P6424
    find_lex $P6427, "$/"
    unless_null $P6427, vivify_2923
    $P6427 = root_new ['parrot';'Hash']
  vivify_2923:
    set $P6428, $P6427["args"]
    unless_null $P6428, vivify_2924
    new $P6428, "Undef"
  vivify_2924:
    if $P6428, if_6426
    get_hll_global $P6433, "GLOBAL"
    nqp_get_package_through_who $P6434, $P6433, "PAST"
    get_who $P6435, $P6434
    set $P6436, $P6435["Op"]
    find_lex $P6437, "$/"
    unless_null $P6437, vivify_2925
    new $P6437, "Undef"
  vivify_2925:
    $P6438 = $P6436."new"($P6437 :named("node"))
    set $P6425, $P6438
    goto if_6426_end
  if_6426:
    find_lex $P6429, "$/"
    unless_null $P6429, vivify_2926
    $P6429 = root_new ['parrot';'Hash']
  vivify_2926:
    set $P6430, $P6429["args"]
    unless_null $P6430, vivify_2927
    $P6430 = root_new ['parrot';'ResizablePMCArray']
  vivify_2927:
    set $P6431, $P6430[0]
    unless_null $P6431, vivify_2928
    new $P6431, "Undef"
  vivify_2928:
    $P6432 = $P6431."ast"()
    set $P6425, $P6432
  if_6426_end:
    store_lex "$past", $P6425
.annotate 'line', 2299
    find_lex $P6440, "$/"
    unless_null $P6440, vivify_2929
    $P6440 = root_new ['parrot';'Hash']
  vivify_2929:
    set $P6441, $P6440["quote"]
    unless_null $P6441, vivify_2930
    new $P6441, "Undef"
  vivify_2930:
    if $P6441, if_6439
.annotate 'line', 2303
    find_lex $P6448, "$/"
    unless_null $P6448, vivify_2931
    $P6448 = root_new ['parrot';'Hash']
  vivify_2931:
    set $P6449, $P6448["longname"]
    unless_null $P6449, vivify_2932
    new $P6449, "Undef"
  vivify_2932:
    set $S6450, $P6449
    iseq $I6451, $S6450, "HOW"
    if $I6451, if_6447
.annotate 'line', 2306
    find_lex $P6454, "$/"
    unless_null $P6454, vivify_2933
    $P6454 = root_new ['parrot';'Hash']
  vivify_2933:
    set $P6455, $P6454["longname"]
    unless_null $P6455, vivify_2934
    new $P6455, "Undef"
  vivify_2934:
    set $S6456, $P6455
    iseq $I6457, $S6456, "WHAT"
    if $I6457, if_6453
.annotate 'line', 2309
    find_lex $P6460, "$/"
    unless_null $P6460, vivify_2935
    $P6460 = root_new ['parrot';'Hash']
  vivify_2935:
    set $P6461, $P6460["longname"]
    unless_null $P6461, vivify_2936
    new $P6461, "Undef"
  vivify_2936:
    set $S6462, $P6461
    iseq $I6463, $S6462, "WHO"
    if $I6463, if_6459
.annotate 'line', 2313
    find_lex $P6465, "$past"
    unless_null $P6465, vivify_2937
    new $P6465, "Undef"
  vivify_2937:
    find_lex $P6466, "$/"
    unless_null $P6466, vivify_2938
    $P6466 = root_new ['parrot';'Hash']
  vivify_2938:
    set $P6467, $P6466["longname"]
    unless_null $P6467, vivify_2939
    new $P6467, "Undef"
  vivify_2939:
    set $S6468, $P6467
    $P6465."name"($S6468)
.annotate 'line', 2314
    find_lex $P6469, "$past"
    unless_null $P6469, vivify_2940
    new $P6469, "Undef"
  vivify_2940:
    $P6469."pasttype"("callmethod")
.annotate 'line', 2312
    goto if_6459_end
  if_6459:
.annotate 'line', 2310
    find_lex $P6464, "$past"
    unless_null $P6464, vivify_2941
    new $P6464, "Undef"
  vivify_2941:
    $P6464."pirop"("get_who PP")
  if_6459_end:
.annotate 'line', 2309
    goto if_6453_end
  if_6453:
.annotate 'line', 2307
    find_lex $P6458, "$past"
    unless_null $P6458, vivify_2942
    new $P6458, "Undef"
  vivify_2942:
    $P6458."pirop"("get_what PP")
  if_6453_end:
.annotate 'line', 2306
    goto if_6447_end
  if_6447:
.annotate 'line', 2304
    find_lex $P6452, "$past"
    unless_null $P6452, vivify_2943
    new $P6452, "Undef"
  vivify_2943:
    $P6452."pirop"("get_how PP")
  if_6447_end:
.annotate 'line', 2303
    goto if_6439_end
  if_6439:
.annotate 'line', 2300
    find_lex $P6442, "$past"
    unless_null $P6442, vivify_2944
    new $P6442, "Undef"
  vivify_2944:
    find_lex $P6443, "$/"
    unless_null $P6443, vivify_2945
    $P6443 = root_new ['parrot';'Hash']
  vivify_2945:
    set $P6444, $P6443["quote"]
    unless_null $P6444, vivify_2946
    new $P6444, "Undef"
  vivify_2946:
    $P6445 = $P6444."ast"()
    $P6442."name"($P6445)
.annotate 'line', 2301
    find_lex $P6446, "$past"
    unless_null $P6446, vivify_2947
    new $P6446, "Undef"
  vivify_2947:
    $P6446."pasttype"("callmethod")
  if_6439_end:
.annotate 'line', 2316
    find_lex $P6470, "$/"
    find_lex $P6471, "$past"
    unless_null $P6471, vivify_2948
    new $P6471, "Undef"
  vivify_2948:
    $P6472 = $P6470."!make"($P6471)
.annotate 'line', 2297
    .return ($P6472)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<self>" :anon :subid("570_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6474
    .param pmc param_6475
.annotate 'line', 2321
    .lex "self", param_6474
    .lex "$/", param_6475
.annotate 'line', 2322
    find_lex $P6476, "$/"
    get_hll_global $P6477, "GLOBAL"
    nqp_get_package_through_who $P6478, $P6477, "PAST"
    get_who $P6479, $P6478
    set $P6480, $P6479["Var"]
    $P6481 = $P6480."new"("self" :named("name"))
    $P6482 = $P6476."!make"($P6481)
.annotate 'line', 2321
    .return ($P6482)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<identifier>" :anon :subid("571_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6484
    .param pmc param_6485
.annotate 'line', 2325
    .lex "self", param_6484
    .lex "$/", param_6485
.annotate 'line', 2326
    new $P6486, "Undef"
    .lex "$past", $P6486
    find_lex $P6487, "$/"
    unless_null $P6487, vivify_2949
    $P6487 = root_new ['parrot';'Hash']
  vivify_2949:
    set $P6488, $P6487["args"]
    unless_null $P6488, vivify_2950
    new $P6488, "Undef"
  vivify_2950:
    $P6489 = $P6488."ast"()
    store_lex "$past", $P6489
.annotate 'line', 2327
    find_lex $P6490, "$past"
    unless_null $P6490, vivify_2951
    new $P6490, "Undef"
  vivify_2951:
    find_lex $P6491, "$/"
    unless_null $P6491, vivify_2952
    $P6491 = root_new ['parrot';'Hash']
  vivify_2952:
    set $P6492, $P6491["deflongname"]
    unless_null $P6492, vivify_2953
    new $P6492, "Undef"
  vivify_2953:
    set $S6493, $P6492
    $P6490."name"($S6493)
.annotate 'line', 2328
    find_lex $P6494, "$/"
    find_lex $P6495, "$past"
    unless_null $P6495, vivify_2954
    new $P6495, "Undef"
  vivify_2954:
    $P6496 = $P6494."!make"($P6495)
.annotate 'line', 2325
    .return ($P6496)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<name>" :anon :subid("572_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6498
    .param pmc param_6499
.annotate 'line', 2331
    .const 'Sub' $P6517 = "573_1307835824.98345" 
    capture_lex $P6517
    .lex "self", param_6498
    .lex "$/", param_6499
.annotate 'line', 2333
    new $P6500, "Undef"
    .lex "$var", $P6500
.annotate 'line', 2343
    new $P6501, "Undef"
    .lex "$past", $P6501
.annotate 'line', 2331
    find_lex $P6502, "$var"
    unless_null $P6502, vivify_2955
    new $P6502, "Undef"
  vivify_2955:
.annotate 'line', 2334
    find_lex $P6504, "$/"
    unless_null $P6504, vivify_2956
    $P6504 = root_new ['parrot';'Hash']
  vivify_2956:
    set $P6505, $P6504["name"]
    unless_null $P6505, vivify_2957
    new $P6505, "Undef"
  vivify_2957:
    set $S6506, $P6505
    $P6507 = "is_lexical"($S6506)
    if $P6507, if_6503
.annotate 'line', 2337
    .const 'Sub' $P6517 = "573_1307835824.98345" 
    capture_lex $P6517
    $P6517()
    goto if_6503_end
  if_6503:
.annotate 'line', 2335
    get_hll_global $P6508, "GLOBAL"
    nqp_get_package_through_who $P6509, $P6508, "PAST"
    get_who $P6510, $P6509
    set $P6511, $P6510["Var"]
    find_lex $P6512, "$/"
    unless_null $P6512, vivify_2963
    $P6512 = root_new ['parrot';'Hash']
  vivify_2963:
    set $P6513, $P6512["name"]
    unless_null $P6513, vivify_2964
    new $P6513, "Undef"
  vivify_2964:
    set $S6514, $P6513
    $P6515 = $P6511."new"($S6514 :named("name"), "lexical" :named("scope"))
    store_lex "$var", $P6515
  if_6503_end:
.annotate 'line', 2343
    find_lex $P6526, "$var"
    unless_null $P6526, vivify_2965
    new $P6526, "Undef"
  vivify_2965:
    store_lex "$past", $P6526
.annotate 'line', 2344
    find_lex $P6528, "$/"
    unless_null $P6528, vivify_2966
    $P6528 = root_new ['parrot';'Hash']
  vivify_2966:
    set $P6529, $P6528["args"]
    unless_null $P6529, vivify_2967
    new $P6529, "Undef"
  vivify_2967:
    unless $P6529, if_6527_end
.annotate 'line', 2345
    find_lex $P6530, "$/"
    unless_null $P6530, vivify_2968
    $P6530 = root_new ['parrot';'Hash']
  vivify_2968:
    set $P6531, $P6530["args"]
    unless_null $P6531, vivify_2969
    $P6531 = root_new ['parrot';'ResizablePMCArray']
  vivify_2969:
    set $P6532, $P6531[0]
    unless_null $P6532, vivify_2970
    new $P6532, "Undef"
  vivify_2970:
    $P6533 = $P6532."ast"()
    store_lex "$past", $P6533
.annotate 'line', 2346
    find_lex $P6534, "$past"
    unless_null $P6534, vivify_2971
    new $P6534, "Undef"
  vivify_2971:
    find_lex $P6535, "$var"
    unless_null $P6535, vivify_2972
    new $P6535, "Undef"
  vivify_2972:
    $P6534."unshift"($P6535)
  if_6527_end:
.annotate 'line', 2348
    find_lex $P6536, "$/"
    find_lex $P6537, "$past"
    unless_null $P6537, vivify_2973
    new $P6537, "Undef"
  vivify_2973:
    $P6538 = $P6536."!make"($P6537)
.annotate 'line', 2331
    .return ($P6538)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block6516"  :anon :subid("573_1307835824.98345") :outer("572_1307835824.98345")
.annotate 'line', 2338
    $P6518 = root_new ['parrot';'ResizablePMCArray']
    .lex "@ns", $P6518
    find_lex $P6519, "$/"
    unless_null $P6519, vivify_2958
    $P6519 = root_new ['parrot';'Hash']
  vivify_2958:
    set $P6520, $P6519["name"]
    unless_null $P6520, vivify_2959
    $P6520 = root_new ['parrot';'Hash']
  vivify_2959:
    set $P6521, $P6520["identifier"]
    unless_null $P6521, vivify_2960
    new $P6521, "Undef"
  vivify_2960:
    clone $P6522, $P6521
    store_lex "@ns", $P6522
.annotate 'line', 2339
    find_lex $P6523, "@ns"
    unless_null $P6523, vivify_2961
    $P6523 = root_new ['parrot';'ResizablePMCArray']
  vivify_2961:
    find_lex $P6524, "$/"
    unless_null $P6524, vivify_2962
    new $P6524, "Undef"
  vivify_2962:
    $P6525 = "lexical_package_lookup"($P6523, $P6524)
    store_lex "$var", $P6525
.annotate 'line', 2337
    .return ($P6525)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<pir::op>" :anon :subid("574_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6540
    .param pmc param_6541
.annotate 'line', 2351
    .lex "self", param_6540
    .lex "$/", param_6541
.annotate 'line', 2352
    new $P6542, "Undef"
    .lex "$past", $P6542
.annotate 'line', 2353
    new $P6543, "Undef"
    .lex "$pirop", $P6543
.annotate 'line', 2352
    find_lex $P6546, "$/"
    unless_null $P6546, vivify_2974
    $P6546 = root_new ['parrot';'Hash']
  vivify_2974:
    set $P6547, $P6546["args"]
    unless_null $P6547, vivify_2975
    new $P6547, "Undef"
  vivify_2975:
    if $P6547, if_6545
    get_hll_global $P6552, "GLOBAL"
    nqp_get_package_through_who $P6553, $P6552, "PAST"
    get_who $P6554, $P6553
    set $P6555, $P6554["Op"]
    find_lex $P6556, "$/"
    unless_null $P6556, vivify_2976
    new $P6556, "Undef"
  vivify_2976:
    $P6557 = $P6555."new"($P6556 :named("node"))
    set $P6544, $P6557
    goto if_6545_end
  if_6545:
    find_lex $P6548, "$/"
    unless_null $P6548, vivify_2977
    $P6548 = root_new ['parrot';'Hash']
  vivify_2977:
    set $P6549, $P6548["args"]
    unless_null $P6549, vivify_2978
    $P6549 = root_new ['parrot';'ResizablePMCArray']
  vivify_2978:
    set $P6550, $P6549[0]
    unless_null $P6550, vivify_2979
    new $P6550, "Undef"
  vivify_2979:
    $P6551 = $P6550."ast"()
    set $P6544, $P6551
  if_6545_end:
    store_lex "$past", $P6544
.annotate 'line', 2353
    find_lex $P6558, "$/"
    unless_null $P6558, vivify_2980
    $P6558 = root_new ['parrot';'Hash']
  vivify_2980:
    set $P6559, $P6558["op"]
    unless_null $P6559, vivify_2981
    new $P6559, "Undef"
  vivify_2981:
    set $S6560, $P6559
    new $P6561, 'String'
    set $P6561, $S6560
    store_lex "$pirop", $P6561
.annotate 'line', 2354
    find_lex $P6562, "$pirop"
    unless_null $P6562, vivify_2982
    new $P6562, "Undef"
  vivify_2982:
    set $S6563, $P6562
    split $P6564, "__", $S6563
    join $S6565, " ", $P6564
    new $P6566, 'String'
    set $P6566, $S6565
    store_lex "$pirop", $P6566
.annotate 'line', 2355
    find_lex $P6567, "$past"
    unless_null $P6567, vivify_2983
    new $P6567, "Undef"
  vivify_2983:
    find_lex $P6568, "$pirop"
    unless_null $P6568, vivify_2984
    new $P6568, "Undef"
  vivify_2984:
    $P6567."pirop"($P6568)
.annotate 'line', 2356
    find_lex $P6569, "$past"
    unless_null $P6569, vivify_2985
    new $P6569, "Undef"
  vivify_2985:
    $P6569."pasttype"("pirop")
.annotate 'line', 2357
    find_lex $P6570, "$/"
    find_lex $P6571, "$past"
    unless_null $P6571, vivify_2986
    new $P6571, "Undef"
  vivify_2986:
    $P6572 = $P6570."!make"($P6571)
.annotate 'line', 2351
    .return ($P6572)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<onlystar>" :anon :subid("575_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6574
    .param pmc param_6575
.annotate 'line', 2360
    .lex "self", param_6574
    .lex "$/", param_6575
.annotate 'line', 2361
    find_lex $P6576, "$/"
    get_hll_global $P6577, "GLOBAL"
    nqp_get_package_through_who $P6578, $P6577, "PAST"
    get_who $P6579, $P6578
    set $P6580, $P6579["Op"]
    $P6581 = $P6580."new"("multi_dispatch_over_lexical_candidates P" :named("pirop"))
    $P6582 = $P6576."!make"($P6581)
.annotate 'line', 2360
    .return ($P6582)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "args" :anon :subid("576_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6584
    .param pmc param_6585
.annotate 'line', 2366
    .lex "self", param_6584
    .lex "$/", param_6585
    find_lex $P6586, "$/"
    find_lex $P6587, "$/"
    unless_null $P6587, vivify_2987
    $P6587 = root_new ['parrot';'Hash']
  vivify_2987:
    set $P6588, $P6587["arglist"]
    unless_null $P6588, vivify_2988
    new $P6588, "Undef"
  vivify_2988:
    $P6589 = $P6588."ast"()
    $P6590 = $P6586."!make"($P6589)
    .return ($P6590)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "arglist" :anon :subid("577_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6592
    .param pmc param_6593
.annotate 'line', 2368
    .const 'Sub' $P6607 = "578_1307835824.98345" 
    capture_lex $P6607
    .lex "self", param_6592
    .lex "$/", param_6593
.annotate 'line', 2369
    new $P6594, "Undef"
    .lex "$past", $P6594
.annotate 'line', 2377
    new $P6595, "Undef"
    .lex "$i", $P6595
.annotate 'line', 2378
    new $P6596, "Undef"
    .lex "$n", $P6596
.annotate 'line', 2369
    get_hll_global $P6597, "GLOBAL"
    nqp_get_package_through_who $P6598, $P6597, "PAST"
    get_who $P6599, $P6598
    set $P6600, $P6599["Op"]
    find_lex $P6601, "$/"
    unless_null $P6601, vivify_2989
    new $P6601, "Undef"
  vivify_2989:
    $P6602 = $P6600."new"("call" :named("pasttype"), $P6601 :named("node"))
    store_lex "$past", $P6602
.annotate 'line', 2370
    find_lex $P6604, "$/"
    unless_null $P6604, vivify_2990
    $P6604 = root_new ['parrot';'Hash']
  vivify_2990:
    set $P6605, $P6604["EXPR"]
    unless_null $P6605, vivify_2991
    new $P6605, "Undef"
  vivify_2991:
    unless $P6605, if_6603_end
    .const 'Sub' $P6607 = "578_1307835824.98345" 
    capture_lex $P6607
    $P6607()
  if_6603_end:
.annotate 'line', 2377
    new $P6639, "Integer"
    assign $P6639, 0
    store_lex "$i", $P6639
.annotate 'line', 2378
    find_lex $P6640, "$past"
    unless_null $P6640, vivify_3002
    new $P6640, "Undef"
  vivify_3002:
    $P6641 = $P6640."list"()
    set $N6642, $P6641
    new $P6643, 'Float'
    set $P6643, $N6642
    store_lex "$n", $P6643
.annotate 'line', 2379
    new $P6694, 'ExceptionHandler'
    set_label $P6694, loop6693_handler
    $P6694."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P6694
  loop6693_test:
    find_lex $P6644, "$i"
    unless_null $P6644, vivify_3003
    new $P6644, "Undef"
  vivify_3003:
    set $N6645, $P6644
    find_lex $P6646, "$n"
    unless_null $P6646, vivify_3004
    new $P6646, "Undef"
  vivify_3004:
    set $N6647, $P6646
    islt $I6648, $N6645, $N6647
    unless $I6648, loop6693_done
  loop6693_redo:
.annotate 'line', 2380
    find_lex $P6650, "$i"
    unless_null $P6650, vivify_3005
    new $P6650, "Undef"
  vivify_3005:
    set $I6651, $P6650
    find_lex $P6652, "$past"
    unless_null $P6652, vivify_3006
    $P6652 = root_new ['parrot';'ResizablePMCArray']
  vivify_3006:
    set $P6653, $P6652[$I6651]
    unless_null $P6653, vivify_3007
    new $P6653, "Undef"
  vivify_3007:
    $S6654 = $P6653."name"()
    iseq $I6655, $S6654, "&prefix:<|>"
    unless $I6655, if_6649_end
.annotate 'line', 2381
    find_lex $P6656, "$i"
    unless_null $P6656, vivify_3008
    new $P6656, "Undef"
  vivify_3008:
    set $I6657, $P6656
    find_lex $P6658, "$past"
    unless_null $P6658, vivify_3009
    $P6658 = root_new ['parrot';'ResizablePMCArray']
  vivify_3009:
    set $P6659, $P6658[$I6657]
    unless_null $P6659, vivify_3010
    $P6659 = root_new ['parrot';'ResizablePMCArray']
  vivify_3010:
    set $P6660, $P6659[0]
    unless_null $P6660, vivify_3011
    new $P6660, "Undef"
  vivify_3011:
    find_lex $P6661, "$i"
    unless_null $P6661, vivify_3012
    new $P6661, "Undef"
  vivify_3012:
    set $I6662, $P6661
    find_lex $P6663, "$past"
    unless_null $P6663, vivify_3013
    $P6663 = root_new ['parrot';'ResizablePMCArray']
    store_lex "$past", $P6663
  vivify_3013:
    set $P6663[$I6662], $P6660
.annotate 'line', 2382
    find_lex $P6664, "$i"
    unless_null $P6664, vivify_3014
    new $P6664, "Undef"
  vivify_3014:
    set $I6665, $P6664
    find_lex $P6666, "$past"
    unless_null $P6666, vivify_3015
    $P6666 = root_new ['parrot';'ResizablePMCArray']
  vivify_3015:
    set $P6667, $P6666[$I6665]
    unless_null $P6667, vivify_3016
    new $P6667, "Undef"
  vivify_3016:
    $P6667."flat"(1)
.annotate 'line', 2383
    find_lex $P6671, "$i"
    unless_null $P6671, vivify_3017
    new $P6671, "Undef"
  vivify_3017:
    set $I6672, $P6671
    find_lex $P6673, "$past"
    unless_null $P6673, vivify_3018
    $P6673 = root_new ['parrot';'ResizablePMCArray']
  vivify_3018:
    set $P6674, $P6673[$I6672]
    unless_null $P6674, vivify_3019
    new $P6674, "Undef"
  vivify_3019:
    get_hll_global $P6675, "GLOBAL"
    nqp_get_package_through_who $P6676, $P6675, "PAST"
    get_who $P6677, $P6676
    set $P6678, $P6677["Val"]
    $P6679 = $P6674."isa"($P6678)
    if $P6679, if_6670
    set $P6669, $P6679
    goto if_6670_end
  if_6670:
.annotate 'line', 2384
    find_lex $P6680, "$i"
    unless_null $P6680, vivify_3020
    new $P6680, "Undef"
  vivify_3020:
    set $I6681, $P6680
    find_lex $P6682, "$past"
    unless_null $P6682, vivify_3021
    $P6682 = root_new ['parrot';'ResizablePMCArray']
  vivify_3021:
    set $P6683, $P6682[$I6681]
    unless_null $P6683, vivify_3022
    new $P6683, "Undef"
  vivify_3022:
    $S6684 = $P6683."name"()
    substr $S6685, $S6684, 0, 1
    iseq $I6686, $S6685, "%"
    new $P6669, 'Integer'
    set $P6669, $I6686
  if_6670_end:
    unless $P6669, if_6668_end
.annotate 'line', 2385
    find_lex $P6687, "$i"
    unless_null $P6687, vivify_3023
    new $P6687, "Undef"
  vivify_3023:
    set $I6688, $P6687
    find_lex $P6689, "$past"
    unless_null $P6689, vivify_3024
    $P6689 = root_new ['parrot';'ResizablePMCArray']
  vivify_3024:
    set $P6690, $P6689[$I6688]
    unless_null $P6690, vivify_3025
    new $P6690, "Undef"
  vivify_3025:
    $P6690."named"(1)
  if_6668_end:
  if_6649_end:
.annotate 'line', 2380
    find_lex $P6691, "$i"
    unless_null $P6691, vivify_3026
    new $P6691, "Undef"
  vivify_3026:
    clone $P6692, $P6691
    inc $P6691
  loop6693_next:
.annotate 'line', 2379
    goto loop6693_test
  loop6693_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P6695, exception, 'type'
    eq $P6695, .CONTROL_LOOP_NEXT, loop6693_next
    eq $P6695, .CONTROL_LOOP_REDO, loop6693_redo
  loop6693_done:
    pop_eh 
.annotate 'line', 2390
    find_lex $P6696, "$/"
    find_lex $P6697, "$past"
    unless_null $P6697, vivify_3027
    new $P6697, "Undef"
  vivify_3027:
    $P6698 = $P6696."!make"($P6697)
.annotate 'line', 2368
    .return ($P6698)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block6606"  :anon :subid("578_1307835824.98345") :outer("577_1307835824.98345")
.annotate 'line', 2370
    .const 'Sub' $P6628 = "579_1307835824.98345" 
    capture_lex $P6628
.annotate 'line', 2371
    new $P6608, "Undef"
    .lex "$expr", $P6608
    find_lex $P6609, "$/"
    unless_null $P6609, vivify_2992
    $P6609 = root_new ['parrot';'Hash']
  vivify_2992:
    set $P6610, $P6609["EXPR"]
    unless_null $P6610, vivify_2993
    new $P6610, "Undef"
  vivify_2993:
    $P6611 = $P6610."ast"()
    store_lex "$expr", $P6611
.annotate 'line', 2372
    find_lex $P6616, "$expr"
    unless_null $P6616, vivify_2994
    new $P6616, "Undef"
  vivify_2994:
    $S6617 = $P6616."name"()
    iseq $I6618, $S6617, "&infix:<,>"
    if $I6618, if_6615
    new $P6614, 'Integer'
    set $P6614, $I6618
    goto if_6615_end
  if_6615:
    find_lex $P6619, "$expr"
    unless_null $P6619, vivify_2995
    new $P6619, "Undef"
  vivify_2995:
    $P6620 = $P6619."named"()
    isfalse $I6621, $P6620
    new $P6614, 'Integer'
    set $P6614, $I6621
  if_6615_end:
    if $P6614, if_6613
.annotate 'line', 2375
    find_lex $P6636, "$past"
    unless_null $P6636, vivify_2996
    new $P6636, "Undef"
  vivify_2996:
    find_lex $P6637, "$expr"
    unless_null $P6637, vivify_2997
    new $P6637, "Undef"
  vivify_2997:
    $P6638 = $P6636."push"($P6637)
    set $P6612, $P6638
.annotate 'line', 2372
    goto if_6613_end
  if_6613:
.annotate 'line', 2373
    find_lex $P6623, "$expr"
    unless_null $P6623, vivify_2998
    new $P6623, "Undef"
  vivify_2998:
    $P6624 = $P6623."list"()
    defined $I6625, $P6624
    unless $I6625, for_undef_2999
    iter $P6622, $P6624
    new $P6634, 'ExceptionHandler'
    set_label $P6634, loop6633_handler
    $P6634."handle_types"(.CONTROL_LOOP_NEXT, .CONTROL_LOOP_REDO, .CONTROL_LOOP_LAST)
    push_eh $P6634
  loop6633_test:
    unless $P6622, loop6633_done
    shift $P6626, $P6622
  loop6633_redo:
    .const 'Sub' $P6628 = "579_1307835824.98345" 
    capture_lex $P6628
    $P6628($P6626)
  loop6633_next:
    goto loop6633_test
  loop6633_handler:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P6635, exception, 'type'
    eq $P6635, .CONTROL_LOOP_NEXT, loop6633_next
    eq $P6635, .CONTROL_LOOP_REDO, loop6633_redo
  loop6633_done:
    pop_eh 
  for_undef_2999:
.annotate 'line', 2372
    set $P6612, $P6622
  if_6613_end:
.annotate 'line', 2370
    .return ($P6612)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block6627"  :anon :subid("579_1307835824.98345") :outer("578_1307835824.98345")
    .param pmc param_6629
.annotate 'line', 2373
    .lex "$_", param_6629
    find_lex $P6630, "$past"
    unless_null $P6630, vivify_3000
    new $P6630, "Undef"
  vivify_3000:
    find_lex $P6631, "$_"
    unless_null $P6631, vivify_3001
    new $P6631, "Undef"
  vivify_3001:
    $P6632 = $P6630."push"($P6631)
    .return ($P6632)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<multi_declarator>" :anon :subid("580_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6700
    .param pmc param_6701
.annotate 'line', 2393
    .lex "self", param_6700
    .lex "$/", param_6701
    find_lex $P6702, "$/"
    find_lex $P6703, "$/"
    unless_null $P6703, vivify_3028
    $P6703 = root_new ['parrot';'Hash']
  vivify_3028:
    set $P6704, $P6703["multi_declarator"]
    unless_null $P6704, vivify_3029
    new $P6704, "Undef"
  vivify_3029:
    $P6705 = $P6704."ast"()
    $P6706 = $P6702."!make"($P6705)
    .return ($P6706)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<value>" :anon :subid("581_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6708
    .param pmc param_6709
.annotate 'line', 2395
    .lex "self", param_6708
    .lex "$/", param_6709
    find_lex $P6710, "$/"
    find_lex $P6711, "$/"
    unless_null $P6711, vivify_3030
    $P6711 = root_new ['parrot';'Hash']
  vivify_3030:
    set $P6712, $P6711["value"]
    unless_null $P6712, vivify_3031
    new $P6712, "Undef"
  vivify_3031:
    $P6713 = $P6712."ast"()
    $P6714 = $P6710."!make"($P6713)
    .return ($P6714)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<( )>" :anon :subid("582_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6716
    .param pmc param_6717
.annotate 'line', 2397
    .lex "self", param_6716
    .lex "$/", param_6717
.annotate 'line', 2398
    find_lex $P6718, "$/"
.annotate 'line', 2399
    find_lex $P6721, "$/"
    unless_null $P6721, vivify_3032
    $P6721 = root_new ['parrot';'Hash']
  vivify_3032:
    set $P6722, $P6721["EXPR"]
    unless_null $P6722, vivify_3033
    new $P6722, "Undef"
  vivify_3033:
    if $P6722, if_6720
.annotate 'line', 2400
    get_hll_global $P6727, "GLOBAL"
    nqp_get_package_through_who $P6728, $P6727, "PAST"
    get_who $P6729, $P6728
    set $P6730, $P6729["Op"]
    find_lex $P6731, "$/"
    unless_null $P6731, vivify_3034
    new $P6731, "Undef"
  vivify_3034:
    $P6732 = $P6730."new"("list" :named("pasttype"), $P6731 :named("node"))
    set $P6719, $P6732
.annotate 'line', 2399
    goto if_6720_end
  if_6720:
    find_lex $P6723, "$/"
    unless_null $P6723, vivify_3035
    $P6723 = root_new ['parrot';'Hash']
  vivify_3035:
    set $P6724, $P6723["EXPR"]
    unless_null $P6724, vivify_3036
    $P6724 = root_new ['parrot';'ResizablePMCArray']
  vivify_3036:
    set $P6725, $P6724[0]
    unless_null $P6725, vivify_3037
    new $P6725, "Undef"
  vivify_3037:
    $P6726 = $P6725."ast"()
    set $P6719, $P6726
  if_6720_end:
    $P6733 = $P6718."!make"($P6719)
.annotate 'line', 2397
    .return ($P6733)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<[ ]>" :anon :subid("583_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6735
    .param pmc param_6736
.annotate 'line', 2403
    .lex "self", param_6735
    .lex "$/", param_6736
.annotate 'line', 2404
    new $P6737, "Undef"
    .lex "$past", $P6737
.annotate 'line', 2403
    find_lex $P6738, "$past"
    unless_null $P6738, vivify_3038
    new $P6738, "Undef"
  vivify_3038:
.annotate 'line', 2405
    find_lex $P6740, "$/"
    unless_null $P6740, vivify_3039
    $P6740 = root_new ['parrot';'Hash']
  vivify_3039:
    set $P6741, $P6740["EXPR"]
    unless_null $P6741, vivify_3040
    new $P6741, "Undef"
  vivify_3040:
    if $P6741, if_6739
.annotate 'line', 2412
    get_hll_global $P6756, "GLOBAL"
    nqp_get_package_through_who $P6757, $P6756, "PAST"
    get_who $P6758, $P6757
    set $P6759, $P6758["Op"]
    $P6760 = $P6759."new"("list" :named("pasttype"))
    store_lex "$past", $P6760
.annotate 'line', 2411
    goto if_6739_end
  if_6739:
.annotate 'line', 2406
    find_lex $P6742, "$/"
    unless_null $P6742, vivify_3041
    $P6742 = root_new ['parrot';'Hash']
  vivify_3041:
    set $P6743, $P6742["EXPR"]
    unless_null $P6743, vivify_3042
    $P6743 = root_new ['parrot';'ResizablePMCArray']
  vivify_3042:
    set $P6744, $P6743[0]
    unless_null $P6744, vivify_3043
    new $P6744, "Undef"
  vivify_3043:
    $P6745 = $P6744."ast"()
    store_lex "$past", $P6745
.annotate 'line', 2407
    find_lex $P6747, "$past"
    unless_null $P6747, vivify_3044
    new $P6747, "Undef"
  vivify_3044:
    $S6748 = $P6747."name"()
    isne $I6749, $S6748, "&infix:<,>"
    unless $I6749, if_6746_end
.annotate 'line', 2408
    get_hll_global $P6750, "GLOBAL"
    nqp_get_package_through_who $P6751, $P6750, "PAST"
    get_who $P6752, $P6751
    set $P6753, $P6752["Op"]
    find_lex $P6754, "$past"
    unless_null $P6754, vivify_3045
    new $P6754, "Undef"
  vivify_3045:
    $P6755 = $P6753."new"($P6754, "list" :named("pasttype"))
    store_lex "$past", $P6755
  if_6746_end:
  if_6739_end:
.annotate 'line', 2414
    find_lex $P6761, "$past"
    unless_null $P6761, vivify_3046
    new $P6761, "Undef"
  vivify_3046:
    $P6761."name"("&circumfix:<[ ]>")
.annotate 'line', 2415
    find_lex $P6762, "$/"
    find_lex $P6763, "$past"
    unless_null $P6763, vivify_3047
    new $P6763, "Undef"
  vivify_3047:
    $P6764 = $P6762."!make"($P6763)
.annotate 'line', 2403
    .return ($P6764)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<ang>" :anon :subid("584_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6766
    .param pmc param_6767
.annotate 'line', 2418
    .lex "self", param_6766
    .lex "$/", param_6767
    find_lex $P6768, "$/"
    find_lex $P6769, "$/"
    unless_null $P6769, vivify_3048
    $P6769 = root_new ['parrot';'Hash']
  vivify_3048:
    set $P6770, $P6769["quote_EXPR"]
    unless_null $P6770, vivify_3049
    new $P6770, "Undef"
  vivify_3049:
    $P6771 = $P6770."ast"()
    $P6772 = $P6768."!make"($P6771)
    .return ($P6772)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub unicode:"circumfix:sym<\x{ab} \x{bb}>" :anon :subid("585_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6774
    .param pmc param_6775
.annotate 'line', 2419
    .lex "self", param_6774
    .lex "$/", param_6775
    find_lex $P6776, "$/"
    find_lex $P6777, "$/"
    unless_null $P6777, vivify_3050
    $P6777 = root_new ['parrot';'Hash']
  vivify_3050:
    set $P6778, $P6777["quote_EXPR"]
    unless_null $P6778, vivify_3051
    new $P6778, "Undef"
  vivify_3051:
    $P6779 = $P6778."ast"()
    $P6780 = $P6776."!make"($P6779)
    .return ($P6780)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<{ }>" :anon :subid("586_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6782
    .param pmc param_6783
.annotate 'line', 2421
    .const 'Sub' $P6794 = "587_1307835824.98345" 
    capture_lex $P6794
    .lex "self", param_6782
    .lex "$/", param_6783
.annotate 'line', 2422
    find_lex $P6786, "$/"
    unless_null $P6786, vivify_3052
    $P6786 = root_new ['parrot';'Hash']
  vivify_3052:
    set $P6787, $P6786["pblock"]
    unless_null $P6787, vivify_3053
    $P6787 = root_new ['parrot';'Hash']
  vivify_3053:
    set $P6788, $P6787["blockoid"]
    unless_null $P6788, vivify_3054
    $P6788 = root_new ['parrot';'Hash']
  vivify_3054:
    set $P6789, $P6788["statementlist"]
    unless_null $P6789, vivify_3055
    $P6789 = root_new ['parrot';'Hash']
  vivify_3055:
    set $P6790, $P6789["statement"]
    unless_null $P6790, vivify_3056
    new $P6790, "Undef"
  vivify_3056:
    set $N6791, $P6790
    isgt $I6792, $N6791, 0.0
    if $I6792, if_6785
.annotate 'line', 2427
    find_lex $P6807, "$/"
    unless_null $P6807, vivify_3057
    $P6807 = root_new ['parrot';'Hash']
  vivify_3057:
    set $P6808, $P6807["pblock"]
    unless_null $P6808, vivify_3058
    $P6808 = root_new ['parrot';'Hash']
  vivify_3058:
    set $P6809, $P6808["blockoid"]
    unless_null $P6809, vivify_3059
    $P6809 = root_new ['parrot';'Hash']
  vivify_3059:
    set $P6810, $P6809["you_are_here"]
    unless_null $P6810, vivify_3060
    new $P6810, "Undef"
  vivify_3060:
    if $P6810, if_6806
.annotate 'line', 2431
    find_lex $P6816, "$/"
    $P6817 = "vivitype"("%")
    $P6818 = $P6816."!make"($P6817)
.annotate 'line', 2430
    set $P6805, $P6818
.annotate 'line', 2427
    goto if_6806_end
  if_6806:
.annotate 'line', 2428
    find_lex $P6811, "$/"
    find_lex $P6812, "$/"
    unless_null $P6812, vivify_3061
    $P6812 = root_new ['parrot';'Hash']
  vivify_3061:
    set $P6813, $P6812["pblock"]
    unless_null $P6813, vivify_3062
    new $P6813, "Undef"
  vivify_3062:
    $P6814 = $P6813."ast"()
    $P6815 = $P6811."!make"($P6814)
.annotate 'line', 2427
    set $P6805, $P6815
  if_6806_end:
    set $P6784, $P6805
.annotate 'line', 2422
    goto if_6785_end
  if_6785:
    .const 'Sub' $P6794 = "587_1307835824.98345" 
    capture_lex $P6794
    $P6804 = $P6794()
    set $P6784, $P6804
  if_6785_end:
.annotate 'line', 2421
    .return ($P6784)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "_block6793"  :anon :subid("587_1307835824.98345") :outer("586_1307835824.98345")
.annotate 'line', 2423
    new $P6795, "Undef"
    .lex "$past", $P6795
    find_lex $P6796, "$/"
    unless_null $P6796, vivify_3063
    $P6796 = root_new ['parrot';'Hash']
  vivify_3063:
    set $P6797, $P6796["pblock"]
    unless_null $P6797, vivify_3064
    new $P6797, "Undef"
  vivify_3064:
    $P6798 = $P6797."ast"()
    store_lex "$past", $P6798
.annotate 'line', 2424
    new $P6799, "Integer"
    assign $P6799, 1
    find_lex $P6800, "$past"
    unless_null $P6800, vivify_3065
    $P6800 = root_new ['parrot';'Hash']
    store_lex "$past", $P6800
  vivify_3065:
    set $P6800["bareblock"], $P6799
.annotate 'line', 2425
    find_dynamic_lex $P6801, "$/"
    find_lex $P6802, "$past"
    unless_null $P6802, vivify_3066
    new $P6802, "Undef"
  vivify_3066:
    $P6803 = $P6801."!make"($P6802)
.annotate 'line', 2422
    .return ($P6803)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "circumfix:sym<sigil>" :anon :subid("588_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6820
    .param pmc param_6821
.annotate 'line', 2435
    .lex "self", param_6820
    .lex "$/", param_6821
.annotate 'line', 2436
    new $P6822, "Undef"
    .lex "$name", $P6822
    find_lex $P6825, "$/"
    unless_null $P6825, vivify_3067
    $P6825 = root_new ['parrot';'Hash']
  vivify_3067:
    set $P6826, $P6825["sigil"]
    unless_null $P6826, vivify_3068
    new $P6826, "Undef"
  vivify_3068:
    set $S6827, $P6826
    iseq $I6828, $S6827, "@"
    if $I6828, if_6824
.annotate 'line', 2437
    find_lex $P6832, "$/"
    unless_null $P6832, vivify_3069
    $P6832 = root_new ['parrot';'Hash']
  vivify_3069:
    set $P6833, $P6832["sigil"]
    unless_null $P6833, vivify_3070
    new $P6833, "Undef"
  vivify_3070:
    set $S6834, $P6833
    iseq $I6835, $S6834, "%"
    if $I6835, if_6831
    new $P6837, "String"
    assign $P6837, "item"
    set $P6830, $P6837
    goto if_6831_end
  if_6831:
    new $P6836, "String"
    assign $P6836, "hash"
    set $P6830, $P6836
  if_6831_end:
    set $P6823, $P6830
.annotate 'line', 2436
    goto if_6824_end
  if_6824:
    new $P6829, "String"
    assign $P6829, "list"
    set $P6823, $P6829
  if_6824_end:
    store_lex "$name", $P6823
.annotate 'line', 2439
    find_lex $P6838, "$/"
    get_hll_global $P6839, "GLOBAL"
    nqp_get_package_through_who $P6840, $P6839, "PAST"
    get_who $P6841, $P6840
    set $P6842, $P6841["Op"]
    find_lex $P6843, "$name"
    unless_null $P6843, vivify_3071
    new $P6843, "Undef"
  vivify_3071:
    find_lex $P6844, "$/"
    unless_null $P6844, vivify_3072
    $P6844 = root_new ['parrot';'Hash']
  vivify_3072:
    set $P6845, $P6844["semilist"]
    unless_null $P6845, vivify_3073
    new $P6845, "Undef"
  vivify_3073:
    $P6846 = $P6845."ast"()
    $P6847 = $P6842."new"($P6846, "callmethod" :named("pasttype"), $P6843 :named("name"))
    $P6848 = $P6838."!make"($P6847)
.annotate 'line', 2435
    .return ($P6848)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "semilist" :anon :subid("589_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6850
    .param pmc param_6851
.annotate 'line', 2442
    .lex "self", param_6850
    .lex "$/", param_6851
    find_lex $P6852, "$/"
    find_lex $P6853, "$/"
    unless_null $P6853, vivify_3074
    $P6853 = root_new ['parrot';'Hash']
  vivify_3074:
    set $P6854, $P6853["statement"]
    unless_null $P6854, vivify_3075
    new $P6854, "Undef"
  vivify_3075:
    $P6855 = $P6854."ast"()
    $P6856 = $P6852."!make"($P6855)
    .return ($P6856)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<[ ]>" :anon :subid("590_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6858
    .param pmc param_6859
.annotate 'line', 2444
    .lex "self", param_6858
    .lex "$/", param_6859
.annotate 'line', 2445
    find_lex $P6860, "$/"
    get_hll_global $P6861, "GLOBAL"
    nqp_get_package_through_who $P6862, $P6861, "PAST"
    get_who $P6863, $P6862
    set $P6864, $P6863["Var"]
    find_lex $P6865, "$/"
    unless_null $P6865, vivify_3076
    $P6865 = root_new ['parrot';'Hash']
  vivify_3076:
    set $P6866, $P6865["EXPR"]
    unless_null $P6866, vivify_3077
    new $P6866, "Undef"
  vivify_3077:
    $P6867 = $P6866."ast"()
.annotate 'line', 2447
    $P6868 = "vivitype"("@")
    $P6869 = $P6864."new"($P6867, "keyed_int" :named("scope"), "Undef" :named("viviself"), $P6868 :named("vivibase"))
.annotate 'line', 2445
    $P6870 = $P6860."!make"($P6869)
.annotate 'line', 2444
    .return ($P6870)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<{ }>" :anon :subid("591_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6872
    .param pmc param_6873
.annotate 'line', 2450
    .lex "self", param_6872
    .lex "$/", param_6873
.annotate 'line', 2451
    find_lex $P6874, "$/"
    get_hll_global $P6875, "GLOBAL"
    nqp_get_package_through_who $P6876, $P6875, "PAST"
    get_who $P6877, $P6876
    set $P6878, $P6877["Var"]
    find_lex $P6879, "$/"
    unless_null $P6879, vivify_3078
    $P6879 = root_new ['parrot';'Hash']
  vivify_3078:
    set $P6880, $P6879["EXPR"]
    unless_null $P6880, vivify_3079
    new $P6880, "Undef"
  vivify_3079:
    $P6881 = $P6880."ast"()
.annotate 'line', 2453
    $P6882 = "vivitype"("%")
    $P6883 = $P6878."new"($P6881, "keyed" :named("scope"), "Undef" :named("viviself"), $P6882 :named("vivibase"))
.annotate 'line', 2451
    $P6884 = $P6874."!make"($P6883)
.annotate 'line', 2450
    .return ($P6884)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<ang>" :anon :subid("592_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6886
    .param pmc param_6887
.annotate 'line', 2456
    .lex "self", param_6886
    .lex "$/", param_6887
.annotate 'line', 2457
    find_lex $P6888, "$/"
    get_hll_global $P6889, "GLOBAL"
    nqp_get_package_through_who $P6890, $P6889, "PAST"
    get_who $P6891, $P6890
    set $P6892, $P6891["Var"]
    find_lex $P6893, "$/"
    unless_null $P6893, vivify_3080
    $P6893 = root_new ['parrot';'Hash']
  vivify_3080:
    set $P6894, $P6893["quote_EXPR"]
    unless_null $P6894, vivify_3081
    new $P6894, "Undef"
  vivify_3081:
    $P6895 = $P6894."ast"()
.annotate 'line', 2459
    $P6896 = "vivitype"("%")
    $P6897 = $P6892."new"($P6895, "keyed" :named("scope"), "Undef" :named("viviself"), $P6896 :named("vivibase"))
.annotate 'line', 2457
    $P6898 = $P6888."!make"($P6897)
.annotate 'line', 2456
    .return ($P6898)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postcircumfix:sym<( )>" :anon :subid("593_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6900
    .param pmc param_6901
.annotate 'line', 2462
    .lex "self", param_6900
    .lex "$/", param_6901
.annotate 'line', 2463
    find_lex $P6902, "$/"
    find_lex $P6903, "$/"
    unless_null $P6903, vivify_3082
    $P6903 = root_new ['parrot';'Hash']
  vivify_3082:
    set $P6904, $P6903["arglist"]
    unless_null $P6904, vivify_3083
    new $P6904, "Undef"
  vivify_3083:
    $P6905 = $P6904."ast"()
    $P6906 = $P6902."!make"($P6905)
.annotate 'line', 2462
    .return ($P6906)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "value" :anon :subid("594_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6908
    .param pmc param_6909
.annotate 'line', 2466
    .lex "self", param_6908
    .lex "$/", param_6909
.annotate 'line', 2467
    find_lex $P6910, "$/"
    find_lex $P6913, "$/"
    unless_null $P6913, vivify_3084
    $P6913 = root_new ['parrot';'Hash']
  vivify_3084:
    set $P6914, $P6913["quote"]
    unless_null $P6914, vivify_3085
    new $P6914, "Undef"
  vivify_3085:
    if $P6914, if_6912
    find_lex $P6918, "$/"
    unless_null $P6918, vivify_3086
    $P6918 = root_new ['parrot';'Hash']
  vivify_3086:
    set $P6919, $P6918["number"]
    unless_null $P6919, vivify_3087
    new $P6919, "Undef"
  vivify_3087:
    $P6920 = $P6919."ast"()
    set $P6911, $P6920
    goto if_6912_end
  if_6912:
    find_lex $P6915, "$/"
    unless_null $P6915, vivify_3088
    $P6915 = root_new ['parrot';'Hash']
  vivify_3088:
    set $P6916, $P6915["quote"]
    unless_null $P6916, vivify_3089
    new $P6916, "Undef"
  vivify_3089:
    $P6917 = $P6916."ast"()
    set $P6911, $P6917
  if_6912_end:
    $P6921 = $P6910."!make"($P6911)
.annotate 'line', 2466
    .return ($P6921)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "number" :anon :subid("595_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6923
    .param pmc param_6924
.annotate 'line', 2470
    .lex "self", param_6923
    .lex "$/", param_6924
.annotate 'line', 2471
    new $P6925, "Undef"
    .lex "$value", $P6925
    find_lex $P6928, "$/"
    unless_null $P6928, vivify_3090
    $P6928 = root_new ['parrot';'Hash']
  vivify_3090:
    set $P6929, $P6928["dec_number"]
    unless_null $P6929, vivify_3091
    new $P6929, "Undef"
  vivify_3091:
    if $P6929, if_6927
    find_lex $P6933, "$/"
    unless_null $P6933, vivify_3092
    $P6933 = root_new ['parrot';'Hash']
  vivify_3092:
    set $P6934, $P6933["integer"]
    unless_null $P6934, vivify_3093
    new $P6934, "Undef"
  vivify_3093:
    $P6935 = $P6934."ast"()
    set $P6926, $P6935
    goto if_6927_end
  if_6927:
    find_lex $P6930, "$/"
    unless_null $P6930, vivify_3094
    $P6930 = root_new ['parrot';'Hash']
  vivify_3094:
    set $P6931, $P6930["dec_number"]
    unless_null $P6931, vivify_3095
    new $P6931, "Undef"
  vivify_3095:
    $P6932 = $P6931."ast"()
    set $P6926, $P6932
  if_6927_end:
    store_lex "$value", $P6926
.annotate 'line', 2472
    find_lex $P6937, "$/"
    unless_null $P6937, vivify_3096
    $P6937 = root_new ['parrot';'Hash']
  vivify_3096:
    set $P6938, $P6937["sign"]
    unless_null $P6938, vivify_3097
    new $P6938, "Undef"
  vivify_3097:
    set $S6939, $P6938
    iseq $I6940, $S6939, "-"
    unless $I6940, if_6936_end
    find_lex $P6941, "$value"
    unless_null $P6941, vivify_3098
    new $P6941, "Undef"
  vivify_3098:
    neg $P6942, $P6941
    store_lex "$value", $P6942
  if_6936_end:
.annotate 'line', 2473
    find_lex $P6943, "$/"
    get_hll_global $P6944, "GLOBAL"
    nqp_get_package_through_who $P6945, $P6944, "PAST"
    get_who $P6946, $P6945
    set $P6947, $P6946["Val"]
    find_lex $P6948, "$value"
    unless_null $P6948, vivify_3099
    new $P6948, "Undef"
  vivify_3099:
    $P6949 = $P6947."new"($P6948 :named("value"))
    $P6950 = $P6943."!make"($P6949)
.annotate 'line', 2470
    .return ($P6950)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<apos>" :anon :subid("596_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6952
    .param pmc param_6953
.annotate 'line', 2476
    .lex "self", param_6952
    .lex "$/", param_6953
    find_lex $P6954, "$/"
    find_lex $P6955, "$/"
    unless_null $P6955, vivify_3100
    $P6955 = root_new ['parrot';'Hash']
  vivify_3100:
    set $P6956, $P6955["quote_EXPR"]
    unless_null $P6956, vivify_3101
    new $P6956, "Undef"
  vivify_3101:
    $P6957 = $P6956."ast"()
    $P6958 = $P6954."!make"($P6957)
    .return ($P6958)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<dblq>" :anon :subid("597_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6960
    .param pmc param_6961
.annotate 'line', 2477
    .lex "self", param_6960
    .lex "$/", param_6961
    find_lex $P6962, "$/"
    find_lex $P6963, "$/"
    unless_null $P6963, vivify_3102
    $P6963 = root_new ['parrot';'Hash']
  vivify_3102:
    set $P6964, $P6963["quote_EXPR"]
    unless_null $P6964, vivify_3103
    new $P6964, "Undef"
  vivify_3103:
    $P6965 = $P6964."ast"()
    $P6966 = $P6962."!make"($P6965)
    .return ($P6966)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<qq>" :anon :subid("598_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6968
    .param pmc param_6969
.annotate 'line', 2478
    .lex "self", param_6968
    .lex "$/", param_6969
    find_lex $P6970, "$/"
    find_lex $P6971, "$/"
    unless_null $P6971, vivify_3104
    $P6971 = root_new ['parrot';'Hash']
  vivify_3104:
    set $P6972, $P6971["quote_EXPR"]
    unless_null $P6972, vivify_3105
    new $P6972, "Undef"
  vivify_3105:
    $P6973 = $P6972."ast"()
    $P6974 = $P6970."!make"($P6973)
    .return ($P6974)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<q>" :anon :subid("599_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6976
    .param pmc param_6977
.annotate 'line', 2479
    .lex "self", param_6976
    .lex "$/", param_6977
    find_lex $P6978, "$/"
    find_lex $P6979, "$/"
    unless_null $P6979, vivify_3106
    $P6979 = root_new ['parrot';'Hash']
  vivify_3106:
    set $P6980, $P6979["quote_EXPR"]
    unless_null $P6980, vivify_3107
    new $P6980, "Undef"
  vivify_3107:
    $P6981 = $P6980."ast"()
    $P6982 = $P6978."!make"($P6981)
    .return ($P6982)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<Q>" :anon :subid("600_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6984
    .param pmc param_6985
.annotate 'line', 2480
    .lex "self", param_6984
    .lex "$/", param_6985
    find_lex $P6986, "$/"
    find_lex $P6987, "$/"
    unless_null $P6987, vivify_3108
    $P6987 = root_new ['parrot';'Hash']
  vivify_3108:
    set $P6988, $P6987["quote_EXPR"]
    unless_null $P6988, vivify_3109
    new $P6988, "Undef"
  vivify_3109:
    $P6989 = $P6988."ast"()
    $P6990 = $P6986."!make"($P6989)
    .return ($P6990)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote:sym<Q:PIR>" :anon :subid("601_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_6992
    .param pmc param_6993
.annotate 'line', 2481
    .lex "self", param_6992
    .lex "$/", param_6993
.annotate 'line', 2482
    find_lex $P6994, "$/"
    get_hll_global $P6995, "GLOBAL"
    nqp_get_package_through_who $P6996, $P6995, "PAST"
    get_who $P6997, $P6996
    set $P6998, $P6997["Op"]
    find_lex $P6999, "$/"
    unless_null $P6999, vivify_3110
    $P6999 = root_new ['parrot';'Hash']
  vivify_3110:
    set $P7000, $P6999["quote_EXPR"]
    unless_null $P7000, vivify_3111
    new $P7000, "Undef"
  vivify_3111:
    $P7001 = $P7000."ast"()
    $P7002 = $P7001."value"()
    find_lex $P7003, "$/"
    unless_null $P7003, vivify_3112
    new $P7003, "Undef"
  vivify_3112:
    $P7004 = $P6998."new"($P7002 :named("inline"), "inline" :named("pasttype"), $P7003 :named("node"))
    $P7005 = $P6994."!make"($P7004)
.annotate 'line', 2481
    .return ($P7005)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "quote:sym</ />" :anon :subid("602_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_7009
    .param pmc param_7010
    .param pmc param_7011 :optional
    .param int has_param_7011 :opt_flag
.annotate 'line', 2487
    new $P7008, ['ExceptionHandler'], .CONTROL_RETURN
    set_label $P7008, control_7007
    push_eh $P7008
    .lex "self", param_7009
    .lex "$/", param_7010
    if has_param_7011, optparam_3113
    new $P7012, "Undef"
    set param_7011, $P7012
  optparam_3113:
    .lex "$key", param_7011
.annotate 'line', 2494
    new $P7013, "Undef"
    .lex "$regex", $P7013
.annotate 'line', 2496
    new $P7014, "Undef"
    .lex "$past", $P7014
.annotate 'line', 2488
    find_lex $P7016, "$key"
    unless_null $P7016, vivify_3114
    new $P7016, "Undef"
  vivify_3114:
    set $S7017, $P7016
    iseq $I7018, $S7017, "open"
    unless $I7018, if_7015_end
.annotate 'line', 2489
    null $P7019
    get_hll_global $P7020, "GLOBAL"
    nqp_get_package_through_who $P7021, $P7020, "Regex"
    nqp_get_package_through_who $P7022, $P7021, "P6Regex"
    nqp_get_package_through_who $P7023, $P7022, "Actions"
    get_who $P7024, $P7023
    set $P7024["$REGEXNAME"], $P7019
.annotate 'line', 2490
    find_lex $P7025, "$?PACKAGE"
    get_who $P7026, $P7025
    set $P7027, $P7026["@BLOCK"]
    unless_null $P7027, vivify_3115
    $P7027 = root_new ['parrot';'ResizablePMCArray']
  vivify_3115:
    set $P7028, $P7027[0]
    unless_null $P7028, vivify_3116
    new $P7028, "Undef"
  vivify_3116:
    $P7028."symbol"(unicode:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2491
    find_lex $P7029, "$?PACKAGE"
    get_who $P7030, $P7029
    set $P7031, $P7030["@BLOCK"]
    unless_null $P7031, vivify_3117
    $P7031 = root_new ['parrot';'ResizablePMCArray']
  vivify_3117:
    set $P7032, $P7031[0]
    unless_null $P7032, vivify_3118
    new $P7032, "Undef"
  vivify_3118:
    $P7032."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2492
    new $P7033, "Exception"
    set $P7033['type'], .CONTROL_RETURN
    new $P7034, "Integer"
    assign $P7034, 0
    setattribute $P7033, 'payload', $P7034
    throw $P7033
  if_7015_end:
.annotate 'line', 2495
    get_hll_global $P7035, "GLOBAL"
    nqp_get_package_through_who $P7036, $P7035, "Regex"
    nqp_get_package_through_who $P7037, $P7036, "P6Regex"
    nqp_get_package_through_who $P7038, $P7037, "Actions"
    get_who $P7039, $P7038
    set $P7040, $P7039["buildsub"]
    find_lex $P7041, "$/"
    unless_null $P7041, vivify_3119
    $P7041 = root_new ['parrot';'Hash']
  vivify_3119:
    set $P7042, $P7041["p6regex"]
    unless_null $P7042, vivify_3120
    new $P7042, "Undef"
  vivify_3120:
    $P7043 = $P7042."ast"()
    find_lex $P7044, "$?PACKAGE"
    get_who $P7045, $P7044
    set $P7046, $P7045["@BLOCK"]
    unless_null $P7046, vivify_3121
    $P7046 = root_new ['parrot';'ResizablePMCArray']
  vivify_3121:
    $P7047 = $P7046."shift"()
    $P7048 = $P7040($P7043, $P7047)
    store_lex "$regex", $P7048
.annotate 'line', 2497
    get_hll_global $P7049, "GLOBAL"
    nqp_get_package_through_who $P7050, $P7049, "PAST"
    get_who $P7051, $P7050
    set $P7052, $P7051["Op"]
.annotate 'line', 2499
    new $P7053, "ResizablePMCArray"
    push $P7053, "Regex"
    push $P7053, "Regex"
    find_lex $P7054, "$/"
    unless_null $P7054, vivify_3122
    new $P7054, "Undef"
  vivify_3122:
    $P7055 = "lexical_package_lookup"($P7053, $P7054)
    find_lex $P7056, "$regex"
    unless_null $P7056, vivify_3123
    new $P7056, "Undef"
  vivify_3123:
    $P7057 = $P7052."new"($P7055, $P7056, "callmethod" :named("pasttype"), "new" :named("name"))
.annotate 'line', 2497
    store_lex "$past", $P7057
.annotate 'line', 2503
    find_lex $P7058, "$regex"
    unless_null $P7058, vivify_3124
    new $P7058, "Undef"
  vivify_3124:
    find_lex $P7059, "$past"
    unless_null $P7059, vivify_3125
    $P7059 = root_new ['parrot';'Hash']
    store_lex "$past", $P7059
  vivify_3125:
    set $P7059["sink"], $P7058
.annotate 'line', 2504
    find_lex $P7060, "$/"
    find_lex $P7061, "$past"
    unless_null $P7061, vivify_3126
    new $P7061, "Undef"
  vivify_3126:
    $P7062 = $P7060."!make"($P7061)
.annotate 'line', 2487
    .return ($P7062)
  control_7007:
    .local pmc exception 
    .get_results (exception) 
    getattribute $P7063, exception, "payload"
    .return ($P7063)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<$>" :anon :subid("603_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_7065
    .param pmc param_7066
.annotate 'line', 2507
    .lex "self", param_7065
    .lex "$/", param_7066
    find_lex $P7067, "$/"
    find_lex $P7068, "$/"
    unless_null $P7068, vivify_3127
    $P7068 = root_new ['parrot';'Hash']
  vivify_3127:
    set $P7069, $P7068["variable"]
    unless_null $P7069, vivify_3128
    new $P7069, "Undef"
  vivify_3128:
    $P7070 = $P7069."ast"()
    $P7071 = $P7067."!make"($P7070)
    .return ($P7071)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<{ }>" :anon :subid("604_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_7073
    .param pmc param_7074
.annotate 'line', 2508
    .lex "self", param_7073
    .lex "$/", param_7074
.annotate 'line', 2509
    find_lex $P7075, "$/"
    get_hll_global $P7076, "GLOBAL"
    nqp_get_package_through_who $P7077, $P7076, "PAST"
    get_who $P7078, $P7077
    set $P7079, $P7078["Op"]
.annotate 'line', 2510
    find_lex $P7080, "$/"
    unless_null $P7080, vivify_3129
    $P7080 = root_new ['parrot';'Hash']
  vivify_3129:
    set $P7081, $P7080["block"]
    unless_null $P7081, vivify_3130
    new $P7081, "Undef"
  vivify_3130:
    $P7082 = $P7081."ast"()
    $P7083 = "block_immediate"($P7082)
    find_lex $P7084, "$/"
    unless_null $P7084, vivify_3131
    new $P7084, "Undef"
  vivify_3131:
    $P7085 = $P7079."new"($P7083, "set S*" :named("pirop"), $P7084 :named("node"))
.annotate 'line', 2509
    $P7086 = $P7075."!make"($P7085)
.annotate 'line', 2508
    .return ($P7086)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "quote_escape:sym<esc>" :anon :subid("605_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_7088
    .param pmc param_7089
.annotate 'line', 2513
    .lex "self", param_7088
    .lex "$/", param_7089
    find_lex $P7090, "$/"
    $P7091 = $P7090."!make"("\e")
    .return ($P7091)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<.>" :anon :subid("606_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_7093
    .param pmc param_7094
.annotate 'line', 2517
    .lex "self", param_7093
    .lex "$/", param_7094
    find_lex $P7095, "$/"
    find_lex $P7096, "$/"
    unless_null $P7096, vivify_3132
    $P7096 = root_new ['parrot';'Hash']
  vivify_3132:
    set $P7097, $P7096["dotty"]
    unless_null $P7097, vivify_3133
    new $P7097, "Undef"
  vivify_3133:
    $P7098 = $P7097."ast"()
    $P7099 = $P7095."!make"($P7098)
    .return ($P7099)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<++>" :anon :subid("607_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_7101
    .param pmc param_7102
.annotate 'line', 2519
    .lex "self", param_7101
    .lex "$/", param_7102
.annotate 'line', 2520
    find_lex $P7103, "$/"
    get_hll_global $P7104, "GLOBAL"
    nqp_get_package_through_who $P7105, $P7104, "PAST"
    get_who $P7106, $P7105
    set $P7107, $P7106["Op"]
.annotate 'line', 2521
    new $P7108, "ResizablePMCArray"
    push $P7108, "    clone %r, %0"
    push $P7108, "    inc %0"
    $P7109 = $P7107."new"("postfix:<++>" :named("name"), $P7108 :named("inline"), "inline" :named("pasttype"))
.annotate 'line', 2520
    $P7110 = $P7103."!make"($P7109)
.annotate 'line', 2519
    .return ($P7110)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "postfix:sym<-->" :anon :subid("608_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_7112
    .param pmc param_7113
.annotate 'line', 2525
    .lex "self", param_7112
    .lex "$/", param_7113
.annotate 'line', 2526
    find_lex $P7114, "$/"
    get_hll_global $P7115, "GLOBAL"
    nqp_get_package_through_who $P7116, $P7115, "PAST"
    get_who $P7117, $P7116
    set $P7118, $P7117["Op"]
.annotate 'line', 2527
    new $P7119, "ResizablePMCArray"
    push $P7119, "    clone %r, %0"
    push $P7119, "    dec %0"
    $P7120 = $P7118."new"("postfix:<-->" :named("name"), $P7119 :named("inline"), "inline" :named("pasttype"))
.annotate 'line', 2526
    $P7121 = $P7114."!make"($P7120)
.annotate 'line', 2525
    .return ($P7121)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "prefix:sym<make>" :anon :subid("609_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_7123
    .param pmc param_7124
.annotate 'line', 2531
    .lex "self", param_7123
    .lex "$/", param_7124
.annotate 'line', 2532
    find_lex $P7125, "$/"
    get_hll_global $P7126, "GLOBAL"
    nqp_get_package_through_who $P7127, $P7126, "PAST"
    get_who $P7128, $P7127
    set $P7129, $P7128["Op"]
.annotate 'line', 2533
    get_hll_global $P7130, "GLOBAL"
    nqp_get_package_through_who $P7131, $P7130, "PAST"
    get_who $P7132, $P7131
    set $P7133, $P7132["Var"]
    $P7134 = $P7133."new"("$/" :named("name"), "contextual" :named("scope"))
    find_lex $P7135, "$/"
    unless_null $P7135, vivify_3134
    new $P7135, "Undef"
  vivify_3134:
    $P7136 = $P7129."new"($P7134, "callmethod" :named("pasttype"), "!make" :named("name"), $P7135 :named("node"))
.annotate 'line', 2532
    $P7137 = $P7125."!make"($P7136)
.annotate 'line', 2531
    .return ($P7137)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<next>" :anon :subid("610_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_7140
    .param pmc param_7141
.annotate 'line', 2549
    .lex "self", param_7140
    .lex "$/", param_7141
    find_lex $P7142, "$/"
    unless_null $P7142, vivify_3135
    new $P7142, "Undef"
  vivify_3135:
    $P7143 = "control"($P7142, "CONTROL_LOOP_NEXT")
    .return ($P7143)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<last>" :anon :subid("611_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_7145
    .param pmc param_7146
.annotate 'line', 2550
    .lex "self", param_7145
    .lex "$/", param_7146
    find_lex $P7147, "$/"
    unless_null $P7147, vivify_3136
    new $P7147, "Undef"
  vivify_3136:
    $P7148 = "control"($P7147, "CONTROL_LOOP_LAST")
    .return ($P7148)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "term:sym<redo>" :anon :subid("612_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_7150
    .param pmc param_7151
.annotate 'line', 2551
    .lex "self", param_7150
    .lex "$/", param_7151
    find_lex $P7152, "$/"
    unless_null $P7152, vivify_3137
    new $P7152, "Undef"
  vivify_3137:
    $P7153 = "control"($P7152, "CONTROL_LOOP_REDO")
    .return ($P7153)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "infix:sym<~~>" :anon :subid("613_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_7155
    .param pmc param_7156
.annotate 'line', 2553
    .lex "self", param_7155
    .lex "$/", param_7156
.annotate 'line', 2554
    find_lex $P7157, "$/"
    get_hll_global $P7158, "GLOBAL"
    nqp_get_package_through_who $P7159, $P7158, "PAST"
    get_who $P7160, $P7159
    set $P7161, $P7160["Op"]
    find_lex $P7162, "$/"
    unless_null $P7162, vivify_3138
    new $P7162, "Undef"
  vivify_3138:
    $P7163 = $P7161."new"("callmethod" :named("pasttype"), "ACCEPTS" :named("name"), $P7162 :named("node"))
    $P7164 = $P7157."!make"($P7163)
.annotate 'line', 2553
    .return ($P7164)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.sub "known_sym" :anon :subid("614_1307835824.98345") :outer("436_1307835824.98345")
    .param pmc param_7170
    .param pmc param_7171
    .param pmc param_7172
.annotate 'line', 2631
    .const 'Sub' $P7176 = "615_1307835824.98345" 
    capture_lex $P7176
    .lex "self", param_7170
    .lex "$/", param_7171
    .lex "@name", param_7172
.annotate 'line', 2632
    new $P7173, "Undef"
    .lex "$known", $P7173
    new $P7174, "Integer"
    assign $P7174, 0
    store_lex "$known", $P7174
.annotate 'line', 2633
    .const 'Sub' $P7176 = "615_1307835824.98345" 
    capture_lex $P7176
    $P7176()
    find_lex $P7187, "$known"
    unless_null $P7187, vivify_3141
    new $P7187, "Undef"
  vivify_3141:
.annotate 'line', 2631
    .return ($P7187)
.end


.HLL "nqp"

.namespace ["NQP";"Actions"]
.include "except_types.pasm"
.sub "_block7175"  :anon :subid("615_1307835824.98345") :outer("614_1307835824.98345")
.annotate 'line', 2633
    new $P7182, 'ExceptionHandler'
    set_label $P7182, control_7181
    $P7182."handle_types_except"(.CONTROL_RETURN,  .CONTROL_OK,  .CONTROL_BREAK,  .CONTROL_CONTINUE,  .CONTROL_TAKE,  .CONTROL_LEAVE,  .CONTROL_EXIT,  .CONTROL_LOOP_NEXT,  .CONTROL_LOOP_LAST,  .CONTROL_LOOP_REDO)
    push_eh $P7182
.annotate 'line', 2634
    find_lex $P7177, "@name"
    unless_null $P7177, vivify_3139
    $P7177 = root_new ['parrot';'ResizablePMCArray']
  vivify_3139:
    find_lex $P7178, "$/"
    unless_null $P7178, vivify_3140
    new $P7178, "Undef"
  vivify_3140:
    "find_sym"($P7177, $P7178)
.annotate 'line', 2635
    new $P7179, "Integer"
    assign $P7179, 1
    store_lex "$known", $P7179
.annotate 'line', 2633
    pop_eh 
    goto skip_handler_7180
  control_7181:
    .local pmc exception 
    .get_results (exception) 
    new $P7185, 'Integer'
    set $P7185, 1
    set exception["handled"], $P7185
    set $I7186, exception["handled"]
    ne $I7186, 1, nothandled_7184
  handled_7183:
    .return (exception)
  nothandled_7184:
    rethrow exception
  skip_handler_7180:
    .return ($P7179)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "_block7189"  :subid("616_1307835824.98345") :outer("10_1307835824.98345")
.annotate 'line', 2700
    .const 'Sub' $P7283 = "623_1307835824.98345" 
    capture_lex $P7283
    .const 'Sub' $P7269 = "622_1307835824.98345" 
    capture_lex $P7269
    .const 'Sub' $P7251 = "621_1307835824.98345" 
    capture_lex $P7251
    .const 'Sub' $P7237 = "620_1307835824.98345" 
    capture_lex $P7237
    .const 'Sub' $P7223 = "619_1307835824.98345" 
    capture_lex $P7223
    .const 'Sub' $P7209 = "618_1307835824.98345" 
    capture_lex $P7209
    .const 'Sub' $P7193 = "617_1307835824.98345" 
    capture_lex $P7193
    .lex "$?PACKAGE", $P7191
    .lex "$?CLASS", $P7192
.annotate 'line', 2734
    .const 'Sub' $P7283 = "623_1307835824.98345" 
    newclosure $P7321, $P7283
.annotate 'line', 2700
    .return ($P7321)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<:my>" :anon :subid("617_1307835824.98345") :outer("616_1307835824.98345")
    .param pmc param_7194
    .param pmc param_7195
.annotate 'line', 2702
    .lex "self", param_7194
    .lex "$/", param_7195
.annotate 'line', 2703
    new $P7196, "Undef"
    .lex "$past", $P7196
    find_lex $P7197, "$/"
    unless_null $P7197, vivify_3142
    $P7197 = root_new ['parrot';'Hash']
  vivify_3142:
    set $P7198, $P7197["statement"]
    unless_null $P7198, vivify_3143
    new $P7198, "Undef"
  vivify_3143:
    $P7199 = $P7198."ast"()
    store_lex "$past", $P7199
.annotate 'line', 2704
    find_lex $P7200, "$/"
    get_hll_global $P7201, "GLOBAL"
    nqp_get_package_through_who $P7202, $P7201, "PAST"
    get_who $P7203, $P7202
    set $P7204, $P7203["Regex"]
    find_lex $P7205, "$past"
    unless_null $P7205, vivify_3144
    new $P7205, "Undef"
  vivify_3144:
    find_lex $P7206, "$/"
    unless_null $P7206, vivify_3145
    new $P7206, "Undef"
  vivify_3145:
    $P7207 = $P7204."new"($P7205, "pastnode" :named("pasttype"), "declarative" :named("subtype"), $P7206 :named("node"))
    $P7208 = $P7200."!make"($P7207)
.annotate 'line', 2702
    .return ($P7208)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<{ }>" :anon :subid("618_1307835824.98345") :outer("616_1307835824.98345")
    .param pmc param_7210
    .param pmc param_7211
.annotate 'line', 2708
    .lex "self", param_7210
    .lex "$/", param_7211
.annotate 'line', 2709
    find_lex $P7212, "$/"
    get_hll_global $P7213, "GLOBAL"
    nqp_get_package_through_who $P7214, $P7213, "PAST"
    get_who $P7215, $P7214
    set $P7216, $P7215["Regex"]
    find_lex $P7217, "$/"
    unless_null $P7217, vivify_3146
    $P7217 = root_new ['parrot';'Hash']
  vivify_3146:
    set $P7218, $P7217["codeblock"]
    unless_null $P7218, vivify_3147
    new $P7218, "Undef"
  vivify_3147:
    $P7219 = $P7218."ast"()
    find_lex $P7220, "$/"
    unless_null $P7220, vivify_3148
    new $P7220, "Undef"
  vivify_3148:
    $P7221 = $P7216."new"($P7219, "pastnode" :named("pasttype"), $P7220 :named("node"))
    $P7222 = $P7212."!make"($P7221)
.annotate 'line', 2708
    .return ($P7222)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "metachar:sym<nqpvar>" :anon :subid("619_1307835824.98345") :outer("616_1307835824.98345")
    .param pmc param_7224
    .param pmc param_7225
.annotate 'line', 2713
    .lex "self", param_7224
    .lex "$/", param_7225
.annotate 'line', 2714
    find_lex $P7226, "$/"
    get_hll_global $P7227, "GLOBAL"
    nqp_get_package_through_who $P7228, $P7227, "PAST"
    get_who $P7229, $P7228
    set $P7230, $P7229["Regex"]
    find_lex $P7231, "$/"
    unless_null $P7231, vivify_3149
    $P7231 = root_new ['parrot';'Hash']
  vivify_3149:
    set $P7232, $P7231["var"]
    unless_null $P7232, vivify_3150
    new $P7232, "Undef"
  vivify_3150:
    $P7233 = $P7232."ast"()
    find_lex $P7234, "$/"
    unless_null $P7234, vivify_3151
    new $P7234, "Undef"
  vivify_3151:
    $P7235 = $P7230."new"("!INTERPOLATE", $P7233, "subrule" :named("pasttype"), "method" :named("subtype"), $P7234 :named("node"))
    $P7236 = $P7226."!make"($P7235)
.annotate 'line', 2713
    .return ($P7236)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<{ }>" :anon :subid("620_1307835824.98345") :outer("616_1307835824.98345")
    .param pmc param_7238
    .param pmc param_7239
.annotate 'line', 2718
    .lex "self", param_7238
    .lex "$/", param_7239
.annotate 'line', 2719
    find_lex $P7240, "$/"
    get_hll_global $P7241, "GLOBAL"
    nqp_get_package_through_who $P7242, $P7241, "PAST"
    get_who $P7243, $P7242
    set $P7244, $P7243["Regex"]
    find_lex $P7245, "$/"
    unless_null $P7245, vivify_3152
    $P7245 = root_new ['parrot';'Hash']
  vivify_3152:
    set $P7246, $P7245["codeblock"]
    unless_null $P7246, vivify_3153
    new $P7246, "Undef"
  vivify_3153:
    $P7247 = $P7246."ast"()
    find_lex $P7248, "$/"
    unless_null $P7248, vivify_3154
    new $P7248, "Undef"
  vivify_3154:
    $P7249 = $P7244."new"("!INTERPOLATE_REGEX", $P7247, "subrule" :named("pasttype"), "method" :named("subtype"), $P7248 :named("node"))
    $P7250 = $P7240."!make"($P7249)
.annotate 'line', 2718
    .return ($P7250)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<?{ }>" :anon :subid("621_1307835824.98345") :outer("616_1307835824.98345")
    .param pmc param_7252
    .param pmc param_7253
.annotate 'line', 2723
    .lex "self", param_7252
    .lex "$/", param_7253
.annotate 'line', 2724
    find_lex $P7254, "$/"
    get_hll_global $P7255, "GLOBAL"
    nqp_get_package_through_who $P7256, $P7255, "PAST"
    get_who $P7257, $P7256
    set $P7258, $P7257["Regex"]
    find_lex $P7259, "$/"
    unless_null $P7259, vivify_3155
    $P7259 = root_new ['parrot';'Hash']
  vivify_3155:
    set $P7260, $P7259["codeblock"]
    unless_null $P7260, vivify_3156
    new $P7260, "Undef"
  vivify_3156:
    $P7261 = $P7260."ast"()
.annotate 'line', 2725
    find_lex $P7262, "$/"
    unless_null $P7262, vivify_3157
    $P7262 = root_new ['parrot';'Hash']
  vivify_3157:
    set $P7263, $P7262["zw"]
    unless_null $P7263, vivify_3158
    new $P7263, "Undef"
  vivify_3158:
    set $S7264, $P7263
    iseq $I7265, $S7264, "!"
    find_lex $P7266, "$/"
    unless_null $P7266, vivify_3159
    new $P7266, "Undef"
  vivify_3159:
    $P7267 = $P7258."new"($P7261, "zerowidth" :named("subtype"), $I7265 :named("negate"), "pastnode" :named("pasttype"), $P7266 :named("node"))
.annotate 'line', 2724
    $P7268 = $P7254."!make"($P7267)
.annotate 'line', 2723
    .return ($P7268)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "assertion:sym<var>" :anon :subid("622_1307835824.98345") :outer("616_1307835824.98345")
    .param pmc param_7270
    .param pmc param_7271
.annotate 'line', 2729
    .lex "self", param_7270
    .lex "$/", param_7271
.annotate 'line', 2730
    find_lex $P7272, "$/"
    get_hll_global $P7273, "GLOBAL"
    nqp_get_package_through_who $P7274, $P7273, "PAST"
    get_who $P7275, $P7274
    set $P7276, $P7275["Regex"]
    find_lex $P7277, "$/"
    unless_null $P7277, vivify_3160
    $P7277 = root_new ['parrot';'Hash']
  vivify_3160:
    set $P7278, $P7277["var"]
    unless_null $P7278, vivify_3161
    new $P7278, "Undef"
  vivify_3161:
    $P7279 = $P7278."ast"()
    find_lex $P7280, "$/"
    unless_null $P7280, vivify_3162
    new $P7280, "Undef"
  vivify_3162:
    $P7281 = $P7276."new"("!INTERPOLATE_REGEX", $P7279, "subrule" :named("pasttype"), "method" :named("subtype"), $P7280 :named("node"))
    $P7282 = $P7272."!make"($P7281)
.annotate 'line', 2729
    .return ($P7282)
.end


.HLL "nqp"

.namespace ["NQP";"RegexActions"]
.sub "codeblock" :anon :subid("623_1307835824.98345") :outer("616_1307835824.98345")
    .param pmc param_7284
    .param pmc param_7285
.annotate 'line', 2734
    .lex "self", param_7284
    .lex "$/", param_7285
.annotate 'line', 2735
    new $P7286, "Undef"
    .lex "$block", $P7286
.annotate 'line', 2737
    new $P7287, "Undef"
    .lex "$past", $P7287
.annotate 'line', 2735
    find_lex $P7288, "$/"
    unless_null $P7288, vivify_3163
    $P7288 = root_new ['parrot';'Hash']
  vivify_3163:
    set $P7289, $P7288["block"]
    unless_null $P7289, vivify_3164
    new $P7289, "Undef"
  vivify_3164:
    $P7290 = $P7289."ast"()
    store_lex "$block", $P7290
.annotate 'line', 2736
    find_lex $P7291, "$block"
    unless_null $P7291, vivify_3165
    new $P7291, "Undef"
  vivify_3165:
    $P7291."blocktype"("immediate")
.annotate 'line', 2738
    get_hll_global $P7292, "GLOBAL"
    nqp_get_package_through_who $P7293, $P7292, "PAST"
    get_who $P7294, $P7293
    set $P7295, $P7294["Stmts"]
.annotate 'line', 2739
    get_hll_global $P7296, "GLOBAL"
    nqp_get_package_through_who $P7297, $P7296, "PAST"
    get_who $P7298, $P7297
    set $P7299, $P7298["Op"]
.annotate 'line', 2740
    get_hll_global $P7300, "GLOBAL"
    nqp_get_package_through_who $P7301, $P7300, "PAST"
    get_who $P7302, $P7301
    set $P7303, $P7302["Var"]
    $P7304 = $P7303."new"("$/" :named("name"))
.annotate 'line', 2741
    get_hll_global $P7305, "GLOBAL"
    nqp_get_package_through_who $P7306, $P7305, "PAST"
    get_who $P7307, $P7306
    set $P7308, $P7307["Op"]
.annotate 'line', 2742
    get_hll_global $P7309, "GLOBAL"
    nqp_get_package_through_who $P7310, $P7309, "PAST"
    get_who $P7311, $P7310
    set $P7312, $P7311["Var"]
    $P7313 = $P7312."new"(unicode:"$\x{a2}" :named("name"))
    $P7314 = $P7308."new"($P7313, "MATCH" :named("name"), "callmethod" :named("pasttype"))
.annotate 'line', 2741
    $P7315 = $P7299."new"($P7304, $P7314, "bind_6model" :named("pasttype"))
.annotate 'line', 2739
    find_lex $P7316, "$block"
    unless_null $P7316, vivify_3166
    new $P7316, "Undef"
  vivify_3166:
    $P7317 = $P7295."new"($P7315, $P7316)
.annotate 'line', 2738
    store_lex "$past", $P7317
.annotate 'line', 2750
    find_lex $P7318, "$/"
    find_lex $P7319, "$past"
    unless_null $P7319, vivify_3167
    new $P7319, "Undef"
  vivify_3167:
    $P7320 = $P7318."!make"($P7319)
.annotate 'line', 2734
    .return ($P7320)
.end


.HLL "nqp"

.namespace ["NQP";"Compiler"]
.sub "_block7322"  :subid("624_1307835824.98345") :outer("10_1307835824.98345")
.annotate 'line', 2755
    .lex "$?PACKAGE", $P7324
    .lex "$?CLASS", $P7325
    .return ()
.end


.HLL "nqp"

.namespace []
.sub "_block7337" :load :anon :subid("625_1307835824.98345")
.annotate 'line', 1
    .const 'Sub' $P7339 = "10_1307835824.98345" 
    $P7340 = $P7339()
    .return ($P7340)
.end

