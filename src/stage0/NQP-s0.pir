.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'
.loadlib "nqp_group"
.loadlib "nqp_ops"
.loadlib "nqp_bigint_ops"
.loadlib "trans_ops"
.loadlib "io_ops"
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_1_1347719921.536") :anon :lex
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc _lex_param_0 :slurpy 
    .const 'Sub' $P5057 = 'cuid_369_1347719921.536' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_370_1347719921.536' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_32_1347719921.536' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_223_1347719921.536' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_243_1347719921.536' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_399_1347719921.536' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_400_1347719921.536' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_401_1347719921.536' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_402_1347719921.536' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_403_1347719921.536' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_404_1347719921.536' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_405_1347719921.536' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_356_1347719921.536' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_367_1347719921.536' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_368_1347719921.536' 
    capture_lex $P5057 
    .lex "GLOBALish", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "$ops", $P103 
    .lex "&MAIN", $P104 
    .lex "&hll-config", $P105 
    .lex "@ARGS", _lex_param_0 
    .local pmc ctxsave 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P103, $P5001
    .const 'Sub' $P5002 = 'cuid_369_1347719921.536' 
    capture_lex $P5002
    set $P104, $P5002
    .const 'Sub' $P5003 = 'cuid_370_1347719921.536' 
    capture_lex $P5003
    set $P105, $P5003
    find_dynamic_lex $P5004, "$*CTXSAVE"
    set ctxsave, $P5004
    isnull $I5001, ctxsave
    box $P5009, $I5001
    set $P5008, $P5009
    if $I5001 goto unless10_end14 
    can $I5002, ctxsave, "ctxsave"
    box $P5007, $I5002
    set $P5006, $P5007
    unless $I5002 goto if11_end16 
    $P5005 = ctxsave."ctxsave"()
    set $P5006, $P5005
  if11_end16:
    set $P5008, $P5006
  unless10_end14:
.annotate 'line', 1
    .const 'Sub' $P5010 = 'cuid_32_1347719921.536' 
    capture_lex $P5010
    $P5011 = $P5010()
    .const 'Sub' $P5012 = 'cuid_223_1347719921.536' 
    capture_lex $P5012
    $P5013 = $P5012()
    .const 'Sub' $P5014 = 'cuid_243_1347719921.536' 
    capture_lex $P5014
    $P5015 = $P5014()
.annotate 'line', 1382
    get_hll_global $P5019, "GLOBAL"
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Compiler"]
    unless_null $P5016, fallback3561
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5016, $P5020
  fallback3561:
    $P5021 = $P5016."operations"()
    set $P103, $P5021
.annotate 'line', 1384
    $P5022 = $P103."add_hll_pirop_mapping"("nqp", "nqpmultidispatch", "multi_dispatch_over_lexical_candidates", "P")
.annotate 'line', 1386
    .const 'Sub' $P5024 = 'cuid_399_1347719921.536' 
    capture_lex $P5024
    newclosure $P5023, $P5024
    $P5025 = $P103."add_hll_op"("nqp", "preinc", $P5023)
.annotate 'line', 1401
    .const 'Sub' $P5027 = 'cuid_400_1347719921.536' 
    capture_lex $P5027
    newclosure $P5026, $P5027
    $P5028 = $P103."add_hll_op"("nqp", "predec", $P5026)
.annotate 'line', 1416
    .const 'Sub' $P5030 = 'cuid_401_1347719921.536' 
    capture_lex $P5030
    newclosure $P5029, $P5030
    $P5031 = $P103."add_hll_op"("nqp", "postinc", $P5029)
.annotate 'line', 1440
    .const 'Sub' $P5033 = 'cuid_402_1347719921.536' 
    capture_lex $P5033
    newclosure $P5032, $P5033
    $P5034 = $P103."add_hll_op"("nqp", "postdec", $P5032)
.annotate 'line', 1464
    .const 'Sub' $P5036 = 'cuid_403_1347719921.536' 
    capture_lex $P5036
    newclosure $P5035, $P5036
    $P5037 = $P103."add_hll_op"("nqp", "numify", $P5035)
.annotate 'line', 1468
    .const 'Sub' $P5039 = 'cuid_404_1347719921.536' 
    capture_lex $P5039
    newclosure $P5038, $P5039
    $P5040 = $P103."add_hll_op"("nqp", "stringify", $P5038)
.annotate 'line', 1472
    .const 'Sub' $P5042 = 'cuid_405_1347719921.536' 
    capture_lex $P5042
    newclosure $P5041, $P5042
    $P5043 = $P103."add_hll_op"("nqp", "eqaddr", $P5041)
    .const 'Sub' $P5044 = 'cuid_356_1347719921.536' 
    capture_lex $P5044
    $P5045 = $P5044()
    .const 'Sub' $P5046 = 'cuid_367_1347719921.536' 
    capture_lex $P5046
    $P5047 = $P5046()
    .const 'Sub' $P5048 = 'cuid_368_1347719921.536' 
    capture_lex $P5048
    $P5049 = $P5048()
    set $P5056, _lex_param_0
    unless _lex_param_0 goto if1631_end5441 
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5050, "ModuleLoader"
    getinterp $P5052
    set $P5051, $P5052["context"]
    $P5053 = $P5050."set_mainline_module"($P5051)
    .const 'Sub' $P5054 = "cuid_369_1347719921.536" 
    $P5055 = $P5054(_lex_param_0 :flat)
    set $P5056, $P5055
  if1631_end5441:
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "MAIN" :subid("cuid_369_1347719921.536") :anon :lex :outer("cuid_1_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3089
    .param pmc _lex_param_0 
    .lex "$nqpcomp", $P101 
    .lex "@clo", $P102 
    .lex "@ARGS", _lex_param_0 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
.annotate 'line', 3091
    get_hll_global $P5006, "GLOBAL"
    nqp_get_package_through_who $P5005, $P5006, "NQP"
    get_who $P5004, $P5005
    set $P5003, $P5004["Compiler"]
    unless_null $P5003, fallback10
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5007
  fallback10:
    $P5008 = $P5003."new"()
    set $P101, $P5008
.annotate 'line', 3092
    $P5009 = $P101."language"("nqp")
.annotate 'line', 3093
    get_hll_global $P5013, "GLOBAL"
    nqp_get_package_through_who $P5012, $P5013, "NQP"
    get_who $P5011, $P5012
    set $P5010, $P5011["Grammar"]
    unless_null $P5010, fallback11
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5014
  fallback11:
    $P5015 = $P101."parsegrammar"($P5010)
.annotate 'line', 3094
    get_hll_global $P5019, "GLOBAL"
    nqp_get_package_through_who $P5018, $P5019, "NQP"
    get_who $P5017, $P5018
    set $P5016, $P5017["Actions"]
    unless_null $P5016, fallback12
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5016, $P5020
  fallback12:
    $P5021 = $P101."parseactions"($P5016)
.annotate 'line', 3095
    $P5022 = $P101."config"()
    $P5023 = "&hll-config"($P5022)
.annotate 'line', 3098
    $P5024 = $P101."commandline_options"()
    set $P102, $P5024
.annotate 'line', 3099
    $P5025 = $P102."push"("parsetrace")
.annotate 'line', 3100
    $P5026 = $P102."push"("setting=s")
.annotate 'line', 3101
    $P5027 = $P102."push"("setting-path=s")
.annotate 'line', 3102
    $P5028 = $P102."push"("module-path=s")
.annotate 'line', 3103
    $P5029 = $P102."push"("vmlibs=s")
.annotate 'line', 3104
    $P5030 = $P102."push"("no-regex-lib")
.annotate 'line', 3105
    $P5031 = $P102."push"("old-regex-lib")
.annotate 'line', 3108
    $P5032 = $P101."command_line"(_lex_param_0, "utf8" :named("encoding"), "ascii iso-8859-1" :named("transcode"))
.annotate 'line', 3111
    $P5033 = $P101."nqpevent"()
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "hll-config" :subid("cuid_370_1347719921.536") :anon :lex :outer("cuid_1_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3115
    .param pmc _lex_param_0 
    .lex "$config", _lex_param_0 
    box $P5001, "2012.08-244-g341b6d5"
    set _lex_param_0["version"], $P5001
    box $P5002, "2012-09-15T14:38:41Z"
    set _lex_param_0["build-date"], $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_32_1347719921.536") :anon :lex :outer("cuid_1_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 8
    .const 'Sub' $P5030 = 'cuid_2_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_3_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_4_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_5_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_6_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_7_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_8_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_9_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_10_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_11_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_15_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_16_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_17_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_18_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_19_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_20_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_21_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_22_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_23_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_24_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_25_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_26_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_27_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_28_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_29_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_30_1347719921.536' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_31_1347719921.536' 
    capture_lex $P5030 
    .lex "$loader", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "$?CLASS", $P103 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_2_1347719921.536' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_3_1347719921.536' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_4_1347719921.536' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_5_1347719921.536' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_6_1347719921.536' 
    capture_lex $P5006
    get_hll_global $P5007, "ModuleLoader"
    set $P101, $P5007
    .const 'Sub' $P5008 = 'cuid_7_1347719921.536' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_8_1347719921.536' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_9_1347719921.536' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_10_1347719921.536' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_11_1347719921.536' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_15_1347719921.536' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_16_1347719921.536' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_17_1347719921.536' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_18_1347719921.536' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_19_1347719921.536' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_20_1347719921.536' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_21_1347719921.536' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_22_1347719921.536' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_23_1347719921.536' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_24_1347719921.536' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_25_1347719921.536' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_26_1347719921.536' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_27_1347719921.536' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_28_1347719921.536' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_29_1347719921.536' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_30_1347719921.536' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_31_1347719921.536' 
    capture_lex $P5029
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "BUILD" :subid("cuid_2_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 27
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :slurpy :named 
    .lex "self", _lex_param_0 
    .lex "%opts", _lex_param_1 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    new $P5003, 'ResizablePMCArray'
    repr_bind_attr_obj $P5001, $P5002, "@!BLOCKS", $P5003
    nqp_decontainerize $P5004, _lex_param_0
    nqp_get_sc_object $P5005, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    new $P5006, 'Hash'
    repr_bind_attr_obj $P5004, $P5005, "%!code_objects_to_fix_up", $P5006
    nqp_decontainerize $P5007, _lex_param_0
    nqp_get_sc_object $P5008, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    new $P5009, 'Hash'
    repr_bind_attr_obj $P5007, $P5008, "%!code_object_fixup_list", $P5009
    nqp_decontainerize $P5010, _lex_param_0
    nqp_get_sc_object $P5011, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    new $P5012, 'Hash'
    repr_bind_attr_obj $P5010, $P5011, "%!code_stub_sc_idx", $P5012
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "push_lexpad" :subid("cuid_3_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 35
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$pad", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 37
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Block"]
    unless_null $P5002, fallback17
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5006
  fallback17:
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback18
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5011
  fallback18:
    $P5012 = $P5007."new"()
    $P5013 = $P5002."new"($P5012, _lex_param_1 :named("node"))
    set $P101, $P5013
    nqp_decontainerize $P5014, _lex_param_0
    nqp_get_sc_object $P5015, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5016, $P5014, $P5015, "@!BLOCKS"
    set $N5001, $P5016
    box $P5026, $N5001
    set $P5025, $P5026
    unless $N5001 goto if12_end20 
.annotate 'line', 38
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    nqp_decontainerize $P5021, _lex_param_0
    nqp_get_sc_object $P5022, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5023, $P5021, $P5022, "@!BLOCKS"
    set $N5003, $P5023
    set $N5004, 1
    sub $N5002, $N5003, $N5004
    set $I5001, $N5002
    set $P5017, $P5020[$I5001]
    unless_null $P5017, fallback21
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5017, $P5024
  fallback21:
    set $P101["outer"], $P5017
    set $P5025, $P5017
  if12_end20:
    nqp_decontainerize $P5027, _lex_param_0
    nqp_get_sc_object $P5028, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5029, $P5027, $P5028, "@!BLOCKS"
    nqp_decontainerize $P5030, _lex_param_0
    nqp_get_sc_object $P5031, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5032, $P5030, $P5031, "@!BLOCKS"
    set $N5005, $P5032
    set $I5002, $N5005
    set $P5029[$I5002], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pop_lexpad" :subid("cuid_4_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 46
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 47
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5003, $P5001, $P5002, "@!BLOCKS"
    $P5004 = $P5003."pop"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "cur_lexpad" :subid("cuid_5_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 51
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5007, $P5005, $P5006, "@!BLOCKS"
    set $N5002, $P5007
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    set $I5001, $N5001
    set $P5001, $P5004[$I5001]
    unless_null $P5001, fallback22
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5008
  fallback22:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "get_legacy_block_list" :subid("cuid_6_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 56
    .param pmc _lex_param_0 
    .lex "@x", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5005, $P5003, $P5004, "@!BLOCKS"
    clone $P5002, $P5005
    set $P101, $P5002
.annotate 'line', 58
    $P5006 = $P101."reverse"()
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "load_setting" :subid("cuid_7_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 69
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5005 = 'cuid_371_1347719921.536' 
    capture_lex $P5005 
    .lex "self", _lex_param_0 
    .lex "$setting_name", _lex_param_1 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_23
    .lex "RETURN", $P101
    set $S5001, _lex_param_1
    isne $I5001, $S5001, "NULL"
    box $P5004, $I5001
    set $P5003, $P5004
    unless $I5001 goto if13_end26 
    .const 'Sub' $P5001 = 'cuid_371_1347719921.536' 
    capture_lex $P5001
    $P5002 = $P5001()
    set $P5003, $P5002
  if13_end26:
    goto lexotic_24
  lexotic_23:
    .get_results ($P5003)
  lexotic_24:
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_371_1347719921.536") :anon :lex :outer("cuid_7_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 71
    .lex "$setting", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback27
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback28
    get_hll_global $P5008, "GLOBAL"
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback28:
    unless_null $P5004, vivi_1429
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_1429:
    set $P5003, $P5004
  fallback27:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback30
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5011
  fallback30:
.annotate 'line', 76
    find_lex $P5012, "$loader"
    find_lex $P5013, "$setting_name"
    $P5014 = $P5012."load_setting"($P5013)
    set $P5002["outer_ctx"], $P5014
    set $P101, $P5014
.annotate 'line', 79
    find_lex $P5016, "self"
    nqp_decontainerize $P5015, $P5016
    $P5017 = $P5015."is_precompilation_mode"()
    unless $P5017 goto if15_else31 
.annotate 'line', 80
    find_lex $P5019, "self"
    nqp_decontainerize $P5018, $P5019
    get_hll_global $P5023, "GLOBAL"
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Stmts"]
    unless_null $P5020, fallback33
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5020, $P5024
  fallback33:
.annotate 'line', 81
    get_hll_global $P5028, "GLOBAL"
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["VM"]
    unless_null $P5025, fallback34
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5025, $P5029
  fallback34:
.annotate 'line', 83
    get_hll_global $P5033, "GLOBAL"
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback35
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5030, $P5034
  fallback35:
    $P5035 = $P5030."new"("ModuleLoader.pbc" :named("value"))
    $P5036 = $P5025."new"($P5035, "load_bytecode vs" :named("pirop"))
.annotate 'line', 85
    get_hll_global $P5040, "GLOBAL"
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback36
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5037, $P5041
  fallback36:
.annotate 'line', 87
    get_hll_global $P5045, "GLOBAL"
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["BVal"]
    unless_null $P5042, fallback37
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5042, $P5046
  fallback37:
    find_dynamic_lex $P5047, "$*UNIT"
    unless_null $P5047, fallback38
    get_hll_global $P5050, "GLOBAL"
    get_who $P5049, $P5050
    set $P5048, $P5049["$UNIT"]
    unless_null $P5048, fallback39
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5048, $P5051
  fallback39:
    unless_null $P5048, vivi_1640
    die "Contextual $*UNIT not found"
    box $P5052, "Contextual $*UNIT not found"
    set $P5048, $P5052
  vivi_1640:
    set $P5047, $P5048
  fallback38:
    $P5053 = $P5042."new"($P5047 :named("value"))
.annotate 'line', 88
    get_hll_global $P5057, "GLOBAL"
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Op"]
    unless_null $P5054, fallback41
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5054, $P5058
  fallback41:
.annotate 'line', 90
    get_hll_global $P5062, "GLOBAL"
    nqp_get_package_through_who $P5061, $P5062, "QAST"
    get_who $P5060, $P5061
    set $P5059, $P5060["VM"]
    unless_null $P5059, fallback42
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5059, $P5063
  fallback42:
.annotate 'line', 92
    get_hll_global $P5067, "GLOBAL"
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["SVal"]
    unless_null $P5064, fallback43
    nqp_get_sc_object $P5068, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5064, $P5068
  fallback43:
    $P5069 = $P5064."new"("ModuleLoader" :named("value"))
    $P5070 = $P5059."new"($P5069, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 94
    get_hll_global $P5074, "GLOBAL"
    nqp_get_package_through_who $P5073, $P5074, "QAST"
    get_who $P5072, $P5073
    set $P5071, $P5072["SVal"]
    unless_null $P5071, fallback44
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5071, $P5075
  fallback44:
    find_lex $P5076, "$setting_name"
    $P5077 = $P5071."new"($P5076 :named("value"))
    $P5078 = $P5054."new"($P5070, $P5077, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5079 = $P5037."new"($P5053, $P5078, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
    $P5080 = $P5020."new"($P5036, $P5079)
    $P5081 = $P5018."add_load_dependency_task"($P5080 :named("deserialize_past"))
    set $P5128, $P5081
    goto if15_end32
  if15_else31:
.annotate 'line', 99
.annotate 'line', 101
    find_lex $P5083, "self"
    nqp_decontainerize $P5082, $P5083
    get_hll_global $P5087, "GLOBAL"
    nqp_get_package_through_who $P5086, $P5087, "QAST"
    get_who $P5085, $P5086
    set $P5084, $P5085["Op"]
    unless_null $P5084, fallback45
    nqp_get_sc_object $P5088, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5084, $P5088
  fallback45:
.annotate 'line', 103
    get_hll_global $P5092, "GLOBAL"
    nqp_get_package_through_who $P5091, $P5092, "QAST"
    get_who $P5090, $P5091
    set $P5089, $P5090["BVal"]
    unless_null $P5089, fallback46
    nqp_get_sc_object $P5093, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5089, $P5093
  fallback46:
    find_dynamic_lex $P5094, "$*UNIT"
    unless_null $P5094, fallback47
    get_hll_global $P5097, "GLOBAL"
    get_who $P5096, $P5097
    set $P5095, $P5096["$UNIT"]
    unless_null $P5095, fallback48
    nqp_get_sc_object $P5098, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5095, $P5098
  fallback48:
    unless_null $P5095, vivi_1749
    die "Contextual $*UNIT not found"
    box $P5099, "Contextual $*UNIT not found"
    set $P5095, $P5099
  vivi_1749:
    set $P5094, $P5095
  fallback47:
    $P5100 = $P5089."new"($P5094 :named("value"))
.annotate 'line', 104
    get_hll_global $P5104, "GLOBAL"
    nqp_get_package_through_who $P5103, $P5104, "QAST"
    get_who $P5102, $P5103
    set $P5101, $P5102["Op"]
    unless_null $P5101, fallback50
    nqp_get_sc_object $P5105, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5101, $P5105
  fallback50:
.annotate 'line', 106
    get_hll_global $P5109, "GLOBAL"
    nqp_get_package_through_who $P5108, $P5109, "QAST"
    get_who $P5107, $P5108
    set $P5106, $P5107["VM"]
    unless_null $P5106, fallback51
    nqp_get_sc_object $P5110, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5106, $P5110
  fallback51:
.annotate 'line', 108
    get_hll_global $P5114, "GLOBAL"
    nqp_get_package_through_who $P5113, $P5114, "QAST"
    get_who $P5112, $P5113
    set $P5111, $P5112["SVal"]
    unless_null $P5111, fallback52
    nqp_get_sc_object $P5115, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5111, $P5115
  fallback52:
    $P5116 = $P5111."new"("ModuleLoader" :named("value"))
    $P5117 = $P5106."new"($P5116, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 110
    get_hll_global $P5121, "GLOBAL"
    nqp_get_package_through_who $P5120, $P5121, "QAST"
    get_who $P5119, $P5120
    set $P5118, $P5119["SVal"]
    unless_null $P5118, fallback53
    nqp_get_sc_object $P5122, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5118, $P5122
  fallback53:
    find_lex $P5123, "$setting_name"
    $P5124 = $P5118."new"($P5123 :named("value"))
    $P5125 = $P5101."new"($P5117, $P5124, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5126 = $P5084."new"($P5100, $P5125, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
    $P5127 = $P5082."add_fixup_task"($P5126 :named("fixup_past"))
    set $P5128, $P5127
  if15_end32:
    getattribute $P5130, $P101, "lex_pad"
    find_lex $P5129, "RETURN"
    $P5131 = $P5129($P5130)
    .return ($P5131) 
.end
.HLL "nqp"
.namespace []
.sub "load_module" :subid("cuid_8_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 121
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$module_name", _lex_param_1 
    .lex "$cur_GLOBALish", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_54
    .lex "RETURN", $P102
.annotate 'line', 123
    find_lex $P5002, "$loader"
    $P5003 = $P5002."load_module"(_lex_param_1, _lex_param_2)
    set $P101, $P5003
.annotate 'line', 126
    nqp_decontainerize $P5004, _lex_param_0
    $P5005 = $P5004."is_precompilation_mode"()
    set $P5050, $P5005
    unless $P5005 goto if18_end57 
.annotate 'line', 127
    nqp_decontainerize $P5006, _lex_param_0
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback58
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5011
  fallback58:
.annotate 'line', 128
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["VM"]
    unless_null $P5012, fallback59
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5012, $P5016
  fallback59:
.annotate 'line', 130
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["SVal"]
    unless_null $P5017, fallback60
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5017, $P5021
  fallback60:
    $P5022 = $P5017."new"("ModuleLoader.pbc" :named("value"))
    $P5023 = $P5012."new"($P5022, "load_bytecode vs" :named("pirop"))
.annotate 'line', 132
    get_hll_global $P5027, "GLOBAL"
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback61
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5024, $P5028
  fallback61:
.annotate 'line', 134
    get_hll_global $P5032, "GLOBAL"
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["VM"]
    unless_null $P5029, fallback62
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5029, $P5033
  fallback62:
.annotate 'line', 136
    get_hll_global $P5037, "GLOBAL"
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["SVal"]
    unless_null $P5034, fallback63
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5034, $P5038
  fallback63:
    $P5039 = $P5034."new"("ModuleLoader" :named("value"))
    $P5040 = $P5029."new"($P5039, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 138
    get_hll_global $P5044, "GLOBAL"
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["SVal"]
    unless_null $P5041, fallback64
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5041, $P5045
  fallback64:
    $P5046 = $P5041."new"(_lex_param_1 :named("value"))
    $P5047 = $P5024."new"($P5040, $P5046, "callmethod" :named("op"), "load_module" :named("name"))
    $P5048 = $P5007."new"($P5023, $P5047)
    $P5049 = $P5006."add_load_dependency_task"($P5048 :named("deserialize_past"))
    set $P5050, $P5049
  if18_end57:
    getattribute $P5052, $P101, "lex_pad"
    find_lex $P5051, "RETURN"
    $P5053 = $P5051($P5052)
    goto lexotic_55
  lexotic_54:
    .get_results ($P5053)
  lexotic_55:
    .return ($P5053) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_symbol" :subid("cuid_9_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 147
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5012 = 'cuid_372_1347719921.536' 
    capture_lex $P5012 
    .lex "$name", $P101 
    .lex "$target", $P102 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "@sym", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    clone $P5003, _lex_param_2
    set _lex_param_2, $P5003
.annotate 'line', 149
    $P5004 = _lex_param_2."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    set $P102, _lex_param_1
    set $P5006, _lex_param_2
    iter $P5008, _lex_param_2
  for_next65:
    unless $P5008, for_done67
    shift $P5010, $P5008
  for_redo66:
    .const 'Sub' $P5009 = 'cuid_372_1347719921.536' 
    capture_lex $P5009
    $P5006 = $P5009($P5010)
    goto for_next65
  for_done67:
    get_who $P5011, $P102
    set $S5002, $P101
    set $P5011[$S5002], _lex_param_3
    .return (_lex_param_3) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_372_1347719921.536") :anon :lex :outer("cuid_9_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 153
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$target"
    set $S5001, _lex_param_0
    nqp_get_package_through_who $P5001, $P5002, $S5001
    store_lex "$target", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "install_lexical_symbol" :subid("cuid_10_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 163
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 165
    $P5002 = _lex_param_1."symbol"(_lex_param_2, "lexical" :named("scope"), _lex_param_3 :named("value"))
.annotate 'line', 166
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback68
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5004
  fallback68:
    get_hll_global $P5008, "GLOBAL"
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Var"]
    unless_null $P5005, fallback69
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5005, $P5009
  fallback69:
    $P5010 = $P5005."new"("lexical" :named("scope"), _lex_param_2 :named("name"), "var" :named("decl"))
    $P5011 = $P5003."push"($P5010)
.annotate 'line', 169
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Stmts"]
    unless_null $P5012, fallback70
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5012, $P5016
  fallback70:
.annotate 'line', 170
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback71
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5017, $P5021
  fallback71:
.annotate 'line', 172
    get_hll_global $P5025, "GLOBAL"
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["VM"]
    unless_null $P5022, fallback72
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5022, $P5026
  fallback72:
.annotate 'line', 173
    $P5027 = _lex_param_1."cuid"()
    set $S5003, $P5027
    concat $S5002, "    .const \"LexInfo\" %r = \"", $S5003
    concat $S5001, $S5002, "\""
    $P5028 = $P5022."new"($S5001 :named("pir"))
.annotate 'line', 175
    get_hll_global $P5032, "GLOBAL"
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["SVal"]
    unless_null $P5029, fallback73
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5029, $P5033
  fallback73:
    $P5034 = $P5029."new"(_lex_param_2 :named("value"))
.annotate 'line', 176
    get_hll_global $P5038, "GLOBAL"
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["WVal"]
    unless_null $P5035, fallback74
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5035, $P5039
  fallback74:
    $P5040 = $P5035."new"(_lex_param_3 :named("value"))
    $P5041 = $P5017."new"($P5028, $P5034, $P5040, "callmethod" :named("op"), "set_static_lexpad_value" :named("name"))
.annotate 'line', 180
    get_hll_global $P5045, "GLOBAL"
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback75
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5042, $P5046
  fallback75:
.annotate 'line', 182
    get_hll_global $P5050, "GLOBAL"
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["VM"]
    unless_null $P5047, fallback76
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5047, $P5051
  fallback76:
.annotate 'line', 183
    $P5052 = _lex_param_1."cuid"()
    set $S5006, $P5052
    concat $S5005, "    .const \"LexInfo\" %r = \"", $S5006
    concat $S5004, $S5005, "\""
    $P5053 = $P5047."new"($S5004 :named("pir"))
    $P5054 = $P5042."new"($P5053, "callmethod" :named("op"), "finish_static_lexpad" :named("name"))
    $P5055 = $P5012."new"($P5041, $P5054)
    set $P101, $P5055
.annotate 'line', 187
    nqp_decontainerize $P5056, _lex_param_0
    $P5057 = $P5056."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5057) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_routine" :subid("cuid_11_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 192
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$past_block", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 193
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback77
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5006
  fallback77:
.annotate 'line', 195
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback78
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5011
  fallback78:
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["WVal"]
    unless_null $P5012, fallback79
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5012, $P5016
  fallback79:
    $P5017 = $P5012."new"(_lex_param_1 :named("value"))
    $P5018 = $P5007."new"($P5017, "who" :named("op"))
.annotate 'line', 196
    get_hll_global $P5022, "GLOBAL"
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["SVal"]
    unless_null $P5019, fallback80
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5019, $P5023
  fallback80:
    set $S5001, _lex_param_2
    $P5024 = $P5019."new"($S5001 :named("value"))
.annotate 'line', 197
    get_hll_global $P5028, "GLOBAL"
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["BVal"]
    unless_null $P5025, fallback81
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5025, $P5029
  fallback81:
    $P5030 = $P5025."new"(_lex_param_3 :named("value"))
    $P5031 = $P5002."new"($P5018, $P5024, $P5030, "bindkey" :named("op"))
    set $P101, $P5031
.annotate 'line', 199
    nqp_decontainerize $P5032, _lex_param_0
    $P5033 = $P5032."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "create_code" :subid("cuid_15_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 204
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5101 = 'cuid_12_1347719921.536' 
    capture_lex $P5101 
    .const 'Sub' $P5101 = 'cuid_13_1347719921.536' 
    capture_lex $P5101 
    .const 'Sub' $P5101 = 'cuid_14_1347719921.536' 
    capture_lex $P5101 
    .const 'Sub' $P5101 = 'cuid_376_1347719921.536' 
    capture_lex $P5101 
    .lex "$code_type", $P101 
    .lex "$have_code_type", $P102 
    .lex "$stub_code", $P103 
    .lex "$fixups", $P104 
    .lex "$dummy", $P105 
    .lex "$code_ref_idx", $P106 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$is_dispatcher", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P105, $P5005
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P106, $P5006
    root_new $P107, ['parrot';'Continuation']
    set_label $P107, lexotic_82
    .lex "RETURN", $P107
    box $P5007, 0
    set $P102, $P5007
    new $P5027, 'ExceptionHandler'
    set_label $P5027, catch_handler_2291
    $P5027.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5027
.annotate 'line', 208
.annotate 'line', 209
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    box $P5010, "NQPRoutine"
    push $P5009, $P5010
    $P5011 = $P5008."find_sym"($P5009)
    set $P101, $P5011
.annotate 'line', 210
    find_dynamic_lex $P5013, "$*PACKAGE"
    unless_null $P5013, fallback84
    get_hll_global $P5016, "GLOBAL"
    get_who $P5015, $P5016
    set $P5014, $P5015["$PACKAGE"]
    unless_null $P5014, fallback85
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5014, $P5017
  fallback85:
    unless_null $P5014, vivi_1986
    die "Contextual $*PACKAGE not found"
    box $P5018, "Contextual $*PACKAGE not found"
    set $P5014, $P5018
  vivi_1986:
    set $P5013, $P5014
  fallback84:
    get_how $P5012, $P5013
    find_dynamic_lex $P5019, "$*PACKAGE"
    unless_null $P5019, fallback87
    get_hll_global $P5022, "GLOBAL"
    get_who $P5021, $P5022
    set $P5020, $P5021["$PACKAGE"]
    unless_null $P5020, fallback88
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5020, $P5023
  fallback88:
    unless_null $P5020, vivi_2089
    die "Contextual $*PACKAGE not found"
    box $P5024, "Contextual $*PACKAGE not found"
    set $P5020, $P5024
  vivi_2089:
    set $P5019, $P5020
  fallback87:
    $P5025 = $P5012."name"($P5019)
    set $S5001, $P5025
    isne $I5001, $S5001, "NQPRoutine"
    box $P5026, $I5001
    set $P102, $P5026
    set $P5028, $P102
    pop_eh 
    goto skip_handler_2190
  catch_handler_2291:
    .get_results ($P5027) 
    set $I10001, 1
    set $P5027["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    finalize $P5027
    pop_upto_eh $P5027
    pop_eh 
    set $P5028, $P10001
    goto skip_handler_2190
  skip_handler_2190:
    .const 'Sub' $P5030 = 'cuid_12_1347719921.536' 
    capture_lex $P5030
    newclosure $P5029, $P5030
    set $P103, $P5029
.annotate 'line', 253
    get_hll_global $P5034, "GLOBAL"
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Stmts"]
    unless_null $P5031, fallback118
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5031, $P5035
  fallback118:
    $P5036 = $P5031."new"()
    set $P104, $P5036
    set $P5037, _lex_param_1["compile_time_dummy"]
    unless_null $P5037, fallback121
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5037, $P5038
  fallback121:
    defined $I5002, $P5037
    unless $I5002 goto if26_else119 
.annotate 'line', 256
    set $P5039, _lex_param_1["compile_time_dummy"]
    unless_null $P5039, fallback122
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5039, $P5040
  fallback122:
    set $P105, $P5039
    set $P5060, $P105
    goto if26_end120
  if26_else119:
.annotate 'line', 259
    nqp_fresh_stub $P5041, $P103
    set $P105, $P5041
    set $S5002, _lex_param_2
    assign $P105, $S5002
    setprop $P105, "STATIC_CODE_REF", $P105
.annotate 'line', 266
    nqp_decontainerize $P5042, _lex_param_0
    $P5043 = $P5042."add_root_code_ref"($P105, _lex_param_1)
    set $P106, $P5043
    nqp_decontainerize $P5044, _lex_param_0
    nqp_get_sc_object $P5045, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5046, $P5044, $P5045, "%!code_stub_sc_idx"
.annotate 'line', 267
    $P5047 = _lex_param_1."cuid"()
    set $S5003, $P5047
    set $P5046[$S5003], $P106
    set _lex_param_1["compile_time_dummy"], $P105
    set $P5059, $P102
    unless $P102 goto if27_end124 
.annotate 'line', 273
    nqp_decontainerize $P5048, _lex_param_0
    nqp_get_sc_object $P5049, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5050, $P5048, $P5049, "%!code_object_fixup_list"
.annotate 'line', 274
    $P5051 = _lex_param_1."cuid"()
    set $S5004, $P5051
    set $P5050[$S5004], $P104
.annotate 'line', 275
    nqp_decontainerize $P5052, _lex_param_0
    $P5053 = $P5052."is_precompilation_mode"()
    unless $P5053 goto if28_else125 
    .const 'Sub' $P5055 = 'cuid_13_1347719921.536' 
    capture_lex $P5055
    newclosure $P5054, $P5055
    setprop $P105, "CLONE_CALLBACK", $P5054
    set $P5058, $P105
    goto if28_end126
  if28_else125:
.annotate 'line', 280
    .const 'Sub' $P5057 = 'cuid_14_1347719921.536' 
    capture_lex $P5057
    newclosure $P5056, $P5057
    setprop $P105, "CLONE_CALLBACK", $P5056
    set $P5058, $P105
  if28_end126:
    set $P5059, $P5058
  if27_end124:
    set $P5060, $P5059
  if26_end120:
.annotate 'line', 304
    nqp_decontainerize $P5061, _lex_param_0
    $P5062 = $P5061."add_fixup_task"($P104 :named("fixup_past"))
    unless $P102 goto if29_else137 
    .const 'Sub' $P5063 = 'cuid_376_1347719921.536' 
    capture_lex $P5063
    $P5064 = $P5063()
    set $P5100, $P5064
    goto if29_end138
  if29_else137:
.annotate 'line', 343
.annotate 'line', 346
    get_hll_global $P5068, "GLOBAL"
    nqp_get_package_through_who $P5067, $P5068, "QAST"
    get_who $P5066, $P5067
    set $P5065, $P5066["VM"]
    unless_null $P5065, fallback152
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5065, $P5069
  fallback152:
.annotate 'line', 348
    get_hll_global $P5073, "GLOBAL"
    nqp_get_package_through_who $P5072, $P5073, "QAST"
    get_who $P5071, $P5072
    set $P5070, $P5071["VM"]
    unless_null $P5070, fallback153
    nqp_get_sc_object $P5074, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5070, $P5074
  fallback153:
.annotate 'line', 350
    get_hll_global $P5078, "GLOBAL"
    nqp_get_package_through_who $P5077, $P5078, "QAST"
    get_who $P5076, $P5077
    set $P5075, $P5076["SVal"]
    unless_null $P5075, fallback154
    nqp_get_sc_object $P5079, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5075, $P5079
  fallback154:
    nqp_decontainerize $P5080, _lex_param_0
    $P5081 = $P5080."handle"()
    $P5082 = $P5075."new"($P5081 :named("value"))
.annotate 'line', 351
    get_hll_global $P5086, "GLOBAL"
    nqp_get_package_through_who $P5085, $P5086, "QAST"
    get_who $P5084, $P5085
    set $P5083, $P5084["IVal"]
    unless_null $P5083, fallback155
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5083, $P5087
  fallback155:
    $P5088 = $P5083."new"($P106 :named("value"))
    $P5089 = $P5070."new"($P5082, $P5088, "nqp_get_sc_code_ref Psi" :named("pirop"))
.annotate 'line', 353
    get_hll_global $P5093, "GLOBAL"
    nqp_get_package_through_who $P5092, $P5093, "QAST"
    get_who $P5091, $P5092
    set $P5090, $P5091["BVal"]
    unless_null $P5090, fallback156
    nqp_get_sc_object $P5094, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5090, $P5094
  fallback156:
    $P5095 = $P5090."new"(_lex_param_1 :named("value"))
    $P5096 = $P5065."new"($P5089, $P5095, "assign vPP" :named("pirop"))
    $P5097 = $P104."push"($P5096)
    find_lex $P5098, "RETURN"
    $P5099 = $P5098($P105)
    set $P5100, $P5099
  if29_end138:
    goto lexotic_83
  lexotic_82:
    .get_results ($P5100)
  lexotic_83:
    .return ($P5100) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_12_1347719921.536") :anon :lex :outer("cuid_15_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 217
    .param pmc _lex_param_0 :slurpy 
    .param pmc _lex_param_1 :slurpy :named 
    .const 'Sub' $P5030 = 'cuid_375_1347719921.536' 
    capture_lex $P5030 
    .lex "$nqpcomp", $P101 
    .lex "$post", $P102 
    .lex "$pir", $P103 
    .lex "$compiled", $P104 
    .lex "$c", $P105 
    .lex "$i", $P106 
    .lex "@args", _lex_param_0 
    .lex "%named", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P105, $P5005
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P106, $P5006
.annotate 'line', 219
    find_lex $P5007, "$past"
    find_lex $P5009, "self"
    nqp_decontainerize $P5008, $P5009
    $P5010 = $P5008."libs"()
    $P5011 = $P5007."unshift"($P5010)
    compreg $P5012, "nqp"
    set $P101, $P5012
.annotate 'line', 221
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["CompUnit"]
    unless_null $P5013, fallback92
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5013, $P5017
  fallback92:
    find_lex $P5018, "$past"
    $P5019 = $P5013."new"($P5018, "nqp" :named("hll"))
    $P5020 = $P101."post"($P5019)
    set $P102, $P5020
.annotate 'line', 222
    $P5021 = $P101."pir"($P102)
    set $P103, $P5021
.annotate 'line', 223
    $P5022 = $P101."evalpmc"($P103)
    set $P104, $P5022
    elements $I5001, $P104
    box $P5023, $I5001
    set $P105, $P5023
    box $P5024, 0
    set $P106, $P5024
  while23_test93:
    set $N5001, $P106
    set $N5002, $P105
    islt $I5002, $N5001, $N5002
    box $P5028, $I5002
    set $P5027, $P5028
    unless $I5002 goto while23_done97 
  while23_redo95:
    .const 'Sub' $P5025 = 'cuid_375_1347719921.536' 
    capture_lex $P5025
    $P5026 = $P5025()
    set $P5027, $P5026
    goto while23_test93 
  while23_done97:
.annotate 'line', 249
    $P5029 = $P104(_lex_param_0 :flat, _lex_param_1 :flat :named)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_375_1347719921.536") :anon :lex :outer("cuid_12_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 228
    .const 'Sub' $P5017 = 'cuid_374_1347719921.536' 
    capture_lex $P5017 
    .lex "$subid", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 229
    find_lex $P5003, "$compiled"
    find_lex $P5004, "$i"
    set $I5001, $P5004
    set $P5002, $P5003[$I5001]
    unless_null $P5002, fallback98
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5005
  fallback98:
    $P5006 = $P5002."get_subid"()
    set $P101, $P5006
    find_lex $P5008, "self"
    nqp_decontainerize $P5007, $P5008
    nqp_get_sc_object $P5009, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5010, $P5007, $P5009, "%!code_objects_to_fix_up"
    set $S5001, $P101
    exists $I5002, $P5010[$S5001]
    box $P5014, $I5002
    set $P5013, $P5014
    unless $I5002 goto if24_end100 
    .const 'Sub' $P5011 = 'cuid_374_1347719921.536' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
  if24_end100:
    find_lex $P5015, "$i"
    set $N5002, $P5015
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5016, $N5001
    store_lex "$i", $P5016
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_374_1347719921.536") :anon :lex :outer("cuid_375_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 230
    .const 'Sub' $P5062 = 'cuid_373_1347719921.536' 
    capture_lex $P5062 
    .lex "$static", $P101 
    .lex "$fixup_stmts", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
.annotate 'line', 234
    find_lex $P5005, "self"
    nqp_decontainerize $P5004, $P5005
    nqp_get_sc_object $P5006, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5007, $P5004, $P5006, "%!code_objects_to_fix_up"
    find_lex $P5008, "$subid"
    set $S5001, $P5008
    set $P5003, $P5007[$S5001]
    unless_null $P5003, fallback101
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5009
  fallback101:
    $P5010 = $P5003."shift"()
    set $P101, $P5010
    find_lex $P5011, "$code_type"
    find_lex $P5013, "$compiled"
    find_lex $P5014, "$i"
    set $I5001, $P5014
    set $P5012, $P5013[$I5001]
    unless_null $P5012, fallback102
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5012, $P5015
  fallback102:
    setattribute $P101, $P5011, "$!do", $P5012
    find_lex $P5021, "self"
    nqp_decontainerize $P5020, $P5021
    nqp_get_sc_object $P5022, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5023, $P5020, $P5022, "%!code_objects_to_fix_up"
    find_lex $P5024, "$subid"
    set $S5002, $P5024
    set $P5019, $P5023[$S5002]
    unless_null $P5019, fallback103
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5019, $P5025
  fallback103:
    set $P5016, $P5019
    iter $P5018, $P5019
  for_next105:
    unless $P5018, for_done107
    shift $P5027, $P5018
  for_redo106:
    .const 'Sub' $P5026 = 'cuid_373_1347719921.536' 
    capture_lex $P5026
    $P5016 = $P5026($P5027)
    goto for_next105
  for_done107:
    find_lex $P5029, "$compiled"
    find_lex $P5030, "$i"
    set $I5002, $P5030
    set $P5028, $P5029[$I5002]
    unless_null $P5028, fallback108
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5028, $P5031
  fallback108:
    find_lex $P5033, "$compiled"
    find_lex $P5034, "$i"
    set $I5003, $P5034
    set $P5032, $P5033[$I5003]
    unless_null $P5032, fallback109
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5032, $P5035
  fallback109:
    setprop $P5028, "STATIC_CODE_REF", $P5032
.annotate 'line', 240
    find_lex $P5037, "self"
    nqp_decontainerize $P5036, $P5037
    find_lex $P5040, "self"
    nqp_decontainerize $P5039, $P5040
    nqp_get_sc_object $P5041, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5042, $P5039, $P5041, "%!code_stub_sc_idx"
    find_lex $P5043, "$subid"
    set $S5003, $P5043
    set $P5038, $P5042[$S5003]
    unless_null $P5038, fallback110
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5038, $P5044
  fallback110:
    find_lex $P5046, "$compiled"
    find_lex $P5047, "$i"
    set $I5004, $P5047
    set $P5045, $P5046[$I5004]
    unless_null $P5045, fallback111
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5045, $P5048
  fallback111:
    $P5049 = $P5036."update_root_code_ref"($P5038, $P5045)
    find_lex $P5052, "self"
    nqp_decontainerize $P5051, $P5052
    nqp_get_sc_object $P5053, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5054, $P5051, $P5053, "%!code_object_fixup_list"
    find_lex $P5055, "$subid"
    set $S5004, $P5055
    set $P5050, $P5054[$S5004]
    unless_null $P5050, fallback112
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5050, $P5056
  fallback112:
    set $P102, $P5050
    new $P5060, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5060, while25_handlers116
    push_eh $P5060
  while25_test113:
    $P5057 = $P102."list"()
    set $N5001, $P5057
    box $P5061, $N5001
    set $P5059, $P5061
    unless $N5001 goto while25_done117 
  while25_redo115:
.annotate 'line', 244
    $P5058 = $P102."shift"()
    set $P5059, $P5058
    goto while25_test113 
  while25_handlers116:
    .get_results ($P5060)
    pop_upto_eh $P5060
    getattribute $P5060, $P5060, 'type'
    eq $P5060, .CONTROL_LOOP_NEXT, while25_test113
    eq $P5060, .CONTROL_LOOP_REDO, while25_redo115
  while25_done117:
    pop_eh 
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_373_1347719921.536") :anon :lex :outer("cuid_374_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 236
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$code_type"
    find_lex $P5004, "$compiled"
    find_lex $P5005, "$i"
    set $I5001, $P5005
    set $P5003, $P5004[$I5001]
    unless_null $P5003, fallback104
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5006
  fallback104:
    clone $P5002, $P5003
    setattribute _lex_param_0, $P5001, "$!do", $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_13_1347719921.536") :anon :lex :outer("cuid_15_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 276
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 277
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    nqp_get_sc_object $P5004, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5005, $P5002, $P5004, "%!code_objects_to_fix_up"
    find_lex $P5006, "$past"
    $P5007 = $P5006."cuid"()
    set $S5001, $P5007
    set $P5001, $P5005[$S5001]
    unless_null $P5001, fallback127
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5008
  fallback127:
    $P5009 = $P5001."push"(_lex_param_2)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_14_1347719921.536") :anon :lex :outer("cuid_15_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 281
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 283
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    $P5003 = $P5001."add_object"(_lex_param_2)
.annotate 'line', 284
    find_lex $P5004, "$fixups"
    get_hll_global $P5008, "GLOBAL"
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback128
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5005, $P5009
  fallback128:
.annotate 'line', 286
    get_hll_global $P5013, "GLOBAL"
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["WVal"]
    unless_null $P5010, fallback129
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5014
  fallback129:
    $P5015 = $P5010."new"(_lex_param_2 :named("value"))
.annotate 'line', 287
    get_hll_global $P5019, "GLOBAL"
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["WVal"]
    unless_null $P5016, fallback130
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5016, $P5020
  fallback130:
    find_lex $P5021, "$code_type"
    $P5022 = $P5016."new"($P5021 :named("value"))
.annotate 'line', 288
    get_hll_global $P5026, "GLOBAL"
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["SVal"]
    unless_null $P5023, fallback131
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5023, $P5027
  fallback131:
    $P5028 = $P5023."new"("$!do" :named("value"))
.annotate 'line', 289
    get_hll_global $P5032, "GLOBAL"
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["VM"]
    unless_null $P5029, fallback132
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5029, $P5033
  fallback132:
.annotate 'line', 291
    get_hll_global $P5037, "GLOBAL"
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback133
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5034, $P5038
  fallback133:
    get_hll_global $P5042, "GLOBAL"
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["BVal"]
    unless_null $P5039, fallback134
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5039, $P5043
  fallback134:
    find_lex $P5044, "$past"
    $P5045 = $P5039."new"($P5044 :named("value"))
    $P5046 = $P5034."new"($P5045, "clone" :named("op"))
.annotate 'line', 292
    get_hll_global $P5050, "GLOBAL"
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["WVal"]
    unless_null $P5047, fallback135
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5047, $P5051
  fallback135:
    $P5052 = $P5047."new"(_lex_param_2 :named("value"))
    $P5053 = $P5029."new"($P5046, $P5052, "set_sub_code_object 0PP" :named("pirop"))
    $P5054 = $P5005."new"($P5015, $P5022, $P5028, $P5053, "bindattr" :named("op"))
    $P5055 = $P5004."push"($P5054)
.annotate 'line', 297
    find_lex $P5058, "self"
    nqp_decontainerize $P5057, $P5058
    nqp_get_sc_object $P5059, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5060, $P5057, $P5059, "%!code_objects_to_fix_up"
    find_lex $P5061, "$past"
    $P5062 = $P5061."cuid"()
    set $S5001, $P5062
    set $P5056, $P5060[$S5001]
    unless_null $P5056, fallback136
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5056, $P5063
  fallback136:
    $P5064 = $P5056."push"(_lex_param_2)
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_376_1347719921.536") :anon :lex :outer("cuid_15_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 308
    .lex "$code_obj", $P101 
    .lex "$slot", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    find_lex $P5004, "$code_type"
    repr_instance_of $P5003, $P5004
    set $P101, $P5003
    find_lex $P5005, "$code_type"
    find_lex $P5006, "$dummy"
    setattribute $P101, $P5005, "$!do", $P5006
    find_lex $P5007, "$is_dispatcher"
    set $P5010, $P5007
    unless $P5007 goto if30_end140 
    find_lex $P5008, "$code_type"
    new $P5009, 'ResizablePMCArray'
    setattribute $P101, $P5008, "$!dispatchees", $P5009
    set $P5010, $P5009
  if30_end140:
.annotate 'line', 314
    find_lex $P5012, "self"
    nqp_decontainerize $P5011, $P5012
    $P5013 = $P5011."add_object"($P101)
    set $P102, $P5013
.annotate 'line', 317
    find_lex $P5015, "self"
    nqp_decontainerize $P5014, $P5015
.annotate 'line', 318
    get_hll_global $P5019, "GLOBAL"
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["VM"]
    unless_null $P5016, fallback141
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5016, $P5020
  fallback141:
.annotate 'line', 320
    get_hll_global $P5024, "GLOBAL"
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["BVal"]
    unless_null $P5021, fallback142
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5021, $P5025
  fallback142:
    find_lex $P5026, "$past"
    $P5027 = $P5021."new"($P5026 :named("value"))
.annotate 'line', 321
    get_hll_global $P5031, "GLOBAL"
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["WVal"]
    unless_null $P5028, fallback143
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5028, $P5032
  fallback143:
    $P5033 = $P5028."new"($P101 :named("value"))
    $P5034 = $P5016."new"($P5027, $P5033, "set_sub_code_object vPP" :named("pirop"))
    $P5035 = $P5014."add_fixup_task"($P5034 :named("deserialize_past"))
.annotate 'line', 325
    find_lex $P5036, "$fixups"
    get_hll_global $P5040, "GLOBAL"
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback144
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5037, $P5041
  fallback144:
.annotate 'line', 327
    get_hll_global $P5045, "GLOBAL"
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["WVal"]
    unless_null $P5042, fallback145
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5042, $P5046
  fallback145:
    $P5047 = $P5042."new"($P101 :named("value"))
.annotate 'line', 328
    get_hll_global $P5051, "GLOBAL"
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["WVal"]
    unless_null $P5048, fallback146
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5048, $P5052
  fallback146:
    find_lex $P5053, "$code_type"
    $P5054 = $P5048."new"($P5053 :named("value"))
.annotate 'line', 329
    get_hll_global $P5058, "GLOBAL"
    nqp_get_package_through_who $P5057, $P5058, "QAST"
    get_who $P5056, $P5057
    set $P5055, $P5056["SVal"]
    unless_null $P5055, fallback147
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5055, $P5059
  fallback147:
    $P5060 = $P5055."new"("$!do" :named("value"))
.annotate 'line', 330
    get_hll_global $P5064, "GLOBAL"
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["BVal"]
    unless_null $P5061, fallback148
    nqp_get_sc_object $P5065, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5061, $P5065
  fallback148:
    find_lex $P5066, "$past"
    $P5067 = $P5061."new"($P5066 :named("value"))
    $P5068 = $P5037."new"($P5047, $P5054, $P5060, $P5067, "bindattr" :named("op"))
    $P5069 = $P5036."push"($P5068)
.annotate 'line', 332
    find_lex $P5070, "$fixups"
    get_hll_global $P5074, "GLOBAL"
    nqp_get_package_through_who $P5073, $P5074, "QAST"
    get_who $P5072, $P5073
    set $P5071, $P5072["VM"]
    unless_null $P5071, fallback149
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5071, $P5075
  fallback149:
.annotate 'line', 334
    get_hll_global $P5079, "GLOBAL"
    nqp_get_package_through_who $P5078, $P5079, "QAST"
    get_who $P5077, $P5078
    set $P5076, $P5077["BVal"]
    unless_null $P5076, fallback150
    nqp_get_sc_object $P5080, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5076, $P5080
  fallback150:
    find_lex $P5081, "$past"
    $P5082 = $P5076."new"($P5081 :named("value"))
.annotate 'line', 335
    get_hll_global $P5086, "GLOBAL"
    nqp_get_package_through_who $P5085, $P5086, "QAST"
    get_who $P5084, $P5085
    set $P5083, $P5084["WVal"]
    unless_null $P5083, fallback151
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5083, $P5087
  fallback151:
    $P5088 = $P5083."new"($P101 :named("value"))
    $P5089 = $P5071."new"($P5082, $P5088, "set_sub_code_object vPP" :named("pirop"))
    $P5090 = $P5070."push"($P5089)
    find_lex $P5092, "self"
    nqp_decontainerize $P5091, $P5092
    nqp_get_sc_object $P5093, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5094, $P5091, $P5093, "%!code_objects_to_fix_up"
.annotate 'line', 339
    find_lex $P5095, "$past"
    $P5096 = $P5095."cuid"()
    set $S5001, $P5096
    new $P5097, 'ResizablePMCArray'
    push $P5097, $P101
    set $P5094[$S5001], $P5097
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_create_mo" :subid("cuid_16_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 361
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("name") :optional 
    .param int haz_param_1 :opt_flag 
    .param pmc _lex_param_3 :named("repr") :optional 
    .param int haz_param_2 :opt_flag 
    if haz_param_1, default163
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_2, $P5012
  default163:
    if haz_param_2, default164
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_3, $P5013
  default164:
    .lex "%args", $P101 
    .lex "$mo", $P102 
    .lex "self", _lex_param_0 
    .lex "$how", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$repr", _lex_param_3 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_157
    .lex "RETURN", $P103
    defined $I5001, _lex_param_2
    box $P5004, $I5001
    set $P5003, $P5004
    unless $I5001 goto if31_end160 
.annotate 'line', 364
    set $P101["name"], _lex_param_2
    set $P5003, _lex_param_2
  if31_end160:
    defined $I5002, _lex_param_3
    box $P5006, $I5002
    set $P5005, $P5006
    unless $I5002 goto if32_end162 
.annotate 'line', 365
    set $P101["repr"], _lex_param_3
    set $P5005, _lex_param_3
  if32_end162:
.annotate 'line', 366
    $P5007 = _lex_param_1."new_type"($P101 :flat :named)
    set $P102, $P5007
.annotate 'line', 367
    nqp_decontainerize $P5008, _lex_param_0
    $P5009 = $P5008."add_object"($P102)
    find_lex $P5010, "RETURN"
    $P5011 = $P5010($P102)
    goto lexotic_158
  lexotic_157:
    .get_results ($P5011)
  lexotic_158:
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_attribute" :subid("cuid_17_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 378
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "$attr", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_attr", _lex_param_2 
    .lex "%lit_args", _lex_param_3 
    .lex "%obj_args", _lex_param_4 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 379
    $P5002 = _lex_param_2."new"(_lex_param_3 :flat :named, _lex_param_4 :flat :named)
    set $P101, $P5002
.annotate 'line', 380
    get_how $P5003, _lex_param_1
    $P5004 = $P5003."add_attribute"(_lex_param_1, $P101)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_method" :subid("cuid_18_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 384
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$name", _lex_param_3 
    .lex "$code", _lex_param_4 
.annotate 'line', 385
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3, _lex_param_4)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "set_routine_signature" :subid("cuid_19_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 389
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$sig_type", $P101 
    .lex "$code_type", $P102 
    .lex "$sig_obj", $P103 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$types", _lex_param_2 
    .lex "$definednesses", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P103, $P5003
.annotate 'line', 390
    nqp_decontainerize $P5004, _lex_param_0
    new $P5005, 'ResizablePMCArray'
    box $P5006, "NQPSignature"
    push $P5005, $P5006
    $P5007 = $P5004."find_sym"($P5005)
    set $P101, $P5007
.annotate 'line', 391
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    box $P5010, "NQPRoutine"
    push $P5009, $P5010
    $P5011 = $P5008."find_sym"($P5009)
    set $P102, $P5011
    repr_instance_of $P5012, $P101
    set $P103, $P5012
    setattribute $P103, $P101, "$!types", _lex_param_2
    setattribute $P103, $P101, "$!definednesses", _lex_param_3
    setattribute _lex_param_1, $P102, "$!signature", $P103
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_set_body_block" :subid("cuid_20_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 399
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$body_code_obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$body_past", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 401
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = _lex_param_2."name"()
    $P5004 = $P5002."create_code"(_lex_param_2, $P5003, 0)
    set $P101, $P5004
.annotate 'line', 404
    get_how $P5005, _lex_param_1
    $P5006 = $P5005."set_body_block"(_lex_param_1, $P101)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parent_or_role" :subid("cuid_21_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 408
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$to_add", _lex_param_3 
.annotate 'line', 409
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parrot_vtable_handler_mapping" :subid("cuid_22_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 412
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$att_name", _lex_param_3 
.annotate 'line', 413
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."add_parrot_vtable_handler_mapping"(_lex_param_1, _lex_param_2, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_compose" :subid("cuid_23_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 417
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
.annotate 'line', 418
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."compose"(_lex_param_1)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "run_begin_block" :subid("cuid_24_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 422
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5042 = 'cuid_378_1347719921.536' 
    capture_lex $P5042 
    .lex "$wrapper", $P101 
    .lex "%seen", $P102 
    .lex "$i", $P103 
    .lex "$code", $P104 
    .lex "$old_global", $P105 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P105, $P5005
    root_new $P106, ['parrot';'Continuation']
    set_label $P106, lexotic_165
    .lex "RETURN", $P106
.annotate 'line', 424
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback167
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5010
  fallback167:
.annotate 'line', 425
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Stmts"]
    unless_null $P5011, fallback168
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5015
  fallback168:
    $P5016 = $P5011."new"()
    $P5017 = $P5006."new"($P5016, _lex_param_1)
    set $P101, $P5017
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    set $N5001, $P5020
    box $P5021, $N5001
    set $P103, $P5021
  while33_test169:
    set $N5002, $P103
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5025, $I5001
    set $P5024, $P5025
    unless $I5001 goto while33_done173 
  while33_redo171:
    .const 'Sub' $P5022 = 'cuid_378_1347719921.536' 
    capture_lex $P5022
    $P5023 = $P5022()
    set $P5024, $P5023
    goto while33_test169 
  while33_done173:
.annotate 'line', 448
    nqp_decontainerize $P5026, _lex_param_0
    $P5027 = $P5026."create_code"($P101, "BEGIN block", 0)
    set $P104, $P5027
    new $P5029, 'ResizablePMCArray'
    get_hll_global $P5028, $P5029, "GLOBAL"
    set $P105, $P5028
    new $P5030, 'ResizablePMCArray'
    find_dynamic_lex $P5031, "$*GLOBALish"
    unless_null $P5031, fallback190
    get_hll_global $P5034, "GLOBAL"
    get_who $P5033, $P5034
    set $P5032, $P5033["$GLOBALish"]
    unless_null $P5032, fallback191
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5032, $P5035
  fallback191:
    unless_null $P5032, vivi_38192
    die "Contextual $*GLOBALish not found"
    box $P5036, "Contextual $*GLOBALish not found"
    set $P5032, $P5036
  vivi_38192:
    set $P5031, $P5032
  fallback190:
    set_hll_global $P5030, "GLOBAL", $P5031
.annotate 'line', 451
    $P5037 = $P104()
    new $P5038, 'ResizablePMCArray'
    set_hll_global $P5038, "GLOBAL", $P105
.annotate 'line', 456
    $P5039 = $P101."shift"()
    find_lex $P5040, "RETURN"
    $P5041 = $P5040($P101)
    goto lexotic_166
  lexotic_165:
    .get_results ($P5041)
  lexotic_166:
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_378_1347719921.536") :anon :lex :outer("cuid_24_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 430
    .const 'Sub' $P5017 = 'cuid_377_1347719921.536' 
    capture_lex $P5017 
    .lex "%symbols", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 432
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback174
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5010
  fallback174:
    $P5011 = $P5004."symtable"()
    set $P101, $P5011
    set $P5012, $P101
    iter $P5014, $P101
  for_next187:
    unless $P5014, for_done189
    shift $P5016, $P5014
  for_redo188:
    .const 'Sub' $P5015 = 'cuid_377_1347719921.536' 
    capture_lex $P5015
    $P5012 = $P5015($P5016)
    goto for_next187
  for_done189:
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_377_1347719921.536") :anon :lex :outer("cuid_378_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 433
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "%seen"
.annotate 'line', 434
    $P5003 = _lex_param_0."key"()
    set $S5001, $P5003
    set $P5001, $P5002[$S5001]
    unless_null $P5001, fallback179
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5004
  fallback179:
    isfalse $I5001, $P5001
    set $I5003, $I5001
    unless $I5001 goto if35_end178 
    $P5005 = _lex_param_0."value"()
    exists $I5002, $P5005["value"]
    set $I5003, $I5002
  if35_end178:
    box $P5038, $I5003
    set $P5037, $P5038
    unless $I5003 goto if34_end176 
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_37186
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 435
.annotate 'line', 436
    find_lex $P5007, "$wrapper"
    set $P5006, $P5007[0]
    unless_null $P5006, fallback180
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5008
  fallback180:
    get_hll_global $P5012, "GLOBAL"
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback181
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5013
  fallback181:
.annotate 'line', 438
    get_hll_global $P5017, "GLOBAL"
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Var"]
    unless_null $P5014, fallback182
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5014, $P5018
  fallback182:
    $P5019 = _lex_param_0."key"()
    $P5020 = $P5014."new"($P5019 :named("name"), "lexical" :named("scope"), "var" :named("isdecl"))
.annotate 'line', 439
    get_hll_global $P5024, "GLOBAL"
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["WVal"]
    unless_null $P5021, fallback183
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5021, $P5025
  fallback183:
    $P5027 = _lex_param_0."value"()
    set $P5026, $P5027["value"]
    unless_null $P5026, fallback184
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5026, $P5028
  fallback184:
    $P5029 = $P5021."new"($P5026 :named("value"))
    $P5030 = $P5009."new"($P5020, $P5029, "bind" :named("op"))
    $P5031 = $P5006."push"($P5030)
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_36185
  catch_handler_37186:
    .get_results ($P5032) 
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10001
    goto skip_handler_36185
  skip_handler_36185:
    find_lex $P5034, "%seen"
.annotate 'line', 442
    $P5035 = _lex_param_0."key"()
    set $S5002, $P5035
    box $P5036, 1
    set $P5034[$S5002], $P5036
    set $P5037, $P5036
  if34_end176:
    .return ($P5037) 
.end
.HLL "nqp"
.namespace []
.sub "libs" :subid("cuid_25_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 461
    .param pmc _lex_param_0 
    .const 'Sub' $P5045 = 'cuid_379_1347719921.536' 
    capture_lex $P5045 
    .lex "@loadlibs", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    box $P5003, "nqp_group"
    push $P5002, $P5003
    box $P5004, "nqp_ops"
    push $P5002, $P5004
    box $P5005, "nqp_bigint_ops"
    push $P5002, $P5005
    box $P5006, "trans_ops"
    push $P5002, $P5006
    box $P5007, "io_ops"
    push $P5002, $P5007
    set $P101, $P5002
    find_dynamic_lex $P5010, "%*COMPILING"
    unless_null $P5010, fallback195
    get_hll_global $P5013, "GLOBAL"
    get_who $P5012, $P5013
    set $P5011, $P5012["%COMPILING"]
    unless_null $P5011, fallback196
    get_hll_global $P5015, "GLOBAL"
    get_who $P5014, $P5015
    new $P5016, 'Hash'
    set $P5014["%COMPILING"], $P5016
    set $P5011, $P5016
  fallback196:
    unless_null $P5011, vivi_40197
    die "Contextual %*COMPILING not found"
    box $P5017, "Contextual %*COMPILING not found"
    set $P5011, $P5017
  vivi_40197:
    set $P5010, $P5011
  fallback195:
    set $P5009, $P5010["%?OPTIONS"]
    unless_null $P5009, fallback198
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5018
  fallback198:
    set $P5008, $P5009["vmlibs"]
    unless_null $P5008, fallback199
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5019
  fallback199:
    set $P5038, $P5008
    unless $P5008 goto if39_end194 
.annotate 'line', 464
    find_dynamic_lex $P5026, "%*COMPILING"
    unless_null $P5026, fallback200
    get_hll_global $P5029, "GLOBAL"
    get_who $P5028, $P5029
    set $P5027, $P5028["%COMPILING"]
    unless_null $P5027, fallback201
    get_hll_global $P5031, "GLOBAL"
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%COMPILING"], $P5032
    set $P5027, $P5032
  fallback201:
    unless_null $P5027, vivi_41202
    die "Contextual %*COMPILING not found"
    box $P5033, "Contextual %*COMPILING not found"
    set $P5027, $P5033
  vivi_41202:
    set $P5026, $P5027
  fallback200:
    set $P5025, $P5026["%?OPTIONS"]
    unless_null $P5025, fallback203
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5025, $P5034
  fallback203:
    set $P5024, $P5025["vmlibs"]
    unless_null $P5024, fallback204
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5024, $P5035
  fallback204:
    set $S5001, $P5024
    split $P5023, ",", $S5001
    set $P5020, $P5023
    iter $P5022, $P5023
  for_next205:
    unless $P5022, for_done207
    shift $P5037, $P5022
  for_redo206:
    .const 'Sub' $P5036 = 'cuid_379_1347719921.536' 
    capture_lex $P5036
    $P5020 = $P5036($P5037)
    goto for_next205
  for_done207:
    set $P5038, $P5020
  if39_end194:
.annotate 'line', 469
    get_hll_global $P5042, "GLOBAL"
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["VM"]
    unless_null $P5039, fallback208
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5039, $P5043
  fallback208:
    $P5044 = $P5039."new"($P101 :named("loadlibs"))
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_379_1347719921.536") :anon :lex :outer("cuid_25_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 465
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 466
    find_lex $P5001, "@loadlibs"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "add_initializations" :subid("cuid_26_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 473
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 474
    nqp_decontainerize $P5001, _lex_param_0
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback209
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5006
  fallback209:
.annotate 'line', 475
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["VM"]
    unless_null $P5007, fallback210
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5011
  fallback210:
    $P5012 = $P5007."new"("nqp_dynop_setup v" :named("pirop"))
.annotate 'line', 476
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["VM"]
    unless_null $P5013, fallback211
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5013, $P5017
  fallback211:
    $P5018 = $P5013."new"("nqp_bigint_setup v" :named("pirop"))
.annotate 'line', 477
    get_hll_global $P5022, "GLOBAL"
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["Op"]
    unless_null $P5019, fallback212
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5019, $P5023
  fallback212:
.annotate 'line', 479
    get_hll_global $P5027, "GLOBAL"
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["VM"]
    unless_null $P5024, fallback213
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5024, $P5028
  fallback213:
    $P5029 = $P5024."new"("getinterp P" :named("pirop"))
.annotate 'line', 480
    get_hll_global $P5033, "GLOBAL"
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["VM"]
    unless_null $P5030, fallback214
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5030, $P5034
  fallback214:
    get_hll_global $P5038, "GLOBAL"
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["SVal"]
    unless_null $P5035, fallback215
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5035, $P5039
  fallback215:
    $P5040 = $P5035."new"("LexPad" :named("value"))
    $P5041 = $P5030."new"($P5040, "get_class Ps" :named("pirop"))
.annotate 'line', 481
    get_hll_global $P5045, "GLOBAL"
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["VM"]
    unless_null $P5042, fallback216
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5042, $P5046
  fallback216:
    get_hll_global $P5050, "GLOBAL"
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["SVal"]
    unless_null $P5047, fallback217
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5047, $P5051
  fallback217:
    $P5052 = $P5047."new"("NQPLexPad" :named("value"))
    $P5053 = $P5042."new"($P5052, "get_class Ps" :named("pirop"))
    $P5054 = $P5019."new"($P5029, $P5041, $P5053, "callmethod" :named("op"), "hll_map" :named("name"))
    $P5055 = $P5002."new"($P5012, $P5018, $P5054)
    $P5056 = $P5001."add_load_dependency_task"($P5055 :named("deserialize_past"))
    .return ($P5056) 
.end
.HLL "nqp"
.namespace []
.sub "is_lexical" :subid("cuid_27_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 487
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 488
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "lexical")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_package" :subid("cuid_28_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 493
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 494
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "package")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_scope" :subid("cuid_29_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 499
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P5011 = 'cuid_380_1347719921.536' 
    capture_lex $P5011 
    .lex "$i", $P101 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
    .lex "$wanted_scope", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_218
    .lex "RETURN", $P102
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    set $N5001, $P5004
    box $P5005, $N5001
    set $P101, $P5005
  while42_test220:
    set $N5002, $P101
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5009, $I5001
    set $P5008, $P5009
    unless $I5001 goto while42_done224 
  while42_redo222:
    .const 'Sub' $P5006 = 'cuid_380_1347719921.536' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5008, $P5007
    goto while42_test220 
  while42_done224:
    box $P5010, 0
    goto lexotic_219
  lexotic_218:
    .get_results ($P5010)
  lexotic_219:
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_380_1347719921.536") :anon :lex :outer("cuid_29_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 501
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 503
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback225
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5010
  fallback225:
    find_lex $P5011, "$name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5019, $N5004
    set $P5018, $P5019
    unless $N5004 goto if43_end227 
.annotate 'line', 504
    set $P5014, $P101["scope"]
    unless_null $P5014, fallback228
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5014, $P5015
  fallback228:
    set $S5001, $P5014
    find_lex $P5016, "$wanted_scope"
    set $S5002, $P5016
    iseq $I5002, $S5001, $S5002
    find_lex $P5013, "RETURN"
    $P5017 = $P5013($I5002)
    set $P5018, $P5017
  if43_end227:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "known_sym" :subid("cuid_30_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 512
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$known", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "@name", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    box $P5002, 0
    set $P101, $P5002
    new $P5006, 'ExceptionHandler'
    set_label $P5006, catch_handler_45230
    $P5006.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5006
.annotate 'line', 514
.annotate 'line', 515
    nqp_decontainerize $P5003, _lex_param_0
    $P5004 = $P5003."find_sym"(_lex_param_2)
    box $P5005, 1
    set $P101, $P5005
    set $P5007, $P101
    pop_eh 
    goto skip_handler_44229
  catch_handler_45230:
    .get_results ($P5006) 
    set $I10001, 1
    set $P5006["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    finalize $P5006
    pop_upto_eh $P5006
    pop_eh 
    set $P5007, $P10001
    goto skip_handler_44229
  skip_handler_44229:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "find_sym" :subid("cuid_31_1347719921.536") :anon :lex :outer("cuid_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 524
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_382_1347719921.536' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_384_1347719921.536' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_385_1347719921.536' 
    capture_lex $P5024 
    .lex "$result", $P101 
    .lex "self", _lex_param_0 
    .lex "@name", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_231
    .lex "RETURN", $P102
    set $N5001, _lex_param_1
    box $P5004, $N5001
    set $P5003, $P5004
    if $N5001 goto unless46_end234 
.annotate 'line', 526
    box $P5002, "Cannot look up empty name"
    die $P5002
    set $P5003, $P5002
  unless46_end234:
    set $N5002, _lex_param_1
    set $N5003, 1
    iseq $I5001, $N5002, $N5003
    box $P5008, $I5001
    set $P5007, $P5008
    unless $I5001 goto if47_end236 
    .const 'Sub' $P5005 = 'cuid_382_1347719921.536' 
    capture_lex $P5005
    $P5006 = $P5005()
    set $P5007, $P5006
  if47_end236:
    find_dynamic_lex $P5009, "$*GLOBALish"
    unless_null $P5009, fallback249
    get_hll_global $P5012, "GLOBAL"
    get_who $P5011, $P5012
    set $P5010, $P5011["$GLOBALish"]
    unless_null $P5010, fallback250
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5013
  fallback250:
    unless_null $P5010, vivi_51251
    die "Contextual $*GLOBALish not found"
    box $P5014, "Contextual $*GLOBALish not found"
    set $P5010, $P5014
  vivi_51251:
    set $P5009, $P5010
  fallback249:
    set $P101, $P5009
    set $N5004, _lex_param_1
    set $N5005, 2
    isge $I5002, $N5004, $N5005
    box $P5018, $I5002
    set $P5017, $P5018
    unless $I5002 goto if52_end253 
    .const 'Sub' $P5015 = 'cuid_384_1347719921.536' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5017, $P5016
  if52_end253:
    set $P5019, _lex_param_1
    iter $P5021, _lex_param_1
  for_next269:
    unless $P5021, for_done271
    shift $P5023, $P5021
  for_redo270:
    .const 'Sub' $P5022 = 'cuid_385_1347719921.536' 
    capture_lex $P5022
    $P5019 = $P5022($P5023)
    goto for_next269
  for_done271:
    goto lexotic_232
  lexotic_231:
    .get_results ($P101)
  lexotic_232:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_382_1347719921.536") :anon :lex :outer("cuid_31_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 530
    .const 'Sub' $P5015 = 'cuid_381_1347719921.536' 
    capture_lex $P5015 
    .lex "$final_name", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback237
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5005
  fallback237:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while48_test238:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while48_done242 
  while48_redo240:
    .const 'Sub' $P5011 = 'cuid_381_1347719921.536' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while48_test238 
  while48_done242:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_381_1347719921.536") :anon :lex :outer("cuid_382_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 533
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 535
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback243
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5010
  fallback243:
    find_lex $P5011, "$final_name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5021, $N5004
    set $P5020, $P5021
    unless $N5004 goto if49_end245 
.annotate 'line', 536
    exists $I5002, $P101["value"]
    unless $I5002 goto if50_else246 
.annotate 'line', 537
    set $P5014, $P101["value"]
    unless_null $P5014, fallback248
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5014, $P5015
  fallback248:
    find_lex $P5013, "RETURN"
    $P5016 = $P5013($P5014)
    set $P5019, $P5016
    goto if50_end247
  if50_else246:
.annotate 'line', 540
    find_lex $P5017, "$final_name"
    set $S5002, $P5017
    concat $S5001, "No compile-time value for ", $S5002
    box $P5018, $S5001
    die $P5018
    set $P5019, $P5018
  if50_end247:
    set $P5020, $P5019
  if49_end245:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_384_1347719921.536") :anon :lex :outer("cuid_31_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 551
    .const 'Sub' $P5015 = 'cuid_383_1347719921.536' 
    capture_lex $P5015 
    .lex "$first", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback254
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5005
  fallback254:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while53_test255:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while53_done259 
  while53_redo257:
    .const 'Sub' $P5011 = 'cuid_383_1347719921.536' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while53_test255 
  while53_done259:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_383_1347719921.536") :anon :lex :outer("cuid_384_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 554
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 556
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback260
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5010
  fallback260:
    find_lex $P5011, "$first"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5022, $N5004
    set $P5021, $P5022
    unless $N5004 goto if54_end262 
.annotate 'line', 557
    exists $I5002, $P101["value"]
    unless $I5002 goto if55_else263 
.annotate 'line', 558
    set $P5013, $P101["value"]
    unless_null $P5013, fallback265
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5013, $P5014
  fallback265:
    store_lex "$result", $P5013
.annotate 'line', 560
    find_lex $P5015, "@name"
    $P5016 = $P5015."shift"()
    box $P5017, 0
    store_lex "$i", $P5017
    set $P5020, $P5017
    goto if55_end264
  if55_else263:
.annotate 'line', 563
    find_lex $P5018, "$first"
    set $S5002, $P5018
    concat $S5001, "No compile-time value for ", $S5002
    box $P5019, $S5001
    die $P5019
    set $P5020, $P5019
  if55_end264:
    set $P5021, $P5020
  if54_end262:
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_385_1347719921.536") :anon :lex :outer("cuid_31_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 571
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$result"
    get_who $P5001, $P5002
    set $S5001, _lex_param_0
    exists $I5001, $P5001[$S5001]
    unless $I5001 goto if56_else266 
.annotate 'line', 572
    find_lex $P5005, "$result"
    get_who $P5004, $P5005
    set $S5002, _lex_param_0
    set $P5003, $P5004[$S5002]
    unless_null $P5003, fallback268
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5006
  fallback268:
    store_lex "$result", $P5003
    set $P5009, $P5003
    goto if56_end267
  if56_else266:
.annotate 'line', 575
    find_lex $P5007, "@name"
    join $S5004, "::", $P5007
    concat $S5003, "Could not locate compile-time value for symbol ", $S5004
    box $P5008, $S5003
    die $P5008
    set $P5009, $P5008
  if56_end267:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_223_1347719921.536") :anon :lex :outer("cuid_1_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 586
    .const 'Sub' $P5274 = 'cuid_33_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_34_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_35_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_36_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_37_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_38_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_40_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_42_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_43_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_44_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_46_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_47_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_48_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_49_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_50_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_51_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_52_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_53_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_54_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_55_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_56_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_57_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_58_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_59_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_60_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_61_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_62_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_63_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_65_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_66_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_67_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_68_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_69_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_70_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_71_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_72_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_73_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_74_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_75_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_76_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_77_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_78_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_79_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_80_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_81_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_82_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_83_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_84_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_85_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_86_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_87_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_88_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_91_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_92_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_93_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_94_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_95_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_96_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_97_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_98_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_99_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_100_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_101_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_102_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_103_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_104_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_105_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_106_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_107_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_108_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_109_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_110_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_111_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_112_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_113_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_114_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_115_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_116_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_117_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_118_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_119_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_120_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_121_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_122_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_123_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_124_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_125_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_126_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_128_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_129_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_130_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_131_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_132_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_133_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_134_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_135_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_136_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_137_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_138_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_139_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_140_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_141_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_142_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_143_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_144_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_145_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_146_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_147_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_148_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_149_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_150_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_151_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_152_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_153_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_154_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_155_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_156_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_157_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_158_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_159_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_160_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_161_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_162_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_163_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_164_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_165_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_166_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_167_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_168_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_169_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_170_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_171_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_172_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_173_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_174_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_175_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_176_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_177_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_178_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_179_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_180_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_181_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_182_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_183_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_184_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_185_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_186_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_187_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_188_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_189_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_190_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_191_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_192_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_193_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_194_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_195_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_196_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_197_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_198_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_199_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_200_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_201_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_202_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_203_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_204_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_205_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_206_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_207_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_208_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_209_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_210_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_211_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_212_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_213_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_214_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_215_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_216_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_217_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_218_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_219_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_220_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_221_1347719921.536' 
    capture_lex $P5274 
    .const 'Sub' $P5274 = 'cuid_222_1347719921.536' 
    capture_lex $P5274 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
.annotate 'line', 1213
.annotate 'line', 1214
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "NQP"
    get_who $P5002, $P5003
    set $P5001, $P5002["Grammar"]
    unless_null $P5001, fallback272
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback272:
    $P5006 = $P5001."O"(":prec<y=>, :assoc<unary>", "%methodop")
.annotate 'line', 1215
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "NQP"
    get_who $P5008, $P5009
    set $P5007, $P5008["Grammar"]
    unless_null $P5007, fallback273
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5011
  fallback273:
    $P5012 = $P5007."O"(":prec<x=>, :assoc<unary>", "%autoincrement")
.annotate 'line', 1216
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "NQP"
    get_who $P5014, $P5015
    set $P5013, $P5014["Grammar"]
    unless_null $P5013, fallback274
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5013, $P5017
  fallback274:
    $P5018 = $P5013."O"(":prec<w=>, :assoc<left>", "%exponentiation")
.annotate 'line', 1217
    get_hll_global $P5022, "GLOBAL"
    nqp_get_package_through_who $P5021, $P5022, "NQP"
    get_who $P5020, $P5021
    set $P5019, $P5020["Grammar"]
    unless_null $P5019, fallback275
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5019, $P5023
  fallback275:
    $P5024 = $P5019."O"(":prec<v=>, :assoc<unary>", "%symbolic_unary")
.annotate 'line', 1218
    get_hll_global $P5028, "GLOBAL"
    nqp_get_package_through_who $P5027, $P5028, "NQP"
    get_who $P5026, $P5027
    set $P5025, $P5026["Grammar"]
    unless_null $P5025, fallback276
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5025, $P5029
  fallback276:
    $P5030 = $P5025."O"(":prec<u=>, :assoc<left>", "%multiplicative")
.annotate 'line', 1219
    get_hll_global $P5034, "GLOBAL"
    nqp_get_package_through_who $P5033, $P5034, "NQP"
    get_who $P5032, $P5033
    set $P5031, $P5032["Grammar"]
    unless_null $P5031, fallback277
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5031, $P5035
  fallback277:
    $P5036 = $P5031."O"(":prec<t=>, :assoc<left>", "%additive")
.annotate 'line', 1220
    get_hll_global $P5040, "GLOBAL"
    nqp_get_package_through_who $P5039, $P5040, "NQP"
    get_who $P5038, $P5039
    set $P5037, $P5038["Grammar"]
    unless_null $P5037, fallback278
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5037, $P5041
  fallback278:
    $P5042 = $P5037."O"(":prec<r=>, :assoc<left>", "%concatenation")
.annotate 'line', 1221
    get_hll_global $P5046, "GLOBAL"
    nqp_get_package_through_who $P5045, $P5046, "NQP"
    get_who $P5044, $P5045
    set $P5043, $P5044["Grammar"]
    unless_null $P5043, fallback279
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5043, $P5047
  fallback279:
    $P5048 = $P5043."O"(":prec<m=>, :assoc<left>", "%relational")
.annotate 'line', 1222
    get_hll_global $P5052, "GLOBAL"
    nqp_get_package_through_who $P5051, $P5052, "NQP"
    get_who $P5050, $P5051
    set $P5049, $P5050["Grammar"]
    unless_null $P5049, fallback280
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5049, $P5053
  fallback280:
    $P5054 = $P5049."O"(":prec<l=>, :assoc<left>", "%tight_and")
.annotate 'line', 1223
    get_hll_global $P5058, "GLOBAL"
    nqp_get_package_through_who $P5057, $P5058, "NQP"
    get_who $P5056, $P5057
    set $P5055, $P5056["Grammar"]
    unless_null $P5055, fallback281
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5055, $P5059
  fallback281:
    $P5060 = $P5055."O"(":prec<k=>, :assoc<left>", "%tight_or")
.annotate 'line', 1224
    get_hll_global $P5064, "GLOBAL"
    nqp_get_package_through_who $P5063, $P5064, "NQP"
    get_who $P5062, $P5063
    set $P5061, $P5062["Grammar"]
    unless_null $P5061, fallback282
    nqp_get_sc_object $P5065, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5061, $P5065
  fallback282:
    $P5066 = $P5061."O"(":prec<j=>, :assoc<right>", "%conditional")
.annotate 'line', 1225
    get_hll_global $P5070, "GLOBAL"
    nqp_get_package_through_who $P5069, $P5070, "NQP"
    get_who $P5068, $P5069
    set $P5067, $P5068["Grammar"]
    unless_null $P5067, fallback283
    nqp_get_sc_object $P5071, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5067, $P5071
  fallback283:
    $P5072 = $P5067."O"(":prec<i=>, :assoc<right>", "%assignment")
.annotate 'line', 1226
    get_hll_global $P5076, "GLOBAL"
    nqp_get_package_through_who $P5075, $P5076, "NQP"
    get_who $P5074, $P5075
    set $P5073, $P5074["Grammar"]
    unless_null $P5073, fallback284
    nqp_get_sc_object $P5077, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5073, $P5077
  fallback284:
    $P5078 = $P5073."O"(":prec<g=>, :assoc<list>, :nextterm<nulltermish>", "%comma")
.annotate 'line', 1227
    get_hll_global $P5082, "GLOBAL"
    nqp_get_package_through_who $P5081, $P5082, "NQP"
    get_who $P5080, $P5081
    set $P5079, $P5080["Grammar"]
    unless_null $P5079, fallback285
    nqp_get_sc_object $P5083, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5079, $P5083
  fallback285:
    $P5084 = $P5079."O"(":prec<f=>, :assoc<list>", "%list_infix")
.annotate 'line', 1228
    get_hll_global $P5088, "GLOBAL"
    nqp_get_package_through_who $P5087, $P5088, "NQP"
    get_who $P5086, $P5087
    set $P5085, $P5086["Grammar"]
    unless_null $P5085, fallback286
    nqp_get_sc_object $P5089, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5085, $P5089
  fallback286:
    $P5090 = $P5085."O"(":prec<e=>, :assoc<unary>", "%list_prefix")
.annotate 'line', 586
    .const 'Sub' $P5091 = 'cuid_33_1347719921.536' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_34_1347719921.536' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_35_1347719921.536' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_36_1347719921.536' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_37_1347719921.536' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_38_1347719921.536' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_40_1347719921.536' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_42_1347719921.536' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_43_1347719921.536' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_44_1347719921.536' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_46_1347719921.536' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_47_1347719921.536' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_48_1347719921.536' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_49_1347719921.536' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_50_1347719921.536' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_51_1347719921.536' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_52_1347719921.536' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_53_1347719921.536' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_54_1347719921.536' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_55_1347719921.536' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_56_1347719921.536' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_57_1347719921.536' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_58_1347719921.536' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_59_1347719921.536' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_60_1347719921.536' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_61_1347719921.536' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_62_1347719921.536' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_63_1347719921.536' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_65_1347719921.536' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_66_1347719921.536' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_67_1347719921.536' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_68_1347719921.536' 
    capture_lex $P5122
    .const 'Sub' $P5123 = 'cuid_69_1347719921.536' 
    capture_lex $P5123
    .const 'Sub' $P5124 = 'cuid_70_1347719921.536' 
    capture_lex $P5124
    .const 'Sub' $P5125 = 'cuid_71_1347719921.536' 
    capture_lex $P5125
    .const 'Sub' $P5126 = 'cuid_72_1347719921.536' 
    capture_lex $P5126
    .const 'Sub' $P5127 = 'cuid_73_1347719921.536' 
    capture_lex $P5127
    .const 'Sub' $P5128 = 'cuid_74_1347719921.536' 
    capture_lex $P5128
    .const 'Sub' $P5129 = 'cuid_75_1347719921.536' 
    capture_lex $P5129
    .const 'Sub' $P5130 = 'cuid_76_1347719921.536' 
    capture_lex $P5130
    .const 'Sub' $P5131 = 'cuid_77_1347719921.536' 
    capture_lex $P5131
    .const 'Sub' $P5132 = 'cuid_78_1347719921.536' 
    capture_lex $P5132
    .const 'Sub' $P5133 = 'cuid_79_1347719921.536' 
    capture_lex $P5133
    .const 'Sub' $P5134 = 'cuid_80_1347719921.536' 
    capture_lex $P5134
    .const 'Sub' $P5135 = 'cuid_81_1347719921.536' 
    capture_lex $P5135
    .const 'Sub' $P5136 = 'cuid_82_1347719921.536' 
    capture_lex $P5136
    .const 'Sub' $P5137 = 'cuid_83_1347719921.536' 
    capture_lex $P5137
    .const 'Sub' $P5138 = 'cuid_84_1347719921.536' 
    capture_lex $P5138
    .const 'Sub' $P5139 = 'cuid_85_1347719921.536' 
    capture_lex $P5139
    .const 'Sub' $P5140 = 'cuid_86_1347719921.536' 
    capture_lex $P5140
    .const 'Sub' $P5141 = 'cuid_87_1347719921.536' 
    capture_lex $P5141
    .const 'Sub' $P5142 = 'cuid_88_1347719921.536' 
    capture_lex $P5142
    .const 'Sub' $P5143 = 'cuid_91_1347719921.536' 
    capture_lex $P5143
    .const 'Sub' $P5144 = 'cuid_92_1347719921.536' 
    capture_lex $P5144
    .const 'Sub' $P5145 = 'cuid_93_1347719921.536' 
    capture_lex $P5145
    .const 'Sub' $P5146 = 'cuid_94_1347719921.536' 
    capture_lex $P5146
    .const 'Sub' $P5147 = 'cuid_95_1347719921.536' 
    capture_lex $P5147
    .const 'Sub' $P5148 = 'cuid_96_1347719921.536' 
    capture_lex $P5148
    .const 'Sub' $P5149 = 'cuid_97_1347719921.536' 
    capture_lex $P5149
    .const 'Sub' $P5150 = 'cuid_98_1347719921.536' 
    capture_lex $P5150
    .const 'Sub' $P5151 = 'cuid_99_1347719921.536' 
    capture_lex $P5151
    .const 'Sub' $P5152 = 'cuid_100_1347719921.536' 
    capture_lex $P5152
    .const 'Sub' $P5153 = 'cuid_101_1347719921.536' 
    capture_lex $P5153
    .const 'Sub' $P5154 = 'cuid_102_1347719921.536' 
    capture_lex $P5154
    .const 'Sub' $P5155 = 'cuid_103_1347719921.536' 
    capture_lex $P5155
    .const 'Sub' $P5156 = 'cuid_104_1347719921.536' 
    capture_lex $P5156
    .const 'Sub' $P5157 = 'cuid_105_1347719921.536' 
    capture_lex $P5157
    .const 'Sub' $P5158 = 'cuid_106_1347719921.536' 
    capture_lex $P5158
    .const 'Sub' $P5159 = 'cuid_107_1347719921.536' 
    capture_lex $P5159
    .const 'Sub' $P5160 = 'cuid_108_1347719921.536' 
    capture_lex $P5160
    .const 'Sub' $P5161 = 'cuid_109_1347719921.536' 
    capture_lex $P5161
    .const 'Sub' $P5162 = 'cuid_110_1347719921.536' 
    capture_lex $P5162
    .const 'Sub' $P5163 = 'cuid_111_1347719921.536' 
    capture_lex $P5163
    .const 'Sub' $P5164 = 'cuid_112_1347719921.536' 
    capture_lex $P5164
    .const 'Sub' $P5165 = 'cuid_113_1347719921.536' 
    capture_lex $P5165
    .const 'Sub' $P5166 = 'cuid_114_1347719921.536' 
    capture_lex $P5166
    .const 'Sub' $P5167 = 'cuid_115_1347719921.536' 
    capture_lex $P5167
    .const 'Sub' $P5168 = 'cuid_116_1347719921.536' 
    capture_lex $P5168
    .const 'Sub' $P5169 = 'cuid_117_1347719921.536' 
    capture_lex $P5169
    .const 'Sub' $P5170 = 'cuid_118_1347719921.536' 
    capture_lex $P5170
    .const 'Sub' $P5171 = 'cuid_119_1347719921.536' 
    capture_lex $P5171
    .const 'Sub' $P5172 = 'cuid_120_1347719921.536' 
    capture_lex $P5172
    .const 'Sub' $P5173 = 'cuid_121_1347719921.536' 
    capture_lex $P5173
    .const 'Sub' $P5174 = 'cuid_122_1347719921.536' 
    capture_lex $P5174
    .const 'Sub' $P5175 = 'cuid_123_1347719921.536' 
    capture_lex $P5175
    .const 'Sub' $P5176 = 'cuid_124_1347719921.536' 
    capture_lex $P5176
    .const 'Sub' $P5177 = 'cuid_125_1347719921.536' 
    capture_lex $P5177
    .const 'Sub' $P5178 = 'cuid_126_1347719921.536' 
    capture_lex $P5178
    .const 'Sub' $P5179 = 'cuid_128_1347719921.536' 
    capture_lex $P5179
    .const 'Sub' $P5180 = 'cuid_129_1347719921.536' 
    capture_lex $P5180
    .const 'Sub' $P5181 = 'cuid_130_1347719921.536' 
    capture_lex $P5181
    .const 'Sub' $P5182 = 'cuid_131_1347719921.536' 
    capture_lex $P5182
    .const 'Sub' $P5183 = 'cuid_132_1347719921.536' 
    capture_lex $P5183
    .const 'Sub' $P5184 = 'cuid_133_1347719921.536' 
    capture_lex $P5184
    .const 'Sub' $P5185 = 'cuid_134_1347719921.536' 
    capture_lex $P5185
    .const 'Sub' $P5186 = 'cuid_135_1347719921.536' 
    capture_lex $P5186
    .const 'Sub' $P5187 = 'cuid_136_1347719921.536' 
    capture_lex $P5187
    .const 'Sub' $P5188 = 'cuid_137_1347719921.536' 
    capture_lex $P5188
    .const 'Sub' $P5189 = 'cuid_138_1347719921.536' 
    capture_lex $P5189
    .const 'Sub' $P5190 = 'cuid_139_1347719921.536' 
    capture_lex $P5190
    .const 'Sub' $P5191 = 'cuid_140_1347719921.536' 
    capture_lex $P5191
    .const 'Sub' $P5192 = 'cuid_141_1347719921.536' 
    capture_lex $P5192
    .const 'Sub' $P5193 = 'cuid_142_1347719921.536' 
    capture_lex $P5193
    .const 'Sub' $P5194 = 'cuid_143_1347719921.536' 
    capture_lex $P5194
    .const 'Sub' $P5195 = 'cuid_144_1347719921.536' 
    capture_lex $P5195
    .const 'Sub' $P5196 = 'cuid_145_1347719921.536' 
    capture_lex $P5196
    .const 'Sub' $P5197 = 'cuid_146_1347719921.536' 
    capture_lex $P5197
    .const 'Sub' $P5198 = 'cuid_147_1347719921.536' 
    capture_lex $P5198
    .const 'Sub' $P5199 = 'cuid_148_1347719921.536' 
    capture_lex $P5199
    .const 'Sub' $P5200 = 'cuid_149_1347719921.536' 
    capture_lex $P5200
    .const 'Sub' $P5201 = 'cuid_150_1347719921.536' 
    capture_lex $P5201
    .const 'Sub' $P5202 = 'cuid_151_1347719921.536' 
    capture_lex $P5202
    .const 'Sub' $P5203 = 'cuid_152_1347719921.536' 
    capture_lex $P5203
    .const 'Sub' $P5204 = 'cuid_153_1347719921.536' 
    capture_lex $P5204
    .const 'Sub' $P5205 = 'cuid_154_1347719921.536' 
    capture_lex $P5205
    .const 'Sub' $P5206 = 'cuid_155_1347719921.536' 
    capture_lex $P5206
    .const 'Sub' $P5207 = 'cuid_156_1347719921.536' 
    capture_lex $P5207
    .const 'Sub' $P5208 = 'cuid_157_1347719921.536' 
    capture_lex $P5208
    .const 'Sub' $P5209 = 'cuid_158_1347719921.536' 
    capture_lex $P5209
    .const 'Sub' $P5210 = 'cuid_159_1347719921.536' 
    capture_lex $P5210
    .const 'Sub' $P5211 = 'cuid_160_1347719921.536' 
    capture_lex $P5211
    .const 'Sub' $P5212 = 'cuid_161_1347719921.536' 
    capture_lex $P5212
    .const 'Sub' $P5213 = 'cuid_162_1347719921.536' 
    capture_lex $P5213
    .const 'Sub' $P5214 = 'cuid_163_1347719921.536' 
    capture_lex $P5214
    .const 'Sub' $P5215 = 'cuid_164_1347719921.536' 
    capture_lex $P5215
    .const 'Sub' $P5216 = 'cuid_165_1347719921.536' 
    capture_lex $P5216
    .const 'Sub' $P5217 = 'cuid_166_1347719921.536' 
    capture_lex $P5217
    .const 'Sub' $P5218 = 'cuid_167_1347719921.536' 
    capture_lex $P5218
    .const 'Sub' $P5219 = 'cuid_168_1347719921.536' 
    capture_lex $P5219
    .const 'Sub' $P5220 = 'cuid_169_1347719921.536' 
    capture_lex $P5220
    .const 'Sub' $P5221 = 'cuid_170_1347719921.536' 
    capture_lex $P5221
    .const 'Sub' $P5222 = 'cuid_171_1347719921.536' 
    capture_lex $P5222
    .const 'Sub' $P5223 = 'cuid_172_1347719921.536' 
    capture_lex $P5223
    .const 'Sub' $P5224 = 'cuid_173_1347719921.536' 
    capture_lex $P5224
    .const 'Sub' $P5225 = 'cuid_174_1347719921.536' 
    capture_lex $P5225
    .const 'Sub' $P5226 = 'cuid_175_1347719921.536' 
    capture_lex $P5226
    .const 'Sub' $P5227 = 'cuid_176_1347719921.536' 
    capture_lex $P5227
    .const 'Sub' $P5228 = 'cuid_177_1347719921.536' 
    capture_lex $P5228
    .const 'Sub' $P5229 = 'cuid_178_1347719921.536' 
    capture_lex $P5229
    .const 'Sub' $P5230 = 'cuid_179_1347719921.536' 
    capture_lex $P5230
    .const 'Sub' $P5231 = 'cuid_180_1347719921.536' 
    capture_lex $P5231
    .const 'Sub' $P5232 = 'cuid_181_1347719921.536' 
    capture_lex $P5232
    .const 'Sub' $P5233 = 'cuid_182_1347719921.536' 
    capture_lex $P5233
    .const 'Sub' $P5234 = 'cuid_183_1347719921.536' 
    capture_lex $P5234
    .const 'Sub' $P5235 = 'cuid_184_1347719921.536' 
    capture_lex $P5235
    .const 'Sub' $P5236 = 'cuid_185_1347719921.536' 
    capture_lex $P5236
    .const 'Sub' $P5237 = 'cuid_186_1347719921.536' 
    capture_lex $P5237
    .const 'Sub' $P5238 = 'cuid_187_1347719921.536' 
    capture_lex $P5238
    .const 'Sub' $P5239 = 'cuid_188_1347719921.536' 
    capture_lex $P5239
    .const 'Sub' $P5240 = 'cuid_189_1347719921.536' 
    capture_lex $P5240
    .const 'Sub' $P5241 = 'cuid_190_1347719921.536' 
    capture_lex $P5241
    .const 'Sub' $P5242 = 'cuid_191_1347719921.536' 
    capture_lex $P5242
    .const 'Sub' $P5243 = 'cuid_192_1347719921.536' 
    capture_lex $P5243
    .const 'Sub' $P5244 = 'cuid_193_1347719921.536' 
    capture_lex $P5244
    .const 'Sub' $P5245 = 'cuid_194_1347719921.536' 
    capture_lex $P5245
    .const 'Sub' $P5246 = 'cuid_195_1347719921.536' 
    capture_lex $P5246
    .const 'Sub' $P5247 = 'cuid_196_1347719921.536' 
    capture_lex $P5247
    .const 'Sub' $P5248 = 'cuid_197_1347719921.536' 
    capture_lex $P5248
    .const 'Sub' $P5249 = 'cuid_198_1347719921.536' 
    capture_lex $P5249
    .const 'Sub' $P5250 = 'cuid_199_1347719921.536' 
    capture_lex $P5250
    .const 'Sub' $P5251 = 'cuid_200_1347719921.536' 
    capture_lex $P5251
    .const 'Sub' $P5252 = 'cuid_201_1347719921.536' 
    capture_lex $P5252
    .const 'Sub' $P5253 = 'cuid_202_1347719921.536' 
    capture_lex $P5253
    .const 'Sub' $P5254 = 'cuid_203_1347719921.536' 
    capture_lex $P5254
    .const 'Sub' $P5255 = 'cuid_204_1347719921.536' 
    capture_lex $P5255
    .const 'Sub' $P5256 = 'cuid_205_1347719921.536' 
    capture_lex $P5256
    .const 'Sub' $P5257 = 'cuid_206_1347719921.536' 
    capture_lex $P5257
    .const 'Sub' $P5258 = 'cuid_207_1347719921.536' 
    capture_lex $P5258
    .const 'Sub' $P5259 = 'cuid_208_1347719921.536' 
    capture_lex $P5259
    .const 'Sub' $P5260 = 'cuid_209_1347719921.536' 
    capture_lex $P5260
    .const 'Sub' $P5261 = 'cuid_210_1347719921.536' 
    capture_lex $P5261
    .const 'Sub' $P5262 = 'cuid_211_1347719921.536' 
    capture_lex $P5262
    .const 'Sub' $P5263 = 'cuid_212_1347719921.536' 
    capture_lex $P5263
    .const 'Sub' $P5264 = 'cuid_213_1347719921.536' 
    capture_lex $P5264
    .const 'Sub' $P5265 = 'cuid_214_1347719921.536' 
    capture_lex $P5265
    .const 'Sub' $P5266 = 'cuid_215_1347719921.536' 
    capture_lex $P5266
    .const 'Sub' $P5267 = 'cuid_216_1347719921.536' 
    capture_lex $P5267
    .const 'Sub' $P5268 = 'cuid_217_1347719921.536' 
    capture_lex $P5268
    .const 'Sub' $P5269 = 'cuid_218_1347719921.536' 
    capture_lex $P5269
    .const 'Sub' $P5270 = 'cuid_219_1347719921.536' 
    capture_lex $P5270
    .const 'Sub' $P5271 = 'cuid_220_1347719921.536' 
    capture_lex $P5271
    .const 'Sub' $P5272 = 'cuid_221_1347719921.536' 
    capture_lex $P5272
    .const 'Sub' $P5273 = 'cuid_222_1347719921.536' 
    capture_lex $P5273
    .return ($P5273) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_33_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 587
    .param pmc _lex_param_0 
    .lex "%*LANG", $P101 
    .lex "%*HOW", $P102 
    .lex "$file", $P103 
    .lex "$source_id", $P104 
    .lex "$*W", $P105 
    .lex "$*SCOPE", $P106 
    .lex "$*MULTINESS", $P107 
    .lex "$*PKGDECL", $P108 
    .lex "$*INVOCANT_OK", $P109 
    .lex "$*RETURN_USED", $P110 
    .lex "$*CONTROL_USED", $P111 
    .lex "%*HANDLERS", $P112 
    .lex "self", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P105, $P5005
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P106, $P5006
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P107, $P5007
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P108, $P5008
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P109, $P5009
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P110, $P5010
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P111, $P5011
    new $P5012, 'Hash'
    set $P112, $P5012
    unless_null $P101, fallback287
    get_hll_global $P5015, "GLOBAL"
    get_who $P5014, $P5015
    set $P5013, $P5014["%LANG"]
    unless_null $P5013, fallback288
    get_hll_global $P5017, "GLOBAL"
    get_who $P5016, $P5017
    new $P5018, 'Hash'
    set $P5016["%LANG"], $P5018
    set $P5013, $P5018
  fallback288:
    unless_null $P5013, vivi_57289
    die "Contextual %*LANG not found"
    box $P5019, "Contextual %*LANG not found"
    set $P5013, $P5019
  vivi_57289:
    set $P101, $P5013
  fallback287:
    unless_null $P101, fallback290
    get_hll_global $P5022, "GLOBAL"
    get_who $P5021, $P5022
    set $P5020, $P5021["%LANG"]
    unless_null $P5020, fallback291
    get_hll_global $P5024, "GLOBAL"
    get_who $P5023, $P5024
    new $P5025, 'Hash'
    set $P5023["%LANG"], $P5025
    set $P5020, $P5025
  fallback291:
    unless_null $P5020, vivi_58292
    die "Contextual %*LANG not found"
    box $P5026, "Contextual %*LANG not found"
    set $P5020, $P5026
  vivi_58292:
    set $P101, $P5020
  fallback290:
    get_hll_global $P5030, "GLOBAL"
    nqp_get_package_through_who $P5029, $P5030, "NQP"
    get_who $P5028, $P5029
    set $P5027, $P5028["Regex"]
    unless_null $P5027, fallback293
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5027, $P5031
  fallback293:
    set $P101["Regex"], $P5027
    unless_null $P101, fallback294
    get_hll_global $P5034, "GLOBAL"
    get_who $P5033, $P5034
    set $P5032, $P5033["%LANG"]
    unless_null $P5032, fallback295
    get_hll_global $P5036, "GLOBAL"
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%LANG"], $P5037
    set $P5032, $P5037
  fallback295:
    unless_null $P5032, vivi_59296
    die "Contextual %*LANG not found"
    box $P5038, "Contextual %*LANG not found"
    set $P5032, $P5038
  vivi_59296:
    set $P101, $P5032
  fallback294:
    get_hll_global $P5042, "GLOBAL"
    nqp_get_package_through_who $P5041, $P5042, "NQP"
    get_who $P5040, $P5041
    set $P5039, $P5040["RegexActions"]
    unless_null $P5039, fallback297
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5039, $P5043
  fallback297:
    set $P101["Regex-actions"], $P5039
    unless_null $P101, fallback298
    get_hll_global $P5046, "GLOBAL"
    get_who $P5045, $P5046
    set $P5044, $P5045["%LANG"]
    unless_null $P5044, fallback299
    get_hll_global $P5048, "GLOBAL"
    get_who $P5047, $P5048
    new $P5049, 'Hash'
    set $P5047["%LANG"], $P5049
    set $P5044, $P5049
  fallback299:
    unless_null $P5044, vivi_60300
    die "Contextual %*LANG not found"
    box $P5050, "Contextual %*LANG not found"
    set $P5044, $P5050
  vivi_60300:
    set $P101, $P5044
  fallback298:
    get_hll_global $P5054, "GLOBAL"
    nqp_get_package_through_who $P5053, $P5054, "NQP"
    get_who $P5052, $P5053
    set $P5051, $P5052["Grammar"]
    unless_null $P5051, fallback301
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5051, $P5055
  fallback301:
    set $P101["MAIN"], $P5051
    unless_null $P101, fallback302
    get_hll_global $P5058, "GLOBAL"
    get_who $P5057, $P5058
    set $P5056, $P5057["%LANG"]
    unless_null $P5056, fallback303
    get_hll_global $P5060, "GLOBAL"
    get_who $P5059, $P5060
    new $P5061, 'Hash'
    set $P5059["%LANG"], $P5061
    set $P5056, $P5061
  fallback303:
    unless_null $P5056, vivi_61304
    die "Contextual %*LANG not found"
    box $P5062, "Contextual %*LANG not found"
    set $P5056, $P5062
  vivi_61304:
    set $P101, $P5056
  fallback302:
    get_hll_global $P5066, "GLOBAL"
    nqp_get_package_through_who $P5065, $P5066, "NQP"
    get_who $P5064, $P5065
    set $P5063, $P5064["Actions"]
    unless_null $P5063, fallback305
    nqp_get_sc_object $P5067, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5063, $P5067
  fallback305:
    set $P101["MAIN-actions"], $P5063
    unless_null $P102, fallback306
    get_hll_global $P5070, "GLOBAL"
    get_who $P5069, $P5070
    set $P5068, $P5069["%HOW"]
    unless_null $P5068, fallback307
    get_hll_global $P5072, "GLOBAL"
    get_who $P5071, $P5072
    new $P5073, 'Hash'
    set $P5071["%HOW"], $P5073
    set $P5068, $P5073
  fallback307:
    unless_null $P5068, vivi_62308
    die "Contextual %*HOW not found"
    box $P5074, "Contextual %*HOW not found"
    set $P5068, $P5074
  vivi_62308:
    set $P102, $P5068
  fallback306:
    unless_null $P102, fallback309
    get_hll_global $P5077, "GLOBAL"
    get_who $P5076, $P5077
    set $P5075, $P5076["%HOW"]
    unless_null $P5075, fallback310
    get_hll_global $P5079, "GLOBAL"
    get_who $P5078, $P5079
    new $P5080, 'Hash'
    set $P5078["%HOW"], $P5080
    set $P5075, $P5080
  fallback310:
    unless_null $P5075, vivi_63311
    die "Contextual %*HOW not found"
    box $P5081, "Contextual %*HOW not found"
    set $P5075, $P5081
  vivi_63311:
    set $P102, $P5075
  fallback309:
    get_knowhow $P5082
    set $P102["knowhow"], $P5082
    unless_null $P102, fallback312
    get_hll_global $P5085, "GLOBAL"
    get_who $P5084, $P5085
    set $P5083, $P5084["%HOW"]
    unless_null $P5083, fallback313
    get_hll_global $P5087, "GLOBAL"
    get_who $P5086, $P5087
    new $P5088, 'Hash'
    set $P5086["%HOW"], $P5088
    set $P5083, $P5088
  fallback313:
    unless_null $P5083, vivi_64314
    die "Contextual %*HOW not found"
    box $P5089, "Contextual %*HOW not found"
    set $P5083, $P5089
  vivi_64314:
    set $P102, $P5083
  fallback312:
    get_knowhow_attribute $P5090
    set $P102["knowhow-attr"], $P5090
    find_caller_lex $P5091, "$?FILES"
    set $P103, $P5091
    nqp_decontainerize $P5092, _lex_param_0
    find_lex $P5095, "$?PACKAGE"
    get_who $P5094, $P5095
    set $P5093, $P5094["NQPCursor"]
    unless_null $P5093, fallback315
    get_hll_global $P5098, "GLOBAL"
    get_who $P5097, $P5098
    set $P5096, $P5097["NQPCursor"]
    unless_null $P5096, vivi_65316
    nqp_get_sc_object $P5099, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5096, $P5099
  vivi_65316:
    set $P5093, $P5096
  fallback315:
    repr_get_attr_str $S5004, $P5092, $P5093, "$!target"
    nqp_sha1 $S5003, $S5004
    concat $S5002, $S5003, "-"
    time $N5001
    set $S5005, $N5001
    concat $S5001, $S5002, $S5005
    box $P5100, $S5001
    set $P104, $P5100
    isnull $I5001, $P103
    unless $I5001 goto if66_else317 
.annotate 'line', 609
    get_hll_global $P5104, "GLOBAL"
    nqp_get_package_through_who $P5103, $P5104, "NQP"
    get_who $P5102, $P5103
    set $P5101, $P5102["World"]
    unless_null $P5101, fallback319
    nqp_get_sc_object $P5105, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5101, $P5105
  fallback319:
    $P5106 = $P5101."new"($P104 :named("handle"))
    set $P5113, $P5106
    goto if66_end318
  if66_else317:
.annotate 'line', 610
    get_hll_global $P5110, "GLOBAL"
    nqp_get_package_through_who $P5109, $P5110, "NQP"
    get_who $P5108, $P5109
    set $P5107, $P5108["World"]
    unless_null $P5107, fallback320
    nqp_get_sc_object $P5111, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5107, $P5111
  fallback320:
    $P5112 = $P5107."new"($P104 :named("handle"), $P103 :named("description"))
    set $P5113, $P5112
  if66_end318:
    set $P105, $P5113
    box $P5114, ""
    set $P106, $P5114
    box $P5115, ""
    set $P107, $P5115
    box $P5116, ""
    set $P108, $P5116
    box $P5117, 0
    set $P109, $P5117
    box $P5118, 0
    set $P110, $P5118
    box $P5119, 0
    set $P111, $P5119
    unless_null $P112, fallback321
    get_hll_global $P5122, "GLOBAL"
    get_who $P5121, $P5122
    set $P5120, $P5121["%HANDLERS"]
    unless_null $P5120, fallback322
    get_hll_global $P5124, "GLOBAL"
    get_who $P5123, $P5124
    new $P5125, 'Hash'
    set $P5123["%HANDLERS"], $P5125
    set $P5120, $P5125
  fallback322:
    unless_null $P5120, vivi_67323
    die "Contextual %*HANDLERS not found"
    box $P5126, "Contextual %*HANDLERS not found"
    set $P5120, $P5126
  vivi_67323:
    set $P112, $P5120
  fallback321:
.annotate 'line', 619
    nqp_decontainerize $P5127, _lex_param_0
    $P5128 = $P5127."comp_unit"()
    .return ($P5128) 
.end
.HLL "nqp"
.namespace []
.sub "identifier" :subid("cuid_34_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 624
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx68_tgt
    .local int rx68_pos
    .local int rx68_off
    .local int rx68_eos
    .local int rx68_rep
    .local pmc rx68_cur
    .local pmc rx68_curclass
    .local pmc rx68_bstack
    .local pmc rx68_cstack
    (rx68_cur, rx68_tgt, rx68_pos, rx68_curclass, rx68_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx68_cur
    length rx68_eos, rx68_tgt
    eq $I19, 1, rx68_restart326
    gt rx68_pos, rx68_eos, rx68_fail327
    repr_get_attr_int $I11, self, rx68_curclass, "$!from"
    ne $I11, -1, rxscan69_done333
    goto rxscan69_scan332
  rxscan69_loop331:
    inc rx68_pos
    gt rx68_pos, rx68_eos, rx68_fail327
    repr_bind_attr_int rx68_cur, rx68_curclass, "$!from", rx68_pos
  rxscan69_scan332:
    nqp_rxmark rx68_bstack, rxscan69_loop331, rx68_pos, 0
  rxscan69_done333:
    repr_bind_attr_int rx68_cur, rx68_curclass, "$!pos", rx68_pos
    $P11 = rx68_cur."ident"()
    repr_get_attr_int $I11, $P11, rx68_curclass, "$!pos"
    lt $I11, 0, rx68_fail327
    repr_get_attr_int rx68_pos, $P11, rx68_curclass, "$!pos"
    nqp_rxmark rx68_bstack, rxquantr71_done336, rx68_pos, 0
  rxquantr71_loop335:
  alt72_0338:
    nqp_rxmark rx68_bstack, alt72_1339, rx68_pos, 0
    add $I11, rx68_pos, 1
    gt $I11, rx68_eos, rx68_fail327
    substr $S10, rx68_tgt, rx68_pos, 1
    ne $S10, ucs4:"-", rx68_fail327
    add rx68_pos, 1
    goto alt72_end337
  alt72_1339:
    ge rx68_pos, rx68_eos, rx68_fail327
    substr $S11, rx68_tgt, rx68_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx68_fail327
    inc rx68_pos
  alt72_end337:
    repr_bind_attr_int rx68_cur, rx68_curclass, "$!pos", rx68_pos
    $P11 = rx68_cur."ident"()
    repr_get_attr_int $I11, $P11, rx68_curclass, "$!pos"
    lt $I11, 0, rx68_fail327
    repr_get_attr_int rx68_pos, $P11, rx68_curclass, "$!pos"
    nqp_rxpeek $I19, rx68_bstack, rxquantr71_done336
    inc $I19
    inc $I19
    set rx68_rep, rx68_bstack[$I19]
    nqp_rxcommit rx68_bstack, rxquantr71_done336
    inc rx68_rep
    nqp_rxmark rx68_bstack, rxquantr71_done336, rx68_pos, rx68_rep
    goto rxquantr71_loop335
  rxquantr71_done336:
    rx68_cur."!cursor_pass"(rx68_pos, "identifier", 'backtrack'=>1)
    .return (rx68_cur)
  rx68_restart326:
    repr_get_attr_obj rx68_cstack, rx68_cur, rx68_curclass, "$!cstack"
  rx68_fail327:
    unless rx68_bstack, rx68_done325
    pop $I19, rx68_bstack
    if_null rx68_cstack, rx68_cstack_done330
    unless rx68_cstack, rx68_cstack_done330
    dec $I19
    set $P11, rx68_cstack[$I19]
  rx68_cstack_done330:
    pop rx68_rep, rx68_bstack
    pop rx68_pos, rx68_bstack
    pop $I19, rx68_bstack
    lt rx68_pos, -1, rx68_done325
    lt rx68_pos, 0, rx68_fail327
    eq $I19, 0, rx68_fail327
    nqp_islist $I20, rx68_cstack
    unless $I20, rx68_jump328
    elements $I18, rx68_bstack
    le $I18, 0, rx68_cut329
    dec $I18
    set $I18, rx68_bstack[$I18]
  rx68_cut329:
    assign rx68_cstack, $I18
  rx68_jump328:
    jump $I19
  rx68_done325:
    rx68_cur."!cursor_fail"()
    .return (rx68_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_34_1347719921.536_caps" :subid("cuid_memo_1_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_34_1347719921.536_nfa" :subid("cuid_memo_2_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "ident"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "name" :subid("cuid_35_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 626
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx74_tgt
    .local int rx74_pos
    .local int rx74_off
    .local int rx74_eos
    .local int rx74_rep
    .local pmc rx74_cur
    .local pmc rx74_curclass
    .local pmc rx74_bstack
    .local pmc rx74_cstack
    (rx74_cur, rx74_tgt, rx74_pos, rx74_curclass, rx74_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx74_cur
    length rx74_eos, rx74_tgt
    eq $I19, 1, rx74_restart343
    gt rx74_pos, rx74_eos, rx74_fail344
    repr_get_attr_int $I11, self, rx74_curclass, "$!from"
    ne $I11, -1, rxscan75_done350
    goto rxscan75_scan349
  rxscan75_loop348:
    inc rx74_pos
    gt rx74_pos, rx74_eos, rx74_fail344
    repr_bind_attr_int rx74_cur, rx74_curclass, "$!from", rx74_pos
  rxscan75_scan349:
    nqp_rxmark rx74_bstack, rxscan75_loop348, rx74_pos, 0
  rxscan75_done350:
    repr_bind_attr_int rx74_cur, rx74_curclass, "$!pos", rx74_pos
    $P11 = rx74_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx74_curclass, "$!pos"
    lt $I11, 0, rx74_fail344
    nqp_rxmark rx74_bstack, rxsubrule76_pass351, -1, 0
  rxsubrule76_pass351:
    rx74_cstack = rx74_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx74_pos, $P11, rx74_curclass, "$!pos"
    nqp_rxmark rx74_bstack, rxquantr77_done353, rx74_pos, 0
  rxquantr77_loop352:
    add $I11, rx74_pos, 2
    gt $I11, rx74_eos, rx74_fail344
    substr $S10, rx74_tgt, rx74_pos, 2
    ne $S10, ucs4:"::", rx74_fail344
    add rx74_pos, 2
    repr_bind_attr_int rx74_cur, rx74_curclass, "$!pos", rx74_pos
    $P11 = rx74_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx74_curclass, "$!pos"
    lt $I11, 0, rx74_fail344
    nqp_rxmark rx74_bstack, rxsubrule78_pass354, -1, 0
  rxsubrule78_pass354:
    rx74_cstack = rx74_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx74_pos, $P11, rx74_curclass, "$!pos"
    nqp_rxpeek $I19, rx74_bstack, rxquantr77_done353
    inc $I19
    inc $I19
    set rx74_rep, rx74_bstack[$I19]
    nqp_rxcommit rx74_bstack, rxquantr77_done353
    inc rx74_rep
    nqp_rxmark rx74_bstack, rxquantr77_done353, rx74_pos, rx74_rep
    goto rxquantr77_loop352
  rxquantr77_done353:
    rx74_cur."!cursor_pass"(rx74_pos, "name", 'backtrack'=>1)
    .return (rx74_cur)
  rx74_restart343:
    repr_get_attr_obj rx74_cstack, rx74_cur, rx74_curclass, "$!cstack"
  rx74_fail344:
    unless rx74_bstack, rx74_done342
    pop $I19, rx74_bstack
    if_null rx74_cstack, rx74_cstack_done347
    unless rx74_cstack, rx74_cstack_done347
    dec $I19
    set $P11, rx74_cstack[$I19]
  rx74_cstack_done347:
    pop rx74_rep, rx74_bstack
    pop rx74_pos, rx74_bstack
    pop $I19, rx74_bstack
    lt rx74_pos, -1, rx74_done342
    lt rx74_pos, 0, rx74_fail344
    eq $I19, 0, rx74_fail344
    nqp_islist $I20, rx74_cstack
    unless $I20, rx74_jump345
    elements $I18, rx74_bstack
    le $I18, 0, rx74_cut346
    dec $I18
    set $I18, rx74_bstack[$I18]
  rx74_cut346:
    assign rx74_cstack, $I18
  rx74_jump345:
    jump $I19
  rx74_done342:
    rx74_cur."!cursor_fail"()
    .return (rx74_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_35_1347719921.536_caps" :subid("cuid_memo_3_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["identifier"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_35_1347719921.536_nfa" :subid("cuid_memo_4_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "identifier"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 58
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 58
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 8
    push $P5018, $P5019
    box $P5020, "identifier"
    push $P5018, $P5020
    box $P5021, 2
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_36_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 628
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx79_tgt
    .local int rx79_pos
    .local int rx79_off
    .local int rx79_eos
    .local int rx79_rep
    .local pmc rx79_cur
    .local pmc rx79_curclass
    .local pmc rx79_bstack
    .local pmc rx79_cstack
    (rx79_cur, rx79_tgt, rx79_pos, rx79_curclass, rx79_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx79_cur
    length rx79_eos, rx79_tgt
    eq $I19, 1, rx79_restart357
    gt rx79_pos, rx79_eos, rx79_fail358
    repr_get_attr_int $I11, self, rx79_curclass, "$!from"
    ne $I11, -1, rxscan80_done364
    goto rxscan80_scan363
  rxscan80_loop362:
    inc rx79_pos
    gt rx79_pos, rx79_eos, rx79_fail358
    repr_bind_attr_int rx79_cur, rx79_curclass, "$!from", rx79_pos
  rxscan80_scan363:
    nqp_rxmark rx79_bstack, rxscan80_loop362, rx79_pos, 0
  rxscan80_done364:
    repr_bind_attr_int rx79_cur, rx79_curclass, "$!pos", rx79_pos
    $P11 = rx79_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx79_curclass, "$!pos"
    lt $I11, 0, rx79_fail358
    nqp_rxmark rx79_bstack, rxsubrule81_pass365, -1, 0
  rxsubrule81_pass365:
    rx79_cstack = rx79_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx79_pos, $P11, rx79_curclass, "$!pos"
    nqp_rxmark rx79_bstack, rxquantr82_done367, rx79_pos, 0
  rxquantr82_loop366:
    repr_bind_attr_int rx79_cur, rx79_curclass, "$!pos", rx79_pos
    $P11 = rx79_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx79_curclass, "$!pos"
    lt $I11, 0, rx79_fail358
    goto rxsubrule83_pass368
  rxsubrule83_back369:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx79_curclass, "$!pos"
    lt $I11, 0, rx79_fail358
  rxsubrule83_pass368:
    rx79_cstack = rx79_cur."!cursor_capture"($P11, "colonpair")
    set_addr $I11, rxsubrule83_back369
    push rx79_bstack, $I11
    push rx79_bstack, 0
    push rx79_bstack, rx79_pos
    elements $I11, rx79_cstack
    push rx79_bstack, $I11
    repr_get_attr_int rx79_pos, $P11, rx79_curclass, "$!pos"
    nqp_rxpeek $I19, rx79_bstack, rxquantr82_done367
    inc $I19
    inc $I19
    set rx79_rep, rx79_bstack[$I19]
    nqp_rxcommit rx79_bstack, rxquantr82_done367
    inc rx79_rep
  rxquantr82_done367:
    rx79_cur."!cursor_pass"(rx79_pos, "deflongname", 'backtrack'=>1)
    .return (rx79_cur)
  rx79_restart357:
    repr_get_attr_obj rx79_cstack, rx79_cur, rx79_curclass, "$!cstack"
  rx79_fail358:
    unless rx79_bstack, rx79_done356
    pop $I19, rx79_bstack
    if_null rx79_cstack, rx79_cstack_done361
    unless rx79_cstack, rx79_cstack_done361
    dec $I19
    set $P11, rx79_cstack[$I19]
  rx79_cstack_done361:
    pop rx79_rep, rx79_bstack
    pop rx79_pos, rx79_bstack
    pop $I19, rx79_bstack
    lt rx79_pos, -1, rx79_done356
    lt rx79_pos, 0, rx79_fail358
    eq $I19, 0, rx79_fail358
    nqp_islist $I20, rx79_cstack
    unless $I20, rx79_jump359
    elements $I18, rx79_bstack
    le $I18, 0, rx79_cut360
    dec $I18
    set $I18, rx79_bstack[$I18]
  rx79_cut360:
    assign rx79_cstack, $I18
  rx79_jump359:
    jump $I19
  rx79_done356:
    rx79_cur."!cursor_fail"()
    .return (rx79_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_36_1347719921.536_caps" :subid("cuid_memo_5_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["identifier"], $P5002
    box $P5003, 2
    set $P5001["colonpair"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_36_1347719921.536_nfa" :subid("cuid_memo_6_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "identifier"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "colonpair"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "ENDSTMT" :subid("cuid_37_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 632
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx84_tgt
    .local int rx84_pos
    .local int rx84_off
    .local int rx84_eos
    .local int rx84_rep
    .local pmc rx84_cur
    .local pmc rx84_curclass
    .local pmc rx84_bstack
    .local pmc rx84_cstack
    (rx84_cur, rx84_tgt, rx84_pos, rx84_curclass, rx84_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx84_cur
    length rx84_eos, rx84_tgt
    eq $I19, 1, rx84_restart372
    gt rx84_pos, rx84_eos, rx84_fail373
    repr_get_attr_int $I11, self, rx84_curclass, "$!from"
    ne $I11, -1, rxscan85_done379
    goto rxscan85_scan378
  rxscan85_loop377:
    inc rx84_pos
    gt rx84_pos, rx84_eos, rx84_fail373
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!from", rx84_pos
  rxscan85_scan378:
    nqp_rxmark rx84_bstack, rxscan85_loop377, rx84_pos, 0
  rxscan85_done379:
    nqp_rxmark rx84_bstack, rxquantr86_done381, rx84_pos, 0
  rxquantr86_loop380:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt87_0383
    nqp_push_label $P11, alt87_1388
    nqp_rxmark rx84_bstack, alt87_end382, -1, 0
    rx84_cur."!alt"(rx84_pos, "alt_nfa__1_1347719922.72", $P11)
    goto rx84_fail373
  alt87_0383:
    nqp_rxmark rx84_bstack, rxquantr88_done385, rx84_pos, 0
  rxquantr88_loop384:
    ge rx84_pos, rx84_eos, rx84_fail373
    substr $S11, rx84_tgt, rx84_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx84_fail373
    inc rx84_pos
    nqp_rxpeek $I19, rx84_bstack, rxquantr88_done385
    inc $I19
    inc $I19
    set rx84_rep, rx84_bstack[$I19]
    nqp_rxcommit rx84_bstack, rxquantr88_done385
    inc rx84_rep
    nqp_rxmark rx84_bstack, rxquantr88_done385, rx84_pos, rx84_rep
    goto rxquantr88_loop384
  rxquantr88_done385:
    is_cclass $I11, .CCLASS_NEWLINE, rx84_tgt, rx84_pos
    if $I11, rxanchor89_done386
    ne rx84_pos, rx84_eos, rx84_fail373
    eq rx84_pos, 0, rxanchor89_done386
    sub $I11, rx84_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx84_tgt, $I11
    if $I11, rx84_fail373
  rxanchor89_done386:
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."ws"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail373
    repr_get_attr_int rx84_pos, $P11, rx84_curclass, "$!pos"
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail373
    goto alt87_end382
  alt87_1388:
    nqp_rxmark rx84_bstack, rxquantr91_done390, rx84_pos, 0
  rxquantr91_loop389:
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."unv"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail373
    goto rxsubrule92_pass391
  rxsubrule92_back392:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail373
  rxsubrule92_pass391:
    rx84_cstack = rx84_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule92_back392
    push rx84_bstack, $I11
    push rx84_bstack, 0
    push rx84_bstack, rx84_pos
    elements $I11, rx84_cstack
    push rx84_bstack, $I11
    repr_get_attr_int rx84_pos, $P11, rx84_curclass, "$!pos"
    nqp_rxpeek $I19, rx84_bstack, rxquantr91_done390
    inc $I19
    inc $I19
    set rx84_rep, rx84_bstack[$I19]
    nqp_rxcommit rx84_bstack, rxquantr91_done390
    inc rx84_rep
  rxquantr91_done390:
    is_cclass $I11, .CCLASS_NEWLINE, rx84_tgt, rx84_pos
    if $I11, rxanchor93_done393
    ne rx84_pos, rx84_eos, rx84_fail373
    eq rx84_pos, 0, rxanchor93_done393
    sub $I11, rx84_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx84_tgt, $I11
    if $I11, rx84_fail373
  rxanchor93_done393:
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."ws"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail373
    repr_get_attr_int rx84_pos, $P11, rx84_curclass, "$!pos"
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail373
    goto alt87_end382
  alt87_end382:
    nqp_rxpeek $I19, rx84_bstack, rxquantr86_done381
    inc $I19
    inc $I19
    set rx84_rep, rx84_bstack[$I19]
    nqp_rxcommit rx84_bstack, rxquantr86_done381
    inc rx84_rep
  rxquantr86_done381:
    rx84_cur."!cursor_pass"(rx84_pos, "ENDSTMT", 'backtrack'=>1)
    .return (rx84_cur)
  rx84_restart372:
    repr_get_attr_obj rx84_cstack, rx84_cur, rx84_curclass, "$!cstack"
  rx84_fail373:
    unless rx84_bstack, rx84_done371
    pop $I19, rx84_bstack
    if_null rx84_cstack, rx84_cstack_done376
    unless rx84_cstack, rx84_cstack_done376
    dec $I19
    set $P11, rx84_cstack[$I19]
  rx84_cstack_done376:
    pop rx84_rep, rx84_bstack
    pop rx84_pos, rx84_bstack
    pop $I19, rx84_bstack
    lt rx84_pos, -1, rx84_done371
    lt rx84_pos, 0, rx84_fail373
    eq $I19, 0, rx84_fail373
    nqp_islist $I20, rx84_cstack
    unless $I20, rx84_jump374
    elements $I18, rx84_bstack
    le $I18, 0, rx84_cut375
    dec $I18
    set $I18, rx84_bstack[$I18]
  rx84_cut375:
    assign rx84_cstack, $I18
  rx84_jump374:
    jump $I19
  rx84_done371:
    rx84_cur."!cursor_fail"()
    .return (rx84_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_37_1347719921.536_caps" :subid("cuid_memo_7_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_37_1347719921.536_nfa" :subid("cuid_memo_8_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5003, $P5005
    box $P5006, 1
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    box $P5010, 8
    push $P5003, $P5010
    box $P5011, "unv"
    push $P5003, $P5011
    box $P5012, 6
    push $P5003, $P5012
    box $P5013, 1
    push $P5003, $P5013
    box $P5014, 0
    push $P5003, $P5014
    box $P5015, 6
    push $P5003, $P5015
    box $P5016, 1
    push $P5003, $P5016
    box $P5017, 0
    push $P5003, $P5017
    box $P5018, 0
    push $P5003, $P5018
    push $P5001, $P5003
    new $P5019, 'ResizablePMCArray'
    box $P5020, 1
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 3
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "ws"
    push $P5023, $P5025
    box $P5026, 4
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "MARKER"
    push $P5027, $P5029
    box $P5030, 5
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 1
    push $P5035, $P5036
    box $P5037, 0
    push $P5035, $P5037
    box $P5038, 7
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 8
    push $P5039, $P5040
    box $P5041, "ws"
    push $P5039, $P5041
    box $P5042, 8
    push $P5039, $P5042
    push $P5001, $P5039
    new $P5043, 'ResizablePMCArray'
    box $P5044, 8
    push $P5043, $P5044
    box $P5045, "MARKER"
    push $P5043, $P5045
    box $P5046, 9
    push $P5043, $P5046
    push $P5001, $P5043
    new $P5047, 'ResizablePMCArray'
    box $P5048, 0
    push $P5047, $P5048
    box $P5049, 0
    push $P5047, $P5049
    box $P5050, 0
    push $P5047, $P5050
    push $P5001, $P5047
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_37_1347719921.536_alt_nfa__1_1347719922.72" :subid("cuid_memo_9_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 6
    push $P5004, $P5005
    box $P5006, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5004, $P5006
    box $P5007, 1
    push $P5004, $P5007
    box $P5008, 1
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 2
    push $P5004, $P5010
    push $P5002, $P5004
    new $P5011, 'ResizablePMCArray'
    box $P5012, 1
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 3
    push $P5011, $P5014
    push $P5002, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "ws"
    push $P5015, $P5017
    box $P5018, 4
    push $P5015, $P5018
    push $P5002, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "MARKER"
    push $P5019, $P5021
    box $P5022, 5
    push $P5019, $P5022
    push $P5002, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5002, $P5023
    push $P5001, $P5002
    new $P5027, 'ResizablePMCArray'
    new $P5028, 'ResizablePMCArray'
    push $P5027, $P5028
    new $P5029, 'ResizablePMCArray'
    box $P5030, 8
    push $P5029, $P5030
    box $P5031, "unv"
    push $P5029, $P5031
    box $P5032, 2
    push $P5029, $P5032
    box $P5033, 1
    push $P5029, $P5033
    box $P5034, 0
    push $P5029, $P5034
    box $P5035, 2
    push $P5029, $P5035
    push $P5027, $P5029
    new $P5036, 'ResizablePMCArray'
    box $P5037, 1
    push $P5036, $P5037
    box $P5038, 0
    push $P5036, $P5038
    box $P5039, 3
    push $P5036, $P5039
    push $P5027, $P5036
    new $P5040, 'ResizablePMCArray'
    box $P5041, 8
    push $P5040, $P5041
    box $P5042, "ws"
    push $P5040, $P5042
    box $P5043, 4
    push $P5040, $P5043
    push $P5027, $P5040
    new $P5044, 'ResizablePMCArray'
    box $P5045, 8
    push $P5044, $P5045
    box $P5046, "MARKER"
    push $P5044, $P5046
    box $P5047, 5
    push $P5044, $P5047
    push $P5027, $P5044
    new $P5048, 'ResizablePMCArray'
    box $P5049, 0
    push $P5048, $P5049
    box $P5050, 0
    push $P5048, $P5050
    box $P5051, 0
    push $P5048, $P5051
    push $P5027, $P5048
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "ws" :subid("cuid_38_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 639
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx95_tgt
    .local int rx95_pos
    .local int rx95_off
    .local int rx95_eos
    .local int rx95_rep
    .local pmc rx95_cur
    .local pmc rx95_curclass
    .local pmc rx95_bstack
    .local pmc rx95_cstack
    (rx95_cur, rx95_tgt, rx95_pos, rx95_curclass, rx95_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx95_cur
    length rx95_eos, rx95_tgt
    eq $I19, 1, rx95_restart397
    gt rx95_pos, rx95_eos, rx95_fail398
    repr_get_attr_int $I11, self, rx95_curclass, "$!from"
    ne $I11, -1, rxscan96_done404
    goto rxscan96_scan403
  rxscan96_loop402:
    inc rx95_pos
    gt rx95_pos, rx95_eos, rx95_fail398
    repr_bind_attr_int rx95_cur, rx95_curclass, "$!from", rx95_pos
  rxscan96_scan403:
    nqp_rxmark rx95_bstack, rxscan96_loop402, rx95_pos, 0
  rxscan96_done404:
  alt97_0406:
    nqp_rxmark rx95_bstack, alt97_1407, rx95_pos, 0
    repr_bind_attr_int rx95_cur, rx95_curclass, "$!pos", rx95_pos
    $P11 = rx95_cur."MARKED"("ws")
    repr_get_attr_int $I11, $P11, rx95_curclass, "$!pos"
    lt $I11, 0, rx95_fail398
    goto alt97_end405
  alt97_1407:
    repr_bind_attr_int rx95_cur, rx95_curclass, "$!pos", rx95_pos
    $P11 = rx95_cur."ww"()
    repr_get_attr_int $I11, $P11, rx95_curclass, "$!pos"
    ge $I11, 0, rx95_fail398
    nqp_rxmark rx95_bstack, rxquantr98_done409, rx95_pos, 0
  rxquantr98_loop408:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt99_0411
    nqp_push_label $P11, alt99_1414
    nqp_push_label $P11, alt99_2417
    nqp_push_label $P11, alt99_3420
    nqp_rxmark rx95_bstack, alt99_end410, -1, 0
    rx95_cur."!alt"(rx95_pos, "alt_nfa__2_1347719922.736", $P11)
    goto rx95_fail398
  alt99_0411:
    nqp_rxmark rx95_bstack, rxquantr100_done413, -1, 0
  rxquantr100_loop412:
    ge rx95_pos, rx95_eos, rx95_fail398
    substr $S11, rx95_tgt, rx95_pos, 1
    index $I11, ucs4:"\n\x{b}\f\r\x{85}\u2028\u2029", $S11
    lt $I11, 0, rx95_fail398
    inc rx95_pos
    nqp_rxpeek $I19, rx95_bstack, rxquantr100_done413
    inc $I19
    inc $I19
    set rx95_rep, rx95_bstack[$I19]
    nqp_rxcommit rx95_bstack, rxquantr100_done413
    inc rx95_rep
    nqp_rxmark rx95_bstack, rxquantr100_done413, rx95_pos, rx95_rep
    goto rxquantr100_loop412
  rxquantr100_done413:
    goto alt99_end410
  alt99_1414:
    add $I11, rx95_pos, 1
    gt $I11, rx95_eos, rx95_fail398
    substr $S10, rx95_tgt, rx95_pos, 1
    ne $S10, ucs4:"#", rx95_fail398
    add rx95_pos, 1
    nqp_rxmark rx95_bstack, rxquantr101_done416, rx95_pos, 0
  rxquantr101_loop415:
    ge rx95_pos, rx95_eos, rx95_fail398
    is_cclass $I11, .CCLASS_NEWLINE, rx95_tgt, rx95_pos
    if $I11, rx95_fail398
    add rx95_pos, 1
    nqp_rxpeek $I19, rx95_bstack, rxquantr101_done416
    inc $I19
    inc $I19
    set rx95_rep, rx95_bstack[$I19]
    nqp_rxcommit rx95_bstack, rxquantr101_done416
    inc rx95_rep
    nqp_rxmark rx95_bstack, rxquantr101_done416, rx95_pos, rx95_rep
    goto rxquantr101_loop415
  rxquantr101_done416:
    goto alt99_end410
  alt99_2417:
    eq rx95_pos, 0, rxanchor102_done418
    ge rx95_pos, rx95_eos, rx95_fail398
    sub $I11, rx95_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx95_tgt, $I11
    unless $I11, rx95_fail398
  rxanchor102_done418:
    repr_bind_attr_int rx95_cur, rx95_curclass, "$!pos", rx95_pos
    $P11 = rx95_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx95_curclass, "$!pos"
    lt $I11, 0, rx95_fail398
    repr_get_attr_int rx95_pos, $P11, rx95_curclass, "$!pos"
    goto alt99_end410
  alt99_3420:
    nqp_rxmark rx95_bstack, rxquantr104_done422, -1, 0
  rxquantr104_loop421:
    ge rx95_pos, rx95_eos, rx95_fail398
    substr $S11, rx95_tgt, rx95_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx95_fail398
    inc rx95_pos
    nqp_rxpeek $I19, rx95_bstack, rxquantr104_done422
    inc $I19
    inc $I19
    set rx95_rep, rx95_bstack[$I19]
    nqp_rxcommit rx95_bstack, rxquantr104_done422
    inc rx95_rep
    nqp_rxmark rx95_bstack, rxquantr104_done422, rx95_pos, rx95_rep
    goto rxquantr104_loop421
  rxquantr104_done422:
    goto alt99_end410
  alt99_end410:
    nqp_rxpeek $I19, rx95_bstack, rxquantr98_done409
    inc $I19
    inc $I19
    set rx95_rep, rx95_bstack[$I19]
    nqp_rxcommit rx95_bstack, rxquantr98_done409
    inc rx95_rep
    nqp_rxmark rx95_bstack, rxquantr98_done409, rx95_pos, rx95_rep
    goto rxquantr98_loop408
  rxquantr98_done409:
    repr_bind_attr_int rx95_cur, rx95_curclass, "$!pos", rx95_pos
    $P11 = rx95_cur."MARKER"("ws")
    repr_get_attr_int $I11, $P11, rx95_curclass, "$!pos"
    lt $I11, 0, rx95_fail398
  alt97_end405:
    rx95_cur."!cursor_pass"(rx95_pos, "ws", 'backtrack'=>1)
    .return (rx95_cur)
  rx95_restart397:
    repr_get_attr_obj rx95_cstack, rx95_cur, rx95_curclass, "$!cstack"
  rx95_fail398:
    unless rx95_bstack, rx95_done396
    pop $I19, rx95_bstack
    if_null rx95_cstack, rx95_cstack_done401
    unless rx95_cstack, rx95_cstack_done401
    dec $I19
    set $P11, rx95_cstack[$I19]
  rx95_cstack_done401:
    pop rx95_rep, rx95_bstack
    pop rx95_pos, rx95_bstack
    pop $I19, rx95_bstack
    lt rx95_pos, -1, rx95_done396
    lt rx95_pos, 0, rx95_fail398
    eq $I19, 0, rx95_fail398
    nqp_islist $I20, rx95_cstack
    unless $I20, rx95_jump399
    elements $I18, rx95_bstack
    le $I18, 0, rx95_cut400
    dec $I18
    set $I18, rx95_bstack[$I18]
  rx95_cut400:
    assign rx95_cstack, $I18
  rx95_jump399:
    jump $I19
  rx95_done396:
    rx95_cur."!cursor_fail"()
    .return (rx95_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_38_1347719921.536_caps" :subid("cuid_memo_10_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_38_1347719921.536_alt_nfa__2_1347719922.736" :subid("cuid_memo_11_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 1
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 6
    push $P5008, $P5009
    box $P5010, utf8:"\n\x{b}\f\r\x{85}\u2028\u2029"
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 1
    push $P5012, $P5013
    box $P5014, 0
    push $P5012, $P5014
    box $P5015, 2
    push $P5012, $P5015
    box $P5016, 1
    push $P5012, $P5016
    box $P5017, 0
    push $P5012, $P5017
    box $P5018, 0
    push $P5012, $P5018
    push $P5002, $P5012
    push $P5001, $P5002
    new $P5019, 'ResizablePMCArray'
    new $P5020, 'ResizablePMCArray'
    push $P5019, $P5020
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 35
    push $P5021, $P5023
    box $P5024, 2
    push $P5021, $P5024
    push $P5019, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 5
    push $P5025, $P5026
    box $P5027, 4096
    push $P5025, $P5027
    box $P5028, 2
    push $P5025, $P5028
    box $P5029, 1
    push $P5025, $P5029
    box $P5030, 0
    push $P5025, $P5030
    box $P5031, 0
    push $P5025, $P5031
    push $P5019, $P5025
    push $P5001, $P5019
    new $P5032, 'ResizablePMCArray'
    new $P5033, 'ResizablePMCArray'
    push $P5032, $P5033
    new $P5034, 'ResizablePMCArray'
    box $P5035, 1
    push $P5034, $P5035
    box $P5036, 0
    push $P5034, $P5036
    box $P5037, 2
    push $P5034, $P5037
    push $P5032, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 8
    push $P5038, $P5039
    box $P5040, "pod_comment"
    push $P5038, $P5040
    box $P5041, 0
    push $P5038, $P5041
    push $P5032, $P5038
    push $P5001, $P5032
    new $P5042, 'ResizablePMCArray'
    new $P5043, 'ResizablePMCArray'
    push $P5042, $P5043
    new $P5044, 'ResizablePMCArray'
    box $P5045, 1
    push $P5044, $P5045
    box $P5046, 0
    push $P5044, $P5046
    box $P5047, 2
    push $P5044, $P5047
    push $P5042, $P5044
    new $P5048, 'ResizablePMCArray'
    box $P5049, 6
    push $P5048, $P5049
    box $P5050, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5048, $P5050
    box $P5051, 3
    push $P5048, $P5051
    push $P5042, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 1
    push $P5052, $P5053
    box $P5054, 0
    push $P5052, $P5054
    box $P5055, 2
    push $P5052, $P5055
    box $P5056, 1
    push $P5052, $P5056
    box $P5057, 0
    push $P5052, $P5057
    box $P5058, 0
    push $P5052, $P5058
    push $P5042, $P5052
    push $P5001, $P5042
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "unv" :subid("cuid_40_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 650
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_39_1347719921.536' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx105_tgt
    .local int rx105_pos
    .local int rx105_off
    .local int rx105_eos
    .local int rx105_rep
    .local pmc rx105_cur
    .local pmc rx105_curclass
    .local pmc rx105_bstack
    .local pmc rx105_cstack
    (rx105_cur, rx105_tgt, rx105_pos, rx105_curclass, rx105_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx105_cur
    length rx105_eos, rx105_tgt
    eq $I19, 1, rx105_restart425
    gt rx105_pos, rx105_eos, rx105_fail426
    repr_get_attr_int $I11, self, rx105_curclass, "$!from"
    ne $I11, -1, rxscan106_done432
    goto rxscan106_scan431
  rxscan106_loop430:
    inc rx105_pos
    gt rx105_pos, rx105_eos, rx105_fail426
    repr_bind_attr_int rx105_cur, rx105_curclass, "$!from", rx105_pos
  rxscan106_scan431:
    nqp_rxmark rx105_bstack, rxscan106_loop430, rx105_pos, 0
  rxscan106_done432:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt107_0434
    nqp_push_label $P11, alt107_1452
    nqp_push_label $P11, alt107_2457
    nqp_rxmark rx105_bstack, alt107_end433, -1, 0
    rx105_cur."!alt"(rx105_pos, "alt_nfa__4_1347719922.756", $P11)
    goto rx105_fail426
  alt107_0434:
    eq rx105_pos, 0, rxanchor108_done435
    ge rx105_pos, rx105_eos, rx105_fail426
    sub $I11, rx105_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx105_tgt, $I11
    unless $I11, rx105_fail426
  rxanchor108_done435:
    .const 'Sub' $P5001 = 'cuid_39_1347719921.536' 
    capture_lex $P5001
    repr_bind_attr_int rx105_cur, rx105_curclass, "$!pos", rx105_pos
    $P11 = rx105_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx105_curclass, "$!pos"
    lt $I11, 0, rx105_fail426
    repr_bind_attr_int rx105_cur, rx105_curclass, "$!pos", rx105_pos
    $P11 = rx105_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx105_curclass, "$!pos"
    lt $I11, 0, rx105_fail426
    repr_get_attr_int rx105_pos, $P11, rx105_curclass, "$!pos"
    goto alt107_end433
  alt107_1452:
    nqp_rxmark rx105_bstack, rxquantr114_done454, rx105_pos, 0
  rxquantr114_loop453:
    ge rx105_pos, rx105_eos, rx105_fail426
    substr $S11, rx105_tgt, rx105_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx105_fail426
    inc rx105_pos
    nqp_rxpeek $I19, rx105_bstack, rxquantr114_done454
    inc $I19
    inc $I19
    set rx105_rep, rx105_bstack[$I19]
    nqp_rxcommit rx105_bstack, rxquantr114_done454
    inc rx105_rep
    nqp_rxmark rx105_bstack, rxquantr114_done454, rx105_pos, rx105_rep
    goto rxquantr114_loop453
  rxquantr114_done454:
    add $I11, rx105_pos, 1
    gt $I11, rx105_eos, rx105_fail426
    substr $S10, rx105_tgt, rx105_pos, 1
    ne $S10, ucs4:"#", rx105_fail426
    add rx105_pos, 1
    nqp_rxmark rx105_bstack, rxquantr115_done456, rx105_pos, 0
  rxquantr115_loop455:
    ge rx105_pos, rx105_eos, rx105_fail426
    is_cclass $I11, .CCLASS_NEWLINE, rx105_tgt, rx105_pos
    if $I11, rx105_fail426
    add rx105_pos, 1
    nqp_rxpeek $I19, rx105_bstack, rxquantr115_done456
    inc $I19
    inc $I19
    set rx105_rep, rx105_bstack[$I19]
    nqp_rxcommit rx105_bstack, rxquantr115_done456
    inc rx105_rep
    nqp_rxmark rx105_bstack, rxquantr115_done456, rx105_pos, rx105_rep
    goto rxquantr115_loop455
  rxquantr115_done456:
    goto alt107_end433
  alt107_2457:
    nqp_rxmark rx105_bstack, rxquantr116_done459, -1, 0
  rxquantr116_loop458:
    ge rx105_pos, rx105_eos, rx105_fail426
    substr $S11, rx105_tgt, rx105_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx105_fail426
    inc rx105_pos
    nqp_rxpeek $I19, rx105_bstack, rxquantr116_done459
    inc $I19
    inc $I19
    set rx105_rep, rx105_bstack[$I19]
    nqp_rxcommit rx105_bstack, rxquantr116_done459
    inc rx105_rep
    nqp_rxmark rx105_bstack, rxquantr116_done459, rx105_pos, rx105_rep
    goto rxquantr116_loop458
  rxquantr116_done459:
    goto alt107_end433
  alt107_end433:
    nqp_rxcommit rx105_bstack, alt107_end433
    rx105_cur."!cursor_pass"(rx105_pos, "unv", 'backtrack'=>1)
    .return (rx105_cur)
  rx105_restart425:
    repr_get_attr_obj rx105_cstack, rx105_cur, rx105_curclass, "$!cstack"
  rx105_fail426:
    unless rx105_bstack, rx105_done424
    pop $I19, rx105_bstack
    if_null rx105_cstack, rx105_cstack_done429
    unless rx105_cstack, rx105_cstack_done429
    dec $I19
    set $P11, rx105_cstack[$I19]
  rx105_cstack_done429:
    pop rx105_rep, rx105_bstack
    pop rx105_pos, rx105_bstack
    pop $I19, rx105_bstack
    lt rx105_pos, -1, rx105_done424
    lt rx105_pos, 0, rx105_fail426
    eq $I19, 0, rx105_fail426
    nqp_islist $I20, rx105_cstack
    unless $I20, rx105_jump427
    elements $I18, rx105_bstack
    le $I18, 0, rx105_cut428
    dec $I18
    set $I18, rx105_bstack[$I18]
  rx105_cut428:
    assign rx105_cstack, $I18
  rx105_jump427:
    jump $I19
  rx105_done424:
    rx105_cur."!cursor_fail"()
    .return (rx105_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_40_1347719921.536_caps" :subid("cuid_memo_12_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_40_1347719921.536_nfa" :subid("cuid_memo_13_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 6
    push $P5003, $P5007
    box $P5008, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5003, $P5008
    box $P5009, 1
    push $P5003, $P5009
    box $P5010, 1
    push $P5003, $P5010
    box $P5011, 0
    push $P5003, $P5011
    box $P5012, 6
    push $P5003, $P5012
    box $P5013, 1
    push $P5003, $P5013
    box $P5014, 0
    push $P5003, $P5014
    box $P5015, 8
    push $P5003, $P5015
    push $P5001, $P5003
    new $P5016, 'ResizablePMCArray'
    box $P5017, 6
    push $P5016, $P5017
    box $P5018, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5016, $P5018
    box $P5019, 2
    push $P5016, $P5019
    box $P5020, 1
    push $P5016, $P5020
    box $P5021, 0
    push $P5016, $P5021
    box $P5022, 4
    push $P5016, $P5022
    push $P5001, $P5016
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 61
    push $P5027, $P5029
    box $P5030, 5
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 4
    push $P5031, $P5032
    box $P5033, 8192
    push $P5031, $P5033
    box $P5034, 3
    push $P5031, $P5034
    box $P5035, 2
    push $P5031, $P5035
    box $P5036, 92
    push $P5031, $P5036
    box $P5037, 3
    push $P5031, $P5037
    push $P5001, $P5031
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 35
    push $P5038, $P5040
    box $P5041, 7
    push $P5038, $P5041
    push $P5001, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 5
    push $P5042, $P5043
    box $P5044, 4096
    push $P5042, $P5044
    box $P5045, 7
    push $P5042, $P5045
    box $P5046, 1
    push $P5042, $P5046
    box $P5047, 0
    push $P5042, $P5047
    box $P5048, 0
    push $P5042, $P5048
    push $P5001, $P5042
    new $P5049, 'ResizablePMCArray'
    box $P5050, 6
    push $P5049, $P5050
    box $P5051, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5049, $P5051
    box $P5052, 9
    push $P5049, $P5052
    push $P5001, $P5049
    new $P5053, 'ResizablePMCArray'
    box $P5054, 1
    push $P5053, $P5054
    box $P5055, 0
    push $P5053, $P5055
    box $P5056, 8
    push $P5053, $P5056
    box $P5057, 1
    push $P5053, $P5057
    box $P5058, 0
    push $P5053, $P5058
    box $P5059, 0
    push $P5053, $P5059
    push $P5001, $P5053
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_40_1347719921.536_alt_nfa__4_1347719922.756" :subid("cuid_memo_14_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 1
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 6
    push $P5008, $P5009
    box $P5010, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5008, $P5010
    box $P5011, 2
    push $P5008, $P5011
    box $P5012, 1
    push $P5008, $P5012
    box $P5013, 0
    push $P5008, $P5013
    box $P5014, 4
    push $P5008, $P5014
    push $P5002, $P5008
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5002, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 61
    push $P5019, $P5021
    box $P5022, 5
    push $P5019, $P5022
    push $P5002, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 4
    push $P5023, $P5024
    box $P5025, 8192
    push $P5023, $P5025
    box $P5026, 3
    push $P5023, $P5026
    box $P5027, 2
    push $P5023, $P5027
    box $P5028, 92
    push $P5023, $P5028
    box $P5029, 3
    push $P5023, $P5029
    push $P5002, $P5023
    push $P5001, $P5002
    new $P5030, 'ResizablePMCArray'
    new $P5031, 'ResizablePMCArray'
    push $P5030, $P5031
    new $P5032, 'ResizablePMCArray'
    box $P5033, 6
    push $P5032, $P5033
    box $P5034, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5032, $P5034
    box $P5035, 1
    push $P5032, $P5035
    box $P5036, 1
    push $P5032, $P5036
    box $P5037, 0
    push $P5032, $P5037
    box $P5038, 2
    push $P5032, $P5038
    push $P5030, $P5032
    new $P5039, 'ResizablePMCArray'
    box $P5040, 2
    push $P5039, $P5040
    box $P5041, 35
    push $P5039, $P5041
    box $P5042, 3
    push $P5039, $P5042
    push $P5030, $P5039
    new $P5043, 'ResizablePMCArray'
    box $P5044, 5
    push $P5043, $P5044
    box $P5045, 4096
    push $P5043, $P5045
    box $P5046, 3
    push $P5043, $P5046
    box $P5047, 1
    push $P5043, $P5047
    box $P5048, 0
    push $P5043, $P5048
    box $P5049, 0
    push $P5043, $P5049
    push $P5030, $P5043
    push $P5001, $P5030
    new $P5050, 'ResizablePMCArray'
    new $P5051, 'ResizablePMCArray'
    push $P5050, $P5051
    new $P5052, 'ResizablePMCArray'
    box $P5053, 1
    push $P5052, $P5053
    box $P5054, 0
    push $P5052, $P5054
    box $P5055, 2
    push $P5052, $P5055
    push $P5050, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 6
    push $P5056, $P5057
    box $P5058, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5056, $P5058
    box $P5059, 3
    push $P5056, $P5059
    push $P5050, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 1
    push $P5060, $P5061
    box $P5062, 0
    push $P5060, $P5062
    box $P5063, 2
    push $P5060, $P5063
    box $P5064, 1
    push $P5060, $P5064
    box $P5065, 0
    push $P5060, $P5065
    box $P5066, 0
    push $P5060, $P5066
    push $P5050, $P5060
    push $P5001, $P5050
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_39_1347719921.536") :anon :lex :outer("cuid_40_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx109_tgt
    .local int rx109_pos
    .local int rx109_off
    .local int rx109_eos
    .local int rx109_rep
    .local pmc rx109_cur
    .local pmc rx109_curclass
    .local pmc rx109_bstack
    .local pmc rx109_cstack
    (rx109_cur, rx109_tgt, rx109_pos, rx109_curclass, rx109_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx109_cur
    length rx109_eos, rx109_tgt
    eq $I19, 1, rx109_restart438
    gt rx109_pos, rx109_eos, rx109_fail439
    repr_get_attr_int $I11, self, rx109_curclass, "$!from"
    ne $I11, -1, rxscan110_done445
    goto rxscan110_scan444
  rxscan110_loop443:
    inc rx109_pos
    gt rx109_pos, rx109_eos, rx109_fail439
    repr_bind_attr_int rx109_cur, rx109_curclass, "$!from", rx109_pos
  rxscan110_scan444:
    nqp_rxmark rx109_bstack, rxscan110_loop443, rx109_pos, 0
  rxscan110_done445:
    nqp_rxmark rx109_bstack, rxquantr111_done447, rx109_pos, 0
  rxquantr111_loop446:
    ge rx109_pos, rx109_eos, rx109_fail439
    substr $S11, rx109_tgt, rx109_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx109_fail439
    inc rx109_pos
    nqp_rxpeek $I19, rx109_bstack, rxquantr111_done447
    inc $I19
    inc $I19
    set rx109_rep, rx109_bstack[$I19]
    nqp_rxcommit rx109_bstack, rxquantr111_done447
    inc rx109_rep
    nqp_rxmark rx109_bstack, rxquantr111_done447, rx109_pos, rx109_rep
    goto rxquantr111_loop446
  rxquantr111_done447:
    add $I11, rx109_pos, 1
    gt $I11, rx109_eos, rx109_fail439
    substr $S10, rx109_tgt, rx109_pos, 1
    ne $S10, ucs4:"=", rx109_fail439
    add rx109_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt112_0449
    nqp_push_label $P11, alt112_1450
    nqp_rxmark rx109_bstack, alt112_end448, -1, 0
    rx109_cur."!alt"(rx109_pos, "alt_nfa__3_1347719922.747", $P11)
    goto rx109_fail439
  alt112_0449:
    ge rx109_pos, rx109_eos, rx109_fail439
    is_cclass $I11, .CCLASS_WORD, rx109_tgt, rx109_pos
    unless $I11, rx109_fail439
    add rx109_pos, 1
    goto alt112_end448
  alt112_1450:
    add $I11, rx109_pos, 1
    gt $I11, rx109_eos, rx109_fail439
    substr $S10, rx109_tgt, rx109_pos, 1
    ne $S10, ucs4:"\\", rx109_fail439
    add rx109_pos, 1
    goto alt112_end448
  alt112_end448:
    nqp_rxcommit rx109_bstack, alt112_end448
    rx109_cur."!cursor_pass"(rx109_pos, 'backtrack'=>1)
    .return (rx109_cur)
  rx109_restart438:
    repr_get_attr_obj rx109_cstack, rx109_cur, rx109_curclass, "$!cstack"
  rx109_fail439:
    unless rx109_bstack, rx109_done437
    pop $I19, rx109_bstack
    if_null rx109_cstack, rx109_cstack_done442
    unless rx109_cstack, rx109_cstack_done442
    dec $I19
    set $P11, rx109_cstack[$I19]
  rx109_cstack_done442:
    pop rx109_rep, rx109_bstack
    pop rx109_pos, rx109_bstack
    pop $I19, rx109_bstack
    lt rx109_pos, -1, rx109_done437
    lt rx109_pos, 0, rx109_fail439
    eq $I19, 0, rx109_fail439
    nqp_islist $I20, rx109_cstack
    unless $I20, rx109_jump440
    elements $I18, rx109_bstack
    le $I18, 0, rx109_cut441
    dec $I18
    set $I18, rx109_bstack[$I18]
  rx109_cut441:
    assign rx109_cstack, $I18
  rx109_jump440:
    jump $I19
  rx109_done437:
    rx109_cur."!cursor_fail"()
    .return (rx109_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_39_1347719921.536_caps" :subid("cuid_memo_15_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_39_1347719921.536_nfa" :subid("cuid_memo_16_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5003, $P5005
    box $P5006, 1
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 61
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    push $P5001, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 4
    push $P5014, $P5015
    box $P5016, 8192
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    box $P5018, 2
    push $P5014, $P5018
    box $P5019, 92
    push $P5014, $P5019
    box $P5020, 0
    push $P5014, $P5020
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_39_1347719921.536_alt_nfa__3_1347719922.747" :subid("cuid_memo_17_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 4
    push $P5004, $P5005
    box $P5006, 8192
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 92
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "pod_comment" :subid("cuid_42_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 659
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_41_1347719921.536' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx117_tgt
    .local int rx117_pos
    .local int rx117_off
    .local int rx117_eos
    .local int rx117_rep
    .local pmc rx117_cur
    .local pmc rx117_curclass
    .local pmc rx117_bstack
    .local pmc rx117_cstack
    (rx117_cur, rx117_tgt, rx117_pos, rx117_curclass, rx117_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx117_cur
    length rx117_eos, rx117_tgt
    eq $I19, 1, rx117_restart462
    gt rx117_pos, rx117_eos, rx117_fail463
    repr_get_attr_int $I11, self, rx117_curclass, "$!from"
    ne $I11, -1, rxscan118_done469
    goto rxscan118_scan468
  rxscan118_loop467:
    inc rx117_pos
    gt rx117_pos, rx117_eos, rx117_fail463
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!from", rx117_pos
  rxscan118_scan468:
    nqp_rxmark rx117_bstack, rxscan118_loop467, rx117_pos, 0
  rxscan118_done469:
    eq rx117_pos, 0, rxanchor119_done470
    ge rx117_pos, rx117_eos, rx117_fail463
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, $I11
    unless $I11, rx117_fail463
  rxanchor119_done470:
    nqp_rxmark rx117_bstack, rxquantr120_done472, rx117_pos, 0
  rxquantr120_loop471:
    ge rx117_pos, rx117_eos, rx117_fail463
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail463
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr120_done472
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr120_done472
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr120_done472, rx117_pos, rx117_rep
    goto rxquantr120_loop471
  rxquantr120_done472:
    add $I11, rx117_pos, 1
    gt $I11, rx117_eos, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 1
    ne $S10, ucs4:"=", rx117_fail463
    add rx117_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt121_0474
    nqp_push_label $P11, alt121_1493
    nqp_push_label $P11, alt121_2512
    nqp_push_label $P11, alt121_3534
    nqp_push_label $P11, alt121_4559
    nqp_rxmark rx117_bstack, alt121_end473, -1, 0
    rx117_cur."!alt"(rx117_pos, "alt_nfa__6_1347719922.841", $P11)
    goto rx117_fail463
  alt121_0474:
    add $I11, rx117_pos, 5
    gt $I11, rx117_eos, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 5
    ne $S10, ucs4:"begin", rx117_fail463
    add rx117_pos, 5
    nqp_rxmark rx117_bstack, rxquantr122_done476, -1, 0
  rxquantr122_loop475:
    ge rx117_pos, rx117_eos, rx117_fail463
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail463
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr122_done476
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr122_done476
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr122_done476, rx117_pos, rx117_rep
    goto rxquantr122_loop475
  rxquantr122_done476:
    add $I11, rx117_pos, 3
    gt $I11, rx117_eos, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 3
    ne $S10, ucs4:"END", rx117_fail463
    add rx117_pos, 3
    le rx117_pos, 0, rx117_fail463
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, rx117_pos
    if $I11, rx117_fail463
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, $I11
    unless $I11, rx117_fail463
  alt124_0479:
    nqp_rxmark rx117_bstack, alt124_1490, rx117_pos, 0
    set rx117_rep, 0
    nqp_rxmark rx117_bstack, rxquantf125_loop480, rx117_pos, rx117_rep
    goto rxquantf125_done481
  rxquantf125_loop480:
    set $I12, rx117_rep
    ge rx117_pos, rx117_eos, rx117_fail463
    add rx117_pos, 1
    set rx117_rep, $I12
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantf125_loop480, rx117_pos, rx117_rep
  rxquantf125_done481:
    ge rx117_pos, rx117_eos, rx117_fail463
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    unless $I11, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx117_pos, $I11
    add rx117_pos, 1
    nqp_rxmark rx117_bstack, rxquantr126_done484, rx117_pos, 0
  rxquantr126_loop483:
    ge rx117_pos, rx117_eos, rx117_fail463
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail463
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr126_done484
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr126_done484
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr126_done484, rx117_pos, rx117_rep
    goto rxquantr126_loop483
  rxquantr126_done484:
    add $I11, rx117_pos, 4
    gt $I11, rx117_eos, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 4
    ne $S10, ucs4:"=end", rx117_fail463
    add rx117_pos, 4
    nqp_rxmark rx117_bstack, rxquantr127_done486, -1, 0
  rxquantr127_loop485:
    ge rx117_pos, rx117_eos, rx117_fail463
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail463
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr127_done486
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr127_done486
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr127_done486, rx117_pos, rx117_rep
    goto rxquantr127_loop485
  rxquantr127_done486:
    add $I11, rx117_pos, 3
    gt $I11, rx117_eos, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 3
    ne $S10, ucs4:"END", rx117_fail463
    add rx117_pos, 3
    le rx117_pos, 0, rx117_fail463
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, rx117_pos
    if $I11, rx117_fail463
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, $I11
    unless $I11, rx117_fail463
    nqp_rxmark rx117_bstack, rxquantr129_done489, rx117_pos, 0
  rxquantr129_loop488:
    ge rx117_pos, rx117_eos, rx117_fail463
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    if $I11, rx117_fail463
    add rx117_pos, 1
    nqp_rxpeek $I19, rx117_bstack, rxquantr129_done489
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr129_done489
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr129_done489, rx117_pos, rx117_rep
    goto rxquantr129_loop488
  rxquantr129_done489:
    goto alt124_end478
  alt124_1490:
    nqp_rxmark rx117_bstack, rxquantr130_done492, rx117_pos, 0
  rxquantr130_loop491:
    ge rx117_pos, rx117_eos, rx117_fail463
    add rx117_pos, 1
    nqp_rxpeek $I19, rx117_bstack, rxquantr130_done492
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr130_done492
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr130_done492, rx117_pos, rx117_rep
    goto rxquantr130_loop491
  rxquantr130_done492:
  alt124_end478:
    goto alt121_end473
  alt121_1493:
    add $I11, rx117_pos, 5
    gt $I11, rx117_eos, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 5
    ne $S10, ucs4:"begin", rx117_fail463
    add rx117_pos, 5
    nqp_rxmark rx117_bstack, rxquantr131_done495, -1, 0
  rxquantr131_loop494:
    ge rx117_pos, rx117_eos, rx117_fail463
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail463
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr131_done495
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr131_done495
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr131_done495, rx117_pos, rx117_rep
    goto rxquantr131_loop494
  rxquantr131_done495:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail463
    nqp_rxmark rx117_bstack, rxsubrule132_pass496, -1, 0
  rxsubrule132_pass496:
    rx117_cstack = rx117_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
  alt133_0498:
    nqp_rxmark rx117_bstack, alt133_1510, rx117_pos, 0
    set rx117_rep, 0
    nqp_rxmark rx117_bstack, rxquantf134_loop499, rx117_pos, rx117_rep
    goto rxquantf134_done500
  rxquantf134_loop499:
    set $I12, rx117_rep
    ge rx117_pos, rx117_eos, rx117_fail463
    add rx117_pos, 1
    set rx117_rep, $I12
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantf134_loop499, rx117_pos, rx117_rep
  rxquantf134_done500:
    ge rx117_pos, rx117_eos, rx117_fail463
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    unless $I11, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx117_pos, $I11
    add rx117_pos, 1
    nqp_rxmark rx117_bstack, rxquantr135_done503, rx117_pos, 0
  rxquantr135_loop502:
    ge rx117_pos, rx117_eos, rx117_fail463
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail463
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr135_done503
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr135_done503
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr135_done503, rx117_pos, rx117_rep
    goto rxquantr135_loop502
  rxquantr135_done503:
    add $I11, rx117_pos, 4
    gt $I11, rx117_eos, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 4
    ne $S10, ucs4:"=end", rx117_fail463
    add rx117_pos, 4
    nqp_rxmark rx117_bstack, rxquantr136_done505, -1, 0
  rxquantr136_loop504:
    ge rx117_pos, rx117_eos, rx117_fail463
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail463
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr136_done505
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr136_done505
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr136_done505, rx117_pos, rx117_rep
    goto rxquantr136_loop504
  rxquantr136_done505:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."!BACKREF"("identifier")
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail463
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
    le rx117_pos, 0, rx117_fail463
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, rx117_pos
    if $I11, rx117_fail463
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, $I11
    unless $I11, rx117_fail463
    nqp_rxmark rx117_bstack, rxquantr139_done509, rx117_pos, 0
  rxquantr139_loop508:
    ge rx117_pos, rx117_eos, rx117_fail463
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    if $I11, rx117_fail463
    add rx117_pos, 1
    nqp_rxpeek $I19, rx117_bstack, rxquantr139_done509
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr139_done509
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr139_done509, rx117_pos, rx117_rep
    goto rxquantr139_loop508
  rxquantr139_done509:
    goto alt133_end497
  alt133_1510:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail463
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
  alt133_end497:
    goto alt121_end473
  alt121_2512:
    add $I11, rx117_pos, 5
    gt $I11, rx117_eos, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 5
    ne $S10, ucs4:"begin", rx117_fail463
    add rx117_pos, 5
    le rx117_pos, 0, rx117_fail463
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, rx117_pos
    if $I11, rx117_fail463
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, $I11
    unless $I11, rx117_fail463
    nqp_rxmark rx117_bstack, rxquantr142_done515, rx117_pos, 0
  rxquantr142_loop514:
    ge rx117_pos, rx117_eos, rx117_fail463
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail463
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr142_done515
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr142_done515
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr142_done515, rx117_pos, rx117_rep
    goto rxquantr142_loop514
  rxquantr142_done515:
  alt143_0517:
    nqp_rxmark rx117_bstack, alt143_1519, rx117_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    if $I11, rxanchor144_done518
    ne rx117_pos, rx117_eos, rx117_fail463
    eq rx117_pos, 0, rxanchor144_done518
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, $I11
    if $I11, rx117_fail463
  rxanchor144_done518:
    goto alt143_end516
  alt143_1519:
    nqp_rxmark rx117_bstack, alt143_2520, rx117_pos, 0
    add $I11, rx117_pos, 1
    gt $I11, rx117_eos, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 1
    ne $S10, ucs4:"#", rx117_fail463
    add rx117_pos, 1
    goto alt143_end516
  alt143_2520:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."panic"("Unrecognized token after =begin")
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail463
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
  alt143_end516:
  alt146_0523:
    nqp_rxmark rx117_bstack, alt146_1532, rx117_pos, 0
    set rx117_rep, 0
    nqp_rxmark rx117_bstack, rxquantf147_loop524, rx117_pos, rx117_rep
    goto rxquantf147_done525
  rxquantf147_loop524:
    set $I12, rx117_rep
    ge rx117_pos, rx117_eos, rx117_fail463
    add rx117_pos, 1
    set rx117_rep, $I12
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantf147_loop524, rx117_pos, rx117_rep
  rxquantf147_done525:
    ge rx117_pos, rx117_eos, rx117_fail463
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    unless $I11, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx117_pos, $I11
    add rx117_pos, 1
    nqp_rxmark rx117_bstack, rxquantr148_done528, rx117_pos, 0
  rxquantr148_loop527:
    ge rx117_pos, rx117_eos, rx117_fail463
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail463
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr148_done528
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr148_done528
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr148_done528, rx117_pos, rx117_rep
    goto rxquantr148_loop527
  rxquantr148_done528:
    add $I11, rx117_pos, 4
    gt $I11, rx117_eos, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 4
    ne $S10, ucs4:"=end", rx117_fail463
    add rx117_pos, 4
    le rx117_pos, 0, rx117_fail463
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, rx117_pos
    if $I11, rx117_fail463
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, $I11
    unless $I11, rx117_fail463
    nqp_rxmark rx117_bstack, rxquantr150_done531, rx117_pos, 0
  rxquantr150_loop530:
    ge rx117_pos, rx117_eos, rx117_fail463
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    if $I11, rx117_fail463
    add rx117_pos, 1
    nqp_rxpeek $I19, rx117_bstack, rxquantr150_done531
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr150_done531
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr150_done531, rx117_pos, rx117_rep
    goto rxquantr150_loop530
  rxquantr150_done531:
    goto alt146_end522
  alt146_1532:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail463
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
  alt146_end522:
    goto alt121_end473
  alt121_3534:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail463
    nqp_rxmark rx117_bstack, rxsubrule152_pass535, -1, 0
  rxsubrule152_pass535:
    rx117_cstack = rx117_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
    set rx117_rep, 0
    nqp_rxmark rx117_bstack, rxquantf153_loop536, rx117_pos, rx117_rep
    goto rxquantf153_done537
  rxquantf153_loop536:
    set $I12, rx117_rep
    ge rx117_pos, rx117_eos, rx117_fail463
    add rx117_pos, 1
    set rx117_rep, $I12
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantf153_loop536, rx117_pos, rx117_rep
  rxquantf153_done537:
    eq rx117_pos, 0, rxanchor154_done539
    ge rx117_pos, rx117_eos, rx117_fail463
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, $I11
    unless $I11, rx117_fail463
  rxanchor154_done539:
    .const 'Sub' $P5001 = 'cuid_41_1347719921.536' 
    capture_lex $P5001
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail463
    goto alt121_end473
  alt121_4559:
  alt162_0561:
    nqp_rxmark rx117_bstack, alt162_1562, rx117_pos, 0
    ge rx117_pos, rx117_eos, rx117_fail463
    is_cclass $I11, .CCLASS_WHITESPACE, rx117_tgt, rx117_pos
    unless $I11, rx117_fail463
    add rx117_pos, 1
    goto alt162_end560
  alt162_1562:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."panic"("Illegal pod directive")
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail463
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
  alt162_end560:
    nqp_rxmark rx117_bstack, rxquantr164_done565, rx117_pos, 0
  rxquantr164_loop564:
    ge rx117_pos, rx117_eos, rx117_fail463
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    if $I11, rx117_fail463
    add rx117_pos, 1
    nqp_rxpeek $I19, rx117_bstack, rxquantr164_done565
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr164_done565
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr164_done565, rx117_pos, rx117_rep
    goto rxquantr164_loop564
  rxquantr164_done565:
    goto alt121_end473
  alt121_end473:
    nqp_rxcommit rx117_bstack, alt121_end473
    rx117_cur."!cursor_pass"(rx117_pos, "pod_comment", 'backtrack'=>1)
    .return (rx117_cur)
  rx117_restart462:
    repr_get_attr_obj rx117_cstack, rx117_cur, rx117_curclass, "$!cstack"
  rx117_fail463:
    unless rx117_bstack, rx117_done461
    pop $I19, rx117_bstack
    if_null rx117_cstack, rx117_cstack_done466
    unless rx117_cstack, rx117_cstack_done466
    dec $I19
    set $P11, rx117_cstack[$I19]
  rx117_cstack_done466:
    pop rx117_rep, rx117_bstack
    pop rx117_pos, rx117_bstack
    pop $I19, rx117_bstack
    lt rx117_pos, -1, rx117_done461
    lt rx117_pos, 0, rx117_fail463
    eq $I19, 0, rx117_fail463
    nqp_islist $I20, rx117_cstack
    unless $I20, rx117_jump464
    elements $I18, rx117_bstack
    le $I18, 0, rx117_cut465
    dec $I18
    set $I18, rx117_bstack[$I18]
  rx117_cut465:
    assign rx117_cstack, $I18
  rx117_jump464:
    jump $I19
  rx117_done461:
    rx117_cur."!cursor_fail"()
    .return (rx117_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_42_1347719921.536_caps" :subid("cuid_memo_18_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["identifier"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_42_1347719921.536_nfa" :subid("cuid_memo_19_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 6
    push $P5007, $P5008
    box $P5009, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5007, $P5009
    box $P5010, 2
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 3
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 61
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 98
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    box $P5022, 2
    push $P5018, $P5022
    box $P5023, 98
    push $P5018, $P5023
    box $P5024, 17
    push $P5018, $P5024
    box $P5025, 2
    push $P5018, $P5025
    box $P5026, 98
    push $P5018, $P5026
    box $P5027, 26
    push $P5018, $P5027
    box $P5028, 8
    push $P5018, $P5028
    box $P5029, "identifier"
    push $P5018, $P5029
    box $P5030, 33
    push $P5018, $P5030
    box $P5031, 0
    push $P5018, $P5031
    box $P5032, 0
    push $P5018, $P5032
    box $P5033, 0
    push $P5018, $P5033
    push $P5001, $P5018
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 101
    push $P5034, $P5036
    box $P5037, 6
    push $P5034, $P5037
    push $P5001, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 103
    push $P5038, $P5040
    box $P5041, 7
    push $P5038, $P5041
    push $P5001, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 105
    push $P5042, $P5044
    box $P5045, 8
    push $P5042, $P5045
    push $P5001, $P5042
    new $P5046, 'ResizablePMCArray'
    box $P5047, 2
    push $P5046, $P5047
    box $P5048, 110
    push $P5046, $P5048
    box $P5049, 9
    push $P5046, $P5049
    push $P5001, $P5046
    new $P5050, 'ResizablePMCArray'
    box $P5051, 1
    push $P5050, $P5051
    box $P5052, 0
    push $P5050, $P5052
    box $P5053, 10
    push $P5050, $P5053
    push $P5001, $P5050
    new $P5054, 'ResizablePMCArray'
    box $P5055, 6
    push $P5054, $P5055
    box $P5056, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5054, $P5056
    box $P5057, 11
    push $P5054, $P5057
    push $P5001, $P5054
    new $P5058, 'ResizablePMCArray'
    box $P5059, 1
    push $P5058, $P5059
    box $P5060, 0
    push $P5058, $P5060
    box $P5061, 10
    push $P5058, $P5061
    box $P5062, 1
    push $P5058, $P5062
    box $P5063, 0
    push $P5058, $P5063
    box $P5064, 12
    push $P5058, $P5064
    box $P5065, 2
    push $P5058, $P5065
    box $P5066, 69
    push $P5058, $P5066
    box $P5067, 13
    push $P5058, $P5067
    push $P5001, $P5058
    new $P5068, 'ResizablePMCArray'
    push $P5001, $P5068
    new $P5069, 'ResizablePMCArray'
    box $P5070, 2
    push $P5069, $P5070
    box $P5071, 78
    push $P5069, $P5071
    box $P5072, 14
    push $P5069, $P5072
    push $P5001, $P5069
    new $P5073, 'ResizablePMCArray'
    box $P5074, 2
    push $P5073, $P5074
    box $P5075, 68
    push $P5073, $P5075
    box $P5076, 15
    push $P5073, $P5076
    push $P5001, $P5073
    new $P5077, 'ResizablePMCArray'
    box $P5078, 1
    push $P5077, $P5078
    box $P5079, 0
    push $P5077, $P5079
    box $P5080, 16
    push $P5077, $P5080
    push $P5001, $P5077
    new $P5081, 'ResizablePMCArray'
    box $P5082, 0
    push $P5081, $P5082
    box $P5083, 0
    push $P5081, $P5083
    box $P5084, 0
    push $P5081, $P5084
    push $P5001, $P5081
    new $P5085, 'ResizablePMCArray'
    box $P5086, 2
    push $P5085, $P5086
    box $P5087, 101
    push $P5085, $P5087
    box $P5088, 18
    push $P5085, $P5088
    push $P5001, $P5085
    new $P5089, 'ResizablePMCArray'
    box $P5090, 2
    push $P5089, $P5090
    box $P5091, 103
    push $P5089, $P5091
    box $P5092, 19
    push $P5089, $P5092
    push $P5001, $P5089
    new $P5093, 'ResizablePMCArray'
    box $P5094, 2
    push $P5093, $P5094
    box $P5095, 105
    push $P5093, $P5095
    box $P5096, 20
    push $P5093, $P5096
    push $P5001, $P5093
    new $P5097, 'ResizablePMCArray'
    box $P5098, 2
    push $P5097, $P5098
    box $P5099, 110
    push $P5097, $P5099
    box $P5100, 21
    push $P5097, $P5100
    push $P5001, $P5097
    new $P5101, 'ResizablePMCArray'
    box $P5102, 1
    push $P5101, $P5102
    box $P5103, 0
    push $P5101, $P5103
    box $P5104, 22
    push $P5101, $P5104
    push $P5001, $P5101
    new $P5105, 'ResizablePMCArray'
    box $P5106, 6
    push $P5105, $P5106
    box $P5107, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5105, $P5107
    box $P5108, 23
    push $P5105, $P5108
    push $P5001, $P5105
    new $P5109, 'ResizablePMCArray'
    box $P5110, 1
    push $P5109, $P5110
    box $P5111, 0
    push $P5109, $P5111
    box $P5112, 22
    push $P5109, $P5112
    box $P5113, 1
    push $P5109, $P5113
    box $P5114, 0
    push $P5109, $P5114
    box $P5115, 24
    push $P5109, $P5115
    box $P5116, 8
    push $P5109, $P5116
    box $P5117, "identifier"
    push $P5109, $P5117
    box $P5118, 25
    push $P5109, $P5118
    push $P5001, $P5109
    new $P5119, 'ResizablePMCArray'
    push $P5001, $P5119
    new $P5120, 'ResizablePMCArray'
    box $P5121, 0
    push $P5120, $P5121
    box $P5122, 0
    push $P5120, $P5122
    box $P5123, 0
    push $P5120, $P5123
    push $P5001, $P5120
    new $P5124, 'ResizablePMCArray'
    box $P5125, 2
    push $P5124, $P5125
    box $P5126, 101
    push $P5124, $P5126
    box $P5127, 27
    push $P5124, $P5127
    push $P5001, $P5124
    new $P5128, 'ResizablePMCArray'
    box $P5129, 2
    push $P5128, $P5129
    box $P5130, 103
    push $P5128, $P5130
    box $P5131, 28
    push $P5128, $P5131
    push $P5001, $P5128
    new $P5132, 'ResizablePMCArray'
    box $P5133, 2
    push $P5132, $P5133
    box $P5134, 105
    push $P5132, $P5134
    box $P5135, 29
    push $P5132, $P5135
    push $P5001, $P5132
    new $P5136, 'ResizablePMCArray'
    box $P5137, 2
    push $P5136, $P5137
    box $P5138, 110
    push $P5136, $P5138
    box $P5139, 30
    push $P5136, $P5139
    push $P5001, $P5136
    new $P5140, 'ResizablePMCArray'
    box $P5141, 1
    push $P5140, $P5141
    box $P5142, 0
    push $P5140, $P5142
    box $P5143, 31
    push $P5140, $P5143
    push $P5001, $P5140
    new $P5144, 'ResizablePMCArray'
    box $P5145, 6
    push $P5144, $P5145
    box $P5146, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5144, $P5146
    box $P5147, 31
    push $P5144, $P5147
    box $P5148, 1
    push $P5144, $P5148
    box $P5149, 0
    push $P5144, $P5149
    box $P5150, 32
    push $P5144, $P5150
    push $P5001, $P5144
    new $P5151, 'ResizablePMCArray'
    box $P5152, 0
    push $P5151, $P5152
    box $P5153, 0
    push $P5151, $P5153
    box $P5154, 0
    push $P5151, $P5154
    push $P5001, $P5151
    new $P5155, 'ResizablePMCArray'
    box $P5156, 4
    push $P5155, $P5156
    box $P5157, 65535
    push $P5155, $P5157
    box $P5158, 33
    push $P5155, $P5158
    box $P5159, 1
    push $P5155, $P5159
    box $P5160, 0
    push $P5155, $P5160
    box $P5161, 34
    push $P5155, $P5161
    push $P5001, $P5155
    new $P5162, 'ResizablePMCArray'
    box $P5163, 1
    push $P5162, $P5163
    box $P5164, 0
    push $P5162, $P5164
    box $P5165, 35
    push $P5162, $P5165
    push $P5001, $P5162
    new $P5166, 'ResizablePMCArray'
    box $P5167, 6
    push $P5166, $P5167
    box $P5168, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5166, $P5168
    box $P5169, 35
    push $P5166, $P5169
    box $P5170, 1
    push $P5166, $P5170
    box $P5171, 0
    push $P5166, $P5171
    box $P5172, 37
    push $P5166, $P5172
    push $P5001, $P5166
    new $P5173, 'ResizablePMCArray'
    box $P5174, 0
    push $P5173, $P5174
    box $P5175, 0
    push $P5173, $P5175
    box $P5176, 0
    push $P5173, $P5176
    push $P5001, $P5173
    new $P5177, 'ResizablePMCArray'
    box $P5178, 2
    push $P5177, $P5178
    box $P5179, 61
    push $P5177, $P5179
    box $P5180, 38
    push $P5177, $P5180
    box $P5181, 4
    push $P5177, $P5181
    box $P5182, 4096
    push $P5177, $P5182
    box $P5183, 36
    push $P5177, $P5183
    push $P5001, $P5177
    new $P5184, 'ResizablePMCArray'
    box $P5185, 2
    push $P5184, $P5185
    box $P5186, 99
    push $P5184, $P5186
    box $P5187, 39
    push $P5184, $P5187
    box $P5188, 1
    push $P5184, $P5188
    box $P5189, 0
    push $P5184, $P5189
    box $P5190, 36
    push $P5184, $P5190
    push $P5001, $P5184
    new $P5191, 'ResizablePMCArray'
    box $P5192, 2
    push $P5191, $P5192
    box $P5193, 117
    push $P5191, $P5193
    box $P5194, 40
    push $P5191, $P5194
    push $P5001, $P5191
    new $P5195, 'ResizablePMCArray'
    box $P5196, 2
    push $P5195, $P5196
    box $P5197, 116
    push $P5195, $P5197
    box $P5198, 41
    push $P5195, $P5198
    push $P5001, $P5195
    new $P5199, 'ResizablePMCArray'
    box $P5200, 1
    push $P5199, $P5200
    box $P5201, 0
    push $P5199, $P5201
    box $P5202, 42
    push $P5199, $P5202
    push $P5001, $P5199
    new $P5203, 'ResizablePMCArray'
    box $P5204, 8
    push $P5203, $P5204
    box $P5205, "panic"
    push $P5203, $P5205
    box $P5206, 36
    push $P5203, $P5206
    push $P5001, $P5203
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_42_1347719921.536_alt_nfa__6_1347719922.841" :subid("cuid_memo_20_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 98
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 101
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 103
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 105
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 110
    push $P5020, $P5022
    box $P5023, 6
    push $P5020, $P5023
    push $P5002, $P5020
    new $P5024, 'ResizablePMCArray'
    box $P5025, 1
    push $P5024, $P5025
    box $P5026, 0
    push $P5024, $P5026
    box $P5027, 7
    push $P5024, $P5027
    push $P5002, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 6
    push $P5028, $P5029
    box $P5030, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5028, $P5030
    box $P5031, 8
    push $P5028, $P5031
    push $P5002, $P5028
    new $P5032, 'ResizablePMCArray'
    box $P5033, 1
    push $P5032, $P5033
    box $P5034, 0
    push $P5032, $P5034
    box $P5035, 7
    push $P5032, $P5035
    box $P5036, 1
    push $P5032, $P5036
    box $P5037, 0
    push $P5032, $P5037
    box $P5038, 9
    push $P5032, $P5038
    box $P5039, 2
    push $P5032, $P5039
    box $P5040, 69
    push $P5032, $P5040
    box $P5041, 10
    push $P5032, $P5041
    push $P5002, $P5032
    new $P5042, 'ResizablePMCArray'
    push $P5002, $P5042
    new $P5043, 'ResizablePMCArray'
    box $P5044, 2
    push $P5043, $P5044
    box $P5045, 78
    push $P5043, $P5045
    box $P5046, 11
    push $P5043, $P5046
    push $P5002, $P5043
    new $P5047, 'ResizablePMCArray'
    box $P5048, 2
    push $P5047, $P5048
    box $P5049, 68
    push $P5047, $P5049
    box $P5050, 12
    push $P5047, $P5050
    push $P5002, $P5047
    new $P5051, 'ResizablePMCArray'
    box $P5052, 1
    push $P5051, $P5052
    box $P5053, 0
    push $P5051, $P5053
    box $P5054, 13
    push $P5051, $P5054
    push $P5002, $P5051
    new $P5055, 'ResizablePMCArray'
    box $P5056, 0
    push $P5055, $P5056
    box $P5057, 0
    push $P5055, $P5057
    box $P5058, 0
    push $P5055, $P5058
    push $P5002, $P5055
    push $P5001, $P5002
    new $P5059, 'ResizablePMCArray'
    new $P5060, 'ResizablePMCArray'
    push $P5059, $P5060
    new $P5061, 'ResizablePMCArray'
    box $P5062, 2
    push $P5061, $P5062
    box $P5063, 98
    push $P5061, $P5063
    box $P5064, 2
    push $P5061, $P5064
    push $P5059, $P5061
    new $P5065, 'ResizablePMCArray'
    box $P5066, 2
    push $P5065, $P5066
    box $P5067, 101
    push $P5065, $P5067
    box $P5068, 3
    push $P5065, $P5068
    push $P5059, $P5065
    new $P5069, 'ResizablePMCArray'
    box $P5070, 2
    push $P5069, $P5070
    box $P5071, 103
    push $P5069, $P5071
    box $P5072, 4
    push $P5069, $P5072
    push $P5059, $P5069
    new $P5073, 'ResizablePMCArray'
    box $P5074, 2
    push $P5073, $P5074
    box $P5075, 105
    push $P5073, $P5075
    box $P5076, 5
    push $P5073, $P5076
    push $P5059, $P5073
    new $P5077, 'ResizablePMCArray'
    box $P5078, 2
    push $P5077, $P5078
    box $P5079, 110
    push $P5077, $P5079
    box $P5080, 6
    push $P5077, $P5080
    push $P5059, $P5077
    new $P5081, 'ResizablePMCArray'
    box $P5082, 1
    push $P5081, $P5082
    box $P5083, 0
    push $P5081, $P5083
    box $P5084, 7
    push $P5081, $P5084
    push $P5059, $P5081
    new $P5085, 'ResizablePMCArray'
    box $P5086, 6
    push $P5085, $P5086
    box $P5087, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5085, $P5087
    box $P5088, 8
    push $P5085, $P5088
    push $P5059, $P5085
    new $P5089, 'ResizablePMCArray'
    box $P5090, 1
    push $P5089, $P5090
    box $P5091, 0
    push $P5089, $P5091
    box $P5092, 7
    push $P5089, $P5092
    box $P5093, 1
    push $P5089, $P5093
    box $P5094, 0
    push $P5089, $P5094
    box $P5095, 9
    push $P5089, $P5095
    box $P5096, 8
    push $P5089, $P5096
    box $P5097, "identifier"
    push $P5089, $P5097
    box $P5098, 10
    push $P5089, $P5098
    push $P5059, $P5089
    new $P5099, 'ResizablePMCArray'
    push $P5059, $P5099
    new $P5100, 'ResizablePMCArray'
    box $P5101, 0
    push $P5100, $P5101
    box $P5102, 0
    push $P5100, $P5102
    box $P5103, 0
    push $P5100, $P5103
    push $P5059, $P5100
    push $P5001, $P5059
    new $P5104, 'ResizablePMCArray'
    new $P5105, 'ResizablePMCArray'
    push $P5104, $P5105
    new $P5106, 'ResizablePMCArray'
    box $P5107, 2
    push $P5106, $P5107
    box $P5108, 98
    push $P5106, $P5108
    box $P5109, 2
    push $P5106, $P5109
    push $P5104, $P5106
    new $P5110, 'ResizablePMCArray'
    box $P5111, 2
    push $P5110, $P5111
    box $P5112, 101
    push $P5110, $P5112
    box $P5113, 3
    push $P5110, $P5113
    push $P5104, $P5110
    new $P5114, 'ResizablePMCArray'
    box $P5115, 2
    push $P5114, $P5115
    box $P5116, 103
    push $P5114, $P5116
    box $P5117, 4
    push $P5114, $P5117
    push $P5104, $P5114
    new $P5118, 'ResizablePMCArray'
    box $P5119, 2
    push $P5118, $P5119
    box $P5120, 105
    push $P5118, $P5120
    box $P5121, 5
    push $P5118, $P5121
    push $P5104, $P5118
    new $P5122, 'ResizablePMCArray'
    box $P5123, 2
    push $P5122, $P5123
    box $P5124, 110
    push $P5122, $P5124
    box $P5125, 6
    push $P5122, $P5125
    push $P5104, $P5122
    new $P5126, 'ResizablePMCArray'
    box $P5127, 1
    push $P5126, $P5127
    box $P5128, 0
    push $P5126, $P5128
    box $P5129, 7
    push $P5126, $P5129
    push $P5104, $P5126
    new $P5130, 'ResizablePMCArray'
    box $P5131, 6
    push $P5130, $P5131
    box $P5132, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5130, $P5132
    box $P5133, 7
    push $P5130, $P5133
    box $P5134, 1
    push $P5130, $P5134
    box $P5135, 0
    push $P5130, $P5135
    box $P5136, 8
    push $P5130, $P5136
    push $P5104, $P5130
    new $P5137, 'ResizablePMCArray'
    box $P5138, 0
    push $P5137, $P5138
    box $P5139, 0
    push $P5137, $P5139
    box $P5140, 0
    push $P5137, $P5140
    push $P5104, $P5137
    push $P5001, $P5104
    new $P5141, 'ResizablePMCArray'
    new $P5142, 'ResizablePMCArray'
    push $P5141, $P5142
    new $P5143, 'ResizablePMCArray'
    box $P5144, 8
    push $P5143, $P5144
    box $P5145, "identifier"
    push $P5143, $P5145
    box $P5146, 2
    push $P5143, $P5146
    push $P5141, $P5143
    new $P5147, 'ResizablePMCArray'
    box $P5148, 4
    push $P5147, $P5148
    box $P5149, 65535
    push $P5147, $P5149
    box $P5150, 2
    push $P5147, $P5150
    box $P5151, 1
    push $P5147, $P5151
    box $P5152, 0
    push $P5147, $P5152
    box $P5153, 3
    push $P5147, $P5153
    push $P5141, $P5147
    new $P5154, 'ResizablePMCArray'
    box $P5155, 1
    push $P5154, $P5155
    box $P5156, 0
    push $P5154, $P5156
    box $P5157, 4
    push $P5154, $P5157
    push $P5141, $P5154
    new $P5158, 'ResizablePMCArray'
    box $P5159, 6
    push $P5158, $P5159
    box $P5160, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5158, $P5160
    box $P5161, 4
    push $P5158, $P5161
    box $P5162, 1
    push $P5158, $P5162
    box $P5163, 0
    push $P5158, $P5163
    box $P5164, 6
    push $P5158, $P5164
    push $P5141, $P5158
    new $P5165, 'ResizablePMCArray'
    box $P5166, 0
    push $P5165, $P5166
    box $P5167, 0
    push $P5165, $P5167
    box $P5168, 0
    push $P5165, $P5168
    push $P5141, $P5165
    new $P5169, 'ResizablePMCArray'
    box $P5170, 2
    push $P5169, $P5170
    box $P5171, 61
    push $P5169, $P5171
    box $P5172, 7
    push $P5169, $P5172
    box $P5173, 4
    push $P5169, $P5173
    box $P5174, 4096
    push $P5169, $P5174
    box $P5175, 5
    push $P5169, $P5175
    push $P5141, $P5169
    new $P5176, 'ResizablePMCArray'
    box $P5177, 2
    push $P5176, $P5177
    box $P5178, 99
    push $P5176, $P5178
    box $P5179, 8
    push $P5176, $P5179
    box $P5180, 1
    push $P5176, $P5180
    box $P5181, 0
    push $P5176, $P5181
    box $P5182, 5
    push $P5176, $P5182
    push $P5141, $P5176
    new $P5183, 'ResizablePMCArray'
    box $P5184, 2
    push $P5183, $P5184
    box $P5185, 117
    push $P5183, $P5185
    box $P5186, 9
    push $P5183, $P5186
    push $P5141, $P5183
    new $P5187, 'ResizablePMCArray'
    box $P5188, 2
    push $P5187, $P5188
    box $P5189, 116
    push $P5187, $P5189
    box $P5190, 10
    push $P5187, $P5190
    push $P5141, $P5187
    new $P5191, 'ResizablePMCArray'
    box $P5192, 1
    push $P5191, $P5192
    box $P5193, 0
    push $P5191, $P5193
    box $P5194, 11
    push $P5191, $P5194
    push $P5141, $P5191
    new $P5195, 'ResizablePMCArray'
    box $P5196, 8
    push $P5195, $P5196
    box $P5197, "panic"
    push $P5195, $P5197
    box $P5198, 5
    push $P5195, $P5198
    push $P5141, $P5195
    push $P5001, $P5141
    new $P5199, 'ResizablePMCArray'
    new $P5200, 'ResizablePMCArray'
    push $P5199, $P5200
    new $P5201, 'ResizablePMCArray'
    box $P5202, 0
    push $P5201, $P5202
    box $P5203, 0
    push $P5201, $P5203
    box $P5204, 0
    push $P5201, $P5204
    box $P5205, 0
    push $P5201, $P5205
    box $P5206, 0
    push $P5201, $P5206
    box $P5207, 0
    push $P5201, $P5207
    push $P5199, $P5201
    push $P5001, $P5199
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_41_1347719921.536") :anon :lex :outer("cuid_42_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx155_tgt
    .local int rx155_pos
    .local int rx155_off
    .local int rx155_eos
    .local int rx155_rep
    .local pmc rx155_cur
    .local pmc rx155_curclass
    .local pmc rx155_bstack
    .local pmc rx155_cstack
    (rx155_cur, rx155_tgt, rx155_pos, rx155_curclass, rx155_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx155_cur
    length rx155_eos, rx155_tgt
    eq $I19, 1, rx155_restart542
    gt rx155_pos, rx155_eos, rx155_fail543
    repr_get_attr_int $I11, self, rx155_curclass, "$!from"
    ne $I11, -1, rxscan156_done549
    goto rxscan156_scan548
  rxscan156_loop547:
    inc rx155_pos
    gt rx155_pos, rx155_eos, rx155_fail543
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!from", rx155_pos
  rxscan156_scan548:
    nqp_rxmark rx155_bstack, rxscan156_loop547, rx155_pos, 0
  rxscan156_done549:
    nqp_rxmark rx155_bstack, rxquantr157_done551, rx155_pos, 0
  rxquantr157_loop550:
    ge rx155_pos, rx155_eos, rx155_fail543
    substr $S11, rx155_tgt, rx155_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx155_fail543
    inc rx155_pos
    nqp_rxpeek $I19, rx155_bstack, rxquantr157_done551
    inc $I19
    inc $I19
    set rx155_rep, rx155_bstack[$I19]
    nqp_rxcommit rx155_bstack, rxquantr157_done551
    inc rx155_rep
    nqp_rxmark rx155_bstack, rxquantr157_done551, rx155_pos, rx155_rep
    goto rxquantr157_loop550
  rxquantr157_done551:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt158_0553
    nqp_push_label $P11, alt158_1558
    nqp_rxmark rx155_bstack, alt158_end552, -1, 0
    rx155_cur."!alt"(rx155_pos, "alt_nfa__5_1347719922.826", $P11)
    goto rx155_fail543
  alt158_0553:
    add $I11, rx155_pos, 1
    gt $I11, rx155_eos, rx155_fail543
    substr $S10, rx155_tgt, rx155_pos, 1
    ne $S10, ucs4:"=", rx155_fail543
    add rx155_pos, 1
    nqp_rxmark rx155_bstack, rxquantr159_done555, rx155_pos, 0
  rxquantr159_loop554:
    add $I11, rx155_pos, 3
    gt $I11, rx155_eos, rx155_fail543
    substr $S10, rx155_tgt, rx155_pos, 3
    ne $S10, ucs4:"cut", rx155_fail543
    add rx155_pos, 3
    le rx155_pos, 0, rx155_fail543
    is_cclass $I11, .CCLASS_WORD, rx155_tgt, rx155_pos
    if $I11, rx155_fail543
    sub $I11, rx155_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx155_tgt, $I11
    unless $I11, rx155_fail543
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!pos", rx155_pos
    $P11 = rx155_cur."panic"("Obsolete pod format, please use =begin/=end instead")
    repr_get_attr_int $I11, $P11, rx155_curclass, "$!pos"
    lt $I11, 0, rx155_fail543
    repr_get_attr_int rx155_pos, $P11, rx155_curclass, "$!pos"
    nqp_rxpeek $I19, rx155_bstack, rxquantr159_done555
    inc $I19
    inc $I19
    set rx155_rep, rx155_bstack[$I19]
    nqp_rxcommit rx155_bstack, rxquantr159_done555
    inc rx155_rep
  rxquantr159_done555:
    goto alt158_end552
  alt158_1558:
    ge rx155_pos, rx155_eos, rx155_fail543
    is_cclass $I11, .CCLASS_NEWLINE, rx155_tgt, rx155_pos
    unless $I11, rx155_fail543
    substr $S10, rx155_tgt, rx155_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx155_pos, $I11
    add rx155_pos, 1
    goto alt158_end552
  alt158_end552:
    nqp_rxcommit rx155_bstack, alt158_end552
    rx155_cur."!cursor_pass"(rx155_pos, 'backtrack'=>1)
    .return (rx155_cur)
  rx155_restart542:
    repr_get_attr_obj rx155_cstack, rx155_cur, rx155_curclass, "$!cstack"
  rx155_fail543:
    unless rx155_bstack, rx155_done541
    pop $I19, rx155_bstack
    if_null rx155_cstack, rx155_cstack_done546
    unless rx155_cstack, rx155_cstack_done546
    dec $I19
    set $P11, rx155_cstack[$I19]
  rx155_cstack_done546:
    pop rx155_rep, rx155_bstack
    pop rx155_pos, rx155_bstack
    pop $I19, rx155_bstack
    lt rx155_pos, -1, rx155_done541
    lt rx155_pos, 0, rx155_fail543
    eq $I19, 0, rx155_fail543
    nqp_islist $I20, rx155_cstack
    unless $I20, rx155_jump544
    elements $I18, rx155_bstack
    le $I18, 0, rx155_cut545
    dec $I18
    set $I18, rx155_bstack[$I18]
  rx155_cut545:
    assign rx155_cstack, $I18
  rx155_jump544:
    jump $I19
  rx155_done541:
    rx155_cur."!cursor_fail"()
    .return (rx155_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_41_1347719921.536_caps" :subid("cuid_memo_21_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_41_1347719921.536_nfa" :subid("cuid_memo_22_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5003, $P5005
    box $P5006, 1
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 61
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    box $P5014, 4
    push $P5010, $P5014
    box $P5015, 4096
    push $P5010, $P5015
    box $P5016, 0
    push $P5010, $P5016
    push $P5001, $P5010
    new $P5017, 'ResizablePMCArray'
    box $P5018, 2
    push $P5017, $P5018
    box $P5019, 99
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    box $P5021, 1
    push $P5017, $P5021
    box $P5022, 0
    push $P5017, $P5022
    box $P5023, 0
    push $P5017, $P5023
    push $P5001, $P5017
    new $P5024, 'ResizablePMCArray'
    box $P5025, 2
    push $P5024, $P5025
    box $P5026, 117
    push $P5024, $P5026
    box $P5027, 5
    push $P5024, $P5027
    push $P5001, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 2
    push $P5028, $P5029
    box $P5030, 116
    push $P5028, $P5030
    box $P5031, 6
    push $P5028, $P5031
    push $P5001, $P5028
    new $P5032, 'ResizablePMCArray'
    box $P5033, 1
    push $P5032, $P5033
    box $P5034, 0
    push $P5032, $P5034
    box $P5035, 7
    push $P5032, $P5035
    push $P5001, $P5032
    new $P5036, 'ResizablePMCArray'
    box $P5037, 8
    push $P5036, $P5037
    box $P5038, "panic"
    push $P5036, $P5038
    box $P5039, 0
    push $P5036, $P5039
    push $P5001, $P5036
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_41_1347719921.536_alt_nfa__5_1347719922.826" :subid("cuid_memo_23_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 61
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 99
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    box $P5012, 1
    push $P5008, $P5012
    box $P5013, 0
    push $P5008, $P5013
    box $P5014, 0
    push $P5008, $P5014
    push $P5002, $P5008
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 117
    push $P5015, $P5017
    box $P5018, 4
    push $P5015, $P5018
    push $P5002, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 116
    push $P5019, $P5021
    box $P5022, 5
    push $P5019, $P5022
    push $P5002, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 1
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 6
    push $P5023, $P5026
    push $P5002, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "panic"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5002, $P5027
    push $P5001, $P5002
    new $P5031, 'ResizablePMCArray'
    new $P5032, 'ResizablePMCArray'
    push $P5031, $P5032
    new $P5033, 'ResizablePMCArray'
    box $P5034, 4
    push $P5033, $P5034
    box $P5035, 4096
    push $P5033, $P5035
    box $P5036, 0
    push $P5033, $P5036
    push $P5031, $P5033
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_43_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 690
    .param pmc _lex_param_0 
    .const 'Sub' $P5034 = 'cuid_386_1347719921.536' 
    capture_lex $P5034 
    .lex "$*IN_DECL", $P101 
    .lex "$*HAS_YOU_ARE_HERE", $P102 
    .lex "$*MAIN_SUB", $P103 
    .lex "$*UNIT", $P104 
    .lex "$*PACKAGE", $P105 
    .lex "$*GLOBALish", $P106 
    .lex utf8:"$\x{a2}", $P107 
    .lex "$/", $P108 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P105, $P5005
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P106, $P5006
    set self, _lex_param_0
    .local string rx165_tgt
    .local int rx165_pos
    .local int rx165_off
    .local int rx165_eos
    .local int rx165_rep
    .local pmc rx165_cur
    .local pmc rx165_curclass
    .local pmc rx165_bstack
    .local pmc rx165_cstack
    (rx165_cur, rx165_tgt, rx165_pos, rx165_curclass, rx165_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx165_cur
    length rx165_eos, rx165_tgt
    eq $I19, 1, rx165_restart568
    gt rx165_pos, rx165_eos, rx165_fail569
    repr_get_attr_int $I11, self, rx165_curclass, "$!from"
    ne $I11, -1, rxscan166_done575
    goto rxscan166_scan574
  rxscan166_loop573:
    inc rx165_pos
    gt rx165_pos, rx165_eos, rx165_fail569
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!from", rx165_pos
  rxscan166_scan574:
    nqp_rxmark rx165_bstack, rxscan166_loop573, rx165_pos, 0
  rxscan166_done575:
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    box $P5007, ""
    set $P101, $P5007
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    box $P5008, 0
    set $P102, $P5008
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    unless_null $P103, fallback576
    get_hll_global $P5011, "GLOBAL"
    get_who $P5010, $P5011
    set $P5009, $P5010["$MAIN_SUB"]
    unless_null $P5009, fallback577
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5012
  fallback577:
    unless_null $P5009, vivi_167578
    die "Contextual $*MAIN_SUB not found"
    box $P5013, "Contextual $*MAIN_SUB not found"
    set $P5009, $P5013
  vivi_167578:
    set $P103, $P5009
  fallback576:
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
.annotate 'line', 695
    find_dynamic_lex $P5014, "$*W"
    unless_null $P5014, fallback579
    get_hll_global $P5017, "GLOBAL"
    get_who $P5016, $P5017
    set $P5015, $P5016["$W"]
    unless_null $P5015, fallback580
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5015, $P5018
  fallback580:
    unless_null $P5015, vivi_168581
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5015, $P5019
  vivi_168581:
    set $P5014, $P5015
  fallback579:
    $P5020 = $P5014."push_lexpad"($P108)
    set $P104, $P5020
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    unless_null $P105, fallback582
    get_hll_global $P5023, "GLOBAL"
    get_who $P5022, $P5023
    set $P5021, $P5022["$PACKAGE"]
    unless_null $P5021, fallback583
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5021, $P5024
  fallback583:
    unless_null $P5021, vivi_169584
    die "Contextual $*PACKAGE not found"
    box $P5025, "Contextual $*PACKAGE not found"
    set $P5021, $P5025
  vivi_169584:
    set $P105, $P5021
  fallback582:
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    unless_null $P106, fallback585
    get_hll_global $P5028, "GLOBAL"
    get_who $P5027, $P5028
    set $P5026, $P5027["$GLOBALish"]
    unless_null $P5026, fallback586
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5026, $P5029
  fallback586:
    unless_null $P5026, vivi_170587
    die "Contextual $*GLOBALish not found"
    box $P5030, "Contextual $*GLOBALish not found"
    set $P5026, $P5030
  vivi_170587:
    set $P106, $P5026
  fallback585:
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    $P11 = rx165_cur."GLOBALish"()
    repr_get_attr_int $I11, $P11, rx165_curclass, "$!pos"
    lt $I11, 0, rx165_fail569
    repr_get_attr_int rx165_pos, $P11, rx165_curclass, "$!pos"
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    $P5031 = $P107."MATCH"()
    set $P108, $P5031
    .const 'Sub' $P5032 = 'cuid_386_1347719921.536' 
    capture_lex $P5032
    $P5033 = $P5032()
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    $P11 = rx165_cur."outerctx"()
    repr_get_attr_int $I11, $P11, rx165_curclass, "$!pos"
    lt $I11, 0, rx165_fail569
    repr_get_attr_int rx165_pos, $P11, rx165_curclass, "$!pos"
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    $P11 = rx165_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx165_curclass, "$!pos"
    lt $I11, 0, rx165_fail569
    nqp_rxmark rx165_bstack, rxsubrule174_pass593, -1, 0
  rxsubrule174_pass593:
    rx165_cstack = rx165_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx165_pos, $P11, rx165_curclass, "$!pos"
  alt175_0595:
    nqp_rxmark rx165_bstack, alt175_1597, rx165_pos, 0
    lt rx165_pos, rx165_eos, rx165_fail569
    goto alt175_end594
  alt175_1597:
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    $P11 = rx165_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx165_curclass, "$!pos"
    lt $I11, 0, rx165_fail569
    repr_get_attr_int rx165_pos, $P11, rx165_curclass, "$!pos"
  alt175_end594:
    rx165_cur."!cursor_pass"(rx165_pos, "comp_unit", 'backtrack'=>1)
    .return (rx165_cur)
  rx165_restart568:
    repr_get_attr_obj rx165_cstack, rx165_cur, rx165_curclass, "$!cstack"
  rx165_fail569:
    unless rx165_bstack, rx165_done567
    pop $I19, rx165_bstack
    if_null rx165_cstack, rx165_cstack_done572
    unless rx165_cstack, rx165_cstack_done572
    dec $I19
    set $P11, rx165_cstack[$I19]
  rx165_cstack_done572:
    pop rx165_rep, rx165_bstack
    pop rx165_pos, rx165_bstack
    pop $I19, rx165_bstack
    lt rx165_pos, -1, rx165_done567
    lt rx165_pos, 0, rx165_fail569
    eq $I19, 0, rx165_fail569
    nqp_islist $I20, rx165_cstack
    unless $I20, rx165_jump570
    elements $I18, rx165_bstack
    le $I18, 0, rx165_cut571
    dec $I18
    set $I18, rx165_bstack[$I18]
  rx165_cut571:
    assign rx165_cstack, $I18
  rx165_jump570:
    jump $I19
  rx165_done567:
    rx165_cur."!cursor_fail"()
    .return (rx165_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_43_1347719921.536_caps" :subid("cuid_memo_24_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statementlist"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_43_1347719921.536_nfa" :subid("cuid_memo_25_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 1
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 1
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 1
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 1
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "GLOBALish"
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_386_1347719921.536") :anon :lex :outer("cuid_43_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 701

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback589
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback590
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5005
  fallback590:
    unless_null $P5002, vivi_172591
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_172591:
    set $P5001, $P5002
  fallback589:
    $P5007 = $P5001."add_initializations"()
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_44_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 709
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx178_tgt
    .local int rx178_pos
    .local int rx178_off
    .local int rx178_eos
    .local int rx178_rep
    .local pmc rx178_cur
    .local pmc rx178_curclass
    .local pmc rx178_bstack
    .local pmc rx178_cstack
    (rx178_cur, rx178_tgt, rx178_pos, rx178_curclass, rx178_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx178_cur
    length rx178_eos, rx178_tgt
    eq $I19, 1, rx178_restart601
    gt rx178_pos, rx178_eos, rx178_fail602
    repr_get_attr_int $I11, self, rx178_curclass, "$!from"
    ne $I11, -1, rxscan179_done608
    goto rxscan179_scan607
  rxscan179_loop606:
    inc rx178_pos
    gt rx178_pos, rx178_eos, rx178_fail602
    repr_bind_attr_int rx178_cur, rx178_curclass, "$!from", rx178_pos
  rxscan179_scan607:
    nqp_rxmark rx178_bstack, rxscan179_loop606, rx178_pos, 0
  rxscan179_done608:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt180_0610
    nqp_push_label $P11, alt180_1614
    nqp_rxmark rx178_bstack, alt180_end609, -1, 0
    rx178_cur."!alt"(rx178_pos, "alt_nfa__7_1347719922.881", $P11)
    goto rx178_fail602
  alt180_0610:
    repr_bind_attr_int rx178_cur, rx178_curclass, "$!pos", rx178_pos
    $P11 = rx178_cur."ws"()
    repr_get_attr_int $I11, $P11, rx178_curclass, "$!pos"
    lt $I11, 0, rx178_fail602
    repr_get_attr_int rx178_pos, $P11, rx178_curclass, "$!pos"
    lt rx178_pos, rx178_eos, rx178_fail602
    repr_bind_attr_int rx178_cur, rx178_curclass, "$!pos", rx178_pos
    $P11 = rx178_cur."ws"()
    repr_get_attr_int $I11, $P11, rx178_curclass, "$!pos"
    lt $I11, 0, rx178_fail602
    repr_get_attr_int rx178_pos, $P11, rx178_curclass, "$!pos"
    goto alt180_end609
  alt180_1614:
    repr_bind_attr_int rx178_cur, rx178_curclass, "$!pos", rx178_pos
    $P11 = rx178_cur."ws"()
    repr_get_attr_int $I11, $P11, rx178_curclass, "$!pos"
    lt $I11, 0, rx178_fail602
    repr_get_attr_int rx178_pos, $P11, rx178_curclass, "$!pos"
    nqp_rxmark rx178_bstack, rxquantr185_done617, rx178_pos, 0
  rxquantr185_loop616:
    repr_bind_attr_int rx178_cur, rx178_curclass, "$!pos", rx178_pos
    $P11 = rx178_cur."statement"()
    repr_get_attr_int $I11, $P11, rx178_curclass, "$!pos"
    lt $I11, 0, rx178_fail602
    nqp_rxmark rx178_bstack, rxsubrule186_pass618, -1, 0
  rxsubrule186_pass618:
    rx178_cstack = rx178_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx178_pos, $P11, rx178_curclass, "$!pos"
    repr_bind_attr_int rx178_cur, rx178_curclass, "$!pos", rx178_pos
    $P11 = rx178_cur."eat_terminator"()
    repr_get_attr_int $I11, $P11, rx178_curclass, "$!pos"
    lt $I11, 0, rx178_fail602
    repr_get_attr_int rx178_pos, $P11, rx178_curclass, "$!pos"
    repr_bind_attr_int rx178_cur, rx178_curclass, "$!pos", rx178_pos
    $P11 = rx178_cur."ws"()
    repr_get_attr_int $I11, $P11, rx178_curclass, "$!pos"
    lt $I11, 0, rx178_fail602
    repr_get_attr_int rx178_pos, $P11, rx178_curclass, "$!pos"
    nqp_rxpeek $I19, rx178_bstack, rxquantr185_done617
    inc $I19
    inc $I19
    set rx178_rep, rx178_bstack[$I19]
    nqp_rxcommit rx178_bstack, rxquantr185_done617
    inc rx178_rep
    nqp_rxmark rx178_bstack, rxquantr185_done617, rx178_pos, rx178_rep
    goto rxquantr185_loop616
  rxquantr185_done617:
    repr_bind_attr_int rx178_cur, rx178_curclass, "$!pos", rx178_pos
    $P11 = rx178_cur."ws"()
    repr_get_attr_int $I11, $P11, rx178_curclass, "$!pos"
    lt $I11, 0, rx178_fail602
    repr_get_attr_int rx178_pos, $P11, rx178_curclass, "$!pos"
    goto alt180_end609
  alt180_end609:
    rx178_cur."!cursor_pass"(rx178_pos, "statementlist", 'backtrack'=>1)
    .return (rx178_cur)
  rx178_restart601:
    repr_get_attr_obj rx178_cstack, rx178_cur, rx178_curclass, "$!cstack"
  rx178_fail602:
    unless rx178_bstack, rx178_done600
    pop $I19, rx178_bstack
    if_null rx178_cstack, rx178_cstack_done605
    unless rx178_cstack, rx178_cstack_done605
    dec $I19
    set $P11, rx178_cstack[$I19]
  rx178_cstack_done605:
    pop rx178_rep, rx178_bstack
    pop rx178_pos, rx178_bstack
    pop $I19, rx178_bstack
    lt rx178_pos, -1, rx178_done600
    lt rx178_pos, 0, rx178_fail602
    eq $I19, 0, rx178_fail602
    nqp_islist $I20, rx178_cstack
    unless $I20, rx178_jump603
    elements $I18, rx178_bstack
    le $I18, 0, rx178_cut604
    dec $I18
    set $I18, rx178_bstack[$I18]
  rx178_cut604:
    assign rx178_cstack, $I18
  rx178_jump603:
    jump $I19
  rx178_done600:
    rx178_cur."!cursor_fail"()
    .return (rx178_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_44_1347719921.536_caps" :subid("cuid_memo_26_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["statement"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_44_1347719921.536_alt_nfa__7_1347719922.881" :subid("cuid_memo_27_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_46_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 714
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_45_1347719921.536' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx190_tgt
    .local int rx190_pos
    .local int rx190_off
    .local int rx190_eos
    .local int rx190_rep
    .local pmc rx190_cur
    .local pmc rx190_curclass
    .local pmc rx190_bstack
    .local pmc rx190_cstack
    (rx190_cur, rx190_tgt, rx190_pos, rx190_curclass, rx190_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx190_cur
    length rx190_eos, rx190_tgt
    eq $I19, 1, rx190_restart624
    gt rx190_pos, rx190_eos, rx190_fail625
    repr_get_attr_int $I11, self, rx190_curclass, "$!from"
    ne $I11, -1, rxscan191_done631
    goto rxscan191_scan630
  rxscan191_loop629:
    inc rx190_pos
    gt rx190_pos, rx190_eos, rx190_fail625
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!from", rx190_pos
  rxscan191_scan630:
    nqp_rxmark rx190_bstack, rxscan191_loop629, rx190_pos, 0
  rxscan191_done631:
    .const 'Sub' $P5001 = 'cuid_45_1347719921.536' 
    capture_lex $P5001
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    ge $I11, 0, rx190_fail625
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt197_0650
    nqp_push_label $P11, alt197_1652
    nqp_rxmark rx190_bstack, alt197_end649, -1, 0
    rx190_cur."!alt"(rx190_pos, "alt_nfa__9_1347719922.9", $P11)
    goto rx190_fail625
  alt197_0650:
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."statement_control"()
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    lt $I11, 0, rx190_fail625
    nqp_rxmark rx190_bstack, rxsubrule198_pass651, -1, 0
  rxsubrule198_pass651:
    rx190_cstack = rx190_cur."!cursor_capture"($P11, "statement_control")
    repr_get_attr_int rx190_pos, $P11, rx190_curclass, "$!pos"
    goto alt197_end649
  alt197_1652:
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    lt $I11, 0, rx190_fail625
    nqp_rxmark rx190_bstack, rxsubrule199_pass653, -1, 0
  rxsubrule199_pass653:
    rx190_cstack = rx190_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx190_pos, $P11, rx190_curclass, "$!pos"
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."ws"()
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    lt $I11, 0, rx190_fail625
    repr_get_attr_int rx190_pos, $P11, rx190_curclass, "$!pos"
    nqp_rxmark rx190_bstack, rxquantr201_done656, rx190_pos, 0
  rxquantr201_loop655:
  alt202_0658:
    nqp_rxmark rx190_bstack, alt202_1659, rx190_pos, 0
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    lt $I11, 0, rx190_fail625
    goto alt202_end657
  alt202_1659:
    nqp_rxmark rx190_bstack, alt202_2665, rx190_pos, 0
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."statement_mod_cond"()
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    lt $I11, 0, rx190_fail625
    nqp_rxmark rx190_bstack, rxsubrule203_pass660, -1, 0
  rxsubrule203_pass660:
    rx190_cstack = rx190_cur."!cursor_capture"($P11, "statement_mod_cond")
    repr_get_attr_int rx190_pos, $P11, rx190_curclass, "$!pos"
    nqp_rxmark rx190_bstack, rxquantr204_done662, rx190_pos, 0
  rxquantr204_loop661:
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    lt $I11, 0, rx190_fail625
    goto rxsubrule205_pass663
  rxsubrule205_back664:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    lt $I11, 0, rx190_fail625
  rxsubrule205_pass663:
    rx190_cstack = rx190_cur."!cursor_capture"($P11, "statement_mod_loop")
    set_addr $I11, rxsubrule205_back664
    push rx190_bstack, $I11
    push rx190_bstack, 0
    push rx190_bstack, rx190_pos
    elements $I11, rx190_cstack
    push rx190_bstack, $I11
    repr_get_attr_int rx190_pos, $P11, rx190_curclass, "$!pos"
    nqp_rxpeek $I19, rx190_bstack, rxquantr204_done662
    inc $I19
    inc $I19
    set rx190_rep, rx190_bstack[$I19]
    nqp_rxcommit rx190_bstack, rxquantr204_done662
    inc rx190_rep
  rxquantr204_done662:
    goto alt202_end657
  alt202_2665:
    repr_bind_attr_int rx190_cur, rx190_curclass, "$!pos", rx190_pos
    $P11 = rx190_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx190_curclass, "$!pos"
    lt $I11, 0, rx190_fail625
    nqp_rxmark rx190_bstack, rxsubrule206_pass666, -1, 0
  rxsubrule206_pass666:
    rx190_cstack = rx190_cur."!cursor_capture"($P11, "statement_mod_loop")
    repr_get_attr_int rx190_pos, $P11, rx190_curclass, "$!pos"
  alt202_end657:
    nqp_rxpeek $I19, rx190_bstack, rxquantr201_done656
    inc $I19
    inc $I19
    set rx190_rep, rx190_bstack[$I19]
    nqp_rxcommit rx190_bstack, rxquantr201_done656
    inc rx190_rep
  rxquantr201_done656:
    goto alt197_end649
  alt197_end649:
    nqp_rxcommit rx190_bstack, alt197_end649
    rx190_cur."!cursor_pass"(rx190_pos, "statement", 'backtrack'=>1)
    .return (rx190_cur)
  rx190_restart624:
    repr_get_attr_obj rx190_cstack, rx190_cur, rx190_curclass, "$!cstack"
  rx190_fail625:
    unless rx190_bstack, rx190_done623
    pop $I19, rx190_bstack
    if_null rx190_cstack, rx190_cstack_done628
    unless rx190_cstack, rx190_cstack_done628
    dec $I19
    set $P11, rx190_cstack[$I19]
  rx190_cstack_done628:
    pop rx190_rep, rx190_bstack
    pop rx190_pos, rx190_bstack
    pop $I19, rx190_bstack
    lt rx190_pos, -1, rx190_done623
    lt rx190_pos, 0, rx190_fail625
    eq $I19, 0, rx190_fail625
    nqp_islist $I20, rx190_cstack
    unless $I20, rx190_jump626
    elements $I18, rx190_bstack
    le $I18, 0, rx190_cut627
    dec $I18
    set $I18, rx190_bstack[$I18]
  rx190_cut627:
    assign rx190_cstack, $I18
  rx190_jump626:
    jump $I19
  rx190_done623:
    rx190_cur."!cursor_fail"()
    .return (rx190_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_46_1347719921.536_caps" :subid("cuid_memo_28_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statement_control"], $P5002
    box $P5003, 0
    set $P5001["EXPR"], $P5003
    box $P5004, 2
    set $P5001["statement_mod_cond"], $P5004
    box $P5005, 2
    set $P5001["statement_mod_loop"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_46_1347719921.536_alt_nfa__9_1347719922.9" :subid("cuid_memo_29_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "statement_control"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "EXPR"
    push $P5010, $P5012
    box $P5013, 2
    push $P5010, $P5013
    push $P5008, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "ws"
    push $P5014, $P5016
    box $P5017, 3
    push $P5014, $P5017
    push $P5008, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 0
    push $P5018, $P5019
    box $P5020, 0
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    box $P5022, 1
    push $P5018, $P5022
    box $P5023, 0
    push $P5018, $P5023
    box $P5024, 0
    push $P5018, $P5024
    push $P5008, $P5018
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_45_1347719921.536") :anon :lex :outer("cuid_46_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx192_tgt
    .local int rx192_pos
    .local int rx192_off
    .local int rx192_eos
    .local int rx192_rep
    .local pmc rx192_cur
    .local pmc rx192_curclass
    .local pmc rx192_bstack
    .local pmc rx192_cstack
    (rx192_cur, rx192_tgt, rx192_pos, rx192_curclass, rx192_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx192_cur
    length rx192_eos, rx192_tgt
    eq $I19, 1, rx192_restart634
    gt rx192_pos, rx192_eos, rx192_fail635
    repr_get_attr_int $I11, self, rx192_curclass, "$!from"
    ne $I11, -1, rxscan193_done641
    goto rxscan193_scan640
  rxscan193_loop639:
    inc rx192_pos
    gt rx192_pos, rx192_eos, rx192_fail635
    repr_bind_attr_int rx192_cur, rx192_curclass, "$!from", rx192_pos
  rxscan193_scan640:
    nqp_rxmark rx192_bstack, rxscan193_loop639, rx192_pos, 0
  rxscan193_done641:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt194_0643
    nqp_push_label $P11, alt194_1647
    nqp_rxmark rx192_bstack, alt194_end642, -1, 0
    rx192_cur."!alt"(rx192_pos, "alt_nfa__8_1347719922.887", $P11)
    goto rx192_fail635
  alt194_0643:
  alt195_0645:
    nqp_rxmark rx192_bstack, alt195_1646, rx192_pos, 0
    add $I11, rx192_pos, 1
    gt $I11, rx192_eos, rx192_fail635
    substr $S10, rx192_tgt, rx192_pos, 1
    ne $S10, ucs4:"]", rx192_fail635
    add rx192_pos, 1
    goto alt195_end644
  alt195_1646:
    ge rx192_pos, rx192_eos, rx192_fail635
    substr $S11, rx192_tgt, rx192_pos, 1
    index $I11, ucs4:")}", $S11
    lt $I11, 0, rx192_fail635
    inc rx192_pos
  alt195_end644:
    goto alt194_end642
  alt194_1647:
    lt rx192_pos, rx192_eos, rx192_fail635
    goto alt194_end642
  alt194_end642:
    rx192_cur."!cursor_pass"(rx192_pos, 'backtrack'=>1)
    .return (rx192_cur)
  rx192_restart634:
    repr_get_attr_obj rx192_cstack, rx192_cur, rx192_curclass, "$!cstack"
  rx192_fail635:
    unless rx192_bstack, rx192_done633
    pop $I19, rx192_bstack
    if_null rx192_cstack, rx192_cstack_done638
    unless rx192_cstack, rx192_cstack_done638
    dec $I19
    set $P11, rx192_cstack[$I19]
  rx192_cstack_done638:
    pop rx192_rep, rx192_bstack
    pop rx192_pos, rx192_bstack
    pop $I19, rx192_bstack
    lt rx192_pos, -1, rx192_done633
    lt rx192_pos, 0, rx192_fail635
    eq $I19, 0, rx192_fail635
    nqp_islist $I20, rx192_cstack
    unless $I20, rx192_jump636
    elements $I18, rx192_bstack
    le $I18, 0, rx192_cut637
    dec $I18
    set $I18, rx192_bstack[$I18]
  rx192_cut637:
    assign rx192_cstack, $I18
  rx192_jump636:
    jump $I19
  rx192_done633:
    rx192_cur."!cursor_fail"()
    .return (rx192_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_45_1347719921.536_caps" :subid("cuid_memo_30_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_45_1347719921.536_nfa" :subid("cuid_memo_31_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 0
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 0
    push $P5003, $P5009
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_45_1347719921.536_alt_nfa__8_1347719922.887" :subid("cuid_memo_32_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 1
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "eat_terminator" :subid("cuid_47_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 727
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx207_tgt
    .local int rx207_pos
    .local int rx207_off
    .local int rx207_eos
    .local int rx207_rep
    .local pmc rx207_cur
    .local pmc rx207_curclass
    .local pmc rx207_bstack
    .local pmc rx207_cstack
    (rx207_cur, rx207_tgt, rx207_pos, rx207_curclass, rx207_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx207_cur
    length rx207_eos, rx207_tgt
    eq $I19, 1, rx207_restart669
    gt rx207_pos, rx207_eos, rx207_fail670
    repr_get_attr_int $I11, self, rx207_curclass, "$!from"
    ne $I11, -1, rxscan208_done676
    goto rxscan208_scan675
  rxscan208_loop674:
    inc rx207_pos
    gt rx207_pos, rx207_eos, rx207_fail670
    repr_bind_attr_int rx207_cur, rx207_curclass, "$!from", rx207_pos
  rxscan208_scan675:
    nqp_rxmark rx207_bstack, rxscan208_loop674, rx207_pos, 0
  rxscan208_done676:
  alt209_0678:
    nqp_rxmark rx207_bstack, alt209_1679, rx207_pos, 0
    add $I11, rx207_pos, 1
    gt $I11, rx207_eos, rx207_fail670
    substr $S10, rx207_tgt, rx207_pos, 1
    ne $S10, ucs4:";", rx207_fail670
    add rx207_pos, 1
    goto alt209_end677
  alt209_1679:
    nqp_rxmark rx207_bstack, alt209_2680, rx207_pos, 0
    repr_bind_attr_int rx207_cur, rx207_curclass, "$!pos", rx207_pos
    $P11 = rx207_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx207_curclass, "$!pos"
    lt $I11, 0, rx207_fail670
    goto alt209_end677
  alt209_2680:
    nqp_rxmark rx207_bstack, alt209_3681, rx207_pos, 0
    repr_bind_attr_int rx207_cur, rx207_curclass, "$!pos", rx207_pos
    $P11 = rx207_cur."terminator"()
    repr_get_attr_int $I11, $P11, rx207_curclass, "$!pos"
    lt $I11, 0, rx207_fail670
    goto alt209_end677
  alt209_3681:
    lt rx207_pos, rx207_eos, rx207_fail670
  alt209_end677:
    rx207_cur."!cursor_pass"(rx207_pos, "eat_terminator", 'backtrack'=>1)
    .return (rx207_cur)
  rx207_restart669:
    repr_get_attr_obj rx207_cstack, rx207_cur, rx207_curclass, "$!cstack"
  rx207_fail670:
    unless rx207_bstack, rx207_done668
    pop $I19, rx207_bstack
    if_null rx207_cstack, rx207_cstack_done673
    unless rx207_cstack, rx207_cstack_done673
    dec $I19
    set $P11, rx207_cstack[$I19]
  rx207_cstack_done673:
    pop rx207_rep, rx207_bstack
    pop rx207_pos, rx207_bstack
    pop $I19, rx207_bstack
    lt rx207_pos, -1, rx207_done668
    lt rx207_pos, 0, rx207_fail670
    eq $I19, 0, rx207_fail670
    nqp_islist $I20, rx207_cstack
    unless $I20, rx207_jump671
    elements $I18, rx207_bstack
    le $I18, 0, rx207_cut672
    dec $I18
    set $I18, rx207_bstack[$I18]
  rx207_cut672:
    assign rx207_cstack, $I18
  rx207_jump671:
    jump $I19
  rx207_done668:
    rx207_cur."!cursor_fail"()
    .return (rx207_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_47_1347719921.536_caps" :subid("cuid_memo_33_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_48_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 734
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx211_tgt
    .local int rx211_pos
    .local int rx211_off
    .local int rx211_eos
    .local int rx211_rep
    .local pmc rx211_cur
    .local pmc rx211_curclass
    .local pmc rx211_bstack
    .local pmc rx211_cstack
    (rx211_cur, rx211_tgt, rx211_pos, rx211_curclass, rx211_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx211_cur
    length rx211_eos, rx211_tgt
    eq $I19, 1, rx211_restart685
    gt rx211_pos, rx211_eos, rx211_fail686
    repr_get_attr_int $I11, self, rx211_curclass, "$!from"
    ne $I11, -1, rxscan212_done692
    goto rxscan212_scan691
  rxscan212_loop690:
    inc rx211_pos
    gt rx211_pos, rx211_eos, rx211_fail686
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!from", rx211_pos
  rxscan212_scan691:
    nqp_rxmark rx211_bstack, rxscan212_loop690, rx211_pos, 0
  rxscan212_done692:
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail686
    nqp_rxmark rx211_bstack, rxsubrule213_pass693, -1, 0
  rxsubrule213_pass693:
    rx211_cstack = rx211_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx211_pos, $P11, rx211_curclass, "$!pos"
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."ws"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail686
    repr_get_attr_int rx211_pos, $P11, rx211_curclass, "$!pos"
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail686
    nqp_rxmark rx211_bstack, rxsubrule215_pass695, -1, 0
  rxsubrule215_pass695:
    rx211_cstack = rx211_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx211_pos, $P11, rx211_curclass, "$!pos"
    rx211_cur."!cursor_pass"(rx211_pos, "xblock", 'backtrack'=>1)
    .return (rx211_cur)
  rx211_restart685:
    repr_get_attr_obj rx211_cstack, rx211_cur, rx211_curclass, "$!cstack"
  rx211_fail686:
    unless rx211_bstack, rx211_done684
    pop $I19, rx211_bstack
    if_null rx211_cstack, rx211_cstack_done689
    unless rx211_cstack, rx211_cstack_done689
    dec $I19
    set $P11, rx211_cstack[$I19]
  rx211_cstack_done689:
    pop rx211_rep, rx211_bstack
    pop rx211_pos, rx211_bstack
    pop $I19, rx211_bstack
    lt rx211_pos, -1, rx211_done684
    lt rx211_pos, 0, rx211_fail686
    eq $I19, 0, rx211_fail686
    nqp_islist $I20, rx211_cstack
    unless $I20, rx211_jump687
    elements $I18, rx211_bstack
    le $I18, 0, rx211_cut688
    dec $I18
    set $I18, rx211_bstack[$I18]
  rx211_cut688:
    assign rx211_cstack, $I18
  rx211_jump687:
    jump $I19
  rx211_done684:
    rx211_cur."!cursor_fail"()
    .return (rx211_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_48_1347719921.536_caps" :subid("cuid_memo_34_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    box $P5003, 0
    set $P5001["pblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_48_1347719921.536_nfa" :subid("cuid_memo_35_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "EXPR"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "pblock"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_49_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 738
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx216_tgt
    .local int rx216_pos
    .local int rx216_off
    .local int rx216_eos
    .local int rx216_rep
    .local pmc rx216_cur
    .local pmc rx216_curclass
    .local pmc rx216_bstack
    .local pmc rx216_cstack
    (rx216_cur, rx216_tgt, rx216_pos, rx216_curclass, rx216_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx216_cur
    length rx216_eos, rx216_tgt
    eq $I19, 1, rx216_restart698
    gt rx216_pos, rx216_eos, rx216_fail699
    repr_get_attr_int $I11, self, rx216_curclass, "$!from"
    ne $I11, -1, rxscan217_done705
    goto rxscan217_scan704
  rxscan217_loop703:
    inc rx216_pos
    gt rx216_pos, rx216_eos, rx216_fail699
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!from", rx216_pos
  rxscan217_scan704:
    nqp_rxmark rx216_bstack, rxscan217_loop703, rx216_pos, 0
  rxscan217_done705:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt218_0707
    nqp_push_label $P11, alt218_1712
    nqp_push_label $P11, alt218_2715
    nqp_rxmark rx216_bstack, alt218_end706, -1, 0
    rx216_cur."!alt"(rx216_pos, "alt_nfa__10_1347719922.927", $P11)
    goto rx216_fail699
  alt218_0707:
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!pos", rx216_pos
    $P11 = rx216_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx216_curclass, "$!pos"
    lt $I11, 0, rx216_fail699
    repr_get_attr_int rx216_pos, $P11, rx216_curclass, "$!pos"
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!pos", rx216_pos
    $P11 = rx216_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx216_curclass, "$!pos"
    lt $I11, 0, rx216_fail699
    repr_get_attr_int rx216_pos, $P11, rx216_curclass, "$!pos"
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!pos", rx216_pos
    $P11 = rx216_cur."signature"()
    repr_get_attr_int $I11, $P11, rx216_curclass, "$!pos"
    lt $I11, 0, rx216_fail699
    nqp_rxmark rx216_bstack, rxsubrule221_pass710, -1, 0
  rxsubrule221_pass710:
    rx216_cstack = rx216_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx216_pos, $P11, rx216_curclass, "$!pos"
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!pos", rx216_pos
    $P11 = rx216_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx216_curclass, "$!pos"
    lt $I11, 0, rx216_fail699
    nqp_rxmark rx216_bstack, rxsubrule222_pass711, -1, 0
  rxsubrule222_pass711:
    rx216_cstack = rx216_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx216_pos, $P11, rx216_curclass, "$!pos"
    goto alt218_end706
  alt218_1712:
    ge rx216_pos, rx216_eos, rx216_fail699
    substr $S11, rx216_tgt, rx216_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx216_fail699
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!pos", rx216_pos
    $P11 = rx216_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx216_curclass, "$!pos"
    lt $I11, 0, rx216_fail699
    repr_get_attr_int rx216_pos, $P11, rx216_curclass, "$!pos"
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!pos", rx216_pos
    $P11 = rx216_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx216_curclass, "$!pos"
    lt $I11, 0, rx216_fail699
    nqp_rxmark rx216_bstack, rxsubrule224_pass714, -1, 0
  rxsubrule224_pass714:
    rx216_cstack = rx216_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx216_pos, $P11, rx216_curclass, "$!pos"
    goto alt218_end706
  alt218_2715:
    repr_bind_attr_int rx216_cur, rx216_curclass, "$!pos", rx216_pos
    $P11 = rx216_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx216_curclass, "$!pos"
    lt $I11, 0, rx216_fail699
    repr_get_attr_int rx216_pos, $P11, rx216_curclass, "$!pos"
    goto alt218_end706
  alt218_end706:
    rx216_cur."!cursor_pass"(rx216_pos, "pblock", 'backtrack'=>1)
    .return (rx216_cur)
  rx216_restart698:
    repr_get_attr_obj rx216_cstack, rx216_cur, rx216_curclass, "$!cstack"
  rx216_fail699:
    unless rx216_bstack, rx216_done697
    pop $I19, rx216_bstack
    if_null rx216_cstack, rx216_cstack_done702
    unless rx216_cstack, rx216_cstack_done702
    dec $I19
    set $P11, rx216_cstack[$I19]
  rx216_cstack_done702:
    pop rx216_rep, rx216_bstack
    pop rx216_pos, rx216_bstack
    pop $I19, rx216_bstack
    lt rx216_pos, -1, rx216_done697
    lt rx216_pos, 0, rx216_fail699
    eq $I19, 0, rx216_fail699
    nqp_islist $I20, rx216_cstack
    unless $I20, rx216_jump700
    elements $I18, rx216_bstack
    le $I18, 0, rx216_cut701
    dec $I18
    set $I18, rx216_bstack[$I18]
  rx216_cut701:
    assign rx216_cstack, $I18
  rx216_jump700:
    jump $I19
  rx216_done697:
    rx216_cur."!cursor_fail"()
    .return (rx216_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_49_1347719921.536_caps" :subid("cuid_memo_36_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["signature"], $P5002
    box $P5003, 0
    set $P5001["blockoid"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_49_1347719921.536_nfa" :subid("cuid_memo_37_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "lambda"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 6
    push $P5003, $P5007
    box $P5008, "{"
    push $P5003, $P5008
    box $P5009, 5
    push $P5003, $P5009
    box $P5010, 8
    push $P5003, $P5010
    box $P5011, "panic"
    push $P5003, $P5011
    box $P5012, 0
    push $P5003, $P5012
    push $P5001, $P5003
    new $P5013, 'ResizablePMCArray'
    box $P5014, 8
    push $P5013, $P5014
    box $P5015, "newpad"
    push $P5013, $P5015
    box $P5016, 3
    push $P5013, $P5016
    push $P5001, $P5013
    new $P5017, 'ResizablePMCArray'
    box $P5018, 8
    push $P5017, $P5018
    box $P5019, "signature"
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    push $P5001, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 8
    push $P5021, $P5022
    box $P5023, "blockoid"
    push $P5021, $P5023
    box $P5024, 0
    push $P5021, $P5024
    push $P5001, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 0
    push $P5025, $P5026
    box $P5027, 0
    push $P5025, $P5027
    box $P5028, 0
    push $P5025, $P5028
    push $P5001, $P5025
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_49_1347719921.536_alt_nfa__10_1347719922.927" :subid("cuid_memo_38_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "lambda"
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 8
    push $P5008, $P5009
    box $P5010, "newpad"
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 8
    push $P5012, $P5013
    box $P5014, "signature"
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 8
    push $P5016, $P5017
    box $P5018, "blockoid"
    push $P5016, $P5018
    box $P5019, 0
    push $P5016, $P5019
    push $P5002, $P5016
    push $P5001, $P5002
    new $P5020, 'ResizablePMCArray'
    new $P5021, 'ResizablePMCArray'
    push $P5020, $P5021
    new $P5022, 'ResizablePMCArray'
    box $P5023, 6
    push $P5022, $P5023
    box $P5024, "{"
    push $P5022, $P5024
    box $P5025, 2
    push $P5022, $P5025
    push $P5020, $P5022
    new $P5026, 'ResizablePMCArray'
    box $P5027, 0
    push $P5026, $P5027
    box $P5028, 0
    push $P5026, $P5028
    box $P5029, 0
    push $P5026, $P5029
    push $P5020, $P5026
    push $P5001, $P5020
    new $P5030, 'ResizablePMCArray'
    new $P5031, 'ResizablePMCArray'
    push $P5030, $P5031
    new $P5032, 'ResizablePMCArray'
    box $P5033, 8
    push $P5032, $P5033
    box $P5034, "panic"
    push $P5032, $P5034
    box $P5035, 0
    push $P5032, $P5035
    push $P5030, $P5032
    push $P5001, $P5030
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "lambda" :subid("cuid_50_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 749
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx226_tgt
    .local int rx226_pos
    .local int rx226_off
    .local int rx226_eos
    .local int rx226_rep
    .local pmc rx226_cur
    .local pmc rx226_curclass
    .local pmc rx226_bstack
    .local pmc rx226_cstack
    (rx226_cur, rx226_tgt, rx226_pos, rx226_curclass, rx226_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx226_cur
    length rx226_eos, rx226_tgt
    eq $I19, 1, rx226_restart719
    gt rx226_pos, rx226_eos, rx226_fail720
    repr_get_attr_int $I11, self, rx226_curclass, "$!from"
    ne $I11, -1, rxscan227_done726
    goto rxscan227_scan725
  rxscan227_loop724:
    inc rx226_pos
    gt rx226_pos, rx226_eos, rx226_fail720
    repr_bind_attr_int rx226_cur, rx226_curclass, "$!from", rx226_pos
  rxscan227_scan725:
    nqp_rxmark rx226_bstack, rxscan227_loop724, rx226_pos, 0
  rxscan227_done726:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt228_0728
    nqp_push_label $P11, alt228_1729
    nqp_rxmark rx226_bstack, alt228_end727, -1, 0
    rx226_cur."!alt"(rx226_pos, "alt_nfa__11_1347719922.933", $P11)
    goto rx226_fail720
  alt228_0728:
    add $I11, rx226_pos, 2
    gt $I11, rx226_eos, rx226_fail720
    substr $S10, rx226_tgt, rx226_pos, 2
    ne $S10, ucs4:"->", rx226_fail720
    add rx226_pos, 2
    goto alt228_end727
  alt228_1729:
    add $I11, rx226_pos, 3
    gt $I11, rx226_eos, rx226_fail720
    substr $S10, rx226_tgt, rx226_pos, 3
    ne $S10, ucs4:"<->", rx226_fail720
    add rx226_pos, 3
    goto alt228_end727
  alt228_end727:
    rx226_cur."!cursor_pass"(rx226_pos, "lambda", 'backtrack'=>1)
    .return (rx226_cur)
  rx226_restart719:
    repr_get_attr_obj rx226_cstack, rx226_cur, rx226_curclass, "$!cstack"
  rx226_fail720:
    unless rx226_bstack, rx226_done718
    pop $I19, rx226_bstack
    if_null rx226_cstack, rx226_cstack_done723
    unless rx226_cstack, rx226_cstack_done723
    dec $I19
    set $P11, rx226_cstack[$I19]
  rx226_cstack_done723:
    pop rx226_rep, rx226_bstack
    pop rx226_pos, rx226_bstack
    pop $I19, rx226_bstack
    lt rx226_pos, -1, rx226_done718
    lt rx226_pos, 0, rx226_fail720
    eq $I19, 0, rx226_fail720
    nqp_islist $I20, rx226_cstack
    unless $I20, rx226_jump721
    elements $I18, rx226_bstack
    le $I18, 0, rx226_cut722
    dec $I18
    set $I18, rx226_bstack[$I18]
  rx226_cut722:
    assign rx226_cstack, $I18
  rx226_jump721:
    jump $I19
  rx226_done718:
    rx226_cur."!cursor_fail"()
    .return (rx226_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_50_1347719921.536_caps" :subid("cuid_memo_39_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_50_1347719921.536_nfa" :subid("cuid_memo_40_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 2
    push $P5003, $P5007
    box $P5008, 60
    push $P5003, $P5008
    box $P5009, 3
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 62
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5001, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 45
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 62
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_50_1347719921.536_alt_nfa__11_1347719922.933" :subid("cuid_memo_41_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 45
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 62
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 60
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    push $P5012, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 45
    push $P5018, $P5020
    box $P5021, 3
    push $P5018, $P5021
    push $P5012, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 2
    push $P5022, $P5023
    box $P5024, 62
    push $P5022, $P5024
    box $P5025, 0
    push $P5022, $P5025
    push $P5012, $P5022
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_51_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 751
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx229_tgt
    .local int rx229_pos
    .local int rx229_off
    .local int rx229_eos
    .local int rx229_rep
    .local pmc rx229_cur
    .local pmc rx229_curclass
    .local pmc rx229_bstack
    .local pmc rx229_cstack
    (rx229_cur, rx229_tgt, rx229_pos, rx229_curclass, rx229_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx229_cur
    length rx229_eos, rx229_tgt
    eq $I19, 1, rx229_restart732
    gt rx229_pos, rx229_eos, rx229_fail733
    repr_get_attr_int $I11, self, rx229_curclass, "$!from"
    ne $I11, -1, rxscan230_done739
    goto rxscan230_scan738
  rxscan230_loop737:
    inc rx229_pos
    gt rx229_pos, rx229_eos, rx229_fail733
    repr_bind_attr_int rx229_cur, rx229_curclass, "$!from", rx229_pos
  rxscan230_scan738:
    nqp_rxmark rx229_bstack, rxscan230_loop737, rx229_pos, 0
  rxscan230_done739:
  alt231_0741:
    nqp_rxmark rx229_bstack, alt231_1742, rx229_pos, 0
    ge rx229_pos, rx229_eos, rx229_fail733
    substr $S11, rx229_tgt, rx229_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx229_fail733
    goto alt231_end740
  alt231_1742:
    repr_bind_attr_int rx229_cur, rx229_curclass, "$!pos", rx229_pos
    $P11 = rx229_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx229_curclass, "$!pos"
    lt $I11, 0, rx229_fail733
    repr_get_attr_int rx229_pos, $P11, rx229_curclass, "$!pos"
  alt231_end740:
    repr_bind_attr_int rx229_cur, rx229_curclass, "$!pos", rx229_pos
    $P11 = rx229_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx229_curclass, "$!pos"
    lt $I11, 0, rx229_fail733
    repr_get_attr_int rx229_pos, $P11, rx229_curclass, "$!pos"
    repr_bind_attr_int rx229_cur, rx229_curclass, "$!pos", rx229_pos
    $P11 = rx229_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx229_curclass, "$!pos"
    lt $I11, 0, rx229_fail733
    nqp_rxmark rx229_bstack, rxsubrule234_pass745, -1, 0
  rxsubrule234_pass745:
    rx229_cstack = rx229_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx229_pos, $P11, rx229_curclass, "$!pos"
    rx229_cur."!cursor_pass"(rx229_pos, "block", 'backtrack'=>1)
    .return (rx229_cur)
  rx229_restart732:
    repr_get_attr_obj rx229_cstack, rx229_cur, rx229_curclass, "$!cstack"
  rx229_fail733:
    unless rx229_bstack, rx229_done731
    pop $I19, rx229_bstack
    if_null rx229_cstack, rx229_cstack_done736
    unless rx229_cstack, rx229_cstack_done736
    dec $I19
    set $P11, rx229_cstack[$I19]
  rx229_cstack_done736:
    pop rx229_rep, rx229_bstack
    pop rx229_pos, rx229_bstack
    pop $I19, rx229_bstack
    lt rx229_pos, -1, rx229_done731
    lt rx229_pos, 0, rx229_fail733
    eq $I19, 0, rx229_fail733
    nqp_islist $I20, rx229_cstack
    unless $I20, rx229_jump734
    elements $I18, rx229_bstack
    le $I18, 0, rx229_cut735
    dec $I18
    set $I18, rx229_bstack[$I18]
  rx229_cut735:
    assign rx229_cstack, $I18
  rx229_jump734:
    jump $I19
  rx229_done731:
    rx229_cur."!cursor_fail"()
    .return (rx229_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_51_1347719921.536_caps" :subid("cuid_memo_42_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["blockoid"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_52_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 757
    .param pmc _lex_param_0 
    .lex "%*HANDLERS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx235_tgt
    .local int rx235_pos
    .local int rx235_off
    .local int rx235_eos
    .local int rx235_rep
    .local pmc rx235_cur
    .local pmc rx235_curclass
    .local pmc rx235_bstack
    .local pmc rx235_cstack
    (rx235_cur, rx235_tgt, rx235_pos, rx235_curclass, rx235_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx235_cur
    length rx235_eos, rx235_tgt
    eq $I19, 1, rx235_restart748
    gt rx235_pos, rx235_eos, rx235_fail749
    repr_get_attr_int $I11, self, rx235_curclass, "$!from"
    ne $I11, -1, rxscan236_done755
    goto rxscan236_scan754
  rxscan236_loop753:
    inc rx235_pos
    gt rx235_pos, rx235_eos, rx235_fail749
    repr_bind_attr_int rx235_cur, rx235_curclass, "$!from", rx235_pos
  rxscan236_scan754:
    nqp_rxmark rx235_bstack, rxscan236_loop753, rx235_pos, 0
  rxscan236_done755:
    repr_bind_attr_int rx235_cur, rx235_curclass, "$!pos", rx235_pos
    store_lex unicode:"$\x{a2}", rx235_cur
    unless_null $P101, fallback756
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback757
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback757:
    unless_null $P5002, vivi_237758
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_237758:
    set $P101, $P5002
  fallback756:
    repr_bind_attr_int rx235_cur, rx235_curclass, "$!pos", rx235_pos
    $P11 = rx235_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx235_curclass, "$!pos"
    lt $I11, 0, rx235_fail749
    repr_get_attr_int rx235_pos, $P11, rx235_curclass, "$!pos"
  alt239_0761:
    nqp_rxmark rx235_bstack, alt239_1763, rx235_pos, 0
    add $I11, rx235_pos, 14
    gt $I11, rx235_eos, rx235_fail749
    substr $S10, rx235_tgt, rx235_pos, 14
    ne $S10, ucs4:"{YOU_ARE_HERE}", rx235_fail749
    add rx235_pos, 14
    repr_bind_attr_int rx235_cur, rx235_curclass, "$!pos", rx235_pos
    $P11 = rx235_cur."you_are_here"()
    repr_get_attr_int $I11, $P11, rx235_curclass, "$!pos"
    lt $I11, 0, rx235_fail749
    nqp_rxmark rx235_bstack, rxsubrule240_pass762, -1, 0
  rxsubrule240_pass762:
    rx235_cstack = rx235_cur."!cursor_capture"($P11, "you_are_here")
    repr_get_attr_int rx235_pos, $P11, rx235_curclass, "$!pos"
    goto alt239_end760
  alt239_1763:
    add $I11, rx235_pos, 1
    gt $I11, rx235_eos, rx235_fail749
    substr $S10, rx235_tgt, rx235_pos, 1
    ne $S10, ucs4:"{", rx235_fail749
    add rx235_pos, 1
    repr_bind_attr_int rx235_cur, rx235_curclass, "$!pos", rx235_pos
    $P11 = rx235_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx235_curclass, "$!pos"
    lt $I11, 0, rx235_fail749
    nqp_rxmark rx235_bstack, rxsubrule241_pass764, -1, 0
  rxsubrule241_pass764:
    rx235_cstack = rx235_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx235_pos, $P11, rx235_curclass, "$!pos"
  alt242_0766:
    nqp_rxmark rx235_bstack, alt242_1767, rx235_pos, 0
    add $I11, rx235_pos, 1
    gt $I11, rx235_eos, rx235_fail749
    substr $S10, rx235_tgt, rx235_pos, 1
    ne $S10, ucs4:"}", rx235_fail749
    add rx235_pos, 1
    goto alt242_end765
  alt242_1767:
    repr_bind_attr_int rx235_cur, rx235_curclass, "$!pos", rx235_pos
    $P11 = rx235_cur."FAILGOAL"("'}'")
    repr_get_attr_int $I11, $P11, rx235_curclass, "$!pos"
    lt $I11, 0, rx235_fail749
    goto rxsubrule243_pass768
  rxsubrule243_back769:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx235_curclass, "$!pos"
    lt $I11, 0, rx235_fail749
  rxsubrule243_pass768:
    rx235_cstack = rx235_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule243_back769
    push rx235_bstack, $I11
    push rx235_bstack, 0
    push rx235_bstack, rx235_pos
    elements $I11, rx235_cstack
    push rx235_bstack, $I11
    repr_get_attr_int rx235_pos, $P11, rx235_curclass, "$!pos"
  alt242_end765:
  alt239_end760:
    repr_bind_attr_int rx235_cur, rx235_curclass, "$!pos", rx235_pos
    $P11 = rx235_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx235_curclass, "$!pos"
    lt $I11, 0, rx235_fail749
    rx235_cur."!cursor_pass"(rx235_pos, "blockoid", 'backtrack'=>1)
    .return (rx235_cur)
  rx235_restart748:
    repr_get_attr_obj rx235_cstack, rx235_cur, rx235_curclass, "$!cstack"
  rx235_fail749:
    unless rx235_bstack, rx235_done747
    pop $I19, rx235_bstack
    if_null rx235_cstack, rx235_cstack_done752
    unless rx235_cstack, rx235_cstack_done752
    dec $I19
    set $P11, rx235_cstack[$I19]
  rx235_cstack_done752:
    pop rx235_rep, rx235_bstack
    pop rx235_pos, rx235_bstack
    pop $I19, rx235_bstack
    lt rx235_pos, -1, rx235_done747
    lt rx235_pos, 0, rx235_fail749
    eq $I19, 0, rx235_fail749
    nqp_islist $I20, rx235_cstack
    unless $I20, rx235_jump750
    elements $I18, rx235_bstack
    le $I18, 0, rx235_cut751
    dec $I18
    set $I18, rx235_bstack[$I18]
  rx235_cut751:
    assign rx235_cstack, $I18
  rx235_jump750:
    jump $I19
  rx235_done747:
    rx235_cur."!cursor_fail"()
    .return (rx235_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_52_1347719921.536_caps" :subid("cuid_memo_43_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["you_are_here"], $P5002
    box $P5003, 0
    set $P5001["statementlist"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_52_1347719921.536_nfa" :subid("cuid_memo_44_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "finishpad"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_53_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 767
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx244_tgt
    .local int rx244_pos
    .local int rx244_off
    .local int rx244_eos
    .local int rx244_rep
    .local pmc rx244_cur
    .local pmc rx244_curclass
    .local pmc rx244_bstack
    .local pmc rx244_cstack
    (rx244_cur, rx244_tgt, rx244_pos, rx244_curclass, rx244_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx244_cur
    length rx244_eos, rx244_tgt
    eq $I19, 1, rx244_restart772
    gt rx244_pos, rx244_eos, rx244_fail773
    repr_get_attr_int $I11, self, rx244_curclass, "$!from"
    ne $I11, -1, rxscan245_done779
    goto rxscan245_scan778
  rxscan245_loop777:
    inc rx244_pos
    gt rx244_pos, rx244_eos, rx244_fail773
    repr_bind_attr_int rx244_cur, rx244_curclass, "$!from", rx244_pos
  rxscan245_scan778:
    nqp_rxmark rx244_bstack, rxscan245_loop777, rx244_pos, 0
  rxscan245_done779:
    rx244_cur."!cursor_pass"(rx244_pos, "newpad", 'backtrack'=>1)
    .return (rx244_cur)
  rx244_restart772:
    repr_get_attr_obj rx244_cstack, rx244_cur, rx244_curclass, "$!cstack"
  rx244_fail773:
    unless rx244_bstack, rx244_done771
    pop $I19, rx244_bstack
    if_null rx244_cstack, rx244_cstack_done776
    unless rx244_cstack, rx244_cstack_done776
    dec $I19
    set $P11, rx244_cstack[$I19]
  rx244_cstack_done776:
    pop rx244_rep, rx244_bstack
    pop rx244_pos, rx244_bstack
    pop $I19, rx244_bstack
    lt rx244_pos, -1, rx244_done771
    lt rx244_pos, 0, rx244_fail773
    eq $I19, 0, rx244_fail773
    nqp_islist $I20, rx244_cstack
    unless $I20, rx244_jump774
    elements $I18, rx244_bstack
    le $I18, 0, rx244_cut775
    dec $I18
    set $I18, rx244_bstack[$I18]
  rx244_cut775:
    assign rx244_cstack, $I18
  rx244_jump774:
    jump $I19
  rx244_done771:
    rx244_cur."!cursor_fail"()
    .return (rx244_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_53_1347719921.536_caps" :subid("cuid_memo_45_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_53_1347719921.536_nfa" :subid("cuid_memo_46_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_54_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 768
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx247_tgt
    .local int rx247_pos
    .local int rx247_off
    .local int rx247_eos
    .local int rx247_rep
    .local pmc rx247_cur
    .local pmc rx247_curclass
    .local pmc rx247_bstack
    .local pmc rx247_cstack
    (rx247_cur, rx247_tgt, rx247_pos, rx247_curclass, rx247_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx247_cur
    length rx247_eos, rx247_tgt
    eq $I19, 1, rx247_restart783
    gt rx247_pos, rx247_eos, rx247_fail784
    repr_get_attr_int $I11, self, rx247_curclass, "$!from"
    ne $I11, -1, rxscan248_done790
    goto rxscan248_scan789
  rxscan248_loop788:
    inc rx247_pos
    gt rx247_pos, rx247_eos, rx247_fail784
    repr_bind_attr_int rx247_cur, rx247_curclass, "$!from", rx247_pos
  rxscan248_scan789:
    nqp_rxmark rx247_bstack, rxscan248_loop788, rx247_pos, 0
  rxscan248_done790:
    rx247_cur."!cursor_pass"(rx247_pos, "outerctx", 'backtrack'=>1)
    .return (rx247_cur)
  rx247_restart783:
    repr_get_attr_obj rx247_cstack, rx247_cur, rx247_curclass, "$!cstack"
  rx247_fail784:
    unless rx247_bstack, rx247_done782
    pop $I19, rx247_bstack
    if_null rx247_cstack, rx247_cstack_done787
    unless rx247_cstack, rx247_cstack_done787
    dec $I19
    set $P11, rx247_cstack[$I19]
  rx247_cstack_done787:
    pop rx247_rep, rx247_bstack
    pop rx247_pos, rx247_bstack
    pop $I19, rx247_bstack
    lt rx247_pos, -1, rx247_done782
    lt rx247_pos, 0, rx247_fail784
    eq $I19, 0, rx247_fail784
    nqp_islist $I20, rx247_cstack
    unless $I20, rx247_jump785
    elements $I18, rx247_bstack
    le $I18, 0, rx247_cut786
    dec $I18
    set $I18, rx247_bstack[$I18]
  rx247_cut786:
    assign rx247_cstack, $I18
  rx247_jump785:
    jump $I19
  rx247_done782:
    rx247_cur."!cursor_fail"()
    .return (rx247_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_54_1347719921.536_caps" :subid("cuid_memo_47_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_54_1347719921.536_nfa" :subid("cuid_memo_48_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "GLOBALish" :subid("cuid_55_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 769
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx250_tgt
    .local int rx250_pos
    .local int rx250_off
    .local int rx250_eos
    .local int rx250_rep
    .local pmc rx250_cur
    .local pmc rx250_curclass
    .local pmc rx250_bstack
    .local pmc rx250_cstack
    (rx250_cur, rx250_tgt, rx250_pos, rx250_curclass, rx250_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx250_cur
    length rx250_eos, rx250_tgt
    eq $I19, 1, rx250_restart794
    gt rx250_pos, rx250_eos, rx250_fail795
    repr_get_attr_int $I11, self, rx250_curclass, "$!from"
    ne $I11, -1, rxscan251_done801
    goto rxscan251_scan800
  rxscan251_loop799:
    inc rx250_pos
    gt rx250_pos, rx250_eos, rx250_fail795
    repr_bind_attr_int rx250_cur, rx250_curclass, "$!from", rx250_pos
  rxscan251_scan800:
    nqp_rxmark rx250_bstack, rxscan251_loop799, rx250_pos, 0
  rxscan251_done801:
    rx250_cur."!cursor_pass"(rx250_pos, "GLOBALish", 'backtrack'=>1)
    .return (rx250_cur)
  rx250_restart794:
    repr_get_attr_obj rx250_cstack, rx250_cur, rx250_curclass, "$!cstack"
  rx250_fail795:
    unless rx250_bstack, rx250_done793
    pop $I19, rx250_bstack
    if_null rx250_cstack, rx250_cstack_done798
    unless rx250_cstack, rx250_cstack_done798
    dec $I19
    set $P11, rx250_cstack[$I19]
  rx250_cstack_done798:
    pop rx250_rep, rx250_bstack
    pop rx250_pos, rx250_bstack
    pop $I19, rx250_bstack
    lt rx250_pos, -1, rx250_done793
    lt rx250_pos, 0, rx250_fail795
    eq $I19, 0, rx250_fail795
    nqp_islist $I20, rx250_cstack
    unless $I20, rx250_jump796
    elements $I18, rx250_bstack
    le $I18, 0, rx250_cut797
    dec $I18
    set $I18, rx250_bstack[$I18]
  rx250_cut797:
    assign rx250_cstack, $I18
  rx250_jump796:
    jump $I19
  rx250_done793:
    rx250_cur."!cursor_fail"()
    .return (rx250_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_55_1347719921.536_caps" :subid("cuid_memo_49_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_55_1347719921.536_nfa" :subid("cuid_memo_50_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "finishpad" :subid("cuid_56_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 770
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx253_tgt
    .local int rx253_pos
    .local int rx253_off
    .local int rx253_eos
    .local int rx253_rep
    .local pmc rx253_cur
    .local pmc rx253_curclass
    .local pmc rx253_bstack
    .local pmc rx253_cstack
    (rx253_cur, rx253_tgt, rx253_pos, rx253_curclass, rx253_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx253_cur
    length rx253_eos, rx253_tgt
    eq $I19, 1, rx253_restart805
    gt rx253_pos, rx253_eos, rx253_fail806
    repr_get_attr_int $I11, self, rx253_curclass, "$!from"
    ne $I11, -1, rxscan254_done812
    goto rxscan254_scan811
  rxscan254_loop810:
    inc rx253_pos
    gt rx253_pos, rx253_eos, rx253_fail806
    repr_bind_attr_int rx253_cur, rx253_curclass, "$!from", rx253_pos
  rxscan254_scan811:
    nqp_rxmark rx253_bstack, rxscan254_loop810, rx253_pos, 0
  rxscan254_done812:
    rx253_cur."!cursor_pass"(rx253_pos, "finishpad", 'backtrack'=>1)
    .return (rx253_cur)
  rx253_restart805:
    repr_get_attr_obj rx253_cstack, rx253_cur, rx253_curclass, "$!cstack"
  rx253_fail806:
    unless rx253_bstack, rx253_done804
    pop $I19, rx253_bstack
    if_null rx253_cstack, rx253_cstack_done809
    unless rx253_cstack, rx253_cstack_done809
    dec $I19
    set $P11, rx253_cstack[$I19]
  rx253_cstack_done809:
    pop rx253_rep, rx253_bstack
    pop rx253_pos, rx253_bstack
    pop $I19, rx253_bstack
    lt rx253_pos, -1, rx253_done804
    lt rx253_pos, 0, rx253_fail806
    eq $I19, 0, rx253_fail806
    nqp_islist $I20, rx253_cstack
    unless $I20, rx253_jump807
    elements $I18, rx253_bstack
    le $I18, 0, rx253_cut808
    dec $I18
    set $I18, rx253_bstack[$I18]
  rx253_cut808:
    assign rx253_cstack, $I18
  rx253_jump807:
    jump $I19
  rx253_done804:
    rx253_cur."!cursor_fail"()
    .return (rx253_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_56_1347719921.536_caps" :subid("cuid_memo_51_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_56_1347719921.536_nfa" :subid("cuid_memo_52_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_57_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 771
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx256_tgt
    .local int rx256_pos
    .local int rx256_off
    .local int rx256_eos
    .local int rx256_rep
    .local pmc rx256_cur
    .local pmc rx256_curclass
    .local pmc rx256_bstack
    .local pmc rx256_cstack
    (rx256_cur, rx256_tgt, rx256_pos, rx256_curclass, rx256_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx256_cur
    length rx256_eos, rx256_tgt
    eq $I19, 1, rx256_restart816
    gt rx256_pos, rx256_eos, rx256_fail817
    repr_get_attr_int $I11, self, rx256_curclass, "$!from"
    ne $I11, -1, rxscan257_done823
    goto rxscan257_scan822
  rxscan257_loop821:
    inc rx256_pos
    gt rx256_pos, rx256_eos, rx256_fail817
    repr_bind_attr_int rx256_cur, rx256_curclass, "$!from", rx256_pos
  rxscan257_scan822:
    nqp_rxmark rx256_bstack, rxscan257_loop821, rx256_pos, 0
  rxscan257_done823:
    rx256_cur."!cursor_pass"(rx256_pos, "you_are_here", 'backtrack'=>1)
    .return (rx256_cur)
  rx256_restart816:
    repr_get_attr_obj rx256_cstack, rx256_cur, rx256_curclass, "$!cstack"
  rx256_fail817:
    unless rx256_bstack, rx256_done815
    pop $I19, rx256_bstack
    if_null rx256_cstack, rx256_cstack_done820
    unless rx256_cstack, rx256_cstack_done820
    dec $I19
    set $P11, rx256_cstack[$I19]
  rx256_cstack_done820:
    pop rx256_rep, rx256_bstack
    pop rx256_pos, rx256_bstack
    pop $I19, rx256_bstack
    lt rx256_pos, -1, rx256_done815
    lt rx256_pos, 0, rx256_fail817
    eq $I19, 0, rx256_fail817
    nqp_islist $I20, rx256_cstack
    unless $I20, rx256_jump818
    elements $I18, rx256_bstack
    le $I18, 0, rx256_cut819
    dec $I18
    set $I18, rx256_bstack[$I18]
  rx256_cut819:
    assign rx256_cstack, $I18
  rx256_jump818:
    jump $I19
  rx256_done815:
    rx256_cur."!cursor_fail"()
    .return (rx256_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_57_1347719921.536_caps" :subid("cuid_memo_53_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_57_1347719921.536_nfa" :subid("cuid_memo_54_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "terminator" :subid("cuid_58_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 773
    .param pmc self 
    $P5001 = self."!protoregex"("terminator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<;>" :subid("cuid_59_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 775
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx259_tgt
    .local int rx259_pos
    .local int rx259_off
    .local int rx259_eos
    .local int rx259_rep
    .local pmc rx259_cur
    .local pmc rx259_curclass
    .local pmc rx259_bstack
    .local pmc rx259_cstack
    (rx259_cur, rx259_tgt, rx259_pos, rx259_curclass, rx259_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx259_cur
    length rx259_eos, rx259_tgt
    eq $I19, 1, rx259_restart827
    gt rx259_pos, rx259_eos, rx259_fail828
    repr_get_attr_int $I11, self, rx259_curclass, "$!from"
    ne $I11, -1, rxscan260_done834
    goto rxscan260_scan833
  rxscan260_loop832:
    inc rx259_pos
    gt rx259_pos, rx259_eos, rx259_fail828
    repr_bind_attr_int rx259_cur, rx259_curclass, "$!from", rx259_pos
  rxscan260_scan833:
    nqp_rxmark rx259_bstack, rxscan260_loop832, rx259_pos, 0
  rxscan260_done834:
    ge rx259_pos, rx259_eos, rx259_fail828
    substr $S11, rx259_tgt, rx259_pos, 1
    index $I11, ucs4:";", $S11
    lt $I11, 0, rx259_fail828
    rx259_cur."!cursor_pass"(rx259_pos, "terminator:sym<;>", 'backtrack'=>1)
    .return (rx259_cur)
  rx259_restart827:
    repr_get_attr_obj rx259_cstack, rx259_cur, rx259_curclass, "$!cstack"
  rx259_fail828:
    unless rx259_bstack, rx259_done826
    pop $I19, rx259_bstack
    if_null rx259_cstack, rx259_cstack_done831
    unless rx259_cstack, rx259_cstack_done831
    dec $I19
    set $P11, rx259_cstack[$I19]
  rx259_cstack_done831:
    pop rx259_rep, rx259_bstack
    pop rx259_pos, rx259_bstack
    pop $I19, rx259_bstack
    lt rx259_pos, -1, rx259_done826
    lt rx259_pos, 0, rx259_fail828
    eq $I19, 0, rx259_fail828
    nqp_islist $I20, rx259_cstack
    unless $I20, rx259_jump829
    elements $I18, rx259_bstack
    le $I18, 0, rx259_cut830
    dec $I18
    set $I18, rx259_bstack[$I18]
  rx259_cut830:
    assign rx259_cstack, $I18
  rx259_jump829:
    jump $I19
  rx259_done826:
    rx259_cur."!cursor_fail"()
    .return (rx259_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_59_1347719921.536_caps" :subid("cuid_memo_55_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_59_1347719921.536_nfa" :subid("cuid_memo_56_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, ";"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<}>" :subid("cuid_60_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 776
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx261_tgt
    .local int rx261_pos
    .local int rx261_off
    .local int rx261_eos
    .local int rx261_rep
    .local pmc rx261_cur
    .local pmc rx261_curclass
    .local pmc rx261_bstack
    .local pmc rx261_cstack
    (rx261_cur, rx261_tgt, rx261_pos, rx261_curclass, rx261_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx261_cur
    length rx261_eos, rx261_tgt
    eq $I19, 1, rx261_restart837
    gt rx261_pos, rx261_eos, rx261_fail838
    repr_get_attr_int $I11, self, rx261_curclass, "$!from"
    ne $I11, -1, rxscan262_done844
    goto rxscan262_scan843
  rxscan262_loop842:
    inc rx261_pos
    gt rx261_pos, rx261_eos, rx261_fail838
    repr_bind_attr_int rx261_cur, rx261_curclass, "$!from", rx261_pos
  rxscan262_scan843:
    nqp_rxmark rx261_bstack, rxscan262_loop842, rx261_pos, 0
  rxscan262_done844:
    ge rx261_pos, rx261_eos, rx261_fail838
    substr $S11, rx261_tgt, rx261_pos, 1
    index $I11, ucs4:"}", $S11
    lt $I11, 0, rx261_fail838
    rx261_cur."!cursor_pass"(rx261_pos, "terminator:sym<}>", 'backtrack'=>1)
    .return (rx261_cur)
  rx261_restart837:
    repr_get_attr_obj rx261_cstack, rx261_cur, rx261_curclass, "$!cstack"
  rx261_fail838:
    unless rx261_bstack, rx261_done836
    pop $I19, rx261_bstack
    if_null rx261_cstack, rx261_cstack_done841
    unless rx261_cstack, rx261_cstack_done841
    dec $I19
    set $P11, rx261_cstack[$I19]
  rx261_cstack_done841:
    pop rx261_rep, rx261_bstack
    pop rx261_pos, rx261_bstack
    pop $I19, rx261_bstack
    lt rx261_pos, -1, rx261_done836
    lt rx261_pos, 0, rx261_fail838
    eq $I19, 0, rx261_fail838
    nqp_islist $I20, rx261_cstack
    unless $I20, rx261_jump839
    elements $I18, rx261_bstack
    le $I18, 0, rx261_cut840
    dec $I18
    set $I18, rx261_bstack[$I18]
  rx261_cut840:
    assign rx261_cstack, $I18
  rx261_jump839:
    jump $I19
  rx261_done836:
    rx261_cur."!cursor_fail"()
    .return (rx261_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_60_1347719921.536_caps" :subid("cuid_memo_57_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_60_1347719921.536_nfa" :subid("cuid_memo_58_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "}"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control" :subid("cuid_61_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 780
    .param pmc self 
    $P5001 = self."!protoregex"("statement_control")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_62_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 782
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx263_tgt
    .local int rx263_pos
    .local int rx263_off
    .local int rx263_eos
    .local int rx263_rep
    .local pmc rx263_cur
    .local pmc rx263_curclass
    .local pmc rx263_bstack
    .local pmc rx263_cstack
    (rx263_cur, rx263_tgt, rx263_pos, rx263_curclass, rx263_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx263_cur
    length rx263_eos, rx263_tgt
    eq $I19, 1, rx263_restart847
    gt rx263_pos, rx263_eos, rx263_fail848
    repr_get_attr_int $I11, self, rx263_curclass, "$!from"
    ne $I11, -1, rxscan264_done854
    goto rxscan264_scan853
  rxscan264_loop852:
    inc rx263_pos
    gt rx263_pos, rx263_eos, rx263_fail848
    repr_bind_attr_int rx263_cur, rx263_curclass, "$!from", rx263_pos
  rxscan264_scan853:
    nqp_rxmark rx263_bstack, rxscan264_loop852, rx263_pos, 0
  rxscan264_done854:
    nqp_rxmark rx263_bstack, rxcap265_fail856, rx263_pos, 0
    add $I11, rx263_pos, 3
    gt $I11, rx263_eos, rx263_fail848
    substr $S10, rx263_tgt, rx263_pos, 3
    ne $S10, ucs4:"use", rx263_fail848
    add rx263_pos, 3
    nqp_rxpeek $I19, rx263_bstack, rxcap265_fail856
    inc $I19
    set $I11, rx263_bstack[$I19]
    $P11 = rx263_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx263_pos)
    rx263_cstack = rx263_cur."!cursor_capture"($P11, "sym")
    goto rxcap265_done855
  rxcap265_fail856:
    goto rx263_fail848
  rxcap265_done855:
    ge rx263_pos, rx263_eos, rx263_fail848
    is_cclass $I11, .CCLASS_WHITESPACE, rx263_tgt, rx263_pos
    unless $I11, rx263_fail848
    add rx263_pos, 1
    repr_bind_attr_int rx263_cur, rx263_curclass, "$!pos", rx263_pos
    $P11 = rx263_cur."ws"()
    repr_get_attr_int $I11, $P11, rx263_curclass, "$!pos"
    lt $I11, 0, rx263_fail848
    repr_get_attr_int rx263_pos, $P11, rx263_curclass, "$!pos"
    repr_bind_attr_int rx263_cur, rx263_curclass, "$!pos", rx263_pos
    $P11 = rx263_cur."name"()
    repr_get_attr_int $I11, $P11, rx263_curclass, "$!pos"
    lt $I11, 0, rx263_fail848
    nqp_rxmark rx263_bstack, rxsubrule267_pass858, -1, 0
  rxsubrule267_pass858:
    rx263_cstack = rx263_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx263_pos, $P11, rx263_curclass, "$!pos"
    repr_bind_attr_int rx263_cur, rx263_curclass, "$!pos", rx263_pos
    $P11 = rx263_cur."ws"()
    repr_get_attr_int $I11, $P11, rx263_curclass, "$!pos"
    lt $I11, 0, rx263_fail848
    repr_get_attr_int rx263_pos, $P11, rx263_curclass, "$!pos"
    rx263_cur."!cursor_pass"(rx263_pos, "statement_control:sym<use>", 'backtrack'=>1)
    .return (rx263_cur)
  rx263_restart847:
    repr_get_attr_obj rx263_cstack, rx263_cur, rx263_curclass, "$!cstack"
  rx263_fail848:
    unless rx263_bstack, rx263_done846
    pop $I19, rx263_bstack
    if_null rx263_cstack, rx263_cstack_done851
    unless rx263_cstack, rx263_cstack_done851
    dec $I19
    set $P11, rx263_cstack[$I19]
  rx263_cstack_done851:
    pop rx263_rep, rx263_bstack
    pop rx263_pos, rx263_bstack
    pop $I19, rx263_bstack
    lt rx263_pos, -1, rx263_done846
    lt rx263_pos, 0, rx263_fail848
    eq $I19, 0, rx263_fail848
    nqp_islist $I20, rx263_cstack
    unless $I20, rx263_jump849
    elements $I18, rx263_bstack
    le $I18, 0, rx263_cut850
    dec $I18
    set $I18, rx263_bstack[$I18]
  rx263_cut850:
    assign rx263_cstack, $I18
  rx263_jump849:
    jump $I19
  rx263_done846:
    rx263_cur."!cursor_fail"()
    .return (rx263_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_62_1347719921.536_caps" :subid("cuid_memo_59_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["name"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_62_1347719921.536_nfa" :subid("cuid_memo_60_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 117
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 115
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 101
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 4
    push $P5015, $P5016
    box $P5017, 32
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_63_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 786
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx269_tgt
    .local int rx269_pos
    .local int rx269_off
    .local int rx269_eos
    .local int rx269_rep
    .local pmc rx269_cur
    .local pmc rx269_curclass
    .local pmc rx269_bstack
    .local pmc rx269_cstack
    (rx269_cur, rx269_tgt, rx269_pos, rx269_curclass, rx269_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx269_cur
    length rx269_eos, rx269_tgt
    eq $I19, 1, rx269_restart862
    gt rx269_pos, rx269_eos, rx269_fail863
    repr_get_attr_int $I11, self, rx269_curclass, "$!from"
    ne $I11, -1, rxscan270_done869
    goto rxscan270_scan868
  rxscan270_loop867:
    inc rx269_pos
    gt rx269_pos, rx269_eos, rx269_fail863
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!from", rx269_pos
  rxscan270_scan868:
    nqp_rxmark rx269_bstack, rxscan270_loop867, rx269_pos, 0
  rxscan270_done869:
    nqp_rxmark rx269_bstack, rxcap271_fail871, rx269_pos, 0
    add $I11, rx269_pos, 2
    gt $I11, rx269_eos, rx269_fail863
    substr $S10, rx269_tgt, rx269_pos, 2
    ne $S10, ucs4:"if", rx269_fail863
    add rx269_pos, 2
    nqp_rxpeek $I19, rx269_bstack, rxcap271_fail871
    inc $I19
    set $I11, rx269_bstack[$I19]
    $P11 = rx269_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx269_pos)
    rx269_cstack = rx269_cur."!cursor_capture"($P11, "sym")
    goto rxcap271_done870
  rxcap271_fail871:
    goto rx269_fail863
  rxcap271_done870:
    ge rx269_pos, rx269_eos, rx269_fail863
    is_cclass $I11, .CCLASS_WHITESPACE, rx269_tgt, rx269_pos
    unless $I11, rx269_fail863
    add rx269_pos, 1
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!pos", rx269_pos
    $P11 = rx269_cur."ws"()
    repr_get_attr_int $I11, $P11, rx269_curclass, "$!pos"
    lt $I11, 0, rx269_fail863
    repr_get_attr_int rx269_pos, $P11, rx269_curclass, "$!pos"
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!pos", rx269_pos
    $P11 = rx269_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx269_curclass, "$!pos"
    lt $I11, 0, rx269_fail863
    nqp_rxmark rx269_bstack, rxsubrule273_pass873, -1, 0
  rxsubrule273_pass873:
    rx269_cstack = rx269_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx269_pos, $P11, rx269_curclass, "$!pos"
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!pos", rx269_pos
    $P11 = rx269_cur."ws"()
    repr_get_attr_int $I11, $P11, rx269_curclass, "$!pos"
    lt $I11, 0, rx269_fail863
    repr_get_attr_int rx269_pos, $P11, rx269_curclass, "$!pos"
    nqp_rxmark rx269_bstack, rxquantr275_done876, rx269_pos, 0
  rxquantr275_loop875:
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!pos", rx269_pos
    $P11 = rx269_cur."ws"()
    repr_get_attr_int $I11, $P11, rx269_curclass, "$!pos"
    lt $I11, 0, rx269_fail863
    repr_get_attr_int rx269_pos, $P11, rx269_curclass, "$!pos"
    add $I11, rx269_pos, 5
    gt $I11, rx269_eos, rx269_fail863
    substr $S10, rx269_tgt, rx269_pos, 5
    ne $S10, ucs4:"elsif", rx269_fail863
    add rx269_pos, 5
    ge rx269_pos, rx269_eos, rx269_fail863
    is_cclass $I11, .CCLASS_WHITESPACE, rx269_tgt, rx269_pos
    unless $I11, rx269_fail863
    add rx269_pos, 1
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!pos", rx269_pos
    $P11 = rx269_cur."ws"()
    repr_get_attr_int $I11, $P11, rx269_curclass, "$!pos"
    lt $I11, 0, rx269_fail863
    repr_get_attr_int rx269_pos, $P11, rx269_curclass, "$!pos"
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!pos", rx269_pos
    $P11 = rx269_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx269_curclass, "$!pos"
    lt $I11, 0, rx269_fail863
    nqp_rxmark rx269_bstack, rxsubrule278_pass879, -1, 0
  rxsubrule278_pass879:
    rx269_cstack = rx269_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx269_pos, $P11, rx269_curclass, "$!pos"
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!pos", rx269_pos
    $P11 = rx269_cur."ws"()
    repr_get_attr_int $I11, $P11, rx269_curclass, "$!pos"
    lt $I11, 0, rx269_fail863
    repr_get_attr_int rx269_pos, $P11, rx269_curclass, "$!pos"
    nqp_rxpeek $I19, rx269_bstack, rxquantr275_done876
    inc $I19
    inc $I19
    set rx269_rep, rx269_bstack[$I19]
    nqp_rxcommit rx269_bstack, rxquantr275_done876
    inc rx269_rep
    nqp_rxmark rx269_bstack, rxquantr275_done876, rx269_pos, rx269_rep
    goto rxquantr275_loop875
  rxquantr275_done876:
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!pos", rx269_pos
    $P11 = rx269_cur."ws"()
    repr_get_attr_int $I11, $P11, rx269_curclass, "$!pos"
    lt $I11, 0, rx269_fail863
    repr_get_attr_int rx269_pos, $P11, rx269_curclass, "$!pos"
    nqp_rxmark rx269_bstack, rxquantr281_done883, rx269_pos, 0
  rxquantr281_loop882:
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!pos", rx269_pos
    $P11 = rx269_cur."ws"()
    repr_get_attr_int $I11, $P11, rx269_curclass, "$!pos"
    lt $I11, 0, rx269_fail863
    repr_get_attr_int rx269_pos, $P11, rx269_curclass, "$!pos"
    add $I11, rx269_pos, 4
    gt $I11, rx269_eos, rx269_fail863
    substr $S10, rx269_tgt, rx269_pos, 4
    ne $S10, ucs4:"else", rx269_fail863
    add rx269_pos, 4
    ge rx269_pos, rx269_eos, rx269_fail863
    is_cclass $I11, .CCLASS_WHITESPACE, rx269_tgt, rx269_pos
    unless $I11, rx269_fail863
    add rx269_pos, 1
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!pos", rx269_pos
    $P11 = rx269_cur."ws"()
    repr_get_attr_int $I11, $P11, rx269_curclass, "$!pos"
    lt $I11, 0, rx269_fail863
    repr_get_attr_int rx269_pos, $P11, rx269_curclass, "$!pos"
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!pos", rx269_pos
    $P11 = rx269_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx269_curclass, "$!pos"
    lt $I11, 0, rx269_fail863
    nqp_rxmark rx269_bstack, rxsubrule284_pass886, -1, 0
  rxsubrule284_pass886:
    rx269_cstack = rx269_cur."!cursor_capture"($P11, "else")
    repr_get_attr_int rx269_pos, $P11, rx269_curclass, "$!pos"
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!pos", rx269_pos
    $P11 = rx269_cur."ws"()
    repr_get_attr_int $I11, $P11, rx269_curclass, "$!pos"
    lt $I11, 0, rx269_fail863
    repr_get_attr_int rx269_pos, $P11, rx269_curclass, "$!pos"
    nqp_rxpeek $I19, rx269_bstack, rxquantr281_done883
    inc $I19
    inc $I19
    set rx269_rep, rx269_bstack[$I19]
    nqp_rxcommit rx269_bstack, rxquantr281_done883
    inc rx269_rep
  rxquantr281_done883:
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!pos", rx269_pos
    $P11 = rx269_cur."ws"()
    repr_get_attr_int $I11, $P11, rx269_curclass, "$!pos"
    lt $I11, 0, rx269_fail863
    repr_get_attr_int rx269_pos, $P11, rx269_curclass, "$!pos"
    rx269_cur."!cursor_pass"(rx269_pos, "statement_control:sym<if>", 'backtrack'=>1)
    .return (rx269_cur)
  rx269_restart862:
    repr_get_attr_obj rx269_cstack, rx269_cur, rx269_curclass, "$!cstack"
  rx269_fail863:
    unless rx269_bstack, rx269_done861
    pop $I19, rx269_bstack
    if_null rx269_cstack, rx269_cstack_done866
    unless rx269_cstack, rx269_cstack_done866
    dec $I19
    set $P11, rx269_cstack[$I19]
  rx269_cstack_done866:
    pop rx269_rep, rx269_bstack
    pop rx269_pos, rx269_bstack
    pop $I19, rx269_bstack
    lt rx269_pos, -1, rx269_done861
    lt rx269_pos, 0, rx269_fail863
    eq $I19, 0, rx269_fail863
    nqp_islist $I20, rx269_cstack
    unless $I20, rx269_jump864
    elements $I18, rx269_bstack
    le $I18, 0, rx269_cut865
    dec $I18
    set $I18, rx269_bstack[$I18]
  rx269_cut865:
    assign rx269_cstack, $I18
  rx269_jump864:
    jump $I19
  rx269_done861:
    rx269_cur."!cursor_fail"()
    .return (rx269_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_63_1347719921.536_caps" :subid("cuid_memo_61_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 2
    set $P5001["xblock"], $P5003
    box $P5004, 2
    set $P5001["else"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_63_1347719921.536_nfa" :subid("cuid_memo_62_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 105
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 102
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 4
    push $P5011, $P5012
    box $P5013, 32
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_65_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 793
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_64_1347719921.536' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx287_tgt
    .local int rx287_pos
    .local int rx287_off
    .local int rx287_eos
    .local int rx287_rep
    .local pmc rx287_cur
    .local pmc rx287_curclass
    .local pmc rx287_bstack
    .local pmc rx287_cstack
    (rx287_cur, rx287_tgt, rx287_pos, rx287_curclass, rx287_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx287_cur
    length rx287_eos, rx287_tgt
    eq $I19, 1, rx287_restart891
    gt rx287_pos, rx287_eos, rx287_fail892
    repr_get_attr_int $I11, self, rx287_curclass, "$!from"
    ne $I11, -1, rxscan288_done898
    goto rxscan288_scan897
  rxscan288_loop896:
    inc rx287_pos
    gt rx287_pos, rx287_eos, rx287_fail892
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!from", rx287_pos
  rxscan288_scan897:
    nqp_rxmark rx287_bstack, rxscan288_loop896, rx287_pos, 0
  rxscan288_done898:
    nqp_rxmark rx287_bstack, rxcap289_fail900, rx287_pos, 0
    add $I11, rx287_pos, 6
    gt $I11, rx287_eos, rx287_fail892
    substr $S10, rx287_tgt, rx287_pos, 6
    ne $S10, ucs4:"unless", rx287_fail892
    add rx287_pos, 6
    nqp_rxpeek $I19, rx287_bstack, rxcap289_fail900
    inc $I19
    set $I11, rx287_bstack[$I19]
    $P11 = rx287_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx287_pos)
    rx287_cstack = rx287_cur."!cursor_capture"($P11, "sym")
    goto rxcap289_done899
  rxcap289_fail900:
    goto rx287_fail892
  rxcap289_done899:
    ge rx287_pos, rx287_eos, rx287_fail892
    is_cclass $I11, .CCLASS_WHITESPACE, rx287_tgt, rx287_pos
    unless $I11, rx287_fail892
    add rx287_pos, 1
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!pos", rx287_pos
    $P11 = rx287_cur."ws"()
    repr_get_attr_int $I11, $P11, rx287_curclass, "$!pos"
    lt $I11, 0, rx287_fail892
    repr_get_attr_int rx287_pos, $P11, rx287_curclass, "$!pos"
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!pos", rx287_pos
    $P11 = rx287_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx287_curclass, "$!pos"
    lt $I11, 0, rx287_fail892
    nqp_rxmark rx287_bstack, rxsubrule291_pass902, -1, 0
  rxsubrule291_pass902:
    rx287_cstack = rx287_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx287_pos, $P11, rx287_curclass, "$!pos"
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!pos", rx287_pos
    $P11 = rx287_cur."ws"()
    repr_get_attr_int $I11, $P11, rx287_curclass, "$!pos"
    lt $I11, 0, rx287_fail892
    repr_get_attr_int rx287_pos, $P11, rx287_curclass, "$!pos"
  alt293_0905:
    nqp_rxmark rx287_bstack, alt293_1918, rx287_pos, 0
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!pos", rx287_pos
    $P11 = rx287_cur."ws"()
    repr_get_attr_int $I11, $P11, rx287_curclass, "$!pos"
    lt $I11, 0, rx287_fail892
    repr_get_attr_int rx287_pos, $P11, rx287_curclass, "$!pos"
    .const 'Sub' $P5001 = 'cuid_64_1347719921.536' 
    capture_lex $P5001
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!pos", rx287_pos
    $P11 = rx287_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx287_curclass, "$!pos"
    ge $I11, 0, rx287_fail892
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!pos", rx287_pos
    $P11 = rx287_cur."ws"()
    repr_get_attr_int $I11, $P11, rx287_curclass, "$!pos"
    lt $I11, 0, rx287_fail892
    repr_get_attr_int rx287_pos, $P11, rx287_curclass, "$!pos"
    goto alt293_end904
  alt293_1918:
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!pos", rx287_pos
    $P11 = rx287_cur."ws"()
    repr_get_attr_int $I11, $P11, rx287_curclass, "$!pos"
    lt $I11, 0, rx287_fail892
    repr_get_attr_int rx287_pos, $P11, rx287_curclass, "$!pos"
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!pos", rx287_pos
    $P11 = rx287_cur."panic"("unless does not take \"else\", please rewrite using \"if\"")
    repr_get_attr_int $I11, $P11, rx287_curclass, "$!pos"
    lt $I11, 0, rx287_fail892
    repr_get_attr_int rx287_pos, $P11, rx287_curclass, "$!pos"
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!pos", rx287_pos
    $P11 = rx287_cur."ws"()
    repr_get_attr_int $I11, $P11, rx287_curclass, "$!pos"
    lt $I11, 0, rx287_fail892
    repr_get_attr_int rx287_pos, $P11, rx287_curclass, "$!pos"
  alt293_end904:
    repr_bind_attr_int rx287_cur, rx287_curclass, "$!pos", rx287_pos
    $P11 = rx287_cur."ws"()
    repr_get_attr_int $I11, $P11, rx287_curclass, "$!pos"
    lt $I11, 0, rx287_fail892
    repr_get_attr_int rx287_pos, $P11, rx287_curclass, "$!pos"
    rx287_cur."!cursor_pass"(rx287_pos, "statement_control:sym<unless>", 'backtrack'=>1)
    .return (rx287_cur)
  rx287_restart891:
    repr_get_attr_obj rx287_cstack, rx287_cur, rx287_curclass, "$!cstack"
  rx287_fail892:
    unless rx287_bstack, rx287_done890
    pop $I19, rx287_bstack
    if_null rx287_cstack, rx287_cstack_done895
    unless rx287_cstack, rx287_cstack_done895
    dec $I19
    set $P11, rx287_cstack[$I19]
  rx287_cstack_done895:
    pop rx287_rep, rx287_bstack
    pop rx287_pos, rx287_bstack
    pop $I19, rx287_bstack
    lt rx287_pos, -1, rx287_done890
    lt rx287_pos, 0, rx287_fail892
    eq $I19, 0, rx287_fail892
    nqp_islist $I20, rx287_cstack
    unless $I20, rx287_jump893
    elements $I18, rx287_bstack
    le $I18, 0, rx287_cut894
    dec $I18
    set $I18, rx287_bstack[$I18]
  rx287_cut894:
    assign rx287_cstack, $I18
  rx287_jump893:
    jump $I19
  rx287_done890:
    rx287_cur."!cursor_fail"()
    .return (rx287_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_65_1347719921.536_caps" :subid("cuid_memo_63_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["xblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_65_1347719921.536_nfa" :subid("cuid_memo_64_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 117
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 110
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 108
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 101
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 115
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 115
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 4
    push $P5027, $P5028
    box $P5029, 32
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_64_1347719921.536") :anon :lex :outer("cuid_65_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx295_tgt
    .local int rx295_pos
    .local int rx295_off
    .local int rx295_eos
    .local int rx295_rep
    .local pmc rx295_cur
    .local pmc rx295_curclass
    .local pmc rx295_bstack
    .local pmc rx295_cstack
    (rx295_cur, rx295_tgt, rx295_pos, rx295_curclass, rx295_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx295_cur
    length rx295_eos, rx295_tgt
    eq $I19, 1, rx295_restart909
    gt rx295_pos, rx295_eos, rx295_fail910
    repr_get_attr_int $I11, self, rx295_curclass, "$!from"
    ne $I11, -1, rxscan296_done916
    goto rxscan296_scan915
  rxscan296_loop914:
    inc rx295_pos
    gt rx295_pos, rx295_eos, rx295_fail910
    repr_bind_attr_int rx295_cur, rx295_curclass, "$!from", rx295_pos
  rxscan296_scan915:
    nqp_rxmark rx295_bstack, rxscan296_loop914, rx295_pos, 0
  rxscan296_done916:
    add $I11, rx295_pos, 4
    gt $I11, rx295_eos, rx295_fail910
    substr $S10, rx295_tgt, rx295_pos, 4
    ne $S10, ucs4:"else", rx295_fail910
    add rx295_pos, 4
    rx295_cur."!cursor_pass"(rx295_pos, 'backtrack'=>1)
    .return (rx295_cur)
  rx295_restart909:
    repr_get_attr_obj rx295_cstack, rx295_cur, rx295_curclass, "$!cstack"
  rx295_fail910:
    unless rx295_bstack, rx295_done908
    pop $I19, rx295_bstack
    if_null rx295_cstack, rx295_cstack_done913
    unless rx295_cstack, rx295_cstack_done913
    dec $I19
    set $P11, rx295_cstack[$I19]
  rx295_cstack_done913:
    pop rx295_rep, rx295_bstack
    pop rx295_pos, rx295_bstack
    pop $I19, rx295_bstack
    lt rx295_pos, -1, rx295_done908
    lt rx295_pos, 0, rx295_fail910
    eq $I19, 0, rx295_fail910
    nqp_islist $I20, rx295_cstack
    unless $I20, rx295_jump911
    elements $I18, rx295_bstack
    le $I18, 0, rx295_cut912
    dec $I18
    set $I18, rx295_bstack[$I18]
  rx295_cut912:
    assign rx295_cstack, $I18
  rx295_jump911:
    jump $I19
  rx295_done908:
    rx295_cur."!cursor_fail"()
    .return (rx295_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_64_1347719921.536_caps" :subid("cuid_memo_65_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_64_1347719921.536_nfa" :subid("cuid_memo_66_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 101
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 108
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 115
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 101
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_66_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 799
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx302_tgt
    .local int rx302_pos
    .local int rx302_off
    .local int rx302_eos
    .local int rx302_rep
    .local pmc rx302_cur
    .local pmc rx302_curclass
    .local pmc rx302_bstack
    .local pmc rx302_cstack
    (rx302_cur, rx302_tgt, rx302_pos, rx302_curclass, rx302_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx302_cur
    length rx302_eos, rx302_tgt
    eq $I19, 1, rx302_restart925
    gt rx302_pos, rx302_eos, rx302_fail926
    repr_get_attr_int $I11, self, rx302_curclass, "$!from"
    ne $I11, -1, rxscan303_done932
    goto rxscan303_scan931
  rxscan303_loop930:
    inc rx302_pos
    gt rx302_pos, rx302_eos, rx302_fail926
    repr_bind_attr_int rx302_cur, rx302_curclass, "$!from", rx302_pos
  rxscan303_scan931:
    nqp_rxmark rx302_bstack, rxscan303_loop930, rx302_pos, 0
  rxscan303_done932:
    repr_bind_attr_int rx302_cur, rx302_curclass, "$!pos", rx302_pos
    store_lex unicode:"$\x{a2}", rx302_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx302_bstack, rxcap304_fail934, rx302_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt305_0936
    nqp_push_label $P11, alt305_1937
    nqp_rxmark rx302_bstack, alt305_end935, -1, 0
    rx302_cur."!alt"(rx302_pos, "alt_nfa__12_1347719923.035", $P11)
    goto rx302_fail926
  alt305_0936:
    add $I11, rx302_pos, 5
    gt $I11, rx302_eos, rx302_fail926
    substr $S10, rx302_tgt, rx302_pos, 5
    ne $S10, ucs4:"while", rx302_fail926
    add rx302_pos, 5
    goto alt305_end935
  alt305_1937:
    add $I11, rx302_pos, 5
    gt $I11, rx302_eos, rx302_fail926
    substr $S10, rx302_tgt, rx302_pos, 5
    ne $S10, ucs4:"until", rx302_fail926
    add rx302_pos, 5
    goto alt305_end935
  alt305_end935:
    nqp_rxcommit rx302_bstack, alt305_end935
    nqp_rxpeek $I19, rx302_bstack, rxcap304_fail934
    inc $I19
    set $I11, rx302_bstack[$I19]
    $P11 = rx302_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx302_pos)
    rx302_cstack = rx302_cur."!cursor_capture"($P11, "sym")
    goto rxcap304_done933
  rxcap304_fail934:
    goto rx302_fail926
  rxcap304_done933:
    ge rx302_pos, rx302_eos, rx302_fail926
    is_cclass $I11, .CCLASS_WHITESPACE, rx302_tgt, rx302_pos
    unless $I11, rx302_fail926
    add rx302_pos, 1
    repr_bind_attr_int rx302_cur, rx302_curclass, "$!pos", rx302_pos
    $P11 = rx302_cur."ws"()
    repr_get_attr_int $I11, $P11, rx302_curclass, "$!pos"
    lt $I11, 0, rx302_fail926
    repr_get_attr_int rx302_pos, $P11, rx302_curclass, "$!pos"
    repr_bind_attr_int rx302_cur, rx302_curclass, "$!pos", rx302_pos
    $P11 = rx302_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx302_curclass, "$!pos"
    lt $I11, 0, rx302_fail926
    nqp_rxmark rx302_bstack, rxsubrule307_pass939, -1, 0
  rxsubrule307_pass939:
    rx302_cstack = rx302_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx302_pos, $P11, rx302_curclass, "$!pos"
    repr_bind_attr_int rx302_cur, rx302_curclass, "$!pos", rx302_pos
    $P11 = rx302_cur."ws"()
    repr_get_attr_int $I11, $P11, rx302_curclass, "$!pos"
    lt $I11, 0, rx302_fail926
    repr_get_attr_int rx302_pos, $P11, rx302_curclass, "$!pos"
    rx302_cur."!cursor_pass"(rx302_pos, "statement_control:sym<while>", 'backtrack'=>1)
    .return (rx302_cur)
  rx302_restart925:
    repr_get_attr_obj rx302_cstack, rx302_cur, rx302_curclass, "$!cstack"
  rx302_fail926:
    unless rx302_bstack, rx302_done924
    pop $I19, rx302_bstack
    if_null rx302_cstack, rx302_cstack_done929
    unless rx302_cstack, rx302_cstack_done929
    dec $I19
    set $P11, rx302_cstack[$I19]
  rx302_cstack_done929:
    pop rx302_rep, rx302_bstack
    pop rx302_pos, rx302_bstack
    pop $I19, rx302_bstack
    lt rx302_pos, -1, rx302_done924
    lt rx302_pos, 0, rx302_fail926
    eq $I19, 0, rx302_fail926
    nqp_islist $I20, rx302_cstack
    unless $I20, rx302_jump927
    elements $I18, rx302_bstack
    le $I18, 0, rx302_cut928
    dec $I18
    set $I18, rx302_bstack[$I18]
  rx302_cut928:
    assign rx302_cstack, $I18
  rx302_jump927:
    jump $I19
  rx302_done924:
    rx302_cur."!cursor_fail"()
    .return (rx302_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_66_1347719921.536_caps" :subid("cuid_memo_67_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["xblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_66_1347719921.536_nfa" :subid("cuid_memo_68_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 119
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 2
    push $P5007, $P5011
    box $P5012, 117
    push $P5007, $P5012
    box $P5013, 8
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 104
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 105
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    push $P5001, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 2
    push $P5022, $P5023
    box $P5024, 108
    push $P5022, $P5024
    box $P5025, 6
    push $P5022, $P5025
    push $P5001, $P5022
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 101
    push $P5026, $P5028
    box $P5029, 7
    push $P5026, $P5029
    push $P5001, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 4
    push $P5030, $P5031
    box $P5032, 32
    push $P5030, $P5032
    box $P5033, 12
    push $P5030, $P5033
    push $P5001, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 110
    push $P5034, $P5036
    box $P5037, 9
    push $P5034, $P5037
    push $P5001, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 116
    push $P5038, $P5040
    box $P5041, 10
    push $P5038, $P5041
    push $P5001, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 105
    push $P5042, $P5044
    box $P5045, 11
    push $P5042, $P5045
    push $P5001, $P5042
    new $P5046, 'ResizablePMCArray'
    box $P5047, 2
    push $P5046, $P5047
    box $P5048, 108
    push $P5046, $P5048
    box $P5049, 7
    push $P5046, $P5049
    push $P5001, $P5046
    new $P5050, 'ResizablePMCArray'
    box $P5051, 0
    push $P5050, $P5051
    box $P5052, 0
    push $P5050, $P5052
    box $P5053, 0
    push $P5050, $P5053
    push $P5001, $P5050
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_66_1347719921.536_alt_nfa__12_1347719923.035" :subid("cuid_memo_69_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 119
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 104
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 105
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 108
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 101
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 117
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 110
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 116
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 105
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 108
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_67_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 805
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx309_tgt
    .local int rx309_pos
    .local int rx309_off
    .local int rx309_eos
    .local int rx309_rep
    .local pmc rx309_cur
    .local pmc rx309_curclass
    .local pmc rx309_bstack
    .local pmc rx309_cstack
    (rx309_cur, rx309_tgt, rx309_pos, rx309_curclass, rx309_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx309_cur
    length rx309_eos, rx309_tgt
    eq $I19, 1, rx309_restart943
    gt rx309_pos, rx309_eos, rx309_fail944
    repr_get_attr_int $I11, self, rx309_curclass, "$!from"
    ne $I11, -1, rxscan310_done950
    goto rxscan310_scan949
  rxscan310_loop948:
    inc rx309_pos
    gt rx309_pos, rx309_eos, rx309_fail944
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!from", rx309_pos
  rxscan310_scan949:
    nqp_rxmark rx309_bstack, rxscan310_loop948, rx309_pos, 0
  rxscan310_done950:
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!pos", rx309_pos
    store_lex unicode:"$\x{a2}", rx309_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx309_bstack, rxcap311_fail952, rx309_pos, 0
    add $I11, rx309_pos, 6
    gt $I11, rx309_eos, rx309_fail944
    substr $S10, rx309_tgt, rx309_pos, 6
    ne $S10, ucs4:"repeat", rx309_fail944
    add rx309_pos, 6
    nqp_rxpeek $I19, rx309_bstack, rxcap311_fail952
    inc $I19
    set $I11, rx309_bstack[$I19]
    $P11 = rx309_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx309_pos)
    rx309_cstack = rx309_cur."!cursor_capture"($P11, "sym")
    goto rxcap311_done951
  rxcap311_fail952:
    goto rx309_fail944
  rxcap311_done951:
    ge rx309_pos, rx309_eos, rx309_fail944
    is_cclass $I11, .CCLASS_WHITESPACE, rx309_tgt, rx309_pos
    unless $I11, rx309_fail944
    add rx309_pos, 1
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!pos", rx309_pos
    $P11 = rx309_cur."ws"()
    repr_get_attr_int $I11, $P11, rx309_curclass, "$!pos"
    lt $I11, 0, rx309_fail944
    repr_get_attr_int rx309_pos, $P11, rx309_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt313_0955
    nqp_push_label $P11, alt313_1965
    nqp_rxmark rx309_bstack, alt313_end954, -1, 0
    rx309_cur."!alt"(rx309_pos, "alt_nfa__13_1347719923.055", $P11)
    goto rx309_fail944
  alt313_0955:
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!pos", rx309_pos
    $P11 = rx309_cur."ws"()
    repr_get_attr_int $I11, $P11, rx309_curclass, "$!pos"
    lt $I11, 0, rx309_fail944
    repr_get_attr_int rx309_pos, $P11, rx309_curclass, "$!pos"
    nqp_rxmark rx309_bstack, rxcap315_fail958, rx309_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt316_0960
    nqp_push_label $P11, alt316_1961
    nqp_rxmark rx309_bstack, alt316_end959, -1, 0
    rx309_cur."!alt"(rx309_pos, "alt_nfa__14_1347719923.055", $P11)
    goto rx309_fail944
  alt316_0960:
    add $I11, rx309_pos, 5
    gt $I11, rx309_eos, rx309_fail944
    substr $S10, rx309_tgt, rx309_pos, 5
    ne $S10, ucs4:"while", rx309_fail944
    add rx309_pos, 5
    goto alt316_end959
  alt316_1961:
    add $I11, rx309_pos, 5
    gt $I11, rx309_eos, rx309_fail944
    substr $S10, rx309_tgt, rx309_pos, 5
    ne $S10, ucs4:"until", rx309_fail944
    add rx309_pos, 5
    goto alt316_end959
  alt316_end959:
    nqp_rxcommit rx309_bstack, alt316_end959
    nqp_rxpeek $I19, rx309_bstack, rxcap315_fail958
    inc $I19
    set $I11, rx309_bstack[$I19]
    $P11 = rx309_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx309_pos)
    rx309_cstack = rx309_cur."!cursor_capture"($P11, "wu")
    goto rxcap315_done957
  rxcap315_fail958:
    goto rx309_fail944
  rxcap315_done957:
    ge rx309_pos, rx309_eos, rx309_fail944
    is_cclass $I11, .CCLASS_WHITESPACE, rx309_tgt, rx309_pos
    unless $I11, rx309_fail944
    add rx309_pos, 1
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!pos", rx309_pos
    $P11 = rx309_cur."ws"()
    repr_get_attr_int $I11, $P11, rx309_curclass, "$!pos"
    lt $I11, 0, rx309_fail944
    repr_get_attr_int rx309_pos, $P11, rx309_curclass, "$!pos"
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!pos", rx309_pos
    $P11 = rx309_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx309_curclass, "$!pos"
    lt $I11, 0, rx309_fail944
    nqp_rxmark rx309_bstack, rxsubrule318_pass963, -1, 0
  rxsubrule318_pass963:
    rx309_cstack = rx309_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx309_pos, $P11, rx309_curclass, "$!pos"
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!pos", rx309_pos
    $P11 = rx309_cur."ws"()
    repr_get_attr_int $I11, $P11, rx309_curclass, "$!pos"
    lt $I11, 0, rx309_fail944
    repr_get_attr_int rx309_pos, $P11, rx309_curclass, "$!pos"
    goto alt313_end954
  alt313_1965:
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!pos", rx309_pos
    $P11 = rx309_cur."ws"()
    repr_get_attr_int $I11, $P11, rx309_curclass, "$!pos"
    lt $I11, 0, rx309_fail944
    repr_get_attr_int rx309_pos, $P11, rx309_curclass, "$!pos"
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!pos", rx309_pos
    $P11 = rx309_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx309_curclass, "$!pos"
    lt $I11, 0, rx309_fail944
    nqp_rxmark rx309_bstack, rxsubrule321_pass967, -1, 0
  rxsubrule321_pass967:
    rx309_cstack = rx309_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx309_pos, $P11, rx309_curclass, "$!pos"
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!pos", rx309_pos
    $P11 = rx309_cur."ws"()
    repr_get_attr_int $I11, $P11, rx309_curclass, "$!pos"
    lt $I11, 0, rx309_fail944
    repr_get_attr_int rx309_pos, $P11, rx309_curclass, "$!pos"
    nqp_rxmark rx309_bstack, rxcap323_fail970, rx309_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt324_0972
    nqp_push_label $P11, alt324_1973
    nqp_rxmark rx309_bstack, alt324_end971, -1, 0
    rx309_cur."!alt"(rx309_pos, "alt_nfa__15_1347719923.057", $P11)
    goto rx309_fail944
  alt324_0972:
    add $I11, rx309_pos, 5
    gt $I11, rx309_eos, rx309_fail944
    substr $S10, rx309_tgt, rx309_pos, 5
    ne $S10, ucs4:"while", rx309_fail944
    add rx309_pos, 5
    goto alt324_end971
  alt324_1973:
    add $I11, rx309_pos, 5
    gt $I11, rx309_eos, rx309_fail944
    substr $S10, rx309_tgt, rx309_pos, 5
    ne $S10, ucs4:"until", rx309_fail944
    add rx309_pos, 5
    goto alt324_end971
  alt324_end971:
    nqp_rxcommit rx309_bstack, alt324_end971
    nqp_rxpeek $I19, rx309_bstack, rxcap323_fail970
    inc $I19
    set $I11, rx309_bstack[$I19]
    $P11 = rx309_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx309_pos)
    rx309_cstack = rx309_cur."!cursor_capture"($P11, "wu")
    goto rxcap323_done969
  rxcap323_fail970:
    goto rx309_fail944
  rxcap323_done969:
    ge rx309_pos, rx309_eos, rx309_fail944
    is_cclass $I11, .CCLASS_WHITESPACE, rx309_tgt, rx309_pos
    unless $I11, rx309_fail944
    add rx309_pos, 1
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!pos", rx309_pos
    $P11 = rx309_cur."ws"()
    repr_get_attr_int $I11, $P11, rx309_curclass, "$!pos"
    lt $I11, 0, rx309_fail944
    repr_get_attr_int rx309_pos, $P11, rx309_curclass, "$!pos"
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!pos", rx309_pos
    $P11 = rx309_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx309_curclass, "$!pos"
    lt $I11, 0, rx309_fail944
    nqp_rxmark rx309_bstack, rxsubrule326_pass975, -1, 0
  rxsubrule326_pass975:
    rx309_cstack = rx309_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx309_pos, $P11, rx309_curclass, "$!pos"
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!pos", rx309_pos
    $P11 = rx309_cur."ws"()
    repr_get_attr_int $I11, $P11, rx309_curclass, "$!pos"
    lt $I11, 0, rx309_fail944
    repr_get_attr_int rx309_pos, $P11, rx309_curclass, "$!pos"
    goto alt313_end954
  alt313_end954:
    nqp_rxcommit rx309_bstack, alt313_end954
    repr_bind_attr_int rx309_cur, rx309_curclass, "$!pos", rx309_pos
    $P11 = rx309_cur."ws"()
    repr_get_attr_int $I11, $P11, rx309_curclass, "$!pos"
    lt $I11, 0, rx309_fail944
    repr_get_attr_int rx309_pos, $P11, rx309_curclass, "$!pos"
    rx309_cur."!cursor_pass"(rx309_pos, "statement_control:sym<repeat>", 'backtrack'=>1)
    .return (rx309_cur)
  rx309_restart943:
    repr_get_attr_obj rx309_cstack, rx309_cur, rx309_curclass, "$!cstack"
  rx309_fail944:
    unless rx309_bstack, rx309_done942
    pop $I19, rx309_bstack
    if_null rx309_cstack, rx309_cstack_done947
    unless rx309_cstack, rx309_cstack_done947
    dec $I19
    set $P11, rx309_cstack[$I19]
  rx309_cstack_done947:
    pop rx309_rep, rx309_bstack
    pop rx309_pos, rx309_bstack
    pop $I19, rx309_bstack
    lt rx309_pos, -1, rx309_done942
    lt rx309_pos, 0, rx309_fail944
    eq $I19, 0, rx309_fail944
    nqp_islist $I20, rx309_cstack
    unless $I20, rx309_jump945
    elements $I18, rx309_bstack
    le $I18, 0, rx309_cut946
    dec $I18
    set $I18, rx309_bstack[$I18]
  rx309_cut946:
    assign rx309_cstack, $I18
  rx309_jump945:
    jump $I19
  rx309_done942:
    rx309_cur."!cursor_fail"()
    .return (rx309_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1347719921.536_caps" :subid("cuid_memo_70_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["wu"], $P5003
    box $P5004, 0
    set $P5001["xblock"], $P5004
    box $P5005, 0
    set $P5001["pblock"], $P5005
    box $P5006, 0
    set $P5001["EXPR"], $P5006
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1347719921.536_nfa" :subid("cuid_memo_71_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 114
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 101
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 112
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 101
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 97
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 116
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 4
    push $P5031, $P5032
    box $P5033, 32
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 0
    push $P5035, $P5036
    box $P5037, 0
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1347719921.536_alt_nfa__14_1347719923.055" :subid("cuid_memo_72_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 119
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 104
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 105
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 108
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 101
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 117
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 110
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 116
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 105
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 108
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1347719921.536_alt_nfa__15_1347719923.057" :subid("cuid_memo_73_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 119
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 104
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 105
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 108
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 101
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 117
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 110
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 116
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 105
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 108
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1347719921.536_alt_nfa__13_1347719923.055" :subid("cuid_memo_74_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_68_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 814
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx329_tgt
    .local int rx329_pos
    .local int rx329_off
    .local int rx329_eos
    .local int rx329_rep
    .local pmc rx329_cur
    .local pmc rx329_curclass
    .local pmc rx329_bstack
    .local pmc rx329_cstack
    (rx329_cur, rx329_tgt, rx329_pos, rx329_curclass, rx329_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx329_cur
    length rx329_eos, rx329_tgt
    eq $I19, 1, rx329_restart980
    gt rx329_pos, rx329_eos, rx329_fail981
    repr_get_attr_int $I11, self, rx329_curclass, "$!from"
    ne $I11, -1, rxscan330_done987
    goto rxscan330_scan986
  rxscan330_loop985:
    inc rx329_pos
    gt rx329_pos, rx329_eos, rx329_fail981
    repr_bind_attr_int rx329_cur, rx329_curclass, "$!from", rx329_pos
  rxscan330_scan986:
    nqp_rxmark rx329_bstack, rxscan330_loop985, rx329_pos, 0
  rxscan330_done987:
    repr_bind_attr_int rx329_cur, rx329_curclass, "$!pos", rx329_pos
    store_lex unicode:"$\x{a2}", rx329_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx329_bstack, rxcap331_fail989, rx329_pos, 0
    add $I11, rx329_pos, 3
    gt $I11, rx329_eos, rx329_fail981
    substr $S10, rx329_tgt, rx329_pos, 3
    ne $S10, ucs4:"for", rx329_fail981
    add rx329_pos, 3
    nqp_rxpeek $I19, rx329_bstack, rxcap331_fail989
    inc $I19
    set $I11, rx329_bstack[$I19]
    $P11 = rx329_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx329_pos)
    rx329_cstack = rx329_cur."!cursor_capture"($P11, "sym")
    goto rxcap331_done988
  rxcap331_fail989:
    goto rx329_fail981
  rxcap331_done988:
    ge rx329_pos, rx329_eos, rx329_fail981
    is_cclass $I11, .CCLASS_WHITESPACE, rx329_tgt, rx329_pos
    unless $I11, rx329_fail981
    add rx329_pos, 1
    repr_bind_attr_int rx329_cur, rx329_curclass, "$!pos", rx329_pos
    $P11 = rx329_cur."ws"()
    repr_get_attr_int $I11, $P11, rx329_curclass, "$!pos"
    lt $I11, 0, rx329_fail981
    repr_get_attr_int rx329_pos, $P11, rx329_curclass, "$!pos"
    repr_bind_attr_int rx329_cur, rx329_curclass, "$!pos", rx329_pos
    $P11 = rx329_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx329_curclass, "$!pos"
    lt $I11, 0, rx329_fail981
    nqp_rxmark rx329_bstack, rxsubrule333_pass991, -1, 0
  rxsubrule333_pass991:
    rx329_cstack = rx329_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx329_pos, $P11, rx329_curclass, "$!pos"
    repr_bind_attr_int rx329_cur, rx329_curclass, "$!pos", rx329_pos
    $P11 = rx329_cur."ws"()
    repr_get_attr_int $I11, $P11, rx329_curclass, "$!pos"
    lt $I11, 0, rx329_fail981
    repr_get_attr_int rx329_pos, $P11, rx329_curclass, "$!pos"
    rx329_cur."!cursor_pass"(rx329_pos, "statement_control:sym<for>", 'backtrack'=>1)
    .return (rx329_cur)
  rx329_restart980:
    repr_get_attr_obj rx329_cstack, rx329_cur, rx329_curclass, "$!cstack"
  rx329_fail981:
    unless rx329_bstack, rx329_done979
    pop $I19, rx329_bstack
    if_null rx329_cstack, rx329_cstack_done984
    unless rx329_cstack, rx329_cstack_done984
    dec $I19
    set $P11, rx329_cstack[$I19]
  rx329_cstack_done984:
    pop rx329_rep, rx329_bstack
    pop rx329_pos, rx329_bstack
    pop $I19, rx329_bstack
    lt rx329_pos, -1, rx329_done979
    lt rx329_pos, 0, rx329_fail981
    eq $I19, 0, rx329_fail981
    nqp_islist $I20, rx329_cstack
    unless $I20, rx329_jump982
    elements $I18, rx329_bstack
    le $I18, 0, rx329_cut983
    dec $I18
    set $I18, rx329_bstack[$I18]
  rx329_cut983:
    assign rx329_cstack, $I18
  rx329_jump982:
    jump $I19
  rx329_done979:
    rx329_cur."!cursor_fail"()
    .return (rx329_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_68_1347719921.536_caps" :subid("cuid_memo_75_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["xblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_68_1347719921.536_nfa" :subid("cuid_memo_76_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 102
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 111
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 114
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 4
    push $P5019, $P5020
    box $P5021, 32
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_69_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 820
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx335_tgt
    .local int rx335_pos
    .local int rx335_off
    .local int rx335_eos
    .local int rx335_rep
    .local pmc rx335_cur
    .local pmc rx335_curclass
    .local pmc rx335_bstack
    .local pmc rx335_cstack
    (rx335_cur, rx335_tgt, rx335_pos, rx335_curclass, rx335_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx335_cur
    length rx335_eos, rx335_tgt
    eq $I19, 1, rx335_restart995
    gt rx335_pos, rx335_eos, rx335_fail996
    repr_get_attr_int $I11, self, rx335_curclass, "$!from"
    ne $I11, -1, rxscan336_done1002
    goto rxscan336_scan1001
  rxscan336_loop1000:
    inc rx335_pos
    gt rx335_pos, rx335_eos, rx335_fail996
    repr_bind_attr_int rx335_cur, rx335_curclass, "$!from", rx335_pos
  rxscan336_scan1001:
    nqp_rxmark rx335_bstack, rxscan336_loop1000, rx335_pos, 0
  rxscan336_done1002:
    nqp_rxmark rx335_bstack, rxcap337_fail1004, rx335_pos, 0
    add $I11, rx335_pos, 5
    gt $I11, rx335_eos, rx335_fail996
    substr $S10, rx335_tgt, rx335_pos, 5
    ne $S10, ucs4:"CATCH", rx335_fail996
    add rx335_pos, 5
    nqp_rxpeek $I19, rx335_bstack, rxcap337_fail1004
    inc $I19
    set $I11, rx335_bstack[$I19]
    $P11 = rx335_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx335_pos)
    rx335_cstack = rx335_cur."!cursor_capture"($P11, "sym")
    goto rxcap337_done1003
  rxcap337_fail1004:
    goto rx335_fail996
  rxcap337_done1003:
    ge rx335_pos, rx335_eos, rx335_fail996
    is_cclass $I11, .CCLASS_WHITESPACE, rx335_tgt, rx335_pos
    unless $I11, rx335_fail996
    add rx335_pos, 1
    repr_bind_attr_int rx335_cur, rx335_curclass, "$!pos", rx335_pos
    $P11 = rx335_cur."ws"()
    repr_get_attr_int $I11, $P11, rx335_curclass, "$!pos"
    lt $I11, 0, rx335_fail996
    repr_get_attr_int rx335_pos, $P11, rx335_curclass, "$!pos"
    repr_bind_attr_int rx335_cur, rx335_curclass, "$!pos", rx335_pos
    $P11 = rx335_cur."block"()
    repr_get_attr_int $I11, $P11, rx335_curclass, "$!pos"
    lt $I11, 0, rx335_fail996
    nqp_rxmark rx335_bstack, rxsubrule339_pass1006, -1, 0
  rxsubrule339_pass1006:
    rx335_cstack = rx335_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx335_pos, $P11, rx335_curclass, "$!pos"
    repr_bind_attr_int rx335_cur, rx335_curclass, "$!pos", rx335_pos
    $P11 = rx335_cur."ws"()
    repr_get_attr_int $I11, $P11, rx335_curclass, "$!pos"
    lt $I11, 0, rx335_fail996
    repr_get_attr_int rx335_pos, $P11, rx335_curclass, "$!pos"
    rx335_cur."!cursor_pass"(rx335_pos, "statement_control:sym<CATCH>", 'backtrack'=>1)
    .return (rx335_cur)
  rx335_restart995:
    repr_get_attr_obj rx335_cstack, rx335_cur, rx335_curclass, "$!cstack"
  rx335_fail996:
    unless rx335_bstack, rx335_done994
    pop $I19, rx335_bstack
    if_null rx335_cstack, rx335_cstack_done999
    unless rx335_cstack, rx335_cstack_done999
    dec $I19
    set $P11, rx335_cstack[$I19]
  rx335_cstack_done999:
    pop rx335_rep, rx335_bstack
    pop rx335_pos, rx335_bstack
    pop $I19, rx335_bstack
    lt rx335_pos, -1, rx335_done994
    lt rx335_pos, 0, rx335_fail996
    eq $I19, 0, rx335_fail996
    nqp_islist $I20, rx335_cstack
    unless $I20, rx335_jump997
    elements $I18, rx335_bstack
    le $I18, 0, rx335_cut998
    dec $I18
    set $I18, rx335_bstack[$I18]
  rx335_cut998:
    assign rx335_cstack, $I18
  rx335_jump997:
    jump $I19
  rx335_done994:
    rx335_cur."!cursor_fail"()
    .return (rx335_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_69_1347719921.536_caps" :subid("cuid_memo_77_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["block"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_69_1347719921.536_nfa" :subid("cuid_memo_78_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 67
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 65
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 84
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 67
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 72
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 4
    push $P5023, $P5024
    box $P5025, 32
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 0
    push $P5027, $P5028
    box $P5029, 0
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_70_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 825
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx341_tgt
    .local int rx341_pos
    .local int rx341_off
    .local int rx341_eos
    .local int rx341_rep
    .local pmc rx341_cur
    .local pmc rx341_curclass
    .local pmc rx341_bstack
    .local pmc rx341_cstack
    (rx341_cur, rx341_tgt, rx341_pos, rx341_curclass, rx341_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx341_cur
    length rx341_eos, rx341_tgt
    eq $I19, 1, rx341_restart1010
    gt rx341_pos, rx341_eos, rx341_fail1011
    repr_get_attr_int $I11, self, rx341_curclass, "$!from"
    ne $I11, -1, rxscan342_done1017
    goto rxscan342_scan1016
  rxscan342_loop1015:
    inc rx341_pos
    gt rx341_pos, rx341_eos, rx341_fail1011
    repr_bind_attr_int rx341_cur, rx341_curclass, "$!from", rx341_pos
  rxscan342_scan1016:
    nqp_rxmark rx341_bstack, rxscan342_loop1015, rx341_pos, 0
  rxscan342_done1017:
    nqp_rxmark rx341_bstack, rxcap343_fail1019, rx341_pos, 0
    add $I11, rx341_pos, 7
    gt $I11, rx341_eos, rx341_fail1011
    substr $S10, rx341_tgt, rx341_pos, 7
    ne $S10, ucs4:"CONTROL", rx341_fail1011
    add rx341_pos, 7
    nqp_rxpeek $I19, rx341_bstack, rxcap343_fail1019
    inc $I19
    set $I11, rx341_bstack[$I19]
    $P11 = rx341_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx341_pos)
    rx341_cstack = rx341_cur."!cursor_capture"($P11, "sym")
    goto rxcap343_done1018
  rxcap343_fail1019:
    goto rx341_fail1011
  rxcap343_done1018:
    ge rx341_pos, rx341_eos, rx341_fail1011
    is_cclass $I11, .CCLASS_WHITESPACE, rx341_tgt, rx341_pos
    unless $I11, rx341_fail1011
    add rx341_pos, 1
    repr_bind_attr_int rx341_cur, rx341_curclass, "$!pos", rx341_pos
    $P11 = rx341_cur."ws"()
    repr_get_attr_int $I11, $P11, rx341_curclass, "$!pos"
    lt $I11, 0, rx341_fail1011
    repr_get_attr_int rx341_pos, $P11, rx341_curclass, "$!pos"
    repr_bind_attr_int rx341_cur, rx341_curclass, "$!pos", rx341_pos
    $P11 = rx341_cur."block"()
    repr_get_attr_int $I11, $P11, rx341_curclass, "$!pos"
    lt $I11, 0, rx341_fail1011
    nqp_rxmark rx341_bstack, rxsubrule345_pass1021, -1, 0
  rxsubrule345_pass1021:
    rx341_cstack = rx341_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx341_pos, $P11, rx341_curclass, "$!pos"
    repr_bind_attr_int rx341_cur, rx341_curclass, "$!pos", rx341_pos
    $P11 = rx341_cur."ws"()
    repr_get_attr_int $I11, $P11, rx341_curclass, "$!pos"
    lt $I11, 0, rx341_fail1011
    repr_get_attr_int rx341_pos, $P11, rx341_curclass, "$!pos"
    rx341_cur."!cursor_pass"(rx341_pos, "statement_control:sym<CONTROL>", 'backtrack'=>1)
    .return (rx341_cur)
  rx341_restart1010:
    repr_get_attr_obj rx341_cstack, rx341_cur, rx341_curclass, "$!cstack"
  rx341_fail1011:
    unless rx341_bstack, rx341_done1009
    pop $I19, rx341_bstack
    if_null rx341_cstack, rx341_cstack_done1014
    unless rx341_cstack, rx341_cstack_done1014
    dec $I19
    set $P11, rx341_cstack[$I19]
  rx341_cstack_done1014:
    pop rx341_rep, rx341_bstack
    pop rx341_pos, rx341_bstack
    pop $I19, rx341_bstack
    lt rx341_pos, -1, rx341_done1009
    lt rx341_pos, 0, rx341_fail1011
    eq $I19, 0, rx341_fail1011
    nqp_islist $I20, rx341_cstack
    unless $I20, rx341_jump1012
    elements $I18, rx341_bstack
    le $I18, 0, rx341_cut1013
    dec $I18
    set $I18, rx341_bstack[$I18]
  rx341_cut1013:
    assign rx341_cstack, $I18
  rx341_jump1012:
    jump $I19
  rx341_done1009:
    rx341_cur."!cursor_fail"()
    .return (rx341_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_70_1347719921.536_caps" :subid("cuid_memo_79_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["block"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_70_1347719921.536_nfa" :subid("cuid_memo_80_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 67
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 79
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 78
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 84
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 82
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 79
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 76
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 4
    push $P5031, $P5032
    box $P5033, 32
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 0
    push $P5035, $P5036
    box $P5037, 0
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix" :subid("cuid_71_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 830
    .param pmc self 
    $P5001 = self."!protoregex"("statement_prefix")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_72_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 831
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx347_tgt
    .local int rx347_pos
    .local int rx347_off
    .local int rx347_eos
    .local int rx347_rep
    .local pmc rx347_cur
    .local pmc rx347_curclass
    .local pmc rx347_bstack
    .local pmc rx347_cstack
    (rx347_cur, rx347_tgt, rx347_pos, rx347_curclass, rx347_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx347_cur
    length rx347_eos, rx347_tgt
    eq $I19, 1, rx347_restart1025
    gt rx347_pos, rx347_eos, rx347_fail1026
    repr_get_attr_int $I11, self, rx347_curclass, "$!from"
    ne $I11, -1, rxscan348_done1032
    goto rxscan348_scan1031
  rxscan348_loop1030:
    inc rx347_pos
    gt rx347_pos, rx347_eos, rx347_fail1026
    repr_bind_attr_int rx347_cur, rx347_curclass, "$!from", rx347_pos
  rxscan348_scan1031:
    nqp_rxmark rx347_bstack, rxscan348_loop1030, rx347_pos, 0
  rxscan348_done1032:
    nqp_rxmark rx347_bstack, rxcap349_fail1034, rx347_pos, 0
    add $I11, rx347_pos, 5
    gt $I11, rx347_eos, rx347_fail1026
    substr $S10, rx347_tgt, rx347_pos, 5
    ne $S10, ucs4:"BEGIN", rx347_fail1026
    add rx347_pos, 5
    nqp_rxpeek $I19, rx347_bstack, rxcap349_fail1034
    inc $I19
    set $I11, rx347_bstack[$I19]
    $P11 = rx347_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx347_pos)
    rx347_cstack = rx347_cur."!cursor_capture"($P11, "sym")
    goto rxcap349_done1033
  rxcap349_fail1034:
    goto rx347_fail1026
  rxcap349_done1033:
    repr_bind_attr_int rx347_cur, rx347_curclass, "$!pos", rx347_pos
    $P11 = rx347_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx347_curclass, "$!pos"
    lt $I11, 0, rx347_fail1026
    nqp_rxmark rx347_bstack, rxsubrule350_pass1035, -1, 0
  rxsubrule350_pass1035:
    rx347_cstack = rx347_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx347_pos, $P11, rx347_curclass, "$!pos"
    rx347_cur."!cursor_pass"(rx347_pos, "statement_prefix:sym<BEGIN>", 'backtrack'=>1)
    .return (rx347_cur)
  rx347_restart1025:
    repr_get_attr_obj rx347_cstack, rx347_cur, rx347_curclass, "$!cstack"
  rx347_fail1026:
    unless rx347_bstack, rx347_done1024
    pop $I19, rx347_bstack
    if_null rx347_cstack, rx347_cstack_done1029
    unless rx347_cstack, rx347_cstack_done1029
    dec $I19
    set $P11, rx347_cstack[$I19]
  rx347_cstack_done1029:
    pop rx347_rep, rx347_bstack
    pop rx347_pos, rx347_bstack
    pop $I19, rx347_bstack
    lt rx347_pos, -1, rx347_done1024
    lt rx347_pos, 0, rx347_fail1026
    eq $I19, 0, rx347_fail1026
    nqp_islist $I20, rx347_cstack
    unless $I20, rx347_jump1027
    elements $I18, rx347_bstack
    le $I18, 0, rx347_cut1028
    dec $I18
    set $I18, rx347_bstack[$I18]
  rx347_cut1028:
    assign rx347_cstack, $I18
  rx347_jump1027:
    jump $I19
  rx347_done1024:
    rx347_cur."!cursor_fail"()
    .return (rx347_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_72_1347719921.536_caps" :subid("cuid_memo_81_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["blorst"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_72_1347719921.536_nfa" :subid("cuid_memo_82_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 66
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 69
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 71
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 73
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 78
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "blorst"
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_73_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 832
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx351_tgt
    .local int rx351_pos
    .local int rx351_off
    .local int rx351_eos
    .local int rx351_rep
    .local pmc rx351_cur
    .local pmc rx351_curclass
    .local pmc rx351_bstack
    .local pmc rx351_cstack
    (rx351_cur, rx351_tgt, rx351_pos, rx351_curclass, rx351_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx351_cur
    length rx351_eos, rx351_tgt
    eq $I19, 1, rx351_restart1038
    gt rx351_pos, rx351_eos, rx351_fail1039
    repr_get_attr_int $I11, self, rx351_curclass, "$!from"
    ne $I11, -1, rxscan352_done1045
    goto rxscan352_scan1044
  rxscan352_loop1043:
    inc rx351_pos
    gt rx351_pos, rx351_eos, rx351_fail1039
    repr_bind_attr_int rx351_cur, rx351_curclass, "$!from", rx351_pos
  rxscan352_scan1044:
    nqp_rxmark rx351_bstack, rxscan352_loop1043, rx351_pos, 0
  rxscan352_done1045:
    nqp_rxmark rx351_bstack, rxcap353_fail1047, rx351_pos, 0
    add $I11, rx351_pos, 4
    gt $I11, rx351_eos, rx351_fail1039
    substr $S10, rx351_tgt, rx351_pos, 4
    ne $S10, ucs4:"INIT", rx351_fail1039
    add rx351_pos, 4
    nqp_rxpeek $I19, rx351_bstack, rxcap353_fail1047
    inc $I19
    set $I11, rx351_bstack[$I19]
    $P11 = rx351_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx351_pos)
    rx351_cstack = rx351_cur."!cursor_capture"($P11, "sym")
    goto rxcap353_done1046
  rxcap353_fail1047:
    goto rx351_fail1039
  rxcap353_done1046:
    repr_bind_attr_int rx351_cur, rx351_curclass, "$!pos", rx351_pos
    $P11 = rx351_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx351_curclass, "$!pos"
    lt $I11, 0, rx351_fail1039
    nqp_rxmark rx351_bstack, rxsubrule354_pass1048, -1, 0
  rxsubrule354_pass1048:
    rx351_cstack = rx351_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx351_pos, $P11, rx351_curclass, "$!pos"
    rx351_cur."!cursor_pass"(rx351_pos, "statement_prefix:sym<INIT>", 'backtrack'=>1)
    .return (rx351_cur)
  rx351_restart1038:
    repr_get_attr_obj rx351_cstack, rx351_cur, rx351_curclass, "$!cstack"
  rx351_fail1039:
    unless rx351_bstack, rx351_done1037
    pop $I19, rx351_bstack
    if_null rx351_cstack, rx351_cstack_done1042
    unless rx351_cstack, rx351_cstack_done1042
    dec $I19
    set $P11, rx351_cstack[$I19]
  rx351_cstack_done1042:
    pop rx351_rep, rx351_bstack
    pop rx351_pos, rx351_bstack
    pop $I19, rx351_bstack
    lt rx351_pos, -1, rx351_done1037
    lt rx351_pos, 0, rx351_fail1039
    eq $I19, 0, rx351_fail1039
    nqp_islist $I20, rx351_cstack
    unless $I20, rx351_jump1040
    elements $I18, rx351_bstack
    le $I18, 0, rx351_cut1041
    dec $I18
    set $I18, rx351_bstack[$I18]
  rx351_cut1041:
    assign rx351_cstack, $I18
  rx351_jump1040:
    jump $I19
  rx351_done1037:
    rx351_cur."!cursor_fail"()
    .return (rx351_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_73_1347719921.536_caps" :subid("cuid_memo_83_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["blorst"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_73_1347719921.536_nfa" :subid("cuid_memo_84_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 73
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 78
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 73
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 84
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "blorst"
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_74_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 834
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx355_tgt
    .local int rx355_pos
    .local int rx355_off
    .local int rx355_eos
    .local int rx355_rep
    .local pmc rx355_cur
    .local pmc rx355_curclass
    .local pmc rx355_bstack
    .local pmc rx355_cstack
    (rx355_cur, rx355_tgt, rx355_pos, rx355_curclass, rx355_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx355_cur
    length rx355_eos, rx355_tgt
    eq $I19, 1, rx355_restart1051
    gt rx355_pos, rx355_eos, rx355_fail1052
    repr_get_attr_int $I11, self, rx355_curclass, "$!from"
    ne $I11, -1, rxscan356_done1058
    goto rxscan356_scan1057
  rxscan356_loop1056:
    inc rx355_pos
    gt rx355_pos, rx355_eos, rx355_fail1052
    repr_bind_attr_int rx355_cur, rx355_curclass, "$!from", rx355_pos
  rxscan356_scan1057:
    nqp_rxmark rx355_bstack, rxscan356_loop1056, rx355_pos, 0
  rxscan356_done1058:
    nqp_rxmark rx355_bstack, rxcap357_fail1060, rx355_pos, 0
    add $I11, rx355_pos, 3
    gt $I11, rx355_eos, rx355_fail1052
    substr $S10, rx355_tgt, rx355_pos, 3
    ne $S10, ucs4:"try", rx355_fail1052
    add rx355_pos, 3
    nqp_rxpeek $I19, rx355_bstack, rxcap357_fail1060
    inc $I19
    set $I11, rx355_bstack[$I19]
    $P11 = rx355_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx355_pos)
    rx355_cstack = rx355_cur."!cursor_capture"($P11, "sym")
    goto rxcap357_done1059
  rxcap357_fail1060:
    goto rx355_fail1052
  rxcap357_done1059:
    repr_bind_attr_int rx355_cur, rx355_curclass, "$!pos", rx355_pos
    $P11 = rx355_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx355_curclass, "$!pos"
    lt $I11, 0, rx355_fail1052
    nqp_rxmark rx355_bstack, rxsubrule358_pass1061, -1, 0
  rxsubrule358_pass1061:
    rx355_cstack = rx355_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx355_pos, $P11, rx355_curclass, "$!pos"
    rx355_cur."!cursor_pass"(rx355_pos, "statement_prefix:sym<try>", 'backtrack'=>1)
    .return (rx355_cur)
  rx355_restart1051:
    repr_get_attr_obj rx355_cstack, rx355_cur, rx355_curclass, "$!cstack"
  rx355_fail1052:
    unless rx355_bstack, rx355_done1050
    pop $I19, rx355_bstack
    if_null rx355_cstack, rx355_cstack_done1055
    unless rx355_cstack, rx355_cstack_done1055
    dec $I19
    set $P11, rx355_cstack[$I19]
  rx355_cstack_done1055:
    pop rx355_rep, rx355_bstack
    pop rx355_pos, rx355_bstack
    pop $I19, rx355_bstack
    lt rx355_pos, -1, rx355_done1050
    lt rx355_pos, 0, rx355_fail1052
    eq $I19, 0, rx355_fail1052
    nqp_islist $I20, rx355_cstack
    unless $I20, rx355_jump1053
    elements $I18, rx355_bstack
    le $I18, 0, rx355_cut1054
    dec $I18
    set $I18, rx355_bstack[$I18]
  rx355_cut1054:
    assign rx355_cstack, $I18
  rx355_jump1053:
    jump $I19
  rx355_done1050:
    rx355_cur."!cursor_fail"()
    .return (rx355_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_74_1347719921.536_caps" :subid("cuid_memo_85_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["blorst"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_74_1347719921.536_nfa" :subid("cuid_memo_86_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 116
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 114
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 121
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "blorst"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_75_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 839
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx359_tgt
    .local int rx359_pos
    .local int rx359_off
    .local int rx359_eos
    .local int rx359_rep
    .local pmc rx359_cur
    .local pmc rx359_curclass
    .local pmc rx359_bstack
    .local pmc rx359_cstack
    (rx359_cur, rx359_tgt, rx359_pos, rx359_curclass, rx359_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx359_cur
    length rx359_eos, rx359_tgt
    eq $I19, 1, rx359_restart1064
    gt rx359_pos, rx359_eos, rx359_fail1065
    repr_get_attr_int $I11, self, rx359_curclass, "$!from"
    ne $I11, -1, rxscan360_done1071
    goto rxscan360_scan1070
  rxscan360_loop1069:
    inc rx359_pos
    gt rx359_pos, rx359_eos, rx359_fail1065
    repr_bind_attr_int rx359_cur, rx359_curclass, "$!from", rx359_pos
  rxscan360_scan1070:
    nqp_rxmark rx359_bstack, rxscan360_loop1069, rx359_pos, 0
  rxscan360_done1071:
    ge rx359_pos, rx359_eos, rx359_fail1065
    is_cclass $I11, .CCLASS_WHITESPACE, rx359_tgt, rx359_pos
    unless $I11, rx359_fail1065
    add rx359_pos, 1
    repr_bind_attr_int rx359_cur, rx359_curclass, "$!pos", rx359_pos
    $P11 = rx359_cur."ws"()
    repr_get_attr_int $I11, $P11, rx359_curclass, "$!pos"
    lt $I11, 0, rx359_fail1065
    repr_get_attr_int rx359_pos, $P11, rx359_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt362_01074
    nqp_push_label $P11, alt362_11076
    nqp_rxmark rx359_bstack, alt362_end1073, -1, 0
    rx359_cur."!alt"(rx359_pos, "alt_nfa__16_1347719923.108", $P11)
    goto rx359_fail1065
  alt362_01074:
    ge rx359_pos, rx359_eos, rx359_fail1065
    substr $S11, rx359_tgt, rx359_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx359_fail1065
    repr_bind_attr_int rx359_cur, rx359_curclass, "$!pos", rx359_pos
    $P11 = rx359_cur."block"()
    repr_get_attr_int $I11, $P11, rx359_curclass, "$!pos"
    lt $I11, 0, rx359_fail1065
    nqp_rxmark rx359_bstack, rxsubrule363_pass1075, -1, 0
  rxsubrule363_pass1075:
    rx359_cstack = rx359_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx359_pos, $P11, rx359_curclass, "$!pos"
    goto alt362_end1073
  alt362_11076:
    repr_bind_attr_int rx359_cur, rx359_curclass, "$!pos", rx359_pos
    $P11 = rx359_cur."statement"()
    repr_get_attr_int $I11, $P11, rx359_curclass, "$!pos"
    lt $I11, 0, rx359_fail1065
    nqp_rxmark rx359_bstack, rxsubrule364_pass1077, -1, 0
  rxsubrule364_pass1077:
    rx359_cstack = rx359_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx359_pos, $P11, rx359_curclass, "$!pos"
    goto alt362_end1073
  alt362_end1073:
    nqp_rxcommit rx359_bstack, alt362_end1073
    rx359_cur."!cursor_pass"(rx359_pos, "blorst", 'backtrack'=>1)
    .return (rx359_cur)
  rx359_restart1064:
    repr_get_attr_obj rx359_cstack, rx359_cur, rx359_curclass, "$!cstack"
  rx359_fail1065:
    unless rx359_bstack, rx359_done1063
    pop $I19, rx359_bstack
    if_null rx359_cstack, rx359_cstack_done1068
    unless rx359_cstack, rx359_cstack_done1068
    dec $I19
    set $P11, rx359_cstack[$I19]
  rx359_cstack_done1068:
    pop rx359_rep, rx359_bstack
    pop rx359_pos, rx359_bstack
    pop $I19, rx359_bstack
    lt rx359_pos, -1, rx359_done1063
    lt rx359_pos, 0, rx359_fail1065
    eq $I19, 0, rx359_fail1065
    nqp_islist $I20, rx359_cstack
    unless $I20, rx359_jump1066
    elements $I18, rx359_bstack
    le $I18, 0, rx359_cut1067
    dec $I18
    set $I18, rx359_bstack[$I18]
  rx359_cut1067:
    assign rx359_cstack, $I18
  rx359_jump1066:
    jump $I19
  rx359_done1063:
    rx359_cur."!cursor_fail"()
    .return (rx359_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_75_1347719921.536_caps" :subid("cuid_memo_87_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["block"], $P5002
    box $P5003, 0
    set $P5001["statement"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_75_1347719921.536_nfa" :subid("cuid_memo_88_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 4
    push $P5003, $P5004
    box $P5005, 32
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 6
    push $P5011, $P5012
    box $P5013, "{"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    box $P5015, 8
    push $P5011, $P5015
    box $P5016, "statement"
    push $P5011, $P5016
    box $P5017, 0
    push $P5011, $P5017
    push $P5001, $P5011
    new $P5018, 'ResizablePMCArray'
    box $P5019, 0
    push $P5018, $P5019
    box $P5020, 0
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_75_1347719921.536_alt_nfa__16_1347719923.108" :subid("cuid_memo_89_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 6
    push $P5004, $P5005
    box $P5006, "{"
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "statement"
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5012, $P5014
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond" :subid("cuid_76_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 845
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_cond")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_77_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 847
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx365_tgt
    .local int rx365_pos
    .local int rx365_off
    .local int rx365_eos
    .local int rx365_rep
    .local pmc rx365_cur
    .local pmc rx365_curclass
    .local pmc rx365_bstack
    .local pmc rx365_cstack
    (rx365_cur, rx365_tgt, rx365_pos, rx365_curclass, rx365_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx365_cur
    length rx365_eos, rx365_tgt
    eq $I19, 1, rx365_restart1080
    gt rx365_pos, rx365_eos, rx365_fail1081
    repr_get_attr_int $I11, self, rx365_curclass, "$!from"
    ne $I11, -1, rxscan366_done1087
    goto rxscan366_scan1086
  rxscan366_loop1085:
    inc rx365_pos
    gt rx365_pos, rx365_eos, rx365_fail1081
    repr_bind_attr_int rx365_cur, rx365_curclass, "$!from", rx365_pos
  rxscan366_scan1086:
    nqp_rxmark rx365_bstack, rxscan366_loop1085, rx365_pos, 0
  rxscan366_done1087:
    nqp_rxmark rx365_bstack, rxcap367_fail1089, rx365_pos, 0
    add $I11, rx365_pos, 2
    gt $I11, rx365_eos, rx365_fail1081
    substr $S10, rx365_tgt, rx365_pos, 2
    ne $S10, ucs4:"if", rx365_fail1081
    add rx365_pos, 2
    nqp_rxpeek $I19, rx365_bstack, rxcap367_fail1089
    inc $I19
    set $I11, rx365_bstack[$I19]
    $P11 = rx365_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx365_pos)
    rx365_cstack = rx365_cur."!cursor_capture"($P11, "sym")
    goto rxcap367_done1088
  rxcap367_fail1089:
    goto rx365_fail1081
  rxcap367_done1088:
    repr_bind_attr_int rx365_cur, rx365_curclass, "$!pos", rx365_pos
    $P11 = rx365_cur."ws"()
    repr_get_attr_int $I11, $P11, rx365_curclass, "$!pos"
    lt $I11, 0, rx365_fail1081
    repr_get_attr_int rx365_pos, $P11, rx365_curclass, "$!pos"
    repr_bind_attr_int rx365_cur, rx365_curclass, "$!pos", rx365_pos
    $P11 = rx365_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx365_curclass, "$!pos"
    lt $I11, 0, rx365_fail1081
    nqp_rxmark rx365_bstack, rxsubrule369_pass1091, -1, 0
  rxsubrule369_pass1091:
    rx365_cstack = rx365_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx365_pos, $P11, rx365_curclass, "$!pos"
    repr_bind_attr_int rx365_cur, rx365_curclass, "$!pos", rx365_pos
    $P11 = rx365_cur."ws"()
    repr_get_attr_int $I11, $P11, rx365_curclass, "$!pos"
    lt $I11, 0, rx365_fail1081
    repr_get_attr_int rx365_pos, $P11, rx365_curclass, "$!pos"
    rx365_cur."!cursor_pass"(rx365_pos, "statement_mod_cond:sym<if>", 'backtrack'=>1)
    .return (rx365_cur)
  rx365_restart1080:
    repr_get_attr_obj rx365_cstack, rx365_cur, rx365_curclass, "$!cstack"
  rx365_fail1081:
    unless rx365_bstack, rx365_done1079
    pop $I19, rx365_bstack
    if_null rx365_cstack, rx365_cstack_done1084
    unless rx365_cstack, rx365_cstack_done1084
    dec $I19
    set $P11, rx365_cstack[$I19]
  rx365_cstack_done1084:
    pop rx365_rep, rx365_bstack
    pop rx365_pos, rx365_bstack
    pop $I19, rx365_bstack
    lt rx365_pos, -1, rx365_done1079
    lt rx365_pos, 0, rx365_fail1081
    eq $I19, 0, rx365_fail1081
    nqp_islist $I20, rx365_cstack
    unless $I20, rx365_jump1082
    elements $I18, rx365_bstack
    le $I18, 0, rx365_cut1083
    dec $I18
    set $I18, rx365_bstack[$I18]
  rx365_cut1083:
    assign rx365_cstack, $I18
  rx365_jump1082:
    jump $I19
  rx365_done1079:
    rx365_cur."!cursor_fail"()
    .return (rx365_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_77_1347719921.536_caps" :subid("cuid_memo_90_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_77_1347719921.536_nfa" :subid("cuid_memo_91_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 105
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 102
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_78_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 848
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx371_tgt
    .local int rx371_pos
    .local int rx371_off
    .local int rx371_eos
    .local int rx371_rep
    .local pmc rx371_cur
    .local pmc rx371_curclass
    .local pmc rx371_bstack
    .local pmc rx371_cstack
    (rx371_cur, rx371_tgt, rx371_pos, rx371_curclass, rx371_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx371_cur
    length rx371_eos, rx371_tgt
    eq $I19, 1, rx371_restart1095
    gt rx371_pos, rx371_eos, rx371_fail1096
    repr_get_attr_int $I11, self, rx371_curclass, "$!from"
    ne $I11, -1, rxscan372_done1102
    goto rxscan372_scan1101
  rxscan372_loop1100:
    inc rx371_pos
    gt rx371_pos, rx371_eos, rx371_fail1096
    repr_bind_attr_int rx371_cur, rx371_curclass, "$!from", rx371_pos
  rxscan372_scan1101:
    nqp_rxmark rx371_bstack, rxscan372_loop1100, rx371_pos, 0
  rxscan372_done1102:
    nqp_rxmark rx371_bstack, rxcap373_fail1104, rx371_pos, 0
    add $I11, rx371_pos, 6
    gt $I11, rx371_eos, rx371_fail1096
    substr $S10, rx371_tgt, rx371_pos, 6
    ne $S10, ucs4:"unless", rx371_fail1096
    add rx371_pos, 6
    nqp_rxpeek $I19, rx371_bstack, rxcap373_fail1104
    inc $I19
    set $I11, rx371_bstack[$I19]
    $P11 = rx371_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx371_pos)
    rx371_cstack = rx371_cur."!cursor_capture"($P11, "sym")
    goto rxcap373_done1103
  rxcap373_fail1104:
    goto rx371_fail1096
  rxcap373_done1103:
    repr_bind_attr_int rx371_cur, rx371_curclass, "$!pos", rx371_pos
    $P11 = rx371_cur."ws"()
    repr_get_attr_int $I11, $P11, rx371_curclass, "$!pos"
    lt $I11, 0, rx371_fail1096
    repr_get_attr_int rx371_pos, $P11, rx371_curclass, "$!pos"
    repr_bind_attr_int rx371_cur, rx371_curclass, "$!pos", rx371_pos
    $P11 = rx371_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx371_curclass, "$!pos"
    lt $I11, 0, rx371_fail1096
    nqp_rxmark rx371_bstack, rxsubrule375_pass1106, -1, 0
  rxsubrule375_pass1106:
    rx371_cstack = rx371_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx371_pos, $P11, rx371_curclass, "$!pos"
    repr_bind_attr_int rx371_cur, rx371_curclass, "$!pos", rx371_pos
    $P11 = rx371_cur."ws"()
    repr_get_attr_int $I11, $P11, rx371_curclass, "$!pos"
    lt $I11, 0, rx371_fail1096
    repr_get_attr_int rx371_pos, $P11, rx371_curclass, "$!pos"
    rx371_cur."!cursor_pass"(rx371_pos, "statement_mod_cond:sym<unless>", 'backtrack'=>1)
    .return (rx371_cur)
  rx371_restart1095:
    repr_get_attr_obj rx371_cstack, rx371_cur, rx371_curclass, "$!cstack"
  rx371_fail1096:
    unless rx371_bstack, rx371_done1094
    pop $I19, rx371_bstack
    if_null rx371_cstack, rx371_cstack_done1099
    unless rx371_cstack, rx371_cstack_done1099
    dec $I19
    set $P11, rx371_cstack[$I19]
  rx371_cstack_done1099:
    pop rx371_rep, rx371_bstack
    pop rx371_pos, rx371_bstack
    pop $I19, rx371_bstack
    lt rx371_pos, -1, rx371_done1094
    lt rx371_pos, 0, rx371_fail1096
    eq $I19, 0, rx371_fail1096
    nqp_islist $I20, rx371_cstack
    unless $I20, rx371_jump1097
    elements $I18, rx371_bstack
    le $I18, 0, rx371_cut1098
    dec $I18
    set $I18, rx371_bstack[$I18]
  rx371_cut1098:
    assign rx371_cstack, $I18
  rx371_jump1097:
    jump $I19
  rx371_done1094:
    rx371_cur."!cursor_fail"()
    .return (rx371_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_78_1347719921.536_caps" :subid("cuid_memo_92_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_78_1347719921.536_nfa" :subid("cuid_memo_93_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 117
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 110
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 108
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 101
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 115
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 115
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 0
    push $P5027, $P5028
    box $P5029, 0
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop" :subid("cuid_79_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 850
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_loop")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_80_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 852
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx377_tgt
    .local int rx377_pos
    .local int rx377_off
    .local int rx377_eos
    .local int rx377_rep
    .local pmc rx377_cur
    .local pmc rx377_curclass
    .local pmc rx377_bstack
    .local pmc rx377_cstack
    (rx377_cur, rx377_tgt, rx377_pos, rx377_curclass, rx377_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx377_cur
    length rx377_eos, rx377_tgt
    eq $I19, 1, rx377_restart1110
    gt rx377_pos, rx377_eos, rx377_fail1111
    repr_get_attr_int $I11, self, rx377_curclass, "$!from"
    ne $I11, -1, rxscan378_done1117
    goto rxscan378_scan1116
  rxscan378_loop1115:
    inc rx377_pos
    gt rx377_pos, rx377_eos, rx377_fail1111
    repr_bind_attr_int rx377_cur, rx377_curclass, "$!from", rx377_pos
  rxscan378_scan1116:
    nqp_rxmark rx377_bstack, rxscan378_loop1115, rx377_pos, 0
  rxscan378_done1117:
    nqp_rxmark rx377_bstack, rxcap379_fail1119, rx377_pos, 0
    add $I11, rx377_pos, 5
    gt $I11, rx377_eos, rx377_fail1111
    substr $S10, rx377_tgt, rx377_pos, 5
    ne $S10, ucs4:"while", rx377_fail1111
    add rx377_pos, 5
    nqp_rxpeek $I19, rx377_bstack, rxcap379_fail1119
    inc $I19
    set $I11, rx377_bstack[$I19]
    $P11 = rx377_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx377_pos)
    rx377_cstack = rx377_cur."!cursor_capture"($P11, "sym")
    goto rxcap379_done1118
  rxcap379_fail1119:
    goto rx377_fail1111
  rxcap379_done1118:
    repr_bind_attr_int rx377_cur, rx377_curclass, "$!pos", rx377_pos
    $P11 = rx377_cur."ws"()
    repr_get_attr_int $I11, $P11, rx377_curclass, "$!pos"
    lt $I11, 0, rx377_fail1111
    repr_get_attr_int rx377_pos, $P11, rx377_curclass, "$!pos"
    repr_bind_attr_int rx377_cur, rx377_curclass, "$!pos", rx377_pos
    $P11 = rx377_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx377_curclass, "$!pos"
    lt $I11, 0, rx377_fail1111
    nqp_rxmark rx377_bstack, rxsubrule381_pass1121, -1, 0
  rxsubrule381_pass1121:
    rx377_cstack = rx377_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx377_pos, $P11, rx377_curclass, "$!pos"
    repr_bind_attr_int rx377_cur, rx377_curclass, "$!pos", rx377_pos
    $P11 = rx377_cur."ws"()
    repr_get_attr_int $I11, $P11, rx377_curclass, "$!pos"
    lt $I11, 0, rx377_fail1111
    repr_get_attr_int rx377_pos, $P11, rx377_curclass, "$!pos"
    rx377_cur."!cursor_pass"(rx377_pos, "statement_mod_loop:sym<while>", 'backtrack'=>1)
    .return (rx377_cur)
  rx377_restart1110:
    repr_get_attr_obj rx377_cstack, rx377_cur, rx377_curclass, "$!cstack"
  rx377_fail1111:
    unless rx377_bstack, rx377_done1109
    pop $I19, rx377_bstack
    if_null rx377_cstack, rx377_cstack_done1114
    unless rx377_cstack, rx377_cstack_done1114
    dec $I19
    set $P11, rx377_cstack[$I19]
  rx377_cstack_done1114:
    pop rx377_rep, rx377_bstack
    pop rx377_pos, rx377_bstack
    pop $I19, rx377_bstack
    lt rx377_pos, -1, rx377_done1109
    lt rx377_pos, 0, rx377_fail1111
    eq $I19, 0, rx377_fail1111
    nqp_islist $I20, rx377_cstack
    unless $I20, rx377_jump1112
    elements $I18, rx377_bstack
    le $I18, 0, rx377_cut1113
    dec $I18
    set $I18, rx377_bstack[$I18]
  rx377_cut1113:
    assign rx377_cstack, $I18
  rx377_jump1112:
    jump $I19
  rx377_done1109:
    rx377_cur."!cursor_fail"()
    .return (rx377_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_80_1347719921.536_caps" :subid("cuid_memo_94_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_80_1347719921.536_nfa" :subid("cuid_memo_95_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 119
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 104
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 105
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 108
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 101
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_81_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 853
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx383_tgt
    .local int rx383_pos
    .local int rx383_off
    .local int rx383_eos
    .local int rx383_rep
    .local pmc rx383_cur
    .local pmc rx383_curclass
    .local pmc rx383_bstack
    .local pmc rx383_cstack
    (rx383_cur, rx383_tgt, rx383_pos, rx383_curclass, rx383_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx383_cur
    length rx383_eos, rx383_tgt
    eq $I19, 1, rx383_restart1125
    gt rx383_pos, rx383_eos, rx383_fail1126
    repr_get_attr_int $I11, self, rx383_curclass, "$!from"
    ne $I11, -1, rxscan384_done1132
    goto rxscan384_scan1131
  rxscan384_loop1130:
    inc rx383_pos
    gt rx383_pos, rx383_eos, rx383_fail1126
    repr_bind_attr_int rx383_cur, rx383_curclass, "$!from", rx383_pos
  rxscan384_scan1131:
    nqp_rxmark rx383_bstack, rxscan384_loop1130, rx383_pos, 0
  rxscan384_done1132:
    nqp_rxmark rx383_bstack, rxcap385_fail1134, rx383_pos, 0
    add $I11, rx383_pos, 5
    gt $I11, rx383_eos, rx383_fail1126
    substr $S10, rx383_tgt, rx383_pos, 5
    ne $S10, ucs4:"until", rx383_fail1126
    add rx383_pos, 5
    nqp_rxpeek $I19, rx383_bstack, rxcap385_fail1134
    inc $I19
    set $I11, rx383_bstack[$I19]
    $P11 = rx383_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx383_pos)
    rx383_cstack = rx383_cur."!cursor_capture"($P11, "sym")
    goto rxcap385_done1133
  rxcap385_fail1134:
    goto rx383_fail1126
  rxcap385_done1133:
    repr_bind_attr_int rx383_cur, rx383_curclass, "$!pos", rx383_pos
    $P11 = rx383_cur."ws"()
    repr_get_attr_int $I11, $P11, rx383_curclass, "$!pos"
    lt $I11, 0, rx383_fail1126
    repr_get_attr_int rx383_pos, $P11, rx383_curclass, "$!pos"
    repr_bind_attr_int rx383_cur, rx383_curclass, "$!pos", rx383_pos
    $P11 = rx383_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx383_curclass, "$!pos"
    lt $I11, 0, rx383_fail1126
    nqp_rxmark rx383_bstack, rxsubrule387_pass1136, -1, 0
  rxsubrule387_pass1136:
    rx383_cstack = rx383_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx383_pos, $P11, rx383_curclass, "$!pos"
    repr_bind_attr_int rx383_cur, rx383_curclass, "$!pos", rx383_pos
    $P11 = rx383_cur."ws"()
    repr_get_attr_int $I11, $P11, rx383_curclass, "$!pos"
    lt $I11, 0, rx383_fail1126
    repr_get_attr_int rx383_pos, $P11, rx383_curclass, "$!pos"
    rx383_cur."!cursor_pass"(rx383_pos, "statement_mod_loop:sym<until>", 'backtrack'=>1)
    .return (rx383_cur)
  rx383_restart1125:
    repr_get_attr_obj rx383_cstack, rx383_cur, rx383_curclass, "$!cstack"
  rx383_fail1126:
    unless rx383_bstack, rx383_done1124
    pop $I19, rx383_bstack
    if_null rx383_cstack, rx383_cstack_done1129
    unless rx383_cstack, rx383_cstack_done1129
    dec $I19
    set $P11, rx383_cstack[$I19]
  rx383_cstack_done1129:
    pop rx383_rep, rx383_bstack
    pop rx383_pos, rx383_bstack
    pop $I19, rx383_bstack
    lt rx383_pos, -1, rx383_done1124
    lt rx383_pos, 0, rx383_fail1126
    eq $I19, 0, rx383_fail1126
    nqp_islist $I20, rx383_cstack
    unless $I20, rx383_jump1127
    elements $I18, rx383_bstack
    le $I18, 0, rx383_cut1128
    dec $I18
    set $I18, rx383_bstack[$I18]
  rx383_cut1128:
    assign rx383_cstack, $I18
  rx383_jump1127:
    jump $I19
  rx383_done1124:
    rx383_cur."!cursor_fail"()
    .return (rx383_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_81_1347719921.536_caps" :subid("cuid_memo_96_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_81_1347719921.536_nfa" :subid("cuid_memo_97_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 117
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 110
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 116
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 105
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 108
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<for>" :subid("cuid_82_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 854
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx389_tgt
    .local int rx389_pos
    .local int rx389_off
    .local int rx389_eos
    .local int rx389_rep
    .local pmc rx389_cur
    .local pmc rx389_curclass
    .local pmc rx389_bstack
    .local pmc rx389_cstack
    (rx389_cur, rx389_tgt, rx389_pos, rx389_curclass, rx389_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx389_cur
    length rx389_eos, rx389_tgt
    eq $I19, 1, rx389_restart1140
    gt rx389_pos, rx389_eos, rx389_fail1141
    repr_get_attr_int $I11, self, rx389_curclass, "$!from"
    ne $I11, -1, rxscan390_done1147
    goto rxscan390_scan1146
  rxscan390_loop1145:
    inc rx389_pos
    gt rx389_pos, rx389_eos, rx389_fail1141
    repr_bind_attr_int rx389_cur, rx389_curclass, "$!from", rx389_pos
  rxscan390_scan1146:
    nqp_rxmark rx389_bstack, rxscan390_loop1145, rx389_pos, 0
  rxscan390_done1147:
    nqp_rxmark rx389_bstack, rxcap391_fail1149, rx389_pos, 0
    add $I11, rx389_pos, 3
    gt $I11, rx389_eos, rx389_fail1141
    substr $S10, rx389_tgt, rx389_pos, 3
    ne $S10, ucs4:"for", rx389_fail1141
    add rx389_pos, 3
    nqp_rxpeek $I19, rx389_bstack, rxcap391_fail1149
    inc $I19
    set $I11, rx389_bstack[$I19]
    $P11 = rx389_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx389_pos)
    rx389_cstack = rx389_cur."!cursor_capture"($P11, "sym")
    goto rxcap391_done1148
  rxcap391_fail1149:
    goto rx389_fail1141
  rxcap391_done1148:
    repr_bind_attr_int rx389_cur, rx389_curclass, "$!pos", rx389_pos
    $P11 = rx389_cur."ws"()
    repr_get_attr_int $I11, $P11, rx389_curclass, "$!pos"
    lt $I11, 0, rx389_fail1141
    repr_get_attr_int rx389_pos, $P11, rx389_curclass, "$!pos"
    repr_bind_attr_int rx389_cur, rx389_curclass, "$!pos", rx389_pos
    $P11 = rx389_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx389_curclass, "$!pos"
    lt $I11, 0, rx389_fail1141
    nqp_rxmark rx389_bstack, rxsubrule393_pass1151, -1, 0
  rxsubrule393_pass1151:
    rx389_cstack = rx389_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx389_pos, $P11, rx389_curclass, "$!pos"
    repr_bind_attr_int rx389_cur, rx389_curclass, "$!pos", rx389_pos
    $P11 = rx389_cur."ws"()
    repr_get_attr_int $I11, $P11, rx389_curclass, "$!pos"
    lt $I11, 0, rx389_fail1141
    repr_get_attr_int rx389_pos, $P11, rx389_curclass, "$!pos"
    rx389_cur."!cursor_pass"(rx389_pos, "statement_mod_loop:sym<for>", 'backtrack'=>1)
    .return (rx389_cur)
  rx389_restart1140:
    repr_get_attr_obj rx389_cstack, rx389_cur, rx389_curclass, "$!cstack"
  rx389_fail1141:
    unless rx389_bstack, rx389_done1139
    pop $I19, rx389_bstack
    if_null rx389_cstack, rx389_cstack_done1144
    unless rx389_cstack, rx389_cstack_done1144
    dec $I19
    set $P11, rx389_cstack[$I19]
  rx389_cstack_done1144:
    pop rx389_rep, rx389_bstack
    pop rx389_pos, rx389_bstack
    pop $I19, rx389_bstack
    lt rx389_pos, -1, rx389_done1139
    lt rx389_pos, 0, rx389_fail1141
    eq $I19, 0, rx389_fail1141
    nqp_islist $I20, rx389_cstack
    unless $I20, rx389_jump1142
    elements $I18, rx389_bstack
    le $I18, 0, rx389_cut1143
    dec $I18
    set $I18, rx389_bstack[$I18]
  rx389_cut1143:
    assign rx389_cstack, $I18
  rx389_jump1142:
    jump $I19
  rx389_done1139:
    rx389_cur."!cursor_fail"()
    .return (rx389_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_82_1347719921.536_caps" :subid("cuid_memo_98_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_82_1347719921.536_nfa" :subid("cuid_memo_99_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 102
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 111
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_83_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 858
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx395_tgt
    .local int rx395_pos
    .local int rx395_off
    .local int rx395_eos
    .local int rx395_rep
    .local pmc rx395_cur
    .local pmc rx395_curclass
    .local pmc rx395_bstack
    .local pmc rx395_cstack
    (rx395_cur, rx395_tgt, rx395_pos, rx395_curclass, rx395_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx395_cur
    length rx395_eos, rx395_tgt
    eq $I19, 1, rx395_restart1155
    gt rx395_pos, rx395_eos, rx395_fail1156
    repr_get_attr_int $I11, self, rx395_curclass, "$!from"
    ne $I11, -1, rxscan396_done1162
    goto rxscan396_scan1161
  rxscan396_loop1160:
    inc rx395_pos
    gt rx395_pos, rx395_eos, rx395_fail1156
    repr_bind_attr_int rx395_cur, rx395_curclass, "$!from", rx395_pos
  rxscan396_scan1161:
    nqp_rxmark rx395_bstack, rxscan396_loop1160, rx395_pos, 0
  rxscan396_done1162:
    repr_bind_attr_int rx395_cur, rx395_curclass, "$!pos", rx395_pos
    $P11 = rx395_cur."fatarrow"()
    repr_get_attr_int $I11, $P11, rx395_curclass, "$!pos"
    lt $I11, 0, rx395_fail1156
    nqp_rxmark rx395_bstack, rxsubrule397_pass1163, -1, 0
  rxsubrule397_pass1163:
    rx395_cstack = rx395_cur."!cursor_capture"($P11, "fatarrow")
    repr_get_attr_int rx395_pos, $P11, rx395_curclass, "$!pos"
    rx395_cur."!cursor_pass"(rx395_pos, "term:sym<fatarrow>", 'backtrack'=>1)
    .return (rx395_cur)
  rx395_restart1155:
    repr_get_attr_obj rx395_cstack, rx395_cur, rx395_curclass, "$!cstack"
  rx395_fail1156:
    unless rx395_bstack, rx395_done1154
    pop $I19, rx395_bstack
    if_null rx395_cstack, rx395_cstack_done1159
    unless rx395_cstack, rx395_cstack_done1159
    dec $I19
    set $P11, rx395_cstack[$I19]
  rx395_cstack_done1159:
    pop rx395_rep, rx395_bstack
    pop rx395_pos, rx395_bstack
    pop $I19, rx395_bstack
    lt rx395_pos, -1, rx395_done1154
    lt rx395_pos, 0, rx395_fail1156
    eq $I19, 0, rx395_fail1156
    nqp_islist $I20, rx395_cstack
    unless $I20, rx395_jump1157
    elements $I18, rx395_bstack
    le $I18, 0, rx395_cut1158
    dec $I18
    set $I18, rx395_bstack[$I18]
  rx395_cut1158:
    assign rx395_cstack, $I18
  rx395_jump1157:
    jump $I19
  rx395_done1154:
    rx395_cur."!cursor_fail"()
    .return (rx395_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_83_1347719921.536_caps" :subid("cuid_memo_100_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["fatarrow"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_83_1347719921.536_nfa" :subid("cuid_memo_101_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "fatarrow"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_84_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 859
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx398_tgt
    .local int rx398_pos
    .local int rx398_off
    .local int rx398_eos
    .local int rx398_rep
    .local pmc rx398_cur
    .local pmc rx398_curclass
    .local pmc rx398_bstack
    .local pmc rx398_cstack
    (rx398_cur, rx398_tgt, rx398_pos, rx398_curclass, rx398_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx398_cur
    length rx398_eos, rx398_tgt
    eq $I19, 1, rx398_restart1166
    gt rx398_pos, rx398_eos, rx398_fail1167
    repr_get_attr_int $I11, self, rx398_curclass, "$!from"
    ne $I11, -1, rxscan399_done1173
    goto rxscan399_scan1172
  rxscan399_loop1171:
    inc rx398_pos
    gt rx398_pos, rx398_eos, rx398_fail1167
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!from", rx398_pos
  rxscan399_scan1172:
    nqp_rxmark rx398_bstack, rxscan399_loop1171, rx398_pos, 0
  rxscan399_done1173:
    repr_bind_attr_int rx398_cur, rx398_curclass, "$!pos", rx398_pos
    $P11 = rx398_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx398_curclass, "$!pos"
    lt $I11, 0, rx398_fail1167
    nqp_rxmark rx398_bstack, rxsubrule400_pass1174, -1, 0
  rxsubrule400_pass1174:
    rx398_cstack = rx398_cur."!cursor_capture"($P11, "colonpair")
    repr_get_attr_int rx398_pos, $P11, rx398_curclass, "$!pos"
    rx398_cur."!cursor_pass"(rx398_pos, "term:sym<colonpair>", 'backtrack'=>1)
    .return (rx398_cur)
  rx398_restart1166:
    repr_get_attr_obj rx398_cstack, rx398_cur, rx398_curclass, "$!cstack"
  rx398_fail1167:
    unless rx398_bstack, rx398_done1165
    pop $I19, rx398_bstack
    if_null rx398_cstack, rx398_cstack_done1170
    unless rx398_cstack, rx398_cstack_done1170
    dec $I19
    set $P11, rx398_cstack[$I19]
  rx398_cstack_done1170:
    pop rx398_rep, rx398_bstack
    pop rx398_pos, rx398_bstack
    pop $I19, rx398_bstack
    lt rx398_pos, -1, rx398_done1165
    lt rx398_pos, 0, rx398_fail1167
    eq $I19, 0, rx398_fail1167
    nqp_islist $I20, rx398_cstack
    unless $I20, rx398_jump1168
    elements $I18, rx398_bstack
    le $I18, 0, rx398_cut1169
    dec $I18
    set $I18, rx398_bstack[$I18]
  rx398_cut1169:
    assign rx398_cstack, $I18
  rx398_jump1168:
    jump $I19
  rx398_done1165:
    rx398_cur."!cursor_fail"()
    .return (rx398_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_84_1347719921.536_caps" :subid("cuid_memo_102_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["colonpair"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_84_1347719921.536_nfa" :subid("cuid_memo_103_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "colonpair"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_85_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 860
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx401_tgt
    .local int rx401_pos
    .local int rx401_off
    .local int rx401_eos
    .local int rx401_rep
    .local pmc rx401_cur
    .local pmc rx401_curclass
    .local pmc rx401_bstack
    .local pmc rx401_cstack
    (rx401_cur, rx401_tgt, rx401_pos, rx401_curclass, rx401_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx401_cur
    length rx401_eos, rx401_tgt
    eq $I19, 1, rx401_restart1177
    gt rx401_pos, rx401_eos, rx401_fail1178
    repr_get_attr_int $I11, self, rx401_curclass, "$!from"
    ne $I11, -1, rxscan402_done1184
    goto rxscan402_scan1183
  rxscan402_loop1182:
    inc rx401_pos
    gt rx401_pos, rx401_eos, rx401_fail1178
    repr_bind_attr_int rx401_cur, rx401_curclass, "$!from", rx401_pos
  rxscan402_scan1183:
    nqp_rxmark rx401_bstack, rxscan402_loop1182, rx401_pos, 0
  rxscan402_done1184:
    repr_bind_attr_int rx401_cur, rx401_curclass, "$!pos", rx401_pos
    $P11 = rx401_cur."variable"()
    repr_get_attr_int $I11, $P11, rx401_curclass, "$!pos"
    lt $I11, 0, rx401_fail1178
    nqp_rxmark rx401_bstack, rxsubrule403_pass1185, -1, 0
  rxsubrule403_pass1185:
    rx401_cstack = rx401_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx401_pos, $P11, rx401_curclass, "$!pos"
    rx401_cur."!cursor_pass"(rx401_pos, "term:sym<variable>", 'backtrack'=>1)
    .return (rx401_cur)
  rx401_restart1177:
    repr_get_attr_obj rx401_cstack, rx401_cur, rx401_curclass, "$!cstack"
  rx401_fail1178:
    unless rx401_bstack, rx401_done1176
    pop $I19, rx401_bstack
    if_null rx401_cstack, rx401_cstack_done1181
    unless rx401_cstack, rx401_cstack_done1181
    dec $I19
    set $P11, rx401_cstack[$I19]
  rx401_cstack_done1181:
    pop rx401_rep, rx401_bstack
    pop rx401_pos, rx401_bstack
    pop $I19, rx401_bstack
    lt rx401_pos, -1, rx401_done1176
    lt rx401_pos, 0, rx401_fail1178
    eq $I19, 0, rx401_fail1178
    nqp_islist $I20, rx401_cstack
    unless $I20, rx401_jump1179
    elements $I18, rx401_bstack
    le $I18, 0, rx401_cut1180
    dec $I18
    set $I18, rx401_bstack[$I18]
  rx401_cut1180:
    assign rx401_cstack, $I18
  rx401_jump1179:
    jump $I19
  rx401_done1176:
    rx401_cur."!cursor_fail"()
    .return (rx401_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_85_1347719921.536_caps" :subid("cuid_memo_104_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["variable"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_85_1347719921.536_nfa" :subid("cuid_memo_105_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "variable"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_86_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 861
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx404_tgt
    .local int rx404_pos
    .local int rx404_off
    .local int rx404_eos
    .local int rx404_rep
    .local pmc rx404_cur
    .local pmc rx404_curclass
    .local pmc rx404_bstack
    .local pmc rx404_cstack
    (rx404_cur, rx404_tgt, rx404_pos, rx404_curclass, rx404_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx404_cur
    length rx404_eos, rx404_tgt
    eq $I19, 1, rx404_restart1188
    gt rx404_pos, rx404_eos, rx404_fail1189
    repr_get_attr_int $I11, self, rx404_curclass, "$!from"
    ne $I11, -1, rxscan405_done1195
    goto rxscan405_scan1194
  rxscan405_loop1193:
    inc rx404_pos
    gt rx404_pos, rx404_eos, rx404_fail1189
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!from", rx404_pos
  rxscan405_scan1194:
    nqp_rxmark rx404_bstack, rxscan405_loop1193, rx404_pos, 0
  rxscan405_done1195:
    repr_bind_attr_int rx404_cur, rx404_curclass, "$!pos", rx404_pos
    $P11 = rx404_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx404_curclass, "$!pos"
    lt $I11, 0, rx404_fail1189
    nqp_rxmark rx404_bstack, rxsubrule406_pass1196, -1, 0
  rxsubrule406_pass1196:
    rx404_cstack = rx404_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx404_pos, $P11, rx404_curclass, "$!pos"
    rx404_cur."!cursor_pass"(rx404_pos, "term:sym<package_declarator>", 'backtrack'=>1)
    .return (rx404_cur)
  rx404_restart1188:
    repr_get_attr_obj rx404_cstack, rx404_cur, rx404_curclass, "$!cstack"
  rx404_fail1189:
    unless rx404_bstack, rx404_done1187
    pop $I19, rx404_bstack
    if_null rx404_cstack, rx404_cstack_done1192
    unless rx404_cstack, rx404_cstack_done1192
    dec $I19
    set $P11, rx404_cstack[$I19]
  rx404_cstack_done1192:
    pop rx404_rep, rx404_bstack
    pop rx404_pos, rx404_bstack
    pop $I19, rx404_bstack
    lt rx404_pos, -1, rx404_done1187
    lt rx404_pos, 0, rx404_fail1189
    eq $I19, 0, rx404_fail1189
    nqp_islist $I20, rx404_cstack
    unless $I20, rx404_jump1190
    elements $I18, rx404_bstack
    le $I18, 0, rx404_cut1191
    dec $I18
    set $I18, rx404_bstack[$I18]
  rx404_cut1191:
    assign rx404_cstack, $I18
  rx404_jump1190:
    jump $I19
  rx404_done1187:
    rx404_cur."!cursor_fail"()
    .return (rx404_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_86_1347719921.536_caps" :subid("cuid_memo_106_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["package_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_86_1347719921.536_nfa" :subid("cuid_memo_107_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "package_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_87_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 862
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx407_tgt
    .local int rx407_pos
    .local int rx407_off
    .local int rx407_eos
    .local int rx407_rep
    .local pmc rx407_cur
    .local pmc rx407_curclass
    .local pmc rx407_bstack
    .local pmc rx407_cstack
    (rx407_cur, rx407_tgt, rx407_pos, rx407_curclass, rx407_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx407_cur
    length rx407_eos, rx407_tgt
    eq $I19, 1, rx407_restart1199
    gt rx407_pos, rx407_eos, rx407_fail1200
    repr_get_attr_int $I11, self, rx407_curclass, "$!from"
    ne $I11, -1, rxscan408_done1206
    goto rxscan408_scan1205
  rxscan408_loop1204:
    inc rx407_pos
    gt rx407_pos, rx407_eos, rx407_fail1200
    repr_bind_attr_int rx407_cur, rx407_curclass, "$!from", rx407_pos
  rxscan408_scan1205:
    nqp_rxmark rx407_bstack, rxscan408_loop1204, rx407_pos, 0
  rxscan408_done1206:
    repr_bind_attr_int rx407_cur, rx407_curclass, "$!pos", rx407_pos
    $P11 = rx407_cur."scope_declarator"()
    repr_get_attr_int $I11, $P11, rx407_curclass, "$!pos"
    lt $I11, 0, rx407_fail1200
    nqp_rxmark rx407_bstack, rxsubrule409_pass1207, -1, 0
  rxsubrule409_pass1207:
    rx407_cstack = rx407_cur."!cursor_capture"($P11, "scope_declarator")
    repr_get_attr_int rx407_pos, $P11, rx407_curclass, "$!pos"
    rx407_cur."!cursor_pass"(rx407_pos, "term:sym<scope_declarator>", 'backtrack'=>1)
    .return (rx407_cur)
  rx407_restart1199:
    repr_get_attr_obj rx407_cstack, rx407_cur, rx407_curclass, "$!cstack"
  rx407_fail1200:
    unless rx407_bstack, rx407_done1198
    pop $I19, rx407_bstack
    if_null rx407_cstack, rx407_cstack_done1203
    unless rx407_cstack, rx407_cstack_done1203
    dec $I19
    set $P11, rx407_cstack[$I19]
  rx407_cstack_done1203:
    pop rx407_rep, rx407_bstack
    pop rx407_pos, rx407_bstack
    pop $I19, rx407_bstack
    lt rx407_pos, -1, rx407_done1198
    lt rx407_pos, 0, rx407_fail1200
    eq $I19, 0, rx407_fail1200
    nqp_islist $I20, rx407_cstack
    unless $I20, rx407_jump1201
    elements $I18, rx407_bstack
    le $I18, 0, rx407_cut1202
    dec $I18
    set $I18, rx407_bstack[$I18]
  rx407_cut1202:
    assign rx407_cstack, $I18
  rx407_jump1201:
    jump $I19
  rx407_done1198:
    rx407_cur."!cursor_fail"()
    .return (rx407_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_87_1347719921.536_caps" :subid("cuid_memo_108_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["scope_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_87_1347719921.536_nfa" :subid("cuid_memo_109_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "scope_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_88_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 863
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx410_tgt
    .local int rx410_pos
    .local int rx410_off
    .local int rx410_eos
    .local int rx410_rep
    .local pmc rx410_cur
    .local pmc rx410_curclass
    .local pmc rx410_bstack
    .local pmc rx410_cstack
    (rx410_cur, rx410_tgt, rx410_pos, rx410_curclass, rx410_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx410_cur
    length rx410_eos, rx410_tgt
    eq $I19, 1, rx410_restart1210
    gt rx410_pos, rx410_eos, rx410_fail1211
    repr_get_attr_int $I11, self, rx410_curclass, "$!from"
    ne $I11, -1, rxscan411_done1217
    goto rxscan411_scan1216
  rxscan411_loop1215:
    inc rx410_pos
    gt rx410_pos, rx410_eos, rx410_fail1211
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!from", rx410_pos
  rxscan411_scan1216:
    nqp_rxmark rx410_bstack, rxscan411_loop1215, rx410_pos, 0
  rxscan411_done1217:
    repr_bind_attr_int rx410_cur, rx410_curclass, "$!pos", rx410_pos
    $P11 = rx410_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx410_curclass, "$!pos"
    lt $I11, 0, rx410_fail1211
    nqp_rxmark rx410_bstack, rxsubrule412_pass1218, -1, 0
  rxsubrule412_pass1218:
    rx410_cstack = rx410_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx410_pos, $P11, rx410_curclass, "$!pos"
    rx410_cur."!cursor_pass"(rx410_pos, "term:sym<routine_declarator>", 'backtrack'=>1)
    .return (rx410_cur)
  rx410_restart1210:
    repr_get_attr_obj rx410_cstack, rx410_cur, rx410_curclass, "$!cstack"
  rx410_fail1211:
    unless rx410_bstack, rx410_done1209
    pop $I19, rx410_bstack
    if_null rx410_cstack, rx410_cstack_done1214
    unless rx410_cstack, rx410_cstack_done1214
    dec $I19
    set $P11, rx410_cstack[$I19]
  rx410_cstack_done1214:
    pop rx410_rep, rx410_bstack
    pop rx410_pos, rx410_bstack
    pop $I19, rx410_bstack
    lt rx410_pos, -1, rx410_done1209
    lt rx410_pos, 0, rx410_fail1211
    eq $I19, 0, rx410_fail1211
    nqp_islist $I20, rx410_cstack
    unless $I20, rx410_jump1212
    elements $I18, rx410_bstack
    le $I18, 0, rx410_cut1213
    dec $I18
    set $I18, rx410_bstack[$I18]
  rx410_cut1213:
    assign rx410_cstack, $I18
  rx410_jump1212:
    jump $I19
  rx410_done1209:
    rx410_cur."!cursor_fail"()
    .return (rx410_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_88_1347719921.536_caps" :subid("cuid_memo_110_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["routine_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_88_1347719921.536_nfa" :subid("cuid_memo_111_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "routine_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_91_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 864
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_89_1347719921.536' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_90_1347719921.536' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx413_tgt
    .local int rx413_pos
    .local int rx413_off
    .local int rx413_eos
    .local int rx413_rep
    .local pmc rx413_cur
    .local pmc rx413_curclass
    .local pmc rx413_bstack
    .local pmc rx413_cstack
    (rx413_cur, rx413_tgt, rx413_pos, rx413_curclass, rx413_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx413_cur
    length rx413_eos, rx413_tgt
    eq $I19, 1, rx413_restart1221
    gt rx413_pos, rx413_eos, rx413_fail1222
    repr_get_attr_int $I11, self, rx413_curclass, "$!from"
    ne $I11, -1, rxscan414_done1228
    goto rxscan414_scan1227
  rxscan414_loop1226:
    inc rx413_pos
    gt rx413_pos, rx413_eos, rx413_fail1222
    repr_bind_attr_int rx413_cur, rx413_curclass, "$!from", rx413_pos
  rxscan414_scan1227:
    nqp_rxmark rx413_bstack, rxscan414_loop1226, rx413_pos, 0
  rxscan414_done1228:
    .const 'Sub' $P5001 = 'cuid_89_1347719921.536' 
    capture_lex $P5001
    repr_bind_attr_int rx413_cur, rx413_curclass, "$!pos", rx413_pos
    $P11 = rx413_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx413_curclass, "$!pos"
    lt $I11, 0, rx413_fail1222
    .const 'Sub' $P5002 = 'cuid_90_1347719921.536' 
    capture_lex $P5002
    repr_bind_attr_int rx413_cur, rx413_curclass, "$!pos", rx413_pos
    $P11 = rx413_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx413_curclass, "$!pos"
    ge $I11, 0, rx413_fail1222
    repr_bind_attr_int rx413_cur, rx413_curclass, "$!pos", rx413_pos
    $P11 = rx413_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx413_curclass, "$!pos"
    lt $I11, 0, rx413_fail1222
    nqp_rxmark rx413_bstack, rxsubrule422_pass1258, -1, 0
  rxsubrule422_pass1258:
    rx413_cstack = rx413_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx413_pos, $P11, rx413_curclass, "$!pos"
    rx413_cur."!cursor_pass"(rx413_pos, "term:sym<multi_declarator>", 'backtrack'=>1)
    .return (rx413_cur)
  rx413_restart1221:
    repr_get_attr_obj rx413_cstack, rx413_cur, rx413_curclass, "$!cstack"
  rx413_fail1222:
    unless rx413_bstack, rx413_done1220
    pop $I19, rx413_bstack
    if_null rx413_cstack, rx413_cstack_done1225
    unless rx413_cstack, rx413_cstack_done1225
    dec $I19
    set $P11, rx413_cstack[$I19]
  rx413_cstack_done1225:
    pop rx413_rep, rx413_bstack
    pop rx413_pos, rx413_bstack
    pop $I19, rx413_bstack
    lt rx413_pos, -1, rx413_done1220
    lt rx413_pos, 0, rx413_fail1222
    eq $I19, 0, rx413_fail1222
    nqp_islist $I20, rx413_cstack
    unless $I20, rx413_jump1223
    elements $I18, rx413_bstack
    le $I18, 0, rx413_cut1224
    dec $I18
    set $I18, rx413_bstack[$I18]
  rx413_cut1224:
    assign rx413_cstack, $I18
  rx413_jump1223:
    jump $I19
  rx413_done1220:
    rx413_cur."!cursor_fail"()
    .return (rx413_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_91_1347719921.536_caps" :subid("cuid_memo_112_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["multi_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_91_1347719921.536_nfa" :subid("cuid_memo_113_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 3
    push $P5003, $P5006
    box $P5007, 2
    push $P5003, $P5007
    box $P5008, 112
    push $P5003, $P5008
    box $P5009, 7
    push $P5003, $P5009
    box $P5010, 2
    push $P5003, $P5010
    box $P5011, 111
    push $P5003, $P5011
    box $P5012, 11
    push $P5003, $P5012
    push $P5001, $P5003
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    push $P5001, $P5013
    new $P5017, 'ResizablePMCArray'
    box $P5018, 2
    push $P5017, $P5018
    box $P5019, 117
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    push $P5001, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 108
    push $P5021, $P5023
    box $P5024, 5
    push $P5021, $P5024
    push $P5001, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 2
    push $P5025, $P5026
    box $P5027, 116
    push $P5025, $P5027
    box $P5028, 6
    push $P5025, $P5028
    push $P5001, $P5025
    new $P5029, 'ResizablePMCArray'
    box $P5030, 2
    push $P5029, $P5030
    box $P5031, 105
    push $P5029, $P5031
    box $P5032, 2
    push $P5029, $P5032
    push $P5001, $P5029
    new $P5033, 'ResizablePMCArray'
    box $P5034, 2
    push $P5033, $P5034
    box $P5035, 114
    push $P5033, $P5035
    box $P5036, 8
    push $P5033, $P5036
    push $P5001, $P5033
    new $P5037, 'ResizablePMCArray'
    box $P5038, 2
    push $P5037, $P5038
    box $P5039, 111
    push $P5037, $P5039
    box $P5040, 9
    push $P5037, $P5040
    push $P5001, $P5037
    new $P5041, 'ResizablePMCArray'
    box $P5042, 2
    push $P5041, $P5042
    box $P5043, 116
    push $P5041, $P5043
    box $P5044, 10
    push $P5041, $P5044
    push $P5001, $P5041
    new $P5045, 'ResizablePMCArray'
    box $P5046, 2
    push $P5045, $P5046
    box $P5047, 111
    push $P5045, $P5047
    box $P5048, 2
    push $P5045, $P5048
    push $P5001, $P5045
    new $P5049, 'ResizablePMCArray'
    box $P5050, 2
    push $P5049, $P5050
    box $P5051, 110
    push $P5049, $P5051
    box $P5052, 12
    push $P5049, $P5052
    push $P5001, $P5049
    new $P5053, 'ResizablePMCArray'
    box $P5054, 2
    push $P5053, $P5054
    box $P5055, 108
    push $P5053, $P5055
    box $P5056, 13
    push $P5053, $P5056
    push $P5001, $P5053
    new $P5057, 'ResizablePMCArray'
    box $P5058, 2
    push $P5057, $P5058
    box $P5059, 121
    push $P5057, $P5059
    box $P5060, 2
    push $P5057, $P5060
    push $P5001, $P5057
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_89_1347719921.536") :anon :lex :outer("cuid_91_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx415_tgt
    .local int rx415_pos
    .local int rx415_off
    .local int rx415_eos
    .local int rx415_rep
    .local pmc rx415_cur
    .local pmc rx415_curclass
    .local pmc rx415_bstack
    .local pmc rx415_cstack
    (rx415_cur, rx415_tgt, rx415_pos, rx415_curclass, rx415_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx415_cur
    length rx415_eos, rx415_tgt
    eq $I19, 1, rx415_restart1231
    gt rx415_pos, rx415_eos, rx415_fail1232
    repr_get_attr_int $I11, self, rx415_curclass, "$!from"
    ne $I11, -1, rxscan416_done1238
    goto rxscan416_scan1237
  rxscan416_loop1236:
    inc rx415_pos
    gt rx415_pos, rx415_eos, rx415_fail1232
    repr_bind_attr_int rx415_cur, rx415_curclass, "$!from", rx415_pos
  rxscan416_scan1237:
    nqp_rxmark rx415_bstack, rxscan416_loop1236, rx415_pos, 0
  rxscan416_done1238:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt417_01240
    nqp_push_label $P11, alt417_11241
    nqp_push_label $P11, alt417_21242
    nqp_rxmark rx415_bstack, alt417_end1239, -1, 0
    rx415_cur."!alt"(rx415_pos, "alt_nfa__17_1347719923.177", $P11)
    goto rx415_fail1232
  alt417_01240:
    add $I11, rx415_pos, 5
    gt $I11, rx415_eos, rx415_fail1232
    substr $S10, rx415_tgt, rx415_pos, 5
    ne $S10, ucs4:"multi", rx415_fail1232
    add rx415_pos, 5
    goto alt417_end1239
  alt417_11241:
    add $I11, rx415_pos, 5
    gt $I11, rx415_eos, rx415_fail1232
    substr $S10, rx415_tgt, rx415_pos, 5
    ne $S10, ucs4:"proto", rx415_fail1232
    add rx415_pos, 5
    goto alt417_end1239
  alt417_21242:
    add $I11, rx415_pos, 4
    gt $I11, rx415_eos, rx415_fail1232
    substr $S10, rx415_tgt, rx415_pos, 4
    ne $S10, ucs4:"only", rx415_fail1232
    add rx415_pos, 4
    goto alt417_end1239
  alt417_end1239:
    rx415_cur."!cursor_pass"(rx415_pos, 'backtrack'=>1)
    .return (rx415_cur)
  rx415_restart1231:
    repr_get_attr_obj rx415_cstack, rx415_cur, rx415_curclass, "$!cstack"
  rx415_fail1232:
    unless rx415_bstack, rx415_done1230
    pop $I19, rx415_bstack
    if_null rx415_cstack, rx415_cstack_done1235
    unless rx415_cstack, rx415_cstack_done1235
    dec $I19
    set $P11, rx415_cstack[$I19]
  rx415_cstack_done1235:
    pop rx415_rep, rx415_bstack
    pop rx415_pos, rx415_bstack
    pop $I19, rx415_bstack
    lt rx415_pos, -1, rx415_done1230
    lt rx415_pos, 0, rx415_fail1232
    eq $I19, 0, rx415_fail1232
    nqp_islist $I20, rx415_cstack
    unless $I20, rx415_jump1233
    elements $I18, rx415_bstack
    le $I18, 0, rx415_cut1234
    dec $I18
    set $I18, rx415_bstack[$I18]
  rx415_cut1234:
    assign rx415_cstack, $I18
  rx415_jump1233:
    jump $I19
  rx415_done1230:
    rx415_cur."!cursor_fail"()
    .return (rx415_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_89_1347719921.536_caps" :subid("cuid_memo_114_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_89_1347719921.536_nfa" :subid("cuid_memo_115_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 2
    push $P5003, $P5007
    box $P5008, 112
    push $P5003, $P5008
    box $P5009, 6
    push $P5003, $P5009
    box $P5010, 2
    push $P5003, $P5010
    box $P5011, 111
    push $P5003, $P5011
    box $P5012, 10
    push $P5003, $P5012
    push $P5001, $P5003
    new $P5013, 'ResizablePMCArray'
    box $P5014, 2
    push $P5013, $P5014
    box $P5015, 117
    push $P5013, $P5015
    box $P5016, 3
    push $P5013, $P5016
    push $P5001, $P5013
    new $P5017, 'ResizablePMCArray'
    box $P5018, 2
    push $P5017, $P5018
    box $P5019, 108
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    push $P5001, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 116
    push $P5021, $P5023
    box $P5024, 5
    push $P5021, $P5024
    push $P5001, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 2
    push $P5025, $P5026
    box $P5027, 105
    push $P5025, $P5027
    box $P5028, 0
    push $P5025, $P5028
    push $P5001, $P5025
    new $P5029, 'ResizablePMCArray'
    box $P5030, 2
    push $P5029, $P5030
    box $P5031, 114
    push $P5029, $P5031
    box $P5032, 7
    push $P5029, $P5032
    push $P5001, $P5029
    new $P5033, 'ResizablePMCArray'
    box $P5034, 2
    push $P5033, $P5034
    box $P5035, 111
    push $P5033, $P5035
    box $P5036, 8
    push $P5033, $P5036
    push $P5001, $P5033
    new $P5037, 'ResizablePMCArray'
    box $P5038, 2
    push $P5037, $P5038
    box $P5039, 116
    push $P5037, $P5039
    box $P5040, 9
    push $P5037, $P5040
    push $P5001, $P5037
    new $P5041, 'ResizablePMCArray'
    box $P5042, 2
    push $P5041, $P5042
    box $P5043, 111
    push $P5041, $P5043
    box $P5044, 0
    push $P5041, $P5044
    push $P5001, $P5041
    new $P5045, 'ResizablePMCArray'
    box $P5046, 2
    push $P5045, $P5046
    box $P5047, 110
    push $P5045, $P5047
    box $P5048, 11
    push $P5045, $P5048
    push $P5001, $P5045
    new $P5049, 'ResizablePMCArray'
    box $P5050, 2
    push $P5049, $P5050
    box $P5051, 108
    push $P5049, $P5051
    box $P5052, 12
    push $P5049, $P5052
    push $P5001, $P5049
    new $P5053, 'ResizablePMCArray'
    box $P5054, 2
    push $P5053, $P5054
    box $P5055, 121
    push $P5053, $P5055
    box $P5056, 0
    push $P5053, $P5056
    push $P5001, $P5053
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_89_1347719921.536_alt_nfa__17_1347719923.177" :subid("cuid_memo_116_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 109
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 117
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 108
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 116
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 105
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 112
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 114
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 111
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 116
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 111
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 2
    push $P5048, $P5049
    box $P5050, 111
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 2
    push $P5052, $P5053
    box $P5054, 110
    push $P5052, $P5054
    box $P5055, 3
    push $P5052, $P5055
    push $P5046, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 2
    push $P5056, $P5057
    box $P5058, 108
    push $P5056, $P5058
    box $P5059, 4
    push $P5056, $P5059
    push $P5046, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 2
    push $P5060, $P5061
    box $P5062, 121
    push $P5060, $P5062
    box $P5063, 0
    push $P5060, $P5063
    push $P5046, $P5060
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_90_1347719921.536") :anon :lex :outer("cuid_91_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx418_tgt
    .local int rx418_pos
    .local int rx418_off
    .local int rx418_eos
    .local int rx418_rep
    .local pmc rx418_cur
    .local pmc rx418_curclass
    .local pmc rx418_bstack
    .local pmc rx418_cstack
    (rx418_cur, rx418_tgt, rx418_pos, rx418_curclass, rx418_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx418_cur
    length rx418_eos, rx418_tgt
    eq $I19, 1, rx418_restart1245
    gt rx418_pos, rx418_eos, rx418_fail1246
    repr_get_attr_int $I11, self, rx418_curclass, "$!from"
    ne $I11, -1, rxscan419_done1252
    goto rxscan419_scan1251
  rxscan419_loop1250:
    inc rx418_pos
    gt rx418_pos, rx418_eos, rx418_fail1246
    repr_bind_attr_int rx418_cur, rx418_curclass, "$!from", rx418_pos
  rxscan419_scan1251:
    nqp_rxmark rx418_bstack, rxscan419_loop1250, rx418_pos, 0
  rxscan419_done1252:
    add $I11, rx418_pos, 5
    gt $I11, rx418_eos, rx418_fail1246
    substr $S10, rx418_tgt, rx418_pos, 5
    ne $S10, ucs4:"proto", rx418_fail1246
    add rx418_pos, 5
    repr_bind_attr_int rx418_cur, rx418_curclass, "$!pos", rx418_pos
    $P11 = rx418_cur."ws"()
    repr_get_attr_int $I11, $P11, rx418_curclass, "$!pos"
    lt $I11, 0, rx418_fail1246
    repr_get_attr_int rx418_pos, $P11, rx418_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt421_01255
    nqp_push_label $P11, alt421_11256
    nqp_push_label $P11, alt421_21257
    nqp_rxmark rx418_bstack, alt421_end1254, -1, 0
    rx418_cur."!alt"(rx418_pos, "alt_nfa__18_1347719923.186", $P11)
    goto rx418_fail1246
  alt421_01255:
    add $I11, rx418_pos, 5
    gt $I11, rx418_eos, rx418_fail1246
    substr $S10, rx418_tgt, rx418_pos, 5
    ne $S10, ucs4:"regex", rx418_fail1246
    add rx418_pos, 5
    goto alt421_end1254
  alt421_11256:
    add $I11, rx418_pos, 5
    gt $I11, rx418_eos, rx418_fail1246
    substr $S10, rx418_tgt, rx418_pos, 5
    ne $S10, ucs4:"token", rx418_fail1246
    add rx418_pos, 5
    goto alt421_end1254
  alt421_21257:
    add $I11, rx418_pos, 4
    gt $I11, rx418_eos, rx418_fail1246
    substr $S10, rx418_tgt, rx418_pos, 4
    ne $S10, ucs4:"rule", rx418_fail1246
    add rx418_pos, 4
    goto alt421_end1254
  alt421_end1254:
    nqp_rxcommit rx418_bstack, alt421_end1254
    rx418_cur."!cursor_pass"(rx418_pos, 'backtrack'=>1)
    .return (rx418_cur)
  rx418_restart1245:
    repr_get_attr_obj rx418_cstack, rx418_cur, rx418_curclass, "$!cstack"
  rx418_fail1246:
    unless rx418_bstack, rx418_done1244
    pop $I19, rx418_bstack
    if_null rx418_cstack, rx418_cstack_done1249
    unless rx418_cstack, rx418_cstack_done1249
    dec $I19
    set $P11, rx418_cstack[$I19]
  rx418_cstack_done1249:
    pop rx418_rep, rx418_bstack
    pop rx418_pos, rx418_bstack
    pop $I19, rx418_bstack
    lt rx418_pos, -1, rx418_done1244
    lt rx418_pos, 0, rx418_fail1246
    eq $I19, 0, rx418_fail1246
    nqp_islist $I20, rx418_cstack
    unless $I20, rx418_jump1247
    elements $I18, rx418_bstack
    le $I18, 0, rx418_cut1248
    dec $I18
    set $I18, rx418_bstack[$I18]
  rx418_cut1248:
    assign rx418_cstack, $I18
  rx418_jump1247:
    jump $I19
  rx418_done1244:
    rx418_cur."!cursor_fail"()
    .return (rx418_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_90_1347719921.536_caps" :subid("cuid_memo_117_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_90_1347719921.536_nfa" :subid("cuid_memo_118_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 112
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 114
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 111
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 116
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 111
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "ws"
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 114
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    box $P5031, 2
    push $P5027, $P5031
    box $P5032, 116
    push $P5027, $P5032
    box $P5033, 12
    push $P5027, $P5033
    box $P5034, 2
    push $P5027, $P5034
    box $P5035, 114
    push $P5027, $P5035
    box $P5036, 16
    push $P5027, $P5036
    push $P5001, $P5027
    new $P5037, 'ResizablePMCArray'
    box $P5038, 2
    push $P5037, $P5038
    box $P5039, 101
    push $P5037, $P5039
    box $P5040, 9
    push $P5037, $P5040
    push $P5001, $P5037
    new $P5041, 'ResizablePMCArray'
    box $P5042, 2
    push $P5041, $P5042
    box $P5043, 103
    push $P5041, $P5043
    box $P5044, 10
    push $P5041, $P5044
    push $P5001, $P5041
    new $P5045, 'ResizablePMCArray'
    box $P5046, 2
    push $P5045, $P5046
    box $P5047, 101
    push $P5045, $P5047
    box $P5048, 11
    push $P5045, $P5048
    push $P5001, $P5045
    new $P5049, 'ResizablePMCArray'
    box $P5050, 2
    push $P5049, $P5050
    box $P5051, 120
    push $P5049, $P5051
    box $P5052, 0
    push $P5049, $P5052
    push $P5001, $P5049
    new $P5053, 'ResizablePMCArray'
    box $P5054, 2
    push $P5053, $P5054
    box $P5055, 111
    push $P5053, $P5055
    box $P5056, 13
    push $P5053, $P5056
    push $P5001, $P5053
    new $P5057, 'ResizablePMCArray'
    box $P5058, 2
    push $P5057, $P5058
    box $P5059, 107
    push $P5057, $P5059
    box $P5060, 14
    push $P5057, $P5060
    push $P5001, $P5057
    new $P5061, 'ResizablePMCArray'
    box $P5062, 2
    push $P5061, $P5062
    box $P5063, 101
    push $P5061, $P5063
    box $P5064, 15
    push $P5061, $P5064
    push $P5001, $P5061
    new $P5065, 'ResizablePMCArray'
    box $P5066, 2
    push $P5065, $P5066
    box $P5067, 110
    push $P5065, $P5067
    box $P5068, 0
    push $P5065, $P5068
    push $P5001, $P5065
    new $P5069, 'ResizablePMCArray'
    box $P5070, 2
    push $P5069, $P5070
    box $P5071, 117
    push $P5069, $P5071
    box $P5072, 17
    push $P5069, $P5072
    push $P5001, $P5069
    new $P5073, 'ResizablePMCArray'
    box $P5074, 2
    push $P5073, $P5074
    box $P5075, 108
    push $P5073, $P5075
    box $P5076, 18
    push $P5073, $P5076
    push $P5001, $P5073
    new $P5077, 'ResizablePMCArray'
    box $P5078, 2
    push $P5077, $P5078
    box $P5079, 101
    push $P5077, $P5079
    box $P5080, 0
    push $P5077, $P5080
    push $P5001, $P5077
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_90_1347719921.536_alt_nfa__18_1347719923.186" :subid("cuid_memo_119_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 114
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 101
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 103
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 101
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 120
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 116
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 111
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 107
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 101
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 110
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 2
    push $P5048, $P5049
    box $P5050, 114
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 2
    push $P5052, $P5053
    box $P5054, 117
    push $P5052, $P5054
    box $P5055, 3
    push $P5052, $P5055
    push $P5046, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 2
    push $P5056, $P5057
    box $P5058, 108
    push $P5056, $P5058
    box $P5059, 4
    push $P5056, $P5059
    push $P5046, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 2
    push $P5060, $P5061
    box $P5062, 101
    push $P5060, $P5062
    box $P5063, 0
    push $P5060, $P5063
    push $P5046, $P5060
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_92_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 869
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx423_tgt
    .local int rx423_pos
    .local int rx423_off
    .local int rx423_eos
    .local int rx423_rep
    .local pmc rx423_cur
    .local pmc rx423_curclass
    .local pmc rx423_bstack
    .local pmc rx423_cstack
    (rx423_cur, rx423_tgt, rx423_pos, rx423_curclass, rx423_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx423_cur
    length rx423_eos, rx423_tgt
    eq $I19, 1, rx423_restart1261
    gt rx423_pos, rx423_eos, rx423_fail1262
    repr_get_attr_int $I11, self, rx423_curclass, "$!from"
    ne $I11, -1, rxscan424_done1268
    goto rxscan424_scan1267
  rxscan424_loop1266:
    inc rx423_pos
    gt rx423_pos, rx423_eos, rx423_fail1262
    repr_bind_attr_int rx423_cur, rx423_curclass, "$!from", rx423_pos
  rxscan424_scan1267:
    nqp_rxmark rx423_bstack, rxscan424_loop1266, rx423_pos, 0
  rxscan424_done1268:
    repr_bind_attr_int rx423_cur, rx423_curclass, "$!pos", rx423_pos
    $P11 = rx423_cur."regex_declarator"()
    repr_get_attr_int $I11, $P11, rx423_curclass, "$!pos"
    lt $I11, 0, rx423_fail1262
    nqp_rxmark rx423_bstack, rxsubrule425_pass1269, -1, 0
  rxsubrule425_pass1269:
    rx423_cstack = rx423_cur."!cursor_capture"($P11, "regex_declarator")
    repr_get_attr_int rx423_pos, $P11, rx423_curclass, "$!pos"
    rx423_cur."!cursor_pass"(rx423_pos, "term:sym<regex_declarator>", 'backtrack'=>1)
    .return (rx423_cur)
  rx423_restart1261:
    repr_get_attr_obj rx423_cstack, rx423_cur, rx423_curclass, "$!cstack"
  rx423_fail1262:
    unless rx423_bstack, rx423_done1260
    pop $I19, rx423_bstack
    if_null rx423_cstack, rx423_cstack_done1265
    unless rx423_cstack, rx423_cstack_done1265
    dec $I19
    set $P11, rx423_cstack[$I19]
  rx423_cstack_done1265:
    pop rx423_rep, rx423_bstack
    pop rx423_pos, rx423_bstack
    pop $I19, rx423_bstack
    lt rx423_pos, -1, rx423_done1260
    lt rx423_pos, 0, rx423_fail1262
    eq $I19, 0, rx423_fail1262
    nqp_islist $I20, rx423_cstack
    unless $I20, rx423_jump1263
    elements $I18, rx423_bstack
    le $I18, 0, rx423_cut1264
    dec $I18
    set $I18, rx423_bstack[$I18]
  rx423_cut1264:
    assign rx423_cstack, $I18
  rx423_jump1263:
    jump $I19
  rx423_done1260:
    rx423_cur."!cursor_fail"()
    .return (rx423_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_92_1347719921.536_caps" :subid("cuid_memo_120_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["regex_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_92_1347719921.536_nfa" :subid("cuid_memo_121_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "regex_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_93_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 870
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx426_tgt
    .local int rx426_pos
    .local int rx426_off
    .local int rx426_eos
    .local int rx426_rep
    .local pmc rx426_cur
    .local pmc rx426_curclass
    .local pmc rx426_bstack
    .local pmc rx426_cstack
    (rx426_cur, rx426_tgt, rx426_pos, rx426_curclass, rx426_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx426_cur
    length rx426_eos, rx426_tgt
    eq $I19, 1, rx426_restart1272
    gt rx426_pos, rx426_eos, rx426_fail1273
    repr_get_attr_int $I11, self, rx426_curclass, "$!from"
    ne $I11, -1, rxscan427_done1279
    goto rxscan427_scan1278
  rxscan427_loop1277:
    inc rx426_pos
    gt rx426_pos, rx426_eos, rx426_fail1273
    repr_bind_attr_int rx426_cur, rx426_curclass, "$!from", rx426_pos
  rxscan427_scan1278:
    nqp_rxmark rx426_bstack, rxscan427_loop1277, rx426_pos, 0
  rxscan427_done1279:
    repr_bind_attr_int rx426_cur, rx426_curclass, "$!pos", rx426_pos
    $P11 = rx426_cur."statement_prefix"()
    repr_get_attr_int $I11, $P11, rx426_curclass, "$!pos"
    lt $I11, 0, rx426_fail1273
    nqp_rxmark rx426_bstack, rxsubrule428_pass1280, -1, 0
  rxsubrule428_pass1280:
    rx426_cstack = rx426_cur."!cursor_capture"($P11, "statement_prefix")
    repr_get_attr_int rx426_pos, $P11, rx426_curclass, "$!pos"
    rx426_cur."!cursor_pass"(rx426_pos, "term:sym<statement_prefix>", 'backtrack'=>1)
    .return (rx426_cur)
  rx426_restart1272:
    repr_get_attr_obj rx426_cstack, rx426_cur, rx426_curclass, "$!cstack"
  rx426_fail1273:
    unless rx426_bstack, rx426_done1271
    pop $I19, rx426_bstack
    if_null rx426_cstack, rx426_cstack_done1276
    unless rx426_cstack, rx426_cstack_done1276
    dec $I19
    set $P11, rx426_cstack[$I19]
  rx426_cstack_done1276:
    pop rx426_rep, rx426_bstack
    pop rx426_pos, rx426_bstack
    pop $I19, rx426_bstack
    lt rx426_pos, -1, rx426_done1271
    lt rx426_pos, 0, rx426_fail1273
    eq $I19, 0, rx426_fail1273
    nqp_islist $I20, rx426_cstack
    unless $I20, rx426_jump1274
    elements $I18, rx426_bstack
    le $I18, 0, rx426_cut1275
    dec $I18
    set $I18, rx426_bstack[$I18]
  rx426_cut1275:
    assign rx426_cstack, $I18
  rx426_jump1274:
    jump $I19
  rx426_done1271:
    rx426_cur."!cursor_fail"()
    .return (rx426_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_93_1347719921.536_caps" :subid("cuid_memo_122_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statement_prefix"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_93_1347719921.536_nfa" :subid("cuid_memo_123_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "statement_prefix"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_94_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 871
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx429_tgt
    .local int rx429_pos
    .local int rx429_off
    .local int rx429_eos
    .local int rx429_rep
    .local pmc rx429_cur
    .local pmc rx429_curclass
    .local pmc rx429_bstack
    .local pmc rx429_cstack
    (rx429_cur, rx429_tgt, rx429_pos, rx429_curclass, rx429_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx429_cur
    length rx429_eos, rx429_tgt
    eq $I19, 1, rx429_restart1283
    gt rx429_pos, rx429_eos, rx429_fail1284
    repr_get_attr_int $I11, self, rx429_curclass, "$!from"
    ne $I11, -1, rxscan430_done1290
    goto rxscan430_scan1289
  rxscan430_loop1288:
    inc rx429_pos
    gt rx429_pos, rx429_eos, rx429_fail1284
    repr_bind_attr_int rx429_cur, rx429_curclass, "$!from", rx429_pos
  rxscan430_scan1289:
    nqp_rxmark rx429_bstack, rxscan430_loop1288, rx429_pos, 0
  rxscan430_done1290:
    repr_bind_attr_int rx429_cur, rx429_curclass, "$!pos", rx429_pos
    $P11 = rx429_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx429_curclass, "$!pos"
    lt $I11, 0, rx429_fail1284
    repr_bind_attr_int rx429_cur, rx429_curclass, "$!pos", rx429_pos
    $P11 = rx429_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx429_curclass, "$!pos"
    lt $I11, 0, rx429_fail1284
    nqp_rxmark rx429_bstack, rxsubrule431_pass1291, -1, 0
  rxsubrule431_pass1291:
    rx429_cstack = rx429_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx429_pos, $P11, rx429_curclass, "$!pos"
    rx429_cur."!cursor_pass"(rx429_pos, "term:sym<lambda>", 'backtrack'=>1)
    .return (rx429_cur)
  rx429_restart1283:
    repr_get_attr_obj rx429_cstack, rx429_cur, rx429_curclass, "$!cstack"
  rx429_fail1284:
    unless rx429_bstack, rx429_done1282
    pop $I19, rx429_bstack
    if_null rx429_cstack, rx429_cstack_done1287
    unless rx429_cstack, rx429_cstack_done1287
    dec $I19
    set $P11, rx429_cstack[$I19]
  rx429_cstack_done1287:
    pop rx429_rep, rx429_bstack
    pop rx429_pos, rx429_bstack
    pop $I19, rx429_bstack
    lt rx429_pos, -1, rx429_done1282
    lt rx429_pos, 0, rx429_fail1284
    eq $I19, 0, rx429_fail1284
    nqp_islist $I20, rx429_cstack
    unless $I20, rx429_jump1285
    elements $I18, rx429_bstack
    le $I18, 0, rx429_cut1286
    dec $I18
    set $I18, rx429_bstack[$I18]
  rx429_cut1286:
    assign rx429_cstack, $I18
  rx429_jump1285:
    jump $I19
  rx429_done1282:
    rx429_cur."!cursor_fail"()
    .return (rx429_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_94_1347719921.536_caps" :subid("cuid_memo_124_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["pblock"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_94_1347719921.536_nfa" :subid("cuid_memo_125_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "lambda"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_95_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 873
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx432_tgt
    .local int rx432_pos
    .local int rx432_off
    .local int rx432_eos
    .local int rx432_rep
    .local pmc rx432_cur
    .local pmc rx432_curclass
    .local pmc rx432_bstack
    .local pmc rx432_cstack
    (rx432_cur, rx432_tgt, rx432_pos, rx432_curclass, rx432_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx432_cur
    length rx432_eos, rx432_tgt
    eq $I19, 1, rx432_restart1294
    gt rx432_pos, rx432_eos, rx432_fail1295
    repr_get_attr_int $I11, self, rx432_curclass, "$!from"
    ne $I11, -1, rxscan433_done1301
    goto rxscan433_scan1300
  rxscan433_loop1299:
    inc rx432_pos
    gt rx432_pos, rx432_eos, rx432_fail1295
    repr_bind_attr_int rx432_cur, rx432_curclass, "$!from", rx432_pos
  rxscan433_scan1300:
    nqp_rxmark rx432_bstack, rxscan433_loop1299, rx432_pos, 0
  rxscan433_done1301:
    repr_bind_attr_int rx432_cur, rx432_curclass, "$!pos", rx432_pos
    $P11 = rx432_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx432_curclass, "$!pos"
    lt $I11, 0, rx432_fail1295
    nqp_rxmark rx432_bstack, rxsubrule434_pass1302, -1, 0
  rxsubrule434_pass1302:
    rx432_cstack = rx432_cur."!cursor_capture"($P11, "key")
    repr_get_attr_int rx432_pos, $P11, rx432_curclass, "$!pos"
    nqp_rxmark rx432_bstack, rxquantr435_done1304, rx432_pos, 0
  rxquantr435_loop1303:
    ge rx432_pos, rx432_eos, rx432_fail1295
    substr $S11, rx432_tgt, rx432_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx432_fail1295
    inc rx432_pos
    nqp_rxpeek $I19, rx432_bstack, rxquantr435_done1304
    inc $I19
    inc $I19
    set rx432_rep, rx432_bstack[$I19]
    nqp_rxcommit rx432_bstack, rxquantr435_done1304
    inc rx432_rep
    nqp_rxmark rx432_bstack, rxquantr435_done1304, rx432_pos, rx432_rep
    goto rxquantr435_loop1303
  rxquantr435_done1304:
    add $I11, rx432_pos, 2
    gt $I11, rx432_eos, rx432_fail1295
    substr $S10, rx432_tgt, rx432_pos, 2
    ne $S10, ucs4:"=>", rx432_fail1295
    add rx432_pos, 2
    repr_bind_attr_int rx432_cur, rx432_curclass, "$!pos", rx432_pos
    $P11 = rx432_cur."ws"()
    repr_get_attr_int $I11, $P11, rx432_curclass, "$!pos"
    lt $I11, 0, rx432_fail1295
    repr_get_attr_int rx432_pos, $P11, rx432_curclass, "$!pos"
    repr_bind_attr_int rx432_cur, rx432_curclass, "$!pos", rx432_pos
    $P11 = rx432_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx432_curclass, "$!pos"
    lt $I11, 0, rx432_fail1295
    nqp_rxmark rx432_bstack, rxsubrule437_pass1306, -1, 0
  rxsubrule437_pass1306:
    rx432_cstack = rx432_cur."!cursor_capture"($P11, "val")
    repr_get_attr_int rx432_pos, $P11, rx432_curclass, "$!pos"
    rx432_cur."!cursor_pass"(rx432_pos, "fatarrow", 'backtrack'=>1)
    .return (rx432_cur)
  rx432_restart1294:
    repr_get_attr_obj rx432_cstack, rx432_cur, rx432_curclass, "$!cstack"
  rx432_fail1295:
    unless rx432_bstack, rx432_done1293
    pop $I19, rx432_bstack
    if_null rx432_cstack, rx432_cstack_done1298
    unless rx432_cstack, rx432_cstack_done1298
    dec $I19
    set $P11, rx432_cstack[$I19]
  rx432_cstack_done1298:
    pop rx432_rep, rx432_bstack
    pop rx432_pos, rx432_bstack
    pop $I19, rx432_bstack
    lt rx432_pos, -1, rx432_done1293
    lt rx432_pos, 0, rx432_fail1295
    eq $I19, 0, rx432_fail1295
    nqp_islist $I20, rx432_cstack
    unless $I20, rx432_jump1296
    elements $I18, rx432_bstack
    le $I18, 0, rx432_cut1297
    dec $I18
    set $I18, rx432_bstack[$I18]
  rx432_cut1297:
    assign rx432_cstack, $I18
  rx432_jump1296:
    jump $I19
  rx432_done1293:
    rx432_cur."!cursor_fail"()
    .return (rx432_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_95_1347719921.536_caps" :subid("cuid_memo_126_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["key"], $P5002
    box $P5003, 0
    set $P5001["val"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_95_1347719921.536_nfa" :subid("cuid_memo_127_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "identifier"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 6
    push $P5007, $P5008
    box $P5009, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5007, $P5009
    box $P5010, 2
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 3
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 61
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 62
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    push $P5001, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 8
    push $P5022, $P5023
    box $P5024, "ws"
    push $P5022, $P5024
    box $P5025, 6
    push $P5022, $P5025
    push $P5001, $P5022
    new $P5026, 'ResizablePMCArray'
    box $P5027, 8
    push $P5026, $P5027
    box $P5028, "EXPR"
    push $P5026, $P5028
    box $P5029, 0
    push $P5026, $P5029
    push $P5001, $P5026
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_96_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 877
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx438_tgt
    .local int rx438_pos
    .local int rx438_off
    .local int rx438_eos
    .local int rx438_rep
    .local pmc rx438_cur
    .local pmc rx438_curclass
    .local pmc rx438_bstack
    .local pmc rx438_cstack
    (rx438_cur, rx438_tgt, rx438_pos, rx438_curclass, rx438_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx438_cur
    length rx438_eos, rx438_tgt
    eq $I19, 1, rx438_restart1309
    gt rx438_pos, rx438_eos, rx438_fail1310
    repr_get_attr_int $I11, self, rx438_curclass, "$!from"
    ne $I11, -1, rxscan439_done1316
    goto rxscan439_scan1315
  rxscan439_loop1314:
    inc rx438_pos
    gt rx438_pos, rx438_eos, rx438_fail1310
    repr_bind_attr_int rx438_cur, rx438_curclass, "$!from", rx438_pos
  rxscan439_scan1315:
    nqp_rxmark rx438_bstack, rxscan439_loop1314, rx438_pos, 0
  rxscan439_done1316:
    add $I11, rx438_pos, 1
    gt $I11, rx438_eos, rx438_fail1310
    substr $S10, rx438_tgt, rx438_pos, 1
    ne $S10, ucs4:":", rx438_fail1310
    add rx438_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt440_01318
    nqp_push_label $P11, alt440_11322
    nqp_push_label $P11, alt440_21328
    nqp_push_label $P11, alt440_31330
    nqp_rxmark rx438_bstack, alt440_end1317, -1, 0
    rx438_cur."!alt"(rx438_pos, "alt_nfa__19_1347719923.227", $P11)
    goto rx438_fail1310
  alt440_01318:
    nqp_rxmark rx438_bstack, rxcap441_fail1320, rx438_pos, 0
    add $I11, rx438_pos, 1
    gt $I11, rx438_eos, rx438_fail1310
    substr $S10, rx438_tgt, rx438_pos, 1
    ne $S10, ucs4:"!", rx438_fail1310
    add rx438_pos, 1
    nqp_rxpeek $I19, rx438_bstack, rxcap441_fail1320
    inc $I19
    set $I11, rx438_bstack[$I19]
    $P11 = rx438_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx438_pos)
    rx438_cstack = rx438_cur."!cursor_capture"($P11, "not")
    goto rxcap441_done1319
  rxcap441_fail1320:
    goto rx438_fail1310
  rxcap441_done1319:
    repr_bind_attr_int rx438_cur, rx438_curclass, "$!pos", rx438_pos
    $P11 = rx438_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx438_curclass, "$!pos"
    lt $I11, 0, rx438_fail1310
    nqp_rxmark rx438_bstack, rxsubrule442_pass1321, -1, 0
  rxsubrule442_pass1321:
    rx438_cstack = rx438_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx438_pos, $P11, rx438_curclass, "$!pos"
    goto alt440_end1317
  alt440_11322:
    repr_bind_attr_int rx438_cur, rx438_curclass, "$!pos", rx438_pos
    $P11 = rx438_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx438_curclass, "$!pos"
    lt $I11, 0, rx438_fail1310
    nqp_rxmark rx438_bstack, rxsubrule443_pass1323, -1, 0
  rxsubrule443_pass1323:
    rx438_cstack = rx438_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx438_pos, $P11, rx438_curclass, "$!pos"
    nqp_rxmark rx438_bstack, rxquantr444_done1325, rx438_pos, 0
  rxquantr444_loop1324:
    repr_bind_attr_int rx438_cur, rx438_curclass, "$!pos", rx438_pos
    $P11 = rx438_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx438_curclass, "$!pos"
    lt $I11, 0, rx438_fail1310
    goto rxsubrule445_pass1326
  rxsubrule445_back1327:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx438_curclass, "$!pos"
    lt $I11, 0, rx438_fail1310
  rxsubrule445_pass1326:
    rx438_cstack = rx438_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule445_back1327
    push rx438_bstack, $I11
    push rx438_bstack, 0
    push rx438_bstack, rx438_pos
    elements $I11, rx438_cstack
    push rx438_bstack, $I11
    repr_get_attr_int rx438_pos, $P11, rx438_curclass, "$!pos"
    nqp_rxpeek $I19, rx438_bstack, rxquantr444_done1325
    inc $I19
    inc $I19
    set rx438_rep, rx438_bstack[$I19]
    nqp_rxcommit rx438_bstack, rxquantr444_done1325
    inc rx438_rep
  rxquantr444_done1325:
    goto alt440_end1317
  alt440_21328:
    repr_bind_attr_int rx438_cur, rx438_curclass, "$!pos", rx438_pos
    $P11 = rx438_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx438_curclass, "$!pos"
    lt $I11, 0, rx438_fail1310
    nqp_rxmark rx438_bstack, rxsubrule446_pass1329, -1, 0
  rxsubrule446_pass1329:
    rx438_cstack = rx438_cur."!cursor_capture"($P11, "circumfix")
    repr_get_attr_int rx438_pos, $P11, rx438_curclass, "$!pos"
    goto alt440_end1317
  alt440_31330:
    repr_bind_attr_int rx438_cur, rx438_curclass, "$!pos", rx438_pos
    $P11 = rx438_cur."variable"()
    repr_get_attr_int $I11, $P11, rx438_curclass, "$!pos"
    lt $I11, 0, rx438_fail1310
    nqp_rxmark rx438_bstack, rxsubrule447_pass1331, -1, 0
  rxsubrule447_pass1331:
    rx438_cstack = rx438_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx438_pos, $P11, rx438_curclass, "$!pos"
    goto alt440_end1317
  alt440_end1317:
    nqp_rxcommit rx438_bstack, alt440_end1317
    rx438_cur."!cursor_pass"(rx438_pos, "colonpair", 'backtrack'=>1)
    .return (rx438_cur)
  rx438_restart1309:
    repr_get_attr_obj rx438_cstack, rx438_cur, rx438_curclass, "$!cstack"
  rx438_fail1310:
    unless rx438_bstack, rx438_done1308
    pop $I19, rx438_bstack
    if_null rx438_cstack, rx438_cstack_done1313
    unless rx438_cstack, rx438_cstack_done1313
    dec $I19
    set $P11, rx438_cstack[$I19]
  rx438_cstack_done1313:
    pop rx438_rep, rx438_bstack
    pop rx438_pos, rx438_bstack
    pop $I19, rx438_bstack
    lt rx438_pos, -1, rx438_done1308
    lt rx438_pos, 0, rx438_fail1310
    eq $I19, 0, rx438_fail1310
    nqp_islist $I20, rx438_cstack
    unless $I20, rx438_jump1311
    elements $I18, rx438_bstack
    le $I18, 0, rx438_cut1312
    dec $I18
    set $I18, rx438_bstack[$I18]
  rx438_cut1312:
    assign rx438_cstack, $I18
  rx438_jump1311:
    jump $I19
  rx438_done1308:
    rx438_cur."!cursor_fail"()
    .return (rx438_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_96_1347719921.536_caps" :subid("cuid_memo_128_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["not"], $P5002
    box $P5003, 0
    set $P5001["identifier"], $P5003
    box $P5004, 2
    set $P5001["circumfix"], $P5004
    box $P5005, 0
    set $P5001["variable"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_96_1347719921.536_nfa" :subid("cuid_memo_129_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 33
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 8
    push $P5007, $P5011
    box $P5012, "identifier"
    push $P5007, $P5012
    box $P5013, 4
    push $P5007, $P5013
    box $P5014, 8
    push $P5007, $P5014
    box $P5015, "circumfix"
    push $P5007, $P5015
    box $P5016, 0
    push $P5007, $P5016
    box $P5017, 8
    push $P5007, $P5017
    box $P5018, "variable"
    push $P5007, $P5018
    box $P5019, 0
    push $P5007, $P5019
    push $P5001, $P5007
    new $P5020, 'ResizablePMCArray'
    box $P5021, 8
    push $P5020, $P5021
    box $P5022, "identifier"
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5001, $P5020
    new $P5024, 'ResizablePMCArray'
    box $P5025, 8
    push $P5024, $P5025
    box $P5026, "circumfix"
    push $P5024, $P5026
    box $P5027, 0
    push $P5024, $P5027
    box $P5028, 1
    push $P5024, $P5028
    box $P5029, 0
    push $P5024, $P5029
    box $P5030, 0
    push $P5024, $P5030
    push $P5001, $P5024
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_96_1347719921.536_alt_nfa__19_1347719923.227" :subid("cuid_memo_130_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 33
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 8
    push $P5008, $P5009
    box $P5010, "identifier"
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "identifier"
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    push $P5012, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 8
    push $P5018, $P5019
    box $P5020, "circumfix"
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    box $P5022, 1
    push $P5018, $P5022
    box $P5023, 0
    push $P5018, $P5023
    box $P5024, 0
    push $P5018, $P5024
    push $P5012, $P5018
    push $P5001, $P5012
    new $P5025, 'ResizablePMCArray'
    new $P5026, 'ResizablePMCArray'
    push $P5025, $P5026
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "circumfix"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5025, $P5027
    push $P5001, $P5025
    new $P5031, 'ResizablePMCArray'
    new $P5032, 'ResizablePMCArray'
    push $P5031, $P5032
    new $P5033, 'ResizablePMCArray'
    box $P5034, 8
    push $P5033, $P5034
    box $P5035, "variable"
    push $P5033, $P5035
    box $P5036, 0
    push $P5033, $P5036
    push $P5031, $P5033
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_97_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 887
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx448_tgt
    .local int rx448_pos
    .local int rx448_off
    .local int rx448_eos
    .local int rx448_rep
    .local pmc rx448_cur
    .local pmc rx448_curclass
    .local pmc rx448_bstack
    .local pmc rx448_cstack
    (rx448_cur, rx448_tgt, rx448_pos, rx448_curclass, rx448_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx448_cur
    length rx448_eos, rx448_tgt
    eq $I19, 1, rx448_restart1334
    gt rx448_pos, rx448_eos, rx448_fail1335
    repr_get_attr_int $I11, self, rx448_curclass, "$!from"
    ne $I11, -1, rxscan449_done1341
    goto rxscan449_scan1340
  rxscan449_loop1339:
    inc rx448_pos
    gt rx448_pos, rx448_eos, rx448_fail1335
    repr_bind_attr_int rx448_cur, rx448_curclass, "$!from", rx448_pos
  rxscan449_scan1340:
    nqp_rxmark rx448_bstack, rxscan449_loop1339, rx448_pos, 0
  rxscan449_done1341:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt450_01343
    nqp_push_label $P11, alt450_11350
    nqp_push_label $P11, alt450_21353
    nqp_rxmark rx448_bstack, alt450_end1342, -1, 0
    rx448_cur."!alt"(rx448_pos, "alt_nfa__20_1347719923.242", $P11)
    goto rx448_fail1335
  alt450_01343:
    repr_bind_attr_int rx448_cur, rx448_curclass, "$!pos", rx448_pos
    $P11 = rx448_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx448_curclass, "$!pos"
    lt $I11, 0, rx448_fail1335
    nqp_rxmark rx448_bstack, rxsubrule451_pass1344, -1, 0
  rxsubrule451_pass1344:
    rx448_cstack = rx448_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx448_pos, $P11, rx448_curclass, "$!pos"
    nqp_rxmark rx448_bstack, rxquantr452_done1346, rx448_pos, 0
  rxquantr452_loop1345:
    repr_bind_attr_int rx448_cur, rx448_curclass, "$!pos", rx448_pos
    $P11 = rx448_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx448_curclass, "$!pos"
    lt $I11, 0, rx448_fail1335
    goto rxsubrule453_pass1347
  rxsubrule453_back1348:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx448_curclass, "$!pos"
    lt $I11, 0, rx448_fail1335
  rxsubrule453_pass1347:
    rx448_cstack = rx448_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule453_back1348
    push rx448_bstack, $I11
    push rx448_bstack, 0
    push rx448_bstack, rx448_pos
    elements $I11, rx448_cstack
    push rx448_bstack, $I11
    repr_get_attr_int rx448_pos, $P11, rx448_curclass, "$!pos"
    nqp_rxpeek $I19, rx448_bstack, rxquantr452_done1346
    inc $I19
    inc $I19
    set rx448_rep, rx448_bstack[$I19]
    nqp_rxcommit rx448_bstack, rxquantr452_done1346
    inc rx448_rep
  rxquantr452_done1346:
    repr_bind_attr_int rx448_cur, rx448_curclass, "$!pos", rx448_pos
    $P11 = rx448_cur."name"()
    repr_get_attr_int $I11, $P11, rx448_curclass, "$!pos"
    lt $I11, 0, rx448_fail1335
    nqp_rxmark rx448_bstack, rxsubrule454_pass1349, -1, 0
  rxsubrule454_pass1349:
    rx448_cstack = rx448_cur."!cursor_capture"($P11, "desigilname")
    repr_get_attr_int rx448_pos, $P11, rx448_curclass, "$!pos"
    goto alt450_end1342
  alt450_11350:
    repr_bind_attr_int rx448_cur, rx448_curclass, "$!pos", rx448_pos
    $P11 = rx448_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx448_curclass, "$!pos"
    lt $I11, 0, rx448_fail1335
    nqp_rxmark rx448_bstack, rxsubrule455_pass1351, -1, 0
  rxsubrule455_pass1351:
    rx448_cstack = rx448_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx448_pos, $P11, rx448_curclass, "$!pos"
    ge rx448_pos, rx448_eos, rx448_fail1335
    substr $S11, rx448_tgt, rx448_pos, 1
    index $I11, ucs4:"<[", $S11
    lt $I11, 0, rx448_fail1335
    repr_bind_attr_int rx448_cur, rx448_curclass, "$!pos", rx448_pos
    $P11 = rx448_cur."postcircumfix"()
    repr_get_attr_int $I11, $P11, rx448_curclass, "$!pos"
    lt $I11, 0, rx448_fail1335
    nqp_rxmark rx448_bstack, rxsubrule456_pass1352, -1, 0
  rxsubrule456_pass1352:
    rx448_cstack = rx448_cur."!cursor_capture"($P11, "postcircumfix")
    repr_get_attr_int rx448_pos, $P11, rx448_curclass, "$!pos"
    goto alt450_end1342
  alt450_21353:
    nqp_rxmark rx448_bstack, rxcap457_fail1355, rx448_pos, 0
    add $I11, rx448_pos, 1
    gt $I11, rx448_eos, rx448_fail1335
    substr $S10, rx448_tgt, rx448_pos, 1
    ne $S10, ucs4:"$", rx448_fail1335
    add rx448_pos, 1
    nqp_rxpeek $I19, rx448_bstack, rxcap457_fail1355
    inc $I19
    set $I11, rx448_bstack[$I19]
    $P11 = rx448_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx448_pos)
    rx448_cstack = rx448_cur."!cursor_capture"($P11, "sigil")
    goto rxcap457_done1354
  rxcap457_fail1355:
    goto rx448_fail1335
  rxcap457_done1354:
    nqp_rxmark rx448_bstack, rxcap458_fail1357, rx448_pos, 0
    ge rx448_pos, rx448_eos, rx448_fail1335
    substr $S11, rx448_tgt, rx448_pos, 1
    index $I11, ucs4:"/_!", $S11
    lt $I11, 0, rx448_fail1335
    inc rx448_pos
    nqp_rxpeek $I19, rx448_bstack, rxcap458_fail1357
    inc $I19
    set $I11, rx448_bstack[$I19]
    $P11 = rx448_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx448_pos)
    rx448_cstack = rx448_cur."!cursor_capture"($P11, "desigilname")
    goto rxcap458_done1356
  rxcap458_fail1357:
    goto rx448_fail1335
  rxcap458_done1356:
    goto alt450_end1342
  alt450_end1342:
    rx448_cur."!cursor_pass"(rx448_pos, "variable", 'backtrack'=>1)
    .return (rx448_cur)
  rx448_restart1334:
    repr_get_attr_obj rx448_cstack, rx448_cur, rx448_curclass, "$!cstack"
  rx448_fail1335:
    unless rx448_bstack, rx448_done1333
    pop $I19, rx448_bstack
    if_null rx448_cstack, rx448_cstack_done1338
    unless rx448_cstack, rx448_cstack_done1338
    dec $I19
    set $P11, rx448_cstack[$I19]
  rx448_cstack_done1338:
    pop rx448_rep, rx448_bstack
    pop rx448_pos, rx448_bstack
    pop $I19, rx448_bstack
    lt rx448_pos, -1, rx448_done1333
    lt rx448_pos, 0, rx448_fail1335
    eq $I19, 0, rx448_fail1335
    nqp_islist $I20, rx448_cstack
    unless $I20, rx448_jump1336
    elements $I18, rx448_bstack
    le $I18, 0, rx448_cut1337
    dec $I18
    set $I18, rx448_bstack[$I18]
  rx448_cut1337:
    assign rx448_cstack, $I18
  rx448_jump1336:
    jump $I19
  rx448_done1333:
    rx448_cur."!cursor_fail"()
    .return (rx448_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_97_1347719921.536_caps" :subid("cuid_memo_131_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sigil"], $P5002
    box $P5003, 2
    set $P5001["twigil"], $P5003
    box $P5004, 0
    set $P5001["desigilname"], $P5004
    box $P5005, 0
    set $P5001["postcircumfix"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_97_1347719921.536_nfa" :subid("cuid_memo_132_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "sigil"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 8
    push $P5003, $P5007
    box $P5008, "sigil"
    push $P5003, $P5008
    box $P5009, 4
    push $P5003, $P5009
    box $P5010, 2
    push $P5003, $P5010
    box $P5011, 36
    push $P5003, $P5011
    box $P5012, 6
    push $P5003, $P5012
    push $P5001, $P5003
    new $P5013, 'ResizablePMCArray'
    box $P5014, 8
    push $P5013, $P5014
    box $P5015, "twigil"
    push $P5013, $P5015
    box $P5016, 3
    push $P5013, $P5016
    box $P5017, 1
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 3
    push $P5013, $P5019
    push $P5001, $P5013
    new $P5020, 'ResizablePMCArray'
    box $P5021, 8
    push $P5020, $P5021
    box $P5022, "name"
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5001, $P5020
    new $P5024, 'ResizablePMCArray'
    box $P5025, 6
    push $P5024, $P5025
    box $P5026, "<["
    push $P5024, $P5026
    box $P5027, 5
    push $P5024, $P5027
    push $P5001, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 0
    push $P5028, $P5029
    box $P5030, 0
    push $P5028, $P5030
    box $P5031, 0
    push $P5028, $P5031
    push $P5001, $P5028
    new $P5032, 'ResizablePMCArray'
    box $P5033, 6
    push $P5032, $P5033
    box $P5034, "/_!"
    push $P5032, $P5034
    box $P5035, 0
    push $P5032, $P5035
    push $P5001, $P5032
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_97_1347719921.536_alt_nfa__20_1347719923.242" :subid("cuid_memo_133_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "sigil"
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 8
    push $P5008, $P5009
    box $P5010, "twigil"
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    box $P5012, 1
    push $P5008, $P5012
    box $P5013, 0
    push $P5008, $P5013
    box $P5014, 3
    push $P5008, $P5014
    push $P5002, $P5008
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "name"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5002, $P5015
    push $P5001, $P5002
    new $P5019, 'ResizablePMCArray'
    new $P5020, 'ResizablePMCArray'
    push $P5019, $P5020
    new $P5021, 'ResizablePMCArray'
    box $P5022, 8
    push $P5021, $P5022
    box $P5023, "sigil"
    push $P5021, $P5023
    box $P5024, 2
    push $P5021, $P5024
    push $P5019, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 6
    push $P5025, $P5026
    box $P5027, "<["
    push $P5025, $P5027
    box $P5028, 3
    push $P5025, $P5028
    push $P5019, $P5025
    new $P5029, 'ResizablePMCArray'
    box $P5030, 0
    push $P5029, $P5030
    box $P5031, 0
    push $P5029, $P5031
    box $P5032, 0
    push $P5029, $P5032
    push $P5019, $P5029
    push $P5001, $P5019
    new $P5033, 'ResizablePMCArray'
    new $P5034, 'ResizablePMCArray'
    push $P5033, $P5034
    new $P5035, 'ResizablePMCArray'
    box $P5036, 2
    push $P5035, $P5036
    box $P5037, 36
    push $P5035, $P5037
    box $P5038, 2
    push $P5035, $P5038
    push $P5033, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 6
    push $P5039, $P5040
    box $P5041, "/_!"
    push $P5039, $P5041
    box $P5042, 0
    push $P5039, $P5042
    push $P5033, $P5039
    push $P5001, $P5033
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "sigil" :subid("cuid_98_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 893
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx459_tgt
    .local int rx459_pos
    .local int rx459_off
    .local int rx459_eos
    .local int rx459_rep
    .local pmc rx459_cur
    .local pmc rx459_curclass
    .local pmc rx459_bstack
    .local pmc rx459_cstack
    (rx459_cur, rx459_tgt, rx459_pos, rx459_curclass, rx459_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx459_cur
    length rx459_eos, rx459_tgt
    eq $I19, 1, rx459_restart1360
    gt rx459_pos, rx459_eos, rx459_fail1361
    repr_get_attr_int $I11, self, rx459_curclass, "$!from"
    ne $I11, -1, rxscan460_done1367
    goto rxscan460_scan1366
  rxscan460_loop1365:
    inc rx459_pos
    gt rx459_pos, rx459_eos, rx459_fail1361
    repr_bind_attr_int rx459_cur, rx459_curclass, "$!from", rx459_pos
  rxscan460_scan1366:
    nqp_rxmark rx459_bstack, rxscan460_loop1365, rx459_pos, 0
  rxscan460_done1367:
    ge rx459_pos, rx459_eos, rx459_fail1361
    substr $S11, rx459_tgt, rx459_pos, 1
    index $I11, ucs4:"$@%&", $S11
    lt $I11, 0, rx459_fail1361
    inc rx459_pos
    rx459_cur."!cursor_pass"(rx459_pos, "sigil", 'backtrack'=>1)
    .return (rx459_cur)
  rx459_restart1360:
    repr_get_attr_obj rx459_cstack, rx459_cur, rx459_curclass, "$!cstack"
  rx459_fail1361:
    unless rx459_bstack, rx459_done1359
    pop $I19, rx459_bstack
    if_null rx459_cstack, rx459_cstack_done1364
    unless rx459_cstack, rx459_cstack_done1364
    dec $I19
    set $P11, rx459_cstack[$I19]
  rx459_cstack_done1364:
    pop rx459_rep, rx459_bstack
    pop rx459_pos, rx459_bstack
    pop $I19, rx459_bstack
    lt rx459_pos, -1, rx459_done1359
    lt rx459_pos, 0, rx459_fail1361
    eq $I19, 0, rx459_fail1361
    nqp_islist $I20, rx459_cstack
    unless $I20, rx459_jump1362
    elements $I18, rx459_bstack
    le $I18, 0, rx459_cut1363
    dec $I18
    set $I18, rx459_bstack[$I18]
  rx459_cut1363:
    assign rx459_cstack, $I18
  rx459_jump1362:
    jump $I19
  rx459_done1359:
    rx459_cur."!cursor_fail"()
    .return (rx459_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_98_1347719921.536_caps" :subid("cuid_memo_134_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_98_1347719921.536_nfa" :subid("cuid_memo_135_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$@%&"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "twigil" :subid("cuid_99_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 895
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx461_tgt
    .local int rx461_pos
    .local int rx461_off
    .local int rx461_eos
    .local int rx461_rep
    .local pmc rx461_cur
    .local pmc rx461_curclass
    .local pmc rx461_bstack
    .local pmc rx461_cstack
    (rx461_cur, rx461_tgt, rx461_pos, rx461_curclass, rx461_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx461_cur
    length rx461_eos, rx461_tgt
    eq $I19, 1, rx461_restart1370
    gt rx461_pos, rx461_eos, rx461_fail1371
    repr_get_attr_int $I11, self, rx461_curclass, "$!from"
    ne $I11, -1, rxscan462_done1377
    goto rxscan462_scan1376
  rxscan462_loop1375:
    inc rx461_pos
    gt rx461_pos, rx461_eos, rx461_fail1371
    repr_bind_attr_int rx461_cur, rx461_curclass, "$!from", rx461_pos
  rxscan462_scan1376:
    nqp_rxmark rx461_bstack, rxscan462_loop1375, rx461_pos, 0
  rxscan462_done1377:
    ge rx461_pos, rx461_eos, rx461_fail1371
    substr $S11, rx461_tgt, rx461_pos, 1
    index $I11, ucs4:"*!?", $S11
    lt $I11, 0, rx461_fail1371
    inc rx461_pos
    rx461_cur."!cursor_pass"(rx461_pos, "twigil", 'backtrack'=>1)
    .return (rx461_cur)
  rx461_restart1370:
    repr_get_attr_obj rx461_cstack, rx461_cur, rx461_curclass, "$!cstack"
  rx461_fail1371:
    unless rx461_bstack, rx461_done1369
    pop $I19, rx461_bstack
    if_null rx461_cstack, rx461_cstack_done1374
    unless rx461_cstack, rx461_cstack_done1374
    dec $I19
    set $P11, rx461_cstack[$I19]
  rx461_cstack_done1374:
    pop rx461_rep, rx461_bstack
    pop rx461_pos, rx461_bstack
    pop $I19, rx461_bstack
    lt rx461_pos, -1, rx461_done1369
    lt rx461_pos, 0, rx461_fail1371
    eq $I19, 0, rx461_fail1371
    nqp_islist $I20, rx461_cstack
    unless $I20, rx461_jump1372
    elements $I18, rx461_bstack
    le $I18, 0, rx461_cut1373
    dec $I18
    set $I18, rx461_bstack[$I18]
  rx461_cut1373:
    assign rx461_cstack, $I18
  rx461_jump1372:
    jump $I19
  rx461_done1369:
    rx461_cur."!cursor_fail"()
    .return (rx461_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_99_1347719921.536_caps" :subid("cuid_memo_136_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_99_1347719921.536_nfa" :subid("cuid_memo_137_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "*!?"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator" :subid("cuid_100_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 897
    .param pmc self 
    $P5001 = self."!protoregex"("package_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_101_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 898
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx463_tgt
    .local int rx463_pos
    .local int rx463_off
    .local int rx463_eos
    .local int rx463_rep
    .local pmc rx463_cur
    .local pmc rx463_curclass
    .local pmc rx463_bstack
    .local pmc rx463_cstack
    (rx463_cur, rx463_tgt, rx463_pos, rx463_curclass, rx463_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx463_cur
    length rx463_eos, rx463_tgt
    eq $I19, 1, rx463_restart1380
    gt rx463_pos, rx463_eos, rx463_fail1381
    repr_get_attr_int $I11, self, rx463_curclass, "$!from"
    ne $I11, -1, rxscan464_done1387
    goto rxscan464_scan1386
  rxscan464_loop1385:
    inc rx463_pos
    gt rx463_pos, rx463_eos, rx463_fail1381
    repr_bind_attr_int rx463_cur, rx463_curclass, "$!from", rx463_pos
  rxscan464_scan1386:
    nqp_rxmark rx463_bstack, rxscan464_loop1385, rx463_pos, 0
  rxscan464_done1387:
    repr_bind_attr_int rx463_cur, rx463_curclass, "$!pos", rx463_pos
    store_lex unicode:"$\x{a2}", rx463_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1388
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1389
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5007
  fallback1389:
    unless_null $P5004, vivi_4651390
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4651390:
    set $P5003, $P5004
  fallback1388:
    set $P101, $P5003
    repr_bind_attr_int rx463_cur, rx463_curclass, "$!pos", rx463_pos
    store_lex unicode:"$\x{a2}", rx463_cur
    box $P5009, "module"
    set $P102, $P5009
    nqp_rxmark rx463_bstack, rxcap466_fail1392, rx463_pos, 0
    add $I11, rx463_pos, 6
    gt $I11, rx463_eos, rx463_fail1381
    substr $S10, rx463_tgt, rx463_pos, 6
    ne $S10, ucs4:"module", rx463_fail1381
    add rx463_pos, 6
    nqp_rxpeek $I19, rx463_bstack, rxcap466_fail1392
    inc $I19
    set $I11, rx463_bstack[$I19]
    $P11 = rx463_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx463_pos)
    rx463_cstack = rx463_cur."!cursor_capture"($P11, "sym")
    goto rxcap466_done1391
  rxcap466_fail1392:
    goto rx463_fail1381
  rxcap466_done1391:
    repr_bind_attr_int rx463_cur, rx463_curclass, "$!pos", rx463_pos
    $P11 = rx463_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx463_curclass, "$!pos"
    lt $I11, 0, rx463_fail1381
    nqp_rxmark rx463_bstack, rxsubrule467_pass1393, -1, 0
  rxsubrule467_pass1393:
    rx463_cstack = rx463_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx463_pos, $P11, rx463_curclass, "$!pos"
    rx463_cur."!cursor_pass"(rx463_pos, "package_declarator:sym<module>", 'backtrack'=>1)
    .return (rx463_cur)
  rx463_restart1380:
    repr_get_attr_obj rx463_cstack, rx463_cur, rx463_curclass, "$!cstack"
  rx463_fail1381:
    unless rx463_bstack, rx463_done1379
    pop $I19, rx463_bstack
    if_null rx463_cstack, rx463_cstack_done1384
    unless rx463_cstack, rx463_cstack_done1384
    dec $I19
    set $P11, rx463_cstack[$I19]
  rx463_cstack_done1384:
    pop rx463_rep, rx463_bstack
    pop rx463_pos, rx463_bstack
    pop $I19, rx463_bstack
    lt rx463_pos, -1, rx463_done1379
    lt rx463_pos, 0, rx463_fail1381
    eq $I19, 0, rx463_fail1381
    nqp_islist $I20, rx463_cstack
    unless $I20, rx463_jump1382
    elements $I18, rx463_bstack
    le $I18, 0, rx463_cut1383
    dec $I18
    set $I18, rx463_bstack[$I18]
  rx463_cut1383:
    assign rx463_cstack, $I18
  rx463_jump1382:
    jump $I19
  rx463_done1379:
    rx463_cur."!cursor_fail"()
    .return (rx463_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_101_1347719921.536_caps" :subid("cuid_memo_138_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_101_1347719921.536_nfa" :subid("cuid_memo_139_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 109
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 111
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 100
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 117
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 108
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 101
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 8
    push $P5035, $P5036
    box $P5037, "package_def"
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_102_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 903
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx468_tgt
    .local int rx468_pos
    .local int rx468_off
    .local int rx468_eos
    .local int rx468_rep
    .local pmc rx468_cur
    .local pmc rx468_curclass
    .local pmc rx468_bstack
    .local pmc rx468_cstack
    (rx468_cur, rx468_tgt, rx468_pos, rx468_curclass, rx468_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx468_cur
    length rx468_eos, rx468_tgt
    eq $I19, 1, rx468_restart1396
    gt rx468_pos, rx468_eos, rx468_fail1397
    repr_get_attr_int $I11, self, rx468_curclass, "$!from"
    ne $I11, -1, rxscan469_done1403
    goto rxscan469_scan1402
  rxscan469_loop1401:
    inc rx468_pos
    gt rx468_pos, rx468_eos, rx468_fail1397
    repr_bind_attr_int rx468_cur, rx468_curclass, "$!from", rx468_pos
  rxscan469_scan1402:
    nqp_rxmark rx468_bstack, rxscan469_loop1401, rx468_pos, 0
  rxscan469_done1403:
    repr_bind_attr_int rx468_cur, rx468_curclass, "$!pos", rx468_pos
    store_lex unicode:"$\x{a2}", rx468_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1404
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1405
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5007
  fallback1405:
    unless_null $P5004, vivi_4701406
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4701406:
    set $P5003, $P5004
  fallback1404:
    set $P101, $P5003
    repr_bind_attr_int rx468_cur, rx468_curclass, "$!pos", rx468_pos
    store_lex unicode:"$\x{a2}", rx468_cur
    box $P5009, "knowhow"
    set $P102, $P5009
    nqp_rxmark rx468_bstack, rxcap471_fail1408, rx468_pos, 0
    add $I11, rx468_pos, 7
    gt $I11, rx468_eos, rx468_fail1397
    substr $S10, rx468_tgt, rx468_pos, 7
    ne $S10, ucs4:"knowhow", rx468_fail1397
    add rx468_pos, 7
    nqp_rxpeek $I19, rx468_bstack, rxcap471_fail1408
    inc $I19
    set $I11, rx468_bstack[$I19]
    $P11 = rx468_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx468_pos)
    rx468_cstack = rx468_cur."!cursor_capture"($P11, "sym")
    goto rxcap471_done1407
  rxcap471_fail1408:
    goto rx468_fail1397
  rxcap471_done1407:
    repr_bind_attr_int rx468_cur, rx468_curclass, "$!pos", rx468_pos
    $P11 = rx468_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx468_curclass, "$!pos"
    lt $I11, 0, rx468_fail1397
    nqp_rxmark rx468_bstack, rxsubrule472_pass1409, -1, 0
  rxsubrule472_pass1409:
    rx468_cstack = rx468_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx468_pos, $P11, rx468_curclass, "$!pos"
    rx468_cur."!cursor_pass"(rx468_pos, "package_declarator:sym<knowhow>", 'backtrack'=>1)
    .return (rx468_cur)
  rx468_restart1396:
    repr_get_attr_obj rx468_cstack, rx468_cur, rx468_curclass, "$!cstack"
  rx468_fail1397:
    unless rx468_bstack, rx468_done1395
    pop $I19, rx468_bstack
    if_null rx468_cstack, rx468_cstack_done1400
    unless rx468_cstack, rx468_cstack_done1400
    dec $I19
    set $P11, rx468_cstack[$I19]
  rx468_cstack_done1400:
    pop rx468_rep, rx468_bstack
    pop rx468_pos, rx468_bstack
    pop $I19, rx468_bstack
    lt rx468_pos, -1, rx468_done1395
    lt rx468_pos, 0, rx468_fail1397
    eq $I19, 0, rx468_fail1397
    nqp_islist $I20, rx468_cstack
    unless $I20, rx468_jump1398
    elements $I18, rx468_bstack
    le $I18, 0, rx468_cut1399
    dec $I18
    set $I18, rx468_bstack[$I18]
  rx468_cut1399:
    assign rx468_cstack, $I18
  rx468_jump1398:
    jump $I19
  rx468_done1395:
    rx468_cur."!cursor_fail"()
    .return (rx468_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_102_1347719921.536_caps" :subid("cuid_memo_140_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_102_1347719921.536_nfa" :subid("cuid_memo_141_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 107
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 110
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 111
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 119
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 104
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 111
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 2
    push $P5035, $P5036
    box $P5037, 119
    push $P5035, $P5037
    box $P5038, 10
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 8
    push $P5039, $P5040
    box $P5041, "package_def"
    push $P5039, $P5041
    box $P5042, 0
    push $P5039, $P5042
    push $P5001, $P5039
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_103_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 908
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx473_tgt
    .local int rx473_pos
    .local int rx473_off
    .local int rx473_eos
    .local int rx473_rep
    .local pmc rx473_cur
    .local pmc rx473_curclass
    .local pmc rx473_bstack
    .local pmc rx473_cstack
    (rx473_cur, rx473_tgt, rx473_pos, rx473_curclass, rx473_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx473_cur
    length rx473_eos, rx473_tgt
    eq $I19, 1, rx473_restart1412
    gt rx473_pos, rx473_eos, rx473_fail1413
    repr_get_attr_int $I11, self, rx473_curclass, "$!from"
    ne $I11, -1, rxscan474_done1419
    goto rxscan474_scan1418
  rxscan474_loop1417:
    inc rx473_pos
    gt rx473_pos, rx473_eos, rx473_fail1413
    repr_bind_attr_int rx473_cur, rx473_curclass, "$!from", rx473_pos
  rxscan474_scan1418:
    nqp_rxmark rx473_bstack, rxscan474_loop1417, rx473_pos, 0
  rxscan474_done1419:
    repr_bind_attr_int rx473_cur, rx473_curclass, "$!pos", rx473_pos
    store_lex unicode:"$\x{a2}", rx473_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1420
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1421
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5007
  fallback1421:
    unless_null $P5004, vivi_4751422
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4751422:
    set $P5003, $P5004
  fallback1420:
    set $P101, $P5003
    repr_bind_attr_int rx473_cur, rx473_curclass, "$!pos", rx473_pos
    store_lex unicode:"$\x{a2}", rx473_cur
    box $P5009, "class"
    set $P102, $P5009
    nqp_rxmark rx473_bstack, rxcap476_fail1424, rx473_pos, 0
    add $I11, rx473_pos, 5
    gt $I11, rx473_eos, rx473_fail1413
    substr $S10, rx473_tgt, rx473_pos, 5
    ne $S10, ucs4:"class", rx473_fail1413
    add rx473_pos, 5
    nqp_rxpeek $I19, rx473_bstack, rxcap476_fail1424
    inc $I19
    set $I11, rx473_bstack[$I19]
    $P11 = rx473_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx473_pos)
    rx473_cstack = rx473_cur."!cursor_capture"($P11, "sym")
    goto rxcap476_done1423
  rxcap476_fail1424:
    goto rx473_fail1413
  rxcap476_done1423:
    repr_bind_attr_int rx473_cur, rx473_curclass, "$!pos", rx473_pos
    $P11 = rx473_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx473_curclass, "$!pos"
    lt $I11, 0, rx473_fail1413
    nqp_rxmark rx473_bstack, rxsubrule477_pass1425, -1, 0
  rxsubrule477_pass1425:
    rx473_cstack = rx473_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx473_pos, $P11, rx473_curclass, "$!pos"
    rx473_cur."!cursor_pass"(rx473_pos, "package_declarator:sym<class>", 'backtrack'=>1)
    .return (rx473_cur)
  rx473_restart1412:
    repr_get_attr_obj rx473_cstack, rx473_cur, rx473_curclass, "$!cstack"
  rx473_fail1413:
    unless rx473_bstack, rx473_done1411
    pop $I19, rx473_bstack
    if_null rx473_cstack, rx473_cstack_done1416
    unless rx473_cstack, rx473_cstack_done1416
    dec $I19
    set $P11, rx473_cstack[$I19]
  rx473_cstack_done1416:
    pop rx473_rep, rx473_bstack
    pop rx473_pos, rx473_bstack
    pop $I19, rx473_bstack
    lt rx473_pos, -1, rx473_done1411
    lt rx473_pos, 0, rx473_fail1413
    eq $I19, 0, rx473_fail1413
    nqp_islist $I20, rx473_cstack
    unless $I20, rx473_jump1414
    elements $I18, rx473_bstack
    le $I18, 0, rx473_cut1415
    dec $I18
    set $I18, rx473_bstack[$I18]
  rx473_cut1415:
    assign rx473_cstack, $I18
  rx473_jump1414:
    jump $I19
  rx473_done1411:
    rx473_cur."!cursor_fail"()
    .return (rx473_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_103_1347719921.536_caps" :subid("cuid_memo_142_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_103_1347719921.536_nfa" :subid("cuid_memo_143_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 99
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 108
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 97
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 115
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 115
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 8
    push $P5031, $P5032
    box $P5033, "package_def"
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_104_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 913
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx478_tgt
    .local int rx478_pos
    .local int rx478_off
    .local int rx478_eos
    .local int rx478_rep
    .local pmc rx478_cur
    .local pmc rx478_curclass
    .local pmc rx478_bstack
    .local pmc rx478_cstack
    (rx478_cur, rx478_tgt, rx478_pos, rx478_curclass, rx478_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx478_cur
    length rx478_eos, rx478_tgt
    eq $I19, 1, rx478_restart1428
    gt rx478_pos, rx478_eos, rx478_fail1429
    repr_get_attr_int $I11, self, rx478_curclass, "$!from"
    ne $I11, -1, rxscan479_done1435
    goto rxscan479_scan1434
  rxscan479_loop1433:
    inc rx478_pos
    gt rx478_pos, rx478_eos, rx478_fail1429
    repr_bind_attr_int rx478_cur, rx478_curclass, "$!from", rx478_pos
  rxscan479_scan1434:
    nqp_rxmark rx478_bstack, rxscan479_loop1433, rx478_pos, 0
  rxscan479_done1435:
    repr_bind_attr_int rx478_cur, rx478_curclass, "$!pos", rx478_pos
    store_lex unicode:"$\x{a2}", rx478_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1436
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1437
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5007
  fallback1437:
    unless_null $P5004, vivi_4801438
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4801438:
    set $P5003, $P5004
  fallback1436:
    set $P101, $P5003
    repr_bind_attr_int rx478_cur, rx478_curclass, "$!pos", rx478_pos
    store_lex unicode:"$\x{a2}", rx478_cur
    box $P5009, "grammar"
    set $P102, $P5009
    nqp_rxmark rx478_bstack, rxcap481_fail1440, rx478_pos, 0
    add $I11, rx478_pos, 7
    gt $I11, rx478_eos, rx478_fail1429
    substr $S10, rx478_tgt, rx478_pos, 7
    ne $S10, ucs4:"grammar", rx478_fail1429
    add rx478_pos, 7
    nqp_rxpeek $I19, rx478_bstack, rxcap481_fail1440
    inc $I19
    set $I11, rx478_bstack[$I19]
    $P11 = rx478_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx478_pos)
    rx478_cstack = rx478_cur."!cursor_capture"($P11, "sym")
    goto rxcap481_done1439
  rxcap481_fail1440:
    goto rx478_fail1429
  rxcap481_done1439:
    repr_bind_attr_int rx478_cur, rx478_curclass, "$!pos", rx478_pos
    $P11 = rx478_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx478_curclass, "$!pos"
    lt $I11, 0, rx478_fail1429
    nqp_rxmark rx478_bstack, rxsubrule482_pass1441, -1, 0
  rxsubrule482_pass1441:
    rx478_cstack = rx478_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx478_pos, $P11, rx478_curclass, "$!pos"
    rx478_cur."!cursor_pass"(rx478_pos, "package_declarator:sym<grammar>", 'backtrack'=>1)
    .return (rx478_cur)
  rx478_restart1428:
    repr_get_attr_obj rx478_cstack, rx478_cur, rx478_curclass, "$!cstack"
  rx478_fail1429:
    unless rx478_bstack, rx478_done1427
    pop $I19, rx478_bstack
    if_null rx478_cstack, rx478_cstack_done1432
    unless rx478_cstack, rx478_cstack_done1432
    dec $I19
    set $P11, rx478_cstack[$I19]
  rx478_cstack_done1432:
    pop rx478_rep, rx478_bstack
    pop rx478_pos, rx478_bstack
    pop $I19, rx478_bstack
    lt rx478_pos, -1, rx478_done1427
    lt rx478_pos, 0, rx478_fail1429
    eq $I19, 0, rx478_fail1429
    nqp_islist $I20, rx478_cstack
    unless $I20, rx478_jump1430
    elements $I18, rx478_bstack
    le $I18, 0, rx478_cut1431
    dec $I18
    set $I18, rx478_bstack[$I18]
  rx478_cut1431:
    assign rx478_cstack, $I18
  rx478_jump1430:
    jump $I19
  rx478_done1427:
    rx478_cur."!cursor_fail"()
    .return (rx478_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_104_1347719921.536_caps" :subid("cuid_memo_144_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_104_1347719921.536_nfa" :subid("cuid_memo_145_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 103
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 114
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 97
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 109
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 109
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 97
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 2
    push $P5035, $P5036
    box $P5037, 114
    push $P5035, $P5037
    box $P5038, 10
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 8
    push $P5039, $P5040
    box $P5041, "package_def"
    push $P5039, $P5041
    box $P5042, 0
    push $P5039, $P5042
    push $P5001, $P5039
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_105_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 918
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx483_tgt
    .local int rx483_pos
    .local int rx483_off
    .local int rx483_eos
    .local int rx483_rep
    .local pmc rx483_cur
    .local pmc rx483_curclass
    .local pmc rx483_bstack
    .local pmc rx483_cstack
    (rx483_cur, rx483_tgt, rx483_pos, rx483_curclass, rx483_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx483_cur
    length rx483_eos, rx483_tgt
    eq $I19, 1, rx483_restart1444
    gt rx483_pos, rx483_eos, rx483_fail1445
    repr_get_attr_int $I11, self, rx483_curclass, "$!from"
    ne $I11, -1, rxscan484_done1451
    goto rxscan484_scan1450
  rxscan484_loop1449:
    inc rx483_pos
    gt rx483_pos, rx483_eos, rx483_fail1445
    repr_bind_attr_int rx483_cur, rx483_curclass, "$!from", rx483_pos
  rxscan484_scan1450:
    nqp_rxmark rx483_bstack, rxscan484_loop1449, rx483_pos, 0
  rxscan484_done1451:
    repr_bind_attr_int rx483_cur, rx483_curclass, "$!pos", rx483_pos
    store_lex unicode:"$\x{a2}", rx483_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1452
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1453
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5007
  fallback1453:
    unless_null $P5004, vivi_4851454
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4851454:
    set $P5003, $P5004
  fallback1452:
    set $P101, $P5003
    repr_bind_attr_int rx483_cur, rx483_curclass, "$!pos", rx483_pos
    store_lex unicode:"$\x{a2}", rx483_cur
    box $P5009, "role"
    set $P102, $P5009
    nqp_rxmark rx483_bstack, rxcap486_fail1456, rx483_pos, 0
    add $I11, rx483_pos, 4
    gt $I11, rx483_eos, rx483_fail1445
    substr $S10, rx483_tgt, rx483_pos, 4
    ne $S10, ucs4:"role", rx483_fail1445
    add rx483_pos, 4
    nqp_rxpeek $I19, rx483_bstack, rxcap486_fail1456
    inc $I19
    set $I11, rx483_bstack[$I19]
    $P11 = rx483_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx483_pos)
    rx483_cstack = rx483_cur."!cursor_capture"($P11, "sym")
    goto rxcap486_done1455
  rxcap486_fail1456:
    goto rx483_fail1445
  rxcap486_done1455:
    repr_bind_attr_int rx483_cur, rx483_curclass, "$!pos", rx483_pos
    $P11 = rx483_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx483_curclass, "$!pos"
    lt $I11, 0, rx483_fail1445
    nqp_rxmark rx483_bstack, rxsubrule487_pass1457, -1, 0
  rxsubrule487_pass1457:
    rx483_cstack = rx483_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx483_pos, $P11, rx483_curclass, "$!pos"
    rx483_cur."!cursor_pass"(rx483_pos, "package_declarator:sym<role>", 'backtrack'=>1)
    .return (rx483_cur)
  rx483_restart1444:
    repr_get_attr_obj rx483_cstack, rx483_cur, rx483_curclass, "$!cstack"
  rx483_fail1445:
    unless rx483_bstack, rx483_done1443
    pop $I19, rx483_bstack
    if_null rx483_cstack, rx483_cstack_done1448
    unless rx483_cstack, rx483_cstack_done1448
    dec $I19
    set $P11, rx483_cstack[$I19]
  rx483_cstack_done1448:
    pop rx483_rep, rx483_bstack
    pop rx483_pos, rx483_bstack
    pop $I19, rx483_bstack
    lt rx483_pos, -1, rx483_done1443
    lt rx483_pos, 0, rx483_fail1445
    eq $I19, 0, rx483_fail1445
    nqp_islist $I20, rx483_cstack
    unless $I20, rx483_jump1446
    elements $I18, rx483_bstack
    le $I18, 0, rx483_cut1447
    dec $I18
    set $I18, rx483_bstack[$I18]
  rx483_cut1447:
    assign rx483_cstack, $I18
  rx483_jump1446:
    jump $I19
  rx483_done1443:
    rx483_cur."!cursor_fail"()
    .return (rx483_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_105_1347719921.536_caps" :subid("cuid_memo_146_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_105_1347719921.536_nfa" :subid("cuid_memo_147_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 111
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 108
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 101
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "package_def"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_106_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 923
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx488_tgt
    .local int rx488_pos
    .local int rx488_off
    .local int rx488_eos
    .local int rx488_rep
    .local pmc rx488_cur
    .local pmc rx488_curclass
    .local pmc rx488_bstack
    .local pmc rx488_cstack
    (rx488_cur, rx488_tgt, rx488_pos, rx488_curclass, rx488_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx488_cur
    length rx488_eos, rx488_tgt
    eq $I19, 1, rx488_restart1460
    gt rx488_pos, rx488_eos, rx488_fail1461
    repr_get_attr_int $I11, self, rx488_curclass, "$!from"
    ne $I11, -1, rxscan489_done1467
    goto rxscan489_scan1466
  rxscan489_loop1465:
    inc rx488_pos
    gt rx488_pos, rx488_eos, rx488_fail1461
    repr_bind_attr_int rx488_cur, rx488_curclass, "$!from", rx488_pos
  rxscan489_scan1466:
    nqp_rxmark rx488_bstack, rxscan489_loop1465, rx488_pos, 0
  rxscan489_done1467:
    repr_bind_attr_int rx488_cur, rx488_curclass, "$!pos", rx488_pos
    store_lex unicode:"$\x{a2}", rx488_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1468
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1469
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5007
  fallback1469:
    unless_null $P5004, vivi_4901470
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4901470:
    set $P5003, $P5004
  fallback1468:
    set $P101, $P5003
    repr_bind_attr_int rx488_cur, rx488_curclass, "$!pos", rx488_pos
    store_lex unicode:"$\x{a2}", rx488_cur
    box $P5009, "native"
    set $P102, $P5009
    nqp_rxmark rx488_bstack, rxcap491_fail1472, rx488_pos, 0
    add $I11, rx488_pos, 6
    gt $I11, rx488_eos, rx488_fail1461
    substr $S10, rx488_tgt, rx488_pos, 6
    ne $S10, ucs4:"native", rx488_fail1461
    add rx488_pos, 6
    nqp_rxpeek $I19, rx488_bstack, rxcap491_fail1472
    inc $I19
    set $I11, rx488_bstack[$I19]
    $P11 = rx488_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx488_pos)
    rx488_cstack = rx488_cur."!cursor_capture"($P11, "sym")
    goto rxcap491_done1471
  rxcap491_fail1472:
    goto rx488_fail1461
  rxcap491_done1471:
    repr_bind_attr_int rx488_cur, rx488_curclass, "$!pos", rx488_pos
    $P11 = rx488_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx488_curclass, "$!pos"
    lt $I11, 0, rx488_fail1461
    nqp_rxmark rx488_bstack, rxsubrule492_pass1473, -1, 0
  rxsubrule492_pass1473:
    rx488_cstack = rx488_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx488_pos, $P11, rx488_curclass, "$!pos"
    rx488_cur."!cursor_pass"(rx488_pos, "package_declarator:sym<native>", 'backtrack'=>1)
    .return (rx488_cur)
  rx488_restart1460:
    repr_get_attr_obj rx488_cstack, rx488_cur, rx488_curclass, "$!cstack"
  rx488_fail1461:
    unless rx488_bstack, rx488_done1459
    pop $I19, rx488_bstack
    if_null rx488_cstack, rx488_cstack_done1464
    unless rx488_cstack, rx488_cstack_done1464
    dec $I19
    set $P11, rx488_cstack[$I19]
  rx488_cstack_done1464:
    pop rx488_rep, rx488_bstack
    pop rx488_pos, rx488_bstack
    pop $I19, rx488_bstack
    lt rx488_pos, -1, rx488_done1459
    lt rx488_pos, 0, rx488_fail1461
    eq $I19, 0, rx488_fail1461
    nqp_islist $I20, rx488_cstack
    unless $I20, rx488_jump1462
    elements $I18, rx488_bstack
    le $I18, 0, rx488_cut1463
    dec $I18
    set $I18, rx488_bstack[$I18]
  rx488_cut1463:
    assign rx488_cstack, $I18
  rx488_jump1462:
    jump $I19
  rx488_done1459:
    rx488_cur."!cursor_fail"()
    .return (rx488_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_106_1347719921.536_caps" :subid("cuid_memo_148_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_106_1347719921.536_nfa" :subid("cuid_memo_149_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 110
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 97
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 116
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 105
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 118
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 101
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 8
    push $P5035, $P5036
    box $P5037, "package_def"
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_107_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 928
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx493_tgt
    .local int rx493_pos
    .local int rx493_off
    .local int rx493_eos
    .local int rx493_rep
    .local pmc rx493_cur
    .local pmc rx493_curclass
    .local pmc rx493_bstack
    .local pmc rx493_cstack
    (rx493_cur, rx493_tgt, rx493_pos, rx493_curclass, rx493_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx493_cur
    length rx493_eos, rx493_tgt
    eq $I19, 1, rx493_restart1476
    gt rx493_pos, rx493_eos, rx493_fail1477
    repr_get_attr_int $I11, self, rx493_curclass, "$!from"
    ne $I11, -1, rxscan494_done1483
    goto rxscan494_scan1482
  rxscan494_loop1481:
    inc rx493_pos
    gt rx493_pos, rx493_eos, rx493_fail1477
    repr_bind_attr_int rx493_cur, rx493_curclass, "$!from", rx493_pos
  rxscan494_scan1482:
    nqp_rxmark rx493_bstack, rxscan494_loop1481, rx493_pos, 0
  rxscan494_done1483:
    repr_bind_attr_int rx493_cur, rx493_curclass, "$!pos", rx493_pos
    store_lex unicode:"$\x{a2}", rx493_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1484
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1485
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5007
  fallback1485:
    unless_null $P5004, vivi_4951486
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4951486:
    set $P5003, $P5004
  fallback1484:
    set $P101, $P5003
    repr_bind_attr_int rx493_cur, rx493_curclass, "$!pos", rx493_pos
    store_lex unicode:"$\x{a2}", rx493_cur
    box $P5009, "stub"
    set $P102, $P5009
    nqp_rxmark rx493_bstack, rxcap496_fail1488, rx493_pos, 0
    add $I11, rx493_pos, 4
    gt $I11, rx493_eos, rx493_fail1477
    substr $S10, rx493_tgt, rx493_pos, 4
    ne $S10, ucs4:"stub", rx493_fail1477
    add rx493_pos, 4
    nqp_rxpeek $I19, rx493_bstack, rxcap496_fail1488
    inc $I19
    set $I11, rx493_bstack[$I19]
    $P11 = rx493_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx493_pos)
    rx493_cstack = rx493_cur."!cursor_capture"($P11, "sym")
    goto rxcap496_done1487
  rxcap496_fail1488:
    goto rx493_fail1477
  rxcap496_done1487:
    repr_bind_attr_int rx493_cur, rx493_curclass, "$!pos", rx493_pos
    $P11 = rx493_cur."ws"()
    repr_get_attr_int $I11, $P11, rx493_curclass, "$!pos"
    lt $I11, 0, rx493_fail1477
    repr_get_attr_int rx493_pos, $P11, rx493_curclass, "$!pos"
    repr_bind_attr_int rx493_cur, rx493_curclass, "$!pos", rx493_pos
    $P11 = rx493_cur."name"()
    repr_get_attr_int $I11, $P11, rx493_curclass, "$!pos"
    lt $I11, 0, rx493_fail1477
    nqp_rxmark rx493_bstack, rxsubrule498_pass1490, -1, 0
  rxsubrule498_pass1490:
    rx493_cstack = rx493_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx493_pos, $P11, rx493_curclass, "$!pos"
    repr_bind_attr_int rx493_cur, rx493_curclass, "$!pos", rx493_pos
    $P11 = rx493_cur."ws"()
    repr_get_attr_int $I11, $P11, rx493_curclass, "$!pos"
    lt $I11, 0, rx493_fail1477
    repr_get_attr_int rx493_pos, $P11, rx493_curclass, "$!pos"
    add $I11, rx493_pos, 9
    gt $I11, rx493_eos, rx493_fail1477
    substr $S10, rx493_tgt, rx493_pos, 9
    ne $S10, ucs4:"metaclass", rx493_fail1477
    add rx493_pos, 9
    repr_bind_attr_int rx493_cur, rx493_curclass, "$!pos", rx493_pos
    $P11 = rx493_cur."ws"()
    repr_get_attr_int $I11, $P11, rx493_curclass, "$!pos"
    lt $I11, 0, rx493_fail1477
    repr_get_attr_int rx493_pos, $P11, rx493_curclass, "$!pos"
    repr_bind_attr_int rx493_cur, rx493_curclass, "$!pos", rx493_pos
    $P11 = rx493_cur."name"()
    repr_get_attr_int $I11, $P11, rx493_curclass, "$!pos"
    lt $I11, 0, rx493_fail1477
    nqp_rxmark rx493_bstack, rxsubrule501_pass1493, -1, 0
  rxsubrule501_pass1493:
    rx493_cstack = rx493_cur."!cursor_capture"($P11, "metaclass")
    repr_get_attr_int rx493_pos, $P11, rx493_curclass, "$!pos"
    repr_bind_attr_int rx493_cur, rx493_curclass, "$!pos", rx493_pos
    $P11 = rx493_cur."ws"()
    repr_get_attr_int $I11, $P11, rx493_curclass, "$!pos"
    lt $I11, 0, rx493_fail1477
    repr_get_attr_int rx493_pos, $P11, rx493_curclass, "$!pos"
    add $I11, rx493_pos, 1
    gt $I11, rx493_eos, rx493_fail1477
    substr $S10, rx493_tgt, rx493_pos, 1
    ne $S10, ucs4:"{", rx493_fail1477
    add rx493_pos, 1
    repr_bind_attr_int rx493_cur, rx493_curclass, "$!pos", rx493_pos
    $P11 = rx493_cur."ws"()
    repr_get_attr_int $I11, $P11, rx493_curclass, "$!pos"
    lt $I11, 0, rx493_fail1477
    repr_get_attr_int rx493_pos, $P11, rx493_curclass, "$!pos"
    add $I11, rx493_pos, 3
    gt $I11, rx493_eos, rx493_fail1477
    substr $S10, rx493_tgt, rx493_pos, 3
    ne $S10, ucs4:"...", rx493_fail1477
    add rx493_pos, 3
    repr_bind_attr_int rx493_cur, rx493_curclass, "$!pos", rx493_pos
    $P11 = rx493_cur."ws"()
    repr_get_attr_int $I11, $P11, rx493_curclass, "$!pos"
    lt $I11, 0, rx493_fail1477
    repr_get_attr_int rx493_pos, $P11, rx493_curclass, "$!pos"
    add $I11, rx493_pos, 1
    gt $I11, rx493_eos, rx493_fail1477
    substr $S10, rx493_tgt, rx493_pos, 1
    ne $S10, ucs4:"}", rx493_fail1477
    add rx493_pos, 1
    repr_bind_attr_int rx493_cur, rx493_curclass, "$!pos", rx493_pos
    $P11 = rx493_cur."ws"()
    repr_get_attr_int $I11, $P11, rx493_curclass, "$!pos"
    lt $I11, 0, rx493_fail1477
    repr_get_attr_int rx493_pos, $P11, rx493_curclass, "$!pos"
    rx493_cur."!cursor_pass"(rx493_pos, "package_declarator:sym<stub>", 'backtrack'=>1)
    .return (rx493_cur)
  rx493_restart1476:
    repr_get_attr_obj rx493_cstack, rx493_cur, rx493_curclass, "$!cstack"
  rx493_fail1477:
    unless rx493_bstack, rx493_done1475
    pop $I19, rx493_bstack
    if_null rx493_cstack, rx493_cstack_done1480
    unless rx493_cstack, rx493_cstack_done1480
    dec $I19
    set $P11, rx493_cstack[$I19]
  rx493_cstack_done1480:
    pop rx493_rep, rx493_bstack
    pop rx493_pos, rx493_bstack
    pop $I19, rx493_bstack
    lt rx493_pos, -1, rx493_done1475
    lt rx493_pos, 0, rx493_fail1477
    eq $I19, 0, rx493_fail1477
    nqp_islist $I20, rx493_cstack
    unless $I20, rx493_jump1478
    elements $I18, rx493_bstack
    le $I18, 0, rx493_cut1479
    dec $I18
    set $I18, rx493_bstack[$I18]
  rx493_cut1479:
    assign rx493_cstack, $I18
  rx493_jump1478:
    jump $I19
  rx493_done1475:
    rx493_cur."!cursor_fail"()
    .return (rx493_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_107_1347719921.536_caps" :subid("cuid_memo_150_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["name"], $P5003
    box $P5004, 0
    set $P5001["metaclass"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_107_1347719921.536_nfa" :subid("cuid_memo_151_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 115
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 116
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 117
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 98
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 0
    push $P5027, $P5028
    box $P5029, 0
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_108_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 936
    .param pmc _lex_param_0 
    .const 'Sub' $P5010 = 'cuid_387_1347719921.536' 
    capture_lex $P5010 
    .lex "$*PACKAGE", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx506_tgt
    .local int rx506_pos
    .local int rx506_off
    .local int rx506_eos
    .local int rx506_rep
    .local pmc rx506_cur
    .local pmc rx506_curclass
    .local pmc rx506_bstack
    .local pmc rx506_cstack
    (rx506_cur, rx506_tgt, rx506_pos, rx506_curclass, rx506_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx506_cur
    length rx506_eos, rx506_tgt
    eq $I19, 1, rx506_restart1500
    gt rx506_pos, rx506_eos, rx506_fail1501
    repr_get_attr_int $I11, self, rx506_curclass, "$!from"
    ne $I11, -1, rxscan507_done1507
    goto rxscan507_scan1506
  rxscan507_loop1505:
    inc rx506_pos
    gt rx506_pos, rx506_eos, rx506_fail1501
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!from", rx506_pos
  rxscan507_scan1506:
    nqp_rxmark rx506_bstack, rxscan507_loop1505, rx506_pos, 0
  rxscan507_done1507:
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    store_lex unicode:"$\x{a2}", rx506_cur
    unless_null $P101, fallback1509
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$PACKAGE"]
    unless_null $P5002, fallback1510
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5005
  fallback1510:
    unless_null $P5002, vivi_5091511
    die "Contextual $*PACKAGE not found"
    box $P5006, "Contextual $*PACKAGE not found"
    set $P5002, $P5006
  vivi_5091511:
    set $P101, $P5002
  fallback1509:
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."name"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    nqp_rxmark rx506_bstack, rxsubrule511_pass1513, -1, 0
  rxsubrule511_pass1513:
    rx506_cstack = rx506_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    nqp_rxmark rx506_bstack, rxquantr513_done1516, rx506_pos, 0
  rxquantr513_loop1515:
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    add $I11, rx506_pos, 2
    gt $I11, rx506_eos, rx506_fail1501
    substr $S10, rx506_tgt, rx506_pos, 2
    ne $S10, ucs4:"is", rx506_fail1501
    add rx506_pos, 2
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    add $I11, rx506_pos, 5
    gt $I11, rx506_eos, rx506_fail1501
    substr $S10, rx506_tgt, rx506_pos, 5
    ne $S10, ucs4:"repr(", rx506_fail1501
    add rx506_pos, 5
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    nqp_rxmark rx506_bstack, rxsubrule517_pass1520, -1, 0
  rxsubrule517_pass1520:
    rx506_cstack = rx506_cur."!cursor_capture"($P11, "repr")
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    add $I11, rx506_pos, 1
    gt $I11, rx506_eos, rx506_fail1501
    substr $S10, rx506_tgt, rx506_pos, 1
    ne $S10, ucs4:")", rx506_fail1501
    add rx506_pos, 1
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    nqp_rxpeek $I19, rx506_bstack, rxquantr513_done1516
    inc $I19
    inc $I19
    set rx506_rep, rx506_bstack[$I19]
    nqp_rxcommit rx506_bstack, rxquantr513_done1516
    inc rx506_rep
  rxquantr513_done1516:
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    store_lex unicode:"$\x{a2}", rx506_cur
    $P5007 = $P102."MATCH"()
    set $P103, $P5007
    .const 'Sub' $P5008 = 'cuid_387_1347719921.536' 
    capture_lex $P5008
    $P5009 = $P5008()
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    nqp_rxmark rx506_bstack, rxquantr544_done1616, rx506_pos, 0
  rxquantr544_loop1615:
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    add $I11, rx506_pos, 2
    gt $I11, rx506_eos, rx506_fail1501
    substr $S10, rx506_tgt, rx506_pos, 2
    ne $S10, ucs4:"is", rx506_fail1501
    add rx506_pos, 2
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."name"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    nqp_rxmark rx506_bstack, rxsubrule547_pass1619, -1, 0
  rxsubrule547_pass1619:
    rx506_cstack = rx506_cur."!cursor_capture"($P11, "parent")
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    nqp_rxpeek $I19, rx506_bstack, rxquantr544_done1616
    inc $I19
    inc $I19
    set rx506_rep, rx506_bstack[$I19]
    nqp_rxcommit rx506_bstack, rxquantr544_done1616
    inc rx506_rep
  rxquantr544_done1616:
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    nqp_rxmark rx506_bstack, rxquantr550_done1623, rx506_pos, 0
  rxquantr550_loop1622:
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    add $I11, rx506_pos, 4
    gt $I11, rx506_eos, rx506_fail1501
    substr $S10, rx506_tgt, rx506_pos, 4
    ne $S10, ucs4:"does", rx506_fail1501
    add rx506_pos, 4
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."name"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    nqp_rxmark rx506_bstack, rxsubrule553_pass1626, -1, 0
  rxsubrule553_pass1626:
    rx506_cstack = rx506_cur."!cursor_capture"($P11, "role")
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    nqp_rxpeek $I19, rx506_bstack, rxquantr550_done1623
    inc $I19
    inc $I19
    set rx506_rep, rx506_bstack[$I19]
    nqp_rxcommit rx506_bstack, rxquantr550_done1623
    inc rx506_rep
    nqp_rxmark rx506_bstack, rxquantr550_done1623, rx506_pos, rx506_rep
    goto rxquantr550_loop1622
  rxquantr550_done1623:
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
  alt556_01630:
    nqp_rxmark rx506_bstack, alt556_11635, rx506_pos, 0
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    add $I11, rx506_pos, 1
    gt $I11, rx506_eos, rx506_fail1501
    substr $S10, rx506_tgt, rx506_pos, 1
    ne $S10, ucs4:";", rx506_fail1501
    add rx506_pos, 1
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."comp_unit"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    nqp_rxmark rx506_bstack, rxsubrule559_pass1633, -1, 0
  rxsubrule559_pass1633:
    rx506_cstack = rx506_cur."!cursor_capture"($P11, "comp_unit")
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    goto alt556_end1629
  alt556_11635:
    nqp_rxmark rx506_bstack, alt556_21640, rx506_pos, 0
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    ge rx506_pos, rx506_eos, rx506_fail1501
    substr $S11, rx506_tgt, rx506_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx506_fail1501
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."block"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    nqp_rxmark rx506_bstack, rxsubrule563_pass1638, -1, 0
  rxsubrule563_pass1638:
    rx506_cstack = rx506_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    goto alt556_end1629
  alt556_21640:
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."panic"("Malformed package declaration")
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
  alt556_end1629:
    repr_bind_attr_int rx506_cur, rx506_curclass, "$!pos", rx506_pos
    $P11 = rx506_cur."ws"()
    repr_get_attr_int $I11, $P11, rx506_curclass, "$!pos"
    lt $I11, 0, rx506_fail1501
    repr_get_attr_int rx506_pos, $P11, rx506_curclass, "$!pos"
    rx506_cur."!cursor_pass"(rx506_pos, "package_def", 'backtrack'=>1)
    .return (rx506_cur)
  rx506_restart1500:
    repr_get_attr_obj rx506_cstack, rx506_cur, rx506_curclass, "$!cstack"
  rx506_fail1501:
    unless rx506_bstack, rx506_done1499
    pop $I19, rx506_bstack
    if_null rx506_cstack, rx506_cstack_done1504
    unless rx506_cstack, rx506_cstack_done1504
    dec $I19
    set $P11, rx506_cstack[$I19]
  rx506_cstack_done1504:
    pop rx506_rep, rx506_bstack
    pop rx506_pos, rx506_bstack
    pop $I19, rx506_bstack
    lt rx506_pos, -1, rx506_done1499
    lt rx506_pos, 0, rx506_fail1501
    eq $I19, 0, rx506_fail1501
    nqp_islist $I20, rx506_cstack
    unless $I20, rx506_jump1502
    elements $I18, rx506_bstack
    le $I18, 0, rx506_cut1503
    dec $I18
    set $I18, rx506_bstack[$I18]
  rx506_cut1503:
    assign rx506_cstack, $I18
  rx506_jump1502:
    jump $I19
  rx506_done1499:
    rx506_cur."!cursor_fail"()
    .return (rx506_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_108_1347719921.536_caps" :subid("cuid_memo_152_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["name"], $P5002
    box $P5003, 2
    set $P5001["repr"], $P5003
    box $P5004, 2
    set $P5001["parent"], $P5004
    box $P5005, 2
    set $P5001["role"], $P5005
    box $P5006, 0
    set $P5001["comp_unit"], $P5006
    box $P5007, 0
    set $P5001["block"], $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_387_1347719921.536") :anon :lex :outer("cuid_108_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 942
    .lex "%args", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback1524
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5004
  fallback1524:
    set $P5002, $P5003["name"]
    unless_null $P5002, fallback1525
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5005
  fallback1525:
    set $S5001, $P5002
    box $P5006, $S5001
    set $P101["name"], $P5006
    find_lex $P5008, "$/"
    unless_null $P5008, fallback1528
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5009
  fallback1528:
    set $P5007, $P5008["repr"]
    unless_null $P5007, fallback1529
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5010
  fallback1529:
    set $P5024, $P5007
    unless $P5007 goto if521_end1527 
.annotate 'line', 947
    find_lex $P5016, "$/"
    unless_null $P5016, fallback1530
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5016, $P5017
  fallback1530:
    set $P5015, $P5016["repr"]
    unless_null $P5015, fallback1531
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5015, $P5018
  fallback1531:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback1532
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5014, $P5019
  fallback1532:
    set $P5013, $P5014["quote_delimited"]
    unless_null $P5013, fallback1533
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5013, $P5020
  fallback1533:
    set $P5012, $P5013["quote_atom"]
    unless_null $P5012, fallback1534
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5012, $P5021
  fallback1534:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback1535
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5022
  fallback1535:
    set $S5002, $P5011
    box $P5023, $S5002
    set $P101["repr"], $P5023
    set $P5024, $P5023
  if521_end1527:
.annotate 'line', 950
    find_dynamic_lex $P5025, "$*W"
    unless_null $P5025, fallback1536
    get_hll_global $P5028, "GLOBAL"
    get_who $P5027, $P5028
    set $P5026, $P5027["$W"]
    unless_null $P5026, fallback1537
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5026, $P5029
  fallback1537:
    unless_null $P5026, vivi_5221538
    die "Contextual $*W not found"
    box $P5030, "Contextual $*W not found"
    set $P5026, $P5030
  vivi_5221538:
    set $P5025, $P5026
  fallback1536:
    find_dynamic_lex $P5032, "%*HOW"
    unless_null $P5032, fallback1539
    get_hll_global $P5035, "GLOBAL"
    get_who $P5034, $P5035
    set $P5033, $P5034["%HOW"]
    unless_null $P5033, fallback1540
    get_hll_global $P5037, "GLOBAL"
    get_who $P5036, $P5037
    new $P5038, 'Hash'
    set $P5036["%HOW"], $P5038
    set $P5033, $P5038
  fallback1540:
    unless_null $P5033, vivi_5231541
    die "Contextual %*HOW not found"
    box $P5039, "Contextual %*HOW not found"
    set $P5033, $P5039
  vivi_5231541:
    set $P5032, $P5033
  fallback1539:
    find_dynamic_lex $P5040, "$*PKGDECL"
    unless_null $P5040, fallback1542
    get_hll_global $P5043, "GLOBAL"
    get_who $P5042, $P5043
    set $P5041, $P5042["$PKGDECL"]
    unless_null $P5041, fallback1543
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5041, $P5044
  fallback1543:
    unless_null $P5041, vivi_5241544
    die "Contextual $*PKGDECL not found"
    box $P5045, "Contextual $*PKGDECL not found"
    set $P5041, $P5045
  vivi_5241544:
    set $P5040, $P5041
  fallback1542:
    set $S5003, $P5040
    set $P5031, $P5032[$S5003]
    unless_null $P5031, fallback1545
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5031, $P5046
  fallback1545:
    $P5047 = $P5025."pkg_create_mo"($P5031, $P101 :flat :named)
    store_dynamic_lex "$*PACKAGE", $P5047
    find_dynamic_lex $P5048, "$*SCOPE"
    unless_null $P5048, fallback1550
    get_hll_global $P5051, "GLOBAL"
    get_who $P5050, $P5051
    set $P5049, $P5050["$SCOPE"]
    unless_null $P5049, fallback1551
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5049, $P5052
  fallback1551:
    unless_null $P5049, vivi_5271552
    die "Contextual $*SCOPE not found"
    box $P5053, "Contextual $*SCOPE not found"
    set $P5049, $P5053
  vivi_5271552:
    set $P5048, $P5049
  fallback1550:
    set $S5004, $P5048
    iseq $I5001, $S5004, "our"
    set $I5003, $I5001
    if $I5001 goto unless526_end1549 
    find_dynamic_lex $P5054, "$*SCOPE"
    unless_null $P5054, fallback1553
    get_hll_global $P5057, "GLOBAL"
    get_who $P5056, $P5057
    set $P5055, $P5056["$SCOPE"]
    unless_null $P5055, fallback1554
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5055, $P5058
  fallback1554:
    unless_null $P5055, vivi_5281555
    die "Contextual $*SCOPE not found"
    box $P5059, "Contextual $*SCOPE not found"
    set $P5055, $P5059
  vivi_5281555:
    set $P5054, $P5055
  fallback1553:
    set $S5005, $P5054
    iseq $I5002, $S5005, ""
    set $I5003, $I5002
  unless526_end1549:
    unless $I5003 goto if525_else1546 
.annotate 'line', 953
.annotate 'line', 954
    find_dynamic_lex $P5060, "$*W"
    unless_null $P5060, fallback1556
    get_hll_global $P5063, "GLOBAL"
    get_who $P5062, $P5063
    set $P5061, $P5062["$W"]
    unless_null $P5061, fallback1557
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5061, $P5064
  fallback1557:
    unless_null $P5061, vivi_5291558
    die "Contextual $*W not found"
    box $P5065, "Contextual $*W not found"
    set $P5061, $P5065
  vivi_5291558:
    set $P5060, $P5061
  fallback1556:
    find_dynamic_lex $P5066, "$*OUTERPACKAGE"
    unless_null $P5066, fallback1559
    get_hll_global $P5069, "GLOBAL"
    get_who $P5068, $P5069
    set $P5067, $P5068["$OUTERPACKAGE"]
    unless_null $P5067, fallback1560
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5067, $P5070
  fallback1560:
    unless_null $P5067, vivi_5301561
    die "Contextual $*OUTERPACKAGE not found"
    box $P5071, "Contextual $*OUTERPACKAGE not found"
    set $P5067, $P5071
  vivi_5301561:
    set $P5066, $P5067
  fallback1559:
    find_lex $P5074, "$/"
    unless_null $P5074, fallback1562
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5074, $P5075
  fallback1562:
    set $P5073, $P5074["name"]
    unless_null $P5073, fallback1563
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5073, $P5076
  fallback1563:
    set $P5072, $P5073["identifier"]
    unless_null $P5072, fallback1564
    nqp_get_sc_object $P5077, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5072, $P5077
  fallback1564:
    find_dynamic_lex $P5078, "$*PACKAGE"
    unless_null $P5078, fallback1565
    get_hll_global $P5081, "GLOBAL"
    get_who $P5080, $P5081
    set $P5079, $P5080["$PACKAGE"]
    unless_null $P5079, fallback1566
    nqp_get_sc_object $P5082, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5079, $P5082
  fallback1566:
    unless_null $P5079, vivi_5311567
    die "Contextual $*PACKAGE not found"
    box $P5083, "Contextual $*PACKAGE not found"
    set $P5079, $P5083
  vivi_5311567:
    set $P5078, $P5079
  fallback1565:
    $P5084 = $P5060."install_package_symbol"($P5066, $P5072, $P5078)
    find_lex $P5087, "$/"
    unless_null $P5087, fallback1570
    nqp_get_sc_object $P5088, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5087, $P5088
  fallback1570:
    set $P5086, $P5087["name"]
    unless_null $P5086, fallback1571
    nqp_get_sc_object $P5089, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5086, $P5089
  fallback1571:
    set $P5085, $P5086["identifier"]
    unless_null $P5085, fallback1572
    nqp_get_sc_object $P5090, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5085, $P5090
  fallback1572:
    set $N5001, $P5085
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5120, $I5004
    set $P5119, $P5120
    unless $I5004 goto if532_end1569 
.annotate 'line', 955
.annotate 'line', 956
    find_dynamic_lex $P5091, "$*W"
    unless_null $P5091, fallback1573
    get_hll_global $P5094, "GLOBAL"
    get_who $P5093, $P5094
    set $P5092, $P5093["$W"]
    unless_null $P5092, fallback1574
    nqp_get_sc_object $P5095, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5092, $P5095
  fallback1574:
    unless_null $P5092, vivi_5331575
    die "Contextual $*W not found"
    box $P5096, "Contextual $*W not found"
    set $P5092, $P5096
  vivi_5331575:
    set $P5091, $P5092
  fallback1573:
    find_dynamic_lex $P5097, "$*W"
    unless_null $P5097, fallback1576
    get_hll_global $P5100, "GLOBAL"
    get_who $P5099, $P5100
    set $P5098, $P5099["$W"]
    unless_null $P5098, fallback1577
    nqp_get_sc_object $P5101, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5098, $P5101
  fallback1577:
    unless_null $P5098, vivi_5341578
    die "Contextual $*W not found"
    box $P5102, "Contextual $*W not found"
    set $P5098, $P5102
  vivi_5341578:
    set $P5097, $P5098
  fallback1576:
    $P5103 = $P5097."cur_lexpad"()
    find_lex $P5107, "$/"
    unless_null $P5107, fallback1579
    nqp_get_sc_object $P5108, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5107, $P5108
  fallback1579:
    set $P5106, $P5107["name"]
    unless_null $P5106, fallback1580
    nqp_get_sc_object $P5109, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5106, $P5109
  fallback1580:
    set $P5105, $P5106["identifier"]
    unless_null $P5105, fallback1581
    nqp_get_sc_object $P5110, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5105, $P5110
  fallback1581:
    set $P5104, $P5105[0]
    unless_null $P5104, fallback1582
    nqp_get_sc_object $P5111, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5104, $P5111
  fallback1582:
    find_dynamic_lex $P5112, "$*PACKAGE"
    unless_null $P5112, fallback1583
    get_hll_global $P5115, "GLOBAL"
    get_who $P5114, $P5115
    set $P5113, $P5114["$PACKAGE"]
    unless_null $P5113, fallback1584
    nqp_get_sc_object $P5116, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5113, $P5116
  fallback1584:
    unless_null $P5113, vivi_5351585
    die "Contextual $*PACKAGE not found"
    box $P5117, "Contextual $*PACKAGE not found"
    set $P5113, $P5117
  vivi_5351585:
    set $P5112, $P5113
  fallback1583:
    $P5118 = $P5091."install_lexical_symbol"($P5103, $P5104, $P5112)
    set $P5119, $P5118
  if532_end1569:
    set $P5179, $P5119
    goto if525_end1547
  if525_else1546:
    find_dynamic_lex $P5121, "$*SCOPE"
    unless_null $P5121, fallback1588
    get_hll_global $P5124, "GLOBAL"
    get_who $P5123, $P5124
    set $P5122, $P5123["$SCOPE"]
    unless_null $P5122, fallback1589
    nqp_get_sc_object $P5125, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5122, $P5125
  fallback1589:
    unless_null $P5122, vivi_5371590
    die "Contextual $*SCOPE not found"
    box $P5126, "Contextual $*SCOPE not found"
    set $P5122, $P5126
  vivi_5371590:
    set $P5121, $P5122
  fallback1588:
    set $S5006, $P5121
    iseq $I5005, $S5006, "my"
    unless $I5005 goto if536_else1586 
.annotate 'line', 959
    find_lex $P5129, "$/"
    unless_null $P5129, fallback1593
    nqp_get_sc_object $P5130, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5129, $P5130
  fallback1593:
    set $P5128, $P5129["name"]
    unless_null $P5128, fallback1594
    nqp_get_sc_object $P5131, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5128, $P5131
  fallback1594:
    set $P5127, $P5128["identifier"]
    unless_null $P5127, fallback1595
    nqp_get_sc_object $P5132, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5127, $P5132
  fallback1595:
    set $N5003, $P5127
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    box $P5140, $I5006
    set $P5139, $P5140
    unless $I5006 goto if538_end1592 
.annotate 'line', 960
.annotate 'line', 961
    find_lex $P5134, "$/"
    unless_null $P5134, fallback1596
    nqp_get_sc_object $P5135, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5134, $P5135
  fallback1596:
    set $P5133, $P5134["name"]
    unless_null $P5133, fallback1597
    nqp_get_sc_object $P5136, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5133, $P5136
  fallback1597:
    $P5137 = $P5133."CURSOR"()
    $P5138 = $P5137."panic"("A my scoped package cannot have a multi-part name yet")
    set $P5139, $P5138
  if538_end1592:
.annotate 'line', 963
    find_dynamic_lex $P5141, "$*W"
    unless_null $P5141, fallback1598
    get_hll_global $P5144, "GLOBAL"
    get_who $P5143, $P5144
    set $P5142, $P5143["$W"]
    unless_null $P5142, fallback1599
    nqp_get_sc_object $P5145, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5142, $P5145
  fallback1599:
    unless_null $P5142, vivi_5391600
    die "Contextual $*W not found"
    box $P5146, "Contextual $*W not found"
    set $P5142, $P5146
  vivi_5391600:
    set $P5141, $P5142
  fallback1598:
    find_dynamic_lex $P5147, "$*W"
    unless_null $P5147, fallback1601
    get_hll_global $P5150, "GLOBAL"
    get_who $P5149, $P5150
    set $P5148, $P5149["$W"]
    unless_null $P5148, fallback1602
    nqp_get_sc_object $P5151, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5148, $P5151
  fallback1602:
    unless_null $P5148, vivi_5401603
    die "Contextual $*W not found"
    box $P5152, "Contextual $*W not found"
    set $P5148, $P5152
  vivi_5401603:
    set $P5147, $P5148
  fallback1601:
    $P5153 = $P5147."cur_lexpad"()
    find_lex $P5157, "$/"
    unless_null $P5157, fallback1604
    nqp_get_sc_object $P5158, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5157, $P5158
  fallback1604:
    set $P5156, $P5157["name"]
    unless_null $P5156, fallback1605
    nqp_get_sc_object $P5159, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5156, $P5159
  fallback1605:
    set $P5155, $P5156["identifier"]
    unless_null $P5155, fallback1606
    nqp_get_sc_object $P5160, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5155, $P5160
  fallback1606:
    set $P5154, $P5155[0]
    unless_null $P5154, fallback1607
    nqp_get_sc_object $P5161, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5154, $P5161
  fallback1607:
    find_dynamic_lex $P5162, "$*PACKAGE"
    unless_null $P5162, fallback1608
    get_hll_global $P5165, "GLOBAL"
    get_who $P5164, $P5165
    set $P5163, $P5164["$PACKAGE"]
    unless_null $P5163, fallback1609
    nqp_get_sc_object $P5166, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5163, $P5166
  fallback1609:
    unless_null $P5163, vivi_5411610
    die "Contextual $*PACKAGE not found"
    box $P5167, "Contextual $*PACKAGE not found"
    set $P5163, $P5167
  vivi_5411610:
    set $P5162, $P5163
  fallback1608:
    $P5168 = $P5141."install_lexical_symbol"($P5153, $P5154, $P5162)
    set $P5178, $P5168
    goto if536_end1587
  if536_else1586:
.annotate 'line', 965
.annotate 'line', 966
    find_lex $P5169, "$/"
    $P5170 = $P5169."CURSOR"()
    find_dynamic_lex $P5171, "$*SCOPE"
    unless_null $P5171, fallback1611
    get_hll_global $P5174, "GLOBAL"
    get_who $P5173, $P5174
    set $P5172, $P5173["$SCOPE"]
    unless_null $P5172, fallback1612
    nqp_get_sc_object $P5175, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5172, $P5175
  fallback1612:
    unless_null $P5172, vivi_5421613
    die "Contextual $*SCOPE not found"
    box $P5176, "Contextual $*SCOPE not found"
    set $P5172, $P5176
  vivi_5421613:
    set $P5171, $P5172
  fallback1611:
    set $S5008, $P5171
    concat $S5007, $S5008, " scoped packages are not supported"
    $P5177 = $P5170."panic"($S5007)
    set $P5178, $P5177
  if536_end1587:
    set $P5179, $P5178
  if525_end1547:
    .return ($P5179) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator" :subid("cuid_109_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 979
    .param pmc self 
    $P5001 = self."!protoregex"("scope_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_110_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 980
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx569_tgt
    .local int rx569_pos
    .local int rx569_off
    .local int rx569_eos
    .local int rx569_rep
    .local pmc rx569_cur
    .local pmc rx569_curclass
    .local pmc rx569_bstack
    .local pmc rx569_cstack
    (rx569_cur, rx569_tgt, rx569_pos, rx569_curclass, rx569_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx569_cur
    length rx569_eos, rx569_tgt
    eq $I19, 1, rx569_restart1647
    gt rx569_pos, rx569_eos, rx569_fail1648
    repr_get_attr_int $I11, self, rx569_curclass, "$!from"
    ne $I11, -1, rxscan570_done1654
    goto rxscan570_scan1653
  rxscan570_loop1652:
    inc rx569_pos
    gt rx569_pos, rx569_eos, rx569_fail1648
    repr_bind_attr_int rx569_cur, rx569_curclass, "$!from", rx569_pos
  rxscan570_scan1653:
    nqp_rxmark rx569_bstack, rxscan570_loop1652, rx569_pos, 0
  rxscan570_done1654:
    nqp_rxmark rx569_bstack, rxcap571_fail1656, rx569_pos, 0
    add $I11, rx569_pos, 2
    gt $I11, rx569_eos, rx569_fail1648
    substr $S10, rx569_tgt, rx569_pos, 2
    ne $S10, ucs4:"my", rx569_fail1648
    add rx569_pos, 2
    nqp_rxpeek $I19, rx569_bstack, rxcap571_fail1656
    inc $I19
    set $I11, rx569_bstack[$I19]
    $P11 = rx569_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx569_pos)
    rx569_cstack = rx569_cur."!cursor_capture"($P11, "sym")
    goto rxcap571_done1655
  rxcap571_fail1656:
    goto rx569_fail1648
  rxcap571_done1655:
    repr_bind_attr_int rx569_cur, rx569_curclass, "$!pos", rx569_pos
    $P11 = rx569_cur."scoped"("my")
    repr_get_attr_int $I11, $P11, rx569_curclass, "$!pos"
    lt $I11, 0, rx569_fail1648
    nqp_rxmark rx569_bstack, rxsubrule572_pass1657, -1, 0
  rxsubrule572_pass1657:
    rx569_cstack = rx569_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx569_pos, $P11, rx569_curclass, "$!pos"
    rx569_cur."!cursor_pass"(rx569_pos, "scope_declarator:sym<my>", 'backtrack'=>1)
    .return (rx569_cur)
  rx569_restart1647:
    repr_get_attr_obj rx569_cstack, rx569_cur, rx569_curclass, "$!cstack"
  rx569_fail1648:
    unless rx569_bstack, rx569_done1646
    pop $I19, rx569_bstack
    if_null rx569_cstack, rx569_cstack_done1651
    unless rx569_cstack, rx569_cstack_done1651
    dec $I19
    set $P11, rx569_cstack[$I19]
  rx569_cstack_done1651:
    pop rx569_rep, rx569_bstack
    pop rx569_pos, rx569_bstack
    pop $I19, rx569_bstack
    lt rx569_pos, -1, rx569_done1646
    lt rx569_pos, 0, rx569_fail1648
    eq $I19, 0, rx569_fail1648
    nqp_islist $I20, rx569_cstack
    unless $I20, rx569_jump1649
    elements $I18, rx569_bstack
    le $I18, 0, rx569_cut1650
    dec $I18
    set $I18, rx569_bstack[$I18]
  rx569_cut1650:
    assign rx569_cstack, $I18
  rx569_jump1649:
    jump $I19
  rx569_done1646:
    rx569_cur."!cursor_fail"()
    .return (rx569_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_110_1347719921.536_caps" :subid("cuid_memo_153_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["scoped"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_110_1347719921.536_nfa" :subid("cuid_memo_154_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 121
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "scoped"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_111_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 981
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx573_tgt
    .local int rx573_pos
    .local int rx573_off
    .local int rx573_eos
    .local int rx573_rep
    .local pmc rx573_cur
    .local pmc rx573_curclass
    .local pmc rx573_bstack
    .local pmc rx573_cstack
    (rx573_cur, rx573_tgt, rx573_pos, rx573_curclass, rx573_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx573_cur
    length rx573_eos, rx573_tgt
    eq $I19, 1, rx573_restart1660
    gt rx573_pos, rx573_eos, rx573_fail1661
    repr_get_attr_int $I11, self, rx573_curclass, "$!from"
    ne $I11, -1, rxscan574_done1667
    goto rxscan574_scan1666
  rxscan574_loop1665:
    inc rx573_pos
    gt rx573_pos, rx573_eos, rx573_fail1661
    repr_bind_attr_int rx573_cur, rx573_curclass, "$!from", rx573_pos
  rxscan574_scan1666:
    nqp_rxmark rx573_bstack, rxscan574_loop1665, rx573_pos, 0
  rxscan574_done1667:
    nqp_rxmark rx573_bstack, rxcap575_fail1669, rx573_pos, 0
    add $I11, rx573_pos, 3
    gt $I11, rx573_eos, rx573_fail1661
    substr $S10, rx573_tgt, rx573_pos, 3
    ne $S10, ucs4:"our", rx573_fail1661
    add rx573_pos, 3
    nqp_rxpeek $I19, rx573_bstack, rxcap575_fail1669
    inc $I19
    set $I11, rx573_bstack[$I19]
    $P11 = rx573_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx573_pos)
    rx573_cstack = rx573_cur."!cursor_capture"($P11, "sym")
    goto rxcap575_done1668
  rxcap575_fail1669:
    goto rx573_fail1661
  rxcap575_done1668:
    repr_bind_attr_int rx573_cur, rx573_curclass, "$!pos", rx573_pos
    $P11 = rx573_cur."scoped"("our")
    repr_get_attr_int $I11, $P11, rx573_curclass, "$!pos"
    lt $I11, 0, rx573_fail1661
    nqp_rxmark rx573_bstack, rxsubrule576_pass1670, -1, 0
  rxsubrule576_pass1670:
    rx573_cstack = rx573_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx573_pos, $P11, rx573_curclass, "$!pos"
    rx573_cur."!cursor_pass"(rx573_pos, "scope_declarator:sym<our>", 'backtrack'=>1)
    .return (rx573_cur)
  rx573_restart1660:
    repr_get_attr_obj rx573_cstack, rx573_cur, rx573_curclass, "$!cstack"
  rx573_fail1661:
    unless rx573_bstack, rx573_done1659
    pop $I19, rx573_bstack
    if_null rx573_cstack, rx573_cstack_done1664
    unless rx573_cstack, rx573_cstack_done1664
    dec $I19
    set $P11, rx573_cstack[$I19]
  rx573_cstack_done1664:
    pop rx573_rep, rx573_bstack
    pop rx573_pos, rx573_bstack
    pop $I19, rx573_bstack
    lt rx573_pos, -1, rx573_done1659
    lt rx573_pos, 0, rx573_fail1661
    eq $I19, 0, rx573_fail1661
    nqp_islist $I20, rx573_cstack
    unless $I20, rx573_jump1662
    elements $I18, rx573_bstack
    le $I18, 0, rx573_cut1663
    dec $I18
    set $I18, rx573_bstack[$I18]
  rx573_cut1663:
    assign rx573_cstack, $I18
  rx573_jump1662:
    jump $I19
  rx573_done1659:
    rx573_cur."!cursor_fail"()
    .return (rx573_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_111_1347719921.536_caps" :subid("cuid_memo_155_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["scoped"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_111_1347719921.536_nfa" :subid("cuid_memo_156_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 111
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 117
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "scoped"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_112_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 982
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx577_tgt
    .local int rx577_pos
    .local int rx577_off
    .local int rx577_eos
    .local int rx577_rep
    .local pmc rx577_cur
    .local pmc rx577_curclass
    .local pmc rx577_bstack
    .local pmc rx577_cstack
    (rx577_cur, rx577_tgt, rx577_pos, rx577_curclass, rx577_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx577_cur
    length rx577_eos, rx577_tgt
    eq $I19, 1, rx577_restart1673
    gt rx577_pos, rx577_eos, rx577_fail1674
    repr_get_attr_int $I11, self, rx577_curclass, "$!from"
    ne $I11, -1, rxscan578_done1680
    goto rxscan578_scan1679
  rxscan578_loop1678:
    inc rx577_pos
    gt rx577_pos, rx577_eos, rx577_fail1674
    repr_bind_attr_int rx577_cur, rx577_curclass, "$!from", rx577_pos
  rxscan578_scan1679:
    nqp_rxmark rx577_bstack, rxscan578_loop1678, rx577_pos, 0
  rxscan578_done1680:
    nqp_rxmark rx577_bstack, rxcap579_fail1682, rx577_pos, 0
    add $I11, rx577_pos, 3
    gt $I11, rx577_eos, rx577_fail1674
    substr $S10, rx577_tgt, rx577_pos, 3
    ne $S10, ucs4:"has", rx577_fail1674
    add rx577_pos, 3
    nqp_rxpeek $I19, rx577_bstack, rxcap579_fail1682
    inc $I19
    set $I11, rx577_bstack[$I19]
    $P11 = rx577_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx577_pos)
    rx577_cstack = rx577_cur."!cursor_capture"($P11, "sym")
    goto rxcap579_done1681
  rxcap579_fail1682:
    goto rx577_fail1674
  rxcap579_done1681:
    repr_bind_attr_int rx577_cur, rx577_curclass, "$!pos", rx577_pos
    $P11 = rx577_cur."scoped"("has")
    repr_get_attr_int $I11, $P11, rx577_curclass, "$!pos"
    lt $I11, 0, rx577_fail1674
    nqp_rxmark rx577_bstack, rxsubrule580_pass1683, -1, 0
  rxsubrule580_pass1683:
    rx577_cstack = rx577_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx577_pos, $P11, rx577_curclass, "$!pos"
    rx577_cur."!cursor_pass"(rx577_pos, "scope_declarator:sym<has>", 'backtrack'=>1)
    .return (rx577_cur)
  rx577_restart1673:
    repr_get_attr_obj rx577_cstack, rx577_cur, rx577_curclass, "$!cstack"
  rx577_fail1674:
    unless rx577_bstack, rx577_done1672
    pop $I19, rx577_bstack
    if_null rx577_cstack, rx577_cstack_done1677
    unless rx577_cstack, rx577_cstack_done1677
    dec $I19
    set $P11, rx577_cstack[$I19]
  rx577_cstack_done1677:
    pop rx577_rep, rx577_bstack
    pop rx577_pos, rx577_bstack
    pop $I19, rx577_bstack
    lt rx577_pos, -1, rx577_done1672
    lt rx577_pos, 0, rx577_fail1674
    eq $I19, 0, rx577_fail1674
    nqp_islist $I20, rx577_cstack
    unless $I20, rx577_jump1675
    elements $I18, rx577_bstack
    le $I18, 0, rx577_cut1676
    dec $I18
    set $I18, rx577_bstack[$I18]
  rx577_cut1676:
    assign rx577_cstack, $I18
  rx577_jump1675:
    jump $I19
  rx577_done1672:
    rx577_cur."!cursor_fail"()
    .return (rx577_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_112_1347719921.536_caps" :subid("cuid_memo_157_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["scoped"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_112_1347719921.536_nfa" :subid("cuid_memo_158_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 104
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 97
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 115
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "scoped"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_113_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 984
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .lex "$*SCOPE", _lex_param_1 
    .local pmc self 
    set self, _lex_param_0
    .local string rx581_tgt
    .local int rx581_pos
    .local int rx581_off
    .local int rx581_eos
    .local int rx581_rep
    .local pmc rx581_cur
    .local pmc rx581_curclass
    .local pmc rx581_bstack
    .local pmc rx581_cstack
    (rx581_cur, rx581_tgt, rx581_pos, rx581_curclass, rx581_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx581_cur
    length rx581_eos, rx581_tgt
    eq $I19, 1, rx581_restart1686
    gt rx581_pos, rx581_eos, rx581_fail1687
    repr_get_attr_int $I11, self, rx581_curclass, "$!from"
    ne $I11, -1, rxscan582_done1693
    goto rxscan582_scan1692
  rxscan582_loop1691:
    inc rx581_pos
    gt rx581_pos, rx581_eos, rx581_fail1687
    repr_bind_attr_int rx581_cur, rx581_curclass, "$!from", rx581_pos
  rxscan582_scan1692:
    nqp_rxmark rx581_bstack, rxscan582_loop1691, rx581_pos, 0
  rxscan582_done1693:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt583_01695
    nqp_push_label $P11, alt583_11699
    nqp_push_label $P11, alt583_21703
    nqp_rxmark rx581_bstack, alt583_end1694, -1, 0
    rx581_cur."!alt"(rx581_pos, "alt_nfa__21_1347719923.457", $P11)
    goto rx581_fail1687
  alt583_01695:
    repr_bind_attr_int rx581_cur, rx581_curclass, "$!pos", rx581_pos
    $P11 = rx581_cur."ws"()
    repr_get_attr_int $I11, $P11, rx581_curclass, "$!pos"
    lt $I11, 0, rx581_fail1687
    repr_get_attr_int rx581_pos, $P11, rx581_curclass, "$!pos"
    repr_bind_attr_int rx581_cur, rx581_curclass, "$!pos", rx581_pos
    $P11 = rx581_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx581_curclass, "$!pos"
    lt $I11, 0, rx581_fail1687
    nqp_rxmark rx581_bstack, rxsubrule585_pass1697, -1, 0
  rxsubrule585_pass1697:
    rx581_cstack = rx581_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx581_pos, $P11, rx581_curclass, "$!pos"
    repr_bind_attr_int rx581_cur, rx581_curclass, "$!pos", rx581_pos
    $P11 = rx581_cur."ws"()
    repr_get_attr_int $I11, $P11, rx581_curclass, "$!pos"
    lt $I11, 0, rx581_fail1687
    repr_get_attr_int rx581_pos, $P11, rx581_curclass, "$!pos"
    goto alt583_end1694
  alt583_11699:
    repr_bind_attr_int rx581_cur, rx581_curclass, "$!pos", rx581_pos
    $P11 = rx581_cur."ws"()
    repr_get_attr_int $I11, $P11, rx581_curclass, "$!pos"
    lt $I11, 0, rx581_fail1687
    repr_get_attr_int rx581_pos, $P11, rx581_curclass, "$!pos"
    repr_bind_attr_int rx581_cur, rx581_curclass, "$!pos", rx581_pos
    $P11 = rx581_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx581_curclass, "$!pos"
    lt $I11, 0, rx581_fail1687
    nqp_rxmark rx581_bstack, rxsubrule588_pass1701, -1, 0
  rxsubrule588_pass1701:
    rx581_cstack = rx581_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx581_pos, $P11, rx581_curclass, "$!pos"
    repr_bind_attr_int rx581_cur, rx581_curclass, "$!pos", rx581_pos
    $P11 = rx581_cur."ws"()
    repr_get_attr_int $I11, $P11, rx581_curclass, "$!pos"
    lt $I11, 0, rx581_fail1687
    repr_get_attr_int rx581_pos, $P11, rx581_curclass, "$!pos"
    goto alt583_end1694
  alt583_21703:
    repr_bind_attr_int rx581_cur, rx581_curclass, "$!pos", rx581_pos
    $P11 = rx581_cur."ws"()
    repr_get_attr_int $I11, $P11, rx581_curclass, "$!pos"
    lt $I11, 0, rx581_fail1687
    repr_get_attr_int rx581_pos, $P11, rx581_curclass, "$!pos"
    repr_bind_attr_int rx581_cur, rx581_curclass, "$!pos", rx581_pos
    $P11 = rx581_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx581_curclass, "$!pos"
    lt $I11, 0, rx581_fail1687
    nqp_rxmark rx581_bstack, rxsubrule591_pass1705, -1, 0
  rxsubrule591_pass1705:
    rx581_cstack = rx581_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx581_pos, $P11, rx581_curclass, "$!pos"
    repr_bind_attr_int rx581_cur, rx581_curclass, "$!pos", rx581_pos
    $P11 = rx581_cur."ws"()
    repr_get_attr_int $I11, $P11, rx581_curclass, "$!pos"
    lt $I11, 0, rx581_fail1687
    repr_get_attr_int rx581_pos, $P11, rx581_curclass, "$!pos"
    goto alt583_end1694
  alt583_end1694:
    rx581_cur."!cursor_pass"(rx581_pos, "scoped", 'backtrack'=>1)
    .return (rx581_cur)
  rx581_restart1686:
    repr_get_attr_obj rx581_cstack, rx581_cur, rx581_curclass, "$!cstack"
  rx581_fail1687:
    unless rx581_bstack, rx581_done1685
    pop $I19, rx581_bstack
    if_null rx581_cstack, rx581_cstack_done1690
    unless rx581_cstack, rx581_cstack_done1690
    dec $I19
    set $P11, rx581_cstack[$I19]
  rx581_cstack_done1690:
    pop rx581_rep, rx581_bstack
    pop rx581_pos, rx581_bstack
    pop $I19, rx581_bstack
    lt rx581_pos, -1, rx581_done1685
    lt rx581_pos, 0, rx581_fail1687
    eq $I19, 0, rx581_fail1687
    nqp_islist $I20, rx581_cstack
    unless $I20, rx581_jump1688
    elements $I18, rx581_bstack
    le $I18, 0, rx581_cut1689
    dec $I18
    set $I18, rx581_bstack[$I18]
  rx581_cut1689:
    assign rx581_cstack, $I18
  rx581_jump1688:
    jump $I19
  rx581_done1685:
    rx581_cur."!cursor_fail"()
    .return (rx581_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_113_1347719921.536_caps" :subid("cuid_memo_159_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["declarator"], $P5002
    box $P5003, 0
    set $P5001["multi_declarator"], $P5003
    box $P5004, 0
    set $P5001["package_declarator"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_113_1347719921.536_alt_nfa__21_1347719923.457" :subid("cuid_memo_160_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    new $P5020, 'ResizablePMCArray'
    new $P5021, 'ResizablePMCArray'
    push $P5020, $P5021
    new $P5022, 'ResizablePMCArray'
    box $P5023, 0
    push $P5022, $P5023
    box $P5024, 0
    push $P5022, $P5024
    box $P5025, 0
    push $P5022, $P5025
    box $P5026, 0
    push $P5022, $P5026
    box $P5027, 0
    push $P5022, $P5027
    box $P5028, 0
    push $P5022, $P5028
    push $P5020, $P5022
    push $P5001, $P5020
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_114_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 990
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_388_1347719921.536' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx593_tgt
    .local int rx593_pos
    .local int rx593_off
    .local int rx593_eos
    .local int rx593_rep
    .local pmc rx593_cur
    .local pmc rx593_curclass
    .local pmc rx593_bstack
    .local pmc rx593_cstack
    (rx593_cur, rx593_tgt, rx593_pos, rx593_curclass, rx593_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx593_cur
    length rx593_eos, rx593_tgt
    eq $I19, 1, rx593_restart1709
    gt rx593_pos, rx593_eos, rx593_fail1710
    repr_get_attr_int $I11, self, rx593_curclass, "$!from"
    ne $I11, -1, rxscan594_done1716
    goto rxscan594_scan1715
  rxscan594_loop1714:
    inc rx593_pos
    gt rx593_pos, rx593_eos, rx593_fail1710
    repr_bind_attr_int rx593_cur, rx593_curclass, "$!from", rx593_pos
  rxscan594_scan1715:
    nqp_rxmark rx593_bstack, rxscan594_loop1714, rx593_pos, 0
  rxscan594_done1716:
    repr_bind_attr_int rx593_cur, rx593_curclass, "$!pos", rx593_pos
    $P11 = rx593_cur."name"()
    repr_get_attr_int $I11, $P11, rx593_curclass, "$!pos"
    lt $I11, 0, rx593_fail1710
    nqp_rxmark rx593_bstack, rxsubrule595_pass1717, -1, 0
  rxsubrule595_pass1717:
    rx593_cstack = rx593_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx593_pos, $P11, rx593_curclass, "$!pos"
    repr_bind_attr_int rx593_cur, rx593_curclass, "$!pos", rx593_pos
    store_lex unicode:"$\x{a2}", rx593_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_388_1347719921.536' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx593_fail1710
    rx593_cur."!cursor_pass"(rx593_pos, "typename", 'backtrack'=>1)
    .return (rx593_cur)
  rx593_restart1709:
    repr_get_attr_obj rx593_cstack, rx593_cur, rx593_curclass, "$!cstack"
  rx593_fail1710:
    unless rx593_bstack, rx593_done1708
    pop $I19, rx593_bstack
    if_null rx593_cstack, rx593_cstack_done1713
    unless rx593_cstack, rx593_cstack_done1713
    dec $I19
    set $P11, rx593_cstack[$I19]
  rx593_cstack_done1713:
    pop rx593_rep, rx593_bstack
    pop rx593_pos, rx593_bstack
    pop $I19, rx593_bstack
    lt rx593_pos, -1, rx593_done1708
    lt rx593_pos, 0, rx593_fail1710
    eq $I19, 0, rx593_fail1710
    nqp_islist $I20, rx593_cstack
    unless $I20, rx593_jump1711
    elements $I18, rx593_bstack
    le $I18, 0, rx593_cut1712
    dec $I18
    set $I18, rx593_bstack[$I18]
  rx593_cut1712:
    assign rx593_cstack, $I18
  rx593_jump1711:
    jump $I19
  rx593_done1708:
    rx593_cur."!cursor_fail"()
    .return (rx593_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_114_1347719921.536_caps" :subid("cuid_memo_161_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["name"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_114_1347719921.536_nfa" :subid("cuid_memo_162_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "name"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_388_1347719921.536") :anon :lex :outer("cuid_114_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 992

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback1718
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback1719
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5005
  fallback1719:
    unless_null $P5002, vivi_5961720
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_5961720:
    set $P5001, $P5002
  fallback1718:
    find_lex $P5007, "$/"
    find_lex $P5010, "$/"
    unless_null $P5010, fallback1721
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5011
  fallback1721:
    set $P5009, $P5010["name"]
    unless_null $P5009, fallback1722
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5012
  fallback1722:
    set $P5008, $P5009["identifier"]
    unless_null $P5008, fallback1723
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5013
  fallback1723:
    $P5014 = $P5001."known_sym"($P5007, $P5008)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_115_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 995
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx597_tgt
    .local int rx597_pos
    .local int rx597_off
    .local int rx597_eos
    .local int rx597_rep
    .local pmc rx597_cur
    .local pmc rx597_curclass
    .local pmc rx597_bstack
    .local pmc rx597_cstack
    (rx597_cur, rx597_tgt, rx597_pos, rx597_curclass, rx597_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx597_cur
    length rx597_eos, rx597_tgt
    eq $I19, 1, rx597_restart1726
    gt rx597_pos, rx597_eos, rx597_fail1727
    repr_get_attr_int $I11, self, rx597_curclass, "$!from"
    ne $I11, -1, rxscan598_done1733
    goto rxscan598_scan1732
  rxscan598_loop1731:
    inc rx597_pos
    gt rx597_pos, rx597_eos, rx597_fail1727
    repr_bind_attr_int rx597_cur, rx597_curclass, "$!from", rx597_pos
  rxscan598_scan1732:
    nqp_rxmark rx597_bstack, rxscan598_loop1731, rx597_pos, 0
  rxscan598_done1733:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt599_01735
    nqp_push_label $P11, alt599_11737
    nqp_rxmark rx597_bstack, alt599_end1734, -1, 0
    rx597_cur."!alt"(rx597_pos, "alt_nfa__22_1347719923.471", $P11)
    goto rx597_fail1727
  alt599_01735:
    repr_bind_attr_int rx597_cur, rx597_curclass, "$!pos", rx597_pos
    $P11 = rx597_cur."variable_declarator"()
    repr_get_attr_int $I11, $P11, rx597_curclass, "$!pos"
    lt $I11, 0, rx597_fail1727
    nqp_rxmark rx597_bstack, rxsubrule600_pass1736, -1, 0
  rxsubrule600_pass1736:
    rx597_cstack = rx597_cur."!cursor_capture"($P11, "variable_declarator")
    repr_get_attr_int rx597_pos, $P11, rx597_curclass, "$!pos"
    goto alt599_end1734
  alt599_11737:
    repr_bind_attr_int rx597_cur, rx597_curclass, "$!pos", rx597_pos
    $P11 = rx597_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx597_curclass, "$!pos"
    lt $I11, 0, rx597_fail1727
    nqp_rxmark rx597_bstack, rxsubrule601_pass1738, -1, 0
  rxsubrule601_pass1738:
    rx597_cstack = rx597_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx597_pos, $P11, rx597_curclass, "$!pos"
    goto alt599_end1734
  alt599_end1734:
    rx597_cur."!cursor_pass"(rx597_pos, "declarator", 'backtrack'=>1)
    .return (rx597_cur)
  rx597_restart1726:
    repr_get_attr_obj rx597_cstack, rx597_cur, rx597_curclass, "$!cstack"
  rx597_fail1727:
    unless rx597_bstack, rx597_done1725
    pop $I19, rx597_bstack
    if_null rx597_cstack, rx597_cstack_done1730
    unless rx597_cstack, rx597_cstack_done1730
    dec $I19
    set $P11, rx597_cstack[$I19]
  rx597_cstack_done1730:
    pop rx597_rep, rx597_bstack
    pop rx597_pos, rx597_bstack
    pop $I19, rx597_bstack
    lt rx597_pos, -1, rx597_done1725
    lt rx597_pos, 0, rx597_fail1727
    eq $I19, 0, rx597_fail1727
    nqp_islist $I20, rx597_cstack
    unless $I20, rx597_jump1728
    elements $I18, rx597_bstack
    le $I18, 0, rx597_cut1729
    dec $I18
    set $I18, rx597_bstack[$I18]
  rx597_cut1729:
    assign rx597_cstack, $I18
  rx597_jump1728:
    jump $I19
  rx597_done1725:
    rx597_cur."!cursor_fail"()
    .return (rx597_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_115_1347719921.536_caps" :subid("cuid_memo_163_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["variable_declarator"], $P5002
    box $P5003, 0
    set $P5001["routine_declarator"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_115_1347719921.536_nfa" :subid("cuid_memo_164_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "variable_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    box $P5007, 8
    push $P5003, $P5007
    box $P5008, "routine_declarator"
    push $P5003, $P5008
    box $P5009, 0
    push $P5003, $P5009
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_115_1347719921.536_alt_nfa__22_1347719923.471" :subid("cuid_memo_165_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "variable_declarator"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "routine_declarator"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_116_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1000
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_389_1347719921.536' 
    capture_lex $P5006 
    .lex "$*IN_DECL", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx602_tgt
    .local int rx602_pos
    .local int rx602_off
    .local int rx602_eos
    .local int rx602_rep
    .local pmc rx602_cur
    .local pmc rx602_curclass
    .local pmc rx602_bstack
    .local pmc rx602_cstack
    (rx602_cur, rx602_tgt, rx602_pos, rx602_curclass, rx602_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx602_cur
    length rx602_eos, rx602_tgt
    eq $I19, 1, rx602_restart1741
    gt rx602_pos, rx602_eos, rx602_fail1742
    repr_get_attr_int $I11, self, rx602_curclass, "$!from"
    ne $I11, -1, rxscan603_done1748
    goto rxscan603_scan1747
  rxscan603_loop1746:
    inc rx602_pos
    gt rx602_pos, rx602_eos, rx602_fail1742
    repr_bind_attr_int rx602_cur, rx602_curclass, "$!from", rx602_pos
  rxscan603_scan1747:
    nqp_rxmark rx602_bstack, rxscan603_loop1746, rx602_pos, 0
  rxscan603_done1748:
    repr_bind_attr_int rx602_cur, rx602_curclass, "$!pos", rx602_pos
    $P11 = rx602_cur."ws"()
    repr_get_attr_int $I11, $P11, rx602_curclass, "$!pos"
    lt $I11, 0, rx602_fail1742
    repr_get_attr_int rx602_pos, $P11, rx602_curclass, "$!pos"
    nqp_rxmark rx602_bstack, rxquantr605_done1751, rx602_pos, 0
  rxquantr605_loop1750:
    repr_bind_attr_int rx602_cur, rx602_curclass, "$!pos", rx602_pos
    $P11 = rx602_cur."typename"()
    repr_get_attr_int $I11, $P11, rx602_curclass, "$!pos"
    lt $I11, 0, rx602_fail1742
    goto rxsubrule606_pass1752
  rxsubrule606_back1753:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx602_curclass, "$!pos"
    lt $I11, 0, rx602_fail1742
  rxsubrule606_pass1752:
    rx602_cstack = rx602_cur."!cursor_capture"($P11, "typename")
    set_addr $I11, rxsubrule606_back1753
    push rx602_bstack, $I11
    push rx602_bstack, 0
    push rx602_bstack, rx602_pos
    elements $I11, rx602_cstack
    push rx602_bstack, $I11
    repr_get_attr_int rx602_pos, $P11, rx602_curclass, "$!pos"
    nqp_rxpeek $I19, rx602_bstack, rxquantr605_done1751
    inc $I19
    inc $I19
    set rx602_rep, rx602_bstack[$I19]
    nqp_rxcommit rx602_bstack, rxquantr605_done1751
    inc rx602_rep
  rxquantr605_done1751:
    repr_bind_attr_int rx602_cur, rx602_curclass, "$!pos", rx602_pos
    $P11 = rx602_cur."ws"()
    repr_get_attr_int $I11, $P11, rx602_curclass, "$!pos"
    lt $I11, 0, rx602_fail1742
    repr_get_attr_int rx602_pos, $P11, rx602_curclass, "$!pos"
    repr_bind_attr_int rx602_cur, rx602_curclass, "$!pos", rx602_pos
    store_lex unicode:"$\x{a2}", rx602_cur
    box $P5002, "variable"
    set $P101, $P5002
    repr_bind_attr_int rx602_cur, rx602_curclass, "$!pos", rx602_pos
    $P11 = rx602_cur."ws"()
    repr_get_attr_int $I11, $P11, rx602_curclass, "$!pos"
    lt $I11, 0, rx602_fail1742
    repr_get_attr_int rx602_pos, $P11, rx602_curclass, "$!pos"
    repr_bind_attr_int rx602_cur, rx602_curclass, "$!pos", rx602_pos
    $P11 = rx602_cur."variable"()
    repr_get_attr_int $I11, $P11, rx602_curclass, "$!pos"
    lt $I11, 0, rx602_fail1742
    nqp_rxmark rx602_bstack, rxsubrule609_pass1756, -1, 0
  rxsubrule609_pass1756:
    rx602_cstack = rx602_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx602_pos, $P11, rx602_curclass, "$!pos"
    repr_bind_attr_int rx602_cur, rx602_curclass, "$!pos", rx602_pos
    $P11 = rx602_cur."ws"()
    repr_get_attr_int $I11, $P11, rx602_curclass, "$!pos"
    lt $I11, 0, rx602_fail1742
    repr_get_attr_int rx602_pos, $P11, rx602_curclass, "$!pos"
    repr_bind_attr_int rx602_cur, rx602_curclass, "$!pos", rx602_pos
    store_lex unicode:"$\x{a2}", rx602_cur
    $P5003 = $P102."MATCH"()
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_389_1347719921.536' 
    capture_lex $P5004
    $P5005 = $P5004()
    repr_bind_attr_int rx602_cur, rx602_curclass, "$!pos", rx602_pos
    $P11 = rx602_cur."ws"()
    repr_get_attr_int $I11, $P11, rx602_curclass, "$!pos"
    lt $I11, 0, rx602_fail1742
    repr_get_attr_int rx602_pos, $P11, rx602_curclass, "$!pos"
    nqp_rxmark rx602_bstack, rxquantr612_done1760, rx602_pos, 0
  rxquantr612_loop1759:
    repr_bind_attr_int rx602_cur, rx602_curclass, "$!pos", rx602_pos
    $P11 = rx602_cur."trait"()
    repr_get_attr_int $I11, $P11, rx602_curclass, "$!pos"
    lt $I11, 0, rx602_fail1742
    goto rxsubrule613_pass1761
  rxsubrule613_back1762:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx602_curclass, "$!pos"
    lt $I11, 0, rx602_fail1742
  rxsubrule613_pass1761:
    rx602_cstack = rx602_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule613_back1762
    push rx602_bstack, $I11
    push rx602_bstack, 0
    push rx602_bstack, rx602_pos
    elements $I11, rx602_cstack
    push rx602_bstack, $I11
    repr_get_attr_int rx602_pos, $P11, rx602_curclass, "$!pos"
    nqp_rxpeek $I19, rx602_bstack, rxquantr612_done1760
    inc $I19
    inc $I19
    set rx602_rep, rx602_bstack[$I19]
    nqp_rxcommit rx602_bstack, rxquantr612_done1760
    inc rx602_rep
    nqp_rxmark rx602_bstack, rxquantr612_done1760, rx602_pos, rx602_rep
    goto rxquantr612_loop1759
  rxquantr612_done1760:
    repr_bind_attr_int rx602_cur, rx602_curclass, "$!pos", rx602_pos
    $P11 = rx602_cur."ws"()
    repr_get_attr_int $I11, $P11, rx602_curclass, "$!pos"
    lt $I11, 0, rx602_fail1742
    repr_get_attr_int rx602_pos, $P11, rx602_curclass, "$!pos"
    rx602_cur."!cursor_pass"(rx602_pos, "variable_declarator", 'backtrack'=>1)
    .return (rx602_cur)
  rx602_restart1741:
    repr_get_attr_obj rx602_cstack, rx602_cur, rx602_curclass, "$!cstack"
  rx602_fail1742:
    unless rx602_bstack, rx602_done1740
    pop $I19, rx602_bstack
    if_null rx602_cstack, rx602_cstack_done1745
    unless rx602_cstack, rx602_cstack_done1745
    dec $I19
    set $P11, rx602_cstack[$I19]
  rx602_cstack_done1745:
    pop rx602_rep, rx602_bstack
    pop rx602_pos, rx602_bstack
    pop $I19, rx602_bstack
    lt rx602_pos, -1, rx602_done1740
    lt rx602_pos, 0, rx602_fail1742
    eq $I19, 0, rx602_fail1742
    nqp_islist $I20, rx602_cstack
    unless $I20, rx602_jump1743
    elements $I18, rx602_bstack
    le $I18, 0, rx602_cut1744
    dec $I18
    set $I18, rx602_bstack[$I18]
  rx602_cut1744:
    assign rx602_cstack, $I18
  rx602_jump1743:
    jump $I19
  rx602_done1740:
    rx602_cur."!cursor_fail"()
    .return (rx602_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_116_1347719921.536_caps" :subid("cuid_memo_166_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["typename"], $P5002
    box $P5003, 0
    set $P5001["variable"], $P5003
    box $P5004, 2
    set $P5001["trait"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_389_1347719921.536") :anon :lex :outer("cuid_116_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1004

    box $P5001, 0
    store_dynamic_lex "$*IN_DECL", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator" :subid("cuid_117_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1008
    .param pmc self 
    $P5001 = self."!protoregex"("routine_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_118_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1009
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx615_tgt
    .local int rx615_pos
    .local int rx615_off
    .local int rx615_eos
    .local int rx615_rep
    .local pmc rx615_cur
    .local pmc rx615_curclass
    .local pmc rx615_bstack
    .local pmc rx615_cstack
    (rx615_cur, rx615_tgt, rx615_pos, rx615_curclass, rx615_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx615_cur
    length rx615_eos, rx615_tgt
    eq $I19, 1, rx615_restart1766
    gt rx615_pos, rx615_eos, rx615_fail1767
    repr_get_attr_int $I11, self, rx615_curclass, "$!from"
    ne $I11, -1, rxscan616_done1773
    goto rxscan616_scan1772
  rxscan616_loop1771:
    inc rx615_pos
    gt rx615_pos, rx615_eos, rx615_fail1767
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!from", rx615_pos
  rxscan616_scan1772:
    nqp_rxmark rx615_bstack, rxscan616_loop1771, rx615_pos, 0
  rxscan616_done1773:
    nqp_rxmark rx615_bstack, rxcap617_fail1775, rx615_pos, 0
    add $I11, rx615_pos, 3
    gt $I11, rx615_eos, rx615_fail1767
    substr $S10, rx615_tgt, rx615_pos, 3
    ne $S10, ucs4:"sub", rx615_fail1767
    add rx615_pos, 3
    nqp_rxpeek $I19, rx615_bstack, rxcap617_fail1775
    inc $I19
    set $I11, rx615_bstack[$I19]
    $P11 = rx615_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx615_pos)
    rx615_cstack = rx615_cur."!cursor_capture"($P11, "sym")
    goto rxcap617_done1774
  rxcap617_fail1775:
    goto rx615_fail1767
  rxcap617_done1774:
    repr_bind_attr_int rx615_cur, rx615_curclass, "$!pos", rx615_pos
    $P11 = rx615_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx615_curclass, "$!pos"
    lt $I11, 0, rx615_fail1767
    nqp_rxmark rx615_bstack, rxsubrule618_pass1776, -1, 0
  rxsubrule618_pass1776:
    rx615_cstack = rx615_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx615_pos, $P11, rx615_curclass, "$!pos"
    rx615_cur."!cursor_pass"(rx615_pos, "routine_declarator:sym<sub>", 'backtrack'=>1)
    .return (rx615_cur)
  rx615_restart1766:
    repr_get_attr_obj rx615_cstack, rx615_cur, rx615_curclass, "$!cstack"
  rx615_fail1767:
    unless rx615_bstack, rx615_done1765
    pop $I19, rx615_bstack
    if_null rx615_cstack, rx615_cstack_done1770
    unless rx615_cstack, rx615_cstack_done1770
    dec $I19
    set $P11, rx615_cstack[$I19]
  rx615_cstack_done1770:
    pop rx615_rep, rx615_bstack
    pop rx615_pos, rx615_bstack
    pop $I19, rx615_bstack
    lt rx615_pos, -1, rx615_done1765
    lt rx615_pos, 0, rx615_fail1767
    eq $I19, 0, rx615_fail1767
    nqp_islist $I20, rx615_cstack
    unless $I20, rx615_jump1768
    elements $I18, rx615_bstack
    le $I18, 0, rx615_cut1769
    dec $I18
    set $I18, rx615_bstack[$I18]
  rx615_cut1769:
    assign rx615_cstack, $I18
  rx615_jump1768:
    jump $I19
  rx615_done1765:
    rx615_cur."!cursor_fail"()
    .return (rx615_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_118_1347719921.536_caps" :subid("cuid_memo_167_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["routine_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_118_1347719921.536_nfa" :subid("cuid_memo_168_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 115
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 117
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 98
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "routine_def"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_119_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1010
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx619_tgt
    .local int rx619_pos
    .local int rx619_off
    .local int rx619_eos
    .local int rx619_rep
    .local pmc rx619_cur
    .local pmc rx619_curclass
    .local pmc rx619_bstack
    .local pmc rx619_cstack
    (rx619_cur, rx619_tgt, rx619_pos, rx619_curclass, rx619_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx619_cur
    length rx619_eos, rx619_tgt
    eq $I19, 1, rx619_restart1779
    gt rx619_pos, rx619_eos, rx619_fail1780
    repr_get_attr_int $I11, self, rx619_curclass, "$!from"
    ne $I11, -1, rxscan620_done1786
    goto rxscan620_scan1785
  rxscan620_loop1784:
    inc rx619_pos
    gt rx619_pos, rx619_eos, rx619_fail1780
    repr_bind_attr_int rx619_cur, rx619_curclass, "$!from", rx619_pos
  rxscan620_scan1785:
    nqp_rxmark rx619_bstack, rxscan620_loop1784, rx619_pos, 0
  rxscan620_done1786:
    nqp_rxmark rx619_bstack, rxcap621_fail1788, rx619_pos, 0
    add $I11, rx619_pos, 6
    gt $I11, rx619_eos, rx619_fail1780
    substr $S10, rx619_tgt, rx619_pos, 6
    ne $S10, ucs4:"method", rx619_fail1780
    add rx619_pos, 6
    nqp_rxpeek $I19, rx619_bstack, rxcap621_fail1788
    inc $I19
    set $I11, rx619_bstack[$I19]
    $P11 = rx619_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx619_pos)
    rx619_cstack = rx619_cur."!cursor_capture"($P11, "sym")
    goto rxcap621_done1787
  rxcap621_fail1788:
    goto rx619_fail1780
  rxcap621_done1787:
    repr_bind_attr_int rx619_cur, rx619_curclass, "$!pos", rx619_pos
    $P11 = rx619_cur."method_def"()
    repr_get_attr_int $I11, $P11, rx619_curclass, "$!pos"
    lt $I11, 0, rx619_fail1780
    nqp_rxmark rx619_bstack, rxsubrule622_pass1789, -1, 0
  rxsubrule622_pass1789:
    rx619_cstack = rx619_cur."!cursor_capture"($P11, "method_def")
    repr_get_attr_int rx619_pos, $P11, rx619_curclass, "$!pos"
    rx619_cur."!cursor_pass"(rx619_pos, "routine_declarator:sym<method>", 'backtrack'=>1)
    .return (rx619_cur)
  rx619_restart1779:
    repr_get_attr_obj rx619_cstack, rx619_cur, rx619_curclass, "$!cstack"
  rx619_fail1780:
    unless rx619_bstack, rx619_done1778
    pop $I19, rx619_bstack
    if_null rx619_cstack, rx619_cstack_done1783
    unless rx619_cstack, rx619_cstack_done1783
    dec $I19
    set $P11, rx619_cstack[$I19]
  rx619_cstack_done1783:
    pop rx619_rep, rx619_bstack
    pop rx619_pos, rx619_bstack
    pop $I19, rx619_bstack
    lt rx619_pos, -1, rx619_done1778
    lt rx619_pos, 0, rx619_fail1780
    eq $I19, 0, rx619_fail1780
    nqp_islist $I20, rx619_cstack
    unless $I20, rx619_jump1781
    elements $I18, rx619_bstack
    le $I18, 0, rx619_cut1782
    dec $I18
    set $I18, rx619_bstack[$I18]
  rx619_cut1782:
    assign rx619_cstack, $I18
  rx619_jump1781:
    jump $I19
  rx619_done1778:
    rx619_cur."!cursor_fail"()
    .return (rx619_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_119_1347719921.536_caps" :subid("cuid_memo_169_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["method_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_119_1347719921.536_nfa" :subid("cuid_memo_170_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 116
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 104
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 111
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 100
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "method_def"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_120_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1012
    .param pmc _lex_param_0 
    .lex "$*RETURN_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx623_tgt
    .local int rx623_pos
    .local int rx623_off
    .local int rx623_eos
    .local int rx623_rep
    .local pmc rx623_cur
    .local pmc rx623_curclass
    .local pmc rx623_bstack
    .local pmc rx623_cstack
    (rx623_cur, rx623_tgt, rx623_pos, rx623_curclass, rx623_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx623_cur
    length rx623_eos, rx623_tgt
    eq $I19, 1, rx623_restart1792
    gt rx623_pos, rx623_eos, rx623_fail1793
    repr_get_attr_int $I11, self, rx623_curclass, "$!from"
    ne $I11, -1, rxscan624_done1799
    goto rxscan624_scan1798
  rxscan624_loop1797:
    inc rx623_pos
    gt rx623_pos, rx623_eos, rx623_fail1793
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!from", rx623_pos
  rxscan624_scan1798:
    nqp_rxmark rx623_bstack, rxscan624_loop1797, rx623_pos, 0
  rxscan624_done1799:
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."ws"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    store_lex unicode:"$\x{a2}", rx623_cur
    box $P5002, 0
    set $P101, $P5002
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."ws"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    nqp_rxmark rx623_bstack, rxquantr627_done1803, rx623_pos, 0
  rxquantr627_loop1802:
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."ws"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    nqp_rxmark rx623_bstack, rxcap629_fail1806, rx623_pos, 0
    nqp_rxmark rx623_bstack, rxquantr630_done1808, rx623_pos, 0
  rxquantr630_loop1807:
    add $I11, rx623_pos, 1
    gt $I11, rx623_eos, rx623_fail1793
    substr $S10, rx623_tgt, rx623_pos, 1
    ne $S10, ucs4:"&", rx623_fail1793
    add rx623_pos, 1
    nqp_rxpeek $I19, rx623_bstack, rxquantr630_done1808
    inc $I19
    inc $I19
    set rx623_rep, rx623_bstack[$I19]
    nqp_rxcommit rx623_bstack, rxquantr630_done1808
    inc rx623_rep
  rxquantr630_done1808:
    nqp_rxpeek $I19, rx623_bstack, rxcap629_fail1806
    inc $I19
    set $I11, rx623_bstack[$I19]
    $P11 = rx623_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx623_pos)
    rx623_cstack = rx623_cur."!cursor_capture"($P11, "sigil")
    goto rxcap629_done1805
  rxcap629_fail1806:
    goto rx623_fail1793
  rxcap629_done1805:
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    nqp_rxmark rx623_bstack, rxsubrule631_pass1809, -1, 0
  rxsubrule631_pass1809:
    rx623_cstack = rx623_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."ws"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    nqp_rxpeek $I19, rx623_bstack, rxquantr627_done1803
    inc $I19
    inc $I19
    set rx623_rep, rx623_bstack[$I19]
    nqp_rxcommit rx623_bstack, rxquantr627_done1803
    inc rx623_rep
  rxquantr627_done1803:
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."ws"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."ws"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
  alt636_01815:
    nqp_rxmark rx623_bstack, alt636_11821, rx623_pos, 0
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."ws"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    add $I11, rx623_pos, 1
    gt $I11, rx623_eos, rx623_fail1793
    substr $S10, rx623_tgt, rx623_pos, 1
    ne $S10, ucs4:"(", rx623_fail1793
    add rx623_pos, 1
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."ws"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."signature"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    nqp_rxmark rx623_bstack, rxsubrule639_pass1818, -1, 0
  rxsubrule639_pass1818:
    rx623_cstack = rx623_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."ws"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    add $I11, rx623_pos, 1
    gt $I11, rx623_eos, rx623_fail1793
    substr $S10, rx623_tgt, rx623_pos, 1
    ne $S10, ucs4:")", rx623_fail1793
    add rx623_pos, 1
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."ws"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    goto alt636_end1814
  alt636_11821:
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."ws"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."ws"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
  alt636_end1814:
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."ws"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    nqp_rxmark rx623_bstack, rxquantr646_done1827, rx623_pos, 0
  rxquantr646_loop1826:
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."trait"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    goto rxsubrule647_pass1828
  rxsubrule647_back1829:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
  rxsubrule647_pass1828:
    rx623_cstack = rx623_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule647_back1829
    push rx623_bstack, $I11
    push rx623_bstack, 0
    push rx623_bstack, rx623_pos
    elements $I11, rx623_cstack
    push rx623_bstack, $I11
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    nqp_rxpeek $I19, rx623_bstack, rxquantr646_done1827
    inc $I19
    inc $I19
    set rx623_rep, rx623_bstack[$I19]
    nqp_rxcommit rx623_bstack, rxquantr646_done1827
    inc rx623_rep
    nqp_rxmark rx623_bstack, rxquantr646_done1827, rx623_pos, rx623_rep
    goto rxquantr646_loop1826
  rxquantr646_done1827:
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."ws"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt649_01832
    nqp_push_label $P11, alt649_11836
    nqp_rxmark rx623_bstack, alt649_end1831, -1, 0
    rx623_cur."!alt"(rx623_pos, "alt_nfa__23_1347719923.519", $P11)
    goto rx623_fail1793
  alt649_01832:
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."ws"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    nqp_rxmark rx623_bstack, rxsubrule651_pass1834, -1, 0
  rxsubrule651_pass1834:
    rx623_cstack = rx623_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."ws"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    goto alt649_end1831
  alt649_11836:
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."ws"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    nqp_rxmark rx623_bstack, rxsubrule654_pass1838, -1, 0
  rxsubrule654_pass1838:
    rx623_cstack = rx623_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."ws"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    goto alt649_end1831
  alt649_end1831:
    nqp_rxcommit rx623_bstack, alt649_end1831
    repr_bind_attr_int rx623_cur, rx623_curclass, "$!pos", rx623_pos
    $P11 = rx623_cur."ws"()
    repr_get_attr_int $I11, $P11, rx623_curclass, "$!pos"
    lt $I11, 0, rx623_fail1793
    repr_get_attr_int rx623_pos, $P11, rx623_curclass, "$!pos"
    rx623_cur."!cursor_pass"(rx623_pos, "routine_def", 'backtrack'=>1)
    .return (rx623_cur)
  rx623_restart1792:
    repr_get_attr_obj rx623_cstack, rx623_cur, rx623_curclass, "$!cstack"
  rx623_fail1793:
    unless rx623_bstack, rx623_done1791
    pop $I19, rx623_bstack
    if_null rx623_cstack, rx623_cstack_done1796
    unless rx623_cstack, rx623_cstack_done1796
    dec $I19
    set $P11, rx623_cstack[$I19]
  rx623_cstack_done1796:
    pop rx623_rep, rx623_bstack
    pop rx623_pos, rx623_bstack
    pop $I19, rx623_bstack
    lt rx623_pos, -1, rx623_done1791
    lt rx623_pos, 0, rx623_fail1793
    eq $I19, 0, rx623_fail1793
    nqp_islist $I20, rx623_cstack
    unless $I20, rx623_jump1794
    elements $I18, rx623_bstack
    le $I18, 0, rx623_cut1795
    dec $I18
    set $I18, rx623_bstack[$I18]
  rx623_cut1795:
    assign rx623_cstack, $I18
  rx623_jump1794:
    jump $I19
  rx623_done1791:
    rx623_cur."!cursor_fail"()
    .return (rx623_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_120_1347719921.536_caps" :subid("cuid_memo_171_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["sigil"], $P5002
    box $P5003, 2
    set $P5001["deflongname"], $P5003
    box $P5004, 0
    set $P5001["signature"], $P5004
    box $P5005, 2
    set $P5001["trait"], $P5005
    box $P5006, 0
    set $P5001["onlystar"], $P5006
    box $P5007, 0
    set $P5001["blockoid"], $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_120_1347719921.536_alt_nfa__23_1347719923.519" :subid("cuid_memo_172_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_121_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1025
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_390_1347719921.536' 
    capture_lex $P5008 
    .lex "$*RETURN_USED", $P101 
    .lex "$*INVOCANT_OK", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx657_tgt
    .local int rx657_pos
    .local int rx657_off
    .local int rx657_eos
    .local int rx657_rep
    .local pmc rx657_cur
    .local pmc rx657_curclass
    .local pmc rx657_bstack
    .local pmc rx657_cstack
    (rx657_cur, rx657_tgt, rx657_pos, rx657_curclass, rx657_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx657_cur
    length rx657_eos, rx657_tgt
    eq $I19, 1, rx657_restart1843
    gt rx657_pos, rx657_eos, rx657_fail1844
    repr_get_attr_int $I11, self, rx657_curclass, "$!from"
    ne $I11, -1, rxscan658_done1850
    goto rxscan658_scan1849
  rxscan658_loop1848:
    inc rx657_pos
    gt rx657_pos, rx657_eos, rx657_fail1844
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!from", rx657_pos
  rxscan658_scan1849:
    nqp_rxmark rx657_bstack, rxscan658_loop1848, rx657_pos, 0
  rxscan658_done1850:
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."ws"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    store_lex unicode:"$\x{a2}", rx657_cur
    box $P5003, 0
    set $P101, $P5003
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."ws"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    store_lex unicode:"$\x{a2}", rx657_cur
    box $P5004, 1
    set $P102, $P5004
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."ws"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    nqp_rxmark rx657_bstack, rxcap662_fail1855, rx657_pos, 0
    nqp_rxmark rx657_bstack, rxquantr663_done1857, rx657_pos, 0
  rxquantr663_loop1856:
    add $I11, rx657_pos, 1
    gt $I11, rx657_eos, rx657_fail1844
    substr $S10, rx657_tgt, rx657_pos, 1
    ne $S10, ucs4:"!", rx657_fail1844
    add rx657_pos, 1
    nqp_rxpeek $I19, rx657_bstack, rxquantr663_done1857
    inc $I19
    inc $I19
    set rx657_rep, rx657_bstack[$I19]
    nqp_rxcommit rx657_bstack, rxquantr663_done1857
    inc rx657_rep
  rxquantr663_done1857:
    nqp_rxpeek $I19, rx657_bstack, rxcap662_fail1855
    inc $I19
    set $I11, rx657_bstack[$I19]
    $P11 = rx657_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx657_pos)
    rx657_cstack = rx657_cur."!cursor_capture"($P11, "private")
    goto rxcap662_done1854
  rxcap662_fail1855:
    goto rx657_fail1844
  rxcap662_done1854:
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."ws"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    nqp_rxmark rx657_bstack, rxquantr665_done1860, rx657_pos, 0
  rxquantr665_loop1859:
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    goto rxsubrule666_pass1861
  rxsubrule666_back1862:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
  rxsubrule666_pass1861:
    rx657_cstack = rx657_cur."!cursor_capture"($P11, "deflongname")
    set_addr $I11, rxsubrule666_back1862
    push rx657_bstack, $I11
    push rx657_bstack, 0
    push rx657_bstack, rx657_pos
    elements $I11, rx657_cstack
    push rx657_bstack, $I11
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    nqp_rxpeek $I19, rx657_bstack, rxquantr665_done1860
    inc $I19
    inc $I19
    set rx657_rep, rx657_bstack[$I19]
    nqp_rxcommit rx657_bstack, rxquantr665_done1860
    inc rx657_rep
  rxquantr665_done1860:
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."ws"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."ws"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
  alt670_01867:
    nqp_rxmark rx657_bstack, alt670_11873, rx657_pos, 0
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."ws"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    add $I11, rx657_pos, 1
    gt $I11, rx657_eos, rx657_fail1844
    substr $S10, rx657_tgt, rx657_pos, 1
    ne $S10, ucs4:"(", rx657_fail1844
    add rx657_pos, 1
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."ws"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."signature"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    nqp_rxmark rx657_bstack, rxsubrule673_pass1870, -1, 0
  rxsubrule673_pass1870:
    rx657_cstack = rx657_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."ws"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    add $I11, rx657_pos, 1
    gt $I11, rx657_eos, rx657_fail1844
    substr $S10, rx657_tgt, rx657_pos, 1
    ne $S10, ucs4:")", rx657_fail1844
    add rx657_pos, 1
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."ws"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    goto alt670_end1866
  alt670_11873:
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."ws"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."ws"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
  alt670_end1866:
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."ws"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    store_lex unicode:"$\x{a2}", rx657_cur
    $P5005 = $P103."MATCH"()
    set $P104, $P5005
    .const 'Sub' $P5006 = 'cuid_390_1347719921.536' 
    capture_lex $P5006
    $P5007 = $P5006()
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."ws"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    nqp_rxmark rx657_bstack, rxquantr681_done1880, rx657_pos, 0
  rxquantr681_loop1879:
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."trait"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    goto rxsubrule682_pass1881
  rxsubrule682_back1882:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
  rxsubrule682_pass1881:
    rx657_cstack = rx657_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule682_back1882
    push rx657_bstack, $I11
    push rx657_bstack, 0
    push rx657_bstack, rx657_pos
    elements $I11, rx657_cstack
    push rx657_bstack, $I11
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    nqp_rxpeek $I19, rx657_bstack, rxquantr681_done1880
    inc $I19
    inc $I19
    set rx657_rep, rx657_bstack[$I19]
    nqp_rxcommit rx657_bstack, rxquantr681_done1880
    inc rx657_rep
    nqp_rxmark rx657_bstack, rxquantr681_done1880, rx657_pos, rx657_rep
    goto rxquantr681_loop1879
  rxquantr681_done1880:
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."ws"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt684_01885
    nqp_push_label $P11, alt684_11889
    nqp_rxmark rx657_bstack, alt684_end1884, -1, 0
    rx657_cur."!alt"(rx657_pos, "alt_nfa__24_1347719923.651", $P11)
    goto rx657_fail1844
  alt684_01885:
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."ws"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    nqp_rxmark rx657_bstack, rxsubrule686_pass1887, -1, 0
  rxsubrule686_pass1887:
    rx657_cstack = rx657_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."ws"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    goto alt684_end1884
  alt684_11889:
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."ws"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    nqp_rxmark rx657_bstack, rxsubrule689_pass1891, -1, 0
  rxsubrule689_pass1891:
    rx657_cstack = rx657_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."ws"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    goto alt684_end1884
  alt684_end1884:
    nqp_rxcommit rx657_bstack, alt684_end1884
    repr_bind_attr_int rx657_cur, rx657_curclass, "$!pos", rx657_pos
    $P11 = rx657_cur."ws"()
    repr_get_attr_int $I11, $P11, rx657_curclass, "$!pos"
    lt $I11, 0, rx657_fail1844
    repr_get_attr_int rx657_pos, $P11, rx657_curclass, "$!pos"
    rx657_cur."!cursor_pass"(rx657_pos, "method_def", 'backtrack'=>1)
    .return (rx657_cur)
  rx657_restart1843:
    repr_get_attr_obj rx657_cstack, rx657_cur, rx657_curclass, "$!cstack"
  rx657_fail1844:
    unless rx657_bstack, rx657_done1842
    pop $I19, rx657_bstack
    if_null rx657_cstack, rx657_cstack_done1847
    unless rx657_cstack, rx657_cstack_done1847
    dec $I19
    set $P11, rx657_cstack[$I19]
  rx657_cstack_done1847:
    pop rx657_rep, rx657_bstack
    pop rx657_pos, rx657_bstack
    pop $I19, rx657_bstack
    lt rx657_pos, -1, rx657_done1842
    lt rx657_pos, 0, rx657_fail1844
    eq $I19, 0, rx657_fail1844
    nqp_islist $I20, rx657_cstack
    unless $I20, rx657_jump1845
    elements $I18, rx657_bstack
    le $I18, 0, rx657_cut1846
    dec $I18
    set $I18, rx657_bstack[$I18]
  rx657_cut1846:
    assign rx657_cstack, $I18
  rx657_jump1845:
    jump $I19
  rx657_done1842:
    rx657_cur."!cursor_fail"()
    .return (rx657_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_121_1347719921.536_caps" :subid("cuid_memo_173_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["private"], $P5002
    box $P5003, 2
    set $P5001["deflongname"], $P5003
    box $P5004, 0
    set $P5001["signature"], $P5004
    box $P5005, 2
    set $P5001["trait"], $P5005
    box $P5006, 0
    set $P5001["onlystar"], $P5006
    box $P5007, 0
    set $P5001["blockoid"], $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_121_1347719921.536_alt_nfa__24_1347719923.651" :subid("cuid_memo_174_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_390_1347719921.536") :anon :lex :outer("cuid_121_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1033

    box $P5001, 0
    store_dynamic_lex "$*INVOCANT_OK", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "onlystar" :subid("cuid_122_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1041
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_391_1347719921.536' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx692_tgt
    .local int rx692_pos
    .local int rx692_off
    .local int rx692_eos
    .local int rx692_rep
    .local pmc rx692_cur
    .local pmc rx692_curclass
    .local pmc rx692_bstack
    .local pmc rx692_cstack
    (rx692_cur, rx692_tgt, rx692_pos, rx692_curclass, rx692_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx692_cur
    length rx692_eos, rx692_tgt
    eq $I19, 1, rx692_restart1896
    gt rx692_pos, rx692_eos, rx692_fail1897
    repr_get_attr_int $I11, self, rx692_curclass, "$!from"
    ne $I11, -1, rxscan693_done1903
    goto rxscan693_scan1902
  rxscan693_loop1901:
    inc rx692_pos
    gt rx692_pos, rx692_eos, rx692_fail1897
    repr_bind_attr_int rx692_cur, rx692_curclass, "$!from", rx692_pos
  rxscan693_scan1902:
    nqp_rxmark rx692_bstack, rxscan693_loop1901, rx692_pos, 0
  rxscan693_done1903:
    repr_bind_attr_int rx692_cur, rx692_curclass, "$!pos", rx692_pos
    store_lex unicode:"$\x{a2}", rx692_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_391_1347719921.536' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx692_fail1897
    add $I11, rx692_pos, 1
    gt $I11, rx692_eos, rx692_fail1897
    substr $S10, rx692_tgt, rx692_pos, 1
    ne $S10, ucs4:"{", rx692_fail1897
    add rx692_pos, 1
    repr_bind_attr_int rx692_cur, rx692_curclass, "$!pos", rx692_pos
    $P11 = rx692_cur."ws"()
    repr_get_attr_int $I11, $P11, rx692_curclass, "$!pos"
    lt $I11, 0, rx692_fail1897
    repr_get_attr_int rx692_pos, $P11, rx692_curclass, "$!pos"
    add $I11, rx692_pos, 1
    gt $I11, rx692_eos, rx692_fail1897
    substr $S10, rx692_tgt, rx692_pos, 1
    ne $S10, ucs4:"*", rx692_fail1897
    add rx692_pos, 1
    repr_bind_attr_int rx692_cur, rx692_curclass, "$!pos", rx692_pos
    $P11 = rx692_cur."ws"()
    repr_get_attr_int $I11, $P11, rx692_curclass, "$!pos"
    lt $I11, 0, rx692_fail1897
    repr_get_attr_int rx692_pos, $P11, rx692_curclass, "$!pos"
    add $I11, rx692_pos, 1
    gt $I11, rx692_eos, rx692_fail1897
    substr $S10, rx692_tgt, rx692_pos, 1
    ne $S10, ucs4:"}", rx692_fail1897
    add rx692_pos, 1
    repr_bind_attr_int rx692_cur, rx692_curclass, "$!pos", rx692_pos
    $P11 = rx692_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx692_curclass, "$!pos"
    lt $I11, 0, rx692_fail1897
    repr_bind_attr_int rx692_cur, rx692_curclass, "$!pos", rx692_pos
    $P11 = rx692_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx692_curclass, "$!pos"
    lt $I11, 0, rx692_fail1897
    repr_get_attr_int rx692_pos, $P11, rx692_curclass, "$!pos"
    rx692_cur."!cursor_pass"(rx692_pos, "onlystar", 'backtrack'=>1)
    .return (rx692_cur)
  rx692_restart1896:
    repr_get_attr_obj rx692_cstack, rx692_cur, rx692_curclass, "$!cstack"
  rx692_fail1897:
    unless rx692_bstack, rx692_done1895
    pop $I19, rx692_bstack
    if_null rx692_cstack, rx692_cstack_done1900
    unless rx692_cstack, rx692_cstack_done1900
    dec $I19
    set $P11, rx692_cstack[$I19]
  rx692_cstack_done1900:
    pop rx692_rep, rx692_bstack
    pop rx692_pos, rx692_bstack
    pop $I19, rx692_bstack
    lt rx692_pos, -1, rx692_done1895
    lt rx692_pos, 0, rx692_fail1897
    eq $I19, 0, rx692_fail1897
    nqp_islist $I20, rx692_cstack
    unless $I20, rx692_jump1898
    elements $I18, rx692_bstack
    le $I18, 0, rx692_cut1899
    dec $I18
    set $I18, rx692_bstack[$I18]
  rx692_cut1899:
    assign rx692_cstack, $I18
  rx692_jump1898:
    jump $I19
  rx692_done1895:
    rx692_cur."!cursor_fail"()
    .return (rx692_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_122_1347719921.536_caps" :subid("cuid_memo_175_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_122_1347719921.536_nfa" :subid("cuid_memo_176_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 123
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "ws"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 42
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "ws"
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 125
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "ENDSTMT"
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_391_1347719921.536") :anon :lex :outer("cuid_122_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1042

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback1904
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback1905
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5005
  fallback1905:
    unless_null $P5002, vivi_6941906
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_6941906:
    set $P5001, $P5002
  fallback1904:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator" :subid("cuid_123_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1048
    .param pmc self 
    $P5001 = self."!protoregex"("multi_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_124_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1049
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx698_tgt
    .local int rx698_pos
    .local int rx698_off
    .local int rx698_eos
    .local int rx698_rep
    .local pmc rx698_cur
    .local pmc rx698_curclass
    .local pmc rx698_bstack
    .local pmc rx698_cstack
    (rx698_cur, rx698_tgt, rx698_pos, rx698_curclass, rx698_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx698_cur
    length rx698_eos, rx698_tgt
    eq $I19, 1, rx698_restart1912
    gt rx698_pos, rx698_eos, rx698_fail1913
    repr_get_attr_int $I11, self, rx698_curclass, "$!from"
    ne $I11, -1, rxscan699_done1919
    goto rxscan699_scan1918
  rxscan699_loop1917:
    inc rx698_pos
    gt rx698_pos, rx698_eos, rx698_fail1913
    repr_bind_attr_int rx698_cur, rx698_curclass, "$!from", rx698_pos
  rxscan699_scan1918:
    nqp_rxmark rx698_bstack, rxscan699_loop1917, rx698_pos, 0
  rxscan699_done1919:
    repr_bind_attr_int rx698_cur, rx698_curclass, "$!pos", rx698_pos
    store_lex unicode:"$\x{a2}", rx698_cur
    box $P5002, "multi"
    set $P101, $P5002
    nqp_rxmark rx698_bstack, rxcap700_fail1921, rx698_pos, 0
    add $I11, rx698_pos, 5
    gt $I11, rx698_eos, rx698_fail1913
    substr $S10, rx698_tgt, rx698_pos, 5
    ne $S10, ucs4:"multi", rx698_fail1913
    add rx698_pos, 5
    nqp_rxpeek $I19, rx698_bstack, rxcap700_fail1921
    inc $I19
    set $I11, rx698_bstack[$I19]
    $P11 = rx698_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx698_pos)
    rx698_cstack = rx698_cur."!cursor_capture"($P11, "sym")
    goto rxcap700_done1920
  rxcap700_fail1921:
    goto rx698_fail1913
  rxcap700_done1920:
    repr_bind_attr_int rx698_cur, rx698_curclass, "$!pos", rx698_pos
    $P11 = rx698_cur."ws"()
    repr_get_attr_int $I11, $P11, rx698_curclass, "$!pos"
    lt $I11, 0, rx698_fail1913
    repr_get_attr_int rx698_pos, $P11, rx698_curclass, "$!pos"
  alt702_01924:
    nqp_rxmark rx698_bstack, alt702_11926, rx698_pos, 0
    repr_bind_attr_int rx698_cur, rx698_curclass, "$!pos", rx698_pos
    $P11 = rx698_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx698_curclass, "$!pos"
    lt $I11, 0, rx698_fail1913
    nqp_rxmark rx698_bstack, rxsubrule703_pass1925, -1, 0
  rxsubrule703_pass1925:
    rx698_cstack = rx698_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx698_pos, $P11, rx698_curclass, "$!pos"
    goto alt702_end1923
  alt702_11926:
    nqp_rxmark rx698_bstack, alt702_21928, rx698_pos, 0
    repr_bind_attr_int rx698_cur, rx698_curclass, "$!pos", rx698_pos
    $P11 = rx698_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx698_curclass, "$!pos"
    lt $I11, 0, rx698_fail1913
    nqp_rxmark rx698_bstack, rxsubrule704_pass1927, -1, 0
  rxsubrule704_pass1927:
    rx698_cstack = rx698_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx698_pos, $P11, rx698_curclass, "$!pos"
    goto alt702_end1923
  alt702_21928:
    repr_bind_attr_int rx698_cur, rx698_curclass, "$!pos", rx698_pos
    $P11 = rx698_cur."panic"("Malformed multi")
    repr_get_attr_int $I11, $P11, rx698_curclass, "$!pos"
    lt $I11, 0, rx698_fail1913
    repr_get_attr_int rx698_pos, $P11, rx698_curclass, "$!pos"
  alt702_end1923:
    rx698_cur."!cursor_pass"(rx698_pos, "multi_declarator:sym<multi>", 'backtrack'=>1)
    .return (rx698_cur)
  rx698_restart1912:
    repr_get_attr_obj rx698_cstack, rx698_cur, rx698_curclass, "$!cstack"
  rx698_fail1913:
    unless rx698_bstack, rx698_done1911
    pop $I19, rx698_bstack
    if_null rx698_cstack, rx698_cstack_done1916
    unless rx698_cstack, rx698_cstack_done1916
    dec $I19
    set $P11, rx698_cstack[$I19]
  rx698_cstack_done1916:
    pop rx698_rep, rx698_bstack
    pop rx698_pos, rx698_bstack
    pop $I19, rx698_bstack
    lt rx698_pos, -1, rx698_done1911
    lt rx698_pos, 0, rx698_fail1913
    eq $I19, 0, rx698_fail1913
    nqp_islist $I20, rx698_cstack
    unless $I20, rx698_jump1914
    elements $I18, rx698_bstack
    le $I18, 0, rx698_cut1915
    dec $I18
    set $I18, rx698_bstack[$I18]
  rx698_cut1915:
    assign rx698_cstack, $I18
  rx698_jump1914:
    jump $I19
  rx698_done1911:
    rx698_cur."!cursor_fail"()
    .return (rx698_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_124_1347719921.536_caps" :subid("cuid_memo_177_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["declarator"], $P5003
    box $P5004, 0
    set $P5001["routine_def"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_124_1347719921.536_nfa" :subid("cuid_memo_178_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 109
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 117
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 108
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 116
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 105
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "ws"
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_125_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1054
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx706_tgt
    .local int rx706_pos
    .local int rx706_off
    .local int rx706_eos
    .local int rx706_rep
    .local pmc rx706_cur
    .local pmc rx706_curclass
    .local pmc rx706_bstack
    .local pmc rx706_cstack
    (rx706_cur, rx706_tgt, rx706_pos, rx706_curclass, rx706_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx706_cur
    length rx706_eos, rx706_tgt
    eq $I19, 1, rx706_restart1932
    gt rx706_pos, rx706_eos, rx706_fail1933
    repr_get_attr_int $I11, self, rx706_curclass, "$!from"
    ne $I11, -1, rxscan707_done1939
    goto rxscan707_scan1938
  rxscan707_loop1937:
    inc rx706_pos
    gt rx706_pos, rx706_eos, rx706_fail1933
    repr_bind_attr_int rx706_cur, rx706_curclass, "$!from", rx706_pos
  rxscan707_scan1938:
    nqp_rxmark rx706_bstack, rxscan707_loop1937, rx706_pos, 0
  rxscan707_done1939:
    repr_bind_attr_int rx706_cur, rx706_curclass, "$!pos", rx706_pos
    store_lex unicode:"$\x{a2}", rx706_cur
    box $P5002, "proto"
    set $P101, $P5002
    nqp_rxmark rx706_bstack, rxcap708_fail1941, rx706_pos, 0
    add $I11, rx706_pos, 5
    gt $I11, rx706_eos, rx706_fail1933
    substr $S10, rx706_tgt, rx706_pos, 5
    ne $S10, ucs4:"proto", rx706_fail1933
    add rx706_pos, 5
    nqp_rxpeek $I19, rx706_bstack, rxcap708_fail1941
    inc $I19
    set $I11, rx706_bstack[$I19]
    $P11 = rx706_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx706_pos)
    rx706_cstack = rx706_cur."!cursor_capture"($P11, "sym")
    goto rxcap708_done1940
  rxcap708_fail1941:
    goto rx706_fail1933
  rxcap708_done1940:
    repr_bind_attr_int rx706_cur, rx706_curclass, "$!pos", rx706_pos
    $P11 = rx706_cur."ws"()
    repr_get_attr_int $I11, $P11, rx706_curclass, "$!pos"
    lt $I11, 0, rx706_fail1933
    repr_get_attr_int rx706_pos, $P11, rx706_curclass, "$!pos"
  alt710_01944:
    nqp_rxmark rx706_bstack, alt710_11946, rx706_pos, 0
    repr_bind_attr_int rx706_cur, rx706_curclass, "$!pos", rx706_pos
    $P11 = rx706_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx706_curclass, "$!pos"
    lt $I11, 0, rx706_fail1933
    nqp_rxmark rx706_bstack, rxsubrule711_pass1945, -1, 0
  rxsubrule711_pass1945:
    rx706_cstack = rx706_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx706_pos, $P11, rx706_curclass, "$!pos"
    goto alt710_end1943
  alt710_11946:
    nqp_rxmark rx706_bstack, alt710_21948, rx706_pos, 0
    repr_bind_attr_int rx706_cur, rx706_curclass, "$!pos", rx706_pos
    $P11 = rx706_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx706_curclass, "$!pos"
    lt $I11, 0, rx706_fail1933
    nqp_rxmark rx706_bstack, rxsubrule712_pass1947, -1, 0
  rxsubrule712_pass1947:
    rx706_cstack = rx706_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx706_pos, $P11, rx706_curclass, "$!pos"
    goto alt710_end1943
  alt710_21948:
    repr_bind_attr_int rx706_cur, rx706_curclass, "$!pos", rx706_pos
    $P11 = rx706_cur."panic"("Malformed proto")
    repr_get_attr_int $I11, $P11, rx706_curclass, "$!pos"
    lt $I11, 0, rx706_fail1933
    repr_get_attr_int rx706_pos, $P11, rx706_curclass, "$!pos"
  alt710_end1943:
    rx706_cur."!cursor_pass"(rx706_pos, "multi_declarator:sym<proto>", 'backtrack'=>1)
    .return (rx706_cur)
  rx706_restart1932:
    repr_get_attr_obj rx706_cstack, rx706_cur, rx706_curclass, "$!cstack"
  rx706_fail1933:
    unless rx706_bstack, rx706_done1931
    pop $I19, rx706_bstack
    if_null rx706_cstack, rx706_cstack_done1936
    unless rx706_cstack, rx706_cstack_done1936
    dec $I19
    set $P11, rx706_cstack[$I19]
  rx706_cstack_done1936:
    pop rx706_rep, rx706_bstack
    pop rx706_pos, rx706_bstack
    pop $I19, rx706_bstack
    lt rx706_pos, -1, rx706_done1931
    lt rx706_pos, 0, rx706_fail1933
    eq $I19, 0, rx706_fail1933
    nqp_islist $I20, rx706_cstack
    unless $I20, rx706_jump1934
    elements $I18, rx706_bstack
    le $I18, 0, rx706_cut1935
    dec $I18
    set $I18, rx706_bstack[$I18]
  rx706_cut1935:
    assign rx706_cstack, $I18
  rx706_jump1934:
    jump $I19
  rx706_done1931:
    rx706_cur."!cursor_fail"()
    .return (rx706_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_125_1347719921.536_caps" :subid("cuid_memo_179_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["declarator"], $P5003
    box $P5004, 0
    set $P5001["routine_def"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_125_1347719921.536_nfa" :subid("cuid_memo_180_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 112
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 111
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 116
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 111
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "ws"
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_126_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1059
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx714_tgt
    .local int rx714_pos
    .local int rx714_off
    .local int rx714_eos
    .local int rx714_rep
    .local pmc rx714_cur
    .local pmc rx714_curclass
    .local pmc rx714_bstack
    .local pmc rx714_cstack
    (rx714_cur, rx714_tgt, rx714_pos, rx714_curclass, rx714_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx714_cur
    length rx714_eos, rx714_tgt
    eq $I19, 1, rx714_restart1952
    gt rx714_pos, rx714_eos, rx714_fail1953
    repr_get_attr_int $I11, self, rx714_curclass, "$!from"
    ne $I11, -1, rxscan715_done1959
    goto rxscan715_scan1958
  rxscan715_loop1957:
    inc rx714_pos
    gt rx714_pos, rx714_eos, rx714_fail1953
    repr_bind_attr_int rx714_cur, rx714_curclass, "$!from", rx714_pos
  rxscan715_scan1958:
    nqp_rxmark rx714_bstack, rxscan715_loop1957, rx714_pos, 0
  rxscan715_done1959:
    repr_bind_attr_int rx714_cur, rx714_curclass, "$!pos", rx714_pos
    store_lex unicode:"$\x{a2}", rx714_cur
    box $P5002, ""
    set $P101, $P5002
    repr_bind_attr_int rx714_cur, rx714_curclass, "$!pos", rx714_pos
    $P11 = rx714_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx714_curclass, "$!pos"
    lt $I11, 0, rx714_fail1953
    nqp_rxmark rx714_bstack, rxsubrule716_pass1960, -1, 0
  rxsubrule716_pass1960:
    rx714_cstack = rx714_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx714_pos, $P11, rx714_curclass, "$!pos"
    rx714_cur."!cursor_pass"(rx714_pos, "multi_declarator:sym<null>", 'backtrack'=>1)
    .return (rx714_cur)
  rx714_restart1952:
    repr_get_attr_obj rx714_cstack, rx714_cur, rx714_curclass, "$!cstack"
  rx714_fail1953:
    unless rx714_bstack, rx714_done1951
    pop $I19, rx714_bstack
    if_null rx714_cstack, rx714_cstack_done1956
    unless rx714_cstack, rx714_cstack_done1956
    dec $I19
    set $P11, rx714_cstack[$I19]
  rx714_cstack_done1956:
    pop rx714_rep, rx714_bstack
    pop rx714_pos, rx714_bstack
    pop $I19, rx714_bstack
    lt rx714_pos, -1, rx714_done1951
    lt rx714_pos, 0, rx714_fail1953
    eq $I19, 0, rx714_fail1953
    nqp_islist $I20, rx714_cstack
    unless $I20, rx714_jump1954
    elements $I18, rx714_bstack
    le $I18, 0, rx714_cut1955
    dec $I18
    set $I18, rx714_bstack[$I18]
  rx714_cut1955:
    assign rx714_cstack, $I18
  rx714_jump1954:
    jump $I19
  rx714_done1951:
    rx714_cur."!cursor_fail"()
    .return (rx714_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_126_1347719921.536_caps" :subid("cuid_memo_181_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_126_1347719921.536_nfa" :subid("cuid_memo_182_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "declarator"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_128_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1064
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_392_1347719921.536' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_127_1347719921.536' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx717_tgt
    .local int rx717_pos
    .local int rx717_off
    .local int rx717_eos
    .local int rx717_rep
    .local pmc rx717_cur
    .local pmc rx717_curclass
    .local pmc rx717_bstack
    .local pmc rx717_cstack
    (rx717_cur, rx717_tgt, rx717_pos, rx717_curclass, rx717_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx717_cur
    length rx717_eos, rx717_tgt
    eq $I19, 1, rx717_restart1963
    gt rx717_pos, rx717_eos, rx717_fail1964
    repr_get_attr_int $I11, self, rx717_curclass, "$!from"
    ne $I11, -1, rxscan718_done1970
    goto rxscan718_scan1969
  rxscan718_loop1968:
    inc rx717_pos
    gt rx717_pos, rx717_eos, rx717_fail1964
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!from", rx717_pos
  rxscan718_scan1969:
    nqp_rxmark rx717_bstack, rxscan718_loop1968, rx717_pos, 0
  rxscan718_done1970:
    nqp_rxmark rx717_bstack, rxquantr719_done1972, rx717_pos, 0
  rxquantr719_loop1971:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    store_lex unicode:"$\x{a2}", rx717_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_392_1347719921.536' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx717_fail1964
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1964
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1964
    nqp_rxmark rx717_bstack, rxsubrule722_pass1977, -1, 0
  rxsubrule722_pass1977:
    rx717_cstack = rx717_cur."!cursor_capture"($P11, "invocant")
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1964
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    add $I11, rx717_pos, 1
    gt $I11, rx717_eos, rx717_fail1964
    substr $S10, rx717_tgt, rx717_pos, 1
    ne $S10, ucs4:":", rx717_fail1964
    add rx717_pos, 1
    nqp_rxpeek $I19, rx717_bstack, rxquantr719_done1972
    inc $I19
    inc $I19
    set rx717_rep, rx717_bstack[$I19]
    nqp_rxcommit rx717_bstack, rxquantr719_done1972
    inc rx717_rep
  rxquantr719_done1972:
    nqp_rxmark rx717_bstack, rxquantr724_done1980, rx717_pos, 0
  rxquantr724_loop1979:
    nqp_rxmark rx717_bstack, rxquantr725_done1982, rx717_pos, 0
  rxquantr725_loop1981:
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1964
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1964
    nqp_rxmark rx717_bstack, rxsubrule727_pass1984, -1, 0
  rxsubrule727_pass1984:
    rx717_cstack = rx717_cur."!cursor_capture"($P11, "parameter")
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."ws"()
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1964
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt729_01987
    nqp_push_label $P11, alt729_11988
    nqp_rxmark rx717_bstack, alt729_end1986, -1, 0
    rx717_cur."!alt"(rx717_pos, "alt_nfa__26_1347719923.725", $P11)
    goto rx717_fail1964
  alt729_01987:
    add $I11, rx717_pos, 1
    gt $I11, rx717_eos, rx717_fail1964
    substr $S10, rx717_tgt, rx717_pos, 1
    ne $S10, ucs4:",", rx717_fail1964
    add rx717_pos, 1
    goto alt729_end1986
  alt729_11988:
    .const 'Sub' $P5004 = 'cuid_127_1347719921.536' 
    capture_lex $P5004
    repr_bind_attr_int rx717_cur, rx717_curclass, "$!pos", rx717_pos
    $P11 = rx717_cur."before"($P5004)
    repr_get_attr_int $I11, $P11, rx717_curclass, "$!pos"
    lt $I11, 0, rx717_fail1964
    nqp_rxmark rx717_bstack, rxsubrule734_pass2004, -1, 0
  rxsubrule734_pass2004:
    rx717_cstack = rx717_cur."!cursor_capture"($P11, "before")
    repr_get_attr_int rx717_pos, $P11, rx717_curclass, "$!pos"
    goto alt729_end1986
  alt729_end1986:
    nqp_rxcommit rx717_bstack, alt729_end1986
    nqp_rxpeek $I19, rx717_bstack, rxquantr725_done1982
    inc $I19
    inc $I19
    set rx717_rep, rx717_bstack[$I19]
    nqp_rxcommit rx717_bstack, rxquantr725_done1982
    inc rx717_rep
    nqp_rxmark rx717_bstack, rxquantr725_done1982, rx717_pos, rx717_rep
    goto rxquantr725_loop1981
  rxquantr725_done1982:
    nqp_rxpeek $I19, rx717_bstack, rxquantr724_done1980
    inc $I19
    inc $I19
    set rx717_rep, rx717_bstack[$I19]
    nqp_rxcommit rx717_bstack, rxquantr724_done1980
    inc rx717_rep
  rxquantr724_done1980:
    rx717_cur."!cursor_pass"(rx717_pos, "signature", 'backtrack'=>1)
    .return (rx717_cur)
  rx717_restart1963:
    repr_get_attr_obj rx717_cstack, rx717_cur, rx717_curclass, "$!cstack"
  rx717_fail1964:
    unless rx717_bstack, rx717_done1962
    pop $I19, rx717_bstack
    if_null rx717_cstack, rx717_cstack_done1967
    unless rx717_cstack, rx717_cstack_done1967
    dec $I19
    set $P11, rx717_cstack[$I19]
  rx717_cstack_done1967:
    pop rx717_rep, rx717_bstack
    pop rx717_pos, rx717_bstack
    pop $I19, rx717_bstack
    lt rx717_pos, -1, rx717_done1962
    lt rx717_pos, 0, rx717_fail1964
    eq $I19, 0, rx717_fail1964
    nqp_islist $I20, rx717_cstack
    unless $I20, rx717_jump1965
    elements $I18, rx717_bstack
    le $I18, 0, rx717_cut1966
    dec $I18
    set $I18, rx717_bstack[$I18]
  rx717_cut1966:
    assign rx717_cstack, $I18
  rx717_jump1965:
    jump $I19
  rx717_done1962:
    rx717_cur."!cursor_fail"()
    .return (rx717_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_128_1347719921.536_caps" :subid("cuid_memo_183_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["invocant"], $P5002
    box $P5003, 2
    set $P5001["parameter"], $P5003
    box $P5004, 2
    set $P5001["before"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_128_1347719921.536_nfa" :subid("cuid_memo_184_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 6
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "ws"
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    push $P5001, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "parameter"
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 8
    push $P5018, $P5019
    box $P5020, "ws"
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    push $P5001, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 2
    push $P5022, $P5023
    box $P5024, 58
    push $P5022, $P5024
    box $P5025, 6
    push $P5022, $P5025
    push $P5001, $P5022
    new $P5026, 'ResizablePMCArray'
    box $P5027, 8
    push $P5026, $P5027
    box $P5028, "ws"
    push $P5026, $P5028
    box $P5029, 7
    push $P5026, $P5029
    box $P5030, 1
    push $P5026, $P5030
    box $P5031, 0
    push $P5026, $P5031
    box $P5032, 0
    push $P5026, $P5032
    box $P5033, 1
    push $P5026, $P5033
    box $P5034, 0
    push $P5026, $P5034
    box $P5035, 0
    push $P5026, $P5035
    push $P5001, $P5026
    new $P5036, 'ResizablePMCArray'
    box $P5037, 8
    push $P5036, $P5037
    box $P5038, "parameter"
    push $P5036, $P5038
    box $P5039, 8
    push $P5036, $P5039
    push $P5001, $P5036
    new $P5040, 'ResizablePMCArray'
    box $P5041, 8
    push $P5040, $P5041
    box $P5042, "ws"
    push $P5040, $P5042
    box $P5043, 9
    push $P5040, $P5043
    push $P5001, $P5040
    new $P5044, 'ResizablePMCArray'
    box $P5045, 2
    push $P5044, $P5045
    box $P5046, 44
    push $P5044, $P5046
    box $P5047, 6
    push $P5044, $P5047
    box $P5048, 4
    push $P5044, $P5048
    box $P5049, 32
    push $P5044, $P5049
    box $P5050, 9
    push $P5044, $P5050
    box $P5051, 1
    push $P5044, $P5051
    box $P5052, 0
    push $P5044, $P5052
    box $P5053, 11
    push $P5044, $P5053
    push $P5001, $P5044
    new $P5054, 'ResizablePMCArray'
    box $P5055, 0
    push $P5054, $P5055
    box $P5056, 0
    push $P5054, $P5056
    box $P5057, 0
    push $P5054, $P5057
    push $P5001, $P5054
    new $P5058, 'ResizablePMCArray'
    box $P5059, 2
    push $P5058, $P5059
    box $P5060, 41
    push $P5058, $P5060
    box $P5061, 10
    push $P5058, $P5061
    box $P5062, 2
    push $P5058, $P5062
    box $P5063, 123
    push $P5058, $P5063
    box $P5064, 10
    push $P5058, $P5064
    push $P5001, $P5058
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_128_1347719921.536_alt_nfa__26_1347719923.725" :subid("cuid_memo_185_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 44
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 4
    push $P5010, $P5011
    box $P5012, 32
    push $P5010, $P5012
    box $P5013, 1
    push $P5010, $P5013
    box $P5014, 1
    push $P5010, $P5014
    box $P5015, 0
    push $P5010, $P5015
    box $P5016, 3
    push $P5010, $P5016
    push $P5008, $P5010
    new $P5017, 'ResizablePMCArray'
    box $P5018, 0
    push $P5017, $P5018
    box $P5019, 0
    push $P5017, $P5019
    box $P5020, 0
    push $P5017, $P5020
    push $P5008, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 41
    push $P5021, $P5023
    box $P5024, 2
    push $P5021, $P5024
    box $P5025, 2
    push $P5021, $P5025
    box $P5026, 123
    push $P5021, $P5026
    box $P5027, 2
    push $P5021, $P5027
    push $P5008, $P5021
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_392_1347719921.536") :anon :lex :outer("cuid_128_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1065

    find_dynamic_lex $P5001, "$*INVOCANT_OK"
    unless_null $P5001, fallback1973
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$INVOCANT_OK"]
    unless_null $P5002, fallback1974
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5005
  fallback1974:
    unless_null $P5002, vivi_7201975
    die "Contextual $*INVOCANT_OK not found"
    box $P5006, "Contextual $*INVOCANT_OK not found"
    set $P5002, $P5006
  vivi_7201975:
    set $P5001, $P5002
  fallback1973:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_127_1347719921.536") :anon :lex :outer("cuid_128_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx730_tgt
    .local int rx730_pos
    .local int rx730_off
    .local int rx730_eos
    .local int rx730_rep
    .local pmc rx730_cur
    .local pmc rx730_curclass
    .local pmc rx730_bstack
    .local pmc rx730_cstack
    (rx730_cur, rx730_tgt, rx730_pos, rx730_curclass, rx730_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx730_cur
    length rx730_eos, rx730_tgt
    eq $I19, 1, rx730_restart1991
    gt rx730_pos, rx730_eos, rx730_fail1992
    repr_get_attr_int $I11, self, rx730_curclass, "$!from"
    ne $I11, -1, rxscan731_done1998
    goto rxscan731_scan1997
  rxscan731_loop1996:
    inc rx730_pos
    gt rx730_pos, rx730_eos, rx730_fail1992
    repr_bind_attr_int rx730_cur, rx730_curclass, "$!from", rx730_pos
  rxscan731_scan1997:
    nqp_rxmark rx730_bstack, rxscan731_loop1996, rx730_pos, 0
  rxscan731_done1998:
    nqp_rxmark rx730_bstack, rxquantr732_done2000, rx730_pos, 0
  rxquantr732_loop1999:
    ge rx730_pos, rx730_eos, rx730_fail1992
    is_cclass $I11, .CCLASS_WHITESPACE, rx730_tgt, rx730_pos
    unless $I11, rx730_fail1992
    add rx730_pos, 1
    nqp_rxpeek $I19, rx730_bstack, rxquantr732_done2000
    inc $I19
    inc $I19
    set rx730_rep, rx730_bstack[$I19]
    nqp_rxcommit rx730_bstack, rxquantr732_done2000
    inc rx730_rep
    nqp_rxmark rx730_bstack, rxquantr732_done2000, rx730_pos, rx730_rep
    goto rxquantr732_loop1999
  rxquantr732_done2000:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt733_02002
    nqp_push_label $P11, alt733_12003
    nqp_rxmark rx730_bstack, alt733_end2001, -1, 0
    rx730_cur."!alt"(rx730_pos, "alt_nfa__25_1347719923.719", $P11)
    goto rx730_fail1992
  alt733_02002:
    add $I11, rx730_pos, 1
    gt $I11, rx730_eos, rx730_fail1992
    substr $S10, rx730_tgt, rx730_pos, 1
    ne $S10, ucs4:")", rx730_fail1992
    add rx730_pos, 1
    goto alt733_end2001
  alt733_12003:
    add $I11, rx730_pos, 1
    gt $I11, rx730_eos, rx730_fail1992
    substr $S10, rx730_tgt, rx730_pos, 1
    ne $S10, ucs4:"{", rx730_fail1992
    add rx730_pos, 1
    goto alt733_end2001
  alt733_end2001:
    nqp_rxcommit rx730_bstack, alt733_end2001
    rx730_cur."!cursor_pass"(rx730_pos, 'backtrack'=>1)
    .return (rx730_cur)
  rx730_restart1991:
    repr_get_attr_obj rx730_cstack, rx730_cur, rx730_curclass, "$!cstack"
  rx730_fail1992:
    unless rx730_bstack, rx730_done1990
    pop $I19, rx730_bstack
    if_null rx730_cstack, rx730_cstack_done1995
    unless rx730_cstack, rx730_cstack_done1995
    dec $I19
    set $P11, rx730_cstack[$I19]
  rx730_cstack_done1995:
    pop rx730_rep, rx730_bstack
    pop rx730_pos, rx730_bstack
    pop $I19, rx730_bstack
    lt rx730_pos, -1, rx730_done1990
    lt rx730_pos, 0, rx730_fail1992
    eq $I19, 0, rx730_fail1992
    nqp_islist $I20, rx730_cstack
    unless $I20, rx730_jump1993
    elements $I18, rx730_bstack
    le $I18, 0, rx730_cut1994
    dec $I18
    set $I18, rx730_bstack[$I18]
  rx730_cut1994:
    assign rx730_cstack, $I18
  rx730_jump1993:
    jump $I19
  rx730_done1990:
    rx730_cur."!cursor_fail"()
    .return (rx730_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_127_1347719921.536_caps" :subid("cuid_memo_186_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_127_1347719921.536_nfa" :subid("cuid_memo_187_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 4
    push $P5003, $P5004
    box $P5005, 32
    push $P5003, $P5005
    box $P5006, 1
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 41
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    box $P5014, 2
    push $P5010, $P5014
    box $P5015, 123
    push $P5010, $P5015
    box $P5016, 0
    push $P5010, $P5016
    push $P5001, $P5010
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_127_1347719921.536_alt_nfa__25_1347719923.719" :subid("cuid_memo_188_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 41
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 123
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_129_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1069
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx735_tgt
    .local int rx735_pos
    .local int rx735_off
    .local int rx735_eos
    .local int rx735_rep
    .local pmc rx735_cur
    .local pmc rx735_curclass
    .local pmc rx735_bstack
    .local pmc rx735_cstack
    (rx735_cur, rx735_tgt, rx735_pos, rx735_curclass, rx735_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx735_cur
    length rx735_eos, rx735_tgt
    eq $I19, 1, rx735_restart2007
    gt rx735_pos, rx735_eos, rx735_fail2008
    repr_get_attr_int $I11, self, rx735_curclass, "$!from"
    ne $I11, -1, rxscan736_done2014
    goto rxscan736_scan2013
  rxscan736_loop2012:
    inc rx735_pos
    gt rx735_pos, rx735_eos, rx735_fail2008
    repr_bind_attr_int rx735_cur, rx735_curclass, "$!from", rx735_pos
  rxscan736_scan2013:
    nqp_rxmark rx735_bstack, rxscan736_loop2012, rx735_pos, 0
  rxscan736_done2014:
    nqp_rxmark rx735_bstack, rxquantr737_done2016, rx735_pos, 0
  rxquantr737_loop2015:
    repr_bind_attr_int rx735_cur, rx735_curclass, "$!pos", rx735_pos
    $P11 = rx735_cur."typename"()
    repr_get_attr_int $I11, $P11, rx735_curclass, "$!pos"
    lt $I11, 0, rx735_fail2008
    nqp_rxmark rx735_bstack, rxsubrule738_pass2017, -1, 0
  rxsubrule738_pass2017:
    rx735_cstack = rx735_cur."!cursor_capture"($P11, "typename")
    repr_get_attr_int rx735_pos, $P11, rx735_curclass, "$!pos"
    nqp_rxmark rx735_bstack, rxquantr739_done2019, rx735_pos, 0
  rxquantr739_loop2018:
    add $I11, rx735_pos, 1
    gt $I11, rx735_eos, rx735_fail2008
    substr $S10, rx735_tgt, rx735_pos, 1
    ne $S10, ucs4:":", rx735_fail2008
    add rx735_pos, 1
    nqp_rxmark rx735_bstack, rxcap740_fail2021, rx735_pos, 0
    ge rx735_pos, rx735_eos, rx735_fail2008
    substr $S11, rx735_tgt, rx735_pos, 1
    index $I11, ucs4:"_DU", $S11
    lt $I11, 0, rx735_fail2008
    inc rx735_pos
    nqp_rxpeek $I19, rx735_bstack, rxcap740_fail2021
    inc $I19
    set $I11, rx735_bstack[$I19]
    $P11 = rx735_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx735_pos)
    rx735_cstack = rx735_cur."!cursor_capture"($P11, "definedness")
    goto rxcap740_done2020
  rxcap740_fail2021:
    goto rx735_fail2008
  rxcap740_done2020:
    nqp_rxpeek $I19, rx735_bstack, rxquantr739_done2019
    inc $I19
    inc $I19
    set rx735_rep, rx735_bstack[$I19]
    nqp_rxcommit rx735_bstack, rxquantr739_done2019
    inc rx735_rep
  rxquantr739_done2019:
    repr_bind_attr_int rx735_cur, rx735_curclass, "$!pos", rx735_pos
    $P11 = rx735_cur."ws"()
    repr_get_attr_int $I11, $P11, rx735_curclass, "$!pos"
    lt $I11, 0, rx735_fail2008
    repr_get_attr_int rx735_pos, $P11, rx735_curclass, "$!pos"
    nqp_rxpeek $I19, rx735_bstack, rxquantr737_done2016
    inc $I19
    inc $I19
    set rx735_rep, rx735_bstack[$I19]
    nqp_rxcommit rx735_bstack, rxquantr737_done2016
    inc rx735_rep
    nqp_rxmark rx735_bstack, rxquantr737_done2016, rx735_pos, rx735_rep
    goto rxquantr737_loop2015
  rxquantr737_done2016:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt742_02024
    nqp_push_label $P11, alt742_12028
    nqp_rxmark rx735_bstack, alt742_end2023, -1, 0
    rx735_cur."!alt"(rx735_pos, "alt_nfa__27_1347719923.749", $P11)
    goto rx735_fail2008
  alt742_02024:
    nqp_rxmark rx735_bstack, rxcap743_fail2026, rx735_pos, 0
    add $I11, rx735_pos, 1
    gt $I11, rx735_eos, rx735_fail2008
    substr $S10, rx735_tgt, rx735_pos, 1
    ne $S10, ucs4:"*", rx735_fail2008
    add rx735_pos, 1
    nqp_rxpeek $I19, rx735_bstack, rxcap743_fail2026
    inc $I19
    set $I11, rx735_bstack[$I19]
    $P11 = rx735_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx735_pos)
    rx735_cstack = rx735_cur."!cursor_capture"($P11, "quant")
    goto rxcap743_done2025
  rxcap743_fail2026:
    goto rx735_fail2008
  rxcap743_done2025:
    repr_bind_attr_int rx735_cur, rx735_curclass, "$!pos", rx735_pos
    $P11 = rx735_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx735_curclass, "$!pos"
    lt $I11, 0, rx735_fail2008
    nqp_rxmark rx735_bstack, rxsubrule744_pass2027, -1, 0
  rxsubrule744_pass2027:
    rx735_cstack = rx735_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx735_pos, $P11, rx735_curclass, "$!pos"
    goto alt742_end2023
  alt742_12028:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt745_02030
    nqp_push_label $P11, alt745_12032
    nqp_rxmark rx735_bstack, alt745_end2029, -1, 0
    rx735_cur."!alt"(rx735_pos, "alt_nfa__28_1347719923.75", $P11)
    goto rx735_fail2008
  alt745_02030:
    repr_bind_attr_int rx735_cur, rx735_curclass, "$!pos", rx735_pos
    $P11 = rx735_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx735_curclass, "$!pos"
    lt $I11, 0, rx735_fail2008
    nqp_rxmark rx735_bstack, rxsubrule746_pass2031, -1, 0
  rxsubrule746_pass2031:
    rx735_cstack = rx735_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx735_pos, $P11, rx735_curclass, "$!pos"
    goto alt745_end2029
  alt745_12032:
    repr_bind_attr_int rx735_cur, rx735_curclass, "$!pos", rx735_pos
    $P11 = rx735_cur."named_param"()
    repr_get_attr_int $I11, $P11, rx735_curclass, "$!pos"
    lt $I11, 0, rx735_fail2008
    nqp_rxmark rx735_bstack, rxsubrule747_pass2033, -1, 0
  rxsubrule747_pass2033:
    rx735_cstack = rx735_cur."!cursor_capture"($P11, "named_param")
    repr_get_attr_int rx735_pos, $P11, rx735_curclass, "$!pos"
    goto alt745_end2029
  alt745_end2029:
    nqp_rxcommit rx735_bstack, alt745_end2029
    nqp_rxmark rx735_bstack, rxcap748_fail2035, rx735_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt749_02037
    nqp_push_label $P11, alt749_12038
    nqp_push_label $P11, alt749_22039
    nqp_rxmark rx735_bstack, alt749_end2036, -1, 0
    rx735_cur."!alt"(rx735_pos, "alt_nfa__29_1347719923.75", $P11)
    goto rx735_fail2008
  alt749_02037:
    add $I11, rx735_pos, 1
    gt $I11, rx735_eos, rx735_fail2008
    substr $S10, rx735_tgt, rx735_pos, 1
    ne $S10, ucs4:"?", rx735_fail2008
    add rx735_pos, 1
    goto alt749_end2036
  alt749_12038:
    add $I11, rx735_pos, 1
    gt $I11, rx735_eos, rx735_fail2008
    substr $S10, rx735_tgt, rx735_pos, 1
    ne $S10, ucs4:"!", rx735_fail2008
    add rx735_pos, 1
    goto alt749_end2036
  alt749_22039:
    goto alt749_end2036
  alt749_end2036:
    nqp_rxcommit rx735_bstack, alt749_end2036
    nqp_rxpeek $I19, rx735_bstack, rxcap748_fail2035
    inc $I19
    set $I11, rx735_bstack[$I19]
    $P11 = rx735_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx735_pos)
    rx735_cstack = rx735_cur."!cursor_capture"($P11, "quant")
    goto rxcap748_done2034
  rxcap748_fail2035:
    goto rx735_fail2008
  rxcap748_done2034:
    goto alt742_end2023
  alt742_end2023:
    nqp_rxcommit rx735_bstack, alt742_end2023
    nqp_rxmark rx735_bstack, rxquantr751_done2042, rx735_pos, 0
  rxquantr751_loop2041:
    repr_bind_attr_int rx735_cur, rx735_curclass, "$!pos", rx735_pos
    $P11 = rx735_cur."default_value"()
    repr_get_attr_int $I11, $P11, rx735_curclass, "$!pos"
    lt $I11, 0, rx735_fail2008
    goto rxsubrule752_pass2043
  rxsubrule752_back2044:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx735_curclass, "$!pos"
    lt $I11, 0, rx735_fail2008
  rxsubrule752_pass2043:
    rx735_cstack = rx735_cur."!cursor_capture"($P11, "default_value")
    set_addr $I11, rxsubrule752_back2044
    push rx735_bstack, $I11
    push rx735_bstack, 0
    push rx735_bstack, rx735_pos
    elements $I11, rx735_cstack
    push rx735_bstack, $I11
    repr_get_attr_int rx735_pos, $P11, rx735_curclass, "$!pos"
    nqp_rxpeek $I19, rx735_bstack, rxquantr751_done2042
    inc $I19
    inc $I19
    set rx735_rep, rx735_bstack[$I19]
    nqp_rxcommit rx735_bstack, rxquantr751_done2042
    inc rx735_rep
  rxquantr751_done2042:
    rx735_cur."!cursor_pass"(rx735_pos, "parameter", 'backtrack'=>1)
    .return (rx735_cur)
  rx735_restart2007:
    repr_get_attr_obj rx735_cstack, rx735_cur, rx735_curclass, "$!cstack"
  rx735_fail2008:
    unless rx735_bstack, rx735_done2006
    pop $I19, rx735_bstack
    if_null rx735_cstack, rx735_cstack_done2011
    unless rx735_cstack, rx735_cstack_done2011
    dec $I19
    set $P11, rx735_cstack[$I19]
  rx735_cstack_done2011:
    pop rx735_rep, rx735_bstack
    pop rx735_pos, rx735_bstack
    pop $I19, rx735_bstack
    lt rx735_pos, -1, rx735_done2006
    lt rx735_pos, 0, rx735_fail2008
    eq $I19, 0, rx735_fail2008
    nqp_islist $I20, rx735_cstack
    unless $I20, rx735_jump2009
    elements $I18, rx735_bstack
    le $I18, 0, rx735_cut2010
    dec $I18
    set $I18, rx735_bstack[$I18]
  rx735_cut2010:
    assign rx735_cstack, $I18
  rx735_jump2009:
    jump $I19
  rx735_done2006:
    rx735_cur."!cursor_fail"()
    .return (rx735_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1347719921.536_caps" :subid("cuid_memo_189_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["typename"], $P5002
    box $P5003, 2
    set $P5001["definedness"], $P5003
    box $P5004, 0
    set $P5001["quant"], $P5004
    box $P5005, 0
    set $P5001["param_var"], $P5005
    box $P5006, 0
    set $P5001["named_param"], $P5006
    box $P5007, 2
    set $P5001["default_value"], $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1347719921.536_nfa" :subid("cuid_memo_190_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "typename"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 5
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 58
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    box $P5014, 1
    push $P5010, $P5014
    box $P5015, 0
    push $P5010, $P5015
    box $P5016, 4
    push $P5010, $P5016
    push $P5001, $P5010
    new $P5017, 'ResizablePMCArray'
    box $P5018, 6
    push $P5017, $P5018
    box $P5019, "_DU"
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    push $P5001, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 8
    push $P5021, $P5022
    box $P5023, "ws"
    push $P5021, $P5023
    box $P5024, 1
    push $P5021, $P5024
    push $P5001, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 2
    push $P5025, $P5026
    box $P5027, 42
    push $P5025, $P5027
    box $P5028, 6
    push $P5025, $P5028
    box $P5029, 8
    push $P5025, $P5029
    box $P5030, "param_var"
    push $P5025, $P5030
    box $P5031, 8
    push $P5025, $P5031
    box $P5032, 8
    push $P5025, $P5032
    box $P5033, "named_param"
    push $P5025, $P5033
    box $P5034, 8
    push $P5025, $P5034
    push $P5001, $P5025
    new $P5035, 'ResizablePMCArray'
    box $P5036, 8
    push $P5035, $P5036
    box $P5037, "param_var"
    push $P5035, $P5037
    box $P5038, 7
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 8
    push $P5039, $P5040
    box $P5041, "default_value"
    push $P5039, $P5041
    box $P5042, 0
    push $P5039, $P5042
    box $P5043, 1
    push $P5039, $P5043
    box $P5044, 0
    push $P5039, $P5044
    box $P5045, 0
    push $P5039, $P5045
    push $P5001, $P5039
    new $P5046, 'ResizablePMCArray'
    box $P5047, 2
    push $P5046, $P5047
    box $P5048, 63
    push $P5046, $P5048
    box $P5049, 7
    push $P5046, $P5049
    box $P5050, 2
    push $P5046, $P5050
    box $P5051, 33
    push $P5046, $P5051
    box $P5052, 7
    push $P5046, $P5052
    box $P5053, 1
    push $P5046, $P5053
    box $P5054, 0
    push $P5046, $P5054
    box $P5055, 7
    push $P5046, $P5055
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1347719921.536_alt_nfa__28_1347719923.75" :subid("cuid_memo_191_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "param_var"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "named_param"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1347719921.536_alt_nfa__29_1347719923.75" :subid("cuid_memo_192_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 63
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 33
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    new $P5014, 'ResizablePMCArray'
    new $P5015, 'ResizablePMCArray'
    push $P5014, $P5015
    new $P5016, 'ResizablePMCArray'
    box $P5017, 1
    push $P5016, $P5017
    box $P5018, 0
    push $P5016, $P5018
    box $P5019, 0
    push $P5016, $P5019
    push $P5014, $P5016
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1347719921.536_alt_nfa__27_1347719923.749" :subid("cuid_memo_193_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 42
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 8
    push $P5008, $P5009
    box $P5010, "param_var"
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "param_var"
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    box $P5018, 8
    push $P5014, $P5018
    box $P5019, "named_param"
    push $P5014, $P5019
    box $P5020, 2
    push $P5014, $P5020
    push $P5012, $P5014
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 63
    push $P5021, $P5023
    box $P5024, 0
    push $P5021, $P5024
    box $P5025, 2
    push $P5021, $P5025
    box $P5026, 33
    push $P5021, $P5026
    box $P5027, 0
    push $P5021, $P5027
    box $P5028, 1
    push $P5021, $P5028
    box $P5029, 0
    push $P5021, $P5029
    box $P5030, 0
    push $P5021, $P5030
    push $P5012, $P5021
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_130_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1078
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx753_tgt
    .local int rx753_pos
    .local int rx753_off
    .local int rx753_eos
    .local int rx753_rep
    .local pmc rx753_cur
    .local pmc rx753_curclass
    .local pmc rx753_bstack
    .local pmc rx753_cstack
    (rx753_cur, rx753_tgt, rx753_pos, rx753_curclass, rx753_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx753_cur
    length rx753_eos, rx753_tgt
    eq $I19, 1, rx753_restart2047
    gt rx753_pos, rx753_eos, rx753_fail2048
    repr_get_attr_int $I11, self, rx753_curclass, "$!from"
    ne $I11, -1, rxscan754_done2054
    goto rxscan754_scan2053
  rxscan754_loop2052:
    inc rx753_pos
    gt rx753_pos, rx753_eos, rx753_fail2048
    repr_bind_attr_int rx753_cur, rx753_curclass, "$!from", rx753_pos
  rxscan754_scan2053:
    nqp_rxmark rx753_bstack, rxscan754_loop2052, rx753_pos, 0
  rxscan754_done2054:
    repr_bind_attr_int rx753_cur, rx753_curclass, "$!pos", rx753_pos
    $P11 = rx753_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx753_curclass, "$!pos"
    lt $I11, 0, rx753_fail2048
    nqp_rxmark rx753_bstack, rxsubrule755_pass2055, -1, 0
  rxsubrule755_pass2055:
    rx753_cstack = rx753_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx753_pos, $P11, rx753_curclass, "$!pos"
    nqp_rxmark rx753_bstack, rxquantr756_done2057, rx753_pos, 0
  rxquantr756_loop2056:
    repr_bind_attr_int rx753_cur, rx753_curclass, "$!pos", rx753_pos
    $P11 = rx753_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx753_curclass, "$!pos"
    lt $I11, 0, rx753_fail2048
    goto rxsubrule757_pass2058
  rxsubrule757_back2059:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx753_curclass, "$!pos"
    lt $I11, 0, rx753_fail2048
  rxsubrule757_pass2058:
    rx753_cstack = rx753_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule757_back2059
    push rx753_bstack, $I11
    push rx753_bstack, 0
    push rx753_bstack, rx753_pos
    elements $I11, rx753_cstack
    push rx753_bstack, $I11
    repr_get_attr_int rx753_pos, $P11, rx753_curclass, "$!pos"
    nqp_rxpeek $I19, rx753_bstack, rxquantr756_done2057
    inc $I19
    inc $I19
    set rx753_rep, rx753_bstack[$I19]
    nqp_rxcommit rx753_bstack, rxquantr756_done2057
    inc rx753_rep
  rxquantr756_done2057:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt758_02061
    nqp_push_label $P11, alt758_12063
    nqp_rxmark rx753_bstack, alt758_end2060, -1, 0
    rx753_cur."!alt"(rx753_pos, "alt_nfa__30_1347719923.761", $P11)
    goto rx753_fail2048
  alt758_02061:
    repr_bind_attr_int rx753_cur, rx753_curclass, "$!pos", rx753_pos
    $P11 = rx753_cur."ident"()
    repr_get_attr_int $I11, $P11, rx753_curclass, "$!pos"
    lt $I11, 0, rx753_fail2048
    nqp_rxmark rx753_bstack, rxsubrule759_pass2062, -1, 0
  rxsubrule759_pass2062:
    rx753_cstack = rx753_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx753_pos, $P11, rx753_curclass, "$!pos"
    goto alt758_end2060
  alt758_12063:
    nqp_rxmark rx753_bstack, rxcap760_fail2065, rx753_pos, 0
    ge rx753_pos, rx753_eos, rx753_fail2048
    substr $S11, rx753_tgt, rx753_pos, 1
    index $I11, ucs4:"/!", $S11
    lt $I11, 0, rx753_fail2048
    inc rx753_pos
    nqp_rxpeek $I19, rx753_bstack, rxcap760_fail2065
    inc $I19
    set $I11, rx753_bstack[$I19]
    $P11 = rx753_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx753_pos)
    rx753_cstack = rx753_cur."!cursor_capture"($P11, "name")
    goto rxcap760_done2064
  rxcap760_fail2065:
    goto rx753_fail2048
  rxcap760_done2064:
    goto alt758_end2060
  alt758_end2060:
    nqp_rxcommit rx753_bstack, alt758_end2060
    rx753_cur."!cursor_pass"(rx753_pos, "param_var", 'backtrack'=>1)
    .return (rx753_cur)
  rx753_restart2047:
    repr_get_attr_obj rx753_cstack, rx753_cur, rx753_curclass, "$!cstack"
  rx753_fail2048:
    unless rx753_bstack, rx753_done2046
    pop $I19, rx753_bstack
    if_null rx753_cstack, rx753_cstack_done2051
    unless rx753_cstack, rx753_cstack_done2051
    dec $I19
    set $P11, rx753_cstack[$I19]
  rx753_cstack_done2051:
    pop rx753_rep, rx753_bstack
    pop rx753_pos, rx753_bstack
    pop $I19, rx753_bstack
    lt rx753_pos, -1, rx753_done2046
    lt rx753_pos, 0, rx753_fail2048
    eq $I19, 0, rx753_fail2048
    nqp_islist $I20, rx753_cstack
    unless $I20, rx753_jump2049
    elements $I18, rx753_bstack
    le $I18, 0, rx753_cut2050
    dec $I18
    set $I18, rx753_bstack[$I18]
  rx753_cut2050:
    assign rx753_cstack, $I18
  rx753_jump2049:
    jump $I19
  rx753_done2046:
    rx753_cur."!cursor_fail"()
    .return (rx753_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_130_1347719921.536_caps" :subid("cuid_memo_194_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sigil"], $P5002
    box $P5003, 2
    set $P5001["twigil"], $P5003
    box $P5004, 0
    set $P5001["name"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_130_1347719921.536_nfa" :subid("cuid_memo_195_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "sigil"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "twigil"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 3
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "ident"
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    box $P5018, 6
    push $P5014, $P5018
    box $P5019, "/!"
    push $P5014, $P5019
    box $P5020, 0
    push $P5014, $P5020
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_130_1347719921.536_alt_nfa__30_1347719923.761" :subid("cuid_memo_196_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "ident"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 6
    push $P5010, $P5011
    box $P5012, "/!"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_131_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1083
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx761_tgt
    .local int rx761_pos
    .local int rx761_off
    .local int rx761_eos
    .local int rx761_rep
    .local pmc rx761_cur
    .local pmc rx761_curclass
    .local pmc rx761_bstack
    .local pmc rx761_cstack
    (rx761_cur, rx761_tgt, rx761_pos, rx761_curclass, rx761_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx761_cur
    length rx761_eos, rx761_tgt
    eq $I19, 1, rx761_restart2068
    gt rx761_pos, rx761_eos, rx761_fail2069
    repr_get_attr_int $I11, self, rx761_curclass, "$!from"
    ne $I11, -1, rxscan762_done2075
    goto rxscan762_scan2074
  rxscan762_loop2073:
    inc rx761_pos
    gt rx761_pos, rx761_eos, rx761_fail2069
    repr_bind_attr_int rx761_cur, rx761_curclass, "$!from", rx761_pos
  rxscan762_scan2074:
    nqp_rxmark rx761_bstack, rxscan762_loop2073, rx761_pos, 0
  rxscan762_done2075:
    add $I11, rx761_pos, 1
    gt $I11, rx761_eos, rx761_fail2069
    substr $S10, rx761_tgt, rx761_pos, 1
    ne $S10, ucs4:":", rx761_fail2069
    add rx761_pos, 1
    repr_bind_attr_int rx761_cur, rx761_curclass, "$!pos", rx761_pos
    $P11 = rx761_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx761_curclass, "$!pos"
    lt $I11, 0, rx761_fail2069
    nqp_rxmark rx761_bstack, rxsubrule763_pass2076, -1, 0
  rxsubrule763_pass2076:
    rx761_cstack = rx761_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx761_pos, $P11, rx761_curclass, "$!pos"
    rx761_cur."!cursor_pass"(rx761_pos, "named_param", 'backtrack'=>1)
    .return (rx761_cur)
  rx761_restart2068:
    repr_get_attr_obj rx761_cstack, rx761_cur, rx761_curclass, "$!cstack"
  rx761_fail2069:
    unless rx761_bstack, rx761_done2067
    pop $I19, rx761_bstack
    if_null rx761_cstack, rx761_cstack_done2072
    unless rx761_cstack, rx761_cstack_done2072
    dec $I19
    set $P11, rx761_cstack[$I19]
  rx761_cstack_done2072:
    pop rx761_rep, rx761_bstack
    pop rx761_pos, rx761_bstack
    pop $I19, rx761_bstack
    lt rx761_pos, -1, rx761_done2067
    lt rx761_pos, 0, rx761_fail2069
    eq $I19, 0, rx761_fail2069
    nqp_islist $I20, rx761_cstack
    unless $I20, rx761_jump2070
    elements $I18, rx761_bstack
    le $I18, 0, rx761_cut2071
    dec $I18
    set $I18, rx761_bstack[$I18]
  rx761_cut2071:
    assign rx761_cstack, $I18
  rx761_jump2070:
    jump $I19
  rx761_done2067:
    rx761_cur."!cursor_fail"()
    .return (rx761_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_131_1347719921.536_caps" :subid("cuid_memo_197_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["param_var"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_131_1347719921.536_nfa" :subid("cuid_memo_198_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "param_var"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "default_value" :subid("cuid_132_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1087
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx764_tgt
    .local int rx764_pos
    .local int rx764_off
    .local int rx764_eos
    .local int rx764_rep
    .local pmc rx764_cur
    .local pmc rx764_curclass
    .local pmc rx764_bstack
    .local pmc rx764_cstack
    (rx764_cur, rx764_tgt, rx764_pos, rx764_curclass, rx764_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx764_cur
    length rx764_eos, rx764_tgt
    eq $I19, 1, rx764_restart2079
    gt rx764_pos, rx764_eos, rx764_fail2080
    repr_get_attr_int $I11, self, rx764_curclass, "$!from"
    ne $I11, -1, rxscan765_done2086
    goto rxscan765_scan2085
  rxscan765_loop2084:
    inc rx764_pos
    gt rx764_pos, rx764_eos, rx764_fail2080
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!from", rx764_pos
  rxscan765_scan2085:
    nqp_rxmark rx764_bstack, rxscan765_loop2084, rx764_pos, 0
  rxscan765_done2086:
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    $P11 = rx764_cur."ws"()
    repr_get_attr_int $I11, $P11, rx764_curclass, "$!pos"
    lt $I11, 0, rx764_fail2080
    repr_get_attr_int rx764_pos, $P11, rx764_curclass, "$!pos"
    add $I11, rx764_pos, 1
    gt $I11, rx764_eos, rx764_fail2080
    substr $S10, rx764_tgt, rx764_pos, 1
    ne $S10, ucs4:"=", rx764_fail2080
    add rx764_pos, 1
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    $P11 = rx764_cur."ws"()
    repr_get_attr_int $I11, $P11, rx764_curclass, "$!pos"
    lt $I11, 0, rx764_fail2080
    repr_get_attr_int rx764_pos, $P11, rx764_curclass, "$!pos"
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    $P11 = rx764_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx764_curclass, "$!pos"
    lt $I11, 0, rx764_fail2080
    nqp_rxmark rx764_bstack, rxsubrule768_pass2089, -1, 0
  rxsubrule768_pass2089:
    rx764_cstack = rx764_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx764_pos, $P11, rx764_curclass, "$!pos"
    repr_bind_attr_int rx764_cur, rx764_curclass, "$!pos", rx764_pos
    $P11 = rx764_cur."ws"()
    repr_get_attr_int $I11, $P11, rx764_curclass, "$!pos"
    lt $I11, 0, rx764_fail2080
    repr_get_attr_int rx764_pos, $P11, rx764_curclass, "$!pos"
    rx764_cur."!cursor_pass"(rx764_pos, "default_value", 'backtrack'=>1)
    .return (rx764_cur)
  rx764_restart2079:
    repr_get_attr_obj rx764_cstack, rx764_cur, rx764_curclass, "$!cstack"
  rx764_fail2080:
    unless rx764_bstack, rx764_done2078
    pop $I19, rx764_bstack
    if_null rx764_cstack, rx764_cstack_done2083
    unless rx764_cstack, rx764_cstack_done2083
    dec $I19
    set $P11, rx764_cstack[$I19]
  rx764_cstack_done2083:
    pop rx764_rep, rx764_bstack
    pop rx764_pos, rx764_bstack
    pop $I19, rx764_bstack
    lt rx764_pos, -1, rx764_done2078
    lt rx764_pos, 0, rx764_fail2080
    eq $I19, 0, rx764_fail2080
    nqp_islist $I20, rx764_cstack
    unless $I20, rx764_jump2081
    elements $I18, rx764_bstack
    le $I18, 0, rx764_cut2082
    dec $I18
    set $I18, rx764_bstack[$I18]
  rx764_cut2082:
    assign rx764_cstack, $I18
  rx764_jump2081:
    jump $I19
  rx764_done2078:
    rx764_cur."!cursor_fail"()
    .return (rx764_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_132_1347719921.536_caps" :subid("cuid_memo_199_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_133_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1089
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx770_tgt
    .local int rx770_pos
    .local int rx770_off
    .local int rx770_eos
    .local int rx770_rep
    .local pmc rx770_cur
    .local pmc rx770_curclass
    .local pmc rx770_bstack
    .local pmc rx770_cstack
    (rx770_cur, rx770_tgt, rx770_pos, rx770_curclass, rx770_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx770_cur
    length rx770_eos, rx770_tgt
    eq $I19, 1, rx770_restart2093
    gt rx770_pos, rx770_eos, rx770_fail2094
    repr_get_attr_int $I11, self, rx770_curclass, "$!from"
    ne $I11, -1, rxscan771_done2100
    goto rxscan771_scan2099
  rxscan771_loop2098:
    inc rx770_pos
    gt rx770_pos, rx770_eos, rx770_fail2094
    repr_bind_attr_int rx770_cur, rx770_curclass, "$!from", rx770_pos
  rxscan771_scan2099:
    nqp_rxmark rx770_bstack, rxscan771_loop2098, rx770_pos, 0
  rxscan771_done2100:
    repr_bind_attr_int rx770_cur, rx770_curclass, "$!pos", rx770_pos
    $P11 = rx770_cur."ws"()
    repr_get_attr_int $I11, $P11, rx770_curclass, "$!pos"
    lt $I11, 0, rx770_fail2094
    repr_get_attr_int rx770_pos, $P11, rx770_curclass, "$!pos"
    repr_bind_attr_int rx770_cur, rx770_curclass, "$!pos", rx770_pos
    $P11 = rx770_cur."trait_mod"()
    repr_get_attr_int $I11, $P11, rx770_curclass, "$!pos"
    lt $I11, 0, rx770_fail2094
    nqp_rxmark rx770_bstack, rxsubrule773_pass2102, -1, 0
  rxsubrule773_pass2102:
    rx770_cstack = rx770_cur."!cursor_capture"($P11, "trait_mod")
    repr_get_attr_int rx770_pos, $P11, rx770_curclass, "$!pos"
    repr_bind_attr_int rx770_cur, rx770_curclass, "$!pos", rx770_pos
    $P11 = rx770_cur."ws"()
    repr_get_attr_int $I11, $P11, rx770_curclass, "$!pos"
    lt $I11, 0, rx770_fail2094
    repr_get_attr_int rx770_pos, $P11, rx770_curclass, "$!pos"
    rx770_cur."!cursor_pass"(rx770_pos, "trait", 'backtrack'=>1)
    .return (rx770_cur)
  rx770_restart2093:
    repr_get_attr_obj rx770_cstack, rx770_cur, rx770_curclass, "$!cstack"
  rx770_fail2094:
    unless rx770_bstack, rx770_done2092
    pop $I19, rx770_bstack
    if_null rx770_cstack, rx770_cstack_done2097
    unless rx770_cstack, rx770_cstack_done2097
    dec $I19
    set $P11, rx770_cstack[$I19]
  rx770_cstack_done2097:
    pop rx770_rep, rx770_bstack
    pop rx770_pos, rx770_bstack
    pop $I19, rx770_bstack
    lt rx770_pos, -1, rx770_done2092
    lt rx770_pos, 0, rx770_fail2094
    eq $I19, 0, rx770_fail2094
    nqp_islist $I20, rx770_cstack
    unless $I20, rx770_jump2095
    elements $I18, rx770_bstack
    le $I18, 0, rx770_cut2096
    dec $I18
    set $I18, rx770_bstack[$I18]
  rx770_cut2096:
    assign rx770_cstack, $I18
  rx770_jump2095:
    jump $I19
  rx770_done2092:
    rx770_cur."!cursor_fail"()
    .return (rx770_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_133_1347719921.536_caps" :subid("cuid_memo_200_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["trait_mod"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod" :subid("cuid_134_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1091
    .param pmc self 
    $P5001 = self."!protoregex"("trait_mod")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_135_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1092
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx775_tgt
    .local int rx775_pos
    .local int rx775_off
    .local int rx775_eos
    .local int rx775_rep
    .local pmc rx775_cur
    .local pmc rx775_curclass
    .local pmc rx775_bstack
    .local pmc rx775_cstack
    (rx775_cur, rx775_tgt, rx775_pos, rx775_curclass, rx775_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx775_cur
    length rx775_eos, rx775_tgt
    eq $I19, 1, rx775_restart2106
    gt rx775_pos, rx775_eos, rx775_fail2107
    repr_get_attr_int $I11, self, rx775_curclass, "$!from"
    ne $I11, -1, rxscan776_done2113
    goto rxscan776_scan2112
  rxscan776_loop2111:
    inc rx775_pos
    gt rx775_pos, rx775_eos, rx775_fail2107
    repr_bind_attr_int rx775_cur, rx775_curclass, "$!from", rx775_pos
  rxscan776_scan2112:
    nqp_rxmark rx775_bstack, rxscan776_loop2111, rx775_pos, 0
  rxscan776_done2113:
    nqp_rxmark rx775_bstack, rxcap777_fail2115, rx775_pos, 0
    add $I11, rx775_pos, 2
    gt $I11, rx775_eos, rx775_fail2107
    substr $S10, rx775_tgt, rx775_pos, 2
    ne $S10, ucs4:"is", rx775_fail2107
    add rx775_pos, 2
    nqp_rxpeek $I19, rx775_bstack, rxcap777_fail2115
    inc $I19
    set $I11, rx775_bstack[$I19]
    $P11 = rx775_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx775_pos)
    rx775_cstack = rx775_cur."!cursor_capture"($P11, "sym")
    goto rxcap777_done2114
  rxcap777_fail2115:
    goto rx775_fail2107
  rxcap777_done2114:
    repr_bind_attr_int rx775_cur, rx775_curclass, "$!pos", rx775_pos
    $P11 = rx775_cur."ws"()
    repr_get_attr_int $I11, $P11, rx775_curclass, "$!pos"
    lt $I11, 0, rx775_fail2107
    repr_get_attr_int rx775_pos, $P11, rx775_curclass, "$!pos"
    repr_bind_attr_int rx775_cur, rx775_curclass, "$!pos", rx775_pos
    $P11 = rx775_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx775_curclass, "$!pos"
    lt $I11, 0, rx775_fail2107
    nqp_rxmark rx775_bstack, rxsubrule779_pass2117, -1, 0
  rxsubrule779_pass2117:
    rx775_cstack = rx775_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx775_pos, $P11, rx775_curclass, "$!pos"
    nqp_rxmark rx775_bstack, rxquantr780_done2119, rx775_pos, 0
  rxquantr780_loop2118:
    repr_bind_attr_int rx775_cur, rx775_curclass, "$!pos", rx775_pos
    $P11 = rx775_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx775_curclass, "$!pos"
    lt $I11, 0, rx775_fail2107
    goto rxsubrule781_pass2120
  rxsubrule781_back2121:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx775_curclass, "$!pos"
    lt $I11, 0, rx775_fail2107
  rxsubrule781_pass2120:
    rx775_cstack = rx775_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule781_back2121
    push rx775_bstack, $I11
    push rx775_bstack, 0
    push rx775_bstack, rx775_pos
    elements $I11, rx775_cstack
    push rx775_bstack, $I11
    repr_get_attr_int rx775_pos, $P11, rx775_curclass, "$!pos"
    nqp_rxpeek $I19, rx775_bstack, rxquantr780_done2119
    inc $I19
    inc $I19
    set rx775_rep, rx775_bstack[$I19]
    nqp_rxcommit rx775_bstack, rxquantr780_done2119
    inc rx775_rep
  rxquantr780_done2119:
    repr_bind_attr_int rx775_cur, rx775_curclass, "$!pos", rx775_pos
    $P11 = rx775_cur."ws"()
    repr_get_attr_int $I11, $P11, rx775_curclass, "$!pos"
    lt $I11, 0, rx775_fail2107
    repr_get_attr_int rx775_pos, $P11, rx775_curclass, "$!pos"
    rx775_cur."!cursor_pass"(rx775_pos, "trait_mod:sym<is>", 'backtrack'=>1)
    .return (rx775_cur)
  rx775_restart2106:
    repr_get_attr_obj rx775_cstack, rx775_cur, rx775_curclass, "$!cstack"
  rx775_fail2107:
    unless rx775_bstack, rx775_done2105
    pop $I19, rx775_bstack
    if_null rx775_cstack, rx775_cstack_done2110
    unless rx775_cstack, rx775_cstack_done2110
    dec $I19
    set $P11, rx775_cstack[$I19]
  rx775_cstack_done2110:
    pop rx775_rep, rx775_bstack
    pop rx775_pos, rx775_bstack
    pop $I19, rx775_bstack
    lt rx775_pos, -1, rx775_done2105
    lt rx775_pos, 0, rx775_fail2107
    eq $I19, 0, rx775_fail2107
    nqp_islist $I20, rx775_cstack
    unless $I20, rx775_jump2108
    elements $I18, rx775_bstack
    le $I18, 0, rx775_cut2109
    dec $I18
    set $I18, rx775_bstack[$I18]
  rx775_cut2109:
    assign rx775_cstack, $I18
  rx775_jump2108:
    jump $I19
  rx775_done2105:
    rx775_cur."!cursor_fail"()
    .return (rx775_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_135_1347719921.536_caps" :subid("cuid_memo_201_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["longname"], $P5003
    box $P5004, 2
    set $P5001["circumfix"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_135_1347719921.536_nfa" :subid("cuid_memo_202_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 105
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 115
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_136_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1094
    .param pmc _lex_param_0 
    .const 'Sub' $P5012 = 'cuid_393_1347719921.536' 
    capture_lex $P5012 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx783_tgt
    .local int rx783_pos
    .local int rx783_off
    .local int rx783_eos
    .local int rx783_rep
    .local pmc rx783_cur
    .local pmc rx783_curclass
    .local pmc rx783_bstack
    .local pmc rx783_cstack
    (rx783_cur, rx783_tgt, rx783_pos, rx783_curclass, rx783_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx783_cur
    length rx783_eos, rx783_tgt
    eq $I19, 1, rx783_restart2125
    gt rx783_pos, rx783_eos, rx783_fail2126
    repr_get_attr_int $I11, self, rx783_curclass, "$!from"
    ne $I11, -1, rxscan784_done2132
    goto rxscan784_scan2131
  rxscan784_loop2130:
    inc rx783_pos
    gt rx783_pos, rx783_eos, rx783_fail2126
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!from", rx783_pos
  rxscan784_scan2131:
    nqp_rxmark rx783_bstack, rxscan784_loop2130, rx783_pos, 0
  rxscan784_done2132:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt785_02134
    nqp_push_label $P11, alt785_12164
    nqp_rxmark rx783_bstack, alt785_end2133, -1, 0
    rx783_cur."!alt"(rx783_pos, "alt_nfa__31_1347719923.843", $P11)
    goto rx783_fail2126
  alt785_02134:
    nqp_rxmark rx783_bstack, rxcap786_fail2136, rx783_pos, 0
    add $I11, rx783_pos, 5
    gt $I11, rx783_eos, rx783_fail2126
    substr $S10, rx783_tgt, rx783_pos, 5
    ne $S10, ucs4:"proto", rx783_fail2126
    add rx783_pos, 5
    nqp_rxpeek $I19, rx783_bstack, rxcap786_fail2136
    inc $I19
    set $I11, rx783_bstack[$I19]
    $P11 = rx783_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx783_pos)
    rx783_cstack = rx783_cur."!cursor_capture"($P11, "proto")
    goto rxcap786_done2135
  rxcap786_fail2136:
    goto rx783_fail2126
  rxcap786_done2135:
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt788_02139
    nqp_push_label $P11, alt788_12140
    nqp_push_label $P11, alt788_22141
    nqp_rxmark rx783_bstack, alt788_end2138, -1, 0
    rx783_cur."!alt"(rx783_pos, "alt_nfa__32_1347719923.843", $P11)
    goto rx783_fail2126
  alt788_02139:
    add $I11, rx783_pos, 5
    gt $I11, rx783_eos, rx783_fail2126
    substr $S10, rx783_tgt, rx783_pos, 5
    ne $S10, ucs4:"regex", rx783_fail2126
    add rx783_pos, 5
    goto alt788_end2138
  alt788_12140:
    add $I11, rx783_pos, 5
    gt $I11, rx783_eos, rx783_fail2126
    substr $S10, rx783_tgt, rx783_pos, 5
    ne $S10, ucs4:"token", rx783_fail2126
    add rx783_pos, 5
    goto alt788_end2138
  alt788_22141:
    add $I11, rx783_pos, 4
    gt $I11, rx783_eos, rx783_fail2126
    substr $S10, rx783_tgt, rx783_pos, 4
    ne $S10, ucs4:"rule", rx783_fail2126
    add rx783_pos, 4
    goto alt788_end2138
  alt788_end2138:
    nqp_rxcommit rx783_bstack, alt788_end2138
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    nqp_rxmark rx783_bstack, rxsubrule790_pass2143, -1, 0
  rxsubrule790_pass2143:
    rx783_cstack = rx783_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
  alt792_02146:
    nqp_rxmark rx783_bstack, alt792_12149, rx783_pos, 0
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    add $I11, rx783_pos, 3
    gt $I11, rx783_eos, rx783_fail2126
    substr $S10, rx783_tgt, rx783_pos, 3
    ne $S10, ucs4:"{*}", rx783_fail2126
    add rx783_pos, 3
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    goto alt792_end2145
  alt792_12149:
    nqp_rxmark rx783_bstack, alt792_22154, rx783_pos, 0
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    add $I11, rx783_pos, 1
    gt $I11, rx783_eos, rx783_fail2126
    substr $S10, rx783_tgt, rx783_pos, 1
    ne $S10, ucs4:"{", rx783_fail2126
    add rx783_pos, 1
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    add $I11, rx783_pos, 5
    gt $I11, rx783_eos, rx783_fail2126
    substr $S10, rx783_tgt, rx783_pos, 5
    ne $S10, ucs4:"<...>", rx783_fail2126
    add rx783_pos, 5
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    add $I11, rx783_pos, 1
    gt $I11, rx783_eos, rx783_fail2126
    substr $S10, rx783_tgt, rx783_pos, 1
    ne $S10, ucs4:"}", rx783_fail2126
    add rx783_pos, 1
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    goto alt792_end2145
  alt792_22154:
    nqp_rxmark rx783_bstack, alt792_32159, rx783_pos, 0
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    add $I11, rx783_pos, 1
    gt $I11, rx783_eos, rx783_fail2126
    substr $S10, rx783_tgt, rx783_pos, 1
    ne $S10, ucs4:"{", rx783_fail2126
    add rx783_pos, 1
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    add $I11, rx783_pos, 3
    gt $I11, rx783_eos, rx783_fail2126
    substr $S10, rx783_tgt, rx783_pos, 3
    ne $S10, ucs4:"<*>", rx783_fail2126
    add rx783_pos, 3
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    add $I11, rx783_pos, 1
    gt $I11, rx783_eos, rx783_fail2126
    substr $S10, rx783_tgt, rx783_pos, 1
    ne $S10, ucs4:"}", rx783_fail2126
    add rx783_pos, 1
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    goto alt792_end2145
  alt792_32159:
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."panic"("Proto regex body must be \\{*\\} (or <*> or <...>, which are deprecated)")
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
  alt792_end2145:
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    goto alt785_end2133
  alt785_12164:
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    nqp_rxmark rx783_bstack, rxcap808_fail2167, rx783_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt809_02169
    nqp_push_label $P11, alt809_12170
    nqp_push_label $P11, alt809_22171
    nqp_rxmark rx783_bstack, alt809_end2168, -1, 0
    rx783_cur."!alt"(rx783_pos, "alt_nfa__33_1347719923.845", $P11)
    goto rx783_fail2126
  alt809_02169:
    add $I11, rx783_pos, 5
    gt $I11, rx783_eos, rx783_fail2126
    substr $S10, rx783_tgt, rx783_pos, 5
    ne $S10, ucs4:"regex", rx783_fail2126
    add rx783_pos, 5
    goto alt809_end2168
  alt809_12170:
    add $I11, rx783_pos, 5
    gt $I11, rx783_eos, rx783_fail2126
    substr $S10, rx783_tgt, rx783_pos, 5
    ne $S10, ucs4:"token", rx783_fail2126
    add rx783_pos, 5
    goto alt809_end2168
  alt809_22171:
    add $I11, rx783_pos, 4
    gt $I11, rx783_eos, rx783_fail2126
    substr $S10, rx783_tgt, rx783_pos, 4
    ne $S10, ucs4:"rule", rx783_fail2126
    add rx783_pos, 4
    goto alt809_end2168
  alt809_end2168:
    nqp_rxcommit rx783_bstack, alt809_end2168
    nqp_rxpeek $I19, rx783_bstack, rxcap808_fail2167
    inc $I19
    set $I11, rx783_bstack[$I19]
    $P11 = rx783_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx783_pos)
    rx783_cstack = rx783_cur."!cursor_capture"($P11, "sym")
    goto rxcap808_done2166
  rxcap808_fail2167:
    goto rx783_fail2126
  rxcap808_done2166:
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    nqp_rxmark rx783_bstack, rxsubrule812_pass2174, -1, 0
  rxsubrule812_pass2174:
    rx783_cstack = rx783_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    nqp_rxmark rx783_bstack, rxquantr816_done2179, rx783_pos, 0
  rxquantr816_loop2178:
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    add $I11, rx783_pos, 1
    gt $I11, rx783_eos, rx783_fail2126
    substr $S10, rx783_tgt, rx783_pos, 1
    ne $S10, ucs4:"(", rx783_fail2126
    add rx783_pos, 1
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."signature"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    nqp_rxmark rx783_bstack, rxsubrule819_pass2182, -1, 0
  rxsubrule819_pass2182:
    rx783_cstack = rx783_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    add $I11, rx783_pos, 1
    gt $I11, rx783_eos, rx783_fail2126
    substr $S10, rx783_tgt, rx783_pos, 1
    ne $S10, ucs4:")", rx783_fail2126
    add rx783_pos, 1
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    nqp_rxpeek $I19, rx783_bstack, rxquantr816_done2179
    inc $I19
    inc $I19
    set rx783_rep, rx783_bstack[$I19]
    nqp_rxcommit rx783_bstack, rxquantr816_done2179
    inc rx783_rep
  rxquantr816_done2179:
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    store_lex unicode:"$\x{a2}", rx783_cur
    unless_null $P101, fallback2186
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2187
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2187:
    unless_null $P5002, vivi_8232188
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_8232188:
    set $P101, $P5002
  fallback2186:
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    store_lex unicode:"$\x{a2}", rx783_cur
    $P5009 = $P102."MATCH"()
    set $P103, $P5009
    .const 'Sub' $P5010 = 'cuid_393_1347719921.536' 
    capture_lex $P5010
    $P5011 = $P5010()
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    add $I11, rx783_pos, 1
    gt $I11, rx783_eos, rx783_fail2126
    substr $S10, rx783_tgt, rx783_pos, 1
    ne $S10, ucs4:"{", rx783_fail2126
    add rx783_pos, 1
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    nqp_rxmark rx783_bstack, rxsubrule830_pass2210, -1, 0
  rxsubrule830_pass2210:
    rx783_cstack = rx783_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    add $I11, rx783_pos, 1
    gt $I11, rx783_eos, rx783_fail2126
    substr $S10, rx783_tgt, rx783_pos, 1
    ne $S10, ucs4:"}", rx783_fail2126
    add rx783_pos, 1
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_bind_attr_int rx783_cur, rx783_curclass, "$!pos", rx783_pos
    $P11 = rx783_cur."ws"()
    repr_get_attr_int $I11, $P11, rx783_curclass, "$!pos"
    lt $I11, 0, rx783_fail2126
    repr_get_attr_int rx783_pos, $P11, rx783_curclass, "$!pos"
    goto alt785_end2133
  alt785_end2133:
    nqp_rxcommit rx783_bstack, alt785_end2133
    rx783_cur."!cursor_pass"(rx783_pos, "regex_declarator", 'backtrack'=>1)
    .return (rx783_cur)
  rx783_restart2125:
    repr_get_attr_obj rx783_cstack, rx783_cur, rx783_curclass, "$!cstack"
  rx783_fail2126:
    unless rx783_bstack, rx783_done2124
    pop $I19, rx783_bstack
    if_null rx783_cstack, rx783_cstack_done2129
    unless rx783_cstack, rx783_cstack_done2129
    dec $I19
    set $P11, rx783_cstack[$I19]
  rx783_cstack_done2129:
    pop rx783_rep, rx783_bstack
    pop rx783_pos, rx783_bstack
    pop $I19, rx783_bstack
    lt rx783_pos, -1, rx783_done2124
    lt rx783_pos, 0, rx783_fail2126
    eq $I19, 0, rx783_fail2126
    nqp_islist $I20, rx783_cstack
    unless $I20, rx783_jump2127
    elements $I18, rx783_bstack
    le $I18, 0, rx783_cut2128
    dec $I18
    set $I18, rx783_bstack[$I18]
  rx783_cut2128:
    assign rx783_cstack, $I18
  rx783_jump2127:
    jump $I19
  rx783_done2124:
    rx783_cur."!cursor_fail"()
    .return (rx783_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1347719921.536_caps" :subid("cuid_memo_203_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["proto"], $P5002
    box $P5003, 0
    set $P5001["deflongname"], $P5003
    box $P5004, 0
    set $P5001["sym"], $P5004
    box $P5005, 2
    set $P5001["signature"], $P5005
    box $P5006, 0
    set $P5001["p6regex"], $P5006
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1347719921.536_nfa" :subid("cuid_memo_204_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 112
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 0
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 0
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 114
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    push $P5001, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 111
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 116
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    push $P5001, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 2
    push $P5022, $P5023
    box $P5024, 111
    push $P5022, $P5024
    box $P5025, 6
    push $P5022, $P5025
    push $P5001, $P5022
    new $P5026, 'ResizablePMCArray'
    box $P5027, 0
    push $P5026, $P5027
    box $P5028, 0
    push $P5026, $P5028
    box $P5029, 0
    push $P5026, $P5029
    push $P5001, $P5026
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1347719921.536_alt_nfa__32_1347719923.843" :subid("cuid_memo_205_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 114
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 101
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 103
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 101
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 120
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 116
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 111
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 107
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 101
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 110
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 2
    push $P5048, $P5049
    box $P5050, 114
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 2
    push $P5052, $P5053
    box $P5054, 117
    push $P5052, $P5054
    box $P5055, 3
    push $P5052, $P5055
    push $P5046, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 2
    push $P5056, $P5057
    box $P5058, 108
    push $P5056, $P5058
    box $P5059, 4
    push $P5056, $P5059
    push $P5046, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 2
    push $P5060, $P5061
    box $P5062, 101
    push $P5060, $P5062
    box $P5063, 0
    push $P5060, $P5063
    push $P5046, $P5060
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1347719921.536_alt_nfa__33_1347719923.845" :subid("cuid_memo_206_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 114
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 101
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 103
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 101
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 120
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 116
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 111
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 107
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 101
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 110
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 2
    push $P5048, $P5049
    box $P5050, 114
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 2
    push $P5052, $P5053
    box $P5054, 117
    push $P5052, $P5054
    box $P5055, 3
    push $P5052, $P5055
    push $P5046, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 2
    push $P5056, $P5057
    box $P5058, 108
    push $P5056, $P5058
    box $P5059, 4
    push $P5056, $P5059
    push $P5046, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 2
    push $P5060, $P5061
    box $P5062, 101
    push $P5060, $P5062
    box $P5063, 0
    push $P5060, $P5063
    push $P5046, $P5060
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1347719921.536_alt_nfa__31_1347719923.843" :subid("cuid_memo_207_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 112
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 114
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 111
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 116
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 111
    push $P5020, $P5022
    box $P5023, 6
    push $P5020, $P5023
    push $P5002, $P5020
    new $P5024, 'ResizablePMCArray'
    box $P5025, 0
    push $P5024, $P5025
    box $P5026, 0
    push $P5024, $P5026
    box $P5027, 0
    push $P5024, $P5027
    push $P5002, $P5024
    push $P5001, $P5002
    new $P5028, 'ResizablePMCArray'
    new $P5029, 'ResizablePMCArray'
    push $P5028, $P5029
    new $P5030, 'ResizablePMCArray'
    box $P5031, 0
    push $P5030, $P5031
    box $P5032, 0
    push $P5030, $P5032
    box $P5033, 0
    push $P5030, $P5033
    box $P5034, 0
    push $P5030, $P5034
    box $P5035, 0
    push $P5030, $P5035
    box $P5036, 0
    push $P5030, $P5036
    push $P5028, $P5030
    push $P5001, $P5028
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_393_1347719921.536") :anon :lex :outer("cuid_136_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1109

    find_dynamic_lex $P5001, "%*RX"
    unless_null $P5001, fallback2190
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2191
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2191:
    unless_null $P5002, vivi_8252192
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_8252192:
    set $P5001, $P5002
  fallback2190:
    find_lex $P5010, "$/"
    unless_null $P5010, fallback2193
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5011
  fallback2193:
    set $P5009, $P5010["sym"]
    unless_null $P5009, fallback2194
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5012
  fallback2194:
    set $S5001, $P5009
    iseq $I5001, $S5001, "rule"
    box $P5013, $I5001
    set $P5001["s"], $P5013
    find_dynamic_lex $P5014, "%*RX"
    unless_null $P5014, fallback2195
    get_hll_global $P5017, "GLOBAL"
    get_who $P5016, $P5017
    set $P5015, $P5016["%RX"]
    unless_null $P5015, fallback2196
    get_hll_global $P5019, "GLOBAL"
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%RX"], $P5020
    set $P5015, $P5020
  fallback2196:
    unless_null $P5015, vivi_8262197
    die "Contextual %*RX not found"
    box $P5021, "Contextual %*RX not found"
    set $P5015, $P5021
  vivi_8262197:
    set $P5014, $P5015
  fallback2195:
    find_lex $P5023, "$/"
    unless_null $P5023, fallback2200
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5023, $P5024
  fallback2200:
    set $P5022, $P5023["sym"]
    unless_null $P5022, fallback2201
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5022, $P5025
  fallback2201:
    set $S5002, $P5022
    iseq $I5002, $S5002, "token"
    set $I5004, $I5002
    if $I5002 goto unless827_end2199 
    find_lex $P5027, "$/"
    unless_null $P5027, fallback2202
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5027, $P5028
  fallback2202:
    set $P5026, $P5027["sym"]
    unless_null $P5026, fallback2203
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5026, $P5029
  fallback2203:
    set $S5003, $P5026
    iseq $I5003, $S5003, "rule"
    set $I5004, $I5003
  unless827_end2199:
    box $P5030, $I5004
    set $P5014["r"], $P5030
    find_dynamic_lex $P5031, "%*RX"
    unless_null $P5031, fallback2204
    get_hll_global $P5034, "GLOBAL"
    get_who $P5033, $P5034
    set $P5032, $P5033["%RX"]
    unless_null $P5032, fallback2205
    get_hll_global $P5036, "GLOBAL"
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%RX"], $P5037
    set $P5032, $P5037
  fallback2205:
    unless_null $P5032, vivi_8282206
    die "Contextual %*RX not found"
    box $P5038, "Contextual %*RX not found"
    set $P5032, $P5038
  vivi_8282206:
    set $P5031, $P5032
  fallback2204:
.annotate 'line', 1112
    find_lex $P5040, "$/"
    unless_null $P5040, fallback2207
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5040, $P5041
  fallback2207:
    set $P5039, $P5040["deflongname"]
    unless_null $P5039, fallback2208
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5039, $P5042
  fallback2208:
    $P5043 = $P5039."ast"()
    set $P5031["name"], $P5043
    .return ($P5043) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_137_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1118
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx832_tgt
    .local int rx832_pos
    .local int rx832_off
    .local int rx832_eos
    .local int rx832_rep
    .local pmc rx832_cur
    .local pmc rx832_curclass
    .local pmc rx832_bstack
    .local pmc rx832_cstack
    (rx832_cur, rx832_tgt, rx832_pos, rx832_curclass, rx832_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx832_cur
    length rx832_eos, rx832_tgt
    eq $I19, 1, rx832_restart2214
    gt rx832_pos, rx832_eos, rx832_fail2215
    repr_get_attr_int $I11, self, rx832_curclass, "$!from"
    ne $I11, -1, rxscan833_done2221
    goto rxscan833_scan2220
  rxscan833_loop2219:
    inc rx832_pos
    gt rx832_pos, rx832_eos, rx832_fail2215
    repr_bind_attr_int rx832_cur, rx832_curclass, "$!from", rx832_pos
  rxscan833_scan2220:
    nqp_rxmark rx832_bstack, rxscan833_loop2219, rx832_pos, 0
  rxscan833_done2221:
    add $I11, rx832_pos, 1
    gt $I11, rx832_eos, rx832_fail2215
    substr $S10, rx832_tgt, rx832_pos, 1
    ne $S10, ucs4:".", rx832_fail2215
    add rx832_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt834_02223
    nqp_push_label $P11, alt834_12225
    nqp_rxmark rx832_bstack, alt834_end2222, -1, 0
    rx832_cur."!alt"(rx832_pos, "alt_nfa__34_1347719923.869", $P11)
    goto rx832_fail2215
  alt834_02223:
    repr_bind_attr_int rx832_cur, rx832_curclass, "$!pos", rx832_pos
    $P11 = rx832_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx832_curclass, "$!pos"
    lt $I11, 0, rx832_fail2215
    nqp_rxmark rx832_bstack, rxsubrule835_pass2224, -1, 0
  rxsubrule835_pass2224:
    rx832_cstack = rx832_cur."!cursor_capture"($P11, "longname=deflongname")
    repr_get_attr_int rx832_pos, $P11, rx832_curclass, "$!pos"
    goto alt834_end2222
  alt834_12225:
    ge rx832_pos, rx832_eos, rx832_fail2215
    substr $S11, rx832_tgt, rx832_pos, 1
    index $I11, ucs4:"'\"", $S11
    lt $I11, 0, rx832_fail2215
    repr_bind_attr_int rx832_cur, rx832_curclass, "$!pos", rx832_pos
    $P11 = rx832_cur."quote"()
    repr_get_attr_int $I11, $P11, rx832_curclass, "$!pos"
    lt $I11, 0, rx832_fail2215
    nqp_rxmark rx832_bstack, rxsubrule836_pass2226, -1, 0
  rxsubrule836_pass2226:
    rx832_cstack = rx832_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx832_pos, $P11, rx832_curclass, "$!pos"
  alt837_02228:
    nqp_rxmark rx832_bstack, alt837_12229, rx832_pos, 0
    ge rx832_pos, rx832_eos, rx832_fail2215
    substr $S11, rx832_tgt, rx832_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx832_fail2215
    goto alt837_end2227
  alt837_12229:
    repr_bind_attr_int rx832_cur, rx832_curclass, "$!pos", rx832_pos
    $P11 = rx832_cur."panic"("Quoted method name requires parenthesized arguments")
    repr_get_attr_int $I11, $P11, rx832_curclass, "$!pos"
    lt $I11, 0, rx832_fail2215
    repr_get_attr_int rx832_pos, $P11, rx832_curclass, "$!pos"
  alt837_end2227:
    goto alt834_end2222
  alt834_end2222:
    nqp_rxcommit rx832_bstack, alt834_end2222
    nqp_rxmark rx832_bstack, rxquantr839_done2232, rx832_pos, 0
  rxquantr839_loop2231:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt840_02234
    nqp_push_label $P11, alt840_12236
    nqp_rxmark rx832_bstack, alt840_end2233, -1, 0
    rx832_cur."!alt"(rx832_pos, "alt_nfa__35_1347719923.869", $P11)
    goto rx832_fail2215
  alt840_02234:
    ge rx832_pos, rx832_eos, rx832_fail2215
    substr $S11, rx832_tgt, rx832_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx832_fail2215
    repr_bind_attr_int rx832_cur, rx832_curclass, "$!pos", rx832_pos
    $P11 = rx832_cur."args"()
    repr_get_attr_int $I11, $P11, rx832_curclass, "$!pos"
    lt $I11, 0, rx832_fail2215
    nqp_rxmark rx832_bstack, rxsubrule841_pass2235, -1, 0
  rxsubrule841_pass2235:
    rx832_cstack = rx832_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx832_pos, $P11, rx832_curclass, "$!pos"
    goto alt840_end2233
  alt840_12236:
    add $I11, rx832_pos, 1
    gt $I11, rx832_eos, rx832_fail2215
    substr $S10, rx832_tgt, rx832_pos, 1
    ne $S10, ucs4:":", rx832_fail2215
    add rx832_pos, 1
    ge rx832_pos, rx832_eos, rx832_fail2215
    is_cclass $I11, .CCLASS_WHITESPACE, rx832_tgt, rx832_pos
    unless $I11, rx832_fail2215
    add rx832_pos, 1
    repr_bind_attr_int rx832_cur, rx832_curclass, "$!pos", rx832_pos
    $P11 = rx832_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx832_curclass, "$!pos"
    lt $I11, 0, rx832_fail2215
    nqp_rxmark rx832_bstack, rxsubrule842_pass2237, -1, 0
  rxsubrule842_pass2237:
    rx832_cstack = rx832_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx832_pos, $P11, rx832_curclass, "$!pos"
    goto alt840_end2233
  alt840_end2233:
    nqp_rxpeek $I19, rx832_bstack, rxquantr839_done2232
    inc $I19
    inc $I19
    set rx832_rep, rx832_bstack[$I19]
    nqp_rxcommit rx832_bstack, rxquantr839_done2232
    inc rx832_rep
  rxquantr839_done2232:
    rx832_cur."!cursor_pass"(rx832_pos, "dotty", 'backtrack'=>1)
    .return (rx832_cur)
  rx832_restart2214:
    repr_get_attr_obj rx832_cstack, rx832_cur, rx832_curclass, "$!cstack"
  rx832_fail2215:
    unless rx832_bstack, rx832_done2213
    pop $I19, rx832_bstack
    if_null rx832_cstack, rx832_cstack_done2218
    unless rx832_cstack, rx832_cstack_done2218
    dec $I19
    set $P11, rx832_cstack[$I19]
  rx832_cstack_done2218:
    pop rx832_rep, rx832_bstack
    pop rx832_pos, rx832_bstack
    pop $I19, rx832_bstack
    lt rx832_pos, -1, rx832_done2213
    lt rx832_pos, 0, rx832_fail2215
    eq $I19, 0, rx832_fail2215
    nqp_islist $I20, rx832_cstack
    unless $I20, rx832_jump2216
    elements $I18, rx832_bstack
    le $I18, 0, rx832_cut2217
    dec $I18
    set $I18, rx832_bstack[$I18]
  rx832_cut2217:
    assign rx832_cstack, $I18
  rx832_jump2216:
    jump $I19
  rx832_done2213:
    rx832_cur."!cursor_fail"()
    .return (rx832_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_137_1347719921.536_caps" :subid("cuid_memo_208_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["longname"], $P5002
    box $P5003, 0
    set $P5001["deflongname"], $P5003
    box $P5004, 0
    set $P5001["quote"], $P5004
    box $P5005, 2
    set $P5001["args"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_137_1347719921.536_nfa" :subid("cuid_memo_209_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 46
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "deflongname"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 6
    push $P5007, $P5011
    box $P5012, "'\""
    push $P5007, $P5012
    box $P5013, 4
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 6
    push $P5014, $P5015
    box $P5016, "("
    push $P5014, $P5016
    box $P5017, 5
    push $P5014, $P5017
    box $P5018, 2
    push $P5014, $P5018
    box $P5019, 58
    push $P5014, $P5019
    box $P5020, 6
    push $P5014, $P5020
    box $P5021, 1
    push $P5014, $P5021
    box $P5022, 0
    push $P5014, $P5022
    box $P5023, 0
    push $P5014, $P5023
    push $P5001, $P5014
    new $P5024, 'ResizablePMCArray'
    box $P5025, 0
    push $P5024, $P5025
    box $P5026, 0
    push $P5024, $P5026
    box $P5027, 0
    push $P5024, $P5027
    push $P5001, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 0
    push $P5028, $P5029
    box $P5030, 0
    push $P5028, $P5030
    box $P5031, 0
    push $P5028, $P5031
    push $P5001, $P5028
    new $P5032, 'ResizablePMCArray'
    box $P5033, 4
    push $P5032, $P5033
    box $P5034, 32
    push $P5032, $P5034
    box $P5035, 7
    push $P5032, $P5035
    push $P5001, $P5032
    new $P5036, 'ResizablePMCArray'
    box $P5037, 8
    push $P5036, $P5037
    box $P5038, "arglist"
    push $P5036, $P5038
    box $P5039, 0
    push $P5036, $P5039
    push $P5001, $P5036
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_137_1347719921.536_alt_nfa__34_1347719923.869" :subid("cuid_memo_210_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "deflongname"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 6
    push $P5010, $P5011
    box $P5012, "'\""
    push $P5010, $P5012
    box $P5013, 2
    push $P5010, $P5013
    push $P5008, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5008, $P5014
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_137_1347719921.536_alt_nfa__35_1347719923.869" :subid("cuid_memo_211_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 6
    push $P5004, $P5005
    box $P5006, "("
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 58
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    push $P5012, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 4
    push $P5018, $P5019
    box $P5020, 32
    push $P5018, $P5020
    box $P5021, 3
    push $P5018, $P5021
    push $P5012, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 8
    push $P5022, $P5023
    box $P5024, "arglist"
    push $P5022, $P5024
    box $P5025, 0
    push $P5022, $P5025
    push $P5012, $P5022
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_138_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1131
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx843_tgt
    .local int rx843_pos
    .local int rx843_off
    .local int rx843_eos
    .local int rx843_rep
    .local pmc rx843_cur
    .local pmc rx843_curclass
    .local pmc rx843_bstack
    .local pmc rx843_cstack
    (rx843_cur, rx843_tgt, rx843_pos, rx843_curclass, rx843_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx843_cur
    length rx843_eos, rx843_tgt
    eq $I19, 1, rx843_restart2240
    gt rx843_pos, rx843_eos, rx843_fail2241
    repr_get_attr_int $I11, self, rx843_curclass, "$!from"
    ne $I11, -1, rxscan844_done2247
    goto rxscan844_scan2246
  rxscan844_loop2245:
    inc rx843_pos
    gt rx843_pos, rx843_eos, rx843_fail2241
    repr_bind_attr_int rx843_cur, rx843_curclass, "$!from", rx843_pos
  rxscan844_scan2246:
    nqp_rxmark rx843_bstack, rxscan844_loop2245, rx843_pos, 0
  rxscan844_done2247:
    nqp_rxmark rx843_bstack, rxcap845_fail2249, rx843_pos, 0
    add $I11, rx843_pos, 4
    gt $I11, rx843_eos, rx843_fail2241
    substr $S10, rx843_tgt, rx843_pos, 4
    ne $S10, ucs4:"self", rx843_fail2241
    add rx843_pos, 4
    nqp_rxpeek $I19, rx843_bstack, rxcap845_fail2249
    inc $I19
    set $I11, rx843_bstack[$I19]
    $P11 = rx843_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx843_pos)
    rx843_cstack = rx843_cur."!cursor_capture"($P11, "sym")
    goto rxcap845_done2248
  rxcap845_fail2249:
    goto rx843_fail2241
  rxcap845_done2248:
    le rx843_pos, 0, rx843_fail2241
    is_cclass $I11, .CCLASS_WORD, rx843_tgt, rx843_pos
    if $I11, rx843_fail2241
    sub $I11, rx843_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx843_tgt, $I11
    unless $I11, rx843_fail2241
    rx843_cur."!cursor_pass"(rx843_pos, "term:sym<self>", 'backtrack'=>1)
    .return (rx843_cur)
  rx843_restart2240:
    repr_get_attr_obj rx843_cstack, rx843_cur, rx843_curclass, "$!cstack"
  rx843_fail2241:
    unless rx843_bstack, rx843_done2239
    pop $I19, rx843_bstack
    if_null rx843_cstack, rx843_cstack_done2244
    unless rx843_cstack, rx843_cstack_done2244
    dec $I19
    set $P11, rx843_cstack[$I19]
  rx843_cstack_done2244:
    pop rx843_rep, rx843_bstack
    pop rx843_pos, rx843_bstack
    pop $I19, rx843_bstack
    lt rx843_pos, -1, rx843_done2239
    lt rx843_pos, 0, rx843_fail2241
    eq $I19, 0, rx843_fail2241
    nqp_islist $I20, rx843_cstack
    unless $I20, rx843_jump2242
    elements $I18, rx843_bstack
    le $I18, 0, rx843_cut2243
    dec $I18
    set $I18, rx843_bstack[$I18]
  rx843_cut2243:
    assign rx843_cstack, $I18
  rx843_jump2242:
    jump $I19
  rx843_done2239:
    rx843_cur."!cursor_fail"()
    .return (rx843_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_138_1347719921.536_caps" :subid("cuid_memo_212_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_138_1347719921.536_nfa" :subid("cuid_memo_213_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 115
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 108
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 102
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 1
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_139_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1133
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx847_tgt
    .local int rx847_pos
    .local int rx847_off
    .local int rx847_eos
    .local int rx847_rep
    .local pmc rx847_cur
    .local pmc rx847_curclass
    .local pmc rx847_bstack
    .local pmc rx847_cstack
    (rx847_cur, rx847_tgt, rx847_pos, rx847_curclass, rx847_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx847_cur
    length rx847_eos, rx847_tgt
    eq $I19, 1, rx847_restart2253
    gt rx847_pos, rx847_eos, rx847_fail2254
    repr_get_attr_int $I11, self, rx847_curclass, "$!from"
    ne $I11, -1, rxscan848_done2260
    goto rxscan848_scan2259
  rxscan848_loop2258:
    inc rx847_pos
    gt rx847_pos, rx847_eos, rx847_fail2254
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!from", rx847_pos
  rxscan848_scan2259:
    nqp_rxmark rx847_bstack, rxscan848_loop2258, rx847_pos, 0
  rxscan848_done2260:
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2254
    nqp_rxmark rx847_bstack, rxsubrule849_pass2261, -1, 0
  rxsubrule849_pass2261:
    rx847_cstack = rx847_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    ge rx847_pos, rx847_eos, rx847_fail2254
    substr $S11, rx847_tgt, rx847_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx847_fail2254
    repr_bind_attr_int rx847_cur, rx847_curclass, "$!pos", rx847_pos
    $P11 = rx847_cur."args"()
    repr_get_attr_int $I11, $P11, rx847_curclass, "$!pos"
    lt $I11, 0, rx847_fail2254
    nqp_rxmark rx847_bstack, rxsubrule850_pass2262, -1, 0
  rxsubrule850_pass2262:
    rx847_cstack = rx847_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx847_pos, $P11, rx847_curclass, "$!pos"
    rx847_cur."!cursor_pass"(rx847_pos, "term:sym<identifier>", 'backtrack'=>1)
    .return (rx847_cur)
  rx847_restart2253:
    repr_get_attr_obj rx847_cstack, rx847_cur, rx847_curclass, "$!cstack"
  rx847_fail2254:
    unless rx847_bstack, rx847_done2252
    pop $I19, rx847_bstack
    if_null rx847_cstack, rx847_cstack_done2257
    unless rx847_cstack, rx847_cstack_done2257
    dec $I19
    set $P11, rx847_cstack[$I19]
  rx847_cstack_done2257:
    pop rx847_rep, rx847_bstack
    pop rx847_pos, rx847_bstack
    pop $I19, rx847_bstack
    lt rx847_pos, -1, rx847_done2252
    lt rx847_pos, 0, rx847_fail2254
    eq $I19, 0, rx847_fail2254
    nqp_islist $I20, rx847_cstack
    unless $I20, rx847_jump2255
    elements $I18, rx847_bstack
    le $I18, 0, rx847_cut2256
    dec $I18
    set $I18, rx847_bstack[$I18]
  rx847_cut2256:
    assign rx847_cstack, $I18
  rx847_jump2255:
    jump $I19
  rx847_done2252:
    rx847_cur."!cursor_fail"()
    .return (rx847_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_139_1347719921.536_caps" :subid("cuid_memo_214_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["deflongname"], $P5002
    box $P5003, 0
    set $P5001["args"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_139_1347719921.536_nfa" :subid("cuid_memo_215_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "deflongname"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 6
    push $P5007, $P5008
    box $P5009, "("
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_140_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1137
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx851_tgt
    .local int rx851_pos
    .local int rx851_off
    .local int rx851_eos
    .local int rx851_rep
    .local pmc rx851_cur
    .local pmc rx851_curclass
    .local pmc rx851_bstack
    .local pmc rx851_cstack
    (rx851_cur, rx851_tgt, rx851_pos, rx851_curclass, rx851_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx851_cur
    length rx851_eos, rx851_tgt
    eq $I19, 1, rx851_restart2265
    gt rx851_pos, rx851_eos, rx851_fail2266
    repr_get_attr_int $I11, self, rx851_curclass, "$!from"
    ne $I11, -1, rxscan852_done2272
    goto rxscan852_scan2271
  rxscan852_loop2270:
    inc rx851_pos
    gt rx851_pos, rx851_eos, rx851_fail2266
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!from", rx851_pos
  rxscan852_scan2271:
    nqp_rxmark rx851_bstack, rxscan852_loop2270, rx851_pos, 0
  rxscan852_done2272:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."name"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2266
    nqp_rxmark rx851_bstack, rxsubrule853_pass2273, -1, 0
  rxsubrule853_pass2273:
    rx851_cstack = rx851_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    nqp_rxmark rx851_bstack, rxquantr854_done2275, rx851_pos, 0
  rxquantr854_loop2274:
    repr_bind_attr_int rx851_cur, rx851_curclass, "$!pos", rx851_pos
    $P11 = rx851_cur."args"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2266
    goto rxsubrule855_pass2276
  rxsubrule855_back2277:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx851_curclass, "$!pos"
    lt $I11, 0, rx851_fail2266
  rxsubrule855_pass2276:
    rx851_cstack = rx851_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule855_back2277
    push rx851_bstack, $I11
    push rx851_bstack, 0
    push rx851_bstack, rx851_pos
    elements $I11, rx851_cstack
    push rx851_bstack, $I11
    repr_get_attr_int rx851_pos, $P11, rx851_curclass, "$!pos"
    nqp_rxpeek $I19, rx851_bstack, rxquantr854_done2275
    inc $I19
    inc $I19
    set rx851_rep, rx851_bstack[$I19]
    nqp_rxcommit rx851_bstack, rxquantr854_done2275
    inc rx851_rep
  rxquantr854_done2275:
    rx851_cur."!cursor_pass"(rx851_pos, "term:sym<name>", 'backtrack'=>1)
    .return (rx851_cur)
  rx851_restart2265:
    repr_get_attr_obj rx851_cstack, rx851_cur, rx851_curclass, "$!cstack"
  rx851_fail2266:
    unless rx851_bstack, rx851_done2264
    pop $I19, rx851_bstack
    if_null rx851_cstack, rx851_cstack_done2269
    unless rx851_cstack, rx851_cstack_done2269
    dec $I19
    set $P11, rx851_cstack[$I19]
  rx851_cstack_done2269:
    pop rx851_rep, rx851_bstack
    pop rx851_pos, rx851_bstack
    pop $I19, rx851_bstack
    lt rx851_pos, -1, rx851_done2264
    lt rx851_pos, 0, rx851_fail2266
    eq $I19, 0, rx851_fail2266
    nqp_islist $I20, rx851_cstack
    unless $I20, rx851_jump2267
    elements $I18, rx851_bstack
    le $I18, 0, rx851_cut2268
    dec $I18
    set $I18, rx851_bstack[$I18]
  rx851_cut2268:
    assign rx851_cstack, $I18
  rx851_jump2267:
    jump $I19
  rx851_done2264:
    rx851_cur."!cursor_fail"()
    .return (rx851_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_140_1347719921.536_caps" :subid("cuid_memo_216_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["name"], $P5002
    box $P5003, 2
    set $P5001["args"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_140_1347719921.536_nfa" :subid("cuid_memo_217_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "name"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "args"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_141_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1141
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx856_tgt
    .local int rx856_pos
    .local int rx856_off
    .local int rx856_eos
    .local int rx856_rep
    .local pmc rx856_cur
    .local pmc rx856_curclass
    .local pmc rx856_bstack
    .local pmc rx856_cstack
    (rx856_cur, rx856_tgt, rx856_pos, rx856_curclass, rx856_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx856_cur
    length rx856_eos, rx856_tgt
    eq $I19, 1, rx856_restart2280
    gt rx856_pos, rx856_eos, rx856_fail2281
    repr_get_attr_int $I11, self, rx856_curclass, "$!from"
    ne $I11, -1, rxscan857_done2287
    goto rxscan857_scan2286
  rxscan857_loop2285:
    inc rx856_pos
    gt rx856_pos, rx856_eos, rx856_fail2281
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!from", rx856_pos
  rxscan857_scan2286:
    nqp_rxmark rx856_bstack, rxscan857_loop2285, rx856_pos, 0
  rxscan857_done2287:
    add $I11, rx856_pos, 5
    gt $I11, rx856_eos, rx856_fail2281
    substr $S10, rx856_tgt, rx856_pos, 5
    ne $S10, ucs4:"pir::", rx856_fail2281
    add rx856_pos, 5
    nqp_rxmark rx856_bstack, rxcap858_fail2289, rx856_pos, 0
    nqp_rxmark rx856_bstack, rxquantr859_done2291, -1, 0
  rxquantr859_loop2290:
    ge rx856_pos, rx856_eos, rx856_fail2281
    is_cclass $I11, .CCLASS_WORD, rx856_tgt, rx856_pos
    unless $I11, rx856_fail2281
    add rx856_pos, 1
    nqp_rxpeek $I19, rx856_bstack, rxquantr859_done2291
    inc $I19
    inc $I19
    set rx856_rep, rx856_bstack[$I19]
    nqp_rxcommit rx856_bstack, rxquantr859_done2291
    inc rx856_rep
    nqp_rxmark rx856_bstack, rxquantr859_done2291, rx856_pos, rx856_rep
    goto rxquantr859_loop2290
  rxquantr859_done2291:
    nqp_rxpeek $I19, rx856_bstack, rxcap858_fail2289
    inc $I19
    set $I11, rx856_bstack[$I19]
    $P11 = rx856_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx856_pos)
    rx856_cstack = rx856_cur."!cursor_capture"($P11, "op")
    goto rxcap858_done2288
  rxcap858_fail2289:
    goto rx856_fail2281
  rxcap858_done2288:
    nqp_rxmark rx856_bstack, rxquantr860_done2293, rx856_pos, 0
  rxquantr860_loop2292:
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."args"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2281
    goto rxsubrule861_pass2294
  rxsubrule861_back2295:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2281
  rxsubrule861_pass2294:
    rx856_cstack = rx856_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule861_back2295
    push rx856_bstack, $I11
    push rx856_bstack, 0
    push rx856_bstack, rx856_pos
    elements $I11, rx856_cstack
    push rx856_bstack, $I11
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    nqp_rxpeek $I19, rx856_bstack, rxquantr860_done2293
    inc $I19
    inc $I19
    set rx856_rep, rx856_bstack[$I19]
    nqp_rxcommit rx856_bstack, rxquantr860_done2293
    inc rx856_rep
  rxquantr860_done2293:
    rx856_cur."!cursor_pass"(rx856_pos, "term:sym<pir::op>", 'backtrack'=>1)
    .return (rx856_cur)
  rx856_restart2280:
    repr_get_attr_obj rx856_cstack, rx856_cur, rx856_curclass, "$!cstack"
  rx856_fail2281:
    unless rx856_bstack, rx856_done2279
    pop $I19, rx856_bstack
    if_null rx856_cstack, rx856_cstack_done2284
    unless rx856_cstack, rx856_cstack_done2284
    dec $I19
    set $P11, rx856_cstack[$I19]
  rx856_cstack_done2284:
    pop rx856_rep, rx856_bstack
    pop rx856_pos, rx856_bstack
    pop $I19, rx856_bstack
    lt rx856_pos, -1, rx856_done2279
    lt rx856_pos, 0, rx856_fail2281
    eq $I19, 0, rx856_fail2281
    nqp_islist $I20, rx856_cstack
    unless $I20, rx856_jump2282
    elements $I18, rx856_bstack
    le $I18, 0, rx856_cut2283
    dec $I18
    set $I18, rx856_bstack[$I18]
  rx856_cut2283:
    assign rx856_cstack, $I18
  rx856_jump2282:
    jump $I19
  rx856_done2279:
    rx856_cur."!cursor_fail"()
    .return (rx856_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_141_1347719921.536_caps" :subid("cuid_memo_218_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["op"], $P5002
    box $P5003, 2
    set $P5001["args"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_141_1347719921.536_nfa" :subid("cuid_memo_219_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 112
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 105
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 58
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 58
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 1
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 4
    push $P5027, $P5028
    box $P5029, 8192
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 1
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 7
    push $P5031, $P5034
    box $P5035, 1
    push $P5031, $P5035
    box $P5036, 0
    push $P5031, $P5036
    box $P5037, 9
    push $P5031, $P5037
    box $P5038, 8
    push $P5031, $P5038
    box $P5039, "args"
    push $P5031, $P5039
    box $P5040, 0
    push $P5031, $P5040
    box $P5041, 1
    push $P5031, $P5041
    box $P5042, 0
    push $P5031, $P5042
    box $P5043, 0
    push $P5031, $P5043
    push $P5001, $P5031
    new $P5044, 'ResizablePMCArray'
    push $P5001, $P5044
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_142_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1145
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx862_tgt
    .local int rx862_pos
    .local int rx862_off
    .local int rx862_eos
    .local int rx862_rep
    .local pmc rx862_cur
    .local pmc rx862_curclass
    .local pmc rx862_bstack
    .local pmc rx862_cstack
    (rx862_cur, rx862_tgt, rx862_pos, rx862_curclass, rx862_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx862_cur
    length rx862_eos, rx862_tgt
    eq $I19, 1, rx862_restart2298
    gt rx862_pos, rx862_eos, rx862_fail2299
    repr_get_attr_int $I11, self, rx862_curclass, "$!from"
    ne $I11, -1, rxscan863_done2305
    goto rxscan863_scan2304
  rxscan863_loop2303:
    inc rx862_pos
    gt rx862_pos, rx862_eos, rx862_fail2299
    repr_bind_attr_int rx862_cur, rx862_curclass, "$!from", rx862_pos
  rxscan863_scan2304:
    nqp_rxmark rx862_bstack, rxscan863_loop2303, rx862_pos, 0
  rxscan863_done2305:
    add $I11, rx862_pos, 12
    gt $I11, rx862_eos, rx862_fail2299
    substr $S10, rx862_tgt, rx862_pos, 12
    ne $S10, ucs4:"pir::const::", rx862_fail2299
    add rx862_pos, 12
    nqp_rxmark rx862_bstack, rxcap864_fail2307, rx862_pos, 0
    nqp_rxmark rx862_bstack, rxquantr865_done2309, -1, 0
  rxquantr865_loop2308:
    ge rx862_pos, rx862_eos, rx862_fail2299
    is_cclass $I11, .CCLASS_WORD, rx862_tgt, rx862_pos
    unless $I11, rx862_fail2299
    add rx862_pos, 1
    nqp_rxpeek $I19, rx862_bstack, rxquantr865_done2309
    inc $I19
    inc $I19
    set rx862_rep, rx862_bstack[$I19]
    nqp_rxcommit rx862_bstack, rxquantr865_done2309
    inc rx862_rep
    nqp_rxmark rx862_bstack, rxquantr865_done2309, rx862_pos, rx862_rep
    goto rxquantr865_loop2308
  rxquantr865_done2309:
    nqp_rxpeek $I19, rx862_bstack, rxcap864_fail2307
    inc $I19
    set $I11, rx862_bstack[$I19]
    $P11 = rx862_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx862_pos)
    rx862_cstack = rx862_cur."!cursor_capture"($P11, "const")
    goto rxcap864_done2306
  rxcap864_fail2307:
    goto rx862_fail2299
  rxcap864_done2306:
    rx862_cur."!cursor_pass"(rx862_pos, "term:sym<pir::const>", 'backtrack'=>1)
    .return (rx862_cur)
  rx862_restart2298:
    repr_get_attr_obj rx862_cstack, rx862_cur, rx862_curclass, "$!cstack"
  rx862_fail2299:
    unless rx862_bstack, rx862_done2297
    pop $I19, rx862_bstack
    if_null rx862_cstack, rx862_cstack_done2302
    unless rx862_cstack, rx862_cstack_done2302
    dec $I19
    set $P11, rx862_cstack[$I19]
  rx862_cstack_done2302:
    pop rx862_rep, rx862_bstack
    pop rx862_pos, rx862_bstack
    pop $I19, rx862_bstack
    lt rx862_pos, -1, rx862_done2297
    lt rx862_pos, 0, rx862_fail2299
    eq $I19, 0, rx862_fail2299
    nqp_islist $I20, rx862_cstack
    unless $I20, rx862_jump2300
    elements $I18, rx862_bstack
    le $I18, 0, rx862_cut2301
    dec $I18
    set $I18, rx862_bstack[$I18]
  rx862_cut2301:
    assign rx862_cstack, $I18
  rx862_jump2300:
    jump $I19
  rx862_done2297:
    rx862_cur."!cursor_fail"()
    .return (rx862_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_142_1347719921.536_caps" :subid("cuid_memo_220_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["const"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_142_1347719921.536_nfa" :subid("cuid_memo_221_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 112
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 105
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 58
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 58
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 99
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 111
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 110
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 2
    push $P5035, $P5036
    box $P5037, 115
    push $P5035, $P5037
    box $P5038, 10
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 2
    push $P5039, $P5040
    box $P5041, 116
    push $P5039, $P5041
    box $P5042, 11
    push $P5039, $P5042
    push $P5001, $P5039
    new $P5043, 'ResizablePMCArray'
    box $P5044, 2
    push $P5043, $P5044
    box $P5045, 58
    push $P5043, $P5045
    box $P5046, 12
    push $P5043, $P5046
    push $P5001, $P5043
    new $P5047, 'ResizablePMCArray'
    box $P5048, 2
    push $P5047, $P5048
    box $P5049, 58
    push $P5047, $P5049
    box $P5050, 13
    push $P5047, $P5050
    push $P5001, $P5047
    new $P5051, 'ResizablePMCArray'
    box $P5052, 1
    push $P5051, $P5052
    box $P5053, 0
    push $P5051, $P5053
    box $P5054, 14
    push $P5051, $P5054
    push $P5001, $P5051
    new $P5055, 'ResizablePMCArray'
    box $P5056, 4
    push $P5055, $P5056
    box $P5057, 8192
    push $P5055, $P5057
    box $P5058, 15
    push $P5055, $P5058
    push $P5001, $P5055
    new $P5059, 'ResizablePMCArray'
    box $P5060, 1
    push $P5059, $P5060
    box $P5061, 0
    push $P5059, $P5061
    box $P5062, 14
    push $P5059, $P5062
    box $P5063, 1
    push $P5059, $P5063
    box $P5064, 0
    push $P5059, $P5064
    box $P5065, 0
    push $P5059, $P5065
    push $P5001, $P5059
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_143_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1149
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx866_tgt
    .local int rx866_pos
    .local int rx866_off
    .local int rx866_eos
    .local int rx866_rep
    .local pmc rx866_cur
    .local pmc rx866_curclass
    .local pmc rx866_bstack
    .local pmc rx866_cstack
    (rx866_cur, rx866_tgt, rx866_pos, rx866_curclass, rx866_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx866_cur
    length rx866_eos, rx866_tgt
    eq $I19, 1, rx866_restart2312
    gt rx866_pos, rx866_eos, rx866_fail2313
    repr_get_attr_int $I11, self, rx866_curclass, "$!from"
    ne $I11, -1, rxscan867_done2319
    goto rxscan867_scan2318
  rxscan867_loop2317:
    inc rx866_pos
    gt rx866_pos, rx866_eos, rx866_fail2313
    repr_bind_attr_int rx866_cur, rx866_curclass, "$!from", rx866_pos
  rxscan867_scan2318:
    nqp_rxmark rx866_bstack, rxscan867_loop2317, rx866_pos, 0
  rxscan867_done2319:
    add $I11, rx866_pos, 5
    gt $I11, rx866_eos, rx866_fail2313
    substr $S10, rx866_tgt, rx866_pos, 5
    ne $S10, ucs4:"nqp::", rx866_fail2313
    add rx866_pos, 5
    nqp_rxmark rx866_bstack, rxcap868_fail2321, rx866_pos, 0
    nqp_rxmark rx866_bstack, rxquantr869_done2323, -1, 0
  rxquantr869_loop2322:
    ge rx866_pos, rx866_eos, rx866_fail2313
    is_cclass $I11, .CCLASS_WORD, rx866_tgt, rx866_pos
    unless $I11, rx866_fail2313
    add rx866_pos, 1
    nqp_rxpeek $I19, rx866_bstack, rxquantr869_done2323
    inc $I19
    inc $I19
    set rx866_rep, rx866_bstack[$I19]
    nqp_rxcommit rx866_bstack, rxquantr869_done2323
    inc rx866_rep
    nqp_rxmark rx866_bstack, rxquantr869_done2323, rx866_pos, rx866_rep
    goto rxquantr869_loop2322
  rxquantr869_done2323:
    nqp_rxpeek $I19, rx866_bstack, rxcap868_fail2321
    inc $I19
    set $I11, rx866_bstack[$I19]
    $P11 = rx866_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx866_pos)
    rx866_cstack = rx866_cur."!cursor_capture"($P11, "op")
    goto rxcap868_done2320
  rxcap868_fail2321:
    goto rx866_fail2313
  rxcap868_done2320:
    nqp_rxmark rx866_bstack, rxquantr870_done2325, rx866_pos, 0
  rxquantr870_loop2324:
    repr_bind_attr_int rx866_cur, rx866_curclass, "$!pos", rx866_pos
    $P11 = rx866_cur."args"()
    repr_get_attr_int $I11, $P11, rx866_curclass, "$!pos"
    lt $I11, 0, rx866_fail2313
    goto rxsubrule871_pass2326
  rxsubrule871_back2327:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx866_curclass, "$!pos"
    lt $I11, 0, rx866_fail2313
  rxsubrule871_pass2326:
    rx866_cstack = rx866_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule871_back2327
    push rx866_bstack, $I11
    push rx866_bstack, 0
    push rx866_bstack, rx866_pos
    elements $I11, rx866_cstack
    push rx866_bstack, $I11
    repr_get_attr_int rx866_pos, $P11, rx866_curclass, "$!pos"
    nqp_rxpeek $I19, rx866_bstack, rxquantr870_done2325
    inc $I19
    inc $I19
    set rx866_rep, rx866_bstack[$I19]
    nqp_rxcommit rx866_bstack, rxquantr870_done2325
    inc rx866_rep
  rxquantr870_done2325:
    rx866_cur."!cursor_pass"(rx866_pos, "term:sym<nqp::op>", 'backtrack'=>1)
    .return (rx866_cur)
  rx866_restart2312:
    repr_get_attr_obj rx866_cstack, rx866_cur, rx866_curclass, "$!cstack"
  rx866_fail2313:
    unless rx866_bstack, rx866_done2311
    pop $I19, rx866_bstack
    if_null rx866_cstack, rx866_cstack_done2316
    unless rx866_cstack, rx866_cstack_done2316
    dec $I19
    set $P11, rx866_cstack[$I19]
  rx866_cstack_done2316:
    pop rx866_rep, rx866_bstack
    pop rx866_pos, rx866_bstack
    pop $I19, rx866_bstack
    lt rx866_pos, -1, rx866_done2311
    lt rx866_pos, 0, rx866_fail2313
    eq $I19, 0, rx866_fail2313
    nqp_islist $I20, rx866_cstack
    unless $I20, rx866_jump2314
    elements $I18, rx866_bstack
    le $I18, 0, rx866_cut2315
    dec $I18
    set $I18, rx866_bstack[$I18]
  rx866_cut2315:
    assign rx866_cstack, $I18
  rx866_jump2314:
    jump $I19
  rx866_done2311:
    rx866_cur."!cursor_fail"()
    .return (rx866_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_143_1347719921.536_caps" :subid("cuid_memo_222_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["op"], $P5002
    box $P5003, 2
    set $P5001["args"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_143_1347719921.536_nfa" :subid("cuid_memo_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 110
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 113
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 112
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 58
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 58
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 1
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 4
    push $P5027, $P5028
    box $P5029, 8192
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 1
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 7
    push $P5031, $P5034
    box $P5035, 1
    push $P5031, $P5035
    box $P5036, 0
    push $P5031, $P5036
    box $P5037, 9
    push $P5031, $P5037
    box $P5038, 8
    push $P5031, $P5038
    box $P5039, "args"
    push $P5031, $P5039
    box $P5040, 0
    push $P5031, $P5040
    box $P5041, 1
    push $P5031, $P5041
    box $P5042, 0
    push $P5031, $P5042
    box $P5043, 0
    push $P5031, $P5043
    push $P5001, $P5031
    new $P5044, 'ResizablePMCArray'
    push $P5001, $P5044
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_144_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1153
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_394_1347719921.536' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx872_tgt
    .local int rx872_pos
    .local int rx872_off
    .local int rx872_eos
    .local int rx872_rep
    .local pmc rx872_cur
    .local pmc rx872_curclass
    .local pmc rx872_bstack
    .local pmc rx872_cstack
    (rx872_cur, rx872_tgt, rx872_pos, rx872_curclass, rx872_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx872_cur
    length rx872_eos, rx872_tgt
    eq $I19, 1, rx872_restart2330
    gt rx872_pos, rx872_eos, rx872_fail2331
    repr_get_attr_int $I11, self, rx872_curclass, "$!from"
    ne $I11, -1, rxscan873_done2337
    goto rxscan873_scan2336
  rxscan873_loop2335:
    inc rx872_pos
    gt rx872_pos, rx872_eos, rx872_fail2331
    repr_bind_attr_int rx872_cur, rx872_curclass, "$!from", rx872_pos
  rxscan873_scan2336:
    nqp_rxmark rx872_bstack, rxscan873_loop2335, rx872_pos, 0
  rxscan873_done2337:
    add $I11, rx872_pos, 3
    gt $I11, rx872_eos, rx872_fail2331
    substr $S10, rx872_tgt, rx872_pos, 3
    ne $S10, ucs4:"{*}", rx872_fail2331
    add rx872_pos, 3
    repr_bind_attr_int rx872_cur, rx872_curclass, "$!pos", rx872_pos
    $P11 = rx872_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx872_curclass, "$!pos"
    lt $I11, 0, rx872_fail2331
  alt874_02339:
    nqp_rxmark rx872_bstack, alt874_12343, rx872_pos, 0
    repr_bind_attr_int rx872_cur, rx872_curclass, "$!pos", rx872_pos
    store_lex unicode:"$\x{a2}", rx872_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_394_1347719921.536' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx872_fail2331
    goto alt874_end2338
  alt874_12343:
    repr_bind_attr_int rx872_cur, rx872_curclass, "$!pos", rx872_pos
    $P11 = rx872_cur."panic"("{*} may only appear in proto")
    repr_get_attr_int $I11, $P11, rx872_curclass, "$!pos"
    lt $I11, 0, rx872_fail2331
    repr_get_attr_int rx872_pos, $P11, rx872_curclass, "$!pos"
  alt874_end2338:
    rx872_cur."!cursor_pass"(rx872_pos, "term:sym<onlystar>", 'backtrack'=>1)
    .return (rx872_cur)
  rx872_restart2330:
    repr_get_attr_obj rx872_cstack, rx872_cur, rx872_curclass, "$!cstack"
  rx872_fail2331:
    unless rx872_bstack, rx872_done2329
    pop $I19, rx872_bstack
    if_null rx872_cstack, rx872_cstack_done2334
    unless rx872_cstack, rx872_cstack_done2334
    dec $I19
    set $P11, rx872_cstack[$I19]
  rx872_cstack_done2334:
    pop rx872_rep, rx872_bstack
    pop rx872_pos, rx872_bstack
    pop $I19, rx872_bstack
    lt rx872_pos, -1, rx872_done2329
    lt rx872_pos, 0, rx872_fail2331
    eq $I19, 0, rx872_fail2331
    nqp_islist $I20, rx872_cstack
    unless $I20, rx872_jump2332
    elements $I18, rx872_bstack
    le $I18, 0, rx872_cut2333
    dec $I18
    set $I18, rx872_bstack[$I18]
  rx872_cut2333:
    assign rx872_cstack, $I18
  rx872_jump2332:
    jump $I19
  rx872_done2329:
    rx872_cur."!cursor_fail"()
    .return (rx872_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_144_1347719921.536_caps" :subid("cuid_memo_224_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_144_1347719921.536_nfa" :subid("cuid_memo_225_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 42
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 125
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "ENDSTMT"
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_394_1347719921.536") :anon :lex :outer("cuid_144_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1155

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback2340
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback2341
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5005
  fallback2341:
    unless_null $P5002, vivi_8752342
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_8752342:
    set $P5001, $P5002
  fallback2340:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_145_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1158
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx877_tgt
    .local int rx877_pos
    .local int rx877_off
    .local int rx877_eos
    .local int rx877_rep
    .local pmc rx877_cur
    .local pmc rx877_curclass
    .local pmc rx877_bstack
    .local pmc rx877_cstack
    (rx877_cur, rx877_tgt, rx877_pos, rx877_curclass, rx877_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx877_cur
    length rx877_eos, rx877_tgt
    eq $I19, 1, rx877_restart2347
    gt rx877_pos, rx877_eos, rx877_fail2348
    repr_get_attr_int $I11, self, rx877_curclass, "$!from"
    ne $I11, -1, rxscan878_done2354
    goto rxscan878_scan2353
  rxscan878_loop2352:
    inc rx877_pos
    gt rx877_pos, rx877_eos, rx877_fail2348
    repr_bind_attr_int rx877_cur, rx877_curclass, "$!from", rx877_pos
  rxscan878_scan2353:
    nqp_rxmark rx877_bstack, rxscan878_loop2352, rx877_pos, 0
  rxscan878_done2354:
    add $I11, rx877_pos, 1
    gt $I11, rx877_eos, rx877_fail2348
    substr $S10, rx877_tgt, rx877_pos, 1
    ne $S10, ucs4:"(", rx877_fail2348
    add rx877_pos, 1
    repr_bind_attr_int rx877_cur, rx877_curclass, "$!pos", rx877_pos
    $P11 = rx877_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx877_curclass, "$!pos"
    lt $I11, 0, rx877_fail2348
    nqp_rxmark rx877_bstack, rxsubrule879_pass2355, -1, 0
  rxsubrule879_pass2355:
    rx877_cstack = rx877_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx877_pos, $P11, rx877_curclass, "$!pos"
    add $I11, rx877_pos, 1
    gt $I11, rx877_eos, rx877_fail2348
    substr $S10, rx877_tgt, rx877_pos, 1
    ne $S10, ucs4:")", rx877_fail2348
    add rx877_pos, 1
    rx877_cur."!cursor_pass"(rx877_pos, "args", 'backtrack'=>1)
    .return (rx877_cur)
  rx877_restart2347:
    repr_get_attr_obj rx877_cstack, rx877_cur, rx877_curclass, "$!cstack"
  rx877_fail2348:
    unless rx877_bstack, rx877_done2346
    pop $I19, rx877_bstack
    if_null rx877_cstack, rx877_cstack_done2351
    unless rx877_cstack, rx877_cstack_done2351
    dec $I19
    set $P11, rx877_cstack[$I19]
  rx877_cstack_done2351:
    pop rx877_rep, rx877_bstack
    pop rx877_pos, rx877_bstack
    pop $I19, rx877_bstack
    lt rx877_pos, -1, rx877_done2346
    lt rx877_pos, 0, rx877_fail2348
    eq $I19, 0, rx877_fail2348
    nqp_islist $I20, rx877_cstack
    unless $I20, rx877_jump2349
    elements $I18, rx877_bstack
    le $I18, 0, rx877_cut2350
    dec $I18
    set $I18, rx877_bstack[$I18]
  rx877_cut2350:
    assign rx877_cstack, $I18
  rx877_jump2349:
    jump $I19
  rx877_done2346:
    rx877_cur."!cursor_fail"()
    .return (rx877_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_145_1347719921.536_caps" :subid("cuid_memo_226_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["arglist"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_145_1347719921.536_nfa" :subid("cuid_memo_227_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 40
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "arglist"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 41
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_146_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1162
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx880_tgt
    .local int rx880_pos
    .local int rx880_off
    .local int rx880_eos
    .local int rx880_rep
    .local pmc rx880_cur
    .local pmc rx880_curclass
    .local pmc rx880_bstack
    .local pmc rx880_cstack
    (rx880_cur, rx880_tgt, rx880_pos, rx880_curclass, rx880_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx880_cur
    length rx880_eos, rx880_tgt
    eq $I19, 1, rx880_restart2358
    gt rx880_pos, rx880_eos, rx880_fail2359
    repr_get_attr_int $I11, self, rx880_curclass, "$!from"
    ne $I11, -1, rxscan881_done2365
    goto rxscan881_scan2364
  rxscan881_loop2363:
    inc rx880_pos
    gt rx880_pos, rx880_eos, rx880_fail2359
    repr_bind_attr_int rx880_cur, rx880_curclass, "$!from", rx880_pos
  rxscan881_scan2364:
    nqp_rxmark rx880_bstack, rxscan881_loop2363, rx880_pos, 0
  rxscan881_done2365:
    repr_bind_attr_int rx880_cur, rx880_curclass, "$!pos", rx880_pos
    $P11 = rx880_cur."ws"()
    repr_get_attr_int $I11, $P11, rx880_curclass, "$!pos"
    lt $I11, 0, rx880_fail2359
    repr_get_attr_int rx880_pos, $P11, rx880_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt883_02368
    nqp_push_label $P11, alt883_12370
    nqp_rxmark rx880_bstack, alt883_end2367, -1, 0
    rx880_cur."!alt"(rx880_pos, "alt_nfa__36_1347719923.938", $P11)
    goto rx880_fail2359
  alt883_02368:
    repr_bind_attr_int rx880_cur, rx880_curclass, "$!pos", rx880_pos
    $P11 = rx880_cur."EXPR"("f=")
    repr_get_attr_int $I11, $P11, rx880_curclass, "$!pos"
    lt $I11, 0, rx880_fail2359
    nqp_rxmark rx880_bstack, rxsubrule884_pass2369, -1, 0
  rxsubrule884_pass2369:
    rx880_cstack = rx880_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx880_pos, $P11, rx880_curclass, "$!pos"
    goto alt883_end2367
  alt883_12370:
    goto alt883_end2367
  alt883_end2367:
    nqp_rxcommit rx880_bstack, alt883_end2367
    rx880_cur."!cursor_pass"(rx880_pos, "arglist", 'backtrack'=>1)
    .return (rx880_cur)
  rx880_restart2358:
    repr_get_attr_obj rx880_cstack, rx880_cur, rx880_curclass, "$!cstack"
  rx880_fail2359:
    unless rx880_bstack, rx880_done2357
    pop $I19, rx880_bstack
    if_null rx880_cstack, rx880_cstack_done2362
    unless rx880_cstack, rx880_cstack_done2362
    dec $I19
    set $P11, rx880_cstack[$I19]
  rx880_cstack_done2362:
    pop rx880_rep, rx880_bstack
    pop rx880_pos, rx880_bstack
    pop $I19, rx880_bstack
    lt rx880_pos, -1, rx880_done2357
    lt rx880_pos, 0, rx880_fail2359
    eq $I19, 0, rx880_fail2359
    nqp_islist $I20, rx880_cstack
    unless $I20, rx880_jump2360
    elements $I18, rx880_bstack
    le $I18, 0, rx880_cut2361
    dec $I18
    set $I18, rx880_bstack[$I18]
  rx880_cut2361:
    assign rx880_cstack, $I18
  rx880_jump2360:
    jump $I19
  rx880_done2357:
    rx880_cur."!cursor_fail"()
    .return (rx880_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_146_1347719921.536_caps" :subid("cuid_memo_228_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_146_1347719921.536_nfa" :subid("cuid_memo_229_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "ws"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "EXPR"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_146_1347719921.536_alt_nfa__36_1347719923.938" :subid("cuid_memo_230_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "EXPR"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 1
    push $P5010, $P5011
    box $P5012, 0
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_147_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1171
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx886_tgt
    .local int rx886_pos
    .local int rx886_off
    .local int rx886_eos
    .local int rx886_rep
    .local pmc rx886_cur
    .local pmc rx886_curclass
    .local pmc rx886_bstack
    .local pmc rx886_cstack
    (rx886_cur, rx886_tgt, rx886_pos, rx886_curclass, rx886_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx886_cur
    length rx886_eos, rx886_tgt
    eq $I19, 1, rx886_restart2374
    gt rx886_pos, rx886_eos, rx886_fail2375
    repr_get_attr_int $I11, self, rx886_curclass, "$!from"
    ne $I11, -1, rxscan887_done2381
    goto rxscan887_scan2380
  rxscan887_loop2379:
    inc rx886_pos
    gt rx886_pos, rx886_eos, rx886_fail2375
    repr_bind_attr_int rx886_cur, rx886_curclass, "$!from", rx886_pos
  rxscan887_scan2380:
    nqp_rxmark rx886_bstack, rxscan887_loop2379, rx886_pos, 0
  rxscan887_done2381:
    repr_bind_attr_int rx886_cur, rx886_curclass, "$!pos", rx886_pos
    $P11 = rx886_cur."value"()
    repr_get_attr_int $I11, $P11, rx886_curclass, "$!pos"
    lt $I11, 0, rx886_fail2375
    nqp_rxmark rx886_bstack, rxsubrule888_pass2382, -1, 0
  rxsubrule888_pass2382:
    rx886_cstack = rx886_cur."!cursor_capture"($P11, "value")
    repr_get_attr_int rx886_pos, $P11, rx886_curclass, "$!pos"
    rx886_cur."!cursor_pass"(rx886_pos, "term:sym<value>", 'backtrack'=>1)
    .return (rx886_cur)
  rx886_restart2374:
    repr_get_attr_obj rx886_cstack, rx886_cur, rx886_curclass, "$!cstack"
  rx886_fail2375:
    unless rx886_bstack, rx886_done2373
    pop $I19, rx886_bstack
    if_null rx886_cstack, rx886_cstack_done2378
    unless rx886_cstack, rx886_cstack_done2378
    dec $I19
    set $P11, rx886_cstack[$I19]
  rx886_cstack_done2378:
    pop rx886_rep, rx886_bstack
    pop rx886_pos, rx886_bstack
    pop $I19, rx886_bstack
    lt rx886_pos, -1, rx886_done2373
    lt rx886_pos, 0, rx886_fail2375
    eq $I19, 0, rx886_fail2375
    nqp_islist $I20, rx886_cstack
    unless $I20, rx886_jump2376
    elements $I18, rx886_bstack
    le $I18, 0, rx886_cut2377
    dec $I18
    set $I18, rx886_bstack[$I18]
  rx886_cut2377:
    assign rx886_cstack, $I18
  rx886_jump2376:
    jump $I19
  rx886_done2373:
    rx886_cur."!cursor_fail"()
    .return (rx886_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_147_1347719921.536_caps" :subid("cuid_memo_231_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["value"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_147_1347719921.536_nfa" :subid("cuid_memo_232_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "value"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_148_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1173
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx889_tgt
    .local int rx889_pos
    .local int rx889_off
    .local int rx889_eos
    .local int rx889_rep
    .local pmc rx889_cur
    .local pmc rx889_curclass
    .local pmc rx889_bstack
    .local pmc rx889_cstack
    (rx889_cur, rx889_tgt, rx889_pos, rx889_curclass, rx889_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx889_cur
    length rx889_eos, rx889_tgt
    eq $I19, 1, rx889_restart2385
    gt rx889_pos, rx889_eos, rx889_fail2386
    repr_get_attr_int $I11, self, rx889_curclass, "$!from"
    ne $I11, -1, rxscan890_done2392
    goto rxscan890_scan2391
  rxscan890_loop2390:
    inc rx889_pos
    gt rx889_pos, rx889_eos, rx889_fail2386
    repr_bind_attr_int rx889_cur, rx889_curclass, "$!from", rx889_pos
  rxscan890_scan2391:
    nqp_rxmark rx889_bstack, rxscan890_loop2390, rx889_pos, 0
  rxscan890_done2392:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt891_02394
    nqp_push_label $P11, alt891_12396
    nqp_rxmark rx889_bstack, alt891_end2393, -1, 0
    rx889_cur."!alt"(rx889_pos, "alt_nfa__37_1347719923.947", $P11)
    goto rx889_fail2386
  alt891_02394:
    repr_bind_attr_int rx889_cur, rx889_curclass, "$!pos", rx889_pos
    $P11 = rx889_cur."quote"()
    repr_get_attr_int $I11, $P11, rx889_curclass, "$!pos"
    lt $I11, 0, rx889_fail2386
    nqp_rxmark rx889_bstack, rxsubrule892_pass2395, -1, 0
  rxsubrule892_pass2395:
    rx889_cstack = rx889_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx889_pos, $P11, rx889_curclass, "$!pos"
    goto alt891_end2393
  alt891_12396:
    repr_bind_attr_int rx889_cur, rx889_curclass, "$!pos", rx889_pos
    $P11 = rx889_cur."number"()
    repr_get_attr_int $I11, $P11, rx889_curclass, "$!pos"
    lt $I11, 0, rx889_fail2386
    nqp_rxmark rx889_bstack, rxsubrule893_pass2397, -1, 0
  rxsubrule893_pass2397:
    rx889_cstack = rx889_cur."!cursor_capture"($P11, "number")
    repr_get_attr_int rx889_pos, $P11, rx889_curclass, "$!pos"
    goto alt891_end2393
  alt891_end2393:
    rx889_cur."!cursor_pass"(rx889_pos, "value", 'backtrack'=>1)
    .return (rx889_cur)
  rx889_restart2385:
    repr_get_attr_obj rx889_cstack, rx889_cur, rx889_curclass, "$!cstack"
  rx889_fail2386:
    unless rx889_bstack, rx889_done2384
    pop $I19, rx889_bstack
    if_null rx889_cstack, rx889_cstack_done2389
    unless rx889_cstack, rx889_cstack_done2389
    dec $I19
    set $P11, rx889_cstack[$I19]
  rx889_cstack_done2389:
    pop rx889_rep, rx889_bstack
    pop rx889_pos, rx889_bstack
    pop $I19, rx889_bstack
    lt rx889_pos, -1, rx889_done2384
    lt rx889_pos, 0, rx889_fail2386
    eq $I19, 0, rx889_fail2386
    nqp_islist $I20, rx889_cstack
    unless $I20, rx889_jump2387
    elements $I18, rx889_bstack
    le $I18, 0, rx889_cut2388
    dec $I18
    set $I18, rx889_bstack[$I18]
  rx889_cut2388:
    assign rx889_cstack, $I18
  rx889_jump2387:
    jump $I19
  rx889_done2384:
    rx889_cur."!cursor_fail"()
    .return (rx889_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_148_1347719921.536_caps" :subid("cuid_memo_233_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote"], $P5002
    box $P5003, 0
    set $P5001["number"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_148_1347719921.536_nfa" :subid("cuid_memo_234_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "quote"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    box $P5007, 8
    push $P5003, $P5007
    box $P5008, "number"
    push $P5003, $P5008
    box $P5009, 0
    push $P5003, $P5009
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_148_1347719921.536_alt_nfa__37_1347719923.947" :subid("cuid_memo_235_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "quote"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "number"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_149_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1178
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx894_tgt
    .local int rx894_pos
    .local int rx894_off
    .local int rx894_eos
    .local int rx894_rep
    .local pmc rx894_cur
    .local pmc rx894_curclass
    .local pmc rx894_bstack
    .local pmc rx894_cstack
    (rx894_cur, rx894_tgt, rx894_pos, rx894_curclass, rx894_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx894_cur
    length rx894_eos, rx894_tgt
    eq $I19, 1, rx894_restart2400
    gt rx894_pos, rx894_eos, rx894_fail2401
    repr_get_attr_int $I11, self, rx894_curclass, "$!from"
    ne $I11, -1, rxscan895_done2407
    goto rxscan895_scan2406
  rxscan895_loop2405:
    inc rx894_pos
    gt rx894_pos, rx894_eos, rx894_fail2401
    repr_bind_attr_int rx894_cur, rx894_curclass, "$!from", rx894_pos
  rxscan895_scan2406:
    nqp_rxmark rx894_bstack, rxscan895_loop2405, rx894_pos, 0
  rxscan895_done2407:
    nqp_rxmark rx894_bstack, rxcap896_fail2409, rx894_pos, 0
    nqp_rxmark rx894_bstack, rxquantr897_done2411, rx894_pos, 0
  rxquantr897_loop2410:
  alt898_02413:
    nqp_rxmark rx894_bstack, alt898_12414, rx894_pos, 0
    add $I11, rx894_pos, 1
    gt $I11, rx894_eos, rx894_fail2401
    substr $S10, rx894_tgt, rx894_pos, 1
    ne $S10, ucs4:"-", rx894_fail2401
    add rx894_pos, 1
    goto alt898_end2412
  alt898_12414:
    ge rx894_pos, rx894_eos, rx894_fail2401
    substr $S11, rx894_tgt, rx894_pos, 1
    index $I11, ucs4:"+", $S11
    lt $I11, 0, rx894_fail2401
    inc rx894_pos
  alt898_end2412:
    nqp_rxpeek $I19, rx894_bstack, rxquantr897_done2411
    inc $I19
    inc $I19
    set rx894_rep, rx894_bstack[$I19]
    nqp_rxcommit rx894_bstack, rxquantr897_done2411
    inc rx894_rep
  rxquantr897_done2411:
    nqp_rxpeek $I19, rx894_bstack, rxcap896_fail2409
    inc $I19
    set $I11, rx894_bstack[$I19]
    $P11 = rx894_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx894_pos)
    rx894_cstack = rx894_cur."!cursor_capture"($P11, "sign")
    goto rxcap896_done2408
  rxcap896_fail2409:
    goto rx894_fail2401
  rxcap896_done2408:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt899_02416
    nqp_push_label $P11, alt899_12418
    nqp_rxmark rx894_bstack, alt899_end2415, -1, 0
    rx894_cur."!alt"(rx894_pos, "alt_nfa__38_1347719923.956", $P11)
    goto rx894_fail2401
  alt899_02416:
    repr_bind_attr_int rx894_cur, rx894_curclass, "$!pos", rx894_pos
    $P11 = rx894_cur."dec_number"()
    repr_get_attr_int $I11, $P11, rx894_curclass, "$!pos"
    lt $I11, 0, rx894_fail2401
    nqp_rxmark rx894_bstack, rxsubrule900_pass2417, -1, 0
  rxsubrule900_pass2417:
    rx894_cstack = rx894_cur."!cursor_capture"($P11, "dec_number")
    repr_get_attr_int rx894_pos, $P11, rx894_curclass, "$!pos"
    goto alt899_end2415
  alt899_12418:
    repr_bind_attr_int rx894_cur, rx894_curclass, "$!pos", rx894_pos
    $P11 = rx894_cur."integer"()
    repr_get_attr_int $I11, $P11, rx894_curclass, "$!pos"
    lt $I11, 0, rx894_fail2401
    nqp_rxmark rx894_bstack, rxsubrule901_pass2419, -1, 0
  rxsubrule901_pass2419:
    rx894_cstack = rx894_cur."!cursor_capture"($P11, "integer")
    repr_get_attr_int rx894_pos, $P11, rx894_curclass, "$!pos"
    goto alt899_end2415
  alt899_end2415:
    nqp_rxcommit rx894_bstack, alt899_end2415
    rx894_cur."!cursor_pass"(rx894_pos, "number", 'backtrack'=>1)
    .return (rx894_cur)
  rx894_restart2400:
    repr_get_attr_obj rx894_cstack, rx894_cur, rx894_curclass, "$!cstack"
  rx894_fail2401:
    unless rx894_bstack, rx894_done2399
    pop $I19, rx894_bstack
    if_null rx894_cstack, rx894_cstack_done2404
    unless rx894_cstack, rx894_cstack_done2404
    dec $I19
    set $P11, rx894_cstack[$I19]
  rx894_cstack_done2404:
    pop rx894_rep, rx894_bstack
    pop rx894_pos, rx894_bstack
    pop $I19, rx894_bstack
    lt rx894_pos, -1, rx894_done2399
    lt rx894_pos, 0, rx894_fail2401
    eq $I19, 0, rx894_fail2401
    nqp_islist $I20, rx894_cstack
    unless $I20, rx894_jump2402
    elements $I18, rx894_bstack
    le $I18, 0, rx894_cut2403
    dec $I18
    set $I18, rx894_bstack[$I18]
  rx894_cut2403:
    assign rx894_cstack, $I18
  rx894_jump2402:
    jump $I19
  rx894_done2399:
    rx894_cur."!cursor_fail"()
    .return (rx894_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_149_1347719921.536_caps" :subid("cuid_memo_236_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sign"], $P5002
    box $P5003, 0
    set $P5001["dec_number"], $P5003
    box $P5004, 0
    set $P5001["integer"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_149_1347719921.536_nfa" :subid("cuid_memo_237_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 0
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "dec_number"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    box $P5014, 8
    push $P5010, $P5014
    box $P5015, "integer"
    push $P5010, $P5015
    box $P5016, 0
    push $P5010, $P5016
    push $P5001, $P5010
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_149_1347719921.536_alt_nfa__38_1347719923.956" :subid("cuid_memo_238_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "dec_number"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "integer"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote" :subid("cuid_150_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1183
    .param pmc self 
    $P5001 = self."!protoregex"("quote")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_151_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1184
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx902_tgt
    .local int rx902_pos
    .local int rx902_off
    .local int rx902_eos
    .local int rx902_rep
    .local pmc rx902_cur
    .local pmc rx902_curclass
    .local pmc rx902_bstack
    .local pmc rx902_cstack
    (rx902_cur, rx902_tgt, rx902_pos, rx902_curclass, rx902_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx902_cur
    length rx902_eos, rx902_tgt
    eq $I19, 1, rx902_restart2422
    gt rx902_pos, rx902_eos, rx902_fail2423
    repr_get_attr_int $I11, self, rx902_curclass, "$!from"
    ne $I11, -1, rxscan903_done2429
    goto rxscan903_scan2428
  rxscan903_loop2427:
    inc rx902_pos
    gt rx902_pos, rx902_eos, rx902_fail2423
    repr_bind_attr_int rx902_cur, rx902_curclass, "$!from", rx902_pos
  rxscan903_scan2428:
    nqp_rxmark rx902_bstack, rxscan903_loop2427, rx902_pos, 0
  rxscan903_done2429:
    ge rx902_pos, rx902_eos, rx902_fail2423
    substr $S11, rx902_tgt, rx902_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx902_fail2423
    repr_bind_attr_int rx902_cur, rx902_curclass, "$!pos", rx902_pos
    $P11 = rx902_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx902_curclass, "$!pos"
    lt $I11, 0, rx902_fail2423
    nqp_rxmark rx902_bstack, rxsubrule904_pass2430, -1, 0
  rxsubrule904_pass2430:
    rx902_cstack = rx902_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx902_pos, $P11, rx902_curclass, "$!pos"
    rx902_cur."!cursor_pass"(rx902_pos, "quote:sym<apos>", 'backtrack'=>1)
    .return (rx902_cur)
  rx902_restart2422:
    repr_get_attr_obj rx902_cstack, rx902_cur, rx902_curclass, "$!cstack"
  rx902_fail2423:
    unless rx902_bstack, rx902_done2421
    pop $I19, rx902_bstack
    if_null rx902_cstack, rx902_cstack_done2426
    unless rx902_cstack, rx902_cstack_done2426
    dec $I19
    set $P11, rx902_cstack[$I19]
  rx902_cstack_done2426:
    pop rx902_rep, rx902_bstack
    pop rx902_pos, rx902_bstack
    pop $I19, rx902_bstack
    lt rx902_pos, -1, rx902_done2421
    lt rx902_pos, 0, rx902_fail2423
    eq $I19, 0, rx902_fail2423
    nqp_islist $I20, rx902_cstack
    unless $I20, rx902_jump2424
    elements $I18, rx902_bstack
    le $I18, 0, rx902_cut2425
    dec $I18
    set $I18, rx902_bstack[$I18]
  rx902_cut2425:
    assign rx902_cstack, $I18
  rx902_jump2424:
    jump $I19
  rx902_done2421:
    rx902_cur."!cursor_fail"()
    .return (rx902_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_151_1347719921.536_caps" :subid("cuid_memo_239_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_151_1347719921.536_nfa" :subid("cuid_memo_240_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "'"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_152_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1185
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx905_tgt
    .local int rx905_pos
    .local int rx905_off
    .local int rx905_eos
    .local int rx905_rep
    .local pmc rx905_cur
    .local pmc rx905_curclass
    .local pmc rx905_bstack
    .local pmc rx905_cstack
    (rx905_cur, rx905_tgt, rx905_pos, rx905_curclass, rx905_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx905_cur
    length rx905_eos, rx905_tgt
    eq $I19, 1, rx905_restart2433
    gt rx905_pos, rx905_eos, rx905_fail2434
    repr_get_attr_int $I11, self, rx905_curclass, "$!from"
    ne $I11, -1, rxscan906_done2440
    goto rxscan906_scan2439
  rxscan906_loop2438:
    inc rx905_pos
    gt rx905_pos, rx905_eos, rx905_fail2434
    repr_bind_attr_int rx905_cur, rx905_curclass, "$!from", rx905_pos
  rxscan906_scan2439:
    nqp_rxmark rx905_bstack, rxscan906_loop2438, rx905_pos, 0
  rxscan906_done2440:
    ge rx905_pos, rx905_eos, rx905_fail2434
    substr $S11, rx905_tgt, rx905_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx905_fail2434
    repr_bind_attr_int rx905_cur, rx905_curclass, "$!pos", rx905_pos
    $P11 = rx905_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx905_curclass, "$!pos"
    lt $I11, 0, rx905_fail2434
    nqp_rxmark rx905_bstack, rxsubrule907_pass2441, -1, 0
  rxsubrule907_pass2441:
    rx905_cstack = rx905_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx905_pos, $P11, rx905_curclass, "$!pos"
    rx905_cur."!cursor_pass"(rx905_pos, "quote:sym<dblq>", 'backtrack'=>1)
    .return (rx905_cur)
  rx905_restart2433:
    repr_get_attr_obj rx905_cstack, rx905_cur, rx905_curclass, "$!cstack"
  rx905_fail2434:
    unless rx905_bstack, rx905_done2432
    pop $I19, rx905_bstack
    if_null rx905_cstack, rx905_cstack_done2437
    unless rx905_cstack, rx905_cstack_done2437
    dec $I19
    set $P11, rx905_cstack[$I19]
  rx905_cstack_done2437:
    pop rx905_rep, rx905_bstack
    pop rx905_pos, rx905_bstack
    pop $I19, rx905_bstack
    lt rx905_pos, -1, rx905_done2432
    lt rx905_pos, 0, rx905_fail2434
    eq $I19, 0, rx905_fail2434
    nqp_islist $I20, rx905_cstack
    unless $I20, rx905_jump2435
    elements $I18, rx905_bstack
    le $I18, 0, rx905_cut2436
    dec $I18
    set $I18, rx905_bstack[$I18]
  rx905_cut2436:
    assign rx905_cstack, $I18
  rx905_jump2435:
    jump $I19
  rx905_done2432:
    rx905_cur."!cursor_fail"()
    .return (rx905_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_152_1347719921.536_caps" :subid("cuid_memo_241_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_152_1347719921.536_nfa" :subid("cuid_memo_242_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "\""
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_153_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1186
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx908_tgt
    .local int rx908_pos
    .local int rx908_off
    .local int rx908_eos
    .local int rx908_rep
    .local pmc rx908_cur
    .local pmc rx908_curclass
    .local pmc rx908_bstack
    .local pmc rx908_cstack
    (rx908_cur, rx908_tgt, rx908_pos, rx908_curclass, rx908_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx908_cur
    length rx908_eos, rx908_tgt
    eq $I19, 1, rx908_restart2444
    gt rx908_pos, rx908_eos, rx908_fail2445
    repr_get_attr_int $I11, self, rx908_curclass, "$!from"
    ne $I11, -1, rxscan909_done2451
    goto rxscan909_scan2450
  rxscan909_loop2449:
    inc rx908_pos
    gt rx908_pos, rx908_eos, rx908_fail2445
    repr_bind_attr_int rx908_cur, rx908_curclass, "$!from", rx908_pos
  rxscan909_scan2450:
    nqp_rxmark rx908_bstack, rxscan909_loop2449, rx908_pos, 0
  rxscan909_done2451:
    nqp_rxmark rx908_bstack, rxcap910_fail2453, rx908_pos, 0
    add $I11, rx908_pos, 1
    gt $I11, rx908_eos, rx908_fail2445
    substr $S10, rx908_tgt, rx908_pos, 1
    ne $S10, ucs4:"q", rx908_fail2445
    add rx908_pos, 1
    nqp_rxpeek $I19, rx908_bstack, rxcap910_fail2453
    inc $I19
    set $I11, rx908_bstack[$I19]
    $P11 = rx908_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx908_pos)
    rx908_cstack = rx908_cur."!cursor_capture"($P11, "sym")
    goto rxcap910_done2452
  rxcap910_fail2453:
    goto rx908_fail2445
  rxcap910_done2452:
    le rx908_pos, 0, rx908_fail2445
    is_cclass $I11, .CCLASS_WORD, rx908_tgt, rx908_pos
    if $I11, rx908_fail2445
    sub $I11, rx908_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx908_tgt, $I11
    unless $I11, rx908_fail2445
    ge rx908_pos, rx908_eos, rx908_fail2445
    substr $S11, rx908_tgt, rx908_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx908_fail2445
    repr_bind_attr_int rx908_cur, rx908_curclass, "$!pos", rx908_pos
    $P11 = rx908_cur."ws"()
    repr_get_attr_int $I11, $P11, rx908_curclass, "$!pos"
    lt $I11, 0, rx908_fail2445
    repr_get_attr_int rx908_pos, $P11, rx908_curclass, "$!pos"
    repr_bind_attr_int rx908_cur, rx908_curclass, "$!pos", rx908_pos
    $P11 = rx908_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx908_curclass, "$!pos"
    lt $I11, 0, rx908_fail2445
    nqp_rxmark rx908_bstack, rxsubrule913_pass2456, -1, 0
  rxsubrule913_pass2456:
    rx908_cstack = rx908_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx908_pos, $P11, rx908_curclass, "$!pos"
    rx908_cur."!cursor_pass"(rx908_pos, "quote:sym<q>", 'backtrack'=>1)
    .return (rx908_cur)
  rx908_restart2444:
    repr_get_attr_obj rx908_cstack, rx908_cur, rx908_curclass, "$!cstack"
  rx908_fail2445:
    unless rx908_bstack, rx908_done2443
    pop $I19, rx908_bstack
    if_null rx908_cstack, rx908_cstack_done2448
    unless rx908_cstack, rx908_cstack_done2448
    dec $I19
    set $P11, rx908_cstack[$I19]
  rx908_cstack_done2448:
    pop rx908_rep, rx908_bstack
    pop rx908_pos, rx908_bstack
    pop $I19, rx908_bstack
    lt rx908_pos, -1, rx908_done2443
    lt rx908_pos, 0, rx908_fail2445
    eq $I19, 0, rx908_fail2445
    nqp_islist $I20, rx908_cstack
    unless $I20, rx908_jump2446
    elements $I18, rx908_bstack
    le $I18, 0, rx908_cut2447
    dec $I18
    set $I18, rx908_bstack[$I18]
  rx908_cut2447:
    assign rx908_cstack, $I18
  rx908_jump2446:
    jump $I19
  rx908_done2443:
    rx908_cur."!cursor_fail"()
    .return (rx908_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_153_1347719921.536_caps" :subid("cuid_memo_243_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["quote_EXPR"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_153_1347719921.536_nfa" :subid("cuid_memo_244_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 113
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 7
    push $P5011, $P5012
    box $P5013, "("
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_154_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1187
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx914_tgt
    .local int rx914_pos
    .local int rx914_off
    .local int rx914_eos
    .local int rx914_rep
    .local pmc rx914_cur
    .local pmc rx914_curclass
    .local pmc rx914_bstack
    .local pmc rx914_cstack
    (rx914_cur, rx914_tgt, rx914_pos, rx914_curclass, rx914_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx914_cur
    length rx914_eos, rx914_tgt
    eq $I19, 1, rx914_restart2459
    gt rx914_pos, rx914_eos, rx914_fail2460
    repr_get_attr_int $I11, self, rx914_curclass, "$!from"
    ne $I11, -1, rxscan915_done2466
    goto rxscan915_scan2465
  rxscan915_loop2464:
    inc rx914_pos
    gt rx914_pos, rx914_eos, rx914_fail2460
    repr_bind_attr_int rx914_cur, rx914_curclass, "$!from", rx914_pos
  rxscan915_scan2465:
    nqp_rxmark rx914_bstack, rxscan915_loop2464, rx914_pos, 0
  rxscan915_done2466:
    nqp_rxmark rx914_bstack, rxcap916_fail2468, rx914_pos, 0
    add $I11, rx914_pos, 2
    gt $I11, rx914_eos, rx914_fail2460
    substr $S10, rx914_tgt, rx914_pos, 2
    ne $S10, ucs4:"qq", rx914_fail2460
    add rx914_pos, 2
    nqp_rxpeek $I19, rx914_bstack, rxcap916_fail2468
    inc $I19
    set $I11, rx914_bstack[$I19]
    $P11 = rx914_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx914_pos)
    rx914_cstack = rx914_cur."!cursor_capture"($P11, "sym")
    goto rxcap916_done2467
  rxcap916_fail2468:
    goto rx914_fail2460
  rxcap916_done2467:
    le rx914_pos, 0, rx914_fail2460
    is_cclass $I11, .CCLASS_WORD, rx914_tgt, rx914_pos
    if $I11, rx914_fail2460
    sub $I11, rx914_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx914_tgt, $I11
    unless $I11, rx914_fail2460
    ge rx914_pos, rx914_eos, rx914_fail2460
    substr $S11, rx914_tgt, rx914_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx914_fail2460
    repr_bind_attr_int rx914_cur, rx914_curclass, "$!pos", rx914_pos
    $P11 = rx914_cur."ws"()
    repr_get_attr_int $I11, $P11, rx914_curclass, "$!pos"
    lt $I11, 0, rx914_fail2460
    repr_get_attr_int rx914_pos, $P11, rx914_curclass, "$!pos"
    repr_bind_attr_int rx914_cur, rx914_curclass, "$!pos", rx914_pos
    $P11 = rx914_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx914_curclass, "$!pos"
    lt $I11, 0, rx914_fail2460
    nqp_rxmark rx914_bstack, rxsubrule919_pass2471, -1, 0
  rxsubrule919_pass2471:
    rx914_cstack = rx914_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx914_pos, $P11, rx914_curclass, "$!pos"
    rx914_cur."!cursor_pass"(rx914_pos, "quote:sym<qq>", 'backtrack'=>1)
    .return (rx914_cur)
  rx914_restart2459:
    repr_get_attr_obj rx914_cstack, rx914_cur, rx914_curclass, "$!cstack"
  rx914_fail2460:
    unless rx914_bstack, rx914_done2458
    pop $I19, rx914_bstack
    if_null rx914_cstack, rx914_cstack_done2463
    unless rx914_cstack, rx914_cstack_done2463
    dec $I19
    set $P11, rx914_cstack[$I19]
  rx914_cstack_done2463:
    pop rx914_rep, rx914_bstack
    pop rx914_pos, rx914_bstack
    pop $I19, rx914_bstack
    lt rx914_pos, -1, rx914_done2458
    lt rx914_pos, 0, rx914_fail2460
    eq $I19, 0, rx914_fail2460
    nqp_islist $I20, rx914_cstack
    unless $I20, rx914_jump2461
    elements $I18, rx914_bstack
    le $I18, 0, rx914_cut2462
    dec $I18
    set $I18, rx914_bstack[$I18]
  rx914_cut2462:
    assign rx914_cstack, $I18
  rx914_jump2461:
    jump $I19
  rx914_done2458:
    rx914_cur."!cursor_fail"()
    .return (rx914_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_154_1347719921.536_caps" :subid("cuid_memo_245_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["quote_EXPR"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_154_1347719921.536_nfa" :subid("cuid_memo_246_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 113
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 113
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 1
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 7
    push $P5015, $P5016
    box $P5017, "("
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_155_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1188
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx920_tgt
    .local int rx920_pos
    .local int rx920_off
    .local int rx920_eos
    .local int rx920_rep
    .local pmc rx920_cur
    .local pmc rx920_curclass
    .local pmc rx920_bstack
    .local pmc rx920_cstack
    (rx920_cur, rx920_tgt, rx920_pos, rx920_curclass, rx920_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx920_cur
    length rx920_eos, rx920_tgt
    eq $I19, 1, rx920_restart2474
    gt rx920_pos, rx920_eos, rx920_fail2475
    repr_get_attr_int $I11, self, rx920_curclass, "$!from"
    ne $I11, -1, rxscan921_done2481
    goto rxscan921_scan2480
  rxscan921_loop2479:
    inc rx920_pos
    gt rx920_pos, rx920_eos, rx920_fail2475
    repr_bind_attr_int rx920_cur, rx920_curclass, "$!from", rx920_pos
  rxscan921_scan2480:
    nqp_rxmark rx920_bstack, rxscan921_loop2479, rx920_pos, 0
  rxscan921_done2481:
    nqp_rxmark rx920_bstack, rxcap922_fail2483, rx920_pos, 0
    add $I11, rx920_pos, 1
    gt $I11, rx920_eos, rx920_fail2475
    substr $S10, rx920_tgt, rx920_pos, 1
    ne $S10, ucs4:"Q", rx920_fail2475
    add rx920_pos, 1
    nqp_rxpeek $I19, rx920_bstack, rxcap922_fail2483
    inc $I19
    set $I11, rx920_bstack[$I19]
    $P11 = rx920_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx920_pos)
    rx920_cstack = rx920_cur."!cursor_capture"($P11, "sym")
    goto rxcap922_done2482
  rxcap922_fail2483:
    goto rx920_fail2475
  rxcap922_done2482:
    le rx920_pos, 0, rx920_fail2475
    is_cclass $I11, .CCLASS_WORD, rx920_tgt, rx920_pos
    if $I11, rx920_fail2475
    sub $I11, rx920_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx920_tgt, $I11
    unless $I11, rx920_fail2475
    ge rx920_pos, rx920_eos, rx920_fail2475
    substr $S11, rx920_tgt, rx920_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx920_fail2475
    repr_bind_attr_int rx920_cur, rx920_curclass, "$!pos", rx920_pos
    $P11 = rx920_cur."ws"()
    repr_get_attr_int $I11, $P11, rx920_curclass, "$!pos"
    lt $I11, 0, rx920_fail2475
    repr_get_attr_int rx920_pos, $P11, rx920_curclass, "$!pos"
    repr_bind_attr_int rx920_cur, rx920_curclass, "$!pos", rx920_pos
    $P11 = rx920_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx920_curclass, "$!pos"
    lt $I11, 0, rx920_fail2475
    nqp_rxmark rx920_bstack, rxsubrule925_pass2486, -1, 0
  rxsubrule925_pass2486:
    rx920_cstack = rx920_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx920_pos, $P11, rx920_curclass, "$!pos"
    rx920_cur."!cursor_pass"(rx920_pos, "quote:sym<Q>", 'backtrack'=>1)
    .return (rx920_cur)
  rx920_restart2474:
    repr_get_attr_obj rx920_cstack, rx920_cur, rx920_curclass, "$!cstack"
  rx920_fail2475:
    unless rx920_bstack, rx920_done2473
    pop $I19, rx920_bstack
    if_null rx920_cstack, rx920_cstack_done2478
    unless rx920_cstack, rx920_cstack_done2478
    dec $I19
    set $P11, rx920_cstack[$I19]
  rx920_cstack_done2478:
    pop rx920_rep, rx920_bstack
    pop rx920_pos, rx920_bstack
    pop $I19, rx920_bstack
    lt rx920_pos, -1, rx920_done2473
    lt rx920_pos, 0, rx920_fail2475
    eq $I19, 0, rx920_fail2475
    nqp_islist $I20, rx920_cstack
    unless $I20, rx920_jump2476
    elements $I18, rx920_bstack
    le $I18, 0, rx920_cut2477
    dec $I18
    set $I18, rx920_bstack[$I18]
  rx920_cut2477:
    assign rx920_cstack, $I18
  rx920_jump2476:
    jump $I19
  rx920_done2473:
    rx920_cur."!cursor_fail"()
    .return (rx920_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_155_1347719921.536_caps" :subid("cuid_memo_247_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["quote_EXPR"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_155_1347719921.536_nfa" :subid("cuid_memo_248_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 81
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 7
    push $P5011, $P5012
    box $P5013, "("
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_156_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1189
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx926_tgt
    .local int rx926_pos
    .local int rx926_off
    .local int rx926_eos
    .local int rx926_rep
    .local pmc rx926_cur
    .local pmc rx926_curclass
    .local pmc rx926_bstack
    .local pmc rx926_cstack
    (rx926_cur, rx926_tgt, rx926_pos, rx926_curclass, rx926_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx926_cur
    length rx926_eos, rx926_tgt
    eq $I19, 1, rx926_restart2489
    gt rx926_pos, rx926_eos, rx926_fail2490
    repr_get_attr_int $I11, self, rx926_curclass, "$!from"
    ne $I11, -1, rxscan927_done2496
    goto rxscan927_scan2495
  rxscan927_loop2494:
    inc rx926_pos
    gt rx926_pos, rx926_eos, rx926_fail2490
    repr_bind_attr_int rx926_cur, rx926_curclass, "$!from", rx926_pos
  rxscan927_scan2495:
    nqp_rxmark rx926_bstack, rxscan927_loop2494, rx926_pos, 0
  rxscan927_done2496:
    nqp_rxmark rx926_bstack, rxcap928_fail2498, rx926_pos, 0
    add $I11, rx926_pos, 5
    gt $I11, rx926_eos, rx926_fail2490
    substr $S10, rx926_tgt, rx926_pos, 5
    ne $S10, ucs4:"Q:PIR", rx926_fail2490
    add rx926_pos, 5
    nqp_rxpeek $I19, rx926_bstack, rxcap928_fail2498
    inc $I19
    set $I11, rx926_bstack[$I19]
    $P11 = rx926_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx926_pos)
    rx926_cstack = rx926_cur."!cursor_capture"($P11, "sym")
    goto rxcap928_done2497
  rxcap928_fail2498:
    goto rx926_fail2490
  rxcap928_done2497:
    repr_bind_attr_int rx926_cur, rx926_curclass, "$!pos", rx926_pos
    $P11 = rx926_cur."ws"()
    repr_get_attr_int $I11, $P11, rx926_curclass, "$!pos"
    lt $I11, 0, rx926_fail2490
    repr_get_attr_int rx926_pos, $P11, rx926_curclass, "$!pos"
    repr_bind_attr_int rx926_cur, rx926_curclass, "$!pos", rx926_pos
    $P11 = rx926_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx926_curclass, "$!pos"
    lt $I11, 0, rx926_fail2490
    nqp_rxmark rx926_bstack, rxsubrule930_pass2500, -1, 0
  rxsubrule930_pass2500:
    rx926_cstack = rx926_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx926_pos, $P11, rx926_curclass, "$!pos"
    rx926_cur."!cursor_pass"(rx926_pos, "quote:sym<Q:PIR>", 'backtrack'=>1)
    .return (rx926_cur)
  rx926_restart2489:
    repr_get_attr_obj rx926_cstack, rx926_cur, rx926_curclass, "$!cstack"
  rx926_fail2490:
    unless rx926_bstack, rx926_done2488
    pop $I19, rx926_bstack
    if_null rx926_cstack, rx926_cstack_done2493
    unless rx926_cstack, rx926_cstack_done2493
    dec $I19
    set $P11, rx926_cstack[$I19]
  rx926_cstack_done2493:
    pop rx926_rep, rx926_bstack
    pop rx926_pos, rx926_bstack
    pop $I19, rx926_bstack
    lt rx926_pos, -1, rx926_done2488
    lt rx926_pos, 0, rx926_fail2490
    eq $I19, 0, rx926_fail2490
    nqp_islist $I20, rx926_cstack
    unless $I20, rx926_jump2491
    elements $I18, rx926_bstack
    le $I18, 0, rx926_cut2492
    dec $I18
    set $I18, rx926_bstack[$I18]
  rx926_cut2492:
    assign rx926_cstack, $I18
  rx926_jump2491:
    jump $I19
  rx926_done2488:
    rx926_cur."!cursor_fail"()
    .return (rx926_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_156_1347719921.536_caps" :subid("cuid_memo_249_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["quote_EXPR"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_156_1347719921.536_nfa" :subid("cuid_memo_250_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 81
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 58
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 80
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 73
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 82
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "ws"
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "quote_EXPR"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_157_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1190
    .param pmc _lex_param_0 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx931_tgt
    .local int rx931_pos
    .local int rx931_off
    .local int rx931_eos
    .local int rx931_rep
    .local pmc rx931_cur
    .local pmc rx931_curclass
    .local pmc rx931_bstack
    .local pmc rx931_cstack
    (rx931_cur, rx931_tgt, rx931_pos, rx931_curclass, rx931_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx931_cur
    length rx931_eos, rx931_tgt
    eq $I19, 1, rx931_restart2503
    gt rx931_pos, rx931_eos, rx931_fail2504
    repr_get_attr_int $I11, self, rx931_curclass, "$!from"
    ne $I11, -1, rxscan932_done2510
    goto rxscan932_scan2509
  rxscan932_loop2508:
    inc rx931_pos
    gt rx931_pos, rx931_eos, rx931_fail2504
    repr_bind_attr_int rx931_cur, rx931_curclass, "$!from", rx931_pos
  rxscan932_scan2509:
    nqp_rxmark rx931_bstack, rxscan932_loop2508, rx931_pos, 0
  rxscan932_done2510:
    add $I11, rx931_pos, 1
    gt $I11, rx931_eos, rx931_fail2504
    substr $S10, rx931_tgt, rx931_pos, 1
    ne $S10, ucs4:"/", rx931_fail2504
    add rx931_pos, 1
    repr_bind_attr_int rx931_cur, rx931_curclass, "$!pos", rx931_pos
    $P11 = rx931_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx931_curclass, "$!pos"
    lt $I11, 0, rx931_fail2504
    repr_get_attr_int rx931_pos, $P11, rx931_curclass, "$!pos"
    repr_bind_attr_int rx931_cur, rx931_curclass, "$!pos", rx931_pos
    store_lex unicode:"$\x{a2}", rx931_cur
    unless_null $P101, fallback2512
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2513
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2513:
    unless_null $P5002, vivi_9342514
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_9342514:
    set $P101, $P5002
  fallback2512:
    repr_bind_attr_int rx931_cur, rx931_curclass, "$!pos", rx931_pos
    $P11 = rx931_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx931_curclass, "$!pos"
    lt $I11, 0, rx931_fail2504
    nqp_rxmark rx931_bstack, rxsubrule935_pass2515, -1, 0
  rxsubrule935_pass2515:
    rx931_cstack = rx931_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx931_pos, $P11, rx931_curclass, "$!pos"
    add $I11, rx931_pos, 1
    gt $I11, rx931_eos, rx931_fail2504
    substr $S10, rx931_tgt, rx931_pos, 1
    ne $S10, ucs4:"/", rx931_fail2504
    add rx931_pos, 1
    rx931_cur."!cursor_pass"(rx931_pos, "quote:sym</ />", 'backtrack'=>1)
    .return (rx931_cur)
  rx931_restart2503:
    repr_get_attr_obj rx931_cstack, rx931_cur, rx931_curclass, "$!cstack"
  rx931_fail2504:
    unless rx931_bstack, rx931_done2502
    pop $I19, rx931_bstack
    if_null rx931_cstack, rx931_cstack_done2507
    unless rx931_cstack, rx931_cstack_done2507
    dec $I19
    set $P11, rx931_cstack[$I19]
  rx931_cstack_done2507:
    pop rx931_rep, rx931_bstack
    pop rx931_pos, rx931_bstack
    pop $I19, rx931_bstack
    lt rx931_pos, -1, rx931_done2502
    lt rx931_pos, 0, rx931_fail2504
    eq $I19, 0, rx931_fail2504
    nqp_islist $I20, rx931_cstack
    unless $I20, rx931_jump2505
    elements $I18, rx931_bstack
    le $I18, 0, rx931_cut2506
    dec $I18
    set $I18, rx931_bstack[$I18]
  rx931_cut2506:
    assign rx931_cstack, $I18
  rx931_jump2505:
    jump $I19
  rx931_done2502:
    rx931_cur."!cursor_fail"()
    .return (rx931_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_157_1347719921.536_caps" :subid("cuid_memo_251_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["p6regex"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_157_1347719921.536_nfa" :subid("cuid_memo_252_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 47
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "newpad"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 1
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "LANG"
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 47
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_158_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1198
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx936_tgt
    .local int rx936_pos
    .local int rx936_off
    .local int rx936_eos
    .local int rx936_rep
    .local pmc rx936_cur
    .local pmc rx936_curclass
    .local pmc rx936_bstack
    .local pmc rx936_cstack
    (rx936_cur, rx936_tgt, rx936_pos, rx936_curclass, rx936_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx936_cur
    length rx936_eos, rx936_tgt
    eq $I19, 1, rx936_restart2518
    gt rx936_pos, rx936_eos, rx936_fail2519
    repr_get_attr_int $I11, self, rx936_curclass, "$!from"
    ne $I11, -1, rxscan937_done2525
    goto rxscan937_scan2524
  rxscan937_loop2523:
    inc rx936_pos
    gt rx936_pos, rx936_eos, rx936_fail2519
    repr_bind_attr_int rx936_cur, rx936_curclass, "$!from", rx936_pos
  rxscan937_scan2524:
    nqp_rxmark rx936_bstack, rxscan937_loop2523, rx936_pos, 0
  rxscan937_done2525:
    ge rx936_pos, rx936_eos, rx936_fail2519
    substr $S11, rx936_tgt, rx936_pos, 1
    index $I11, ucs4:"$", $S11
    lt $I11, 0, rx936_fail2519
    repr_bind_attr_int rx936_cur, rx936_curclass, "$!pos", rx936_pos
    $P11 = rx936_cur."quotemod_check"("s")
    repr_get_attr_int $I11, $P11, rx936_curclass, "$!pos"
    lt $I11, 0, rx936_fail2519
    repr_bind_attr_int rx936_cur, rx936_curclass, "$!pos", rx936_pos
    $P11 = rx936_cur."variable"()
    repr_get_attr_int $I11, $P11, rx936_curclass, "$!pos"
    lt $I11, 0, rx936_fail2519
    nqp_rxmark rx936_bstack, rxsubrule938_pass2526, -1, 0
  rxsubrule938_pass2526:
    rx936_cstack = rx936_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx936_pos, $P11, rx936_curclass, "$!pos"
    rx936_cur."!cursor_pass"(rx936_pos, "quote_escape:sym<$>", 'backtrack'=>1)
    .return (rx936_cur)
  rx936_restart2518:
    repr_get_attr_obj rx936_cstack, rx936_cur, rx936_curclass, "$!cstack"
  rx936_fail2519:
    unless rx936_bstack, rx936_done2517
    pop $I19, rx936_bstack
    if_null rx936_cstack, rx936_cstack_done2522
    unless rx936_cstack, rx936_cstack_done2522
    dec $I19
    set $P11, rx936_cstack[$I19]
  rx936_cstack_done2522:
    pop rx936_rep, rx936_bstack
    pop rx936_pos, rx936_bstack
    pop $I19, rx936_bstack
    lt rx936_pos, -1, rx936_done2517
    lt rx936_pos, 0, rx936_fail2519
    eq $I19, 0, rx936_fail2519
    nqp_islist $I20, rx936_cstack
    unless $I20, rx936_jump2520
    elements $I18, rx936_bstack
    le $I18, 0, rx936_cut2521
    dec $I18
    set $I18, rx936_bstack[$I18]
  rx936_cut2521:
    assign rx936_cstack, $I18
  rx936_jump2520:
    jump $I19
  rx936_done2517:
    rx936_cur."!cursor_fail"()
    .return (rx936_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_158_1347719921.536_caps" :subid("cuid_memo_253_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["variable"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_158_1347719921.536_nfa" :subid("cuid_memo_254_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_159_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1199
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx939_tgt
    .local int rx939_pos
    .local int rx939_off
    .local int rx939_eos
    .local int rx939_rep
    .local pmc rx939_cur
    .local pmc rx939_curclass
    .local pmc rx939_bstack
    .local pmc rx939_cstack
    (rx939_cur, rx939_tgt, rx939_pos, rx939_curclass, rx939_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx939_cur
    length rx939_eos, rx939_tgt
    eq $I19, 1, rx939_restart2529
    gt rx939_pos, rx939_eos, rx939_fail2530
    repr_get_attr_int $I11, self, rx939_curclass, "$!from"
    ne $I11, -1, rxscan940_done2536
    goto rxscan940_scan2535
  rxscan940_loop2534:
    inc rx939_pos
    gt rx939_pos, rx939_eos, rx939_fail2530
    repr_bind_attr_int rx939_cur, rx939_curclass, "$!from", rx939_pos
  rxscan940_scan2535:
    nqp_rxmark rx939_bstack, rxscan940_loop2534, rx939_pos, 0
  rxscan940_done2536:
    ge rx939_pos, rx939_eos, rx939_fail2530
    substr $S11, rx939_tgt, rx939_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx939_fail2530
    repr_bind_attr_int rx939_cur, rx939_curclass, "$!pos", rx939_pos
    $P11 = rx939_cur."quotemod_check"("c")
    repr_get_attr_int $I11, $P11, rx939_curclass, "$!pos"
    lt $I11, 0, rx939_fail2530
    repr_bind_attr_int rx939_cur, rx939_curclass, "$!pos", rx939_pos
    $P11 = rx939_cur."block"()
    repr_get_attr_int $I11, $P11, rx939_curclass, "$!pos"
    lt $I11, 0, rx939_fail2530
    nqp_rxmark rx939_bstack, rxsubrule941_pass2537, -1, 0
  rxsubrule941_pass2537:
    rx939_cstack = rx939_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx939_pos, $P11, rx939_curclass, "$!pos"
    rx939_cur."!cursor_pass"(rx939_pos, "quote_escape:sym<{ }>", 'backtrack'=>1)
    .return (rx939_cur)
  rx939_restart2529:
    repr_get_attr_obj rx939_cstack, rx939_cur, rx939_curclass, "$!cstack"
  rx939_fail2530:
    unless rx939_bstack, rx939_done2528
    pop $I19, rx939_bstack
    if_null rx939_cstack, rx939_cstack_done2533
    unless rx939_cstack, rx939_cstack_done2533
    dec $I19
    set $P11, rx939_cstack[$I19]
  rx939_cstack_done2533:
    pop rx939_rep, rx939_bstack
    pop rx939_pos, rx939_bstack
    pop $I19, rx939_bstack
    lt rx939_pos, -1, rx939_done2528
    lt rx939_pos, 0, rx939_fail2530
    eq $I19, 0, rx939_fail2530
    nqp_islist $I20, rx939_cstack
    unless $I20, rx939_jump2531
    elements $I18, rx939_bstack
    le $I18, 0, rx939_cut2532
    dec $I18
    set $I18, rx939_bstack[$I18]
  rx939_cut2532:
    assign rx939_cstack, $I18
  rx939_jump2531:
    jump $I19
  rx939_done2528:
    rx939_cur."!cursor_fail"()
    .return (rx939_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_159_1347719921.536_caps" :subid("cuid_memo_255_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["block"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_159_1347719921.536_nfa" :subid("cuid_memo_256_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "{"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_160_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1200
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx942_tgt
    .local int rx942_pos
    .local int rx942_off
    .local int rx942_eos
    .local int rx942_rep
    .local pmc rx942_cur
    .local pmc rx942_curclass
    .local pmc rx942_bstack
    .local pmc rx942_cstack
    (rx942_cur, rx942_tgt, rx942_pos, rx942_curclass, rx942_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx942_cur
    length rx942_eos, rx942_tgt
    eq $I19, 1, rx942_restart2540
    gt rx942_pos, rx942_eos, rx942_fail2541
    repr_get_attr_int $I11, self, rx942_curclass, "$!from"
    ne $I11, -1, rxscan943_done2547
    goto rxscan943_scan2546
  rxscan943_loop2545:
    inc rx942_pos
    gt rx942_pos, rx942_eos, rx942_fail2541
    repr_bind_attr_int rx942_cur, rx942_curclass, "$!from", rx942_pos
  rxscan943_scan2546:
    nqp_rxmark rx942_bstack, rxscan943_loop2545, rx942_pos, 0
  rxscan943_done2547:
    add $I11, rx942_pos, 2
    gt $I11, rx942_eos, rx942_fail2541
    substr $S10, rx942_tgt, rx942_pos, 2
    ne $S10, ucs4:"\\e", rx942_fail2541
    add rx942_pos, 2
    repr_bind_attr_int rx942_cur, rx942_curclass, "$!pos", rx942_pos
    $P11 = rx942_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx942_curclass, "$!pos"
    lt $I11, 0, rx942_fail2541
    rx942_cur."!cursor_pass"(rx942_pos, "quote_escape:sym<esc>", 'backtrack'=>1)
    .return (rx942_cur)
  rx942_restart2540:
    repr_get_attr_obj rx942_cstack, rx942_cur, rx942_curclass, "$!cstack"
  rx942_fail2541:
    unless rx942_bstack, rx942_done2539
    pop $I19, rx942_bstack
    if_null rx942_cstack, rx942_cstack_done2544
    unless rx942_cstack, rx942_cstack_done2544
    dec $I19
    set $P11, rx942_cstack[$I19]
  rx942_cstack_done2544:
    pop rx942_rep, rx942_bstack
    pop rx942_pos, rx942_bstack
    pop $I19, rx942_bstack
    lt rx942_pos, -1, rx942_done2539
    lt rx942_pos, 0, rx942_fail2541
    eq $I19, 0, rx942_fail2541
    nqp_islist $I20, rx942_cstack
    unless $I20, rx942_jump2542
    elements $I18, rx942_bstack
    le $I18, 0, rx942_cut2543
    dec $I18
    set $I18, rx942_bstack[$I18]
  rx942_cut2543:
    assign rx942_cstack, $I18
  rx942_jump2542:
    jump $I19
  rx942_done2539:
    rx942_cur."!cursor_fail"()
    .return (rx942_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_160_1347719921.536_caps" :subid("cuid_memo_257_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_160_1347719921.536_nfa" :subid("cuid_memo_258_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 92
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "quotemod_check"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_161_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1202
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx944_tgt
    .local int rx944_pos
    .local int rx944_off
    .local int rx944_eos
    .local int rx944_rep
    .local pmc rx944_cur
    .local pmc rx944_curclass
    .local pmc rx944_bstack
    .local pmc rx944_cstack
    (rx944_cur, rx944_tgt, rx944_pos, rx944_curclass, rx944_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx944_cur
    length rx944_eos, rx944_tgt
    eq $I19, 1, rx944_restart2550
    gt rx944_pos, rx944_eos, rx944_fail2551
    repr_get_attr_int $I11, self, rx944_curclass, "$!from"
    ne $I11, -1, rxscan945_done2557
    goto rxscan945_scan2556
  rxscan945_loop2555:
    inc rx944_pos
    gt rx944_pos, rx944_eos, rx944_fail2551
    repr_bind_attr_int rx944_cur, rx944_curclass, "$!from", rx944_pos
  rxscan945_scan2556:
    nqp_rxmark rx944_bstack, rxscan945_loop2555, rx944_pos, 0
  rxscan945_done2557:
    add $I11, rx944_pos, 1
    gt $I11, rx944_eos, rx944_fail2551
    substr $S10, rx944_tgt, rx944_pos, 1
    ne $S10, ucs4:"(", rx944_fail2551
    add rx944_pos, 1
    repr_bind_attr_int rx944_cur, rx944_curclass, "$!pos", rx944_pos
    $P11 = rx944_cur."ws"()
    repr_get_attr_int $I11, $P11, rx944_curclass, "$!pos"
    lt $I11, 0, rx944_fail2551
    repr_get_attr_int rx944_pos, $P11, rx944_curclass, "$!pos"
    nqp_rxmark rx944_bstack, rxquantr947_done2560, rx944_pos, 0
  rxquantr947_loop2559:
    repr_bind_attr_int rx944_cur, rx944_curclass, "$!pos", rx944_pos
    $P11 = rx944_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx944_curclass, "$!pos"
    lt $I11, 0, rx944_fail2551
    goto rxsubrule948_pass2561
  rxsubrule948_back2562:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx944_curclass, "$!pos"
    lt $I11, 0, rx944_fail2551
  rxsubrule948_pass2561:
    rx944_cstack = rx944_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule948_back2562
    push rx944_bstack, $I11
    push rx944_bstack, 0
    push rx944_bstack, rx944_pos
    elements $I11, rx944_cstack
    push rx944_bstack, $I11
    repr_get_attr_int rx944_pos, $P11, rx944_curclass, "$!pos"
    nqp_rxpeek $I19, rx944_bstack, rxquantr947_done2560
    inc $I19
    inc $I19
    set rx944_rep, rx944_bstack[$I19]
    nqp_rxcommit rx944_bstack, rxquantr947_done2560
    inc rx944_rep
  rxquantr947_done2560:
    add $I11, rx944_pos, 1
    gt $I11, rx944_eos, rx944_fail2551
    substr $S10, rx944_tgt, rx944_pos, 1
    ne $S10, ucs4:")", rx944_fail2551
    add rx944_pos, 1
    rx944_cur."!cursor_pass"(rx944_pos, "circumfix:sym<( )>", 'backtrack'=>1)
    .return (rx944_cur)
  rx944_restart2550:
    repr_get_attr_obj rx944_cstack, rx944_cur, rx944_curclass, "$!cstack"
  rx944_fail2551:
    unless rx944_bstack, rx944_done2549
    pop $I19, rx944_bstack
    if_null rx944_cstack, rx944_cstack_done2554
    unless rx944_cstack, rx944_cstack_done2554
    dec $I19
    set $P11, rx944_cstack[$I19]
  rx944_cstack_done2554:
    pop rx944_rep, rx944_bstack
    pop rx944_pos, rx944_bstack
    pop $I19, rx944_bstack
    lt rx944_pos, -1, rx944_done2549
    lt rx944_pos, 0, rx944_fail2551
    eq $I19, 0, rx944_fail2551
    nqp_islist $I20, rx944_cstack
    unless $I20, rx944_jump2552
    elements $I18, rx944_bstack
    le $I18, 0, rx944_cut2553
    dec $I18
    set $I18, rx944_bstack[$I18]
  rx944_cut2553:
    assign rx944_cstack, $I18
  rx944_jump2552:
    jump $I19
  rx944_done2549:
    rx944_cur."!cursor_fail"()
    .return (rx944_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_161_1347719921.536_caps" :subid("cuid_memo_259_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_161_1347719921.536_nfa" :subid("cuid_memo_260_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 40
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "EXPR"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    box $P5015, 1
    push $P5011, $P5015
    box $P5016, 0
    push $P5011, $P5016
    box $P5017, 4
    push $P5011, $P5017
    push $P5001, $P5011
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 41
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_162_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1203
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx949_tgt
    .local int rx949_pos
    .local int rx949_off
    .local int rx949_eos
    .local int rx949_rep
    .local pmc rx949_cur
    .local pmc rx949_curclass
    .local pmc rx949_bstack
    .local pmc rx949_cstack
    (rx949_cur, rx949_tgt, rx949_pos, rx949_curclass, rx949_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx949_cur
    length rx949_eos, rx949_tgt
    eq $I19, 1, rx949_restart2565
    gt rx949_pos, rx949_eos, rx949_fail2566
    repr_get_attr_int $I11, self, rx949_curclass, "$!from"
    ne $I11, -1, rxscan950_done2572
    goto rxscan950_scan2571
  rxscan950_loop2570:
    inc rx949_pos
    gt rx949_pos, rx949_eos, rx949_fail2566
    repr_bind_attr_int rx949_cur, rx949_curclass, "$!from", rx949_pos
  rxscan950_scan2571:
    nqp_rxmark rx949_bstack, rxscan950_loop2570, rx949_pos, 0
  rxscan950_done2572:
    add $I11, rx949_pos, 1
    gt $I11, rx949_eos, rx949_fail2566
    substr $S10, rx949_tgt, rx949_pos, 1
    ne $S10, ucs4:"[", rx949_fail2566
    add rx949_pos, 1
    repr_bind_attr_int rx949_cur, rx949_curclass, "$!pos", rx949_pos
    $P11 = rx949_cur."ws"()
    repr_get_attr_int $I11, $P11, rx949_curclass, "$!pos"
    lt $I11, 0, rx949_fail2566
    repr_get_attr_int rx949_pos, $P11, rx949_curclass, "$!pos"
    nqp_rxmark rx949_bstack, rxquantr952_done2575, rx949_pos, 0
  rxquantr952_loop2574:
    repr_bind_attr_int rx949_cur, rx949_curclass, "$!pos", rx949_pos
    $P11 = rx949_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx949_curclass, "$!pos"
    lt $I11, 0, rx949_fail2566
    goto rxsubrule953_pass2576
  rxsubrule953_back2577:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx949_curclass, "$!pos"
    lt $I11, 0, rx949_fail2566
  rxsubrule953_pass2576:
    rx949_cstack = rx949_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule953_back2577
    push rx949_bstack, $I11
    push rx949_bstack, 0
    push rx949_bstack, rx949_pos
    elements $I11, rx949_cstack
    push rx949_bstack, $I11
    repr_get_attr_int rx949_pos, $P11, rx949_curclass, "$!pos"
    nqp_rxpeek $I19, rx949_bstack, rxquantr952_done2575
    inc $I19
    inc $I19
    set rx949_rep, rx949_bstack[$I19]
    nqp_rxcommit rx949_bstack, rxquantr952_done2575
    inc rx949_rep
  rxquantr952_done2575:
    add $I11, rx949_pos, 1
    gt $I11, rx949_eos, rx949_fail2566
    substr $S10, rx949_tgt, rx949_pos, 1
    ne $S10, ucs4:"]", rx949_fail2566
    add rx949_pos, 1
    rx949_cur."!cursor_pass"(rx949_pos, "circumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx949_cur)
  rx949_restart2565:
    repr_get_attr_obj rx949_cstack, rx949_cur, rx949_curclass, "$!cstack"
  rx949_fail2566:
    unless rx949_bstack, rx949_done2564
    pop $I19, rx949_bstack
    if_null rx949_cstack, rx949_cstack_done2569
    unless rx949_cstack, rx949_cstack_done2569
    dec $I19
    set $P11, rx949_cstack[$I19]
  rx949_cstack_done2569:
    pop rx949_rep, rx949_bstack
    pop rx949_pos, rx949_bstack
    pop $I19, rx949_bstack
    lt rx949_pos, -1, rx949_done2564
    lt rx949_pos, 0, rx949_fail2566
    eq $I19, 0, rx949_fail2566
    nqp_islist $I20, rx949_cstack
    unless $I20, rx949_jump2567
    elements $I18, rx949_bstack
    le $I18, 0, rx949_cut2568
    dec $I18
    set $I18, rx949_bstack[$I18]
  rx949_cut2568:
    assign rx949_cstack, $I18
  rx949_jump2567:
    jump $I19
  rx949_done2564:
    rx949_cur."!cursor_fail"()
    .return (rx949_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_162_1347719921.536_caps" :subid("cuid_memo_261_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_162_1347719921.536_nfa" :subid("cuid_memo_262_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 91
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "EXPR"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    box $P5015, 1
    push $P5011, $P5015
    box $P5016, 0
    push $P5011, $P5016
    box $P5017, 4
    push $P5011, $P5017
    push $P5001, $P5011
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 93
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_163_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1204
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx954_tgt
    .local int rx954_pos
    .local int rx954_off
    .local int rx954_eos
    .local int rx954_rep
    .local pmc rx954_cur
    .local pmc rx954_curclass
    .local pmc rx954_bstack
    .local pmc rx954_cstack
    (rx954_cur, rx954_tgt, rx954_pos, rx954_curclass, rx954_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx954_cur
    length rx954_eos, rx954_tgt
    eq $I19, 1, rx954_restart2580
    gt rx954_pos, rx954_eos, rx954_fail2581
    repr_get_attr_int $I11, self, rx954_curclass, "$!from"
    ne $I11, -1, rxscan955_done2587
    goto rxscan955_scan2586
  rxscan955_loop2585:
    inc rx954_pos
    gt rx954_pos, rx954_eos, rx954_fail2581
    repr_bind_attr_int rx954_cur, rx954_curclass, "$!from", rx954_pos
  rxscan955_scan2586:
    nqp_rxmark rx954_bstack, rxscan955_loop2585, rx954_pos, 0
  rxscan955_done2587:
    ge rx954_pos, rx954_eos, rx954_fail2581
    substr $S11, rx954_tgt, rx954_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx954_fail2581
    repr_bind_attr_int rx954_cur, rx954_curclass, "$!pos", rx954_pos
    $P11 = rx954_cur."quote_EXPR"(":q", ":w")
    repr_get_attr_int $I11, $P11, rx954_curclass, "$!pos"
    lt $I11, 0, rx954_fail2581
    nqp_rxmark rx954_bstack, rxsubrule956_pass2588, -1, 0
  rxsubrule956_pass2588:
    rx954_cstack = rx954_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx954_pos, $P11, rx954_curclass, "$!pos"
    rx954_cur."!cursor_pass"(rx954_pos, "circumfix:sym<ang>", 'backtrack'=>1)
    .return (rx954_cur)
  rx954_restart2580:
    repr_get_attr_obj rx954_cstack, rx954_cur, rx954_curclass, "$!cstack"
  rx954_fail2581:
    unless rx954_bstack, rx954_done2579
    pop $I19, rx954_bstack
    if_null rx954_cstack, rx954_cstack_done2584
    unless rx954_cstack, rx954_cstack_done2584
    dec $I19
    set $P11, rx954_cstack[$I19]
  rx954_cstack_done2584:
    pop rx954_rep, rx954_bstack
    pop rx954_pos, rx954_bstack
    pop $I19, rx954_bstack
    lt rx954_pos, -1, rx954_done2579
    lt rx954_pos, 0, rx954_fail2581
    eq $I19, 0, rx954_fail2581
    nqp_islist $I20, rx954_cstack
    unless $I20, rx954_jump2582
    elements $I18, rx954_bstack
    le $I18, 0, rx954_cut2583
    dec $I18
    set $I18, rx954_bstack[$I18]
  rx954_cut2583:
    assign rx954_cstack, $I18
  rx954_jump2582:
    jump $I19
  rx954_done2579:
    rx954_cur."!cursor_fail"()
    .return (rx954_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_163_1347719921.536_caps" :subid("cuid_memo_263_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_163_1347719921.536_nfa" :subid("cuid_memo_264_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "<"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_164_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1205
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx957_tgt
    .local int rx957_pos
    .local int rx957_off
    .local int rx957_eos
    .local int rx957_rep
    .local pmc rx957_cur
    .local pmc rx957_curclass
    .local pmc rx957_bstack
    .local pmc rx957_cstack
    (rx957_cur, rx957_tgt, rx957_pos, rx957_curclass, rx957_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx957_cur
    length rx957_eos, rx957_tgt
    eq $I19, 1, rx957_restart2591
    gt rx957_pos, rx957_eos, rx957_fail2592
    repr_get_attr_int $I11, self, rx957_curclass, "$!from"
    ne $I11, -1, rxscan958_done2598
    goto rxscan958_scan2597
  rxscan958_loop2596:
    inc rx957_pos
    gt rx957_pos, rx957_eos, rx957_fail2592
    repr_bind_attr_int rx957_cur, rx957_curclass, "$!from", rx957_pos
  rxscan958_scan2597:
    nqp_rxmark rx957_bstack, rxscan958_loop2596, rx957_pos, 0
  rxscan958_done2598:
    ge rx957_pos, rx957_eos, rx957_fail2592
    substr $S11, rx957_tgt, rx957_pos, 1
    index $I11, ucs4:"\x{ab}", $S11
    lt $I11, 0, rx957_fail2592
    repr_bind_attr_int rx957_cur, rx957_curclass, "$!pos", rx957_pos
    $P11 = rx957_cur."quote_EXPR"(":qq", ":w")
    repr_get_attr_int $I11, $P11, rx957_curclass, "$!pos"
    lt $I11, 0, rx957_fail2592
    nqp_rxmark rx957_bstack, rxsubrule959_pass2599, -1, 0
  rxsubrule959_pass2599:
    rx957_cstack = rx957_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx957_pos, $P11, rx957_curclass, "$!pos"
    rx957_cur."!cursor_pass"(rx957_pos, utf8:"circumfix:sym<\x{ab} \x{bb}>", 'backtrack'=>1)
    .return (rx957_cur)
  rx957_restart2591:
    repr_get_attr_obj rx957_cstack, rx957_cur, rx957_curclass, "$!cstack"
  rx957_fail2592:
    unless rx957_bstack, rx957_done2590
    pop $I19, rx957_bstack
    if_null rx957_cstack, rx957_cstack_done2595
    unless rx957_cstack, rx957_cstack_done2595
    dec $I19
    set $P11, rx957_cstack[$I19]
  rx957_cstack_done2595:
    pop rx957_rep, rx957_bstack
    pop rx957_pos, rx957_bstack
    pop $I19, rx957_bstack
    lt rx957_pos, -1, rx957_done2590
    lt rx957_pos, 0, rx957_fail2592
    eq $I19, 0, rx957_fail2592
    nqp_islist $I20, rx957_cstack
    unless $I20, rx957_jump2593
    elements $I18, rx957_bstack
    le $I18, 0, rx957_cut2594
    dec $I18
    set $I18, rx957_bstack[$I18]
  rx957_cut2594:
    assign rx957_cstack, $I18
  rx957_jump2593:
    jump $I19
  rx957_done2590:
    rx957_cur."!cursor_fail"()
    .return (rx957_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_164_1347719921.536_caps" :subid("cuid_memo_265_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_164_1347719921.536_nfa" :subid("cuid_memo_266_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, utf8:"\x{ab}"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_165_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1206
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx960_tgt
    .local int rx960_pos
    .local int rx960_off
    .local int rx960_eos
    .local int rx960_rep
    .local pmc rx960_cur
    .local pmc rx960_curclass
    .local pmc rx960_bstack
    .local pmc rx960_cstack
    (rx960_cur, rx960_tgt, rx960_pos, rx960_curclass, rx960_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx960_cur
    length rx960_eos, rx960_tgt
    eq $I19, 1, rx960_restart2602
    gt rx960_pos, rx960_eos, rx960_fail2603
    repr_get_attr_int $I11, self, rx960_curclass, "$!from"
    ne $I11, -1, rxscan961_done2609
    goto rxscan961_scan2608
  rxscan961_loop2607:
    inc rx960_pos
    gt rx960_pos, rx960_eos, rx960_fail2603
    repr_bind_attr_int rx960_cur, rx960_curclass, "$!from", rx960_pos
  rxscan961_scan2608:
    nqp_rxmark rx960_bstack, rxscan961_loop2607, rx960_pos, 0
  rxscan961_done2609:
    ge rx960_pos, rx960_eos, rx960_fail2603
    substr $S11, rx960_tgt, rx960_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx960_fail2603
    repr_bind_attr_int rx960_cur, rx960_curclass, "$!pos", rx960_pos
    $P11 = rx960_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx960_curclass, "$!pos"
    lt $I11, 0, rx960_fail2603
    nqp_rxmark rx960_bstack, rxsubrule962_pass2610, -1, 0
  rxsubrule962_pass2610:
    rx960_cstack = rx960_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx960_pos, $P11, rx960_curclass, "$!pos"
    rx960_cur."!cursor_pass"(rx960_pos, "circumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx960_cur)
  rx960_restart2602:
    repr_get_attr_obj rx960_cstack, rx960_cur, rx960_curclass, "$!cstack"
  rx960_fail2603:
    unless rx960_bstack, rx960_done2601
    pop $I19, rx960_bstack
    if_null rx960_cstack, rx960_cstack_done2606
    unless rx960_cstack, rx960_cstack_done2606
    dec $I19
    set $P11, rx960_cstack[$I19]
  rx960_cstack_done2606:
    pop rx960_rep, rx960_bstack
    pop rx960_pos, rx960_bstack
    pop $I19, rx960_bstack
    lt rx960_pos, -1, rx960_done2601
    lt rx960_pos, 0, rx960_fail2603
    eq $I19, 0, rx960_fail2603
    nqp_islist $I20, rx960_cstack
    unless $I20, rx960_jump2604
    elements $I18, rx960_bstack
    le $I18, 0, rx960_cut2605
    dec $I18
    set $I18, rx960_bstack[$I18]
  rx960_cut2605:
    assign rx960_cstack, $I18
  rx960_jump2604:
    jump $I19
  rx960_done2601:
    rx960_cur."!cursor_fail"()
    .return (rx960_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_165_1347719921.536_caps" :subid("cuid_memo_267_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["pblock"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_165_1347719921.536_nfa" :subid("cuid_memo_268_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "{"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<sigil>" :subid("cuid_166_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1207
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx963_tgt
    .local int rx963_pos
    .local int rx963_off
    .local int rx963_eos
    .local int rx963_rep
    .local pmc rx963_cur
    .local pmc rx963_curclass
    .local pmc rx963_bstack
    .local pmc rx963_cstack
    (rx963_cur, rx963_tgt, rx963_pos, rx963_curclass, rx963_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx963_cur
    length rx963_eos, rx963_tgt
    eq $I19, 1, rx963_restart2613
    gt rx963_pos, rx963_eos, rx963_fail2614
    repr_get_attr_int $I11, self, rx963_curclass, "$!from"
    ne $I11, -1, rxscan964_done2620
    goto rxscan964_scan2619
  rxscan964_loop2618:
    inc rx963_pos
    gt rx963_pos, rx963_eos, rx963_fail2614
    repr_bind_attr_int rx963_cur, rx963_curclass, "$!from", rx963_pos
  rxscan964_scan2619:
    nqp_rxmark rx963_bstack, rxscan964_loop2618, rx963_pos, 0
  rxscan964_done2620:
    repr_bind_attr_int rx963_cur, rx963_curclass, "$!pos", rx963_pos
    $P11 = rx963_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx963_curclass, "$!pos"
    lt $I11, 0, rx963_fail2614
    nqp_rxmark rx963_bstack, rxsubrule965_pass2621, -1, 0
  rxsubrule965_pass2621:
    rx963_cstack = rx963_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx963_pos, $P11, rx963_curclass, "$!pos"
    add $I11, rx963_pos, 1
    gt $I11, rx963_eos, rx963_fail2614
    substr $S10, rx963_tgt, rx963_pos, 1
    ne $S10, ucs4:"(", rx963_fail2614
    add rx963_pos, 1
    repr_bind_attr_int rx963_cur, rx963_curclass, "$!pos", rx963_pos
    $P11 = rx963_cur."semilist"()
    repr_get_attr_int $I11, $P11, rx963_curclass, "$!pos"
    lt $I11, 0, rx963_fail2614
    nqp_rxmark rx963_bstack, rxsubrule966_pass2622, -1, 0
  rxsubrule966_pass2622:
    rx963_cstack = rx963_cur."!cursor_capture"($P11, "semilist")
    repr_get_attr_int rx963_pos, $P11, rx963_curclass, "$!pos"
  alt967_02624:
    nqp_rxmark rx963_bstack, alt967_12625, rx963_pos, 0
    add $I11, rx963_pos, 1
    gt $I11, rx963_eos, rx963_fail2614
    substr $S10, rx963_tgt, rx963_pos, 1
    ne $S10, ucs4:")", rx963_fail2614
    add rx963_pos, 1
    goto alt967_end2623
  alt967_12625:
    repr_bind_attr_int rx963_cur, rx963_curclass, "$!pos", rx963_pos
    $P11 = rx963_cur."FAILGOAL"("')'")
    repr_get_attr_int $I11, $P11, rx963_curclass, "$!pos"
    lt $I11, 0, rx963_fail2614
    goto rxsubrule968_pass2626
  rxsubrule968_back2627:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx963_curclass, "$!pos"
    lt $I11, 0, rx963_fail2614
  rxsubrule968_pass2626:
    rx963_cstack = rx963_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule968_back2627
    push rx963_bstack, $I11
    push rx963_bstack, 0
    push rx963_bstack, rx963_pos
    elements $I11, rx963_cstack
    push rx963_bstack, $I11
    repr_get_attr_int rx963_pos, $P11, rx963_curclass, "$!pos"
  alt967_end2623:
    rx963_cur."!cursor_pass"(rx963_pos, "circumfix:sym<sigil>", 'backtrack'=>1)
    .return (rx963_cur)
  rx963_restart2613:
    repr_get_attr_obj rx963_cstack, rx963_cur, rx963_curclass, "$!cstack"
  rx963_fail2614:
    unless rx963_bstack, rx963_done2612
    pop $I19, rx963_bstack
    if_null rx963_cstack, rx963_cstack_done2617
    unless rx963_cstack, rx963_cstack_done2617
    dec $I19
    set $P11, rx963_cstack[$I19]
  rx963_cstack_done2617:
    pop rx963_rep, rx963_bstack
    pop rx963_pos, rx963_bstack
    pop $I19, rx963_bstack
    lt rx963_pos, -1, rx963_done2612
    lt rx963_pos, 0, rx963_fail2614
    eq $I19, 0, rx963_fail2614
    nqp_islist $I20, rx963_cstack
    unless $I20, rx963_jump2615
    elements $I18, rx963_bstack
    le $I18, 0, rx963_cut2616
    dec $I18
    set $I18, rx963_bstack[$I18]
  rx963_cut2616:
    assign rx963_cstack, $I18
  rx963_jump2615:
    jump $I19
  rx963_done2612:
    rx963_cur."!cursor_fail"()
    .return (rx963_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_166_1347719921.536_caps" :subid("cuid_memo_269_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sigil"], $P5002
    box $P5003, 0
    set $P5001["semilist"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_166_1347719921.536_nfa" :subid("cuid_memo_270_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "sigil"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 40
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "semilist"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_167_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1209
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx969_tgt
    .local int rx969_pos
    .local int rx969_off
    .local int rx969_eos
    .local int rx969_rep
    .local pmc rx969_cur
    .local pmc rx969_curclass
    .local pmc rx969_bstack
    .local pmc rx969_cstack
    (rx969_cur, rx969_tgt, rx969_pos, rx969_curclass, rx969_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx969_cur
    length rx969_eos, rx969_tgt
    eq $I19, 1, rx969_restart2630
    gt rx969_pos, rx969_eos, rx969_fail2631
    repr_get_attr_int $I11, self, rx969_curclass, "$!from"
    ne $I11, -1, rxscan970_done2637
    goto rxscan970_scan2636
  rxscan970_loop2635:
    inc rx969_pos
    gt rx969_pos, rx969_eos, rx969_fail2631
    repr_bind_attr_int rx969_cur, rx969_curclass, "$!from", rx969_pos
  rxscan970_scan2636:
    nqp_rxmark rx969_bstack, rxscan970_loop2635, rx969_pos, 0
  rxscan970_done2637:
    repr_bind_attr_int rx969_cur, rx969_curclass, "$!pos", rx969_pos
    $P11 = rx969_cur."ws"()
    repr_get_attr_int $I11, $P11, rx969_curclass, "$!pos"
    lt $I11, 0, rx969_fail2631
    repr_get_attr_int rx969_pos, $P11, rx969_curclass, "$!pos"
    repr_bind_attr_int rx969_cur, rx969_curclass, "$!pos", rx969_pos
    $P11 = rx969_cur."statement"()
    repr_get_attr_int $I11, $P11, rx969_curclass, "$!pos"
    lt $I11, 0, rx969_fail2631
    nqp_rxmark rx969_bstack, rxsubrule972_pass2639, -1, 0
  rxsubrule972_pass2639:
    rx969_cstack = rx969_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx969_pos, $P11, rx969_curclass, "$!pos"
    repr_bind_attr_int rx969_cur, rx969_curclass, "$!pos", rx969_pos
    $P11 = rx969_cur."ws"()
    repr_get_attr_int $I11, $P11, rx969_curclass, "$!pos"
    lt $I11, 0, rx969_fail2631
    repr_get_attr_int rx969_pos, $P11, rx969_curclass, "$!pos"
    rx969_cur."!cursor_pass"(rx969_pos, "semilist", 'backtrack'=>1)
    .return (rx969_cur)
  rx969_restart2630:
    repr_get_attr_obj rx969_cstack, rx969_cur, rx969_curclass, "$!cstack"
  rx969_fail2631:
    unless rx969_bstack, rx969_done2629
    pop $I19, rx969_bstack
    if_null rx969_cstack, rx969_cstack_done2634
    unless rx969_cstack, rx969_cstack_done2634
    dec $I19
    set $P11, rx969_cstack[$I19]
  rx969_cstack_done2634:
    pop rx969_rep, rx969_bstack
    pop rx969_pos, rx969_bstack
    pop $I19, rx969_bstack
    lt rx969_pos, -1, rx969_done2629
    lt rx969_pos, 0, rx969_fail2631
    eq $I19, 0, rx969_fail2631
    nqp_islist $I20, rx969_cstack
    unless $I20, rx969_jump2632
    elements $I18, rx969_bstack
    le $I18, 0, rx969_cut2633
    dec $I18
    set $I18, rx969_bstack[$I18]
  rx969_cut2633:
    assign rx969_cstack, $I18
  rx969_jump2632:
    jump $I19
  rx969_done2629:
    rx969_cur."!cursor_fail"()
    .return (rx969_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_167_1347719921.536_caps" :subid("cuid_memo_271_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statement"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infixish" :subid("cuid_168_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1232
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx974_tgt
    .local int rx974_pos
    .local int rx974_off
    .local int rx974_eos
    .local int rx974_rep
    .local pmc rx974_cur
    .local pmc rx974_curclass
    .local pmc rx974_bstack
    .local pmc rx974_cstack
    (rx974_cur, rx974_tgt, rx974_pos, rx974_curclass, rx974_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx974_cur
    length rx974_eos, rx974_tgt
    eq $I19, 1, rx974_restart2643
    gt rx974_pos, rx974_eos, rx974_fail2644
    repr_get_attr_int $I11, self, rx974_curclass, "$!from"
    ne $I11, -1, rxscan975_done2650
    goto rxscan975_scan2649
  rxscan975_loop2648:
    inc rx974_pos
    gt rx974_pos, rx974_eos, rx974_fail2644
    repr_bind_attr_int rx974_cur, rx974_curclass, "$!from", rx974_pos
  rxscan975_scan2649:
    nqp_rxmark rx974_bstack, rxscan975_loop2648, rx974_pos, 0
  rxscan975_done2650:
    repr_bind_attr_int rx974_cur, rx974_curclass, "$!pos", rx974_pos
    $P11 = rx974_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx974_curclass, "$!pos"
    ge $I11, 0, rx974_fail2644
    repr_bind_attr_int rx974_cur, rx974_curclass, "$!pos", rx974_pos
    $P11 = rx974_cur."infix"()
    repr_get_attr_int $I11, $P11, rx974_curclass, "$!pos"
    lt $I11, 0, rx974_fail2644
    nqp_rxmark rx974_bstack, rxsubrule976_pass2651, -1, 0
  rxsubrule976_pass2651:
    rx974_cstack = rx974_cur."!cursor_capture"($P11, "OPER=infix")
    repr_get_attr_int rx974_pos, $P11, rx974_curclass, "$!pos"
    rx974_cur."!cursor_pass"(rx974_pos, "infixish", 'backtrack'=>1)
    .return (rx974_cur)
  rx974_restart2643:
    repr_get_attr_obj rx974_cstack, rx974_cur, rx974_curclass, "$!cstack"
  rx974_fail2644:
    unless rx974_bstack, rx974_done2642
    pop $I19, rx974_bstack
    if_null rx974_cstack, rx974_cstack_done2647
    unless rx974_cstack, rx974_cstack_done2647
    dec $I19
    set $P11, rx974_cstack[$I19]
  rx974_cstack_done2647:
    pop rx974_rep, rx974_bstack
    pop rx974_pos, rx974_bstack
    pop $I19, rx974_bstack
    lt rx974_pos, -1, rx974_done2642
    lt rx974_pos, 0, rx974_fail2644
    eq $I19, 0, rx974_fail2644
    nqp_islist $I20, rx974_cstack
    unless $I20, rx974_jump2645
    elements $I18, rx974_bstack
    le $I18, 0, rx974_cut2646
    dec $I18
    set $I18, rx974_bstack[$I18]
  rx974_cut2646:
    assign rx974_cstack, $I18
  rx974_jump2645:
    jump $I19
  rx974_done2642:
    rx974_cur."!cursor_fail"()
    .return (rx974_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_168_1347719921.536_caps" :subid("cuid_memo_272_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["OPER"], $P5002
    box $P5003, 0
    set $P5001["infix"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infixstopper" :subid("cuid_169_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1233
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx977_tgt
    .local int rx977_pos
    .local int rx977_off
    .local int rx977_eos
    .local int rx977_rep
    .local pmc rx977_cur
    .local pmc rx977_curclass
    .local pmc rx977_bstack
    .local pmc rx977_cstack
    (rx977_cur, rx977_tgt, rx977_pos, rx977_curclass, rx977_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx977_cur
    length rx977_eos, rx977_tgt
    eq $I19, 1, rx977_restart2654
    gt rx977_pos, rx977_eos, rx977_fail2655
    repr_get_attr_int $I11, self, rx977_curclass, "$!from"
    ne $I11, -1, rxscan978_done2661
    goto rxscan978_scan2660
  rxscan978_loop2659:
    inc rx977_pos
    gt rx977_pos, rx977_eos, rx977_fail2655
    repr_bind_attr_int rx977_cur, rx977_curclass, "$!from", rx977_pos
  rxscan978_scan2660:
    nqp_rxmark rx977_bstack, rxscan978_loop2659, rx977_pos, 0
  rxscan978_done2661:
    repr_bind_attr_int rx977_cur, rx977_curclass, "$!pos", rx977_pos
    $P11 = rx977_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx977_curclass, "$!pos"
    lt $I11, 0, rx977_fail2655
    rx977_cur."!cursor_pass"(rx977_pos, "infixstopper", 'backtrack'=>1)
    .return (rx977_cur)
  rx977_restart2654:
    repr_get_attr_obj rx977_cstack, rx977_cur, rx977_curclass, "$!cstack"
  rx977_fail2655:
    unless rx977_bstack, rx977_done2653
    pop $I19, rx977_bstack
    if_null rx977_cstack, rx977_cstack_done2658
    unless rx977_cstack, rx977_cstack_done2658
    dec $I19
    set $P11, rx977_cstack[$I19]
  rx977_cstack_done2658:
    pop rx977_rep, rx977_bstack
    pop rx977_pos, rx977_bstack
    pop $I19, rx977_bstack
    lt rx977_pos, -1, rx977_done2653
    lt rx977_pos, 0, rx977_fail2655
    eq $I19, 0, rx977_fail2655
    nqp_islist $I20, rx977_cstack
    unless $I20, rx977_jump2656
    elements $I18, rx977_bstack
    le $I18, 0, rx977_cut2657
    dec $I18
    set $I18, rx977_bstack[$I18]
  rx977_cut2657:
    assign rx977_cstack, $I18
  rx977_jump2656:
    jump $I19
  rx977_done2653:
    rx977_cur."!cursor_fail"()
    .return (rx977_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_169_1347719921.536_caps" :subid("cuid_memo_273_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_169_1347719921.536_nfa" :subid("cuid_memo_274_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "lambda"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_170_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1235
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx979_tgt
    .local int rx979_pos
    .local int rx979_off
    .local int rx979_eos
    .local int rx979_rep
    .local pmc rx979_cur
    .local pmc rx979_curclass
    .local pmc rx979_bstack
    .local pmc rx979_cstack
    (rx979_cur, rx979_tgt, rx979_pos, rx979_curclass, rx979_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx979_cur
    length rx979_eos, rx979_tgt
    eq $I19, 1, rx979_restart2664
    gt rx979_pos, rx979_eos, rx979_fail2665
    repr_get_attr_int $I11, self, rx979_curclass, "$!from"
    ne $I11, -1, rxscan980_done2671
    goto rxscan980_scan2670
  rxscan980_loop2669:
    inc rx979_pos
    gt rx979_pos, rx979_eos, rx979_fail2665
    repr_bind_attr_int rx979_cur, rx979_curclass, "$!from", rx979_pos
  rxscan980_scan2670:
    nqp_rxmark rx979_bstack, rxscan980_loop2669, rx979_pos, 0
  rxscan980_done2671:
    add $I11, rx979_pos, 1
    gt $I11, rx979_eos, rx979_fail2665
    substr $S10, rx979_tgt, rx979_pos, 1
    ne $S10, ucs4:"[", rx979_fail2665
    add rx979_pos, 1
    repr_bind_attr_int rx979_cur, rx979_curclass, "$!pos", rx979_pos
    $P11 = rx979_cur."ws"()
    repr_get_attr_int $I11, $P11, rx979_curclass, "$!pos"
    lt $I11, 0, rx979_fail2665
    repr_get_attr_int rx979_pos, $P11, rx979_curclass, "$!pos"
    repr_bind_attr_int rx979_cur, rx979_curclass, "$!pos", rx979_pos
    $P11 = rx979_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx979_curclass, "$!pos"
    lt $I11, 0, rx979_fail2665
    nqp_rxmark rx979_bstack, rxsubrule982_pass2673, -1, 0
  rxsubrule982_pass2673:
    rx979_cstack = rx979_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx979_pos, $P11, rx979_curclass, "$!pos"
    add $I11, rx979_pos, 1
    gt $I11, rx979_eos, rx979_fail2665
    substr $S10, rx979_tgt, rx979_pos, 1
    ne $S10, ucs4:"]", rx979_fail2665
    add rx979_pos, 1
    repr_bind_attr_int rx979_cur, rx979_curclass, "$!pos", rx979_pos
    $P11 = rx979_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx979_curclass, "$!pos"
    lt $I11, 0, rx979_fail2665
    nqp_rxmark rx979_bstack, rxsubrule983_pass2674, -1, 0
  rxsubrule983_pass2674:
    rx979_cstack = rx979_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx979_pos, $P11, rx979_curclass, "$!pos"
    rx979_cur."!cursor_pass"(rx979_pos, "postcircumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx979_cur)
  rx979_restart2664:
    repr_get_attr_obj rx979_cstack, rx979_cur, rx979_curclass, "$!cstack"
  rx979_fail2665:
    unless rx979_bstack, rx979_done2663
    pop $I19, rx979_bstack
    if_null rx979_cstack, rx979_cstack_done2668
    unless rx979_cstack, rx979_cstack_done2668
    dec $I19
    set $P11, rx979_cstack[$I19]
  rx979_cstack_done2668:
    pop rx979_rep, rx979_bstack
    pop rx979_pos, rx979_bstack
    pop $I19, rx979_bstack
    lt rx979_pos, -1, rx979_done2663
    lt rx979_pos, 0, rx979_fail2665
    eq $I19, 0, rx979_fail2665
    nqp_islist $I20, rx979_cstack
    unless $I20, rx979_jump2666
    elements $I18, rx979_bstack
    le $I18, 0, rx979_cut2667
    dec $I18
    set $I18, rx979_bstack[$I18]
  rx979_cut2667:
    assign rx979_cstack, $I18
  rx979_jump2666:
    jump $I19
  rx979_done2663:
    rx979_cur."!cursor_fail"()
    .return (rx979_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_170_1347719921.536_caps" :subid("cuid_memo_275_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_170_1347719921.536_nfa" :subid("cuid_memo_276_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 91
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "EXPR"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 93
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "O"
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_171_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1240
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx984_tgt
    .local int rx984_pos
    .local int rx984_off
    .local int rx984_eos
    .local int rx984_rep
    .local pmc rx984_cur
    .local pmc rx984_curclass
    .local pmc rx984_bstack
    .local pmc rx984_cstack
    (rx984_cur, rx984_tgt, rx984_pos, rx984_curclass, rx984_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx984_cur
    length rx984_eos, rx984_tgt
    eq $I19, 1, rx984_restart2677
    gt rx984_pos, rx984_eos, rx984_fail2678
    repr_get_attr_int $I11, self, rx984_curclass, "$!from"
    ne $I11, -1, rxscan985_done2684
    goto rxscan985_scan2683
  rxscan985_loop2682:
    inc rx984_pos
    gt rx984_pos, rx984_eos, rx984_fail2678
    repr_bind_attr_int rx984_cur, rx984_curclass, "$!from", rx984_pos
  rxscan985_scan2683:
    nqp_rxmark rx984_bstack, rxscan985_loop2682, rx984_pos, 0
  rxscan985_done2684:
    add $I11, rx984_pos, 1
    gt $I11, rx984_eos, rx984_fail2678
    substr $S10, rx984_tgt, rx984_pos, 1
    ne $S10, ucs4:"{", rx984_fail2678
    add rx984_pos, 1
    repr_bind_attr_int rx984_cur, rx984_curclass, "$!pos", rx984_pos
    $P11 = rx984_cur."ws"()
    repr_get_attr_int $I11, $P11, rx984_curclass, "$!pos"
    lt $I11, 0, rx984_fail2678
    repr_get_attr_int rx984_pos, $P11, rx984_curclass, "$!pos"
    repr_bind_attr_int rx984_cur, rx984_curclass, "$!pos", rx984_pos
    $P11 = rx984_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx984_curclass, "$!pos"
    lt $I11, 0, rx984_fail2678
    nqp_rxmark rx984_bstack, rxsubrule987_pass2686, -1, 0
  rxsubrule987_pass2686:
    rx984_cstack = rx984_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx984_pos, $P11, rx984_curclass, "$!pos"
    add $I11, rx984_pos, 1
    gt $I11, rx984_eos, rx984_fail2678
    substr $S10, rx984_tgt, rx984_pos, 1
    ne $S10, ucs4:"}", rx984_fail2678
    add rx984_pos, 1
    repr_bind_attr_int rx984_cur, rx984_curclass, "$!pos", rx984_pos
    $P11 = rx984_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx984_curclass, "$!pos"
    lt $I11, 0, rx984_fail2678
    nqp_rxmark rx984_bstack, rxsubrule988_pass2687, -1, 0
  rxsubrule988_pass2687:
    rx984_cstack = rx984_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx984_pos, $P11, rx984_curclass, "$!pos"
    rx984_cur."!cursor_pass"(rx984_pos, "postcircumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx984_cur)
  rx984_restart2677:
    repr_get_attr_obj rx984_cstack, rx984_cur, rx984_curclass, "$!cstack"
  rx984_fail2678:
    unless rx984_bstack, rx984_done2676
    pop $I19, rx984_bstack
    if_null rx984_cstack, rx984_cstack_done2681
    unless rx984_cstack, rx984_cstack_done2681
    dec $I19
    set $P11, rx984_cstack[$I19]
  rx984_cstack_done2681:
    pop rx984_rep, rx984_bstack
    pop rx984_pos, rx984_bstack
    pop $I19, rx984_bstack
    lt rx984_pos, -1, rx984_done2676
    lt rx984_pos, 0, rx984_fail2678
    eq $I19, 0, rx984_fail2678
    nqp_islist $I20, rx984_cstack
    unless $I20, rx984_jump2679
    elements $I18, rx984_bstack
    le $I18, 0, rx984_cut2680
    dec $I18
    set $I18, rx984_bstack[$I18]
  rx984_cut2680:
    assign rx984_cstack, $I18
  rx984_jump2679:
    jump $I19
  rx984_done2676:
    rx984_cur."!cursor_fail"()
    .return (rx984_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_171_1347719921.536_caps" :subid("cuid_memo_277_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_171_1347719921.536_nfa" :subid("cuid_memo_278_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "EXPR"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 125
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "O"
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_172_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1245
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx989_tgt
    .local int rx989_pos
    .local int rx989_off
    .local int rx989_eos
    .local int rx989_rep
    .local pmc rx989_cur
    .local pmc rx989_curclass
    .local pmc rx989_bstack
    .local pmc rx989_cstack
    (rx989_cur, rx989_tgt, rx989_pos, rx989_curclass, rx989_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx989_cur
    length rx989_eos, rx989_tgt
    eq $I19, 1, rx989_restart2690
    gt rx989_pos, rx989_eos, rx989_fail2691
    repr_get_attr_int $I11, self, rx989_curclass, "$!from"
    ne $I11, -1, rxscan990_done2697
    goto rxscan990_scan2696
  rxscan990_loop2695:
    inc rx989_pos
    gt rx989_pos, rx989_eos, rx989_fail2691
    repr_bind_attr_int rx989_cur, rx989_curclass, "$!from", rx989_pos
  rxscan990_scan2696:
    nqp_rxmark rx989_bstack, rxscan990_loop2695, rx989_pos, 0
  rxscan990_done2697:
    ge rx989_pos, rx989_eos, rx989_fail2691
    substr $S11, rx989_tgt, rx989_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx989_fail2691
    repr_bind_attr_int rx989_cur, rx989_curclass, "$!pos", rx989_pos
    $P11 = rx989_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx989_curclass, "$!pos"
    lt $I11, 0, rx989_fail2691
    nqp_rxmark rx989_bstack, rxsubrule991_pass2698, -1, 0
  rxsubrule991_pass2698:
    rx989_cstack = rx989_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx989_pos, $P11, rx989_curclass, "$!pos"
    repr_bind_attr_int rx989_cur, rx989_curclass, "$!pos", rx989_pos
    $P11 = rx989_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx989_curclass, "$!pos"
    lt $I11, 0, rx989_fail2691
    nqp_rxmark rx989_bstack, rxsubrule992_pass2699, -1, 0
  rxsubrule992_pass2699:
    rx989_cstack = rx989_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx989_pos, $P11, rx989_curclass, "$!pos"
    rx989_cur."!cursor_pass"(rx989_pos, "postcircumfix:sym<ang>", 'backtrack'=>1)
    .return (rx989_cur)
  rx989_restart2690:
    repr_get_attr_obj rx989_cstack, rx989_cur, rx989_curclass, "$!cstack"
  rx989_fail2691:
    unless rx989_bstack, rx989_done2689
    pop $I19, rx989_bstack
    if_null rx989_cstack, rx989_cstack_done2694
    unless rx989_cstack, rx989_cstack_done2694
    dec $I19
    set $P11, rx989_cstack[$I19]
  rx989_cstack_done2694:
    pop rx989_rep, rx989_bstack
    pop rx989_pos, rx989_bstack
    pop $I19, rx989_bstack
    lt rx989_pos, -1, rx989_done2689
    lt rx989_pos, 0, rx989_fail2691
    eq $I19, 0, rx989_fail2691
    nqp_islist $I20, rx989_cstack
    unless $I20, rx989_jump2692
    elements $I18, rx989_bstack
    le $I18, 0, rx989_cut2693
    dec $I18
    set $I18, rx989_bstack[$I18]
  rx989_cut2693:
    assign rx989_cstack, $I18
  rx989_jump2692:
    jump $I19
  rx989_done2689:
    rx989_cur."!cursor_fail"()
    .return (rx989_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_172_1347719921.536_caps" :subid("cuid_memo_279_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_172_1347719921.536_nfa" :subid("cuid_memo_280_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "<"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_173_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1250
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx993_tgt
    .local int rx993_pos
    .local int rx993_off
    .local int rx993_eos
    .local int rx993_rep
    .local pmc rx993_cur
    .local pmc rx993_curclass
    .local pmc rx993_bstack
    .local pmc rx993_cstack
    (rx993_cur, rx993_tgt, rx993_pos, rx993_curclass, rx993_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx993_cur
    length rx993_eos, rx993_tgt
    eq $I19, 1, rx993_restart2702
    gt rx993_pos, rx993_eos, rx993_fail2703
    repr_get_attr_int $I11, self, rx993_curclass, "$!from"
    ne $I11, -1, rxscan994_done2709
    goto rxscan994_scan2708
  rxscan994_loop2707:
    inc rx993_pos
    gt rx993_pos, rx993_eos, rx993_fail2703
    repr_bind_attr_int rx993_cur, rx993_curclass, "$!from", rx993_pos
  rxscan994_scan2708:
    nqp_rxmark rx993_bstack, rxscan994_loop2707, rx993_pos, 0
  rxscan994_done2709:
    add $I11, rx993_pos, 1
    gt $I11, rx993_eos, rx993_fail2703
    substr $S10, rx993_tgt, rx993_pos, 1
    ne $S10, ucs4:"(", rx993_fail2703
    add rx993_pos, 1
    repr_bind_attr_int rx993_cur, rx993_curclass, "$!pos", rx993_pos
    $P11 = rx993_cur."ws"()
    repr_get_attr_int $I11, $P11, rx993_curclass, "$!pos"
    lt $I11, 0, rx993_fail2703
    repr_get_attr_int rx993_pos, $P11, rx993_curclass, "$!pos"
    repr_bind_attr_int rx993_cur, rx993_curclass, "$!pos", rx993_pos
    $P11 = rx993_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx993_curclass, "$!pos"
    lt $I11, 0, rx993_fail2703
    nqp_rxmark rx993_bstack, rxsubrule996_pass2711, -1, 0
  rxsubrule996_pass2711:
    rx993_cstack = rx993_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx993_pos, $P11, rx993_curclass, "$!pos"
    add $I11, rx993_pos, 1
    gt $I11, rx993_eos, rx993_fail2703
    substr $S10, rx993_tgt, rx993_pos, 1
    ne $S10, ucs4:")", rx993_fail2703
    add rx993_pos, 1
    repr_bind_attr_int rx993_cur, rx993_curclass, "$!pos", rx993_pos
    $P11 = rx993_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx993_curclass, "$!pos"
    lt $I11, 0, rx993_fail2703
    nqp_rxmark rx993_bstack, rxsubrule997_pass2712, -1, 0
  rxsubrule997_pass2712:
    rx993_cstack = rx993_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx993_pos, $P11, rx993_curclass, "$!pos"
    rx993_cur."!cursor_pass"(rx993_pos, "postcircumfix:sym<( )>", 'backtrack'=>1)
    .return (rx993_cur)
  rx993_restart2702:
    repr_get_attr_obj rx993_cstack, rx993_cur, rx993_curclass, "$!cstack"
  rx993_fail2703:
    unless rx993_bstack, rx993_done2701
    pop $I19, rx993_bstack
    if_null rx993_cstack, rx993_cstack_done2706
    unless rx993_cstack, rx993_cstack_done2706
    dec $I19
    set $P11, rx993_cstack[$I19]
  rx993_cstack_done2706:
    pop rx993_rep, rx993_bstack
    pop rx993_pos, rx993_bstack
    pop $I19, rx993_bstack
    lt rx993_pos, -1, rx993_done2701
    lt rx993_pos, 0, rx993_fail2703
    eq $I19, 0, rx993_fail2703
    nqp_islist $I20, rx993_cstack
    unless $I20, rx993_jump2704
    elements $I18, rx993_bstack
    le $I18, 0, rx993_cut2705
    dec $I18
    set $I18, rx993_bstack[$I18]
  rx993_cut2705:
    assign rx993_cstack, $I18
  rx993_jump2704:
    jump $I19
  rx993_done2701:
    rx993_cur."!cursor_fail"()
    .return (rx993_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_173_1347719921.536_caps" :subid("cuid_memo_281_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["arglist"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_173_1347719921.536_nfa" :subid("cuid_memo_282_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 40
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "arglist"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 41
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "O"
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_174_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1255
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx998_tgt
    .local int rx998_pos
    .local int rx998_off
    .local int rx998_eos
    .local int rx998_rep
    .local pmc rx998_cur
    .local pmc rx998_curclass
    .local pmc rx998_bstack
    .local pmc rx998_cstack
    (rx998_cur, rx998_tgt, rx998_pos, rx998_curclass, rx998_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx998_cur
    length rx998_eos, rx998_tgt
    eq $I19, 1, rx998_restart2715
    gt rx998_pos, rx998_eos, rx998_fail2716
    repr_get_attr_int $I11, self, rx998_curclass, "$!from"
    ne $I11, -1, rxscan999_done2722
    goto rxscan999_scan2721
  rxscan999_loop2720:
    inc rx998_pos
    gt rx998_pos, rx998_eos, rx998_fail2716
    repr_bind_attr_int rx998_cur, rx998_curclass, "$!from", rx998_pos
  rxscan999_scan2721:
    nqp_rxmark rx998_bstack, rxscan999_loop2720, rx998_pos, 0
  rxscan999_done2722:
    repr_bind_attr_int rx998_cur, rx998_curclass, "$!pos", rx998_pos
    $P11 = rx998_cur."dotty"()
    repr_get_attr_int $I11, $P11, rx998_curclass, "$!pos"
    lt $I11, 0, rx998_fail2716
    nqp_rxmark rx998_bstack, rxsubrule1000_pass2723, -1, 0
  rxsubrule1000_pass2723:
    rx998_cstack = rx998_cur."!cursor_capture"($P11, "dotty")
    repr_get_attr_int rx998_pos, $P11, rx998_curclass, "$!pos"
    repr_bind_attr_int rx998_cur, rx998_curclass, "$!pos", rx998_pos
    $P11 = rx998_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx998_curclass, "$!pos"
    lt $I11, 0, rx998_fail2716
    nqp_rxmark rx998_bstack, rxsubrule1001_pass2724, -1, 0
  rxsubrule1001_pass2724:
    rx998_cstack = rx998_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx998_pos, $P11, rx998_curclass, "$!pos"
    rx998_cur."!cursor_pass"(rx998_pos, "postfix:sym<.>", 'backtrack'=>1)
    .return (rx998_cur)
  rx998_restart2715:
    repr_get_attr_obj rx998_cstack, rx998_cur, rx998_curclass, "$!cstack"
  rx998_fail2716:
    unless rx998_bstack, rx998_done2714
    pop $I19, rx998_bstack
    if_null rx998_cstack, rx998_cstack_done2719
    unless rx998_cstack, rx998_cstack_done2719
    dec $I19
    set $P11, rx998_cstack[$I19]
  rx998_cstack_done2719:
    pop rx998_rep, rx998_bstack
    pop rx998_pos, rx998_bstack
    pop $I19, rx998_bstack
    lt rx998_pos, -1, rx998_done2714
    lt rx998_pos, 0, rx998_fail2716
    eq $I19, 0, rx998_fail2716
    nqp_islist $I20, rx998_cstack
    unless $I20, rx998_jump2717
    elements $I18, rx998_bstack
    le $I18, 0, rx998_cut2718
    dec $I18
    set $I18, rx998_bstack[$I18]
  rx998_cut2718:
    assign rx998_cstack, $I18
  rx998_jump2717:
    jump $I19
  rx998_done2714:
    rx998_cur."!cursor_fail"()
    .return (rx998_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_174_1347719921.536_caps" :subid("cuid_memo_283_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["dotty"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_174_1347719921.536_nfa" :subid("cuid_memo_284_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "dotty"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<++>" :subid("cuid_175_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1257
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1002_tgt
    .local int rx1002_pos
    .local int rx1002_off
    .local int rx1002_eos
    .local int rx1002_rep
    .local pmc rx1002_cur
    .local pmc rx1002_curclass
    .local pmc rx1002_bstack
    .local pmc rx1002_cstack
    (rx1002_cur, rx1002_tgt, rx1002_pos, rx1002_curclass, rx1002_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1002_cur
    length rx1002_eos, rx1002_tgt
    eq $I19, 1, rx1002_restart2727
    gt rx1002_pos, rx1002_eos, rx1002_fail2728
    repr_get_attr_int $I11, self, rx1002_curclass, "$!from"
    ne $I11, -1, rxscan1003_done2734
    goto rxscan1003_scan2733
  rxscan1003_loop2732:
    inc rx1002_pos
    gt rx1002_pos, rx1002_eos, rx1002_fail2728
    repr_bind_attr_int rx1002_cur, rx1002_curclass, "$!from", rx1002_pos
  rxscan1003_scan2733:
    nqp_rxmark rx1002_bstack, rxscan1003_loop2732, rx1002_pos, 0
  rxscan1003_done2734:
    nqp_rxmark rx1002_bstack, rxcap1004_fail2736, rx1002_pos, 0
    add $I11, rx1002_pos, 2
    gt $I11, rx1002_eos, rx1002_fail2728
    substr $S10, rx1002_tgt, rx1002_pos, 2
    ne $S10, ucs4:"++", rx1002_fail2728
    add rx1002_pos, 2
    nqp_rxpeek $I19, rx1002_bstack, rxcap1004_fail2736
    inc $I19
    set $I11, rx1002_bstack[$I19]
    $P11 = rx1002_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1002_pos)
    rx1002_cstack = rx1002_cur."!cursor_capture"($P11, "sym")
    goto rxcap1004_done2735
  rxcap1004_fail2736:
    goto rx1002_fail2728
  rxcap1004_done2735:
    repr_bind_attr_int rx1002_cur, rx1002_curclass, "$!pos", rx1002_pos
    $P11 = rx1002_cur."O"("%autoincrement, :op<preinc>")
    repr_get_attr_int $I11, $P11, rx1002_curclass, "$!pos"
    lt $I11, 0, rx1002_fail2728
    nqp_rxmark rx1002_bstack, rxsubrule1005_pass2737, -1, 0
  rxsubrule1005_pass2737:
    rx1002_cstack = rx1002_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1002_pos, $P11, rx1002_curclass, "$!pos"
    rx1002_cur."!cursor_pass"(rx1002_pos, "prefix:sym<++>", 'backtrack'=>1)
    .return (rx1002_cur)
  rx1002_restart2727:
    repr_get_attr_obj rx1002_cstack, rx1002_cur, rx1002_curclass, "$!cstack"
  rx1002_fail2728:
    unless rx1002_bstack, rx1002_done2726
    pop $I19, rx1002_bstack
    if_null rx1002_cstack, rx1002_cstack_done2731
    unless rx1002_cstack, rx1002_cstack_done2731
    dec $I19
    set $P11, rx1002_cstack[$I19]
  rx1002_cstack_done2731:
    pop rx1002_rep, rx1002_bstack
    pop rx1002_pos, rx1002_bstack
    pop $I19, rx1002_bstack
    lt rx1002_pos, -1, rx1002_done2726
    lt rx1002_pos, 0, rx1002_fail2728
    eq $I19, 0, rx1002_fail2728
    nqp_islist $I20, rx1002_cstack
    unless $I20, rx1002_jump2729
    elements $I18, rx1002_bstack
    le $I18, 0, rx1002_cut2730
    dec $I18
    set $I18, rx1002_bstack[$I18]
  rx1002_cut2730:
    assign rx1002_cstack, $I18
  rx1002_jump2729:
    jump $I19
  rx1002_done2726:
    rx1002_cur."!cursor_fail"()
    .return (rx1002_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_175_1347719921.536_caps" :subid("cuid_memo_285_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_175_1347719921.536_nfa" :subid("cuid_memo_286_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 43
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<-->" :subid("cuid_176_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1258
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1006_tgt
    .local int rx1006_pos
    .local int rx1006_off
    .local int rx1006_eos
    .local int rx1006_rep
    .local pmc rx1006_cur
    .local pmc rx1006_curclass
    .local pmc rx1006_bstack
    .local pmc rx1006_cstack
    (rx1006_cur, rx1006_tgt, rx1006_pos, rx1006_curclass, rx1006_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1006_cur
    length rx1006_eos, rx1006_tgt
    eq $I19, 1, rx1006_restart2740
    gt rx1006_pos, rx1006_eos, rx1006_fail2741
    repr_get_attr_int $I11, self, rx1006_curclass, "$!from"
    ne $I11, -1, rxscan1007_done2747
    goto rxscan1007_scan2746
  rxscan1007_loop2745:
    inc rx1006_pos
    gt rx1006_pos, rx1006_eos, rx1006_fail2741
    repr_bind_attr_int rx1006_cur, rx1006_curclass, "$!from", rx1006_pos
  rxscan1007_scan2746:
    nqp_rxmark rx1006_bstack, rxscan1007_loop2745, rx1006_pos, 0
  rxscan1007_done2747:
    nqp_rxmark rx1006_bstack, rxcap1008_fail2749, rx1006_pos, 0
    add $I11, rx1006_pos, 2
    gt $I11, rx1006_eos, rx1006_fail2741
    substr $S10, rx1006_tgt, rx1006_pos, 2
    ne $S10, ucs4:"--", rx1006_fail2741
    add rx1006_pos, 2
    nqp_rxpeek $I19, rx1006_bstack, rxcap1008_fail2749
    inc $I19
    set $I11, rx1006_bstack[$I19]
    $P11 = rx1006_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1006_pos)
    rx1006_cstack = rx1006_cur."!cursor_capture"($P11, "sym")
    goto rxcap1008_done2748
  rxcap1008_fail2749:
    goto rx1006_fail2741
  rxcap1008_done2748:
    repr_bind_attr_int rx1006_cur, rx1006_curclass, "$!pos", rx1006_pos
    $P11 = rx1006_cur."O"("%autoincrement, :op<predec>")
    repr_get_attr_int $I11, $P11, rx1006_curclass, "$!pos"
    lt $I11, 0, rx1006_fail2741
    nqp_rxmark rx1006_bstack, rxsubrule1009_pass2750, -1, 0
  rxsubrule1009_pass2750:
    rx1006_cstack = rx1006_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1006_pos, $P11, rx1006_curclass, "$!pos"
    rx1006_cur."!cursor_pass"(rx1006_pos, "prefix:sym<-->", 'backtrack'=>1)
    .return (rx1006_cur)
  rx1006_restart2740:
    repr_get_attr_obj rx1006_cstack, rx1006_cur, rx1006_curclass, "$!cstack"
  rx1006_fail2741:
    unless rx1006_bstack, rx1006_done2739
    pop $I19, rx1006_bstack
    if_null rx1006_cstack, rx1006_cstack_done2744
    unless rx1006_cstack, rx1006_cstack_done2744
    dec $I19
    set $P11, rx1006_cstack[$I19]
  rx1006_cstack_done2744:
    pop rx1006_rep, rx1006_bstack
    pop rx1006_pos, rx1006_bstack
    pop $I19, rx1006_bstack
    lt rx1006_pos, -1, rx1006_done2739
    lt rx1006_pos, 0, rx1006_fail2741
    eq $I19, 0, rx1006_fail2741
    nqp_islist $I20, rx1006_cstack
    unless $I20, rx1006_jump2742
    elements $I18, rx1006_bstack
    le $I18, 0, rx1006_cut2743
    dec $I18
    set $I18, rx1006_bstack[$I18]
  rx1006_cut2743:
    assign rx1006_cstack, $I18
  rx1006_jump2742:
    jump $I19
  rx1006_done2739:
    rx1006_cur."!cursor_fail"()
    .return (rx1006_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_176_1347719921.536_caps" :subid("cuid_memo_287_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_176_1347719921.536_nfa" :subid("cuid_memo_288_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 45
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<++>" :subid("cuid_177_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1260
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1010_tgt
    .local int rx1010_pos
    .local int rx1010_off
    .local int rx1010_eos
    .local int rx1010_rep
    .local pmc rx1010_cur
    .local pmc rx1010_curclass
    .local pmc rx1010_bstack
    .local pmc rx1010_cstack
    (rx1010_cur, rx1010_tgt, rx1010_pos, rx1010_curclass, rx1010_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1010_cur
    length rx1010_eos, rx1010_tgt
    eq $I19, 1, rx1010_restart2753
    gt rx1010_pos, rx1010_eos, rx1010_fail2754
    repr_get_attr_int $I11, self, rx1010_curclass, "$!from"
    ne $I11, -1, rxscan1011_done2760
    goto rxscan1011_scan2759
  rxscan1011_loop2758:
    inc rx1010_pos
    gt rx1010_pos, rx1010_eos, rx1010_fail2754
    repr_bind_attr_int rx1010_cur, rx1010_curclass, "$!from", rx1010_pos
  rxscan1011_scan2759:
    nqp_rxmark rx1010_bstack, rxscan1011_loop2758, rx1010_pos, 0
  rxscan1011_done2760:
    nqp_rxmark rx1010_bstack, rxcap1012_fail2762, rx1010_pos, 0
    add $I11, rx1010_pos, 2
    gt $I11, rx1010_eos, rx1010_fail2754
    substr $S10, rx1010_tgt, rx1010_pos, 2
    ne $S10, ucs4:"++", rx1010_fail2754
    add rx1010_pos, 2
    nqp_rxpeek $I19, rx1010_bstack, rxcap1012_fail2762
    inc $I19
    set $I11, rx1010_bstack[$I19]
    $P11 = rx1010_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1010_pos)
    rx1010_cstack = rx1010_cur."!cursor_capture"($P11, "sym")
    goto rxcap1012_done2761
  rxcap1012_fail2762:
    goto rx1010_fail2754
  rxcap1012_done2761:
    repr_bind_attr_int rx1010_cur, rx1010_curclass, "$!pos", rx1010_pos
    $P11 = rx1010_cur."O"("%autoincrement, :op<postinc>")
    repr_get_attr_int $I11, $P11, rx1010_curclass, "$!pos"
    lt $I11, 0, rx1010_fail2754
    nqp_rxmark rx1010_bstack, rxsubrule1013_pass2763, -1, 0
  rxsubrule1013_pass2763:
    rx1010_cstack = rx1010_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1010_pos, $P11, rx1010_curclass, "$!pos"
    rx1010_cur."!cursor_pass"(rx1010_pos, "postfix:sym<++>", 'backtrack'=>1)
    .return (rx1010_cur)
  rx1010_restart2753:
    repr_get_attr_obj rx1010_cstack, rx1010_cur, rx1010_curclass, "$!cstack"
  rx1010_fail2754:
    unless rx1010_bstack, rx1010_done2752
    pop $I19, rx1010_bstack
    if_null rx1010_cstack, rx1010_cstack_done2757
    unless rx1010_cstack, rx1010_cstack_done2757
    dec $I19
    set $P11, rx1010_cstack[$I19]
  rx1010_cstack_done2757:
    pop rx1010_rep, rx1010_bstack
    pop rx1010_pos, rx1010_bstack
    pop $I19, rx1010_bstack
    lt rx1010_pos, -1, rx1010_done2752
    lt rx1010_pos, 0, rx1010_fail2754
    eq $I19, 0, rx1010_fail2754
    nqp_islist $I20, rx1010_cstack
    unless $I20, rx1010_jump2755
    elements $I18, rx1010_bstack
    le $I18, 0, rx1010_cut2756
    dec $I18
    set $I18, rx1010_bstack[$I18]
  rx1010_cut2756:
    assign rx1010_cstack, $I18
  rx1010_jump2755:
    jump $I19
  rx1010_done2752:
    rx1010_cur."!cursor_fail"()
    .return (rx1010_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_177_1347719921.536_caps" :subid("cuid_memo_289_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_177_1347719921.536_nfa" :subid("cuid_memo_290_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 43
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<-->" :subid("cuid_178_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1261
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1014_tgt
    .local int rx1014_pos
    .local int rx1014_off
    .local int rx1014_eos
    .local int rx1014_rep
    .local pmc rx1014_cur
    .local pmc rx1014_curclass
    .local pmc rx1014_bstack
    .local pmc rx1014_cstack
    (rx1014_cur, rx1014_tgt, rx1014_pos, rx1014_curclass, rx1014_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1014_cur
    length rx1014_eos, rx1014_tgt
    eq $I19, 1, rx1014_restart2766
    gt rx1014_pos, rx1014_eos, rx1014_fail2767
    repr_get_attr_int $I11, self, rx1014_curclass, "$!from"
    ne $I11, -1, rxscan1015_done2773
    goto rxscan1015_scan2772
  rxscan1015_loop2771:
    inc rx1014_pos
    gt rx1014_pos, rx1014_eos, rx1014_fail2767
    repr_bind_attr_int rx1014_cur, rx1014_curclass, "$!from", rx1014_pos
  rxscan1015_scan2772:
    nqp_rxmark rx1014_bstack, rxscan1015_loop2771, rx1014_pos, 0
  rxscan1015_done2773:
    nqp_rxmark rx1014_bstack, rxcap1016_fail2775, rx1014_pos, 0
    add $I11, rx1014_pos, 2
    gt $I11, rx1014_eos, rx1014_fail2767
    substr $S10, rx1014_tgt, rx1014_pos, 2
    ne $S10, ucs4:"--", rx1014_fail2767
    add rx1014_pos, 2
    nqp_rxpeek $I19, rx1014_bstack, rxcap1016_fail2775
    inc $I19
    set $I11, rx1014_bstack[$I19]
    $P11 = rx1014_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1014_pos)
    rx1014_cstack = rx1014_cur."!cursor_capture"($P11, "sym")
    goto rxcap1016_done2774
  rxcap1016_fail2775:
    goto rx1014_fail2767
  rxcap1016_done2774:
    repr_bind_attr_int rx1014_cur, rx1014_curclass, "$!pos", rx1014_pos
    $P11 = rx1014_cur."O"("%autoincrement, :op<postdec>")
    repr_get_attr_int $I11, $P11, rx1014_curclass, "$!pos"
    lt $I11, 0, rx1014_fail2767
    nqp_rxmark rx1014_bstack, rxsubrule1017_pass2776, -1, 0
  rxsubrule1017_pass2776:
    rx1014_cstack = rx1014_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1014_pos, $P11, rx1014_curclass, "$!pos"
    rx1014_cur."!cursor_pass"(rx1014_pos, "postfix:sym<-->", 'backtrack'=>1)
    .return (rx1014_cur)
  rx1014_restart2766:
    repr_get_attr_obj rx1014_cstack, rx1014_cur, rx1014_curclass, "$!cstack"
  rx1014_fail2767:
    unless rx1014_bstack, rx1014_done2765
    pop $I19, rx1014_bstack
    if_null rx1014_cstack, rx1014_cstack_done2770
    unless rx1014_cstack, rx1014_cstack_done2770
    dec $I19
    set $P11, rx1014_cstack[$I19]
  rx1014_cstack_done2770:
    pop rx1014_rep, rx1014_bstack
    pop rx1014_pos, rx1014_bstack
    pop $I19, rx1014_bstack
    lt rx1014_pos, -1, rx1014_done2765
    lt rx1014_pos, 0, rx1014_fail2767
    eq $I19, 0, rx1014_fail2767
    nqp_islist $I20, rx1014_cstack
    unless $I20, rx1014_jump2768
    elements $I18, rx1014_bstack
    le $I18, 0, rx1014_cut2769
    dec $I18
    set $I18, rx1014_bstack[$I18]
  rx1014_cut2769:
    assign rx1014_cstack, $I18
  rx1014_jump2768:
    jump $I19
  rx1014_done2765:
    rx1014_cur."!cursor_fail"()
    .return (rx1014_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_178_1347719921.536_caps" :subid("cuid_memo_291_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_178_1347719921.536_nfa" :subid("cuid_memo_292_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 45
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<**>" :subid("cuid_179_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1263
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1018_tgt
    .local int rx1018_pos
    .local int rx1018_off
    .local int rx1018_eos
    .local int rx1018_rep
    .local pmc rx1018_cur
    .local pmc rx1018_curclass
    .local pmc rx1018_bstack
    .local pmc rx1018_cstack
    (rx1018_cur, rx1018_tgt, rx1018_pos, rx1018_curclass, rx1018_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1018_cur
    length rx1018_eos, rx1018_tgt
    eq $I19, 1, rx1018_restart2779
    gt rx1018_pos, rx1018_eos, rx1018_fail2780
    repr_get_attr_int $I11, self, rx1018_curclass, "$!from"
    ne $I11, -1, rxscan1019_done2786
    goto rxscan1019_scan2785
  rxscan1019_loop2784:
    inc rx1018_pos
    gt rx1018_pos, rx1018_eos, rx1018_fail2780
    repr_bind_attr_int rx1018_cur, rx1018_curclass, "$!from", rx1018_pos
  rxscan1019_scan2785:
    nqp_rxmark rx1018_bstack, rxscan1019_loop2784, rx1018_pos, 0
  rxscan1019_done2786:
    nqp_rxmark rx1018_bstack, rxcap1020_fail2788, rx1018_pos, 0
    add $I11, rx1018_pos, 2
    gt $I11, rx1018_eos, rx1018_fail2780
    substr $S10, rx1018_tgt, rx1018_pos, 2
    ne $S10, ucs4:"**", rx1018_fail2780
    add rx1018_pos, 2
    nqp_rxpeek $I19, rx1018_bstack, rxcap1020_fail2788
    inc $I19
    set $I11, rx1018_bstack[$I19]
    $P11 = rx1018_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1018_pos)
    rx1018_cstack = rx1018_cur."!cursor_capture"($P11, "sym")
    goto rxcap1020_done2787
  rxcap1020_fail2788:
    goto rx1018_fail2780
  rxcap1020_done2787:
    repr_bind_attr_int rx1018_cur, rx1018_curclass, "$!pos", rx1018_pos
    $P11 = rx1018_cur."O"("%exponentiation, :op<pow_n>")
    repr_get_attr_int $I11, $P11, rx1018_curclass, "$!pos"
    lt $I11, 0, rx1018_fail2780
    nqp_rxmark rx1018_bstack, rxsubrule1021_pass2789, -1, 0
  rxsubrule1021_pass2789:
    rx1018_cstack = rx1018_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1018_pos, $P11, rx1018_curclass, "$!pos"
    rx1018_cur."!cursor_pass"(rx1018_pos, "infix:sym<**>", 'backtrack'=>1)
    .return (rx1018_cur)
  rx1018_restart2779:
    repr_get_attr_obj rx1018_cstack, rx1018_cur, rx1018_curclass, "$!cstack"
  rx1018_fail2780:
    unless rx1018_bstack, rx1018_done2778
    pop $I19, rx1018_bstack
    if_null rx1018_cstack, rx1018_cstack_done2783
    unless rx1018_cstack, rx1018_cstack_done2783
    dec $I19
    set $P11, rx1018_cstack[$I19]
  rx1018_cstack_done2783:
    pop rx1018_rep, rx1018_bstack
    pop rx1018_pos, rx1018_bstack
    pop $I19, rx1018_bstack
    lt rx1018_pos, -1, rx1018_done2778
    lt rx1018_pos, 0, rx1018_fail2780
    eq $I19, 0, rx1018_fail2780
    nqp_islist $I20, rx1018_cstack
    unless $I20, rx1018_jump2781
    elements $I18, rx1018_bstack
    le $I18, 0, rx1018_cut2782
    dec $I18
    set $I18, rx1018_bstack[$I18]
  rx1018_cut2782:
    assign rx1018_cstack, $I18
  rx1018_jump2781:
    jump $I19
  rx1018_done2778:
    rx1018_cur."!cursor_fail"()
    .return (rx1018_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_179_1347719921.536_caps" :subid("cuid_memo_293_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_179_1347719921.536_nfa" :subid("cuid_memo_294_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 42
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 42
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<+>" :subid("cuid_180_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1265
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1022_tgt
    .local int rx1022_pos
    .local int rx1022_off
    .local int rx1022_eos
    .local int rx1022_rep
    .local pmc rx1022_cur
    .local pmc rx1022_curclass
    .local pmc rx1022_bstack
    .local pmc rx1022_cstack
    (rx1022_cur, rx1022_tgt, rx1022_pos, rx1022_curclass, rx1022_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1022_cur
    length rx1022_eos, rx1022_tgt
    eq $I19, 1, rx1022_restart2792
    gt rx1022_pos, rx1022_eos, rx1022_fail2793
    repr_get_attr_int $I11, self, rx1022_curclass, "$!from"
    ne $I11, -1, rxscan1023_done2799
    goto rxscan1023_scan2798
  rxscan1023_loop2797:
    inc rx1022_pos
    gt rx1022_pos, rx1022_eos, rx1022_fail2793
    repr_bind_attr_int rx1022_cur, rx1022_curclass, "$!from", rx1022_pos
  rxscan1023_scan2798:
    nqp_rxmark rx1022_bstack, rxscan1023_loop2797, rx1022_pos, 0
  rxscan1023_done2799:
    nqp_rxmark rx1022_bstack, rxcap1024_fail2801, rx1022_pos, 0
    add $I11, rx1022_pos, 1
    gt $I11, rx1022_eos, rx1022_fail2793
    substr $S10, rx1022_tgt, rx1022_pos, 1
    ne $S10, ucs4:"+", rx1022_fail2793
    add rx1022_pos, 1
    nqp_rxpeek $I19, rx1022_bstack, rxcap1024_fail2801
    inc $I19
    set $I11, rx1022_bstack[$I19]
    $P11 = rx1022_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1022_pos)
    rx1022_cstack = rx1022_cur."!cursor_capture"($P11, "sym")
    goto rxcap1024_done2800
  rxcap1024_fail2801:
    goto rx1022_fail2793
  rxcap1024_done2800:
    repr_bind_attr_int rx1022_cur, rx1022_curclass, "$!pos", rx1022_pos
    $P11 = rx1022_cur."O"("%symbolic_unary, :op<numify>")
    repr_get_attr_int $I11, $P11, rx1022_curclass, "$!pos"
    lt $I11, 0, rx1022_fail2793
    nqp_rxmark rx1022_bstack, rxsubrule1025_pass2802, -1, 0
  rxsubrule1025_pass2802:
    rx1022_cstack = rx1022_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1022_pos, $P11, rx1022_curclass, "$!pos"
    rx1022_cur."!cursor_pass"(rx1022_pos, "prefix:sym<+>", 'backtrack'=>1)
    .return (rx1022_cur)
  rx1022_restart2792:
    repr_get_attr_obj rx1022_cstack, rx1022_cur, rx1022_curclass, "$!cstack"
  rx1022_fail2793:
    unless rx1022_bstack, rx1022_done2791
    pop $I19, rx1022_bstack
    if_null rx1022_cstack, rx1022_cstack_done2796
    unless rx1022_cstack, rx1022_cstack_done2796
    dec $I19
    set $P11, rx1022_cstack[$I19]
  rx1022_cstack_done2796:
    pop rx1022_rep, rx1022_bstack
    pop rx1022_pos, rx1022_bstack
    pop $I19, rx1022_bstack
    lt rx1022_pos, -1, rx1022_done2791
    lt rx1022_pos, 0, rx1022_fail2793
    eq $I19, 0, rx1022_fail2793
    nqp_islist $I20, rx1022_cstack
    unless $I20, rx1022_jump2794
    elements $I18, rx1022_bstack
    le $I18, 0, rx1022_cut2795
    dec $I18
    set $I18, rx1022_bstack[$I18]
  rx1022_cut2795:
    assign rx1022_cstack, $I18
  rx1022_jump2794:
    jump $I19
  rx1022_done2791:
    rx1022_cur."!cursor_fail"()
    .return (rx1022_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_180_1347719921.536_caps" :subid("cuid_memo_295_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_180_1347719921.536_nfa" :subid("cuid_memo_296_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<~>" :subid("cuid_181_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1266
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1026_tgt
    .local int rx1026_pos
    .local int rx1026_off
    .local int rx1026_eos
    .local int rx1026_rep
    .local pmc rx1026_cur
    .local pmc rx1026_curclass
    .local pmc rx1026_bstack
    .local pmc rx1026_cstack
    (rx1026_cur, rx1026_tgt, rx1026_pos, rx1026_curclass, rx1026_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1026_cur
    length rx1026_eos, rx1026_tgt
    eq $I19, 1, rx1026_restart2805
    gt rx1026_pos, rx1026_eos, rx1026_fail2806
    repr_get_attr_int $I11, self, rx1026_curclass, "$!from"
    ne $I11, -1, rxscan1027_done2812
    goto rxscan1027_scan2811
  rxscan1027_loop2810:
    inc rx1026_pos
    gt rx1026_pos, rx1026_eos, rx1026_fail2806
    repr_bind_attr_int rx1026_cur, rx1026_curclass, "$!from", rx1026_pos
  rxscan1027_scan2811:
    nqp_rxmark rx1026_bstack, rxscan1027_loop2810, rx1026_pos, 0
  rxscan1027_done2812:
    nqp_rxmark rx1026_bstack, rxcap1028_fail2814, rx1026_pos, 0
    add $I11, rx1026_pos, 1
    gt $I11, rx1026_eos, rx1026_fail2806
    substr $S10, rx1026_tgt, rx1026_pos, 1
    ne $S10, ucs4:"~", rx1026_fail2806
    add rx1026_pos, 1
    nqp_rxpeek $I19, rx1026_bstack, rxcap1028_fail2814
    inc $I19
    set $I11, rx1026_bstack[$I19]
    $P11 = rx1026_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1026_pos)
    rx1026_cstack = rx1026_cur."!cursor_capture"($P11, "sym")
    goto rxcap1028_done2813
  rxcap1028_fail2814:
    goto rx1026_fail2806
  rxcap1028_done2813:
    repr_bind_attr_int rx1026_cur, rx1026_curclass, "$!pos", rx1026_pos
    $P11 = rx1026_cur."O"("%symbolic_unary, :op<stringify>")
    repr_get_attr_int $I11, $P11, rx1026_curclass, "$!pos"
    lt $I11, 0, rx1026_fail2806
    nqp_rxmark rx1026_bstack, rxsubrule1029_pass2815, -1, 0
  rxsubrule1029_pass2815:
    rx1026_cstack = rx1026_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1026_pos, $P11, rx1026_curclass, "$!pos"
    rx1026_cur."!cursor_pass"(rx1026_pos, "prefix:sym<~>", 'backtrack'=>1)
    .return (rx1026_cur)
  rx1026_restart2805:
    repr_get_attr_obj rx1026_cstack, rx1026_cur, rx1026_curclass, "$!cstack"
  rx1026_fail2806:
    unless rx1026_bstack, rx1026_done2804
    pop $I19, rx1026_bstack
    if_null rx1026_cstack, rx1026_cstack_done2809
    unless rx1026_cstack, rx1026_cstack_done2809
    dec $I19
    set $P11, rx1026_cstack[$I19]
  rx1026_cstack_done2809:
    pop rx1026_rep, rx1026_bstack
    pop rx1026_pos, rx1026_bstack
    pop $I19, rx1026_bstack
    lt rx1026_pos, -1, rx1026_done2804
    lt rx1026_pos, 0, rx1026_fail2806
    eq $I19, 0, rx1026_fail2806
    nqp_islist $I20, rx1026_cstack
    unless $I20, rx1026_jump2807
    elements $I18, rx1026_bstack
    le $I18, 0, rx1026_cut2808
    dec $I18
    set $I18, rx1026_bstack[$I18]
  rx1026_cut2808:
    assign rx1026_cstack, $I18
  rx1026_jump2807:
    jump $I19
  rx1026_done2804:
    rx1026_cur."!cursor_fail"()
    .return (rx1026_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_181_1347719921.536_caps" :subid("cuid_memo_297_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_181_1347719921.536_nfa" :subid("cuid_memo_298_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 126
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<->" :subid("cuid_182_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1267
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1030_tgt
    .local int rx1030_pos
    .local int rx1030_off
    .local int rx1030_eos
    .local int rx1030_rep
    .local pmc rx1030_cur
    .local pmc rx1030_curclass
    .local pmc rx1030_bstack
    .local pmc rx1030_cstack
    (rx1030_cur, rx1030_tgt, rx1030_pos, rx1030_curclass, rx1030_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1030_cur
    length rx1030_eos, rx1030_tgt
    eq $I19, 1, rx1030_restart2818
    gt rx1030_pos, rx1030_eos, rx1030_fail2819
    repr_get_attr_int $I11, self, rx1030_curclass, "$!from"
    ne $I11, -1, rxscan1031_done2825
    goto rxscan1031_scan2824
  rxscan1031_loop2823:
    inc rx1030_pos
    gt rx1030_pos, rx1030_eos, rx1030_fail2819
    repr_bind_attr_int rx1030_cur, rx1030_curclass, "$!from", rx1030_pos
  rxscan1031_scan2824:
    nqp_rxmark rx1030_bstack, rxscan1031_loop2823, rx1030_pos, 0
  rxscan1031_done2825:
    nqp_rxmark rx1030_bstack, rxcap1032_fail2827, rx1030_pos, 0
    add $I11, rx1030_pos, 1
    gt $I11, rx1030_eos, rx1030_fail2819
    substr $S10, rx1030_tgt, rx1030_pos, 1
    ne $S10, ucs4:"-", rx1030_fail2819
    add rx1030_pos, 1
    nqp_rxpeek $I19, rx1030_bstack, rxcap1032_fail2827
    inc $I19
    set $I11, rx1030_bstack[$I19]
    $P11 = rx1030_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1030_pos)
    rx1030_cstack = rx1030_cur."!cursor_capture"($P11, "sym")
    goto rxcap1032_done2826
  rxcap1032_fail2827:
    goto rx1030_fail2819
  rxcap1032_done2826:
    ge rx1030_pos, rx1030_eos, rx1030_fail2819
    substr $S11, rx1030_tgt, rx1030_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx1030_fail2819
    repr_bind_attr_int rx1030_cur, rx1030_curclass, "$!pos", rx1030_pos
    $P11 = rx1030_cur."number"()
    repr_get_attr_int $I11, $P11, rx1030_curclass, "$!pos"
    ge $I11, 0, rx1030_fail2819
    repr_bind_attr_int rx1030_cur, rx1030_curclass, "$!pos", rx1030_pos
    $P11 = rx1030_cur."O"("%symbolic_unary, :op<neg_n>")
    repr_get_attr_int $I11, $P11, rx1030_curclass, "$!pos"
    lt $I11, 0, rx1030_fail2819
    nqp_rxmark rx1030_bstack, rxsubrule1033_pass2828, -1, 0
  rxsubrule1033_pass2828:
    rx1030_cstack = rx1030_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1030_pos, $P11, rx1030_curclass, "$!pos"
    rx1030_cur."!cursor_pass"(rx1030_pos, "prefix:sym<->", 'backtrack'=>1)
    .return (rx1030_cur)
  rx1030_restart2818:
    repr_get_attr_obj rx1030_cstack, rx1030_cur, rx1030_curclass, "$!cstack"
  rx1030_fail2819:
    unless rx1030_bstack, rx1030_done2817
    pop $I19, rx1030_bstack
    if_null rx1030_cstack, rx1030_cstack_done2822
    unless rx1030_cstack, rx1030_cstack_done2822
    dec $I19
    set $P11, rx1030_cstack[$I19]
  rx1030_cstack_done2822:
    pop rx1030_rep, rx1030_bstack
    pop rx1030_pos, rx1030_bstack
    pop $I19, rx1030_bstack
    lt rx1030_pos, -1, rx1030_done2817
    lt rx1030_pos, 0, rx1030_fail2819
    eq $I19, 0, rx1030_fail2819
    nqp_islist $I20, rx1030_cstack
    unless $I20, rx1030_jump2820
    elements $I18, rx1030_bstack
    le $I18, 0, rx1030_cut2821
    dec $I18
    set $I18, rx1030_bstack[$I18]
  rx1030_cut2821:
    assign rx1030_cstack, $I18
  rx1030_jump2820:
    jump $I19
  rx1030_done2817:
    rx1030_cur."!cursor_fail"()
    .return (rx1030_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_182_1347719921.536_caps" :subid("cuid_memo_299_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_182_1347719921.536_nfa" :subid("cuid_memo_300_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 7
    push $P5007, $P5008
    box $P5009, ">"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<?>" :subid("cuid_183_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1268
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1034_tgt
    .local int rx1034_pos
    .local int rx1034_off
    .local int rx1034_eos
    .local int rx1034_rep
    .local pmc rx1034_cur
    .local pmc rx1034_curclass
    .local pmc rx1034_bstack
    .local pmc rx1034_cstack
    (rx1034_cur, rx1034_tgt, rx1034_pos, rx1034_curclass, rx1034_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1034_cur
    length rx1034_eos, rx1034_tgt
    eq $I19, 1, rx1034_restart2831
    gt rx1034_pos, rx1034_eos, rx1034_fail2832
    repr_get_attr_int $I11, self, rx1034_curclass, "$!from"
    ne $I11, -1, rxscan1035_done2838
    goto rxscan1035_scan2837
  rxscan1035_loop2836:
    inc rx1034_pos
    gt rx1034_pos, rx1034_eos, rx1034_fail2832
    repr_bind_attr_int rx1034_cur, rx1034_curclass, "$!from", rx1034_pos
  rxscan1035_scan2837:
    nqp_rxmark rx1034_bstack, rxscan1035_loop2836, rx1034_pos, 0
  rxscan1035_done2838:
    nqp_rxmark rx1034_bstack, rxcap1036_fail2840, rx1034_pos, 0
    add $I11, rx1034_pos, 1
    gt $I11, rx1034_eos, rx1034_fail2832
    substr $S10, rx1034_tgt, rx1034_pos, 1
    ne $S10, ucs4:"?", rx1034_fail2832
    add rx1034_pos, 1
    nqp_rxpeek $I19, rx1034_bstack, rxcap1036_fail2840
    inc $I19
    set $I11, rx1034_bstack[$I19]
    $P11 = rx1034_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1034_pos)
    rx1034_cstack = rx1034_cur."!cursor_capture"($P11, "sym")
    goto rxcap1036_done2839
  rxcap1036_fail2840:
    goto rx1034_fail2832
  rxcap1036_done2839:
    repr_bind_attr_int rx1034_cur, rx1034_curclass, "$!pos", rx1034_pos
    $P11 = rx1034_cur."O"("%symbolic_unary, :op<istrue>")
    repr_get_attr_int $I11, $P11, rx1034_curclass, "$!pos"
    lt $I11, 0, rx1034_fail2832
    nqp_rxmark rx1034_bstack, rxsubrule1037_pass2841, -1, 0
  rxsubrule1037_pass2841:
    rx1034_cstack = rx1034_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1034_pos, $P11, rx1034_curclass, "$!pos"
    rx1034_cur."!cursor_pass"(rx1034_pos, "prefix:sym<?>", 'backtrack'=>1)
    .return (rx1034_cur)
  rx1034_restart2831:
    repr_get_attr_obj rx1034_cstack, rx1034_cur, rx1034_curclass, "$!cstack"
  rx1034_fail2832:
    unless rx1034_bstack, rx1034_done2830
    pop $I19, rx1034_bstack
    if_null rx1034_cstack, rx1034_cstack_done2835
    unless rx1034_cstack, rx1034_cstack_done2835
    dec $I19
    set $P11, rx1034_cstack[$I19]
  rx1034_cstack_done2835:
    pop rx1034_rep, rx1034_bstack
    pop rx1034_pos, rx1034_bstack
    pop $I19, rx1034_bstack
    lt rx1034_pos, -1, rx1034_done2830
    lt rx1034_pos, 0, rx1034_fail2832
    eq $I19, 0, rx1034_fail2832
    nqp_islist $I20, rx1034_cstack
    unless $I20, rx1034_jump2833
    elements $I18, rx1034_bstack
    le $I18, 0, rx1034_cut2834
    dec $I18
    set $I18, rx1034_bstack[$I18]
  rx1034_cut2834:
    assign rx1034_cstack, $I18
  rx1034_jump2833:
    jump $I19
  rx1034_done2830:
    rx1034_cur."!cursor_fail"()
    .return (rx1034_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_183_1347719921.536_caps" :subid("cuid_memo_301_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_183_1347719921.536_nfa" :subid("cuid_memo_302_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 63
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<!>" :subid("cuid_184_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1269
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1038_tgt
    .local int rx1038_pos
    .local int rx1038_off
    .local int rx1038_eos
    .local int rx1038_rep
    .local pmc rx1038_cur
    .local pmc rx1038_curclass
    .local pmc rx1038_bstack
    .local pmc rx1038_cstack
    (rx1038_cur, rx1038_tgt, rx1038_pos, rx1038_curclass, rx1038_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1038_cur
    length rx1038_eos, rx1038_tgt
    eq $I19, 1, rx1038_restart2844
    gt rx1038_pos, rx1038_eos, rx1038_fail2845
    repr_get_attr_int $I11, self, rx1038_curclass, "$!from"
    ne $I11, -1, rxscan1039_done2851
    goto rxscan1039_scan2850
  rxscan1039_loop2849:
    inc rx1038_pos
    gt rx1038_pos, rx1038_eos, rx1038_fail2845
    repr_bind_attr_int rx1038_cur, rx1038_curclass, "$!from", rx1038_pos
  rxscan1039_scan2850:
    nqp_rxmark rx1038_bstack, rxscan1039_loop2849, rx1038_pos, 0
  rxscan1039_done2851:
    nqp_rxmark rx1038_bstack, rxcap1040_fail2853, rx1038_pos, 0
    add $I11, rx1038_pos, 1
    gt $I11, rx1038_eos, rx1038_fail2845
    substr $S10, rx1038_tgt, rx1038_pos, 1
    ne $S10, ucs4:"!", rx1038_fail2845
    add rx1038_pos, 1
    nqp_rxpeek $I19, rx1038_bstack, rxcap1040_fail2853
    inc $I19
    set $I11, rx1038_bstack[$I19]
    $P11 = rx1038_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1038_pos)
    rx1038_cstack = rx1038_cur."!cursor_capture"($P11, "sym")
    goto rxcap1040_done2852
  rxcap1040_fail2853:
    goto rx1038_fail2845
  rxcap1040_done2852:
    repr_bind_attr_int rx1038_cur, rx1038_curclass, "$!pos", rx1038_pos
    $P11 = rx1038_cur."O"("%symbolic_unary, :op<isfalse>")
    repr_get_attr_int $I11, $P11, rx1038_curclass, "$!pos"
    lt $I11, 0, rx1038_fail2845
    nqp_rxmark rx1038_bstack, rxsubrule1041_pass2854, -1, 0
  rxsubrule1041_pass2854:
    rx1038_cstack = rx1038_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1038_pos, $P11, rx1038_curclass, "$!pos"
    rx1038_cur."!cursor_pass"(rx1038_pos, "prefix:sym<!>", 'backtrack'=>1)
    .return (rx1038_cur)
  rx1038_restart2844:
    repr_get_attr_obj rx1038_cstack, rx1038_cur, rx1038_curclass, "$!cstack"
  rx1038_fail2845:
    unless rx1038_bstack, rx1038_done2843
    pop $I19, rx1038_bstack
    if_null rx1038_cstack, rx1038_cstack_done2848
    unless rx1038_cstack, rx1038_cstack_done2848
    dec $I19
    set $P11, rx1038_cstack[$I19]
  rx1038_cstack_done2848:
    pop rx1038_rep, rx1038_bstack
    pop rx1038_pos, rx1038_bstack
    pop $I19, rx1038_bstack
    lt rx1038_pos, -1, rx1038_done2843
    lt rx1038_pos, 0, rx1038_fail2845
    eq $I19, 0, rx1038_fail2845
    nqp_islist $I20, rx1038_cstack
    unless $I20, rx1038_jump2846
    elements $I18, rx1038_bstack
    le $I18, 0, rx1038_cut2847
    dec $I18
    set $I18, rx1038_bstack[$I18]
  rx1038_cut2847:
    assign rx1038_cstack, $I18
  rx1038_jump2846:
    jump $I19
  rx1038_done2843:
    rx1038_cur."!cursor_fail"()
    .return (rx1038_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_184_1347719921.536_caps" :subid("cuid_memo_303_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_184_1347719921.536_nfa" :subid("cuid_memo_304_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 33
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<|>" :subid("cuid_185_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1270
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1042_tgt
    .local int rx1042_pos
    .local int rx1042_off
    .local int rx1042_eos
    .local int rx1042_rep
    .local pmc rx1042_cur
    .local pmc rx1042_curclass
    .local pmc rx1042_bstack
    .local pmc rx1042_cstack
    (rx1042_cur, rx1042_tgt, rx1042_pos, rx1042_curclass, rx1042_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1042_cur
    length rx1042_eos, rx1042_tgt
    eq $I19, 1, rx1042_restart2857
    gt rx1042_pos, rx1042_eos, rx1042_fail2858
    repr_get_attr_int $I11, self, rx1042_curclass, "$!from"
    ne $I11, -1, rxscan1043_done2864
    goto rxscan1043_scan2863
  rxscan1043_loop2862:
    inc rx1042_pos
    gt rx1042_pos, rx1042_eos, rx1042_fail2858
    repr_bind_attr_int rx1042_cur, rx1042_curclass, "$!from", rx1042_pos
  rxscan1043_scan2863:
    nqp_rxmark rx1042_bstack, rxscan1043_loop2862, rx1042_pos, 0
  rxscan1043_done2864:
    nqp_rxmark rx1042_bstack, rxcap1044_fail2866, rx1042_pos, 0
    add $I11, rx1042_pos, 1
    gt $I11, rx1042_eos, rx1042_fail2858
    substr $S10, rx1042_tgt, rx1042_pos, 1
    ne $S10, ucs4:"|", rx1042_fail2858
    add rx1042_pos, 1
    nqp_rxpeek $I19, rx1042_bstack, rxcap1044_fail2866
    inc $I19
    set $I11, rx1042_bstack[$I19]
    $P11 = rx1042_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1042_pos)
    rx1042_cstack = rx1042_cur."!cursor_capture"($P11, "sym")
    goto rxcap1044_done2865
  rxcap1044_fail2866:
    goto rx1042_fail2858
  rxcap1044_done2865:
    repr_bind_attr_int rx1042_cur, rx1042_curclass, "$!pos", rx1042_pos
    $P11 = rx1042_cur."O"("%symbolic_unary")
    repr_get_attr_int $I11, $P11, rx1042_curclass, "$!pos"
    lt $I11, 0, rx1042_fail2858
    nqp_rxmark rx1042_bstack, rxsubrule1045_pass2867, -1, 0
  rxsubrule1045_pass2867:
    rx1042_cstack = rx1042_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1042_pos, $P11, rx1042_curclass, "$!pos"
    rx1042_cur."!cursor_pass"(rx1042_pos, "prefix:sym<|>", 'backtrack'=>1)
    .return (rx1042_cur)
  rx1042_restart2857:
    repr_get_attr_obj rx1042_cstack, rx1042_cur, rx1042_curclass, "$!cstack"
  rx1042_fail2858:
    unless rx1042_bstack, rx1042_done2856
    pop $I19, rx1042_bstack
    if_null rx1042_cstack, rx1042_cstack_done2861
    unless rx1042_cstack, rx1042_cstack_done2861
    dec $I19
    set $P11, rx1042_cstack[$I19]
  rx1042_cstack_done2861:
    pop rx1042_rep, rx1042_bstack
    pop rx1042_pos, rx1042_bstack
    pop $I19, rx1042_bstack
    lt rx1042_pos, -1, rx1042_done2856
    lt rx1042_pos, 0, rx1042_fail2858
    eq $I19, 0, rx1042_fail2858
    nqp_islist $I20, rx1042_cstack
    unless $I20, rx1042_jump2859
    elements $I18, rx1042_bstack
    le $I18, 0, rx1042_cut2860
    dec $I18
    set $I18, rx1042_bstack[$I18]
  rx1042_cut2860:
    assign rx1042_cstack, $I18
  rx1042_jump2859:
    jump $I19
  rx1042_done2856:
    rx1042_cur."!cursor_fail"()
    .return (rx1042_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_185_1347719921.536_caps" :subid("cuid_memo_305_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_185_1347719921.536_nfa" :subid("cuid_memo_306_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 124
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<*>" :subid("cuid_186_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1272
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1046_tgt
    .local int rx1046_pos
    .local int rx1046_off
    .local int rx1046_eos
    .local int rx1046_rep
    .local pmc rx1046_cur
    .local pmc rx1046_curclass
    .local pmc rx1046_bstack
    .local pmc rx1046_cstack
    (rx1046_cur, rx1046_tgt, rx1046_pos, rx1046_curclass, rx1046_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1046_cur
    length rx1046_eos, rx1046_tgt
    eq $I19, 1, rx1046_restart2870
    gt rx1046_pos, rx1046_eos, rx1046_fail2871
    repr_get_attr_int $I11, self, rx1046_curclass, "$!from"
    ne $I11, -1, rxscan1047_done2877
    goto rxscan1047_scan2876
  rxscan1047_loop2875:
    inc rx1046_pos
    gt rx1046_pos, rx1046_eos, rx1046_fail2871
    repr_bind_attr_int rx1046_cur, rx1046_curclass, "$!from", rx1046_pos
  rxscan1047_scan2876:
    nqp_rxmark rx1046_bstack, rxscan1047_loop2875, rx1046_pos, 0
  rxscan1047_done2877:
    nqp_rxmark rx1046_bstack, rxcap1048_fail2879, rx1046_pos, 0
    add $I11, rx1046_pos, 1
    gt $I11, rx1046_eos, rx1046_fail2871
    substr $S10, rx1046_tgt, rx1046_pos, 1
    ne $S10, ucs4:"*", rx1046_fail2871
    add rx1046_pos, 1
    nqp_rxpeek $I19, rx1046_bstack, rxcap1048_fail2879
    inc $I19
    set $I11, rx1046_bstack[$I19]
    $P11 = rx1046_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1046_pos)
    rx1046_cstack = rx1046_cur."!cursor_capture"($P11, "sym")
    goto rxcap1048_done2878
  rxcap1048_fail2879:
    goto rx1046_fail2871
  rxcap1048_done2878:
    repr_bind_attr_int rx1046_cur, rx1046_curclass, "$!pos", rx1046_pos
    $P11 = rx1046_cur."O"("%multiplicative, :op<mul_n>")
    repr_get_attr_int $I11, $P11, rx1046_curclass, "$!pos"
    lt $I11, 0, rx1046_fail2871
    nqp_rxmark rx1046_bstack, rxsubrule1049_pass2880, -1, 0
  rxsubrule1049_pass2880:
    rx1046_cstack = rx1046_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1046_pos, $P11, rx1046_curclass, "$!pos"
    rx1046_cur."!cursor_pass"(rx1046_pos, "infix:sym<*>", 'backtrack'=>1)
    .return (rx1046_cur)
  rx1046_restart2870:
    repr_get_attr_obj rx1046_cstack, rx1046_cur, rx1046_curclass, "$!cstack"
  rx1046_fail2871:
    unless rx1046_bstack, rx1046_done2869
    pop $I19, rx1046_bstack
    if_null rx1046_cstack, rx1046_cstack_done2874
    unless rx1046_cstack, rx1046_cstack_done2874
    dec $I19
    set $P11, rx1046_cstack[$I19]
  rx1046_cstack_done2874:
    pop rx1046_rep, rx1046_bstack
    pop rx1046_pos, rx1046_bstack
    pop $I19, rx1046_bstack
    lt rx1046_pos, -1, rx1046_done2869
    lt rx1046_pos, 0, rx1046_fail2871
    eq $I19, 0, rx1046_fail2871
    nqp_islist $I20, rx1046_cstack
    unless $I20, rx1046_jump2872
    elements $I18, rx1046_bstack
    le $I18, 0, rx1046_cut2873
    dec $I18
    set $I18, rx1046_bstack[$I18]
  rx1046_cut2873:
    assign rx1046_cstack, $I18
  rx1046_jump2872:
    jump $I19
  rx1046_done2869:
    rx1046_cur."!cursor_fail"()
    .return (rx1046_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_186_1347719921.536_caps" :subid("cuid_memo_307_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_186_1347719921.536_nfa" :subid("cuid_memo_308_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 42
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym</>" :subid("cuid_187_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1273
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1050_tgt
    .local int rx1050_pos
    .local int rx1050_off
    .local int rx1050_eos
    .local int rx1050_rep
    .local pmc rx1050_cur
    .local pmc rx1050_curclass
    .local pmc rx1050_bstack
    .local pmc rx1050_cstack
    (rx1050_cur, rx1050_tgt, rx1050_pos, rx1050_curclass, rx1050_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1050_cur
    length rx1050_eos, rx1050_tgt
    eq $I19, 1, rx1050_restart2883
    gt rx1050_pos, rx1050_eos, rx1050_fail2884
    repr_get_attr_int $I11, self, rx1050_curclass, "$!from"
    ne $I11, -1, rxscan1051_done2890
    goto rxscan1051_scan2889
  rxscan1051_loop2888:
    inc rx1050_pos
    gt rx1050_pos, rx1050_eos, rx1050_fail2884
    repr_bind_attr_int rx1050_cur, rx1050_curclass, "$!from", rx1050_pos
  rxscan1051_scan2889:
    nqp_rxmark rx1050_bstack, rxscan1051_loop2888, rx1050_pos, 0
  rxscan1051_done2890:
    nqp_rxmark rx1050_bstack, rxcap1052_fail2892, rx1050_pos, 0
    add $I11, rx1050_pos, 1
    gt $I11, rx1050_eos, rx1050_fail2884
    substr $S10, rx1050_tgt, rx1050_pos, 1
    ne $S10, ucs4:"/", rx1050_fail2884
    add rx1050_pos, 1
    nqp_rxpeek $I19, rx1050_bstack, rxcap1052_fail2892
    inc $I19
    set $I11, rx1050_bstack[$I19]
    $P11 = rx1050_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1050_pos)
    rx1050_cstack = rx1050_cur."!cursor_capture"($P11, "sym")
    goto rxcap1052_done2891
  rxcap1052_fail2892:
    goto rx1050_fail2884
  rxcap1052_done2891:
    repr_bind_attr_int rx1050_cur, rx1050_curclass, "$!pos", rx1050_pos
    $P11 = rx1050_cur."O"("%multiplicative, :op<div_n>")
    repr_get_attr_int $I11, $P11, rx1050_curclass, "$!pos"
    lt $I11, 0, rx1050_fail2884
    nqp_rxmark rx1050_bstack, rxsubrule1053_pass2893, -1, 0
  rxsubrule1053_pass2893:
    rx1050_cstack = rx1050_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1050_pos, $P11, rx1050_curclass, "$!pos"
    rx1050_cur."!cursor_pass"(rx1050_pos, "infix:sym</>", 'backtrack'=>1)
    .return (rx1050_cur)
  rx1050_restart2883:
    repr_get_attr_obj rx1050_cstack, rx1050_cur, rx1050_curclass, "$!cstack"
  rx1050_fail2884:
    unless rx1050_bstack, rx1050_done2882
    pop $I19, rx1050_bstack
    if_null rx1050_cstack, rx1050_cstack_done2887
    unless rx1050_cstack, rx1050_cstack_done2887
    dec $I19
    set $P11, rx1050_cstack[$I19]
  rx1050_cstack_done2887:
    pop rx1050_rep, rx1050_bstack
    pop rx1050_pos, rx1050_bstack
    pop $I19, rx1050_bstack
    lt rx1050_pos, -1, rx1050_done2882
    lt rx1050_pos, 0, rx1050_fail2884
    eq $I19, 0, rx1050_fail2884
    nqp_islist $I20, rx1050_cstack
    unless $I20, rx1050_jump2885
    elements $I18, rx1050_bstack
    le $I18, 0, rx1050_cut2886
    dec $I18
    set $I18, rx1050_bstack[$I18]
  rx1050_cut2886:
    assign rx1050_cstack, $I18
  rx1050_jump2885:
    jump $I19
  rx1050_done2882:
    rx1050_cur."!cursor_fail"()
    .return (rx1050_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_187_1347719921.536_caps" :subid("cuid_memo_309_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_187_1347719921.536_nfa" :subid("cuid_memo_310_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 47
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<%>" :subid("cuid_188_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1274
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1054_tgt
    .local int rx1054_pos
    .local int rx1054_off
    .local int rx1054_eos
    .local int rx1054_rep
    .local pmc rx1054_cur
    .local pmc rx1054_curclass
    .local pmc rx1054_bstack
    .local pmc rx1054_cstack
    (rx1054_cur, rx1054_tgt, rx1054_pos, rx1054_curclass, rx1054_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1054_cur
    length rx1054_eos, rx1054_tgt
    eq $I19, 1, rx1054_restart2896
    gt rx1054_pos, rx1054_eos, rx1054_fail2897
    repr_get_attr_int $I11, self, rx1054_curclass, "$!from"
    ne $I11, -1, rxscan1055_done2903
    goto rxscan1055_scan2902
  rxscan1055_loop2901:
    inc rx1054_pos
    gt rx1054_pos, rx1054_eos, rx1054_fail2897
    repr_bind_attr_int rx1054_cur, rx1054_curclass, "$!from", rx1054_pos
  rxscan1055_scan2902:
    nqp_rxmark rx1054_bstack, rxscan1055_loop2901, rx1054_pos, 0
  rxscan1055_done2903:
    nqp_rxmark rx1054_bstack, rxcap1056_fail2905, rx1054_pos, 0
    add $I11, rx1054_pos, 1
    gt $I11, rx1054_eos, rx1054_fail2897
    substr $S10, rx1054_tgt, rx1054_pos, 1
    ne $S10, ucs4:"%", rx1054_fail2897
    add rx1054_pos, 1
    nqp_rxpeek $I19, rx1054_bstack, rxcap1056_fail2905
    inc $I19
    set $I11, rx1054_bstack[$I19]
    $P11 = rx1054_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1054_pos)
    rx1054_cstack = rx1054_cur."!cursor_capture"($P11, "sym")
    goto rxcap1056_done2904
  rxcap1056_fail2905:
    goto rx1054_fail2897
  rxcap1056_done2904:
    repr_bind_attr_int rx1054_cur, rx1054_curclass, "$!pos", rx1054_pos
    $P11 = rx1054_cur."O"("%multiplicative, :op<mod_n>")
    repr_get_attr_int $I11, $P11, rx1054_curclass, "$!pos"
    lt $I11, 0, rx1054_fail2897
    nqp_rxmark rx1054_bstack, rxsubrule1057_pass2906, -1, 0
  rxsubrule1057_pass2906:
    rx1054_cstack = rx1054_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1054_pos, $P11, rx1054_curclass, "$!pos"
    rx1054_cur."!cursor_pass"(rx1054_pos, "infix:sym<%>", 'backtrack'=>1)
    .return (rx1054_cur)
  rx1054_restart2896:
    repr_get_attr_obj rx1054_cstack, rx1054_cur, rx1054_curclass, "$!cstack"
  rx1054_fail2897:
    unless rx1054_bstack, rx1054_done2895
    pop $I19, rx1054_bstack
    if_null rx1054_cstack, rx1054_cstack_done2900
    unless rx1054_cstack, rx1054_cstack_done2900
    dec $I19
    set $P11, rx1054_cstack[$I19]
  rx1054_cstack_done2900:
    pop rx1054_rep, rx1054_bstack
    pop rx1054_pos, rx1054_bstack
    pop $I19, rx1054_bstack
    lt rx1054_pos, -1, rx1054_done2895
    lt rx1054_pos, 0, rx1054_fail2897
    eq $I19, 0, rx1054_fail2897
    nqp_islist $I20, rx1054_cstack
    unless $I20, rx1054_jump2898
    elements $I18, rx1054_bstack
    le $I18, 0, rx1054_cut2899
    dec $I18
    set $I18, rx1054_bstack[$I18]
  rx1054_cut2899:
    assign rx1054_cstack, $I18
  rx1054_jump2898:
    jump $I19
  rx1054_done2895:
    rx1054_cur."!cursor_fail"()
    .return (rx1054_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_188_1347719921.536_caps" :subid("cuid_memo_311_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_188_1347719921.536_nfa" :subid("cuid_memo_312_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 37
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+&>" :subid("cuid_189_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1275
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1058_tgt
    .local int rx1058_pos
    .local int rx1058_off
    .local int rx1058_eos
    .local int rx1058_rep
    .local pmc rx1058_cur
    .local pmc rx1058_curclass
    .local pmc rx1058_bstack
    .local pmc rx1058_cstack
    (rx1058_cur, rx1058_tgt, rx1058_pos, rx1058_curclass, rx1058_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1058_cur
    length rx1058_eos, rx1058_tgt
    eq $I19, 1, rx1058_restart2909
    gt rx1058_pos, rx1058_eos, rx1058_fail2910
    repr_get_attr_int $I11, self, rx1058_curclass, "$!from"
    ne $I11, -1, rxscan1059_done2916
    goto rxscan1059_scan2915
  rxscan1059_loop2914:
    inc rx1058_pos
    gt rx1058_pos, rx1058_eos, rx1058_fail2910
    repr_bind_attr_int rx1058_cur, rx1058_curclass, "$!from", rx1058_pos
  rxscan1059_scan2915:
    nqp_rxmark rx1058_bstack, rxscan1059_loop2914, rx1058_pos, 0
  rxscan1059_done2916:
    nqp_rxmark rx1058_bstack, rxcap1060_fail2918, rx1058_pos, 0
    add $I11, rx1058_pos, 2
    gt $I11, rx1058_eos, rx1058_fail2910
    substr $S10, rx1058_tgt, rx1058_pos, 2
    ne $S10, ucs4:"+&", rx1058_fail2910
    add rx1058_pos, 2
    nqp_rxpeek $I19, rx1058_bstack, rxcap1060_fail2918
    inc $I19
    set $I11, rx1058_bstack[$I19]
    $P11 = rx1058_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1058_pos)
    rx1058_cstack = rx1058_cur."!cursor_capture"($P11, "sym")
    goto rxcap1060_done2917
  rxcap1060_fail2918:
    goto rx1058_fail2910
  rxcap1060_done2917:
    repr_bind_attr_int rx1058_cur, rx1058_curclass, "$!pos", rx1058_pos
    $P11 = rx1058_cur."O"("%multiplicative, :op<bitand_i>")
    repr_get_attr_int $I11, $P11, rx1058_curclass, "$!pos"
    lt $I11, 0, rx1058_fail2910
    nqp_rxmark rx1058_bstack, rxsubrule1061_pass2919, -1, 0
  rxsubrule1061_pass2919:
    rx1058_cstack = rx1058_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1058_pos, $P11, rx1058_curclass, "$!pos"
    rx1058_cur."!cursor_pass"(rx1058_pos, "infix:sym<+&>", 'backtrack'=>1)
    .return (rx1058_cur)
  rx1058_restart2909:
    repr_get_attr_obj rx1058_cstack, rx1058_cur, rx1058_curclass, "$!cstack"
  rx1058_fail2910:
    unless rx1058_bstack, rx1058_done2908
    pop $I19, rx1058_bstack
    if_null rx1058_cstack, rx1058_cstack_done2913
    unless rx1058_cstack, rx1058_cstack_done2913
    dec $I19
    set $P11, rx1058_cstack[$I19]
  rx1058_cstack_done2913:
    pop rx1058_rep, rx1058_bstack
    pop rx1058_pos, rx1058_bstack
    pop $I19, rx1058_bstack
    lt rx1058_pos, -1, rx1058_done2908
    lt rx1058_pos, 0, rx1058_fail2910
    eq $I19, 0, rx1058_fail2910
    nqp_islist $I20, rx1058_cstack
    unless $I20, rx1058_jump2911
    elements $I18, rx1058_bstack
    le $I18, 0, rx1058_cut2912
    dec $I18
    set $I18, rx1058_bstack[$I18]
  rx1058_cut2912:
    assign rx1058_cstack, $I18
  rx1058_jump2911:
    jump $I19
  rx1058_done2908:
    rx1058_cur."!cursor_fail"()
    .return (rx1058_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_189_1347719921.536_caps" :subid("cuid_memo_313_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_189_1347719921.536_nfa" :subid("cuid_memo_314_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 38
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+>" :subid("cuid_190_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1277
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1062_tgt
    .local int rx1062_pos
    .local int rx1062_off
    .local int rx1062_eos
    .local int rx1062_rep
    .local pmc rx1062_cur
    .local pmc rx1062_curclass
    .local pmc rx1062_bstack
    .local pmc rx1062_cstack
    (rx1062_cur, rx1062_tgt, rx1062_pos, rx1062_curclass, rx1062_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1062_cur
    length rx1062_eos, rx1062_tgt
    eq $I19, 1, rx1062_restart2922
    gt rx1062_pos, rx1062_eos, rx1062_fail2923
    repr_get_attr_int $I11, self, rx1062_curclass, "$!from"
    ne $I11, -1, rxscan1063_done2929
    goto rxscan1063_scan2928
  rxscan1063_loop2927:
    inc rx1062_pos
    gt rx1062_pos, rx1062_eos, rx1062_fail2923
    repr_bind_attr_int rx1062_cur, rx1062_curclass, "$!from", rx1062_pos
  rxscan1063_scan2928:
    nqp_rxmark rx1062_bstack, rxscan1063_loop2927, rx1062_pos, 0
  rxscan1063_done2929:
    nqp_rxmark rx1062_bstack, rxcap1064_fail2931, rx1062_pos, 0
    add $I11, rx1062_pos, 1
    gt $I11, rx1062_eos, rx1062_fail2923
    substr $S10, rx1062_tgt, rx1062_pos, 1
    ne $S10, ucs4:"+", rx1062_fail2923
    add rx1062_pos, 1
    nqp_rxpeek $I19, rx1062_bstack, rxcap1064_fail2931
    inc $I19
    set $I11, rx1062_bstack[$I19]
    $P11 = rx1062_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1062_pos)
    rx1062_cstack = rx1062_cur."!cursor_capture"($P11, "sym")
    goto rxcap1064_done2930
  rxcap1064_fail2931:
    goto rx1062_fail2923
  rxcap1064_done2930:
    repr_bind_attr_int rx1062_cur, rx1062_curclass, "$!pos", rx1062_pos
    $P11 = rx1062_cur."O"("%additive, :op<add_n>")
    repr_get_attr_int $I11, $P11, rx1062_curclass, "$!pos"
    lt $I11, 0, rx1062_fail2923
    nqp_rxmark rx1062_bstack, rxsubrule1065_pass2932, -1, 0
  rxsubrule1065_pass2932:
    rx1062_cstack = rx1062_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1062_pos, $P11, rx1062_curclass, "$!pos"
    rx1062_cur."!cursor_pass"(rx1062_pos, "infix:sym<+>", 'backtrack'=>1)
    .return (rx1062_cur)
  rx1062_restart2922:
    repr_get_attr_obj rx1062_cstack, rx1062_cur, rx1062_curclass, "$!cstack"
  rx1062_fail2923:
    unless rx1062_bstack, rx1062_done2921
    pop $I19, rx1062_bstack
    if_null rx1062_cstack, rx1062_cstack_done2926
    unless rx1062_cstack, rx1062_cstack_done2926
    dec $I19
    set $P11, rx1062_cstack[$I19]
  rx1062_cstack_done2926:
    pop rx1062_rep, rx1062_bstack
    pop rx1062_pos, rx1062_bstack
    pop $I19, rx1062_bstack
    lt rx1062_pos, -1, rx1062_done2921
    lt rx1062_pos, 0, rx1062_fail2923
    eq $I19, 0, rx1062_fail2923
    nqp_islist $I20, rx1062_cstack
    unless $I20, rx1062_jump2924
    elements $I18, rx1062_bstack
    le $I18, 0, rx1062_cut2925
    dec $I18
    set $I18, rx1062_bstack[$I18]
  rx1062_cut2925:
    assign rx1062_cstack, $I18
  rx1062_jump2924:
    jump $I19
  rx1062_done2921:
    rx1062_cur."!cursor_fail"()
    .return (rx1062_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_190_1347719921.536_caps" :subid("cuid_memo_315_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_190_1347719921.536_nfa" :subid("cuid_memo_316_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<->" :subid("cuid_191_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1278
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1066_tgt
    .local int rx1066_pos
    .local int rx1066_off
    .local int rx1066_eos
    .local int rx1066_rep
    .local pmc rx1066_cur
    .local pmc rx1066_curclass
    .local pmc rx1066_bstack
    .local pmc rx1066_cstack
    (rx1066_cur, rx1066_tgt, rx1066_pos, rx1066_curclass, rx1066_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1066_cur
    length rx1066_eos, rx1066_tgt
    eq $I19, 1, rx1066_restart2935
    gt rx1066_pos, rx1066_eos, rx1066_fail2936
    repr_get_attr_int $I11, self, rx1066_curclass, "$!from"
    ne $I11, -1, rxscan1067_done2942
    goto rxscan1067_scan2941
  rxscan1067_loop2940:
    inc rx1066_pos
    gt rx1066_pos, rx1066_eos, rx1066_fail2936
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!from", rx1066_pos
  rxscan1067_scan2941:
    nqp_rxmark rx1066_bstack, rxscan1067_loop2940, rx1066_pos, 0
  rxscan1067_done2942:
    nqp_rxmark rx1066_bstack, rxcap1068_fail2944, rx1066_pos, 0
    add $I11, rx1066_pos, 1
    gt $I11, rx1066_eos, rx1066_fail2936
    substr $S10, rx1066_tgt, rx1066_pos, 1
    ne $S10, ucs4:"-", rx1066_fail2936
    add rx1066_pos, 1
    nqp_rxpeek $I19, rx1066_bstack, rxcap1068_fail2944
    inc $I19
    set $I11, rx1066_bstack[$I19]
    $P11 = rx1066_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1066_pos)
    rx1066_cstack = rx1066_cur."!cursor_capture"($P11, "sym")
    goto rxcap1068_done2943
  rxcap1068_fail2944:
    goto rx1066_fail2936
  rxcap1068_done2943:
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!pos", rx1066_pos
    $P11 = rx1066_cur."O"("%additive, :op<sub_n>")
    repr_get_attr_int $I11, $P11, rx1066_curclass, "$!pos"
    lt $I11, 0, rx1066_fail2936
    nqp_rxmark rx1066_bstack, rxsubrule1069_pass2945, -1, 0
  rxsubrule1069_pass2945:
    rx1066_cstack = rx1066_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1066_pos, $P11, rx1066_curclass, "$!pos"
    rx1066_cur."!cursor_pass"(rx1066_pos, "infix:sym<->", 'backtrack'=>1)
    .return (rx1066_cur)
  rx1066_restart2935:
    repr_get_attr_obj rx1066_cstack, rx1066_cur, rx1066_curclass, "$!cstack"
  rx1066_fail2936:
    unless rx1066_bstack, rx1066_done2934
    pop $I19, rx1066_bstack
    if_null rx1066_cstack, rx1066_cstack_done2939
    unless rx1066_cstack, rx1066_cstack_done2939
    dec $I19
    set $P11, rx1066_cstack[$I19]
  rx1066_cstack_done2939:
    pop rx1066_rep, rx1066_bstack
    pop rx1066_pos, rx1066_bstack
    pop $I19, rx1066_bstack
    lt rx1066_pos, -1, rx1066_done2934
    lt rx1066_pos, 0, rx1066_fail2936
    eq $I19, 0, rx1066_fail2936
    nqp_islist $I20, rx1066_cstack
    unless $I20, rx1066_jump2937
    elements $I18, rx1066_bstack
    le $I18, 0, rx1066_cut2938
    dec $I18
    set $I18, rx1066_bstack[$I18]
  rx1066_cut2938:
    assign rx1066_cstack, $I18
  rx1066_jump2937:
    jump $I19
  rx1066_done2934:
    rx1066_cur."!cursor_fail"()
    .return (rx1066_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_191_1347719921.536_caps" :subid("cuid_memo_317_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_191_1347719921.536_nfa" :subid("cuid_memo_318_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+|>" :subid("cuid_192_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1279
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1070_tgt
    .local int rx1070_pos
    .local int rx1070_off
    .local int rx1070_eos
    .local int rx1070_rep
    .local pmc rx1070_cur
    .local pmc rx1070_curclass
    .local pmc rx1070_bstack
    .local pmc rx1070_cstack
    (rx1070_cur, rx1070_tgt, rx1070_pos, rx1070_curclass, rx1070_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1070_cur
    length rx1070_eos, rx1070_tgt
    eq $I19, 1, rx1070_restart2948
    gt rx1070_pos, rx1070_eos, rx1070_fail2949
    repr_get_attr_int $I11, self, rx1070_curclass, "$!from"
    ne $I11, -1, rxscan1071_done2955
    goto rxscan1071_scan2954
  rxscan1071_loop2953:
    inc rx1070_pos
    gt rx1070_pos, rx1070_eos, rx1070_fail2949
    repr_bind_attr_int rx1070_cur, rx1070_curclass, "$!from", rx1070_pos
  rxscan1071_scan2954:
    nqp_rxmark rx1070_bstack, rxscan1071_loop2953, rx1070_pos, 0
  rxscan1071_done2955:
    nqp_rxmark rx1070_bstack, rxcap1072_fail2957, rx1070_pos, 0
    add $I11, rx1070_pos, 2
    gt $I11, rx1070_eos, rx1070_fail2949
    substr $S10, rx1070_tgt, rx1070_pos, 2
    ne $S10, ucs4:"+|", rx1070_fail2949
    add rx1070_pos, 2
    nqp_rxpeek $I19, rx1070_bstack, rxcap1072_fail2957
    inc $I19
    set $I11, rx1070_bstack[$I19]
    $P11 = rx1070_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1070_pos)
    rx1070_cstack = rx1070_cur."!cursor_capture"($P11, "sym")
    goto rxcap1072_done2956
  rxcap1072_fail2957:
    goto rx1070_fail2949
  rxcap1072_done2956:
    repr_bind_attr_int rx1070_cur, rx1070_curclass, "$!pos", rx1070_pos
    $P11 = rx1070_cur."O"("%additive, :op<bitor_i>")
    repr_get_attr_int $I11, $P11, rx1070_curclass, "$!pos"
    lt $I11, 0, rx1070_fail2949
    nqp_rxmark rx1070_bstack, rxsubrule1073_pass2958, -1, 0
  rxsubrule1073_pass2958:
    rx1070_cstack = rx1070_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1070_pos, $P11, rx1070_curclass, "$!pos"
    rx1070_cur."!cursor_pass"(rx1070_pos, "infix:sym<+|>", 'backtrack'=>1)
    .return (rx1070_cur)
  rx1070_restart2948:
    repr_get_attr_obj rx1070_cstack, rx1070_cur, rx1070_curclass, "$!cstack"
  rx1070_fail2949:
    unless rx1070_bstack, rx1070_done2947
    pop $I19, rx1070_bstack
    if_null rx1070_cstack, rx1070_cstack_done2952
    unless rx1070_cstack, rx1070_cstack_done2952
    dec $I19
    set $P11, rx1070_cstack[$I19]
  rx1070_cstack_done2952:
    pop rx1070_rep, rx1070_bstack
    pop rx1070_pos, rx1070_bstack
    pop $I19, rx1070_bstack
    lt rx1070_pos, -1, rx1070_done2947
    lt rx1070_pos, 0, rx1070_fail2949
    eq $I19, 0, rx1070_fail2949
    nqp_islist $I20, rx1070_cstack
    unless $I20, rx1070_jump2950
    elements $I18, rx1070_bstack
    le $I18, 0, rx1070_cut2951
    dec $I18
    set $I18, rx1070_bstack[$I18]
  rx1070_cut2951:
    assign rx1070_cstack, $I18
  rx1070_jump2950:
    jump $I19
  rx1070_done2947:
    rx1070_cur."!cursor_fail"()
    .return (rx1070_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_192_1347719921.536_caps" :subid("cuid_memo_319_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_192_1347719921.536_nfa" :subid("cuid_memo_320_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 124
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+^>" :subid("cuid_193_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1280
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1074_tgt
    .local int rx1074_pos
    .local int rx1074_off
    .local int rx1074_eos
    .local int rx1074_rep
    .local pmc rx1074_cur
    .local pmc rx1074_curclass
    .local pmc rx1074_bstack
    .local pmc rx1074_cstack
    (rx1074_cur, rx1074_tgt, rx1074_pos, rx1074_curclass, rx1074_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1074_cur
    length rx1074_eos, rx1074_tgt
    eq $I19, 1, rx1074_restart2961
    gt rx1074_pos, rx1074_eos, rx1074_fail2962
    repr_get_attr_int $I11, self, rx1074_curclass, "$!from"
    ne $I11, -1, rxscan1075_done2968
    goto rxscan1075_scan2967
  rxscan1075_loop2966:
    inc rx1074_pos
    gt rx1074_pos, rx1074_eos, rx1074_fail2962
    repr_bind_attr_int rx1074_cur, rx1074_curclass, "$!from", rx1074_pos
  rxscan1075_scan2967:
    nqp_rxmark rx1074_bstack, rxscan1075_loop2966, rx1074_pos, 0
  rxscan1075_done2968:
    nqp_rxmark rx1074_bstack, rxcap1076_fail2970, rx1074_pos, 0
    add $I11, rx1074_pos, 2
    gt $I11, rx1074_eos, rx1074_fail2962
    substr $S10, rx1074_tgt, rx1074_pos, 2
    ne $S10, ucs4:"+^", rx1074_fail2962
    add rx1074_pos, 2
    nqp_rxpeek $I19, rx1074_bstack, rxcap1076_fail2970
    inc $I19
    set $I11, rx1074_bstack[$I19]
    $P11 = rx1074_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1074_pos)
    rx1074_cstack = rx1074_cur."!cursor_capture"($P11, "sym")
    goto rxcap1076_done2969
  rxcap1076_fail2970:
    goto rx1074_fail2962
  rxcap1076_done2969:
    repr_bind_attr_int rx1074_cur, rx1074_curclass, "$!pos", rx1074_pos
    $P11 = rx1074_cur."O"("%additive, :op<bitxor_i>")
    repr_get_attr_int $I11, $P11, rx1074_curclass, "$!pos"
    lt $I11, 0, rx1074_fail2962
    nqp_rxmark rx1074_bstack, rxsubrule1077_pass2971, -1, 0
  rxsubrule1077_pass2971:
    rx1074_cstack = rx1074_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1074_pos, $P11, rx1074_curclass, "$!pos"
    rx1074_cur."!cursor_pass"(rx1074_pos, "infix:sym<+^>", 'backtrack'=>1)
    .return (rx1074_cur)
  rx1074_restart2961:
    repr_get_attr_obj rx1074_cstack, rx1074_cur, rx1074_curclass, "$!cstack"
  rx1074_fail2962:
    unless rx1074_bstack, rx1074_done2960
    pop $I19, rx1074_bstack
    if_null rx1074_cstack, rx1074_cstack_done2965
    unless rx1074_cstack, rx1074_cstack_done2965
    dec $I19
    set $P11, rx1074_cstack[$I19]
  rx1074_cstack_done2965:
    pop rx1074_rep, rx1074_bstack
    pop rx1074_pos, rx1074_bstack
    pop $I19, rx1074_bstack
    lt rx1074_pos, -1, rx1074_done2960
    lt rx1074_pos, 0, rx1074_fail2962
    eq $I19, 0, rx1074_fail2962
    nqp_islist $I20, rx1074_cstack
    unless $I20, rx1074_jump2963
    elements $I18, rx1074_bstack
    le $I18, 0, rx1074_cut2964
    dec $I18
    set $I18, rx1074_bstack[$I18]
  rx1074_cut2964:
    assign rx1074_cstack, $I18
  rx1074_jump2963:
    jump $I19
  rx1074_done2960:
    rx1074_cur."!cursor_fail"()
    .return (rx1074_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_193_1347719921.536_caps" :subid("cuid_memo_321_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_193_1347719921.536_nfa" :subid("cuid_memo_322_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 94
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~>" :subid("cuid_194_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1282
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1078_tgt
    .local int rx1078_pos
    .local int rx1078_off
    .local int rx1078_eos
    .local int rx1078_rep
    .local pmc rx1078_cur
    .local pmc rx1078_curclass
    .local pmc rx1078_bstack
    .local pmc rx1078_cstack
    (rx1078_cur, rx1078_tgt, rx1078_pos, rx1078_curclass, rx1078_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1078_cur
    length rx1078_eos, rx1078_tgt
    eq $I19, 1, rx1078_restart2974
    gt rx1078_pos, rx1078_eos, rx1078_fail2975
    repr_get_attr_int $I11, self, rx1078_curclass, "$!from"
    ne $I11, -1, rxscan1079_done2981
    goto rxscan1079_scan2980
  rxscan1079_loop2979:
    inc rx1078_pos
    gt rx1078_pos, rx1078_eos, rx1078_fail2975
    repr_bind_attr_int rx1078_cur, rx1078_curclass, "$!from", rx1078_pos
  rxscan1079_scan2980:
    nqp_rxmark rx1078_bstack, rxscan1079_loop2979, rx1078_pos, 0
  rxscan1079_done2981:
    nqp_rxmark rx1078_bstack, rxcap1080_fail2983, rx1078_pos, 0
    add $I11, rx1078_pos, 1
    gt $I11, rx1078_eos, rx1078_fail2975
    substr $S10, rx1078_tgt, rx1078_pos, 1
    ne $S10, ucs4:"~", rx1078_fail2975
    add rx1078_pos, 1
    nqp_rxpeek $I19, rx1078_bstack, rxcap1080_fail2983
    inc $I19
    set $I11, rx1078_bstack[$I19]
    $P11 = rx1078_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1078_pos)
    rx1078_cstack = rx1078_cur."!cursor_capture"($P11, "sym")
    goto rxcap1080_done2982
  rxcap1080_fail2983:
    goto rx1078_fail2975
  rxcap1080_done2982:
    repr_bind_attr_int rx1078_cur, rx1078_curclass, "$!pos", rx1078_pos
    $P11 = rx1078_cur."O"("%concatenation , :op<concat>")
    repr_get_attr_int $I11, $P11, rx1078_curclass, "$!pos"
    lt $I11, 0, rx1078_fail2975
    nqp_rxmark rx1078_bstack, rxsubrule1081_pass2984, -1, 0
  rxsubrule1081_pass2984:
    rx1078_cstack = rx1078_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1078_pos, $P11, rx1078_curclass, "$!pos"
    rx1078_cur."!cursor_pass"(rx1078_pos, "infix:sym<~>", 'backtrack'=>1)
    .return (rx1078_cur)
  rx1078_restart2974:
    repr_get_attr_obj rx1078_cstack, rx1078_cur, rx1078_curclass, "$!cstack"
  rx1078_fail2975:
    unless rx1078_bstack, rx1078_done2973
    pop $I19, rx1078_bstack
    if_null rx1078_cstack, rx1078_cstack_done2978
    unless rx1078_cstack, rx1078_cstack_done2978
    dec $I19
    set $P11, rx1078_cstack[$I19]
  rx1078_cstack_done2978:
    pop rx1078_rep, rx1078_bstack
    pop rx1078_pos, rx1078_bstack
    pop $I19, rx1078_bstack
    lt rx1078_pos, -1, rx1078_done2973
    lt rx1078_pos, 0, rx1078_fail2975
    eq $I19, 0, rx1078_fail2975
    nqp_islist $I20, rx1078_cstack
    unless $I20, rx1078_jump2976
    elements $I18, rx1078_bstack
    le $I18, 0, rx1078_cut2977
    dec $I18
    set $I18, rx1078_bstack[$I18]
  rx1078_cut2977:
    assign rx1078_cstack, $I18
  rx1078_jump2976:
    jump $I19
  rx1078_done2973:
    rx1078_cur."!cursor_fail"()
    .return (rx1078_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_194_1347719921.536_caps" :subid("cuid_memo_323_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_194_1347719921.536_nfa" :subid("cuid_memo_324_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 126
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<==>" :subid("cuid_195_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1284
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1082_tgt
    .local int rx1082_pos
    .local int rx1082_off
    .local int rx1082_eos
    .local int rx1082_rep
    .local pmc rx1082_cur
    .local pmc rx1082_curclass
    .local pmc rx1082_bstack
    .local pmc rx1082_cstack
    (rx1082_cur, rx1082_tgt, rx1082_pos, rx1082_curclass, rx1082_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1082_cur
    length rx1082_eos, rx1082_tgt
    eq $I19, 1, rx1082_restart2987
    gt rx1082_pos, rx1082_eos, rx1082_fail2988
    repr_get_attr_int $I11, self, rx1082_curclass, "$!from"
    ne $I11, -1, rxscan1083_done2994
    goto rxscan1083_scan2993
  rxscan1083_loop2992:
    inc rx1082_pos
    gt rx1082_pos, rx1082_eos, rx1082_fail2988
    repr_bind_attr_int rx1082_cur, rx1082_curclass, "$!from", rx1082_pos
  rxscan1083_scan2993:
    nqp_rxmark rx1082_bstack, rxscan1083_loop2992, rx1082_pos, 0
  rxscan1083_done2994:
    nqp_rxmark rx1082_bstack, rxcap1084_fail2996, rx1082_pos, 0
    add $I11, rx1082_pos, 2
    gt $I11, rx1082_eos, rx1082_fail2988
    substr $S10, rx1082_tgt, rx1082_pos, 2
    ne $S10, ucs4:"==", rx1082_fail2988
    add rx1082_pos, 2
    nqp_rxpeek $I19, rx1082_bstack, rxcap1084_fail2996
    inc $I19
    set $I11, rx1082_bstack[$I19]
    $P11 = rx1082_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1082_pos)
    rx1082_cstack = rx1082_cur."!cursor_capture"($P11, "sym")
    goto rxcap1084_done2995
  rxcap1084_fail2996:
    goto rx1082_fail2988
  rxcap1084_done2995:
    repr_bind_attr_int rx1082_cur, rx1082_curclass, "$!pos", rx1082_pos
    $P11 = rx1082_cur."O"("%relational, :op<iseq_n>")
    repr_get_attr_int $I11, $P11, rx1082_curclass, "$!pos"
    lt $I11, 0, rx1082_fail2988
    nqp_rxmark rx1082_bstack, rxsubrule1085_pass2997, -1, 0
  rxsubrule1085_pass2997:
    rx1082_cstack = rx1082_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1082_pos, $P11, rx1082_curclass, "$!pos"
    rx1082_cur."!cursor_pass"(rx1082_pos, "infix:sym<==>", 'backtrack'=>1)
    .return (rx1082_cur)
  rx1082_restart2987:
    repr_get_attr_obj rx1082_cstack, rx1082_cur, rx1082_curclass, "$!cstack"
  rx1082_fail2988:
    unless rx1082_bstack, rx1082_done2986
    pop $I19, rx1082_bstack
    if_null rx1082_cstack, rx1082_cstack_done2991
    unless rx1082_cstack, rx1082_cstack_done2991
    dec $I19
    set $P11, rx1082_cstack[$I19]
  rx1082_cstack_done2991:
    pop rx1082_rep, rx1082_bstack
    pop rx1082_pos, rx1082_bstack
    pop $I19, rx1082_bstack
    lt rx1082_pos, -1, rx1082_done2986
    lt rx1082_pos, 0, rx1082_fail2988
    eq $I19, 0, rx1082_fail2988
    nqp_islist $I20, rx1082_cstack
    unless $I20, rx1082_jump2989
    elements $I18, rx1082_bstack
    le $I18, 0, rx1082_cut2990
    dec $I18
    set $I18, rx1082_bstack[$I18]
  rx1082_cut2990:
    assign rx1082_cstack, $I18
  rx1082_jump2989:
    jump $I19
  rx1082_done2986:
    rx1082_cur."!cursor_fail"()
    .return (rx1082_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_195_1347719921.536_caps" :subid("cuid_memo_325_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_195_1347719921.536_nfa" :subid("cuid_memo_326_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 61
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<!=>" :subid("cuid_196_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1285
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1086_tgt
    .local int rx1086_pos
    .local int rx1086_off
    .local int rx1086_eos
    .local int rx1086_rep
    .local pmc rx1086_cur
    .local pmc rx1086_curclass
    .local pmc rx1086_bstack
    .local pmc rx1086_cstack
    (rx1086_cur, rx1086_tgt, rx1086_pos, rx1086_curclass, rx1086_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1086_cur
    length rx1086_eos, rx1086_tgt
    eq $I19, 1, rx1086_restart3000
    gt rx1086_pos, rx1086_eos, rx1086_fail3001
    repr_get_attr_int $I11, self, rx1086_curclass, "$!from"
    ne $I11, -1, rxscan1087_done3007
    goto rxscan1087_scan3006
  rxscan1087_loop3005:
    inc rx1086_pos
    gt rx1086_pos, rx1086_eos, rx1086_fail3001
    repr_bind_attr_int rx1086_cur, rx1086_curclass, "$!from", rx1086_pos
  rxscan1087_scan3006:
    nqp_rxmark rx1086_bstack, rxscan1087_loop3005, rx1086_pos, 0
  rxscan1087_done3007:
    nqp_rxmark rx1086_bstack, rxcap1088_fail3009, rx1086_pos, 0
    add $I11, rx1086_pos, 2
    gt $I11, rx1086_eos, rx1086_fail3001
    substr $S10, rx1086_tgt, rx1086_pos, 2
    ne $S10, ucs4:"!=", rx1086_fail3001
    add rx1086_pos, 2
    nqp_rxpeek $I19, rx1086_bstack, rxcap1088_fail3009
    inc $I19
    set $I11, rx1086_bstack[$I19]
    $P11 = rx1086_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1086_pos)
    rx1086_cstack = rx1086_cur."!cursor_capture"($P11, "sym")
    goto rxcap1088_done3008
  rxcap1088_fail3009:
    goto rx1086_fail3001
  rxcap1088_done3008:
    repr_bind_attr_int rx1086_cur, rx1086_curclass, "$!pos", rx1086_pos
    $P11 = rx1086_cur."O"("%relational, :op<isne_n>")
    repr_get_attr_int $I11, $P11, rx1086_curclass, "$!pos"
    lt $I11, 0, rx1086_fail3001
    nqp_rxmark rx1086_bstack, rxsubrule1089_pass3010, -1, 0
  rxsubrule1089_pass3010:
    rx1086_cstack = rx1086_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1086_pos, $P11, rx1086_curclass, "$!pos"
    rx1086_cur."!cursor_pass"(rx1086_pos, "infix:sym<!=>", 'backtrack'=>1)
    .return (rx1086_cur)
  rx1086_restart3000:
    repr_get_attr_obj rx1086_cstack, rx1086_cur, rx1086_curclass, "$!cstack"
  rx1086_fail3001:
    unless rx1086_bstack, rx1086_done2999
    pop $I19, rx1086_bstack
    if_null rx1086_cstack, rx1086_cstack_done3004
    unless rx1086_cstack, rx1086_cstack_done3004
    dec $I19
    set $P11, rx1086_cstack[$I19]
  rx1086_cstack_done3004:
    pop rx1086_rep, rx1086_bstack
    pop rx1086_pos, rx1086_bstack
    pop $I19, rx1086_bstack
    lt rx1086_pos, -1, rx1086_done2999
    lt rx1086_pos, 0, rx1086_fail3001
    eq $I19, 0, rx1086_fail3001
    nqp_islist $I20, rx1086_cstack
    unless $I20, rx1086_jump3002
    elements $I18, rx1086_bstack
    le $I18, 0, rx1086_cut3003
    dec $I18
    set $I18, rx1086_bstack[$I18]
  rx1086_cut3003:
    assign rx1086_cstack, $I18
  rx1086_jump3002:
    jump $I19
  rx1086_done2999:
    rx1086_cur."!cursor_fail"()
    .return (rx1086_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_196_1347719921.536_caps" :subid("cuid_memo_327_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_196_1347719921.536_nfa" :subid("cuid_memo_328_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 33
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<=>" :subid("cuid_197_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1286
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1090_tgt
    .local int rx1090_pos
    .local int rx1090_off
    .local int rx1090_eos
    .local int rx1090_rep
    .local pmc rx1090_cur
    .local pmc rx1090_curclass
    .local pmc rx1090_bstack
    .local pmc rx1090_cstack
    (rx1090_cur, rx1090_tgt, rx1090_pos, rx1090_curclass, rx1090_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1090_cur
    length rx1090_eos, rx1090_tgt
    eq $I19, 1, rx1090_restart3013
    gt rx1090_pos, rx1090_eos, rx1090_fail3014
    repr_get_attr_int $I11, self, rx1090_curclass, "$!from"
    ne $I11, -1, rxscan1091_done3020
    goto rxscan1091_scan3019
  rxscan1091_loop3018:
    inc rx1090_pos
    gt rx1090_pos, rx1090_eos, rx1090_fail3014
    repr_bind_attr_int rx1090_cur, rx1090_curclass, "$!from", rx1090_pos
  rxscan1091_scan3019:
    nqp_rxmark rx1090_bstack, rxscan1091_loop3018, rx1090_pos, 0
  rxscan1091_done3020:
    nqp_rxmark rx1090_bstack, rxcap1092_fail3022, rx1090_pos, 0
    add $I11, rx1090_pos, 2
    gt $I11, rx1090_eos, rx1090_fail3014
    substr $S10, rx1090_tgt, rx1090_pos, 2
    ne $S10, ucs4:"<=", rx1090_fail3014
    add rx1090_pos, 2
    nqp_rxpeek $I19, rx1090_bstack, rxcap1092_fail3022
    inc $I19
    set $I11, rx1090_bstack[$I19]
    $P11 = rx1090_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1090_pos)
    rx1090_cstack = rx1090_cur."!cursor_capture"($P11, "sym")
    goto rxcap1092_done3021
  rxcap1092_fail3022:
    goto rx1090_fail3014
  rxcap1092_done3021:
    repr_bind_attr_int rx1090_cur, rx1090_curclass, "$!pos", rx1090_pos
    $P11 = rx1090_cur."O"("%relational, :op<isle_n>")
    repr_get_attr_int $I11, $P11, rx1090_curclass, "$!pos"
    lt $I11, 0, rx1090_fail3014
    nqp_rxmark rx1090_bstack, rxsubrule1093_pass3023, -1, 0
  rxsubrule1093_pass3023:
    rx1090_cstack = rx1090_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1090_pos, $P11, rx1090_curclass, "$!pos"
    rx1090_cur."!cursor_pass"(rx1090_pos, "infix:sym<<=>", 'backtrack'=>1)
    .return (rx1090_cur)
  rx1090_restart3013:
    repr_get_attr_obj rx1090_cstack, rx1090_cur, rx1090_curclass, "$!cstack"
  rx1090_fail3014:
    unless rx1090_bstack, rx1090_done3012
    pop $I19, rx1090_bstack
    if_null rx1090_cstack, rx1090_cstack_done3017
    unless rx1090_cstack, rx1090_cstack_done3017
    dec $I19
    set $P11, rx1090_cstack[$I19]
  rx1090_cstack_done3017:
    pop rx1090_rep, rx1090_bstack
    pop rx1090_pos, rx1090_bstack
    pop $I19, rx1090_bstack
    lt rx1090_pos, -1, rx1090_done3012
    lt rx1090_pos, 0, rx1090_fail3014
    eq $I19, 0, rx1090_fail3014
    nqp_islist $I20, rx1090_cstack
    unless $I20, rx1090_jump3015
    elements $I18, rx1090_bstack
    le $I18, 0, rx1090_cut3016
    dec $I18
    set $I18, rx1090_bstack[$I18]
  rx1090_cut3016:
    assign rx1090_cstack, $I18
  rx1090_jump3015:
    jump $I19
  rx1090_done3012:
    rx1090_cur."!cursor_fail"()
    .return (rx1090_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_197_1347719921.536_caps" :subid("cuid_memo_329_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_197_1347719921.536_nfa" :subid("cuid_memo_330_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 60
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>=>" :subid("cuid_198_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1287
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1094_tgt
    .local int rx1094_pos
    .local int rx1094_off
    .local int rx1094_eos
    .local int rx1094_rep
    .local pmc rx1094_cur
    .local pmc rx1094_curclass
    .local pmc rx1094_bstack
    .local pmc rx1094_cstack
    (rx1094_cur, rx1094_tgt, rx1094_pos, rx1094_curclass, rx1094_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1094_cur
    length rx1094_eos, rx1094_tgt
    eq $I19, 1, rx1094_restart3026
    gt rx1094_pos, rx1094_eos, rx1094_fail3027
    repr_get_attr_int $I11, self, rx1094_curclass, "$!from"
    ne $I11, -1, rxscan1095_done3033
    goto rxscan1095_scan3032
  rxscan1095_loop3031:
    inc rx1094_pos
    gt rx1094_pos, rx1094_eos, rx1094_fail3027
    repr_bind_attr_int rx1094_cur, rx1094_curclass, "$!from", rx1094_pos
  rxscan1095_scan3032:
    nqp_rxmark rx1094_bstack, rxscan1095_loop3031, rx1094_pos, 0
  rxscan1095_done3033:
    nqp_rxmark rx1094_bstack, rxcap1096_fail3035, rx1094_pos, 0
    add $I11, rx1094_pos, 2
    gt $I11, rx1094_eos, rx1094_fail3027
    substr $S10, rx1094_tgt, rx1094_pos, 2
    ne $S10, ucs4:">=", rx1094_fail3027
    add rx1094_pos, 2
    nqp_rxpeek $I19, rx1094_bstack, rxcap1096_fail3035
    inc $I19
    set $I11, rx1094_bstack[$I19]
    $P11 = rx1094_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1094_pos)
    rx1094_cstack = rx1094_cur."!cursor_capture"($P11, "sym")
    goto rxcap1096_done3034
  rxcap1096_fail3035:
    goto rx1094_fail3027
  rxcap1096_done3034:
    repr_bind_attr_int rx1094_cur, rx1094_curclass, "$!pos", rx1094_pos
    $P11 = rx1094_cur."O"("%relational, :op<isge_n>")
    repr_get_attr_int $I11, $P11, rx1094_curclass, "$!pos"
    lt $I11, 0, rx1094_fail3027
    nqp_rxmark rx1094_bstack, rxsubrule1097_pass3036, -1, 0
  rxsubrule1097_pass3036:
    rx1094_cstack = rx1094_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1094_pos, $P11, rx1094_curclass, "$!pos"
    rx1094_cur."!cursor_pass"(rx1094_pos, "infix:sym<>=>", 'backtrack'=>1)
    .return (rx1094_cur)
  rx1094_restart3026:
    repr_get_attr_obj rx1094_cstack, rx1094_cur, rx1094_curclass, "$!cstack"
  rx1094_fail3027:
    unless rx1094_bstack, rx1094_done3025
    pop $I19, rx1094_bstack
    if_null rx1094_cstack, rx1094_cstack_done3030
    unless rx1094_cstack, rx1094_cstack_done3030
    dec $I19
    set $P11, rx1094_cstack[$I19]
  rx1094_cstack_done3030:
    pop rx1094_rep, rx1094_bstack
    pop rx1094_pos, rx1094_bstack
    pop $I19, rx1094_bstack
    lt rx1094_pos, -1, rx1094_done3025
    lt rx1094_pos, 0, rx1094_fail3027
    eq $I19, 0, rx1094_fail3027
    nqp_islist $I20, rx1094_cstack
    unless $I20, rx1094_jump3028
    elements $I18, rx1094_bstack
    le $I18, 0, rx1094_cut3029
    dec $I18
    set $I18, rx1094_bstack[$I18]
  rx1094_cut3029:
    assign rx1094_cstack, $I18
  rx1094_jump3028:
    jump $I19
  rx1094_done3025:
    rx1094_cur."!cursor_fail"()
    .return (rx1094_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_198_1347719921.536_caps" :subid("cuid_memo_331_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_198_1347719921.536_nfa" :subid("cuid_memo_332_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<>" :subid("cuid_199_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1288
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1098_tgt
    .local int rx1098_pos
    .local int rx1098_off
    .local int rx1098_eos
    .local int rx1098_rep
    .local pmc rx1098_cur
    .local pmc rx1098_curclass
    .local pmc rx1098_bstack
    .local pmc rx1098_cstack
    (rx1098_cur, rx1098_tgt, rx1098_pos, rx1098_curclass, rx1098_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1098_cur
    length rx1098_eos, rx1098_tgt
    eq $I19, 1, rx1098_restart3039
    gt rx1098_pos, rx1098_eos, rx1098_fail3040
    repr_get_attr_int $I11, self, rx1098_curclass, "$!from"
    ne $I11, -1, rxscan1099_done3046
    goto rxscan1099_scan3045
  rxscan1099_loop3044:
    inc rx1098_pos
    gt rx1098_pos, rx1098_eos, rx1098_fail3040
    repr_bind_attr_int rx1098_cur, rx1098_curclass, "$!from", rx1098_pos
  rxscan1099_scan3045:
    nqp_rxmark rx1098_bstack, rxscan1099_loop3044, rx1098_pos, 0
  rxscan1099_done3046:
    nqp_rxmark rx1098_bstack, rxcap1100_fail3048, rx1098_pos, 0
    add $I11, rx1098_pos, 1
    gt $I11, rx1098_eos, rx1098_fail3040
    substr $S10, rx1098_tgt, rx1098_pos, 1
    ne $S10, ucs4:"<", rx1098_fail3040
    add rx1098_pos, 1
    nqp_rxpeek $I19, rx1098_bstack, rxcap1100_fail3048
    inc $I19
    set $I11, rx1098_bstack[$I19]
    $P11 = rx1098_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1098_pos)
    rx1098_cstack = rx1098_cur."!cursor_capture"($P11, "sym")
    goto rxcap1100_done3047
  rxcap1100_fail3048:
    goto rx1098_fail3040
  rxcap1100_done3047:
    repr_bind_attr_int rx1098_cur, rx1098_curclass, "$!pos", rx1098_pos
    $P11 = rx1098_cur."O"("%relational, :op<islt_n>")
    repr_get_attr_int $I11, $P11, rx1098_curclass, "$!pos"
    lt $I11, 0, rx1098_fail3040
    nqp_rxmark rx1098_bstack, rxsubrule1101_pass3049, -1, 0
  rxsubrule1101_pass3049:
    rx1098_cstack = rx1098_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1098_pos, $P11, rx1098_curclass, "$!pos"
    rx1098_cur."!cursor_pass"(rx1098_pos, "infix:sym<<>", 'backtrack'=>1)
    .return (rx1098_cur)
  rx1098_restart3039:
    repr_get_attr_obj rx1098_cstack, rx1098_cur, rx1098_curclass, "$!cstack"
  rx1098_fail3040:
    unless rx1098_bstack, rx1098_done3038
    pop $I19, rx1098_bstack
    if_null rx1098_cstack, rx1098_cstack_done3043
    unless rx1098_cstack, rx1098_cstack_done3043
    dec $I19
    set $P11, rx1098_cstack[$I19]
  rx1098_cstack_done3043:
    pop rx1098_rep, rx1098_bstack
    pop rx1098_pos, rx1098_bstack
    pop $I19, rx1098_bstack
    lt rx1098_pos, -1, rx1098_done3038
    lt rx1098_pos, 0, rx1098_fail3040
    eq $I19, 0, rx1098_fail3040
    nqp_islist $I20, rx1098_cstack
    unless $I20, rx1098_jump3041
    elements $I18, rx1098_bstack
    le $I18, 0, rx1098_cut3042
    dec $I18
    set $I18, rx1098_bstack[$I18]
  rx1098_cut3042:
    assign rx1098_cstack, $I18
  rx1098_jump3041:
    jump $I19
  rx1098_done3038:
    rx1098_cur."!cursor_fail"()
    .return (rx1098_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_199_1347719921.536_caps" :subid("cuid_memo_333_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_199_1347719921.536_nfa" :subid("cuid_memo_334_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 60
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>>" :subid("cuid_200_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1289
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1102_tgt
    .local int rx1102_pos
    .local int rx1102_off
    .local int rx1102_eos
    .local int rx1102_rep
    .local pmc rx1102_cur
    .local pmc rx1102_curclass
    .local pmc rx1102_bstack
    .local pmc rx1102_cstack
    (rx1102_cur, rx1102_tgt, rx1102_pos, rx1102_curclass, rx1102_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1102_cur
    length rx1102_eos, rx1102_tgt
    eq $I19, 1, rx1102_restart3052
    gt rx1102_pos, rx1102_eos, rx1102_fail3053
    repr_get_attr_int $I11, self, rx1102_curclass, "$!from"
    ne $I11, -1, rxscan1103_done3059
    goto rxscan1103_scan3058
  rxscan1103_loop3057:
    inc rx1102_pos
    gt rx1102_pos, rx1102_eos, rx1102_fail3053
    repr_bind_attr_int rx1102_cur, rx1102_curclass, "$!from", rx1102_pos
  rxscan1103_scan3058:
    nqp_rxmark rx1102_bstack, rxscan1103_loop3057, rx1102_pos, 0
  rxscan1103_done3059:
    nqp_rxmark rx1102_bstack, rxcap1104_fail3061, rx1102_pos, 0
    add $I11, rx1102_pos, 1
    gt $I11, rx1102_eos, rx1102_fail3053
    substr $S10, rx1102_tgt, rx1102_pos, 1
    ne $S10, ucs4:">", rx1102_fail3053
    add rx1102_pos, 1
    nqp_rxpeek $I19, rx1102_bstack, rxcap1104_fail3061
    inc $I19
    set $I11, rx1102_bstack[$I19]
    $P11 = rx1102_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1102_pos)
    rx1102_cstack = rx1102_cur."!cursor_capture"($P11, "sym")
    goto rxcap1104_done3060
  rxcap1104_fail3061:
    goto rx1102_fail3053
  rxcap1104_done3060:
    repr_bind_attr_int rx1102_cur, rx1102_curclass, "$!pos", rx1102_pos
    $P11 = rx1102_cur."O"("%relational, :op<isgt_n>")
    repr_get_attr_int $I11, $P11, rx1102_curclass, "$!pos"
    lt $I11, 0, rx1102_fail3053
    nqp_rxmark rx1102_bstack, rxsubrule1105_pass3062, -1, 0
  rxsubrule1105_pass3062:
    rx1102_cstack = rx1102_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1102_pos, $P11, rx1102_curclass, "$!pos"
    rx1102_cur."!cursor_pass"(rx1102_pos, "infix:sym<>>", 'backtrack'=>1)
    .return (rx1102_cur)
  rx1102_restart3052:
    repr_get_attr_obj rx1102_cstack, rx1102_cur, rx1102_curclass, "$!cstack"
  rx1102_fail3053:
    unless rx1102_bstack, rx1102_done3051
    pop $I19, rx1102_bstack
    if_null rx1102_cstack, rx1102_cstack_done3056
    unless rx1102_cstack, rx1102_cstack_done3056
    dec $I19
    set $P11, rx1102_cstack[$I19]
  rx1102_cstack_done3056:
    pop rx1102_rep, rx1102_bstack
    pop rx1102_pos, rx1102_bstack
    pop $I19, rx1102_bstack
    lt rx1102_pos, -1, rx1102_done3051
    lt rx1102_pos, 0, rx1102_fail3053
    eq $I19, 0, rx1102_fail3053
    nqp_islist $I20, rx1102_cstack
    unless $I20, rx1102_jump3054
    elements $I18, rx1102_bstack
    le $I18, 0, rx1102_cut3055
    dec $I18
    set $I18, rx1102_bstack[$I18]
  rx1102_cut3055:
    assign rx1102_cstack, $I18
  rx1102_jump3054:
    jump $I19
  rx1102_done3051:
    rx1102_cur."!cursor_fail"()
    .return (rx1102_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_200_1347719921.536_caps" :subid("cuid_memo_335_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_200_1347719921.536_nfa" :subid("cuid_memo_336_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<eq>" :subid("cuid_201_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1290
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1106_tgt
    .local int rx1106_pos
    .local int rx1106_off
    .local int rx1106_eos
    .local int rx1106_rep
    .local pmc rx1106_cur
    .local pmc rx1106_curclass
    .local pmc rx1106_bstack
    .local pmc rx1106_cstack
    (rx1106_cur, rx1106_tgt, rx1106_pos, rx1106_curclass, rx1106_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1106_cur
    length rx1106_eos, rx1106_tgt
    eq $I19, 1, rx1106_restart3065
    gt rx1106_pos, rx1106_eos, rx1106_fail3066
    repr_get_attr_int $I11, self, rx1106_curclass, "$!from"
    ne $I11, -1, rxscan1107_done3072
    goto rxscan1107_scan3071
  rxscan1107_loop3070:
    inc rx1106_pos
    gt rx1106_pos, rx1106_eos, rx1106_fail3066
    repr_bind_attr_int rx1106_cur, rx1106_curclass, "$!from", rx1106_pos
  rxscan1107_scan3071:
    nqp_rxmark rx1106_bstack, rxscan1107_loop3070, rx1106_pos, 0
  rxscan1107_done3072:
    nqp_rxmark rx1106_bstack, rxcap1108_fail3074, rx1106_pos, 0
    add $I11, rx1106_pos, 2
    gt $I11, rx1106_eos, rx1106_fail3066
    substr $S10, rx1106_tgt, rx1106_pos, 2
    ne $S10, ucs4:"eq", rx1106_fail3066
    add rx1106_pos, 2
    nqp_rxpeek $I19, rx1106_bstack, rxcap1108_fail3074
    inc $I19
    set $I11, rx1106_bstack[$I19]
    $P11 = rx1106_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1106_pos)
    rx1106_cstack = rx1106_cur."!cursor_capture"($P11, "sym")
    goto rxcap1108_done3073
  rxcap1108_fail3074:
    goto rx1106_fail3066
  rxcap1108_done3073:
    repr_bind_attr_int rx1106_cur, rx1106_curclass, "$!pos", rx1106_pos
    $P11 = rx1106_cur."O"("%relational, :op<iseq_s>")
    repr_get_attr_int $I11, $P11, rx1106_curclass, "$!pos"
    lt $I11, 0, rx1106_fail3066
    nqp_rxmark rx1106_bstack, rxsubrule1109_pass3075, -1, 0
  rxsubrule1109_pass3075:
    rx1106_cstack = rx1106_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1106_pos, $P11, rx1106_curclass, "$!pos"
    rx1106_cur."!cursor_pass"(rx1106_pos, "infix:sym<eq>", 'backtrack'=>1)
    .return (rx1106_cur)
  rx1106_restart3065:
    repr_get_attr_obj rx1106_cstack, rx1106_cur, rx1106_curclass, "$!cstack"
  rx1106_fail3066:
    unless rx1106_bstack, rx1106_done3064
    pop $I19, rx1106_bstack
    if_null rx1106_cstack, rx1106_cstack_done3069
    unless rx1106_cstack, rx1106_cstack_done3069
    dec $I19
    set $P11, rx1106_cstack[$I19]
  rx1106_cstack_done3069:
    pop rx1106_rep, rx1106_bstack
    pop rx1106_pos, rx1106_bstack
    pop $I19, rx1106_bstack
    lt rx1106_pos, -1, rx1106_done3064
    lt rx1106_pos, 0, rx1106_fail3066
    eq $I19, 0, rx1106_fail3066
    nqp_islist $I20, rx1106_cstack
    unless $I20, rx1106_jump3067
    elements $I18, rx1106_bstack
    le $I18, 0, rx1106_cut3068
    dec $I18
    set $I18, rx1106_bstack[$I18]
  rx1106_cut3068:
    assign rx1106_cstack, $I18
  rx1106_jump3067:
    jump $I19
  rx1106_done3064:
    rx1106_cur."!cursor_fail"()
    .return (rx1106_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_201_1347719921.536_caps" :subid("cuid_memo_337_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_201_1347719921.536_nfa" :subid("cuid_memo_338_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 101
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 113
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ne>" :subid("cuid_202_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1291
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1110_tgt
    .local int rx1110_pos
    .local int rx1110_off
    .local int rx1110_eos
    .local int rx1110_rep
    .local pmc rx1110_cur
    .local pmc rx1110_curclass
    .local pmc rx1110_bstack
    .local pmc rx1110_cstack
    (rx1110_cur, rx1110_tgt, rx1110_pos, rx1110_curclass, rx1110_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1110_cur
    length rx1110_eos, rx1110_tgt
    eq $I19, 1, rx1110_restart3078
    gt rx1110_pos, rx1110_eos, rx1110_fail3079
    repr_get_attr_int $I11, self, rx1110_curclass, "$!from"
    ne $I11, -1, rxscan1111_done3085
    goto rxscan1111_scan3084
  rxscan1111_loop3083:
    inc rx1110_pos
    gt rx1110_pos, rx1110_eos, rx1110_fail3079
    repr_bind_attr_int rx1110_cur, rx1110_curclass, "$!from", rx1110_pos
  rxscan1111_scan3084:
    nqp_rxmark rx1110_bstack, rxscan1111_loop3083, rx1110_pos, 0
  rxscan1111_done3085:
    nqp_rxmark rx1110_bstack, rxcap1112_fail3087, rx1110_pos, 0
    add $I11, rx1110_pos, 2
    gt $I11, rx1110_eos, rx1110_fail3079
    substr $S10, rx1110_tgt, rx1110_pos, 2
    ne $S10, ucs4:"ne", rx1110_fail3079
    add rx1110_pos, 2
    nqp_rxpeek $I19, rx1110_bstack, rxcap1112_fail3087
    inc $I19
    set $I11, rx1110_bstack[$I19]
    $P11 = rx1110_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1110_pos)
    rx1110_cstack = rx1110_cur."!cursor_capture"($P11, "sym")
    goto rxcap1112_done3086
  rxcap1112_fail3087:
    goto rx1110_fail3079
  rxcap1112_done3086:
    repr_bind_attr_int rx1110_cur, rx1110_curclass, "$!pos", rx1110_pos
    $P11 = rx1110_cur."O"("%relational, :op<isne_s>")
    repr_get_attr_int $I11, $P11, rx1110_curclass, "$!pos"
    lt $I11, 0, rx1110_fail3079
    nqp_rxmark rx1110_bstack, rxsubrule1113_pass3088, -1, 0
  rxsubrule1113_pass3088:
    rx1110_cstack = rx1110_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1110_pos, $P11, rx1110_curclass, "$!pos"
    rx1110_cur."!cursor_pass"(rx1110_pos, "infix:sym<ne>", 'backtrack'=>1)
    .return (rx1110_cur)
  rx1110_restart3078:
    repr_get_attr_obj rx1110_cstack, rx1110_cur, rx1110_curclass, "$!cstack"
  rx1110_fail3079:
    unless rx1110_bstack, rx1110_done3077
    pop $I19, rx1110_bstack
    if_null rx1110_cstack, rx1110_cstack_done3082
    unless rx1110_cstack, rx1110_cstack_done3082
    dec $I19
    set $P11, rx1110_cstack[$I19]
  rx1110_cstack_done3082:
    pop rx1110_rep, rx1110_bstack
    pop rx1110_pos, rx1110_bstack
    pop $I19, rx1110_bstack
    lt rx1110_pos, -1, rx1110_done3077
    lt rx1110_pos, 0, rx1110_fail3079
    eq $I19, 0, rx1110_fail3079
    nqp_islist $I20, rx1110_cstack
    unless $I20, rx1110_jump3080
    elements $I18, rx1110_bstack
    le $I18, 0, rx1110_cut3081
    dec $I18
    set $I18, rx1110_bstack[$I18]
  rx1110_cut3081:
    assign rx1110_cstack, $I18
  rx1110_jump3080:
    jump $I19
  rx1110_done3077:
    rx1110_cur."!cursor_fail"()
    .return (rx1110_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_202_1347719921.536_caps" :subid("cuid_memo_339_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_202_1347719921.536_nfa" :subid("cuid_memo_340_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 110
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<le>" :subid("cuid_203_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1292
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1114_tgt
    .local int rx1114_pos
    .local int rx1114_off
    .local int rx1114_eos
    .local int rx1114_rep
    .local pmc rx1114_cur
    .local pmc rx1114_curclass
    .local pmc rx1114_bstack
    .local pmc rx1114_cstack
    (rx1114_cur, rx1114_tgt, rx1114_pos, rx1114_curclass, rx1114_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1114_cur
    length rx1114_eos, rx1114_tgt
    eq $I19, 1, rx1114_restart3091
    gt rx1114_pos, rx1114_eos, rx1114_fail3092
    repr_get_attr_int $I11, self, rx1114_curclass, "$!from"
    ne $I11, -1, rxscan1115_done3098
    goto rxscan1115_scan3097
  rxscan1115_loop3096:
    inc rx1114_pos
    gt rx1114_pos, rx1114_eos, rx1114_fail3092
    repr_bind_attr_int rx1114_cur, rx1114_curclass, "$!from", rx1114_pos
  rxscan1115_scan3097:
    nqp_rxmark rx1114_bstack, rxscan1115_loop3096, rx1114_pos, 0
  rxscan1115_done3098:
    nqp_rxmark rx1114_bstack, rxcap1116_fail3100, rx1114_pos, 0
    add $I11, rx1114_pos, 2
    gt $I11, rx1114_eos, rx1114_fail3092
    substr $S10, rx1114_tgt, rx1114_pos, 2
    ne $S10, ucs4:"le", rx1114_fail3092
    add rx1114_pos, 2
    nqp_rxpeek $I19, rx1114_bstack, rxcap1116_fail3100
    inc $I19
    set $I11, rx1114_bstack[$I19]
    $P11 = rx1114_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1114_pos)
    rx1114_cstack = rx1114_cur."!cursor_capture"($P11, "sym")
    goto rxcap1116_done3099
  rxcap1116_fail3100:
    goto rx1114_fail3092
  rxcap1116_done3099:
    repr_bind_attr_int rx1114_cur, rx1114_curclass, "$!pos", rx1114_pos
    $P11 = rx1114_cur."O"("%relational, :op<isle_s>")
    repr_get_attr_int $I11, $P11, rx1114_curclass, "$!pos"
    lt $I11, 0, rx1114_fail3092
    nqp_rxmark rx1114_bstack, rxsubrule1117_pass3101, -1, 0
  rxsubrule1117_pass3101:
    rx1114_cstack = rx1114_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1114_pos, $P11, rx1114_curclass, "$!pos"
    rx1114_cur."!cursor_pass"(rx1114_pos, "infix:sym<le>", 'backtrack'=>1)
    .return (rx1114_cur)
  rx1114_restart3091:
    repr_get_attr_obj rx1114_cstack, rx1114_cur, rx1114_curclass, "$!cstack"
  rx1114_fail3092:
    unless rx1114_bstack, rx1114_done3090
    pop $I19, rx1114_bstack
    if_null rx1114_cstack, rx1114_cstack_done3095
    unless rx1114_cstack, rx1114_cstack_done3095
    dec $I19
    set $P11, rx1114_cstack[$I19]
  rx1114_cstack_done3095:
    pop rx1114_rep, rx1114_bstack
    pop rx1114_pos, rx1114_bstack
    pop $I19, rx1114_bstack
    lt rx1114_pos, -1, rx1114_done3090
    lt rx1114_pos, 0, rx1114_fail3092
    eq $I19, 0, rx1114_fail3092
    nqp_islist $I20, rx1114_cstack
    unless $I20, rx1114_jump3093
    elements $I18, rx1114_bstack
    le $I18, 0, rx1114_cut3094
    dec $I18
    set $I18, rx1114_bstack[$I18]
  rx1114_cut3094:
    assign rx1114_cstack, $I18
  rx1114_jump3093:
    jump $I19
  rx1114_done3090:
    rx1114_cur."!cursor_fail"()
    .return (rx1114_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_203_1347719921.536_caps" :subid("cuid_memo_341_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_203_1347719921.536_nfa" :subid("cuid_memo_342_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 108
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ge>" :subid("cuid_204_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1293
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1118_tgt
    .local int rx1118_pos
    .local int rx1118_off
    .local int rx1118_eos
    .local int rx1118_rep
    .local pmc rx1118_cur
    .local pmc rx1118_curclass
    .local pmc rx1118_bstack
    .local pmc rx1118_cstack
    (rx1118_cur, rx1118_tgt, rx1118_pos, rx1118_curclass, rx1118_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1118_cur
    length rx1118_eos, rx1118_tgt
    eq $I19, 1, rx1118_restart3104
    gt rx1118_pos, rx1118_eos, rx1118_fail3105
    repr_get_attr_int $I11, self, rx1118_curclass, "$!from"
    ne $I11, -1, rxscan1119_done3111
    goto rxscan1119_scan3110
  rxscan1119_loop3109:
    inc rx1118_pos
    gt rx1118_pos, rx1118_eos, rx1118_fail3105
    repr_bind_attr_int rx1118_cur, rx1118_curclass, "$!from", rx1118_pos
  rxscan1119_scan3110:
    nqp_rxmark rx1118_bstack, rxscan1119_loop3109, rx1118_pos, 0
  rxscan1119_done3111:
    nqp_rxmark rx1118_bstack, rxcap1120_fail3113, rx1118_pos, 0
    add $I11, rx1118_pos, 2
    gt $I11, rx1118_eos, rx1118_fail3105
    substr $S10, rx1118_tgt, rx1118_pos, 2
    ne $S10, ucs4:"ge", rx1118_fail3105
    add rx1118_pos, 2
    nqp_rxpeek $I19, rx1118_bstack, rxcap1120_fail3113
    inc $I19
    set $I11, rx1118_bstack[$I19]
    $P11 = rx1118_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1118_pos)
    rx1118_cstack = rx1118_cur."!cursor_capture"($P11, "sym")
    goto rxcap1120_done3112
  rxcap1120_fail3113:
    goto rx1118_fail3105
  rxcap1120_done3112:
    repr_bind_attr_int rx1118_cur, rx1118_curclass, "$!pos", rx1118_pos
    $P11 = rx1118_cur."O"("%relational, :op<isge_s>")
    repr_get_attr_int $I11, $P11, rx1118_curclass, "$!pos"
    lt $I11, 0, rx1118_fail3105
    nqp_rxmark rx1118_bstack, rxsubrule1121_pass3114, -1, 0
  rxsubrule1121_pass3114:
    rx1118_cstack = rx1118_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1118_pos, $P11, rx1118_curclass, "$!pos"
    rx1118_cur."!cursor_pass"(rx1118_pos, "infix:sym<ge>", 'backtrack'=>1)
    .return (rx1118_cur)
  rx1118_restart3104:
    repr_get_attr_obj rx1118_cstack, rx1118_cur, rx1118_curclass, "$!cstack"
  rx1118_fail3105:
    unless rx1118_bstack, rx1118_done3103
    pop $I19, rx1118_bstack
    if_null rx1118_cstack, rx1118_cstack_done3108
    unless rx1118_cstack, rx1118_cstack_done3108
    dec $I19
    set $P11, rx1118_cstack[$I19]
  rx1118_cstack_done3108:
    pop rx1118_rep, rx1118_bstack
    pop rx1118_pos, rx1118_bstack
    pop $I19, rx1118_bstack
    lt rx1118_pos, -1, rx1118_done3103
    lt rx1118_pos, 0, rx1118_fail3105
    eq $I19, 0, rx1118_fail3105
    nqp_islist $I20, rx1118_cstack
    unless $I20, rx1118_jump3106
    elements $I18, rx1118_bstack
    le $I18, 0, rx1118_cut3107
    dec $I18
    set $I18, rx1118_bstack[$I18]
  rx1118_cut3107:
    assign rx1118_cstack, $I18
  rx1118_jump3106:
    jump $I19
  rx1118_done3103:
    rx1118_cur."!cursor_fail"()
    .return (rx1118_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_204_1347719921.536_caps" :subid("cuid_memo_343_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_204_1347719921.536_nfa" :subid("cuid_memo_344_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 103
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<lt>" :subid("cuid_205_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1294
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1122_tgt
    .local int rx1122_pos
    .local int rx1122_off
    .local int rx1122_eos
    .local int rx1122_rep
    .local pmc rx1122_cur
    .local pmc rx1122_curclass
    .local pmc rx1122_bstack
    .local pmc rx1122_cstack
    (rx1122_cur, rx1122_tgt, rx1122_pos, rx1122_curclass, rx1122_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1122_cur
    length rx1122_eos, rx1122_tgt
    eq $I19, 1, rx1122_restart3117
    gt rx1122_pos, rx1122_eos, rx1122_fail3118
    repr_get_attr_int $I11, self, rx1122_curclass, "$!from"
    ne $I11, -1, rxscan1123_done3124
    goto rxscan1123_scan3123
  rxscan1123_loop3122:
    inc rx1122_pos
    gt rx1122_pos, rx1122_eos, rx1122_fail3118
    repr_bind_attr_int rx1122_cur, rx1122_curclass, "$!from", rx1122_pos
  rxscan1123_scan3123:
    nqp_rxmark rx1122_bstack, rxscan1123_loop3122, rx1122_pos, 0
  rxscan1123_done3124:
    nqp_rxmark rx1122_bstack, rxcap1124_fail3126, rx1122_pos, 0
    add $I11, rx1122_pos, 2
    gt $I11, rx1122_eos, rx1122_fail3118
    substr $S10, rx1122_tgt, rx1122_pos, 2
    ne $S10, ucs4:"lt", rx1122_fail3118
    add rx1122_pos, 2
    nqp_rxpeek $I19, rx1122_bstack, rxcap1124_fail3126
    inc $I19
    set $I11, rx1122_bstack[$I19]
    $P11 = rx1122_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1122_pos)
    rx1122_cstack = rx1122_cur."!cursor_capture"($P11, "sym")
    goto rxcap1124_done3125
  rxcap1124_fail3126:
    goto rx1122_fail3118
  rxcap1124_done3125:
    repr_bind_attr_int rx1122_cur, rx1122_curclass, "$!pos", rx1122_pos
    $P11 = rx1122_cur."O"("%relational, :op<islt_s>")
    repr_get_attr_int $I11, $P11, rx1122_curclass, "$!pos"
    lt $I11, 0, rx1122_fail3118
    nqp_rxmark rx1122_bstack, rxsubrule1125_pass3127, -1, 0
  rxsubrule1125_pass3127:
    rx1122_cstack = rx1122_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1122_pos, $P11, rx1122_curclass, "$!pos"
    rx1122_cur."!cursor_pass"(rx1122_pos, "infix:sym<lt>", 'backtrack'=>1)
    .return (rx1122_cur)
  rx1122_restart3117:
    repr_get_attr_obj rx1122_cstack, rx1122_cur, rx1122_curclass, "$!cstack"
  rx1122_fail3118:
    unless rx1122_bstack, rx1122_done3116
    pop $I19, rx1122_bstack
    if_null rx1122_cstack, rx1122_cstack_done3121
    unless rx1122_cstack, rx1122_cstack_done3121
    dec $I19
    set $P11, rx1122_cstack[$I19]
  rx1122_cstack_done3121:
    pop rx1122_rep, rx1122_bstack
    pop rx1122_pos, rx1122_bstack
    pop $I19, rx1122_bstack
    lt rx1122_pos, -1, rx1122_done3116
    lt rx1122_pos, 0, rx1122_fail3118
    eq $I19, 0, rx1122_fail3118
    nqp_islist $I20, rx1122_cstack
    unless $I20, rx1122_jump3119
    elements $I18, rx1122_bstack
    le $I18, 0, rx1122_cut3120
    dec $I18
    set $I18, rx1122_bstack[$I18]
  rx1122_cut3120:
    assign rx1122_cstack, $I18
  rx1122_jump3119:
    jump $I19
  rx1122_done3116:
    rx1122_cur."!cursor_fail"()
    .return (rx1122_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_205_1347719921.536_caps" :subid("cuid_memo_345_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_205_1347719921.536_nfa" :subid("cuid_memo_346_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 108
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 116
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<gt>" :subid("cuid_206_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1295
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1126_tgt
    .local int rx1126_pos
    .local int rx1126_off
    .local int rx1126_eos
    .local int rx1126_rep
    .local pmc rx1126_cur
    .local pmc rx1126_curclass
    .local pmc rx1126_bstack
    .local pmc rx1126_cstack
    (rx1126_cur, rx1126_tgt, rx1126_pos, rx1126_curclass, rx1126_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1126_cur
    length rx1126_eos, rx1126_tgt
    eq $I19, 1, rx1126_restart3130
    gt rx1126_pos, rx1126_eos, rx1126_fail3131
    repr_get_attr_int $I11, self, rx1126_curclass, "$!from"
    ne $I11, -1, rxscan1127_done3137
    goto rxscan1127_scan3136
  rxscan1127_loop3135:
    inc rx1126_pos
    gt rx1126_pos, rx1126_eos, rx1126_fail3131
    repr_bind_attr_int rx1126_cur, rx1126_curclass, "$!from", rx1126_pos
  rxscan1127_scan3136:
    nqp_rxmark rx1126_bstack, rxscan1127_loop3135, rx1126_pos, 0
  rxscan1127_done3137:
    nqp_rxmark rx1126_bstack, rxcap1128_fail3139, rx1126_pos, 0
    add $I11, rx1126_pos, 2
    gt $I11, rx1126_eos, rx1126_fail3131
    substr $S10, rx1126_tgt, rx1126_pos, 2
    ne $S10, ucs4:"gt", rx1126_fail3131
    add rx1126_pos, 2
    nqp_rxpeek $I19, rx1126_bstack, rxcap1128_fail3139
    inc $I19
    set $I11, rx1126_bstack[$I19]
    $P11 = rx1126_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1126_pos)
    rx1126_cstack = rx1126_cur."!cursor_capture"($P11, "sym")
    goto rxcap1128_done3138
  rxcap1128_fail3139:
    goto rx1126_fail3131
  rxcap1128_done3138:
    repr_bind_attr_int rx1126_cur, rx1126_curclass, "$!pos", rx1126_pos
    $P11 = rx1126_cur."O"("%relational, :op<isgt_s>")
    repr_get_attr_int $I11, $P11, rx1126_curclass, "$!pos"
    lt $I11, 0, rx1126_fail3131
    nqp_rxmark rx1126_bstack, rxsubrule1129_pass3140, -1, 0
  rxsubrule1129_pass3140:
    rx1126_cstack = rx1126_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1126_pos, $P11, rx1126_curclass, "$!pos"
    rx1126_cur."!cursor_pass"(rx1126_pos, "infix:sym<gt>", 'backtrack'=>1)
    .return (rx1126_cur)
  rx1126_restart3130:
    repr_get_attr_obj rx1126_cstack, rx1126_cur, rx1126_curclass, "$!cstack"
  rx1126_fail3131:
    unless rx1126_bstack, rx1126_done3129
    pop $I19, rx1126_bstack
    if_null rx1126_cstack, rx1126_cstack_done3134
    unless rx1126_cstack, rx1126_cstack_done3134
    dec $I19
    set $P11, rx1126_cstack[$I19]
  rx1126_cstack_done3134:
    pop rx1126_rep, rx1126_bstack
    pop rx1126_pos, rx1126_bstack
    pop $I19, rx1126_bstack
    lt rx1126_pos, -1, rx1126_done3129
    lt rx1126_pos, 0, rx1126_fail3131
    eq $I19, 0, rx1126_fail3131
    nqp_islist $I20, rx1126_cstack
    unless $I20, rx1126_jump3132
    elements $I18, rx1126_bstack
    le $I18, 0, rx1126_cut3133
    dec $I18
    set $I18, rx1126_bstack[$I18]
  rx1126_cut3133:
    assign rx1126_cstack, $I18
  rx1126_jump3132:
    jump $I19
  rx1126_done3129:
    rx1126_cur."!cursor_fail"()
    .return (rx1126_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_206_1347719921.536_caps" :subid("cuid_memo_347_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_206_1347719921.536_nfa" :subid("cuid_memo_348_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 103
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 116
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=:=>" :subid("cuid_207_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1296
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1130_tgt
    .local int rx1130_pos
    .local int rx1130_off
    .local int rx1130_eos
    .local int rx1130_rep
    .local pmc rx1130_cur
    .local pmc rx1130_curclass
    .local pmc rx1130_bstack
    .local pmc rx1130_cstack
    (rx1130_cur, rx1130_tgt, rx1130_pos, rx1130_curclass, rx1130_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1130_cur
    length rx1130_eos, rx1130_tgt
    eq $I19, 1, rx1130_restart3143
    gt rx1130_pos, rx1130_eos, rx1130_fail3144
    repr_get_attr_int $I11, self, rx1130_curclass, "$!from"
    ne $I11, -1, rxscan1131_done3150
    goto rxscan1131_scan3149
  rxscan1131_loop3148:
    inc rx1130_pos
    gt rx1130_pos, rx1130_eos, rx1130_fail3144
    repr_bind_attr_int rx1130_cur, rx1130_curclass, "$!from", rx1130_pos
  rxscan1131_scan3149:
    nqp_rxmark rx1130_bstack, rxscan1131_loop3148, rx1130_pos, 0
  rxscan1131_done3150:
    nqp_rxmark rx1130_bstack, rxcap1132_fail3152, rx1130_pos, 0
    add $I11, rx1130_pos, 3
    gt $I11, rx1130_eos, rx1130_fail3144
    substr $S10, rx1130_tgt, rx1130_pos, 3
    ne $S10, ucs4:"=:=", rx1130_fail3144
    add rx1130_pos, 3
    nqp_rxpeek $I19, rx1130_bstack, rxcap1132_fail3152
    inc $I19
    set $I11, rx1130_bstack[$I19]
    $P11 = rx1130_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1130_pos)
    rx1130_cstack = rx1130_cur."!cursor_capture"($P11, "sym")
    goto rxcap1132_done3151
  rxcap1132_fail3152:
    goto rx1130_fail3144
  rxcap1132_done3151:
    repr_bind_attr_int rx1130_cur, rx1130_curclass, "$!pos", rx1130_pos
    $P11 = rx1130_cur."O"("%relational, :op<eqaddr>")
    repr_get_attr_int $I11, $P11, rx1130_curclass, "$!pos"
    lt $I11, 0, rx1130_fail3144
    nqp_rxmark rx1130_bstack, rxsubrule1133_pass3153, -1, 0
  rxsubrule1133_pass3153:
    rx1130_cstack = rx1130_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1130_pos, $P11, rx1130_curclass, "$!pos"
    rx1130_cur."!cursor_pass"(rx1130_pos, "infix:sym<=:=>", 'backtrack'=>1)
    .return (rx1130_cur)
  rx1130_restart3143:
    repr_get_attr_obj rx1130_cstack, rx1130_cur, rx1130_curclass, "$!cstack"
  rx1130_fail3144:
    unless rx1130_bstack, rx1130_done3142
    pop $I19, rx1130_bstack
    if_null rx1130_cstack, rx1130_cstack_done3147
    unless rx1130_cstack, rx1130_cstack_done3147
    dec $I19
    set $P11, rx1130_cstack[$I19]
  rx1130_cstack_done3147:
    pop rx1130_rep, rx1130_bstack
    pop rx1130_pos, rx1130_bstack
    pop $I19, rx1130_bstack
    lt rx1130_pos, -1, rx1130_done3142
    lt rx1130_pos, 0, rx1130_fail3144
    eq $I19, 0, rx1130_fail3144
    nqp_islist $I20, rx1130_cstack
    unless $I20, rx1130_jump3145
    elements $I18, rx1130_bstack
    le $I18, 0, rx1130_cut3146
    dec $I18
    set $I18, rx1130_bstack[$I18]
  rx1130_cut3146:
    assign rx1130_cstack, $I18
  rx1130_jump3145:
    jump $I19
  rx1130_done3142:
    rx1130_cur."!cursor_fail"()
    .return (rx1130_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_207_1347719921.536_caps" :subid("cuid_memo_349_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_207_1347719921.536_nfa" :subid("cuid_memo_350_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 61
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 58
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 61
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "O"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_208_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1297
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1134_tgt
    .local int rx1134_pos
    .local int rx1134_off
    .local int rx1134_eos
    .local int rx1134_rep
    .local pmc rx1134_cur
    .local pmc rx1134_curclass
    .local pmc rx1134_bstack
    .local pmc rx1134_cstack
    (rx1134_cur, rx1134_tgt, rx1134_pos, rx1134_curclass, rx1134_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1134_cur
    length rx1134_eos, rx1134_tgt
    eq $I19, 1, rx1134_restart3156
    gt rx1134_pos, rx1134_eos, rx1134_fail3157
    repr_get_attr_int $I11, self, rx1134_curclass, "$!from"
    ne $I11, -1, rxscan1135_done3163
    goto rxscan1135_scan3162
  rxscan1135_loop3161:
    inc rx1134_pos
    gt rx1134_pos, rx1134_eos, rx1134_fail3157
    repr_bind_attr_int rx1134_cur, rx1134_curclass, "$!from", rx1134_pos
  rxscan1135_scan3162:
    nqp_rxmark rx1134_bstack, rxscan1135_loop3161, rx1134_pos, 0
  rxscan1135_done3163:
    nqp_rxmark rx1134_bstack, rxcap1136_fail3165, rx1134_pos, 0
    add $I11, rx1134_pos, 2
    gt $I11, rx1134_eos, rx1134_fail3157
    substr $S10, rx1134_tgt, rx1134_pos, 2
    ne $S10, ucs4:"~~", rx1134_fail3157
    add rx1134_pos, 2
    nqp_rxpeek $I19, rx1134_bstack, rxcap1136_fail3165
    inc $I19
    set $I11, rx1134_bstack[$I19]
    $P11 = rx1134_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1134_pos)
    rx1134_cstack = rx1134_cur."!cursor_capture"($P11, "sym")
    goto rxcap1136_done3164
  rxcap1136_fail3165:
    goto rx1134_fail3157
  rxcap1136_done3164:
    repr_bind_attr_int rx1134_cur, rx1134_curclass, "$!pos", rx1134_pos
    $P11 = rx1134_cur."O"("%relational, :reducecheck<smartmatch>")
    repr_get_attr_int $I11, $P11, rx1134_curclass, "$!pos"
    lt $I11, 0, rx1134_fail3157
    nqp_rxmark rx1134_bstack, rxsubrule1137_pass3166, -1, 0
  rxsubrule1137_pass3166:
    rx1134_cstack = rx1134_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1134_pos, $P11, rx1134_curclass, "$!pos"
    rx1134_cur."!cursor_pass"(rx1134_pos, "infix:sym<~~>", 'backtrack'=>1)
    .return (rx1134_cur)
  rx1134_restart3156:
    repr_get_attr_obj rx1134_cstack, rx1134_cur, rx1134_curclass, "$!cstack"
  rx1134_fail3157:
    unless rx1134_bstack, rx1134_done3155
    pop $I19, rx1134_bstack
    if_null rx1134_cstack, rx1134_cstack_done3160
    unless rx1134_cstack, rx1134_cstack_done3160
    dec $I19
    set $P11, rx1134_cstack[$I19]
  rx1134_cstack_done3160:
    pop rx1134_rep, rx1134_bstack
    pop rx1134_pos, rx1134_bstack
    pop $I19, rx1134_bstack
    lt rx1134_pos, -1, rx1134_done3155
    lt rx1134_pos, 0, rx1134_fail3157
    eq $I19, 0, rx1134_fail3157
    nqp_islist $I20, rx1134_cstack
    unless $I20, rx1134_jump3158
    elements $I18, rx1134_bstack
    le $I18, 0, rx1134_cut3159
    dec $I18
    set $I18, rx1134_bstack[$I18]
  rx1134_cut3159:
    assign rx1134_cstack, $I18
  rx1134_jump3158:
    jump $I19
  rx1134_done3155:
    rx1134_cur."!cursor_fail"()
    .return (rx1134_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_208_1347719921.536_caps" :subid("cuid_memo_351_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_208_1347719921.536_nfa" :subid("cuid_memo_352_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 126
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 126
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<&&>" :subid("cuid_209_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1299
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1138_tgt
    .local int rx1138_pos
    .local int rx1138_off
    .local int rx1138_eos
    .local int rx1138_rep
    .local pmc rx1138_cur
    .local pmc rx1138_curclass
    .local pmc rx1138_bstack
    .local pmc rx1138_cstack
    (rx1138_cur, rx1138_tgt, rx1138_pos, rx1138_curclass, rx1138_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1138_cur
    length rx1138_eos, rx1138_tgt
    eq $I19, 1, rx1138_restart3169
    gt rx1138_pos, rx1138_eos, rx1138_fail3170
    repr_get_attr_int $I11, self, rx1138_curclass, "$!from"
    ne $I11, -1, rxscan1139_done3176
    goto rxscan1139_scan3175
  rxscan1139_loop3174:
    inc rx1138_pos
    gt rx1138_pos, rx1138_eos, rx1138_fail3170
    repr_bind_attr_int rx1138_cur, rx1138_curclass, "$!from", rx1138_pos
  rxscan1139_scan3175:
    nqp_rxmark rx1138_bstack, rxscan1139_loop3174, rx1138_pos, 0
  rxscan1139_done3176:
    nqp_rxmark rx1138_bstack, rxcap1140_fail3178, rx1138_pos, 0
    add $I11, rx1138_pos, 2
    gt $I11, rx1138_eos, rx1138_fail3170
    substr $S10, rx1138_tgt, rx1138_pos, 2
    ne $S10, ucs4:"&&", rx1138_fail3170
    add rx1138_pos, 2
    nqp_rxpeek $I19, rx1138_bstack, rxcap1140_fail3178
    inc $I19
    set $I11, rx1138_bstack[$I19]
    $P11 = rx1138_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1138_pos)
    rx1138_cstack = rx1138_cur."!cursor_capture"($P11, "sym")
    goto rxcap1140_done3177
  rxcap1140_fail3178:
    goto rx1138_fail3170
  rxcap1140_done3177:
    repr_bind_attr_int rx1138_cur, rx1138_curclass, "$!pos", rx1138_pos
    $P11 = rx1138_cur."O"("%tight_and, :op<if>")
    repr_get_attr_int $I11, $P11, rx1138_curclass, "$!pos"
    lt $I11, 0, rx1138_fail3170
    nqp_rxmark rx1138_bstack, rxsubrule1141_pass3179, -1, 0
  rxsubrule1141_pass3179:
    rx1138_cstack = rx1138_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1138_pos, $P11, rx1138_curclass, "$!pos"
    rx1138_cur."!cursor_pass"(rx1138_pos, "infix:sym<&&>", 'backtrack'=>1)
    .return (rx1138_cur)
  rx1138_restart3169:
    repr_get_attr_obj rx1138_cstack, rx1138_cur, rx1138_curclass, "$!cstack"
  rx1138_fail3170:
    unless rx1138_bstack, rx1138_done3168
    pop $I19, rx1138_bstack
    if_null rx1138_cstack, rx1138_cstack_done3173
    unless rx1138_cstack, rx1138_cstack_done3173
    dec $I19
    set $P11, rx1138_cstack[$I19]
  rx1138_cstack_done3173:
    pop rx1138_rep, rx1138_bstack
    pop rx1138_pos, rx1138_bstack
    pop $I19, rx1138_bstack
    lt rx1138_pos, -1, rx1138_done3168
    lt rx1138_pos, 0, rx1138_fail3170
    eq $I19, 0, rx1138_fail3170
    nqp_islist $I20, rx1138_cstack
    unless $I20, rx1138_jump3171
    elements $I18, rx1138_bstack
    le $I18, 0, rx1138_cut3172
    dec $I18
    set $I18, rx1138_bstack[$I18]
  rx1138_cut3172:
    assign rx1138_cstack, $I18
  rx1138_jump3171:
    jump $I19
  rx1138_done3168:
    rx1138_cur."!cursor_fail"()
    .return (rx1138_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_209_1347719921.536_caps" :subid("cuid_memo_353_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_209_1347719921.536_nfa" :subid("cuid_memo_354_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 38
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 38
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<||>" :subid("cuid_210_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1301
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1142_tgt
    .local int rx1142_pos
    .local int rx1142_off
    .local int rx1142_eos
    .local int rx1142_rep
    .local pmc rx1142_cur
    .local pmc rx1142_curclass
    .local pmc rx1142_bstack
    .local pmc rx1142_cstack
    (rx1142_cur, rx1142_tgt, rx1142_pos, rx1142_curclass, rx1142_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1142_cur
    length rx1142_eos, rx1142_tgt
    eq $I19, 1, rx1142_restart3182
    gt rx1142_pos, rx1142_eos, rx1142_fail3183
    repr_get_attr_int $I11, self, rx1142_curclass, "$!from"
    ne $I11, -1, rxscan1143_done3189
    goto rxscan1143_scan3188
  rxscan1143_loop3187:
    inc rx1142_pos
    gt rx1142_pos, rx1142_eos, rx1142_fail3183
    repr_bind_attr_int rx1142_cur, rx1142_curclass, "$!from", rx1142_pos
  rxscan1143_scan3188:
    nqp_rxmark rx1142_bstack, rxscan1143_loop3187, rx1142_pos, 0
  rxscan1143_done3189:
    nqp_rxmark rx1142_bstack, rxcap1144_fail3191, rx1142_pos, 0
    add $I11, rx1142_pos, 2
    gt $I11, rx1142_eos, rx1142_fail3183
    substr $S10, rx1142_tgt, rx1142_pos, 2
    ne $S10, ucs4:"||", rx1142_fail3183
    add rx1142_pos, 2
    nqp_rxpeek $I19, rx1142_bstack, rxcap1144_fail3191
    inc $I19
    set $I11, rx1142_bstack[$I19]
    $P11 = rx1142_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1142_pos)
    rx1142_cstack = rx1142_cur."!cursor_capture"($P11, "sym")
    goto rxcap1144_done3190
  rxcap1144_fail3191:
    goto rx1142_fail3183
  rxcap1144_done3190:
    repr_bind_attr_int rx1142_cur, rx1142_curclass, "$!pos", rx1142_pos
    $P11 = rx1142_cur."O"("%tight_or, :op<unless>")
    repr_get_attr_int $I11, $P11, rx1142_curclass, "$!pos"
    lt $I11, 0, rx1142_fail3183
    nqp_rxmark rx1142_bstack, rxsubrule1145_pass3192, -1, 0
  rxsubrule1145_pass3192:
    rx1142_cstack = rx1142_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1142_pos, $P11, rx1142_curclass, "$!pos"
    rx1142_cur."!cursor_pass"(rx1142_pos, "infix:sym<||>", 'backtrack'=>1)
    .return (rx1142_cur)
  rx1142_restart3182:
    repr_get_attr_obj rx1142_cstack, rx1142_cur, rx1142_curclass, "$!cstack"
  rx1142_fail3183:
    unless rx1142_bstack, rx1142_done3181
    pop $I19, rx1142_bstack
    if_null rx1142_cstack, rx1142_cstack_done3186
    unless rx1142_cstack, rx1142_cstack_done3186
    dec $I19
    set $P11, rx1142_cstack[$I19]
  rx1142_cstack_done3186:
    pop rx1142_rep, rx1142_bstack
    pop rx1142_pos, rx1142_bstack
    pop $I19, rx1142_bstack
    lt rx1142_pos, -1, rx1142_done3181
    lt rx1142_pos, 0, rx1142_fail3183
    eq $I19, 0, rx1142_fail3183
    nqp_islist $I20, rx1142_cstack
    unless $I20, rx1142_jump3184
    elements $I18, rx1142_bstack
    le $I18, 0, rx1142_cut3185
    dec $I18
    set $I18, rx1142_bstack[$I18]
  rx1142_cut3185:
    assign rx1142_cstack, $I18
  rx1142_jump3184:
    jump $I19
  rx1142_done3181:
    rx1142_cur."!cursor_fail"()
    .return (rx1142_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_210_1347719921.536_caps" :subid("cuid_memo_355_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_210_1347719921.536_nfa" :subid("cuid_memo_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 124
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 124
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<//>" :subid("cuid_211_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1302
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1146_tgt
    .local int rx1146_pos
    .local int rx1146_off
    .local int rx1146_eos
    .local int rx1146_rep
    .local pmc rx1146_cur
    .local pmc rx1146_curclass
    .local pmc rx1146_bstack
    .local pmc rx1146_cstack
    (rx1146_cur, rx1146_tgt, rx1146_pos, rx1146_curclass, rx1146_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1146_cur
    length rx1146_eos, rx1146_tgt
    eq $I19, 1, rx1146_restart3195
    gt rx1146_pos, rx1146_eos, rx1146_fail3196
    repr_get_attr_int $I11, self, rx1146_curclass, "$!from"
    ne $I11, -1, rxscan1147_done3202
    goto rxscan1147_scan3201
  rxscan1147_loop3200:
    inc rx1146_pos
    gt rx1146_pos, rx1146_eos, rx1146_fail3196
    repr_bind_attr_int rx1146_cur, rx1146_curclass, "$!from", rx1146_pos
  rxscan1147_scan3201:
    nqp_rxmark rx1146_bstack, rxscan1147_loop3200, rx1146_pos, 0
  rxscan1147_done3202:
    nqp_rxmark rx1146_bstack, rxcap1148_fail3204, rx1146_pos, 0
    add $I11, rx1146_pos, 2
    gt $I11, rx1146_eos, rx1146_fail3196
    substr $S10, rx1146_tgt, rx1146_pos, 2
    ne $S10, ucs4:"//", rx1146_fail3196
    add rx1146_pos, 2
    nqp_rxpeek $I19, rx1146_bstack, rxcap1148_fail3204
    inc $I19
    set $I11, rx1146_bstack[$I19]
    $P11 = rx1146_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1146_pos)
    rx1146_cstack = rx1146_cur."!cursor_capture"($P11, "sym")
    goto rxcap1148_done3203
  rxcap1148_fail3204:
    goto rx1146_fail3196
  rxcap1148_done3203:
    repr_bind_attr_int rx1146_cur, rx1146_curclass, "$!pos", rx1146_pos
    $P11 = rx1146_cur."O"("%tight_or, :op<defor>")
    repr_get_attr_int $I11, $P11, rx1146_curclass, "$!pos"
    lt $I11, 0, rx1146_fail3196
    nqp_rxmark rx1146_bstack, rxsubrule1149_pass3205, -1, 0
  rxsubrule1149_pass3205:
    rx1146_cstack = rx1146_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1146_pos, $P11, rx1146_curclass, "$!pos"
    rx1146_cur."!cursor_pass"(rx1146_pos, "infix:sym<//>", 'backtrack'=>1)
    .return (rx1146_cur)
  rx1146_restart3195:
    repr_get_attr_obj rx1146_cstack, rx1146_cur, rx1146_curclass, "$!cstack"
  rx1146_fail3196:
    unless rx1146_bstack, rx1146_done3194
    pop $I19, rx1146_bstack
    if_null rx1146_cstack, rx1146_cstack_done3199
    unless rx1146_cstack, rx1146_cstack_done3199
    dec $I19
    set $P11, rx1146_cstack[$I19]
  rx1146_cstack_done3199:
    pop rx1146_rep, rx1146_bstack
    pop rx1146_pos, rx1146_bstack
    pop $I19, rx1146_bstack
    lt rx1146_pos, -1, rx1146_done3194
    lt rx1146_pos, 0, rx1146_fail3196
    eq $I19, 0, rx1146_fail3196
    nqp_islist $I20, rx1146_cstack
    unless $I20, rx1146_jump3197
    elements $I18, rx1146_bstack
    le $I18, 0, rx1146_cut3198
    dec $I18
    set $I18, rx1146_bstack[$I18]
  rx1146_cut3198:
    assign rx1146_cstack, $I18
  rx1146_jump3197:
    jump $I19
  rx1146_done3194:
    rx1146_cur."!cursor_fail"()
    .return (rx1146_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_211_1347719921.536_caps" :subid("cuid_memo_357_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_211_1347719921.536_nfa" :subid("cuid_memo_358_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 47
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 47
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<?? !!>" :subid("cuid_212_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1304
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1150_tgt
    .local int rx1150_pos
    .local int rx1150_off
    .local int rx1150_eos
    .local int rx1150_rep
    .local pmc rx1150_cur
    .local pmc rx1150_curclass
    .local pmc rx1150_bstack
    .local pmc rx1150_cstack
    (rx1150_cur, rx1150_tgt, rx1150_pos, rx1150_curclass, rx1150_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1150_cur
    length rx1150_eos, rx1150_tgt
    eq $I19, 1, rx1150_restart3208
    gt rx1150_pos, rx1150_eos, rx1150_fail3209
    repr_get_attr_int $I11, self, rx1150_curclass, "$!from"
    ne $I11, -1, rxscan1151_done3215
    goto rxscan1151_scan3214
  rxscan1151_loop3213:
    inc rx1150_pos
    gt rx1150_pos, rx1150_eos, rx1150_fail3209
    repr_bind_attr_int rx1150_cur, rx1150_curclass, "$!from", rx1150_pos
  rxscan1151_scan3214:
    nqp_rxmark rx1150_bstack, rxscan1151_loop3213, rx1150_pos, 0
  rxscan1151_done3215:
    add $I11, rx1150_pos, 2
    gt $I11, rx1150_eos, rx1150_fail3209
    substr $S10, rx1150_tgt, rx1150_pos, 2
    ne $S10, ucs4:"??", rx1150_fail3209
    add rx1150_pos, 2
    repr_bind_attr_int rx1150_cur, rx1150_curclass, "$!pos", rx1150_pos
    $P11 = rx1150_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1150_curclass, "$!pos"
    lt $I11, 0, rx1150_fail3209
    repr_get_attr_int rx1150_pos, $P11, rx1150_curclass, "$!pos"
    repr_bind_attr_int rx1150_cur, rx1150_curclass, "$!pos", rx1150_pos
    $P11 = rx1150_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx1150_curclass, "$!pos"
    lt $I11, 0, rx1150_fail3209
    nqp_rxmark rx1150_bstack, rxsubrule1153_pass3217, -1, 0
  rxsubrule1153_pass3217:
    rx1150_cstack = rx1150_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1150_pos, $P11, rx1150_curclass, "$!pos"
    add $I11, rx1150_pos, 2
    gt $I11, rx1150_eos, rx1150_fail3209
    substr $S10, rx1150_tgt, rx1150_pos, 2
    ne $S10, ucs4:"!!", rx1150_fail3209
    add rx1150_pos, 2
    repr_bind_attr_int rx1150_cur, rx1150_curclass, "$!pos", rx1150_pos
    $P11 = rx1150_cur."O"("%conditional, :reducecheck<ternary>, :op<if>")
    repr_get_attr_int $I11, $P11, rx1150_curclass, "$!pos"
    lt $I11, 0, rx1150_fail3209
    nqp_rxmark rx1150_bstack, rxsubrule1154_pass3218, -1, 0
  rxsubrule1154_pass3218:
    rx1150_cstack = rx1150_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1150_pos, $P11, rx1150_curclass, "$!pos"
    rx1150_cur."!cursor_pass"(rx1150_pos, "infix:sym<?? !!>", 'backtrack'=>1)
    .return (rx1150_cur)
  rx1150_restart3208:
    repr_get_attr_obj rx1150_cstack, rx1150_cur, rx1150_curclass, "$!cstack"
  rx1150_fail3209:
    unless rx1150_bstack, rx1150_done3207
    pop $I19, rx1150_bstack
    if_null rx1150_cstack, rx1150_cstack_done3212
    unless rx1150_cstack, rx1150_cstack_done3212
    dec $I19
    set $P11, rx1150_cstack[$I19]
  rx1150_cstack_done3212:
    pop rx1150_rep, rx1150_bstack
    pop rx1150_pos, rx1150_bstack
    pop $I19, rx1150_bstack
    lt rx1150_pos, -1, rx1150_done3207
    lt rx1150_pos, 0, rx1150_fail3209
    eq $I19, 0, rx1150_fail3209
    nqp_islist $I20, rx1150_cstack
    unless $I20, rx1150_jump3210
    elements $I18, rx1150_bstack
    le $I18, 0, rx1150_cut3211
    dec $I18
    set $I18, rx1150_bstack[$I18]
  rx1150_cut3211:
    assign rx1150_cstack, $I18
  rx1150_jump3210:
    jump $I19
  rx1150_done3207:
    rx1150_cur."!cursor_fail"()
    .return (rx1150_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_212_1347719921.536_caps" :subid("cuid_memo_359_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_212_1347719921.536_nfa" :subid("cuid_memo_360_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 63
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 63
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "ws"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "EXPR"
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 33
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 33
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "O"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=>" :subid("cuid_213_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1312
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1155_tgt
    .local int rx1155_pos
    .local int rx1155_off
    .local int rx1155_eos
    .local int rx1155_rep
    .local pmc rx1155_cur
    .local pmc rx1155_curclass
    .local pmc rx1155_bstack
    .local pmc rx1155_cstack
    (rx1155_cur, rx1155_tgt, rx1155_pos, rx1155_curclass, rx1155_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1155_cur
    length rx1155_eos, rx1155_tgt
    eq $I19, 1, rx1155_restart3221
    gt rx1155_pos, rx1155_eos, rx1155_fail3222
    repr_get_attr_int $I11, self, rx1155_curclass, "$!from"
    ne $I11, -1, rxscan1156_done3228
    goto rxscan1156_scan3227
  rxscan1156_loop3226:
    inc rx1155_pos
    gt rx1155_pos, rx1155_eos, rx1155_fail3222
    repr_bind_attr_int rx1155_cur, rx1155_curclass, "$!from", rx1155_pos
  rxscan1156_scan3227:
    nqp_rxmark rx1155_bstack, rxscan1156_loop3226, rx1155_pos, 0
  rxscan1156_done3228:
    nqp_rxmark rx1155_bstack, rxcap1157_fail3230, rx1155_pos, 0
    add $I11, rx1155_pos, 1
    gt $I11, rx1155_eos, rx1155_fail3222
    substr $S10, rx1155_tgt, rx1155_pos, 1
    ne $S10, ucs4:"=", rx1155_fail3222
    add rx1155_pos, 1
    nqp_rxpeek $I19, rx1155_bstack, rxcap1157_fail3230
    inc $I19
    set $I11, rx1155_bstack[$I19]
    $P11 = rx1155_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1155_pos)
    rx1155_cstack = rx1155_cur."!cursor_capture"($P11, "sym")
    goto rxcap1157_done3229
  rxcap1157_fail3230:
    goto rx1155_fail3222
  rxcap1157_done3229:
    repr_bind_attr_int rx1155_cur, rx1155_curclass, "$!pos", rx1155_pos
    $P11 = rx1155_cur."panic"("Assignment (\"=\") not supported in NQP, use \":=\" instead")
    repr_get_attr_int $I11, $P11, rx1155_curclass, "$!pos"
    lt $I11, 0, rx1155_fail3222
    repr_get_attr_int rx1155_pos, $P11, rx1155_curclass, "$!pos"
    rx1155_cur."!cursor_pass"(rx1155_pos, "infix:sym<=>", 'backtrack'=>1)
    .return (rx1155_cur)
  rx1155_restart3221:
    repr_get_attr_obj rx1155_cstack, rx1155_cur, rx1155_curclass, "$!cstack"
  rx1155_fail3222:
    unless rx1155_bstack, rx1155_done3220
    pop $I19, rx1155_bstack
    if_null rx1155_cstack, rx1155_cstack_done3225
    unless rx1155_cstack, rx1155_cstack_done3225
    dec $I19
    set $P11, rx1155_cstack[$I19]
  rx1155_cstack_done3225:
    pop rx1155_rep, rx1155_bstack
    pop rx1155_pos, rx1155_bstack
    pop $I19, rx1155_bstack
    lt rx1155_pos, -1, rx1155_done3220
    lt rx1155_pos, 0, rx1155_fail3222
    eq $I19, 0, rx1155_fail3222
    nqp_islist $I20, rx1155_cstack
    unless $I20, rx1155_jump3223
    elements $I18, rx1155_bstack
    le $I18, 0, rx1155_cut3224
    dec $I18
    set $I18, rx1155_bstack[$I18]
  rx1155_cut3224:
    assign rx1155_cstack, $I18
  rx1155_jump3223:
    jump $I19
  rx1155_done3220:
    rx1155_cur."!cursor_fail"()
    .return (rx1155_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_213_1347719921.536_caps" :subid("cuid_memo_361_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_213_1347719921.536_nfa" :subid("cuid_memo_362_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 61
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "panic"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<:=>" :subid("cuid_214_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1315
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1159_tgt
    .local int rx1159_pos
    .local int rx1159_off
    .local int rx1159_eos
    .local int rx1159_rep
    .local pmc rx1159_cur
    .local pmc rx1159_curclass
    .local pmc rx1159_bstack
    .local pmc rx1159_cstack
    (rx1159_cur, rx1159_tgt, rx1159_pos, rx1159_curclass, rx1159_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1159_cur
    length rx1159_eos, rx1159_tgt
    eq $I19, 1, rx1159_restart3234
    gt rx1159_pos, rx1159_eos, rx1159_fail3235
    repr_get_attr_int $I11, self, rx1159_curclass, "$!from"
    ne $I11, -1, rxscan1160_done3241
    goto rxscan1160_scan3240
  rxscan1160_loop3239:
    inc rx1159_pos
    gt rx1159_pos, rx1159_eos, rx1159_fail3235
    repr_bind_attr_int rx1159_cur, rx1159_curclass, "$!from", rx1159_pos
  rxscan1160_scan3240:
    nqp_rxmark rx1159_bstack, rxscan1160_loop3239, rx1159_pos, 0
  rxscan1160_done3241:
    nqp_rxmark rx1159_bstack, rxcap1161_fail3243, rx1159_pos, 0
    add $I11, rx1159_pos, 2
    gt $I11, rx1159_eos, rx1159_fail3235
    substr $S10, rx1159_tgt, rx1159_pos, 2
    ne $S10, ucs4:":=", rx1159_fail3235
    add rx1159_pos, 2
    nqp_rxpeek $I19, rx1159_bstack, rxcap1161_fail3243
    inc $I19
    set $I11, rx1159_bstack[$I19]
    $P11 = rx1159_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1159_pos)
    rx1159_cstack = rx1159_cur."!cursor_capture"($P11, "sym")
    goto rxcap1161_done3242
  rxcap1161_fail3243:
    goto rx1159_fail3235
  rxcap1161_done3242:
    repr_bind_attr_int rx1159_cur, rx1159_curclass, "$!pos", rx1159_pos
    $P11 = rx1159_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1159_curclass, "$!pos"
    lt $I11, 0, rx1159_fail3235
    nqp_rxmark rx1159_bstack, rxsubrule1162_pass3244, -1, 0
  rxsubrule1162_pass3244:
    rx1159_cstack = rx1159_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1159_pos, $P11, rx1159_curclass, "$!pos"
    rx1159_cur."!cursor_pass"(rx1159_pos, "infix:sym<:=>", 'backtrack'=>1)
    .return (rx1159_cur)
  rx1159_restart3234:
    repr_get_attr_obj rx1159_cstack, rx1159_cur, rx1159_curclass, "$!cstack"
  rx1159_fail3235:
    unless rx1159_bstack, rx1159_done3233
    pop $I19, rx1159_bstack
    if_null rx1159_cstack, rx1159_cstack_done3238
    unless rx1159_cstack, rx1159_cstack_done3238
    dec $I19
    set $P11, rx1159_cstack[$I19]
  rx1159_cstack_done3238:
    pop rx1159_rep, rx1159_bstack
    pop rx1159_pos, rx1159_bstack
    pop $I19, rx1159_bstack
    lt rx1159_pos, -1, rx1159_done3233
    lt rx1159_pos, 0, rx1159_fail3235
    eq $I19, 0, rx1159_fail3235
    nqp_islist $I20, rx1159_cstack
    unless $I20, rx1159_jump3236
    elements $I18, rx1159_bstack
    le $I18, 0, rx1159_cut3237
    dec $I18
    set $I18, rx1159_bstack[$I18]
  rx1159_cut3237:
    assign rx1159_cstack, $I18
  rx1159_jump3236:
    jump $I19
  rx1159_done3233:
    rx1159_cur."!cursor_fail"()
    .return (rx1159_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_214_1347719921.536_caps" :subid("cuid_memo_363_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_214_1347719921.536_nfa" :subid("cuid_memo_364_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<::=>" :subid("cuid_215_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1316
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1163_tgt
    .local int rx1163_pos
    .local int rx1163_off
    .local int rx1163_eos
    .local int rx1163_rep
    .local pmc rx1163_cur
    .local pmc rx1163_curclass
    .local pmc rx1163_bstack
    .local pmc rx1163_cstack
    (rx1163_cur, rx1163_tgt, rx1163_pos, rx1163_curclass, rx1163_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1163_cur
    length rx1163_eos, rx1163_tgt
    eq $I19, 1, rx1163_restart3247
    gt rx1163_pos, rx1163_eos, rx1163_fail3248
    repr_get_attr_int $I11, self, rx1163_curclass, "$!from"
    ne $I11, -1, rxscan1164_done3254
    goto rxscan1164_scan3253
  rxscan1164_loop3252:
    inc rx1163_pos
    gt rx1163_pos, rx1163_eos, rx1163_fail3248
    repr_bind_attr_int rx1163_cur, rx1163_curclass, "$!from", rx1163_pos
  rxscan1164_scan3253:
    nqp_rxmark rx1163_bstack, rxscan1164_loop3252, rx1163_pos, 0
  rxscan1164_done3254:
    nqp_rxmark rx1163_bstack, rxcap1165_fail3256, rx1163_pos, 0
    add $I11, rx1163_pos, 3
    gt $I11, rx1163_eos, rx1163_fail3248
    substr $S10, rx1163_tgt, rx1163_pos, 3
    ne $S10, ucs4:"::=", rx1163_fail3248
    add rx1163_pos, 3
    nqp_rxpeek $I19, rx1163_bstack, rxcap1165_fail3256
    inc $I19
    set $I11, rx1163_bstack[$I19]
    $P11 = rx1163_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1163_pos)
    rx1163_cstack = rx1163_cur."!cursor_capture"($P11, "sym")
    goto rxcap1165_done3255
  rxcap1165_fail3256:
    goto rx1163_fail3248
  rxcap1165_done3255:
    repr_bind_attr_int rx1163_cur, rx1163_curclass, "$!pos", rx1163_pos
    $P11 = rx1163_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1163_curclass, "$!pos"
    lt $I11, 0, rx1163_fail3248
    nqp_rxmark rx1163_bstack, rxsubrule1166_pass3257, -1, 0
  rxsubrule1166_pass3257:
    rx1163_cstack = rx1163_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1163_pos, $P11, rx1163_curclass, "$!pos"
    rx1163_cur."!cursor_pass"(rx1163_pos, "infix:sym<::=>", 'backtrack'=>1)
    .return (rx1163_cur)
  rx1163_restart3247:
    repr_get_attr_obj rx1163_cstack, rx1163_cur, rx1163_curclass, "$!cstack"
  rx1163_fail3248:
    unless rx1163_bstack, rx1163_done3246
    pop $I19, rx1163_bstack
    if_null rx1163_cstack, rx1163_cstack_done3251
    unless rx1163_cstack, rx1163_cstack_done3251
    dec $I19
    set $P11, rx1163_cstack[$I19]
  rx1163_cstack_done3251:
    pop rx1163_rep, rx1163_bstack
    pop rx1163_pos, rx1163_bstack
    pop $I19, rx1163_bstack
    lt rx1163_pos, -1, rx1163_done3246
    lt rx1163_pos, 0, rx1163_fail3248
    eq $I19, 0, rx1163_fail3248
    nqp_islist $I20, rx1163_cstack
    unless $I20, rx1163_jump3249
    elements $I18, rx1163_bstack
    le $I18, 0, rx1163_cut3250
    dec $I18
    set $I18, rx1163_bstack[$I18]
  rx1163_cut3250:
    assign rx1163_cstack, $I18
  rx1163_jump3249:
    jump $I19
  rx1163_done3246:
    rx1163_cur."!cursor_fail"()
    .return (rx1163_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_215_1347719921.536_caps" :subid("cuid_memo_365_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_215_1347719921.536_nfa" :subid("cuid_memo_366_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 58
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 61
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "O"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<,>" :subid("cuid_216_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1318
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1167_tgt
    .local int rx1167_pos
    .local int rx1167_off
    .local int rx1167_eos
    .local int rx1167_rep
    .local pmc rx1167_cur
    .local pmc rx1167_curclass
    .local pmc rx1167_bstack
    .local pmc rx1167_cstack
    (rx1167_cur, rx1167_tgt, rx1167_pos, rx1167_curclass, rx1167_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1167_cur
    length rx1167_eos, rx1167_tgt
    eq $I19, 1, rx1167_restart3260
    gt rx1167_pos, rx1167_eos, rx1167_fail3261
    repr_get_attr_int $I11, self, rx1167_curclass, "$!from"
    ne $I11, -1, rxscan1168_done3267
    goto rxscan1168_scan3266
  rxscan1168_loop3265:
    inc rx1167_pos
    gt rx1167_pos, rx1167_eos, rx1167_fail3261
    repr_bind_attr_int rx1167_cur, rx1167_curclass, "$!from", rx1167_pos
  rxscan1168_scan3266:
    nqp_rxmark rx1167_bstack, rxscan1168_loop3265, rx1167_pos, 0
  rxscan1168_done3267:
    nqp_rxmark rx1167_bstack, rxcap1169_fail3269, rx1167_pos, 0
    add $I11, rx1167_pos, 1
    gt $I11, rx1167_eos, rx1167_fail3261
    substr $S10, rx1167_tgt, rx1167_pos, 1
    ne $S10, ucs4:",", rx1167_fail3261
    add rx1167_pos, 1
    nqp_rxpeek $I19, rx1167_bstack, rxcap1169_fail3269
    inc $I19
    set $I11, rx1167_bstack[$I19]
    $P11 = rx1167_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1167_pos)
    rx1167_cstack = rx1167_cur."!cursor_capture"($P11, "sym")
    goto rxcap1169_done3268
  rxcap1169_fail3269:
    goto rx1167_fail3261
  rxcap1169_done3268:
    repr_bind_attr_int rx1167_cur, rx1167_curclass, "$!pos", rx1167_pos
    $P11 = rx1167_cur."O"("%comma, :op<list>")
    repr_get_attr_int $I11, $P11, rx1167_curclass, "$!pos"
    lt $I11, 0, rx1167_fail3261
    nqp_rxmark rx1167_bstack, rxsubrule1170_pass3270, -1, 0
  rxsubrule1170_pass3270:
    rx1167_cstack = rx1167_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1167_pos, $P11, rx1167_curclass, "$!pos"
    rx1167_cur."!cursor_pass"(rx1167_pos, "infix:sym<,>", 'backtrack'=>1)
    .return (rx1167_cur)
  rx1167_restart3260:
    repr_get_attr_obj rx1167_cstack, rx1167_cur, rx1167_curclass, "$!cstack"
  rx1167_fail3261:
    unless rx1167_bstack, rx1167_done3259
    pop $I19, rx1167_bstack
    if_null rx1167_cstack, rx1167_cstack_done3264
    unless rx1167_cstack, rx1167_cstack_done3264
    dec $I19
    set $P11, rx1167_cstack[$I19]
  rx1167_cstack_done3264:
    pop rx1167_rep, rx1167_bstack
    pop rx1167_pos, rx1167_bstack
    pop $I19, rx1167_bstack
    lt rx1167_pos, -1, rx1167_done3259
    lt rx1167_pos, 0, rx1167_fail3261
    eq $I19, 0, rx1167_fail3261
    nqp_islist $I20, rx1167_cstack
    unless $I20, rx1167_jump3262
    elements $I18, rx1167_bstack
    le $I18, 0, rx1167_cut3263
    dec $I18
    set $I18, rx1167_bstack[$I18]
  rx1167_cut3263:
    assign rx1167_cstack, $I18
  rx1167_jump3262:
    jump $I19
  rx1167_done3259:
    rx1167_cur."!cursor_fail"()
    .return (rx1167_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_216_1347719921.536_caps" :subid("cuid_memo_367_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_216_1347719921.536_nfa" :subid("cuid_memo_368_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 44
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_217_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1320
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_395_1347719921.536' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1171_tgt
    .local int rx1171_pos
    .local int rx1171_off
    .local int rx1171_eos
    .local int rx1171_rep
    .local pmc rx1171_cur
    .local pmc rx1171_curclass
    .local pmc rx1171_bstack
    .local pmc rx1171_cstack
    (rx1171_cur, rx1171_tgt, rx1171_pos, rx1171_curclass, rx1171_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1171_cur
    length rx1171_eos, rx1171_tgt
    eq $I19, 1, rx1171_restart3273
    gt rx1171_pos, rx1171_eos, rx1171_fail3274
    repr_get_attr_int $I11, self, rx1171_curclass, "$!from"
    ne $I11, -1, rxscan1172_done3280
    goto rxscan1172_scan3279
  rxscan1172_loop3278:
    inc rx1171_pos
    gt rx1171_pos, rx1171_eos, rx1171_fail3274
    repr_bind_attr_int rx1171_cur, rx1171_curclass, "$!from", rx1171_pos
  rxscan1172_scan3279:
    nqp_rxmark rx1171_bstack, rxscan1172_loop3278, rx1171_pos, 0
  rxscan1172_done3280:
    nqp_rxmark rx1171_bstack, rxcap1173_fail3282, rx1171_pos, 0
    add $I11, rx1171_pos, 6
    gt $I11, rx1171_eos, rx1171_fail3274
    substr $S10, rx1171_tgt, rx1171_pos, 6
    ne $S10, ucs4:"return", rx1171_fail3274
    add rx1171_pos, 6
    nqp_rxpeek $I19, rx1171_bstack, rxcap1173_fail3282
    inc $I19
    set $I11, rx1171_bstack[$I19]
    $P11 = rx1171_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1171_pos)
    rx1171_cstack = rx1171_cur."!cursor_capture"($P11, "sym")
    goto rxcap1173_done3281
  rxcap1173_fail3282:
    goto rx1171_fail3274
  rxcap1173_done3281:
    ge rx1171_pos, rx1171_eos, rx1171_fail3274
    is_cclass $I11, .CCLASS_WHITESPACE, rx1171_tgt, rx1171_pos
    unless $I11, rx1171_fail3274
    add rx1171_pos, 1
    repr_bind_attr_int rx1171_cur, rx1171_curclass, "$!pos", rx1171_pos
    $P11 = rx1171_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1171_curclass, "$!pos"
    lt $I11, 0, rx1171_fail3274
    nqp_rxmark rx1171_bstack, rxsubrule1174_pass3283, -1, 0
  rxsubrule1174_pass3283:
    rx1171_cstack = rx1171_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1171_pos, $P11, rx1171_curclass, "$!pos"
    repr_bind_attr_int rx1171_cur, rx1171_curclass, "$!pos", rx1171_pos
    store_lex unicode:"$\x{a2}", rx1171_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_395_1347719921.536' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1171_cur."!cursor_pass"(rx1171_pos, "prefix:sym<return>", 'backtrack'=>1)
    .return (rx1171_cur)
  rx1171_restart3273:
    repr_get_attr_obj rx1171_cstack, rx1171_cur, rx1171_curclass, "$!cstack"
  rx1171_fail3274:
    unless rx1171_bstack, rx1171_done3272
    pop $I19, rx1171_bstack
    if_null rx1171_cstack, rx1171_cstack_done3277
    unless rx1171_cstack, rx1171_cstack_done3277
    dec $I19
    set $P11, rx1171_cstack[$I19]
  rx1171_cstack_done3277:
    pop rx1171_rep, rx1171_bstack
    pop rx1171_pos, rx1171_bstack
    pop $I19, rx1171_bstack
    lt rx1171_pos, -1, rx1171_done3272
    lt rx1171_pos, 0, rx1171_fail3274
    eq $I19, 0, rx1171_fail3274
    nqp_islist $I20, rx1171_cstack
    unless $I20, rx1171_jump3275
    elements $I18, rx1171_bstack
    le $I18, 0, rx1171_cut3276
    dec $I18
    set $I18, rx1171_bstack[$I18]
  rx1171_cut3276:
    assign rx1171_cstack, $I18
  rx1171_jump3275:
    jump $I19
  rx1171_done3272:
    rx1171_cur."!cursor_fail"()
    .return (rx1171_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_217_1347719921.536_caps" :subid("cuid_memo_369_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_217_1347719921.536_nfa" :subid("cuid_memo_370_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 114
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 116
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 117
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 114
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 110
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 4
    push $P5027, $P5028
    box $P5029, 32
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 8
    push $P5031, $P5032
    box $P5033, "O"
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 0
    push $P5035, $P5036
    box $P5037, 0
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_395_1347719921.536") :anon :lex :outer("cuid_217_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1320

    box $P5001, 1
    store_dynamic_lex "$*RETURN_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_218_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1321
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1175_tgt
    .local int rx1175_pos
    .local int rx1175_off
    .local int rx1175_eos
    .local int rx1175_rep
    .local pmc rx1175_cur
    .local pmc rx1175_curclass
    .local pmc rx1175_bstack
    .local pmc rx1175_cstack
    (rx1175_cur, rx1175_tgt, rx1175_pos, rx1175_curclass, rx1175_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1175_cur
    length rx1175_eos, rx1175_tgt
    eq $I19, 1, rx1175_restart3286
    gt rx1175_pos, rx1175_eos, rx1175_fail3287
    repr_get_attr_int $I11, self, rx1175_curclass, "$!from"
    ne $I11, -1, rxscan1176_done3293
    goto rxscan1176_scan3292
  rxscan1176_loop3291:
    inc rx1175_pos
    gt rx1175_pos, rx1175_eos, rx1175_fail3287
    repr_bind_attr_int rx1175_cur, rx1175_curclass, "$!from", rx1175_pos
  rxscan1176_scan3292:
    nqp_rxmark rx1175_bstack, rxscan1176_loop3291, rx1175_pos, 0
  rxscan1176_done3293:
    nqp_rxmark rx1175_bstack, rxcap1177_fail3295, rx1175_pos, 0
    add $I11, rx1175_pos, 4
    gt $I11, rx1175_eos, rx1175_fail3287
    substr $S10, rx1175_tgt, rx1175_pos, 4
    ne $S10, ucs4:"make", rx1175_fail3287
    add rx1175_pos, 4
    nqp_rxpeek $I19, rx1175_bstack, rxcap1177_fail3295
    inc $I19
    set $I11, rx1175_bstack[$I19]
    $P11 = rx1175_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1175_pos)
    rx1175_cstack = rx1175_cur."!cursor_capture"($P11, "sym")
    goto rxcap1177_done3294
  rxcap1177_fail3295:
    goto rx1175_fail3287
  rxcap1177_done3294:
    ge rx1175_pos, rx1175_eos, rx1175_fail3287
    is_cclass $I11, .CCLASS_WHITESPACE, rx1175_tgt, rx1175_pos
    unless $I11, rx1175_fail3287
    add rx1175_pos, 1
    repr_bind_attr_int rx1175_cur, rx1175_curclass, "$!pos", rx1175_pos
    $P11 = rx1175_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1175_curclass, "$!pos"
    lt $I11, 0, rx1175_fail3287
    nqp_rxmark rx1175_bstack, rxsubrule1178_pass3296, -1, 0
  rxsubrule1178_pass3296:
    rx1175_cstack = rx1175_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1175_pos, $P11, rx1175_curclass, "$!pos"
    rx1175_cur."!cursor_pass"(rx1175_pos, "prefix:sym<make>", 'backtrack'=>1)
    .return (rx1175_cur)
  rx1175_restart3286:
    repr_get_attr_obj rx1175_cstack, rx1175_cur, rx1175_curclass, "$!cstack"
  rx1175_fail3287:
    unless rx1175_bstack, rx1175_done3285
    pop $I19, rx1175_bstack
    if_null rx1175_cstack, rx1175_cstack_done3290
    unless rx1175_cstack, rx1175_cstack_done3290
    dec $I19
    set $P11, rx1175_cstack[$I19]
  rx1175_cstack_done3290:
    pop rx1175_rep, rx1175_bstack
    pop rx1175_pos, rx1175_bstack
    pop $I19, rx1175_bstack
    lt rx1175_pos, -1, rx1175_done3285
    lt rx1175_pos, 0, rx1175_fail3287
    eq $I19, 0, rx1175_fail3287
    nqp_islist $I20, rx1175_cstack
    unless $I20, rx1175_jump3288
    elements $I18, rx1175_bstack
    le $I18, 0, rx1175_cut3289
    dec $I18
    set $I18, rx1175_bstack[$I18]
  rx1175_cut3289:
    assign rx1175_cstack, $I18
  rx1175_jump3288:
    jump $I19
  rx1175_done3285:
    rx1175_cur."!cursor_fail"()
    .return (rx1175_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_218_1347719921.536_caps" :subid("cuid_memo_371_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_218_1347719921.536_nfa" :subid("cuid_memo_372_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 97
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 107
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 101
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 4
    push $P5019, $P5020
    box $P5021, 32
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "O"
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_219_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1322
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_396_1347719921.536' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1179_tgt
    .local int rx1179_pos
    .local int rx1179_off
    .local int rx1179_eos
    .local int rx1179_rep
    .local pmc rx1179_cur
    .local pmc rx1179_curclass
    .local pmc rx1179_bstack
    .local pmc rx1179_cstack
    (rx1179_cur, rx1179_tgt, rx1179_pos, rx1179_curclass, rx1179_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1179_cur
    length rx1179_eos, rx1179_tgt
    eq $I19, 1, rx1179_restart3299
    gt rx1179_pos, rx1179_eos, rx1179_fail3300
    repr_get_attr_int $I11, self, rx1179_curclass, "$!from"
    ne $I11, -1, rxscan1180_done3306
    goto rxscan1180_scan3305
  rxscan1180_loop3304:
    inc rx1179_pos
    gt rx1179_pos, rx1179_eos, rx1179_fail3300
    repr_bind_attr_int rx1179_cur, rx1179_curclass, "$!from", rx1179_pos
  rxscan1180_scan3305:
    nqp_rxmark rx1179_bstack, rxscan1180_loop3304, rx1179_pos, 0
  rxscan1180_done3306:
    nqp_rxmark rx1179_bstack, rxcap1181_fail3308, rx1179_pos, 0
    add $I11, rx1179_pos, 4
    gt $I11, rx1179_eos, rx1179_fail3300
    substr $S10, rx1179_tgt, rx1179_pos, 4
    ne $S10, ucs4:"last", rx1179_fail3300
    add rx1179_pos, 4
    nqp_rxpeek $I19, rx1179_bstack, rxcap1181_fail3308
    inc $I19
    set $I11, rx1179_bstack[$I19]
    $P11 = rx1179_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1179_pos)
    rx1179_cstack = rx1179_cur."!cursor_capture"($P11, "sym")
    goto rxcap1181_done3307
  rxcap1181_fail3308:
    goto rx1179_fail3300
  rxcap1181_done3307:
    repr_bind_attr_int rx1179_cur, rx1179_curclass, "$!pos", rx1179_pos
    store_lex unicode:"$\x{a2}", rx1179_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_396_1347719921.536' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1179_cur."!cursor_pass"(rx1179_pos, "term:sym<last>", 'backtrack'=>1)
    .return (rx1179_cur)
  rx1179_restart3299:
    repr_get_attr_obj rx1179_cstack, rx1179_cur, rx1179_curclass, "$!cstack"
  rx1179_fail3300:
    unless rx1179_bstack, rx1179_done3298
    pop $I19, rx1179_bstack
    if_null rx1179_cstack, rx1179_cstack_done3303
    unless rx1179_cstack, rx1179_cstack_done3303
    dec $I19
    set $P11, rx1179_cstack[$I19]
  rx1179_cstack_done3303:
    pop rx1179_rep, rx1179_bstack
    pop rx1179_pos, rx1179_bstack
    pop $I19, rx1179_bstack
    lt rx1179_pos, -1, rx1179_done3298
    lt rx1179_pos, 0, rx1179_fail3300
    eq $I19, 0, rx1179_fail3300
    nqp_islist $I20, rx1179_cstack
    unless $I20, rx1179_jump3301
    elements $I18, rx1179_bstack
    le $I18, 0, rx1179_cut3302
    dec $I18
    set $I18, rx1179_bstack[$I18]
  rx1179_cut3302:
    assign rx1179_cstack, $I18
  rx1179_jump3301:
    jump $I19
  rx1179_done3298:
    rx1179_cur."!cursor_fail"()
    .return (rx1179_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_219_1347719921.536_caps" :subid("cuid_memo_373_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_219_1347719921.536_nfa" :subid("cuid_memo_374_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 108
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 97
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 115
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 116
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_396_1347719921.536") :anon :lex :outer("cuid_219_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1322

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_220_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1323
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_397_1347719921.536' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1182_tgt
    .local int rx1182_pos
    .local int rx1182_off
    .local int rx1182_eos
    .local int rx1182_rep
    .local pmc rx1182_cur
    .local pmc rx1182_curclass
    .local pmc rx1182_bstack
    .local pmc rx1182_cstack
    (rx1182_cur, rx1182_tgt, rx1182_pos, rx1182_curclass, rx1182_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1182_cur
    length rx1182_eos, rx1182_tgt
    eq $I19, 1, rx1182_restart3311
    gt rx1182_pos, rx1182_eos, rx1182_fail3312
    repr_get_attr_int $I11, self, rx1182_curclass, "$!from"
    ne $I11, -1, rxscan1183_done3318
    goto rxscan1183_scan3317
  rxscan1183_loop3316:
    inc rx1182_pos
    gt rx1182_pos, rx1182_eos, rx1182_fail3312
    repr_bind_attr_int rx1182_cur, rx1182_curclass, "$!from", rx1182_pos
  rxscan1183_scan3317:
    nqp_rxmark rx1182_bstack, rxscan1183_loop3316, rx1182_pos, 0
  rxscan1183_done3318:
    nqp_rxmark rx1182_bstack, rxcap1184_fail3320, rx1182_pos, 0
    add $I11, rx1182_pos, 4
    gt $I11, rx1182_eos, rx1182_fail3312
    substr $S10, rx1182_tgt, rx1182_pos, 4
    ne $S10, ucs4:"next", rx1182_fail3312
    add rx1182_pos, 4
    nqp_rxpeek $I19, rx1182_bstack, rxcap1184_fail3320
    inc $I19
    set $I11, rx1182_bstack[$I19]
    $P11 = rx1182_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1182_pos)
    rx1182_cstack = rx1182_cur."!cursor_capture"($P11, "sym")
    goto rxcap1184_done3319
  rxcap1184_fail3320:
    goto rx1182_fail3312
  rxcap1184_done3319:
    repr_bind_attr_int rx1182_cur, rx1182_curclass, "$!pos", rx1182_pos
    store_lex unicode:"$\x{a2}", rx1182_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_397_1347719921.536' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1182_cur."!cursor_pass"(rx1182_pos, "term:sym<next>", 'backtrack'=>1)
    .return (rx1182_cur)
  rx1182_restart3311:
    repr_get_attr_obj rx1182_cstack, rx1182_cur, rx1182_curclass, "$!cstack"
  rx1182_fail3312:
    unless rx1182_bstack, rx1182_done3310
    pop $I19, rx1182_bstack
    if_null rx1182_cstack, rx1182_cstack_done3315
    unless rx1182_cstack, rx1182_cstack_done3315
    dec $I19
    set $P11, rx1182_cstack[$I19]
  rx1182_cstack_done3315:
    pop rx1182_rep, rx1182_bstack
    pop rx1182_pos, rx1182_bstack
    pop $I19, rx1182_bstack
    lt rx1182_pos, -1, rx1182_done3310
    lt rx1182_pos, 0, rx1182_fail3312
    eq $I19, 0, rx1182_fail3312
    nqp_islist $I20, rx1182_cstack
    unless $I20, rx1182_jump3313
    elements $I18, rx1182_bstack
    le $I18, 0, rx1182_cut3314
    dec $I18
    set $I18, rx1182_bstack[$I18]
  rx1182_cut3314:
    assign rx1182_cstack, $I18
  rx1182_jump3313:
    jump $I19
  rx1182_done3310:
    rx1182_cur."!cursor_fail"()
    .return (rx1182_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_220_1347719921.536_caps" :subid("cuid_memo_375_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_220_1347719921.536_nfa" :subid("cuid_memo_376_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 110
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 120
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 116
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_397_1347719921.536") :anon :lex :outer("cuid_220_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1323

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_221_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1324
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_398_1347719921.536' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1185_tgt
    .local int rx1185_pos
    .local int rx1185_off
    .local int rx1185_eos
    .local int rx1185_rep
    .local pmc rx1185_cur
    .local pmc rx1185_curclass
    .local pmc rx1185_bstack
    .local pmc rx1185_cstack
    (rx1185_cur, rx1185_tgt, rx1185_pos, rx1185_curclass, rx1185_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1185_cur
    length rx1185_eos, rx1185_tgt
    eq $I19, 1, rx1185_restart3323
    gt rx1185_pos, rx1185_eos, rx1185_fail3324
    repr_get_attr_int $I11, self, rx1185_curclass, "$!from"
    ne $I11, -1, rxscan1186_done3330
    goto rxscan1186_scan3329
  rxscan1186_loop3328:
    inc rx1185_pos
    gt rx1185_pos, rx1185_eos, rx1185_fail3324
    repr_bind_attr_int rx1185_cur, rx1185_curclass, "$!from", rx1185_pos
  rxscan1186_scan3329:
    nqp_rxmark rx1185_bstack, rxscan1186_loop3328, rx1185_pos, 0
  rxscan1186_done3330:
    nqp_rxmark rx1185_bstack, rxcap1187_fail3332, rx1185_pos, 0
    add $I11, rx1185_pos, 4
    gt $I11, rx1185_eos, rx1185_fail3324
    substr $S10, rx1185_tgt, rx1185_pos, 4
    ne $S10, ucs4:"redo", rx1185_fail3324
    add rx1185_pos, 4
    nqp_rxpeek $I19, rx1185_bstack, rxcap1187_fail3332
    inc $I19
    set $I11, rx1185_bstack[$I19]
    $P11 = rx1185_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1185_pos)
    rx1185_cstack = rx1185_cur."!cursor_capture"($P11, "sym")
    goto rxcap1187_done3331
  rxcap1187_fail3332:
    goto rx1185_fail3324
  rxcap1187_done3331:
    repr_bind_attr_int rx1185_cur, rx1185_curclass, "$!pos", rx1185_pos
    store_lex unicode:"$\x{a2}", rx1185_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_398_1347719921.536' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1185_cur."!cursor_pass"(rx1185_pos, "term:sym<redo>", 'backtrack'=>1)
    .return (rx1185_cur)
  rx1185_restart3323:
    repr_get_attr_obj rx1185_cstack, rx1185_cur, rx1185_curclass, "$!cstack"
  rx1185_fail3324:
    unless rx1185_bstack, rx1185_done3322
    pop $I19, rx1185_bstack
    if_null rx1185_cstack, rx1185_cstack_done3327
    unless rx1185_cstack, rx1185_cstack_done3327
    dec $I19
    set $P11, rx1185_cstack[$I19]
  rx1185_cstack_done3327:
    pop rx1185_rep, rx1185_bstack
    pop rx1185_pos, rx1185_bstack
    pop $I19, rx1185_bstack
    lt rx1185_pos, -1, rx1185_done3322
    lt rx1185_pos, 0, rx1185_fail3324
    eq $I19, 0, rx1185_fail3324
    nqp_islist $I20, rx1185_cstack
    unless $I20, rx1185_jump3325
    elements $I18, rx1185_bstack
    le $I18, 0, rx1185_cut3326
    dec $I18
    set $I18, rx1185_bstack[$I18]
  rx1185_cut3326:
    assign rx1185_cstack, $I18
  rx1185_jump3325:
    jump $I19
  rx1185_done3322:
    rx1185_cur."!cursor_fail"()
    .return (rx1185_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_221_1347719921.536_caps" :subid("cuid_memo_377_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_221_1347719921.536_nfa" :subid("cuid_memo_378_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 114
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 100
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 111
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_398_1347719921.536") :anon :lex :outer("cuid_221_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1324

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "smartmatch" :subid("cuid_222_1347719921.536") :anon :lex :outer("cuid_223_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1326
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$t", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3333
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5003
  fallback3333:
    set $P101, $P5002
    set $P5004, _lex_param_1[1]
    unless_null $P5004, fallback3334
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5005
  fallback3334:
    set _lex_param_1[0], $P5004
    set _lex_param_1[1], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_243_1347719921.536") :anon :lex :outer("cuid_1_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1332
    .const 'Sub' $P5012 = 'cuid_225_1347719921.536' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_226_1347719921.536' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_228_1347719921.536' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_229_1347719921.536' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_232_1347719921.536' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_235_1347719921.536' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_237_1347719921.536' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_239_1347719921.536' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_240_1347719921.536' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_241_1347719921.536' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_242_1347719921.536' 
    capture_lex $P5012 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_225_1347719921.536' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_226_1347719921.536' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_228_1347719921.536' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_229_1347719921.536' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_232_1347719921.536' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_235_1347719921.536' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_237_1347719921.536' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_239_1347719921.536' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_240_1347719921.536' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_241_1347719921.536' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_242_1347719921.536' 
    capture_lex $P5011
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_225_1347719921.536") :anon :lex :outer("cuid_243_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1333
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_224_1347719921.536' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1188_tgt
    .local int rx1188_pos
    .local int rx1188_off
    .local int rx1188_eos
    .local int rx1188_rep
    .local pmc rx1188_cur
    .local pmc rx1188_curclass
    .local pmc rx1188_bstack
    .local pmc rx1188_cstack
    (rx1188_cur, rx1188_tgt, rx1188_pos, rx1188_curclass, rx1188_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1188_cur
    length rx1188_eos, rx1188_tgt
    eq $I19, 1, rx1188_restart3337
    gt rx1188_pos, rx1188_eos, rx1188_fail3338
    repr_get_attr_int $I11, self, rx1188_curclass, "$!from"
    ne $I11, -1, rxscan1189_done3344
    goto rxscan1189_scan3343
  rxscan1189_loop3342:
    inc rx1188_pos
    gt rx1188_pos, rx1188_eos, rx1188_fail3338
    repr_bind_attr_int rx1188_cur, rx1188_curclass, "$!from", rx1188_pos
  rxscan1189_scan3343:
    nqp_rxmark rx1188_bstack, rxscan1189_loop3342, rx1188_pos, 0
  rxscan1189_done3344:
    add $I11, rx1188_pos, 1
    gt $I11, rx1188_eos, rx1188_fail3338
    substr $S10, rx1188_tgt, rx1188_pos, 1
    ne $S10, ucs4:":", rx1188_fail3338
    add rx1188_pos, 1
    .const 'Sub' $P5001 = 'cuid_224_1347719921.536' 
    capture_lex $P5001
    repr_bind_attr_int rx1188_cur, rx1188_curclass, "$!pos", rx1188_pos
    $P11 = rx1188_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1188_curclass, "$!pos"
    lt $I11, 0, rx1188_fail3338
    repr_bind_attr_int rx1188_cur, rx1188_curclass, "$!pos", rx1188_pos
    $P11 = rx1188_cur."LANG"("MAIN", "statement")
    repr_get_attr_int $I11, $P11, rx1188_curclass, "$!pos"
    lt $I11, 0, rx1188_fail3338
    nqp_rxmark rx1188_bstack, rxsubrule1192_pass3355, -1, 0
  rxsubrule1192_pass3355:
    rx1188_cstack = rx1188_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1188_pos, $P11, rx1188_curclass, "$!pos"
    repr_bind_attr_int rx1188_cur, rx1188_curclass, "$!pos", rx1188_pos
    $P11 = rx1188_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1188_curclass, "$!pos"
    lt $I11, 0, rx1188_fail3338
    repr_get_attr_int rx1188_pos, $P11, rx1188_curclass, "$!pos"
    add $I11, rx1188_pos, 1
    gt $I11, rx1188_eos, rx1188_fail3338
    substr $S10, rx1188_tgt, rx1188_pos, 1
    ne $S10, ucs4:";", rx1188_fail3338
    add rx1188_pos, 1
    rx1188_cur."!cursor_pass"(rx1188_pos, "metachar:sym<:my>", 'backtrack'=>1)
    .return (rx1188_cur)
  rx1188_restart3337:
    repr_get_attr_obj rx1188_cstack, rx1188_cur, rx1188_curclass, "$!cstack"
  rx1188_fail3338:
    unless rx1188_bstack, rx1188_done3336
    pop $I19, rx1188_bstack
    if_null rx1188_cstack, rx1188_cstack_done3341
    unless rx1188_cstack, rx1188_cstack_done3341
    dec $I19
    set $P11, rx1188_cstack[$I19]
  rx1188_cstack_done3341:
    pop rx1188_rep, rx1188_bstack
    pop rx1188_pos, rx1188_bstack
    pop $I19, rx1188_bstack
    lt rx1188_pos, -1, rx1188_done3336
    lt rx1188_pos, 0, rx1188_fail3338
    eq $I19, 0, rx1188_fail3338
    nqp_islist $I20, rx1188_cstack
    unless $I20, rx1188_jump3339
    elements $I18, rx1188_bstack
    le $I18, 0, rx1188_cut3340
    dec $I18
    set $I18, rx1188_bstack[$I18]
  rx1188_cut3340:
    assign rx1188_cstack, $I18
  rx1188_jump3339:
    jump $I19
  rx1188_done3336:
    rx1188_cur."!cursor_fail"()
    .return (rx1188_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_225_1347719921.536_caps" :subid("cuid_memo_379_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statement"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_225_1347719921.536_nfa" :subid("cuid_memo_380_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 109
    push $P5007, $P5009
    box $P5010, 4
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 121
    push $P5015, $P5017
    box $P5018, 3
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_224_1347719921.536") :anon :lex :outer("cuid_225_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1190_tgt
    .local int rx1190_pos
    .local int rx1190_off
    .local int rx1190_eos
    .local int rx1190_rep
    .local pmc rx1190_cur
    .local pmc rx1190_curclass
    .local pmc rx1190_bstack
    .local pmc rx1190_cstack
    (rx1190_cur, rx1190_tgt, rx1190_pos, rx1190_curclass, rx1190_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1190_cur
    length rx1190_eos, rx1190_tgt
    eq $I19, 1, rx1190_restart3347
    gt rx1190_pos, rx1190_eos, rx1190_fail3348
    repr_get_attr_int $I11, self, rx1190_curclass, "$!from"
    ne $I11, -1, rxscan1191_done3354
    goto rxscan1191_scan3353
  rxscan1191_loop3352:
    inc rx1190_pos
    gt rx1190_pos, rx1190_eos, rx1190_fail3348
    repr_bind_attr_int rx1190_cur, rx1190_curclass, "$!from", rx1190_pos
  rxscan1191_scan3353:
    nqp_rxmark rx1190_bstack, rxscan1191_loop3352, rx1190_pos, 0
  rxscan1191_done3354:
    add $I11, rx1190_pos, 2
    gt $I11, rx1190_eos, rx1190_fail3348
    substr $S10, rx1190_tgt, rx1190_pos, 2
    ne $S10, ucs4:"my", rx1190_fail3348
    add rx1190_pos, 2
    rx1190_cur."!cursor_pass"(rx1190_pos, 'backtrack'=>1)
    .return (rx1190_cur)
  rx1190_restart3347:
    repr_get_attr_obj rx1190_cstack, rx1190_cur, rx1190_curclass, "$!cstack"
  rx1190_fail3348:
    unless rx1190_bstack, rx1190_done3346
    pop $I19, rx1190_bstack
    if_null rx1190_cstack, rx1190_cstack_done3351
    unless rx1190_cstack, rx1190_cstack_done3351
    dec $I19
    set $P11, rx1190_cstack[$I19]
  rx1190_cstack_done3351:
    pop rx1190_rep, rx1190_bstack
    pop rx1190_pos, rx1190_bstack
    pop $I19, rx1190_bstack
    lt rx1190_pos, -1, rx1190_done3346
    lt rx1190_pos, 0, rx1190_fail3348
    eq $I19, 0, rx1190_fail3348
    nqp_islist $I20, rx1190_cstack
    unless $I20, rx1190_jump3349
    elements $I18, rx1190_bstack
    le $I18, 0, rx1190_cut3350
    dec $I18
    set $I18, rx1190_bstack[$I18]
  rx1190_cut3350:
    assign rx1190_cstack, $I18
  rx1190_jump3349:
    jump $I19
  rx1190_done3346:
    rx1190_cur."!cursor_fail"()
    .return (rx1190_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_224_1347719921.536_caps" :subid("cuid_memo_381_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_224_1347719921.536_nfa" :subid("cuid_memo_382_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 121
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_226_1347719921.536") :anon :lex :outer("cuid_243_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1337
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1194_tgt
    .local int rx1194_pos
    .local int rx1194_off
    .local int rx1194_eos
    .local int rx1194_rep
    .local pmc rx1194_cur
    .local pmc rx1194_curclass
    .local pmc rx1194_bstack
    .local pmc rx1194_cstack
    (rx1194_cur, rx1194_tgt, rx1194_pos, rx1194_curclass, rx1194_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1194_cur
    length rx1194_eos, rx1194_tgt
    eq $I19, 1, rx1194_restart3359
    gt rx1194_pos, rx1194_eos, rx1194_fail3360
    repr_get_attr_int $I11, self, rx1194_curclass, "$!from"
    ne $I11, -1, rxscan1195_done3366
    goto rxscan1195_scan3365
  rxscan1195_loop3364:
    inc rx1194_pos
    gt rx1194_pos, rx1194_eos, rx1194_fail3360
    repr_bind_attr_int rx1194_cur, rx1194_curclass, "$!from", rx1194_pos
  rxscan1195_scan3365:
    nqp_rxmark rx1194_bstack, rxscan1195_loop3364, rx1194_pos, 0
  rxscan1195_done3366:
    ge rx1194_pos, rx1194_eos, rx1194_fail3360
    substr $S11, rx1194_tgt, rx1194_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1194_fail3360
    repr_bind_attr_int rx1194_cur, rx1194_curclass, "$!pos", rx1194_pos
    $P11 = rx1194_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1194_curclass, "$!pos"
    lt $I11, 0, rx1194_fail3360
    nqp_rxmark rx1194_bstack, rxsubrule1196_pass3367, -1, 0
  rxsubrule1196_pass3367:
    rx1194_cstack = rx1194_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1194_pos, $P11, rx1194_curclass, "$!pos"
    rx1194_cur."!cursor_pass"(rx1194_pos, "metachar:sym<{ }>", 'backtrack'=>1)
    .return (rx1194_cur)
  rx1194_restart3359:
    repr_get_attr_obj rx1194_cstack, rx1194_cur, rx1194_curclass, "$!cstack"
  rx1194_fail3360:
    unless rx1194_bstack, rx1194_done3358
    pop $I19, rx1194_bstack
    if_null rx1194_cstack, rx1194_cstack_done3363
    unless rx1194_cstack, rx1194_cstack_done3363
    dec $I19
    set $P11, rx1194_cstack[$I19]
  rx1194_cstack_done3363:
    pop rx1194_rep, rx1194_bstack
    pop rx1194_pos, rx1194_bstack
    pop $I19, rx1194_bstack
    lt rx1194_pos, -1, rx1194_done3358
    lt rx1194_pos, 0, rx1194_fail3360
    eq $I19, 0, rx1194_fail3360
    nqp_islist $I20, rx1194_cstack
    unless $I20, rx1194_jump3361
    elements $I18, rx1194_bstack
    le $I18, 0, rx1194_cut3362
    dec $I18
    set $I18, rx1194_bstack[$I18]
  rx1194_cut3362:
    assign rx1194_cstack, $I18
  rx1194_jump3361:
    jump $I19
  rx1194_done3358:
    rx1194_cur."!cursor_fail"()
    .return (rx1194_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_226_1347719921.536_caps" :subid("cuid_memo_383_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["codeblock"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_226_1347719921.536_nfa" :subid("cuid_memo_384_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "{"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_228_1347719921.536") :anon :lex :outer("cuid_243_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1341
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_227_1347719921.536' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1197_tgt
    .local int rx1197_pos
    .local int rx1197_off
    .local int rx1197_eos
    .local int rx1197_rep
    .local pmc rx1197_cur
    .local pmc rx1197_curclass
    .local pmc rx1197_bstack
    .local pmc rx1197_cstack
    (rx1197_cur, rx1197_tgt, rx1197_pos, rx1197_curclass, rx1197_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1197_cur
    length rx1197_eos, rx1197_tgt
    eq $I19, 1, rx1197_restart3370
    gt rx1197_pos, rx1197_eos, rx1197_fail3371
    repr_get_attr_int $I11, self, rx1197_curclass, "$!from"
    ne $I11, -1, rxscan1198_done3377
    goto rxscan1198_scan3376
  rxscan1198_loop3375:
    inc rx1197_pos
    gt rx1197_pos, rx1197_eos, rx1197_fail3371
    repr_bind_attr_int rx1197_cur, rx1197_curclass, "$!from", rx1197_pos
  rxscan1198_scan3376:
    nqp_rxmark rx1197_bstack, rxscan1198_loop3375, rx1197_pos, 0
  rxscan1198_done3377:
    .const 'Sub' $P5001 = 'cuid_227_1347719921.536' 
    capture_lex $P5001
    repr_bind_attr_int rx1197_cur, rx1197_curclass, "$!pos", rx1197_pos
    $P11 = rx1197_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1197_curclass, "$!pos"
    lt $I11, 0, rx1197_fail3371
    repr_bind_attr_int rx1197_cur, rx1197_curclass, "$!pos", rx1197_pos
    $P11 = rx1197_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1197_curclass, "$!pos"
    lt $I11, 0, rx1197_fail3371
    nqp_rxmark rx1197_bstack, rxsubrule1202_pass3391, -1, 0
  rxsubrule1202_pass3391:
    rx1197_cstack = rx1197_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1197_pos, $P11, rx1197_curclass, "$!pos"
    rx1197_cur."!cursor_pass"(rx1197_pos, "metachar:sym<nqpvar>", 'backtrack'=>1)
    .return (rx1197_cur)
  rx1197_restart3370:
    repr_get_attr_obj rx1197_cstack, rx1197_cur, rx1197_curclass, "$!cstack"
  rx1197_fail3371:
    unless rx1197_bstack, rx1197_done3369
    pop $I19, rx1197_bstack
    if_null rx1197_cstack, rx1197_cstack_done3374
    unless rx1197_cstack, rx1197_cstack_done3374
    dec $I19
    set $P11, rx1197_cstack[$I19]
  rx1197_cstack_done3374:
    pop rx1197_rep, rx1197_bstack
    pop rx1197_pos, rx1197_bstack
    pop $I19, rx1197_bstack
    lt rx1197_pos, -1, rx1197_done3369
    lt rx1197_pos, 0, rx1197_fail3371
    eq $I19, 0, rx1197_fail3371
    nqp_islist $I20, rx1197_cstack
    unless $I20, rx1197_jump3372
    elements $I18, rx1197_bstack
    le $I18, 0, rx1197_cut3373
    dec $I18
    set $I18, rx1197_bstack[$I18]
  rx1197_cut3373:
    assign rx1197_cstack, $I18
  rx1197_jump3372:
    jump $I19
  rx1197_done3369:
    rx1197_cur."!cursor_fail"()
    .return (rx1197_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_228_1347719921.536_caps" :subid("cuid_memo_385_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["var"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_228_1347719921.536_nfa" :subid("cuid_memo_386_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$@&"
    push $P5003, $P5005
    box $P5006, 3
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 5
    push $P5011, $P5012
    box $P5013, 8192
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    box $P5015, 4
    push $P5011, $P5015
    box $P5016, 8192
    push $P5011, $P5016
    box $P5017, 2
    push $P5011, $P5017
    push $P5001, $P5011
    new $P5018, 'ResizablePMCArray'
    box $P5019, 4
    push $P5018, $P5019
    box $P5020, 8192
    push $P5018, $P5020
    box $P5021, 2
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_227_1347719921.536") :anon :lex :outer("cuid_228_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1199_tgt
    .local int rx1199_pos
    .local int rx1199_off
    .local int rx1199_eos
    .local int rx1199_rep
    .local pmc rx1199_cur
    .local pmc rx1199_curclass
    .local pmc rx1199_bstack
    .local pmc rx1199_cstack
    (rx1199_cur, rx1199_tgt, rx1199_pos, rx1199_curclass, rx1199_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1199_cur
    length rx1199_eos, rx1199_tgt
    eq $I19, 1, rx1199_restart3380
    gt rx1199_pos, rx1199_eos, rx1199_fail3381
    repr_get_attr_int $I11, self, rx1199_curclass, "$!from"
    ne $I11, -1, rxscan1200_done3387
    goto rxscan1200_scan3386
  rxscan1200_loop3385:
    inc rx1199_pos
    gt rx1199_pos, rx1199_eos, rx1199_fail3381
    repr_bind_attr_int rx1199_cur, rx1199_curclass, "$!from", rx1199_pos
  rxscan1200_scan3386:
    nqp_rxmark rx1199_bstack, rxscan1200_loop3385, rx1199_pos, 0
  rxscan1200_done3387:
    ge rx1199_pos, rx1199_eos, rx1199_fail3381
    substr $S11, rx1199_tgt, rx1199_pos, 1
    index $I11, ucs4:"$@&", $S11
    lt $I11, 0, rx1199_fail3381
    inc rx1199_pos
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1201_03389
    nqp_push_label $P11, alt1201_13390
    nqp_rxmark rx1199_bstack, alt1201_end3388, -1, 0
    rx1199_cur."!alt"(rx1199_pos, "alt_nfa__39_1347719924.656", $P11)
    goto rx1199_fail3381
  alt1201_03389:
    ge rx1199_pos, rx1199_eos, rx1199_fail3381
    is_cclass $I11, .CCLASS_WORD, rx1199_tgt, rx1199_pos
    if $I11, rx1199_fail3381
    add rx1199_pos, 1
    ge rx1199_pos, rx1199_eos, rx1199_fail3381
    is_cclass $I11, .CCLASS_WORD, rx1199_tgt, rx1199_pos
    unless $I11, rx1199_fail3381
    add rx1199_pos, 1
    goto alt1201_end3388
  alt1201_13390:
    ge rx1199_pos, rx1199_eos, rx1199_fail3381
    is_cclass $I11, .CCLASS_WORD, rx1199_tgt, rx1199_pos
    unless $I11, rx1199_fail3381
    add rx1199_pos, 1
    goto alt1201_end3388
  alt1201_end3388:
    nqp_rxcommit rx1199_bstack, alt1201_end3388
    rx1199_cur."!cursor_pass"(rx1199_pos, 'backtrack'=>1)
    .return (rx1199_cur)
  rx1199_restart3380:
    repr_get_attr_obj rx1199_cstack, rx1199_cur, rx1199_curclass, "$!cstack"
  rx1199_fail3381:
    unless rx1199_bstack, rx1199_done3379
    pop $I19, rx1199_bstack
    if_null rx1199_cstack, rx1199_cstack_done3384
    unless rx1199_cstack, rx1199_cstack_done3384
    dec $I19
    set $P11, rx1199_cstack[$I19]
  rx1199_cstack_done3384:
    pop rx1199_rep, rx1199_bstack
    pop rx1199_pos, rx1199_bstack
    pop $I19, rx1199_bstack
    lt rx1199_pos, -1, rx1199_done3379
    lt rx1199_pos, 0, rx1199_fail3381
    eq $I19, 0, rx1199_fail3381
    nqp_islist $I20, rx1199_cstack
    unless $I20, rx1199_jump3382
    elements $I18, rx1199_bstack
    le $I18, 0, rx1199_cut3383
    dec $I18
    set $I18, rx1199_bstack[$I18]
  rx1199_cut3383:
    assign rx1199_cstack, $I18
  rx1199_jump3382:
    jump $I19
  rx1199_done3379:
    rx1199_cur."!cursor_fail"()
    .return (rx1199_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_227_1347719921.536_caps" :subid("cuid_memo_387_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_227_1347719921.536_nfa" :subid("cuid_memo_388_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$@&"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 5
    push $P5007, $P5008
    box $P5009, 8192
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 4
    push $P5007, $P5011
    box $P5012, 8192
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 4
    push $P5014, $P5015
    box $P5016, 8192
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_227_1347719921.536_alt_nfa__39_1347719924.656" :subid("cuid_memo_389_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 5
    push $P5004, $P5005
    box $P5006, 8192
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 4
    push $P5008, $P5009
    box $P5010, 8192
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 4
    push $P5014, $P5015
    box $P5016, 8192
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5012, $P5014
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_229_1347719921.536") :anon :lex :outer("cuid_243_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1345
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1203_tgt
    .local int rx1203_pos
    .local int rx1203_off
    .local int rx1203_eos
    .local int rx1203_rep
    .local pmc rx1203_cur
    .local pmc rx1203_curclass
    .local pmc rx1203_bstack
    .local pmc rx1203_cstack
    (rx1203_cur, rx1203_tgt, rx1203_pos, rx1203_curclass, rx1203_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1203_cur
    length rx1203_eos, rx1203_tgt
    eq $I19, 1, rx1203_restart3394
    gt rx1203_pos, rx1203_eos, rx1203_fail3395
    repr_get_attr_int $I11, self, rx1203_curclass, "$!from"
    ne $I11, -1, rxscan1204_done3401
    goto rxscan1204_scan3400
  rxscan1204_loop3399:
    inc rx1203_pos
    gt rx1203_pos, rx1203_eos, rx1203_fail3395
    repr_bind_attr_int rx1203_cur, rx1203_curclass, "$!from", rx1203_pos
  rxscan1204_scan3400:
    nqp_rxmark rx1203_bstack, rxscan1204_loop3399, rx1203_pos, 0
  rxscan1204_done3401:
    ge rx1203_pos, rx1203_eos, rx1203_fail3395
    substr $S11, rx1203_tgt, rx1203_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1203_fail3395
    repr_bind_attr_int rx1203_cur, rx1203_curclass, "$!pos", rx1203_pos
    $P11 = rx1203_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1203_curclass, "$!pos"
    lt $I11, 0, rx1203_fail3395
    nqp_rxmark rx1203_bstack, rxsubrule1205_pass3402, -1, 0
  rxsubrule1205_pass3402:
    rx1203_cstack = rx1203_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1203_pos, $P11, rx1203_curclass, "$!pos"
    rx1203_cur."!cursor_pass"(rx1203_pos, "assertion:sym<{ }>", 'backtrack'=>1)
    .return (rx1203_cur)
  rx1203_restart3394:
    repr_get_attr_obj rx1203_cstack, rx1203_cur, rx1203_curclass, "$!cstack"
  rx1203_fail3395:
    unless rx1203_bstack, rx1203_done3393
    pop $I19, rx1203_bstack
    if_null rx1203_cstack, rx1203_cstack_done3398
    unless rx1203_cstack, rx1203_cstack_done3398
    dec $I19
    set $P11, rx1203_cstack[$I19]
  rx1203_cstack_done3398:
    pop rx1203_rep, rx1203_bstack
    pop rx1203_pos, rx1203_bstack
    pop $I19, rx1203_bstack
    lt rx1203_pos, -1, rx1203_done3393
    lt rx1203_pos, 0, rx1203_fail3395
    eq $I19, 0, rx1203_fail3395
    nqp_islist $I20, rx1203_cstack
    unless $I20, rx1203_jump3396
    elements $I18, rx1203_bstack
    le $I18, 0, rx1203_cut3397
    dec $I18
    set $I18, rx1203_bstack[$I18]
  rx1203_cut3397:
    assign rx1203_cstack, $I18
  rx1203_jump3396:
    jump $I19
  rx1203_done3393:
    rx1203_cur."!cursor_fail"()
    .return (rx1203_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_229_1347719921.536_caps" :subid("cuid_memo_390_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["codeblock"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_229_1347719921.536_nfa" :subid("cuid_memo_391_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "{"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_232_1347719921.536") :anon :lex :outer("cuid_243_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1349
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_230_1347719921.536' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_231_1347719921.536' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1206_tgt
    .local int rx1206_pos
    .local int rx1206_off
    .local int rx1206_eos
    .local int rx1206_rep
    .local pmc rx1206_cur
    .local pmc rx1206_curclass
    .local pmc rx1206_bstack
    .local pmc rx1206_cstack
    (rx1206_cur, rx1206_tgt, rx1206_pos, rx1206_curclass, rx1206_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1206_cur
    length rx1206_eos, rx1206_tgt
    eq $I19, 1, rx1206_restart3405
    gt rx1206_pos, rx1206_eos, rx1206_fail3406
    repr_get_attr_int $I11, self, rx1206_curclass, "$!from"
    ne $I11, -1, rxscan1207_done3412
    goto rxscan1207_scan3411
  rxscan1207_loop3410:
    inc rx1206_pos
    gt rx1206_pos, rx1206_eos, rx1206_fail3406
    repr_bind_attr_int rx1206_cur, rx1206_curclass, "$!from", rx1206_pos
  rxscan1207_scan3411:
    nqp_rxmark rx1206_bstack, rxscan1207_loop3410, rx1206_pos, 0
  rxscan1207_done3412:
    add $I11, rx1206_pos, 1
    gt $I11, rx1206_eos, rx1206_fail3406
    substr $S10, rx1206_tgt, rx1206_pos, 1
    ne $S10, ucs4:"?", rx1206_fail3406
    add rx1206_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1208_03414
    nqp_push_label $P11, alt1208_13425
    nqp_rxmark rx1206_bstack, alt1208_end3413, -1, 0
    rx1206_cur."!alt"(rx1206_pos, "alt_nfa__40_1347719924.678", $P11)
    goto rx1206_fail3406
  alt1208_03414:
    .const 'Sub' $P5001 = 'cuid_230_1347719921.536' 
    capture_lex $P5001
    repr_bind_attr_int rx1206_cur, rx1206_curclass, "$!pos", rx1206_pos
    $P11 = rx1206_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1206_curclass, "$!pos"
    lt $I11, 0, rx1206_fail3406
    goto alt1208_end3413
  alt1208_13425:
    .const 'Sub' $P5002 = 'cuid_231_1347719921.536' 
    capture_lex $P5002
    repr_bind_attr_int rx1206_cur, rx1206_curclass, "$!pos", rx1206_pos
    $P11 = rx1206_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1206_curclass, "$!pos"
    ge $I11, 0, rx1206_fail3406
    repr_bind_attr_int rx1206_cur, rx1206_curclass, "$!pos", rx1206_pos
    $P11 = rx1206_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1206_curclass, "$!pos"
    lt $I11, 0, rx1206_fail3406
    nqp_rxmark rx1206_bstack, rxsubrule1213_pass3436, -1, 0
  rxsubrule1213_pass3436:
    rx1206_cstack = rx1206_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1206_pos, $P11, rx1206_curclass, "$!pos"
    goto alt1208_end3413
  alt1208_end3413:
    nqp_rxcommit rx1206_bstack, alt1208_end3413
    rx1206_cur."!cursor_pass"(rx1206_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx1206_cur)
  rx1206_restart3405:
    repr_get_attr_obj rx1206_cstack, rx1206_cur, rx1206_curclass, "$!cstack"
  rx1206_fail3406:
    unless rx1206_bstack, rx1206_done3404
    pop $I19, rx1206_bstack
    if_null rx1206_cstack, rx1206_cstack_done3409
    unless rx1206_cstack, rx1206_cstack_done3409
    dec $I19
    set $P11, rx1206_cstack[$I19]
  rx1206_cstack_done3409:
    pop rx1206_rep, rx1206_bstack
    pop rx1206_pos, rx1206_bstack
    pop $I19, rx1206_bstack
    lt rx1206_pos, -1, rx1206_done3404
    lt rx1206_pos, 0, rx1206_fail3406
    eq $I19, 0, rx1206_fail3406
    nqp_islist $I20, rx1206_cstack
    unless $I20, rx1206_jump3407
    elements $I18, rx1206_bstack
    le $I18, 0, rx1206_cut3408
    dec $I18
    set $I18, rx1206_bstack[$I18]
  rx1206_cut3408:
    assign rx1206_cstack, $I18
  rx1206_jump3407:
    jump $I19
  rx1206_done3404:
    rx1206_cur."!cursor_fail"()
    .return (rx1206_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_232_1347719921.536_caps" :subid("cuid_memo_392_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["assertion"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_232_1347719921.536_nfa" :subid("cuid_memo_393_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 63
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 62
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 0
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_232_1347719921.536_alt_nfa__40_1347719924.678" :subid("cuid_memo_394_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 62
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    box $P5018, 0
    push $P5014, $P5018
    box $P5019, 0
    push $P5014, $P5019
    box $P5020, 0
    push $P5014, $P5020
    push $P5012, $P5014
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_230_1347719921.536") :anon :lex :outer("cuid_232_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1209_tgt
    .local int rx1209_pos
    .local int rx1209_off
    .local int rx1209_eos
    .local int rx1209_rep
    .local pmc rx1209_cur
    .local pmc rx1209_curclass
    .local pmc rx1209_bstack
    .local pmc rx1209_cstack
    (rx1209_cur, rx1209_tgt, rx1209_pos, rx1209_curclass, rx1209_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1209_cur
    length rx1209_eos, rx1209_tgt
    eq $I19, 1, rx1209_restart3417
    gt rx1209_pos, rx1209_eos, rx1209_fail3418
    repr_get_attr_int $I11, self, rx1209_curclass, "$!from"
    ne $I11, -1, rxscan1210_done3424
    goto rxscan1210_scan3423
  rxscan1210_loop3422:
    inc rx1209_pos
    gt rx1209_pos, rx1209_eos, rx1209_fail3418
    repr_bind_attr_int rx1209_cur, rx1209_curclass, "$!from", rx1209_pos
  rxscan1210_scan3423:
    nqp_rxmark rx1209_bstack, rxscan1210_loop3422, rx1209_pos, 0
  rxscan1210_done3424:
    add $I11, rx1209_pos, 1
    gt $I11, rx1209_eos, rx1209_fail3418
    substr $S10, rx1209_tgt, rx1209_pos, 1
    ne $S10, ucs4:">", rx1209_fail3418
    add rx1209_pos, 1
    rx1209_cur."!cursor_pass"(rx1209_pos, 'backtrack'=>1)
    .return (rx1209_cur)
  rx1209_restart3417:
    repr_get_attr_obj rx1209_cstack, rx1209_cur, rx1209_curclass, "$!cstack"
  rx1209_fail3418:
    unless rx1209_bstack, rx1209_done3416
    pop $I19, rx1209_bstack
    if_null rx1209_cstack, rx1209_cstack_done3421
    unless rx1209_cstack, rx1209_cstack_done3421
    dec $I19
    set $P11, rx1209_cstack[$I19]
  rx1209_cstack_done3421:
    pop rx1209_rep, rx1209_bstack
    pop rx1209_pos, rx1209_bstack
    pop $I19, rx1209_bstack
    lt rx1209_pos, -1, rx1209_done3416
    lt rx1209_pos, 0, rx1209_fail3418
    eq $I19, 0, rx1209_fail3418
    nqp_islist $I20, rx1209_cstack
    unless $I20, rx1209_jump3419
    elements $I18, rx1209_bstack
    le $I18, 0, rx1209_cut3420
    dec $I18
    set $I18, rx1209_bstack[$I18]
  rx1209_cut3420:
    assign rx1209_cstack, $I18
  rx1209_jump3419:
    jump $I19
  rx1209_done3416:
    rx1209_cur."!cursor_fail"()
    .return (rx1209_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_230_1347719921.536_caps" :subid("cuid_memo_395_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_230_1347719921.536_nfa" :subid("cuid_memo_396_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_231_1347719921.536") :anon :lex :outer("cuid_232_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1211_tgt
    .local int rx1211_pos
    .local int rx1211_off
    .local int rx1211_eos
    .local int rx1211_rep
    .local pmc rx1211_cur
    .local pmc rx1211_curclass
    .local pmc rx1211_bstack
    .local pmc rx1211_cstack
    (rx1211_cur, rx1211_tgt, rx1211_pos, rx1211_curclass, rx1211_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1211_cur
    length rx1211_eos, rx1211_tgt
    eq $I19, 1, rx1211_restart3428
    gt rx1211_pos, rx1211_eos, rx1211_fail3429
    repr_get_attr_int $I11, self, rx1211_curclass, "$!from"
    ne $I11, -1, rxscan1212_done3435
    goto rxscan1212_scan3434
  rxscan1212_loop3433:
    inc rx1211_pos
    gt rx1211_pos, rx1211_eos, rx1211_fail3429
    repr_bind_attr_int rx1211_cur, rx1211_curclass, "$!from", rx1211_pos
  rxscan1212_scan3434:
    nqp_rxmark rx1211_bstack, rxscan1212_loop3433, rx1211_pos, 0
  rxscan1212_done3435:
    add $I11, rx1211_pos, 1
    gt $I11, rx1211_eos, rx1211_fail3429
    substr $S10, rx1211_tgt, rx1211_pos, 1
    ne $S10, ucs4:"{", rx1211_fail3429
    add rx1211_pos, 1
    rx1211_cur."!cursor_pass"(rx1211_pos, 'backtrack'=>1)
    .return (rx1211_cur)
  rx1211_restart3428:
    repr_get_attr_obj rx1211_cstack, rx1211_cur, rx1211_curclass, "$!cstack"
  rx1211_fail3429:
    unless rx1211_bstack, rx1211_done3427
    pop $I19, rx1211_bstack
    if_null rx1211_cstack, rx1211_cstack_done3432
    unless rx1211_cstack, rx1211_cstack_done3432
    dec $I19
    set $P11, rx1211_cstack[$I19]
  rx1211_cstack_done3432:
    pop rx1211_rep, rx1211_bstack
    pop rx1211_pos, rx1211_bstack
    pop $I19, rx1211_bstack
    lt rx1211_pos, -1, rx1211_done3427
    lt rx1211_pos, 0, rx1211_fail3429
    eq $I19, 0, rx1211_fail3429
    nqp_islist $I20, rx1211_cstack
    unless $I20, rx1211_jump3430
    elements $I18, rx1211_bstack
    le $I18, 0, rx1211_cut3431
    dec $I18
    set $I18, rx1211_bstack[$I18]
  rx1211_cut3431:
    assign rx1211_cstack, $I18
  rx1211_jump3430:
    jump $I19
  rx1211_done3427:
    rx1211_cur."!cursor_fail"()
    .return (rx1211_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_231_1347719921.536_caps" :subid("cuid_memo_397_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_231_1347719921.536_nfa" :subid("cuid_memo_398_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_235_1347719921.536") :anon :lex :outer("cuid_243_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1350
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_233_1347719921.536' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_234_1347719921.536' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1214_tgt
    .local int rx1214_pos
    .local int rx1214_off
    .local int rx1214_eos
    .local int rx1214_rep
    .local pmc rx1214_cur
    .local pmc rx1214_curclass
    .local pmc rx1214_bstack
    .local pmc rx1214_cstack
    (rx1214_cur, rx1214_tgt, rx1214_pos, rx1214_curclass, rx1214_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1214_cur
    length rx1214_eos, rx1214_tgt
    eq $I19, 1, rx1214_restart3439
    gt rx1214_pos, rx1214_eos, rx1214_fail3440
    repr_get_attr_int $I11, self, rx1214_curclass, "$!from"
    ne $I11, -1, rxscan1215_done3446
    goto rxscan1215_scan3445
  rxscan1215_loop3444:
    inc rx1214_pos
    gt rx1214_pos, rx1214_eos, rx1214_fail3440
    repr_bind_attr_int rx1214_cur, rx1214_curclass, "$!from", rx1214_pos
  rxscan1215_scan3445:
    nqp_rxmark rx1214_bstack, rxscan1215_loop3444, rx1214_pos, 0
  rxscan1215_done3446:
    add $I11, rx1214_pos, 1
    gt $I11, rx1214_eos, rx1214_fail3440
    substr $S10, rx1214_tgt, rx1214_pos, 1
    ne $S10, ucs4:"!", rx1214_fail3440
    add rx1214_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1216_03448
    nqp_push_label $P11, alt1216_13459
    nqp_rxmark rx1214_bstack, alt1216_end3447, -1, 0
    rx1214_cur."!alt"(rx1214_pos, "alt_nfa__41_1347719924.691", $P11)
    goto rx1214_fail3440
  alt1216_03448:
    .const 'Sub' $P5001 = 'cuid_233_1347719921.536' 
    capture_lex $P5001
    repr_bind_attr_int rx1214_cur, rx1214_curclass, "$!pos", rx1214_pos
    $P11 = rx1214_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1214_curclass, "$!pos"
    lt $I11, 0, rx1214_fail3440
    goto alt1216_end3447
  alt1216_13459:
    .const 'Sub' $P5002 = 'cuid_234_1347719921.536' 
    capture_lex $P5002
    repr_bind_attr_int rx1214_cur, rx1214_curclass, "$!pos", rx1214_pos
    $P11 = rx1214_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1214_curclass, "$!pos"
    ge $I11, 0, rx1214_fail3440
    repr_bind_attr_int rx1214_cur, rx1214_curclass, "$!pos", rx1214_pos
    $P11 = rx1214_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1214_curclass, "$!pos"
    lt $I11, 0, rx1214_fail3440
    nqp_rxmark rx1214_bstack, rxsubrule1221_pass3470, -1, 0
  rxsubrule1221_pass3470:
    rx1214_cstack = rx1214_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1214_pos, $P11, rx1214_curclass, "$!pos"
    goto alt1216_end3447
  alt1216_end3447:
    nqp_rxcommit rx1214_bstack, alt1216_end3447
    rx1214_cur."!cursor_pass"(rx1214_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx1214_cur)
  rx1214_restart3439:
    repr_get_attr_obj rx1214_cstack, rx1214_cur, rx1214_curclass, "$!cstack"
  rx1214_fail3440:
    unless rx1214_bstack, rx1214_done3438
    pop $I19, rx1214_bstack
    if_null rx1214_cstack, rx1214_cstack_done3443
    unless rx1214_cstack, rx1214_cstack_done3443
    dec $I19
    set $P11, rx1214_cstack[$I19]
  rx1214_cstack_done3443:
    pop rx1214_rep, rx1214_bstack
    pop rx1214_pos, rx1214_bstack
    pop $I19, rx1214_bstack
    lt rx1214_pos, -1, rx1214_done3438
    lt rx1214_pos, 0, rx1214_fail3440
    eq $I19, 0, rx1214_fail3440
    nqp_islist $I20, rx1214_cstack
    unless $I20, rx1214_jump3441
    elements $I18, rx1214_bstack
    le $I18, 0, rx1214_cut3442
    dec $I18
    set $I18, rx1214_bstack[$I18]
  rx1214_cut3442:
    assign rx1214_cstack, $I18
  rx1214_jump3441:
    jump $I19
  rx1214_done3438:
    rx1214_cur."!cursor_fail"()
    .return (rx1214_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_235_1347719921.536_caps" :subid("cuid_memo_399_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["assertion"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_235_1347719921.536_nfa" :subid("cuid_memo_400_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 33
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 62
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 0
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_235_1347719921.536_alt_nfa__41_1347719924.691" :subid("cuid_memo_401_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 62
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    box $P5018, 0
    push $P5014, $P5018
    box $P5019, 0
    push $P5014, $P5019
    box $P5020, 0
    push $P5014, $P5020
    push $P5012, $P5014
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_233_1347719921.536") :anon :lex :outer("cuid_235_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1217_tgt
    .local int rx1217_pos
    .local int rx1217_off
    .local int rx1217_eos
    .local int rx1217_rep
    .local pmc rx1217_cur
    .local pmc rx1217_curclass
    .local pmc rx1217_bstack
    .local pmc rx1217_cstack
    (rx1217_cur, rx1217_tgt, rx1217_pos, rx1217_curclass, rx1217_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1217_cur
    length rx1217_eos, rx1217_tgt
    eq $I19, 1, rx1217_restart3451
    gt rx1217_pos, rx1217_eos, rx1217_fail3452
    repr_get_attr_int $I11, self, rx1217_curclass, "$!from"
    ne $I11, -1, rxscan1218_done3458
    goto rxscan1218_scan3457
  rxscan1218_loop3456:
    inc rx1217_pos
    gt rx1217_pos, rx1217_eos, rx1217_fail3452
    repr_bind_attr_int rx1217_cur, rx1217_curclass, "$!from", rx1217_pos
  rxscan1218_scan3457:
    nqp_rxmark rx1217_bstack, rxscan1218_loop3456, rx1217_pos, 0
  rxscan1218_done3458:
    add $I11, rx1217_pos, 1
    gt $I11, rx1217_eos, rx1217_fail3452
    substr $S10, rx1217_tgt, rx1217_pos, 1
    ne $S10, ucs4:">", rx1217_fail3452
    add rx1217_pos, 1
    rx1217_cur."!cursor_pass"(rx1217_pos, 'backtrack'=>1)
    .return (rx1217_cur)
  rx1217_restart3451:
    repr_get_attr_obj rx1217_cstack, rx1217_cur, rx1217_curclass, "$!cstack"
  rx1217_fail3452:
    unless rx1217_bstack, rx1217_done3450
    pop $I19, rx1217_bstack
    if_null rx1217_cstack, rx1217_cstack_done3455
    unless rx1217_cstack, rx1217_cstack_done3455
    dec $I19
    set $P11, rx1217_cstack[$I19]
  rx1217_cstack_done3455:
    pop rx1217_rep, rx1217_bstack
    pop rx1217_pos, rx1217_bstack
    pop $I19, rx1217_bstack
    lt rx1217_pos, -1, rx1217_done3450
    lt rx1217_pos, 0, rx1217_fail3452
    eq $I19, 0, rx1217_fail3452
    nqp_islist $I20, rx1217_cstack
    unless $I20, rx1217_jump3453
    elements $I18, rx1217_bstack
    le $I18, 0, rx1217_cut3454
    dec $I18
    set $I18, rx1217_bstack[$I18]
  rx1217_cut3454:
    assign rx1217_cstack, $I18
  rx1217_jump3453:
    jump $I19
  rx1217_done3450:
    rx1217_cur."!cursor_fail"()
    .return (rx1217_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_233_1347719921.536_caps" :subid("cuid_memo_402_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_233_1347719921.536_nfa" :subid("cuid_memo_403_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_234_1347719921.536") :anon :lex :outer("cuid_235_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1219_tgt
    .local int rx1219_pos
    .local int rx1219_off
    .local int rx1219_eos
    .local int rx1219_rep
    .local pmc rx1219_cur
    .local pmc rx1219_curclass
    .local pmc rx1219_bstack
    .local pmc rx1219_cstack
    (rx1219_cur, rx1219_tgt, rx1219_pos, rx1219_curclass, rx1219_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1219_cur
    length rx1219_eos, rx1219_tgt
    eq $I19, 1, rx1219_restart3462
    gt rx1219_pos, rx1219_eos, rx1219_fail3463
    repr_get_attr_int $I11, self, rx1219_curclass, "$!from"
    ne $I11, -1, rxscan1220_done3469
    goto rxscan1220_scan3468
  rxscan1220_loop3467:
    inc rx1219_pos
    gt rx1219_pos, rx1219_eos, rx1219_fail3463
    repr_bind_attr_int rx1219_cur, rx1219_curclass, "$!from", rx1219_pos
  rxscan1220_scan3468:
    nqp_rxmark rx1219_bstack, rxscan1220_loop3467, rx1219_pos, 0
  rxscan1220_done3469:
    add $I11, rx1219_pos, 1
    gt $I11, rx1219_eos, rx1219_fail3463
    substr $S10, rx1219_tgt, rx1219_pos, 1
    ne $S10, ucs4:"{", rx1219_fail3463
    add rx1219_pos, 1
    rx1219_cur."!cursor_pass"(rx1219_pos, 'backtrack'=>1)
    .return (rx1219_cur)
  rx1219_restart3462:
    repr_get_attr_obj rx1219_cstack, rx1219_cur, rx1219_curclass, "$!cstack"
  rx1219_fail3463:
    unless rx1219_bstack, rx1219_done3461
    pop $I19, rx1219_bstack
    if_null rx1219_cstack, rx1219_cstack_done3466
    unless rx1219_cstack, rx1219_cstack_done3466
    dec $I19
    set $P11, rx1219_cstack[$I19]
  rx1219_cstack_done3466:
    pop rx1219_rep, rx1219_bstack
    pop rx1219_pos, rx1219_bstack
    pop $I19, rx1219_bstack
    lt rx1219_pos, -1, rx1219_done3461
    lt rx1219_pos, 0, rx1219_fail3463
    eq $I19, 0, rx1219_fail3463
    nqp_islist $I20, rx1219_cstack
    unless $I20, rx1219_jump3464
    elements $I18, rx1219_bstack
    le $I18, 0, rx1219_cut3465
    dec $I18
    set $I18, rx1219_bstack[$I18]
  rx1219_cut3465:
    assign rx1219_cstack, $I18
  rx1219_jump3464:
    jump $I19
  rx1219_done3461:
    rx1219_cur."!cursor_fail"()
    .return (rx1219_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_234_1347719921.536_caps" :subid("cuid_memo_404_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_234_1347719921.536_nfa" :subid("cuid_memo_405_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_237_1347719921.536") :anon :lex :outer("cuid_243_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1352
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_236_1347719921.536' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1222_tgt
    .local int rx1222_pos
    .local int rx1222_off
    .local int rx1222_eos
    .local int rx1222_rep
    .local pmc rx1222_cur
    .local pmc rx1222_curclass
    .local pmc rx1222_bstack
    .local pmc rx1222_cstack
    (rx1222_cur, rx1222_tgt, rx1222_pos, rx1222_curclass, rx1222_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1222_cur
    length rx1222_eos, rx1222_tgt
    eq $I19, 1, rx1222_restart3473
    gt rx1222_pos, rx1222_eos, rx1222_fail3474
    repr_get_attr_int $I11, self, rx1222_curclass, "$!from"
    ne $I11, -1, rxscan1223_done3480
    goto rxscan1223_scan3479
  rxscan1223_loop3478:
    inc rx1222_pos
    gt rx1222_pos, rx1222_eos, rx1222_fail3474
    repr_bind_attr_int rx1222_cur, rx1222_curclass, "$!from", rx1222_pos
  rxscan1223_scan3479:
    nqp_rxmark rx1222_bstack, rxscan1223_loop3478, rx1222_pos, 0
  rxscan1223_done3480:
    nqp_rxmark rx1222_bstack, rxcap1224_fail3482, rx1222_pos, 0
    ge rx1222_pos, rx1222_eos, rx1222_fail3474
    substr $S11, rx1222_tgt, rx1222_pos, 1
    index $I11, ucs4:"?!", $S11
    lt $I11, 0, rx1222_fail3474
    inc rx1222_pos
    .const 'Sub' $P5001 = 'cuid_236_1347719921.536' 
    capture_lex $P5001
    repr_bind_attr_int rx1222_cur, rx1222_curclass, "$!pos", rx1222_pos
    $P11 = rx1222_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1222_curclass, "$!pos"
    lt $I11, 0, rx1222_fail3474
    nqp_rxpeek $I19, rx1222_bstack, rxcap1224_fail3482
    inc $I19
    set $I11, rx1222_bstack[$I19]
    $P11 = rx1222_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1222_pos)
    rx1222_cstack = rx1222_cur."!cursor_capture"($P11, "zw")
    goto rxcap1224_done3481
  rxcap1224_fail3482:
    goto rx1222_fail3474
  rxcap1224_done3481:
    repr_bind_attr_int rx1222_cur, rx1222_curclass, "$!pos", rx1222_pos
    $P11 = rx1222_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1222_curclass, "$!pos"
    lt $I11, 0, rx1222_fail3474
    nqp_rxmark rx1222_bstack, rxsubrule1227_pass3493, -1, 0
  rxsubrule1227_pass3493:
    rx1222_cstack = rx1222_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1222_pos, $P11, rx1222_curclass, "$!pos"
    rx1222_cur."!cursor_pass"(rx1222_pos, "assertion:sym<?{ }>", 'backtrack'=>1)
    .return (rx1222_cur)
  rx1222_restart3473:
    repr_get_attr_obj rx1222_cstack, rx1222_cur, rx1222_curclass, "$!cstack"
  rx1222_fail3474:
    unless rx1222_bstack, rx1222_done3472
    pop $I19, rx1222_bstack
    if_null rx1222_cstack, rx1222_cstack_done3477
    unless rx1222_cstack, rx1222_cstack_done3477
    dec $I19
    set $P11, rx1222_cstack[$I19]
  rx1222_cstack_done3477:
    pop rx1222_rep, rx1222_bstack
    pop rx1222_pos, rx1222_bstack
    pop $I19, rx1222_bstack
    lt rx1222_pos, -1, rx1222_done3472
    lt rx1222_pos, 0, rx1222_fail3474
    eq $I19, 0, rx1222_fail3474
    nqp_islist $I20, rx1222_cstack
    unless $I20, rx1222_jump3475
    elements $I18, rx1222_bstack
    le $I18, 0, rx1222_cut3476
    dec $I18
    set $I18, rx1222_bstack[$I18]
  rx1222_cut3476:
    assign rx1222_cstack, $I18
  rx1222_jump3475:
    jump $I19
  rx1222_done3472:
    rx1222_cur."!cursor_fail"()
    .return (rx1222_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_237_1347719921.536_caps" :subid("cuid_memo_406_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["zw"], $P5002
    box $P5003, 0
    set $P5001["codeblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_237_1347719921.536_nfa" :subid("cuid_memo_407_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "?!"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 123
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_236_1347719921.536") :anon :lex :outer("cuid_237_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1225_tgt
    .local int rx1225_pos
    .local int rx1225_off
    .local int rx1225_eos
    .local int rx1225_rep
    .local pmc rx1225_cur
    .local pmc rx1225_curclass
    .local pmc rx1225_bstack
    .local pmc rx1225_cstack
    (rx1225_cur, rx1225_tgt, rx1225_pos, rx1225_curclass, rx1225_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1225_cur
    length rx1225_eos, rx1225_tgt
    eq $I19, 1, rx1225_restart3485
    gt rx1225_pos, rx1225_eos, rx1225_fail3486
    repr_get_attr_int $I11, self, rx1225_curclass, "$!from"
    ne $I11, -1, rxscan1226_done3492
    goto rxscan1226_scan3491
  rxscan1226_loop3490:
    inc rx1225_pos
    gt rx1225_pos, rx1225_eos, rx1225_fail3486
    repr_bind_attr_int rx1225_cur, rx1225_curclass, "$!from", rx1225_pos
  rxscan1226_scan3491:
    nqp_rxmark rx1225_bstack, rxscan1226_loop3490, rx1225_pos, 0
  rxscan1226_done3492:
    add $I11, rx1225_pos, 1
    gt $I11, rx1225_eos, rx1225_fail3486
    substr $S10, rx1225_tgt, rx1225_pos, 1
    ne $S10, ucs4:"{", rx1225_fail3486
    add rx1225_pos, 1
    rx1225_cur."!cursor_pass"(rx1225_pos, 'backtrack'=>1)
    .return (rx1225_cur)
  rx1225_restart3485:
    repr_get_attr_obj rx1225_cstack, rx1225_cur, rx1225_curclass, "$!cstack"
  rx1225_fail3486:
    unless rx1225_bstack, rx1225_done3484
    pop $I19, rx1225_bstack
    if_null rx1225_cstack, rx1225_cstack_done3489
    unless rx1225_cstack, rx1225_cstack_done3489
    dec $I19
    set $P11, rx1225_cstack[$I19]
  rx1225_cstack_done3489:
    pop rx1225_rep, rx1225_bstack
    pop rx1225_pos, rx1225_bstack
    pop $I19, rx1225_bstack
    lt rx1225_pos, -1, rx1225_done3484
    lt rx1225_pos, 0, rx1225_fail3486
    eq $I19, 0, rx1225_fail3486
    nqp_islist $I20, rx1225_cstack
    unless $I20, rx1225_jump3487
    elements $I18, rx1225_bstack
    le $I18, 0, rx1225_cut3488
    dec $I18
    set $I18, rx1225_bstack[$I18]
  rx1225_cut3488:
    assign rx1225_cstack, $I18
  rx1225_jump3487:
    jump $I19
  rx1225_done3484:
    rx1225_cur."!cursor_fail"()
    .return (rx1225_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_236_1347719921.536_caps" :subid("cuid_memo_408_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_236_1347719921.536_nfa" :subid("cuid_memo_409_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_239_1347719921.536") :anon :lex :outer("cuid_243_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1356
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_238_1347719921.536' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1228_tgt
    .local int rx1228_pos
    .local int rx1228_off
    .local int rx1228_eos
    .local int rx1228_rep
    .local pmc rx1228_cur
    .local pmc rx1228_curclass
    .local pmc rx1228_bstack
    .local pmc rx1228_cstack
    (rx1228_cur, rx1228_tgt, rx1228_pos, rx1228_curclass, rx1228_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1228_cur
    length rx1228_eos, rx1228_tgt
    eq $I19, 1, rx1228_restart3496
    gt rx1228_pos, rx1228_eos, rx1228_fail3497
    repr_get_attr_int $I11, self, rx1228_curclass, "$!from"
    ne $I11, -1, rxscan1229_done3503
    goto rxscan1229_scan3502
  rxscan1229_loop3501:
    inc rx1228_pos
    gt rx1228_pos, rx1228_eos, rx1228_fail3497
    repr_bind_attr_int rx1228_cur, rx1228_curclass, "$!from", rx1228_pos
  rxscan1229_scan3502:
    nqp_rxmark rx1228_bstack, rxscan1229_loop3501, rx1228_pos, 0
  rxscan1229_done3503:
    repr_bind_attr_int rx1228_cur, rx1228_curclass, "$!pos", rx1228_pos
    $P11 = rx1228_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1228_curclass, "$!pos"
    lt $I11, 0, rx1228_fail3497
    nqp_rxmark rx1228_bstack, rxsubrule1230_pass3504, -1, 0
  rxsubrule1230_pass3504:
    rx1228_cstack = rx1228_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx1228_pos, $P11, rx1228_curclass, "$!pos"
    nqp_rxmark rx1228_bstack, rxquantr1231_done3506, rx1228_pos, 0
  rxquantr1231_loop3505:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1232_03508
    nqp_push_label $P11, alt1232_13519
    nqp_push_label $P11, alt1232_23521
    nqp_push_label $P11, alt1232_33523
    nqp_push_label $P11, alt1232_43525
    nqp_rxmark rx1228_bstack, alt1232_end3507, -1, 0
    rx1228_cur."!alt"(rx1228_pos, "alt_nfa__42_1347719924.722", $P11)
    goto rx1228_fail3497
  alt1232_03508:
    .const 'Sub' $P5001 = 'cuid_238_1347719921.536' 
    capture_lex $P5001
    repr_bind_attr_int rx1228_cur, rx1228_curclass, "$!pos", rx1228_pos
    $P11 = rx1228_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1228_curclass, "$!pos"
    lt $I11, 0, rx1228_fail3497
    goto alt1232_end3507
  alt1232_13519:
    add $I11, rx1228_pos, 1
    gt $I11, rx1228_eos, rx1228_fail3497
    substr $S10, rx1228_tgt, rx1228_pos, 1
    ne $S10, ucs4:"=", rx1228_fail3497
    add rx1228_pos, 1
    repr_bind_attr_int rx1228_cur, rx1228_curclass, "$!pos", rx1228_pos
    $P11 = rx1228_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1228_curclass, "$!pos"
    lt $I11, 0, rx1228_fail3497
    nqp_rxmark rx1228_bstack, rxsubrule1235_pass3520, -1, 0
  rxsubrule1235_pass3520:
    rx1228_cstack = rx1228_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1228_pos, $P11, rx1228_curclass, "$!pos"
    goto alt1232_end3507
  alt1232_23521:
    add $I11, rx1228_pos, 1
    gt $I11, rx1228_eos, rx1228_fail3497
    substr $S10, rx1228_tgt, rx1228_pos, 1
    ne $S10, ucs4:":", rx1228_fail3497
    add rx1228_pos, 1
    repr_bind_attr_int rx1228_cur, rx1228_curclass, "$!pos", rx1228_pos
    $P11 = rx1228_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1228_curclass, "$!pos"
    lt $I11, 0, rx1228_fail3497
    nqp_rxmark rx1228_bstack, rxsubrule1236_pass3522, -1, 0
  rxsubrule1236_pass3522:
    rx1228_cstack = rx1228_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1228_pos, $P11, rx1228_curclass, "$!pos"
    goto alt1232_end3507
  alt1232_33523:
    add $I11, rx1228_pos, 1
    gt $I11, rx1228_eos, rx1228_fail3497
    substr $S10, rx1228_tgt, rx1228_pos, 1
    ne $S10, ucs4:"(", rx1228_fail3497
    add rx1228_pos, 1
    repr_bind_attr_int rx1228_cur, rx1228_curclass, "$!pos", rx1228_pos
    $P11 = rx1228_cur."LANG"("MAIN", "arglist")
    repr_get_attr_int $I11, $P11, rx1228_curclass, "$!pos"
    lt $I11, 0, rx1228_fail3497
    nqp_rxmark rx1228_bstack, rxsubrule1237_pass3524, -1, 0
  rxsubrule1237_pass3524:
    rx1228_cstack = rx1228_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1228_pos, $P11, rx1228_curclass, "$!pos"
    add $I11, rx1228_pos, 1
    gt $I11, rx1228_eos, rx1228_fail3497
    substr $S10, rx1228_tgt, rx1228_pos, 1
    ne $S10, ucs4:")", rx1228_fail3497
    add rx1228_pos, 1
    goto alt1232_end3507
  alt1232_43525:
    repr_bind_attr_int rx1228_cur, rx1228_curclass, "$!pos", rx1228_pos
    $P11 = rx1228_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx1228_curclass, "$!pos"
    lt $I11, 0, rx1228_fail3497
    repr_get_attr_int rx1228_pos, $P11, rx1228_curclass, "$!pos"
    repr_bind_attr_int rx1228_cur, rx1228_curclass, "$!pos", rx1228_pos
    $P11 = rx1228_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx1228_curclass, "$!pos"
    lt $I11, 0, rx1228_fail3497
    nqp_rxmark rx1228_bstack, rxsubrule1239_pass3527, -1, 0
  rxsubrule1239_pass3527:
    rx1228_cstack = rx1228_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx1228_pos, $P11, rx1228_curclass, "$!pos"
    goto alt1232_end3507
  alt1232_end3507:
    nqp_rxpeek $I19, rx1228_bstack, rxquantr1231_done3506
    inc $I19
    inc $I19
    set rx1228_rep, rx1228_bstack[$I19]
    nqp_rxcommit rx1228_bstack, rxquantr1231_done3506
    inc rx1228_rep
  rxquantr1231_done3506:
    rx1228_cur."!cursor_pass"(rx1228_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx1228_cur)
  rx1228_restart3496:
    repr_get_attr_obj rx1228_cstack, rx1228_cur, rx1228_curclass, "$!cstack"
  rx1228_fail3497:
    unless rx1228_bstack, rx1228_done3495
    pop $I19, rx1228_bstack
    if_null rx1228_cstack, rx1228_cstack_done3500
    unless rx1228_cstack, rx1228_cstack_done3500
    dec $I19
    set $P11, rx1228_cstack[$I19]
  rx1228_cstack_done3500:
    pop rx1228_rep, rx1228_bstack
    pop rx1228_pos, rx1228_bstack
    pop $I19, rx1228_bstack
    lt rx1228_pos, -1, rx1228_done3495
    lt rx1228_pos, 0, rx1228_fail3497
    eq $I19, 0, rx1228_fail3497
    nqp_islist $I20, rx1228_cstack
    unless $I20, rx1228_jump3498
    elements $I18, rx1228_bstack
    le $I18, 0, rx1228_cut3499
    dec $I18
    set $I18, rx1228_bstack[$I18]
  rx1228_cut3499:
    assign rx1228_cstack, $I18
  rx1228_jump3498:
    jump $I19
  rx1228_done3495:
    rx1228_cur."!cursor_fail"()
    .return (rx1228_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_239_1347719921.536_caps" :subid("cuid_memo_410_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["longname"], $P5002
    box $P5003, 2
    set $P5001["assertion"], $P5003
    box $P5004, 2
    set $P5001["arglist"], $P5004
    box $P5005, 2
    set $P5001["nibbler"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_239_1347719921.536_nfa" :subid("cuid_memo_411_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "identifier"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 62
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 2
    push $P5007, $P5011
    box $P5012, 61
    push $P5007, $P5012
    box $P5013, 4
    push $P5007, $P5013
    box $P5014, 2
    push $P5007, $P5014
    box $P5015, 58
    push $P5007, $P5015
    box $P5016, 5
    push $P5007, $P5016
    box $P5017, 2
    push $P5007, $P5017
    box $P5018, 40
    push $P5007, $P5018
    box $P5019, 6
    push $P5007, $P5019
    box $P5020, 8
    push $P5007, $P5020
    box $P5021, "normspace"
    push $P5007, $P5021
    box $P5022, 8
    push $P5007, $P5022
    box $P5023, 1
    push $P5007, $P5023
    box $P5024, 0
    push $P5007, $P5024
    box $P5025, 0
    push $P5007, $P5025
    push $P5001, $P5007
    new $P5026, 'ResizablePMCArray'
    box $P5027, 0
    push $P5026, $P5027
    box $P5028, 0
    push $P5026, $P5028
    box $P5029, 0
    push $P5026, $P5029
    push $P5001, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 8
    push $P5030, $P5031
    box $P5032, "assertion"
    push $P5030, $P5032
    box $P5033, 0
    push $P5030, $P5033
    push $P5001, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 8
    push $P5034, $P5035
    box $P5036, "arglist"
    push $P5034, $P5036
    box $P5037, 0
    push $P5034, $P5037
    push $P5001, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 8
    push $P5038, $P5039
    box $P5040, "LANG"
    push $P5038, $P5040
    box $P5041, 7
    push $P5038, $P5041
    push $P5001, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 41
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5001, $P5042
    new $P5046, 'ResizablePMCArray'
    box $P5047, 8
    push $P5046, $P5047
    box $P5048, "nibbler"
    push $P5046, $P5048
    box $P5049, 0
    push $P5046, $P5049
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_239_1347719921.536_alt_nfa__42_1347719924.722" :subid("cuid_memo_412_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 62
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 61
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    push $P5012, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 8
    push $P5018, $P5019
    box $P5020, "assertion"
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5012, $P5018
    push $P5001, $P5012
    new $P5022, 'ResizablePMCArray'
    new $P5023, 'ResizablePMCArray'
    push $P5022, $P5023
    new $P5024, 'ResizablePMCArray'
    box $P5025, 2
    push $P5024, $P5025
    box $P5026, 58
    push $P5024, $P5026
    box $P5027, 2
    push $P5024, $P5027
    push $P5022, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 8
    push $P5028, $P5029
    box $P5030, "arglist"
    push $P5028, $P5030
    box $P5031, 0
    push $P5028, $P5031
    push $P5022, $P5028
    push $P5001, $P5022
    new $P5032, 'ResizablePMCArray'
    new $P5033, 'ResizablePMCArray'
    push $P5032, $P5033
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 40
    push $P5034, $P5036
    box $P5037, 2
    push $P5034, $P5037
    push $P5032, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 8
    push $P5038, $P5039
    box $P5040, "LANG"
    push $P5038, $P5040
    box $P5041, 3
    push $P5038, $P5041
    push $P5032, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 41
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5032, $P5042
    push $P5001, $P5032
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 8
    push $P5048, $P5049
    box $P5050, "normspace"
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 8
    push $P5052, $P5053
    box $P5054, "nibbler"
    push $P5052, $P5054
    box $P5055, 0
    push $P5052, $P5055
    push $P5046, $P5052
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_238_1347719921.536") :anon :lex :outer("cuid_239_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1233_tgt
    .local int rx1233_pos
    .local int rx1233_off
    .local int rx1233_eos
    .local int rx1233_rep
    .local pmc rx1233_cur
    .local pmc rx1233_curclass
    .local pmc rx1233_bstack
    .local pmc rx1233_cstack
    (rx1233_cur, rx1233_tgt, rx1233_pos, rx1233_curclass, rx1233_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1233_cur
    length rx1233_eos, rx1233_tgt
    eq $I19, 1, rx1233_restart3511
    gt rx1233_pos, rx1233_eos, rx1233_fail3512
    repr_get_attr_int $I11, self, rx1233_curclass, "$!from"
    ne $I11, -1, rxscan1234_done3518
    goto rxscan1234_scan3517
  rxscan1234_loop3516:
    inc rx1233_pos
    gt rx1233_pos, rx1233_eos, rx1233_fail3512
    repr_bind_attr_int rx1233_cur, rx1233_curclass, "$!from", rx1233_pos
  rxscan1234_scan3517:
    nqp_rxmark rx1233_bstack, rxscan1234_loop3516, rx1233_pos, 0
  rxscan1234_done3518:
    add $I11, rx1233_pos, 1
    gt $I11, rx1233_eos, rx1233_fail3512
    substr $S10, rx1233_tgt, rx1233_pos, 1
    ne $S10, ucs4:">", rx1233_fail3512
    add rx1233_pos, 1
    rx1233_cur."!cursor_pass"(rx1233_pos, 'backtrack'=>1)
    .return (rx1233_cur)
  rx1233_restart3511:
    repr_get_attr_obj rx1233_cstack, rx1233_cur, rx1233_curclass, "$!cstack"
  rx1233_fail3512:
    unless rx1233_bstack, rx1233_done3510
    pop $I19, rx1233_bstack
    if_null rx1233_cstack, rx1233_cstack_done3515
    unless rx1233_cstack, rx1233_cstack_done3515
    dec $I19
    set $P11, rx1233_cstack[$I19]
  rx1233_cstack_done3515:
    pop rx1233_rep, rx1233_bstack
    pop rx1233_pos, rx1233_bstack
    pop $I19, rx1233_bstack
    lt rx1233_pos, -1, rx1233_done3510
    lt rx1233_pos, 0, rx1233_fail3512
    eq $I19, 0, rx1233_fail3512
    nqp_islist $I20, rx1233_cstack
    unless $I20, rx1233_jump3513
    elements $I18, rx1233_bstack
    le $I18, 0, rx1233_cut3514
    dec $I18
    set $I18, rx1233_bstack[$I18]
  rx1233_cut3514:
    assign rx1233_cstack, $I18
  rx1233_jump3513:
    jump $I19
  rx1233_done3510:
    rx1233_cur."!cursor_fail"()
    .return (rx1233_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_238_1347719921.536_caps" :subid("cuid_memo_413_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_238_1347719921.536_nfa" :subid("cuid_memo_414_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_240_1347719921.536") :anon :lex :outer("cuid_243_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1367
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1240_tgt
    .local int rx1240_pos
    .local int rx1240_off
    .local int rx1240_eos
    .local int rx1240_rep
    .local pmc rx1240_cur
    .local pmc rx1240_curclass
    .local pmc rx1240_bstack
    .local pmc rx1240_cstack
    (rx1240_cur, rx1240_tgt, rx1240_pos, rx1240_curclass, rx1240_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1240_cur
    length rx1240_eos, rx1240_tgt
    eq $I19, 1, rx1240_restart3530
    gt rx1240_pos, rx1240_eos, rx1240_fail3531
    repr_get_attr_int $I11, self, rx1240_curclass, "$!from"
    ne $I11, -1, rxscan1241_done3537
    goto rxscan1241_scan3536
  rxscan1241_loop3535:
    inc rx1240_pos
    gt rx1240_pos, rx1240_eos, rx1240_fail3531
    repr_bind_attr_int rx1240_cur, rx1240_curclass, "$!from", rx1240_pos
  rxscan1241_scan3536:
    nqp_rxmark rx1240_bstack, rxscan1241_loop3535, rx1240_pos, 0
  rxscan1241_done3537:
    ge rx1240_pos, rx1240_eos, rx1240_fail3531
    substr $S11, rx1240_tgt, rx1240_pos, 1
    index $I11, ucs4:"$@", $S11
    lt $I11, 0, rx1240_fail3531
    repr_bind_attr_int rx1240_cur, rx1240_curclass, "$!pos", rx1240_pos
    $P11 = rx1240_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1240_curclass, "$!pos"
    lt $I11, 0, rx1240_fail3531
    nqp_rxmark rx1240_bstack, rxsubrule1242_pass3538, -1, 0
  rxsubrule1242_pass3538:
    rx1240_cstack = rx1240_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1240_pos, $P11, rx1240_curclass, "$!pos"
    rx1240_cur."!cursor_pass"(rx1240_pos, "assertion:sym<var>", 'backtrack'=>1)
    .return (rx1240_cur)
  rx1240_restart3530:
    repr_get_attr_obj rx1240_cstack, rx1240_cur, rx1240_curclass, "$!cstack"
  rx1240_fail3531:
    unless rx1240_bstack, rx1240_done3529
    pop $I19, rx1240_bstack
    if_null rx1240_cstack, rx1240_cstack_done3534
    unless rx1240_cstack, rx1240_cstack_done3534
    dec $I19
    set $P11, rx1240_cstack[$I19]
  rx1240_cstack_done3534:
    pop rx1240_rep, rx1240_bstack
    pop rx1240_pos, rx1240_bstack
    pop $I19, rx1240_bstack
    lt rx1240_pos, -1, rx1240_done3529
    lt rx1240_pos, 0, rx1240_fail3531
    eq $I19, 0, rx1240_fail3531
    nqp_islist $I20, rx1240_cstack
    unless $I20, rx1240_jump3532
    elements $I18, rx1240_bstack
    le $I18, 0, rx1240_cut3533
    dec $I18
    set $I18, rx1240_bstack[$I18]
  rx1240_cut3533:
    assign rx1240_cstack, $I18
  rx1240_jump3532:
    jump $I19
  rx1240_done3529:
    rx1240_cur."!cursor_fail"()
    .return (rx1240_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_240_1347719921.536_caps" :subid("cuid_memo_415_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["var"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_240_1347719921.536_nfa" :subid("cuid_memo_416_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$@"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_241_1347719921.536") :anon :lex :outer("cuid_243_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1371
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1243_tgt
    .local int rx1243_pos
    .local int rx1243_off
    .local int rx1243_eos
    .local int rx1243_rep
    .local pmc rx1243_cur
    .local pmc rx1243_curclass
    .local pmc rx1243_bstack
    .local pmc rx1243_cstack
    (rx1243_cur, rx1243_tgt, rx1243_pos, rx1243_curclass, rx1243_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1243_cur
    length rx1243_eos, rx1243_tgt
    eq $I19, 1, rx1243_restart3541
    gt rx1243_pos, rx1243_eos, rx1243_fail3542
    repr_get_attr_int $I11, self, rx1243_curclass, "$!from"
    ne $I11, -1, rxscan1244_done3548
    goto rxscan1244_scan3547
  rxscan1244_loop3546:
    inc rx1243_pos
    gt rx1243_pos, rx1243_eos, rx1243_fail3542
    repr_bind_attr_int rx1243_cur, rx1243_curclass, "$!from", rx1243_pos
  rxscan1244_scan3547:
    nqp_rxmark rx1243_bstack, rxscan1244_loop3546, rx1243_pos, 0
  rxscan1244_done3548:
    repr_bind_attr_int rx1243_cur, rx1243_curclass, "$!pos", rx1243_pos
    $P11 = rx1243_cur."LANG"("MAIN", "pblock")
    repr_get_attr_int $I11, $P11, rx1243_curclass, "$!pos"
    lt $I11, 0, rx1243_fail3542
    nqp_rxmark rx1243_bstack, rxsubrule1245_pass3549, -1, 0
  rxsubrule1245_pass3549:
    rx1243_cstack = rx1243_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1243_pos, $P11, rx1243_curclass, "$!pos"
    rx1243_cur."!cursor_pass"(rx1243_pos, "codeblock", 'backtrack'=>1)
    .return (rx1243_cur)
  rx1243_restart3541:
    repr_get_attr_obj rx1243_cstack, rx1243_cur, rx1243_curclass, "$!cstack"
  rx1243_fail3542:
    unless rx1243_bstack, rx1243_done3540
    pop $I19, rx1243_bstack
    if_null rx1243_cstack, rx1243_cstack_done3545
    unless rx1243_cstack, rx1243_cstack_done3545
    dec $I19
    set $P11, rx1243_cstack[$I19]
  rx1243_cstack_done3545:
    pop rx1243_rep, rx1243_bstack
    pop rx1243_pos, rx1243_bstack
    pop $I19, rx1243_bstack
    lt rx1243_pos, -1, rx1243_done3540
    lt rx1243_pos, 0, rx1243_fail3542
    eq $I19, 0, rx1243_fail3542
    nqp_islist $I20, rx1243_cstack
    unless $I20, rx1243_jump3543
    elements $I18, rx1243_bstack
    le $I18, 0, rx1243_cut3544
    dec $I18
    set $I18, rx1243_bstack[$I18]
  rx1243_cut3544:
    assign rx1243_cstack, $I18
  rx1243_jump3543:
    jump $I19
  rx1243_done3540:
    rx1243_cur."!cursor_fail"()
    .return (rx1243_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_241_1347719921.536_caps" :subid("cuid_memo_417_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["block"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_241_1347719921.536_nfa" :subid("cuid_memo_418_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "LANG"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_242_1347719921.536") :anon :lex :outer("cuid_243_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1375
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1246_tgt
    .local int rx1246_pos
    .local int rx1246_off
    .local int rx1246_eos
    .local int rx1246_rep
    .local pmc rx1246_cur
    .local pmc rx1246_curclass
    .local pmc rx1246_bstack
    .local pmc rx1246_cstack
    (rx1246_cur, rx1246_tgt, rx1246_pos, rx1246_curclass, rx1246_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1246_cur
    length rx1246_eos, rx1246_tgt
    eq $I19, 1, rx1246_restart3552
    gt rx1246_pos, rx1246_eos, rx1246_fail3553
    repr_get_attr_int $I11, self, rx1246_curclass, "$!from"
    ne $I11, -1, rxscan1247_done3559
    goto rxscan1247_scan3558
  rxscan1247_loop3557:
    inc rx1246_pos
    gt rx1246_pos, rx1246_eos, rx1246_fail3553
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!from", rx1246_pos
  rxscan1247_scan3558:
    nqp_rxmark rx1246_bstack, rxscan1247_loop3557, rx1246_pos, 0
  rxscan1247_done3559:
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!pos", rx1246_pos
    $P11 = rx1246_cur."LANG"("MAIN", "quote_EXPR")
    repr_get_attr_int $I11, $P11, rx1246_curclass, "$!pos"
    lt $I11, 0, rx1246_fail3553
    nqp_rxmark rx1246_bstack, rxsubrule1248_pass3560, -1, 0
  rxsubrule1248_pass3560:
    rx1246_cstack = rx1246_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1246_pos, $P11, rx1246_curclass, "$!pos"
    rx1246_cur."!cursor_pass"(rx1246_pos, "arg", 'backtrack'=>1)
    .return (rx1246_cur)
  rx1246_restart3552:
    repr_get_attr_obj rx1246_cstack, rx1246_cur, rx1246_curclass, "$!cstack"
  rx1246_fail3553:
    unless rx1246_bstack, rx1246_done3551
    pop $I19, rx1246_bstack
    if_null rx1246_cstack, rx1246_cstack_done3556
    unless rx1246_cstack, rx1246_cstack_done3556
    dec $I19
    set $P11, rx1246_cstack[$I19]
  rx1246_cstack_done3556:
    pop rx1246_rep, rx1246_bstack
    pop rx1246_pos, rx1246_bstack
    pop $I19, rx1246_bstack
    lt rx1246_pos, -1, rx1246_done3551
    lt rx1246_pos, 0, rx1246_fail3553
    eq $I19, 0, rx1246_fail3553
    nqp_islist $I20, rx1246_cstack
    unless $I20, rx1246_jump3554
    elements $I18, rx1246_bstack
    le $I18, 0, rx1246_cut3555
    dec $I18
    set $I18, rx1246_bstack[$I18]
  rx1246_cut3555:
    assign rx1246_cstack, $I18
  rx1246_jump3554:
    jump $I19
  rx1246_done3551:
    rx1246_cur."!cursor_fail"()
    .return (rx1246_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_242_1347719921.536_caps" :subid("cuid_memo_419_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_242_1347719921.536_nfa" :subid("cuid_memo_420_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "LANG"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_399_1347719921.536") :anon :lex :outer("cuid_1_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1386
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3562
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5003
  fallback3562:
    set $P101, $P5002
    get_hll_global $P5007, "GLOBAL"
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3565
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5008
  fallback3565:
    type_check $I5001, $P101, $P5004
    box $P5011, $I5001
    set $P5010, $P5011
    if $I5001 goto unless1249_end3564 
.annotate 'line', 1388
    box $P5009, "Pre-increment can only work on a variable"
    die $P5009
    set $P5010, $P5009
  unless1249_end3564:
.annotate 'line', 1391
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback3566
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5012, $P5016
  fallback3566:
.annotate 'line', 1394
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback3567
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5017, $P5021
  fallback3567:
.annotate 'line', 1397
    get_hll_global $P5025, "GLOBAL"
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["IVal"]
    unless_null $P5022, fallback3568
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5022, $P5026
  fallback3568:
    $P5027 = $P5022."new"(1 :named("value"))
    $P5028 = $P5017."new"($P101, $P5027, "add_n" :named("op"))
    $P5029 = $P5012."new"($P101, $P5028, "bind" :named("op"))
    $P5030 = _lex_param_0."as_post"($P5029)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_400_1347719921.536") :anon :lex :outer("cuid_1_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1401
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3569
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5003
  fallback3569:
    set $P101, $P5002
    get_hll_global $P5007, "GLOBAL"
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3572
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5008
  fallback3572:
    type_check $I5001, $P101, $P5004
    box $P5011, $I5001
    set $P5010, $P5011
    if $I5001 goto unless1250_end3571 
.annotate 'line', 1403
    box $P5009, "Pre-decrement can only work on a variable"
    die $P5009
    set $P5010, $P5009
  unless1250_end3571:
.annotate 'line', 1406
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback3573
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5012, $P5016
  fallback3573:
.annotate 'line', 1409
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback3574
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5017, $P5021
  fallback3574:
.annotate 'line', 1412
    get_hll_global $P5025, "GLOBAL"
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["IVal"]
    unless_null $P5022, fallback3575
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5022, $P5026
  fallback3575:
    $P5027 = $P5022."new"(1 :named("value"))
    $P5028 = $P5017."new"($P101, $P5027, "sub_n" :named("op"))
    $P5029 = $P5012."new"($P101, $P5028, "bind" :named("op"))
    $P5030 = _lex_param_0."as_post"($P5029)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_401_1347719921.536") :anon :lex :outer("cuid_1_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1416
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3576
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5004
  fallback3576:
    set $P101, $P5003
.annotate 'line', 1418
    get_hll_global $P5008, "GLOBAL"
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3577
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5005, $P5009
  fallback3577:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3580
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5015
  fallback3580:
    type_check $I5001, $P101, $P5011
    box $P5018, $I5001
    set $P5017, $P5018
    if $I5001 goto unless1251_end3579 
.annotate 'line', 1419
    box $P5016, "Post-increment can only work on a variable"
    die $P5016
    set $P5017, $P5016
  unless1251_end3579:
.annotate 'line', 1422
    get_hll_global $P5022, "GLOBAL"
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["Stmt"]
    unless_null $P5019, fallback3581
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5019, $P5023
  fallback3581:
.annotate 'line', 1424
    get_hll_global $P5027, "GLOBAL"
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback3582
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5024, $P5028
  fallback3582:
.annotate 'line', 1426
    get_hll_global $P5032, "GLOBAL"
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Var"]
    unless_null $P5029, fallback3583
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5029, $P5033
  fallback3583:
    $P5034 = $P5029."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"))
    $P5035 = $P5024."new"($P5034, $P101, "bind" :named("op"))
.annotate 'line', 1429
    get_hll_global $P5039, "GLOBAL"
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback3584
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5036, $P5040
  fallback3584:
.annotate 'line', 1432
    get_hll_global $P5044, "GLOBAL"
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Op"]
    unless_null $P5041, fallback3585
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5041, $P5045
  fallback3585:
.annotate 'line', 1434
    get_hll_global $P5049, "GLOBAL"
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["Var"]
    unless_null $P5046, fallback3586
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5046, $P5050
  fallback3586:
    $P5051 = $P5046."new"($P102 :named("name"), "local" :named("scope"))
.annotate 'line', 1435
    get_hll_global $P5055, "GLOBAL"
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["IVal"]
    unless_null $P5052, fallback3587
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5052, $P5056
  fallback3587:
    $P5057 = $P5052."new"(1 :named("value"))
    $P5058 = $P5041."new"($P5051, $P5057, "add_n" :named("op"))
    $P5059 = $P5036."new"($P101, $P5058, "bind" :named("op"))
    $P5060 = $P5019."new"($P5035, $P5059, 0 :named("resultchild"))
    $P5061 = _lex_param_0."as_post"($P5060)
    .return ($P5061) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_402_1347719921.536") :anon :lex :outer("cuid_1_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1440
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3588
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5004
  fallback3588:
    set $P101, $P5003
.annotate 'line', 1442
    get_hll_global $P5008, "GLOBAL"
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3589
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5005, $P5009
  fallback3589:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3592
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5015
  fallback3592:
    type_check $I5001, $P101, $P5011
    box $P5018, $I5001
    set $P5017, $P5018
    if $I5001 goto unless1252_end3591 
.annotate 'line', 1443
    box $P5016, "Post-decrement can only work on a variable"
    die $P5016
    set $P5017, $P5016
  unless1252_end3591:
.annotate 'line', 1446
    get_hll_global $P5022, "GLOBAL"
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["Stmt"]
    unless_null $P5019, fallback3593
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5019, $P5023
  fallback3593:
.annotate 'line', 1448
    get_hll_global $P5027, "GLOBAL"
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback3594
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5024, $P5028
  fallback3594:
.annotate 'line', 1450
    get_hll_global $P5032, "GLOBAL"
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Var"]
    unless_null $P5029, fallback3595
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5029, $P5033
  fallback3595:
    $P5034 = $P5029."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"))
    $P5035 = $P5024."new"($P5034, $P101, "bind" :named("op"))
.annotate 'line', 1453
    get_hll_global $P5039, "GLOBAL"
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback3596
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5036, $P5040
  fallback3596:
.annotate 'line', 1456
    get_hll_global $P5044, "GLOBAL"
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Op"]
    unless_null $P5041, fallback3597
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5041, $P5045
  fallback3597:
.annotate 'line', 1458
    get_hll_global $P5049, "GLOBAL"
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["Var"]
    unless_null $P5046, fallback3598
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5046, $P5050
  fallback3598:
    $P5051 = $P5046."new"($P102 :named("name"), "local" :named("scope"))
.annotate 'line', 1459
    get_hll_global $P5055, "GLOBAL"
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["IVal"]
    unless_null $P5052, fallback3599
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5052, $P5056
  fallback3599:
    $P5057 = $P5052."new"(1 :named("value"))
    $P5058 = $P5041."new"($P5051, $P5057, "sub_n" :named("op"))
    $P5059 = $P5036."new"($P101, $P5058, "bind" :named("op"))
    $P5060 = $P5019."new"($P5035, $P5059, 0 :named("resultchild"))
    $P5061 = _lex_param_0."as_post"($P5060)
    .return ($P5061) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_403_1347719921.536") :anon :lex :outer("cuid_1_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1464
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1465
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3600
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5002
  fallback3600:
    $P5003 = _lex_param_0."as_post"($P5001, "n" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_404_1347719921.536") :anon :lex :outer("cuid_1_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1468
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1469
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3601
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5002
  fallback3601:
    $P5003 = _lex_param_0."as_post"($P5001, "s" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_405_1347719921.536") :anon :lex :outer("cuid_1_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1472
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1473
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3602
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback3602:
.annotate 'line', 1475
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Op"]
    unless_null $P5006, fallback3603
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5010
  fallback3603:
    set $P5011, _lex_param_1[0]
    unless_null $P5011, fallback3604
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5012
  fallback3604:
    $P5013 = $P5006."new"($P5011, "where" :named("op"))
.annotate 'line', 1476
    get_hll_global $P5017, "GLOBAL"
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Op"]
    unless_null $P5014, fallback3605
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5014, $P5018
  fallback3605:
    set $P5019, _lex_param_1[1]
    unless_null $P5019, fallback3606
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5019, $P5020
  fallback3606:
    $P5021 = $P5014."new"($P5019, "where" :named("op"))
    $P5022 = $P5001."new"($P5013, $P5021, "iseq_i" :named("op"))
    $P5023 = _lex_param_0."as_post"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_356_1347719921.536") :anon :lex :outer("cuid_1_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1481
    .const 'Sub' $P5124 = 'cuid_406_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_409_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_412_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_413_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_416_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_418_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_419_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_420_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_422_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_423_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_428_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_244_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_245_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_246_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_247_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_248_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_249_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_250_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_251_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_252_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_253_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_254_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_255_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_256_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_257_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_258_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_259_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_260_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_261_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_262_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_263_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_264_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_265_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_266_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_267_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_268_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_269_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_270_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_271_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_272_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_273_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_274_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_275_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_276_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_277_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_278_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_279_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_280_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_281_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_282_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_283_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_284_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_285_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_286_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_287_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_288_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_289_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_290_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_291_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_292_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_293_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_294_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_295_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_296_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_297_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_298_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_299_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_300_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_301_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_302_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_303_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_304_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_305_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_306_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_307_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_308_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_309_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_310_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_311_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_312_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_313_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_314_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_315_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_316_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_317_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_318_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_319_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_320_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_321_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_322_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_323_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_324_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_325_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_326_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_327_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_328_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_329_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_330_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_331_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_332_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_333_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_334_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_335_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_336_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_337_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_338_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_339_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_340_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_341_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_342_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_343_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_344_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_345_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_346_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_347_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_348_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_349_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_350_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_351_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_352_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_353_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_354_1347719921.536' 
    capture_lex $P5124 
    .const 'Sub' $P5124 = 'cuid_355_1347719921.536' 
    capture_lex $P5124 
    .lex "&xblock_immediate", $P101 
    .lex "&block_immediate", $P102 
    .lex "&default_for", $P103 
    .lex "&default_value_for_prim", $P104 
    .lex "&colonpair_str", $P105 
    .lex "&import_HOW_exports", $P106 
    .lex "&set_block_handler", $P107 
    .lex "&only_star_block", $P108 
    .lex "&attach_multi_signature", $P109 
    .lex "&wrap_return_handler", $P110 
    .lex "&lexical_package_lookup", $P111 
    .lex "$?PACKAGE", $P112 
    .lex "$?CLASS", $P113 
    .const 'Sub' $P5001 = 'cuid_406_1347719921.536' 
    capture_lex $P5001
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_409_1347719921.536' 
    capture_lex $P5002
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_412_1347719921.536' 
    capture_lex $P5003
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_413_1347719921.536' 
    capture_lex $P5004
    set $P104, $P5004
    .const 'Sub' $P5005 = 'cuid_416_1347719921.536' 
    capture_lex $P5005
    set $P105, $P5005
    .const 'Sub' $P5006 = 'cuid_418_1347719921.536' 
    capture_lex $P5006
    set $P106, $P5006
    .const 'Sub' $P5007 = 'cuid_419_1347719921.536' 
    capture_lex $P5007
    set $P107, $P5007
    .const 'Sub' $P5008 = 'cuid_420_1347719921.536' 
    capture_lex $P5008
    set $P108, $P5008
    .const 'Sub' $P5009 = 'cuid_422_1347719921.536' 
    capture_lex $P5009
    set $P109, $P5009
    .const 'Sub' $P5010 = 'cuid_423_1347719921.536' 
    capture_lex $P5010
    set $P110, $P5010
    .const 'Sub' $P5011 = 'cuid_428_1347719921.536' 
    capture_lex $P5011
    set $P111, $P5011
    .const 'Sub' $P5012 = 'cuid_244_1347719921.536' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_245_1347719921.536' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_246_1347719921.536' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_247_1347719921.536' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_248_1347719921.536' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_249_1347719921.536' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_250_1347719921.536' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_251_1347719921.536' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_252_1347719921.536' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_253_1347719921.536' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_254_1347719921.536' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_255_1347719921.536' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_256_1347719921.536' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_257_1347719921.536' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_258_1347719921.536' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_259_1347719921.536' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_260_1347719921.536' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_261_1347719921.536' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_262_1347719921.536' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_263_1347719921.536' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_264_1347719921.536' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_265_1347719921.536' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_266_1347719921.536' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_267_1347719921.536' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_268_1347719921.536' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_269_1347719921.536' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_270_1347719921.536' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_271_1347719921.536' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_272_1347719921.536' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_273_1347719921.536' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_274_1347719921.536' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_275_1347719921.536' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_276_1347719921.536' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_277_1347719921.536' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_278_1347719921.536' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_279_1347719921.536' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_280_1347719921.536' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_281_1347719921.536' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_282_1347719921.536' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_283_1347719921.536' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_284_1347719921.536' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_285_1347719921.536' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_286_1347719921.536' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_287_1347719921.536' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_288_1347719921.536' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_289_1347719921.536' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_290_1347719921.536' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_291_1347719921.536' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_292_1347719921.536' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_293_1347719921.536' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_294_1347719921.536' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_295_1347719921.536' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_296_1347719921.536' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_297_1347719921.536' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_298_1347719921.536' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_299_1347719921.536' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_300_1347719921.536' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_301_1347719921.536' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_302_1347719921.536' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_303_1347719921.536' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_304_1347719921.536' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_305_1347719921.536' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_306_1347719921.536' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_307_1347719921.536' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_308_1347719921.536' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_309_1347719921.536' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_310_1347719921.536' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_311_1347719921.536' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_312_1347719921.536' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_313_1347719921.536' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_314_1347719921.536' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_315_1347719921.536' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_316_1347719921.536' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_317_1347719921.536' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_318_1347719921.536' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_319_1347719921.536' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_320_1347719921.536' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_321_1347719921.536' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_322_1347719921.536' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_323_1347719921.536' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_324_1347719921.536' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_325_1347719921.536' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_326_1347719921.536' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_327_1347719921.536' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_328_1347719921.536' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_329_1347719921.536' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_330_1347719921.536' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_331_1347719921.536' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_332_1347719921.536' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_333_1347719921.536' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_334_1347719921.536' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_335_1347719921.536' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_336_1347719921.536' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_337_1347719921.536' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_338_1347719921.536' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_339_1347719921.536' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_340_1347719921.536' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_341_1347719921.536' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_342_1347719921.536' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_343_1347719921.536' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_344_1347719921.536' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_345_1347719921.536' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_346_1347719921.536' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_347_1347719921.536' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_348_1347719921.536' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_349_1347719921.536' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_350_1347719921.536' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_351_1347719921.536' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_352_1347719921.536' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_353_1347719921.536' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_354_1347719921.536' 
    capture_lex $P5122
    .const 'Sub' $P5123 = 'cuid_355_1347719921.536' 
    capture_lex $P5123
    .return ($P111) 
.end
.HLL "nqp"
.namespace []
.sub "xblock_immediate" :subid("cuid_406_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1482
    .param pmc _lex_param_0 
    .lex "$xblock", _lex_param_0 
.annotate 'line', 1483
    set $P5001, _lex_param_0[1]
    unless_null $P5001, fallback3607
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5002
  fallback3607:
    $P5003 = "&block_immediate"($P5001)
    set _lex_param_0[1], $P5003
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "block_immediate" :subid("cuid_409_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1487
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_408_1347719921.536' 
    capture_lex $P5006 
    .lex "$block", _lex_param_0 
.annotate 'line', 1488
    $P5001 = _lex_param_0."blocktype"("immediate")
.annotate 'line', 1489
    $P5002 = _lex_param_0."symtable"()
    set $P5005, $P5002
    if $P5002 goto unless1253_end3609 
    .const 'Sub' $P5003 = 'cuid_408_1347719921.536' 
    capture_lex $P5003
    $P5004 = $P5003()
    set $P5005, $P5004
  unless1253_end3609:
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_408_1347719921.536") :anon :lex :outer("cuid_409_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1489
    .const 'Sub' $P5017 = 'cuid_407_1347719921.536' 
    capture_lex $P5017 
    .lex "$stmts", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 1490
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback3610
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5006
  fallback3610:
    find_lex $P5007, "$block"
    $P5008 = $P5007."node"()
    $P5009 = $P5002."new"($P5008 :named("node"))
    set $P101, $P5009
.annotate 'line', 1491
    find_lex $P5013, "$block"
    $P5014 = $P5013."list"()
    set $P5010, $P5014
    iter $P5012, $P5014
  for_next3611:
    unless $P5012, for_done3613
    shift $P5016, $P5012
  for_redo3612:
    .const 'Sub' $P5015 = 'cuid_407_1347719921.536' 
    capture_lex $P5015
    $P5010 = $P5015($P5016)
    goto for_next3611
  for_done3613:
    store_lex "$block", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_407_1347719921.536") :anon :lex :outer("cuid_408_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1491
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$stmts"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "default_for" :subid("cuid_412_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1497
    .param pmc _lex_param_0 
    .const 'Sub' $P5017 = 'cuid_411_1347719921.536' 
    capture_lex $P5017 
    .lex "$sigil", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1254_else3614 
.annotate 'line', 1498
.annotate 'line', 1499
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3616
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback3616:
    $P5006 = $P5001."new"("list" :named("op"))
    set $P5016, $P5006
    goto if1254_end3615
  if1254_else3614:
    set $S5002, _lex_param_0
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1255_else3617 
.annotate 'line', 1501
.annotate 'line', 1502
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback3619
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5011
  fallback3619:
    $P5012 = $P5007."new"("hash" :named("op"))
    set $P5015, $P5012
    goto if1255_end3618
  if1255_else3617:
    .const 'Sub' $P5013 = 'cuid_411_1347719921.536' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  if1255_end3618:
    set $P5016, $P5015
  if1254_end3615:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_411_1347719921.536") :anon :lex :outer("cuid_412_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1504
    .const 'Sub' $P5022 = 'cuid_410_1347719921.536' 
    capture_lex $P5022 
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_12603628
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 1506
    new $P5018, 'ExceptionHandler'
    set_label $P5018, catch_handler_12583625
    $P5018.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5018
.annotate 'line', 1507
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["WVal"]
    unless_null $P5002, fallback3620
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5006
  fallback3620:
    find_dynamic_lex $P5007, "$*W"
    unless_null $P5007, fallback3621
    get_hll_global $P5010, "GLOBAL"
    get_who $P5009, $P5010
    set $P5008, $P5009["$W"]
    unless_null $P5008, fallback3622
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5011
  fallback3622:
    unless_null $P5008, vivi_12563623
    die "Contextual $*W not found"
    box $P5012, "Contextual $*W not found"
    set $P5008, $P5012
  vivi_12563623:
    set $P5007, $P5008
  fallback3621:
    new $P5013, 'ResizablePMCArray'
    box $P5014, "NQPMu"
    push $P5013, $P5014
    $P5015 = $P5007."find_sym"($P5013)
    $P5016 = $P5002."new"($P5015 :named("value"))
    set $P101, $P5016
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5019, $P5017
    pop_eh 
    goto skip_handler_12573624
  catch_handler_12583625:
    .get_results ($P5018) 
    .const 'Sub' $P10001 = 'cuid_410_1347719921.536' 
    capture_lex $P10001
    $P10002 = $P10001($P5018)
    set $I10001, 1
    set $P5018["handled"], $I10001
    nqp_get_sc_object $P10003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    finalize $P5018
    pop_upto_eh $P5018
    pop_eh 
    set $P5019, $P10003
    goto skip_handler_12573624
  skip_handler_12573624:
    set $P5021, $P5019
    pop_eh 
    goto skip_handler_12593627
  catch_handler_12603628:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_12593627
  skip_handler_12593627:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_410_1347719921.536") :anon :lex :outer("cuid_411_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1508
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3626
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback3626:
    $P5006 = $P5001."new"("null" :named("op"))
    store_lex "$default", $P5006
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "default_value_for_prim" :subid("cuid_413_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1514
    .param pmc _lex_param_0 
    .lex "$prim", _lex_param_0 
    set $N5001, _lex_param_0
    set $N5002, 1
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if1261_else3629 
.annotate 'line', 1515
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["IVal"]
    unless_null $P5001, fallback3631
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback3631:
    $P5006 = $P5001."new"(0 :named("value"))
    set $P5020, $P5006
    goto if1261_end3630
  if1261_else3629:
    set $N5003, _lex_param_0
    set $N5004, 2
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1262_else3632 
.annotate 'line', 1516
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["NVal"]
    unless_null $P5007, fallback3634
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5011
  fallback3634:
    $P5012 = $P5007."new"(0.0 :named("value"))
    set $P5019, $P5012
    goto if1262_end3633
  if1262_else3632:
.annotate 'line', 1517
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["SVal"]
    unless_null $P5013, fallback3635
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5013, $P5017
  fallback3635:
    $P5018 = $P5013."new"("" :named("value"))
    set $P5019, $P5018
  if1262_end3633:
    set $P5020, $P5019
  if1261_end3630:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair_str" :subid("cuid_416_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1530
    .param pmc _lex_param_0 
    .const 'Sub' $P5010 = 'cuid_415_1347719921.536' 
    capture_lex $P5010 
    .lex "$ast", _lex_param_0 
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3638
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback3638:
    type_check $I5001, _lex_param_0, $P5001
    unless $I5001 goto if1263_else3636 
    .const 'Sub' $P5006 = 'cuid_415_1347719921.536' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5009, $P5007
    goto if1263_end3637
  if1263_else3636:
.annotate 'line', 1535
.annotate 'line', 1536
    $P5008 = _lex_param_0."value"()
    set $P5009, $P5008
  if1263_end3637:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_415_1347719921.536") :anon :lex :outer("cuid_416_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1531
    .const 'Sub' $P5009 = 'cuid_414_1347719921.536' 
    capture_lex $P5009 
    .lex "@parts", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 1533
    find_lex $P5005, "$ast"
    $P5006 = $P5005."list"()
    set $P5002, $P5006
    iter $P5004, $P5006
  for_next3639:
    unless $P5004, for_done3641
    shift $P5008, $P5004
  for_redo3640:
    .const 'Sub' $P5007 = 'cuid_414_1347719921.536' 
    capture_lex $P5007
    $P5002 = $P5007($P5008)
    goto for_next3639
  for_done3641:
    join $S5001, " ", $P101
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_414_1347719921.536") :anon :lex :outer("cuid_415_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1533
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "@parts"
    $P5002 = _lex_param_0."value"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "import_HOW_exports" :subid("cuid_418_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1740
    .param pmc _lex_param_0 
    .const 'Sub' $P5011 = 'cuid_417_1347719921.536' 
    capture_lex $P5011 
    .lex "$UNIT", _lex_param_0 
    exists $I5001, _lex_param_0["EXPORTHOW"]
    box $P5010, $I5001
    set $P5009, $P5010
    unless $I5001 goto if1264_end3643 
.annotate 'line', 1742
    set $P5005, _lex_param_0["EXPORTHOW"]
    unless_null $P5005, fallback3644
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5005, $P5006
  fallback3644:
    get_who $P5004, $P5005
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next3648:
    unless $P5003, for_done3650
    shift $P5008, $P5003
  for_redo3649:
    .const 'Sub' $P5007 = 'cuid_417_1347719921.536' 
    capture_lex $P5007
    $P5001 = $P5007($P5008)
    goto for_next3648
  for_done3650:
    set $P5009, $P5001
  if1264_end3643:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_417_1347719921.536") :anon :lex :outer("cuid_418_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1743
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_dynamic_lex $P5001, "%*HOW"
    unless_null $P5001, fallback3645
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["%HOW"]
    unless_null $P5002, fallback3646
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HOW"], $P5007
    set $P5002, $P5007
  fallback3646:
    unless_null $P5002, vivi_12653647
    die "Contextual %*HOW not found"
    box $P5008, "Contextual %*HOW not found"
    set $P5002, $P5008
  vivi_12653647:
    set $P5001, $P5002
  fallback3645:
.annotate 'line', 1744
    $P5009 = _lex_param_0."key"()
    set $S5001, $P5009
    $P5010 = _lex_param_0."value"()
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "set_block_handler" :subid("cuid_419_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1852
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$/", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$type", _lex_param_2 
    find_dynamic_lex $P5001, "%*HANDLERS"
    unless_null $P5001, fallback3653
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback3654
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback3654:
    unless_null $P5002, vivi_12673655
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_12673655:
    set $P5001, $P5002
  fallback3653:
    set $S5001, _lex_param_2
    exists $I5001, $P5001[$S5001]
    box $P5011, $I5001
    set $P5010, $P5011
    unless $I5001 goto if1266_end3652 
.annotate 'line', 1853
    set $S5004, _lex_param_2
    concat $S5003, "Duplicate ", $S5004
    concat $S5002, $S5003, " handler in block"
    box $P5009, $S5002
    die $P5009
    set $P5010, $P5009
  if1266_end3652:
.annotate 'line', 1856
    $P5012 = _lex_param_1."arity"()
    set $P5042, $P5012
    if $P5012 goto unless1268_end3657 
.annotate 'line', 1857
.annotate 'line', 1858
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Op"]
    unless_null $P5013, fallback3658
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5013, $P5017
  fallback3658:
.annotate 'line', 1859
    get_hll_global $P5021, "GLOBAL"
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["Var"]
    unless_null $P5018, fallback3659
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5018, $P5022
  fallback3659:
    $P5023 = $P5018."new"("lexical" :named("scope"), "$!" :named("name"), "var" :named("decl"))
.annotate 'line', 1860
    get_hll_global $P5027, "GLOBAL"
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Var"]
    unless_null $P5024, fallback3660
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5024, $P5028
  fallback3660:
    $P5029 = $P5024."new"("lexical" :named("scope"), "$_" :named("name"))
    $P5030 = $P5013."new"($P5023, $P5029, "bind" :named("op"))
    $P5031 = _lex_param_1."unshift"($P5030)
.annotate 'line', 1863
    get_hll_global $P5035, "GLOBAL"
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback3661
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5032, $P5036
  fallback3661:
    $P5037 = $P5032."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5038 = _lex_param_1."unshift"($P5037)
.annotate 'line', 1864
    $P5039 = _lex_param_1."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1865
    $P5040 = _lex_param_1."symbol"("$!", "lexical" :named("scope"))
.annotate 'line', 1866
    $P5041 = _lex_param_1."arity"(1)
    set $P5042, $P5041
  unless1268_end3657:
.annotate 'line', 1868
    $P5043 = _lex_param_1."blocktype"("declaration")
    find_dynamic_lex $P5044, "%*HANDLERS"
    unless_null $P5044, fallback3662
    get_hll_global $P5047, "GLOBAL"
    get_who $P5046, $P5047
    set $P5045, $P5046["%HANDLERS"]
    unless_null $P5045, fallback3663
    get_hll_global $P5049, "GLOBAL"
    get_who $P5048, $P5049
    new $P5050, 'Hash'
    set $P5048["%HANDLERS"], $P5050
    set $P5045, $P5050
  fallback3663:
    unless_null $P5045, vivi_12693664
    die "Contextual %*HANDLERS not found"
    box $P5051, "Contextual %*HANDLERS not found"
    set $P5045, $P5051
  vivi_12693664:
    set $P5044, $P5045
  fallback3662:
    set $S5005, _lex_param_2
.annotate 'line', 1869
    get_hll_global $P5055, "GLOBAL"
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["Stmts"]
    unless_null $P5052, fallback3665
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5052, $P5056
  fallback3665:
.annotate 'line', 1870
    get_hll_global $P5060, "GLOBAL"
    nqp_get_package_through_who $P5059, $P5060, "QAST"
    get_who $P5058, $P5059
    set $P5057, $P5058["Op"]
    unless_null $P5057, fallback3666
    nqp_get_sc_object $P5061, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5057, $P5061
  fallback3666:
.annotate 'line', 1872
    get_hll_global $P5065, "GLOBAL"
    nqp_get_package_through_who $P5064, $P5065, "QAST"
    get_who $P5063, $P5064
    set $P5062, $P5063["Op"]
    unless_null $P5062, fallback3667
    nqp_get_sc_object $P5066, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5062, $P5066
  fallback3667:
    $P5067 = $P5062."new"("exception" :named("op"))
    $P5068 = $P5057."new"(_lex_param_1, $P5067, "call" :named("op"))
.annotate 'line', 1874
    get_hll_global $P5072, "GLOBAL"
    nqp_get_package_through_who $P5071, $P5072, "QAST"
    get_who $P5070, $P5071
    set $P5069, $P5070["Op"]
    unless_null $P5069, fallback3668
    nqp_get_sc_object $P5073, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5069, $P5073
  fallback3668:
.annotate 'line', 1876
    get_hll_global $P5077, "GLOBAL"
    nqp_get_package_through_who $P5076, $P5077, "QAST"
    get_who $P5075, $P5076
    set $P5074, $P5075["Op"]
    unless_null $P5074, fallback3669
    nqp_get_sc_object $P5078, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5074, $P5078
  fallback3669:
    $P5079 = $P5074."new"("exception" :named("op"))
.annotate 'line', 1877
    get_hll_global $P5083, "GLOBAL"
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["SVal"]
    unless_null $P5080, fallback3670
    nqp_get_sc_object $P5084, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5080, $P5084
  fallback3670:
    $P5085 = $P5080."new"("handled" :named("value"))
.annotate 'line', 1878
    get_hll_global $P5089, "GLOBAL"
    nqp_get_package_through_who $P5088, $P5089, "QAST"
    get_who $P5087, $P5088
    set $P5086, $P5087["IVal"]
    unless_null $P5086, fallback3671
    nqp_get_sc_object $P5090, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5086, $P5090
  fallback3671:
    $P5091 = $P5086."new"(1 :named("value"))
    $P5092 = $P5069."new"($P5079, $P5085, $P5091, "bindkey_i" :named("op"))
.annotate 'line', 1880
    $P5093 = "&default_for"("$")
    $P5094 = $P5052."new"($P5068, $P5092, $P5093)
    set $P5044[$S5005], $P5094
    .return ($P5094) 
.end
.HLL "nqp"
.namespace []
.sub "only_star_block" :subid("cuid_420_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2433
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 2434
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback3672
    get_hll_global $P5005, "GLOBAL"
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback3673
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5006
  fallback3673:
    unless_null $P5003, vivi_12703674
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_12703674:
    set $P5002, $P5003
  fallback3672:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
.annotate 'line', 2435
    get_hll_global $P5012, "GLOBAL"
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback3675
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5013
  fallback3675:
    $P5014 = $P5009."new"("nqpmultidispatch" :named("op"))
    $P5015 = $P101."push"($P5014)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "attach_multi_signature" :subid("cuid_422_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2439
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5020 = 'cuid_421_1347719921.536' 
    capture_lex $P5020 
    .lex "$types", $P101 
    .lex "$definednesses", $P102 
    .lex "$code_obj", _lex_param_0 
    .lex "$routine", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    new $P5003, 'ResizablePMCArray'
    set $P101, $P5003
    new $P5004, 'ResizablePMCArray'
    set $P102, $P5004
    set $P5008, _lex_param_1[0]
    unless_null $P5008, fallback3676
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5009
  fallback3676:
    $P5010 = $P5008."list"()
    set $P5005, $P5010
    iter $P5007, $P5010
  for_next3690:
    unless $P5007, for_done3692
    shift $P5012, $P5007
  for_redo3691:
    .const 'Sub' $P5011 = 'cuid_421_1347719921.536' 
    capture_lex $P5011
    $P5005 = $P5011($P5012)
    goto for_next3690
  for_done3692:
.annotate 'line', 2451
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback3693
    get_hll_global $P5016, "GLOBAL"
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback3694
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5014, $P5017
  fallback3694:
    unless_null $P5014, vivi_12763695
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_12763695:
    set $P5013, $P5014
  fallback3693:
    $P5019 = $P5013."set_routine_signature"(_lex_param_0, $P101, $P102)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_421_1347719921.536") :anon :lex :outer("cuid_422_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2442
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3681
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback3681:
    type_check $I5001, _lex_param_0, $P5001
    set $I5003, $I5001
    unless $I5001 goto if1272_end3680 
.annotate 'line', 2443
    $P5006 = _lex_param_0."decl"()
    set $S5001, $P5006
    iseq $I5002, $S5001, "param"
    set $I5003, $I5002
  if1272_end3680:
    box $P5021, $I5003
    set $P5020, $P5021
    unless $I5003 goto if1271_end3678 
.annotate 'line', 2444
    find_lex $P5007, "$types"
    $P5008 = _lex_param_0."returns"()
    get_id $I5005, $P5008
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    get_id $I5006, $P5009
    iseq $I5004, $I5005, $I5006
    unless $I5004 goto if1273_else3682 
    null $P5010
    set $P5012, $P5010
    goto if1273_end3683
  if1273_else3682:
.annotate 'line', 2446
    $P5011 = _lex_param_0."returns"()
    set $P5012, $P5011
  if1273_end3683:
    $P5013 = $P5007."push"($P5012)
.annotate 'line', 2447
    find_lex $P5014, "$definednesses"
    set $P5015, _lex_param_0["definedness"]
    unless_null $P5015, fallback3686
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5015, $P5016
  fallback3686:
    set $S5002, $P5015
    iseq $I5007, $S5002, "D"
    unless $I5007 goto if1274_else3684 
    set $I5010, 1
    goto if1274_end3685
  if1274_else3684:
    set $P5017, _lex_param_0["definedness"]
    unless_null $P5017, fallback3689
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5017, $P5018
  fallback3689:
    set $S5003, $P5017
    iseq $I5008, $S5003, "U"
    unless $I5008 goto if1275_else3687 
    set $I5009, 2
    goto if1275_end3688
  if1275_else3687:
    set $I5009, 0
  if1275_end3688:
    set $I5010, $I5009
  if1274_end3685:
    $P5019 = $P5014."push"($I5010)
    set $P5020, $P5019
  if1271_end3678:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "wrap_return_handler" :subid("cuid_423_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2454
    .param pmc _lex_param_0 
    .lex "$past", _lex_param_0 
.annotate 'line', 2455
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3696
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback3696:
    $P5006 = $P5001."new"(_lex_param_0, "lexotic" :named("op"), "RETURN" :named("name"))
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "lexical_package_lookup" :subid("cuid_428_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2903
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5076 = 'cuid_426_1347719921.536' 
    capture_lex $P5076 
    .lex "$final_name", $P101 
    .lex "$lookup", $P102 
    .lex "@name", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_3697
    .lex "RETURN", $P103
    set $N5001, _lex_param_0
    set $N5002, 0
    iseq $I5001, $N5001, $N5002
    box $P5006, $I5001
    set $P5005, $P5006
    unless $I5001 goto if1277_end3700 
.annotate 'line', 2905
    $P5003 = _lex_param_1."CURSOR"()
    $P5004 = $P5003."panic"("Cannot compile empty name")
    set $P5005, $P5004
  if1277_end3700:
.annotate 'line', 2909
    $P5007 = _lex_param_0."pop"()
    set $P101, $P5007
.annotate 'line', 2910
    get_hll_global $P5011, "GLOBAL"
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["VarWithFallback"]
    unless_null $P5008, fallback3701
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5012
  fallback3701:
.annotate 'line', 2912
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["SVal"]
    unless_null $P5013, fallback3702
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5013, $P5017
  fallback3702:
    set $S5001, $P101
    $P5018 = $P5013."new"($S5001 :named("value"))
    $P5019 = $P5008."new"($P5018, "associative" :named("scope"))
    set $P102, $P5019
    set $N5003, _lex_param_0
    set $N5004, 0
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1278_else3703 
.annotate 'line', 2917
.annotate 'line', 2918
    get_hll_global $P5023, "GLOBAL"
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback3705
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5020, $P5024
  fallback3705:
.annotate 'line', 2920
    get_hll_global $P5028, "GLOBAL"
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Var"]
    unless_null $P5025, fallback3706
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5025, $P5029
  fallback3706:
    $P5030 = $P5025."new"("$?PACKAGE" :named("name"), "lexical" :named("scope"))
    $P5031 = $P5020."new"($P5030, "who" :named("op"))
    $P5032 = $P102."unshift"($P5031)
.annotate 'line', 2922
    get_hll_global $P5036, "GLOBAL"
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Op"]
    unless_null $P5033, fallback3707
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5033, $P5037
  fallback3707:
.annotate 'line', 2924
    get_hll_global $P5041, "GLOBAL"
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Op"]
    unless_null $P5038, fallback3708
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5038, $P5042
  fallback3708:
.annotate 'line', 2926
    get_hll_global $P5046, "GLOBAL"
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Op"]
    unless_null $P5043, fallback3709
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5043, $P5047
  fallback3709:
.annotate 'line', 2928
    get_hll_global $P5051, "GLOBAL"
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["VM"]
    unless_null $P5048, fallback3710
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5048, $P5052
  fallback3710:
.annotate 'line', 2929
    get_hll_global $P5056, "GLOBAL"
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["SVal"]
    unless_null $P5053, fallback3711
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5053, $P5057
  fallback3711:
    $P5058 = $P5053."new"("GLOBAL" :named("value"))
    $P5059 = $P5048."new"($P5058, "get_hll_global Ps" :named("pirop"))
    $P5060 = $P5043."new"($P5059, "who" :named("op"))
.annotate 'line', 2931
    get_hll_global $P5064, "GLOBAL"
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["SVal"]
    unless_null $P5061, fallback3712
    nqp_get_sc_object $P5065, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5061, $P5065
  fallback3712:
    set $S5002, $P101
    $P5066 = $P5061."new"($S5002 :named("value"))
    $P5067 = $P5038."new"($P5060, $P5066, "atkey" :named("op"))
.annotate 'line', 2933
    set $S5004, $P101
    substr $S5003, $S5004, 0, 1
    $P5068 = "&default_for"($S5003)
    $P5069 = $P5033."new"($P5067, $P5068, "ifnull" :named("op"))
    $P5070 = $P102."fallback"($P5069)
    set $P5073, $P5070
    goto if1278_end3704
  if1278_else3703:
    .const 'Sub' $P5071 = 'cuid_426_1347719921.536' 
    capture_lex $P5071
    $P5072 = $P5071()
    set $P5073, $P5072
  if1278_end3704:
    find_lex $P5074, "RETURN"
    $P5075 = $P5074($P102)
    goto lexotic_3698
  lexotic_3697:
    .get_results ($P5075)
  lexotic_3698:
    .return ($P5075) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_426_1347719921.536") :anon :lex :outer("cuid_428_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2939
    .const 'Sub' $P5070 = 'cuid_425_1347719921.536' 
    capture_lex $P5070 
    .const 'Sub' $P5070 = 'cuid_427_1347719921.536' 
    capture_lex $P5070 
    .lex "$path", $P101 
    .lex "$sigil", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
.annotate 'line', 2941
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback3715
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback3716
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5007
  fallback3716:
    unless_null $P5004, vivi_12803717
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_12803717:
    set $P5003, $P5004
  fallback3715:
    find_lex $P5010, "@name"
    set $P5009, $P5010[0]
    unless_null $P5009, fallback3718
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5011
  fallback3718:
    $P5012 = $P5003."is_lexical"($P5009)
    unless $P5012 goto if1279_else3713 
    .const 'Sub' $P5013 = 'cuid_425_1347719921.536' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5027, $P5014
    goto if1279_end3714
  if1279_else3713:
.annotate 'line', 2950
.annotate 'line', 2951
    get_hll_global $P5018, "GLOBAL"
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["VM"]
    unless_null $P5015, fallback3726
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5015, $P5019
  fallback3726:
.annotate 'line', 2952
    get_hll_global $P5023, "GLOBAL"
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["SVal"]
    unless_null $P5020, fallback3727
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5020, $P5024
  fallback3727:
    $P5025 = $P5020."new"("GLOBAL" :named("value"))
    $P5026 = $P5015."new"($P5025, "get_hll_global Ps" :named("pirop"))
    set $P101, $P5026
    set $P5027, $P101
  if1279_end3714:
    find_lex $P5029, "@name"
    set $P5028, $P5029[0]
    unless_null $P5028, fallback3730
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5028, $P5030
  fallback3730:
    set $S5001, $P5028
    iseq $I5001, $S5001, "GLOBAL"
    box $P5034, $I5001
    set $P5033, $P5034
    unless $I5001 goto if1284_end3729 
.annotate 'line', 2954
.annotate 'line', 2955
    find_lex $P5031, "@name"
    $P5032 = $P5031."shift"()
    set $P5033, $P5032
  if1284_end3729:
    find_lex $P5038, "@name"
    set $P5035, $P5038
    iter $P5037, $P5038
  for_next3733:
    unless $P5037, for_done3735
    shift $P5040, $P5037
  for_redo3734:
    .const 'Sub' $P5039 = 'cuid_427_1347719921.536' 
    capture_lex $P5039
    $P5035 = $P5039($P5040)
    goto for_next3733
  for_done3735:
.annotate 'line', 2962
    find_lex $P5041, "$lookup"
    get_hll_global $P5045, "GLOBAL"
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback3736
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5042, $P5046
  fallback3736:
    $P5047 = $P5042."new"($P101, "who" :named("op"))
    $P5048 = $P5041."unshift"($P5047)
    find_lex $P5049, "$final_name"
    set $S5003, $P5049
    substr $S5002, $S5003, 0, 1
    box $P5050, $S5002
    set $P102, $P5050
    set $S5004, $P102
    iseq $I5002, $S5004, "@"
    set $I5004, $I5002
    if $I5002 goto unless1286_end3740 
    set $S5005, $P102
    iseq $I5003, $S5005, "%"
    set $I5004, $I5003
  unless1286_end3740:
    unless $I5004 goto if1285_else3737 
.annotate 'line', 2964
.annotate 'line', 2965
    find_lex $P5051, "$lookup"
    get_hll_global $P5055, "GLOBAL"
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["Op"]
    unless_null $P5052, fallback3741
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5052, $P5056
  fallback3741:
    find_lex $P5058, "$lookup"
    set $P5057, $P5058[0]
    unless_null $P5057, fallback3742
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5057, $P5059
  fallback3742:
    find_lex $P5061, "$lookup"
    set $P5060, $P5061[1]
    unless_null $P5060, fallback3743
    nqp_get_sc_object $P5062, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5060, $P5062
  fallback3743:
.annotate 'line', 2969
    $P5063 = "&default_for"($P102)
    $P5064 = $P5052."new"($P5057, $P5060, $P5063, "bindkey" :named("op"))
    $P5065 = $P5051."fallback"($P5064)
    set $P5069, $P5065
    goto if1285_end3738
  if1285_else3737:
.annotate 'line', 2972
.annotate 'line', 2973
    find_lex $P5066, "$lookup"
    $P5067 = "&default_for"($P102)
    $P5068 = $P5066."fallback"($P5067)
    set $P5069, $P5068
  if1285_end3738:
    .return ($P5069) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_425_1347719921.536") :anon :lex :outer("cuid_426_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2942
    .const 'Sub' $P5021 = 'cuid_424_1347719921.536' 
    capture_lex $P5021 
    .lex "$first", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    new $P5019, 'ExceptionHandler'
    set_label $P5019, catch_handler_12833724
    $P5019.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5019
.annotate 'line', 2943
    find_lex $P5002, "@name"
    $P5003 = $P5002."shift"()
    set $P101, $P5003
.annotate 'line', 2944
    get_hll_global $P5007, "GLOBAL"
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["WVal"]
    unless_null $P5004, fallback3719
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5008
  fallback3719:
    find_dynamic_lex $P5009, "$*W"
    unless_null $P5009, fallback3720
    get_hll_global $P5012, "GLOBAL"
    get_who $P5011, $P5012
    set $P5010, $P5011["$W"]
    unless_null $P5010, fallback3721
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5013
  fallback3721:
    unless_null $P5010, vivi_12813722
    die "Contextual $*W not found"
    box $P5014, "Contextual $*W not found"
    set $P5010, $P5014
  vivi_12813722:
    set $P5009, $P5010
  fallback3720:
    new $P5015, 'ResizablePMCArray'
    push $P5015, $P101
    $P5016 = $P5009."find_sym"($P5015)
    $P5017 = $P5004."new"($P5016 :named("value"))
    store_lex "$path", $P5017
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5020, $P5018
    pop_eh 
    goto skip_handler_12823723
  catch_handler_12833724:
    .get_results ($P5019) 
    .const 'Sub' $P10001 = 'cuid_424_1347719921.536' 
    capture_lex $P10001
    $P10002 = $P10001($P5019)
    set $I10001, 1
    set $P5019["handled"], $I10001
    nqp_get_sc_object $P10003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    finalize $P5019
    pop_upto_eh $P5019
    pop_eh 
    set $P5020, $P10003
    goto skip_handler_12823723
  skip_handler_12823723:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_424_1347719921.536") :anon :lex :outer("cuid_425_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2945
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 2946
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3725
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback3725:
    find_lex $P5006, "$first"
    $P5007 = $P5001."new"($P5006 :named("name"), "lexical" :named("scope"))
    store_lex "$path", $P5007
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_427_1347719921.536") :anon :lex :outer("cuid_426_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2957
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2958
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback3731
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback3731:
    find_lex $P5006, "$path"
.annotate 'line', 2960
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["SVal"]
    unless_null $P5007, fallback3732
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5011
  fallback3732:
    set $S5001, _lex_param_0
    $P5012 = $P5007."new"($S5001 :named("value"))
    $P5013 = $P5001."new"($P5006, $P5012, "nqp_get_package_through_who PPs" :named("pirop"))
    store_lex "$path", $P5013
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_244_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1520
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback3744
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback3744:
    set $P5001, _lex_param_1["comp_unit"]
    unless_null $P5001, fallback3745
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback3745:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_245_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1522
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1523
    unless_null _lex_param_1, fallback3748
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback3748:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback3749
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback3749:
    unless $P5001 goto if1287_else3746 
    unless_null _lex_param_1, fallback3750
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5005
  fallback3750:
    set $P5004, _lex_param_1["identifier"]
    unless_null $P5004, fallback3751
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5006
  fallback3751:
    set $S5006, $P5004
    concat $S5005, $S5006, ":"
.annotate 'line', 1524
    unless_null _lex_param_1, fallback3752
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5009
  fallback3752:
    set $P5008, _lex_param_1["colonpair"]
    unless_null $P5008, fallback3753
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5010
  fallback3753:
    set $P5007, $P5008[0]
    unless_null $P5007, fallback3754
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5011
  fallback3754:
    $P5012 = $P5007."ast"()
    $P5013 = $P5012."named"()
    set $S5007, $P5013
    concat $S5004, $S5005, $S5007
    concat $S5003, $S5004, "<"
.annotate 'line', 1525
    unless_null _lex_param_1, fallback3755
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5016
  fallback3755:
    set $P5015, _lex_param_1["colonpair"]
    unless_null $P5015, fallback3756
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5015, $P5017
  fallback3756:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback3757
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5014, $P5018
  fallback3757:
    $P5019 = $P5014."ast"()
    $P5020 = "&colonpair_str"($P5019)
    set $S5008, $P5020
    concat $S5002, $S5003, $S5008
    concat $S5001, $S5002, ">"
    set $S5010, $S5001
    goto if1287_end3747
  if1287_else3746:
    set $S5009, _lex_param_1
    set $S5010, $S5009
  if1287_end3747:
    $P5021 = _lex_param_1."!make"($S5010)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_246_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1540
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$mainline", $P101 
    .lex "$unit", $P102 
    .lex "$global_install", $P103 
    .lex "$main_tasks", $P104 
    .lex "$compunit", $P105 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P105, $P5005
.annotate 'line', 1541
    unless_null _lex_param_1, fallback3758
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5007
  fallback3758:
    set $P5006, _lex_param_1["statementlist"]
    unless_null $P5006, fallback3759
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5008
  fallback3759:
    $P5009 = $P5006."ast"()
    set $P101, $P5009
.annotate 'line', 1542
    find_dynamic_lex $P5010, "$*W"
    unless_null $P5010, fallback3760
    get_hll_global $P5013, "GLOBAL"
    get_who $P5012, $P5013
    set $P5011, $P5012["$W"]
    unless_null $P5011, fallback3761
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5014
  fallback3761:
    unless_null $P5011, vivi_12883762
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5011, $P5015
  vivi_12883762:
    set $P5010, $P5011
  fallback3760:
    $P5016 = $P5010."pop_lexpad"()
    set $P102, $P5016
.annotate 'line', 1547
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["VM"]
    unless_null $P5017, fallback3763
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5017, $P5021
  fallback3763:
.annotate 'line', 1549
    get_hll_global $P5025, "GLOBAL"
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["SVal"]
    unless_null $P5022, fallback3764
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5022, $P5026
  fallback3764:
    $P5027 = $P5022."new"("GLOBAL" :named("value"))
.annotate 'line', 1550
    get_hll_global $P5031, "GLOBAL"
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["WVal"]
    unless_null $P5028, fallback3765
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5028, $P5032
  fallback3765:
    find_dynamic_lex $P5033, "$*PACKAGE"
    unless_null $P5033, fallback3766
    get_hll_global $P5036, "GLOBAL"
    get_who $P5035, $P5036
    set $P5034, $P5035["$PACKAGE"]
    unless_null $P5034, fallback3767
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5034, $P5037
  fallback3767:
    unless_null $P5034, vivi_12893768
    die "Contextual $*PACKAGE not found"
    box $P5038, "Contextual $*PACKAGE not found"
    set $P5034, $P5038
  vivi_12893768:
    set $P5033, $P5034
  fallback3766:
    $P5039 = $P5028."new"($P5033 :named("value"))
    $P5040 = $P5017."new"($P5027, $P5039, "set_hll_global vsP" :named("pirop"))
    set $P103, $P5040
.annotate 'line', 1552
    find_dynamic_lex $P5041, "$*W"
    unless_null $P5041, fallback3769
    get_hll_global $P5044, "GLOBAL"
    get_who $P5043, $P5044
    set $P5042, $P5043["$W"]
    unless_null $P5042, fallback3770
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5042, $P5045
  fallback3770:
    unless_null $P5042, vivi_12903771
    die "Contextual $*W not found"
    box $P5046, "Contextual $*W not found"
    set $P5042, $P5046
  vivi_12903771:
    set $P5041, $P5042
  fallback3769:
    $P5047 = $P5041."add_fixup_task"($P103 :named("deserialize_past"), $P103 :named("fixup_past"))
    find_dynamic_lex $P5048, "$*HAS_YOU_ARE_HERE"
    unless_null $P5048, fallback3774
    get_hll_global $P5051, "GLOBAL"
    get_who $P5050, $P5051
    set $P5049, $P5050["$HAS_YOU_ARE_HERE"]
    unless_null $P5049, fallback3775
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5049, $P5052
  fallback3775:
    unless_null $P5049, vivi_12923776
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5053, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5049, $P5053
  vivi_12923776:
    set $P5048, $P5049
  fallback3774:
    set $P5057, $P5048
    if $P5048 goto unless1291_end3773 
.annotate 'line', 1557
.annotate 'line', 1558
    nqp_decontainerize $P5054, _lex_param_0
    $P5055 = $P5054."CTXSAVE"()
    $P5056 = $P102."push"($P5055)
    set $P5057, $P5056
  unless1291_end3773:
.annotate 'line', 1565
    get_hll_global $P5061, "GLOBAL"
    nqp_get_package_through_who $P5060, $P5061, "QAST"
    get_who $P5059, $P5060
    set $P5058, $P5059["Var"]
    unless_null $P5058, fallback3777
    nqp_get_sc_object $P5062, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5058, $P5062
  fallback3777:
    $P5063 = $P5058."new"("lexical" :named("scope"), "@ARGS" :named("name"), "param" :named("decl"), 1 :named("slurpy"))
    $P5064 = $P102."unshift"($P5063)
.annotate 'line', 1566
    get_hll_global $P5068, "GLOBAL"
    nqp_get_package_through_who $P5067, $P5068, "QAST"
    get_who $P5066, $P5067
    set $P5065, $P5066["Stmts"]
    unless_null $P5065, fallback3778
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5065, $P5069
  fallback3778:
.annotate 'line', 1567
    get_hll_global $P5073, "GLOBAL"
    nqp_get_package_through_who $P5072, $P5073, "QAST"
    get_who $P5071, $P5072
    set $P5070, $P5071["VM"]
    unless_null $P5070, fallback3779
    nqp_get_sc_object $P5074, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5070, $P5074
  fallback3779:
.annotate 'line', 1569
    get_hll_global $P5078, "GLOBAL"
    nqp_get_package_through_who $P5077, $P5078, "QAST"
    get_who $P5076, $P5077
    set $P5075, $P5076["SVal"]
    unless_null $P5075, fallback3780
    nqp_get_sc_object $P5079, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5075, $P5079
  fallback3780:
    $P5080 = $P5075."new"("ModuleLoader.pbc" :named("value"))
    $P5081 = $P5070."new"($P5080, "load_bytecode vs" :named("pirop"))
.annotate 'line', 1571
    get_hll_global $P5085, "GLOBAL"
    nqp_get_package_through_who $P5084, $P5085, "QAST"
    get_who $P5083, $P5084
    set $P5082, $P5083["Op"]
    unless_null $P5082, fallback3781
    nqp_get_sc_object $P5086, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5082, $P5086
  fallback3781:
.annotate 'line', 1573
    get_hll_global $P5090, "GLOBAL"
    nqp_get_package_through_who $P5089, $P5090, "QAST"
    get_who $P5088, $P5089
    set $P5087, $P5088["VM"]
    unless_null $P5087, fallback3782
    nqp_get_sc_object $P5091, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5087, $P5091
  fallback3782:
.annotate 'line', 1575
    get_hll_global $P5095, "GLOBAL"
    nqp_get_package_through_who $P5094, $P5095, "QAST"
    get_who $P5093, $P5094
    set $P5092, $P5093["SVal"]
    unless_null $P5092, fallback3783
    nqp_get_sc_object $P5096, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5092, $P5096
  fallback3783:
    $P5097 = $P5092."new"("ModuleLoader" :named("value"))
    $P5098 = $P5087."new"($P5097, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 1577
    get_hll_global $P5102, "GLOBAL"
    nqp_get_package_through_who $P5101, $P5102, "QAST"
    get_who $P5100, $P5101
    set $P5099, $P5100["Op"]
    unless_null $P5099, fallback3784
    nqp_get_sc_object $P5103, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5099, $P5103
  fallback3784:
.annotate 'line', 1579
    get_hll_global $P5107, "GLOBAL"
    nqp_get_package_through_who $P5106, $P5107, "QAST"
    get_who $P5105, $P5106
    set $P5104, $P5105["VM"]
    unless_null $P5104, fallback3785
    nqp_get_sc_object $P5108, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5104, $P5108
  fallback3785:
    $P5109 = $P5104."new"("getinterp P" :named("pirop"))
.annotate 'line', 1580
    get_hll_global $P5113, "GLOBAL"
    nqp_get_package_through_who $P5112, $P5113, "QAST"
    get_who $P5111, $P5112
    set $P5110, $P5111["SVal"]
    unless_null $P5110, fallback3786
    nqp_get_sc_object $P5114, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5110, $P5114
  fallback3786:
    $P5115 = $P5110."new"("context" :named("value"))
    $P5116 = $P5099."new"($P5109, $P5115, "atkey" :named("op"))
    $P5117 = $P5082."new"($P5098, $P5116, "callmethod" :named("op"), "set_mainline_module" :named("name"))
    $P5118 = $P5065."new"($P5081, $P5117)
    set $P104, $P5118
    find_dynamic_lex $P5119, "$*MAIN_SUB"
    unless_null $P5119, fallback3789
    get_hll_global $P5122, "GLOBAL"
    get_who $P5121, $P5122
    set $P5120, $P5121["$MAIN_SUB"]
    unless_null $P5120, fallback3790
    nqp_get_sc_object $P5123, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5120, $P5123
  fallback3790:
    unless_null $P5120, vivi_12943791
    die "Contextual $*MAIN_SUB not found"
    box $P5124, "Contextual $*MAIN_SUB not found"
    set $P5120, $P5124
  vivi_12943791:
    set $P5119, $P5120
  fallback3789:
    set $P5150, $P5119
    unless $P5119 goto if1293_end3788 
.annotate 'line', 1584
.annotate 'line', 1585
    get_hll_global $P5128, "GLOBAL"
    nqp_get_package_through_who $P5127, $P5128, "QAST"
    get_who $P5126, $P5127
    set $P5125, $P5126["Op"]
    unless_null $P5125, fallback3792
    nqp_get_sc_object $P5129, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5125, $P5129
  fallback3792:
.annotate 'line', 1586
    get_hll_global $P5133, "GLOBAL"
    nqp_get_package_through_who $P5132, $P5133, "QAST"
    get_who $P5131, $P5132
    set $P5130, $P5131["BVal"]
    unless_null $P5130, fallback3793
    nqp_get_sc_object $P5134, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5130, $P5134
  fallback3793:
    find_dynamic_lex $P5135, "$*MAIN_SUB"
    unless_null $P5135, fallback3794
    get_hll_global $P5138, "GLOBAL"
    get_who $P5137, $P5138
    set $P5136, $P5137["$MAIN_SUB"]
    unless_null $P5136, fallback3795
    nqp_get_sc_object $P5139, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5136, $P5139
  fallback3795:
    unless_null $P5136, vivi_12953796
    die "Contextual $*MAIN_SUB not found"
    box $P5140, "Contextual $*MAIN_SUB not found"
    set $P5136, $P5140
  vivi_12953796:
    set $P5135, $P5136
  fallback3794:
    $P5141 = $P5130."new"($P5135 :named("value"))
.annotate 'line', 1587
    get_hll_global $P5145, "GLOBAL"
    nqp_get_package_through_who $P5144, $P5145, "QAST"
    get_who $P5143, $P5144
    set $P5142, $P5143["Var"]
    unless_null $P5142, fallback3797
    nqp_get_sc_object $P5146, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5142, $P5146
  fallback3797:
    $P5147 = $P5142."new"("lexical" :named("scope"), "@ARGS" :named("name"), 1 :named("flat"))
    $P5148 = $P5125."new"($P5141, $P5147, "call" :named("op"))
    $P5149 = $P104."push"($P5148)
    set $P5150, $P5149
  if1293_end3788:
.annotate 'line', 1590
    get_hll_global $P5154, "GLOBAL"
    nqp_get_package_through_who $P5153, $P5154, "QAST"
    get_who $P5152, $P5153
    set $P5151, $P5152["Op"]
    unless_null $P5151, fallback3798
    nqp_get_sc_object $P5155, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5151, $P5155
  fallback3798:
.annotate 'line', 1592
    get_hll_global $P5159, "GLOBAL"
    nqp_get_package_through_who $P5158, $P5159, "QAST"
    get_who $P5157, $P5158
    set $P5156, $P5157["Var"]
    unless_null $P5156, fallback3799
    nqp_get_sc_object $P5160, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5156, $P5160
  fallback3799:
    $P5161 = $P5156."new"("lexical" :named("scope"), "@ARGS" :named("name"))
    $P5162 = $P5151."new"($P5161, $P104, "if" :named("op"))
    $P5163 = $P101."push"($P5162)
.annotate 'line', 1597
    $P5164 = $P102."push"($P101)
.annotate 'line', 1600
    find_dynamic_lex $P5165, "$*W"
    unless_null $P5165, fallback3800
    get_hll_global $P5168, "GLOBAL"
    get_who $P5167, $P5168
    set $P5166, $P5167["$W"]
    unless_null $P5166, fallback3801
    nqp_get_sc_object $P5169, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5166, $P5169
  fallback3801:
    unless_null $P5166, vivi_12963802
    die "Contextual $*W not found"
    box $P5170, "Contextual $*W not found"
    set $P5166, $P5170
  vivi_12963802:
    set $P5165, $P5166
  fallback3800:
    $P5171 = $P5165."libs"()
    $P5172 = $P102."push"($P5171)
.annotate 'line', 1603
    get_hll_global $P5176, "GLOBAL"
    nqp_get_package_through_who $P5175, $P5176, "QAST"
    get_who $P5174, $P5175
    set $P5173, $P5174["CompUnit"]
    unless_null $P5173, fallback3803
    nqp_get_sc_object $P5177, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5173, $P5177
  fallback3803:
.annotate 'line', 1607
    find_dynamic_lex $P5178, "$*W"
    unless_null $P5178, fallback3804
    get_hll_global $P5181, "GLOBAL"
    get_who $P5180, $P5181
    set $P5179, $P5180["$W"]
    unless_null $P5179, fallback3805
    nqp_get_sc_object $P5182, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5179, $P5182
  fallback3805:
    unless_null $P5179, vivi_12973806
    die "Contextual $*W not found"
    box $P5183, "Contextual $*W not found"
    set $P5179, $P5183
  vivi_12973806:
    set $P5178, $P5179
  fallback3804:
    $P5184 = $P5178."sc"()
.annotate 'line', 1608
    find_dynamic_lex $P5185, "$*W"
    unless_null $P5185, fallback3807
    get_hll_global $P5188, "GLOBAL"
    get_who $P5187, $P5188
    set $P5186, $P5187["$W"]
    unless_null $P5186, fallback3808
    nqp_get_sc_object $P5189, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5186, $P5189
  fallback3808:
    unless_null $P5186, vivi_12983809
    die "Contextual $*W not found"
    box $P5190, "Contextual $*W not found"
    set $P5186, $P5190
  vivi_12983809:
    set $P5185, $P5186
  fallback3807:
    $P5191 = $P5185."code_ref_blocks"()
.annotate 'line', 1609
    find_dynamic_lex $P5192, "$*W"
    unless_null $P5192, fallback3810
    get_hll_global $P5195, "GLOBAL"
    get_who $P5194, $P5195
    set $P5193, $P5194["$W"]
    unless_null $P5193, fallback3811
    nqp_get_sc_object $P5196, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5193, $P5196
  fallback3811:
    unless_null $P5193, vivi_12993812
    die "Contextual $*W not found"
    box $P5197, "Contextual $*W not found"
    set $P5193, $P5197
  vivi_12993812:
    set $P5192, $P5193
  fallback3810:
    $P5198 = $P5192."is_precompilation_mode"()
.annotate 'line', 1610
    find_dynamic_lex $P5199, "$*W"
    unless_null $P5199, fallback3813
    get_hll_global $P5202, "GLOBAL"
    get_who $P5201, $P5202
    set $P5200, $P5201["$W"]
    unless_null $P5200, fallback3814
    nqp_get_sc_object $P5203, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5200, $P5203
  fallback3814:
    unless_null $P5200, vivi_13003815
    die "Contextual $*W not found"
    box $P5204, "Contextual $*W not found"
    set $P5200, $P5204
  vivi_13003815:
    set $P5199, $P5200
  fallback3813:
    $P5205 = $P5199."load_dependency_tasks"()
.annotate 'line', 1611
    find_dynamic_lex $P5206, "$*W"
    unless_null $P5206, fallback3816
    get_hll_global $P5209, "GLOBAL"
    get_who $P5208, $P5209
    set $P5207, $P5208["$W"]
    unless_null $P5207, fallback3817
    nqp_get_sc_object $P5210, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5207, $P5210
  fallback3817:
    unless_null $P5207, vivi_13013818
    die "Contextual $*W not found"
    box $P5211, "Contextual $*W not found"
    set $P5207, $P5211
  vivi_13013818:
    set $P5206, $P5207
  fallback3816:
    $P5212 = $P5206."fixup_tasks"()
.annotate 'line', 1616
    get_hll_global $P5216, "GLOBAL"
    nqp_get_package_through_who $P5215, $P5216, "QAST"
    get_who $P5214, $P5215
    set $P5213, $P5214["Op"]
    unless_null $P5213, fallback3819
    nqp_get_sc_object $P5217, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5213, $P5217
  fallback3819:
.annotate 'line', 1618
    get_hll_global $P5221, "GLOBAL"
    nqp_get_package_through_who $P5220, $P5221, "QAST"
    get_who $P5219, $P5220
    set $P5218, $P5219["BVal"]
    unless_null $P5218, fallback3820
    nqp_get_sc_object $P5222, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5218, $P5222
  fallback3820:
    $P5223 = $P5218."new"($P102 :named("value"))
    $P5224 = $P5213."new"($P5223, "call" :named("op"))
    $P5225 = $P5173."new"($P102, "nqp" :named("hll"), $P5184 :named("sc"), $P5191 :named("code_ref_blocks"), $P5198 :named("compilation_mode"), $P5205 :named("pre_deserialize"), $P5212 :named("post_deserialize"), $P5224 :named("load"))
    set $P105, $P5225
.annotate 'line', 1626
    $P5226 = _lex_param_1."!make"($P105)
    .return ($P5226) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_247_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1629
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5023 = 'cuid_429_1347719921.536' 
    capture_lex $P5023 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 1630
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback3821
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5006
  fallback3821:
    $P5007 = $P5002."new"(_lex_param_1 :named("node"))
    set $P101, $P5007
    unless_null _lex_param_1, fallback3824
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5009
  fallback3824:
    set $P5008, _lex_param_1["statement"]
    unless_null $P5008, fallback3825
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5010
  fallback3825:
    unless $P5008 goto if1302_else3822 
.annotate 'line', 1631
    unless_null _lex_param_1, fallback3826
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5015
  fallback3826:
    set $P5014, _lex_param_1["statement"]
    unless_null $P5014, fallback3827
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5014, $P5016
  fallback3827:
    set $P5011, $P5014
    iter $P5013, $P5014
  for_next3840:
    unless $P5013, for_done3842
    shift $P5018, $P5013
  for_redo3841:
    .const 'Sub' $P5017 = 'cuid_429_1347719921.536' 
    capture_lex $P5017
    $P5011 = $P5017($P5018)
    goto for_next3840
  for_done3842:
    set $P5021, $P5011
    goto if1302_end3823
  if1302_else3822:
.annotate 'line', 1640
.annotate 'line', 1641
    $P5019 = "&default_for"("$")
    $P5020 = $P101."push"($P5019)
    set $P5021, $P5020
  if1302_end3823:
.annotate 'line', 1643
    $P5022 = _lex_param_1."!make"($P101)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_429_1347719921.536") :anon :lex :outer("cuid_247_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1632
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 1633
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
    set $P5003, $P101["sink"]
    unless_null $P5003, fallback3830
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5004
  fallback3830:
    defined $I5001, $P5003
    box $P5008, $I5001
    set $P5007, $P5008
    unless $I5001 goto if1303_end3829 
    set $P5005, $P101["sink"]
    unless_null $P5005, fallback3831
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5005, $P5006
  fallback3831:
    set $P101, $P5005
    set $P5007, $P101
  if1303_end3829:
    set $P5009, $P101["bareblock"]
    unless_null $P5009, fallback3834
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5010
  fallback3834:
    set $P5014, $P5009
    unless $P5009 goto if1304_end3833 
.annotate 'line', 1635
    set $P5011, $P101[0]
    unless_null $P5011, fallback3835
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5012
  fallback3835:
    $P5013 = "&block_immediate"($P5011)
    set $P101, $P5013
    set $P5014, $P101
  if1304_end3833:
    get_hll_global $P5018, "GLOBAL"
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Node"]
    unless_null $P5015, fallback3838
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5015, $P5019
  fallback3838:
    type_check $I5002, $P101, $P5015
    box $P5027, $I5002
    set $P5026, $P5027
    unless $I5002 goto if1305_end3837 
.annotate 'line', 1636
    get_hll_global $P5023, "GLOBAL"
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Stmts"]
    unless_null $P5020, fallback3839
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5020, $P5024
  fallback3839:
    $P5025 = $P5020."new"($P101)
    set $P101, $P5025
    set $P5026, $P101
  if1305_end3837:
.annotate 'line', 1637
    find_lex $P5028, "$past"
    $P5029 = $P5028."push"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_248_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1646
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_3 :opt_flag 
    .const 'Sub' $P5019 = 'cuid_430_1347719921.536' 
    capture_lex $P5019 
    if haz_param_3, default3879
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_2, $P5018
  default3879:
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback3845
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5003
  fallback3845:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback3846
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5004
  fallback3846:
    unless $P5002 goto if1306_else3843 
    .const 'Sub' $P5005 = 'cuid_430_1347719921.536' 
    capture_lex $P5005
    $P5006 = $P5005()
    set $P5016, $P5006
    goto if1306_end3844
  if1306_else3843:
    unless_null _lex_param_1, fallback3875
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5008
  fallback3875:
    set $P5007, _lex_param_1["statement_control"]
    unless_null $P5007, fallback3876
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5009
  fallback3876:
    unless $P5007 goto if1310_else3873 
.annotate 'line', 1669
    unless_null _lex_param_1, fallback3877
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5011
  fallback3877:
    set $P5010, _lex_param_1["statement_control"]
    unless_null $P5010, fallback3878
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5012
  fallback3878:
    $P5013 = $P5010."ast"()
    set $P101, $P5013
    set $P5015, $P101
    goto if1310_end3874
  if1310_else3873:
.annotate 'line', 1670
    box $P5014, 0
    set $P101, $P5014
    set $P5015, $P101
  if1310_end3874:
    set $P5016, $P5015
  if1306_end3844:
.annotate 'line', 1671
    $P5017 = _lex_param_1."!make"($P101)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_430_1347719921.536") :anon :lex :outer("cuid_248_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1648
    .lex "$mc", $P101 
    .lex "$ml", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    find_lex $P5005, "$/"
    unless_null $P5005, fallback3847
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5005, $P5006
  fallback3847:
    set $P5004, $P5005["statement_mod_cond"]
    unless_null $P5004, fallback3848
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5007
  fallback3848:
    set $P5003, $P5004[0]
    unless_null $P5003, fallback3849
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5008
  fallback3849:
    set $P101, $P5003
    find_lex $P5011, "$/"
    unless_null $P5011, fallback3850
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5012
  fallback3850:
    set $P5010, $P5011["statement_mod_loop"]
    unless_null $P5010, fallback3851
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5013
  fallback3851:
    set $P5009, $P5010[0]
    unless_null $P5009, fallback3852
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5014
  fallback3852:
    set $P102, $P5009
.annotate 'line', 1651
    find_lex $P5016, "$/"
    unless_null $P5016, fallback3853
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5016, $P5017
  fallback3853:
    set $P5015, $P5016["EXPR"]
    unless_null $P5015, fallback3854
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5015, $P5018
  fallback3854:
    $P5019 = $P5015."ast"()
    store_lex "$past", $P5019
    set $P5033, $P101
    unless $P101 goto if1307_end3856 
.annotate 'line', 1652
.annotate 'line', 1653
    get_hll_global $P5023, "GLOBAL"
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback3857
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5020, $P5024
  fallback3857:
    set $P5025, $P101["cond"]
    unless_null $P5025, fallback3858
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5025, $P5026
  fallback3858:
    $P5027 = $P5025."ast"()
    find_lex $P5028, "$past"
    set $P5029, $P101["sym"]
    unless_null $P5029, fallback3859
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5029, $P5030
  fallback3859:
    set $S5001, $P5029
    find_lex $P5031, "$/"
    $P5032 = $P5020."new"($P5027, $P5028, $S5001 :named("op"), $P5031 :named("node"))
    store_lex "$past", $P5032
    set $P5033, $P5032
  if1307_end3856:
    set $P5080, $P102
    unless $P102 goto if1308_end3861 
.annotate 'line', 1655
    set $P5034, $P102["sym"]
    unless_null $P5034, fallback3864
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5034, $P5035
  fallback3864:
    set $S5002, $P5034
    iseq $I5001, $S5002, "for"
    unless $I5001 goto if1309_else3862 
.annotate 'line', 1656
.annotate 'line', 1657
    get_hll_global $P5039, "GLOBAL"
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Block"]
    unless_null $P5036, fallback3865
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5036, $P5040
  fallback3865:
.annotate 'line', 1658
    get_hll_global $P5044, "GLOBAL"
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback3866
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5041, $P5045
  fallback3866:
    $P5046 = $P5041."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    find_lex $P5047, "$past"
    $P5048 = $P5036."new"($P5046, $P5047, "immediate" :named("blocktype"))
    store_lex "$past", $P5048
.annotate 'line', 1660
    find_lex $P5049, "$past"
    $P5050 = $P5049."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1661
    find_lex $P5051, "$past"
    $P5052 = $P5051."arity"(1)
.annotate 'line', 1662
    get_hll_global $P5056, "GLOBAL"
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["Op"]
    unless_null $P5053, fallback3867
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5053, $P5057
  fallback3867:
    set $P5058, $P102["cond"]
    unless_null $P5058, fallback3868
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5058, $P5059
  fallback3868:
    $P5060 = $P5058."ast"()
    find_lex $P5061, "$past"
    set $P5062, $P102["sym"]
    unless_null $P5062, fallback3869
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5062, $P5063
  fallback3869:
    set $S5003, $P5062
    find_lex $P5064, "$/"
    $P5065 = $P5053."new"($P5060, $P5061, $S5003 :named("op"), $P5064 :named("node"))
    store_lex "$past", $P5065
    set $P5079, $P5065
    goto if1309_end3863
  if1309_else3862:
.annotate 'line', 1664
.annotate 'line', 1665
    get_hll_global $P5069, "GLOBAL"
    nqp_get_package_through_who $P5068, $P5069, "QAST"
    get_who $P5067, $P5068
    set $P5066, $P5067["Op"]
    unless_null $P5066, fallback3870
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5066, $P5070
  fallback3870:
    set $P5071, $P102["cond"]
    unless_null $P5071, fallback3871
    nqp_get_sc_object $P5072, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5071, $P5072
  fallback3871:
    $P5073 = $P5071."ast"()
    find_lex $P5074, "$past"
    set $P5075, $P102["sym"]
    unless_null $P5075, fallback3872
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5075, $P5076
  fallback3872:
    set $S5004, $P5075
    find_lex $P5077, "$/"
    $P5078 = $P5066."new"($P5073, $P5074, $S5004 :named("op"), $P5077 :named("node"))
    store_lex "$past", $P5078
    set $P5079, $P5078
  if1309_end3863:
    set $P5080, $P5079
  if1308_end3861:
    .return ($P5080) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_249_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1674
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1675
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3880
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback3880:
    unless_null _lex_param_1, fallback3881
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5007
  fallback3881:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback3882
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5008
  fallback3882:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback3883
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5011
  fallback3883:
    set $P5010, _lex_param_1["pblock"]
    unless_null $P5010, fallback3884
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5012
  fallback3884:
    $P5013 = $P5010."ast"()
    $P5014 = $P5001."new"($P5009, $P5013, "if" :named("op"), _lex_param_1 :named("node"))
    $P5015 = _lex_param_1."!make"($P5014)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_250_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1678
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1679
    unless_null _lex_param_1, fallback3885
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback3885:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback3886
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback3886:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_251_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1682
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1683
    unless_null _lex_param_1, fallback3887
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback3887:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback3888
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback3888:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_252_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1686
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_432_1347719921.536' 
    capture_lex $P5030 
    .lex "$BLOCK", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 1687
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback3889
    get_hll_global $P5005, "GLOBAL"
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback3890
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5006
  fallback3890:
    unless_null $P5003, vivi_13113891
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13113891:
    set $P5002, $P5003
  fallback3889:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
    unless_null _lex_param_1, fallback3894
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5010
  fallback3894:
    set $P5009, _lex_param_1["statementlist"]
    unless_null $P5009, fallback3895
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5011
  fallback3895:
    unless $P5009 goto if1312_else3892 
    .const 'Sub' $P5012 = 'cuid_432_1347719921.536' 
    capture_lex $P5012
    $P5013 = $P5012()
    set $P5029, $P5013
    goto if1312_end3893
  if1312_else3892:
.annotate 'line', 1702
    find_dynamic_lex $P5014, "$*HAS_YOU_ARE_HERE"
    unless_null $P5014, fallback3920
    get_hll_global $P5017, "GLOBAL"
    get_who $P5016, $P5017
    set $P5015, $P5016["$HAS_YOU_ARE_HERE"]
    unless_null $P5015, fallback3921
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5015, $P5018
  fallback3921:
    unless_null $P5015, vivi_13203922
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5019, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5015, $P5019
  vivi_13203922:
    set $P5014, $P5015
  fallback3920:
    set $P5022, $P5014
    unless $P5014 goto if1319_end3919 
.annotate 'line', 1703
.annotate 'line', 1704
    $P5020 = _lex_param_1."CURSOR"()
    $P5021 = $P5020."panic"("{YOU_ARE_HERE} may only appear once in a setting")
    set $P5022, $P5021
  if1319_end3919:
    box $P5023, 1
    store_dynamic_lex "$*HAS_YOU_ARE_HERE", $P5023
.annotate 'line', 1707
    unless_null _lex_param_1, fallback3923
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5025
  fallback3923:
    set $P5024, _lex_param_1["you_are_here"]
    unless_null $P5024, fallback3924
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5024, $P5026
  fallback3924:
    $P5027 = $P5024."ast"()
    $P5028 = _lex_param_1."!make"($P5027)
    set $P5029, $P5028
  if1312_end3893:
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_432_1347719921.536") :anon :lex :outer("cuid_252_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1688
    .const 'Sub' $P5061 = 'cuid_431_1347719921.536' 
    capture_lex $P5061 
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 1689
    find_lex $P5003, "$/"
    unless_null $P5003, fallback3896
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5004
  fallback3896:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback3897
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5005
  fallback3897:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    find_dynamic_lex $P5007, "%*HANDLERS"
    unless_null $P5007, fallback3900
    get_hll_global $P5010, "GLOBAL"
    get_who $P5009, $P5010
    set $P5008, $P5009["%HANDLERS"]
    unless_null $P5008, fallback3901
    get_hll_global $P5012, "GLOBAL"
    get_who $P5011, $P5012
    new $P5013, 'Hash'
    set $P5011["%HANDLERS"], $P5013
    set $P5008, $P5013
  fallback3901:
    unless_null $P5008, vivi_13143902
    die "Contextual %*HANDLERS not found"
    box $P5014, "Contextual %*HANDLERS not found"
    set $P5008, $P5014
  vivi_13143902:
    set $P5007, $P5008
  fallback3900:
    set $P5034, $P5007
    unless $P5007 goto if1313_end3899 
.annotate 'line', 1690
.annotate 'line', 1691
    get_hll_global $P5018, "GLOBAL"
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback3903
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5015, $P5019
  fallback3903:
    $P5020 = $P5015."new"($P101, "handle" :named("op"))
    set $P101, $P5020
    find_dynamic_lex $P5024, "%*HANDLERS"
    unless_null $P5024, fallback3904
    get_hll_global $P5027, "GLOBAL"
    get_who $P5026, $P5027
    set $P5025, $P5026["%HANDLERS"]
    unless_null $P5025, fallback3905
    get_hll_global $P5029, "GLOBAL"
    get_who $P5028, $P5029
    new $P5030, 'Hash'
    set $P5028["%HANDLERS"], $P5030
    set $P5025, $P5030
  fallback3905:
    unless_null $P5025, vivi_13153906
    die "Contextual %*HANDLERS not found"
    box $P5031, "Contextual %*HANDLERS not found"
    set $P5025, $P5031
  vivi_13153906:
    set $P5024, $P5025
  fallback3904:
    set $P5021, $P5024
    iter $P5023, $P5024
  for_next3907:
    unless $P5023, for_done3909
    shift $P5033, $P5023
  for_redo3908:
    .const 'Sub' $P5032 = 'cuid_431_1347719921.536' 
    capture_lex $P5032
    $P5021 = $P5032($P5033)
    goto for_next3907
  for_done3909:
    set $P5034, $P5021
  if1313_end3899:
.annotate 'line', 1697
    find_lex $P5035, "$BLOCK"
    $P5036 = $P5035."push"($P101)
.annotate 'line', 1698
    find_lex $P5037, "$BLOCK"
    find_lex $P5038, "$/"
    $P5039 = $P5037."node"($P5038)
    find_dynamic_lex $P5040, "%*HANDLERS"
    unless_null $P5040, fallback3912
    get_hll_global $P5043, "GLOBAL"
    get_who $P5042, $P5043
    set $P5041, $P5042["%HANDLERS"]
    unless_null $P5041, fallback3913
    get_hll_global $P5045, "GLOBAL"
    get_who $P5044, $P5045
    new $P5046, 'Hash'
    set $P5044["%HANDLERS"], $P5046
    set $P5041, $P5046
  fallback3913:
    unless_null $P5041, vivi_13173914
    die "Contextual %*HANDLERS not found"
    box $P5047, "Contextual %*HANDLERS not found"
    set $P5041, $P5047
  vivi_13173914:
    set $P5040, $P5041
  fallback3912:
    set $P5057, $P5040
    unless $P5040 goto if1316_end3911 
    find_lex $P5048, "$BLOCK"
    find_dynamic_lex $P5049, "%*HANDLERS"
    unless_null $P5049, fallback3915
    get_hll_global $P5052, "GLOBAL"
    get_who $P5051, $P5052
    set $P5050, $P5051["%HANDLERS"]
    unless_null $P5050, fallback3916
    get_hll_global $P5054, "GLOBAL"
    get_who $P5053, $P5054
    new $P5055, 'Hash'
    set $P5053["%HANDLERS"], $P5055
    set $P5050, $P5055
  fallback3916:
    unless_null $P5050, vivi_13183917
    die "Contextual %*HANDLERS not found"
    box $P5056, "Contextual %*HANDLERS not found"
    set $P5050, $P5056
  vivi_13183917:
    set $P5049, $P5050
  fallback3915:
    set $P5048["handlers"], $P5049
    set $P5057, $P5049
  if1316_end3911:
.annotate 'line', 1700
    find_dynamic_lex $P5058, "$/"
    find_lex $P5059, "$BLOCK"
    $P5060 = $P5058."!make"($P5059)
    .return ($P5060) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_431_1347719921.536") :anon :lex :outer("cuid_432_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1692
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1693
    find_lex $P5001, "$past"
    $P5002 = _lex_param_0."key"()
    $P5003 = $P5001."push"($P5002)
.annotate 'line', 1694
    find_lex $P5004, "$past"
    $P5005 = _lex_param_0."value"()
    $P5006 = $P5004."push"($P5005)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_253_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1711
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1712
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback3925
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback3926
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5005
  fallback3926:
    unless_null $P5002, vivi_13213927
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_13213927:
    set $P5001, $P5002
  fallback3925:
    $P5007 = $P5001."push_lexpad"(_lex_param_1)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_254_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1715
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5026 = 'cuid_433_1347719921.536' 
    capture_lex $P5026 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback3930
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback3931
    get_hll_global $P5008, "GLOBAL"
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback3931:
    unless_null $P5004, vivi_13233932
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_13233932:
    set $P5003, $P5004
  fallback3930:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback3933
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5011
  fallback3933:
    set $P5001, $P5002["outer_ctx"]
    unless_null $P5001, fallback3934
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5012
  fallback3934:
    defined $I5001, $P5001
    box $P5016, $I5001
    set $P5015, $P5016
    if $I5001 goto unless1322_end3929 
    .const 'Sub' $P5013 = 'cuid_433_1347719921.536' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  unless1322_end3929:
.annotate 'line', 1737
    nqp_decontainerize $P5017, _lex_param_0
    find_dynamic_lex $P5018, "$*W"
    unless_null $P5018, fallback3990
    get_hll_global $P5021, "GLOBAL"
    get_who $P5020, $P5021
    set $P5019, $P5020["$W"]
    unless_null $P5019, fallback3991
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5019, $P5022
  fallback3991:
    unless_null $P5019, vivi_13403992
    die "Contextual $*W not found"
    box $P5023, "Contextual $*W not found"
    set $P5019, $P5023
  vivi_13403992:
    set $P5018, $P5019
  fallback3990:
    $P5024 = $P5018."cur_lexpad"()
    $P5025 = $P5017."SET_BLOCK_OUTER_CTX"($P5024)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_433_1347719921.536") :anon :lex :outer("cuid_254_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1716
    .lex "$SETTING", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 1719
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback3935
    get_hll_global $P5005, "GLOBAL"
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback3936
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5006
  fallback3936:
    unless_null $P5003, vivi_13243937
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13243937:
    set $P5002, $P5003
  fallback3935:
    find_dynamic_lex $P5011, "%*COMPILING"
    unless_null $P5011, fallback3939
    get_hll_global $P5014, "GLOBAL"
    get_who $P5013, $P5014
    set $P5012, $P5013["%COMPILING"]
    unless_null $P5012, fallback3940
    get_hll_global $P5016, "GLOBAL"
    get_who $P5015, $P5016
    new $P5017, 'Hash'
    set $P5015["%COMPILING"], $P5017
    set $P5012, $P5017
  fallback3940:
    unless_null $P5012, vivi_13253941
    die "Contextual %*COMPILING not found"
    box $P5018, "Contextual %*COMPILING not found"
    set $P5012, $P5018
  vivi_13253941:
    set $P5011, $P5012
  fallback3939:
    set $P5010, $P5011["%?OPTIONS"]
    unless_null $P5010, fallback3942
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5019
  fallback3942:
    set $P5009, $P5010["setting"]
    unless_null $P5009, fallback3943
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5020
  fallback3943:
    set $P5008, $P5009
    defined $I5001, $P5008
    if $I5001, defor3938
    box $P5021, "NQPCORE"
    set $P5008, $P5021
  defor3938:
    $P5022 = $P5002."load_setting"($P5008)
    set $P101, $P5022
    find_dynamic_lex $P5025, "%*COMPILING"
    unless_null $P5025, fallback3946
    get_hll_global $P5028, "GLOBAL"
    get_who $P5027, $P5028
    set $P5026, $P5027["%COMPILING"]
    unless_null $P5026, fallback3947
    get_hll_global $P5030, "GLOBAL"
    get_who $P5029, $P5030
    new $P5031, 'Hash'
    set $P5029["%COMPILING"], $P5031
    set $P5026, $P5031
  fallback3947:
    unless_null $P5026, vivi_13273948
    die "Contextual %*COMPILING not found"
    box $P5032, "Contextual %*COMPILING not found"
    set $P5026, $P5032
  vivi_13273948:
    set $P5025, $P5026
  fallback3946:
    set $P5024, $P5025["%?OPTIONS"]
    unless_null $P5024, fallback3949
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5024, $P5033
  fallback3949:
    set $P5023, $P5024["setting"]
    unless_null $P5023, fallback3950
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5023, $P5034
  fallback3950:
    set $S5001, $P5023
    iseq $I5002, $S5001, "NULL"
    box $P5115, $I5002
    set $P5114, $P5115
    if $I5002 goto unless1326_end3945 
.annotate 'line', 1724
.annotate 'line', 1725
    $P5035 = "&import_HOW_exports"($P101)
    find_dynamic_lex $P5038, "%*COMPILING"
    unless_null $P5038, fallback3953
    get_hll_global $P5041, "GLOBAL"
    get_who $P5040, $P5041
    set $P5039, $P5040["%COMPILING"]
    unless_null $P5039, fallback3954
    get_hll_global $P5043, "GLOBAL"
    get_who $P5042, $P5043
    new $P5044, 'Hash'
    set $P5042["%COMPILING"], $P5044
    set $P5039, $P5044
  fallback3954:
    unless_null $P5039, vivi_13293955
    die "Contextual %*COMPILING not found"
    box $P5045, "Contextual %*COMPILING not found"
    set $P5039, $P5045
  vivi_13293955:
    set $P5038, $P5039
  fallback3953:
    set $P5037, $P5038["%?OPTIONS"]
    unless_null $P5037, fallback3956
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5037, $P5046
  fallback3956:
    set $P5036, $P5037["old-regex-lib"]
    unless_null $P5036, fallback3957
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5036, $P5047
  fallback3957:
    set $P5061, $P5036
    unless $P5036 goto if1328_end3952 
.annotate 'line', 1726
.annotate 'line', 1727
    find_dynamic_lex $P5048, "$*W"
    unless_null $P5048, fallback3958
    get_hll_global $P5051, "GLOBAL"
    get_who $P5050, $P5051
    set $P5049, $P5050["$W"]
    unless_null $P5049, fallback3959
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5049, $P5052
  fallback3959:
    unless_null $P5049, vivi_13303960
    die "Contextual $*W not found"
    box $P5053, "Contextual $*W not found"
    set $P5049, $P5053
  vivi_13303960:
    set $P5048, $P5049
  fallback3958:
    find_dynamic_lex $P5054, "$*GLOBALish"
    unless_null $P5054, fallback3961
    get_hll_global $P5057, "GLOBAL"
    get_who $P5056, $P5057
    set $P5055, $P5056["$GLOBALish"]
    unless_null $P5055, fallback3962
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5055, $P5058
  fallback3962:
    unless_null $P5055, vivi_13313963
    die "Contextual $*GLOBALish not found"
    box $P5059, "Contextual $*GLOBALish not found"
    set $P5055, $P5059
  vivi_13313963:
    set $P5054, $P5055
  fallback3961:
    $P5060 = $P5048."load_module"("NQPRegex", $P5054)
    set $P5061, $P5060
  if1328_end3952:
    find_dynamic_lex $P5064, "%*COMPILING"
    unless_null $P5064, fallback3966
    get_hll_global $P5067, "GLOBAL"
    get_who $P5066, $P5067
    set $P5065, $P5066["%COMPILING"]
    unless_null $P5065, fallback3967
    get_hll_global $P5069, "GLOBAL"
    get_who $P5068, $P5069
    new $P5070, 'Hash'
    set $P5068["%COMPILING"], $P5070
    set $P5065, $P5070
  fallback3967:
    unless_null $P5065, vivi_13333968
    die "Contextual %*COMPILING not found"
    box $P5071, "Contextual %*COMPILING not found"
    set $P5065, $P5071
  vivi_13333968:
    set $P5064, $P5065
  fallback3966:
    set $P5063, $P5064["%?OPTIONS"]
    unless_null $P5063, fallback3969
    nqp_get_sc_object $P5072, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5063, $P5072
  fallback3969:
    set $P5062, $P5063["no-regex-lib"]
    unless_null $P5062, fallback3970
    nqp_get_sc_object $P5073, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5062, $P5073
  fallback3970:
    set $P5113, $P5062
    if $P5062 goto unless1332_end3965 
.annotate 'line', 1729
.annotate 'line', 1730
    find_dynamic_lex $P5074, "$*W"
    unless_null $P5074, fallback3971
    get_hll_global $P5077, "GLOBAL"
    get_who $P5076, $P5077
    set $P5075, $P5076["$W"]
    unless_null $P5075, fallback3972
    nqp_get_sc_object $P5078, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5075, $P5078
  fallback3972:
    unless_null $P5075, vivi_13343973
    die "Contextual $*W not found"
    box $P5079, "Contextual $*W not found"
    set $P5075, $P5079
  vivi_13343973:
    set $P5074, $P5075
  fallback3971:
    find_dynamic_lex $P5080, "$*GLOBALish"
    unless_null $P5080, fallback3974
    get_hll_global $P5083, "GLOBAL"
    get_who $P5082, $P5083
    set $P5081, $P5082["$GLOBALish"]
    unless_null $P5081, fallback3975
    nqp_get_sc_object $P5084, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5081, $P5084
  fallback3975:
    unless_null $P5081, vivi_13353976
    die "Contextual $*GLOBALish not found"
    box $P5085, "Contextual $*GLOBALish not found"
    set $P5081, $P5085
  vivi_13353976:
    set $P5080, $P5081
  fallback3974:
    $P5086 = $P5074."load_module"("QRegex", $P5080)
    find_dynamic_lex $P5089, "%*COMPILING"
    unless_null $P5089, fallback3979
    get_hll_global $P5092, "GLOBAL"
    get_who $P5091, $P5092
    set $P5090, $P5091["%COMPILING"]
    unless_null $P5090, fallback3980
    get_hll_global $P5094, "GLOBAL"
    get_who $P5093, $P5094
    new $P5095, 'Hash'
    set $P5093["%COMPILING"], $P5095
    set $P5090, $P5095
  fallback3980:
    unless_null $P5090, vivi_13373981
    die "Contextual %*COMPILING not found"
    box $P5096, "Contextual %*COMPILING not found"
    set $P5090, $P5096
  vivi_13373981:
    set $P5089, $P5090
  fallback3979:
    set $P5088, $P5089["%?OPTIONS"]
    unless_null $P5088, fallback3982
    nqp_get_sc_object $P5097, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5088, $P5097
  fallback3982:
    set $P5087, $P5088["old-regex-lib"]
    unless_null $P5087, fallback3983
    nqp_get_sc_object $P5098, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5087, $P5098
  fallback3983:
    set $P5112, $P5087
    if $P5087 goto unless1336_end3978 
.annotate 'line', 1731
.annotate 'line', 1732
    find_dynamic_lex $P5099, "$*W"
    unless_null $P5099, fallback3984
    get_hll_global $P5102, "GLOBAL"
    get_who $P5101, $P5102
    set $P5100, $P5101["$W"]
    unless_null $P5100, fallback3985
    nqp_get_sc_object $P5103, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5100, $P5103
  fallback3985:
    unless_null $P5100, vivi_13383986
    die "Contextual $*W not found"
    box $P5104, "Contextual $*W not found"
    set $P5100, $P5104
  vivi_13383986:
    set $P5099, $P5100
  fallback3984:
    find_dynamic_lex $P5105, "$*GLOBALish"
    unless_null $P5105, fallback3987
    get_hll_global $P5108, "GLOBAL"
    get_who $P5107, $P5108
    set $P5106, $P5107["$GLOBALish"]
    unless_null $P5106, fallback3988
    nqp_get_sc_object $P5109, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5106, $P5109
  fallback3988:
    unless_null $P5106, vivi_13393989
    die "Contextual $*GLOBALish not found"
    box $P5110, "Contextual $*GLOBALish not found"
    set $P5106, $P5110
  vivi_13393989:
    set $P5105, $P5106
  fallback3987:
    $P5111 = $P5099."load_module"("NQPP6QRegex", $P5105)
    set $P5112, $P5111
  unless1336_end3978:
    set $P5113, $P5112
  unless1332_end3965:
    set $P5114, $P5113
  unless1326_end3945:
    .return ($P5114) 
.end
.HLL "nqp"
.namespace []
.sub "GLOBALish" :subid("cuid_255_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1749
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1753
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback3993
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback3994
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5005
  fallback3994:
    unless_null $P5002, vivi_13413995
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_13413995:
    set $P5001, $P5002
  fallback3993:
    find_dynamic_lex $P5008, "%*HOW"
    unless_null $P5008, fallback3996
    get_hll_global $P5011, "GLOBAL"
    get_who $P5010, $P5011
    set $P5009, $P5010["%HOW"]
    unless_null $P5009, fallback3997
    get_hll_global $P5013, "GLOBAL"
    get_who $P5012, $P5013
    new $P5014, 'Hash'
    set $P5012["%HOW"], $P5014
    set $P5009, $P5014
  fallback3997:
    unless_null $P5009, vivi_13423998
    die "Contextual %*HOW not found"
    box $P5015, "Contextual %*HOW not found"
    set $P5009, $P5015
  vivi_13423998:
    set $P5008, $P5009
  fallback3996:
    set $P5007, $P5008["knowhow"]
    unless_null $P5007, fallback3999
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5016
  fallback3999:
    $P5017 = $P5001."pkg_create_mo"($P5007, "GLOBALish" :named("name"))
    store_dynamic_lex "$*GLOBALish", $P5017
.annotate 'line', 1754
    find_dynamic_lex $P5019, "$*GLOBALish"
    unless_null $P5019, fallback4000
    get_hll_global $P5022, "GLOBAL"
    get_who $P5021, $P5022
    set $P5020, $P5021["$GLOBALish"]
    unless_null $P5020, fallback4001
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5020, $P5023
  fallback4001:
    unless_null $P5020, vivi_13434002
    die "Contextual $*GLOBALish not found"
    box $P5024, "Contextual $*GLOBALish not found"
    set $P5020, $P5024
  vivi_13434002:
    set $P5019, $P5020
  fallback4000:
    get_how $P5018, $P5019
    find_dynamic_lex $P5025, "$*GLOBALish"
    unless_null $P5025, fallback4003
    get_hll_global $P5028, "GLOBAL"
    get_who $P5027, $P5028
    set $P5026, $P5027["$GLOBALish"]
    unless_null $P5026, fallback4004
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5026, $P5029
  fallback4004:
    unless_null $P5026, vivi_13444005
    die "Contextual $*GLOBALish not found"
    box $P5030, "Contextual $*GLOBALish not found"
    set $P5026, $P5030
  vivi_13444005:
    set $P5025, $P5026
  fallback4003:
    $P5031 = $P5018."compose"($P5025)
.annotate 'line', 1755
    find_dynamic_lex $P5032, "$*W"
    unless_null $P5032, fallback4006
    get_hll_global $P5035, "GLOBAL"
    get_who $P5034, $P5035
    set $P5033, $P5034["$W"]
    unless_null $P5033, fallback4007
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5033, $P5036
  fallback4007:
    unless_null $P5033, vivi_13454008
    die "Contextual $*W not found"
    box $P5037, "Contextual $*W not found"
    set $P5033, $P5037
  vivi_13454008:
    set $P5032, $P5033
  fallback4006:
    find_dynamic_lex $P5038, "$*W"
    unless_null $P5038, fallback4009
    get_hll_global $P5041, "GLOBAL"
    get_who $P5040, $P5041
    set $P5039, $P5040["$W"]
    unless_null $P5039, fallback4010
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5039, $P5042
  fallback4010:
    unless_null $P5039, vivi_13464011
    die "Contextual $*W not found"
    box $P5043, "Contextual $*W not found"
    set $P5039, $P5043
  vivi_13464011:
    set $P5038, $P5039
  fallback4009:
    $P5044 = $P5038."cur_lexpad"()
    find_dynamic_lex $P5045, "$*GLOBALish"
    unless_null $P5045, fallback4012
    get_hll_global $P5048, "GLOBAL"
    get_who $P5047, $P5048
    set $P5046, $P5047["$GLOBALish"]
    unless_null $P5046, fallback4013
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5046, $P5049
  fallback4013:
    unless_null $P5046, vivi_13474014
    die "Contextual $*GLOBALish not found"
    box $P5050, "Contextual $*GLOBALish not found"
    set $P5046, $P5050
  vivi_13474014:
    set $P5045, $P5046
  fallback4012:
    $P5051 = $P5032."install_lexical_symbol"($P5044, "GLOBALish", $P5045)
    find_dynamic_lex $P5052, "$*GLOBALish"
    unless_null $P5052, fallback4015
    get_hll_global $P5055, "GLOBAL"
    get_who $P5054, $P5055
    set $P5053, $P5054["$GLOBALish"]
    unless_null $P5053, fallback4016
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5053, $P5056
  fallback4016:
    unless_null $P5053, vivi_13484017
    die "Contextual $*GLOBALish not found"
    box $P5057, "Contextual $*GLOBALish not found"
    set $P5053, $P5057
  vivi_13484017:
    set $P5052, $P5053
  fallback4015:
    store_dynamic_lex "$*PACKAGE", $P5052
.annotate 'line', 1759
    find_dynamic_lex $P5058, "$*W"
    unless_null $P5058, fallback4018
    get_hll_global $P5061, "GLOBAL"
    get_who $P5060, $P5061
    set $P5059, $P5060["$W"]
    unless_null $P5059, fallback4019
    nqp_get_sc_object $P5062, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5059, $P5062
  fallback4019:
    unless_null $P5059, vivi_13494020
    die "Contextual $*W not found"
    box $P5063, "Contextual $*W not found"
    set $P5059, $P5063
  vivi_13494020:
    set $P5058, $P5059
  fallback4018:
    find_dynamic_lex $P5064, "$*W"
    unless_null $P5064, fallback4021
    get_hll_global $P5067, "GLOBAL"
    get_who $P5066, $P5067
    set $P5065, $P5066["$W"]
    unless_null $P5065, fallback4022
    nqp_get_sc_object $P5068, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5065, $P5068
  fallback4022:
    unless_null $P5065, vivi_13504023
    die "Contextual $*W not found"
    box $P5069, "Contextual $*W not found"
    set $P5065, $P5069
  vivi_13504023:
    set $P5064, $P5065
  fallback4021:
    $P5070 = $P5064."cur_lexpad"()
    find_dynamic_lex $P5071, "$*PACKAGE"
    unless_null $P5071, fallback4024
    get_hll_global $P5074, "GLOBAL"
    get_who $P5073, $P5074
    set $P5072, $P5073["$PACKAGE"]
    unless_null $P5072, fallback4025
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5072, $P5075
  fallback4025:
    unless_null $P5072, vivi_13514026
    die "Contextual $*PACKAGE not found"
    box $P5076, "Contextual $*PACKAGE not found"
    set $P5072, $P5076
  vivi_13514026:
    set $P5071, $P5072
  fallback4024:
    $P5077 = $P5058."install_lexical_symbol"($P5070, "$?PACKAGE", $P5071)
    .return ($P5077) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_256_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1762
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1763
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."CTXSAVE"()
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_257_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1768
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 1769
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4027
    get_hll_global $P5005, "GLOBAL"
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4028
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5006
  fallback4028:
    unless_null $P5003, vivi_13524029
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13524029:
    set $P5002, $P5003
  fallback4027:
    unless_null _lex_param_1, fallback4030
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5009
  fallback4030:
    set $P5008, _lex_param_1["name"]
    unless_null $P5008, fallback4031
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5010
  fallback4031:
    set $S5001, $P5008
    find_dynamic_lex $P5011, "$*GLOBALish"
    unless_null $P5011, fallback4032
    get_hll_global $P5014, "GLOBAL"
    get_who $P5013, $P5014
    set $P5012, $P5013["$GLOBALish"]
    unless_null $P5012, fallback4033
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5012, $P5015
  fallback4033:
    unless_null $P5012, vivi_13534034
    die "Contextual $*GLOBALish not found"
    box $P5016, "Contextual $*GLOBALish not found"
    set $P5012, $P5016
  vivi_13534034:
    set $P5011, $P5012
  fallback4032:
    $P5017 = $P5002."load_module"($S5001, $P5011)
    set $P101, $P5017
    defined $I5001, $P101
    box $P5020, $I5001
    set $P5019, $P5020
    unless $I5001 goto if1354_end4036 
.annotate 'line', 1770
.annotate 'line', 1771
    $P5018 = "&import_HOW_exports"($P101)
    set $P5019, $P5018
  if1354_end4036:
.annotate 'line', 1773
    get_hll_global $P5024, "GLOBAL"
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Stmts"]
    unless_null $P5021, fallback4037
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5021, $P5025
  fallback4037:
    $P5026 = $P5021."new"()
    $P5027 = _lex_param_1."!make"($P5026)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_258_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1776
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5031 = 'cuid_434_1347719921.536' 
    capture_lex $P5031 
    .lex "$count", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback4038
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5004
  fallback4038:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4039
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5005
  fallback4039:
    set $N5002, $P5003
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5006, $N5001
    set $P101, $P5006
.annotate 'line', 1778
    unless_null _lex_param_1, fallback4040
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5009
  fallback4040:
    set $P5008, _lex_param_1["xblock"]
    unless_null $P5008, fallback4041
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5010
  fallback4041:
    set $I5001, $P101
    set $P5007, $P5008[$I5001]
    unless_null $P5007, fallback4042
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5011
  fallback4042:
    $P5012 = $P5007."ast"()
    $P5013 = "&xblock_immediate"($P5012)
    set $P102, $P5013
    unless_null _lex_param_1, fallback4045
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5015
  fallback4045:
    set $P5014, _lex_param_1["else"]
    unless_null $P5014, fallback4046
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5014, $P5016
  fallback4046:
    set $P5025, $P5014
    unless $P5014 goto if1355_end4044 
.annotate 'line', 1779
.annotate 'line', 1780
    unless_null _lex_param_1, fallback4047
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5019
  fallback4047:
    set $P5018, _lex_param_1["else"]
    unless_null $P5018, fallback4048
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5018, $P5020
  fallback4048:
    set $P5017, $P5018[0]
    unless_null $P5017, fallback4049
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5017, $P5021
  fallback4049:
    $P5022 = $P5017."ast"()
    $P5023 = "&block_immediate"($P5022)
    $P5024 = $P102."push"($P5023)
    set $P5025, $P5024
  if1355_end4044:
  while1356_test4050:
    set $N5004, $P101
    set $N5005, 0
    isgt $I5002, $N5004, $N5005
    box $P5029, $I5002
    set $P5028, $P5029
    unless $I5002 goto while1356_done4054 
  while1356_redo4052:
    .const 'Sub' $P5026 = 'cuid_434_1347719921.536' 
    capture_lex $P5026
    $P5027 = $P5026()
    set $P5028, $P5027
    goto while1356_test4050 
  while1356_done4054:
.annotate 'line', 1789
    $P5030 = _lex_param_1."!make"($P102)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_434_1347719921.536") :anon :lex :outer("cuid_258_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1783
    .lex "$else", $P101 
    .local pmc tmp_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    find_lex $P5002, "$count"
    set tmp_1, $P5002
    set $N5002, tmp_1
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$count", $P5003
    find_lex $P5002, "$past"
    set $P101, $P5002
.annotate 'line', 1786
    find_lex $P5005, "$/"
    unless_null $P5005, fallback4055
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5005, $P5006
  fallback4055:
    set $P5004, $P5005["xblock"]
    unless_null $P5004, fallback4056
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5007
  fallback4056:
    find_lex $P5008, "$count"
    set $I5001, $P5008
    set $P5003, $P5004[$I5001]
    unless_null $P5003, fallback4057
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5009
  fallback4057:
    $P5010 = $P5003."ast"()
    $P5011 = "&xblock_immediate"($P5010)
    store_lex "$past", $P5011
.annotate 'line', 1787
    find_lex $P5012, "$past"
    $P5013 = $P5012."push"($P101)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_259_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1792
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 1793
    unless_null _lex_param_1, fallback4058
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5003
  fallback4058:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4059
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5004
  fallback4059:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1794
    $P5007 = $P101."op"("unless")
.annotate 'line', 1795
    $P5008 = _lex_param_1."!make"($P101)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_260_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1798
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 1799
    unless_null _lex_param_1, fallback4060
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5003
  fallback4060:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4061
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5004
  fallback4061:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1800
    unless_null _lex_param_1, fallback4062
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5008
  fallback4062:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback4063
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5009
  fallback4063:
    set $S5001, $P5007
    $P5010 = $P101."op"($S5001)
    find_dynamic_lex $P5011, "$*CONTROL_USED"
    unless_null $P5011, fallback4066
    get_hll_global $P5014, "GLOBAL"
    get_who $P5013, $P5014
    set $P5012, $P5013["$CONTROL_USED"]
    unless_null $P5012, fallback4067
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5012, $P5015
  fallback4067:
    unless_null $P5012, vivi_13584068
    die "Contextual $*CONTROL_USED not found"
    box $P5016, "Contextual $*CONTROL_USED not found"
    set $P5012, $P5016
  vivi_13584068:
    set $P5011, $P5012
  fallback4066:
    set $P5024, $P5011
    if $P5011 goto unless1357_end4065 
.annotate 'line', 1801
.annotate 'line', 1802
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["IVal"]
    unless_null $P5017, fallback4069
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5017, $P5021
  fallback4069:
    $P5022 = $P5017."new"(1 :named("value"), "nohandler" :named("named"))
    $P5023 = $P101."push"($P5022)
    set $P5024, $P5023
  unless1357_end4065:
.annotate 'line', 1804
    $P5025 = _lex_param_1."!make"($P101)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_261_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1807
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback4070
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5004
  fallback4070:
    set $P5003, _lex_param_1["wu"]
    unless_null $P5003, fallback4071
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5005
  fallback4071:
    set $S5002, $P5003
    concat $S5001, "repeat_", $S5002
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback4074
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5008
  fallback4074:
    set $P5007, _lex_param_1["xblock"]
    unless_null $P5007, fallback4075
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5009
  fallback4075:
    unless $P5007 goto if1359_else4072 
.annotate 'line', 1810
.annotate 'line', 1811
    unless_null _lex_param_1, fallback4076
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5011
  fallback4076:
    set $P5010, _lex_param_1["xblock"]
    unless_null $P5010, fallback4077
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5012
  fallback4077:
    $P5013 = $P5010."ast"()
    $P5014 = "&xblock_immediate"($P5013)
    set $P102, $P5014
.annotate 'line', 1812
    $P5015 = $P102."op"($P101)
    set $P5031, $P5015
    goto if1359_end4073
  if1359_else4072:
.annotate 'line', 1814
.annotate 'line', 1815
    get_hll_global $P5019, "GLOBAL"
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Op"]
    unless_null $P5016, fallback4078
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5016, $P5020
  fallback4078:
    unless_null _lex_param_1, fallback4079
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5022
  fallback4079:
    set $P5021, _lex_param_1["EXPR"]
    unless_null $P5021, fallback4080
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5021, $P5023
  fallback4080:
    $P5024 = $P5021."ast"()
    unless_null _lex_param_1, fallback4081
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5026
  fallback4081:
    set $P5025, _lex_param_1["pblock"]
    unless_null $P5025, fallback4082
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5025, $P5027
  fallback4082:
    $P5028 = $P5025."ast"()
    $P5029 = "&block_immediate"($P5028)
    $P5030 = $P5016."new"($P5024, $P5029, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P102, $P5030
    set $P5031, $P102
  if1359_end4073:
    find_dynamic_lex $P5032, "$*CONTROL_USED"
    unless_null $P5032, fallback4085
    get_hll_global $P5035, "GLOBAL"
    get_who $P5034, $P5035
    set $P5033, $P5034["$CONTROL_USED"]
    unless_null $P5033, fallback4086
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5033, $P5036
  fallback4086:
    unless_null $P5033, vivi_13614087
    die "Contextual $*CONTROL_USED not found"
    box $P5037, "Contextual $*CONTROL_USED not found"
    set $P5033, $P5037
  vivi_13614087:
    set $P5032, $P5033
  fallback4085:
    set $P5045, $P5032
    if $P5032 goto unless1360_end4084 
.annotate 'line', 1818
.annotate 'line', 1819
    get_hll_global $P5041, "GLOBAL"
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["IVal"]
    unless_null $P5038, fallback4088
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5038, $P5042
  fallback4088:
    $P5043 = $P5038."new"(1 :named("value"), "nohandler" :named("named"))
    $P5044 = $P102."push"($P5043)
    set $P5045, $P5044
  unless1360_end4084:
.annotate 'line', 1821
    $P5046 = _lex_param_1."!make"($P102)
    .return ($P5046) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_262_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1824
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
.annotate 'line', 1825
    unless_null _lex_param_1, fallback4089
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5004
  fallback4089:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4090
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5005
  fallback4090:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 1826
    $P5007 = $P101."op"("for")
    set $P5008, $P101[1]
    unless_null $P5008, fallback4091
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5009
  fallback4091:
    set $P102, $P5008
.annotate 'line', 1828
    $P5010 = $P102."arity"()
    set $P5022, $P5010
    if $P5010 goto unless1362_end4093 
.annotate 'line', 1829
    set $P5011, $P102[0]
    unless_null $P5011, fallback4094
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5012
  fallback4094:
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback4095
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5013, $P5017
  fallback4095:
    $P5018 = $P5013."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5019 = $P5011."push"($P5018)
.annotate 'line', 1830
    $P5020 = $P102."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1831
    $P5021 = $P102."arity"(1)
    set $P5022, $P5021
  unless1362_end4093:
.annotate 'line', 1833
    $P5023 = $P102."blocktype"("immediate")
    find_dynamic_lex $P5024, "$*CONTROL_USED"
    unless_null $P5024, fallback4098
    get_hll_global $P5027, "GLOBAL"
    get_who $P5026, $P5027
    set $P5025, $P5026["$CONTROL_USED"]
    unless_null $P5025, fallback4099
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5025, $P5028
  fallback4099:
    unless_null $P5025, vivi_13644100
    die "Contextual $*CONTROL_USED not found"
    box $P5029, "Contextual $*CONTROL_USED not found"
    set $P5025, $P5029
  vivi_13644100:
    set $P5024, $P5025
  fallback4098:
    set $P5037, $P5024
    if $P5024 goto unless1363_end4097 
.annotate 'line', 1834
.annotate 'line', 1835
    get_hll_global $P5033, "GLOBAL"
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["IVal"]
    unless_null $P5030, fallback4101
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5030, $P5034
  fallback4101:
    $P5035 = $P5030."new"(1 :named("value"), "nohandler" :named("named"))
    $P5036 = $P101."push"($P5035)
    set $P5037, $P5036
  unless1363_end4097:
.annotate 'line', 1837
    $P5038 = _lex_param_1."!make"($P101)
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_263_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1840
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 1841
    unless_null _lex_param_1, fallback4102
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5003
  fallback4102:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4103
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5004
  fallback4103:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1842
    $P5006 = "&set_block_handler"(_lex_param_1, $P101, "CATCH")
.annotate 'line', 1843
    $P5007 = "&default_for"("$")
    $P5008 = _lex_param_1."!make"($P5007)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_264_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1846
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 1847
    unless_null _lex_param_1, fallback4104
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5003
  fallback4104:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4105
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5004
  fallback4105:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1848
    $P5006 = "&set_block_handler"(_lex_param_1, $P101, "CONTROL")
.annotate 'line', 1849
    $P5007 = "&default_for"("$")
    $P5008 = _lex_param_1."!make"($P5007)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_265_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1883
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1884
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4106
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4107
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5005
  fallback4107:
    unless_null $P5002, vivi_13654108
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_13654108:
    set $P5001, $P5002
  fallback4106:
    unless_null _lex_param_1, fallback4109
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5008
  fallback4109:
    set $P5007, _lex_param_1["blorst"]
    unless_null $P5007, fallback4110
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5009
  fallback4110:
    $P5010 = $P5007."ast"()
    $P5011 = $P5001."run_begin_block"($P5010)
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_266_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1887
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1888
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4111
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4112
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5005
  fallback4112:
    unless_null $P5002, vivi_13664113
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_13664113:
    set $P5001, $P5002
  fallback4111:
    $P5007 = $P5001."cur_lexpad"()
    unless_null _lex_param_1, fallback4114
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5009
  fallback4114:
    set $P5008, _lex_param_1["blorst"]
    unless_null $P5008, fallback4115
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5010
  fallback4115:
    $P5011 = $P5008."ast"()
    $P5012 = $P5007."push"($P5011)
.annotate 'line', 1889
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Stmts"]
    unless_null $P5013, fallback4116
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5013, $P5017
  fallback4116:
    $P5018 = $P5013."new"()
    $P5019 = _lex_param_1."!make"($P5018)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_267_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1892
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_4117
    .lex "RETURN", $P102
.annotate 'line', 1893
    unless_null _lex_param_1, fallback4119
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5003
  fallback4119:
    set $P5002, _lex_param_1["blorst"]
    unless_null $P5002, fallback4120
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5004
  fallback4120:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback4123
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5010
  fallback4123:
    type_check $I5001, $P101, $P5006
    box $P5023, $I5001
    set $P5022, $P5023
    unless $I5001 goto if1367_end4122 
.annotate 'line', 1894
    set $P5011, $P101["handlers"]
    unless_null $P5011, fallback4128
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5012
  fallback4128:
    set $P5015, $P5011
    unless $P5011 goto if1369_end4127 
    set $P5013, $P101["handlers"]
    unless_null $P5013, fallback4129
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5013, $P5014
  fallback4129:
    exists $I5002, $P5013["CATCH"]
    box $P5016, $I5002
    set $P5015, $P5016
  if1369_end4127:
    unless $P5015 goto if1368_else4124 
.annotate 'line', 1895
.annotate 'line', 1896
    $P5017 = _lex_param_1."!make"($P101)
    find_lex $P5018, "RETURN"
    $P5019 = $P5018(1)
    set $P5021, $P5019
    goto if1368_end4125
  if1368_else4124:
.annotate 'line', 1899
.annotate 'line', 1900
    $P5020 = $P101."blocktype"("immediate")
    set $P5021, $P5020
  if1368_end4125:
    set $P5022, $P5021
  if1367_end4122:
.annotate 'line', 1903
    get_hll_global $P5027, "GLOBAL"
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback4130
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5024, $P5028
  fallback4130:
.annotate 'line', 1907
    get_hll_global $P5032, "GLOBAL"
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Stmts"]
    unless_null $P5029, fallback4131
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5029, $P5033
  fallback4131:
.annotate 'line', 1908
    get_hll_global $P5037, "GLOBAL"
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback4132
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5034, $P5038
  fallback4132:
.annotate 'line', 1910
    get_hll_global $P5042, "GLOBAL"
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["Op"]
    unless_null $P5039, fallback4133
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5039, $P5043
  fallback4133:
    $P5044 = $P5039."new"("exception" :named("op"))
.annotate 'line', 1911
    get_hll_global $P5048, "GLOBAL"
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["SVal"]
    unless_null $P5045, fallback4134
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5045, $P5049
  fallback4134:
    $P5050 = $P5045."new"("handled" :named("value"))
.annotate 'line', 1912
    get_hll_global $P5054, "GLOBAL"
    nqp_get_package_through_who $P5053, $P5054, "QAST"
    get_who $P5052, $P5053
    set $P5051, $P5052["IVal"]
    unless_null $P5051, fallback4135
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5051, $P5055
  fallback4135:
    $P5056 = $P5051."new"(1 :named("value"))
    $P5057 = $P5034."new"($P5044, $P5050, $P5056, "bindkey_i" :named("op"))
.annotate 'line', 1914
    $P5058 = "&default_for"("$")
    $P5059 = $P5029."new"($P5057, $P5058)
    $P5060 = $P5024."new"($P101, "CATCH", $P5059, "handle" :named("op"))
    $P5061 = _lex_param_1."!make"($P5060)
    goto lexotic_4118
  lexotic_4117:
    .get_results ($P5061)
  lexotic_4118:
    .return ($P5061) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_268_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1918
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1919
    unless_null _lex_param_1, fallback4138
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4138:
    set $P5001, _lex_param_1["block"]
    unless_null $P5001, fallback4139
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4139:
    unless $P5001 goto if1370_else4136 
.annotate 'line', 1920
    unless_null _lex_param_1, fallback4140
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5005
  fallback4140:
    set $P5004, _lex_param_1["block"]
    unless_null $P5004, fallback4141
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5006
  fallback4141:
    $P5007 = $P5004."ast"()
    $P5008 = "&block_immediate"($P5007)
    set $P5013, $P5008
    goto if1370_end4137
  if1370_else4136:
.annotate 'line', 1921
    unless_null _lex_param_1, fallback4142
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5010
  fallback4142:
    set $P5009, _lex_param_1["statement"]
    unless_null $P5009, fallback4143
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5011
  fallback4143:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1370_end4137:
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_269_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1926
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4144
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4144:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4145
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4145:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_270_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1927
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4146
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4146:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4147
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4147:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_271_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1929
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4148
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4148:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4149
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4149:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_272_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1930
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4150
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4150:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4151
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4151:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_273_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1934
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4152
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4152:
    set $P5001, _lex_param_1["fatarrow"]
    unless_null $P5001, fallback4153
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4153:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_274_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1935
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4154
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4154:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback4155
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4155:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_275_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1936
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4156
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4156:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4157
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4157:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_276_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1937
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4158
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4158:
    set $P5001, _lex_param_1["package_declarator"]
    unless_null $P5001, fallback4159
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4159:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_277_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1938
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4160
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4160:
    set $P5001, _lex_param_1["scope_declarator"]
    unless_null $P5001, fallback4161
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4161:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_278_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1939
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4162
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4162:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4163
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4163:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_279_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1940
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4164
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4164:
    set $P5001, _lex_param_1["regex_declarator"]
    unless_null $P5001, fallback4165
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4165:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_280_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1941
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4166
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4166:
    set $P5001, _lex_param_1["statement_prefix"]
    unless_null $P5001, fallback4167
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4167:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_281_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1942
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1943
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback4168
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback4168:
    unless_null _lex_param_1, fallback4169
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5007
  fallback4169:
    set $P5006, _lex_param_1["pblock"]
    unless_null $P5006, fallback4170
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5008
  fallback4170:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "takeclosure" :named("op"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_282_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1946
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 1947
    unless_null _lex_param_1, fallback4171
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5003
  fallback4171:
    set $P5002, _lex_param_1["val"]
    unless_null $P5002, fallback4172
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5004
  fallback4172:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1948
    unless_null _lex_param_1, fallback4173
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5007
  fallback4173:
    set $P5006, _lex_param_1["key"]
    unless_null $P5006, fallback4174
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5008
  fallback4174:
    $P5009 = $P5006."Str"()
    $P5010 = $P101."named"($P5009)
.annotate 'line', 1949
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_283_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1952
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_435_1347719921.536' 
    capture_lex $P5022 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4177
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4177:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4178
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4178:
    unless $P5001 goto if1371_else4175 
.annotate 'line', 1953
.annotate 'line', 1954
    unless_null _lex_param_1, fallback4179
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5005
  fallback4179:
    set $P5004, _lex_param_1["variable"]
    unless_null $P5004, fallback4180
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5006
  fallback4180:
    $P5007 = $P5004."ast"()
    unless_null _lex_param_1, fallback4181
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5010
  fallback4181:
    set $P5009, _lex_param_1["variable"]
    unless_null $P5009, fallback4182
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5011
  fallback4182:
    set $P5008, $P5009["desigilname"]
    unless_null $P5008, fallback4183
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5012
  fallback4183:
    set $S5001, $P5008
    $P5013 = $P5007."named"($S5001)
.annotate 'line', 1955
    unless_null _lex_param_1, fallback4184
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5015
  fallback4184:
    set $P5014, _lex_param_1["variable"]
    unless_null $P5014, fallback4185
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5014, $P5016
  fallback4185:
    $P5017 = $P5014."ast"()
    $P5018 = _lex_param_1."!make"($P5017)
    set $P5021, $P5018
    goto if1371_end4176
  if1371_else4175:
    .const 'Sub' $P5019 = 'cuid_435_1347719921.536' 
    capture_lex $P5019
    $P5020 = $P5019()
    set $P5021, $P5020
  if1371_end4176:
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_435_1347719921.536") :anon :lex :outer("cuid_283_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1956
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback4188
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5004
  fallback4188:
    set $P5002, $P5003["circumfix"]
    unless_null $P5002, fallback4189
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5005
  fallback4189:
    unless $P5002 goto if1372_else4186 
.annotate 'line', 1958
    find_lex $P5008, "$/"
    unless_null $P5008, fallback4190
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5009
  fallback4190:
    set $P5007, $P5008["circumfix"]
    unless_null $P5007, fallback4191
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5010
  fallback4191:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback4192
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5011
  fallback4192:
    $P5012 = $P5006."ast"()
    set $P5023, $P5012
    goto if1372_end4187
  if1372_else4186:
.annotate 'line', 1959
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["IVal"]
    unless_null $P5013, fallback4193
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5013, $P5017
  fallback4193:
    find_lex $P5019, "$/"
    unless_null $P5019, fallback4194
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5019, $P5020
  fallback4194:
    set $P5018, $P5019["not"]
    unless_null $P5018, fallback4195
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5018, $P5021
  fallback4195:
    isfalse $I5001, $P5018
    $P5022 = $P5013."new"($I5001 :named("value"))
    set $P5023, $P5022
  if1372_end4187:
    set $P101, $P5023
.annotate 'line', 1960
    find_lex $P5025, "$/"
    unless_null $P5025, fallback4196
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5025, $P5026
  fallback4196:
    set $P5024, $P5025["identifier"]
    unless_null $P5024, fallback4197
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5024, $P5027
  fallback4197:
    set $S5001, $P5024
    $P5028 = $P101."named"($S5001)
.annotate 'line', 1961
    find_dynamic_lex $P5029, "$/"
    $P5030 = $P5029."!make"($P101)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_284_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1965
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5021 = 'cuid_437_1347719921.536' 
    capture_lex $P5021 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback4200
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5003
  fallback4200:
    set $P5002, _lex_param_1["postcircumfix"]
    unless_null $P5002, fallback4201
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5004
  fallback4201:
    unless $P5002 goto if1373_else4198 
.annotate 'line', 1967
.annotate 'line', 1968
    unless_null _lex_param_1, fallback4202
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5006
  fallback4202:
    set $P5005, _lex_param_1["postcircumfix"]
    unless_null $P5005, fallback4203
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5005, $P5007
  fallback4203:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
.annotate 'line', 1969
    get_hll_global $P5012, "GLOBAL"
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["VarWithFallback"]
    unless_null $P5009, fallback4204
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5013
  fallback4204:
.annotate 'line', 1970
    $P5014 = "&default_for"("$")
    $P5015 = $P5009."new"("$/" :named("name"), "lexical" :named("scope"), $P5014 :named("fallback"))
    $P5016 = $P101."unshift"($P5015)
    set $P5019, $P5016
    goto if1373_end4199
  if1373_else4198:
    .const 'Sub' $P5017 = 'cuid_437_1347719921.536' 
    capture_lex $P5017
    $P5018 = $P5017()
    set $P5019, $P5018
  if1373_end4199:
.annotate 'line', 2038
    $P5020 = _lex_param_1."!make"($P101)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_437_1347719921.536") :anon :lex :outer("cuid_284_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1973
    .const 'Sub' $P5064 = 'cuid_436_1347719921.536' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_440_1347719921.536' 
    capture_lex $P5064 
    .lex "@name", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 1974
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "NQP"
    get_who $P5003, $P5004
    set $P5002, $P5003["Compiler"]
    unless_null $P5002, fallback4205
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5006
  fallback4205:
    find_lex $P5007, "$/"
    set $S5001, $P5007
    $P5008 = $P5002."parse_name"($S5001)
    set $P101, $P5008
    set $N5001, $P101
    set $N5002, 1
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1374_else4206 
.annotate 'line', 1975
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4210
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5011
  fallback4210:
    set $P5009, $P5010["twigil"]
    unless_null $P5009, fallback4211
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5012
  fallback4211:
    set $P5016, $P5009
    unless $P5009 goto if1375_end4209 
.annotate 'line', 1976
.annotate 'line', 1977
    find_lex $P5013, "$/"
    $P5014 = $P5013."CURSOR"()
    $P5015 = $P5014."panic"("Twigil not allowed on multi-part name")
    set $P5016, $P5015
  if1375_end4209:
.annotate 'line', 1979
    find_lex $P5017, "$/"
    $P5018 = "&lexical_package_lookup"($P101, $P5017)
    store_lex "$past", $P5018
    set $P5063, $P5018
    goto if1374_end4207
  if1374_else4206:
    find_lex $P5021, "$/"
    unless_null $P5021, fallback4214
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5021, $P5022
  fallback4214:
    set $P5020, $P5021["twigil"]
    unless_null $P5020, fallback4215
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5020, $P5023
  fallback4215:
    set $P5019, $P5020[0]
    unless_null $P5019, fallback4216
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5019, $P5024
  fallback4216:
    set $S5002, $P5019
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1376_else4212 
    .const 'Sub' $P5025 = 'cuid_436_1347719921.536' 
    capture_lex $P5025
    $P5026 = $P5025()
    set $P5062, $P5026
    goto if1376_end4213
  if1376_else4212:
    find_lex $P5029, "$/"
    unless_null $P5029, fallback4227
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5029, $P5030
  fallback4227:
    set $P5028, $P5029["twigil"]
    unless_null $P5028, fallback4228
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5028, $P5031
  fallback4228:
    set $P5027, $P5028[0]
    unless_null $P5027, fallback4229
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5027, $P5032
  fallback4229:
    set $S5003, $P5027
    iseq $I5003, $S5003, "!"
    unless $I5003 goto if1377_else4225 
    .const 'Sub' $P5033 = 'cuid_440_1347719921.536' 
    capture_lex $P5033
    $P5034 = $P5033()
    set $P5061, $P5034
    goto if1377_end4226
  if1377_else4225:
.annotate 'line', 2030
    find_dynamic_lex $P5035, "$*W"
    unless_null $P5035, fallback4269
    get_hll_global $P5038, "GLOBAL"
    get_who $P5037, $P5038
    set $P5036, $P5037["$W"]
    unless_null $P5036, fallback4270
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5036, $P5039
  fallback4270:
    unless_null $P5036, vivi_13904271
    die "Contextual $*W not found"
    box $P5040, "Contextual $*W not found"
    set $P5036, $P5040
  vivi_13904271:
    set $P5035, $P5036
  fallback4269:
    set $P5041, $P101[0]
    unless_null $P5041, fallback4272
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5041, $P5042
  fallback4272:
    set $S5004, $P5041
    $P5043 = $P5035."is_package"($S5004)
    unless $P5043 goto if1389_else4267 
.annotate 'line', 2031
    find_lex $P5044, "$/"
    $P5045 = "&lexical_package_lookup"($P101, $P5044)
    store_lex "$past", $P5045
.annotate 'line', 2032
    find_lex $P5046, "$past"
    find_lex $P5048, "$/"
    unless_null $P5048, fallback4273
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5048, $P5049
  fallback4273:
    set $P5047, $P5048["sigil"]
    unless_null $P5047, fallback4274
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5047, $P5050
  fallback4274:
    $P5051 = "&default_for"($P5047)
    $P5052 = $P5046."fallback"($P5051)
    set $P5060, $P5052
    goto if1389_end4268
  if1389_else4267:
.annotate 'line', 2034
.annotate 'line', 2035
    get_hll_global $P5056, "GLOBAL"
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["Var"]
    unless_null $P5053, fallback4275
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5053, $P5057
  fallback4275:
    $P5058 = $P101."pop"()
    set $S5005, $P5058
    $P5059 = $P5053."new"($S5005 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5059
    set $P5060, $P5059
  if1389_end4268:
    set $P5061, $P5060
  if1377_end4226:
    set $P5062, $P5061
  if1376_end4213:
    set $P5063, $P5062
  if1374_end4207:
    .return ($P5063) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_436_1347719921.536") :anon :lex :outer("cuid_437_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1981
    .lex "$global_fallback", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 1982
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback4217
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5006
  fallback4217:
.annotate 'line', 1984
    new $P5007, 'ResizablePMCArray'
    box $P5008, "GLOBAL"
    push $P5007, $P5008
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4218
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5011
  fallback4218:
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4219
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5012
  fallback4219:
    set $S5002, $P5009
    find_lex $P5014, "$/"
    unless_null $P5014, fallback4220
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5014, $P5015
  fallback4220:
    set $P5013, $P5014["desigilname"]
    unless_null $P5013, fallback4221
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5013, $P5016
  fallback4221:
    set $S5003, $P5013
    concat $S5001, $S5002, $S5003
    box $P5017, $S5001
    push $P5007, $P5017
    find_lex $P5018, "$/"
    $P5019 = "&lexical_package_lookup"($P5007, $P5018)
.annotate 'line', 1985
    get_hll_global $P5023, "GLOBAL"
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback4222
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5020, $P5024
  fallback4222:
.annotate 'line', 1987
    get_hll_global $P5028, "GLOBAL"
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["SVal"]
    unless_null $P5025, fallback4223
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5025, $P5029
  fallback4223:
    find_lex $P5030, "$/"
    set $S5006, $P5030
    concat $S5005, "Contextual ", $S5006
    concat $S5004, $S5005, " not found"
    $P5031 = $P5025."new"($S5004 :named("value"))
    $P5032 = $P5020."new"($P5031, "die_s" :named("op"))
    $P5033 = $P5002."new"($P5019, $P5032, "ifnull" :named("op"))
    set $P101, $P5033
.annotate 'line', 1989
    get_hll_global $P5037, "GLOBAL"
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["VarWithFallback"]
    unless_null $P5034, fallback4224
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5034, $P5038
  fallback4224:
.annotate 'line', 1990
    find_lex $P5039, "@name"
    $P5040 = $P5039."pop"()
    set $S5007, $P5040
    $P5041 = $P5034."new"($S5007 :named("name"), "contextual" :named("scope"), $P101 :named("fallback"))
    store_lex "$past", $P5041
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_440_1347719921.536") :anon :lex :outer("cuid_437_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1994
    .const 'Sub' $P5065 = 'cuid_439_1347719921.536' 
    capture_lex $P5065 
    .lex "$name", $P101 
    .lex "$ch", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
.annotate 'line', 1995
    find_lex $P5003, "@name"
    $P5004 = $P5003."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    find_dynamic_lex $P5006, "$*PKGDECL"
    unless_null $P5006, fallback4232
    get_hll_global $P5009, "GLOBAL"
    get_who $P5008, $P5009
    set $P5007, $P5008["$PKGDECL"]
    unless_null $P5007, fallback4233
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5010
  fallback4233:
    unless_null $P5007, vivi_13794234
    die "Contextual $*PKGDECL not found"
    box $P5011, "Contextual $*PKGDECL not found"
    set $P5007, $P5011
  vivi_13794234:
    set $P5006, $P5007
  fallback4232:
    set $S5002, $P5006
    iseq $I5001, $S5002, "role"
    unless $I5001 goto if1378_else4230 
.annotate 'line', 1997
.annotate 'line', 1998
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4235
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5012, $P5016
  fallback4235:
    $P5017 = $P5012."new"("$?CLASS" :named("name"), "lexical" :named("scope"))
    set $P102, $P5017
.annotate 'line', 1999
    find_dynamic_lex $P5018, "$*PACKAGE"
    unless_null $P5018, fallback4236
    get_hll_global $P5021, "GLOBAL"
    get_who $P5020, $P5021
    set $P5019, $P5020["$PACKAGE"]
    unless_null $P5019, fallback4237
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5019, $P5022
  fallback4237:
    unless_null $P5019, vivi_13804238
    die "Contextual $*PACKAGE not found"
    box $P5023, "Contextual $*PACKAGE not found"
    set $P5019, $P5023
  vivi_13804238:
    set $P5018, $P5019
  fallback4236:
    $P5024 = $P102."set_compile_time_value"($P5018)
    set $P5037, $P5024
    goto if1378_end4231
  if1378_else4230:
.annotate 'line', 2001
.annotate 'line', 2002
    get_hll_global $P5028, "GLOBAL"
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["WVal"]
    unless_null $P5025, fallback4239
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5025, $P5029
  fallback4239:
    find_dynamic_lex $P5030, "$*PACKAGE"
    unless_null $P5030, fallback4240
    get_hll_global $P5033, "GLOBAL"
    get_who $P5032, $P5033
    set $P5031, $P5032["$PACKAGE"]
    unless_null $P5031, fallback4241
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5031, $P5034
  fallback4241:
    unless_null $P5031, vivi_13814242
    die "Contextual $*PACKAGE not found"
    box $P5035, "Contextual $*PACKAGE not found"
    set $P5031, $P5035
  vivi_13814242:
    set $P5030, $P5031
  fallback4240:
    $P5036 = $P5025."new"($P5030 :named("value"))
    set $P102, $P5036
    set $P5037, $P102
  if1378_end4231:
.annotate 'line', 2004
    get_hll_global $P5041, "GLOBAL"
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Var"]
    unless_null $P5038, fallback4243
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5038, $P5042
  fallback4243:
.annotate 'line', 2006
    get_hll_global $P5046, "GLOBAL"
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["VM"]
    unless_null $P5043, fallback4244
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5043, $P5047
  fallback4244:
.annotate 'line', 2007
    get_hll_global $P5051, "GLOBAL"
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Var"]
    unless_null $P5048, fallback4245
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5048, $P5052
  fallback4245:
    $P5053 = $P5048."new"("self" :named("name"), "lexical" :named("scope"))
    $P5054 = $P5043."new"($P5053, "nqp_decontainerize PP" :named("pirop"))
    $P5055 = $P5038."new"($P5054, $P102, $P101 :named("name"), "attribute" :named("scope"))
    store_lex "$past", $P5055
    find_dynamic_lex $P5056, "$*IN_DECL"
    unless_null $P5056, fallback4248
    get_hll_global $P5059, "GLOBAL"
    get_who $P5058, $P5059
    set $P5057, $P5058["$IN_DECL"]
    unless_null $P5057, fallback4249
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5057, $P5060
  fallback4249:
    unless_null $P5057, vivi_13834250
    die "Contextual $*IN_DECL not found"
    box $P5061, "Contextual $*IN_DECL not found"
    set $P5057, $P5061
  vivi_13834250:
    set $P5056, $P5057
  fallback4248:
    set $P5064, $P5056
    if $P5056 goto unless1382_end4247 
    .const 'Sub' $P5062 = 'cuid_439_1347719921.536' 
    capture_lex $P5062
    $P5063 = $P5062()
    set $P5064, $P5063
  unless1382_end4247:
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_439_1347719921.536") :anon :lex :outer("cuid_440_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2012
    .const 'Sub' $P5032 = 'cuid_438_1347719921.536' 
    capture_lex $P5032 
    .lex "$attr", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 2014
    find_dynamic_lex $P5006, "$*PACKAGE"
    unless_null $P5006, fallback4251
    get_hll_global $P5009, "GLOBAL"
    get_who $P5008, $P5009
    set $P5007, $P5008["$PACKAGE"]
    unless_null $P5007, fallback4252
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5010
  fallback4252:
    unless_null $P5007, vivi_13844253
    die "Contextual $*PACKAGE not found"
    box $P5011, "Contextual $*PACKAGE not found"
    set $P5007, $P5011
  vivi_13844253:
    set $P5006, $P5007
  fallback4251:
    get_how $P5005, $P5006
    find_dynamic_lex $P5012, "$*PACKAGE"
    unless_null $P5012, fallback4254
    get_hll_global $P5015, "GLOBAL"
    get_who $P5014, $P5015
    set $P5013, $P5014["$PACKAGE"]
    unless_null $P5013, fallback4255
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5013, $P5016
  fallback4255:
    unless_null $P5013, vivi_13854256
    die "Contextual $*PACKAGE not found"
    box $P5017, "Contextual $*PACKAGE not found"
    set $P5013, $P5017
  vivi_13854256:
    set $P5012, $P5013
  fallback4254:
    $P5018 = $P5005."attributes"($P5012, 1 :named("local"))
    set $P5002, $P5018
    iter $P5004, $P5018
    new $P5020, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5020, for_handlers4259
    push_eh $P5020
  for_next4260:
    unless $P5004, for_done4262
    shift $P5021, $P5004
  for_redo4261:
    .const 'Sub' $P5019 = 'cuid_438_1347719921.536' 
    capture_lex $P5019
    $P5002 = $P5019($P5021)
    goto for_next4260
  for_handlers4259:
    .get_results ($P5020)
    pop_upto_eh $P5020
    getattribute $P5020, $P5020, 'type'
    eq $P5020, .CONTROL_LOOP_NEXT, for_next4260
    eq $P5020, .CONTROL_LOOP_REDO, for_redo4261
  for_done4262:
    pop_eh 
    defined $I5001, $P101
    unless $I5001 goto if1387_else4263 
.annotate 'line', 2020
    can $I5002, $P101, "type"
    box $P5026, $I5002
    set $P5025, $P5026
    unless $I5002 goto if1388_end4266 
.annotate 'line', 2021
.annotate 'line', 2022
    find_lex $P5022, "$past"
    $P5023 = $P101."type"()
    $P5024 = $P5022."returns"($P5023)
    set $P5025, $P5024
  if1388_end4266:
    set $P5031, $P5025
    goto if1387_end4264
  if1387_else4263:
.annotate 'line', 2025
.annotate 'line', 2026
    find_lex $P5027, "$/"
    $P5028 = $P5027."CURSOR"()
    find_lex $P5029, "$name"
    set $S5003, $P5029
    concat $S5002, "Attribute '", $S5003
    concat $S5001, $S5002, "' not declared"
    $P5030 = $P5028."panic"($S5001)
    set $P5031, $P5030
  if1387_end4264:
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_438_1347719921.536") :anon :lex :outer("cuid_439_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2014
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2015
    $P5001 = _lex_param_0."name"()
    set $S5001, $P5001
    find_lex $P5002, "$name"
    set $S5002, $P5002
    iseq $I5001, $S5001, $S5002
    set $I5002, $I5001
    unless $I5001 goto if1386_end4258 
    store_lex "$attr", _lex_param_0
    die 0, .CONTROL_LOOP_LAST
    set $I5002, 0
  if1386_end4258:
    .return ($I5002) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_285_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2041
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4276
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4276:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4277
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4277:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_286_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2042
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4278
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4278:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4279
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4279:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_287_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2043
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4280
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4280:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4281
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4281:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_288_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2044
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4282
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4282:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4283
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4283:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_289_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2045
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4284
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4284:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4285
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4285:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_290_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2046
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4286
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4286:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4287
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4287:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_291_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2048
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$HOW", $P101 
    .lex "$PACKAGE", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
.annotate 'line', 2051
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4288
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4289
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5007
  fallback4289:
    unless_null $P5004, vivi_13914290
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_13914290:
    set $P5003, $P5004
  fallback4288:
    unless_null _lex_param_1, fallback4291
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5011
  fallback4291:
    set $P5010, _lex_param_1["metaclass"]
    unless_null $P5010, fallback4292
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5012
  fallback4292:
    set $P5009, $P5010["identifier"]
    unless_null $P5009, fallback4293
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5013
  fallback4293:
    $P5014 = $P5003."find_sym"($P5009)
    set $P101, $P5014
.annotate 'line', 2052
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback4294
    get_hll_global $P5018, "GLOBAL"
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback4295
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5016, $P5019
  fallback4295:
    unless_null $P5016, vivi_13924296
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_13924296:
    set $P5015, $P5016
  fallback4294:
    unless_null _lex_param_1, fallback4297
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5022
  fallback4297:
    set $P5021, _lex_param_1["name"]
    unless_null $P5021, fallback4298
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5021, $P5023
  fallback4298:
    set $S5001, $P5021
    $P5024 = $P5015."pkg_create_mo"($P101, $S5001 :named("name"))
    set $P102, $P5024
    find_dynamic_lex $P5025, "$*SCOPE"
    unless_null $P5025, fallback4303
    get_hll_global $P5028, "GLOBAL"
    get_who $P5027, $P5028
    set $P5026, $P5027["$SCOPE"]
    unless_null $P5026, fallback4304
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5026, $P5029
  fallback4304:
    unless_null $P5026, vivi_13954305
    die "Contextual $*SCOPE not found"
    box $P5030, "Contextual $*SCOPE not found"
    set $P5026, $P5030
  vivi_13954305:
    set $P5025, $P5026
  fallback4303:
    set $S5002, $P5025
    iseq $I5001, $S5002, "our"
    set $I5003, $I5001
    if $I5001 goto unless1394_end4302 
    find_dynamic_lex $P5031, "$*SCOPE"
    unless_null $P5031, fallback4306
    get_hll_global $P5034, "GLOBAL"
    get_who $P5033, $P5034
    set $P5032, $P5033["$SCOPE"]
    unless_null $P5032, fallback4307
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5032, $P5035
  fallback4307:
    unless_null $P5032, vivi_13964308
    die "Contextual $*SCOPE not found"
    box $P5036, "Contextual $*SCOPE not found"
    set $P5032, $P5036
  vivi_13964308:
    set $P5031, $P5032
  fallback4306:
    set $S5003, $P5031
    iseq $I5002, $S5003, ""
    set $I5003, $I5002
  unless1394_end4302:
    unless $I5003 goto if1393_else4299 
.annotate 'line', 2055
.annotate 'line', 2056
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback4309
    get_hll_global $P5040, "GLOBAL"
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback4310
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5038, $P5041
  fallback4310:
    unless_null $P5038, vivi_13974311
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_13974311:
    set $P5037, $P5038
  fallback4309:
    find_dynamic_lex $P5043, "$*OUTERPACKAGE"
    unless_null $P5043, fallback4312
    get_hll_global $P5046, "GLOBAL"
    get_who $P5045, $P5046
    set $P5044, $P5045["$OUTERPACKAGE"]
    unless_null $P5044, fallback4313
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5044, $P5047
  fallback4313:
    unless_null $P5044, vivi_13984314
    die "Contextual $*OUTERPACKAGE not found"
    box $P5048, "Contextual $*OUTERPACKAGE not found"
    set $P5044, $P5048
  vivi_13984314:
    set $P5043, $P5044
  fallback4312:
    unless_null _lex_param_1, fallback4315
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5051
  fallback4315:
    set $P5050, _lex_param_1["name"]
    unless_null $P5050, fallback4316
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5050, $P5052
  fallback4316:
    set $P5049, $P5050["identifier"]
    unless_null $P5049, fallback4317
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5049, $P5053
  fallback4317:
    $P5054 = $P5037."install_package_symbol"($P5043, $P5049, $P102)
    unless_null _lex_param_1, fallback4320
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5057
  fallback4320:
    set $P5056, _lex_param_1["name"]
    unless_null $P5056, fallback4321
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5056, $P5058
  fallback4321:
    set $P5055, $P5056["identifier"]
    unless_null $P5055, fallback4322
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5055, $P5059
  fallback4322:
    set $N5001, $P5055
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5082, $I5004
    set $P5081, $P5082
    unless $I5004 goto if1399_end4319 
.annotate 'line', 2057
.annotate 'line', 2058
    find_dynamic_lex $P5060, "$*W"
    unless_null $P5060, fallback4323
    get_hll_global $P5063, "GLOBAL"
    get_who $P5062, $P5063
    set $P5061, $P5062["$W"]
    unless_null $P5061, fallback4324
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5061, $P5064
  fallback4324:
    unless_null $P5061, vivi_14004325
    die "Contextual $*W not found"
    box $P5065, "Contextual $*W not found"
    set $P5061, $P5065
  vivi_14004325:
    set $P5060, $P5061
  fallback4323:
    find_dynamic_lex $P5066, "$*W"
    unless_null $P5066, fallback4326
    get_hll_global $P5069, "GLOBAL"
    get_who $P5068, $P5069
    set $P5067, $P5068["$W"]
    unless_null $P5067, fallback4327
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5067, $P5070
  fallback4327:
    unless_null $P5067, vivi_14014328
    die "Contextual $*W not found"
    box $P5071, "Contextual $*W not found"
    set $P5067, $P5071
  vivi_14014328:
    set $P5066, $P5067
  fallback4326:
    $P5072 = $P5066."cur_lexpad"()
    unless_null _lex_param_1, fallback4329
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5076
  fallback4329:
    set $P5075, _lex_param_1["name"]
    unless_null $P5075, fallback4330
    nqp_get_sc_object $P5077, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5075, $P5077
  fallback4330:
    set $P5074, $P5075["identifier"]
    unless_null $P5074, fallback4331
    nqp_get_sc_object $P5078, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5074, $P5078
  fallback4331:
    set $P5073, $P5074[0]
    unless_null $P5073, fallback4332
    nqp_get_sc_object $P5079, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5073, $P5079
  fallback4332:
    $P5080 = $P5060."install_lexical_symbol"($P5072, $P5073, $P102)
    set $P5081, $P5080
  if1399_end4319:
    set $P5131, $P5081
    goto if1393_end4300
  if1393_else4299:
    find_dynamic_lex $P5083, "$*SCOPE"
    unless_null $P5083, fallback4335
    get_hll_global $P5086, "GLOBAL"
    get_who $P5085, $P5086
    set $P5084, $P5085["$SCOPE"]
    unless_null $P5084, fallback4336
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5084, $P5087
  fallback4336:
    unless_null $P5084, vivi_14034337
    die "Contextual $*SCOPE not found"
    box $P5088, "Contextual $*SCOPE not found"
    set $P5084, $P5088
  vivi_14034337:
    set $P5083, $P5084
  fallback4335:
    set $S5004, $P5083
    iseq $I5005, $S5004, "my"
    unless $I5005 goto if1402_else4333 
.annotate 'line', 2061
    unless_null _lex_param_1, fallback4340
    nqp_get_sc_object $P5091, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5091
  fallback4340:
    set $P5090, _lex_param_1["name"]
    unless_null $P5090, fallback4341
    nqp_get_sc_object $P5092, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5090, $P5092
  fallback4341:
    set $P5089, $P5090["identifier"]
    unless_null $P5089, fallback4342
    nqp_get_sc_object $P5093, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5089, $P5093
  fallback4342:
    set $N5003, $P5089
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    box $P5100, $I5006
    set $P5099, $P5100
    unless $I5006 goto if1404_end4339 
.annotate 'line', 2062
.annotate 'line', 2063
    unless_null _lex_param_1, fallback4343
    nqp_get_sc_object $P5095, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5095
  fallback4343:
    set $P5094, _lex_param_1["name"]
    unless_null $P5094, fallback4344
    nqp_get_sc_object $P5096, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5094, $P5096
  fallback4344:
    $P5097 = $P5094."CURSOR"()
    $P5098 = $P5097."panic"("A my scoped package cannot have a multi-part name yet")
    set $P5099, $P5098
  if1404_end4339:
.annotate 'line', 2065
    find_dynamic_lex $P5101, "$*W"
    unless_null $P5101, fallback4345
    get_hll_global $P5104, "GLOBAL"
    get_who $P5103, $P5104
    set $P5102, $P5103["$W"]
    unless_null $P5102, fallback4346
    nqp_get_sc_object $P5105, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5102, $P5105
  fallback4346:
    unless_null $P5102, vivi_14054347
    die "Contextual $*W not found"
    box $P5106, "Contextual $*W not found"
    set $P5102, $P5106
  vivi_14054347:
    set $P5101, $P5102
  fallback4345:
    find_dynamic_lex $P5107, "$*W"
    unless_null $P5107, fallback4348
    get_hll_global $P5110, "GLOBAL"
    get_who $P5109, $P5110
    set $P5108, $P5109["$W"]
    unless_null $P5108, fallback4349
    nqp_get_sc_object $P5111, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5108, $P5111
  fallback4349:
    unless_null $P5108, vivi_14064350
    die "Contextual $*W not found"
    box $P5112, "Contextual $*W not found"
    set $P5108, $P5112
  vivi_14064350:
    set $P5107, $P5108
  fallback4348:
    $P5113 = $P5107."cur_lexpad"()
    unless_null _lex_param_1, fallback4351
    nqp_get_sc_object $P5117, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5117
  fallback4351:
    set $P5116, _lex_param_1["name"]
    unless_null $P5116, fallback4352
    nqp_get_sc_object $P5118, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5116, $P5118
  fallback4352:
    set $P5115, $P5116["identifier"]
    unless_null $P5115, fallback4353
    nqp_get_sc_object $P5119, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5115, $P5119
  fallback4353:
    set $P5114, $P5115[0]
    unless_null $P5114, fallback4354
    nqp_get_sc_object $P5120, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5114, $P5120
  fallback4354:
    $P5121 = $P5101."install_lexical_symbol"($P5113, $P5114, $P102)
    set $P5130, $P5121
    goto if1402_end4334
  if1402_else4333:
.annotate 'line', 2067
.annotate 'line', 2068
    $P5122 = _lex_param_1."CURSOR"()
    find_dynamic_lex $P5123, "$*SCOPE"
    unless_null $P5123, fallback4355
    get_hll_global $P5126, "GLOBAL"
    get_who $P5125, $P5126
    set $P5124, $P5125["$SCOPE"]
    unless_null $P5124, fallback4356
    nqp_get_sc_object $P5127, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5124, $P5127
  fallback4356:
    unless_null $P5124, vivi_14074357
    die "Contextual $*SCOPE not found"
    box $P5128, "Contextual $*SCOPE not found"
    set $P5124, $P5128
  vivi_14074357:
    set $P5123, $P5124
  fallback4355:
    set $S5006, $P5123
    concat $S5005, $S5006, " scoped packages are not supported"
    $P5129 = $P5122."panic"($S5005)
    set $P5130, $P5129
  if1402_end4334:
    set $P5131, $P5130
  if1393_end4300:
.annotate 'line', 2071
    get_hll_global $P5135, "GLOBAL"
    nqp_get_package_through_who $P5134, $P5135, "QAST"
    get_who $P5133, $P5134
    set $P5132, $P5133["Stmts"]
    unless_null $P5132, fallback4358
    nqp_get_sc_object $P5136, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5132, $P5136
  fallback4358:
    $P5137 = $P5132."new"()
    $P5138 = _lex_param_1."!make"($P5137)
    .return ($P5138) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_292_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2074
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5156 = 'cuid_441_1347719921.536' 
    capture_lex $P5156 
    .const 'Sub' $P5156 = 'cuid_442_1347719921.536' 
    capture_lex $P5156 
    .const 'Sub' $P5156 = 'cuid_443_1347719921.536' 
    capture_lex $P5156 
    .lex "@ns", $P101 
    .lex "$name", $P102 
    .lex "$how", $P103 
    .lex "$past", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P104, $P5004
    unless_null _lex_param_1, fallback4359
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5008
  fallback4359:
    set $P5007, _lex_param_1["name"]
    unless_null $P5007, fallback4360
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5009
  fallback4360:
    set $P5006, $P5007["identifier"]
    unless_null $P5006, fallback4361
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5010
  fallback4361:
    clone $P5005, $P5006
    set $P101, $P5005
.annotate 'line', 2077
    $P5011 = $P101."pop"()
    set $S5001, $P5011
    box $P5012, $S5001
    set $P102, $P5012
    find_dynamic_lex $P5014, "%*HOW"
    unless_null $P5014, fallback4362
    get_hll_global $P5017, "GLOBAL"
    get_who $P5016, $P5017
    set $P5015, $P5016["%HOW"]
    unless_null $P5015, fallback4363
    get_hll_global $P5019, "GLOBAL"
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%HOW"], $P5020
    set $P5015, $P5020
  fallback4363:
    unless_null $P5015, vivi_14084364
    die "Contextual %*HOW not found"
    box $P5021, "Contextual %*HOW not found"
    set $P5015, $P5021
  vivi_14084364:
    set $P5014, $P5015
  fallback4362:
    find_dynamic_lex $P5022, "$*PKGDECL"
    unless_null $P5022, fallback4365
    get_hll_global $P5025, "GLOBAL"
    get_who $P5024, $P5025
    set $P5023, $P5024["$PKGDECL"]
    unless_null $P5023, fallback4366
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5023, $P5026
  fallback4366:
    unless_null $P5023, vivi_14094367
    die "Contextual $*PKGDECL not found"
    box $P5027, "Contextual $*PKGDECL not found"
    set $P5023, $P5027
  vivi_14094367:
    set $P5022, $P5023
  fallback4365:
    set $S5002, $P5022
    set $P5013, $P5014[$S5002]
    unless_null $P5013, fallback4368
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5013, $P5028
  fallback4368:
    set $P103, $P5013
    unless_null _lex_param_1, fallback4371
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5030
  fallback4371:
    set $P5029, _lex_param_1["block"]
    unless_null $P5029, fallback4372
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5029, $P5031
  fallback4372:
    unless $P5029 goto if1410_else4369 
.annotate 'line', 2081
    unless_null _lex_param_1, fallback4373
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5033
  fallback4373:
    set $P5032, _lex_param_1["block"]
    unless_null $P5032, fallback4374
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5032, $P5034
  fallback4374:
    $P5035 = $P5032."ast"()
    set $P5040, $P5035
    goto if1410_end4370
  if1410_else4369:
    unless_null _lex_param_1, fallback4375
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5037
  fallback4375:
    set $P5036, _lex_param_1["comp_unit"]
    unless_null $P5036, fallback4376
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5036, $P5038
  fallback4376:
    $P5039 = $P5036."ast"()
    set $P5040, $P5039
  if1410_end4370:
    set $P104, $P5040
    can $I5001, $P103, "parametric"
    box $P5043, $I5001
    set $P5042, $P5043
    unless $I5001 goto if1412_end4380 
.annotate 'line', 2087
    $P5041 = $P103."parametric"($P103)
    set $P5042, $P5041
  if1412_end4380:
    unless $P5042 goto if1411_else4377 
.annotate 'line', 2088
    $P5044 = $P104."blocktype"("declaration")
.annotate 'line', 2089
    get_hll_global $P5048, "GLOBAL"
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["Var"]
    unless_null $P5045, fallback4381
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5045, $P5049
  fallback4381:
    $P5050 = $P5045."new"("$?CLASS" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5051 = $P104."unshift"($P5050)
.annotate 'line', 2091
    $P5052 = $P104."symbol"("$?CLASS", "lexical" :named("scope"))
.annotate 'line', 2092
    find_dynamic_lex $P5053, "$*W"
    unless_null $P5053, fallback4382
    get_hll_global $P5056, "GLOBAL"
    get_who $P5055, $P5056
    set $P5054, $P5055["$W"]
    unless_null $P5054, fallback4383
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5054, $P5057
  fallback4383:
    unless_null $P5054, vivi_14134384
    die "Contextual $*W not found"
    box $P5058, "Contextual $*W not found"
    set $P5054, $P5058
  vivi_14134384:
    set $P5053, $P5054
  fallback4382:
    find_dynamic_lex $P5059, "$*PACKAGE"
    unless_null $P5059, fallback4385
    get_hll_global $P5062, "GLOBAL"
    get_who $P5061, $P5062
    set $P5060, $P5061["$PACKAGE"]
    unless_null $P5060, fallback4386
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5060, $P5063
  fallback4386:
    unless_null $P5060, vivi_14144387
    die "Contextual $*PACKAGE not found"
    box $P5064, "Contextual $*PACKAGE not found"
    set $P5060, $P5064
  vivi_14144387:
    set $P5059, $P5060
  fallback4385:
    $P5065 = $P5053."pkg_set_body_block"($P5059, $P104)
.annotate 'line', 2093
    find_dynamic_lex $P5066, "$*W"
    unless_null $P5066, fallback4388
    get_hll_global $P5069, "GLOBAL"
    get_who $P5068, $P5069
    set $P5067, $P5068["$W"]
    unless_null $P5067, fallback4389
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5067, $P5070
  fallback4389:
    unless_null $P5067, vivi_14154390
    die "Contextual $*W not found"
    box $P5071, "Contextual $*W not found"
    set $P5067, $P5071
  vivi_14154390:
    set $P5066, $P5067
  fallback4388:
    find_dynamic_lex $P5072, "$*PACKAGE"
    unless_null $P5072, fallback4391
    get_hll_global $P5075, "GLOBAL"
    get_who $P5074, $P5075
    set $P5073, $P5074["$PACKAGE"]
    unless_null $P5073, fallback4392
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5073, $P5076
  fallback4392:
    unless_null $P5073, vivi_14164393
    die "Contextual $*PACKAGE not found"
    box $P5077, "Contextual $*PACKAGE not found"
    set $P5073, $P5077
  vivi_14164393:
    set $P5072, $P5073
  fallback4391:
    $P5078 = $P5066."install_lexical_symbol"($P104, "$?PACKAGE", $P5072)
.annotate 'line', 2094
    find_dynamic_lex $P5079, "$*W"
    unless_null $P5079, fallback4394
    get_hll_global $P5082, "GLOBAL"
    get_who $P5081, $P5082
    set $P5080, $P5081["$W"]
    unless_null $P5080, fallback4395
    nqp_get_sc_object $P5083, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5080, $P5083
  fallback4395:
    unless_null $P5080, vivi_14174396
    die "Contextual $*W not found"
    box $P5084, "Contextual $*W not found"
    set $P5080, $P5084
  vivi_14174396:
    set $P5079, $P5080
  fallback4394:
    find_dynamic_lex $P5085, "$*PACKAGE"
    unless_null $P5085, fallback4397
    get_hll_global $P5088, "GLOBAL"
    get_who $P5087, $P5088
    set $P5086, $P5087["$PACKAGE"]
    unless_null $P5086, fallback4398
    nqp_get_sc_object $P5089, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5086, $P5089
  fallback4398:
    unless_null $P5086, vivi_14184399
    die "Contextual $*PACKAGE not found"
    box $P5090, "Contextual $*PACKAGE not found"
    set $P5086, $P5090
  vivi_14184399:
    set $P5085, $P5086
  fallback4397:
    $P5091 = $P5079."install_lexical_symbol"($P104, "$?ROLE", $P5085)
    set $P5119, $P5091
    goto if1411_end4378
  if1411_else4377:
.annotate 'line', 2096
.annotate 'line', 2097
    $P5092 = $P104."blocktype"("immediate")
.annotate 'line', 2098
    find_dynamic_lex $P5093, "$*W"
    unless_null $P5093, fallback4400
    get_hll_global $P5096, "GLOBAL"
    get_who $P5095, $P5096
    set $P5094, $P5095["$W"]
    unless_null $P5094, fallback4401
    nqp_get_sc_object $P5097, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5094, $P5097
  fallback4401:
    unless_null $P5094, vivi_14194402
    die "Contextual $*W not found"
    box $P5098, "Contextual $*W not found"
    set $P5094, $P5098
  vivi_14194402:
    set $P5093, $P5094
  fallback4400:
    find_dynamic_lex $P5099, "$*PACKAGE"
    unless_null $P5099, fallback4403
    get_hll_global $P5102, "GLOBAL"
    get_who $P5101, $P5102
    set $P5100, $P5101["$PACKAGE"]
    unless_null $P5100, fallback4404
    nqp_get_sc_object $P5103, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5100, $P5103
  fallback4404:
    unless_null $P5100, vivi_14204405
    die "Contextual $*PACKAGE not found"
    box $P5104, "Contextual $*PACKAGE not found"
    set $P5100, $P5104
  vivi_14204405:
    set $P5099, $P5100
  fallback4403:
    $P5105 = $P5093."install_lexical_symbol"($P104, "$?PACKAGE", $P5099)
.annotate 'line', 2099
    find_dynamic_lex $P5106, "$*W"
    unless_null $P5106, fallback4406
    get_hll_global $P5109, "GLOBAL"
    get_who $P5108, $P5109
    set $P5107, $P5108["$W"]
    unless_null $P5107, fallback4407
    nqp_get_sc_object $P5110, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5107, $P5110
  fallback4407:
    unless_null $P5107, vivi_14214408
    die "Contextual $*W not found"
    box $P5111, "Contextual $*W not found"
    set $P5107, $P5111
  vivi_14214408:
    set $P5106, $P5107
  fallback4406:
    find_dynamic_lex $P5112, "$*PACKAGE"
    unless_null $P5112, fallback4409
    get_hll_global $P5115, "GLOBAL"
    get_who $P5114, $P5115
    set $P5113, $P5114["$PACKAGE"]
    unless_null $P5113, fallback4410
    nqp_get_sc_object $P5116, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5113, $P5116
  fallback4410:
    unless_null $P5113, vivi_14224411
    die "Contextual $*PACKAGE not found"
    box $P5117, "Contextual $*PACKAGE not found"
    set $P5113, $P5117
  vivi_14224411:
    set $P5112, $P5113
  fallback4409:
    $P5118 = $P5106."install_lexical_symbol"($P104, "$?CLASS", $P5112)
    set $P5119, $P5118
  if1411_end4378:
    unless_null _lex_param_1, fallback4414
    nqp_get_sc_object $P5121, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5121
  fallback4414:
    set $P5120, _lex_param_1["parent"]
    unless_null $P5120, fallback4415
    nqp_get_sc_object $P5122, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5120, $P5122
  fallback4415:
    unless $P5120 goto if1423_else4412 
    .const 'Sub' $P5123 = 'cuid_441_1347719921.536' 
    capture_lex $P5123
    $P5124 = $P5123()
    set $P5129, $P5124
    goto if1423_end4413
  if1423_else4412:
    can $I5002, $P103, "set_default_parent"
    box $P5128, $I5002
    set $P5127, $P5128
    unless $I5002 goto if1430_end4437 
    .const 'Sub' $P5125 = 'cuid_442_1347719921.536' 
    capture_lex $P5125
    $P5126 = $P5125()
    set $P5127, $P5126
  if1430_end4437:
    set $P5129, $P5127
  if1423_end4413:
    unless_null _lex_param_1, fallback4454
    nqp_get_sc_object $P5131, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5131
  fallback4454:
    set $P5130, _lex_param_1["role"]
    unless_null $P5130, fallback4455
    nqp_get_sc_object $P5132, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5130, $P5132
  fallback4455:
    set $P5141, $P5130
    unless $P5130 goto if1436_end4453 
.annotate 'line', 2124
    unless_null _lex_param_1, fallback4456
    nqp_get_sc_object $P5137, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5137
  fallback4456:
    set $P5136, _lex_param_1["role"]
    unless_null $P5136, fallback4457
    nqp_get_sc_object $P5138, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5136, $P5138
  fallback4457:
    set $P5133, $P5136
    iter $P5135, $P5136
  for_next4472:
    unless $P5135, for_done4474
    shift $P5140, $P5135
  for_redo4473:
    .const 'Sub' $P5139 = 'cuid_443_1347719921.536' 
    capture_lex $P5139
    $P5133 = $P5139($P5140)
    goto for_next4472
  for_done4474:
    set $P5141, $P5133
  if1436_end4453:
.annotate 'line', 2142
    find_dynamic_lex $P5142, "$*W"
    unless_null $P5142, fallback4475
    get_hll_global $P5145, "GLOBAL"
    get_who $P5144, $P5145
    set $P5143, $P5144["$W"]
    unless_null $P5143, fallback4476
    nqp_get_sc_object $P5146, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5143, $P5146
  fallback4476:
    unless_null $P5143, vivi_14434477
    die "Contextual $*W not found"
    box $P5147, "Contextual $*W not found"
    set $P5143, $P5147
  vivi_14434477:
    set $P5142, $P5143
  fallback4475:
    find_dynamic_lex $P5148, "$*PACKAGE"
    unless_null $P5148, fallback4478
    get_hll_global $P5151, "GLOBAL"
    get_who $P5150, $P5151
    set $P5149, $P5150["$PACKAGE"]
    unless_null $P5149, fallback4479
    nqp_get_sc_object $P5152, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5149, $P5152
  fallback4479:
    unless_null $P5149, vivi_14444480
    die "Contextual $*PACKAGE not found"
    box $P5153, "Contextual $*PACKAGE not found"
    set $P5149, $P5153
  vivi_14444480:
    set $P5148, $P5149
  fallback4478:
    $P5154 = $P5142."pkg_compose"($P5148)
.annotate 'line', 2144
    $P5155 = _lex_param_1."!make"($P104)
    .return ($P5155) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_441_1347719921.536") :anon :lex :outer("cuid_292_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2103
    .lex "$parent", $P101 
    .lex "$parent_found", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_14264424
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 2106
.annotate 'line', 2107
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4416
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4417
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5007
  fallback4417:
    unless_null $P5004, vivi_14244418
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_14244418:
    set $P5003, $P5004
  fallback4416:
    find_lex $P5013, "$/"
    unless_null $P5013, fallback4419
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5013, $P5014
  fallback4419:
    set $P5012, $P5013["parent"]
    unless_null $P5012, fallback4420
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5012, $P5015
  fallback4420:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback4421
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5016
  fallback4421:
    set $P5010, $P5011["identifier"]
    unless_null $P5010, fallback4422
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5017
  fallback4422:
    clone $P5009, $P5010
    $P5018 = $P5003."find_sym"($P5009)
    set $P101, $P5018
    box $P5019, 1
    set $P102, $P5019
    set $P5021, $P102
    pop_eh 
    goto skip_handler_14254423
  catch_handler_14264424:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_14254423
  skip_handler_14254423:
    unless $P102 goto if1427_else4425 
.annotate 'line', 2110
.annotate 'line', 2111
    find_dynamic_lex $P5022, "$*W"
    unless_null $P5022, fallback4427
    get_hll_global $P5025, "GLOBAL"
    get_who $P5024, $P5025
    set $P5023, $P5024["$W"]
    unless_null $P5023, fallback4428
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5023, $P5026
  fallback4428:
    unless_null $P5023, vivi_14284429
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5023, $P5027
  vivi_14284429:
    set $P5022, $P5023
  fallback4427:
    find_dynamic_lex $P5028, "$*PACKAGE"
    unless_null $P5028, fallback4430
    get_hll_global $P5031, "GLOBAL"
    get_who $P5030, $P5031
    set $P5029, $P5030["$PACKAGE"]
    unless_null $P5029, fallback4431
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5029, $P5032
  fallback4431:
    unless_null $P5029, vivi_14294432
    die "Contextual $*PACKAGE not found"
    box $P5033, "Contextual $*PACKAGE not found"
    set $P5029, $P5033
  vivi_14294432:
    set $P5028, $P5029
  fallback4430:
    $P5034 = $P5022."pkg_add_parent_or_role"($P5028, "add_parent", $P101)
    set $P5044, $P5034
    goto if1427_end4426
  if1427_else4425:
.annotate 'line', 2113
.annotate 'line', 2114
    find_lex $P5035, "$/"
    $P5036 = $P5035."CURSOR"()
    find_lex $P5039, "$/"
    unless_null $P5039, fallback4433
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5039, $P5040
  fallback4433:
    set $P5038, $P5039["parent"]
    unless_null $P5038, fallback4434
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5038, $P5041
  fallback4434:
    set $P5037, $P5038[0]
    unless_null $P5037, fallback4435
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5037, $P5042
  fallback4435:
    set $S5003, $P5037
    concat $S5002, "Could not find parent class '", $S5003
    concat $S5001, $S5002, "'"
    $P5043 = $P5036."panic"($S5001)
    set $P5044, $P5043
  if1427_end4426:
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_442_1347719921.536") :anon :lex :outer("cuid_292_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2117
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    find_dynamic_lex $P5002, "$*PKGDECL"
    unless_null $P5002, fallback4440
    get_hll_global $P5005, "GLOBAL"
    get_who $P5004, $P5005
    set $P5003, $P5004["$PKGDECL"]
    unless_null $P5003, fallback4441
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5006
  fallback4441:
    unless_null $P5003, vivi_14324442
    die "Contextual $*PKGDECL not found"
    box $P5007, "Contextual $*PKGDECL not found"
    set $P5003, $P5007
  vivi_14324442:
    set $P5002, $P5003
  fallback4440:
    set $S5001, $P5002
    iseq $I5001, $S5001, "grammar"
    unless $I5001 goto if1431_else4438 
    new $P5008, 'ResizablePMCArray'
    box $P5009, "NQPCursor"
    push $P5008, $P5009
    set $P5012, $P5008
    goto if1431_end4439
  if1431_else4438:
    new $P5010, 'ResizablePMCArray'
    box $P5011, "NQPMu"
    push $P5010, $P5011
    set $P5012, $P5010
  if1431_end4439:
    set $P101, $P5012
.annotate 'line', 2119
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback4443
    get_hll_global $P5016, "GLOBAL"
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback4444
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5014, $P5017
  fallback4444:
    unless_null $P5014, vivi_14334445
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_14334445:
    set $P5013, $P5014
  fallback4443:
    find_dynamic_lex $P5019, "$*PACKAGE"
    unless_null $P5019, fallback4446
    get_hll_global $P5022, "GLOBAL"
    get_who $P5021, $P5022
    set $P5020, $P5021["$PACKAGE"]
    unless_null $P5020, fallback4447
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5020, $P5023
  fallback4447:
    unless_null $P5020, vivi_14344448
    die "Contextual $*PACKAGE not found"
    box $P5024, "Contextual $*PACKAGE not found"
    set $P5020, $P5024
  vivi_14344448:
    set $P5019, $P5020
  fallback4446:
.annotate 'line', 2120
    find_dynamic_lex $P5025, "$*W"
    unless_null $P5025, fallback4449
    get_hll_global $P5028, "GLOBAL"
    get_who $P5027, $P5028
    set $P5026, $P5027["$W"]
    unless_null $P5026, fallback4450
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5026, $P5029
  fallback4450:
    unless_null $P5026, vivi_14354451
    die "Contextual $*W not found"
    box $P5030, "Contextual $*W not found"
    set $P5026, $P5030
  vivi_14354451:
    set $P5025, $P5026
  fallback4449:
    $P5031 = $P5025."find_sym"($P101)
    $P5032 = $P5013."pkg_add_parent_or_role"($P5019, "set_default_parent", $P5031)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_443_1347719921.536") :anon :lex :outer("cuid_292_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2125
    .param pmc _lex_param_0 
    .lex "$role", $P101 
    .lex "$role_found", $P102 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    new $P5014, 'ExceptionHandler'
    set_label $P5014, catch_handler_14394463
    $P5014.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5014
.annotate 'line', 2128
.annotate 'line', 2129
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4458
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4459
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5007
  fallback4459:
    unless_null $P5004, vivi_14374460
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_14374460:
    set $P5003, $P5004
  fallback4458:
    set $P5010, _lex_param_0["identifier"]
    unless_null $P5010, fallback4461
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5011
  fallback4461:
    clone $P5009, $P5010
    $P5012 = $P5003."find_sym"($P5009)
    set $P101, $P5012
    box $P5013, 1
    set $P102, $P5013
    set $P5015, $P102
    pop_eh 
    goto skip_handler_14384462
  catch_handler_14394463:
    .get_results ($P5014) 
    set $I10001, 1
    set $P5014["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    finalize $P5014
    pop_upto_eh $P5014
    pop_eh 
    set $P5015, $P10001
    goto skip_handler_14384462
  skip_handler_14384462:
    unless $P102 goto if1440_else4464 
.annotate 'line', 2132
.annotate 'line', 2133
    find_dynamic_lex $P5016, "$*W"
    unless_null $P5016, fallback4466
    get_hll_global $P5019, "GLOBAL"
    get_who $P5018, $P5019
    set $P5017, $P5018["$W"]
    unless_null $P5017, fallback4467
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5017, $P5020
  fallback4467:
    unless_null $P5017, vivi_14414468
    die "Contextual $*W not found"
    box $P5021, "Contextual $*W not found"
    set $P5017, $P5021
  vivi_14414468:
    set $P5016, $P5017
  fallback4466:
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback4469
    get_hll_global $P5025, "GLOBAL"
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback4470
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5023, $P5026
  fallback4470:
    unless_null $P5023, vivi_14424471
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_14424471:
    set $P5022, $P5023
  fallback4469:
    $P5028 = $P5016."pkg_add_parent_or_role"($P5022, "add_role", $P101)
    set $P5032, $P5028
    goto if1440_end4465
  if1440_else4464:
.annotate 'line', 2135
.annotate 'line', 2136
    find_lex $P5029, "$/"
    $P5030 = $P5029."CURSOR"()
    set $S5003, _lex_param_0
    concat $S5002, "Could not find role '", $S5003
    concat $S5001, $S5002, "'"
    $P5031 = $P5030."panic"($S5001)
    set $P5032, $P5031
  if1440_end4465:
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_293_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2147
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4481
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4481:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4482
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4482:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_294_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2148
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4483
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4483:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4484
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4484:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_295_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2149
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4485
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4485:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4486
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4486:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_296_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2151
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2152
    unless_null _lex_param_1, fallback4489
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4489:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4490
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4490:
    unless $P5001 goto if1445_else4487 
    unless_null _lex_param_1, fallback4491
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5005
  fallback4491:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4492
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5006
  fallback4492:
    $P5007 = $P5004."ast"()
    set $P5020, $P5007
    goto if1445_end4488
  if1445_else4487:
    unless_null _lex_param_1, fallback4495
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5009
  fallback4495:
    set $P5008, _lex_param_1["multi_declarator"]
    unless_null $P5008, fallback4496
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5010
  fallback4496:
    unless $P5008 goto if1446_else4493 
.annotate 'line', 2153
    unless_null _lex_param_1, fallback4497
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5012
  fallback4497:
    set $P5011, _lex_param_1["multi_declarator"]
    unless_null $P5011, fallback4498
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5013
  fallback4498:
    $P5014 = $P5011."ast"()
    set $P5019, $P5014
    goto if1446_end4494
  if1446_else4493:
.annotate 'line', 2154
    unless_null _lex_param_1, fallback4499
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5016
  fallback4499:
    set $P5015, _lex_param_1["package_declarator"]
    unless_null $P5015, fallback4500
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5015, $P5017
  fallback4500:
    $P5018 = $P5015."ast"()
    set $P5019, $P5018
  if1446_end4494:
    set $P5020, $P5019
  if1445_end4488:
    $P5021 = _lex_param_1."!make"($P5020)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_297_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2157
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2158
    unless_null _lex_param_1, fallback4503
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4503:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4504
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4504:
    unless $P5001 goto if1447_else4501 
.annotate 'line', 2159
    unless_null _lex_param_1, fallback4505
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5005
  fallback4505:
    set $P5004, _lex_param_1["routine_declarator"]
    unless_null $P5004, fallback4506
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5006
  fallback4506:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1447_end4502
  if1447_else4501:
.annotate 'line', 2160
    unless_null _lex_param_1, fallback4507
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5009
  fallback4507:
    set $P5008, _lex_param_1["variable_declarator"]
    unless_null $P5008, fallback4508
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5010
  fallback4508:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1447_end4502:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_298_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2163
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4511
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4511:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4512
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4512:
    unless $P5001 goto if1448_else4509 
    unless_null _lex_param_1, fallback4513
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5005
  fallback4513:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4514
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5006
  fallback4514:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1448_end4510
  if1448_else4509:
    unless_null _lex_param_1, fallback4515
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5009
  fallback4515:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4516
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5010
  fallback4516:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1448_end4510:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_299_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2164
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4519
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4519:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4520
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4520:
    unless $P5001 goto if1449_else4517 
    unless_null _lex_param_1, fallback4521
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5005
  fallback4521:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4522
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5006
  fallback4522:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1449_end4518
  if1449_else4517:
    unless_null _lex_param_1, fallback4523
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5009
  fallback4523:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4524
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5010
  fallback4524:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1449_end4518:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_300_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2165
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4525
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4525:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4526
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4526:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_301_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2168
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5071 = 'cuid_444_1347719921.536' 
    capture_lex $P5071 
    .const 'Sub' $P5071 = 'cuid_446_1347719921.536' 
    capture_lex $P5071 
    .const 'Sub' $P5071 = 'cuid_447_1347719921.536' 
    capture_lex $P5071 
    .lex "$past", $P101 
    .lex "$sigil", $P102 
    .lex "$name", $P103 
    .lex "$BLOCK", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P104, $P5004
.annotate 'line', 2169
    unless_null _lex_param_1, fallback4527
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5006
  fallback4527:
    set $P5005, _lex_param_1["variable"]
    unless_null $P5005, fallback4528
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5005, $P5007
  fallback4528:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
    unless_null _lex_param_1, fallback4529
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5011
  fallback4529:
    set $P5010, _lex_param_1["variable"]
    unless_null $P5010, fallback4530
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5012
  fallback4530:
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4531
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5013
  fallback4531:
    set $P102, $P5009
.annotate 'line', 2171
    $P5014 = $P101."name"()
    set $P103, $P5014
.annotate 'line', 2172
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback4532
    get_hll_global $P5018, "GLOBAL"
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback4533
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5016, $P5019
  fallback4533:
    unless_null $P5016, vivi_14504534
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_14504534:
    set $P5015, $P5016
  fallback4532:
    $P5021 = $P5015."cur_lexpad"()
    set $P104, $P5021
    set $P5023, $P103
    unless $P103 goto if1452_end4538 
.annotate 'line', 2173
    $P5022 = $P104."symbol"($P103)
    set $P5023, $P5022
  if1452_end4538:
    set $P5026, $P5023
    unless $P5023 goto if1451_end4536 
.annotate 'line', 2174
    $P5024 = _lex_param_1."CURSOR"()
    $P5025 = $P5024."panic"("Redeclaration of symbol ", $P103)
    set $P5026, $P5025
  if1451_end4536:
    find_dynamic_lex $P5027, "$*SCOPE"
    unless_null $P5027, fallback4541
    get_hll_global $P5030, "GLOBAL"
    get_who $P5029, $P5030
    set $P5028, $P5029["$SCOPE"]
    unless_null $P5028, fallback4542
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5028, $P5031
  fallback4542:
    unless_null $P5028, vivi_14544543
    die "Contextual $*SCOPE not found"
    box $P5032, "Contextual $*SCOPE not found"
    set $P5028, $P5032
  vivi_14544543:
    set $P5027, $P5028
  fallback4541:
    set $S5001, $P5027
    iseq $I5001, $S5001, "has"
    unless $I5001 goto if1453_else4539 
    .const 'Sub' $P5033 = 'cuid_444_1347719921.536' 
    capture_lex $P5033
    $P5034 = $P5033()
    set $P5057, $P5034
    goto if1453_end4540
  if1453_else4539:
    find_dynamic_lex $P5035, "$*SCOPE"
    unless_null $P5035, fallback4595
    get_hll_global $P5038, "GLOBAL"
    get_who $P5037, $P5038
    set $P5036, $P5037["$SCOPE"]
    unless_null $P5036, fallback4596
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5036, $P5039
  fallback4596:
    unless_null $P5036, vivi_14724597
    die "Contextual $*SCOPE not found"
    box $P5040, "Contextual $*SCOPE not found"
    set $P5036, $P5040
  vivi_14724597:
    set $P5035, $P5036
  fallback4595:
    set $S5002, $P5035
    iseq $I5002, $S5002, "our"
    unless $I5002 goto if1471_else4593 
.annotate 'line', 2204
    unless_null _lex_param_1, fallback4600
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5042
  fallback4600:
    set $P5041, _lex_param_1["typename"]
    unless_null $P5041, fallback4601
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5041, $P5043
  fallback4601:
    set $P5046, $P5041
    unless $P5041 goto if1473_end4599 
.annotate 'line', 2208
.annotate 'line', 2209
    $P5044 = _lex_param_1."CURSOR"()
    $P5045 = $P5044."panic"("Cannot put types on our-scoped variables")
    set $P5046, $P5045
  if1473_end4599:
    unless_null _lex_param_1, fallback4602
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5048
  fallback4602:
    set $P5047, _lex_param_1["variable"]
    unless_null $P5047, fallback4603
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5047, $P5049
  fallback4603:
    set $S5003, $P5047
    box $P5050, $S5003
    set $P103, $P5050
.annotate 'line', 2212
    new $P5051, 'ResizablePMCArray'
    push $P5051, $P103
    $P5052 = "&lexical_package_lookup"($P5051, _lex_param_1)
    set $P101, $P5052
.annotate 'line', 2213
    $P5053 = $P104."symbol"($P103, "package" :named("scope"))
    set $P5056, $P5053
    goto if1471_end4594
  if1471_else4593:
    .const 'Sub' $P5054 = 'cuid_446_1347719921.536' 
    capture_lex $P5054
    $P5055 = $P5054()
    set $P5056, $P5055
  if1471_end4594:
    set $P5057, $P5056
  if1453_end4540:
    unless_null _lex_param_1, fallback4623
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5059
  fallback4623:
    set $P5058, _lex_param_1["trait"]
    unless_null $P5058, fallback4624
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5058, $P5060
  fallback4624:
    set $P5069, $P5058
    unless $P5058 goto if1478_end4622 
.annotate 'line', 2242
    unless_null _lex_param_1, fallback4625
    nqp_get_sc_object $P5065, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5065
  fallback4625:
    set $P5064, _lex_param_1["trait"]
    unless_null $P5064, fallback4626
    nqp_get_sc_object $P5066, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5064, $P5066
  fallback4626:
    set $P5061, $P5064
    iter $P5063, $P5064
  for_next4627:
    unless $P5063, for_done4629
    shift $P5068, $P5063
  for_redo4628:
    .const 'Sub' $P5067 = 'cuid_447_1347719921.536' 
    capture_lex $P5067
    $P5061 = $P5067($P5068)
    goto for_next4627
  for_done4629:
    set $P5069, $P5061
  if1478_end4622:
.annotate 'line', 2246
    $P5070 = _lex_param_1."!make"($P101)
    .return ($P5070) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_444_1347719921.536") :anon :lex :outer("cuid_301_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2176
    .lex "%lit_args", $P101 
    .lex "%obj_args", $P102 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    find_dynamic_lex $P5003, "%*HOW"
    unless_null $P5003, fallback4546
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["%HOW"]
    unless_null $P5004, fallback4547
    get_hll_global $P5008, "GLOBAL"
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%HOW"], $P5009
    set $P5004, $P5009
  fallback4547:
    unless_null $P5004, vivi_14564548
    die "Contextual %*HOW not found"
    box $P5010, "Contextual %*HOW not found"
    set $P5004, $P5010
  vivi_14564548:
    set $P5003, $P5004
  fallback4546:
    find_dynamic_lex $P5011, "$*PKGDECL"
    unless_null $P5011, fallback4549
    get_hll_global $P5014, "GLOBAL"
    get_who $P5013, $P5014
    set $P5012, $P5013["$PKGDECL"]
    unless_null $P5012, fallback4550
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5012, $P5015
  fallback4550:
    unless_null $P5012, vivi_14574551
    die "Contextual $*PKGDECL not found"
    box $P5016, "Contextual $*PKGDECL not found"
    set $P5012, $P5016
  vivi_14574551:
    set $P5011, $P5012
  fallback4549:
    set $S5002, $P5011
    concat $S5001, $S5002, "-attr"
    exists $I5001, $P5003[$S5001]
    box $P5027, $I5001
    set $P5026, $P5027
    if $I5001 goto unless1455_end4545 
.annotate 'line', 2178
.annotate 'line', 2179
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    find_dynamic_lex $P5019, "$*PKGDECL"
    unless_null $P5019, fallback4552
    get_hll_global $P5022, "GLOBAL"
    get_who $P5021, $P5022
    set $P5020, $P5021["$PKGDECL"]
    unless_null $P5020, fallback4553
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5020, $P5023
  fallback4553:
    unless_null $P5020, vivi_14584554
    die "Contextual $*PKGDECL not found"
    box $P5024, "Contextual $*PKGDECL not found"
    set $P5020, $P5024
  vivi_14584554:
    set $P5019, $P5020
  fallback4552:
    set $S5004, $P5019
    concat $S5003, $S5004, " packages do not support attributes"
    $P5025 = $P5018."panic"($S5003)
    set $P5026, $P5025
  unless1455_end4545:
    find_lex $P5028, "$name"
    set $P101["name"], $P5028
    find_lex $P5030, "$/"
    unless_null $P5030, fallback4557
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5030, $P5031
  fallback4557:
    set $P5029, $P5030["typename"]
    unless_null $P5029, fallback4558
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5029, $P5032
  fallback4558:
    set $P5048, $P5029
    unless $P5029 goto if1459_end4556 
.annotate 'line', 2186
.annotate 'line', 2187
    find_dynamic_lex $P5033, "$*W"
    unless_null $P5033, fallback4559
    get_hll_global $P5036, "GLOBAL"
    get_who $P5035, $P5036
    set $P5034, $P5035["$W"]
    unless_null $P5034, fallback4560
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5034, $P5037
  fallback4560:
    unless_null $P5034, vivi_14604561
    die "Contextual $*W not found"
    box $P5038, "Contextual $*W not found"
    set $P5034, $P5038
  vivi_14604561:
    set $P5033, $P5034
  fallback4559:
    new $P5039, 'ResizablePMCArray'
    find_lex $P5042, "$/"
    unless_null $P5042, fallback4562
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5042, $P5043
  fallback4562:
    set $P5041, $P5042["typename"]
    unless_null $P5041, fallback4563
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5041, $P5044
  fallback4563:
    set $P5040, $P5041[0]
    unless_null $P5040, fallback4564
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5040, $P5045
  fallback4564:
    set $S5005, $P5040
    box $P5046, $S5005
    push $P5039, $P5046
    $P5047 = $P5033."find_sym"($P5039)
    set $P102["type"], $P5047
    set $P5048, $P5047
  if1459_end4556:
    find_lex $P5049, "$sigil"
    set $S5006, $P5049
    iseq $I5002, $S5006, "$"
    set $I5004, $I5002
    if $I5002 goto unless1462_end4568 
    find_lex $P5050, "$sigil"
    set $S5007, $P5050
    iseq $I5003, $S5007, "&"
    set $I5004, $I5003
  unless1462_end4568:
    box $P5070, $I5004
    set $P5069, $P5070
    unless $I5004 goto if1461_end4566 
.annotate 'line', 2189
    find_lex $P5052, "$/"
    unless_null $P5052, fallback4571
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5052, $P5053
  fallback4571:
    set $P5051, $P5052["typename"]
    unless_null $P5051, fallback4572
    nqp_get_sc_object $P5054, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5051, $P5054
  fallback4572:
    unless $P5051 goto if1463_else4569 
.annotate 'line', 2190
    set $P5055, $P102["type"]
    unless_null $P5055, fallback4573
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5055, $P5056
  fallback4573:
    set $P102["default"], $P5055
    set $P5068, $P5055
    goto if1463_end4570
  if1463_else4569:
.annotate 'line', 2193
    new $P5066, 'ExceptionHandler'
    set_label $P5066, catch_handler_14664578
    $P5066.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5066
.annotate 'line', 2194
    find_dynamic_lex $P5057, "$*W"
    unless_null $P5057, fallback4574
    get_hll_global $P5060, "GLOBAL"
    get_who $P5059, $P5060
    set $P5058, $P5059["$W"]
    unless_null $P5058, fallback4575
    nqp_get_sc_object $P5061, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5058, $P5061
  fallback4575:
    unless_null $P5058, vivi_14644576
    die "Contextual $*W not found"
    box $P5062, "Contextual $*W not found"
    set $P5058, $P5062
  vivi_14644576:
    set $P5057, $P5058
  fallback4574:
    new $P5063, 'ResizablePMCArray'
    box $P5064, "NQPMu"
    push $P5063, $P5064
    $P5065 = $P5057."find_sym"($P5063)
    set $P102["default"], $P5065
    set $P5067, $P5065
    pop_eh 
    goto skip_handler_14654577
  catch_handler_14664578:
    .get_results ($P5066) 
    set $I10001, 1
    set $P5066["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    finalize $P5066
    pop_upto_eh $P5066
    pop_eh 
    set $P5067, $P10001
    goto skip_handler_14654577
  skip_handler_14654577:
    set $P5068, $P5067
  if1463_end4570:
    set $P5069, $P5068
  if1461_end4566:
.annotate 'line', 2199
    find_dynamic_lex $P5071, "$*W"
    unless_null $P5071, fallback4579
    get_hll_global $P5074, "GLOBAL"
    get_who $P5073, $P5074
    set $P5072, $P5073["$W"]
    unless_null $P5072, fallback4580
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5072, $P5075
  fallback4580:
    unless_null $P5072, vivi_14674581
    die "Contextual $*W not found"
    box $P5076, "Contextual $*W not found"
    set $P5072, $P5076
  vivi_14674581:
    set $P5071, $P5072
  fallback4579:
    find_dynamic_lex $P5077, "$*PACKAGE"
    unless_null $P5077, fallback4582
    get_hll_global $P5080, "GLOBAL"
    get_who $P5079, $P5080
    set $P5078, $P5079["$PACKAGE"]
    unless_null $P5078, fallback4583
    nqp_get_sc_object $P5081, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5078, $P5081
  fallback4583:
    unless_null $P5078, vivi_14684584
    die "Contextual $*PACKAGE not found"
    box $P5082, "Contextual $*PACKAGE not found"
    set $P5078, $P5082
  vivi_14684584:
    set $P5077, $P5078
  fallback4582:
    find_dynamic_lex $P5084, "%*HOW"
    unless_null $P5084, fallback4585
    get_hll_global $P5087, "GLOBAL"
    get_who $P5086, $P5087
    set $P5085, $P5086["%HOW"]
    unless_null $P5085, fallback4586
    get_hll_global $P5089, "GLOBAL"
    get_who $P5088, $P5089
    new $P5090, 'Hash'
    set $P5088["%HOW"], $P5090
    set $P5085, $P5090
  fallback4586:
    unless_null $P5085, vivi_14694587
    die "Contextual %*HOW not found"
    box $P5091, "Contextual %*HOW not found"
    set $P5085, $P5091
  vivi_14694587:
    set $P5084, $P5085
  fallback4585:
    find_dynamic_lex $P5092, "$*PKGDECL"
    unless_null $P5092, fallback4588
    get_hll_global $P5095, "GLOBAL"
    get_who $P5094, $P5095
    set $P5093, $P5094["$PKGDECL"]
    unless_null $P5093, fallback4589
    nqp_get_sc_object $P5096, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5093, $P5096
  fallback4589:
    unless_null $P5093, vivi_14704590
    die "Contextual $*PKGDECL not found"
    box $P5097, "Contextual $*PKGDECL not found"
    set $P5093, $P5097
  vivi_14704590:
    set $P5092, $P5093
  fallback4588:
    set $S5009, $P5092
    concat $S5008, $S5009, "-attr"
    set $P5083, $P5084[$S5008]
    unless_null $P5083, fallback4591
    nqp_get_sc_object $P5098, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5083, $P5098
  fallback4591:
    $P5099 = $P5071."pkg_add_attribute"($P5077, $P5083, $P101, $P102)
.annotate 'line', 2202
    get_hll_global $P5103, "GLOBAL"
    nqp_get_package_through_who $P5102, $P5103, "QAST"
    get_who $P5101, $P5102
    set $P5100, $P5101["Stmts"]
    unless_null $P5100, fallback4592
    nqp_get_sc_object $P5104, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5100, $P5104
  fallback4592:
    $P5105 = $P5100."new"()
    store_lex "$past", $P5105
    .return ($P5105) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_446_1347719921.536") :anon :lex :outer("cuid_301_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2215
    .const 'Sub' $P5058 = 'cuid_445_1347719921.536' 
    capture_lex $P5058 
    .lex "$type", $P101 
    .lex "$default", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4606
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5005
  fallback4606:
    set $P5003, $P5004["typename"]
    unless_null $P5003, fallback4607
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5006
  fallback4607:
    unless $P5003 goto if1474_else4604 
.annotate 'line', 2218
    find_lex $P5007, "$sigil"
    set $S5001, $P5007
    iseq $I5001, $S5001, "$"
    box $P5012, $I5001
    set $P5011, $P5012
    if $I5001 goto unless1475_end4609 
.annotate 'line', 2219
.annotate 'line', 2220
    find_lex $P5008, "$/"
    $P5009 = $P5008."CURSOR"()
    $P5010 = $P5009."panic"("Only typed scalars are currently supported in NQP")
    set $P5011, $P5010
  unless1475_end4609:
.annotate 'line', 2222
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback4610
    get_hll_global $P5016, "GLOBAL"
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback4611
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5014, $P5017
  fallback4611:
    unless_null $P5014, vivi_14764612
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_14764612:
    set $P5013, $P5014
  fallback4610:
    new $P5019, 'ResizablePMCArray'
    find_lex $P5022, "$/"
    unless_null $P5022, fallback4613
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5022, $P5023
  fallback4613:
    set $P5021, $P5022["typename"]
    unless_null $P5021, fallback4614
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5021, $P5024
  fallback4614:
    set $P5020, $P5021[0]
    unless_null $P5020, fallback4615
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5020, $P5025
  fallback4615:
    set $S5002, $P5020
    box $P5026, $S5002
    push $P5019, $P5026
    $P5027 = $P5013."find_sym"($P5019)
    set $P101, $P5027
    repr_get_primitive_type_spec $I5002, $P101
    unless $I5002 goto if1477_else4616 
    .const 'Sub' $P5028 = 'cuid_445_1347719921.536' 
    capture_lex $P5028
    $P5029 = $P5028($I5002)
    set $P5033, $P5029
    goto if1477_end4617
  if1477_else4616:
.annotate 'line', 2226
.annotate 'line', 2227
    find_lex $P5030, "$/"
    $P5031 = $P5030."CURSOR"()
    $P5032 = $P5031."panic"("Only native types are currently supported/checked")
    set $P5033, $P5032
  if1477_end4617:
    set $P5036, $P5033
    goto if1474_end4605
  if1474_else4604:
.annotate 'line', 2230
.annotate 'line', 2231
    find_lex $P5034, "$sigil"
    $P5035 = "&default_for"($P5034)
    set $P102, $P5035
    set $P5036, $P102
  if1474_end4605:
.annotate 'line', 2233
    find_lex $P5038, "$BLOCK"
    set $P5037, $P5038[0]
    unless_null $P5037, fallback4618
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5037, $P5039
  fallback4618:
    get_hll_global $P5043, "GLOBAL"
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Op"]
    unless_null $P5040, fallback4619
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5040, $P5044
  fallback4619:
    find_lex $P5045, "$/"
.annotate 'line', 2235
    get_hll_global $P5049, "GLOBAL"
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["Var"]
    unless_null $P5046, fallback4620
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5046, $P5050
  fallback4620:
    find_lex $P5051, "$name"
    $P5052 = $P5046."new"($P5051 :named("name"), "lexical" :named("scope"), "var" :named("decl"), $P101 :named("returns"))
    $P5053 = $P5040."new"($P5052, $P102, "bind" :named("op"), $P5045 :named("node"))
    $P5054 = $P5037."push"($P5053)
.annotate 'line', 2238
    find_lex $P5055, "$BLOCK"
    find_lex $P5056, "$name"
    $P5057 = $P5055."symbol"($P5056, "lexical" :named("scope"), $P101 :named("type"))
    .return ($P5057) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_445_1347719921.536") :anon :lex :outer("cuid_446_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2223
    .param pmc _lex_param_0 
    .lex "$prim_spec", _lex_param_0 
.annotate 'line', 2224
    $P5001 = "&default_value_for_prim"(_lex_param_0)
    store_lex "$default", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_447_1347719921.536") :anon :lex :outer("cuid_301_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2243
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_302_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2249
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4630
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4630:
    set $P5001, _lex_param_1["routine_def"]
    unless_null $P5001, fallback4631
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4631:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_303_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2250
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4632
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4632:
    set $P5001, _lex_param_1["method_def"]
    unless_null $P5001, fallback4633
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4633:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_304_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2252
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5064 = 'cuid_451_1347719921.536' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_454_1347719921.536' 
    capture_lex $P5064 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "$lexpast", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P103, $P5003
    unless_null _lex_param_1, fallback4636
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5005
  fallback4636:
    set $P5004, _lex_param_1["onlystar"]
    unless_null $P5004, fallback4637
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5006
  fallback4637:
    unless $P5004 goto if1479_else4634 
.annotate 'line', 2256
.annotate 'line', 2257
    $P5007 = "&only_star_block"()
    set $P101, $P5007
    set $P5023, $P101
    goto if1479_end4635
  if1479_else4634:
.annotate 'line', 2259
.annotate 'line', 2260
    unless_null _lex_param_1, fallback4638
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5009
  fallback4638:
    set $P5008, _lex_param_1["blockoid"]
    unless_null $P5008, fallback4639
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5010
  fallback4639:
    $P5011 = $P5008."ast"()
    set $P101, $P5011
.annotate 'line', 2261
    $P5012 = $P101."blocktype"("declaration")
    find_dynamic_lex $P5013, "$*RETURN_USED"
    unless_null $P5013, fallback4642
    get_hll_global $P5016, "GLOBAL"
    get_who $P5015, $P5016
    set $P5014, $P5015["$RETURN_USED"]
    unless_null $P5014, fallback4643
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5014, $P5017
  fallback4643:
    unless_null $P5014, vivi_14814644
    die "Contextual $*RETURN_USED not found"
    box $P5018, "Contextual $*RETURN_USED not found"
    set $P5014, $P5018
  vivi_14814644:
    set $P5013, $P5014
  fallback4642:
    set $P5022, $P5013
    unless $P5013 goto if1480_end4641 
.annotate 'line', 2262
.annotate 'line', 2263
    set $P5019, $P101[1]
    unless_null $P5019, fallback4645
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5019, $P5020
  fallback4645:
    $P5021 = "&wrap_return_handler"($P5019)
    set $P101[1], $P5021
    set $P5022, $P5021
  if1480_end4641:
    set $P5023, $P5022
  if1479_end4635:
    set $P102, $P101
    unless_null _lex_param_1, fallback4648
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5025
  fallback4648:
    set $P5024, _lex_param_1["deflongname"]
    unless_null $P5024, fallback4649
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5024, $P5026
  fallback4649:
    unless $P5024 goto if1482_else4646 
    .const 'Sub' $P5027 = 'cuid_451_1347719921.536' 
    capture_lex $P5027
    $P5028 = $P5027()
    set $P5044, $P5028
    goto if1482_end4647
  if1482_else4646:
.annotate 'line', 2360
.annotate 'line', 2361
    find_dynamic_lex $P5029, "$*W"
    unless_null $P5029, fallback4761
    get_hll_global $P5032, "GLOBAL"
    get_who $P5031, $P5032
    set $P5030, $P5031["$W"]
    unless_null $P5030, fallback4762
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5030, $P5033
  fallback4762:
    unless_null $P5030, vivi_15174763
    die "Contextual $*W not found"
    box $P5034, "Contextual $*W not found"
    set $P5030, $P5034
  vivi_15174763:
    set $P5029, $P5030
  fallback4761:
    $P5035 = $P5029."is_precompilation_mode"()
    set $P5043, $P5035
    unless $P5035 goto if1516_end4760 
.annotate 'line', 2362
    find_dynamic_lex $P5036, "$*W"
    unless_null $P5036, fallback4764
    get_hll_global $P5039, "GLOBAL"
    get_who $P5038, $P5039
    set $P5037, $P5038["$W"]
    unless_null $P5037, fallback4765
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5037, $P5040
  fallback4765:
    unless_null $P5037, vivi_15184766
    die "Contextual $*W not found"
    box $P5041, "Contextual $*W not found"
    set $P5037, $P5041
  vivi_15184766:
    set $P5036, $P5037
  fallback4764:
    $P5042 = $P5036."create_code"($P101, "<anon>", 0)
    set $P5043, $P5042
  if1516_end4760:
    set $P5044, $P5043
  if1482_end4647:
.annotate 'line', 2366
    get_hll_global $P5048, "GLOBAL"
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["Op"]
    unless_null $P5045, fallback4767
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5045, $P5049
  fallback4767:
    $P5050 = $P5045."new"($P101, "takeclosure" :named("op"))
    set $P103, $P5050
    set $P103["sink"], $P101
    set $P103["block_past"], $P102
.annotate 'line', 2369
    $P5051 = _lex_param_1."!make"($P103)
    unless_null _lex_param_1, fallback4770
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5053
  fallback4770:
    set $P5052, _lex_param_1["trait"]
    unless_null $P5052, fallback4771
    nqp_get_sc_object $P5054, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5052, $P5054
  fallback4771:
    set $P5063, $P5052
    unless $P5052 goto if1519_end4769 
.annotate 'line', 2372
    unless_null _lex_param_1, fallback4772
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5059
  fallback4772:
    set $P5058, _lex_param_1["trait"]
    unless_null $P5058, fallback4773
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5058, $P5060
  fallback4773:
    set $P5055, $P5058
    iter $P5057, $P5058
  for_next4774:
    unless $P5057, for_done4776
    shift $P5062, $P5057
  for_redo4775:
    .const 'Sub' $P5061 = 'cuid_454_1347719921.536' 
    capture_lex $P5061
    $P5055 = $P5061($P5062)
    goto for_next4774
  for_done4776:
    set $P5063, $P5055
  if1519_end4769:
    .return ($P5063) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_451_1347719921.536") :anon :lex :outer("cuid_304_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2268
    .const 'Sub' $P5081 = 'cuid_450_1347719921.536' 
    capture_lex $P5081 
    .const 'Sub' $P5081 = 'cuid_452_1347719921.536' 
    capture_lex $P5081 
    .const 'Sub' $P5081 = 'cuid_453_1347719921.536' 
    capture_lex $P5081 
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4650
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5005
  fallback4650:
    set $P5003, $P5004["sigil"]
    unless_null $P5003, fallback4651
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5006
  fallback4651:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback4652
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5007
  fallback4652:
    set $S5002, $P5002
.annotate 'line', 2269
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4653
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5011
  fallback4653:
    set $P5009, $P5010["deflongname"]
    unless_null $P5009, fallback4654
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5012
  fallback4654:
    set $P5008, $P5009[0]
    unless_null $P5008, fallback4655
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5013
  fallback4655:
    $P5014 = $P5008."ast"()
    set $S5003, $P5014
    concat $S5001, $S5002, $S5003
    box $P5015, $S5001
    set $P101, $P5015
.annotate 'line', 2270
    find_lex $P5016, "$past"
    $P5017 = $P5016."name"($P101)
    find_dynamic_lex $P5018, "$*SCOPE"
    unless_null $P5018, fallback4662
    get_hll_global $P5021, "GLOBAL"
    get_who $P5020, $P5021
    set $P5019, $P5020["$SCOPE"]
    unless_null $P5019, fallback4663
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5019, $P5022
  fallback4663:
    unless_null $P5019, vivi_14864664
    die "Contextual $*SCOPE not found"
    box $P5023, "Contextual $*SCOPE not found"
    set $P5019, $P5023
  vivi_14864664:
    set $P5018, $P5019
  fallback4662:
    set $S5004, $P5018
    iseq $I5001, $S5004, ""
    set $I5003, $I5001
    if $I5001 goto unless1485_end4661 
    find_dynamic_lex $P5024, "$*SCOPE"
    unless_null $P5024, fallback4665
    get_hll_global $P5027, "GLOBAL"
    get_who $P5026, $P5027
    set $P5025, $P5026["$SCOPE"]
    unless_null $P5025, fallback4666
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5025, $P5028
  fallback4666:
    unless_null $P5025, vivi_14874667
    die "Contextual $*SCOPE not found"
    box $P5029, "Contextual $*SCOPE not found"
    set $P5025, $P5029
  vivi_14874667:
    set $P5024, $P5025
  fallback4665:
    set $S5005, $P5024
    iseq $I5002, $S5005, "my"
    set $I5003, $I5002
  unless1485_end4661:
    set $I5005, $I5003
    if $I5003 goto unless1484_end4659 
    find_dynamic_lex $P5030, "$*SCOPE"
    unless_null $P5030, fallback4668
    get_hll_global $P5033, "GLOBAL"
    get_who $P5032, $P5033
    set $P5031, $P5032["$SCOPE"]
    unless_null $P5031, fallback4669
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5031, $P5034
  fallback4669:
    unless_null $P5031, vivi_14884670
    die "Contextual $*SCOPE not found"
    box $P5035, "Contextual $*SCOPE not found"
    set $P5031, $P5035
  vivi_14884670:
    set $P5030, $P5031
  fallback4668:
    set $S5006, $P5030
    iseq $I5004, $S5006, "our"
    set $I5005, $I5004
  unless1484_end4659:
    unless $I5005 goto if1483_else4656 
.annotate 'line', 2271
    find_dynamic_lex $P5036, "$*MULTINESS"
    unless_null $P5036, fallback4673
    get_hll_global $P5039, "GLOBAL"
    get_who $P5038, $P5039
    set $P5037, $P5038["$MULTINESS"]
    unless_null $P5037, fallback4674
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5037, $P5040
  fallback4674:
    unless_null $P5037, vivi_14904675
    die "Contextual $*MULTINESS not found"
    box $P5041, "Contextual $*MULTINESS not found"
    set $P5037, $P5041
  vivi_14904675:
    set $P5036, $P5037
  fallback4673:
    set $S5007, $P5036
    iseq $I5006, $S5007, "multi"
    unless $I5006 goto if1489_else4671 
    .const 'Sub' $P5042 = 'cuid_450_1347719921.536' 
    capture_lex $P5042
    $P5043 = $P5042()
    set $P5055, $P5043
    goto if1489_end4672
  if1489_else4671:
    find_dynamic_lex $P5044, "$*MULTINESS"
    unless_null $P5044, fallback4711
    get_hll_global $P5047, "GLOBAL"
    get_who $P5046, $P5047
    set $P5045, $P5046["$MULTINESS"]
    unless_null $P5045, fallback4712
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5045, $P5048
  fallback4712:
    unless_null $P5045, vivi_15024713
    die "Contextual $*MULTINESS not found"
    box $P5049, "Contextual $*MULTINESS not found"
    set $P5045, $P5049
  vivi_15024713:
    set $P5044, $P5045
  fallback4711:
    set $S5008, $P5044
    iseq $I5007, $S5008, "proto"
    unless $I5007 goto if1501_else4709 
    .const 'Sub' $P5050 = 'cuid_452_1347719921.536' 
    capture_lex $P5050
    $P5051 = $P5050()
    set $P5054, $P5051
    goto if1501_end4710
  if1501_else4709:
    .const 'Sub' $P5052 = 'cuid_453_1347719921.536' 
    capture_lex $P5052
    $P5053 = $P5052()
    set $P5054, $P5053
  if1501_end4710:
    set $P5055, $P5054
  if1489_end4672:
.annotate 'line', 2349
    get_hll_global $P5059, "GLOBAL"
    nqp_get_package_through_who $P5058, $P5059, "QAST"
    get_who $P5057, $P5058
    set $P5056, $P5057["Var"]
    unless_null $P5056, fallback4748
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5056, $P5060
  fallback4748:
    set $S5010, $P101
    concat $S5009, "&", $S5010
    $P5061 = $P5056."new"($S5009 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5061
    set $P5071, $P5061
    goto if1483_end4657
  if1483_else4656:
.annotate 'line', 2351
.annotate 'line', 2352
    find_lex $P5062, "$/"
    $P5063 = $P5062."CURSOR"()
    find_dynamic_lex $P5064, "$*SCOPE"
    unless_null $P5064, fallback4749
    get_hll_global $P5067, "GLOBAL"
    get_who $P5066, $P5067
    set $P5065, $P5066["$SCOPE"]
    unless_null $P5065, fallback4750
    nqp_get_sc_object $P5068, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5065, $P5068
  fallback4750:
    unless_null $P5065, vivi_15124751
    die "Contextual $*SCOPE not found"
    box $P5069, "Contextual $*SCOPE not found"
    set $P5065, $P5069
  vivi_15124751:
    set $P5064, $P5065
  fallback4749:
    set $S5012, $P5064
    concat $S5011, $S5012, " scoped routines are not supported yet"
    $P5070 = $P5063."panic"($S5011)
    set $P5071, $P5070
  if1483_end4657:
    set $S5013, $P101
    iseq $I5008, $S5013, "MAIN"
    set $I5010, $I5008
    unless $I5008 goto if1514_end4755 
    find_dynamic_lex $P5072, "$*MULTINESS"
    unless_null $P5072, fallback4756
    get_hll_global $P5075, "GLOBAL"
    get_who $P5074, $P5075
    set $P5073, $P5074["$MULTINESS"]
    unless_null $P5073, fallback4757
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5073, $P5076
  fallback4757:
    unless_null $P5073, vivi_15154758
    die "Contextual $*MULTINESS not found"
    box $P5077, "Contextual $*MULTINESS not found"
    set $P5073, $P5077
  vivi_15154758:
    set $P5072, $P5073
  fallback4756:
    set $S5014, $P5072
    isne $I5009, $S5014, "multi"
    set $I5010, $I5009
  if1514_end4755:
    box $P5080, $I5010
    set $P5079, $P5080
    unless $I5010 goto if1513_end4753 
.annotate 'line', 2356
    find_lex $P5078, "$block"
    store_dynamic_lex "$*MAIN_SUB", $P5078
    set $P5079, $P5078
  if1513_end4753:
    .return ($P5079) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_450_1347719921.536") :anon :lex :outer("cuid_451_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2272
    .const 'Sub' $P5053 = 'cuid_449_1347719921.536' 
    capture_lex $P5053 
    .lex "$proto", $P101 
    .lex "%sym", $P102 
    .lex "$code", $P103 
    .lex "$BLOCK", $P104 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P104, $P5004
    find_dynamic_lex $P5005, "$*SCOPE"
    unless_null $P5005, fallback4678
    get_hll_global $P5008, "GLOBAL"
    get_who $P5007, $P5008
    set $P5006, $P5007["$SCOPE"]
    unless_null $P5006, fallback4679
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5009
  fallback4679:
    unless_null $P5006, vivi_14924680
    die "Contextual $*SCOPE not found"
    box $P5010, "Contextual $*SCOPE not found"
    set $P5006, $P5010
  vivi_14924680:
    set $P5005, $P5006
  fallback4678:
    set $S5001, $P5005
    iseq $I5001, $S5001, "our"
    box $P5013, $I5001
    set $P5012, $P5013
    unless $I5001 goto if1491_end4677 
.annotate 'line', 2274
    box $P5011, "a multi can not be our-scoped"
    die $P5011
    set $P5012, $P5011
  if1491_end4677:
.annotate 'line', 2276
    find_dynamic_lex $P5014, "$*W"
    unless_null $P5014, fallback4681
    get_hll_global $P5017, "GLOBAL"
    get_who $P5016, $P5017
    set $P5015, $P5016["$W"]
    unless_null $P5015, fallback4682
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5015, $P5018
  fallback4682:
    unless_null $P5015, vivi_14934683
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5015, $P5019
  vivi_14934683:
    set $P5014, $P5015
  fallback4681:
    $P5020 = $P5014."cur_lexpad"()
    find_lex $P5021, "$name"
    set $S5003, $P5021
    concat $S5002, "&", $S5003
    $P5022 = $P5020."symbol"($S5002)
    set $P102, $P5022
    set $P5023, $P102["proto"]
    unless_null $P5023, fallback4686
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5023, $P5024
  fallback4686:
    unless $P5023 goto if1494_else4684 
.annotate 'line', 2277
    set $P5025, $P102["value"]
    unless_null $P5025, fallback4687
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5025, $P5026
  fallback4687:
    set $P101, $P5025
    set $P5029, $P101
    goto if1494_end4685
  if1494_else4684:
    .const 'Sub' $P5027 = 'cuid_449_1347719921.536' 
    capture_lex $P5027
    $P5028 = $P5027()
    set $P5029, $P5028
  if1494_end4685:
.annotate 'line', 2306
    find_dynamic_lex $P5030, "$*W"
    unless_null $P5030, fallback4702
    get_hll_global $P5033, "GLOBAL"
    get_who $P5032, $P5033
    set $P5031, $P5032["$W"]
    unless_null $P5031, fallback4703
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5031, $P5034
  fallback4703:
    unless_null $P5031, vivi_14994704
    die "Contextual $*W not found"
    box $P5035, "Contextual $*W not found"
    set $P5031, $P5035
  vivi_14994704:
    set $P5030, $P5031
  fallback4702:
    find_lex $P5036, "$past"
    find_lex $P5037, "$name"
    $P5038 = $P5030."create_code"($P5036, $P5037, 0)
    set $P103, $P5038
.annotate 'line', 2307
    find_lex $P5039, "$past"
    $P5040 = "&attach_multi_signature"($P103, $P5039)
.annotate 'line', 2310
    $P5041 = $P101."add_dispatchee"($P103)
.annotate 'line', 2313
    find_dynamic_lex $P5042, "$*W"
    unless_null $P5042, fallback4705
    get_hll_global $P5045, "GLOBAL"
    get_who $P5044, $P5045
    set $P5043, $P5044["$W"]
    unless_null $P5043, fallback4706
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5043, $P5046
  fallback4706:
    unless_null $P5043, vivi_15004707
    die "Contextual $*W not found"
    box $P5047, "Contextual $*W not found"
    set $P5043, $P5047
  vivi_15004707:
    set $P5042, $P5043
  fallback4705:
    $P5048 = $P5042."cur_lexpad"()
    set $P104, $P5048
.annotate 'line', 2314
    set $P5049, $P104[0]
    unless_null $P5049, fallback4708
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5049, $P5050
  fallback4708:
    find_lex $P5051, "$past"
    $P5052 = $P5049."push"($P5051)
    .return ($P5052) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_449_1347719921.536") :anon :lex :outer("cuid_450_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2282
    .const 'Sub' $P5019 = 'cuid_448_1347719921.536' 
    capture_lex $P5019 
    .lex "$found_proto", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 2285
    find_dynamic_lex $P5005, "$*W"
    unless_null $P5005, fallback4688
    get_hll_global $P5008, "GLOBAL"
    get_who $P5007, $P5008
    set $P5006, $P5007["$W"]
    unless_null $P5006, fallback4689
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5009
  fallback4689:
    unless_null $P5006, vivi_14954690
    die "Contextual $*W not found"
    box $P5010, "Contextual $*W not found"
    set $P5006, $P5010
  vivi_14954690:
    set $P5005, $P5006
  fallback4688:
    $P5011 = $P5005."get_legacy_block_list"()
    set $P5002, $P5011
    iter $P5004, $P5011
  for_next4697:
    unless $P5004, for_done4699
    shift $P5013, $P5004
  for_redo4698:
    .const 'Sub' $P5012 = 'cuid_448_1347719921.536' 
    capture_lex $P5012
    $P5002 = $P5012($P5013)
    goto for_next4697
  for_done4699:
    set $P5017, $P101
    if $P101 goto unless1498_end4701 
.annotate 'line', 2297
.annotate 'line', 2298
    find_lex $P5014, "$/"
    $P5015 = $P5014."CURSOR"()
    $P5016 = $P5015."panic"("Sorry, no proto sub in scope, and auto-generation of protos is not yet implemented.")
    set $P5017, $P5016
  unless1498_end4701:
    box $P5018, "Dispatcher derivation NYI"
    die $P5018
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_448_1347719921.536") :anon :lex :outer("cuid_449_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2285
    .param pmc _lex_param_0 
    .lex "%sym", $P101 
    .lex "$_", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 2286
    find_lex $P5002, "$name"
    set $S5002, $P5002
    concat $S5001, "&", $S5002
    $P5003 = _lex_param_0."symbol"($S5001)
    set $P101, $P5003
    set $P5004, $P101["proto"]
    unless_null $P5004, fallback4693
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5005
  fallback4693:
    unless $P5004 goto if1496_else4691 
.annotate 'line', 2287
    set $P5006, $P101["value"]
    unless_null $P5006, fallback4694
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5007
  fallback4694:
    store_lex "$proto", $P5006
    box $P5008, 1
    store_lex "$found_proto", $P5008
    set $P5013, $P5008
    goto if1496_end4692
  if1496_else4691:
    set $P5012, $P101
    unless $P101 goto if1497_end4696 
.annotate 'line', 2291
.annotate 'line', 2292
    find_lex $P5009, "$/"
    $P5010 = $P5009."CURSOR"()
    $P5011 = $P5010."panic"("Cannot declare a multi when an only is already in scope.")
    set $P5012, $P5011
  if1497_end4696:
    set $P5013, $P5012
  if1496_end4692:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_452_1347719921.536") :anon :lex :outer("cuid_451_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2316
    .lex "$code", $P101 
    .lex "$BLOCK", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    find_dynamic_lex $P5003, "$*SCOPE"
    unless_null $P5003, fallback4716
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$SCOPE"]
    unless_null $P5004, fallback4717
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5007
  fallback4717:
    unless_null $P5004, vivi_15044718
    die "Contextual $*SCOPE not found"
    box $P5008, "Contextual $*SCOPE not found"
    set $P5004, $P5008
  vivi_15044718:
    set $P5003, $P5004
  fallback4716:
    set $S5001, $P5003
    iseq $I5001, $S5001, "our"
    box $P5011, $I5001
    set $P5010, $P5011
    unless $I5001 goto if1503_end4715 
.annotate 'line', 2320
    box $P5009, "our-scoped protos not yet implemented"
    die $P5009
    set $P5010, $P5009
  if1503_end4715:
.annotate 'line', 2321
    find_dynamic_lex $P5012, "$*W"
    unless_null $P5012, fallback4719
    get_hll_global $P5015, "GLOBAL"
    get_who $P5014, $P5015
    set $P5013, $P5014["$W"]
    unless_null $P5013, fallback4720
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5013, $P5016
  fallback4720:
    unless_null $P5013, vivi_15054721
    die "Contextual $*W not found"
    box $P5017, "Contextual $*W not found"
    set $P5013, $P5017
  vivi_15054721:
    set $P5012, $P5013
  fallback4719:
    find_lex $P5018, "$past"
    find_lex $P5019, "$name"
    $P5020 = $P5012."create_code"($P5018, $P5019, 1)
    set $P101, $P5020
.annotate 'line', 2322
    find_dynamic_lex $P5021, "$*W"
    unless_null $P5021, fallback4722
    get_hll_global $P5024, "GLOBAL"
    get_who $P5023, $P5024
    set $P5022, $P5023["$W"]
    unless_null $P5022, fallback4723
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5022, $P5025
  fallback4723:
    unless_null $P5022, vivi_15064724
    die "Contextual $*W not found"
    box $P5026, "Contextual $*W not found"
    set $P5022, $P5026
  vivi_15064724:
    set $P5021, $P5022
  fallback4722:
    $P5027 = $P5021."cur_lexpad"()
    set $P102, $P5027
.annotate 'line', 2323
    set $P5028, $P102[0]
    unless_null $P5028, fallback4725
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5028, $P5029
  fallback4725:
    get_hll_global $P5033, "GLOBAL"
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["Op"]
    unless_null $P5030, fallback4726
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5030, $P5034
  fallback4726:
.annotate 'line', 2325
    get_hll_global $P5038, "GLOBAL"
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Var"]
    unless_null $P5035, fallback4727
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5035, $P5039
  fallback4727:
    find_lex $P5040, "$name"
    set $S5003, $P5040
    concat $S5002, "&", $S5003
    $P5041 = $P5035."new"($S5002 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5042, "$past"
    $P5043 = $P5030."new"($P5041, $P5042, "bind" :named("op"))
    $P5044 = $P5028."push"($P5043)
.annotate 'line', 2328
    find_lex $P5045, "$name"
    set $S5005, $P5045
    concat $S5004, "&", $S5005
    $P5046 = $P102."symbol"($S5004, "lexical" :named("scope"), 1 :named("proto"), $P101 :named("value"))
    .return ($P5046) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_453_1347719921.536") :anon :lex :outer("cuid_451_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2330
    .lex "$BLOCK", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 2331
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4728
    get_hll_global $P5005, "GLOBAL"
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4729
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5006
  fallback4729:
    unless_null $P5003, vivi_15074730
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_15074730:
    set $P5002, $P5003
  fallback4728:
    $P5008 = $P5002."cur_lexpad"()
    set $P101, $P5008
.annotate 'line', 2332
    set $P5009, $P101[0]
    unless_null $P5009, fallback4731
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5010
  fallback4731:
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback4732
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5015
  fallback4732:
.annotate 'line', 2334
    get_hll_global $P5019, "GLOBAL"
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback4733
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5016, $P5020
  fallback4733:
    find_lex $P5021, "$name"
    set $S5002, $P5021
    concat $S5001, "&", $S5002
    $P5022 = $P5016."new"($S5001 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5023, "$past"
    $P5024 = $P5011."new"($P5022, $P5023, "bind" :named("op"))
    $P5025 = $P5009."push"($P5024)
.annotate 'line', 2337
    find_lex $P5026, "$name"
    set $S5004, $P5026
    concat $S5003, "&", $S5004
    $P5027 = $P101."symbol"($S5003, "lexical" :named("scope"))
    find_dynamic_lex $P5028, "$*SCOPE"
    unless_null $P5028, fallback4736
    get_hll_global $P5031, "GLOBAL"
    get_who $P5030, $P5031
    set $P5029, $P5030["$SCOPE"]
    unless_null $P5029, fallback4737
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5029, $P5032
  fallback4737:
    unless_null $P5029, vivi_15094738
    die "Contextual $*SCOPE not found"
    box $P5033, "Contextual $*SCOPE not found"
    set $P5029, $P5033
  vivi_15094738:
    set $P5028, $P5029
  fallback4736:
    set $S5005, $P5028
    iseq $I5001, $S5005, "our"
    box $P5070, $I5001
    set $P5069, $P5070
    unless $I5001 goto if1508_end4735 
.annotate 'line', 2338
.annotate 'line', 2341
    find_dynamic_lex $P5034, "$*W"
    unless_null $P5034, fallback4739
    get_hll_global $P5037, "GLOBAL"
    get_who $P5036, $P5037
    set $P5035, $P5036["$W"]
    unless_null $P5035, fallback4740
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5035, $P5038
  fallback4740:
    unless_null $P5035, vivi_15104741
    die "Contextual $*W not found"
    box $P5039, "Contextual $*W not found"
    set $P5035, $P5039
  vivi_15104741:
    set $P5034, $P5035
  fallback4739:
    find_dynamic_lex $P5040, "$*PACKAGE"
    unless_null $P5040, fallback4742
    get_hll_global $P5043, "GLOBAL"
    get_who $P5042, $P5043
    set $P5041, $P5042["$PACKAGE"]
    unless_null $P5041, fallback4743
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5041, $P5044
  fallback4743:
    unless_null $P5041, vivi_15114744
    die "Contextual $*PACKAGE not found"
    box $P5045, "Contextual $*PACKAGE not found"
    set $P5041, $P5045
  vivi_15114744:
    set $P5040, $P5041
  fallback4742:
    find_lex $P5046, "$name"
    find_lex $P5047, "$past"
    $P5048 = $P5034."install_package_routine"($P5040, $P5046, $P5047)
.annotate 'line', 2342
    set $P5049, $P101[0]
    unless_null $P5049, fallback4745
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5049, $P5050
  fallback4745:
    get_hll_global $P5054, "GLOBAL"
    nqp_get_package_through_who $P5053, $P5054, "QAST"
    get_who $P5052, $P5053
    set $P5051, $P5052["Op"]
    unless_null $P5051, fallback4746
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5051, $P5055
  fallback4746:
.annotate 'line', 2344
    new $P5056, 'ResizablePMCArray'
    find_lex $P5057, "$name"
    push $P5056, $P5057
    find_lex $P5058, "$/"
    $P5059 = "&lexical_package_lookup"($P5056, $P5058)
.annotate 'line', 2345
    get_hll_global $P5063, "GLOBAL"
    nqp_get_package_through_who $P5062, $P5063, "QAST"
    get_who $P5061, $P5062
    set $P5060, $P5061["Var"]
    unless_null $P5060, fallback4747
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5060, $P5064
  fallback4747:
    find_lex $P5065, "$name"
    set $S5007, $P5065
    concat $S5006, "&", $S5007
    $P5066 = $P5060."new"($S5006 :named("name"), "lexical" :named("scope"))
    $P5067 = $P5051."new"($P5059, $P5066, "bind" :named("op"))
    $P5068 = $P5049."push"($P5067)
    set $P5069, $P5068
  if1508_end4735:
    .return ($P5069) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_454_1347719921.536") :anon :lex :outer("cuid_304_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2373
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_305_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2378
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5069 = 'cuid_455_1347719921.536' 
    capture_lex $P5069 
    .const 'Sub' $P5069 = 'cuid_456_1347719921.536' 
    capture_lex $P5069 
    .lex "$past", $P101 
    .lex "$lexpast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback4779
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5004
  fallback4779:
    set $P5003, _lex_param_1["onlystar"]
    unless_null $P5003, fallback4780
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5005
  fallback4780:
    unless $P5003 goto if1520_else4777 
.annotate 'line', 2382
.annotate 'line', 2383
    $P5006 = "&only_star_block"()
    set $P101, $P5006
    set $P5022, $P101
    goto if1520_end4778
  if1520_else4777:
.annotate 'line', 2385
.annotate 'line', 2386
    unless_null _lex_param_1, fallback4781
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5008
  fallback4781:
    set $P5007, _lex_param_1["blockoid"]
    unless_null $P5007, fallback4782
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5009
  fallback4782:
    $P5010 = $P5007."ast"()
    set $P101, $P5010
.annotate 'line', 2387
    $P5011 = $P101."blocktype"("declaration")
    find_dynamic_lex $P5012, "$*RETURN_USED"
    unless_null $P5012, fallback4785
    get_hll_global $P5015, "GLOBAL"
    get_who $P5014, $P5015
    set $P5013, $P5014["$RETURN_USED"]
    unless_null $P5013, fallback4786
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5013, $P5016
  fallback4786:
    unless_null $P5013, vivi_15224787
    die "Contextual $*RETURN_USED not found"
    box $P5017, "Contextual $*RETURN_USED not found"
    set $P5013, $P5017
  vivi_15224787:
    set $P5012, $P5013
  fallback4785:
    set $P5021, $P5012
    unless $P5012 goto if1521_end4784 
.annotate 'line', 2388
.annotate 'line', 2389
    set $P5018, $P101[1]
    unless_null $P5018, fallback4788
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5018, $P5019
  fallback4788:
    $P5020 = "&wrap_return_handler"($P5018)
    set $P101[1], $P5020
    set $P5021, $P5020
  if1521_end4784:
    set $P5022, $P5021
  if1520_end4778:
    set $P5023, $P101["signature_has_invocant"]
    unless_null $P5023, fallback4791
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5023, $P5024
  fallback4791:
    set $P5040, $P5023
    if $P5023 goto unless1523_end4790 
.annotate 'line', 2394
.annotate 'line', 2395
    set $P5025, $P101[0]
    unless_null $P5025, fallback4792
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5025, $P5026
  fallback4792:
    get_hll_global $P5030, "GLOBAL"
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback4793
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5027, $P5031
  fallback4793:
    find_dynamic_lex $P5032, "$*PACKAGE"
    unless_null $P5032, fallback4794
    get_hll_global $P5035, "GLOBAL"
    get_who $P5034, $P5035
    set $P5033, $P5034["$PACKAGE"]
    unless_null $P5033, fallback4795
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5033, $P5036
  fallback4795:
    unless_null $P5033, vivi_15244796
    die "Contextual $*PACKAGE not found"
    box $P5037, "Contextual $*PACKAGE not found"
    set $P5033, $P5037
  vivi_15244796:
    set $P5032, $P5033
  fallback4794:
    $P5038 = $P5027."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"), $P5032 :named("returns"))
    $P5039 = $P5025."unshift"($P5038)
    set $P5040, $P5039
  unless1523_end4790:
.annotate 'line', 2400
    $P5041 = $P101."symbol"("self", "lexical" :named("scope"))
    unless_null _lex_param_1, fallback4799
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5043
  fallback4799:
    set $P5042, _lex_param_1["deflongname"]
    unless_null $P5042, fallback4800
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5042, $P5044
  fallback4800:
    set $P5047, $P5042
    unless $P5042 goto if1525_end4798 
    .const 'Sub' $P5045 = 'cuid_455_1347719921.536' 
    capture_lex $P5045
    $P5046 = $P5045()
    set $P5047, $P5046
  if1525_end4798:
.annotate 'line', 2423
    get_hll_global $P5051, "GLOBAL"
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Op"]
    unless_null $P5048, fallback4839
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5048, $P5052
  fallback4839:
    $P5053 = $P5048."new"($P101, "takeclosure" :named("op"))
    set $P102, $P5053
    set $P102["sink"], $P101
    set $P102["block_past"], $P101
    set $P5054, $P101["code_obj"]
    unless_null $P5054, fallback4840
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5054, $P5055
  fallback4840:
    set $P102["code_obj"], $P5054
.annotate 'line', 2427
    $P5056 = _lex_param_1."!make"($P102)
    unless_null _lex_param_1, fallback4843
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5058
  fallback4843:
    set $P5057, _lex_param_1["trait"]
    unless_null $P5057, fallback4844
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5057, $P5059
  fallback4844:
    set $P5068, $P5057
    unless $P5057 goto if1538_end4842 
.annotate 'line', 2428
    unless_null _lex_param_1, fallback4845
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5064
  fallback4845:
    set $P5063, _lex_param_1["trait"]
    unless_null $P5063, fallback4846
    nqp_get_sc_object $P5065, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5063, $P5065
  fallback4846:
    set $P5060, $P5063
    iter $P5062, $P5063
  for_next4847:
    unless $P5062, for_done4849
    shift $P5067, $P5062
  for_redo4848:
    .const 'Sub' $P5066 = 'cuid_456_1347719921.536' 
    capture_lex $P5066
    $P5060 = $P5066($P5067)
    goto for_next4847
  for_done4849:
    set $P5068, $P5060
  if1538_end4842:
    .return ($P5068) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_455_1347719921.536") :anon :lex :outer("cuid_305_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2403
    .lex "$name", $P101 
    .lex "$meta_meth", $P102 
    .lex "$is_dispatcher", $P103 
    .lex "$code", $P104 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P104, $P5004
    find_lex $P5006, "$/"
    unless_null $P5006, fallback4801
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5007
  fallback4801:
    set $P5005, $P5006["private"]
    unless_null $P5005, fallback4802
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5005, $P5008
  fallback4802:
    set $S5002, $P5005
.annotate 'line', 2405
    find_lex $P5011, "$/"
    unless_null $P5011, fallback4803
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5012
  fallback4803:
    set $P5010, $P5011["deflongname"]
    unless_null $P5010, fallback4804
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5013
  fallback4804:
    set $P5009, $P5010[0]
    unless_null $P5009, fallback4805
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5014
  fallback4805:
    $P5015 = $P5009."ast"()
    set $S5003, $P5015
    concat $S5001, $S5002, $S5003
    box $P5016, $S5001
    set $P101, $P5016
.annotate 'line', 2406
    find_lex $P5017, "$past"
    $P5018 = $P5017."name"($P101)
    find_dynamic_lex $P5019, "$*MULTINESS"
    unless_null $P5019, fallback4808
    get_hll_global $P5022, "GLOBAL"
    get_who $P5021, $P5022
    set $P5020, $P5021["$MULTINESS"]
    unless_null $P5020, fallback4809
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5020, $P5023
  fallback4809:
    unless_null $P5020, vivi_15274810
    die "Contextual $*MULTINESS not found"
    box $P5024, "Contextual $*MULTINESS not found"
    set $P5020, $P5024
  vivi_15274810:
    set $P5019, $P5020
  fallback4808:
    set $S5004, $P5019
    iseq $I5001, $S5004, "multi"
    unless $I5001 goto if1526_else4806 
    set $S5005, "add_multi_method"
    goto if1526_end4807
  if1526_else4806:
    set $S5005, "add_method"
  if1526_end4807:
    box $P5025, $S5005
    set $P102, $P5025
    find_dynamic_lex $P5026, "$*MULTINESS"
    unless_null $P5026, fallback4811
    get_hll_global $P5029, "GLOBAL"
    get_who $P5028, $P5029
    set $P5027, $P5028["$MULTINESS"]
    unless_null $P5027, fallback4812
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5027, $P5030
  fallback4812:
    unless_null $P5027, vivi_15284813
    die "Contextual $*MULTINESS not found"
    box $P5031, "Contextual $*MULTINESS not found"
    set $P5027, $P5031
  vivi_15284813:
    set $P5026, $P5027
  fallback4811:
    set $S5006, $P5026
    iseq $I5002, $S5006, "proto"
    box $P5032, $I5002
    set $P103, $P5032
.annotate 'line', 2411
    find_dynamic_lex $P5033, "$*W"
    unless_null $P5033, fallback4814
    get_hll_global $P5036, "GLOBAL"
    get_who $P5035, $P5036
    set $P5034, $P5035["$W"]
    unless_null $P5034, fallback4815
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5034, $P5037
  fallback4815:
    unless_null $P5034, vivi_15294816
    die "Contextual $*W not found"
    box $P5038, "Contextual $*W not found"
    set $P5034, $P5038
  vivi_15294816:
    set $P5033, $P5034
  fallback4814:
    find_lex $P5039, "$past"
    $P5040 = $P5033."create_code"($P5039, $P101, $P103)
    set $P104, $P5040
    find_dynamic_lex $P5041, "$*MULTINESS"
    unless_null $P5041, fallback4819
    get_hll_global $P5044, "GLOBAL"
    get_who $P5043, $P5044
    set $P5042, $P5043["$MULTINESS"]
    unless_null $P5042, fallback4820
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5042, $P5045
  fallback4820:
    unless_null $P5042, vivi_15314821
    die "Contextual $*MULTINESS not found"
    box $P5046, "Contextual $*MULTINESS not found"
    set $P5042, $P5046
  vivi_15314821:
    set $P5041, $P5042
  fallback4819:
    set $S5007, $P5041
    iseq $I5003, $S5007, "multi"
    box $P5050, $I5003
    set $P5049, $P5050
    unless $I5003 goto if1530_end4818 
.annotate 'line', 2412
    find_lex $P5047, "$past"
    $P5048 = "&attach_multi_signature"($P104, $P5047)
    set $P5049, $P5048
  if1530_end4818:
.annotate 'line', 2413
    find_dynamic_lex $P5051, "$*W"
    unless_null $P5051, fallback4822
    get_hll_global $P5054, "GLOBAL"
    get_who $P5053, $P5054
    set $P5052, $P5053["$W"]
    unless_null $P5052, fallback4823
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5052, $P5055
  fallback4823:
    unless_null $P5052, vivi_15324824
    die "Contextual $*W not found"
    box $P5056, "Contextual $*W not found"
    set $P5052, $P5056
  vivi_15324824:
    set $P5051, $P5052
  fallback4822:
    find_dynamic_lex $P5057, "$*PACKAGE"
    unless_null $P5057, fallback4825
    get_hll_global $P5060, "GLOBAL"
    get_who $P5059, $P5060
    set $P5058, $P5059["$PACKAGE"]
    unless_null $P5058, fallback4826
    nqp_get_sc_object $P5061, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5058, $P5061
  fallback4826:
    unless_null $P5058, vivi_15334827
    die "Contextual $*PACKAGE not found"
    box $P5062, "Contextual $*PACKAGE not found"
    set $P5058, $P5062
  vivi_15334827:
    set $P5057, $P5058
  fallback4825:
    $P5063 = $P5051."pkg_add_method"($P5057, $P102, $P101, $P104)
    find_lex $P5064, "$past"
    set $P5064["code_obj"], $P104
    find_dynamic_lex $P5065, "$*SCOPE"
    unless_null $P5065, fallback4830
    get_hll_global $P5068, "GLOBAL"
    get_who $P5067, $P5068
    set $P5066, $P5067["$SCOPE"]
    unless_null $P5066, fallback4831
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5066, $P5069
  fallback4831:
    unless_null $P5066, vivi_15354832
    die "Contextual $*SCOPE not found"
    box $P5070, "Contextual $*SCOPE not found"
    set $P5066, $P5070
  vivi_15354832:
    set $P5065, $P5066
  fallback4830:
    set $S5008, $P5065
    iseq $I5004, $S5008, "our"
    box $P5086, $I5004
    set $P5085, $P5086
    unless $I5004 goto if1534_end4829 
.annotate 'line', 2417
.annotate 'line', 2418
    find_dynamic_lex $P5071, "$*W"
    unless_null $P5071, fallback4833
    get_hll_global $P5074, "GLOBAL"
    get_who $P5073, $P5074
    set $P5072, $P5073["$W"]
    unless_null $P5072, fallback4834
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5072, $P5075
  fallback4834:
    unless_null $P5072, vivi_15364835
    die "Contextual $*W not found"
    box $P5076, "Contextual $*W not found"
    set $P5072, $P5076
  vivi_15364835:
    set $P5071, $P5072
  fallback4833:
    find_dynamic_lex $P5077, "$*PACKAGE"
    unless_null $P5077, fallback4836
    get_hll_global $P5080, "GLOBAL"
    get_who $P5079, $P5080
    set $P5078, $P5079["$PACKAGE"]
    unless_null $P5078, fallback4837
    nqp_get_sc_object $P5081, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5078, $P5081
  fallback4837:
    unless_null $P5078, vivi_15374838
    die "Contextual $*PACKAGE not found"
    box $P5082, "Contextual $*PACKAGE not found"
    set $P5078, $P5082
  vivi_15374838:
    set $P5077, $P5078
  fallback4836:
    find_lex $P5083, "$past"
    $P5084 = $P5071."install_package_routine"($P5077, $P101, $P5083)
    set $P5085, $P5084
  if1534_end4829:
    .return ($P5085) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_456_1347719921.536") :anon :lex :outer("cuid_305_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2429
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_306_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2461
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5026 = 'cuid_457_1347719921.536' 
    capture_lex $P5026 
    .const 'Sub' $P5026 = 'cuid_458_1347719921.536' 
    capture_lex $P5026 
    .lex "$BLOCK", $P101 
    .lex "$BLOCKINIT", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
.annotate 'line', 2462
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4850
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4851
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5007
  fallback4851:
    unless_null $P5004, vivi_15394852
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15394852:
    set $P5003, $P5004
  fallback4850:
    $P5009 = $P5003."cur_lexpad"()
    set $P101, $P5009
    set $P5010, $P101[0]
    unless_null $P5010, fallback4853
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5011
  fallback4853:
    set $P102, $P5010
    unless_null _lex_param_1, fallback4856
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5013
  fallback4856:
    set $P5012, _lex_param_1["invocant"]
    unless_null $P5012, fallback4857
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5012, $P5014
  fallback4857:
    set $P5017, $P5012
    unless $P5012 goto if1540_end4855 
    .const 'Sub' $P5015 = 'cuid_457_1347719921.536' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5017, $P5016
  if1540_end4855:
    unless_null _lex_param_1, fallback4864
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5022
  fallback4864:
    set $P5021, _lex_param_1["parameter"]
    unless_null $P5021, fallback4865
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5021, $P5023
  fallback4865:
    set $P5018, $P5021
    iter $P5020, $P5021
  for_next4866:
    unless $P5020, for_done4868
    shift $P5025, $P5020
  for_redo4867:
    .const 'Sub' $P5024 = 'cuid_458_1347719921.536' 
    capture_lex $P5024
    $P5018 = $P5024($P5025)
    goto for_next4866
  for_done4868:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_457_1347719921.536") :anon :lex :outer("cuid_306_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2464
    .lex "$inv", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 2465
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4858
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5005
  fallback4858:
    set $P5003, $P5004["invocant"]
    unless_null $P5003, fallback4859
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5006
  fallback4859:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback4860
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5007
  fallback4860:
    $P5008 = $P5002."ast"()
    set $P101, $P5008
.annotate 'line', 2466
    find_lex $P5009, "$BLOCKINIT"
    $P5010 = $P5009."push"($P101)
.annotate 'line', 2467
    find_lex $P5011, "$BLOCKINIT"
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback4861
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5012, $P5016
  fallback4861:
.annotate 'line', 2469
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Var"]
    unless_null $P5017, fallback4862
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5017, $P5021
  fallback4862:
    $P5022 = $P5017."new"("self" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2470
    get_hll_global $P5026, "GLOBAL"
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["Var"]
    unless_null $P5023, fallback4863
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5023, $P5027
  fallback4863:
    $P5028 = $P101."name"()
    $P5029 = $P5023."new"("lexical" :named("scope"), $P5028 :named("name"))
    $P5030 = $P5012."new"($P5022, $P5029, "bind" :named("op"))
    $P5031 = $P5011."push"($P5030)
    find_lex $P5032, "$BLOCK"
    box $P5033, 1
    set $P5032["signature_has_invocant"], $P5033
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_458_1347719921.536") :anon :lex :outer("cuid_306_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2474
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$BLOCKINIT"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_307_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2477
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5102 = 'cuid_460_1347719921.536' 
    capture_lex $P5102 
    .lex "$quant", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback4869
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5004
  fallback4869:
    set $P5003, _lex_param_1["quant"]
    unless_null $P5003, fallback4870
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5005
  fallback4870:
    set $P101, $P5003
    unless_null _lex_param_1, fallback4873
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5007
  fallback4873:
    set $P5006, _lex_param_1["named_param"]
    unless_null $P5006, fallback4874
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5008
  fallback4874:
    unless $P5006 goto if1541_else4871 
.annotate 'line', 2480
.annotate 'line', 2481
    unless_null _lex_param_1, fallback4875
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5010
  fallback4875:
    set $P5009, _lex_param_1["named_param"]
    unless_null $P5009, fallback4876
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5011
  fallback4876:
    $P5012 = $P5009."ast"()
    set $P102, $P5012
    set $S5001, $P101
    isne $I5001, $S5001, "!"
    box $P5023, $I5001
    set $P5022, $P5023
    unless $I5001 goto if1542_end4878 
.annotate 'line', 2482
.annotate 'line', 2483
    unless_null _lex_param_1, fallback4879
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5016
  fallback4879:
    set $P5015, _lex_param_1["named_param"]
    unless_null $P5015, fallback4880
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5015, $P5017
  fallback4880:
    set $P5014, $P5015["param_var"]
    unless_null $P5014, fallback4881
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5014, $P5018
  fallback4881:
    set $P5013, $P5014["sigil"]
    unless_null $P5013, fallback4882
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5013, $P5019
  fallback4882:
    $P5020 = "&default_for"($P5013)
    $P5021 = $P102."default"($P5020)
    set $P5022, $P5021
  if1542_end4878:
    set $P5045, $P5022
    goto if1541_end4872
  if1541_else4871:
.annotate 'line', 2486
.annotate 'line', 2487
    unless_null _lex_param_1, fallback4883
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5025
  fallback4883:
    set $P5024, _lex_param_1["param_var"]
    unless_null $P5024, fallback4884
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5024, $P5026
  fallback4884:
    $P5027 = $P5024."ast"()
    set $P102, $P5027
    set $S5002, $P101
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1543_else4885 
.annotate 'line', 2488
.annotate 'line', 2489
    $P5028 = $P102."slurpy"(1)
.annotate 'line', 2490
    unless_null _lex_param_1, fallback4887
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5031
  fallback4887:
    set $P5030, _lex_param_1["param_var"]
    unless_null $P5030, fallback4888
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5030, $P5032
  fallback4888:
    set $P5029, $P5030["sigil"]
    unless_null $P5029, fallback4889
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5029, $P5033
  fallback4889:
    set $S5003, $P5029
    iseq $I5003, $S5003, "%"
    $P5034 = $P102."named"($I5003)
    set $P5044, $P5034
    goto if1543_end4886
  if1543_else4885:
    set $S5004, $P101
    iseq $I5004, $S5004, "?"
    box $P5043, $I5004
    set $P5042, $P5043
    unless $I5004 goto if1544_end4891 
.annotate 'line', 2492
.annotate 'line', 2493
    unless_null _lex_param_1, fallback4892
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5037
  fallback4892:
    set $P5036, _lex_param_1["param_var"]
    unless_null $P5036, fallback4893
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5036, $P5038
  fallback4893:
    set $P5035, $P5036["sigil"]
    unless_null $P5035, fallback4894
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5035, $P5039
  fallback4894:
    $P5040 = "&default_for"($P5035)
    $P5041 = $P102."default"($P5040)
    set $P5042, $P5041
  if1544_end4891:
    set $P5044, $P5042
  if1543_end4886:
    set $P5045, $P5044
  if1541_end4872:
    unless_null _lex_param_1, fallback4897
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5047
  fallback4897:
    set $P5046, _lex_param_1["default_value"]
    unless_null $P5046, fallback4898
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5046, $P5048
  fallback4898:
    set $P5066, $P5046
    unless $P5046 goto if1545_end4896 
.annotate 'line', 2496
    set $S5005, $P101
    iseq $I5005, $S5005, "*"
    box $P5052, $I5005
    set $P5051, $P5052
    unless $I5005 goto if1546_end4900 
.annotate 'line', 2497
.annotate 'line', 2498
    $P5049 = _lex_param_1."CURSOR"()
    $P5050 = $P5049."panic"("Can't put default on slurpy parameter")
    set $P5051, $P5050
  if1546_end4900:
    set $S5006, $P101
    iseq $I5006, $S5006, "!"
    box $P5056, $I5006
    set $P5055, $P5056
    unless $I5006 goto if1547_end4902 
.annotate 'line', 2500
.annotate 'line', 2501
    $P5053 = _lex_param_1."CURSOR"()
    $P5054 = $P5053."panic"("Can't put default on required parameter")
    set $P5055, $P5054
  if1547_end4902:
.annotate 'line', 2503
    unless_null _lex_param_1, fallback4903
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5060
  fallback4903:
    set $P5059, _lex_param_1["default_value"]
    unless_null $P5059, fallback4904
    nqp_get_sc_object $P5061, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5059, $P5061
  fallback4904:
    set $P5058, $P5059[0]
    unless_null $P5058, fallback4905
    nqp_get_sc_object $P5062, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5058, $P5062
  fallback4905:
    set $P5057, $P5058["EXPR"]
    unless_null $P5057, fallback4906
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5057, $P5063
  fallback4906:
    $P5064 = $P5057."ast"()
    $P5065 = $P102."default"($P5064)
    set $P5066, $P5065
  if1545_end4896:
.annotate 'line', 2505
    $P5067 = $P102."default"()
    set $P5084, $P5067
    if $P5067 goto unless1548_end4908 
    find_dynamic_lex $P5068, "$*W"
    unless_null $P5068, fallback4909
    get_hll_global $P5071, "GLOBAL"
    get_who $P5070, $P5071
    set $P5069, $P5070["$W"]
    unless_null $P5069, fallback4910
    nqp_get_sc_object $P5072, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5069, $P5072
  fallback4910:
    unless_null $P5069, vivi_15494911
    die "Contextual $*W not found"
    box $P5073, "Contextual $*W not found"
    set $P5069, $P5073
  vivi_15494911:
    set $P5068, $P5069
  fallback4909:
    $P5074 = $P5068."cur_lexpad"()
    find_dynamic_lex $P5075, "$*W"
    unless_null $P5075, fallback4912
    get_hll_global $P5078, "GLOBAL"
    get_who $P5077, $P5078
    set $P5076, $P5077["$W"]
    unless_null $P5076, fallback4913
    nqp_get_sc_object $P5079, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5076, $P5079
  fallback4913:
    unless_null $P5076, vivi_15504914
    die "Contextual $*W not found"
    box $P5080, "Contextual $*W not found"
    set $P5076, $P5080
  vivi_15504914:
    set $P5075, $P5076
  fallback4912:
    $P5081 = $P5075."cur_lexpad"()
    $P5082 = $P5081."arity"()
    set $N5002, $P5082
    set $N5003, 1
    add $N5001, $N5002, $N5003
    $P5083 = $P5074."arity"($N5001)
    set $P5084, $P5083
  unless1548_end4908:
    unless_null _lex_param_1, fallback4917
    nqp_get_sc_object $P5086, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5086
  fallback4917:
    set $P5085, _lex_param_1["typename"]
    unless_null $P5085, fallback4918
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5085, $P5087
  fallback4918:
    set $P5090, $P5085
    unless $P5085 goto if1551_end4916 
    .const 'Sub' $P5088 = 'cuid_460_1347719921.536' 
    capture_lex $P5088
    $P5089 = $P5088()
    set $P5090, $P5089
  if1551_end4916:
    unless_null _lex_param_1, fallback4935
    nqp_get_sc_object $P5092, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5092
  fallback4935:
    set $P5091, _lex_param_1["definedness"]
    unless_null $P5091, fallback4936
    nqp_get_sc_object $P5093, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5091, $P5093
  fallback4936:
    set $P5100, $P5091
    unless $P5091 goto if1556_end4934 
.annotate 'line', 2520
    unless_null _lex_param_1, fallback4937
    nqp_get_sc_object $P5096, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5096
  fallback4937:
    set $P5095, _lex_param_1["definedness"]
    unless_null $P5095, fallback4938
    nqp_get_sc_object $P5097, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5095, $P5097
  fallback4938:
    set $P5094, $P5095[0]
    unless_null $P5094, fallback4939
    nqp_get_sc_object $P5098, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5094, $P5098
  fallback4939:
    set $S5007, $P5094
    box $P5099, $S5007
    set $P102["definedness"], $P5099
    set $P5100, $P5099
  if1556_end4934:
.annotate 'line', 2524
    $P5101 = _lex_param_1."!make"($P102)
    .return ($P5101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_460_1347719921.536") :anon :lex :outer("cuid_307_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2508
    .const 'Sub' $P5016 = 'cuid_459_1347719921.536' 
    capture_lex $P5016 
    .lex "$type", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 2509
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4919
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5005
  fallback4919:
    set $P5003, $P5004["typename"]
    unless_null $P5003, fallback4920
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5006
  fallback4920:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback4921
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5007
  fallback4921:
    $P5008 = $P5002."ast"()
    $P5009 = $P5008."value"()
    set $P101, $P5009
.annotate 'line', 2510
    find_lex $P5010, "$past"
    $P5011 = $P5010."returns"($P101)
    repr_get_primitive_type_spec $I5001, $P101
    box $P5015, $I5001
    set $P5014, $P5015
    unless $I5001 goto if1552_end4923 
    .const 'Sub' $P5012 = 'cuid_459_1347719921.536' 
    capture_lex $P5012
    $P5013 = $P5012($P5015)
    set $P5014, $P5013
  if1552_end4923:
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_459_1347719921.536") :anon :lex :outer("cuid_460_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2511
    .param pmc _lex_param_0 
    .lex "$prim", _lex_param_0 
.annotate 'line', 2512
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4924
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4925
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5005
  fallback4925:
    unless_null $P5002, vivi_15534926
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_15534926:
    set $P5001, $P5002
  fallback4924:
    $P5007 = $P5001."cur_lexpad"()
    find_lex $P5008, "$past"
    $P5009 = $P5008."name"()
    find_lex $P5010, "$type"
    $P5011 = $P5007."symbol"($P5009, $P5010 :named("type"))
.annotate 'line', 2513
    find_lex $P5012, "$past"
    $P5013 = $P5012."default"()
    set $P5018, $P5013
    unless $P5013 goto if1555_end4930 
    find_lex $P5015, "$/"
    unless_null $P5015, fallback4931
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5015, $P5016
  fallback4931:
    set $P5014, $P5015["default_value"]
    unless_null $P5014, fallback4932
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5014, $P5017
  fallback4932:
    isfalse $I5001, $P5014
    box $P5019, $I5001
    set $P5018, $P5019
  if1555_end4930:
    set $P5023, $P5018
    unless $P5018 goto if1554_end4928 
.annotate 'line', 2514
    find_lex $P5020, "$past"
    $P5021 = "&default_value_for_prim"(_lex_param_0)
    $P5022 = $P5020."default"($P5021)
    set $P5023, $P5022
  if1554_end4928:
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_308_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2527
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    set $S5001, _lex_param_1
    box $P5003, $S5001
    set $P101, $P5003
.annotate 'line', 2529
    get_hll_global $P5007, "GLOBAL"
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback4940
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5008
  fallback4940:
    $P5009 = $P5004."new"($P101 :named("name"), "lexical" :named("scope"), "param" :named("decl"), _lex_param_1 :named("node"))
    set $P102, $P5009
.annotate 'line', 2531
    find_dynamic_lex $P5010, "$*W"
    unless_null $P5010, fallback4941
    get_hll_global $P5013, "GLOBAL"
    get_who $P5012, $P5013
    set $P5011, $P5012["$W"]
    unless_null $P5011, fallback4942
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5014
  fallback4942:
    unless_null $P5011, vivi_15574943
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5011, $P5015
  vivi_15574943:
    set $P5010, $P5011
  fallback4941:
    $P5016 = $P5010."cur_lexpad"()
    $P5017 = $P5016."symbol"($P101, "lexical" :named("scope"))
.annotate 'line', 2532
    $P5018 = _lex_param_1."!make"($P102)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_309_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2535
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 2536
    unless_null _lex_param_1, fallback4944
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5003
  fallback4944:
    set $P5002, _lex_param_1["param_var"]
    unless_null $P5002, fallback4945
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5004
  fallback4945:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2537
    unless_null _lex_param_1, fallback4946
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5008
  fallback4946:
    set $P5007, _lex_param_1["param_var"]
    unless_null $P5007, fallback4947
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5009
  fallback4947:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback4948
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5010
  fallback4948:
    set $S5001, $P5006
    $P5011 = $P101."named"($S5001)
.annotate 'line', 2538
    $P5012 = _lex_param_1."!make"($P101)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_310_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2541
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5017 = 'cuid_461_1347719921.536' 
    capture_lex $P5017 
    .lex "@name", $P101 
    .lex "$found", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
.annotate 'line', 2545
    get_hll_global $P5006, "GLOBAL"
    nqp_get_package_through_who $P5005, $P5006, "HLL"
    get_who $P5004, $P5005
    set $P5003, $P5004["Compiler"]
    unless_null $P5003, fallback4949
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5007
  fallback4949:
    set $S5001, _lex_param_1
    $P5008 = $P5003."parse_name"($S5001)
    set $P101, $P5008
    box $P5009, 0
    set $P102, $P5009
    new $P5012, 'ExceptionHandler'
    set_label $P5012, catch_handler_15604955
    $P5012.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5012
    .const 'Sub' $P5010 = 'cuid_461_1347719921.536' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5013, $P5011
    pop_eh 
    goto skip_handler_15594954
  catch_handler_15604955:
    .get_results ($P5012) 
    set $I10001, 1
    set $P5012["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    finalize $P5012
    pop_upto_eh $P5012
    pop_eh 
    set $P5013, $P10001
    goto skip_handler_15594954
  skip_handler_15594954:
    set $P5016, $P102
    if $P102 goto unless1561_end4957 
.annotate 'line', 2552
.annotate 'line', 2553
    $P5014 = _lex_param_1."CURSOR"()
    set $S5004, _lex_param_1
    concat $S5003, "Use of undeclared type '", $S5004
    concat $S5002, $S5003, "'"
    $P5015 = $P5014."panic"($S5002)
    set $P5016, $P5015
  unless1561_end4957:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_461_1347719921.536") :anon :lex :outer("cuid_310_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2547
    .lex "$sym", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 2548
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4950
    get_hll_global $P5005, "GLOBAL"
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4951
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5006
  fallback4951:
    unless_null $P5003, vivi_15584952
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_15584952:
    set $P5002, $P5003
  fallback4950:
    find_lex $P5008, "@name"
    $P5009 = $P5002."find_sym"($P5008)
    set $P101, $P5009
.annotate 'line', 2549
    find_dynamic_lex $P5010, "$/"
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["WVal"]
    unless_null $P5011, fallback4953
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5015
  fallback4953:
    $P5016 = $P5011."new"($P101 :named("value"))
    $P5017 = $P5010."!make"($P5016)
    box $P5018, 1
    store_lex "$found", $P5018
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_311_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2557
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2558
    unless_null _lex_param_1, fallback4958
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4958:
    set $P5001, _lex_param_1["trait_mod"]
    unless_null $P5001, fallback4959
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4959:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_312_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2561
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5018 = 'cuid_463_1347719921.536' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_465_1347719921.536' 
    capture_lex $P5018 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4962
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback4962:
    set $P5001, _lex_param_1["longname"]
    unless_null $P5001, fallback4963
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback4963:
    set $S5001, $P5001
    iseq $I5001, $S5001, "parrot_vtable"
    unless $I5001 goto if1562_else4960 
    .const 'Sub' $P5004 = 'cuid_463_1347719921.536' 
    capture_lex $P5004
    $P5005 = $P5004()
    set $P5017, $P5005
    goto if1562_end4961
  if1562_else4960:
    unless_null _lex_param_1, fallback4987
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5007
  fallback4987:
    set $P5006, _lex_param_1["longname"]
    unless_null $P5006, fallback4988
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5008
  fallback4988:
    set $S5002, $P5006
    iseq $I5002, $S5002, "parrot_vtable_handler"
    unless $I5002 goto if1568_else4985 
    .const 'Sub' $P5009 = 'cuid_465_1347719921.536' 
    capture_lex $P5009
    $P5010 = $P5009()
    set $P5016, $P5010
    goto if1568_end4986
  if1568_else4985:
.annotate 'line', 2587
.annotate 'line', 2588
    $P5011 = _lex_param_1."CURSOR"()
    unless_null _lex_param_1, fallback5002
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5013
  fallback5002:
    set $P5012, _lex_param_1["longname"]
    unless_null $P5012, fallback5003
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5012, $P5014
  fallback5003:
    set $S5005, $P5012
    concat $S5004, "Trait '", $S5005
    concat $S5003, $S5004, "' not implemented"
    $P5015 = $P5011."panic"($S5003)
    set $P5016, $P5015
  if1568_end4986:
    set $P5017, $P5016
  if1562_end4961:
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_463_1347719921.536") :anon :lex :outer("cuid_312_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2562
    .const 'Sub' $P5040 = 'cuid_462_1347719921.536' 
    capture_lex $P5040 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    .lex "$is_dispatcher", $P104 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P104, $P5004
.annotate 'line', 2564
    find_lex $P5007, "$/"
    unless_null $P5007, fallback4964
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5008
  fallback4964:
    set $P5006, $P5007["circumfix"]
    unless_null $P5006, fallback4965
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5009
  fallback4965:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback4966
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5005, $P5010
  fallback4966:
    $P5011 = $P5005."ast"()
    set $P101, $P5011
.annotate 'line', 2566
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["SVal"]
    unless_null $P5012, fallback4969
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5012, $P5016
  fallback4969:
    $P5017 = $P5012."ACCEPTS"($P101)
    set $P5021, $P5017
    if $P5017 goto unless1563_end4968 
.annotate 'line', 2565
    find_lex $P5018, "$/"
    $P5019 = $P5018."CURSOR"()
    $P5020 = $P5019."panic"("Trait 'parrot_vtable' requires constant scalar argument")
    set $P5021, $P5020
  unless1563_end4968:
.annotate 'line', 2567
    $P5022 = $P101."value"()
    set $P102, $P5022
    find_dynamic_lex $P5023, "$*PACKAGE"
    unless_null $P5023, fallback4970
    get_hll_global $P5026, "GLOBAL"
    get_who $P5025, $P5026
    set $P5024, $P5025["$PACKAGE"]
    unless_null $P5024, fallback4971
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5024, $P5027
  fallback4971:
    unless_null $P5024, vivi_15644972
    die "Contextual $*PACKAGE not found"
    box $P5028, "Contextual $*PACKAGE not found"
    set $P5024, $P5028
  vivi_15644972:
    set $P5023, $P5024
  fallback4970:
    set $P103, $P5023
    find_dynamic_lex $P5029, "$*SCOPE"
    unless_null $P5029, fallback4973
    get_hll_global $P5032, "GLOBAL"
    get_who $P5031, $P5032
    set $P5030, $P5031["$SCOPE"]
    unless_null $P5030, fallback4974
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5030, $P5033
  fallback4974:
    unless_null $P5030, vivi_15654975
    die "Contextual $*SCOPE not found"
    box $P5034, "Contextual $*SCOPE not found"
    set $P5030, $P5034
  vivi_15654975:
    set $P5029, $P5030
  fallback4973:
    set $S5001, $P5029
    iseq $I5001, $S5001, "proto"
    box $P5035, $I5001
    set $P104, $P5035
.annotate 'line', 2570
    find_dynamic_lex $P5036, "$/"
    .const 'Sub' $P5038 = 'cuid_462_1347719921.536' 
    capture_lex $P5038
    newclosure $P5037, $P5038
    $P5039 = $P5036."!make"($P5037)
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_462_1347719921.536") :anon :lex :outer("cuid_463_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2570
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2571
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4976
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4977
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5005
  fallback4977:
    unless_null $P5002, vivi_15664978
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_15664978:
    set $P5001, $P5002
  fallback4976:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
.annotate 'line', 2572
    $P5011 = _lex_param_0."ast"()
    set $P5010, $P5011["code_obj"]
    unless_null $P5010, fallback4980
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5012
  fallback4980:
    set $P5009, $P5010
    defined $I5001, $P5009
    if $I5001, defor4979
.annotate 'line', 2573
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback4981
    get_hll_global $P5016, "GLOBAL"
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback4982
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5014, $P5017
  fallback4982:
    unless_null $P5014, vivi_15674983
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_15674983:
    set $P5013, $P5014
  fallback4981:
    $P5020 = _lex_param_0."ast"()
    set $P5019, $P5020["block_past"]
    unless_null $P5019, fallback4984
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5019, $P5021
  fallback4984:
    find_lex $P5022, "$name"
    find_lex $P5023, "$is_dispatcher"
    $P5024 = $P5013."create_code"($P5019, $P5022, $P5023)
    set $P5009, $P5024
  defor4979:
    $P5025 = $P5001."pkg_add_method"($P5007, "add_parrot_vtable_mapping", $P5008, $P5009)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_465_1347719921.536") :anon :lex :outer("cuid_312_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2576
    .const 'Sub' $P5032 = 'cuid_464_1347719921.536' 
    capture_lex $P5032 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P103, $P5003
.annotate 'line', 2578
    find_lex $P5006, "$/"
    unless_null $P5006, fallback4989
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5007
  fallback4989:
    set $P5005, $P5006["circumfix"]
    unless_null $P5005, fallback4990
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5005, $P5008
  fallback4990:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback4991
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5009
  fallback4991:
    $P5010 = $P5004."ast"()
    set $P101, $P5010
.annotate 'line', 2580
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback4994
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5015
  fallback4994:
    $P5016 = $P5011."ACCEPTS"($P101)
    set $P5020, $P5016
    if $P5016 goto unless1569_end4993 
.annotate 'line', 2579
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    $P5019 = $P5018."panic"("Trait 'parrot_vtable_handler' requires constant scalar argument")
    set $P5020, $P5019
  unless1569_end4993:
.annotate 'line', 2581
    $P5021 = $P101."value"()
    set $P102, $P5021
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback4995
    get_hll_global $P5025, "GLOBAL"
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback4996
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5023, $P5026
  fallback4996:
    unless_null $P5023, vivi_15704997
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_15704997:
    set $P5022, $P5023
  fallback4995:
    set $P103, $P5022
.annotate 'line', 2583
    find_dynamic_lex $P5028, "$/"
    .const 'Sub' $P5030 = 'cuid_464_1347719921.536' 
    capture_lex $P5030
    newclosure $P5029, $P5030
    $P5031 = $P5028."!make"($P5029)
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_464_1347719921.536") :anon :lex :outer("cuid_465_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2583
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2584
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4998
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4999
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5005
  fallback4999:
    unless_null $P5002, vivi_15715000
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_15715000:
    set $P5001, $P5002
  fallback4998:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
    set $P5009, _lex_param_0["variable"]
    unless_null $P5009, fallback5001
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5010
  fallback5001:
    set $S5001, $P5009
    $P5011 = $P5001."pkg_add_parrot_vtable_handler_mapping"($P5007, $P5008, $S5001)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_313_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2592
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_4 :opt_flag 
    .const 'Sub' $P5052 = 'cuid_466_1347719921.536' 
    capture_lex $P5052 
    .const 'Sub' $P5052 = 'cuid_467_1347719921.536' 
    capture_lex $P5052 
    if haz_param_4, default5063
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_2, $P5051
  default5063:
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
.annotate 'line', 2593
    unless_null _lex_param_1, fallback5004
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5004
  fallback5004:
    set $P5003, _lex_param_1["deflongname"]
    unless_null $P5003, fallback5005
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5005
  fallback5005:
    $P5006 = $P5003."ast"()
    set $S5001, $P5006
    box $P5007, $S5001
    set $P101, $P5007
    unless_null _lex_param_1, fallback5008
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5009
  fallback5008:
    set $P5008, _lex_param_1["proto"]
    unless_null $P5008, fallback5009
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5010
  fallback5009:
    unless $P5008 goto if1572_else5006 
.annotate 'line', 2595
.annotate 'line', 2597
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Stmts"]
    unless_null $P5011, fallback5010
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5015
  fallback5010:
.annotate 'line', 2598
    get_hll_global $P5019, "GLOBAL"
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Block"]
    unless_null $P5016, fallback5011
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5016, $P5020
  fallback5011:
.annotate 'line', 2600
    get_hll_global $P5024, "GLOBAL"
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5012
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5021, $P5025
  fallback5012:
.annotate 'line', 2601
    get_hll_global $P5029, "GLOBAL"
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5013
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5026, $P5030
  fallback5013:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "param" :named("decl"))
.annotate 'line', 2602
    get_hll_global $P5035, "GLOBAL"
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["SVal"]
    unless_null $P5032, fallback5014
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5032, $P5036
  fallback5014:
    $P5037 = $P5032."new"($P101 :named("value"))
    $P5038 = $P5021."new"($P5031, $P5037, "!protoregex" :named("name"), "callmethod" :named("op"))
    $P5039 = $P5016."new"($P5038, $P101 :named("name"), "declaration" :named("blocktype"), _lex_param_1 :named("node"))
    $P5040 = $P5011."new"($P5039)
    set $P102, $P5040
    $P5044 = $P102."list"()
    set $P5041, $P5044
    iter $P5043, $P5044
  for_next5024:
    unless $P5043, for_done5026
    shift $P5046, $P5043
  for_redo5025:
    .const 'Sub' $P5045 = 'cuid_466_1347719921.536' 
    capture_lex $P5045
    $P5041 = $P5045($P5046)
    goto for_next5024
  for_done5026:
    set $P5049, $P5041
    goto if1572_end5007
  if1572_else5006:
    .const 'Sub' $P5047 = 'cuid_467_1347719921.536' 
    capture_lex $P5047
    $P5048 = $P5047()
    set $P5049, $P5048
  if1572_end5007:
.annotate 'line', 2640
    $P5050 = _lex_param_1."!make"($P102)
    .return ($P5050) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_466_1347719921.536") :anon :lex :outer("cuid_313_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2610
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2611
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5015
    get_hll_global $P5004, "GLOBAL"
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5016
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5005
  fallback5016:
    unless_null $P5002, vivi_15735017
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_15735017:
    set $P5001, $P5002
  fallback5015:
    find_dynamic_lex $P5007, "$*PACKAGE"
    unless_null $P5007, fallback5018
    get_hll_global $P5010, "GLOBAL"
    get_who $P5009, $P5010
    set $P5008, $P5009["$PACKAGE"]
    unless_null $P5008, fallback5019
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5011
  fallback5019:
    unless_null $P5008, vivi_15745020
    die "Contextual $*PACKAGE not found"
    box $P5012, "Contextual $*PACKAGE not found"
    set $P5008, $P5012
  vivi_15745020:
    set $P5007, $P5008
  fallback5018:
    $P5013 = _lex_param_0."name"()
    find_dynamic_lex $P5014, "$*W"
    unless_null $P5014, fallback5021
    get_hll_global $P5017, "GLOBAL"
    get_who $P5016, $P5017
    set $P5015, $P5016["$W"]
    unless_null $P5015, fallback5022
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5015, $P5018
  fallback5022:
    unless_null $P5015, vivi_15755023
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5015, $P5019
  vivi_15755023:
    set $P5014, $P5015
  fallback5021:
    $P5020 = _lex_param_0."name"()
    $P5021 = $P5014."create_code"(_lex_param_0, $P5020, 0)
    $P5022 = $P5001."pkg_add_method"($P5007, "add_method", $P5013, $P5021)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_467_1347719921.536") :anon :lex :outer("cuid_313_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2614
    .lex "$block", $P101 
    .lex "$regex", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
.annotate 'line', 2615
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback5027
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback5028
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5007
  fallback5028:
    unless_null $P5004, vivi_15765029
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15765029:
    set $P5003, $P5004
  fallback5027:
    $P5009 = $P5003."pop_lexpad"()
    set $P101, $P5009
.annotate 'line', 2616
    set $P5010, $P101[0]
    unless_null $P5010, fallback5030
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5011
  fallback5030:
    get_hll_global $P5015, "GLOBAL"
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback5031
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5012, $P5016
  fallback5031:
    $P5017 = $P5012."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5018 = $P5010."unshift"($P5017)
.annotate 'line', 2617
    set $P5019, $P101[0]
    unless_null $P5019, fallback5032
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5019, $P5020
  fallback5032:
    get_hll_global $P5024, "GLOBAL"
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5033
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5021, $P5025
  fallback5033:
.annotate 'line', 2619
    get_hll_global $P5029, "GLOBAL"
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5034
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5026, $P5030
  fallback5034:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2620
    get_hll_global $P5035, "GLOBAL"
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback5035
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5032, $P5036
  fallback5035:
    $P5037 = $P5032."new"("self" :named("name"), "lexical" :named("scope"))
    $P5038 = $P5021."new"($P5031, $P5037, "bind" :named("op"))
    $P5039 = $P5019."push"($P5038)
.annotate 'line', 2621
    set $P5040, $P101[0]
    unless_null $P5040, fallback5036
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5040, $P5041
  fallback5036:
    get_hll_global $P5045, "GLOBAL"
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Var"]
    unless_null $P5042, fallback5037
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5042, $P5046
  fallback5037:
    $P5047 = $P5042."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5048 = $P5040."push"($P5047)
.annotate 'line', 2622
    set $P5049, $P101[0]
    unless_null $P5049, fallback5038
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5049, $P5050
  fallback5038:
    get_hll_global $P5054, "GLOBAL"
    nqp_get_package_through_who $P5053, $P5054, "QAST"
    get_who $P5052, $P5053
    set $P5051, $P5052["Var"]
    unless_null $P5051, fallback5039
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5051, $P5055
  fallback5039:
    $P5056 = $P5051."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5057 = $P5049."push"($P5056)
.annotate 'line', 2623
    $P5058 = $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2624
    $P5059 = $P101."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2625
    find_lex $P5068, "$/"
    unless_null $P5068, fallback5041
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5068, $P5069
  fallback5041:
    set $P5067, $P5068["p6regex"]
    unless_null $P5067, fallback5042
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5067, $P5070
  fallback5042:
    $P5071 = $P5067."ast"()
    get_hll_global $P5065, "GLOBAL"
    nqp_get_package_through_who $P5064, $P5065, "QRegex"
    nqp_get_package_through_who $P5063, $P5064, "P6Regex"
    nqp_get_package_through_who $P5062, $P5063, "Actions"
    get_who $P5061, $P5062
    set $P5060, $P5061["qbuildsub"]
    unless_null $P5060, fallback5040
    nqp_get_sc_object $P5066, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5060, $P5066
  fallback5040:
    $P5072 = $P5060($P5071, $P101)
    set $P102, $P5072
.annotate 'line', 2626
    find_lex $P5073, "$name"
    $P5074 = $P102."name"($P5073)
    find_dynamic_lex $P5075, "$*PKGDECL"
    unless_null $P5075, fallback5047
    get_hll_global $P5078, "GLOBAL"
    get_who $P5077, $P5078
    set $P5076, $P5077["$PKGDECL"]
    unless_null $P5076, fallback5048
    nqp_get_sc_object $P5079, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5076, $P5079
  fallback5048:
    unless_null $P5076, vivi_15795049
    die "Contextual $*PKGDECL not found"
    box $P5080, "Contextual $*PKGDECL not found"
    set $P5076, $P5080
  vivi_15795049:
    set $P5075, $P5076
  fallback5047:
    set $P5088, $P5075
    unless $P5075 goto if1578_end5046 
    find_dynamic_lex $P5082, "$*PACKAGE"
    unless_null $P5082, fallback5050
    get_hll_global $P5085, "GLOBAL"
    get_who $P5084, $P5085
    set $P5083, $P5084["$PACKAGE"]
    unless_null $P5083, fallback5051
    nqp_get_sc_object $P5086, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5083, $P5086
  fallback5051:
    unless_null $P5083, vivi_15805052
    die "Contextual $*PACKAGE not found"
    box $P5087, "Contextual $*PACKAGE not found"
    set $P5083, $P5087
  vivi_15805052:
    set $P5082, $P5083
  fallback5050:
    get_how $P5081, $P5082
    can $I5001, $P5081, "add_method"
    box $P5089, $I5001
    set $P5088, $P5089
  if1578_end5046:
    set $P5112, $P5088
    unless $P5088 goto if1577_end5044 
.annotate 'line', 2628
.annotate 'line', 2630
    find_dynamic_lex $P5090, "$*W"
    unless_null $P5090, fallback5053
    get_hll_global $P5093, "GLOBAL"
    get_who $P5092, $P5093
    set $P5091, $P5092["$W"]
    unless_null $P5091, fallback5054
    nqp_get_sc_object $P5094, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5091, $P5094
  fallback5054:
    unless_null $P5091, vivi_15815055
    die "Contextual $*W not found"
    box $P5095, "Contextual $*W not found"
    set $P5091, $P5095
  vivi_15815055:
    set $P5090, $P5091
  fallback5053:
    find_dynamic_lex $P5096, "$*PACKAGE"
    unless_null $P5096, fallback5056
    get_hll_global $P5099, "GLOBAL"
    get_who $P5098, $P5099
    set $P5097, $P5098["$PACKAGE"]
    unless_null $P5097, fallback5057
    nqp_get_sc_object $P5100, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5097, $P5100
  fallback5057:
    unless_null $P5097, vivi_15825058
    die "Contextual $*PACKAGE not found"
    box $P5101, "Contextual $*PACKAGE not found"
    set $P5097, $P5101
  vivi_15825058:
    set $P5096, $P5097
  fallback5056:
    find_lex $P5102, "$name"
    find_dynamic_lex $P5103, "$*W"
    unless_null $P5103, fallback5059
    get_hll_global $P5106, "GLOBAL"
    get_who $P5105, $P5106
    set $P5104, $P5105["$W"]
    unless_null $P5104, fallback5060
    nqp_get_sc_object $P5107, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5104, $P5107
  fallback5060:
    unless_null $P5104, vivi_15835061
    die "Contextual $*W not found"
    box $P5108, "Contextual $*W not found"
    set $P5104, $P5108
  vivi_15835061:
    set $P5103, $P5104
  fallback5059:
    find_lex $P5109, "$name"
    $P5110 = $P5103."create_code"($P102, $P5109, 0)
    $P5111 = $P5090."pkg_add_method"($P5096, "add_method", $P5102, $P5110)
    set $P5112, $P5111
  if1577_end5044:
.annotate 'line', 2634
    get_hll_global $P5116, "GLOBAL"
    nqp_get_package_through_who $P5115, $P5116, "QAST"
    get_who $P5114, $P5115
    set $P5113, $P5114["Op"]
    unless_null $P5113, fallback5062
    nqp_get_sc_object $P5117, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5113, $P5117
  fallback5062:
.annotate 'line', 2636
    new $P5118, 'ResizablePMCArray'
    box $P5119, "NQPRegexMethod"
    push $P5118, $P5119
    find_lex $P5120, "$/"
    $P5121 = "&lexical_package_lookup"($P5118, $P5120)
    $P5122 = $P5113."new"($P5121, $P102, "callmethod" :named("op"), "new" :named("name"))
    store_lex "$past", $P5122
    find_lex $P5123, "$past"
    set $P5123["sink"], $P102
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_314_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2644
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback5066
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5003
  fallback5066:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5067
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5004
  fallback5067:
    unless $P5002 goto if1584_else5064 
.annotate 'line', 2645
    unless_null _lex_param_1, fallback5068
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5007
  fallback5068:
    set $P5006, _lex_param_1["args"]
    unless_null $P5006, fallback5069
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5008
  fallback5069:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5070
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5005, $P5009
  fallback5070:
    $P5010 = $P5005."ast"()
    set $P5017, $P5010
    goto if1584_end5065
  if1584_else5064:
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5071
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5015
  fallback5071:
    $P5016 = $P5011."new"(_lex_param_1 :named("node"))
    set $P5017, $P5016
  if1584_end5065:
    set $P101, $P5017
    unless_null _lex_param_1, fallback5074
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5019
  fallback5074:
    set $P5018, _lex_param_1["quote"]
    unless_null $P5018, fallback5075
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5018, $P5020
  fallback5075:
    unless $P5018 goto if1585_else5072 
.annotate 'line', 2646
.annotate 'line', 2647
    unless_null _lex_param_1, fallback5076
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5022
  fallback5076:
    set $P5021, _lex_param_1["quote"]
    unless_null $P5021, fallback5077
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5021, $P5023
  fallback5077:
    $P5024 = $P5021."ast"()
    $P5025 = $P101."unshift"($P5024)
.annotate 'line', 2648
    $P5026 = $P101."op"("callmethod")
    set $P5052, $P5026
    goto if1585_end5073
  if1585_else5072:
    unless_null _lex_param_1, fallback5080
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5028
  fallback5080:
    set $P5027, _lex_param_1["longname"]
    unless_null $P5027, fallback5081
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5027, $P5029
  fallback5081:
    set $S5001, $P5027
    iseq $I5001, $S5001, "HOW"
    unless $I5001 goto if1586_else5078 
.annotate 'line', 2650
.annotate 'line', 2651
    $P5030 = $P101."op"("how")
    set $P5051, $P5030
    goto if1586_end5079
  if1586_else5078:
    unless_null _lex_param_1, fallback5084
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5032
  fallback5084:
    set $P5031, _lex_param_1["longname"]
    unless_null $P5031, fallback5085
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5031, $P5033
  fallback5085:
    set $S5002, $P5031
    iseq $I5002, $S5002, "WHAT"
    unless $I5002 goto if1587_else5082 
.annotate 'line', 2653
.annotate 'line', 2654
    $P5034 = $P101."op"("what")
    set $P5050, $P5034
    goto if1587_end5083
  if1587_else5082:
    unless_null _lex_param_1, fallback5088
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5036
  fallback5088:
    set $P5035, _lex_param_1["longname"]
    unless_null $P5035, fallback5089
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5035, $P5037
  fallback5089:
    set $S5003, $P5035
    iseq $I5003, $S5003, "WHO"
    unless $I5003 goto if1588_else5086 
.annotate 'line', 2656
.annotate 'line', 2657
    $P5038 = $P101."op"("who")
    set $P5049, $P5038
    goto if1588_end5087
  if1588_else5086:
    unless_null _lex_param_1, fallback5092
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5040
  fallback5092:
    set $P5039, _lex_param_1["longname"]
    unless_null $P5039, fallback5093
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5039, $P5041
  fallback5093:
    set $S5004, $P5039
    iseq $I5004, $S5004, "REPR"
    unless $I5004 goto if1589_else5090 
.annotate 'line', 2659
.annotate 'line', 2660
    $P5042 = $P101."op"("reprname")
    set $P5048, $P5042
    goto if1589_end5091
  if1589_else5090:
.annotate 'line', 2662
.annotate 'line', 2663
    unless_null _lex_param_1, fallback5094
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5044
  fallback5094:
    set $P5043, _lex_param_1["longname"]
    unless_null $P5043, fallback5095
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5043, $P5045
  fallback5095:
    set $S5005, $P5043
    $P5046 = $P101."name"($S5005)
.annotate 'line', 2664
    $P5047 = $P101."op"("callmethod")
    set $P5048, $P5047
  if1589_end5091:
    set $P5049, $P5048
  if1588_end5087:
    set $P5050, $P5049
  if1587_end5083:
    set $P5051, $P5050
  if1586_end5079:
    set $P5052, $P5051
  if1585_end5073:
.annotate 'line', 2666
    $P5053 = _lex_param_1."!make"($P101)
    .return ($P5053) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_315_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2671
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2672
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5096
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback5096:
.annotate 'line', 2673
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5097
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5010
  fallback5097:
    $P5011 = $P5006."new"("self" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "nqp_decontainerize PP" :named("pirop"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_316_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2676
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 2677
    unless_null _lex_param_1, fallback5098
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5003
  fallback5098:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5099
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5004
  fallback5099:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2678
    unless_null _lex_param_1, fallback5100
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5007
  fallback5100:
    set $P5006, _lex_param_1["deflongname"]
    unless_null $P5006, fallback5101
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5008
  fallback5101:
    set $S5002, $P5006
    concat $S5001, "&", $S5002
    $P5009 = $P101."name"($S5001)
.annotate 'line', 2679
    $P5010 = _lex_param_1."!make"($P101)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_317_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2682
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5051 = 'cuid_468_1347719921.536' 
    capture_lex $P5051 
    .const 'Sub' $P5051 = 'cuid_469_1347719921.536' 
    capture_lex $P5051 
    .lex "$var", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
.annotate 'line', 2685
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback5104
    get_hll_global $P5006, "GLOBAL"
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback5105
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5007
  fallback5105:
    unless_null $P5004, vivi_15915106
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15915106:
    set $P5003, $P5004
  fallback5104:
    unless_null _lex_param_1, fallback5107
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5010
  fallback5107:
    set $P5009, _lex_param_1["name"]
    unless_null $P5009, fallback5108
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5011
  fallback5108:
    set $S5001, $P5009
    $P5012 = $P5003."is_lexical"($S5001)
    unless $P5012 goto if1590_else5102 
    new $P5034, 'ExceptionHandler'
    set_label $P5034, catch_handler_15965121
    $P5034.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5034
.annotate 'line', 2686
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_15945116
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 2687
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["WVal"]
    unless_null $P5013, fallback5109
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5013, $P5017
  fallback5109:
    find_dynamic_lex $P5018, "$*W"
    unless_null $P5018, fallback5110
    get_hll_global $P5021, "GLOBAL"
    get_who $P5020, $P5021
    set $P5019, $P5020["$W"]
    unless_null $P5019, fallback5111
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5019, $P5022
  fallback5111:
    unless_null $P5019, vivi_15925112
    die "Contextual $*W not found"
    box $P5023, "Contextual $*W not found"
    set $P5019, $P5023
  vivi_15925112:
    set $P5018, $P5019
  fallback5110:
    new $P5024, 'ResizablePMCArray'
    unless_null _lex_param_1, fallback5113
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5026
  fallback5113:
    set $P5025, _lex_param_1["name"]
    unless_null $P5025, fallback5114
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5025, $P5027
  fallback5114:
    set $S5002, $P5025
    box $P5028, $S5002
    push $P5024, $P5028
    $P5029 = $P5018."find_sym"($P5024)
    $P5030 = $P5013."new"($P5029 :named("value"))
    set $P101, $P5030
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_15935115
  catch_handler_15945116:
    .get_results ($P5032) 
    .const 'Sub' $P10001 = 'cuid_468_1347719921.536' 
    capture_lex $P10001
    $P10002 = $P10001($P5032)
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10003
    goto skip_handler_15935115
  skip_handler_15935115:
    set $P5035, $P5033
    pop_eh 
    goto skip_handler_15955120
  catch_handler_15965121:
    .get_results ($P5034) 
    set $I10001, 1
    set $P5034["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    finalize $P5034
    pop_upto_eh $P5034
    pop_eh 
    set $P5035, $P10001
    goto skip_handler_15955120
  skip_handler_15955120:
    set $P5038, $P5035
    goto if1590_end5103
  if1590_else5102:
    .const 'Sub' $P5036 = 'cuid_469_1347719921.536' 
    capture_lex $P5036
    $P5037 = $P5036()
    set $P5038, $P5037
  if1590_end5103:
    set $P102, $P101
    unless_null _lex_param_1, fallback5127
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5040
  fallback5127:
    set $P5039, _lex_param_1["args"]
    unless_null $P5039, fallback5128
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5039, $P5041
  fallback5128:
    set $P5049, $P5039
    unless $P5039 goto if1597_end5126 
.annotate 'line', 2700
.annotate 'line', 2701
    unless_null _lex_param_1, fallback5129
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5044
  fallback5129:
    set $P5043, _lex_param_1["args"]
    unless_null $P5043, fallback5130
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5043, $P5045
  fallback5130:
    set $P5042, $P5043[0]
    unless_null $P5042, fallback5131
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5042, $P5046
  fallback5131:
    $P5047 = $P5042."ast"()
    set $P102, $P5047
.annotate 'line', 2702
    $P5048 = $P102."unshift"($P101)
    set $P5049, $P5048
  if1597_end5126:
.annotate 'line', 2704
    $P5050 = _lex_param_1."!make"($P102)
    .return ($P5050) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_468_1347719921.536") :anon :lex :outer("cuid_317_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2688
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 2689
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback5117
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback5117:
    find_lex $P5007, "$/"
    unless_null $P5007, fallback5118
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5008
  fallback5118:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback5119
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5009
  fallback5119:
    set $S5001, $P5006
    $P5010 = $P5001."new"($S5001 :named("name"), "lexical" :named("scope"))
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_469_1347719921.536") :anon :lex :outer("cuid_317_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2693
    .lex "@ns", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5005, "$/"
    unless_null $P5005, fallback5122
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5005, $P5006
  fallback5122:
    set $P5004, $P5005["name"]
    unless_null $P5004, fallback5123
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5007
  fallback5123:
    set $P5003, $P5004["identifier"]
    unless_null $P5003, fallback5124
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5008
  fallback5124:
    clone $P5002, $P5003
    set $P101, $P5002
.annotate 'line', 2695
    find_lex $P5009, "$/"
    $P5010 = "&lexical_package_lookup"($P101, $P5009)
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_318_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2707
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@args", $P101 
    .lex "$pirop", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback5134
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5004
  fallback5134:
    set $P5003, _lex_param_1["args"]
    unless_null $P5003, fallback5135
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5005
  fallback5135:
    unless $P5003 goto if1598_else5132 
.annotate 'line', 2708
    unless_null _lex_param_1, fallback5136
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5008
  fallback5136:
    set $P5007, _lex_param_1["args"]
    unless_null $P5007, fallback5137
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5009
  fallback5137:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback5138
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5010
  fallback5138:
    $P5011 = $P5006."ast"()
    $P5012 = $P5011."list"()
    set $P5014, $P5012
    goto if1598_end5133
  if1598_else5132:
    new $P5013, 'ResizablePMCArray'
    set $P5014, $P5013
  if1598_end5133:
    set $P101, $P5014
    unless_null _lex_param_1, fallback5139
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5016
  fallback5139:
    set $P5015, _lex_param_1["op"]
    unless_null $P5015, fallback5140
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5015, $P5017
  fallback5140:
    set $S5001, $P5015
    box $P5018, $S5001
    set $P102, $P5018
    set $S5003, $P102
    split $P5019, "__", $S5003
    join $S5002, " ", $P5019
    box $P5020, $S5002
    set $P102, $P5020
.annotate 'line', 2711
    get_hll_global $P5024, "GLOBAL"
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["VM"]
    unless_null $P5021, fallback5141
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5021, $P5025
  fallback5141:
    $P5026 = $P5021."new"($P101 :flat, $P102 :named("pirop"), _lex_param_1 :named("node"))
    $P5027 = _lex_param_1."!make"($P5026)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_319_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2714
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2715
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5142
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback5142:
    unless_null _lex_param_1, fallback5143
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5007
  fallback5143:
    set $P5006, _lex_param_1["const"]
    unless_null $P5006, fallback5144
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5008
  fallback5144:
    set $S5001, $P5006
    $P5009 = $P5001."new"($S5001 :named("pirconst"))
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_320_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2718
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "@args", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P103, $P5003
    unless_null _lex_param_1, fallback5145
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5005
  fallback5145:
    set $P5004, _lex_param_1["op"]
    unless_null $P5004, fallback5146
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5006
  fallback5146:
    set $S5001, $P5004
    box $P5007, $S5001
    set $P101, $P5007
    unless_null _lex_param_1, fallback5149
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5009
  fallback5149:
    set $P5008, _lex_param_1["args"]
    unless_null $P5008, fallback5150
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5010
  fallback5150:
    unless $P5008 goto if1599_else5147 
.annotate 'line', 2720
    unless_null _lex_param_1, fallback5151
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5013
  fallback5151:
    set $P5012, _lex_param_1["args"]
    unless_null $P5012, fallback5152
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5012, $P5014
  fallback5152:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback5153
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5015
  fallback5153:
    $P5016 = $P5011."ast"()
    $P5017 = $P5016."list"()
    set $P5019, $P5017
    goto if1599_end5148
  if1599_else5147:
    new $P5018, 'ResizablePMCArray'
    set $P5019, $P5018
  if1599_end5148:
    set $P102, $P5019
.annotate 'line', 2721
    get_hll_global $P5023, "GLOBAL"
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback5154
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5020, $P5024
  fallback5154:
    $P5025 = $P5020."new"($P102 :flat, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P103, $P5025
.annotate 'line', 2722
    $P5026 = _lex_param_1."!make"($P103)
    .return ($P5026) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_321_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2725
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2726
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5155
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback5155:
    $P5006 = $P5001."new"("nqpmultidispatch" :named("op"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_322_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2729
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5156
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback5156:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5157
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback5157:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_323_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2731
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5056 = 'cuid_471_1347719921.536' 
    capture_lex $P5056 
    .lex "$past", $P101 
    .lex "$i", $P102 
    .lex "$n", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc tmp_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P103, $P5003
.annotate 'line', 2732
    get_hll_global $P5007, "GLOBAL"
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Op"]
    unless_null $P5004, fallback5158
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5008
  fallback5158:
    $P5009 = $P5004."new"("call" :named("op"), _lex_param_1 :named("node"))
    set $P101, $P5009
    unless_null _lex_param_1, fallback5161
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5011
  fallback5161:
    set $P5010, _lex_param_1["EXPR"]
    unless_null $P5010, fallback5162
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5012
  fallback5162:
    set $P5015, $P5010
    unless $P5010 goto if1600_end5160 
    .const 'Sub' $P5013 = 'cuid_471_1347719921.536' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  if1600_end5160:
    box $P5016, 0
    set $P102, $P5016
.annotate 'line', 2741
    $P5017 = $P101."list"()
    set $N5001, $P5017
    box $P5018, $N5001
    set $P103, $P5018
  while1604_test5175:
    set $N5002, $P102
    set $N5003, $P103
    islt $I5001, $N5002, $N5003
    box $P5054, $I5001
    set $P5053, $P5054
    unless $I5001 goto while1604_done5179 
  while1604_redo5177:
.annotate 'line', 2742
    set $I5003, $P102
    set $P5019, $P101[$I5003]
    unless_null $P5019, fallback5184
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5019, $P5020
  fallback5184:
    get_hll_global $P5024, "GLOBAL"
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5185
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5021, $P5025
  fallback5185:
    type_check $I5002, $P5019, $P5021
    set $I5006, $I5002
    unless $I5002 goto if1606_end5183 
.annotate 'line', 2743
    set $I5005, $P102
    set $P5026, $P101[$I5005]
    unless_null $P5026, fallback5186
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5026, $P5027
  fallback5186:
    $P5028 = $P5026."name"()
    set $S5001, $P5028
    iseq $I5004, $S5001, "&prefix:<|>"
    set $I5006, $I5004
  if1606_end5183:
    box $P5052, $I5006
    set $P5051, $P5052
    unless $I5006 goto if1605_end5181 
    set $I5007, $P102
    set $I5008, $P102
    set $P5030, $P101[$I5008]
    unless_null $P5030, fallback5187
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5030, $P5031
  fallback5187:
    set $P5029, $P5030[0]
    unless_null $P5029, fallback5188
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5029, $P5032
  fallback5188:
    set $P101[$I5007], $P5029
.annotate 'line', 2745
    set $I5009, $P102
    set $P5033, $P101[$I5009]
    unless_null $P5033, fallback5189
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5033, $P5034
  fallback5189:
    $P5035 = $P5033."flat"(1)
    set $I5011, $P102
    set $P5036, $P101[$I5011]
    unless_null $P5036, fallback5194
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5036, $P5037
  fallback5194:
    get_hll_global $P5041, "GLOBAL"
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Var"]
    unless_null $P5038, fallback5195
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5038, $P5042
  fallback5195:
    type_check $I5010, $P5036, $P5038
    set $I5014, $I5010
    unless $I5010 goto if1608_end5193 
.annotate 'line', 2747
    set $I5013, $P102
    set $P5043, $P101[$I5013]
    unless_null $P5043, fallback5196
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5043, $P5044
  fallback5196:
    $P5045 = $P5043."name"()
    set $S5003, $P5045
    substr $S5002, $S5003, 0, 1
    iseq $I5012, $S5002, "%"
    set $I5014, $I5012
  if1608_end5193:
    box $P5050, $I5014
    set $P5049, $P5050
    unless $I5014 goto if1607_end5191 
.annotate 'line', 2746
    set $I5015, $P102
    set $P5046, $P101[$I5015]
    unless_null $P5046, fallback5197
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5046, $P5047
  fallback5197:
    $P5048 = $P5046."named"(1)
    set $P5049, $P5048
  if1607_end5191:
    set $P5051, $P5049
  if1605_end5181:
    set tmp_2, $P102
    set $N5005, tmp_2
    set $N5006, 1
    add $N5004, $N5005, $N5006
    box $P5053, $N5004
    set $P102, $P5053
    set $P5053, tmp_2
    goto while1604_test5175 
  while1604_done5179:
.annotate 'line', 2751
    $P5055 = _lex_param_1."!make"($P101)
    .return ($P5055) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_471_1347719921.536") :anon :lex :outer("cuid_323_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2733
    .const 'Sub' $P5023 = 'cuid_470_1347719921.536' 
    capture_lex $P5023 
    .lex "$expr", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 2734
    find_lex $P5003, "$/"
    unless_null $P5003, fallback5163
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5004
  fallback5163:
    set $P5002, $P5003["EXPR"]
    unless_null $P5002, fallback5164
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5005
  fallback5164:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    get_hll_global $P5010, "GLOBAL"
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback5171
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5011
  fallback5171:
    type_check $I5001, $P101, $P5007
    set $I5003, $I5001
    unless $I5001 goto if1603_end5170 
.annotate 'line', 2735
    $P5012 = $P101."name"()
    set $S5001, $P5012
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1603_end5170:
    set $I5005, $I5003
    unless $I5003 goto if1602_end5168 
    $P5013 = $P101."named"()
    isfalse $I5004, $P5013
    set $I5005, $I5004
  if1602_end5168:
    unless $I5005 goto if1601_else5165 
.annotate 'line', 2736
    $P5017 = $P101."list"()
    set $P5014, $P5017
    iter $P5016, $P5017
  for_next5172:
    unless $P5016, for_done5174
    shift $P5019, $P5016
  for_redo5173:
    .const 'Sub' $P5018 = 'cuid_470_1347719921.536' 
    capture_lex $P5018
    $P5014 = $P5018($P5019)
    goto for_next5172
  for_done5174:
    set $P5022, $P5014
    goto if1601_end5166
  if1601_else5165:
.annotate 'line', 2738
    find_lex $P5020, "$past"
    $P5021 = $P5020."push"($P101)
    set $P5022, $P5021
  if1601_end5166:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_470_1347719921.536") :anon :lex :outer("cuid_471_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2736
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$past"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_324_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2754
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5198
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback5198:
    set $P5001, _lex_param_1["multi_declarator"]
    unless_null $P5001, fallback5199
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback5199:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_325_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2756
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5200
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback5200:
    set $P5001, _lex_param_1["value"]
    unless_null $P5001, fallback5201
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback5201:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_326_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2758
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2759
    unless_null _lex_param_1, fallback5204
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback5204:
    set $P5001, _lex_param_1["EXPR"]
    unless_null $P5001, fallback5205
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback5205:
    unless $P5001 goto if1609_else5202 
.annotate 'line', 2760
    unless_null _lex_param_1, fallback5206
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5006
  fallback5206:
    set $P5005, _lex_param_1["EXPR"]
    unless_null $P5005, fallback5207
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5005, $P5007
  fallback5207:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback5208
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5008
  fallback5208:
    $P5009 = $P5004."ast"()
    set $P5016, $P5009
    goto if1609_end5203
  if1609_else5202:
.annotate 'line', 2761
    get_hll_global $P5013, "GLOBAL"
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback5209
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5014
  fallback5209:
    $P5015 = $P5010."new"("list" :named("op"), _lex_param_1 :named("node"))
    set $P5016, $P5015
  if1609_end5203:
    $P5017 = _lex_param_1."!make"($P5016)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_327_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2764
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback5212
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5003
  fallback5212:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback5213
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5004
  fallback5213:
    unless $P5002 goto if1610_else5210 
.annotate 'line', 2766
.annotate 'line', 2767
    unless_null _lex_param_1, fallback5214
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5007
  fallback5214:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5215
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5008
  fallback5215:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5216
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5005, $P5009
  fallback5216:
    $P5010 = $P5005."ast"()
    set $P101, $P5010
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5221
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5015
  fallback5221:
    type_check $I5001, $P101, $P5011
    set $I5003, $I5001
    unless $I5001 goto if1612_end5220 
.annotate 'line', 2768
    $P5016 = $P101."name"()
    set $S5001, $P5016
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1612_end5220:
    box $P5024, $I5003
    set $P5023, $P5024
    if $I5003 goto unless1611_end5218 
.annotate 'line', 2769
    get_hll_global $P5020, "GLOBAL"
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback5222
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5017, $P5021
  fallback5222:
    $P5022 = $P5017."new"($P101, "list" :named("op"))
    set $P101, $P5022
    set $P5023, $P101
  unless1611_end5218:
    set $P5031, $P5023
    goto if1610_end5211
  if1610_else5210:
.annotate 'line', 2772
.annotate 'line', 2773
    get_hll_global $P5028, "GLOBAL"
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Op"]
    unless_null $P5025, fallback5223
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5025, $P5029
  fallback5223:
    $P5030 = $P5025."new"("list" :named("op"))
    set $P101, $P5030
    set $P5031, $P101
  if1610_end5211:
.annotate 'line', 2775
    $P5032 = $P101."name"("&circumfix:<[ ]>")
.annotate 'line', 2776
    $P5033 = _lex_param_1."!make"($P101)
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_328_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2779
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5224
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback5224:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5225
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback5225:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_329_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2780
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5226
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback5226:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5227
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback5227:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_330_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2782
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5028 = 'cuid_472_1347719921.536' 
    capture_lex $P5028 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5230
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5005
  fallback5230:
    set $P5004, _lex_param_1["pblock"]
    unless_null $P5004, fallback5231
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5006
  fallback5231:
    set $P5003, $P5004["blockoid"]
    unless_null $P5003, fallback5232
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5007
  fallback5232:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback5233
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5008
  fallback5233:
    set $P5001, $P5002["statement"]
    unless_null $P5001, fallback5234
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5009
  fallback5234:
    set $N5001, $P5001
    set $N5002, 0
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1613_else5228 
    .const 'Sub' $P5010 = 'cuid_472_1347719921.536' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5027, $P5011
    goto if1613_end5229
  if1613_else5228:
    unless_null _lex_param_1, fallback5240
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5015
  fallback5240:
    set $P5014, _lex_param_1["pblock"]
    unless_null $P5014, fallback5241
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5014, $P5016
  fallback5241:
    set $P5013, $P5014["blockoid"]
    unless_null $P5013, fallback5242
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5013, $P5017
  fallback5242:
    set $P5012, $P5013["you_are_here"]
    unless_null $P5012, fallback5243
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5012, $P5018
  fallback5243:
    unless $P5012 goto if1614_else5238 
.annotate 'line', 2788
.annotate 'line', 2789
    unless_null _lex_param_1, fallback5244
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5020
  fallback5244:
    set $P5019, _lex_param_1["pblock"]
    unless_null $P5019, fallback5245
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5019, $P5021
  fallback5245:
    $P5022 = $P5019."ast"()
    $P5023 = _lex_param_1."!make"($P5022)
    set $P5026, $P5023
    goto if1614_end5239
  if1614_else5238:
.annotate 'line', 2791
.annotate 'line', 2792
    $P5024 = "&default_for"("%")
    $P5025 = _lex_param_1."!make"($P5024)
    set $P5026, $P5025
  if1614_end5239:
    set $P5027, $P5026
  if1613_end5229:
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_472_1347719921.536") :anon :lex :outer("cuid_330_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2783
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 2784
    get_hll_global $P5005, "GLOBAL"
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback5235
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5006
  fallback5235:
    find_lex $P5008, "$/"
    unless_null $P5008, fallback5236
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5009
  fallback5236:
    set $P5007, $P5008["pblock"]
    unless_null $P5007, fallback5237
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5010
  fallback5237:
    $P5011 = $P5007."ast"()
    $P5012 = $P5002."new"($P5011, "takeclosure" :named("op"))
    set $P101, $P5012
    box $P5013, 1
    set $P101["bareblock"], $P5013
.annotate 'line', 2786
    find_dynamic_lex $P5014, "$/"
    $P5015 = $P5014."!make"($P101)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<sigil>" :subid("cuid_331_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2796
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback5248
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5003
  fallback5248:
    set $P5002, _lex_param_1["sigil"]
    unless_null $P5002, fallback5249
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5004
  fallback5249:
    set $S5001, $P5002
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1615_else5246 
    set $S5004, "list"
    goto if1615_end5247
  if1615_else5246:
    unless_null _lex_param_1, fallback5252
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5006
  fallback5252:
    set $P5005, _lex_param_1["sigil"]
    unless_null $P5005, fallback5253
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5005, $P5007
  fallback5253:
    set $S5002, $P5005
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1616_else5250 
    set $S5003, "hash"
    goto if1616_end5251
  if1616_else5250:
    set $S5003, "item"
  if1616_end5251:
    set $S5004, $S5003
  if1615_end5247:
    box $P5008, $S5004
    set $P101, $P5008
.annotate 'line', 2800
    get_hll_global $P5012, "GLOBAL"
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback5254
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5013
  fallback5254:
    unless_null _lex_param_1, fallback5255
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5015
  fallback5255:
    set $P5014, _lex_param_1["semilist"]
    unless_null $P5014, fallback5256
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5014, $P5016
  fallback5256:
    $P5017 = $P5014."ast"()
    $P5018 = $P5009."new"($P5017, "callmethod" :named("op"), $P101 :named("name"))
    $P5019 = _lex_param_1."!make"($P5018)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_332_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2803
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5257
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback5257:
    set $P5001, _lex_param_1["statement"]
    unless_null $P5001, fallback5258
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback5258:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_333_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2805
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2806
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5259
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback5259:
    unless_null _lex_param_1, fallback5260
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5007
  fallback5260:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5261
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5008
  fallback5261:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "positional" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_334_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2809
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2810
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5262
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback5262:
    unless_null _lex_param_1, fallback5263
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5007
  fallback5263:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5264
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5008
  fallback5264:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_335_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2813
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2814
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5265
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback5265:
    unless_null _lex_param_1, fallback5266
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5007
  fallback5266:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5267
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5008
  fallback5267:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_336_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2817
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2818
    unless_null _lex_param_1, fallback5268
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback5268:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5269
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback5269:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_337_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2821
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2822
    unless_null _lex_param_1, fallback5272
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback5272:
    set $P5001, _lex_param_1["quote"]
    unless_null $P5001, fallback5273
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback5273:
    unless $P5001 goto if1617_else5270 
    unless_null _lex_param_1, fallback5274
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5005
  fallback5274:
    set $P5004, _lex_param_1["quote"]
    unless_null $P5004, fallback5275
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5004, $P5006
  fallback5275:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1617_end5271
  if1617_else5270:
    unless_null _lex_param_1, fallback5276
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5009
  fallback5276:
    set $P5008, _lex_param_1["number"]
    unless_null $P5008, fallback5277
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5010
  fallback5277:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1617_end5271:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_338_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2825
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$value", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback5280
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5003
  fallback5280:
    set $P5002, _lex_param_1["dec_number"]
    unless_null $P5002, fallback5281
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5004
  fallback5281:
    unless $P5002 goto if1618_else5278 
.annotate 'line', 2826
    unless_null _lex_param_1, fallback5282
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5006
  fallback5282:
    set $P5005, _lex_param_1["dec_number"]
    unless_null $P5005, fallback5283
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5005, $P5007
  fallback5283:
    $P5008 = $P5005."ast"()
    set $P5013, $P5008
    goto if1618_end5279
  if1618_else5278:
    unless_null _lex_param_1, fallback5284
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5010
  fallback5284:
    set $P5009, _lex_param_1["integer"]
    unless_null $P5009, fallback5285
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5009, $P5011
  fallback5285:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1618_end5279:
    set $P101, $P5013
    unless_null _lex_param_1, fallback5288
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5015
  fallback5288:
    set $P5014, _lex_param_1["sign"]
    unless_null $P5014, fallback5289
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5014, $P5016
  fallback5289:
    set $S5001, $P5014
    iseq $I5001, $S5001, "-"
    box $P5019, $I5001
    set $P5018, $P5019
    unless $I5001 goto if1619_end5287 
.annotate 'line', 2827
    set $N5002, $P101
    neg $N5001, $N5002
    box $P5017, $N5001
    set $P101, $P5017
    set $P5018, $P101
  if1619_end5287:
.annotate 'line', 2828
    unless_null _lex_param_1, fallback5292
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5021
  fallback5292:
    set $P5020, _lex_param_1["dec_number"]
    unless_null $P5020, fallback5293
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5020, $P5022
  fallback5293:
    unless $P5020 goto if1620_else5290 
.annotate 'line', 2829
    get_hll_global $P5026, "GLOBAL"
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["NVal"]
    unless_null $P5023, fallback5294
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5023, $P5027
  fallback5294:
    $P5028 = $P5023."new"($P101 :named("value"))
    set $P5035, $P5028
    goto if1620_end5291
  if1620_else5290:
.annotate 'line', 2830
    get_hll_global $P5032, "GLOBAL"
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["IVal"]
    unless_null $P5029, fallback5295
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5029, $P5033
  fallback5295:
    $P5034 = $P5029."new"($P101 :named("value"))
    set $P5035, $P5034
  if1620_end5291:
    $P5036 = _lex_param_1."!make"($P5035)
    .return ($P5036) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_339_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2833
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5296
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback5296:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5297
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback5297:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_340_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2834
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5298
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback5298:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5299
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback5299:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_341_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2835
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5300
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback5300:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5301
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback5301:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_342_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2836
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5302
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback5302:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5303
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback5303:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_343_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2837
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5304
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback5304:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5305
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback5305:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_344_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2838
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2839
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5306
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback5306:
    unless_null _lex_param_1, fallback5307
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5007
  fallback5307:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5308
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5008
  fallback5308:
    $P5009 = $P5006."ast"()
    $P5010 = $P5009."value"()
    $P5011 = $P5001."new"($P5010 :named("pir"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_345_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2842
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$regex", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P103, $P5003
.annotate 'line', 2843
    find_dynamic_lex $P5004, "$*W"
    unless_null $P5004, fallback5309
    get_hll_global $P5007, "GLOBAL"
    get_who $P5006, $P5007
    set $P5005, $P5006["$W"]
    unless_null $P5005, fallback5310
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5005, $P5008
  fallback5310:
    unless_null $P5005, vivi_16215311
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5005, $P5009
  vivi_16215311:
    set $P5004, $P5005
  fallback5309:
    $P5010 = $P5004."pop_lexpad"()
    set $P101, $P5010
.annotate 'line', 2844
    set $P5011, $P101[0]
    unless_null $P5011, fallback5312
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5012
  fallback5312:
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback5313
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5013, $P5017
  fallback5313:
    $P5018 = $P5013."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5019 = $P5011."push"($P5018)
.annotate 'line', 2845
    set $P5020, $P101[0]
    unless_null $P5020, fallback5314
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5020, $P5021
  fallback5314:
    get_hll_global $P5025, "GLOBAL"
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Op"]
    unless_null $P5022, fallback5315
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5022, $P5026
  fallback5315:
.annotate 'line', 2847
    get_hll_global $P5030, "GLOBAL"
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback5316
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5027, $P5031
  fallback5316:
    $P5032 = $P5027."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2848
    get_hll_global $P5036, "GLOBAL"
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Var"]
    unless_null $P5033, fallback5317
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5033, $P5037
  fallback5317:
    $P5038 = $P5033."new"("self" :named("name"), "lexical" :named("scope"))
    $P5039 = $P5022."new"($P5032, $P5038, "bind" :named("op"))
    $P5040 = $P5020."push"($P5039)
.annotate 'line', 2849
    set $P5041, $P101[0]
    unless_null $P5041, fallback5318
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5041, $P5042
  fallback5318:
    get_hll_global $P5046, "GLOBAL"
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Var"]
    unless_null $P5043, fallback5319
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5043, $P5047
  fallback5319:
    $P5048 = $P5043."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5049 = $P5041."push"($P5048)
.annotate 'line', 2850
    set $P5050, $P101[0]
    unless_null $P5050, fallback5320
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5050, $P5051
  fallback5320:
    get_hll_global $P5055, "GLOBAL"
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["Var"]
    unless_null $P5052, fallback5321
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5052, $P5056
  fallback5321:
    $P5057 = $P5052."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5058 = $P5050."push"($P5057)
.annotate 'line', 2851
    $P5059 = $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2852
    $P5060 = $P101."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2854
    unless_null _lex_param_1, fallback5323
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5069
  fallback5323:
    set $P5068, _lex_param_1["p6regex"]
    unless_null $P5068, fallback5324
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5068, $P5070
  fallback5324:
    $P5071 = $P5068."ast"()
    get_hll_global $P5066, "GLOBAL"
    nqp_get_package_through_who $P5065, $P5066, "QRegex"
    nqp_get_package_through_who $P5064, $P5065, "P6Regex"
    nqp_get_package_through_who $P5063, $P5064, "Actions"
    get_who $P5062, $P5063
    set $P5061, $P5062["qbuildsub"]
    unless_null $P5061, fallback5322
    nqp_get_sc_object $P5067, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5061, $P5067
  fallback5322:
    $P5072 = $P5061($P5071, $P101)
    set $P102, $P5072
.annotate 'line', 2855
    get_hll_global $P5076, "GLOBAL"
    nqp_get_package_through_who $P5075, $P5076, "QAST"
    get_who $P5074, $P5075
    set $P5073, $P5074["Op"]
    unless_null $P5073, fallback5325
    nqp_get_sc_object $P5077, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5073, $P5077
  fallback5325:
.annotate 'line', 2857
    new $P5078, 'ResizablePMCArray'
    box $P5079, "NQPRegex"
    push $P5078, $P5079
    $P5080 = "&lexical_package_lookup"($P5078, _lex_param_1)
    $P5081 = $P5073."new"($P5080, $P102, "callmethod" :named("op"), "new" :named("name"))
    set $P103, $P5081
    set $P103["sink"], $P102
.annotate 'line', 2862
    $P5082 = _lex_param_1."!make"($P103)
    .return ($P5082) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_346_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2865
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5326
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback5326:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback5327
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback5327:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_347_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2866
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2867
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5328
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback5328:
.annotate 'line', 2868
    unless_null _lex_param_1, fallback5329
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5007
  fallback5329:
    set $P5006, _lex_param_1["block"]
    unless_null $P5006, fallback5330
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5008
  fallback5330:
    $P5009 = $P5006."ast"()
    $P5010 = "&block_immediate"($P5009)
    $P5011 = $P5001."new"($P5010, "stringify" :named("op"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_348_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2871
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    $P5001 = _lex_param_1."!make"("\e")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_349_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2875
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5331
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback5331:
    set $P5001, _lex_param_1["dotty"]
    unless_null $P5001, fallback5332
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback5332:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_350_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2877
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2878
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5333
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback5333:
.annotate 'line', 2880
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5334
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5010
  fallback5334:
    $P5011 = $P5006."new"("RETURN" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "call" :named("op"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_351_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2884
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2885
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5335
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback5335:
.annotate 'line', 2886
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5336
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5010
  fallback5336:
    $P5011 = $P5006."new"("$/" :named("name"), "contextual" :named("scope"))
    $P5012 = $P5001."new"($P5011, "callmethod" :named("op"), "!make" :named("name"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_352_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2893
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5337
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback5337:
    $P5006 = $P5001."new"("control" :named("op"), "next" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_353_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2894
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5338
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback5338:
    $P5006 = $P5001."new"("control" :named("op"), "last" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_354_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2895
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5339
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback5339:
    $P5006 = $P5001."new"("control" :named("op"), "redo" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_355_1347719921.536") :anon :lex :outer("cuid_356_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2897
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2898
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5340
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback5340:
    $P5006 = $P5001."new"("callmethod" :named("op"), "ACCEPTS" :named("name"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_367_1347719921.536") :anon :lex :outer("cuid_1_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2981
    .const 'Sub' $P5011 = 'cuid_357_1347719921.536' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_358_1347719921.536' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_359_1347719921.536' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_360_1347719921.536' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_361_1347719921.536' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_362_1347719921.536' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_363_1347719921.536' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_364_1347719921.536' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_365_1347719921.536' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_366_1347719921.536' 
    capture_lex $P5011 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_357_1347719921.536' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_358_1347719921.536' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_359_1347719921.536' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_360_1347719921.536' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_361_1347719921.536' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_362_1347719921.536' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_363_1347719921.536' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_364_1347719921.536' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_365_1347719921.536' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_366_1347719921.536' 
    capture_lex $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_357_1347719921.536") :anon :lex :outer("cuid_367_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2983
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
.annotate 'line', 2984
    unless_null _lex_param_1, fallback5341
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5003
  fallback5341:
    set $P5002, _lex_param_1["statement"]
    unless_null $P5002, fallback5342
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5002, $P5004
  fallback5342:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2985
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Regex"]
    unless_null $P5006, fallback5343
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5010
  fallback5343:
    $P5011 = $P5006."new"($P101, "qastnode" :named("rxtype"), "declarative" :named("subtype"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_358_1347719921.536") :anon :lex :outer("cuid_367_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2989
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2990
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5344
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback5344:
    unless_null _lex_param_1, fallback5345
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5007
  fallback5345:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5346
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5008
  fallback5346:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_359_1347719921.536") :anon :lex :outer("cuid_367_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2994
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2995
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5347
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback5347:
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5348
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5010
  fallback5348:
.annotate 'line', 2996
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5349
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5015
  fallback5349:
    $P5016 = $P5011."new"("!INTERPOLATE" :named("value"))
.annotate 'line', 2997
    unless_null _lex_param_1, fallback5350
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5018
  fallback5350:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5351
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5017, $P5019
  fallback5351:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_360_1347719921.536") :anon :lex :outer("cuid_367_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3001
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3002
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5352
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback5352:
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5353
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5010
  fallback5353:
.annotate 'line', 3003
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5354
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5015
  fallback5354:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3004
    unless_null _lex_param_1, fallback5355
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5018
  fallback5355:
    set $P5017, _lex_param_1["codeblock"]
    unless_null $P5017, fallback5356
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5017, $P5019
  fallback5356:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_361_1347719921.536") :anon :lex :outer("cuid_367_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3008
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3009
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5357
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback5357:
    unless_null _lex_param_1, fallback5358
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5007
  fallback5358:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5359
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5008
  fallback5359:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback5360
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5011
  fallback5360:
    set $P5010, _lex_param_1["zw"]
    unless_null $P5010, fallback5361
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5012
  fallback5361:
    set $S5001, $P5010
    iseq $I5001, $S5001, "!"
    $P5013 = $P5001."new"($P5009, "zerowidth" :named("subtype"), $I5001 :named("negate"), "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_362_1347719921.536") :anon :lex :outer("cuid_367_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3014
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3015
    get_hll_global $P5004, "GLOBAL"
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5362
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5005
  fallback5362:
    get_hll_global $P5009, "GLOBAL"
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5363
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5006, $P5010
  fallback5363:
.annotate 'line', 3016
    get_hll_global $P5014, "GLOBAL"
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5364
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5015
  fallback5364:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3017
    unless_null _lex_param_1, fallback5365
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5018
  fallback5365:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5366
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5017, $P5019
  fallback5366:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_363_1347719921.536") :anon :lex :outer("cuid_367_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3021
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
.annotate 'line', 3022
    unless_null _lex_param_1, fallback5367
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5004
  fallback5367:
    set $P5003, _lex_param_1["block"]
    unless_null $P5003, fallback5368
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5005
  fallback5368:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 3023
    $P5007 = $P101."blocktype"("immediate")
.annotate 'line', 3025
    get_hll_global $P5011, "GLOBAL"
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["Stmts"]
    unless_null $P5008, fallback5369
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5012
  fallback5369:
.annotate 'line', 3026
    get_hll_global $P5016, "GLOBAL"
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Op"]
    unless_null $P5013, fallback5370
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5013, $P5017
  fallback5370:
.annotate 'line', 3028
    get_hll_global $P5021, "GLOBAL"
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["Var"]
    unless_null $P5018, fallback5371
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5018, $P5022
  fallback5371:
    $P5023 = $P5018."new"("$/" :named("name"), "contextual" :named("scope"))
.annotate 'line', 3029
    get_hll_global $P5027, "GLOBAL"
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback5372
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5024, $P5028
  fallback5372:
.annotate 'line', 3030
    get_hll_global $P5032, "GLOBAL"
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Var"]
    unless_null $P5029, fallback5373
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5029, $P5033
  fallback5373:
    $P5034 = $P5029."new"(utf8:"$\x{a2}" :named("name"), "contextual" :named("scope"))
    $P5035 = $P5024."new"($P5034, "MATCH" :named("name"), "callmethod" :named("op"))
    $P5036 = $P5013."new"($P5023, $P5035, "bind" :named("op"))
    $P5037 = $P5008."new"($P5036, $P101)
    set $P102, $P5037
.annotate 'line', 3037
    $P5038 = _lex_param_1."!make"($P102)
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<( )>" :subid("cuid_364_1347719921.536") :anon :lex :outer("cuid_367_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3041
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$subpast", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
.annotate 'line', 3042
    get_hll_global $P5006, "GLOBAL"
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Node"]
    unless_null $P5003, fallback5374
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5007
  fallback5374:
.annotate 'line', 3043
    unless_null _lex_param_1, fallback5376
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5016
  fallback5376:
    set $P5015, _lex_param_1["nibbler"]
    unless_null $P5015, fallback5377
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5015, $P5017
  fallback5377:
    $P5018 = $P5015."ast"()
    get_hll_global $P5013, "GLOBAL"
    nqp_get_package_through_who $P5012, $P5013, "QRegex"
    nqp_get_package_through_who $P5011, $P5012, "P6Regex"
    nqp_get_package_through_who $P5010, $P5011, "Actions"
    get_who $P5009, $P5010
    set $P5008, $P5009["qbuildsub"]
    unless_null $P5008, fallback5375
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5008, $P5014
  fallback5375:
    $P5019 = $P5008($P5018, 1 :named("anon"), 1 :named("addself"))
    $P5020 = $P5003."new"($P5019)
    set $P101, $P5020
.annotate 'line', 3044
    get_hll_global $P5024, "GLOBAL"
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Regex"]
    unless_null $P5021, fallback5378
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5021, $P5025
  fallback5378:
    unless_null _lex_param_1, fallback5379
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5027
  fallback5379:
    set $P5026, _lex_param_1["nibbler"]
    unless_null $P5026, fallback5380
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5026, $P5028
  fallback5380:
    $P5029 = $P5026."ast"()
    $P5030 = $P5021."new"($P101, $P5029, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"))
    set $P102, $P5030
.annotate 'line', 3046
    $P5031 = _lex_param_1."!make"($P102)
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_365_1347719921.536") :anon :lex :outer("cuid_367_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3049
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5098 = 'cuid_473_1347719921.536' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_474_1347719921.536' 
    capture_lex $P5098 
    .lex "$name", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback5381
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5004
  fallback5381:
    set $P5003, _lex_param_1["longname"]
    unless_null $P5003, fallback5382
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5005
  fallback5382:
    set $S5001, $P5003
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback5385
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5008
  fallback5385:
    set $P5007, _lex_param_1["assertion"]
    unless_null $P5007, fallback5386
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5007, $P5009
  fallback5386:
    unless $P5007 goto if1622_else5383 
.annotate 'line', 3052
.annotate 'line', 3053
    unless_null _lex_param_1, fallback5387
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5012
  fallback5387:
    set $P5011, _lex_param_1["assertion"]
    unless_null $P5011, fallback5388
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5011, $P5013
  fallback5388:
    set $P5010, $P5011[0]
    unless_null $P5010, fallback5389
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5010, $P5014
  fallback5389:
    $P5015 = $P5010."ast"()
    set $P102, $P5015
.annotate 'line', 3054
    nqp_decontainerize $P5016, _lex_param_0
    $P5017 = $P5016."subrule_alias"($P102, $P101)
    set $P5096, $P5017
    goto if1622_end5384
  if1622_else5383:
    set $S5002, $P101
    iseq $I5001, $S5002, "sym"
    unless $I5001 goto if1623_else5390 
    .const 'Sub' $P5018 = 'cuid_473_1347719921.536' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5095, $P5019
    goto if1623_end5391
  if1623_else5390:
.annotate 'line', 3064
.annotate 'line', 3065
    get_hll_global $P5023, "GLOBAL"
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Regex"]
    unless_null $P5020, fallback5408
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5020, $P5024
  fallback5408:
.annotate 'line', 3067
    get_hll_global $P5028, "GLOBAL"
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Node"]
    unless_null $P5025, fallback5409
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5025, $P5029
  fallback5409:
    get_hll_global $P5033, "GLOBAL"
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback5410
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5030, $P5034
  fallback5410:
    $P5035 = $P5030."new"($P101 :named("value"))
    $P5036 = $P5025."new"($P5035)
    $P5037 = $P5020."new"($P5036, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"), $P101 :named("name"))
    set $P102, $P5037
    unless_null _lex_param_1, fallback5413
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5039
  fallback5413:
    set $P5038, _lex_param_1["arglist"]
    unless_null $P5038, fallback5414
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5038, $P5040
  fallback5414:
    unless $P5038 goto if1628_else5411 
.annotate 'line', 3068
.annotate 'line', 3069
    unless_null _lex_param_1, fallback5415
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5046
  fallback5415:
    set $P5045, _lex_param_1["arglist"]
    unless_null $P5045, fallback5416
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5045, $P5047
  fallback5416:
    set $P5044, $P5045[0]
    unless_null $P5044, fallback5417
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5044, $P5048
  fallback5417:
    $P5049 = $P5044."ast"()
    $P5050 = $P5049."list"()
    set $P5041, $P5050
    iter $P5043, $P5050
  for_next5419:
    unless $P5043, for_done5421
    shift $P5052, $P5043
  for_redo5420:
    .const 'Sub' $P5051 = 'cuid_474_1347719921.536' 
    capture_lex $P5051
    $P5041 = $P5051($P5052)
    goto for_next5419
  for_done5421:
    set $P5094, $P5041
    goto if1628_end5412
  if1628_else5411:
    unless_null _lex_param_1, fallback5424
    nqp_get_sc_object $P5054, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5054
  fallback5424:
    set $P5053, _lex_param_1["nibbler"]
    unless_null $P5053, fallback5425
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5053, $P5055
  fallback5425:
    set $P5093, $P5053
    unless $P5053 goto if1629_end5423 
.annotate 'line', 3071
    set $S5003, $P101
    iseq $I5002, $S5003, "after"
    unless $I5002 goto if1630_else5426 
.annotate 'line', 3073
    set $P5056, $P102[0]
    unless_null $P5056, fallback5428
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5056, $P5057
  fallback5428:
    nqp_decontainerize $P5065, _lex_param_0
    unless_null _lex_param_1, fallback5430
    nqp_get_sc_object $P5068, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5068
  fallback5430:
    set $P5067, _lex_param_1["nibbler"]
    unless_null $P5067, fallback5431
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5067, $P5069
  fallback5431:
    set $P5066, $P5067[0]
    unless_null $P5066, fallback5432
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5066, $P5070
  fallback5432:
    $P5071 = $P5066."ast"()
    $P5072 = $P5065."flip_ast"($P5071)
    get_hll_global $P5063, "GLOBAL"
    nqp_get_package_through_who $P5062, $P5063, "QRegex"
    nqp_get_package_through_who $P5061, $P5062, "P6Regex"
    nqp_get_package_through_who $P5060, $P5061, "Actions"
    get_who $P5059, $P5060
    set $P5058, $P5059["qbuildsub"]
    unless_null $P5058, fallback5429
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5058, $P5064
  fallback5429:
    $P5073 = $P5058($P5072, 1 :named("anon"), 1 :named("addself"))
    $P5074 = $P5056."push"($P5073)
    set $P5092, $P5074
    goto if1630_end5427
  if1630_else5426:
.annotate 'line', 3074
    set $P5075, $P102[0]
    unless_null $P5075, fallback5433
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5075, $P5076
  fallback5433:
    unless_null _lex_param_1, fallback5435
    nqp_get_sc_object $P5086, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5086
  fallback5435:
    set $P5085, _lex_param_1["nibbler"]
    unless_null $P5085, fallback5436
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5085, $P5087
  fallback5436:
    set $P5084, $P5085[0]
    unless_null $P5084, fallback5437
    nqp_get_sc_object $P5088, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5084, $P5088
  fallback5437:
    $P5089 = $P5084."ast"()
    get_hll_global $P5082, "GLOBAL"
    nqp_get_package_through_who $P5081, $P5082, "QRegex"
    nqp_get_package_through_who $P5080, $P5081, "P6Regex"
    nqp_get_package_through_who $P5079, $P5080, "Actions"
    get_who $P5078, $P5079
    set $P5077, $P5078["qbuildsub"]
    unless_null $P5077, fallback5434
    nqp_get_sc_object $P5083, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5077, $P5083
  fallback5434:
    $P5090 = $P5077($P5089, 1 :named("anon"), 1 :named("addself"))
    $P5091 = $P5075."push"($P5090)
    set $P5092, $P5091
  if1630_end5427:
    set $P5093, $P5092
  if1629_end5423:
    set $P5094, $P5093
  if1628_end5412:
    set $P5095, $P5094
  if1623_end5391:
    set $P5096, $P5095
  if1622_end5384:
.annotate 'line', 3077
    $P5097 = _lex_param_1."!make"($P102)
    .return ($P5097) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_473_1347719921.536") :anon :lex :outer("cuid_365_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3056
    .lex "$loc", $P101 
    .lex "$rxname", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P102, $P5002
    find_dynamic_lex $P5004, "%*RX"
    unless_null $P5004, fallback5392
    get_hll_global $P5007, "GLOBAL"
    get_who $P5006, $P5007
    set $P5005, $P5006["%RX"]
    unless_null $P5005, fallback5393
    get_hll_global $P5009, "GLOBAL"
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%RX"], $P5010
    set $P5005, $P5010
  fallback5393:
    unless_null $P5005, vivi_16245394
    die "Contextual %*RX not found"
    box $P5011, "Contextual %*RX not found"
    set $P5005, $P5011
  vivi_16245394:
    set $P5004, $P5005
  fallback5392:
    set $P5003, $P5004["name"]
    unless_null $P5003, fallback5395
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5003, $P5012
  fallback5395:
    set $S5001, $P5003
    index $I5001, $S5001, ":sym<", 0
    box $P5013, $I5001
    set $P101, $P5013
    set $N5001, $P101
    set $N5002, 0
    islt $I5002, $N5001, $N5002
    box $P5026, $I5002
    set $P5025, $P5026
    unless $I5002 goto if1625_end5397 
    find_dynamic_lex $P5015, "%*RX"
    unless_null $P5015, fallback5398
    get_hll_global $P5018, "GLOBAL"
    get_who $P5017, $P5018
    set $P5016, $P5017["%RX"]
    unless_null $P5016, fallback5399
    get_hll_global $P5020, "GLOBAL"
    get_who $P5019, $P5020
    new $P5021, 'Hash'
    set $P5019["%RX"], $P5021
    set $P5016, $P5021
  fallback5399:
    unless_null $P5016, vivi_16265400
    die "Contextual %*RX not found"
    box $P5022, "Contextual %*RX not found"
    set $P5016, $P5022
  vivi_16265400:
    set $P5015, $P5016
  fallback5398:
    set $P5014, $P5015["name"]
    unless_null $P5014, fallback5401
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5014, $P5023
  fallback5401:
    set $S5002, $P5014
    index $I5003, $S5002, utf8:":sym\x{ab}", 0
    box $P5024, $I5003
    set $P101, $P5024
    set $P5025, $P101
  if1625_end5397:
    find_dynamic_lex $P5028, "%*RX"
    unless_null $P5028, fallback5402
    get_hll_global $P5031, "GLOBAL"
    get_who $P5030, $P5031
    set $P5029, $P5030["%RX"]
    unless_null $P5029, fallback5403
    get_hll_global $P5033, "GLOBAL"
    get_who $P5032, $P5033
    new $P5034, 'Hash'
    set $P5032["%RX"], $P5034
    set $P5029, $P5034
  fallback5403:
    unless_null $P5029, vivi_16275404
    die "Contextual %*RX not found"
    box $P5035, "Contextual %*RX not found"
    set $P5029, $P5035
  vivi_16275404:
    set $P5028, $P5029
  fallback5402:
    set $P5027, $P5028["name"]
    unless_null $P5027, fallback5405
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5027, $P5036
  fallback5405:
    set $S5005, $P5027
    set $N5004, $P101
    set $N5005, 5
    add $N5003, $N5004, $N5005
    set $I5004, $N5003
    substr $S5004, $S5005, $I5004
    chopn $S5003, $S5004, 1
    box $P5037, $S5003
    set $P102, $P5037
.annotate 'line', 3061
    get_hll_global $P5041, "GLOBAL"
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Regex"]
    unless_null $P5038, fallback5406
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5038, $P5042
  fallback5406:
    find_lex $P5043, "$/"
.annotate 'line', 3062
    get_hll_global $P5047, "GLOBAL"
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["Regex"]
    unless_null $P5044, fallback5407
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5044, $P5048
  fallback5407:
    find_lex $P5049, "$/"
    $P5050 = $P5044."new"($P102, "literal" :named("rxtype"), $P5049 :named("node"))
    $P5051 = $P5038."new"($P5050, "sym" :named("name"), "subcapture" :named("rxtype"), $P5043 :named("node"))
    store_lex "$qast", $P5051
    .return ($P5051) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_474_1347719921.536") :anon :lex :outer("cuid_365_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3069
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$qast"
    set $P5001, $P5002[0]
    unless_null $P5001, fallback5418
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback5418:
    $P5004 = $P5001."push"(_lex_param_0)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_366_1347719921.536") :anon :lex :outer("cuid_367_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3080
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3081
    unless_null _lex_param_1, fallback5438
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set _lex_param_1, $P5002
  fallback5438:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5439
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    set $P5001, $P5003
  fallback5439:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_368_1347719921.536") :anon :lex :outer("cuid_1_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3086
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687", 7
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_476_1347719921.536") :load :init
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = 'cuid_475_1347719921.536' 
    capture_lex $P5001 
    .local pmc cur_sc 
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P5001
    get_class $P5002, "LexPad"
    get_class $P5003, "NQPLexPad"
    $P5004 = $P5001."hll_map"($P5002, $P5003)
    load_bytecode "ModuleLoader.pbc"
    .const 'Sub' $P5001 = "cuid_1_1347719921.536" 
    get_hll_global $P5002, "ModuleLoader"
    $P5003 = $P5002."load_setting"("NQPCORE")
    $P5004 = $P5001."set_outer_ctx"($P5003)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5002 = $P5001."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5002 = $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5002 = $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5002 = $P5001."load_module"("QAST")
    nqp_create_sc $P5001, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552"
    set cur_sc, $P5001
    $P5002 = cur_sc."set_description"("src\\stage2\\gen\\NQP.pm")
    new $P5003, 'ResizableStringArray'
    null $S5001
    push $P5003, $S5001
    push $P5003, "P6opaque"
    push $P5003, "QAST"
    push $P5003, "QRegex"
    push $P5003, "NQPCursorRole"
    push $P5003, "31F30E2EA0A0CB6981914C497B2A3F2107959CE1-1347719899.209"
    push $P5003, "src\\stage2\\QRegex.nqp"
    push $P5003, "NQPMatch"
    push $P5003, "NQPCursor"
    push $P5003, "NQPRegexMethod"
    push $P5003, "NQPRegex"
    push $P5003, "HLL"
    push $P5003, "PIRT"
    push $P5003, "NQP"
    push $P5003, "CREATE"
    push $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347719896.687"
    push $P5003, "src\\stage2\\NQPCORE.setting"
    push $P5003, "bless"
    push $P5003, "BUILDALL"
    push $P5003, "new"
    push $P5003, "Str"
    push $P5003, "Numeric"
    push $P5003, "Int"
    push $P5003, "at_pos"
    push $P5003, "at_key"
    push $P5003, "defined"
    push $P5003, "ACCEPTS"
    push $P5003, "isa"
    push $P5003, "__dump"
    push $P5003, "BUILD"
    push $P5003, "slot_for_object"
    push $P5003, "B8D72C71D399671F1DD1EBA141A1669F23C2A2D0-1347719902.3"
    push $P5003, "src\\stage2\\gen\\NQPHLL.pm"
    push $P5003, "add_object"
    push $P5003, "add_root_code_ref"
    push $P5003, "update_root_code_ref"
    push $P5003, "is_precompilation_mode"
    push $P5003, "add_load_dependency_task"
    push $P5003, "add_fixup_task"
    push $P5003, "sc"
    push $P5003, "handle"
    push $P5003, "code_ref_blocks"
    push $P5003, "load_dependency_tasks"
    push $P5003, "fixup_tasks"
    push $P5003, "push_lexpad"
    push $P5003, "pop_lexpad"
    push $P5003, "cur_lexpad"
    push $P5003, "get_legacy_block_list"
    push $P5003, "load_setting"
    push $P5003, "load_module"
    push $P5003, "install_package_symbol"
    push $P5003, "install_lexical_symbol"
    push $P5003, "install_package_routine"
    push $P5003, "create_code"
    push $P5003, "pkg_create_mo"
    push $P5003, "pkg_add_attribute"
    push $P5003, "pkg_add_method"
    push $P5003, "set_routine_signature"
    push $P5003, "pkg_set_body_block"
    push $P5003, "pkg_add_parent_or_role"
    push $P5003, "pkg_add_parrot_vtable_handler_mapping"
    push $P5003, "pkg_compose"
    push $P5003, "run_begin_block"
    push $P5003, "libs"
    push $P5003, "add_initializations"
    push $P5003, "is_lexical"
    push $P5003, "is_package"
    push $P5003, "is_scope"
    push $P5003, "known_sym"
    push $P5003, "find_sym"
    push $P5003, "$!sc"
    push $P5003, "$!handle"
    push $P5003, "$!precomp_mode"
    push $P5003, "$!num_code_refs"
    push $P5003, "$!code_ref_blocks"
    push $P5003, "@!load_dependency_tasks"
    push $P5003, "@!fixup_tasks"
    push $P5003, "%!addr_to_slot"
    push $P5003, "@!BLOCKS"
    push $P5003, "%!code_objects_to_fix_up"
    push $P5003, "%!code_object_fixup_list"
    push $P5003, "%!code_stub_sc_idx"
    push $P5003, "MATCH"
    push $P5003, "Bool"
    push $P5003, "parse"
    push $P5003, "!INTERPOLATE"
    push $P5003, "!INTERPOLATE_REGEX"
    push $P5003, "target"
    push $P5003, "from"
    push $P5003, "pos"
    push $P5003, "CAPHASH"
    push $P5003, "!cursor_init"
    push $P5003, "!cursor_start"
    push $P5003, "!cursor_start_subcapture"
    push $P5003, "!cursor_capture"
    push $P5003, "!cursor_push_cstack"
    push $P5003, "!cursor_pass"
    push $P5003, "!cursor_fail"
    push $P5003, "!cursor_next"
    push $P5003, "!cursor_more"
    push $P5003, "!reduce"
    push $P5003, "!reduce_with_match"
    push $P5003, "!protoregex"
    push $P5003, "!protoregex_nfa"
    push $P5003, "!protoregex_table"
    push $P5003, "!alt"
    push $P5003, "!alt_nfa"
    push $P5003, "!BACKREF"
    push $P5003, "!LITERAL"
    push $P5003, "at"
    push $P5003, "before"
    push $P5003, "after"
    push $P5003, "ws"
    push $P5003, "ww"
    push $P5003, "wb"
    push $P5003, "ident"
    push $P5003, "alpha"
    push $P5003, "alnum"
    push $P5003, "upper"
    push $P5003, "lower"
    push $P5003, "digit"
    push $P5003, "xdigit"
    push $P5003, "space"
    push $P5003, "blank"
    push $P5003, "cntrl"
    push $P5003, "punct"
    push $P5003, "FAILGOAL"
    push $P5003, "termish"
    push $P5003, "term"
    push $P5003, "infix"
    push $P5003, "prefix"
    push $P5003, "postfix"
    push $P5003, "circumfix"
    push $P5003, "postcircumfix"
    push $P5003, "term:sym<circumfix>"
    push $P5003, "infixish"
    push $P5003, "prefixish"
    push $P5003, "postfixish"
    push $P5003, "nullterm"
    push $P5003, "nullterm_alt"
    push $P5003, "nulltermish"
    push $P5003, "quote_delimited"
    push $P5003, "quote_atom"
    push $P5003, "decint"
    push $P5003, "decints"
    push $P5003, "hexint"
    push $P5003, "hexints"
    push $P5003, "octint"
    push $P5003, "octints"
    push $P5003, "binint"
    push $P5003, "binints"
    push $P5003, "integer"
    push $P5003, "dec_number"
    push $P5003, "escale"
    push $P5003, "quote_escape"
    push $P5003, "quote_escape:sym<backslash>"
    push $P5003, "quote_escape:sym<stopper>"
    push $P5003, "quote_escape:sym<bs>"
    push $P5003, "quote_escape:sym<nl>"
    push $P5003, "quote_escape:sym<cr>"
    push $P5003, "quote_escape:sym<tab>"
    push $P5003, "quote_escape:sym<ff>"
    push $P5003, "quote_escape:sym<esc>"
    push $P5003, "quote_escape:sym<hex>"
    push $P5003, "quote_escape:sym<oct>"
    push $P5003, "quote_escape:sym<chr>"
    push $P5003, "quote_escape:sym<0>"
    push $P5003, "quote_escape:sym<misc>"
    push $P5003, "charname"
    push $P5003, "charnames"
    push $P5003, "charspec"
    push $P5003, "O"
    push $P5003, "panic"
    push $P5003, "peek_delimiters"
    push $P5003, "quote_EXPR"
    push $P5003, "quotemod_check"
    push $P5003, "starter"
    push $P5003, "stopper"
    push $P5003, "split_words"
    push $P5003, "EXPR"
    push $P5003, "EXPR_reduce"
    push $P5003, "ternary"
    push $P5003, "MARKER"
    push $P5003, "MARKED"
    push $P5003, "LANG"
    push $P5003, "TOP"
    push $P5003, "identifier"
    push $P5003, "name"
    push $P5003, "deflongname"
    push $P5003, "ENDSTMT"
    push $P5003, "unv"
    push $P5003, "pod_comment"
    push $P5003, "comp_unit"
    push $P5003, "statementlist"
    push $P5003, "statement"
    push $P5003, "eat_terminator"
    push $P5003, "xblock"
    push $P5003, "pblock"
    push $P5003, "lambda"
    push $P5003, "block"
    push $P5003, "blockoid"
    push $P5003, "newpad"
    push $P5003, "outerctx"
    push $P5003, "GLOBALish"
    push $P5003, "finishpad"
    push $P5003, "you_are_here"
    push $P5003, "terminator"
    push $P5003, "terminator:sym<;>"
    push $P5003, "terminator:sym<}>"
    push $P5003, "statement_control"
    push $P5003, "statement_control:sym<use>"
    push $P5003, "statement_control:sym<if>"
    push $P5003, "statement_control:sym<unless>"
    push $P5003, "statement_control:sym<while>"
    push $P5003, "statement_control:sym<repeat>"
    push $P5003, "statement_control:sym<for>"
    push $P5003, "statement_control:sym<CATCH>"
    push $P5003, "statement_control:sym<CONTROL>"
    push $P5003, "statement_prefix"
    push $P5003, "statement_prefix:sym<BEGIN>"
    push $P5003, "statement_prefix:sym<INIT>"
    push $P5003, "statement_prefix:sym<try>"
    push $P5003, "blorst"
    push $P5003, "statement_mod_cond"
    push $P5003, "statement_mod_cond:sym<if>"
    push $P5003, "statement_mod_cond:sym<unless>"
    push $P5003, "statement_mod_loop"
    push $P5003, "statement_mod_loop:sym<while>"
    push $P5003, "statement_mod_loop:sym<until>"
    push $P5003, "statement_mod_loop:sym<for>"
    push $P5003, "term:sym<fatarrow>"
    push $P5003, "term:sym<colonpair>"
    push $P5003, "term:sym<variable>"
    push $P5003, "term:sym<package_declarator>"
    push $P5003, "term:sym<scope_declarator>"
    push $P5003, "term:sym<routine_declarator>"
    push $P5003, "term:sym<multi_declarator>"
    push $P5003, "term:sym<regex_declarator>"
    push $P5003, "term:sym<statement_prefix>"
    push $P5003, "term:sym<lambda>"
    push $P5003, "fatarrow"
    push $P5003, "colonpair"
    push $P5003, "variable"
    push $P5003, "sigil"
    push $P5003, "twigil"
    push $P5003, "package_declarator"
    push $P5003, "package_declarator:sym<module>"
    push $P5003, "package_declarator:sym<knowhow>"
    push $P5003, "package_declarator:sym<class>"
    push $P5003, "package_declarator:sym<grammar>"
    push $P5003, "package_declarator:sym<role>"
    push $P5003, "package_declarator:sym<native>"
    push $P5003, "package_declarator:sym<stub>"
    push $P5003, "package_def"
    push $P5003, "scope_declarator"
    push $P5003, "scope_declarator:sym<my>"
    push $P5003, "scope_declarator:sym<our>"
    push $P5003, "scope_declarator:sym<has>"
    push $P5003, "scoped"
    push $P5003, "typename"
    push $P5003, "declarator"
    push $P5003, "variable_declarator"
    push $P5003, "routine_declarator"
    push $P5003, "routine_declarator:sym<sub>"
    push $P5003, "routine_declarator:sym<method>"
    push $P5003, "routine_def"
    push $P5003, "method_def"
    push $P5003, "onlystar"
    push $P5003, "multi_declarator"
    push $P5003, "multi_declarator:sym<multi>"
    push $P5003, "multi_declarator:sym<proto>"
    push $P5003, "multi_declarator:sym<null>"
    push $P5003, "signature"
    push $P5003, "parameter"
    push $P5003, "param_var"
    push $P5003, "named_param"
    push $P5003, "default_value"
    push $P5003, "trait"
    push $P5003, "trait_mod"
    push $P5003, "trait_mod:sym<is>"
    push $P5003, "regex_declarator"
    push $P5003, "dotty"
    push $P5003, "term:sym<self>"
    push $P5003, "term:sym<identifier>"
    push $P5003, "term:sym<name>"
    push $P5003, "term:sym<pir::op>"
    push $P5003, "term:sym<pir::const>"
    push $P5003, "term:sym<nqp::op>"
    push $P5003, "term:sym<onlystar>"
    push $P5003, "args"
    push $P5003, "arglist"
    push $P5003, "term:sym<value>"
    push $P5003, "value"
    push $P5003, "number"
    push $P5003, "quote"
    push $P5003, "quote:sym<apos>"
    push $P5003, "quote:sym<dblq>"
    push $P5003, "quote:sym<q>"
    push $P5003, "quote:sym<qq>"
    push $P5003, "quote:sym<Q>"
    push $P5003, "quote:sym<Q:PIR>"
    push $P5003, "quote:sym</ />"
    push $P5003, "quote_escape:sym<$>"
    push $P5003, "quote_escape:sym<{ }>"
    push $P5003, "circumfix:sym<( )>"
    push $P5003, "circumfix:sym<[ ]>"
    push $P5003, "circumfix:sym<ang>"
    push $P5003, utf8:"circumfix:sym<\x{ab} \x{bb}>"
    push $P5003, "circumfix:sym<{ }>"
    push $P5003, "circumfix:sym<sigil>"
    push $P5003, "semilist"
    push $P5003, "infixstopper"
    push $P5003, "postcircumfix:sym<[ ]>"
    push $P5003, "postcircumfix:sym<{ }>"
    push $P5003, "postcircumfix:sym<ang>"
    push $P5003, "postcircumfix:sym<( )>"
    push $P5003, "postfix:sym<.>"
    push $P5003, "prefix:sym<++>"
    push $P5003, "prefix:sym<-->"
    push $P5003, "postfix:sym<++>"
    push $P5003, "postfix:sym<-->"
    push $P5003, "infix:sym<**>"
    push $P5003, "prefix:sym<+>"
    push $P5003, "prefix:sym<~>"
    push $P5003, "prefix:sym<->"
    push $P5003, "prefix:sym<?>"
    push $P5003, "prefix:sym<!>"
    push $P5003, "prefix:sym<|>"
    push $P5003, "infix:sym<*>"
    push $P5003, "infix:sym</>"
    push $P5003, "infix:sym<%>"
    push $P5003, "infix:sym<+&>"
    push $P5003, "infix:sym<+>"
    push $P5003, "infix:sym<->"
    push $P5003, "infix:sym<+|>"
    push $P5003, "infix:sym<+^>"
    push $P5003, "infix:sym<~>"
    push $P5003, "infix:sym<==>"
    push $P5003, "infix:sym<!=>"
    push $P5003, "infix:sym<<=>"
    push $P5003, "infix:sym<>=>"
    push $P5003, "infix:sym<<>"
    push $P5003, "infix:sym<>>"
    push $P5003, "infix:sym<eq>"
    push $P5003, "infix:sym<ne>"
    push $P5003, "infix:sym<le>"
    push $P5003, "infix:sym<ge>"
    push $P5003, "infix:sym<lt>"
    push $P5003, "infix:sym<gt>"
    push $P5003, "infix:sym<=:=>"
    push $P5003, "infix:sym<~~>"
    push $P5003, "infix:sym<&&>"
    push $P5003, "infix:sym<||>"
    push $P5003, "infix:sym<//>"
    push $P5003, "infix:sym<?? !!>"
    push $P5003, "infix:sym<=>"
    push $P5003, "infix:sym<:=>"
    push $P5003, "infix:sym<::=>"
    push $P5003, "infix:sym<,>"
    push $P5003, "prefix:sym<return>"
    push $P5003, "prefix:sym<make>"
    push $P5003, "term:sym<last>"
    push $P5003, "term:sym<next>"
    push $P5003, "term:sym<redo>"
    push $P5003, "smartmatch"
    push $P5003, "$!orig"
    push $P5003, "$!target"
    push $P5003, "$!from"
    push $P5003, "$!pos"
    push $P5003, "$!match"
    push $P5003, "$!name"
    push $P5003, "$!bstack"
    push $P5003, "$!cstack"
    push $P5003, "$!regexsub"
    push $P5003, "$!restart"
    push $P5003, "59F7465B80A147A3928525E3AD2A07D9205C57E4-1347719917.814"
    push $P5003, "src\\stage2\\gen\\NQPP6QRegex.pm"
    push $P5003, "obs"
    push $P5003, "normspace"
    push $P5003, "arg"
    push $P5003, "nibbler"
    push $P5003, "termaltseq"
    push $P5003, "termconjseq"
    push $P5003, "termalt"
    push $P5003, "termconj"
    push $P5003, "quantified_atom"
    push $P5003, "separator"
    push $P5003, "atom"
    push $P5003, "quantifier"
    push $P5003, "quantifier:sym<*>"
    push $P5003, "quantifier:sym<+>"
    push $P5003, "quantifier:sym<?>"
    push $P5003, "quantifier:sym<{N,M}>"
    push $P5003, "quantifier:sym<**>"
    push $P5003, "backmod"
    push $P5003, "metachar"
    push $P5003, "metachar:sym<ws>"
    push $P5003, "metachar:sym<[ ]>"
    push $P5003, "metachar:sym<( )>"
    push $P5003, "metachar:sym<'>"
    push $P5003, "metachar:sym<\">"
    push $P5003, "metachar:sym<.>"
    push $P5003, "metachar:sym<^>"
    push $P5003, "metachar:sym<^^>"
    push $P5003, "metachar:sym<$>"
    push $P5003, "metachar:sym<$$>"
    push $P5003, "metachar:sym<:::>"
    push $P5003, "metachar:sym<::>"
    push $P5003, "metachar:sym<lwb>"
    push $P5003, "metachar:sym<rwb>"
    push $P5003, "metachar:sym<from>"
    push $P5003, "metachar:sym<to>"
    push $P5003, "metachar:sym<bs>"
    push $P5003, "metachar:sym<mod>"
    push $P5003, "metachar:sym<quantifier>"
    push $P5003, "metachar:sym<~>"
    push $P5003, "metachar:sym<{*}>"
    push $P5003, "metachar:sym<assert>"
    push $P5003, "metachar:sym<var>"
    push $P5003, "metachar:sym<PIR>"
    push $P5003, "backslash"
    push $P5003, "backslash:sym<s>"
    push $P5003, "backslash:sym<b>"
    push $P5003, "backslash:sym<e>"
    push $P5003, "backslash:sym<f>"
    push $P5003, "backslash:sym<h>"
    push $P5003, "backslash:sym<r>"
    push $P5003, "backslash:sym<t>"
    push $P5003, "backslash:sym<v>"
    push $P5003, "backslash:sym<o>"
    push $P5003, "backslash:sym<x>"
    push $P5003, "backslash:sym<c>"
    push $P5003, "backslash:sym<A>"
    push $P5003, "backslash:sym<z>"
    push $P5003, "backslash:sym<Z>"
    push $P5003, "backslash:sym<Q>"
    push $P5003, "backslash:sym<unrec>"
    push $P5003, "backslash:sym<misc>"
    push $P5003, "assertion"
    push $P5003, "assertion:sym<?>"
    push $P5003, "assertion:sym<!>"
    push $P5003, "assertion:sym<|>"
    push $P5003, "assertion:sym<method>"
    push $P5003, "assertion:sym<name>"
    push $P5003, "assertion:sym<[>"
    push $P5003, "cclass_elem"
    push $P5003, "mod_internal"
    push $P5003, "mod_ident"
    push $P5003, "mod_ident:sym<ignorecase>"
    push $P5003, "mod_ident:sym<ratchet>"
    push $P5003, "mod_ident:sym<sigspace>"
    push $P5003, "metachar:sym<:my>"
    push $P5003, "metachar:sym<{ }>"
    push $P5003, "metachar:sym<nqpvar>"
    push $P5003, "assertion:sym<{ }>"
    push $P5003, "assertion:sym<?{ }>"
    push $P5003, "assertion:sym<var>"
    push $P5003, "codeblock"
    push $P5003, "ints_to_string"
    push $P5003, "CTXSAVE"
    push $P5003, "SET_BLOCK_OUTER_CTX"
    push $P5003, "subrule_alias"
    push $P5003, "flip_ast"
    push $P5003, "language"
    push $P5003, "compiler"
    push $P5003, "config"
    push $P5003, "autoprint"
    push $P5003, "interactive"
    push $P5003, "eval"
    push $P5003, "ctxsave"
    push $P5003, "stages"
    push $P5003, "parsegrammar"
    push $P5003, "parseactions"
    push $P5003, "interactive_banner"
    push $P5003, "interactive_prompt"
    push $P5003, "compiler_progname"
    push $P5003, "commandline_options"
    push $P5003, "command_line"
    push $P5003, "command_eval"
    push $P5003, "process_args"
    push $P5003, "evalfiles"
    push $P5003, "compile"
    push $P5003, "start"
    push $P5003, "past"
    push $P5003, "post"
    push $P5003, "pirbegin"
    push $P5003, "pir"
    push $P5003, "evalpmc"
    push $P5003, "dumper"
    push $P5003, "usage"
    push $P5003, "version"
    push $P5003, "show-config"
    push $P5003, "verbose-config"
    push $P5003, "vmstat"
    push $P5003, "nqpevent"
    push $P5003, "removestage"
    push $P5003, "addstage"
    push $P5003, "parse_name"
    push $P5003, "lineof"
    push $P5003, "user-progname"
    push $P5003, "cli-options"
    push $P5003, "cli-arguments"
    push $P5003, "@!stages"
    push $P5003, "$!parsegrammar"
    push $P5003, "$!parseactions"
    push $P5003, "@!cmdoptions"
    push $P5003, "$!usage"
    push $P5003, "$!compiler_progname"
    push $P5003, "$!language"
    push $P5003, "%!config"
    push $P5003, "$!user_progname"
    push $P5003, "@!cli-arguments"
    push $P5003, "%!cli-options"
    push $P5003, "__6MODEL_CORE__"
    push $P5003, "569A1B419F724EEF275BC7729D702142D988A435-1347719893.539"
    push $P5003, "src\\stage2\\gen\\nqp-mo.pm"
    push $P5003, "NQP::World"
    push $P5003, "NQP::Grammar"
    push $P5003, "orig"
    push $P5003, "match"
    push $P5003, "bstack"
    push $P5003, "cstack"
    push $P5003, "regexsub"
    push $P5003, "restart"
    push $P5003, "NQP::Regex"
    push $P5003, "NQP::Actions"
    push $P5003, "NQP::RegexActions"
    push $P5003, "NQP::Compiler"
    push $P5003, "CompileTimeValue"
    push $P5003, "5999FA70DED24A5080F4680C3CF5A9B13CAD7450-1347719897.665"
    push $P5003, "src\\stage2\\QASTNode.nqp"
    push $P5003, "SpecialArg"
    push $P5003, "Node"
    push $P5003, "Regex"
    push $P5003, "IVal"
    push $P5003, "NVal"
    push $P5003, "SVal"
    push $P5003, "BVal"
    push $P5003, "WVal"
    push $P5003, "Want"
    push $P5003, "Var"
    push $P5003, "VarWithFallback"
    push $P5003, "Op"
    push $P5003, "VM"
    push $P5003, "Stmts"
    push $P5003, "Stmt"
    push $P5003, "Block"
    push $P5003, "BlockMemo"
    push $P5003, "Unquote"
    push $P5003, "CompUnit"
    push $P5003, "InlinePlaceholder"
    push $P5003, "Operations"
    push $P5003, "4454B4C8CDB4DF59AECFB0356C4D8728B53E4241-1347719906.831"
    push $P5003, "src\\stage2\\QAST.nqp"
    push $P5003, "Compiler"
    push $P5003, "NFA"
    push $P5003, "P6Regex"
    push $P5003, "Grammar"
    push $P5003, "Actions"
    push $P5003, "CommandLine"
    push $P5003, "World"
    push $P5003, "CallResult"
    push $P5003, "Sub"
    push $P5003, "Ops"
    push $P5003, "Label"
    push $P5003, "RegexActions"
    .const 'Sub' $P5004 = 'cuid_475_1347719921.536' 
    capture_lex $P5004
    $P5005 = $P5004()
    nqp_deserialize_sc "", cur_sc, $P5003, $P5005
    .const "LexInfo" $P5001 = "cuid_1_1347719921.536"
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 0
    $P5003 = $P5001."set_static_lexpad_value"("GLOBALish", $P5002)
    .const "LexInfo" $P5004 = "cuid_1_1347719921.536"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_1_1347719921.536"
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 0
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_1_1347719921.536"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_2_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 2
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_3_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 3
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_4_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 4
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_5_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 5
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_6_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 6
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_7_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 7
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_8_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 8
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_9_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 9
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_10_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 10
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_11_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 11
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_12_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 12
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_13_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 13
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_14_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 14
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_15_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 15
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_16_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 16
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_17_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 17
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_18_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 18
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_19_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 19
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_20_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 20
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_21_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 21
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_22_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 22
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_23_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 23
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_24_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 24
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_25_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 25
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_26_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 26
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_27_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 27
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_28_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 28
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_29_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 29
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_30_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 30
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_31_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 31
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_32_1347719921.536"
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_32_1347719921.536"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_32_1347719921.536"
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 1
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_32_1347719921.536"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_33_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 33
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_34_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 34
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_35_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 35
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_36_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 36
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_37_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 37
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_38_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 38
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_40_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 39
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_42_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 40
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_43_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 41
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_44_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 42
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_46_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 43
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_47_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 44
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_48_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 45
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_49_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 46
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_50_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 47
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_51_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 48
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_52_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 49
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_53_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 50
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_54_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 51
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_55_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 52
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_56_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 53
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_57_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 54
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_58_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 55
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_59_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 56
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_60_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 57
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_61_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 58
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_62_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 59
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_63_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 60
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_65_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 61
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_66_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 62
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_67_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 63
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_68_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 64
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_69_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 65
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_70_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 66
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_71_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 67
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_72_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 68
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_73_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 69
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_74_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 70
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_75_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 71
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_76_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 72
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_77_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 73
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_78_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 74
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_79_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 75
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_80_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 76
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_81_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 77
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_82_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 78
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_83_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 79
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_84_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 80
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_85_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 81
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_86_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 82
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_87_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 83
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_88_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 84
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_91_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 85
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_92_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 86
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_93_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 87
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_94_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 88
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_95_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 89
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_96_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 90
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_97_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 91
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_98_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 92
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_99_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 93
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_100_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 94
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_101_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 95
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_102_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 96
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_103_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 97
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_104_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 98
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_105_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 99
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_106_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 100
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_107_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 101
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_108_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 102
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_109_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 103
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_110_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 104
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_111_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 105
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_112_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 106
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_113_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 107
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_114_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 108
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_115_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 109
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_116_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 110
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_117_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 111
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_118_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 112
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_119_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 113
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_120_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 114
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_121_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 115
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_122_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 116
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_123_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 117
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_124_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 118
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_125_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 119
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_126_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 120
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_128_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 121
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_129_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 122
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_130_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 123
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_131_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 124
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_132_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 125
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_133_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 126
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_134_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 127
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_135_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 128
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_136_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 129
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_137_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 130
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_138_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 131
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_139_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 132
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_140_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 133
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_141_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 134
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_142_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 135
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_143_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 136
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_144_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 137
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_145_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 138
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_146_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 139
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_147_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 140
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_148_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 141
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_149_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 142
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_150_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 143
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_151_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 144
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_152_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 145
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_153_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 146
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_154_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 147
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_155_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 148
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_156_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 149
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_157_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 150
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_158_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 151
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_159_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 152
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_160_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 153
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_161_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 154
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_162_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 155
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_163_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 156
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_164_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 157
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_165_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 158
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_166_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 159
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_167_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 160
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_168_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 161
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_169_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 162
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_170_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 163
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_171_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 164
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_172_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 165
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_173_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 166
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_174_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 167
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_175_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 168
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_176_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 169
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_177_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 170
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_178_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 171
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_179_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 172
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_180_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 173
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_181_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 174
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_182_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 175
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_183_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 176
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_184_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 177
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_185_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 178
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_186_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 179
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_187_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 180
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_188_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 181
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_189_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 182
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_190_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 183
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_191_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 184
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_192_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 185
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_193_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 186
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_194_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 187
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_195_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 188
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_196_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 189
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_197_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 190
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_198_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 191
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_199_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 192
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_200_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 193
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_201_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 194
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_202_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 195
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_203_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 196
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_204_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 197
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_205_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 198
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_206_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 199
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_207_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 200
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_208_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 201
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_209_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 202
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_210_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 203
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_211_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 204
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_212_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 205
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_213_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 206
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_214_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 207
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_215_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 208
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_216_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 209
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_217_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 210
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_218_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 211
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_219_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 212
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_220_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 213
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_221_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 214
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_222_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 215
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_223_1347719921.536"
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 32
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_223_1347719921.536"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_223_1347719921.536"
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 32
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_223_1347719921.536"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_225_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 217
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_226_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 218
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_228_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 219
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_229_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 220
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_232_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 221
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_235_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 222
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_237_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 223
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_239_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 224
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_240_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 225
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_241_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 226
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_242_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 227
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_243_1347719921.536"
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 216
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_243_1347719921.536"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_243_1347719921.536"
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 216
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_243_1347719921.536"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_244_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 229
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_245_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 230
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_246_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 231
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_247_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 232
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_248_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 233
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_249_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 234
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_250_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 235
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_251_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 236
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_252_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 237
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_253_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 238
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_254_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 239
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_255_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 240
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_256_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 241
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_257_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 242
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_258_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 243
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_259_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 244
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_260_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 245
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_261_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 246
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_262_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 247
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_263_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 248
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_264_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 249
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_265_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 250
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_266_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 251
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_267_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 252
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_268_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 253
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_269_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 254
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_270_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 255
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_271_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 256
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_272_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 257
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_273_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 258
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_274_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 259
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_275_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 260
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_276_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 261
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_277_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 262
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_278_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 263
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_279_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 264
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_280_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 265
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_281_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 266
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_282_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 267
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_283_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 268
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_284_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 269
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_285_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 270
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_286_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 271
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_287_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 272
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_288_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 273
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_289_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 274
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_290_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 275
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_291_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 276
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_292_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 277
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_293_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 278
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_294_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 279
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_295_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 280
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_296_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 281
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_297_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 282
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_298_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 283
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_299_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 284
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_300_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 285
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_301_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 286
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_302_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 287
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_303_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 288
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_304_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 289
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_305_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 290
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_306_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 291
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_307_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 292
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_308_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 293
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_309_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 294
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_310_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 295
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_311_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 296
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_312_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 297
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_313_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 298
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_314_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 299
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_315_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 300
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_316_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 301
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_317_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 302
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_318_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 303
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_319_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 304
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_320_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 305
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_321_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 306
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_322_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 307
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_323_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 308
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_324_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 309
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_325_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 310
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_326_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 311
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_327_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 312
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_328_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 313
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_329_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 314
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_330_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 315
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_331_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 316
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_332_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 317
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_333_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 318
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_334_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 319
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_335_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 320
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_336_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 321
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_337_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 322
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_338_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 323
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_339_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 324
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_340_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 325
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_341_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 326
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_342_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 327
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_343_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 328
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_344_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 329
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_345_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 330
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_346_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 331
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_347_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 332
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_348_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 333
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_349_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 334
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_350_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 335
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_351_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 336
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_352_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 337
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_353_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 338
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_354_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 339
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_355_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 340
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_356_1347719921.536"
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 228
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_356_1347719921.536"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_356_1347719921.536"
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 228
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_356_1347719921.536"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_357_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 342
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_358_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 343
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_359_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 344
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_360_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 345
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_361_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 346
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_362_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 347
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_363_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 348
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_364_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 349
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_365_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 350
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_366_1347719921.536" 
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 351
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_367_1347719921.536"
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 341
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_367_1347719921.536"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_367_1347719921.536"
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 341
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_367_1347719921.536"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_368_1347719921.536"
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 352
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_368_1347719921.536"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_368_1347719921.536"
    nqp_get_sc_object $P5002, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 352
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_368_1347719921.536"
    $P5005 = $P5004."finish_static_lexpad"()
    nqp_get_sc_object $P5001, "73232CEE31C2CCF32DFA1AE4C6837FC7EA9ED5EC-1347719921.552", 0
    set_hll_global "GLOBAL", $P5001
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_475_1347719921.536") :anon :lex :outer("cuid_476_1347719921.536")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    .const 'Sub' $P5002 = "cuid_2_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_3_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_4_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_5_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_6_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_7_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_8_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_9_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_10_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_11_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_12_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_13_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_14_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_15_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_16_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_17_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_18_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_19_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_20_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_21_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_22_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_23_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_24_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_25_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_26_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_27_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_28_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_29_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_30_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_31_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_33_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_34_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_35_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_36_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_37_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_38_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_40_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_42_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_43_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_44_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_46_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_47_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_48_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_49_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_50_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_51_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_52_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_53_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_54_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_55_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_56_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_57_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_58_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_59_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_60_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_61_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_62_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_63_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_65_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_66_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_67_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_68_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_69_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_70_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_71_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_72_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_73_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_74_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_75_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_76_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_77_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_78_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_79_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_80_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_81_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_82_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_83_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_84_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_85_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_86_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_87_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_88_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_91_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_92_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_93_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_94_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_95_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_96_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_97_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_98_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_99_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_100_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_101_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_102_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_103_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_104_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_105_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_106_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_107_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_108_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_109_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_110_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_111_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_112_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_113_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_114_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_115_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_116_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_117_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_118_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_119_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_120_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_121_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_122_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_123_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_124_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_125_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_126_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_128_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_129_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_130_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_131_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_132_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_133_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_134_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_135_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_136_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_137_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_138_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_139_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_140_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_141_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_142_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_143_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_144_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_145_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_146_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_147_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_148_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_149_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_150_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_151_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_152_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_153_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_154_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_155_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_156_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_157_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_158_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_159_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_160_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_161_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_162_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_163_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_164_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_165_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_166_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_167_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_168_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_169_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_170_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_171_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_172_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_173_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_174_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_175_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_176_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_177_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_178_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_179_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_180_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_181_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_182_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_183_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_184_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_185_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_186_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_187_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_188_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_189_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_190_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_191_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_192_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_193_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_194_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_195_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_196_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_197_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_198_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_199_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_200_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_201_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_202_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_203_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_204_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_205_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_206_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_207_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_208_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_209_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_210_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_211_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_212_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_213_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_214_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_215_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_216_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_217_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_218_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_219_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_220_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_221_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_222_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_225_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_226_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_228_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_229_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_232_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_235_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_237_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_239_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_240_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_241_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_242_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_244_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_245_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_246_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_247_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_248_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_249_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_250_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_251_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_252_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_253_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_254_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_255_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_256_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_257_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_258_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_259_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_260_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_261_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_262_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_263_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_264_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_265_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_266_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_267_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_268_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_269_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_270_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_271_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_272_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_273_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_274_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_275_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_276_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_277_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_278_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_279_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_280_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_281_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_282_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_283_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_284_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_285_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_286_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_287_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_288_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_289_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_290_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_291_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_292_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_293_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_294_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_295_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_296_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_297_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_298_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_299_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_300_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_301_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_302_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_303_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_304_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_305_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_306_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_307_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_308_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_309_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_310_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_311_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_312_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_313_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_314_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_315_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_316_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_317_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_318_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_319_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_320_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_321_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_322_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_323_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_324_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_325_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_326_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_327_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_328_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_329_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_330_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_331_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_332_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_333_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_334_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_335_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_336_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_337_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_338_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_339_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_340_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_341_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_342_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_343_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_344_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_345_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_346_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_347_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_348_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_349_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_350_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_351_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_352_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_353_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_354_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_355_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_357_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_358_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_359_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_360_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_361_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_362_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_363_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_364_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_365_1347719921.536" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_366_1347719921.536" 
    push $P5001, $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_477_1347719921.536") :load
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = "cuid_1_1347719921.536" 
    $P5002 = $P5001()
    .return ($P5002) 
.end