.include 'cclass.pasm'
.include 'except_severity.pasm'
.include 'except_types.pasm'
.include 'iglobals.pasm'
.include 'interpinfo.pasm'
.include 'iterator.pasm'
.include 'sysinfo.pasm'
.include 'stat.pasm'
.include 'datatypes.pasm'
.loadlib "nqp_group"
.loadlib "nqp_ops"
.loadlib "nqp_bigint_ops"
.loadlib "trans_ops"
.loadlib "io_ops"
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_1_1347804164.33") :anon :lex
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc _lex_param_0 :slurpy 
    .const 'Sub' $P5057 = 'cuid_367_1347804164.33' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_368_1347804164.33' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_32_1347804164.33' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_222_1347804164.33' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_242_1347804164.33' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_401_1347804164.33' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_402_1347804164.33' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_403_1347804164.33' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_404_1347804164.33' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_405_1347804164.33' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_406_1347804164.33' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_407_1347804164.33' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_354_1347804164.33' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_365_1347804164.33' 
    capture_lex $P5057 
    .const 'Sub' $P5057 = 'cuid_366_1347804164.33' 
    capture_lex $P5057 
    .lex "GLOBALish", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "EXPORT", $P103 
    .lex "$ops", $P104 
    .lex "&MAIN", $P105 
    .lex "&hll-config", $P106 
    .lex "@ARGS", _lex_param_0 
    .local pmc ctxsave 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P104, $P5001
    .const 'Sub' $P5002 = 'cuid_367_1347804164.33' 
    capture_lex $P5002
    set $P105, $P5002
    .const 'Sub' $P5003 = 'cuid_368_1347804164.33' 
    capture_lex $P5003
    set $P106, $P5003
    find_dynamic_lex $P5004, "$*CTXSAVE"
    set ctxsave, $P5004
    isnull $I5001, ctxsave
    box $P5009, $I5001
    set $P5008, $P5009
    if $I5001 goto unless10_end14 
    can $I5002, ctxsave, "ctxsave"
    box $P5007, $I5002
    set $P5006, $P5007
    unless $I5002 goto if11_end16 
    $P5005 = ctxsave."ctxsave"()
    set $P5006, $P5005
  if11_end16:
    set $P5008, $P5006
  unless10_end14:
.annotate 'line', 1
    .const 'Sub' $P5010 = 'cuid_32_1347804164.33' 
    capture_lex $P5010
    $P5011 = $P5010()
    .const 'Sub' $P5012 = 'cuid_222_1347804164.33' 
    capture_lex $P5012
    $P5013 = $P5012()
    .const 'Sub' $P5014 = 'cuid_242_1347804164.33' 
    capture_lex $P5014
    $P5015 = $P5014()
.annotate 'line', 1403
    nqp_get_sc_object $P5019, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Compiler"]
    unless_null $P5016, fallback3627
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5016, $P5020
  fallback3627:
    $P5021 = $P5016."operations"()
    set $P104, $P5021
.annotate 'line', 1405
    $P5022 = $P104."add_hll_pirop_mapping"("nqp", "nqpmultidispatch", "multi_dispatch_over_lexical_candidates", "P")
.annotate 'line', 1407
    .const 'Sub' $P5024 = 'cuid_401_1347804164.33' 
    capture_lex $P5024
    newclosure $P5023, $P5024
    $P5025 = $P104."add_hll_op"("nqp", "preinc", $P5023)
.annotate 'line', 1422
    .const 'Sub' $P5027 = 'cuid_402_1347804164.33' 
    capture_lex $P5027
    newclosure $P5026, $P5027
    $P5028 = $P104."add_hll_op"("nqp", "predec", $P5026)
.annotate 'line', 1437
    .const 'Sub' $P5030 = 'cuid_403_1347804164.33' 
    capture_lex $P5030
    newclosure $P5029, $P5030
    $P5031 = $P104."add_hll_op"("nqp", "postinc", $P5029)
.annotate 'line', 1461
    .const 'Sub' $P5033 = 'cuid_404_1347804164.33' 
    capture_lex $P5033
    newclosure $P5032, $P5033
    $P5034 = $P104."add_hll_op"("nqp", "postdec", $P5032)
.annotate 'line', 1485
    .const 'Sub' $P5036 = 'cuid_405_1347804164.33' 
    capture_lex $P5036
    newclosure $P5035, $P5036
    $P5037 = $P104."add_hll_op"("nqp", "numify", $P5035)
.annotate 'line', 1489
    .const 'Sub' $P5039 = 'cuid_406_1347804164.33' 
    capture_lex $P5039
    newclosure $P5038, $P5039
    $P5040 = $P104."add_hll_op"("nqp", "stringify", $P5038)
.annotate 'line', 1493
    .const 'Sub' $P5042 = 'cuid_407_1347804164.33' 
    capture_lex $P5042
    newclosure $P5041, $P5042
    $P5043 = $P104."add_hll_op"("nqp", "eqaddr", $P5041)
    .const 'Sub' $P5044 = 'cuid_354_1347804164.33' 
    capture_lex $P5044
    $P5045 = $P5044()
    .const 'Sub' $P5046 = 'cuid_365_1347804164.33' 
    capture_lex $P5046
    $P5047 = $P5046()
    .const 'Sub' $P5048 = 'cuid_366_1347804164.33' 
    capture_lex $P5048
    $P5049 = $P5048()
    set $P5056, _lex_param_0
    unless _lex_param_0 goto if1647_end5479 
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5050, "ModuleLoader"
    getinterp $P5052
    set $P5051, $P5052["context"]
    $P5053 = $P5050."set_mainline_module"($P5051)
    .const 'Sub' $P5054 = "cuid_367_1347804164.33" 
    $P5055 = $P5054(_lex_param_0 :flat)
    set $P5056, $P5055
  if1647_end5479:
    .return () 
.end
.HLL "nqp"
.namespace []
.sub "MAIN" :subid("cuid_367_1347804164.33") :anon :lex :outer("cuid_1_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3090
    .param pmc _lex_param_0 
    .lex "$nqpcomp", $P101 
    .lex "@clo", $P102 
    .lex "@ARGS", _lex_param_0 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
.annotate 'line', 3092
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5005, $P5006, "NQP"
    get_who $P5004, $P5005
    set $P5003, $P5004["Compiler"]
    unless_null $P5003, fallback10
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5007
  fallback10:
    $P5008 = $P5003."new"()
    set $P101, $P5008
.annotate 'line', 3093
    $P5009 = $P101."language"("nqp")
.annotate 'line', 3094
    nqp_get_sc_object $P5013, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5012, $P5013, "NQP"
    get_who $P5011, $P5012
    set $P5010, $P5011["Grammar"]
    unless_null $P5010, fallback11
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5014
  fallback11:
    $P5015 = $P101."parsegrammar"($P5010)
.annotate 'line', 3095
    nqp_get_sc_object $P5019, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5018, $P5019, "NQP"
    get_who $P5017, $P5018
    set $P5016, $P5017["Actions"]
    unless_null $P5016, fallback12
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5016, $P5020
  fallback12:
    $P5021 = $P101."parseactions"($P5016)
.annotate 'line', 3096
    $P5022 = $P101."config"()
    $P5023 = "&hll-config"($P5022)
.annotate 'line', 3099
    $P5024 = $P101."commandline_options"()
    set $P102, $P5024
.annotate 'line', 3100
    $P5025 = $P102."push"("parsetrace")
.annotate 'line', 3101
    $P5026 = $P102."push"("setting=s")
.annotate 'line', 3102
    $P5027 = $P102."push"("setting-path=s")
.annotate 'line', 3103
    $P5028 = $P102."push"("module-path=s")
.annotate 'line', 3104
    $P5029 = $P102."push"("vmlibs=s")
.annotate 'line', 3105
    $P5030 = $P102."push"("no-regex-lib")
.annotate 'line', 3106
    $P5031 = $P102."push"("old-regex-lib")
.annotate 'line', 3109
    $P5032 = $P101."command_line"(_lex_param_0, "utf8" :named("encoding"), "ascii iso-8859-1" :named("transcode"))
.annotate 'line', 3112
    $P5033 = $P101."nqpevent"()
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "hll-config" :subid("cuid_368_1347804164.33") :anon :lex :outer("cuid_1_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3116
    .param pmc _lex_param_0 
    .lex "$config", _lex_param_0 
    box $P5001, "2012.08-251-gc0203bb"
    set _lex_param_0["version"], $P5001
    box $P5002, "2012-09-16T14:02:44Z"
    set _lex_param_0["build-date"], $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_32_1347804164.33") :anon :lex :outer("cuid_1_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 8
    .const 'Sub' $P5030 = 'cuid_2_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_3_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_4_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_5_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_6_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_7_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_8_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_9_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_10_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_11_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_15_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_16_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_17_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_18_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_19_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_20_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_21_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_22_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_23_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_24_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_25_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_26_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_27_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_28_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_29_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_30_1347804164.33' 
    capture_lex $P5030 
    .const 'Sub' $P5030 = 'cuid_31_1347804164.33' 
    capture_lex $P5030 
    .lex "$loader", $P101 
    .lex "$?PACKAGE", $P102 
    .lex "$?CLASS", $P103 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_2_1347804164.33' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_3_1347804164.33' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_4_1347804164.33' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_5_1347804164.33' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_6_1347804164.33' 
    capture_lex $P5006
    get_hll_global $P5007, "ModuleLoader"
    set $P101, $P5007
    .const 'Sub' $P5008 = 'cuid_7_1347804164.33' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_8_1347804164.33' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_9_1347804164.33' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_10_1347804164.33' 
    capture_lex $P5011
    .const 'Sub' $P5012 = 'cuid_11_1347804164.33' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_15_1347804164.33' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_16_1347804164.33' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_17_1347804164.33' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_18_1347804164.33' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_19_1347804164.33' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_20_1347804164.33' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_21_1347804164.33' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_22_1347804164.33' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_23_1347804164.33' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_24_1347804164.33' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_25_1347804164.33' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_26_1347804164.33' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_27_1347804164.33' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_28_1347804164.33' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_29_1347804164.33' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_30_1347804164.33' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_31_1347804164.33' 
    capture_lex $P5029
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "BUILD" :subid("cuid_2_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 27
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 :slurpy :named 
    .lex "self", _lex_param_0 
    .lex "%opts", _lex_param_1 
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    new $P5003, 'ResizablePMCArray'
    repr_bind_attr_obj $P5001, $P5002, "@!BLOCKS", $P5003
    nqp_decontainerize $P5004, _lex_param_0
    nqp_get_sc_object $P5005, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    new $P5006, 'Hash'
    repr_bind_attr_obj $P5004, $P5005, "%!code_objects_to_fix_up", $P5006
    nqp_decontainerize $P5007, _lex_param_0
    nqp_get_sc_object $P5008, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    new $P5009, 'Hash'
    repr_bind_attr_obj $P5007, $P5008, "%!code_object_fixup_list", $P5009
    nqp_decontainerize $P5010, _lex_param_0
    nqp_get_sc_object $P5011, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    new $P5012, 'Hash'
    repr_bind_attr_obj $P5010, $P5011, "%!code_stub_sc_idx", $P5012
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "push_lexpad" :subid("cuid_3_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 35
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$pad", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 37
    nqp_get_sc_object $P5005, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Block"]
    unless_null $P5002, fallback17
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5006
  fallback17:
    nqp_get_sc_object $P5010, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback18
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5011
  fallback18:
    $P5012 = $P5007."new"()
    $P5013 = $P5002."new"($P5012, _lex_param_1 :named("node"))
    set $P101, $P5013
    nqp_decontainerize $P5014, _lex_param_0
    nqp_get_sc_object $P5015, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5016, $P5014, $P5015, "@!BLOCKS"
    set $N5001, $P5016
    box $P5026, $N5001
    set $P5025, $P5026
    unless $N5001 goto if12_end20 
.annotate 'line', 38
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    nqp_decontainerize $P5021, _lex_param_0
    nqp_get_sc_object $P5022, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5023, $P5021, $P5022, "@!BLOCKS"
    set $N5003, $P5023
    set $N5004, 1
    sub $N5002, $N5003, $N5004
    set $I5001, $N5002
    set $P5017, $P5020[$I5001]
    unless_null $P5017, fallback21
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5017, $P5024
  fallback21:
    set $P101["outer"], $P5017
    set $P5025, $P5017
  if12_end20:
    nqp_decontainerize $P5027, _lex_param_0
    nqp_get_sc_object $P5028, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5029, $P5027, $P5028, "@!BLOCKS"
    nqp_decontainerize $P5030, _lex_param_0
    nqp_get_sc_object $P5031, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5032, $P5030, $P5031, "@!BLOCKS"
    set $N5005, $P5032
    set $I5002, $N5005
    set $P5029[$I5002], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pop_lexpad" :subid("cuid_4_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 46
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 47
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5003, $P5001, $P5002, "@!BLOCKS"
    $P5004 = $P5003."pop"()
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "cur_lexpad" :subid("cuid_5_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 51
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    nqp_decontainerize $P5005, _lex_param_0
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5007, $P5005, $P5006, "@!BLOCKS"
    set $N5002, $P5007
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    set $I5001, $N5001
    set $P5001, $P5004[$I5001]
    unless_null $P5001, fallback22
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5008
  fallback22:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "get_legacy_block_list" :subid("cuid_6_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 56
    .param pmc _lex_param_0 
    .lex "@x", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_decontainerize $P5003, _lex_param_0
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5005, $P5003, $P5004, "@!BLOCKS"
    clone $P5002, $P5005
    set $P101, $P5002
.annotate 'line', 58
    $P5006 = $P101."reverse"()
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "load_setting" :subid("cuid_7_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 69
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5005 = 'cuid_369_1347804164.33' 
    capture_lex $P5005 
    .lex "self", _lex_param_0 
    .lex "$setting_name", _lex_param_1 
    root_new $P101, ['parrot';'Continuation']
    set_label $P101, lexotic_23
    .lex "RETURN", $P101
    set $S5001, _lex_param_1
    isne $I5001, $S5001, "NULL"
    box $P5004, $I5001
    set $P5003, $P5004
    unless $I5001 goto if13_end26 
    .const 'Sub' $P5001 = 'cuid_369_1347804164.33' 
    capture_lex $P5001
    $P5002 = $P5001()
    set $P5003, $P5002
  if13_end26:
    goto lexotic_24
  lexotic_23:
    .get_results ($P5003)
  lexotic_24:
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_369_1347804164.33") :anon :lex :outer("cuid_7_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 71
    .lex "$setting", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback27
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback28
    nqp_get_sc_object $P5008, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback28:
    unless_null $P5004, vivi_1429
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_1429:
    set $P5003, $P5004
  fallback27:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback30
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5011
  fallback30:
.annotate 'line', 76
    find_lex $P5012, "$loader"
    find_lex $P5013, "$setting_name"
    $P5014 = $P5012."load_setting"($P5013)
    set $P5002["outer_ctx"], $P5014
    set $P101, $P5014
.annotate 'line', 79
    find_lex $P5016, "self"
    nqp_decontainerize $P5015, $P5016
    $P5017 = $P5015."is_precompilation_mode"()
    unless $P5017 goto if15_else31 
.annotate 'line', 80
    find_lex $P5019, "self"
    nqp_decontainerize $P5018, $P5019
    nqp_get_sc_object $P5023, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Stmts"]
    unless_null $P5020, fallback33
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5020, $P5024
  fallback33:
.annotate 'line', 81
    nqp_get_sc_object $P5028, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["VM"]
    unless_null $P5025, fallback34
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5025, $P5029
  fallback34:
.annotate 'line', 83
    nqp_get_sc_object $P5033, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback35
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5030, $P5034
  fallback35:
    $P5035 = $P5030."new"("ModuleLoader.pbc" :named("value"))
    $P5036 = $P5025."new"($P5035, "load_bytecode vs" :named("pirop"))
.annotate 'line', 85
    nqp_get_sc_object $P5040, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback36
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5037, $P5041
  fallback36:
.annotate 'line', 87
    nqp_get_sc_object $P5045, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["BVal"]
    unless_null $P5042, fallback37
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5042, $P5046
  fallback37:
    find_dynamic_lex $P5047, "$*UNIT"
    unless_null $P5047, fallback38
    nqp_get_sc_object $P5050, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5049, $P5050
    set $P5048, $P5049["$UNIT"]
    unless_null $P5048, fallback39
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5048, $P5051
  fallback39:
    unless_null $P5048, vivi_1640
    die "Contextual $*UNIT not found"
    box $P5052, "Contextual $*UNIT not found"
    set $P5048, $P5052
  vivi_1640:
    set $P5047, $P5048
  fallback38:
    $P5053 = $P5042."new"($P5047 :named("value"))
.annotate 'line', 88
    nqp_get_sc_object $P5057, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5056, $P5057, "QAST"
    get_who $P5055, $P5056
    set $P5054, $P5055["Op"]
    unless_null $P5054, fallback41
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5054, $P5058
  fallback41:
.annotate 'line', 90
    nqp_get_sc_object $P5062, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5061, $P5062, "QAST"
    get_who $P5060, $P5061
    set $P5059, $P5060["VM"]
    unless_null $P5059, fallback42
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5059, $P5063
  fallback42:
.annotate 'line', 92
    nqp_get_sc_object $P5067, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5066, $P5067, "QAST"
    get_who $P5065, $P5066
    set $P5064, $P5065["SVal"]
    unless_null $P5064, fallback43
    nqp_get_sc_object $P5068, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5064, $P5068
  fallback43:
    $P5069 = $P5064."new"("ModuleLoader" :named("value"))
    $P5070 = $P5059."new"($P5069, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 94
    nqp_get_sc_object $P5074, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5073, $P5074, "QAST"
    get_who $P5072, $P5073
    set $P5071, $P5072["SVal"]
    unless_null $P5071, fallback44
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5071, $P5075
  fallback44:
    find_lex $P5076, "$setting_name"
    $P5077 = $P5071."new"($P5076 :named("value"))
    $P5078 = $P5054."new"($P5070, $P5077, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5079 = $P5037."new"($P5053, $P5078, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
    $P5080 = $P5020."new"($P5036, $P5079)
    $P5081 = $P5018."add_load_dependency_task"($P5080 :named("deserialize_past"))
    set $P5128, $P5081
    goto if15_end32
  if15_else31:
.annotate 'line', 99
.annotate 'line', 101
    find_lex $P5083, "self"
    nqp_decontainerize $P5082, $P5083
    nqp_get_sc_object $P5087, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5086, $P5087, "QAST"
    get_who $P5085, $P5086
    set $P5084, $P5085["Op"]
    unless_null $P5084, fallback45
    nqp_get_sc_object $P5088, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5084, $P5088
  fallback45:
.annotate 'line', 103
    nqp_get_sc_object $P5092, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5091, $P5092, "QAST"
    get_who $P5090, $P5091
    set $P5089, $P5090["BVal"]
    unless_null $P5089, fallback46
    nqp_get_sc_object $P5093, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5089, $P5093
  fallback46:
    find_dynamic_lex $P5094, "$*UNIT"
    unless_null $P5094, fallback47
    nqp_get_sc_object $P5097, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5096, $P5097
    set $P5095, $P5096["$UNIT"]
    unless_null $P5095, fallback48
    nqp_get_sc_object $P5098, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5095, $P5098
  fallback48:
    unless_null $P5095, vivi_1749
    die "Contextual $*UNIT not found"
    box $P5099, "Contextual $*UNIT not found"
    set $P5095, $P5099
  vivi_1749:
    set $P5094, $P5095
  fallback47:
    $P5100 = $P5089."new"($P5094 :named("value"))
.annotate 'line', 104
    nqp_get_sc_object $P5104, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5103, $P5104, "QAST"
    get_who $P5102, $P5103
    set $P5101, $P5102["Op"]
    unless_null $P5101, fallback50
    nqp_get_sc_object $P5105, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5101, $P5105
  fallback50:
.annotate 'line', 106
    nqp_get_sc_object $P5109, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5108, $P5109, "QAST"
    get_who $P5107, $P5108
    set $P5106, $P5107["VM"]
    unless_null $P5106, fallback51
    nqp_get_sc_object $P5110, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5106, $P5110
  fallback51:
.annotate 'line', 108
    nqp_get_sc_object $P5114, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5113, $P5114, "QAST"
    get_who $P5112, $P5113
    set $P5111, $P5112["SVal"]
    unless_null $P5111, fallback52
    nqp_get_sc_object $P5115, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5111, $P5115
  fallback52:
    $P5116 = $P5111."new"("ModuleLoader" :named("value"))
    $P5117 = $P5106."new"($P5116, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 110
    nqp_get_sc_object $P5121, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5120, $P5121, "QAST"
    get_who $P5119, $P5120
    set $P5118, $P5119["SVal"]
    unless_null $P5118, fallback53
    nqp_get_sc_object $P5122, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5118, $P5122
  fallback53:
    find_lex $P5123, "$setting_name"
    $P5124 = $P5118."new"($P5123 :named("value"))
    $P5125 = $P5101."new"($P5117, $P5124, "callmethod" :named("op"), "load_setting" :named("name"))
    $P5126 = $P5084."new"($P5100, $P5125, "callmethod" :named("op"), "set_outer_ctx" :named("name"))
    $P5127 = $P5082."add_fixup_task"($P5126 :named("fixup_past"))
    set $P5128, $P5127
  if15_end32:
    getattribute $P5130, $P101, "lex_pad"
    find_lex $P5129, "RETURN"
    $P5131 = $P5129($P5130)
    .return ($P5131) 
.end
.HLL "nqp"
.namespace []
.sub "load_module" :subid("cuid_8_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 121
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$module_name", _lex_param_1 
    .lex "$cur_GLOBALish", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_54
    .lex "RETURN", $P102
.annotate 'line', 123
    find_lex $P5002, "$loader"
    $P5003 = $P5002."load_module"(_lex_param_1, _lex_param_2)
    set $P101, $P5003
.annotate 'line', 126
    nqp_decontainerize $P5004, _lex_param_0
    $P5005 = $P5004."is_precompilation_mode"()
    set $P5050, $P5005
    unless $P5005 goto if18_end57 
.annotate 'line', 127
    nqp_decontainerize $P5006, _lex_param_0
    nqp_get_sc_object $P5010, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Stmts"]
    unless_null $P5007, fallback58
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5011
  fallback58:
.annotate 'line', 128
    nqp_get_sc_object $P5015, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["VM"]
    unless_null $P5012, fallback59
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5012, $P5016
  fallback59:
.annotate 'line', 130
    nqp_get_sc_object $P5020, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["SVal"]
    unless_null $P5017, fallback60
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5017, $P5021
  fallback60:
    $P5022 = $P5017."new"("ModuleLoader.pbc" :named("value"))
    $P5023 = $P5012."new"($P5022, "load_bytecode vs" :named("pirop"))
.annotate 'line', 132
    nqp_get_sc_object $P5027, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback61
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5024, $P5028
  fallback61:
.annotate 'line', 134
    nqp_get_sc_object $P5032, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["VM"]
    unless_null $P5029, fallback62
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5029, $P5033
  fallback62:
.annotate 'line', 136
    nqp_get_sc_object $P5037, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["SVal"]
    unless_null $P5034, fallback63
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5034, $P5038
  fallback63:
    $P5039 = $P5034."new"("ModuleLoader" :named("value"))
    $P5040 = $P5029."new"($P5039, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 138
    nqp_get_sc_object $P5044, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["SVal"]
    unless_null $P5041, fallback64
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5041, $P5045
  fallback64:
    $P5046 = $P5041."new"(_lex_param_1 :named("value"))
    $P5047 = $P5024."new"($P5040, $P5046, "callmethod" :named("op"), "load_module" :named("name"))
    $P5048 = $P5007."new"($P5023, $P5047)
    $P5049 = $P5006."add_load_dependency_task"($P5048 :named("deserialize_past"))
    set $P5050, $P5049
  if18_end57:
    getattribute $P5052, $P101, "lex_pad"
    find_lex $P5051, "RETURN"
    $P5053 = $P5051($P5052)
    goto lexotic_55
  lexotic_54:
    .get_results ($P5053)
  lexotic_55:
    .return ($P5053) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_symbol" :subid("cuid_9_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 147
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5012 = 'cuid_370_1347804164.33' 
    capture_lex $P5012 
    .lex "$name", $P101 
    .lex "$target", $P102 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "@sym", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    clone $P5003, _lex_param_2
    set _lex_param_2, $P5003
.annotate 'line', 149
    $P5004 = _lex_param_2."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    set $P102, _lex_param_1
    set $P5006, _lex_param_2
    iter $P5008, _lex_param_2
  for_next65:
    unless $P5008, for_done67
    shift $P5010, $P5008
  for_redo66:
    .const 'Sub' $P5009 = 'cuid_370_1347804164.33' 
    capture_lex $P5009
    $P5006 = $P5009($P5010)
    goto for_next65
  for_done67:
    get_who $P5011, $P102
    set $S5002, $P101
    set $P5011[$S5002], _lex_param_3
    .return (_lex_param_3) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_370_1347804164.33") :anon :lex :outer("cuid_9_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 153
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$target"
    set $S5001, _lex_param_0
    nqp_get_package_through_who $P5001, $P5002, $S5001
    store_lex "$target", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "install_lexical_symbol" :subid("cuid_10_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 163
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$obj", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 165
    $P5002 = _lex_param_1."symbol"(_lex_param_2, "lexical" :named("scope"), _lex_param_3 :named("value"))
.annotate 'line', 166
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback68
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5004
  fallback68:
    nqp_get_sc_object $P5008, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Var"]
    unless_null $P5005, fallback69
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5005, $P5009
  fallback69:
    $P5010 = $P5005."new"("lexical" :named("scope"), _lex_param_2 :named("name"), "var" :named("decl"))
    $P5011 = $P5003."push"($P5010)
.annotate 'line', 169
    nqp_get_sc_object $P5015, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Stmts"]
    unless_null $P5012, fallback70
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5012, $P5016
  fallback70:
.annotate 'line', 170
    nqp_get_sc_object $P5020, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback71
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5017, $P5021
  fallback71:
.annotate 'line', 172
    nqp_get_sc_object $P5025, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["VM"]
    unless_null $P5022, fallback72
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5022, $P5026
  fallback72:
.annotate 'line', 173
    $P5027 = _lex_param_1."cuid"()
    set $S5003, $P5027
    concat $S5002, "    .const \"LexInfo\" %r = \"", $S5003
    concat $S5001, $S5002, "\""
    $P5028 = $P5022."new"($S5001 :named("pir"))
.annotate 'line', 175
    nqp_get_sc_object $P5032, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["SVal"]
    unless_null $P5029, fallback73
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5029, $P5033
  fallback73:
    $P5034 = $P5029."new"(_lex_param_2 :named("value"))
.annotate 'line', 176
    nqp_get_sc_object $P5038, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["WVal"]
    unless_null $P5035, fallback74
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5035, $P5039
  fallback74:
    $P5040 = $P5035."new"(_lex_param_3 :named("value"))
    $P5041 = $P5017."new"($P5028, $P5034, $P5040, "callmethod" :named("op"), "set_static_lexpad_value" :named("name"))
.annotate 'line', 180
    nqp_get_sc_object $P5045, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback75
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5042, $P5046
  fallback75:
.annotate 'line', 182
    nqp_get_sc_object $P5050, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["VM"]
    unless_null $P5047, fallback76
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5047, $P5051
  fallback76:
.annotate 'line', 183
    $P5052 = _lex_param_1."cuid"()
    set $S5006, $P5052
    concat $S5005, "    .const \"LexInfo\" %r = \"", $S5006
    concat $S5004, $S5005, "\""
    $P5053 = $P5047."new"($S5004 :named("pir"))
    $P5054 = $P5042."new"($P5053, "callmethod" :named("op"), "finish_static_lexpad" :named("name"))
    $P5055 = $P5012."new"($P5041, $P5054)
    set $P101, $P5055
.annotate 'line', 187
    nqp_decontainerize $P5056, _lex_param_0
    $P5057 = $P5056."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5057) 
.end
.HLL "nqp"
.namespace []
.sub "install_package_routine" :subid("cuid_11_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 192
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$fixup", $P101 
    .lex "self", _lex_param_0 
    .lex "$package", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$past_block", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 193
    nqp_get_sc_object $P5005, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback77
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5006
  fallback77:
.annotate 'line', 195
    nqp_get_sc_object $P5010, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback78
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5011
  fallback78:
    nqp_get_sc_object $P5015, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["WVal"]
    unless_null $P5012, fallback79
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5012, $P5016
  fallback79:
    $P5017 = $P5012."new"(_lex_param_1 :named("value"))
    $P5018 = $P5007."new"($P5017, "who" :named("op"))
.annotate 'line', 196
    nqp_get_sc_object $P5022, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["SVal"]
    unless_null $P5019, fallback80
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5019, $P5023
  fallback80:
    set $S5001, _lex_param_2
    $P5024 = $P5019."new"($S5001 :named("value"))
.annotate 'line', 197
    nqp_get_sc_object $P5028, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["BVal"]
    unless_null $P5025, fallback81
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5025, $P5029
  fallback81:
    $P5030 = $P5025."new"(_lex_param_3 :named("value"))
    $P5031 = $P5002."new"($P5018, $P5024, $P5030, "bindkey" :named("op"))
    set $P101, $P5031
.annotate 'line', 199
    nqp_decontainerize $P5032, _lex_param_0
    $P5033 = $P5032."add_fixup_task"($P101 :named("deserialize_past"), $P101 :named("fixup_past"))
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "create_code" :subid("cuid_15_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 204
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .const 'Sub' $P5101 = 'cuid_12_1347804164.33' 
    capture_lex $P5101 
    .const 'Sub' $P5101 = 'cuid_13_1347804164.33' 
    capture_lex $P5101 
    .const 'Sub' $P5101 = 'cuid_14_1347804164.33' 
    capture_lex $P5101 
    .const 'Sub' $P5101 = 'cuid_374_1347804164.33' 
    capture_lex $P5101 
    .lex "$code_type", $P101 
    .lex "$have_code_type", $P102 
    .lex "$stub_code", $P103 
    .lex "$fixups", $P104 
    .lex "$dummy", $P105 
    .lex "$code_ref_idx", $P106 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$is_dispatcher", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P105, $P5005
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P106, $P5006
    root_new $P107, ['parrot';'Continuation']
    set_label $P107, lexotic_82
    .lex "RETURN", $P107
    box $P5007, 0
    set $P102, $P5007
    new $P5027, 'ExceptionHandler'
    set_label $P5027, catch_handler_2291
    $P5027.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5027
.annotate 'line', 208
.annotate 'line', 209
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    box $P5010, "NQPRoutine"
    push $P5009, $P5010
    $P5011 = $P5008."find_sym"($P5009)
    set $P101, $P5011
.annotate 'line', 210
    find_dynamic_lex $P5013, "$*PACKAGE"
    unless_null $P5013, fallback84
    nqp_get_sc_object $P5016, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$PACKAGE"]
    unless_null $P5014, fallback85
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5014, $P5017
  fallback85:
    unless_null $P5014, vivi_1986
    die "Contextual $*PACKAGE not found"
    box $P5018, "Contextual $*PACKAGE not found"
    set $P5014, $P5018
  vivi_1986:
    set $P5013, $P5014
  fallback84:
    get_how $P5012, $P5013
    find_dynamic_lex $P5019, "$*PACKAGE"
    unless_null $P5019, fallback87
    nqp_get_sc_object $P5022, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$PACKAGE"]
    unless_null $P5020, fallback88
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5020, $P5023
  fallback88:
    unless_null $P5020, vivi_2089
    die "Contextual $*PACKAGE not found"
    box $P5024, "Contextual $*PACKAGE not found"
    set $P5020, $P5024
  vivi_2089:
    set $P5019, $P5020
  fallback87:
    $P5025 = $P5012."name"($P5019)
    set $S5001, $P5025
    isne $I5001, $S5001, "NQPRoutine"
    box $P5026, $I5001
    set $P102, $P5026
    set $P5028, $P102
    pop_eh 
    goto skip_handler_2190
  catch_handler_2291:
    .get_results ($P5027) 
    set $I10001, 1
    set $P5027["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    finalize $P5027
    pop_upto_eh $P5027
    pop_eh 
    set $P5028, $P10001
    goto skip_handler_2190
  skip_handler_2190:
    .const 'Sub' $P5030 = 'cuid_12_1347804164.33' 
    capture_lex $P5030
    newclosure $P5029, $P5030
    set $P103, $P5029
.annotate 'line', 253
    nqp_get_sc_object $P5034, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5033, $P5034, "QAST"
    get_who $P5032, $P5033
    set $P5031, $P5032["Stmts"]
    unless_null $P5031, fallback118
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5031, $P5035
  fallback118:
    $P5036 = $P5031."new"()
    set $P104, $P5036
    set $P5037, _lex_param_1["compile_time_dummy"]
    unless_null $P5037, fallback121
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5037, $P5038
  fallback121:
    defined $I5002, $P5037
    unless $I5002 goto if26_else119 
.annotate 'line', 256
    set $P5039, _lex_param_1["compile_time_dummy"]
    unless_null $P5039, fallback122
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5039, $P5040
  fallback122:
    set $P105, $P5039
    set $P5060, $P105
    goto if26_end120
  if26_else119:
.annotate 'line', 259
    nqp_fresh_stub $P5041, $P103
    set $P105, $P5041
    set $S5002, _lex_param_2
    assign $P105, $S5002
    setprop $P105, "STATIC_CODE_REF", $P105
.annotate 'line', 266
    nqp_decontainerize $P5042, _lex_param_0
    $P5043 = $P5042."add_root_code_ref"($P105, _lex_param_1)
    set $P106, $P5043
    nqp_decontainerize $P5044, _lex_param_0
    nqp_get_sc_object $P5045, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5046, $P5044, $P5045, "%!code_stub_sc_idx"
.annotate 'line', 267
    $P5047 = _lex_param_1."cuid"()
    set $S5003, $P5047
    set $P5046[$S5003], $P106
    set _lex_param_1["compile_time_dummy"], $P105
    set $P5059, $P102
    unless $P102 goto if27_end124 
.annotate 'line', 273
    nqp_decontainerize $P5048, _lex_param_0
    nqp_get_sc_object $P5049, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5050, $P5048, $P5049, "%!code_object_fixup_list"
.annotate 'line', 274
    $P5051 = _lex_param_1."cuid"()
    set $S5004, $P5051
    set $P5050[$S5004], $P104
.annotate 'line', 275
    nqp_decontainerize $P5052, _lex_param_0
    $P5053 = $P5052."is_precompilation_mode"()
    unless $P5053 goto if28_else125 
    .const 'Sub' $P5055 = 'cuid_13_1347804164.33' 
    capture_lex $P5055
    newclosure $P5054, $P5055
    setprop $P105, "CLONE_CALLBACK", $P5054
    set $P5058, $P105
    goto if28_end126
  if28_else125:
.annotate 'line', 280
    .const 'Sub' $P5057 = 'cuid_14_1347804164.33' 
    capture_lex $P5057
    newclosure $P5056, $P5057
    setprop $P105, "CLONE_CALLBACK", $P5056
    set $P5058, $P105
  if28_end126:
    set $P5059, $P5058
  if27_end124:
    set $P5060, $P5059
  if26_end120:
.annotate 'line', 304
    nqp_decontainerize $P5061, _lex_param_0
    $P5062 = $P5061."add_fixup_task"($P104 :named("fixup_past"))
    unless $P102 goto if29_else137 
    .const 'Sub' $P5063 = 'cuid_374_1347804164.33' 
    capture_lex $P5063
    $P5064 = $P5063()
    set $P5100, $P5064
    goto if29_end138
  if29_else137:
.annotate 'line', 343
.annotate 'line', 346
    nqp_get_sc_object $P5068, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5067, $P5068, "QAST"
    get_who $P5066, $P5067
    set $P5065, $P5066["VM"]
    unless_null $P5065, fallback152
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5065, $P5069
  fallback152:
.annotate 'line', 348
    nqp_get_sc_object $P5073, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5072, $P5073, "QAST"
    get_who $P5071, $P5072
    set $P5070, $P5071["VM"]
    unless_null $P5070, fallback153
    nqp_get_sc_object $P5074, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5070, $P5074
  fallback153:
.annotate 'line', 350
    nqp_get_sc_object $P5078, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5077, $P5078, "QAST"
    get_who $P5076, $P5077
    set $P5075, $P5076["SVal"]
    unless_null $P5075, fallback154
    nqp_get_sc_object $P5079, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5075, $P5079
  fallback154:
    nqp_decontainerize $P5080, _lex_param_0
    $P5081 = $P5080."handle"()
    $P5082 = $P5075."new"($P5081 :named("value"))
.annotate 'line', 351
    nqp_get_sc_object $P5086, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5085, $P5086, "QAST"
    get_who $P5084, $P5085
    set $P5083, $P5084["IVal"]
    unless_null $P5083, fallback155
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5083, $P5087
  fallback155:
    $P5088 = $P5083."new"($P106 :named("value"))
    $P5089 = $P5070."new"($P5082, $P5088, "nqp_get_sc_code_ref Psi" :named("pirop"))
.annotate 'line', 353
    nqp_get_sc_object $P5093, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5092, $P5093, "QAST"
    get_who $P5091, $P5092
    set $P5090, $P5091["BVal"]
    unless_null $P5090, fallback156
    nqp_get_sc_object $P5094, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5090, $P5094
  fallback156:
    $P5095 = $P5090."new"(_lex_param_1 :named("value"))
    $P5096 = $P5065."new"($P5089, $P5095, "assign vPP" :named("pirop"))
    $P5097 = $P104."push"($P5096)
    find_lex $P5098, "RETURN"
    $P5099 = $P5098($P105)
    set $P5100, $P5099
  if29_end138:
    goto lexotic_83
  lexotic_82:
    .get_results ($P5100)
  lexotic_83:
    .return ($P5100) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_12_1347804164.33") :anon :lex :outer("cuid_15_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 217
    .param pmc _lex_param_0 :slurpy 
    .param pmc _lex_param_1 :slurpy :named 
    .const 'Sub' $P5030 = 'cuid_373_1347804164.33' 
    capture_lex $P5030 
    .lex "$nqpcomp", $P101 
    .lex "$post", $P102 
    .lex "$pir", $P103 
    .lex "$compiled", $P104 
    .lex "$c", $P105 
    .lex "$i", $P106 
    .lex "@args", _lex_param_0 
    .lex "%named", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P105, $P5005
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P106, $P5006
.annotate 'line', 219
    find_lex $P5007, "$past"
    find_lex $P5009, "self"
    nqp_decontainerize $P5008, $P5009
    $P5010 = $P5008."libs"()
    $P5011 = $P5007."unshift"($P5010)
    compreg $P5012, "nqp"
    set $P101, $P5012
.annotate 'line', 221
    nqp_get_sc_object $P5016, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["CompUnit"]
    unless_null $P5013, fallback92
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5013, $P5017
  fallback92:
    find_lex $P5018, "$past"
    $P5019 = $P5013."new"($P5018, "nqp" :named("hll"))
    $P5020 = $P101."post"($P5019)
    set $P102, $P5020
.annotate 'line', 222
    $P5021 = $P101."pir"($P102)
    set $P103, $P5021
.annotate 'line', 223
    $P5022 = $P101."evalpmc"($P103)
    set $P104, $P5022
    elements $I5001, $P104
    box $P5023, $I5001
    set $P105, $P5023
    box $P5024, 0
    set $P106, $P5024
  while23_test93:
    set $N5001, $P106
    set $N5002, $P105
    islt $I5002, $N5001, $N5002
    box $P5028, $I5002
    set $P5027, $P5028
    unless $I5002 goto while23_done97 
  while23_redo95:
    .const 'Sub' $P5025 = 'cuid_373_1347804164.33' 
    capture_lex $P5025
    $P5026 = $P5025()
    set $P5027, $P5026
    goto while23_test93 
  while23_done97:
.annotate 'line', 249
    $P5029 = $P104(_lex_param_0 :flat, _lex_param_1 :flat :named)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_373_1347804164.33") :anon :lex :outer("cuid_12_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 228
    .const 'Sub' $P5017 = 'cuid_372_1347804164.33' 
    capture_lex $P5017 
    .lex "$subid", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 229
    find_lex $P5003, "$compiled"
    find_lex $P5004, "$i"
    set $I5001, $P5004
    set $P5002, $P5003[$I5001]
    unless_null $P5002, fallback98
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5005
  fallback98:
    $P5006 = $P5002."get_subid"()
    set $P101, $P5006
    find_lex $P5008, "self"
    nqp_decontainerize $P5007, $P5008
    nqp_get_sc_object $P5009, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5010, $P5007, $P5009, "%!code_objects_to_fix_up"
    set $S5001, $P101
    exists $I5002, $P5010[$S5001]
    box $P5014, $I5002
    set $P5013, $P5014
    unless $I5002 goto if24_end100 
    .const 'Sub' $P5011 = 'cuid_372_1347804164.33' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
  if24_end100:
    find_lex $P5015, "$i"
    set $N5002, $P5015
    set $N5003, 1
    add $N5001, $N5002, $N5003
    box $P5016, $N5001
    store_lex "$i", $P5016
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_372_1347804164.33") :anon :lex :outer("cuid_373_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 230
    .const 'Sub' $P5062 = 'cuid_371_1347804164.33' 
    capture_lex $P5062 
    .lex "$static", $P101 
    .lex "$fixup_stmts", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
.annotate 'line', 234
    find_lex $P5005, "self"
    nqp_decontainerize $P5004, $P5005
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5007, $P5004, $P5006, "%!code_objects_to_fix_up"
    find_lex $P5008, "$subid"
    set $S5001, $P5008
    set $P5003, $P5007[$S5001]
    unless_null $P5003, fallback101
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5009
  fallback101:
    $P5010 = $P5003."shift"()
    set $P101, $P5010
    find_lex $P5011, "$code_type"
    find_lex $P5013, "$compiled"
    find_lex $P5014, "$i"
    set $I5001, $P5014
    set $P5012, $P5013[$I5001]
    unless_null $P5012, fallback102
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5012, $P5015
  fallback102:
    setattribute $P101, $P5011, "$!do", $P5012
    find_lex $P5021, "self"
    nqp_decontainerize $P5020, $P5021
    nqp_get_sc_object $P5022, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5023, $P5020, $P5022, "%!code_objects_to_fix_up"
    find_lex $P5024, "$subid"
    set $S5002, $P5024
    set $P5019, $P5023[$S5002]
    unless_null $P5019, fallback103
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5019, $P5025
  fallback103:
    set $P5016, $P5019
    iter $P5018, $P5019
  for_next105:
    unless $P5018, for_done107
    shift $P5027, $P5018
  for_redo106:
    .const 'Sub' $P5026 = 'cuid_371_1347804164.33' 
    capture_lex $P5026
    $P5016 = $P5026($P5027)
    goto for_next105
  for_done107:
    find_lex $P5029, "$compiled"
    find_lex $P5030, "$i"
    set $I5002, $P5030
    set $P5028, $P5029[$I5002]
    unless_null $P5028, fallback108
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5028, $P5031
  fallback108:
    find_lex $P5033, "$compiled"
    find_lex $P5034, "$i"
    set $I5003, $P5034
    set $P5032, $P5033[$I5003]
    unless_null $P5032, fallback109
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5032, $P5035
  fallback109:
    setprop $P5028, "STATIC_CODE_REF", $P5032
.annotate 'line', 240
    find_lex $P5037, "self"
    nqp_decontainerize $P5036, $P5037
    find_lex $P5040, "self"
    nqp_decontainerize $P5039, $P5040
    nqp_get_sc_object $P5041, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5042, $P5039, $P5041, "%!code_stub_sc_idx"
    find_lex $P5043, "$subid"
    set $S5003, $P5043
    set $P5038, $P5042[$S5003]
    unless_null $P5038, fallback110
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5038, $P5044
  fallback110:
    find_lex $P5046, "$compiled"
    find_lex $P5047, "$i"
    set $I5004, $P5047
    set $P5045, $P5046[$I5004]
    unless_null $P5045, fallback111
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5045, $P5048
  fallback111:
    $P5049 = $P5036."update_root_code_ref"($P5038, $P5045)
    find_lex $P5052, "self"
    nqp_decontainerize $P5051, $P5052
    nqp_get_sc_object $P5053, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5054, $P5051, $P5053, "%!code_object_fixup_list"
    find_lex $P5055, "$subid"
    set $S5004, $P5055
    set $P5050, $P5054[$S5004]
    unless_null $P5050, fallback112
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5050, $P5056
  fallback112:
    set $P102, $P5050
    new $P5060, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5060, while25_handlers116
    push_eh $P5060
  while25_test113:
    $P5057 = $P102."list"()
    set $N5001, $P5057
    box $P5061, $N5001
    set $P5059, $P5061
    unless $N5001 goto while25_done117 
  while25_redo115:
.annotate 'line', 244
    $P5058 = $P102."shift"()
    set $P5059, $P5058
    goto while25_test113 
  while25_handlers116:
    .get_results ($P5060)
    pop_upto_eh $P5060
    getattribute $P5060, $P5060, 'type'
    eq $P5060, .CONTROL_LOOP_NEXT, while25_test113
    eq $P5060, .CONTROL_LOOP_REDO, while25_redo115
  while25_done117:
    pop_eh 
    .return ($P5059) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_371_1347804164.33") :anon :lex :outer("cuid_372_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 236
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$code_type"
    find_lex $P5004, "$compiled"
    find_lex $P5005, "$i"
    set $I5001, $P5005
    set $P5003, $P5004[$I5001]
    unless_null $P5003, fallback104
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5006
  fallback104:
    clone $P5002, $P5003
    setattribute _lex_param_0, $P5001, "$!do", $P5002
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_13_1347804164.33") :anon :lex :outer("cuid_15_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 276
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 277
    find_lex $P5003, "self"
    nqp_decontainerize $P5002, $P5003
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5005, $P5002, $P5004, "%!code_objects_to_fix_up"
    find_lex $P5006, "$past"
    $P5007 = $P5006."cuid"()
    set $S5001, $P5007
    set $P5001, $P5005[$S5001]
    unless_null $P5001, fallback127
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5008
  fallback127:
    $P5009 = $P5001."push"(_lex_param_2)
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_14_1347804164.33") :anon :lex :outer("cuid_15_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 281
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$orig", _lex_param_0 
    .lex "$clone", _lex_param_1 
    .lex "$code_obj", _lex_param_2 
.annotate 'line', 283
    find_lex $P5002, "self"
    nqp_decontainerize $P5001, $P5002
    $P5003 = $P5001."add_object"(_lex_param_2)
.annotate 'line', 284
    find_lex $P5004, "$fixups"
    nqp_get_sc_object $P5008, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback128
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5005, $P5009
  fallback128:
.annotate 'line', 286
    nqp_get_sc_object $P5013, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["WVal"]
    unless_null $P5010, fallback129
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5014
  fallback129:
    $P5015 = $P5010."new"(_lex_param_2 :named("value"))
.annotate 'line', 287
    nqp_get_sc_object $P5019, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["WVal"]
    unless_null $P5016, fallback130
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5016, $P5020
  fallback130:
    find_lex $P5021, "$code_type"
    $P5022 = $P5016."new"($P5021 :named("value"))
.annotate 'line', 288
    nqp_get_sc_object $P5026, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["SVal"]
    unless_null $P5023, fallback131
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5023, $P5027
  fallback131:
    $P5028 = $P5023."new"("$!do" :named("value"))
.annotate 'line', 289
    nqp_get_sc_object $P5032, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["VM"]
    unless_null $P5029, fallback132
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5029, $P5033
  fallback132:
.annotate 'line', 291
    nqp_get_sc_object $P5037, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback133
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5034, $P5038
  fallback133:
    nqp_get_sc_object $P5042, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["BVal"]
    unless_null $P5039, fallback134
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5039, $P5043
  fallback134:
    find_lex $P5044, "$past"
    $P5045 = $P5039."new"($P5044 :named("value"))
    $P5046 = $P5034."new"($P5045, "clone" :named("op"))
.annotate 'line', 292
    nqp_get_sc_object $P5050, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["WVal"]
    unless_null $P5047, fallback135
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5047, $P5051
  fallback135:
    $P5052 = $P5047."new"(_lex_param_2 :named("value"))
    $P5053 = $P5029."new"($P5046, $P5052, "set_sub_code_object 0PP" :named("pirop"))
    $P5054 = $P5005."new"($P5015, $P5022, $P5028, $P5053, "bindattr" :named("op"))
    $P5055 = $P5004."push"($P5054)
.annotate 'line', 297
    find_lex $P5058, "self"
    nqp_decontainerize $P5057, $P5058
    nqp_get_sc_object $P5059, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5060, $P5057, $P5059, "%!code_objects_to_fix_up"
    find_lex $P5061, "$past"
    $P5062 = $P5061."cuid"()
    set $S5001, $P5062
    set $P5056, $P5060[$S5001]
    unless_null $P5056, fallback136
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5056, $P5063
  fallback136:
    $P5064 = $P5056."push"(_lex_param_2)
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_374_1347804164.33") :anon :lex :outer("cuid_15_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 308
    .lex "$code_obj", $P101 
    .lex "$slot", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    find_lex $P5004, "$code_type"
    repr_instance_of $P5003, $P5004
    set $P101, $P5003
    find_lex $P5005, "$code_type"
    find_lex $P5006, "$dummy"
    setattribute $P101, $P5005, "$!do", $P5006
    find_lex $P5007, "$is_dispatcher"
    set $P5010, $P5007
    unless $P5007 goto if30_end140 
    find_lex $P5008, "$code_type"
    new $P5009, 'ResizablePMCArray'
    setattribute $P101, $P5008, "$!dispatchees", $P5009
    set $P5010, $P5009
  if30_end140:
.annotate 'line', 314
    find_lex $P5012, "self"
    nqp_decontainerize $P5011, $P5012
    $P5013 = $P5011."add_object"($P101)
    set $P102, $P5013
.annotate 'line', 317
    find_lex $P5015, "self"
    nqp_decontainerize $P5014, $P5015
.annotate 'line', 318
    nqp_get_sc_object $P5019, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["VM"]
    unless_null $P5016, fallback141
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5016, $P5020
  fallback141:
.annotate 'line', 320
    nqp_get_sc_object $P5024, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["BVal"]
    unless_null $P5021, fallback142
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5021, $P5025
  fallback142:
    find_lex $P5026, "$past"
    $P5027 = $P5021."new"($P5026 :named("value"))
.annotate 'line', 321
    nqp_get_sc_object $P5031, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5030, $P5031, "QAST"
    get_who $P5029, $P5030
    set $P5028, $P5029["WVal"]
    unless_null $P5028, fallback143
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5028, $P5032
  fallback143:
    $P5033 = $P5028."new"($P101 :named("value"))
    $P5034 = $P5016."new"($P5027, $P5033, "set_sub_code_object vPP" :named("pirop"))
    $P5035 = $P5014."add_fixup_task"($P5034 :named("deserialize_past"))
.annotate 'line', 325
    find_lex $P5036, "$fixups"
    nqp_get_sc_object $P5040, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5039, $P5040, "QAST"
    get_who $P5038, $P5039
    set $P5037, $P5038["Op"]
    unless_null $P5037, fallback144
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5037, $P5041
  fallback144:
.annotate 'line', 327
    nqp_get_sc_object $P5045, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["WVal"]
    unless_null $P5042, fallback145
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5042, $P5046
  fallback145:
    $P5047 = $P5042."new"($P101 :named("value"))
.annotate 'line', 328
    nqp_get_sc_object $P5051, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["WVal"]
    unless_null $P5048, fallback146
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5048, $P5052
  fallback146:
    find_lex $P5053, "$code_type"
    $P5054 = $P5048."new"($P5053 :named("value"))
.annotate 'line', 329
    nqp_get_sc_object $P5058, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5057, $P5058, "QAST"
    get_who $P5056, $P5057
    set $P5055, $P5056["SVal"]
    unless_null $P5055, fallback147
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5055, $P5059
  fallback147:
    $P5060 = $P5055."new"("$!do" :named("value"))
.annotate 'line', 330
    nqp_get_sc_object $P5064, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["BVal"]
    unless_null $P5061, fallback148
    nqp_get_sc_object $P5065, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5061, $P5065
  fallback148:
    find_lex $P5066, "$past"
    $P5067 = $P5061."new"($P5066 :named("value"))
    $P5068 = $P5037."new"($P5047, $P5054, $P5060, $P5067, "bindattr" :named("op"))
    $P5069 = $P5036."push"($P5068)
.annotate 'line', 332
    find_lex $P5070, "$fixups"
    nqp_get_sc_object $P5074, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5073, $P5074, "QAST"
    get_who $P5072, $P5073
    set $P5071, $P5072["VM"]
    unless_null $P5071, fallback149
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5071, $P5075
  fallback149:
.annotate 'line', 334
    nqp_get_sc_object $P5079, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5078, $P5079, "QAST"
    get_who $P5077, $P5078
    set $P5076, $P5077["BVal"]
    unless_null $P5076, fallback150
    nqp_get_sc_object $P5080, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5076, $P5080
  fallback150:
    find_lex $P5081, "$past"
    $P5082 = $P5076."new"($P5081 :named("value"))
.annotate 'line', 335
    nqp_get_sc_object $P5086, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5085, $P5086, "QAST"
    get_who $P5084, $P5085
    set $P5083, $P5084["WVal"]
    unless_null $P5083, fallback151
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5083, $P5087
  fallback151:
    $P5088 = $P5083."new"($P101 :named("value"))
    $P5089 = $P5071."new"($P5082, $P5088, "set_sub_code_object vPP" :named("pirop"))
    $P5090 = $P5070."push"($P5089)
    find_lex $P5092, "self"
    nqp_decontainerize $P5091, $P5092
    nqp_get_sc_object $P5093, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5094, $P5091, $P5093, "%!code_objects_to_fix_up"
.annotate 'line', 339
    find_lex $P5095, "$past"
    $P5096 = $P5095."cuid"()
    set $S5001, $P5096
    new $P5097, 'ResizablePMCArray'
    push $P5097, $P101
    set $P5094[$S5001], $P5097
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_create_mo" :subid("cuid_16_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 361
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :named("name") :optional 
    .param int haz_param_1 :opt_flag 
    .param pmc _lex_param_3 :named("repr") :optional 
    .param int haz_param_2 :opt_flag 
    if haz_param_1, default163
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_2, $P5012
  default163:
    if haz_param_2, default164
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_3, $P5013
  default164:
    .lex "%args", $P101 
    .lex "$mo", $P102 
    .lex "self", _lex_param_0 
    .lex "$how", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$repr", _lex_param_3 
    new $P5001, 'Hash'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_157
    .lex "RETURN", $P103
    defined $I5001, _lex_param_2
    box $P5004, $I5001
    set $P5003, $P5004
    unless $I5001 goto if31_end160 
.annotate 'line', 364
    set $P101["name"], _lex_param_2
    set $P5003, _lex_param_2
  if31_end160:
    defined $I5002, _lex_param_3
    box $P5006, $I5002
    set $P5005, $P5006
    unless $I5002 goto if32_end162 
.annotate 'line', 365
    set $P101["repr"], _lex_param_3
    set $P5005, _lex_param_3
  if32_end162:
.annotate 'line', 366
    $P5007 = _lex_param_1."new_type"($P101 :flat :named)
    set $P102, $P5007
.annotate 'line', 367
    nqp_decontainerize $P5008, _lex_param_0
    $P5009 = $P5008."add_object"($P102)
    find_lex $P5010, "RETURN"
    $P5011 = $P5010($P102)
    goto lexotic_158
  lexotic_157:
    .get_results ($P5011)
  lexotic_158:
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_attribute" :subid("cuid_17_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 378
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "$attr", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_attr", _lex_param_2 
    .lex "%lit_args", _lex_param_3 
    .lex "%obj_args", _lex_param_4 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 379
    $P5002 = _lex_param_2."new"(_lex_param_3 :flat :named, _lex_param_4 :flat :named)
    set $P101, $P5002
.annotate 'line', 380
    get_how $P5003, _lex_param_1
    $P5004 = $P5003."add_attribute"(_lex_param_1, $P101)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_method" :subid("cuid_18_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 384
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .param pmc _lex_param_4 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$name", _lex_param_3 
    .lex "$code", _lex_param_4 
.annotate 'line', 385
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3, _lex_param_4)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "set_routine_signature" :subid("cuid_19_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 389
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "$sig_type", $P101 
    .lex "$code_type", $P102 
    .lex "$sig_obj", $P103 
    .lex "self", _lex_param_0 
    .lex "$code_obj", _lex_param_1 
    .lex "$types", _lex_param_2 
    .lex "$definednesses", _lex_param_3 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P103, $P5003
.annotate 'line', 390
    nqp_decontainerize $P5004, _lex_param_0
    new $P5005, 'ResizablePMCArray'
    box $P5006, "NQPSignature"
    push $P5005, $P5006
    $P5007 = $P5004."find_sym"($P5005)
    set $P101, $P5007
.annotate 'line', 391
    nqp_decontainerize $P5008, _lex_param_0
    new $P5009, 'ResizablePMCArray'
    box $P5010, "NQPRoutine"
    push $P5009, $P5010
    $P5011 = $P5008."find_sym"($P5009)
    set $P102, $P5011
    repr_instance_of $P5012, $P101
    set $P103, $P5012
    setattribute $P103, $P101, "$!types", _lex_param_2
    setattribute $P103, $P101, "$!definednesses", _lex_param_3
    setattribute _lex_param_1, $P102, "$!signature", $P103
    .return ($P103) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_set_body_block" :subid("cuid_20_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 399
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$body_code_obj", $P101 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$body_past", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 401
    nqp_decontainerize $P5002, _lex_param_0
    $P5003 = _lex_param_2."name"()
    $P5004 = $P5002."create_code"(_lex_param_2, $P5003, 0)
    set $P101, $P5004
.annotate 'line', 404
    get_how $P5005, _lex_param_1
    $P5006 = $P5005."set_body_block"(_lex_param_1, $P101)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parent_or_role" :subid("cuid_21_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 408
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$meta_method_name", _lex_param_2 
    .lex "$to_add", _lex_param_3 
.annotate 'line', 409
    get_how $P5001, _lex_param_1
    set $S5001, _lex_param_2
    $P5002 = $P5001.$S5001(_lex_param_1, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_add_parrot_vtable_handler_mapping" :subid("cuid_22_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 412
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .param pmc _lex_param_3 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
    .lex "$name", _lex_param_2 
    .lex "$att_name", _lex_param_3 
.annotate 'line', 413
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."add_parrot_vtable_handler_mapping"(_lex_param_1, _lex_param_2, _lex_param_3)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "pkg_compose" :subid("cuid_23_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 417
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$obj", _lex_param_1 
.annotate 'line', 418
    get_how $P5001, _lex_param_1
    $P5002 = $P5001."compose"(_lex_param_1)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "run_begin_block" :subid("cuid_24_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 422
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5042 = 'cuid_376_1347804164.33' 
    capture_lex $P5042 
    .lex "$wrapper", $P101 
    .lex "%seen", $P102 
    .lex "$i", $P103 
    .lex "$code", $P104 
    .lex "$old_global", $P105 
    .lex "self", _lex_param_0 
    .lex "$past", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P105, $P5005
    root_new $P106, ['parrot';'Continuation']
    set_label $P106, lexotic_165
    .lex "RETURN", $P106
.annotate 'line', 424
    nqp_get_sc_object $P5009, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback167
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5010
  fallback167:
.annotate 'line', 425
    nqp_get_sc_object $P5014, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Stmts"]
    unless_null $P5011, fallback168
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5015
  fallback168:
    $P5016 = $P5011."new"()
    $P5017 = $P5006."new"($P5016, _lex_param_1)
    set $P101, $P5017
    nqp_decontainerize $P5018, _lex_param_0
    nqp_get_sc_object $P5019, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5020, $P5018, $P5019, "@!BLOCKS"
    set $N5001, $P5020
    box $P5021, $N5001
    set $P103, $P5021
  while33_test169:
    set $N5002, $P103
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5025, $I5001
    set $P5024, $P5025
    unless $I5001 goto while33_done173 
  while33_redo171:
    .const 'Sub' $P5022 = 'cuid_376_1347804164.33' 
    capture_lex $P5022
    $P5023 = $P5022()
    set $P5024, $P5023
    goto while33_test169 
  while33_done173:
.annotate 'line', 448
    nqp_decontainerize $P5026, _lex_param_0
    $P5027 = $P5026."create_code"($P101, "BEGIN block", 0)
    set $P104, $P5027
    new $P5029, 'ResizablePMCArray'
    get_hll_global $P5028, $P5029, "GLOBAL"
    set $P105, $P5028
    new $P5030, 'ResizablePMCArray'
    find_dynamic_lex $P5031, "$*GLOBALish"
    unless_null $P5031, fallback190
    nqp_get_sc_object $P5034, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$GLOBALish"]
    unless_null $P5032, fallback191
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5032, $P5035
  fallback191:
    unless_null $P5032, vivi_38192
    die "Contextual $*GLOBALish not found"
    box $P5036, "Contextual $*GLOBALish not found"
    set $P5032, $P5036
  vivi_38192:
    set $P5031, $P5032
  fallback190:
    set_hll_global $P5030, "GLOBAL", $P5031
.annotate 'line', 451
    $P5037 = $P104()
    new $P5038, 'ResizablePMCArray'
    set_hll_global $P5038, "GLOBAL", $P105
.annotate 'line', 456
    $P5039 = $P101."shift"()
    find_lex $P5040, "RETURN"
    $P5041 = $P5040($P101)
    goto lexotic_166
  lexotic_165:
    .get_results ($P5041)
  lexotic_166:
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_376_1347804164.33") :anon :lex :outer("cuid_24_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 430
    .const 'Sub' $P5017 = 'cuid_375_1347804164.33' 
    capture_lex $P5017 
    .lex "%symbols", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 432
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback174
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5010
  fallback174:
    $P5011 = $P5004."symtable"()
    set $P101, $P5011
    set $P5012, $P101
    iter $P5014, $P101
  for_next187:
    unless $P5014, for_done189
    shift $P5016, $P5014
  for_redo188:
    .const 'Sub' $P5015 = 'cuid_375_1347804164.33' 
    capture_lex $P5015
    $P5012 = $P5015($P5016)
    goto for_next187
  for_done189:
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_375_1347804164.33") :anon :lex :outer("cuid_376_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 433
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "%seen"
.annotate 'line', 434
    $P5003 = _lex_param_0."key"()
    set $S5001, $P5003
    set $P5001, $P5002[$S5001]
    unless_null $P5001, fallback179
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5004
  fallback179:
    isfalse $I5001, $P5001
    set $I5003, $I5001
    unless $I5001 goto if35_end178 
    $P5005 = _lex_param_0."value"()
    exists $I5002, $P5005["value"]
    set $I5003, $I5002
  if35_end178:
    box $P5038, $I5003
    set $P5037, $P5038
    unless $I5003 goto if34_end176 
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_37186
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 435
.annotate 'line', 436
    find_lex $P5007, "$wrapper"
    set $P5006, $P5007[0]
    unless_null $P5006, fallback180
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5008
  fallback180:
    nqp_get_sc_object $P5012, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback181
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5013
  fallback181:
.annotate 'line', 438
    nqp_get_sc_object $P5017, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Var"]
    unless_null $P5014, fallback182
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5014, $P5018
  fallback182:
    $P5019 = _lex_param_0."key"()
    $P5020 = $P5014."new"($P5019 :named("name"), "lexical" :named("scope"), "var" :named("isdecl"))
.annotate 'line', 439
    nqp_get_sc_object $P5024, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["WVal"]
    unless_null $P5021, fallback183
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5021, $P5025
  fallback183:
    $P5027 = _lex_param_0."value"()
    set $P5026, $P5027["value"]
    unless_null $P5026, fallback184
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5026, $P5028
  fallback184:
    $P5029 = $P5021."new"($P5026 :named("value"))
    $P5030 = $P5009."new"($P5020, $P5029, "bind" :named("op"))
    $P5031 = $P5006."push"($P5030)
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_36185
  catch_handler_37186:
    .get_results ($P5032) 
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10001
    goto skip_handler_36185
  skip_handler_36185:
    find_lex $P5034, "%seen"
.annotate 'line', 442
    $P5035 = _lex_param_0."key"()
    set $S5002, $P5035
    box $P5036, 1
    set $P5034[$S5002], $P5036
    set $P5037, $P5036
  if34_end176:
    .return ($P5037) 
.end
.HLL "nqp"
.namespace []
.sub "libs" :subid("cuid_25_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 461
    .param pmc _lex_param_0 
    .const 'Sub' $P5045 = 'cuid_377_1347804164.33' 
    capture_lex $P5045 
    .lex "@loadlibs", $P101 
    .lex "self", _lex_param_0 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    box $P5003, "nqp_group"
    push $P5002, $P5003
    box $P5004, "nqp_ops"
    push $P5002, $P5004
    box $P5005, "nqp_bigint_ops"
    push $P5002, $P5005
    box $P5006, "trans_ops"
    push $P5002, $P5006
    box $P5007, "io_ops"
    push $P5002, $P5007
    set $P101, $P5002
    find_dynamic_lex $P5010, "%*COMPILING"
    unless_null $P5010, fallback195
    nqp_get_sc_object $P5013, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["%COMPILING"]
    unless_null $P5011, fallback196
    nqp_get_sc_object $P5015, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5014, $P5015
    new $P5016, 'Hash'
    set $P5014["%COMPILING"], $P5016
    set $P5011, $P5016
  fallback196:
    unless_null $P5011, vivi_40197
    die "Contextual %*COMPILING not found"
    box $P5017, "Contextual %*COMPILING not found"
    set $P5011, $P5017
  vivi_40197:
    set $P5010, $P5011
  fallback195:
    set $P5009, $P5010["%?OPTIONS"]
    unless_null $P5009, fallback198
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5018
  fallback198:
    set $P5008, $P5009["vmlibs"]
    unless_null $P5008, fallback199
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5019
  fallback199:
    set $P5038, $P5008
    unless $P5008 goto if39_end194 
.annotate 'line', 464
    find_dynamic_lex $P5026, "%*COMPILING"
    unless_null $P5026, fallback200
    nqp_get_sc_object $P5029, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["%COMPILING"]
    unless_null $P5027, fallback201
    nqp_get_sc_object $P5031, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5030, $P5031
    new $P5032, 'Hash'
    set $P5030["%COMPILING"], $P5032
    set $P5027, $P5032
  fallback201:
    unless_null $P5027, vivi_41202
    die "Contextual %*COMPILING not found"
    box $P5033, "Contextual %*COMPILING not found"
    set $P5027, $P5033
  vivi_41202:
    set $P5026, $P5027
  fallback200:
    set $P5025, $P5026["%?OPTIONS"]
    unless_null $P5025, fallback203
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5025, $P5034
  fallback203:
    set $P5024, $P5025["vmlibs"]
    unless_null $P5024, fallback204
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5024, $P5035
  fallback204:
    set $S5001, $P5024
    split $P5023, ",", $S5001
    set $P5020, $P5023
    iter $P5022, $P5023
  for_next205:
    unless $P5022, for_done207
    shift $P5037, $P5022
  for_redo206:
    .const 'Sub' $P5036 = 'cuid_377_1347804164.33' 
    capture_lex $P5036
    $P5020 = $P5036($P5037)
    goto for_next205
  for_done207:
    set $P5038, $P5020
  if39_end194:
.annotate 'line', 469
    nqp_get_sc_object $P5042, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["VM"]
    unless_null $P5039, fallback208
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5039, $P5043
  fallback208:
    $P5044 = $P5039."new"($P101 :named("loadlibs"))
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_377_1347804164.33") :anon :lex :outer("cuid_25_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 465
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 466
    find_lex $P5001, "@loadlibs"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "add_initializations" :subid("cuid_26_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 473
    .param pmc _lex_param_0 
    .lex "self", _lex_param_0 
.annotate 'line', 474
    nqp_decontainerize $P5001, _lex_param_0
    nqp_get_sc_object $P5005, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback209
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5006
  fallback209:
.annotate 'line', 475
    nqp_get_sc_object $P5010, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["VM"]
    unless_null $P5007, fallback210
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5011
  fallback210:
    $P5012 = $P5007."new"("nqp_dynop_setup v" :named("pirop"))
.annotate 'line', 476
    nqp_get_sc_object $P5016, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["VM"]
    unless_null $P5013, fallback211
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5013, $P5017
  fallback211:
    $P5018 = $P5013."new"("nqp_bigint_setup v" :named("pirop"))
.annotate 'line', 477
    nqp_get_sc_object $P5022, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["Op"]
    unless_null $P5019, fallback212
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5019, $P5023
  fallback212:
.annotate 'line', 479
    nqp_get_sc_object $P5027, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["VM"]
    unless_null $P5024, fallback213
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5024, $P5028
  fallback213:
    $P5029 = $P5024."new"("getinterp P" :named("pirop"))
.annotate 'line', 480
    nqp_get_sc_object $P5033, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["VM"]
    unless_null $P5030, fallback214
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5030, $P5034
  fallback214:
    nqp_get_sc_object $P5038, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["SVal"]
    unless_null $P5035, fallback215
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5035, $P5039
  fallback215:
    $P5040 = $P5035."new"("LexPad" :named("value"))
    $P5041 = $P5030."new"($P5040, "get_class Ps" :named("pirop"))
.annotate 'line', 481
    nqp_get_sc_object $P5045, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["VM"]
    unless_null $P5042, fallback216
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5042, $P5046
  fallback216:
    nqp_get_sc_object $P5050, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5049, $P5050, "QAST"
    get_who $P5048, $P5049
    set $P5047, $P5048["SVal"]
    unless_null $P5047, fallback217
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5047, $P5051
  fallback217:
    $P5052 = $P5047."new"("NQPLexPad" :named("value"))
    $P5053 = $P5042."new"($P5052, "get_class Ps" :named("pirop"))
    $P5054 = $P5019."new"($P5029, $P5041, $P5053, "callmethod" :named("op"), "hll_map" :named("name"))
    $P5055 = $P5002."new"($P5012, $P5018, $P5054)
    $P5056 = $P5001."add_load_dependency_task"($P5055 :named("deserialize_past"))
    .return ($P5056) 
.end
.HLL "nqp"
.namespace []
.sub "is_lexical" :subid("cuid_27_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 487
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 488
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "lexical")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_package" :subid("cuid_28_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 493
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
.annotate 'line', 494
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."is_scope"(_lex_param_1, "package")
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "is_scope" :subid("cuid_29_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 499
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .const 'Sub' $P5011 = 'cuid_378_1347804164.33' 
    capture_lex $P5011 
    .lex "$i", $P101 
    .lex "self", _lex_param_0 
    .lex "$name", _lex_param_1 
    .lex "$wanted_scope", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_218
    .lex "RETURN", $P102
    nqp_decontainerize $P5002, _lex_param_0
    nqp_get_sc_object $P5003, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5004, $P5002, $P5003, "@!BLOCKS"
    set $N5001, $P5004
    box $P5005, $N5001
    set $P101, $P5005
  while42_test220:
    set $N5002, $P101
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5009, $I5001
    set $P5008, $P5009
    unless $I5001 goto while42_done224 
  while42_redo222:
    .const 'Sub' $P5006 = 'cuid_378_1347804164.33' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5008, $P5007
    goto while42_test220 
  while42_done224:
    box $P5010, 0
    goto lexotic_219
  lexotic_218:
    .get_results ($P5010)
  lexotic_219:
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_378_1347804164.33") :anon :lex :outer("cuid_29_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 501
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 503
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback225
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5010
  fallback225:
    find_lex $P5011, "$name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5019, $N5004
    set $P5018, $P5019
    unless $N5004 goto if43_end227 
.annotate 'line', 504
    set $P5014, $P101["scope"]
    unless_null $P5014, fallback228
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5014, $P5015
  fallback228:
    set $S5001, $P5014
    find_lex $P5016, "$wanted_scope"
    set $S5002, $P5016
    iseq $I5002, $S5001, $S5002
    find_lex $P5013, "RETURN"
    $P5017 = $P5013($I5002)
    set $P5018, $P5017
  if43_end227:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "known_sym" :subid("cuid_30_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 512
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$known", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "@name", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    box $P5002, 0
    set $P101, $P5002
    new $P5006, 'ExceptionHandler'
    set_label $P5006, catch_handler_45230
    $P5006.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5006
.annotate 'line', 514
.annotate 'line', 515
    nqp_decontainerize $P5003, _lex_param_0
    $P5004 = $P5003."find_sym"(_lex_param_2)
    box $P5005, 1
    set $P101, $P5005
    set $P5007, $P101
    pop_eh 
    goto skip_handler_44229
  catch_handler_45230:
    .get_results ($P5006) 
    set $I10001, 1
    set $P5006["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    finalize $P5006
    pop_upto_eh $P5006
    pop_eh 
    set $P5007, $P10001
    goto skip_handler_44229
  skip_handler_44229:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "find_sym" :subid("cuid_31_1347804164.33") :anon :lex :outer("cuid_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 524
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5024 = 'cuid_380_1347804164.33' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_382_1347804164.33' 
    capture_lex $P5024 
    .const 'Sub' $P5024 = 'cuid_383_1347804164.33' 
    capture_lex $P5024 
    .lex "$result", $P101 
    .lex "self", _lex_param_0 
    .lex "@name", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_231
    .lex "RETURN", $P102
    set $N5001, _lex_param_1
    box $P5004, $N5001
    set $P5003, $P5004
    if $N5001 goto unless46_end234 
.annotate 'line', 526
    box $P5002, "Cannot look up empty name"
    die $P5002
    set $P5003, $P5002
  unless46_end234:
    set $N5002, _lex_param_1
    set $N5003, 1
    iseq $I5001, $N5002, $N5003
    box $P5008, $I5001
    set $P5007, $P5008
    unless $I5001 goto if47_end236 
    .const 'Sub' $P5005 = 'cuid_380_1347804164.33' 
    capture_lex $P5005
    $P5006 = $P5005()
    set $P5007, $P5006
  if47_end236:
    find_dynamic_lex $P5009, "$*GLOBALish"
    unless_null $P5009, fallback249
    nqp_get_sc_object $P5012, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$GLOBALish"]
    unless_null $P5010, fallback250
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5013
  fallback250:
    unless_null $P5010, vivi_51251
    die "Contextual $*GLOBALish not found"
    box $P5014, "Contextual $*GLOBALish not found"
    set $P5010, $P5014
  vivi_51251:
    set $P5009, $P5010
  fallback249:
    set $P101, $P5009
    set $N5004, _lex_param_1
    set $N5005, 2
    isge $I5002, $N5004, $N5005
    box $P5018, $I5002
    set $P5017, $P5018
    unless $I5002 goto if52_end253 
    .const 'Sub' $P5015 = 'cuid_382_1347804164.33' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5017, $P5016
  if52_end253:
    set $P5019, _lex_param_1
    iter $P5021, _lex_param_1
  for_next269:
    unless $P5021, for_done271
    shift $P5023, $P5021
  for_redo270:
    .const 'Sub' $P5022 = 'cuid_383_1347804164.33' 
    capture_lex $P5022
    $P5019 = $P5022($P5023)
    goto for_next269
  for_done271:
    goto lexotic_232
  lexotic_231:
    .get_results ($P101)
  lexotic_232:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_380_1347804164.33") :anon :lex :outer("cuid_31_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 530
    .const 'Sub' $P5015 = 'cuid_379_1347804164.33' 
    capture_lex $P5015 
    .lex "$final_name", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback237
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5005
  fallback237:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while48_test238:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while48_done242 
  while48_redo240:
    .const 'Sub' $P5011 = 'cuid_379_1347804164.33' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while48_test238 
  while48_done242:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_379_1347804164.33") :anon :lex :outer("cuid_380_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 533
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 535
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback243
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5010
  fallback243:
    find_lex $P5011, "$final_name"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5021, $N5004
    set $P5020, $P5021
    unless $N5004 goto if49_end245 
.annotate 'line', 536
    exists $I5002, $P101["value"]
    unless $I5002 goto if50_else246 
.annotate 'line', 537
    set $P5014, $P101["value"]
    unless_null $P5014, fallback248
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5014, $P5015
  fallback248:
    find_lex $P5013, "RETURN"
    $P5016 = $P5013($P5014)
    set $P5019, $P5016
    goto if50_end247
  if50_else246:
.annotate 'line', 540
    find_lex $P5017, "$final_name"
    set $S5002, $P5017
    concat $S5001, "No compile-time value for ", $S5002
    box $P5018, $S5001
    die $P5018
    set $P5019, $P5018
  if50_end247:
    set $P5020, $P5019
  if49_end245:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_382_1347804164.33") :anon :lex :outer("cuid_31_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 551
    .const 'Sub' $P5015 = 'cuid_381_1347804164.33' 
    capture_lex $P5015 
    .lex "$first", $P101 
    .lex "$i", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    find_lex $P5004, "@name"
    set $P5003, $P5004[0]
    unless_null $P5003, fallback254
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5005
  fallback254:
    set $P101, $P5003
    find_lex $P5007, "self"
    nqp_decontainerize $P5006, $P5007
    nqp_get_sc_object $P5008, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5009, $P5006, $P5008, "@!BLOCKS"
    set $N5001, $P5009
    box $P5010, $N5001
    set $P102, $P5010
  while53_test255:
    set $N5002, $P102
    set $N5003, 0
    isgt $I5001, $N5002, $N5003
    box $P5014, $I5001
    set $P5013, $P5014
    unless $I5001 goto while53_done259 
  while53_redo257:
    .const 'Sub' $P5011 = 'cuid_381_1347804164.33' 
    capture_lex $P5011
    $P5012 = $P5011()
    set $P5013, $P5012
    goto while53_test255 
  while53_done259:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_381_1347804164.33") :anon :lex :outer("cuid_382_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 554
    .lex "%sym", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5002, "$i"
    set $N5002, $P5002
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$i", $P5003
.annotate 'line', 556
    find_lex $P5006, "self"
    nqp_decontainerize $P5005, $P5006
    nqp_get_sc_object $P5007, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    repr_get_attr_obj $P5008, $P5005, $P5007, "@!BLOCKS"
    find_lex $P5009, "$i"
    set $I5001, $P5009
    set $P5004, $P5008[$I5001]
    unless_null $P5004, fallback260
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5010
  fallback260:
    find_lex $P5011, "$first"
    $P5012 = $P5004."symbol"($P5011)
    set $P101, $P5012
    set $N5004, $P101
    box $P5022, $N5004
    set $P5021, $P5022
    unless $N5004 goto if54_end262 
.annotate 'line', 557
    exists $I5002, $P101["value"]
    unless $I5002 goto if55_else263 
.annotate 'line', 558
    set $P5013, $P101["value"]
    unless_null $P5013, fallback265
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5013, $P5014
  fallback265:
    store_lex "$result", $P5013
.annotate 'line', 560
    find_lex $P5015, "@name"
    $P5016 = $P5015."shift"()
    box $P5017, 0
    store_lex "$i", $P5017
    set $P5020, $P5017
    goto if55_end264
  if55_else263:
.annotate 'line', 563
    find_lex $P5018, "$first"
    set $S5002, $P5018
    concat $S5001, "No compile-time value for ", $S5002
    box $P5019, $S5001
    die $P5019
    set $P5020, $P5019
  if55_end264:
    set $P5021, $P5020
  if54_end262:
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_383_1347804164.33") :anon :lex :outer("cuid_31_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 571
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$result"
    get_who $P5001, $P5002
    set $S5001, _lex_param_0
    exists $I5001, $P5001[$S5001]
    unless $I5001 goto if56_else266 
.annotate 'line', 572
    find_lex $P5005, "$result"
    get_who $P5004, $P5005
    set $S5002, _lex_param_0
    set $P5003, $P5004[$S5002]
    unless_null $P5003, fallback268
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5006
  fallback268:
    store_lex "$result", $P5003
    set $P5009, $P5003
    goto if56_end267
  if56_else266:
.annotate 'line', 575
    find_lex $P5007, "@name"
    join $S5004, "::", $P5007
    concat $S5003, "Could not locate compile-time value for symbol ", $S5004
    box $P5008, $S5003
    die $P5008
    set $P5009, $P5008
  if56_end267:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_222_1347804164.33") :anon :lex :outer("cuid_1_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 586
    .const 'Sub' $P5273 = 'cuid_33_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_34_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_35_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_36_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_37_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_38_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_40_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_42_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_43_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_44_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_46_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_47_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_48_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_49_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_50_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_51_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_52_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_53_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_54_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_55_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_56_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_57_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_58_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_59_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_60_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_61_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_62_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_64_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_65_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_66_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_67_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_68_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_69_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_70_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_71_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_72_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_73_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_74_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_75_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_76_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_77_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_78_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_79_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_80_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_81_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_82_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_83_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_84_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_85_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_86_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_87_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_90_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_91_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_92_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_93_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_94_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_95_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_96_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_97_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_98_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_99_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_100_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_101_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_102_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_103_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_104_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_105_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_106_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_107_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_108_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_109_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_110_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_111_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_112_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_113_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_114_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_115_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_116_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_117_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_118_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_119_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_120_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_121_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_122_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_123_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_124_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_125_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_127_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_128_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_129_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_130_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_131_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_132_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_133_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_134_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_135_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_136_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_137_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_138_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_139_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_140_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_141_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_142_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_143_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_144_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_145_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_146_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_147_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_148_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_149_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_150_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_151_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_152_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_153_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_154_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_155_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_156_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_157_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_158_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_159_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_160_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_161_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_162_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_163_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_164_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_165_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_166_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_167_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_168_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_169_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_170_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_171_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_172_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_173_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_174_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_175_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_176_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_177_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_178_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_179_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_180_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_181_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_182_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_183_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_184_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_185_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_186_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_187_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_188_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_189_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_190_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_191_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_192_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_193_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_194_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_195_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_196_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_197_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_198_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_199_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_200_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_201_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_202_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_203_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_204_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_205_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_206_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_207_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_208_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_209_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_210_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_211_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_212_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_213_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_214_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_215_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_216_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_217_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_218_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_219_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_220_1347804164.33' 
    capture_lex $P5273 
    .const 'Sub' $P5273 = 'cuid_221_1347804164.33' 
    capture_lex $P5273 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
.annotate 'line', 1234
.annotate 'line', 1235
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "NQP"
    get_who $P5002, $P5003
    set $P5001, $P5002["Grammar"]
    unless_null $P5001, fallback272
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback272:
    $P5006 = $P5001."O"(":prec<y=>, :assoc<unary>", "%methodop")
.annotate 'line', 1236
    nqp_get_sc_object $P5010, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5009, $P5010, "NQP"
    get_who $P5008, $P5009
    set $P5007, $P5008["Grammar"]
    unless_null $P5007, fallback273
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5011
  fallback273:
    $P5012 = $P5007."O"(":prec<x=>, :assoc<unary>", "%autoincrement")
.annotate 'line', 1237
    nqp_get_sc_object $P5016, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5015, $P5016, "NQP"
    get_who $P5014, $P5015
    set $P5013, $P5014["Grammar"]
    unless_null $P5013, fallback274
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5013, $P5017
  fallback274:
    $P5018 = $P5013."O"(":prec<w=>, :assoc<left>", "%exponentiation")
.annotate 'line', 1238
    nqp_get_sc_object $P5022, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5021, $P5022, "NQP"
    get_who $P5020, $P5021
    set $P5019, $P5020["Grammar"]
    unless_null $P5019, fallback275
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5019, $P5023
  fallback275:
    $P5024 = $P5019."O"(":prec<v=>, :assoc<unary>", "%symbolic_unary")
.annotate 'line', 1239
    nqp_get_sc_object $P5028, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5027, $P5028, "NQP"
    get_who $P5026, $P5027
    set $P5025, $P5026["Grammar"]
    unless_null $P5025, fallback276
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5025, $P5029
  fallback276:
    $P5030 = $P5025."O"(":prec<u=>, :assoc<left>", "%multiplicative")
.annotate 'line', 1240
    nqp_get_sc_object $P5034, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5033, $P5034, "NQP"
    get_who $P5032, $P5033
    set $P5031, $P5032["Grammar"]
    unless_null $P5031, fallback277
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5031, $P5035
  fallback277:
    $P5036 = $P5031."O"(":prec<t=>, :assoc<left>", "%additive")
.annotate 'line', 1241
    nqp_get_sc_object $P5040, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5039, $P5040, "NQP"
    get_who $P5038, $P5039
    set $P5037, $P5038["Grammar"]
    unless_null $P5037, fallback278
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5037, $P5041
  fallback278:
    $P5042 = $P5037."O"(":prec<r=>, :assoc<left>", "%concatenation")
.annotate 'line', 1242
    nqp_get_sc_object $P5046, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5045, $P5046, "NQP"
    get_who $P5044, $P5045
    set $P5043, $P5044["Grammar"]
    unless_null $P5043, fallback279
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5043, $P5047
  fallback279:
    $P5048 = $P5043."O"(":prec<m=>, :assoc<left>", "%relational")
.annotate 'line', 1243
    nqp_get_sc_object $P5052, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5051, $P5052, "NQP"
    get_who $P5050, $P5051
    set $P5049, $P5050["Grammar"]
    unless_null $P5049, fallback280
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5049, $P5053
  fallback280:
    $P5054 = $P5049."O"(":prec<l=>, :assoc<left>", "%tight_and")
.annotate 'line', 1244
    nqp_get_sc_object $P5058, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5057, $P5058, "NQP"
    get_who $P5056, $P5057
    set $P5055, $P5056["Grammar"]
    unless_null $P5055, fallback281
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5055, $P5059
  fallback281:
    $P5060 = $P5055."O"(":prec<k=>, :assoc<left>", "%tight_or")
.annotate 'line', 1245
    nqp_get_sc_object $P5064, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5063, $P5064, "NQP"
    get_who $P5062, $P5063
    set $P5061, $P5062["Grammar"]
    unless_null $P5061, fallback282
    nqp_get_sc_object $P5065, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5061, $P5065
  fallback282:
    $P5066 = $P5061."O"(":prec<j=>, :assoc<right>", "%conditional")
.annotate 'line', 1246
    nqp_get_sc_object $P5070, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5069, $P5070, "NQP"
    get_who $P5068, $P5069
    set $P5067, $P5068["Grammar"]
    unless_null $P5067, fallback283
    nqp_get_sc_object $P5071, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5067, $P5071
  fallback283:
    $P5072 = $P5067."O"(":prec<i=>, :assoc<right>", "%assignment")
.annotate 'line', 1247
    nqp_get_sc_object $P5076, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5075, $P5076, "NQP"
    get_who $P5074, $P5075
    set $P5073, $P5074["Grammar"]
    unless_null $P5073, fallback284
    nqp_get_sc_object $P5077, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5073, $P5077
  fallback284:
    $P5078 = $P5073."O"(":prec<g=>, :assoc<list>, :nextterm<nulltermish>", "%comma")
.annotate 'line', 1248
    nqp_get_sc_object $P5082, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5081, $P5082, "NQP"
    get_who $P5080, $P5081
    set $P5079, $P5080["Grammar"]
    unless_null $P5079, fallback285
    nqp_get_sc_object $P5083, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5079, $P5083
  fallback285:
    $P5084 = $P5079."O"(":prec<f=>, :assoc<list>", "%list_infix")
.annotate 'line', 1249
    nqp_get_sc_object $P5088, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5087, $P5088, "NQP"
    get_who $P5086, $P5087
    set $P5085, $P5086["Grammar"]
    unless_null $P5085, fallback286
    nqp_get_sc_object $P5089, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5085, $P5089
  fallback286:
    $P5090 = $P5085."O"(":prec<e=>, :assoc<unary>", "%list_prefix")
.annotate 'line', 586
    .const 'Sub' $P5091 = 'cuid_33_1347804164.33' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_34_1347804164.33' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_35_1347804164.33' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_36_1347804164.33' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_37_1347804164.33' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_38_1347804164.33' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_40_1347804164.33' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_42_1347804164.33' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_43_1347804164.33' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_44_1347804164.33' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_46_1347804164.33' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_47_1347804164.33' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_48_1347804164.33' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_49_1347804164.33' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_50_1347804164.33' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_51_1347804164.33' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_52_1347804164.33' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_53_1347804164.33' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_54_1347804164.33' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_55_1347804164.33' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_56_1347804164.33' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_57_1347804164.33' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_58_1347804164.33' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_59_1347804164.33' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_60_1347804164.33' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_61_1347804164.33' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_62_1347804164.33' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_64_1347804164.33' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_65_1347804164.33' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_66_1347804164.33' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_67_1347804164.33' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_68_1347804164.33' 
    capture_lex $P5122
    .const 'Sub' $P5123 = 'cuid_69_1347804164.33' 
    capture_lex $P5123
    .const 'Sub' $P5124 = 'cuid_70_1347804164.33' 
    capture_lex $P5124
    .const 'Sub' $P5125 = 'cuid_71_1347804164.33' 
    capture_lex $P5125
    .const 'Sub' $P5126 = 'cuid_72_1347804164.33' 
    capture_lex $P5126
    .const 'Sub' $P5127 = 'cuid_73_1347804164.33' 
    capture_lex $P5127
    .const 'Sub' $P5128 = 'cuid_74_1347804164.33' 
    capture_lex $P5128
    .const 'Sub' $P5129 = 'cuid_75_1347804164.33' 
    capture_lex $P5129
    .const 'Sub' $P5130 = 'cuid_76_1347804164.33' 
    capture_lex $P5130
    .const 'Sub' $P5131 = 'cuid_77_1347804164.33' 
    capture_lex $P5131
    .const 'Sub' $P5132 = 'cuid_78_1347804164.33' 
    capture_lex $P5132
    .const 'Sub' $P5133 = 'cuid_79_1347804164.33' 
    capture_lex $P5133
    .const 'Sub' $P5134 = 'cuid_80_1347804164.33' 
    capture_lex $P5134
    .const 'Sub' $P5135 = 'cuid_81_1347804164.33' 
    capture_lex $P5135
    .const 'Sub' $P5136 = 'cuid_82_1347804164.33' 
    capture_lex $P5136
    .const 'Sub' $P5137 = 'cuid_83_1347804164.33' 
    capture_lex $P5137
    .const 'Sub' $P5138 = 'cuid_84_1347804164.33' 
    capture_lex $P5138
    .const 'Sub' $P5139 = 'cuid_85_1347804164.33' 
    capture_lex $P5139
    .const 'Sub' $P5140 = 'cuid_86_1347804164.33' 
    capture_lex $P5140
    .const 'Sub' $P5141 = 'cuid_87_1347804164.33' 
    capture_lex $P5141
    .const 'Sub' $P5142 = 'cuid_90_1347804164.33' 
    capture_lex $P5142
    .const 'Sub' $P5143 = 'cuid_91_1347804164.33' 
    capture_lex $P5143
    .const 'Sub' $P5144 = 'cuid_92_1347804164.33' 
    capture_lex $P5144
    .const 'Sub' $P5145 = 'cuid_93_1347804164.33' 
    capture_lex $P5145
    .const 'Sub' $P5146 = 'cuid_94_1347804164.33' 
    capture_lex $P5146
    .const 'Sub' $P5147 = 'cuid_95_1347804164.33' 
    capture_lex $P5147
    .const 'Sub' $P5148 = 'cuid_96_1347804164.33' 
    capture_lex $P5148
    .const 'Sub' $P5149 = 'cuid_97_1347804164.33' 
    capture_lex $P5149
    .const 'Sub' $P5150 = 'cuid_98_1347804164.33' 
    capture_lex $P5150
    .const 'Sub' $P5151 = 'cuid_99_1347804164.33' 
    capture_lex $P5151
    .const 'Sub' $P5152 = 'cuid_100_1347804164.33' 
    capture_lex $P5152
    .const 'Sub' $P5153 = 'cuid_101_1347804164.33' 
    capture_lex $P5153
    .const 'Sub' $P5154 = 'cuid_102_1347804164.33' 
    capture_lex $P5154
    .const 'Sub' $P5155 = 'cuid_103_1347804164.33' 
    capture_lex $P5155
    .const 'Sub' $P5156 = 'cuid_104_1347804164.33' 
    capture_lex $P5156
    .const 'Sub' $P5157 = 'cuid_105_1347804164.33' 
    capture_lex $P5157
    .const 'Sub' $P5158 = 'cuid_106_1347804164.33' 
    capture_lex $P5158
    .const 'Sub' $P5159 = 'cuid_107_1347804164.33' 
    capture_lex $P5159
    .const 'Sub' $P5160 = 'cuid_108_1347804164.33' 
    capture_lex $P5160
    .const 'Sub' $P5161 = 'cuid_109_1347804164.33' 
    capture_lex $P5161
    .const 'Sub' $P5162 = 'cuid_110_1347804164.33' 
    capture_lex $P5162
    .const 'Sub' $P5163 = 'cuid_111_1347804164.33' 
    capture_lex $P5163
    .const 'Sub' $P5164 = 'cuid_112_1347804164.33' 
    capture_lex $P5164
    .const 'Sub' $P5165 = 'cuid_113_1347804164.33' 
    capture_lex $P5165
    .const 'Sub' $P5166 = 'cuid_114_1347804164.33' 
    capture_lex $P5166
    .const 'Sub' $P5167 = 'cuid_115_1347804164.33' 
    capture_lex $P5167
    .const 'Sub' $P5168 = 'cuid_116_1347804164.33' 
    capture_lex $P5168
    .const 'Sub' $P5169 = 'cuid_117_1347804164.33' 
    capture_lex $P5169
    .const 'Sub' $P5170 = 'cuid_118_1347804164.33' 
    capture_lex $P5170
    .const 'Sub' $P5171 = 'cuid_119_1347804164.33' 
    capture_lex $P5171
    .const 'Sub' $P5172 = 'cuid_120_1347804164.33' 
    capture_lex $P5172
    .const 'Sub' $P5173 = 'cuid_121_1347804164.33' 
    capture_lex $P5173
    .const 'Sub' $P5174 = 'cuid_122_1347804164.33' 
    capture_lex $P5174
    .const 'Sub' $P5175 = 'cuid_123_1347804164.33' 
    capture_lex $P5175
    .const 'Sub' $P5176 = 'cuid_124_1347804164.33' 
    capture_lex $P5176
    .const 'Sub' $P5177 = 'cuid_125_1347804164.33' 
    capture_lex $P5177
    .const 'Sub' $P5178 = 'cuid_127_1347804164.33' 
    capture_lex $P5178
    .const 'Sub' $P5179 = 'cuid_128_1347804164.33' 
    capture_lex $P5179
    .const 'Sub' $P5180 = 'cuid_129_1347804164.33' 
    capture_lex $P5180
    .const 'Sub' $P5181 = 'cuid_130_1347804164.33' 
    capture_lex $P5181
    .const 'Sub' $P5182 = 'cuid_131_1347804164.33' 
    capture_lex $P5182
    .const 'Sub' $P5183 = 'cuid_132_1347804164.33' 
    capture_lex $P5183
    .const 'Sub' $P5184 = 'cuid_133_1347804164.33' 
    capture_lex $P5184
    .const 'Sub' $P5185 = 'cuid_134_1347804164.33' 
    capture_lex $P5185
    .const 'Sub' $P5186 = 'cuid_135_1347804164.33' 
    capture_lex $P5186
    .const 'Sub' $P5187 = 'cuid_136_1347804164.33' 
    capture_lex $P5187
    .const 'Sub' $P5188 = 'cuid_137_1347804164.33' 
    capture_lex $P5188
    .const 'Sub' $P5189 = 'cuid_138_1347804164.33' 
    capture_lex $P5189
    .const 'Sub' $P5190 = 'cuid_139_1347804164.33' 
    capture_lex $P5190
    .const 'Sub' $P5191 = 'cuid_140_1347804164.33' 
    capture_lex $P5191
    .const 'Sub' $P5192 = 'cuid_141_1347804164.33' 
    capture_lex $P5192
    .const 'Sub' $P5193 = 'cuid_142_1347804164.33' 
    capture_lex $P5193
    .const 'Sub' $P5194 = 'cuid_143_1347804164.33' 
    capture_lex $P5194
    .const 'Sub' $P5195 = 'cuid_144_1347804164.33' 
    capture_lex $P5195
    .const 'Sub' $P5196 = 'cuid_145_1347804164.33' 
    capture_lex $P5196
    .const 'Sub' $P5197 = 'cuid_146_1347804164.33' 
    capture_lex $P5197
    .const 'Sub' $P5198 = 'cuid_147_1347804164.33' 
    capture_lex $P5198
    .const 'Sub' $P5199 = 'cuid_148_1347804164.33' 
    capture_lex $P5199
    .const 'Sub' $P5200 = 'cuid_149_1347804164.33' 
    capture_lex $P5200
    .const 'Sub' $P5201 = 'cuid_150_1347804164.33' 
    capture_lex $P5201
    .const 'Sub' $P5202 = 'cuid_151_1347804164.33' 
    capture_lex $P5202
    .const 'Sub' $P5203 = 'cuid_152_1347804164.33' 
    capture_lex $P5203
    .const 'Sub' $P5204 = 'cuid_153_1347804164.33' 
    capture_lex $P5204
    .const 'Sub' $P5205 = 'cuid_154_1347804164.33' 
    capture_lex $P5205
    .const 'Sub' $P5206 = 'cuid_155_1347804164.33' 
    capture_lex $P5206
    .const 'Sub' $P5207 = 'cuid_156_1347804164.33' 
    capture_lex $P5207
    .const 'Sub' $P5208 = 'cuid_157_1347804164.33' 
    capture_lex $P5208
    .const 'Sub' $P5209 = 'cuid_158_1347804164.33' 
    capture_lex $P5209
    .const 'Sub' $P5210 = 'cuid_159_1347804164.33' 
    capture_lex $P5210
    .const 'Sub' $P5211 = 'cuid_160_1347804164.33' 
    capture_lex $P5211
    .const 'Sub' $P5212 = 'cuid_161_1347804164.33' 
    capture_lex $P5212
    .const 'Sub' $P5213 = 'cuid_162_1347804164.33' 
    capture_lex $P5213
    .const 'Sub' $P5214 = 'cuid_163_1347804164.33' 
    capture_lex $P5214
    .const 'Sub' $P5215 = 'cuid_164_1347804164.33' 
    capture_lex $P5215
    .const 'Sub' $P5216 = 'cuid_165_1347804164.33' 
    capture_lex $P5216
    .const 'Sub' $P5217 = 'cuid_166_1347804164.33' 
    capture_lex $P5217
    .const 'Sub' $P5218 = 'cuid_167_1347804164.33' 
    capture_lex $P5218
    .const 'Sub' $P5219 = 'cuid_168_1347804164.33' 
    capture_lex $P5219
    .const 'Sub' $P5220 = 'cuid_169_1347804164.33' 
    capture_lex $P5220
    .const 'Sub' $P5221 = 'cuid_170_1347804164.33' 
    capture_lex $P5221
    .const 'Sub' $P5222 = 'cuid_171_1347804164.33' 
    capture_lex $P5222
    .const 'Sub' $P5223 = 'cuid_172_1347804164.33' 
    capture_lex $P5223
    .const 'Sub' $P5224 = 'cuid_173_1347804164.33' 
    capture_lex $P5224
    .const 'Sub' $P5225 = 'cuid_174_1347804164.33' 
    capture_lex $P5225
    .const 'Sub' $P5226 = 'cuid_175_1347804164.33' 
    capture_lex $P5226
    .const 'Sub' $P5227 = 'cuid_176_1347804164.33' 
    capture_lex $P5227
    .const 'Sub' $P5228 = 'cuid_177_1347804164.33' 
    capture_lex $P5228
    .const 'Sub' $P5229 = 'cuid_178_1347804164.33' 
    capture_lex $P5229
    .const 'Sub' $P5230 = 'cuid_179_1347804164.33' 
    capture_lex $P5230
    .const 'Sub' $P5231 = 'cuid_180_1347804164.33' 
    capture_lex $P5231
    .const 'Sub' $P5232 = 'cuid_181_1347804164.33' 
    capture_lex $P5232
    .const 'Sub' $P5233 = 'cuid_182_1347804164.33' 
    capture_lex $P5233
    .const 'Sub' $P5234 = 'cuid_183_1347804164.33' 
    capture_lex $P5234
    .const 'Sub' $P5235 = 'cuid_184_1347804164.33' 
    capture_lex $P5235
    .const 'Sub' $P5236 = 'cuid_185_1347804164.33' 
    capture_lex $P5236
    .const 'Sub' $P5237 = 'cuid_186_1347804164.33' 
    capture_lex $P5237
    .const 'Sub' $P5238 = 'cuid_187_1347804164.33' 
    capture_lex $P5238
    .const 'Sub' $P5239 = 'cuid_188_1347804164.33' 
    capture_lex $P5239
    .const 'Sub' $P5240 = 'cuid_189_1347804164.33' 
    capture_lex $P5240
    .const 'Sub' $P5241 = 'cuid_190_1347804164.33' 
    capture_lex $P5241
    .const 'Sub' $P5242 = 'cuid_191_1347804164.33' 
    capture_lex $P5242
    .const 'Sub' $P5243 = 'cuid_192_1347804164.33' 
    capture_lex $P5243
    .const 'Sub' $P5244 = 'cuid_193_1347804164.33' 
    capture_lex $P5244
    .const 'Sub' $P5245 = 'cuid_194_1347804164.33' 
    capture_lex $P5245
    .const 'Sub' $P5246 = 'cuid_195_1347804164.33' 
    capture_lex $P5246
    .const 'Sub' $P5247 = 'cuid_196_1347804164.33' 
    capture_lex $P5247
    .const 'Sub' $P5248 = 'cuid_197_1347804164.33' 
    capture_lex $P5248
    .const 'Sub' $P5249 = 'cuid_198_1347804164.33' 
    capture_lex $P5249
    .const 'Sub' $P5250 = 'cuid_199_1347804164.33' 
    capture_lex $P5250
    .const 'Sub' $P5251 = 'cuid_200_1347804164.33' 
    capture_lex $P5251
    .const 'Sub' $P5252 = 'cuid_201_1347804164.33' 
    capture_lex $P5252
    .const 'Sub' $P5253 = 'cuid_202_1347804164.33' 
    capture_lex $P5253
    .const 'Sub' $P5254 = 'cuid_203_1347804164.33' 
    capture_lex $P5254
    .const 'Sub' $P5255 = 'cuid_204_1347804164.33' 
    capture_lex $P5255
    .const 'Sub' $P5256 = 'cuid_205_1347804164.33' 
    capture_lex $P5256
    .const 'Sub' $P5257 = 'cuid_206_1347804164.33' 
    capture_lex $P5257
    .const 'Sub' $P5258 = 'cuid_207_1347804164.33' 
    capture_lex $P5258
    .const 'Sub' $P5259 = 'cuid_208_1347804164.33' 
    capture_lex $P5259
    .const 'Sub' $P5260 = 'cuid_209_1347804164.33' 
    capture_lex $P5260
    .const 'Sub' $P5261 = 'cuid_210_1347804164.33' 
    capture_lex $P5261
    .const 'Sub' $P5262 = 'cuid_211_1347804164.33' 
    capture_lex $P5262
    .const 'Sub' $P5263 = 'cuid_212_1347804164.33' 
    capture_lex $P5263
    .const 'Sub' $P5264 = 'cuid_213_1347804164.33' 
    capture_lex $P5264
    .const 'Sub' $P5265 = 'cuid_214_1347804164.33' 
    capture_lex $P5265
    .const 'Sub' $P5266 = 'cuid_215_1347804164.33' 
    capture_lex $P5266
    .const 'Sub' $P5267 = 'cuid_216_1347804164.33' 
    capture_lex $P5267
    .const 'Sub' $P5268 = 'cuid_217_1347804164.33' 
    capture_lex $P5268
    .const 'Sub' $P5269 = 'cuid_218_1347804164.33' 
    capture_lex $P5269
    .const 'Sub' $P5270 = 'cuid_219_1347804164.33' 
    capture_lex $P5270
    .const 'Sub' $P5271 = 'cuid_220_1347804164.33' 
    capture_lex $P5271
    .const 'Sub' $P5272 = 'cuid_221_1347804164.33' 
    capture_lex $P5272
    .return ($P5272) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_33_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 587
    .param pmc _lex_param_0 
    .lex "%*LANG", $P101 
    .lex "%*HOW", $P102 
    .lex "$file", $P103 
    .lex "$source_id", $P104 
    .lex "$*W", $P105 
    .lex "$*SCOPE", $P106 
    .lex "$*MULTINESS", $P107 
    .lex "$*PKGDECL", $P108 
    .lex "$*INVOCANT_OK", $P109 
    .lex "$*RETURN_USED", $P110 
    .lex "$*CONTROL_USED", $P111 
    .lex "%*HANDLERS", $P112 
    .lex "self", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P105, $P5005
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P106, $P5006
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P107, $P5007
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P108, $P5008
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P109, $P5009
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P110, $P5010
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P111, $P5011
    new $P5012, 'Hash'
    set $P112, $P5012
    unless_null $P101, fallback287
    nqp_get_sc_object $P5015, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["%LANG"]
    unless_null $P5013, fallback288
    nqp_get_sc_object $P5017, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5016, $P5017
    new $P5018, 'Hash'
    set $P5016["%LANG"], $P5018
    set $P5013, $P5018
  fallback288:
    unless_null $P5013, vivi_57289
    die "Contextual %*LANG not found"
    box $P5019, "Contextual %*LANG not found"
    set $P5013, $P5019
  vivi_57289:
    set $P101, $P5013
  fallback287:
    unless_null $P101, fallback290
    nqp_get_sc_object $P5022, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["%LANG"]
    unless_null $P5020, fallback291
    nqp_get_sc_object $P5024, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5023, $P5024
    new $P5025, 'Hash'
    set $P5023["%LANG"], $P5025
    set $P5020, $P5025
  fallback291:
    unless_null $P5020, vivi_58292
    die "Contextual %*LANG not found"
    box $P5026, "Contextual %*LANG not found"
    set $P5020, $P5026
  vivi_58292:
    set $P101, $P5020
  fallback290:
    nqp_get_sc_object $P5030, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5029, $P5030, "NQP"
    get_who $P5028, $P5029
    set $P5027, $P5028["Regex"]
    unless_null $P5027, fallback293
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5027, $P5031
  fallback293:
    set $P101["Regex"], $P5027
    unless_null $P101, fallback294
    nqp_get_sc_object $P5034, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%LANG"]
    unless_null $P5032, fallback295
    nqp_get_sc_object $P5036, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%LANG"], $P5037
    set $P5032, $P5037
  fallback295:
    unless_null $P5032, vivi_59296
    die "Contextual %*LANG not found"
    box $P5038, "Contextual %*LANG not found"
    set $P5032, $P5038
  vivi_59296:
    set $P101, $P5032
  fallback294:
    nqp_get_sc_object $P5042, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5041, $P5042, "NQP"
    get_who $P5040, $P5041
    set $P5039, $P5040["RegexActions"]
    unless_null $P5039, fallback297
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5039, $P5043
  fallback297:
    set $P101["Regex-actions"], $P5039
    unless_null $P101, fallback298
    nqp_get_sc_object $P5046, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["%LANG"]
    unless_null $P5044, fallback299
    nqp_get_sc_object $P5048, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5047, $P5048
    new $P5049, 'Hash'
    set $P5047["%LANG"], $P5049
    set $P5044, $P5049
  fallback299:
    unless_null $P5044, vivi_60300
    die "Contextual %*LANG not found"
    box $P5050, "Contextual %*LANG not found"
    set $P5044, $P5050
  vivi_60300:
    set $P101, $P5044
  fallback298:
    nqp_get_sc_object $P5054, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5053, $P5054, "NQP"
    get_who $P5052, $P5053
    set $P5051, $P5052["Grammar"]
    unless_null $P5051, fallback301
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5051, $P5055
  fallback301:
    set $P101["MAIN"], $P5051
    unless_null $P101, fallback302
    nqp_get_sc_object $P5058, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5057, $P5058
    set $P5056, $P5057["%LANG"]
    unless_null $P5056, fallback303
    nqp_get_sc_object $P5060, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5059, $P5060
    new $P5061, 'Hash'
    set $P5059["%LANG"], $P5061
    set $P5056, $P5061
  fallback303:
    unless_null $P5056, vivi_61304
    die "Contextual %*LANG not found"
    box $P5062, "Contextual %*LANG not found"
    set $P5056, $P5062
  vivi_61304:
    set $P101, $P5056
  fallback302:
    nqp_get_sc_object $P5066, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5065, $P5066, "NQP"
    get_who $P5064, $P5065
    set $P5063, $P5064["Actions"]
    unless_null $P5063, fallback305
    nqp_get_sc_object $P5067, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5063, $P5067
  fallback305:
    set $P101["MAIN-actions"], $P5063
    unless_null $P102, fallback306
    nqp_get_sc_object $P5070, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5069, $P5070
    set $P5068, $P5069["%HOW"]
    unless_null $P5068, fallback307
    nqp_get_sc_object $P5072, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5071, $P5072
    new $P5073, 'Hash'
    set $P5071["%HOW"], $P5073
    set $P5068, $P5073
  fallback307:
    unless_null $P5068, vivi_62308
    die "Contextual %*HOW not found"
    box $P5074, "Contextual %*HOW not found"
    set $P5068, $P5074
  vivi_62308:
    set $P102, $P5068
  fallback306:
    unless_null $P102, fallback309
    nqp_get_sc_object $P5077, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["%HOW"]
    unless_null $P5075, fallback310
    nqp_get_sc_object $P5079, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5078, $P5079
    new $P5080, 'Hash'
    set $P5078["%HOW"], $P5080
    set $P5075, $P5080
  fallback310:
    unless_null $P5075, vivi_63311
    die "Contextual %*HOW not found"
    box $P5081, "Contextual %*HOW not found"
    set $P5075, $P5081
  vivi_63311:
    set $P102, $P5075
  fallback309:
    get_knowhow $P5082
    set $P102["knowhow"], $P5082
    unless_null $P102, fallback312
    nqp_get_sc_object $P5085, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["%HOW"]
    unless_null $P5083, fallback313
    nqp_get_sc_object $P5087, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5086, $P5087
    new $P5088, 'Hash'
    set $P5086["%HOW"], $P5088
    set $P5083, $P5088
  fallback313:
    unless_null $P5083, vivi_64314
    die "Contextual %*HOW not found"
    box $P5089, "Contextual %*HOW not found"
    set $P5083, $P5089
  vivi_64314:
    set $P102, $P5083
  fallback312:
    get_knowhow_attribute $P5090
    set $P102["knowhow-attr"], $P5090
    find_caller_lex $P5091, "$?FILES"
    set $P103, $P5091
    nqp_decontainerize $P5092, _lex_param_0
    find_lex $P5095, "$?PACKAGE"
    get_who $P5094, $P5095
    set $P5093, $P5094["NQPCursor"]
    unless_null $P5093, fallback315
    nqp_get_sc_object $P5098, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5097, $P5098
    set $P5096, $P5097["NQPCursor"]
    unless_null $P5096, vivi_65316
    nqp_get_sc_object $P5099, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5096, $P5099
  vivi_65316:
    set $P5093, $P5096
  fallback315:
    repr_get_attr_str $S5004, $P5092, $P5093, "$!target"
    nqp_sha1 $S5003, $S5004
    concat $S5002, $S5003, "-"
    time $N5001
    set $S5005, $N5001
    concat $S5001, $S5002, $S5005
    box $P5100, $S5001
    set $P104, $P5100
    isnull $I5001, $P103
    unless $I5001 goto if66_else317 
.annotate 'line', 609
    nqp_get_sc_object $P5104, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5103, $P5104, "NQP"
    get_who $P5102, $P5103
    set $P5101, $P5102["World"]
    unless_null $P5101, fallback319
    nqp_get_sc_object $P5105, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5101, $P5105
  fallback319:
    $P5106 = $P5101."new"($P104 :named("handle"))
    set $P5113, $P5106
    goto if66_end318
  if66_else317:
.annotate 'line', 610
    nqp_get_sc_object $P5110, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5109, $P5110, "NQP"
    get_who $P5108, $P5109
    set $P5107, $P5108["World"]
    unless_null $P5107, fallback320
    nqp_get_sc_object $P5111, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5107, $P5111
  fallback320:
    $P5112 = $P5107."new"($P104 :named("handle"), $P103 :named("description"))
    set $P5113, $P5112
  if66_end318:
    set $P105, $P5113
    box $P5114, ""
    set $P106, $P5114
    box $P5115, ""
    set $P107, $P5115
    box $P5116, ""
    set $P108, $P5116
    box $P5117, 0
    set $P109, $P5117
    box $P5118, 0
    set $P110, $P5118
    box $P5119, 0
    set $P111, $P5119
    unless_null $P112, fallback321
    nqp_get_sc_object $P5122, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5121, $P5122
    set $P5120, $P5121["%HANDLERS"]
    unless_null $P5120, fallback322
    nqp_get_sc_object $P5124, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5123, $P5124
    new $P5125, 'Hash'
    set $P5123["%HANDLERS"], $P5125
    set $P5120, $P5125
  fallback322:
    unless_null $P5120, vivi_67323
    die "Contextual %*HANDLERS not found"
    box $P5126, "Contextual %*HANDLERS not found"
    set $P5120, $P5126
  vivi_67323:
    set $P112, $P5120
  fallback321:
.annotate 'line', 619
    nqp_decontainerize $P5127, _lex_param_0
    $P5128 = $P5127."comp_unit"()
    .return ($P5128) 
.end
.HLL "nqp"
.namespace []
.sub "identifier" :subid("cuid_34_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 624
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx68_tgt
    .local int rx68_pos
    .local int rx68_off
    .local int rx68_eos
    .local int rx68_rep
    .local pmc rx68_cur
    .local pmc rx68_curclass
    .local pmc rx68_bstack
    .local pmc rx68_cstack
    (rx68_cur, rx68_tgt, rx68_pos, rx68_curclass, rx68_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx68_cur
    length rx68_eos, rx68_tgt
    eq $I19, 1, rx68_restart326
    gt rx68_pos, rx68_eos, rx68_fail327
    repr_get_attr_int $I11, self, rx68_curclass, "$!from"
    ne $I11, -1, rxscan69_done333
    goto rxscan69_scan332
  rxscan69_loop331:
    inc rx68_pos
    gt rx68_pos, rx68_eos, rx68_fail327
    repr_bind_attr_int rx68_cur, rx68_curclass, "$!from", rx68_pos
  rxscan69_scan332:
    nqp_rxmark rx68_bstack, rxscan69_loop331, rx68_pos, 0
  rxscan69_done333:
    repr_bind_attr_int rx68_cur, rx68_curclass, "$!pos", rx68_pos
    $P11 = rx68_cur."ident"()
    repr_get_attr_int $I11, $P11, rx68_curclass, "$!pos"
    lt $I11, 0, rx68_fail327
    repr_get_attr_int rx68_pos, $P11, rx68_curclass, "$!pos"
    nqp_rxmark rx68_bstack, rxquantr71_done336, rx68_pos, 0
  rxquantr71_loop335:
  alt72_0338:
    nqp_rxmark rx68_bstack, alt72_1339, rx68_pos, 0
    add $I11, rx68_pos, 1
    gt $I11, rx68_eos, rx68_fail327
    substr $S10, rx68_tgt, rx68_pos, 1
    ne $S10, ucs4:"-", rx68_fail327
    add rx68_pos, 1
    goto alt72_end337
  alt72_1339:
    ge rx68_pos, rx68_eos, rx68_fail327
    substr $S11, rx68_tgt, rx68_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx68_fail327
    inc rx68_pos
  alt72_end337:
    repr_bind_attr_int rx68_cur, rx68_curclass, "$!pos", rx68_pos
    $P11 = rx68_cur."ident"()
    repr_get_attr_int $I11, $P11, rx68_curclass, "$!pos"
    lt $I11, 0, rx68_fail327
    repr_get_attr_int rx68_pos, $P11, rx68_curclass, "$!pos"
    nqp_rxpeek $I19, rx68_bstack, rxquantr71_done336
    inc $I19
    inc $I19
    set rx68_rep, rx68_bstack[$I19]
    nqp_rxcommit rx68_bstack, rxquantr71_done336
    inc rx68_rep
    nqp_rxmark rx68_bstack, rxquantr71_done336, rx68_pos, rx68_rep
    goto rxquantr71_loop335
  rxquantr71_done336:
    rx68_cur."!cursor_pass"(rx68_pos, "identifier", 'backtrack'=>1)
    .return (rx68_cur)
  rx68_restart326:
    repr_get_attr_obj rx68_cstack, rx68_cur, rx68_curclass, "$!cstack"
  rx68_fail327:
    unless rx68_bstack, rx68_done325
    pop $I19, rx68_bstack
    if_null rx68_cstack, rx68_cstack_done330
    unless rx68_cstack, rx68_cstack_done330
    dec $I19
    set $P11, rx68_cstack[$I19]
  rx68_cstack_done330:
    pop rx68_rep, rx68_bstack
    pop rx68_pos, rx68_bstack
    pop $I19, rx68_bstack
    lt rx68_pos, -1, rx68_done325
    lt rx68_pos, 0, rx68_fail327
    eq $I19, 0, rx68_fail327
    nqp_islist $I20, rx68_cstack
    unless $I20, rx68_jump328
    elements $I18, rx68_bstack
    le $I18, 0, rx68_cut329
    dec $I18
    set $I18, rx68_bstack[$I18]
  rx68_cut329:
    assign rx68_cstack, $I18
  rx68_jump328:
    jump $I19
  rx68_done325:
    rx68_cur."!cursor_fail"()
    .return (rx68_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_34_1347804164.33_caps" :subid("cuid_memo_1_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_34_1347804164.33_nfa" :subid("cuid_memo_2_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "ident"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "name" :subid("cuid_35_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 626
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx74_tgt
    .local int rx74_pos
    .local int rx74_off
    .local int rx74_eos
    .local int rx74_rep
    .local pmc rx74_cur
    .local pmc rx74_curclass
    .local pmc rx74_bstack
    .local pmc rx74_cstack
    (rx74_cur, rx74_tgt, rx74_pos, rx74_curclass, rx74_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx74_cur
    length rx74_eos, rx74_tgt
    eq $I19, 1, rx74_restart343
    gt rx74_pos, rx74_eos, rx74_fail344
    repr_get_attr_int $I11, self, rx74_curclass, "$!from"
    ne $I11, -1, rxscan75_done350
    goto rxscan75_scan349
  rxscan75_loop348:
    inc rx74_pos
    gt rx74_pos, rx74_eos, rx74_fail344
    repr_bind_attr_int rx74_cur, rx74_curclass, "$!from", rx74_pos
  rxscan75_scan349:
    nqp_rxmark rx74_bstack, rxscan75_loop348, rx74_pos, 0
  rxscan75_done350:
    repr_bind_attr_int rx74_cur, rx74_curclass, "$!pos", rx74_pos
    $P11 = rx74_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx74_curclass, "$!pos"
    lt $I11, 0, rx74_fail344
    nqp_rxmark rx74_bstack, rxsubrule76_pass351, -1, 0
  rxsubrule76_pass351:
    rx74_cstack = rx74_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx74_pos, $P11, rx74_curclass, "$!pos"
    nqp_rxmark rx74_bstack, rxquantr77_done353, rx74_pos, 0
  rxquantr77_loop352:
    add $I11, rx74_pos, 2
    gt $I11, rx74_eos, rx74_fail344
    substr $S10, rx74_tgt, rx74_pos, 2
    ne $S10, ucs4:"::", rx74_fail344
    add rx74_pos, 2
    repr_bind_attr_int rx74_cur, rx74_curclass, "$!pos", rx74_pos
    $P11 = rx74_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx74_curclass, "$!pos"
    lt $I11, 0, rx74_fail344
    nqp_rxmark rx74_bstack, rxsubrule78_pass354, -1, 0
  rxsubrule78_pass354:
    rx74_cstack = rx74_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx74_pos, $P11, rx74_curclass, "$!pos"
    nqp_rxpeek $I19, rx74_bstack, rxquantr77_done353
    inc $I19
    inc $I19
    set rx74_rep, rx74_bstack[$I19]
    nqp_rxcommit rx74_bstack, rxquantr77_done353
    inc rx74_rep
    nqp_rxmark rx74_bstack, rxquantr77_done353, rx74_pos, rx74_rep
    goto rxquantr77_loop352
  rxquantr77_done353:
    rx74_cur."!cursor_pass"(rx74_pos, "name", 'backtrack'=>1)
    .return (rx74_cur)
  rx74_restart343:
    repr_get_attr_obj rx74_cstack, rx74_cur, rx74_curclass, "$!cstack"
  rx74_fail344:
    unless rx74_bstack, rx74_done342
    pop $I19, rx74_bstack
    if_null rx74_cstack, rx74_cstack_done347
    unless rx74_cstack, rx74_cstack_done347
    dec $I19
    set $P11, rx74_cstack[$I19]
  rx74_cstack_done347:
    pop rx74_rep, rx74_bstack
    pop rx74_pos, rx74_bstack
    pop $I19, rx74_bstack
    lt rx74_pos, -1, rx74_done342
    lt rx74_pos, 0, rx74_fail344
    eq $I19, 0, rx74_fail344
    nqp_islist $I20, rx74_cstack
    unless $I20, rx74_jump345
    elements $I18, rx74_bstack
    le $I18, 0, rx74_cut346
    dec $I18
    set $I18, rx74_bstack[$I18]
  rx74_cut346:
    assign rx74_cstack, $I18
  rx74_jump345:
    jump $I19
  rx74_done342:
    rx74_cur."!cursor_fail"()
    .return (rx74_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_35_1347804164.33_caps" :subid("cuid_memo_3_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["identifier"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_35_1347804164.33_nfa" :subid("cuid_memo_4_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "identifier"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 58
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 58
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 8
    push $P5018, $P5019
    box $P5020, "identifier"
    push $P5018, $P5020
    box $P5021, 2
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_36_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 628
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx79_tgt
    .local int rx79_pos
    .local int rx79_off
    .local int rx79_eos
    .local int rx79_rep
    .local pmc rx79_cur
    .local pmc rx79_curclass
    .local pmc rx79_bstack
    .local pmc rx79_cstack
    (rx79_cur, rx79_tgt, rx79_pos, rx79_curclass, rx79_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx79_cur
    length rx79_eos, rx79_tgt
    eq $I19, 1, rx79_restart357
    gt rx79_pos, rx79_eos, rx79_fail358
    repr_get_attr_int $I11, self, rx79_curclass, "$!from"
    ne $I11, -1, rxscan80_done364
    goto rxscan80_scan363
  rxscan80_loop362:
    inc rx79_pos
    gt rx79_pos, rx79_eos, rx79_fail358
    repr_bind_attr_int rx79_cur, rx79_curclass, "$!from", rx79_pos
  rxscan80_scan363:
    nqp_rxmark rx79_bstack, rxscan80_loop362, rx79_pos, 0
  rxscan80_done364:
    repr_bind_attr_int rx79_cur, rx79_curclass, "$!pos", rx79_pos
    $P11 = rx79_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx79_curclass, "$!pos"
    lt $I11, 0, rx79_fail358
    nqp_rxmark rx79_bstack, rxsubrule81_pass365, -1, 0
  rxsubrule81_pass365:
    rx79_cstack = rx79_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx79_pos, $P11, rx79_curclass, "$!pos"
    nqp_rxmark rx79_bstack, rxquantr82_done367, rx79_pos, 0
  rxquantr82_loop366:
    repr_bind_attr_int rx79_cur, rx79_curclass, "$!pos", rx79_pos
    $P11 = rx79_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx79_curclass, "$!pos"
    lt $I11, 0, rx79_fail358
    goto rxsubrule83_pass368
  rxsubrule83_back369:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx79_curclass, "$!pos"
    lt $I11, 0, rx79_fail358
  rxsubrule83_pass368:
    rx79_cstack = rx79_cur."!cursor_capture"($P11, "colonpair")
    set_addr $I11, rxsubrule83_back369
    push rx79_bstack, $I11
    push rx79_bstack, 0
    push rx79_bstack, rx79_pos
    elements $I11, rx79_cstack
    push rx79_bstack, $I11
    repr_get_attr_int rx79_pos, $P11, rx79_curclass, "$!pos"
    nqp_rxpeek $I19, rx79_bstack, rxquantr82_done367
    inc $I19
    inc $I19
    set rx79_rep, rx79_bstack[$I19]
    nqp_rxcommit rx79_bstack, rxquantr82_done367
    inc rx79_rep
  rxquantr82_done367:
    rx79_cur."!cursor_pass"(rx79_pos, "deflongname", 'backtrack'=>1)
    .return (rx79_cur)
  rx79_restart357:
    repr_get_attr_obj rx79_cstack, rx79_cur, rx79_curclass, "$!cstack"
  rx79_fail358:
    unless rx79_bstack, rx79_done356
    pop $I19, rx79_bstack
    if_null rx79_cstack, rx79_cstack_done361
    unless rx79_cstack, rx79_cstack_done361
    dec $I19
    set $P11, rx79_cstack[$I19]
  rx79_cstack_done361:
    pop rx79_rep, rx79_bstack
    pop rx79_pos, rx79_bstack
    pop $I19, rx79_bstack
    lt rx79_pos, -1, rx79_done356
    lt rx79_pos, 0, rx79_fail358
    eq $I19, 0, rx79_fail358
    nqp_islist $I20, rx79_cstack
    unless $I20, rx79_jump359
    elements $I18, rx79_bstack
    le $I18, 0, rx79_cut360
    dec $I18
    set $I18, rx79_bstack[$I18]
  rx79_cut360:
    assign rx79_cstack, $I18
  rx79_jump359:
    jump $I19
  rx79_done356:
    rx79_cur."!cursor_fail"()
    .return (rx79_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_36_1347804164.33_caps" :subid("cuid_memo_5_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["identifier"], $P5002
    box $P5003, 2
    set $P5001["colonpair"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_36_1347804164.33_nfa" :subid("cuid_memo_6_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "identifier"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "colonpair"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "ENDSTMT" :subid("cuid_37_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 632
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx84_tgt
    .local int rx84_pos
    .local int rx84_off
    .local int rx84_eos
    .local int rx84_rep
    .local pmc rx84_cur
    .local pmc rx84_curclass
    .local pmc rx84_bstack
    .local pmc rx84_cstack
    (rx84_cur, rx84_tgt, rx84_pos, rx84_curclass, rx84_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx84_cur
    length rx84_eos, rx84_tgt
    eq $I19, 1, rx84_restart372
    gt rx84_pos, rx84_eos, rx84_fail373
    repr_get_attr_int $I11, self, rx84_curclass, "$!from"
    ne $I11, -1, rxscan85_done379
    goto rxscan85_scan378
  rxscan85_loop377:
    inc rx84_pos
    gt rx84_pos, rx84_eos, rx84_fail373
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!from", rx84_pos
  rxscan85_scan378:
    nqp_rxmark rx84_bstack, rxscan85_loop377, rx84_pos, 0
  rxscan85_done379:
    nqp_rxmark rx84_bstack, rxquantr86_done381, rx84_pos, 0
  rxquantr86_loop380:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt87_0383
    nqp_push_label $P11, alt87_1388
    nqp_rxmark rx84_bstack, alt87_end382, -1, 0
    rx84_cur."!alt"(rx84_pos, "alt_nfa__1_1347804165.541", $P11)
    goto rx84_fail373
  alt87_0383:
    nqp_rxmark rx84_bstack, rxquantr88_done385, rx84_pos, 0
  rxquantr88_loop384:
    ge rx84_pos, rx84_eos, rx84_fail373
    substr $S11, rx84_tgt, rx84_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx84_fail373
    inc rx84_pos
    nqp_rxpeek $I19, rx84_bstack, rxquantr88_done385
    inc $I19
    inc $I19
    set rx84_rep, rx84_bstack[$I19]
    nqp_rxcommit rx84_bstack, rxquantr88_done385
    inc rx84_rep
    nqp_rxmark rx84_bstack, rxquantr88_done385, rx84_pos, rx84_rep
    goto rxquantr88_loop384
  rxquantr88_done385:
    is_cclass $I11, .CCLASS_NEWLINE, rx84_tgt, rx84_pos
    if $I11, rxanchor89_done386
    ne rx84_pos, rx84_eos, rx84_fail373
    eq rx84_pos, 0, rxanchor89_done386
    sub $I11, rx84_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx84_tgt, $I11
    if $I11, rx84_fail373
  rxanchor89_done386:
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."ws"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail373
    repr_get_attr_int rx84_pos, $P11, rx84_curclass, "$!pos"
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail373
    goto alt87_end382
  alt87_1388:
    nqp_rxmark rx84_bstack, rxquantr91_done390, rx84_pos, 0
  rxquantr91_loop389:
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."unv"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail373
    goto rxsubrule92_pass391
  rxsubrule92_back392:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail373
  rxsubrule92_pass391:
    rx84_cstack = rx84_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule92_back392
    push rx84_bstack, $I11
    push rx84_bstack, 0
    push rx84_bstack, rx84_pos
    elements $I11, rx84_cstack
    push rx84_bstack, $I11
    repr_get_attr_int rx84_pos, $P11, rx84_curclass, "$!pos"
    nqp_rxpeek $I19, rx84_bstack, rxquantr91_done390
    inc $I19
    inc $I19
    set rx84_rep, rx84_bstack[$I19]
    nqp_rxcommit rx84_bstack, rxquantr91_done390
    inc rx84_rep
  rxquantr91_done390:
    is_cclass $I11, .CCLASS_NEWLINE, rx84_tgt, rx84_pos
    if $I11, rxanchor93_done393
    ne rx84_pos, rx84_eos, rx84_fail373
    eq rx84_pos, 0, rxanchor93_done393
    sub $I11, rx84_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx84_tgt, $I11
    if $I11, rx84_fail373
  rxanchor93_done393:
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."ws"()
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail373
    repr_get_attr_int rx84_pos, $P11, rx84_curclass, "$!pos"
    repr_bind_attr_int rx84_cur, rx84_curclass, "$!pos", rx84_pos
    $P11 = rx84_cur."MARKER"("endstmt")
    repr_get_attr_int $I11, $P11, rx84_curclass, "$!pos"
    lt $I11, 0, rx84_fail373
    goto alt87_end382
  alt87_end382:
    nqp_rxpeek $I19, rx84_bstack, rxquantr86_done381
    inc $I19
    inc $I19
    set rx84_rep, rx84_bstack[$I19]
    nqp_rxcommit rx84_bstack, rxquantr86_done381
    inc rx84_rep
  rxquantr86_done381:
    rx84_cur."!cursor_pass"(rx84_pos, "ENDSTMT", 'backtrack'=>1)
    .return (rx84_cur)
  rx84_restart372:
    repr_get_attr_obj rx84_cstack, rx84_cur, rx84_curclass, "$!cstack"
  rx84_fail373:
    unless rx84_bstack, rx84_done371
    pop $I19, rx84_bstack
    if_null rx84_cstack, rx84_cstack_done376
    unless rx84_cstack, rx84_cstack_done376
    dec $I19
    set $P11, rx84_cstack[$I19]
  rx84_cstack_done376:
    pop rx84_rep, rx84_bstack
    pop rx84_pos, rx84_bstack
    pop $I19, rx84_bstack
    lt rx84_pos, -1, rx84_done371
    lt rx84_pos, 0, rx84_fail373
    eq $I19, 0, rx84_fail373
    nqp_islist $I20, rx84_cstack
    unless $I20, rx84_jump374
    elements $I18, rx84_bstack
    le $I18, 0, rx84_cut375
    dec $I18
    set $I18, rx84_bstack[$I18]
  rx84_cut375:
    assign rx84_cstack, $I18
  rx84_jump374:
    jump $I19
  rx84_done371:
    rx84_cur."!cursor_fail"()
    .return (rx84_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_37_1347804164.33_caps" :subid("cuid_memo_7_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_37_1347804164.33_nfa" :subid("cuid_memo_8_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5003, $P5005
    box $P5006, 1
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    box $P5010, 8
    push $P5003, $P5010
    box $P5011, "unv"
    push $P5003, $P5011
    box $P5012, 6
    push $P5003, $P5012
    box $P5013, 1
    push $P5003, $P5013
    box $P5014, 0
    push $P5003, $P5014
    box $P5015, 6
    push $P5003, $P5015
    box $P5016, 1
    push $P5003, $P5016
    box $P5017, 0
    push $P5003, $P5017
    box $P5018, 0
    push $P5003, $P5018
    push $P5001, $P5003
    new $P5019, 'ResizablePMCArray'
    box $P5020, 1
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 3
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "ws"
    push $P5023, $P5025
    box $P5026, 4
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "MARKER"
    push $P5027, $P5029
    box $P5030, 5
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 1
    push $P5035, $P5036
    box $P5037, 0
    push $P5035, $P5037
    box $P5038, 7
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 8
    push $P5039, $P5040
    box $P5041, "ws"
    push $P5039, $P5041
    box $P5042, 8
    push $P5039, $P5042
    push $P5001, $P5039
    new $P5043, 'ResizablePMCArray'
    box $P5044, 8
    push $P5043, $P5044
    box $P5045, "MARKER"
    push $P5043, $P5045
    box $P5046, 9
    push $P5043, $P5046
    push $P5001, $P5043
    new $P5047, 'ResizablePMCArray'
    box $P5048, 0
    push $P5047, $P5048
    box $P5049, 0
    push $P5047, $P5049
    box $P5050, 0
    push $P5047, $P5050
    push $P5001, $P5047
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_37_1347804164.33_alt_nfa__1_1347804165.541" :subid("cuid_memo_9_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 6
    push $P5004, $P5005
    box $P5006, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5004, $P5006
    box $P5007, 1
    push $P5004, $P5007
    box $P5008, 1
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 2
    push $P5004, $P5010
    push $P5002, $P5004
    new $P5011, 'ResizablePMCArray'
    box $P5012, 1
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 3
    push $P5011, $P5014
    push $P5002, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "ws"
    push $P5015, $P5017
    box $P5018, 4
    push $P5015, $P5018
    push $P5002, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "MARKER"
    push $P5019, $P5021
    box $P5022, 5
    push $P5019, $P5022
    push $P5002, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5002, $P5023
    push $P5001, $P5002
    new $P5027, 'ResizablePMCArray'
    new $P5028, 'ResizablePMCArray'
    push $P5027, $P5028
    new $P5029, 'ResizablePMCArray'
    box $P5030, 8
    push $P5029, $P5030
    box $P5031, "unv"
    push $P5029, $P5031
    box $P5032, 2
    push $P5029, $P5032
    box $P5033, 1
    push $P5029, $P5033
    box $P5034, 0
    push $P5029, $P5034
    box $P5035, 2
    push $P5029, $P5035
    push $P5027, $P5029
    new $P5036, 'ResizablePMCArray'
    box $P5037, 1
    push $P5036, $P5037
    box $P5038, 0
    push $P5036, $P5038
    box $P5039, 3
    push $P5036, $P5039
    push $P5027, $P5036
    new $P5040, 'ResizablePMCArray'
    box $P5041, 8
    push $P5040, $P5041
    box $P5042, "ws"
    push $P5040, $P5042
    box $P5043, 4
    push $P5040, $P5043
    push $P5027, $P5040
    new $P5044, 'ResizablePMCArray'
    box $P5045, 8
    push $P5044, $P5045
    box $P5046, "MARKER"
    push $P5044, $P5046
    box $P5047, 5
    push $P5044, $P5047
    push $P5027, $P5044
    new $P5048, 'ResizablePMCArray'
    box $P5049, 0
    push $P5048, $P5049
    box $P5050, 0
    push $P5048, $P5050
    box $P5051, 0
    push $P5048, $P5051
    push $P5027, $P5048
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "ws" :subid("cuid_38_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 639
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx95_tgt
    .local int rx95_pos
    .local int rx95_off
    .local int rx95_eos
    .local int rx95_rep
    .local pmc rx95_cur
    .local pmc rx95_curclass
    .local pmc rx95_bstack
    .local pmc rx95_cstack
    (rx95_cur, rx95_tgt, rx95_pos, rx95_curclass, rx95_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx95_cur
    length rx95_eos, rx95_tgt
    eq $I19, 1, rx95_restart397
    gt rx95_pos, rx95_eos, rx95_fail398
    repr_get_attr_int $I11, self, rx95_curclass, "$!from"
    ne $I11, -1, rxscan96_done404
    goto rxscan96_scan403
  rxscan96_loop402:
    inc rx95_pos
    gt rx95_pos, rx95_eos, rx95_fail398
    repr_bind_attr_int rx95_cur, rx95_curclass, "$!from", rx95_pos
  rxscan96_scan403:
    nqp_rxmark rx95_bstack, rxscan96_loop402, rx95_pos, 0
  rxscan96_done404:
  alt97_0406:
    nqp_rxmark rx95_bstack, alt97_1407, rx95_pos, 0
    repr_bind_attr_int rx95_cur, rx95_curclass, "$!pos", rx95_pos
    $P11 = rx95_cur."MARKED"("ws")
    repr_get_attr_int $I11, $P11, rx95_curclass, "$!pos"
    lt $I11, 0, rx95_fail398
    goto alt97_end405
  alt97_1407:
    repr_bind_attr_int rx95_cur, rx95_curclass, "$!pos", rx95_pos
    $P11 = rx95_cur."ww"()
    repr_get_attr_int $I11, $P11, rx95_curclass, "$!pos"
    ge $I11, 0, rx95_fail398
    nqp_rxmark rx95_bstack, rxquantr98_done409, rx95_pos, 0
  rxquantr98_loop408:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt99_0411
    nqp_push_label $P11, alt99_1414
    nqp_push_label $P11, alt99_2417
    nqp_push_label $P11, alt99_3420
    nqp_rxmark rx95_bstack, alt99_end410, -1, 0
    rx95_cur."!alt"(rx95_pos, "alt_nfa__2_1347804165.559", $P11)
    goto rx95_fail398
  alt99_0411:
    nqp_rxmark rx95_bstack, rxquantr100_done413, -1, 0
  rxquantr100_loop412:
    ge rx95_pos, rx95_eos, rx95_fail398
    substr $S11, rx95_tgt, rx95_pos, 1
    index $I11, ucs4:"\n\x{b}\f\r\x{85}\u2028\u2029", $S11
    lt $I11, 0, rx95_fail398
    inc rx95_pos
    nqp_rxpeek $I19, rx95_bstack, rxquantr100_done413
    inc $I19
    inc $I19
    set rx95_rep, rx95_bstack[$I19]
    nqp_rxcommit rx95_bstack, rxquantr100_done413
    inc rx95_rep
    nqp_rxmark rx95_bstack, rxquantr100_done413, rx95_pos, rx95_rep
    goto rxquantr100_loop412
  rxquantr100_done413:
    goto alt99_end410
  alt99_1414:
    add $I11, rx95_pos, 1
    gt $I11, rx95_eos, rx95_fail398
    substr $S10, rx95_tgt, rx95_pos, 1
    ne $S10, ucs4:"#", rx95_fail398
    add rx95_pos, 1
    nqp_rxmark rx95_bstack, rxquantr101_done416, rx95_pos, 0
  rxquantr101_loop415:
    ge rx95_pos, rx95_eos, rx95_fail398
    is_cclass $I11, .CCLASS_NEWLINE, rx95_tgt, rx95_pos
    if $I11, rx95_fail398
    add rx95_pos, 1
    nqp_rxpeek $I19, rx95_bstack, rxquantr101_done416
    inc $I19
    inc $I19
    set rx95_rep, rx95_bstack[$I19]
    nqp_rxcommit rx95_bstack, rxquantr101_done416
    inc rx95_rep
    nqp_rxmark rx95_bstack, rxquantr101_done416, rx95_pos, rx95_rep
    goto rxquantr101_loop415
  rxquantr101_done416:
    goto alt99_end410
  alt99_2417:
    eq rx95_pos, 0, rxanchor102_done418
    ge rx95_pos, rx95_eos, rx95_fail398
    sub $I11, rx95_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx95_tgt, $I11
    unless $I11, rx95_fail398
  rxanchor102_done418:
    repr_bind_attr_int rx95_cur, rx95_curclass, "$!pos", rx95_pos
    $P11 = rx95_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx95_curclass, "$!pos"
    lt $I11, 0, rx95_fail398
    repr_get_attr_int rx95_pos, $P11, rx95_curclass, "$!pos"
    goto alt99_end410
  alt99_3420:
    nqp_rxmark rx95_bstack, rxquantr104_done422, -1, 0
  rxquantr104_loop421:
    ge rx95_pos, rx95_eos, rx95_fail398
    substr $S11, rx95_tgt, rx95_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx95_fail398
    inc rx95_pos
    nqp_rxpeek $I19, rx95_bstack, rxquantr104_done422
    inc $I19
    inc $I19
    set rx95_rep, rx95_bstack[$I19]
    nqp_rxcommit rx95_bstack, rxquantr104_done422
    inc rx95_rep
    nqp_rxmark rx95_bstack, rxquantr104_done422, rx95_pos, rx95_rep
    goto rxquantr104_loop421
  rxquantr104_done422:
    goto alt99_end410
  alt99_end410:
    nqp_rxpeek $I19, rx95_bstack, rxquantr98_done409
    inc $I19
    inc $I19
    set rx95_rep, rx95_bstack[$I19]
    nqp_rxcommit rx95_bstack, rxquantr98_done409
    inc rx95_rep
    nqp_rxmark rx95_bstack, rxquantr98_done409, rx95_pos, rx95_rep
    goto rxquantr98_loop408
  rxquantr98_done409:
    repr_bind_attr_int rx95_cur, rx95_curclass, "$!pos", rx95_pos
    $P11 = rx95_cur."MARKER"("ws")
    repr_get_attr_int $I11, $P11, rx95_curclass, "$!pos"
    lt $I11, 0, rx95_fail398
  alt97_end405:
    rx95_cur."!cursor_pass"(rx95_pos, "ws", 'backtrack'=>1)
    .return (rx95_cur)
  rx95_restart397:
    repr_get_attr_obj rx95_cstack, rx95_cur, rx95_curclass, "$!cstack"
  rx95_fail398:
    unless rx95_bstack, rx95_done396
    pop $I19, rx95_bstack
    if_null rx95_cstack, rx95_cstack_done401
    unless rx95_cstack, rx95_cstack_done401
    dec $I19
    set $P11, rx95_cstack[$I19]
  rx95_cstack_done401:
    pop rx95_rep, rx95_bstack
    pop rx95_pos, rx95_bstack
    pop $I19, rx95_bstack
    lt rx95_pos, -1, rx95_done396
    lt rx95_pos, 0, rx95_fail398
    eq $I19, 0, rx95_fail398
    nqp_islist $I20, rx95_cstack
    unless $I20, rx95_jump399
    elements $I18, rx95_bstack
    le $I18, 0, rx95_cut400
    dec $I18
    set $I18, rx95_bstack[$I18]
  rx95_cut400:
    assign rx95_cstack, $I18
  rx95_jump399:
    jump $I19
  rx95_done396:
    rx95_cur."!cursor_fail"()
    .return (rx95_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_38_1347804164.33_caps" :subid("cuid_memo_10_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_38_1347804164.33_alt_nfa__2_1347804165.559" :subid("cuid_memo_11_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 1
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 6
    push $P5008, $P5009
    box $P5010, utf8:"\n\x{b}\f\r\x{85}\u2028\u2029"
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 1
    push $P5012, $P5013
    box $P5014, 0
    push $P5012, $P5014
    box $P5015, 2
    push $P5012, $P5015
    box $P5016, 1
    push $P5012, $P5016
    box $P5017, 0
    push $P5012, $P5017
    box $P5018, 0
    push $P5012, $P5018
    push $P5002, $P5012
    push $P5001, $P5002
    new $P5019, 'ResizablePMCArray'
    new $P5020, 'ResizablePMCArray'
    push $P5019, $P5020
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 35
    push $P5021, $P5023
    box $P5024, 2
    push $P5021, $P5024
    push $P5019, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 5
    push $P5025, $P5026
    box $P5027, 4096
    push $P5025, $P5027
    box $P5028, 2
    push $P5025, $P5028
    box $P5029, 1
    push $P5025, $P5029
    box $P5030, 0
    push $P5025, $P5030
    box $P5031, 0
    push $P5025, $P5031
    push $P5019, $P5025
    push $P5001, $P5019
    new $P5032, 'ResizablePMCArray'
    new $P5033, 'ResizablePMCArray'
    push $P5032, $P5033
    new $P5034, 'ResizablePMCArray'
    box $P5035, 1
    push $P5034, $P5035
    box $P5036, 0
    push $P5034, $P5036
    box $P5037, 2
    push $P5034, $P5037
    push $P5032, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 8
    push $P5038, $P5039
    box $P5040, "pod_comment"
    push $P5038, $P5040
    box $P5041, 0
    push $P5038, $P5041
    push $P5032, $P5038
    push $P5001, $P5032
    new $P5042, 'ResizablePMCArray'
    new $P5043, 'ResizablePMCArray'
    push $P5042, $P5043
    new $P5044, 'ResizablePMCArray'
    box $P5045, 1
    push $P5044, $P5045
    box $P5046, 0
    push $P5044, $P5046
    box $P5047, 2
    push $P5044, $P5047
    push $P5042, $P5044
    new $P5048, 'ResizablePMCArray'
    box $P5049, 6
    push $P5048, $P5049
    box $P5050, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5048, $P5050
    box $P5051, 3
    push $P5048, $P5051
    push $P5042, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 1
    push $P5052, $P5053
    box $P5054, 0
    push $P5052, $P5054
    box $P5055, 2
    push $P5052, $P5055
    box $P5056, 1
    push $P5052, $P5056
    box $P5057, 0
    push $P5052, $P5057
    box $P5058, 0
    push $P5052, $P5058
    push $P5042, $P5052
    push $P5001, $P5042
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "unv" :subid("cuid_40_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 650
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_39_1347804164.33' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx105_tgt
    .local int rx105_pos
    .local int rx105_off
    .local int rx105_eos
    .local int rx105_rep
    .local pmc rx105_cur
    .local pmc rx105_curclass
    .local pmc rx105_bstack
    .local pmc rx105_cstack
    (rx105_cur, rx105_tgt, rx105_pos, rx105_curclass, rx105_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx105_cur
    length rx105_eos, rx105_tgt
    eq $I19, 1, rx105_restart425
    gt rx105_pos, rx105_eos, rx105_fail426
    repr_get_attr_int $I11, self, rx105_curclass, "$!from"
    ne $I11, -1, rxscan106_done432
    goto rxscan106_scan431
  rxscan106_loop430:
    inc rx105_pos
    gt rx105_pos, rx105_eos, rx105_fail426
    repr_bind_attr_int rx105_cur, rx105_curclass, "$!from", rx105_pos
  rxscan106_scan431:
    nqp_rxmark rx105_bstack, rxscan106_loop430, rx105_pos, 0
  rxscan106_done432:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt107_0434
    nqp_push_label $P11, alt107_1452
    nqp_push_label $P11, alt107_2457
    nqp_rxmark rx105_bstack, alt107_end433, -1, 0
    rx105_cur."!alt"(rx105_pos, "alt_nfa__4_1347804165.581", $P11)
    goto rx105_fail426
  alt107_0434:
    eq rx105_pos, 0, rxanchor108_done435
    ge rx105_pos, rx105_eos, rx105_fail426
    sub $I11, rx105_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx105_tgt, $I11
    unless $I11, rx105_fail426
  rxanchor108_done435:
    .const 'Sub' $P5001 = 'cuid_39_1347804164.33' 
    capture_lex $P5001
    repr_bind_attr_int rx105_cur, rx105_curclass, "$!pos", rx105_pos
    $P11 = rx105_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx105_curclass, "$!pos"
    lt $I11, 0, rx105_fail426
    repr_bind_attr_int rx105_cur, rx105_curclass, "$!pos", rx105_pos
    $P11 = rx105_cur."pod_comment"()
    repr_get_attr_int $I11, $P11, rx105_curclass, "$!pos"
    lt $I11, 0, rx105_fail426
    repr_get_attr_int rx105_pos, $P11, rx105_curclass, "$!pos"
    goto alt107_end433
  alt107_1452:
    nqp_rxmark rx105_bstack, rxquantr114_done454, rx105_pos, 0
  rxquantr114_loop453:
    ge rx105_pos, rx105_eos, rx105_fail426
    substr $S11, rx105_tgt, rx105_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx105_fail426
    inc rx105_pos
    nqp_rxpeek $I19, rx105_bstack, rxquantr114_done454
    inc $I19
    inc $I19
    set rx105_rep, rx105_bstack[$I19]
    nqp_rxcommit rx105_bstack, rxquantr114_done454
    inc rx105_rep
    nqp_rxmark rx105_bstack, rxquantr114_done454, rx105_pos, rx105_rep
    goto rxquantr114_loop453
  rxquantr114_done454:
    add $I11, rx105_pos, 1
    gt $I11, rx105_eos, rx105_fail426
    substr $S10, rx105_tgt, rx105_pos, 1
    ne $S10, ucs4:"#", rx105_fail426
    add rx105_pos, 1
    nqp_rxmark rx105_bstack, rxquantr115_done456, rx105_pos, 0
  rxquantr115_loop455:
    ge rx105_pos, rx105_eos, rx105_fail426
    is_cclass $I11, .CCLASS_NEWLINE, rx105_tgt, rx105_pos
    if $I11, rx105_fail426
    add rx105_pos, 1
    nqp_rxpeek $I19, rx105_bstack, rxquantr115_done456
    inc $I19
    inc $I19
    set rx105_rep, rx105_bstack[$I19]
    nqp_rxcommit rx105_bstack, rxquantr115_done456
    inc rx105_rep
    nqp_rxmark rx105_bstack, rxquantr115_done456, rx105_pos, rx105_rep
    goto rxquantr115_loop455
  rxquantr115_done456:
    goto alt107_end433
  alt107_2457:
    nqp_rxmark rx105_bstack, rxquantr116_done459, -1, 0
  rxquantr116_loop458:
    ge rx105_pos, rx105_eos, rx105_fail426
    substr $S11, rx105_tgt, rx105_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx105_fail426
    inc rx105_pos
    nqp_rxpeek $I19, rx105_bstack, rxquantr116_done459
    inc $I19
    inc $I19
    set rx105_rep, rx105_bstack[$I19]
    nqp_rxcommit rx105_bstack, rxquantr116_done459
    inc rx105_rep
    nqp_rxmark rx105_bstack, rxquantr116_done459, rx105_pos, rx105_rep
    goto rxquantr116_loop458
  rxquantr116_done459:
    goto alt107_end433
  alt107_end433:
    nqp_rxcommit rx105_bstack, alt107_end433
    rx105_cur."!cursor_pass"(rx105_pos, "unv", 'backtrack'=>1)
    .return (rx105_cur)
  rx105_restart425:
    repr_get_attr_obj rx105_cstack, rx105_cur, rx105_curclass, "$!cstack"
  rx105_fail426:
    unless rx105_bstack, rx105_done424
    pop $I19, rx105_bstack
    if_null rx105_cstack, rx105_cstack_done429
    unless rx105_cstack, rx105_cstack_done429
    dec $I19
    set $P11, rx105_cstack[$I19]
  rx105_cstack_done429:
    pop rx105_rep, rx105_bstack
    pop rx105_pos, rx105_bstack
    pop $I19, rx105_bstack
    lt rx105_pos, -1, rx105_done424
    lt rx105_pos, 0, rx105_fail426
    eq $I19, 0, rx105_fail426
    nqp_islist $I20, rx105_cstack
    unless $I20, rx105_jump427
    elements $I18, rx105_bstack
    le $I18, 0, rx105_cut428
    dec $I18
    set $I18, rx105_bstack[$I18]
  rx105_cut428:
    assign rx105_cstack, $I18
  rx105_jump427:
    jump $I19
  rx105_done424:
    rx105_cur."!cursor_fail"()
    .return (rx105_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_40_1347804164.33_caps" :subid("cuid_memo_12_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_40_1347804164.33_nfa" :subid("cuid_memo_13_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 6
    push $P5003, $P5007
    box $P5008, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5003, $P5008
    box $P5009, 1
    push $P5003, $P5009
    box $P5010, 1
    push $P5003, $P5010
    box $P5011, 0
    push $P5003, $P5011
    box $P5012, 6
    push $P5003, $P5012
    box $P5013, 1
    push $P5003, $P5013
    box $P5014, 0
    push $P5003, $P5014
    box $P5015, 8
    push $P5003, $P5015
    push $P5001, $P5003
    new $P5016, 'ResizablePMCArray'
    box $P5017, 6
    push $P5016, $P5017
    box $P5018, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5016, $P5018
    box $P5019, 2
    push $P5016, $P5019
    box $P5020, 1
    push $P5016, $P5020
    box $P5021, 0
    push $P5016, $P5021
    box $P5022, 4
    push $P5016, $P5022
    push $P5001, $P5016
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 61
    push $P5027, $P5029
    box $P5030, 5
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 4
    push $P5031, $P5032
    box $P5033, 8192
    push $P5031, $P5033
    box $P5034, 3
    push $P5031, $P5034
    box $P5035, 2
    push $P5031, $P5035
    box $P5036, 92
    push $P5031, $P5036
    box $P5037, 3
    push $P5031, $P5037
    push $P5001, $P5031
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 35
    push $P5038, $P5040
    box $P5041, 7
    push $P5038, $P5041
    push $P5001, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 5
    push $P5042, $P5043
    box $P5044, 4096
    push $P5042, $P5044
    box $P5045, 7
    push $P5042, $P5045
    box $P5046, 1
    push $P5042, $P5046
    box $P5047, 0
    push $P5042, $P5047
    box $P5048, 0
    push $P5042, $P5048
    push $P5001, $P5042
    new $P5049, 'ResizablePMCArray'
    box $P5050, 6
    push $P5049, $P5050
    box $P5051, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5049, $P5051
    box $P5052, 9
    push $P5049, $P5052
    push $P5001, $P5049
    new $P5053, 'ResizablePMCArray'
    box $P5054, 1
    push $P5053, $P5054
    box $P5055, 0
    push $P5053, $P5055
    box $P5056, 8
    push $P5053, $P5056
    box $P5057, 1
    push $P5053, $P5057
    box $P5058, 0
    push $P5053, $P5058
    box $P5059, 0
    push $P5053, $P5059
    push $P5001, $P5053
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_40_1347804164.33_alt_nfa__4_1347804165.581" :subid("cuid_memo_14_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 1
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 6
    push $P5008, $P5009
    box $P5010, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5008, $P5010
    box $P5011, 2
    push $P5008, $P5011
    box $P5012, 1
    push $P5008, $P5012
    box $P5013, 0
    push $P5008, $P5013
    box $P5014, 4
    push $P5008, $P5014
    push $P5002, $P5008
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5002, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 61
    push $P5019, $P5021
    box $P5022, 5
    push $P5019, $P5022
    push $P5002, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 4
    push $P5023, $P5024
    box $P5025, 8192
    push $P5023, $P5025
    box $P5026, 3
    push $P5023, $P5026
    box $P5027, 2
    push $P5023, $P5027
    box $P5028, 92
    push $P5023, $P5028
    box $P5029, 3
    push $P5023, $P5029
    push $P5002, $P5023
    push $P5001, $P5002
    new $P5030, 'ResizablePMCArray'
    new $P5031, 'ResizablePMCArray'
    push $P5030, $P5031
    new $P5032, 'ResizablePMCArray'
    box $P5033, 6
    push $P5032, $P5033
    box $P5034, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5032, $P5034
    box $P5035, 1
    push $P5032, $P5035
    box $P5036, 1
    push $P5032, $P5036
    box $P5037, 0
    push $P5032, $P5037
    box $P5038, 2
    push $P5032, $P5038
    push $P5030, $P5032
    new $P5039, 'ResizablePMCArray'
    box $P5040, 2
    push $P5039, $P5040
    box $P5041, 35
    push $P5039, $P5041
    box $P5042, 3
    push $P5039, $P5042
    push $P5030, $P5039
    new $P5043, 'ResizablePMCArray'
    box $P5044, 5
    push $P5043, $P5044
    box $P5045, 4096
    push $P5043, $P5045
    box $P5046, 3
    push $P5043, $P5046
    box $P5047, 1
    push $P5043, $P5047
    box $P5048, 0
    push $P5043, $P5048
    box $P5049, 0
    push $P5043, $P5049
    push $P5030, $P5043
    push $P5001, $P5030
    new $P5050, 'ResizablePMCArray'
    new $P5051, 'ResizablePMCArray'
    push $P5050, $P5051
    new $P5052, 'ResizablePMCArray'
    box $P5053, 1
    push $P5052, $P5053
    box $P5054, 0
    push $P5052, $P5054
    box $P5055, 2
    push $P5052, $P5055
    push $P5050, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 6
    push $P5056, $P5057
    box $P5058, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5056, $P5058
    box $P5059, 3
    push $P5056, $P5059
    push $P5050, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 1
    push $P5060, $P5061
    box $P5062, 0
    push $P5060, $P5062
    box $P5063, 2
    push $P5060, $P5063
    box $P5064, 1
    push $P5060, $P5064
    box $P5065, 0
    push $P5060, $P5065
    box $P5066, 0
    push $P5060, $P5066
    push $P5050, $P5060
    push $P5001, $P5050
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_39_1347804164.33") :anon :lex :outer("cuid_40_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx109_tgt
    .local int rx109_pos
    .local int rx109_off
    .local int rx109_eos
    .local int rx109_rep
    .local pmc rx109_cur
    .local pmc rx109_curclass
    .local pmc rx109_bstack
    .local pmc rx109_cstack
    (rx109_cur, rx109_tgt, rx109_pos, rx109_curclass, rx109_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx109_cur
    length rx109_eos, rx109_tgt
    eq $I19, 1, rx109_restart438
    gt rx109_pos, rx109_eos, rx109_fail439
    repr_get_attr_int $I11, self, rx109_curclass, "$!from"
    ne $I11, -1, rxscan110_done445
    goto rxscan110_scan444
  rxscan110_loop443:
    inc rx109_pos
    gt rx109_pos, rx109_eos, rx109_fail439
    repr_bind_attr_int rx109_cur, rx109_curclass, "$!from", rx109_pos
  rxscan110_scan444:
    nqp_rxmark rx109_bstack, rxscan110_loop443, rx109_pos, 0
  rxscan110_done445:
    nqp_rxmark rx109_bstack, rxquantr111_done447, rx109_pos, 0
  rxquantr111_loop446:
    ge rx109_pos, rx109_eos, rx109_fail439
    substr $S11, rx109_tgt, rx109_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx109_fail439
    inc rx109_pos
    nqp_rxpeek $I19, rx109_bstack, rxquantr111_done447
    inc $I19
    inc $I19
    set rx109_rep, rx109_bstack[$I19]
    nqp_rxcommit rx109_bstack, rxquantr111_done447
    inc rx109_rep
    nqp_rxmark rx109_bstack, rxquantr111_done447, rx109_pos, rx109_rep
    goto rxquantr111_loop446
  rxquantr111_done447:
    add $I11, rx109_pos, 1
    gt $I11, rx109_eos, rx109_fail439
    substr $S10, rx109_tgt, rx109_pos, 1
    ne $S10, ucs4:"=", rx109_fail439
    add rx109_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt112_0449
    nqp_push_label $P11, alt112_1450
    nqp_rxmark rx109_bstack, alt112_end448, -1, 0
    rx109_cur."!alt"(rx109_pos, "alt_nfa__3_1347804165.571", $P11)
    goto rx109_fail439
  alt112_0449:
    ge rx109_pos, rx109_eos, rx109_fail439
    is_cclass $I11, .CCLASS_WORD, rx109_tgt, rx109_pos
    unless $I11, rx109_fail439
    add rx109_pos, 1
    goto alt112_end448
  alt112_1450:
    add $I11, rx109_pos, 1
    gt $I11, rx109_eos, rx109_fail439
    substr $S10, rx109_tgt, rx109_pos, 1
    ne $S10, ucs4:"\\", rx109_fail439
    add rx109_pos, 1
    goto alt112_end448
  alt112_end448:
    nqp_rxcommit rx109_bstack, alt112_end448
    rx109_cur."!cursor_pass"(rx109_pos, 'backtrack'=>1)
    .return (rx109_cur)
  rx109_restart438:
    repr_get_attr_obj rx109_cstack, rx109_cur, rx109_curclass, "$!cstack"
  rx109_fail439:
    unless rx109_bstack, rx109_done437
    pop $I19, rx109_bstack
    if_null rx109_cstack, rx109_cstack_done442
    unless rx109_cstack, rx109_cstack_done442
    dec $I19
    set $P11, rx109_cstack[$I19]
  rx109_cstack_done442:
    pop rx109_rep, rx109_bstack
    pop rx109_pos, rx109_bstack
    pop $I19, rx109_bstack
    lt rx109_pos, -1, rx109_done437
    lt rx109_pos, 0, rx109_fail439
    eq $I19, 0, rx109_fail439
    nqp_islist $I20, rx109_cstack
    unless $I20, rx109_jump440
    elements $I18, rx109_bstack
    le $I18, 0, rx109_cut441
    dec $I18
    set $I18, rx109_bstack[$I18]
  rx109_cut441:
    assign rx109_cstack, $I18
  rx109_jump440:
    jump $I19
  rx109_done437:
    rx109_cur."!cursor_fail"()
    .return (rx109_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_39_1347804164.33_caps" :subid("cuid_memo_15_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_39_1347804164.33_nfa" :subid("cuid_memo_16_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5003, $P5005
    box $P5006, 1
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 61
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    push $P5001, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 4
    push $P5014, $P5015
    box $P5016, 8192
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    box $P5018, 2
    push $P5014, $P5018
    box $P5019, 92
    push $P5014, $P5019
    box $P5020, 0
    push $P5014, $P5020
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_39_1347804164.33_alt_nfa__3_1347804165.571" :subid("cuid_memo_17_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 4
    push $P5004, $P5005
    box $P5006, 8192
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 92
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "pod_comment" :subid("cuid_42_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 659
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_41_1347804164.33' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx117_tgt
    .local int rx117_pos
    .local int rx117_off
    .local int rx117_eos
    .local int rx117_rep
    .local pmc rx117_cur
    .local pmc rx117_curclass
    .local pmc rx117_bstack
    .local pmc rx117_cstack
    (rx117_cur, rx117_tgt, rx117_pos, rx117_curclass, rx117_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx117_cur
    length rx117_eos, rx117_tgt
    eq $I19, 1, rx117_restart462
    gt rx117_pos, rx117_eos, rx117_fail463
    repr_get_attr_int $I11, self, rx117_curclass, "$!from"
    ne $I11, -1, rxscan118_done469
    goto rxscan118_scan468
  rxscan118_loop467:
    inc rx117_pos
    gt rx117_pos, rx117_eos, rx117_fail463
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!from", rx117_pos
  rxscan118_scan468:
    nqp_rxmark rx117_bstack, rxscan118_loop467, rx117_pos, 0
  rxscan118_done469:
    eq rx117_pos, 0, rxanchor119_done470
    ge rx117_pos, rx117_eos, rx117_fail463
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, $I11
    unless $I11, rx117_fail463
  rxanchor119_done470:
    nqp_rxmark rx117_bstack, rxquantr120_done472, rx117_pos, 0
  rxquantr120_loop471:
    ge rx117_pos, rx117_eos, rx117_fail463
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail463
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr120_done472
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr120_done472
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr120_done472, rx117_pos, rx117_rep
    goto rxquantr120_loop471
  rxquantr120_done472:
    add $I11, rx117_pos, 1
    gt $I11, rx117_eos, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 1
    ne $S10, ucs4:"=", rx117_fail463
    add rx117_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt121_0474
    nqp_push_label $P11, alt121_1493
    nqp_push_label $P11, alt121_2512
    nqp_push_label $P11, alt121_3534
    nqp_push_label $P11, alt121_4559
    nqp_rxmark rx117_bstack, alt121_end473, -1, 0
    rx117_cur."!alt"(rx117_pos, "alt_nfa__6_1347804165.673", $P11)
    goto rx117_fail463
  alt121_0474:
    add $I11, rx117_pos, 5
    gt $I11, rx117_eos, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 5
    ne $S10, ucs4:"begin", rx117_fail463
    add rx117_pos, 5
    nqp_rxmark rx117_bstack, rxquantr122_done476, -1, 0
  rxquantr122_loop475:
    ge rx117_pos, rx117_eos, rx117_fail463
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail463
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr122_done476
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr122_done476
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr122_done476, rx117_pos, rx117_rep
    goto rxquantr122_loop475
  rxquantr122_done476:
    add $I11, rx117_pos, 3
    gt $I11, rx117_eos, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 3
    ne $S10, ucs4:"END", rx117_fail463
    add rx117_pos, 3
    le rx117_pos, 0, rx117_fail463
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, rx117_pos
    if $I11, rx117_fail463
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, $I11
    unless $I11, rx117_fail463
  alt124_0479:
    nqp_rxmark rx117_bstack, alt124_1490, rx117_pos, 0
    set rx117_rep, 0
    nqp_rxmark rx117_bstack, rxquantf125_loop480, rx117_pos, rx117_rep
    goto rxquantf125_done481
  rxquantf125_loop480:
    set $I12, rx117_rep
    ge rx117_pos, rx117_eos, rx117_fail463
    add rx117_pos, 1
    set rx117_rep, $I12
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantf125_loop480, rx117_pos, rx117_rep
  rxquantf125_done481:
    ge rx117_pos, rx117_eos, rx117_fail463
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    unless $I11, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx117_pos, $I11
    add rx117_pos, 1
    nqp_rxmark rx117_bstack, rxquantr126_done484, rx117_pos, 0
  rxquantr126_loop483:
    ge rx117_pos, rx117_eos, rx117_fail463
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail463
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr126_done484
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr126_done484
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr126_done484, rx117_pos, rx117_rep
    goto rxquantr126_loop483
  rxquantr126_done484:
    add $I11, rx117_pos, 4
    gt $I11, rx117_eos, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 4
    ne $S10, ucs4:"=end", rx117_fail463
    add rx117_pos, 4
    nqp_rxmark rx117_bstack, rxquantr127_done486, -1, 0
  rxquantr127_loop485:
    ge rx117_pos, rx117_eos, rx117_fail463
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail463
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr127_done486
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr127_done486
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr127_done486, rx117_pos, rx117_rep
    goto rxquantr127_loop485
  rxquantr127_done486:
    add $I11, rx117_pos, 3
    gt $I11, rx117_eos, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 3
    ne $S10, ucs4:"END", rx117_fail463
    add rx117_pos, 3
    le rx117_pos, 0, rx117_fail463
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, rx117_pos
    if $I11, rx117_fail463
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, $I11
    unless $I11, rx117_fail463
    nqp_rxmark rx117_bstack, rxquantr129_done489, rx117_pos, 0
  rxquantr129_loop488:
    ge rx117_pos, rx117_eos, rx117_fail463
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    if $I11, rx117_fail463
    add rx117_pos, 1
    nqp_rxpeek $I19, rx117_bstack, rxquantr129_done489
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr129_done489
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr129_done489, rx117_pos, rx117_rep
    goto rxquantr129_loop488
  rxquantr129_done489:
    goto alt124_end478
  alt124_1490:
    nqp_rxmark rx117_bstack, rxquantr130_done492, rx117_pos, 0
  rxquantr130_loop491:
    ge rx117_pos, rx117_eos, rx117_fail463
    add rx117_pos, 1
    nqp_rxpeek $I19, rx117_bstack, rxquantr130_done492
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr130_done492
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr130_done492, rx117_pos, rx117_rep
    goto rxquantr130_loop491
  rxquantr130_done492:
  alt124_end478:
    goto alt121_end473
  alt121_1493:
    add $I11, rx117_pos, 5
    gt $I11, rx117_eos, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 5
    ne $S10, ucs4:"begin", rx117_fail463
    add rx117_pos, 5
    nqp_rxmark rx117_bstack, rxquantr131_done495, -1, 0
  rxquantr131_loop494:
    ge rx117_pos, rx117_eos, rx117_fail463
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail463
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr131_done495
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr131_done495
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr131_done495, rx117_pos, rx117_rep
    goto rxquantr131_loop494
  rxquantr131_done495:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail463
    nqp_rxmark rx117_bstack, rxsubrule132_pass496, -1, 0
  rxsubrule132_pass496:
    rx117_cstack = rx117_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
  alt133_0498:
    nqp_rxmark rx117_bstack, alt133_1510, rx117_pos, 0
    set rx117_rep, 0
    nqp_rxmark rx117_bstack, rxquantf134_loop499, rx117_pos, rx117_rep
    goto rxquantf134_done500
  rxquantf134_loop499:
    set $I12, rx117_rep
    ge rx117_pos, rx117_eos, rx117_fail463
    add rx117_pos, 1
    set rx117_rep, $I12
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantf134_loop499, rx117_pos, rx117_rep
  rxquantf134_done500:
    ge rx117_pos, rx117_eos, rx117_fail463
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    unless $I11, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx117_pos, $I11
    add rx117_pos, 1
    nqp_rxmark rx117_bstack, rxquantr135_done503, rx117_pos, 0
  rxquantr135_loop502:
    ge rx117_pos, rx117_eos, rx117_fail463
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail463
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr135_done503
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr135_done503
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr135_done503, rx117_pos, rx117_rep
    goto rxquantr135_loop502
  rxquantr135_done503:
    add $I11, rx117_pos, 4
    gt $I11, rx117_eos, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 4
    ne $S10, ucs4:"=end", rx117_fail463
    add rx117_pos, 4
    nqp_rxmark rx117_bstack, rxquantr136_done505, -1, 0
  rxquantr136_loop504:
    ge rx117_pos, rx117_eos, rx117_fail463
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail463
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr136_done505
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr136_done505
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr136_done505, rx117_pos, rx117_rep
    goto rxquantr136_loop504
  rxquantr136_done505:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."!BACKREF"("identifier")
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail463
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
    le rx117_pos, 0, rx117_fail463
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, rx117_pos
    if $I11, rx117_fail463
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, $I11
    unless $I11, rx117_fail463
    nqp_rxmark rx117_bstack, rxquantr139_done509, rx117_pos, 0
  rxquantr139_loop508:
    ge rx117_pos, rx117_eos, rx117_fail463
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    if $I11, rx117_fail463
    add rx117_pos, 1
    nqp_rxpeek $I19, rx117_bstack, rxquantr139_done509
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr139_done509
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr139_done509, rx117_pos, rx117_rep
    goto rxquantr139_loop508
  rxquantr139_done509:
    goto alt133_end497
  alt133_1510:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail463
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
  alt133_end497:
    goto alt121_end473
  alt121_2512:
    add $I11, rx117_pos, 5
    gt $I11, rx117_eos, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 5
    ne $S10, ucs4:"begin", rx117_fail463
    add rx117_pos, 5
    le rx117_pos, 0, rx117_fail463
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, rx117_pos
    if $I11, rx117_fail463
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, $I11
    unless $I11, rx117_fail463
    nqp_rxmark rx117_bstack, rxquantr142_done515, rx117_pos, 0
  rxquantr142_loop514:
    ge rx117_pos, rx117_eos, rx117_fail463
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail463
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr142_done515
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr142_done515
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr142_done515, rx117_pos, rx117_rep
    goto rxquantr142_loop514
  rxquantr142_done515:
  alt143_0517:
    nqp_rxmark rx117_bstack, alt143_1519, rx117_pos, 0
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    if $I11, rxanchor144_done518
    ne rx117_pos, rx117_eos, rx117_fail463
    eq rx117_pos, 0, rxanchor144_done518
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, $I11
    if $I11, rx117_fail463
  rxanchor144_done518:
    goto alt143_end516
  alt143_1519:
    nqp_rxmark rx117_bstack, alt143_2520, rx117_pos, 0
    add $I11, rx117_pos, 1
    gt $I11, rx117_eos, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 1
    ne $S10, ucs4:"#", rx117_fail463
    add rx117_pos, 1
    goto alt143_end516
  alt143_2520:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."panic"("Unrecognized token after =begin")
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail463
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
  alt143_end516:
  alt146_0523:
    nqp_rxmark rx117_bstack, alt146_1532, rx117_pos, 0
    set rx117_rep, 0
    nqp_rxmark rx117_bstack, rxquantf147_loop524, rx117_pos, rx117_rep
    goto rxquantf147_done525
  rxquantf147_loop524:
    set $I12, rx117_rep
    ge rx117_pos, rx117_eos, rx117_fail463
    add rx117_pos, 1
    set rx117_rep, $I12
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantf147_loop524, rx117_pos, rx117_rep
  rxquantf147_done525:
    ge rx117_pos, rx117_eos, rx117_fail463
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    unless $I11, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx117_pos, $I11
    add rx117_pos, 1
    nqp_rxmark rx117_bstack, rxquantr148_done528, rx117_pos, 0
  rxquantr148_loop527:
    ge rx117_pos, rx117_eos, rx117_fail463
    substr $S11, rx117_tgt, rx117_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx117_fail463
    inc rx117_pos
    nqp_rxpeek $I19, rx117_bstack, rxquantr148_done528
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr148_done528
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr148_done528, rx117_pos, rx117_rep
    goto rxquantr148_loop527
  rxquantr148_done528:
    add $I11, rx117_pos, 4
    gt $I11, rx117_eos, rx117_fail463
    substr $S10, rx117_tgt, rx117_pos, 4
    ne $S10, ucs4:"=end", rx117_fail463
    add rx117_pos, 4
    le rx117_pos, 0, rx117_fail463
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, rx117_pos
    if $I11, rx117_fail463
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx117_tgt, $I11
    unless $I11, rx117_fail463
    nqp_rxmark rx117_bstack, rxquantr150_done531, rx117_pos, 0
  rxquantr150_loop530:
    ge rx117_pos, rx117_eos, rx117_fail463
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    if $I11, rx117_fail463
    add rx117_pos, 1
    nqp_rxpeek $I19, rx117_bstack, rxquantr150_done531
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr150_done531
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr150_done531, rx117_pos, rx117_rep
    goto rxquantr150_loop530
  rxquantr150_done531:
    goto alt146_end522
  alt146_1532:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."panic"("=begin without matching =end")
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail463
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
  alt146_end522:
    goto alt121_end473
  alt121_3534:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail463
    nqp_rxmark rx117_bstack, rxsubrule152_pass535, -1, 0
  rxsubrule152_pass535:
    rx117_cstack = rx117_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
    set rx117_rep, 0
    nqp_rxmark rx117_bstack, rxquantf153_loop536, rx117_pos, rx117_rep
    goto rxquantf153_done537
  rxquantf153_loop536:
    set $I12, rx117_rep
    ge rx117_pos, rx117_eos, rx117_fail463
    add rx117_pos, 1
    set rx117_rep, $I12
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantf153_loop536, rx117_pos, rx117_rep
  rxquantf153_done537:
    eq rx117_pos, 0, rxanchor154_done539
    ge rx117_pos, rx117_eos, rx117_fail463
    sub $I11, rx117_pos, 1
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, $I11
    unless $I11, rx117_fail463
  rxanchor154_done539:
    .const 'Sub' $P5001 = 'cuid_41_1347804164.33' 
    capture_lex $P5001
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail463
    goto alt121_end473
  alt121_4559:
  alt162_0561:
    nqp_rxmark rx117_bstack, alt162_1562, rx117_pos, 0
    ge rx117_pos, rx117_eos, rx117_fail463
    is_cclass $I11, .CCLASS_WHITESPACE, rx117_tgt, rx117_pos
    unless $I11, rx117_fail463
    add rx117_pos, 1
    goto alt162_end560
  alt162_1562:
    repr_bind_attr_int rx117_cur, rx117_curclass, "$!pos", rx117_pos
    $P11 = rx117_cur."panic"("Illegal pod directive")
    repr_get_attr_int $I11, $P11, rx117_curclass, "$!pos"
    lt $I11, 0, rx117_fail463
    repr_get_attr_int rx117_pos, $P11, rx117_curclass, "$!pos"
  alt162_end560:
    nqp_rxmark rx117_bstack, rxquantr164_done565, rx117_pos, 0
  rxquantr164_loop564:
    ge rx117_pos, rx117_eos, rx117_fail463
    is_cclass $I11, .CCLASS_NEWLINE, rx117_tgt, rx117_pos
    if $I11, rx117_fail463
    add rx117_pos, 1
    nqp_rxpeek $I19, rx117_bstack, rxquantr164_done565
    inc $I19
    inc $I19
    set rx117_rep, rx117_bstack[$I19]
    nqp_rxcommit rx117_bstack, rxquantr164_done565
    inc rx117_rep
    nqp_rxmark rx117_bstack, rxquantr164_done565, rx117_pos, rx117_rep
    goto rxquantr164_loop564
  rxquantr164_done565:
    goto alt121_end473
  alt121_end473:
    nqp_rxcommit rx117_bstack, alt121_end473
    rx117_cur."!cursor_pass"(rx117_pos, "pod_comment", 'backtrack'=>1)
    .return (rx117_cur)
  rx117_restart462:
    repr_get_attr_obj rx117_cstack, rx117_cur, rx117_curclass, "$!cstack"
  rx117_fail463:
    unless rx117_bstack, rx117_done461
    pop $I19, rx117_bstack
    if_null rx117_cstack, rx117_cstack_done466
    unless rx117_cstack, rx117_cstack_done466
    dec $I19
    set $P11, rx117_cstack[$I19]
  rx117_cstack_done466:
    pop rx117_rep, rx117_bstack
    pop rx117_pos, rx117_bstack
    pop $I19, rx117_bstack
    lt rx117_pos, -1, rx117_done461
    lt rx117_pos, 0, rx117_fail463
    eq $I19, 0, rx117_fail463
    nqp_islist $I20, rx117_cstack
    unless $I20, rx117_jump464
    elements $I18, rx117_bstack
    le $I18, 0, rx117_cut465
    dec $I18
    set $I18, rx117_bstack[$I18]
  rx117_cut465:
    assign rx117_cstack, $I18
  rx117_jump464:
    jump $I19
  rx117_done461:
    rx117_cur."!cursor_fail"()
    .return (rx117_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_42_1347804164.33_caps" :subid("cuid_memo_18_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["identifier"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_42_1347804164.33_nfa" :subid("cuid_memo_19_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 6
    push $P5007, $P5008
    box $P5009, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5007, $P5009
    box $P5010, 2
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 3
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 61
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 98
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    box $P5022, 2
    push $P5018, $P5022
    box $P5023, 98
    push $P5018, $P5023
    box $P5024, 17
    push $P5018, $P5024
    box $P5025, 2
    push $P5018, $P5025
    box $P5026, 98
    push $P5018, $P5026
    box $P5027, 26
    push $P5018, $P5027
    box $P5028, 8
    push $P5018, $P5028
    box $P5029, "identifier"
    push $P5018, $P5029
    box $P5030, 33
    push $P5018, $P5030
    box $P5031, 0
    push $P5018, $P5031
    box $P5032, 0
    push $P5018, $P5032
    box $P5033, 0
    push $P5018, $P5033
    push $P5001, $P5018
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 101
    push $P5034, $P5036
    box $P5037, 6
    push $P5034, $P5037
    push $P5001, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 103
    push $P5038, $P5040
    box $P5041, 7
    push $P5038, $P5041
    push $P5001, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 105
    push $P5042, $P5044
    box $P5045, 8
    push $P5042, $P5045
    push $P5001, $P5042
    new $P5046, 'ResizablePMCArray'
    box $P5047, 2
    push $P5046, $P5047
    box $P5048, 110
    push $P5046, $P5048
    box $P5049, 9
    push $P5046, $P5049
    push $P5001, $P5046
    new $P5050, 'ResizablePMCArray'
    box $P5051, 1
    push $P5050, $P5051
    box $P5052, 0
    push $P5050, $P5052
    box $P5053, 10
    push $P5050, $P5053
    push $P5001, $P5050
    new $P5054, 'ResizablePMCArray'
    box $P5055, 6
    push $P5054, $P5055
    box $P5056, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5054, $P5056
    box $P5057, 11
    push $P5054, $P5057
    push $P5001, $P5054
    new $P5058, 'ResizablePMCArray'
    box $P5059, 1
    push $P5058, $P5059
    box $P5060, 0
    push $P5058, $P5060
    box $P5061, 10
    push $P5058, $P5061
    box $P5062, 1
    push $P5058, $P5062
    box $P5063, 0
    push $P5058, $P5063
    box $P5064, 12
    push $P5058, $P5064
    box $P5065, 2
    push $P5058, $P5065
    box $P5066, 69
    push $P5058, $P5066
    box $P5067, 13
    push $P5058, $P5067
    push $P5001, $P5058
    new $P5068, 'ResizablePMCArray'
    push $P5001, $P5068
    new $P5069, 'ResizablePMCArray'
    box $P5070, 2
    push $P5069, $P5070
    box $P5071, 78
    push $P5069, $P5071
    box $P5072, 14
    push $P5069, $P5072
    push $P5001, $P5069
    new $P5073, 'ResizablePMCArray'
    box $P5074, 2
    push $P5073, $P5074
    box $P5075, 68
    push $P5073, $P5075
    box $P5076, 15
    push $P5073, $P5076
    push $P5001, $P5073
    new $P5077, 'ResizablePMCArray'
    box $P5078, 1
    push $P5077, $P5078
    box $P5079, 0
    push $P5077, $P5079
    box $P5080, 16
    push $P5077, $P5080
    push $P5001, $P5077
    new $P5081, 'ResizablePMCArray'
    box $P5082, 0
    push $P5081, $P5082
    box $P5083, 0
    push $P5081, $P5083
    box $P5084, 0
    push $P5081, $P5084
    push $P5001, $P5081
    new $P5085, 'ResizablePMCArray'
    box $P5086, 2
    push $P5085, $P5086
    box $P5087, 101
    push $P5085, $P5087
    box $P5088, 18
    push $P5085, $P5088
    push $P5001, $P5085
    new $P5089, 'ResizablePMCArray'
    box $P5090, 2
    push $P5089, $P5090
    box $P5091, 103
    push $P5089, $P5091
    box $P5092, 19
    push $P5089, $P5092
    push $P5001, $P5089
    new $P5093, 'ResizablePMCArray'
    box $P5094, 2
    push $P5093, $P5094
    box $P5095, 105
    push $P5093, $P5095
    box $P5096, 20
    push $P5093, $P5096
    push $P5001, $P5093
    new $P5097, 'ResizablePMCArray'
    box $P5098, 2
    push $P5097, $P5098
    box $P5099, 110
    push $P5097, $P5099
    box $P5100, 21
    push $P5097, $P5100
    push $P5001, $P5097
    new $P5101, 'ResizablePMCArray'
    box $P5102, 1
    push $P5101, $P5102
    box $P5103, 0
    push $P5101, $P5103
    box $P5104, 22
    push $P5101, $P5104
    push $P5001, $P5101
    new $P5105, 'ResizablePMCArray'
    box $P5106, 6
    push $P5105, $P5106
    box $P5107, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5105, $P5107
    box $P5108, 23
    push $P5105, $P5108
    push $P5001, $P5105
    new $P5109, 'ResizablePMCArray'
    box $P5110, 1
    push $P5109, $P5110
    box $P5111, 0
    push $P5109, $P5111
    box $P5112, 22
    push $P5109, $P5112
    box $P5113, 1
    push $P5109, $P5113
    box $P5114, 0
    push $P5109, $P5114
    box $P5115, 24
    push $P5109, $P5115
    box $P5116, 8
    push $P5109, $P5116
    box $P5117, "identifier"
    push $P5109, $P5117
    box $P5118, 25
    push $P5109, $P5118
    push $P5001, $P5109
    new $P5119, 'ResizablePMCArray'
    push $P5001, $P5119
    new $P5120, 'ResizablePMCArray'
    box $P5121, 0
    push $P5120, $P5121
    box $P5122, 0
    push $P5120, $P5122
    box $P5123, 0
    push $P5120, $P5123
    push $P5001, $P5120
    new $P5124, 'ResizablePMCArray'
    box $P5125, 2
    push $P5124, $P5125
    box $P5126, 101
    push $P5124, $P5126
    box $P5127, 27
    push $P5124, $P5127
    push $P5001, $P5124
    new $P5128, 'ResizablePMCArray'
    box $P5129, 2
    push $P5128, $P5129
    box $P5130, 103
    push $P5128, $P5130
    box $P5131, 28
    push $P5128, $P5131
    push $P5001, $P5128
    new $P5132, 'ResizablePMCArray'
    box $P5133, 2
    push $P5132, $P5133
    box $P5134, 105
    push $P5132, $P5134
    box $P5135, 29
    push $P5132, $P5135
    push $P5001, $P5132
    new $P5136, 'ResizablePMCArray'
    box $P5137, 2
    push $P5136, $P5137
    box $P5138, 110
    push $P5136, $P5138
    box $P5139, 30
    push $P5136, $P5139
    push $P5001, $P5136
    new $P5140, 'ResizablePMCArray'
    box $P5141, 1
    push $P5140, $P5141
    box $P5142, 0
    push $P5140, $P5142
    box $P5143, 31
    push $P5140, $P5143
    push $P5001, $P5140
    new $P5144, 'ResizablePMCArray'
    box $P5145, 6
    push $P5144, $P5145
    box $P5146, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5144, $P5146
    box $P5147, 31
    push $P5144, $P5147
    box $P5148, 1
    push $P5144, $P5148
    box $P5149, 0
    push $P5144, $P5149
    box $P5150, 32
    push $P5144, $P5150
    push $P5001, $P5144
    new $P5151, 'ResizablePMCArray'
    box $P5152, 0
    push $P5151, $P5152
    box $P5153, 0
    push $P5151, $P5153
    box $P5154, 0
    push $P5151, $P5154
    push $P5001, $P5151
    new $P5155, 'ResizablePMCArray'
    box $P5156, 4
    push $P5155, $P5156
    box $P5157, 65535
    push $P5155, $P5157
    box $P5158, 33
    push $P5155, $P5158
    box $P5159, 1
    push $P5155, $P5159
    box $P5160, 0
    push $P5155, $P5160
    box $P5161, 34
    push $P5155, $P5161
    push $P5001, $P5155
    new $P5162, 'ResizablePMCArray'
    box $P5163, 1
    push $P5162, $P5163
    box $P5164, 0
    push $P5162, $P5164
    box $P5165, 35
    push $P5162, $P5165
    push $P5001, $P5162
    new $P5166, 'ResizablePMCArray'
    box $P5167, 6
    push $P5166, $P5167
    box $P5168, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5166, $P5168
    box $P5169, 35
    push $P5166, $P5169
    box $P5170, 1
    push $P5166, $P5170
    box $P5171, 0
    push $P5166, $P5171
    box $P5172, 37
    push $P5166, $P5172
    push $P5001, $P5166
    new $P5173, 'ResizablePMCArray'
    box $P5174, 0
    push $P5173, $P5174
    box $P5175, 0
    push $P5173, $P5175
    box $P5176, 0
    push $P5173, $P5176
    push $P5001, $P5173
    new $P5177, 'ResizablePMCArray'
    box $P5178, 2
    push $P5177, $P5178
    box $P5179, 61
    push $P5177, $P5179
    box $P5180, 38
    push $P5177, $P5180
    box $P5181, 4
    push $P5177, $P5181
    box $P5182, 4096
    push $P5177, $P5182
    box $P5183, 36
    push $P5177, $P5183
    push $P5001, $P5177
    new $P5184, 'ResizablePMCArray'
    box $P5185, 2
    push $P5184, $P5185
    box $P5186, 99
    push $P5184, $P5186
    box $P5187, 39
    push $P5184, $P5187
    box $P5188, 1
    push $P5184, $P5188
    box $P5189, 0
    push $P5184, $P5189
    box $P5190, 36
    push $P5184, $P5190
    push $P5001, $P5184
    new $P5191, 'ResizablePMCArray'
    box $P5192, 2
    push $P5191, $P5192
    box $P5193, 117
    push $P5191, $P5193
    box $P5194, 40
    push $P5191, $P5194
    push $P5001, $P5191
    new $P5195, 'ResizablePMCArray'
    box $P5196, 2
    push $P5195, $P5196
    box $P5197, 116
    push $P5195, $P5197
    box $P5198, 41
    push $P5195, $P5198
    push $P5001, $P5195
    new $P5199, 'ResizablePMCArray'
    box $P5200, 1
    push $P5199, $P5200
    box $P5201, 0
    push $P5199, $P5201
    box $P5202, 42
    push $P5199, $P5202
    push $P5001, $P5199
    new $P5203, 'ResizablePMCArray'
    box $P5204, 8
    push $P5203, $P5204
    box $P5205, "panic"
    push $P5203, $P5205
    box $P5206, 36
    push $P5203, $P5206
    push $P5001, $P5203
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_42_1347804164.33_alt_nfa__6_1347804165.673" :subid("cuid_memo_20_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 98
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 101
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 103
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 105
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 110
    push $P5020, $P5022
    box $P5023, 6
    push $P5020, $P5023
    push $P5002, $P5020
    new $P5024, 'ResizablePMCArray'
    box $P5025, 1
    push $P5024, $P5025
    box $P5026, 0
    push $P5024, $P5026
    box $P5027, 7
    push $P5024, $P5027
    push $P5002, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 6
    push $P5028, $P5029
    box $P5030, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5028, $P5030
    box $P5031, 8
    push $P5028, $P5031
    push $P5002, $P5028
    new $P5032, 'ResizablePMCArray'
    box $P5033, 1
    push $P5032, $P5033
    box $P5034, 0
    push $P5032, $P5034
    box $P5035, 7
    push $P5032, $P5035
    box $P5036, 1
    push $P5032, $P5036
    box $P5037, 0
    push $P5032, $P5037
    box $P5038, 9
    push $P5032, $P5038
    box $P5039, 2
    push $P5032, $P5039
    box $P5040, 69
    push $P5032, $P5040
    box $P5041, 10
    push $P5032, $P5041
    push $P5002, $P5032
    new $P5042, 'ResizablePMCArray'
    push $P5002, $P5042
    new $P5043, 'ResizablePMCArray'
    box $P5044, 2
    push $P5043, $P5044
    box $P5045, 78
    push $P5043, $P5045
    box $P5046, 11
    push $P5043, $P5046
    push $P5002, $P5043
    new $P5047, 'ResizablePMCArray'
    box $P5048, 2
    push $P5047, $P5048
    box $P5049, 68
    push $P5047, $P5049
    box $P5050, 12
    push $P5047, $P5050
    push $P5002, $P5047
    new $P5051, 'ResizablePMCArray'
    box $P5052, 1
    push $P5051, $P5052
    box $P5053, 0
    push $P5051, $P5053
    box $P5054, 13
    push $P5051, $P5054
    push $P5002, $P5051
    new $P5055, 'ResizablePMCArray'
    box $P5056, 0
    push $P5055, $P5056
    box $P5057, 0
    push $P5055, $P5057
    box $P5058, 0
    push $P5055, $P5058
    push $P5002, $P5055
    push $P5001, $P5002
    new $P5059, 'ResizablePMCArray'
    new $P5060, 'ResizablePMCArray'
    push $P5059, $P5060
    new $P5061, 'ResizablePMCArray'
    box $P5062, 2
    push $P5061, $P5062
    box $P5063, 98
    push $P5061, $P5063
    box $P5064, 2
    push $P5061, $P5064
    push $P5059, $P5061
    new $P5065, 'ResizablePMCArray'
    box $P5066, 2
    push $P5065, $P5066
    box $P5067, 101
    push $P5065, $P5067
    box $P5068, 3
    push $P5065, $P5068
    push $P5059, $P5065
    new $P5069, 'ResizablePMCArray'
    box $P5070, 2
    push $P5069, $P5070
    box $P5071, 103
    push $P5069, $P5071
    box $P5072, 4
    push $P5069, $P5072
    push $P5059, $P5069
    new $P5073, 'ResizablePMCArray'
    box $P5074, 2
    push $P5073, $P5074
    box $P5075, 105
    push $P5073, $P5075
    box $P5076, 5
    push $P5073, $P5076
    push $P5059, $P5073
    new $P5077, 'ResizablePMCArray'
    box $P5078, 2
    push $P5077, $P5078
    box $P5079, 110
    push $P5077, $P5079
    box $P5080, 6
    push $P5077, $P5080
    push $P5059, $P5077
    new $P5081, 'ResizablePMCArray'
    box $P5082, 1
    push $P5081, $P5082
    box $P5083, 0
    push $P5081, $P5083
    box $P5084, 7
    push $P5081, $P5084
    push $P5059, $P5081
    new $P5085, 'ResizablePMCArray'
    box $P5086, 6
    push $P5085, $P5086
    box $P5087, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5085, $P5087
    box $P5088, 8
    push $P5085, $P5088
    push $P5059, $P5085
    new $P5089, 'ResizablePMCArray'
    box $P5090, 1
    push $P5089, $P5090
    box $P5091, 0
    push $P5089, $P5091
    box $P5092, 7
    push $P5089, $P5092
    box $P5093, 1
    push $P5089, $P5093
    box $P5094, 0
    push $P5089, $P5094
    box $P5095, 9
    push $P5089, $P5095
    box $P5096, 8
    push $P5089, $P5096
    box $P5097, "identifier"
    push $P5089, $P5097
    box $P5098, 10
    push $P5089, $P5098
    push $P5059, $P5089
    new $P5099, 'ResizablePMCArray'
    push $P5059, $P5099
    new $P5100, 'ResizablePMCArray'
    box $P5101, 0
    push $P5100, $P5101
    box $P5102, 0
    push $P5100, $P5102
    box $P5103, 0
    push $P5100, $P5103
    push $P5059, $P5100
    push $P5001, $P5059
    new $P5104, 'ResizablePMCArray'
    new $P5105, 'ResizablePMCArray'
    push $P5104, $P5105
    new $P5106, 'ResizablePMCArray'
    box $P5107, 2
    push $P5106, $P5107
    box $P5108, 98
    push $P5106, $P5108
    box $P5109, 2
    push $P5106, $P5109
    push $P5104, $P5106
    new $P5110, 'ResizablePMCArray'
    box $P5111, 2
    push $P5110, $P5111
    box $P5112, 101
    push $P5110, $P5112
    box $P5113, 3
    push $P5110, $P5113
    push $P5104, $P5110
    new $P5114, 'ResizablePMCArray'
    box $P5115, 2
    push $P5114, $P5115
    box $P5116, 103
    push $P5114, $P5116
    box $P5117, 4
    push $P5114, $P5117
    push $P5104, $P5114
    new $P5118, 'ResizablePMCArray'
    box $P5119, 2
    push $P5118, $P5119
    box $P5120, 105
    push $P5118, $P5120
    box $P5121, 5
    push $P5118, $P5121
    push $P5104, $P5118
    new $P5122, 'ResizablePMCArray'
    box $P5123, 2
    push $P5122, $P5123
    box $P5124, 110
    push $P5122, $P5124
    box $P5125, 6
    push $P5122, $P5125
    push $P5104, $P5122
    new $P5126, 'ResizablePMCArray'
    box $P5127, 1
    push $P5126, $P5127
    box $P5128, 0
    push $P5126, $P5128
    box $P5129, 7
    push $P5126, $P5129
    push $P5104, $P5126
    new $P5130, 'ResizablePMCArray'
    box $P5131, 6
    push $P5130, $P5131
    box $P5132, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5130, $P5132
    box $P5133, 7
    push $P5130, $P5133
    box $P5134, 1
    push $P5130, $P5134
    box $P5135, 0
    push $P5130, $P5135
    box $P5136, 8
    push $P5130, $P5136
    push $P5104, $P5130
    new $P5137, 'ResizablePMCArray'
    box $P5138, 0
    push $P5137, $P5138
    box $P5139, 0
    push $P5137, $P5139
    box $P5140, 0
    push $P5137, $P5140
    push $P5104, $P5137
    push $P5001, $P5104
    new $P5141, 'ResizablePMCArray'
    new $P5142, 'ResizablePMCArray'
    push $P5141, $P5142
    new $P5143, 'ResizablePMCArray'
    box $P5144, 8
    push $P5143, $P5144
    box $P5145, "identifier"
    push $P5143, $P5145
    box $P5146, 2
    push $P5143, $P5146
    push $P5141, $P5143
    new $P5147, 'ResizablePMCArray'
    box $P5148, 4
    push $P5147, $P5148
    box $P5149, 65535
    push $P5147, $P5149
    box $P5150, 2
    push $P5147, $P5150
    box $P5151, 1
    push $P5147, $P5151
    box $P5152, 0
    push $P5147, $P5152
    box $P5153, 3
    push $P5147, $P5153
    push $P5141, $P5147
    new $P5154, 'ResizablePMCArray'
    box $P5155, 1
    push $P5154, $P5155
    box $P5156, 0
    push $P5154, $P5156
    box $P5157, 4
    push $P5154, $P5157
    push $P5141, $P5154
    new $P5158, 'ResizablePMCArray'
    box $P5159, 6
    push $P5158, $P5159
    box $P5160, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5158, $P5160
    box $P5161, 4
    push $P5158, $P5161
    box $P5162, 1
    push $P5158, $P5162
    box $P5163, 0
    push $P5158, $P5163
    box $P5164, 6
    push $P5158, $P5164
    push $P5141, $P5158
    new $P5165, 'ResizablePMCArray'
    box $P5166, 0
    push $P5165, $P5166
    box $P5167, 0
    push $P5165, $P5167
    box $P5168, 0
    push $P5165, $P5168
    push $P5141, $P5165
    new $P5169, 'ResizablePMCArray'
    box $P5170, 2
    push $P5169, $P5170
    box $P5171, 61
    push $P5169, $P5171
    box $P5172, 7
    push $P5169, $P5172
    box $P5173, 4
    push $P5169, $P5173
    box $P5174, 4096
    push $P5169, $P5174
    box $P5175, 5
    push $P5169, $P5175
    push $P5141, $P5169
    new $P5176, 'ResizablePMCArray'
    box $P5177, 2
    push $P5176, $P5177
    box $P5178, 99
    push $P5176, $P5178
    box $P5179, 8
    push $P5176, $P5179
    box $P5180, 1
    push $P5176, $P5180
    box $P5181, 0
    push $P5176, $P5181
    box $P5182, 5
    push $P5176, $P5182
    push $P5141, $P5176
    new $P5183, 'ResizablePMCArray'
    box $P5184, 2
    push $P5183, $P5184
    box $P5185, 117
    push $P5183, $P5185
    box $P5186, 9
    push $P5183, $P5186
    push $P5141, $P5183
    new $P5187, 'ResizablePMCArray'
    box $P5188, 2
    push $P5187, $P5188
    box $P5189, 116
    push $P5187, $P5189
    box $P5190, 10
    push $P5187, $P5190
    push $P5141, $P5187
    new $P5191, 'ResizablePMCArray'
    box $P5192, 1
    push $P5191, $P5192
    box $P5193, 0
    push $P5191, $P5193
    box $P5194, 11
    push $P5191, $P5194
    push $P5141, $P5191
    new $P5195, 'ResizablePMCArray'
    box $P5196, 8
    push $P5195, $P5196
    box $P5197, "panic"
    push $P5195, $P5197
    box $P5198, 5
    push $P5195, $P5198
    push $P5141, $P5195
    push $P5001, $P5141
    new $P5199, 'ResizablePMCArray'
    new $P5200, 'ResizablePMCArray'
    push $P5199, $P5200
    new $P5201, 'ResizablePMCArray'
    box $P5202, 0
    push $P5201, $P5202
    box $P5203, 0
    push $P5201, $P5203
    box $P5204, 0
    push $P5201, $P5204
    box $P5205, 0
    push $P5201, $P5205
    box $P5206, 0
    push $P5201, $P5206
    box $P5207, 0
    push $P5201, $P5207
    push $P5199, $P5201
    push $P5001, $P5199
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_41_1347804164.33") :anon :lex :outer("cuid_42_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx155_tgt
    .local int rx155_pos
    .local int rx155_off
    .local int rx155_eos
    .local int rx155_rep
    .local pmc rx155_cur
    .local pmc rx155_curclass
    .local pmc rx155_bstack
    .local pmc rx155_cstack
    (rx155_cur, rx155_tgt, rx155_pos, rx155_curclass, rx155_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx155_cur
    length rx155_eos, rx155_tgt
    eq $I19, 1, rx155_restart542
    gt rx155_pos, rx155_eos, rx155_fail543
    repr_get_attr_int $I11, self, rx155_curclass, "$!from"
    ne $I11, -1, rxscan156_done549
    goto rxscan156_scan548
  rxscan156_loop547:
    inc rx155_pos
    gt rx155_pos, rx155_eos, rx155_fail543
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!from", rx155_pos
  rxscan156_scan548:
    nqp_rxmark rx155_bstack, rxscan156_loop547, rx155_pos, 0
  rxscan156_done549:
    nqp_rxmark rx155_bstack, rxquantr157_done551, rx155_pos, 0
  rxquantr157_loop550:
    ge rx155_pos, rx155_eos, rx155_fail543
    substr $S11, rx155_tgt, rx155_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx155_fail543
    inc rx155_pos
    nqp_rxpeek $I19, rx155_bstack, rxquantr157_done551
    inc $I19
    inc $I19
    set rx155_rep, rx155_bstack[$I19]
    nqp_rxcommit rx155_bstack, rxquantr157_done551
    inc rx155_rep
    nqp_rxmark rx155_bstack, rxquantr157_done551, rx155_pos, rx155_rep
    goto rxquantr157_loop550
  rxquantr157_done551:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt158_0553
    nqp_push_label $P11, alt158_1558
    nqp_rxmark rx155_bstack, alt158_end552, -1, 0
    rx155_cur."!alt"(rx155_pos, "alt_nfa__5_1347804165.657", $P11)
    goto rx155_fail543
  alt158_0553:
    add $I11, rx155_pos, 1
    gt $I11, rx155_eos, rx155_fail543
    substr $S10, rx155_tgt, rx155_pos, 1
    ne $S10, ucs4:"=", rx155_fail543
    add rx155_pos, 1
    nqp_rxmark rx155_bstack, rxquantr159_done555, rx155_pos, 0
  rxquantr159_loop554:
    add $I11, rx155_pos, 3
    gt $I11, rx155_eos, rx155_fail543
    substr $S10, rx155_tgt, rx155_pos, 3
    ne $S10, ucs4:"cut", rx155_fail543
    add rx155_pos, 3
    le rx155_pos, 0, rx155_fail543
    is_cclass $I11, .CCLASS_WORD, rx155_tgt, rx155_pos
    if $I11, rx155_fail543
    sub $I11, rx155_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx155_tgt, $I11
    unless $I11, rx155_fail543
    repr_bind_attr_int rx155_cur, rx155_curclass, "$!pos", rx155_pos
    $P11 = rx155_cur."panic"("Obsolete pod format, please use =begin/=end instead")
    repr_get_attr_int $I11, $P11, rx155_curclass, "$!pos"
    lt $I11, 0, rx155_fail543
    repr_get_attr_int rx155_pos, $P11, rx155_curclass, "$!pos"
    nqp_rxpeek $I19, rx155_bstack, rxquantr159_done555
    inc $I19
    inc $I19
    set rx155_rep, rx155_bstack[$I19]
    nqp_rxcommit rx155_bstack, rxquantr159_done555
    inc rx155_rep
  rxquantr159_done555:
    goto alt158_end552
  alt158_1558:
    ge rx155_pos, rx155_eos, rx155_fail543
    is_cclass $I11, .CCLASS_NEWLINE, rx155_tgt, rx155_pos
    unless $I11, rx155_fail543
    substr $S10, rx155_tgt, rx155_pos, 2
    iseq $I11, $S10, "\r\n"
    add rx155_pos, $I11
    add rx155_pos, 1
    goto alt158_end552
  alt158_end552:
    nqp_rxcommit rx155_bstack, alt158_end552
    rx155_cur."!cursor_pass"(rx155_pos, 'backtrack'=>1)
    .return (rx155_cur)
  rx155_restart542:
    repr_get_attr_obj rx155_cstack, rx155_cur, rx155_curclass, "$!cstack"
  rx155_fail543:
    unless rx155_bstack, rx155_done541
    pop $I19, rx155_bstack
    if_null rx155_cstack, rx155_cstack_done546
    unless rx155_cstack, rx155_cstack_done546
    dec $I19
    set $P11, rx155_cstack[$I19]
  rx155_cstack_done546:
    pop rx155_rep, rx155_bstack
    pop rx155_pos, rx155_bstack
    pop $I19, rx155_bstack
    lt rx155_pos, -1, rx155_done541
    lt rx155_pos, 0, rx155_fail543
    eq $I19, 0, rx155_fail543
    nqp_islist $I20, rx155_cstack
    unless $I20, rx155_jump544
    elements $I18, rx155_bstack
    le $I18, 0, rx155_cut545
    dec $I18
    set $I18, rx155_bstack[$I18]
  rx155_cut545:
    assign rx155_cstack, $I18
  rx155_jump544:
    jump $I19
  rx155_done541:
    rx155_cur."!cursor_fail"()
    .return (rx155_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_41_1347804164.33_caps" :subid("cuid_memo_21_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_41_1347804164.33_nfa" :subid("cuid_memo_22_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5003, $P5005
    box $P5006, 1
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 61
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    box $P5014, 4
    push $P5010, $P5014
    box $P5015, 4096
    push $P5010, $P5015
    box $P5016, 0
    push $P5010, $P5016
    push $P5001, $P5010
    new $P5017, 'ResizablePMCArray'
    box $P5018, 2
    push $P5017, $P5018
    box $P5019, 99
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    box $P5021, 1
    push $P5017, $P5021
    box $P5022, 0
    push $P5017, $P5022
    box $P5023, 0
    push $P5017, $P5023
    push $P5001, $P5017
    new $P5024, 'ResizablePMCArray'
    box $P5025, 2
    push $P5024, $P5025
    box $P5026, 117
    push $P5024, $P5026
    box $P5027, 5
    push $P5024, $P5027
    push $P5001, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 2
    push $P5028, $P5029
    box $P5030, 116
    push $P5028, $P5030
    box $P5031, 6
    push $P5028, $P5031
    push $P5001, $P5028
    new $P5032, 'ResizablePMCArray'
    box $P5033, 1
    push $P5032, $P5033
    box $P5034, 0
    push $P5032, $P5034
    box $P5035, 7
    push $P5032, $P5035
    push $P5001, $P5032
    new $P5036, 'ResizablePMCArray'
    box $P5037, 8
    push $P5036, $P5037
    box $P5038, "panic"
    push $P5036, $P5038
    box $P5039, 0
    push $P5036, $P5039
    push $P5001, $P5036
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_41_1347804164.33_alt_nfa__5_1347804165.657" :subid("cuid_memo_23_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 61
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 99
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    box $P5012, 1
    push $P5008, $P5012
    box $P5013, 0
    push $P5008, $P5013
    box $P5014, 0
    push $P5008, $P5014
    push $P5002, $P5008
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 117
    push $P5015, $P5017
    box $P5018, 4
    push $P5015, $P5018
    push $P5002, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 116
    push $P5019, $P5021
    box $P5022, 5
    push $P5019, $P5022
    push $P5002, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 1
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 6
    push $P5023, $P5026
    push $P5002, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "panic"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5002, $P5027
    push $P5001, $P5002
    new $P5031, 'ResizablePMCArray'
    new $P5032, 'ResizablePMCArray'
    push $P5031, $P5032
    new $P5033, 'ResizablePMCArray'
    box $P5034, 4
    push $P5033, $P5034
    box $P5035, 4096
    push $P5033, $P5035
    box $P5036, 0
    push $P5033, $P5036
    push $P5031, $P5033
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_43_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 690
    .param pmc _lex_param_0 
    .const 'Sub' $P5061 = 'cuid_384_1347804164.33' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_385_1347804164.33' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_387_1347804164.33' 
    capture_lex $P5061 
    .const 'Sub' $P5061 = 'cuid_388_1347804164.33' 
    capture_lex $P5061 
    .lex "$*IN_DECL", $P101 
    .lex "$*HAS_YOU_ARE_HERE", $P102 
    .lex "$*MAIN_SUB", $P103 
    .lex "$*UNIT", $P104 
    .lex "$*GLOBALish", $P105 
    .lex "$*PACKAGE", $P106 
    .lex "$*EXPORT", $P107 
    .lex utf8:"$\x{a2}", $P108 
    .lex "$/", $P109 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P104, $P5004
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P105, $P5005
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P106, $P5006
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P107, $P5007
    set self, _lex_param_0
    .local string rx165_tgt
    .local int rx165_pos
    .local int rx165_off
    .local int rx165_eos
    .local int rx165_rep
    .local pmc rx165_cur
    .local pmc rx165_curclass
    .local pmc rx165_bstack
    .local pmc rx165_cstack
    (rx165_cur, rx165_tgt, rx165_pos, rx165_curclass, rx165_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx165_cur
    length rx165_eos, rx165_tgt
    eq $I19, 1, rx165_restart568
    gt rx165_pos, rx165_eos, rx165_fail569
    repr_get_attr_int $I11, self, rx165_curclass, "$!from"
    ne $I11, -1, rxscan166_done575
    goto rxscan166_scan574
  rxscan166_loop573:
    inc rx165_pos
    gt rx165_pos, rx165_eos, rx165_fail569
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!from", rx165_pos
  rxscan166_scan574:
    nqp_rxmark rx165_bstack, rxscan166_loop573, rx165_pos, 0
  rxscan166_done575:
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    box $P5008, ""
    set $P101, $P5008
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    box $P5009, 0
    set $P102, $P5009
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    unless_null $P103, fallback576
    nqp_get_sc_object $P5012, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$MAIN_SUB"]
    unless_null $P5010, fallback577
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5013
  fallback577:
    unless_null $P5010, vivi_167578
    die "Contextual $*MAIN_SUB not found"
    box $P5014, "Contextual $*MAIN_SUB not found"
    set $P5010, $P5014
  vivi_167578:
    set $P103, $P5010
  fallback576:
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
.annotate 'line', 695
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback579
    nqp_get_sc_object $P5018, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback580
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5016, $P5019
  fallback580:
    unless_null $P5016, vivi_168581
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_168581:
    set $P5015, $P5016
  fallback579:
    $P5021 = $P5015."push_lexpad"($P109)
    set $P104, $P5021
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
.annotate 'line', 699
    find_dynamic_lex $P5022, "$*W"
    unless_null $P5022, fallback582
    nqp_get_sc_object $P5025, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$W"]
    unless_null $P5023, fallback583
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5023, $P5026
  fallback583:
    unless_null $P5023, vivi_169584
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5023, $P5027
  vivi_169584:
    set $P5022, $P5023
  fallback582:
    find_dynamic_lex $P5029, "%*HOW"
    unless_null $P5029, fallback585
    nqp_get_sc_object $P5032, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["%HOW"]
    unless_null $P5030, fallback586
    nqp_get_sc_object $P5034, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5033, $P5034
    new $P5035, 'Hash'
    set $P5033["%HOW"], $P5035
    set $P5030, $P5035
  fallback586:
    unless_null $P5030, vivi_170587
    die "Contextual %*HOW not found"
    box $P5036, "Contextual %*HOW not found"
    set $P5030, $P5036
  vivi_170587:
    set $P5029, $P5030
  fallback585:
    set $P5028, $P5029["knowhow"]
    unless_null $P5028, fallback588
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5028, $P5037
  fallback588:
    $P5038 = $P5022."pkg_create_mo"($P5028, "GLOBALish" :named("name"))
    set $P105, $P5038
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    $P5039 = $P108."MATCH"()
    set $P109, $P5039
    .const 'Sub' $P5040 = 'cuid_384_1347804164.33' 
    capture_lex $P5040
    $P5041 = $P5040()
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    unless_null $P105, fallback604
    nqp_get_sc_object $P5044, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5043, $P5044
    set $P5042, $P5043["$GLOBALish"]
    unless_null $P5042, fallback605
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5042, $P5045
  fallback605:
    unless_null $P5042, vivi_176606
    die "Contextual $*GLOBALish not found"
    box $P5046, "Contextual $*GLOBALish not found"
    set $P5042, $P5046
  vivi_176606:
    set $P105, $P5042
  fallback604:
    set $P106, $P105
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    $P5047 = $P108."MATCH"()
    set $P109, $P5047
    .const 'Sub' $P5048 = 'cuid_385_1347804164.33' 
    capture_lex $P5048
    $P5049 = $P5048()
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    unless_null $P107, fallback616
    nqp_get_sc_object $P5052, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5051, $P5052
    set $P5050, $P5051["$EXPORT"]
    unless_null $P5050, fallback617
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5050, $P5053
  fallback617:
    unless_null $P5050, vivi_180618
    die "Contextual $*EXPORT not found"
    box $P5054, "Contextual $*EXPORT not found"
    set $P5050, $P5054
  vivi_180618:
    set $P107, $P5050
  fallback616:
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    $P5055 = $P108."MATCH"()
    set $P109, $P5055
    .const 'Sub' $P5056 = 'cuid_387_1347804164.33' 
    capture_lex $P5056
    $P5057 = $P5056()
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    store_lex unicode:"$\x{a2}", rx165_cur
    $P5058 = $P108."MATCH"()
    set $P109, $P5058
    .const 'Sub' $P5059 = 'cuid_388_1347804164.33' 
    capture_lex $P5059
    $P5060 = $P5059()
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    $P11 = rx165_cur."outerctx"()
    repr_get_attr_int $I11, $P11, rx165_curclass, "$!pos"
    lt $I11, 0, rx165_fail569
    repr_get_attr_int rx165_pos, $P11, rx165_curclass, "$!pos"
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    $P11 = rx165_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx165_curclass, "$!pos"
    lt $I11, 0, rx165_fail569
    nqp_rxmark rx165_bstack, rxsubrule195_pass662, -1, 0
  rxsubrule195_pass662:
    rx165_cstack = rx165_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx165_pos, $P11, rx165_curclass, "$!pos"
  alt196_0664:
    nqp_rxmark rx165_bstack, alt196_1666, rx165_pos, 0
    lt rx165_pos, rx165_eos, rx165_fail569
    goto alt196_end663
  alt196_1666:
    repr_bind_attr_int rx165_cur, rx165_curclass, "$!pos", rx165_pos
    $P11 = rx165_cur."panic"("Confused")
    repr_get_attr_int $I11, $P11, rx165_curclass, "$!pos"
    lt $I11, 0, rx165_fail569
    repr_get_attr_int rx165_pos, $P11, rx165_curclass, "$!pos"
  alt196_end663:
    rx165_cur."!cursor_pass"(rx165_pos, "comp_unit", 'backtrack'=>1)
    .return (rx165_cur)
  rx165_restart568:
    repr_get_attr_obj rx165_cstack, rx165_cur, rx165_curclass, "$!cstack"
  rx165_fail569:
    unless rx165_bstack, rx165_done567
    pop $I19, rx165_bstack
    if_null rx165_cstack, rx165_cstack_done572
    unless rx165_cstack, rx165_cstack_done572
    dec $I19
    set $P11, rx165_cstack[$I19]
  rx165_cstack_done572:
    pop rx165_rep, rx165_bstack
    pop rx165_pos, rx165_bstack
    pop $I19, rx165_bstack
    lt rx165_pos, -1, rx165_done567
    lt rx165_pos, 0, rx165_fail569
    eq $I19, 0, rx165_fail569
    nqp_islist $I20, rx165_cstack
    unless $I20, rx165_jump570
    elements $I18, rx165_bstack
    le $I18, 0, rx165_cut571
    dec $I18
    set $I18, rx165_bstack[$I18]
  rx165_cut571:
    assign rx165_cstack, $I18
  rx165_jump570:
    jump $I19
  rx165_done567:
    rx165_cur."!cursor_fail"()
    .return (rx165_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_43_1347804164.33_caps" :subid("cuid_memo_24_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statementlist"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_43_1347804164.33_nfa" :subid("cuid_memo_25_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 1
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 1
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 1
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_384_1347804164.33") :anon :lex :outer("cuid_43_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 700

.annotate 'line', 701
    find_dynamic_lex $P5002, "$*GLOBALish"
    unless_null $P5002, fallback589
    nqp_get_sc_object $P5005, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$GLOBALish"]
    unless_null $P5003, fallback590
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5006
  fallback590:
    unless_null $P5003, vivi_171591
    die "Contextual $*GLOBALish not found"
    box $P5007, "Contextual $*GLOBALish not found"
    set $P5003, $P5007
  vivi_171591:
    set $P5002, $P5003
  fallback589:
    get_how $P5001, $P5002
    find_dynamic_lex $P5008, "$*GLOBALish"
    unless_null $P5008, fallback592
    nqp_get_sc_object $P5011, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5010, $P5011
    set $P5009, $P5010["$GLOBALish"]
    unless_null $P5009, fallback593
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5012
  fallback593:
    unless_null $P5009, vivi_172594
    die "Contextual $*GLOBALish not found"
    box $P5013, "Contextual $*GLOBALish not found"
    set $P5009, $P5013
  vivi_172594:
    set $P5008, $P5009
  fallback592:
    $P5014 = $P5001."compose"($P5008)
.annotate 'line', 702
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback595
    nqp_get_sc_object $P5018, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback596
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5016, $P5019
  fallback596:
    unless_null $P5016, vivi_173597
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_173597:
    set $P5015, $P5016
  fallback595:
    find_dynamic_lex $P5021, "$*UNIT"
    unless_null $P5021, fallback598
    nqp_get_sc_object $P5024, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["$UNIT"]
    unless_null $P5022, fallback599
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5022, $P5025
  fallback599:
    unless_null $P5022, vivi_174600
    die "Contextual $*UNIT not found"
    box $P5026, "Contextual $*UNIT not found"
    set $P5022, $P5026
  vivi_174600:
    set $P5021, $P5022
  fallback598:
    find_dynamic_lex $P5027, "$*GLOBALish"
    unless_null $P5027, fallback601
    nqp_get_sc_object $P5030, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$GLOBALish"]
    unless_null $P5028, fallback602
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5028, $P5031
  fallback602:
    unless_null $P5028, vivi_175603
    die "Contextual $*GLOBALish not found"
    box $P5032, "Contextual $*GLOBALish not found"
    set $P5028, $P5032
  vivi_175603:
    set $P5027, $P5028
  fallback601:
    $P5033 = $P5015."install_lexical_symbol"($P5021, "GLOBALish", $P5027)
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_385_1347804164.33") :anon :lex :outer("cuid_43_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 707

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback607
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback608
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5005
  fallback608:
    unless_null $P5002, vivi_177609
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_177609:
    set $P5001, $P5002
  fallback607:
    find_dynamic_lex $P5007, "$*UNIT"
    unless_null $P5007, fallback610
    nqp_get_sc_object $P5010, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$UNIT"]
    unless_null $P5008, fallback611
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5011
  fallback611:
    unless_null $P5008, vivi_178612
    die "Contextual $*UNIT not found"
    box $P5012, "Contextual $*UNIT not found"
    set $P5008, $P5012
  vivi_178612:
    set $P5007, $P5008
  fallback610:
    find_dynamic_lex $P5013, "$*PACKAGE"
    unless_null $P5013, fallback613
    nqp_get_sc_object $P5016, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$PACKAGE"]
    unless_null $P5014, fallback614
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5014, $P5017
  fallback614:
    unless_null $P5014, vivi_179615
    die "Contextual $*PACKAGE not found"
    box $P5018, "Contextual $*PACKAGE not found"
    set $P5014, $P5018
  vivi_179615:
    set $P5013, $P5014
  fallback613:
    $P5019 = $P5001."install_lexical_symbol"($P5007, "$?PACKAGE", $P5013)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_387_1347804164.33") :anon :lex :outer("cuid_43_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 711
    .const 'Sub' $P5017 = 'cuid_386_1347804164.33' 
    capture_lex $P5017 
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback621
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback622
    nqp_get_sc_object $P5008, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback622:
    unless_null $P5004, vivi_182623
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_182623:
    set $P5003, $P5004
  fallback621:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback624
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5011
  fallback624:
    set $P5001, $P5002["setting"]
    unless_null $P5001, fallback625
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5012
  fallback625:
    set $S5001, $P5001
    iseq $I5001, $S5001, "NULL"
    box $P5016, $I5001
    set $P5015, $P5016
    if $I5001 goto unless181_end620 
    .const 'Sub' $P5013 = 'cuid_386_1347804164.33' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  unless181_end620:
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_386_1347804164.33") :anon :lex :outer("cuid_387_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 712
    .lex "$DEFAULT", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 713
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback626
    nqp_get_sc_object $P5005, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback627
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5006
  fallback627:
    unless_null $P5003, vivi_183628
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_183628:
    set $P5002, $P5003
  fallback626:
    find_dynamic_lex $P5009, "%*HOW"
    unless_null $P5009, fallback629
    nqp_get_sc_object $P5012, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["%HOW"]
    unless_null $P5010, fallback630
    nqp_get_sc_object $P5014, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5013, $P5014
    new $P5015, 'Hash'
    set $P5013["%HOW"], $P5015
    set $P5010, $P5015
  fallback630:
    unless_null $P5010, vivi_184631
    die "Contextual %*HOW not found"
    box $P5016, "Contextual %*HOW not found"
    set $P5010, $P5016
  vivi_184631:
    set $P5009, $P5010
  fallback629:
    set $P5008, $P5009["knowhow"]
    unless_null $P5008, fallback632
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5017
  fallback632:
    $P5018 = $P5002."pkg_create_mo"($P5008, "EXPORT" :named("name"))
    store_dynamic_lex "$*EXPORT", $P5018
.annotate 'line', 714
    find_dynamic_lex $P5020, "$*EXPORT"
    unless_null $P5020, fallback633
    nqp_get_sc_object $P5023, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$EXPORT"]
    unless_null $P5021, fallback634
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5021, $P5024
  fallback634:
    unless_null $P5021, vivi_185635
    die "Contextual $*EXPORT not found"
    box $P5025, "Contextual $*EXPORT not found"
    set $P5021, $P5025
  vivi_185635:
    set $P5020, $P5021
  fallback633:
    get_how $P5019, $P5020
    find_dynamic_lex $P5026, "$*EXPORT"
    unless_null $P5026, fallback636
    nqp_get_sc_object $P5029, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$EXPORT"]
    unless_null $P5027, fallback637
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5027, $P5030
  fallback637:
    unless_null $P5027, vivi_186638
    die "Contextual $*EXPORT not found"
    box $P5031, "Contextual $*EXPORT not found"
    set $P5027, $P5031
  vivi_186638:
    set $P5026, $P5027
  fallback636:
    $P5032 = $P5019."compose"($P5026)
.annotate 'line', 715
    find_dynamic_lex $P5033, "$*W"
    unless_null $P5033, fallback639
    nqp_get_sc_object $P5036, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5035, $P5036
    set $P5034, $P5035["$W"]
    unless_null $P5034, fallback640
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5034, $P5037
  fallback640:
    unless_null $P5034, vivi_187641
    die "Contextual $*W not found"
    box $P5038, "Contextual $*W not found"
    set $P5034, $P5038
  vivi_187641:
    set $P5033, $P5034
  fallback639:
    find_dynamic_lex $P5039, "$*UNIT"
    unless_null $P5039, fallback642
    nqp_get_sc_object $P5042, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5041, $P5042
    set $P5040, $P5041["$UNIT"]
    unless_null $P5040, fallback643
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5040, $P5043
  fallback643:
    unless_null $P5040, vivi_188644
    die "Contextual $*UNIT not found"
    box $P5044, "Contextual $*UNIT not found"
    set $P5040, $P5044
  vivi_188644:
    set $P5039, $P5040
  fallback642:
    find_dynamic_lex $P5045, "$*EXPORT"
    unless_null $P5045, fallback645
    nqp_get_sc_object $P5048, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5047, $P5048
    set $P5046, $P5047["$EXPORT"]
    unless_null $P5046, fallback646
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5046, $P5049
  fallback646:
    unless_null $P5046, vivi_189647
    die "Contextual $*EXPORT not found"
    box $P5050, "Contextual $*EXPORT not found"
    set $P5046, $P5050
  vivi_189647:
    set $P5045, $P5046
  fallback645:
    $P5051 = $P5033."install_lexical_symbol"($P5039, "EXPORT", $P5045)
.annotate 'line', 716
    find_dynamic_lex $P5052, "$*W"
    unless_null $P5052, fallback648
    nqp_get_sc_object $P5055, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5054, $P5055
    set $P5053, $P5054["$W"]
    unless_null $P5053, fallback649
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5053, $P5056
  fallback649:
    unless_null $P5053, vivi_190650
    die "Contextual $*W not found"
    box $P5057, "Contextual $*W not found"
    set $P5053, $P5057
  vivi_190650:
    set $P5052, $P5053
  fallback648:
    find_dynamic_lex $P5059, "%*HOW"
    unless_null $P5059, fallback651
    nqp_get_sc_object $P5062, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["%HOW"]
    unless_null $P5060, fallback652
    nqp_get_sc_object $P5064, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5063, $P5064
    new $P5065, 'Hash'
    set $P5063["%HOW"], $P5065
    set $P5060, $P5065
  fallback652:
    unless_null $P5060, vivi_191653
    die "Contextual %*HOW not found"
    box $P5066, "Contextual %*HOW not found"
    set $P5060, $P5066
  vivi_191653:
    set $P5059, $P5060
  fallback651:
    set $P5058, $P5059["knowhow"]
    unless_null $P5058, fallback654
    nqp_get_sc_object $P5067, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5058, $P5067
  fallback654:
    $P5068 = $P5052."pkg_create_mo"($P5058, "DEFAULT" :named("name"))
    set $P101, $P5068
.annotate 'line', 717
    get_how $P5069, $P101
    $P5070 = $P5069."compose"($P101)
    find_dynamic_lex $P5072, "$*EXPORT"
    unless_null $P5072, fallback655
    nqp_get_sc_object $P5075, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5074, $P5075
    set $P5073, $P5074["$EXPORT"]
    unless_null $P5073, fallback656
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5073, $P5076
  fallback656:
    unless_null $P5073, vivi_192657
    die "Contextual $*EXPORT not found"
    box $P5077, "Contextual $*EXPORT not found"
    set $P5073, $P5077
  vivi_192657:
    set $P5072, $P5073
  fallback655:
    get_who $P5071, $P5072
    set $P5071["DEFAULT"], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_388_1347804164.33") :anon :lex :outer("cuid_43_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 722

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback658
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback659
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5005
  fallback659:
    unless_null $P5002, vivi_193660
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_193660:
    set $P5001, $P5002
  fallback658:
    $P5007 = $P5001."add_initializations"()
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_44_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 730
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx199_tgt
    .local int rx199_pos
    .local int rx199_off
    .local int rx199_eos
    .local int rx199_rep
    .local pmc rx199_cur
    .local pmc rx199_curclass
    .local pmc rx199_bstack
    .local pmc rx199_cstack
    (rx199_cur, rx199_tgt, rx199_pos, rx199_curclass, rx199_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx199_cur
    length rx199_eos, rx199_tgt
    eq $I19, 1, rx199_restart670
    gt rx199_pos, rx199_eos, rx199_fail671
    repr_get_attr_int $I11, self, rx199_curclass, "$!from"
    ne $I11, -1, rxscan200_done677
    goto rxscan200_scan676
  rxscan200_loop675:
    inc rx199_pos
    gt rx199_pos, rx199_eos, rx199_fail671
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!from", rx199_pos
  rxscan200_scan676:
    nqp_rxmark rx199_bstack, rxscan200_loop675, rx199_pos, 0
  rxscan200_done677:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt201_0679
    nqp_push_label $P11, alt201_1683
    nqp_rxmark rx199_bstack, alt201_end678, -1, 0
    rx199_cur."!alt"(rx199_pos, "alt_nfa__7_1347804165.767", $P11)
    goto rx199_fail671
  alt201_0679:
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!pos", rx199_pos
    $P11 = rx199_cur."ws"()
    repr_get_attr_int $I11, $P11, rx199_curclass, "$!pos"
    lt $I11, 0, rx199_fail671
    repr_get_attr_int rx199_pos, $P11, rx199_curclass, "$!pos"
    lt rx199_pos, rx199_eos, rx199_fail671
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!pos", rx199_pos
    $P11 = rx199_cur."ws"()
    repr_get_attr_int $I11, $P11, rx199_curclass, "$!pos"
    lt $I11, 0, rx199_fail671
    repr_get_attr_int rx199_pos, $P11, rx199_curclass, "$!pos"
    goto alt201_end678
  alt201_1683:
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!pos", rx199_pos
    $P11 = rx199_cur."ws"()
    repr_get_attr_int $I11, $P11, rx199_curclass, "$!pos"
    lt $I11, 0, rx199_fail671
    repr_get_attr_int rx199_pos, $P11, rx199_curclass, "$!pos"
    nqp_rxmark rx199_bstack, rxquantr206_done686, rx199_pos, 0
  rxquantr206_loop685:
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!pos", rx199_pos
    $P11 = rx199_cur."statement"()
    repr_get_attr_int $I11, $P11, rx199_curclass, "$!pos"
    lt $I11, 0, rx199_fail671
    nqp_rxmark rx199_bstack, rxsubrule207_pass687, -1, 0
  rxsubrule207_pass687:
    rx199_cstack = rx199_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx199_pos, $P11, rx199_curclass, "$!pos"
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!pos", rx199_pos
    $P11 = rx199_cur."eat_terminator"()
    repr_get_attr_int $I11, $P11, rx199_curclass, "$!pos"
    lt $I11, 0, rx199_fail671
    repr_get_attr_int rx199_pos, $P11, rx199_curclass, "$!pos"
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!pos", rx199_pos
    $P11 = rx199_cur."ws"()
    repr_get_attr_int $I11, $P11, rx199_curclass, "$!pos"
    lt $I11, 0, rx199_fail671
    repr_get_attr_int rx199_pos, $P11, rx199_curclass, "$!pos"
    nqp_rxpeek $I19, rx199_bstack, rxquantr206_done686
    inc $I19
    inc $I19
    set rx199_rep, rx199_bstack[$I19]
    nqp_rxcommit rx199_bstack, rxquantr206_done686
    inc rx199_rep
    nqp_rxmark rx199_bstack, rxquantr206_done686, rx199_pos, rx199_rep
    goto rxquantr206_loop685
  rxquantr206_done686:
    repr_bind_attr_int rx199_cur, rx199_curclass, "$!pos", rx199_pos
    $P11 = rx199_cur."ws"()
    repr_get_attr_int $I11, $P11, rx199_curclass, "$!pos"
    lt $I11, 0, rx199_fail671
    repr_get_attr_int rx199_pos, $P11, rx199_curclass, "$!pos"
    goto alt201_end678
  alt201_end678:
    rx199_cur."!cursor_pass"(rx199_pos, "statementlist", 'backtrack'=>1)
    .return (rx199_cur)
  rx199_restart670:
    repr_get_attr_obj rx199_cstack, rx199_cur, rx199_curclass, "$!cstack"
  rx199_fail671:
    unless rx199_bstack, rx199_done669
    pop $I19, rx199_bstack
    if_null rx199_cstack, rx199_cstack_done674
    unless rx199_cstack, rx199_cstack_done674
    dec $I19
    set $P11, rx199_cstack[$I19]
  rx199_cstack_done674:
    pop rx199_rep, rx199_bstack
    pop rx199_pos, rx199_bstack
    pop $I19, rx199_bstack
    lt rx199_pos, -1, rx199_done669
    lt rx199_pos, 0, rx199_fail671
    eq $I19, 0, rx199_fail671
    nqp_islist $I20, rx199_cstack
    unless $I20, rx199_jump672
    elements $I18, rx199_bstack
    le $I18, 0, rx199_cut673
    dec $I18
    set $I18, rx199_bstack[$I18]
  rx199_cut673:
    assign rx199_cstack, $I18
  rx199_jump672:
    jump $I19
  rx199_done669:
    rx199_cur."!cursor_fail"()
    .return (rx199_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_44_1347804164.33_caps" :subid("cuid_memo_26_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["statement"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_44_1347804164.33_alt_nfa__7_1347804165.767" :subid("cuid_memo_27_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_46_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 735
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_45_1347804164.33' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx211_tgt
    .local int rx211_pos
    .local int rx211_off
    .local int rx211_eos
    .local int rx211_rep
    .local pmc rx211_cur
    .local pmc rx211_curclass
    .local pmc rx211_bstack
    .local pmc rx211_cstack
    (rx211_cur, rx211_tgt, rx211_pos, rx211_curclass, rx211_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx211_cur
    length rx211_eos, rx211_tgt
    eq $I19, 1, rx211_restart693
    gt rx211_pos, rx211_eos, rx211_fail694
    repr_get_attr_int $I11, self, rx211_curclass, "$!from"
    ne $I11, -1, rxscan212_done700
    goto rxscan212_scan699
  rxscan212_loop698:
    inc rx211_pos
    gt rx211_pos, rx211_eos, rx211_fail694
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!from", rx211_pos
  rxscan212_scan699:
    nqp_rxmark rx211_bstack, rxscan212_loop698, rx211_pos, 0
  rxscan212_done700:
    .const 'Sub' $P5001 = 'cuid_45_1347804164.33' 
    capture_lex $P5001
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    ge $I11, 0, rx211_fail694
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt218_0719
    nqp_push_label $P11, alt218_1721
    nqp_rxmark rx211_bstack, alt218_end718, -1, 0
    rx211_cur."!alt"(rx211_pos, "alt_nfa__9_1347804165.788", $P11)
    goto rx211_fail694
  alt218_0719:
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."statement_control"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail694
    nqp_rxmark rx211_bstack, rxsubrule219_pass720, -1, 0
  rxsubrule219_pass720:
    rx211_cstack = rx211_cur."!cursor_capture"($P11, "statement_control")
    repr_get_attr_int rx211_pos, $P11, rx211_curclass, "$!pos"
    goto alt218_end718
  alt218_1721:
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail694
    nqp_rxmark rx211_bstack, rxsubrule220_pass722, -1, 0
  rxsubrule220_pass722:
    rx211_cstack = rx211_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx211_pos, $P11, rx211_curclass, "$!pos"
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."ws"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail694
    repr_get_attr_int rx211_pos, $P11, rx211_curclass, "$!pos"
    nqp_rxmark rx211_bstack, rxquantr222_done725, rx211_pos, 0
  rxquantr222_loop724:
  alt223_0727:
    nqp_rxmark rx211_bstack, alt223_1728, rx211_pos, 0
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail694
    goto alt223_end726
  alt223_1728:
    nqp_rxmark rx211_bstack, alt223_2734, rx211_pos, 0
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."statement_mod_cond"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail694
    nqp_rxmark rx211_bstack, rxsubrule224_pass729, -1, 0
  rxsubrule224_pass729:
    rx211_cstack = rx211_cur."!cursor_capture"($P11, "statement_mod_cond")
    repr_get_attr_int rx211_pos, $P11, rx211_curclass, "$!pos"
    nqp_rxmark rx211_bstack, rxquantr225_done731, rx211_pos, 0
  rxquantr225_loop730:
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail694
    goto rxsubrule226_pass732
  rxsubrule226_back733:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail694
  rxsubrule226_pass732:
    rx211_cstack = rx211_cur."!cursor_capture"($P11, "statement_mod_loop")
    set_addr $I11, rxsubrule226_back733
    push rx211_bstack, $I11
    push rx211_bstack, 0
    push rx211_bstack, rx211_pos
    elements $I11, rx211_cstack
    push rx211_bstack, $I11
    repr_get_attr_int rx211_pos, $P11, rx211_curclass, "$!pos"
    nqp_rxpeek $I19, rx211_bstack, rxquantr225_done731
    inc $I19
    inc $I19
    set rx211_rep, rx211_bstack[$I19]
    nqp_rxcommit rx211_bstack, rxquantr225_done731
    inc rx211_rep
  rxquantr225_done731:
    goto alt223_end726
  alt223_2734:
    repr_bind_attr_int rx211_cur, rx211_curclass, "$!pos", rx211_pos
    $P11 = rx211_cur."statement_mod_loop"()
    repr_get_attr_int $I11, $P11, rx211_curclass, "$!pos"
    lt $I11, 0, rx211_fail694
    nqp_rxmark rx211_bstack, rxsubrule227_pass735, -1, 0
  rxsubrule227_pass735:
    rx211_cstack = rx211_cur."!cursor_capture"($P11, "statement_mod_loop")
    repr_get_attr_int rx211_pos, $P11, rx211_curclass, "$!pos"
  alt223_end726:
    nqp_rxpeek $I19, rx211_bstack, rxquantr222_done725
    inc $I19
    inc $I19
    set rx211_rep, rx211_bstack[$I19]
    nqp_rxcommit rx211_bstack, rxquantr222_done725
    inc rx211_rep
  rxquantr222_done725:
    goto alt218_end718
  alt218_end718:
    nqp_rxcommit rx211_bstack, alt218_end718
    rx211_cur."!cursor_pass"(rx211_pos, "statement", 'backtrack'=>1)
    .return (rx211_cur)
  rx211_restart693:
    repr_get_attr_obj rx211_cstack, rx211_cur, rx211_curclass, "$!cstack"
  rx211_fail694:
    unless rx211_bstack, rx211_done692
    pop $I19, rx211_bstack
    if_null rx211_cstack, rx211_cstack_done697
    unless rx211_cstack, rx211_cstack_done697
    dec $I19
    set $P11, rx211_cstack[$I19]
  rx211_cstack_done697:
    pop rx211_rep, rx211_bstack
    pop rx211_pos, rx211_bstack
    pop $I19, rx211_bstack
    lt rx211_pos, -1, rx211_done692
    lt rx211_pos, 0, rx211_fail694
    eq $I19, 0, rx211_fail694
    nqp_islist $I20, rx211_cstack
    unless $I20, rx211_jump695
    elements $I18, rx211_bstack
    le $I18, 0, rx211_cut696
    dec $I18
    set $I18, rx211_bstack[$I18]
  rx211_cut696:
    assign rx211_cstack, $I18
  rx211_jump695:
    jump $I19
  rx211_done692:
    rx211_cur."!cursor_fail"()
    .return (rx211_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_46_1347804164.33_caps" :subid("cuid_memo_28_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statement_control"], $P5002
    box $P5003, 0
    set $P5001["EXPR"], $P5003
    box $P5004, 2
    set $P5001["statement_mod_cond"], $P5004
    box $P5005, 2
    set $P5001["statement_mod_loop"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_46_1347804164.33_alt_nfa__9_1347804165.788" :subid("cuid_memo_29_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "statement_control"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "EXPR"
    push $P5010, $P5012
    box $P5013, 2
    push $P5010, $P5013
    push $P5008, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "ws"
    push $P5014, $P5016
    box $P5017, 3
    push $P5014, $P5017
    push $P5008, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 0
    push $P5018, $P5019
    box $P5020, 0
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    box $P5022, 1
    push $P5018, $P5022
    box $P5023, 0
    push $P5018, $P5023
    box $P5024, 0
    push $P5018, $P5024
    push $P5008, $P5018
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_45_1347804164.33") :anon :lex :outer("cuid_46_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx213_tgt
    .local int rx213_pos
    .local int rx213_off
    .local int rx213_eos
    .local int rx213_rep
    .local pmc rx213_cur
    .local pmc rx213_curclass
    .local pmc rx213_bstack
    .local pmc rx213_cstack
    (rx213_cur, rx213_tgt, rx213_pos, rx213_curclass, rx213_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx213_cur
    length rx213_eos, rx213_tgt
    eq $I19, 1, rx213_restart703
    gt rx213_pos, rx213_eos, rx213_fail704
    repr_get_attr_int $I11, self, rx213_curclass, "$!from"
    ne $I11, -1, rxscan214_done710
    goto rxscan214_scan709
  rxscan214_loop708:
    inc rx213_pos
    gt rx213_pos, rx213_eos, rx213_fail704
    repr_bind_attr_int rx213_cur, rx213_curclass, "$!from", rx213_pos
  rxscan214_scan709:
    nqp_rxmark rx213_bstack, rxscan214_loop708, rx213_pos, 0
  rxscan214_done710:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt215_0712
    nqp_push_label $P11, alt215_1716
    nqp_rxmark rx213_bstack, alt215_end711, -1, 0
    rx213_cur."!alt"(rx213_pos, "alt_nfa__8_1347804165.774", $P11)
    goto rx213_fail704
  alt215_0712:
  alt216_0714:
    nqp_rxmark rx213_bstack, alt216_1715, rx213_pos, 0
    add $I11, rx213_pos, 1
    gt $I11, rx213_eos, rx213_fail704
    substr $S10, rx213_tgt, rx213_pos, 1
    ne $S10, ucs4:"]", rx213_fail704
    add rx213_pos, 1
    goto alt216_end713
  alt216_1715:
    ge rx213_pos, rx213_eos, rx213_fail704
    substr $S11, rx213_tgt, rx213_pos, 1
    index $I11, ucs4:")}", $S11
    lt $I11, 0, rx213_fail704
    inc rx213_pos
  alt216_end713:
    goto alt215_end711
  alt215_1716:
    lt rx213_pos, rx213_eos, rx213_fail704
    goto alt215_end711
  alt215_end711:
    rx213_cur."!cursor_pass"(rx213_pos, 'backtrack'=>1)
    .return (rx213_cur)
  rx213_restart703:
    repr_get_attr_obj rx213_cstack, rx213_cur, rx213_curclass, "$!cstack"
  rx213_fail704:
    unless rx213_bstack, rx213_done702
    pop $I19, rx213_bstack
    if_null rx213_cstack, rx213_cstack_done707
    unless rx213_cstack, rx213_cstack_done707
    dec $I19
    set $P11, rx213_cstack[$I19]
  rx213_cstack_done707:
    pop rx213_rep, rx213_bstack
    pop rx213_pos, rx213_bstack
    pop $I19, rx213_bstack
    lt rx213_pos, -1, rx213_done702
    lt rx213_pos, 0, rx213_fail704
    eq $I19, 0, rx213_fail704
    nqp_islist $I20, rx213_cstack
    unless $I20, rx213_jump705
    elements $I18, rx213_bstack
    le $I18, 0, rx213_cut706
    dec $I18
    set $I18, rx213_bstack[$I18]
  rx213_cut706:
    assign rx213_cstack, $I18
  rx213_jump705:
    jump $I19
  rx213_done702:
    rx213_cur."!cursor_fail"()
    .return (rx213_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_45_1347804164.33_caps" :subid("cuid_memo_30_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_45_1347804164.33_nfa" :subid("cuid_memo_31_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 0
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 0
    push $P5003, $P5009
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_45_1347804164.33_alt_nfa__8_1347804165.774" :subid("cuid_memo_32_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 1
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "eat_terminator" :subid("cuid_47_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 748
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx228_tgt
    .local int rx228_pos
    .local int rx228_off
    .local int rx228_eos
    .local int rx228_rep
    .local pmc rx228_cur
    .local pmc rx228_curclass
    .local pmc rx228_bstack
    .local pmc rx228_cstack
    (rx228_cur, rx228_tgt, rx228_pos, rx228_curclass, rx228_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx228_cur
    length rx228_eos, rx228_tgt
    eq $I19, 1, rx228_restart738
    gt rx228_pos, rx228_eos, rx228_fail739
    repr_get_attr_int $I11, self, rx228_curclass, "$!from"
    ne $I11, -1, rxscan229_done745
    goto rxscan229_scan744
  rxscan229_loop743:
    inc rx228_pos
    gt rx228_pos, rx228_eos, rx228_fail739
    repr_bind_attr_int rx228_cur, rx228_curclass, "$!from", rx228_pos
  rxscan229_scan744:
    nqp_rxmark rx228_bstack, rxscan229_loop743, rx228_pos, 0
  rxscan229_done745:
  alt230_0747:
    nqp_rxmark rx228_bstack, alt230_1748, rx228_pos, 0
    add $I11, rx228_pos, 1
    gt $I11, rx228_eos, rx228_fail739
    substr $S10, rx228_tgt, rx228_pos, 1
    ne $S10, ucs4:";", rx228_fail739
    add rx228_pos, 1
    goto alt230_end746
  alt230_1748:
    nqp_rxmark rx228_bstack, alt230_2749, rx228_pos, 0
    repr_bind_attr_int rx228_cur, rx228_curclass, "$!pos", rx228_pos
    $P11 = rx228_cur."MARKED"("endstmt")
    repr_get_attr_int $I11, $P11, rx228_curclass, "$!pos"
    lt $I11, 0, rx228_fail739
    goto alt230_end746
  alt230_2749:
    nqp_rxmark rx228_bstack, alt230_3750, rx228_pos, 0
    repr_bind_attr_int rx228_cur, rx228_curclass, "$!pos", rx228_pos
    $P11 = rx228_cur."terminator"()
    repr_get_attr_int $I11, $P11, rx228_curclass, "$!pos"
    lt $I11, 0, rx228_fail739
    goto alt230_end746
  alt230_3750:
    lt rx228_pos, rx228_eos, rx228_fail739
  alt230_end746:
    rx228_cur."!cursor_pass"(rx228_pos, "eat_terminator", 'backtrack'=>1)
    .return (rx228_cur)
  rx228_restart738:
    repr_get_attr_obj rx228_cstack, rx228_cur, rx228_curclass, "$!cstack"
  rx228_fail739:
    unless rx228_bstack, rx228_done737
    pop $I19, rx228_bstack
    if_null rx228_cstack, rx228_cstack_done742
    unless rx228_cstack, rx228_cstack_done742
    dec $I19
    set $P11, rx228_cstack[$I19]
  rx228_cstack_done742:
    pop rx228_rep, rx228_bstack
    pop rx228_pos, rx228_bstack
    pop $I19, rx228_bstack
    lt rx228_pos, -1, rx228_done737
    lt rx228_pos, 0, rx228_fail739
    eq $I19, 0, rx228_fail739
    nqp_islist $I20, rx228_cstack
    unless $I20, rx228_jump740
    elements $I18, rx228_bstack
    le $I18, 0, rx228_cut741
    dec $I18
    set $I18, rx228_bstack[$I18]
  rx228_cut741:
    assign rx228_cstack, $I18
  rx228_jump740:
    jump $I19
  rx228_done737:
    rx228_cur."!cursor_fail"()
    .return (rx228_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_47_1347804164.33_caps" :subid("cuid_memo_33_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_48_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 755
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx232_tgt
    .local int rx232_pos
    .local int rx232_off
    .local int rx232_eos
    .local int rx232_rep
    .local pmc rx232_cur
    .local pmc rx232_curclass
    .local pmc rx232_bstack
    .local pmc rx232_cstack
    (rx232_cur, rx232_tgt, rx232_pos, rx232_curclass, rx232_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx232_cur
    length rx232_eos, rx232_tgt
    eq $I19, 1, rx232_restart754
    gt rx232_pos, rx232_eos, rx232_fail755
    repr_get_attr_int $I11, self, rx232_curclass, "$!from"
    ne $I11, -1, rxscan233_done761
    goto rxscan233_scan760
  rxscan233_loop759:
    inc rx232_pos
    gt rx232_pos, rx232_eos, rx232_fail755
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!from", rx232_pos
  rxscan233_scan760:
    nqp_rxmark rx232_bstack, rxscan233_loop759, rx232_pos, 0
  rxscan233_done761:
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!pos", rx232_pos
    $P11 = rx232_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx232_curclass, "$!pos"
    lt $I11, 0, rx232_fail755
    nqp_rxmark rx232_bstack, rxsubrule234_pass762, -1, 0
  rxsubrule234_pass762:
    rx232_cstack = rx232_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx232_pos, $P11, rx232_curclass, "$!pos"
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!pos", rx232_pos
    $P11 = rx232_cur."ws"()
    repr_get_attr_int $I11, $P11, rx232_curclass, "$!pos"
    lt $I11, 0, rx232_fail755
    repr_get_attr_int rx232_pos, $P11, rx232_curclass, "$!pos"
    repr_bind_attr_int rx232_cur, rx232_curclass, "$!pos", rx232_pos
    $P11 = rx232_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx232_curclass, "$!pos"
    lt $I11, 0, rx232_fail755
    nqp_rxmark rx232_bstack, rxsubrule236_pass764, -1, 0
  rxsubrule236_pass764:
    rx232_cstack = rx232_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx232_pos, $P11, rx232_curclass, "$!pos"
    rx232_cur."!cursor_pass"(rx232_pos, "xblock", 'backtrack'=>1)
    .return (rx232_cur)
  rx232_restart754:
    repr_get_attr_obj rx232_cstack, rx232_cur, rx232_curclass, "$!cstack"
  rx232_fail755:
    unless rx232_bstack, rx232_done753
    pop $I19, rx232_bstack
    if_null rx232_cstack, rx232_cstack_done758
    unless rx232_cstack, rx232_cstack_done758
    dec $I19
    set $P11, rx232_cstack[$I19]
  rx232_cstack_done758:
    pop rx232_rep, rx232_bstack
    pop rx232_pos, rx232_bstack
    pop $I19, rx232_bstack
    lt rx232_pos, -1, rx232_done753
    lt rx232_pos, 0, rx232_fail755
    eq $I19, 0, rx232_fail755
    nqp_islist $I20, rx232_cstack
    unless $I20, rx232_jump756
    elements $I18, rx232_bstack
    le $I18, 0, rx232_cut757
    dec $I18
    set $I18, rx232_bstack[$I18]
  rx232_cut757:
    assign rx232_cstack, $I18
  rx232_jump756:
    jump $I19
  rx232_done753:
    rx232_cur."!cursor_fail"()
    .return (rx232_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_48_1347804164.33_caps" :subid("cuid_memo_34_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    box $P5003, 0
    set $P5001["pblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_48_1347804164.33_nfa" :subid("cuid_memo_35_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "EXPR"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "pblock"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_49_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 759
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx237_tgt
    .local int rx237_pos
    .local int rx237_off
    .local int rx237_eos
    .local int rx237_rep
    .local pmc rx237_cur
    .local pmc rx237_curclass
    .local pmc rx237_bstack
    .local pmc rx237_cstack
    (rx237_cur, rx237_tgt, rx237_pos, rx237_curclass, rx237_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx237_cur
    length rx237_eos, rx237_tgt
    eq $I19, 1, rx237_restart767
    gt rx237_pos, rx237_eos, rx237_fail768
    repr_get_attr_int $I11, self, rx237_curclass, "$!from"
    ne $I11, -1, rxscan238_done774
    goto rxscan238_scan773
  rxscan238_loop772:
    inc rx237_pos
    gt rx237_pos, rx237_eos, rx237_fail768
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!from", rx237_pos
  rxscan238_scan773:
    nqp_rxmark rx237_bstack, rxscan238_loop772, rx237_pos, 0
  rxscan238_done774:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt239_0776
    nqp_push_label $P11, alt239_1782
    nqp_push_label $P11, alt239_2785
    nqp_rxmark rx237_bstack, alt239_end775, -1, 0
    rx237_cur."!alt"(rx237_pos, "alt_nfa__10_1347804165.817", $P11)
    goto rx237_fail768
  alt239_0776:
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail768
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail768
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."signature"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail768
    nqp_rxmark rx237_bstack, rxsubrule242_pass779, -1, 0
  rxsubrule242_pass779:
    rx237_cstack = rx237_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."ws"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail768
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail768
    nqp_rxmark rx237_bstack, rxsubrule244_pass781, -1, 0
  rxsubrule244_pass781:
    rx237_cstack = rx237_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    goto alt239_end775
  alt239_1782:
    ge rx237_pos, rx237_eos, rx237_fail768
    substr $S11, rx237_tgt, rx237_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx237_fail768
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail768
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail768
    nqp_rxmark rx237_bstack, rxsubrule246_pass784, -1, 0
  rxsubrule246_pass784:
    rx237_cstack = rx237_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    goto alt239_end775
  alt239_2785:
    repr_bind_attr_int rx237_cur, rx237_curclass, "$!pos", rx237_pos
    $P11 = rx237_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx237_curclass, "$!pos"
    lt $I11, 0, rx237_fail768
    repr_get_attr_int rx237_pos, $P11, rx237_curclass, "$!pos"
    goto alt239_end775
  alt239_end775:
    rx237_cur."!cursor_pass"(rx237_pos, "pblock", 'backtrack'=>1)
    .return (rx237_cur)
  rx237_restart767:
    repr_get_attr_obj rx237_cstack, rx237_cur, rx237_curclass, "$!cstack"
  rx237_fail768:
    unless rx237_bstack, rx237_done766
    pop $I19, rx237_bstack
    if_null rx237_cstack, rx237_cstack_done771
    unless rx237_cstack, rx237_cstack_done771
    dec $I19
    set $P11, rx237_cstack[$I19]
  rx237_cstack_done771:
    pop rx237_rep, rx237_bstack
    pop rx237_pos, rx237_bstack
    pop $I19, rx237_bstack
    lt rx237_pos, -1, rx237_done766
    lt rx237_pos, 0, rx237_fail768
    eq $I19, 0, rx237_fail768
    nqp_islist $I20, rx237_cstack
    unless $I20, rx237_jump769
    elements $I18, rx237_bstack
    le $I18, 0, rx237_cut770
    dec $I18
    set $I18, rx237_bstack[$I18]
  rx237_cut770:
    assign rx237_cstack, $I18
  rx237_jump769:
    jump $I19
  rx237_done766:
    rx237_cur."!cursor_fail"()
    .return (rx237_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_49_1347804164.33_caps" :subid("cuid_memo_36_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["signature"], $P5002
    box $P5003, 0
    set $P5001["blockoid"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_49_1347804164.33_nfa" :subid("cuid_memo_37_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "lambda"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 6
    push $P5003, $P5007
    box $P5008, "{"
    push $P5003, $P5008
    box $P5009, 6
    push $P5003, $P5009
    box $P5010, 8
    push $P5003, $P5010
    box $P5011, "panic"
    push $P5003, $P5011
    box $P5012, 0
    push $P5003, $P5012
    push $P5001, $P5003
    new $P5013, 'ResizablePMCArray'
    box $P5014, 8
    push $P5013, $P5014
    box $P5015, "newpad"
    push $P5013, $P5015
    box $P5016, 3
    push $P5013, $P5016
    push $P5001, $P5013
    new $P5017, 'ResizablePMCArray'
    box $P5018, 8
    push $P5017, $P5018
    box $P5019, "signature"
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    push $P5001, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 8
    push $P5021, $P5022
    box $P5023, "ws"
    push $P5021, $P5023
    box $P5024, 5
    push $P5021, $P5024
    push $P5001, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 8
    push $P5025, $P5026
    box $P5027, "blockoid"
    push $P5025, $P5027
    box $P5028, 0
    push $P5025, $P5028
    push $P5001, $P5025
    new $P5029, 'ResizablePMCArray'
    box $P5030, 0
    push $P5029, $P5030
    box $P5031, 0
    push $P5029, $P5031
    box $P5032, 0
    push $P5029, $P5032
    push $P5001, $P5029
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_49_1347804164.33_alt_nfa__10_1347804165.817" :subid("cuid_memo_38_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "lambda"
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 8
    push $P5008, $P5009
    box $P5010, "newpad"
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 8
    push $P5012, $P5013
    box $P5014, "signature"
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 8
    push $P5016, $P5017
    box $P5018, "ws"
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 8
    push $P5020, $P5021
    box $P5022, "blockoid"
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 6
    push $P5026, $P5027
    box $P5028, "{"
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 0
    push $P5030, $P5031
    box $P5032, 0
    push $P5030, $P5032
    box $P5033, 0
    push $P5030, $P5033
    push $P5024, $P5030
    push $P5001, $P5024
    new $P5034, 'ResizablePMCArray'
    new $P5035, 'ResizablePMCArray'
    push $P5034, $P5035
    new $P5036, 'ResizablePMCArray'
    box $P5037, 8
    push $P5036, $P5037
    box $P5038, "panic"
    push $P5036, $P5038
    box $P5039, 0
    push $P5036, $P5039
    push $P5034, $P5036
    push $P5001, $P5034
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "lambda" :subid("cuid_50_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 770
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx248_tgt
    .local int rx248_pos
    .local int rx248_off
    .local int rx248_eos
    .local int rx248_rep
    .local pmc rx248_cur
    .local pmc rx248_curclass
    .local pmc rx248_bstack
    .local pmc rx248_cstack
    (rx248_cur, rx248_tgt, rx248_pos, rx248_curclass, rx248_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx248_cur
    length rx248_eos, rx248_tgt
    eq $I19, 1, rx248_restart789
    gt rx248_pos, rx248_eos, rx248_fail790
    repr_get_attr_int $I11, self, rx248_curclass, "$!from"
    ne $I11, -1, rxscan249_done796
    goto rxscan249_scan795
  rxscan249_loop794:
    inc rx248_pos
    gt rx248_pos, rx248_eos, rx248_fail790
    repr_bind_attr_int rx248_cur, rx248_curclass, "$!from", rx248_pos
  rxscan249_scan795:
    nqp_rxmark rx248_bstack, rxscan249_loop794, rx248_pos, 0
  rxscan249_done796:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt250_0798
    nqp_push_label $P11, alt250_1799
    nqp_rxmark rx248_bstack, alt250_end797, -1, 0
    rx248_cur."!alt"(rx248_pos, "alt_nfa__11_1347804165.824", $P11)
    goto rx248_fail790
  alt250_0798:
    add $I11, rx248_pos, 2
    gt $I11, rx248_eos, rx248_fail790
    substr $S10, rx248_tgt, rx248_pos, 2
    ne $S10, ucs4:"->", rx248_fail790
    add rx248_pos, 2
    goto alt250_end797
  alt250_1799:
    add $I11, rx248_pos, 3
    gt $I11, rx248_eos, rx248_fail790
    substr $S10, rx248_tgt, rx248_pos, 3
    ne $S10, ucs4:"<->", rx248_fail790
    add rx248_pos, 3
    goto alt250_end797
  alt250_end797:
    rx248_cur."!cursor_pass"(rx248_pos, "lambda", 'backtrack'=>1)
    .return (rx248_cur)
  rx248_restart789:
    repr_get_attr_obj rx248_cstack, rx248_cur, rx248_curclass, "$!cstack"
  rx248_fail790:
    unless rx248_bstack, rx248_done788
    pop $I19, rx248_bstack
    if_null rx248_cstack, rx248_cstack_done793
    unless rx248_cstack, rx248_cstack_done793
    dec $I19
    set $P11, rx248_cstack[$I19]
  rx248_cstack_done793:
    pop rx248_rep, rx248_bstack
    pop rx248_pos, rx248_bstack
    pop $I19, rx248_bstack
    lt rx248_pos, -1, rx248_done788
    lt rx248_pos, 0, rx248_fail790
    eq $I19, 0, rx248_fail790
    nqp_islist $I20, rx248_cstack
    unless $I20, rx248_jump791
    elements $I18, rx248_bstack
    le $I18, 0, rx248_cut792
    dec $I18
    set $I18, rx248_bstack[$I18]
  rx248_cut792:
    assign rx248_cstack, $I18
  rx248_jump791:
    jump $I19
  rx248_done788:
    rx248_cur."!cursor_fail"()
    .return (rx248_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_50_1347804164.33_caps" :subid("cuid_memo_39_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_50_1347804164.33_nfa" :subid("cuid_memo_40_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 2
    push $P5003, $P5007
    box $P5008, 60
    push $P5003, $P5008
    box $P5009, 3
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 62
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5001, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 45
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 62
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_50_1347804164.33_alt_nfa__11_1347804165.824" :subid("cuid_memo_41_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 45
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 62
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 60
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    push $P5012, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 45
    push $P5018, $P5020
    box $P5021, 3
    push $P5018, $P5021
    push $P5012, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 2
    push $P5022, $P5023
    box $P5024, 62
    push $P5022, $P5024
    box $P5025, 0
    push $P5022, $P5025
    push $P5012, $P5022
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_51_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 772
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx251_tgt
    .local int rx251_pos
    .local int rx251_off
    .local int rx251_eos
    .local int rx251_rep
    .local pmc rx251_cur
    .local pmc rx251_curclass
    .local pmc rx251_bstack
    .local pmc rx251_cstack
    (rx251_cur, rx251_tgt, rx251_pos, rx251_curclass, rx251_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx251_cur
    length rx251_eos, rx251_tgt
    eq $I19, 1, rx251_restart802
    gt rx251_pos, rx251_eos, rx251_fail803
    repr_get_attr_int $I11, self, rx251_curclass, "$!from"
    ne $I11, -1, rxscan252_done809
    goto rxscan252_scan808
  rxscan252_loop807:
    inc rx251_pos
    gt rx251_pos, rx251_eos, rx251_fail803
    repr_bind_attr_int rx251_cur, rx251_curclass, "$!from", rx251_pos
  rxscan252_scan808:
    nqp_rxmark rx251_bstack, rxscan252_loop807, rx251_pos, 0
  rxscan252_done809:
  alt253_0811:
    nqp_rxmark rx251_bstack, alt253_1812, rx251_pos, 0
    ge rx251_pos, rx251_eos, rx251_fail803
    substr $S11, rx251_tgt, rx251_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx251_fail803
    goto alt253_end810
  alt253_1812:
    repr_bind_attr_int rx251_cur, rx251_curclass, "$!pos", rx251_pos
    $P11 = rx251_cur."panic"("Missing block")
    repr_get_attr_int $I11, $P11, rx251_curclass, "$!pos"
    lt $I11, 0, rx251_fail803
    repr_get_attr_int rx251_pos, $P11, rx251_curclass, "$!pos"
  alt253_end810:
    repr_bind_attr_int rx251_cur, rx251_curclass, "$!pos", rx251_pos
    $P11 = rx251_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx251_curclass, "$!pos"
    lt $I11, 0, rx251_fail803
    repr_get_attr_int rx251_pos, $P11, rx251_curclass, "$!pos"
    repr_bind_attr_int rx251_cur, rx251_curclass, "$!pos", rx251_pos
    $P11 = rx251_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx251_curclass, "$!pos"
    lt $I11, 0, rx251_fail803
    nqp_rxmark rx251_bstack, rxsubrule256_pass815, -1, 0
  rxsubrule256_pass815:
    rx251_cstack = rx251_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx251_pos, $P11, rx251_curclass, "$!pos"
    rx251_cur."!cursor_pass"(rx251_pos, "block", 'backtrack'=>1)
    .return (rx251_cur)
  rx251_restart802:
    repr_get_attr_obj rx251_cstack, rx251_cur, rx251_curclass, "$!cstack"
  rx251_fail803:
    unless rx251_bstack, rx251_done801
    pop $I19, rx251_bstack
    if_null rx251_cstack, rx251_cstack_done806
    unless rx251_cstack, rx251_cstack_done806
    dec $I19
    set $P11, rx251_cstack[$I19]
  rx251_cstack_done806:
    pop rx251_rep, rx251_bstack
    pop rx251_pos, rx251_bstack
    pop $I19, rx251_bstack
    lt rx251_pos, -1, rx251_done801
    lt rx251_pos, 0, rx251_fail803
    eq $I19, 0, rx251_fail803
    nqp_islist $I20, rx251_cstack
    unless $I20, rx251_jump804
    elements $I18, rx251_bstack
    le $I18, 0, rx251_cut805
    dec $I18
    set $I18, rx251_bstack[$I18]
  rx251_cut805:
    assign rx251_cstack, $I18
  rx251_jump804:
    jump $I19
  rx251_done801:
    rx251_cur."!cursor_fail"()
    .return (rx251_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_51_1347804164.33_caps" :subid("cuid_memo_42_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["blockoid"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_52_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 778
    .param pmc _lex_param_0 
    .lex "%*HANDLERS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx257_tgt
    .local int rx257_pos
    .local int rx257_off
    .local int rx257_eos
    .local int rx257_rep
    .local pmc rx257_cur
    .local pmc rx257_curclass
    .local pmc rx257_bstack
    .local pmc rx257_cstack
    (rx257_cur, rx257_tgt, rx257_pos, rx257_curclass, rx257_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx257_cur
    length rx257_eos, rx257_tgt
    eq $I19, 1, rx257_restart818
    gt rx257_pos, rx257_eos, rx257_fail819
    repr_get_attr_int $I11, self, rx257_curclass, "$!from"
    ne $I11, -1, rxscan258_done825
    goto rxscan258_scan824
  rxscan258_loop823:
    inc rx257_pos
    gt rx257_pos, rx257_eos, rx257_fail819
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!from", rx257_pos
  rxscan258_scan824:
    nqp_rxmark rx257_bstack, rxscan258_loop823, rx257_pos, 0
  rxscan258_done825:
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!pos", rx257_pos
    store_lex unicode:"$\x{a2}", rx257_cur
    unless_null $P101, fallback826
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback827
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback827:
    unless_null $P5002, vivi_259828
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_259828:
    set $P101, $P5002
  fallback826:
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!pos", rx257_pos
    $P11 = rx257_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx257_curclass, "$!pos"
    lt $I11, 0, rx257_fail819
    repr_get_attr_int rx257_pos, $P11, rx257_curclass, "$!pos"
  alt261_0831:
    nqp_rxmark rx257_bstack, alt261_1833, rx257_pos, 0
    add $I11, rx257_pos, 14
    gt $I11, rx257_eos, rx257_fail819
    substr $S10, rx257_tgt, rx257_pos, 14
    ne $S10, ucs4:"{YOU_ARE_HERE}", rx257_fail819
    add rx257_pos, 14
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!pos", rx257_pos
    $P11 = rx257_cur."you_are_here"()
    repr_get_attr_int $I11, $P11, rx257_curclass, "$!pos"
    lt $I11, 0, rx257_fail819
    nqp_rxmark rx257_bstack, rxsubrule262_pass832, -1, 0
  rxsubrule262_pass832:
    rx257_cstack = rx257_cur."!cursor_capture"($P11, "you_are_here")
    repr_get_attr_int rx257_pos, $P11, rx257_curclass, "$!pos"
    goto alt261_end830
  alt261_1833:
    add $I11, rx257_pos, 1
    gt $I11, rx257_eos, rx257_fail819
    substr $S10, rx257_tgt, rx257_pos, 1
    ne $S10, ucs4:"{", rx257_fail819
    add rx257_pos, 1
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!pos", rx257_pos
    $P11 = rx257_cur."statementlist"()
    repr_get_attr_int $I11, $P11, rx257_curclass, "$!pos"
    lt $I11, 0, rx257_fail819
    nqp_rxmark rx257_bstack, rxsubrule263_pass834, -1, 0
  rxsubrule263_pass834:
    rx257_cstack = rx257_cur."!cursor_capture"($P11, "statementlist")
    repr_get_attr_int rx257_pos, $P11, rx257_curclass, "$!pos"
  alt264_0836:
    nqp_rxmark rx257_bstack, alt264_1837, rx257_pos, 0
    add $I11, rx257_pos, 1
    gt $I11, rx257_eos, rx257_fail819
    substr $S10, rx257_tgt, rx257_pos, 1
    ne $S10, ucs4:"}", rx257_fail819
    add rx257_pos, 1
    goto alt264_end835
  alt264_1837:
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!pos", rx257_pos
    $P11 = rx257_cur."FAILGOAL"("'}'")
    repr_get_attr_int $I11, $P11, rx257_curclass, "$!pos"
    lt $I11, 0, rx257_fail819
    goto rxsubrule265_pass838
  rxsubrule265_back839:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx257_curclass, "$!pos"
    lt $I11, 0, rx257_fail819
  rxsubrule265_pass838:
    rx257_cstack = rx257_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule265_back839
    push rx257_bstack, $I11
    push rx257_bstack, 0
    push rx257_bstack, rx257_pos
    elements $I11, rx257_cstack
    push rx257_bstack, $I11
    repr_get_attr_int rx257_pos, $P11, rx257_curclass, "$!pos"
  alt264_end835:
  alt261_end830:
    repr_bind_attr_int rx257_cur, rx257_curclass, "$!pos", rx257_pos
    $P11 = rx257_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx257_curclass, "$!pos"
    lt $I11, 0, rx257_fail819
    rx257_cur."!cursor_pass"(rx257_pos, "blockoid", 'backtrack'=>1)
    .return (rx257_cur)
  rx257_restart818:
    repr_get_attr_obj rx257_cstack, rx257_cur, rx257_curclass, "$!cstack"
  rx257_fail819:
    unless rx257_bstack, rx257_done817
    pop $I19, rx257_bstack
    if_null rx257_cstack, rx257_cstack_done822
    unless rx257_cstack, rx257_cstack_done822
    dec $I19
    set $P11, rx257_cstack[$I19]
  rx257_cstack_done822:
    pop rx257_rep, rx257_bstack
    pop rx257_pos, rx257_bstack
    pop $I19, rx257_bstack
    lt rx257_pos, -1, rx257_done817
    lt rx257_pos, 0, rx257_fail819
    eq $I19, 0, rx257_fail819
    nqp_islist $I20, rx257_cstack
    unless $I20, rx257_jump820
    elements $I18, rx257_bstack
    le $I18, 0, rx257_cut821
    dec $I18
    set $I18, rx257_bstack[$I18]
  rx257_cut821:
    assign rx257_cstack, $I18
  rx257_jump820:
    jump $I19
  rx257_done817:
    rx257_cur."!cursor_fail"()
    .return (rx257_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_52_1347804164.33_caps" :subid("cuid_memo_43_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["you_are_here"], $P5002
    box $P5003, 0
    set $P5001["statementlist"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_52_1347804164.33_nfa" :subid("cuid_memo_44_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "finishpad"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_53_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 788
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx266_tgt
    .local int rx266_pos
    .local int rx266_off
    .local int rx266_eos
    .local int rx266_rep
    .local pmc rx266_cur
    .local pmc rx266_curclass
    .local pmc rx266_bstack
    .local pmc rx266_cstack
    (rx266_cur, rx266_tgt, rx266_pos, rx266_curclass, rx266_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx266_cur
    length rx266_eos, rx266_tgt
    eq $I19, 1, rx266_restart842
    gt rx266_pos, rx266_eos, rx266_fail843
    repr_get_attr_int $I11, self, rx266_curclass, "$!from"
    ne $I11, -1, rxscan267_done849
    goto rxscan267_scan848
  rxscan267_loop847:
    inc rx266_pos
    gt rx266_pos, rx266_eos, rx266_fail843
    repr_bind_attr_int rx266_cur, rx266_curclass, "$!from", rx266_pos
  rxscan267_scan848:
    nqp_rxmark rx266_bstack, rxscan267_loop847, rx266_pos, 0
  rxscan267_done849:
    rx266_cur."!cursor_pass"(rx266_pos, "newpad", 'backtrack'=>1)
    .return (rx266_cur)
  rx266_restart842:
    repr_get_attr_obj rx266_cstack, rx266_cur, rx266_curclass, "$!cstack"
  rx266_fail843:
    unless rx266_bstack, rx266_done841
    pop $I19, rx266_bstack
    if_null rx266_cstack, rx266_cstack_done846
    unless rx266_cstack, rx266_cstack_done846
    dec $I19
    set $P11, rx266_cstack[$I19]
  rx266_cstack_done846:
    pop rx266_rep, rx266_bstack
    pop rx266_pos, rx266_bstack
    pop $I19, rx266_bstack
    lt rx266_pos, -1, rx266_done841
    lt rx266_pos, 0, rx266_fail843
    eq $I19, 0, rx266_fail843
    nqp_islist $I20, rx266_cstack
    unless $I20, rx266_jump844
    elements $I18, rx266_bstack
    le $I18, 0, rx266_cut845
    dec $I18
    set $I18, rx266_bstack[$I18]
  rx266_cut845:
    assign rx266_cstack, $I18
  rx266_jump844:
    jump $I19
  rx266_done841:
    rx266_cur."!cursor_fail"()
    .return (rx266_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_53_1347804164.33_caps" :subid("cuid_memo_45_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_53_1347804164.33_nfa" :subid("cuid_memo_46_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_54_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 789
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx269_tgt
    .local int rx269_pos
    .local int rx269_off
    .local int rx269_eos
    .local int rx269_rep
    .local pmc rx269_cur
    .local pmc rx269_curclass
    .local pmc rx269_bstack
    .local pmc rx269_cstack
    (rx269_cur, rx269_tgt, rx269_pos, rx269_curclass, rx269_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx269_cur
    length rx269_eos, rx269_tgt
    eq $I19, 1, rx269_restart853
    gt rx269_pos, rx269_eos, rx269_fail854
    repr_get_attr_int $I11, self, rx269_curclass, "$!from"
    ne $I11, -1, rxscan270_done860
    goto rxscan270_scan859
  rxscan270_loop858:
    inc rx269_pos
    gt rx269_pos, rx269_eos, rx269_fail854
    repr_bind_attr_int rx269_cur, rx269_curclass, "$!from", rx269_pos
  rxscan270_scan859:
    nqp_rxmark rx269_bstack, rxscan270_loop858, rx269_pos, 0
  rxscan270_done860:
    rx269_cur."!cursor_pass"(rx269_pos, "outerctx", 'backtrack'=>1)
    .return (rx269_cur)
  rx269_restart853:
    repr_get_attr_obj rx269_cstack, rx269_cur, rx269_curclass, "$!cstack"
  rx269_fail854:
    unless rx269_bstack, rx269_done852
    pop $I19, rx269_bstack
    if_null rx269_cstack, rx269_cstack_done857
    unless rx269_cstack, rx269_cstack_done857
    dec $I19
    set $P11, rx269_cstack[$I19]
  rx269_cstack_done857:
    pop rx269_rep, rx269_bstack
    pop rx269_pos, rx269_bstack
    pop $I19, rx269_bstack
    lt rx269_pos, -1, rx269_done852
    lt rx269_pos, 0, rx269_fail854
    eq $I19, 0, rx269_fail854
    nqp_islist $I20, rx269_cstack
    unless $I20, rx269_jump855
    elements $I18, rx269_bstack
    le $I18, 0, rx269_cut856
    dec $I18
    set $I18, rx269_bstack[$I18]
  rx269_cut856:
    assign rx269_cstack, $I18
  rx269_jump855:
    jump $I19
  rx269_done852:
    rx269_cur."!cursor_fail"()
    .return (rx269_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_54_1347804164.33_caps" :subid("cuid_memo_47_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_54_1347804164.33_nfa" :subid("cuid_memo_48_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "finishpad" :subid("cuid_55_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 790
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx272_tgt
    .local int rx272_pos
    .local int rx272_off
    .local int rx272_eos
    .local int rx272_rep
    .local pmc rx272_cur
    .local pmc rx272_curclass
    .local pmc rx272_bstack
    .local pmc rx272_cstack
    (rx272_cur, rx272_tgt, rx272_pos, rx272_curclass, rx272_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx272_cur
    length rx272_eos, rx272_tgt
    eq $I19, 1, rx272_restart864
    gt rx272_pos, rx272_eos, rx272_fail865
    repr_get_attr_int $I11, self, rx272_curclass, "$!from"
    ne $I11, -1, rxscan273_done871
    goto rxscan273_scan870
  rxscan273_loop869:
    inc rx272_pos
    gt rx272_pos, rx272_eos, rx272_fail865
    repr_bind_attr_int rx272_cur, rx272_curclass, "$!from", rx272_pos
  rxscan273_scan870:
    nqp_rxmark rx272_bstack, rxscan273_loop869, rx272_pos, 0
  rxscan273_done871:
    rx272_cur."!cursor_pass"(rx272_pos, "finishpad", 'backtrack'=>1)
    .return (rx272_cur)
  rx272_restart864:
    repr_get_attr_obj rx272_cstack, rx272_cur, rx272_curclass, "$!cstack"
  rx272_fail865:
    unless rx272_bstack, rx272_done863
    pop $I19, rx272_bstack
    if_null rx272_cstack, rx272_cstack_done868
    unless rx272_cstack, rx272_cstack_done868
    dec $I19
    set $P11, rx272_cstack[$I19]
  rx272_cstack_done868:
    pop rx272_rep, rx272_bstack
    pop rx272_pos, rx272_bstack
    pop $I19, rx272_bstack
    lt rx272_pos, -1, rx272_done863
    lt rx272_pos, 0, rx272_fail865
    eq $I19, 0, rx272_fail865
    nqp_islist $I20, rx272_cstack
    unless $I20, rx272_jump866
    elements $I18, rx272_bstack
    le $I18, 0, rx272_cut867
    dec $I18
    set $I18, rx272_bstack[$I18]
  rx272_cut867:
    assign rx272_cstack, $I18
  rx272_jump866:
    jump $I19
  rx272_done863:
    rx272_cur."!cursor_fail"()
    .return (rx272_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_55_1347804164.33_caps" :subid("cuid_memo_49_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_55_1347804164.33_nfa" :subid("cuid_memo_50_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_56_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 791
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx275_tgt
    .local int rx275_pos
    .local int rx275_off
    .local int rx275_eos
    .local int rx275_rep
    .local pmc rx275_cur
    .local pmc rx275_curclass
    .local pmc rx275_bstack
    .local pmc rx275_cstack
    (rx275_cur, rx275_tgt, rx275_pos, rx275_curclass, rx275_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx275_cur
    length rx275_eos, rx275_tgt
    eq $I19, 1, rx275_restart875
    gt rx275_pos, rx275_eos, rx275_fail876
    repr_get_attr_int $I11, self, rx275_curclass, "$!from"
    ne $I11, -1, rxscan276_done882
    goto rxscan276_scan881
  rxscan276_loop880:
    inc rx275_pos
    gt rx275_pos, rx275_eos, rx275_fail876
    repr_bind_attr_int rx275_cur, rx275_curclass, "$!from", rx275_pos
  rxscan276_scan881:
    nqp_rxmark rx275_bstack, rxscan276_loop880, rx275_pos, 0
  rxscan276_done882:
    rx275_cur."!cursor_pass"(rx275_pos, "you_are_here", 'backtrack'=>1)
    .return (rx275_cur)
  rx275_restart875:
    repr_get_attr_obj rx275_cstack, rx275_cur, rx275_curclass, "$!cstack"
  rx275_fail876:
    unless rx275_bstack, rx275_done874
    pop $I19, rx275_bstack
    if_null rx275_cstack, rx275_cstack_done879
    unless rx275_cstack, rx275_cstack_done879
    dec $I19
    set $P11, rx275_cstack[$I19]
  rx275_cstack_done879:
    pop rx275_rep, rx275_bstack
    pop rx275_pos, rx275_bstack
    pop $I19, rx275_bstack
    lt rx275_pos, -1, rx275_done874
    lt rx275_pos, 0, rx275_fail876
    eq $I19, 0, rx275_fail876
    nqp_islist $I20, rx275_cstack
    unless $I20, rx275_jump877
    elements $I18, rx275_bstack
    le $I18, 0, rx275_cut878
    dec $I18
    set $I18, rx275_bstack[$I18]
  rx275_cut878:
    assign rx275_cstack, $I18
  rx275_jump877:
    jump $I19
  rx275_done874:
    rx275_cur."!cursor_fail"()
    .return (rx275_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_56_1347804164.33_caps" :subid("cuid_memo_51_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_56_1347804164.33_nfa" :subid("cuid_memo_52_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "terminator" :subid("cuid_57_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 793
    .param pmc self 
    $P5001 = self."!protoregex"("terminator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<;>" :subid("cuid_58_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 795
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx278_tgt
    .local int rx278_pos
    .local int rx278_off
    .local int rx278_eos
    .local int rx278_rep
    .local pmc rx278_cur
    .local pmc rx278_curclass
    .local pmc rx278_bstack
    .local pmc rx278_cstack
    (rx278_cur, rx278_tgt, rx278_pos, rx278_curclass, rx278_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx278_cur
    length rx278_eos, rx278_tgt
    eq $I19, 1, rx278_restart886
    gt rx278_pos, rx278_eos, rx278_fail887
    repr_get_attr_int $I11, self, rx278_curclass, "$!from"
    ne $I11, -1, rxscan279_done893
    goto rxscan279_scan892
  rxscan279_loop891:
    inc rx278_pos
    gt rx278_pos, rx278_eos, rx278_fail887
    repr_bind_attr_int rx278_cur, rx278_curclass, "$!from", rx278_pos
  rxscan279_scan892:
    nqp_rxmark rx278_bstack, rxscan279_loop891, rx278_pos, 0
  rxscan279_done893:
    ge rx278_pos, rx278_eos, rx278_fail887
    substr $S11, rx278_tgt, rx278_pos, 1
    index $I11, ucs4:";", $S11
    lt $I11, 0, rx278_fail887
    rx278_cur."!cursor_pass"(rx278_pos, "terminator:sym<;>", 'backtrack'=>1)
    .return (rx278_cur)
  rx278_restart886:
    repr_get_attr_obj rx278_cstack, rx278_cur, rx278_curclass, "$!cstack"
  rx278_fail887:
    unless rx278_bstack, rx278_done885
    pop $I19, rx278_bstack
    if_null rx278_cstack, rx278_cstack_done890
    unless rx278_cstack, rx278_cstack_done890
    dec $I19
    set $P11, rx278_cstack[$I19]
  rx278_cstack_done890:
    pop rx278_rep, rx278_bstack
    pop rx278_pos, rx278_bstack
    pop $I19, rx278_bstack
    lt rx278_pos, -1, rx278_done885
    lt rx278_pos, 0, rx278_fail887
    eq $I19, 0, rx278_fail887
    nqp_islist $I20, rx278_cstack
    unless $I20, rx278_jump888
    elements $I18, rx278_bstack
    le $I18, 0, rx278_cut889
    dec $I18
    set $I18, rx278_bstack[$I18]
  rx278_cut889:
    assign rx278_cstack, $I18
  rx278_jump888:
    jump $I19
  rx278_done885:
    rx278_cur."!cursor_fail"()
    .return (rx278_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_58_1347804164.33_caps" :subid("cuid_memo_53_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_58_1347804164.33_nfa" :subid("cuid_memo_54_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, ";"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "terminator:sym<}>" :subid("cuid_59_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 796
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx280_tgt
    .local int rx280_pos
    .local int rx280_off
    .local int rx280_eos
    .local int rx280_rep
    .local pmc rx280_cur
    .local pmc rx280_curclass
    .local pmc rx280_bstack
    .local pmc rx280_cstack
    (rx280_cur, rx280_tgt, rx280_pos, rx280_curclass, rx280_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx280_cur
    length rx280_eos, rx280_tgt
    eq $I19, 1, rx280_restart896
    gt rx280_pos, rx280_eos, rx280_fail897
    repr_get_attr_int $I11, self, rx280_curclass, "$!from"
    ne $I11, -1, rxscan281_done903
    goto rxscan281_scan902
  rxscan281_loop901:
    inc rx280_pos
    gt rx280_pos, rx280_eos, rx280_fail897
    repr_bind_attr_int rx280_cur, rx280_curclass, "$!from", rx280_pos
  rxscan281_scan902:
    nqp_rxmark rx280_bstack, rxscan281_loop901, rx280_pos, 0
  rxscan281_done903:
    ge rx280_pos, rx280_eos, rx280_fail897
    substr $S11, rx280_tgt, rx280_pos, 1
    index $I11, ucs4:"}", $S11
    lt $I11, 0, rx280_fail897
    rx280_cur."!cursor_pass"(rx280_pos, "terminator:sym<}>", 'backtrack'=>1)
    .return (rx280_cur)
  rx280_restart896:
    repr_get_attr_obj rx280_cstack, rx280_cur, rx280_curclass, "$!cstack"
  rx280_fail897:
    unless rx280_bstack, rx280_done895
    pop $I19, rx280_bstack
    if_null rx280_cstack, rx280_cstack_done900
    unless rx280_cstack, rx280_cstack_done900
    dec $I19
    set $P11, rx280_cstack[$I19]
  rx280_cstack_done900:
    pop rx280_rep, rx280_bstack
    pop rx280_pos, rx280_bstack
    pop $I19, rx280_bstack
    lt rx280_pos, -1, rx280_done895
    lt rx280_pos, 0, rx280_fail897
    eq $I19, 0, rx280_fail897
    nqp_islist $I20, rx280_cstack
    unless $I20, rx280_jump898
    elements $I18, rx280_bstack
    le $I18, 0, rx280_cut899
    dec $I18
    set $I18, rx280_bstack[$I18]
  rx280_cut899:
    assign rx280_cstack, $I18
  rx280_jump898:
    jump $I19
  rx280_done895:
    rx280_cur."!cursor_fail"()
    .return (rx280_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_59_1347804164.33_caps" :subid("cuid_memo_55_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_59_1347804164.33_nfa" :subid("cuid_memo_56_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "}"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control" :subid("cuid_60_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 800
    .param pmc self 
    $P5001 = self."!protoregex"("statement_control")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_61_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 802
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx282_tgt
    .local int rx282_pos
    .local int rx282_off
    .local int rx282_eos
    .local int rx282_rep
    .local pmc rx282_cur
    .local pmc rx282_curclass
    .local pmc rx282_bstack
    .local pmc rx282_cstack
    (rx282_cur, rx282_tgt, rx282_pos, rx282_curclass, rx282_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx282_cur
    length rx282_eos, rx282_tgt
    eq $I19, 1, rx282_restart906
    gt rx282_pos, rx282_eos, rx282_fail907
    repr_get_attr_int $I11, self, rx282_curclass, "$!from"
    ne $I11, -1, rxscan283_done913
    goto rxscan283_scan912
  rxscan283_loop911:
    inc rx282_pos
    gt rx282_pos, rx282_eos, rx282_fail907
    repr_bind_attr_int rx282_cur, rx282_curclass, "$!from", rx282_pos
  rxscan283_scan912:
    nqp_rxmark rx282_bstack, rxscan283_loop911, rx282_pos, 0
  rxscan283_done913:
    nqp_rxmark rx282_bstack, rxcap284_fail915, rx282_pos, 0
    add $I11, rx282_pos, 3
    gt $I11, rx282_eos, rx282_fail907
    substr $S10, rx282_tgt, rx282_pos, 3
    ne $S10, ucs4:"use", rx282_fail907
    add rx282_pos, 3
    nqp_rxpeek $I19, rx282_bstack, rxcap284_fail915
    inc $I19
    set $I11, rx282_bstack[$I19]
    $P11 = rx282_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx282_pos)
    rx282_cstack = rx282_cur."!cursor_capture"($P11, "sym")
    goto rxcap284_done914
  rxcap284_fail915:
    goto rx282_fail907
  rxcap284_done914:
    ge rx282_pos, rx282_eos, rx282_fail907
    is_cclass $I11, .CCLASS_WHITESPACE, rx282_tgt, rx282_pos
    unless $I11, rx282_fail907
    add rx282_pos, 1
    repr_bind_attr_int rx282_cur, rx282_curclass, "$!pos", rx282_pos
    $P11 = rx282_cur."ws"()
    repr_get_attr_int $I11, $P11, rx282_curclass, "$!pos"
    lt $I11, 0, rx282_fail907
    repr_get_attr_int rx282_pos, $P11, rx282_curclass, "$!pos"
    repr_bind_attr_int rx282_cur, rx282_curclass, "$!pos", rx282_pos
    $P11 = rx282_cur."name"()
    repr_get_attr_int $I11, $P11, rx282_curclass, "$!pos"
    lt $I11, 0, rx282_fail907
    nqp_rxmark rx282_bstack, rxsubrule286_pass917, -1, 0
  rxsubrule286_pass917:
    rx282_cstack = rx282_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx282_pos, $P11, rx282_curclass, "$!pos"
    repr_bind_attr_int rx282_cur, rx282_curclass, "$!pos", rx282_pos
    $P11 = rx282_cur."ws"()
    repr_get_attr_int $I11, $P11, rx282_curclass, "$!pos"
    lt $I11, 0, rx282_fail907
    repr_get_attr_int rx282_pos, $P11, rx282_curclass, "$!pos"
    rx282_cur."!cursor_pass"(rx282_pos, "statement_control:sym<use>", 'backtrack'=>1)
    .return (rx282_cur)
  rx282_restart906:
    repr_get_attr_obj rx282_cstack, rx282_cur, rx282_curclass, "$!cstack"
  rx282_fail907:
    unless rx282_bstack, rx282_done905
    pop $I19, rx282_bstack
    if_null rx282_cstack, rx282_cstack_done910
    unless rx282_cstack, rx282_cstack_done910
    dec $I19
    set $P11, rx282_cstack[$I19]
  rx282_cstack_done910:
    pop rx282_rep, rx282_bstack
    pop rx282_pos, rx282_bstack
    pop $I19, rx282_bstack
    lt rx282_pos, -1, rx282_done905
    lt rx282_pos, 0, rx282_fail907
    eq $I19, 0, rx282_fail907
    nqp_islist $I20, rx282_cstack
    unless $I20, rx282_jump908
    elements $I18, rx282_bstack
    le $I18, 0, rx282_cut909
    dec $I18
    set $I18, rx282_bstack[$I18]
  rx282_cut909:
    assign rx282_cstack, $I18
  rx282_jump908:
    jump $I19
  rx282_done905:
    rx282_cur."!cursor_fail"()
    .return (rx282_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_61_1347804164.33_caps" :subid("cuid_memo_57_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["name"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_61_1347804164.33_nfa" :subid("cuid_memo_58_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 117
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 115
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 101
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 4
    push $P5015, $P5016
    box $P5017, 32
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_62_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 806
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx288_tgt
    .local int rx288_pos
    .local int rx288_off
    .local int rx288_eos
    .local int rx288_rep
    .local pmc rx288_cur
    .local pmc rx288_curclass
    .local pmc rx288_bstack
    .local pmc rx288_cstack
    (rx288_cur, rx288_tgt, rx288_pos, rx288_curclass, rx288_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx288_cur
    length rx288_eos, rx288_tgt
    eq $I19, 1, rx288_restart921
    gt rx288_pos, rx288_eos, rx288_fail922
    repr_get_attr_int $I11, self, rx288_curclass, "$!from"
    ne $I11, -1, rxscan289_done928
    goto rxscan289_scan927
  rxscan289_loop926:
    inc rx288_pos
    gt rx288_pos, rx288_eos, rx288_fail922
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!from", rx288_pos
  rxscan289_scan927:
    nqp_rxmark rx288_bstack, rxscan289_loop926, rx288_pos, 0
  rxscan289_done928:
    nqp_rxmark rx288_bstack, rxcap290_fail930, rx288_pos, 0
    add $I11, rx288_pos, 2
    gt $I11, rx288_eos, rx288_fail922
    substr $S10, rx288_tgt, rx288_pos, 2
    ne $S10, ucs4:"if", rx288_fail922
    add rx288_pos, 2
    nqp_rxpeek $I19, rx288_bstack, rxcap290_fail930
    inc $I19
    set $I11, rx288_bstack[$I19]
    $P11 = rx288_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx288_pos)
    rx288_cstack = rx288_cur."!cursor_capture"($P11, "sym")
    goto rxcap290_done929
  rxcap290_fail930:
    goto rx288_fail922
  rxcap290_done929:
    ge rx288_pos, rx288_eos, rx288_fail922
    is_cclass $I11, .CCLASS_WHITESPACE, rx288_tgt, rx288_pos
    unless $I11, rx288_fail922
    add rx288_pos, 1
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail922
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail922
    nqp_rxmark rx288_bstack, rxsubrule292_pass932, -1, 0
  rxsubrule292_pass932:
    rx288_cstack = rx288_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail922
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    nqp_rxmark rx288_bstack, rxquantr294_done935, rx288_pos, 0
  rxquantr294_loop934:
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail922
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    add $I11, rx288_pos, 5
    gt $I11, rx288_eos, rx288_fail922
    substr $S10, rx288_tgt, rx288_pos, 5
    ne $S10, ucs4:"elsif", rx288_fail922
    add rx288_pos, 5
    ge rx288_pos, rx288_eos, rx288_fail922
    is_cclass $I11, .CCLASS_WHITESPACE, rx288_tgt, rx288_pos
    unless $I11, rx288_fail922
    add rx288_pos, 1
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail922
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail922
    nqp_rxmark rx288_bstack, rxsubrule297_pass938, -1, 0
  rxsubrule297_pass938:
    rx288_cstack = rx288_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail922
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    nqp_rxpeek $I19, rx288_bstack, rxquantr294_done935
    inc $I19
    inc $I19
    set rx288_rep, rx288_bstack[$I19]
    nqp_rxcommit rx288_bstack, rxquantr294_done935
    inc rx288_rep
    nqp_rxmark rx288_bstack, rxquantr294_done935, rx288_pos, rx288_rep
    goto rxquantr294_loop934
  rxquantr294_done935:
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail922
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    nqp_rxmark rx288_bstack, rxquantr300_done942, rx288_pos, 0
  rxquantr300_loop941:
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail922
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    add $I11, rx288_pos, 4
    gt $I11, rx288_eos, rx288_fail922
    substr $S10, rx288_tgt, rx288_pos, 4
    ne $S10, ucs4:"else", rx288_fail922
    add rx288_pos, 4
    ge rx288_pos, rx288_eos, rx288_fail922
    is_cclass $I11, .CCLASS_WHITESPACE, rx288_tgt, rx288_pos
    unless $I11, rx288_fail922
    add rx288_pos, 1
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail922
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail922
    nqp_rxmark rx288_bstack, rxsubrule303_pass945, -1, 0
  rxsubrule303_pass945:
    rx288_cstack = rx288_cur."!cursor_capture"($P11, "else")
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail922
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    nqp_rxpeek $I19, rx288_bstack, rxquantr300_done942
    inc $I19
    inc $I19
    set rx288_rep, rx288_bstack[$I19]
    nqp_rxcommit rx288_bstack, rxquantr300_done942
    inc rx288_rep
  rxquantr300_done942:
    repr_bind_attr_int rx288_cur, rx288_curclass, "$!pos", rx288_pos
    $P11 = rx288_cur."ws"()
    repr_get_attr_int $I11, $P11, rx288_curclass, "$!pos"
    lt $I11, 0, rx288_fail922
    repr_get_attr_int rx288_pos, $P11, rx288_curclass, "$!pos"
    rx288_cur."!cursor_pass"(rx288_pos, "statement_control:sym<if>", 'backtrack'=>1)
    .return (rx288_cur)
  rx288_restart921:
    repr_get_attr_obj rx288_cstack, rx288_cur, rx288_curclass, "$!cstack"
  rx288_fail922:
    unless rx288_bstack, rx288_done920
    pop $I19, rx288_bstack
    if_null rx288_cstack, rx288_cstack_done925
    unless rx288_cstack, rx288_cstack_done925
    dec $I19
    set $P11, rx288_cstack[$I19]
  rx288_cstack_done925:
    pop rx288_rep, rx288_bstack
    pop rx288_pos, rx288_bstack
    pop $I19, rx288_bstack
    lt rx288_pos, -1, rx288_done920
    lt rx288_pos, 0, rx288_fail922
    eq $I19, 0, rx288_fail922
    nqp_islist $I20, rx288_cstack
    unless $I20, rx288_jump923
    elements $I18, rx288_bstack
    le $I18, 0, rx288_cut924
    dec $I18
    set $I18, rx288_bstack[$I18]
  rx288_cut924:
    assign rx288_cstack, $I18
  rx288_jump923:
    jump $I19
  rx288_done920:
    rx288_cur."!cursor_fail"()
    .return (rx288_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_62_1347804164.33_caps" :subid("cuid_memo_59_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 2
    set $P5001["xblock"], $P5003
    box $P5004, 2
    set $P5001["else"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_62_1347804164.33_nfa" :subid("cuid_memo_60_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 105
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 102
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 4
    push $P5011, $P5012
    box $P5013, 32
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_64_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 813
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_63_1347804164.33' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx306_tgt
    .local int rx306_pos
    .local int rx306_off
    .local int rx306_eos
    .local int rx306_rep
    .local pmc rx306_cur
    .local pmc rx306_curclass
    .local pmc rx306_bstack
    .local pmc rx306_cstack
    (rx306_cur, rx306_tgt, rx306_pos, rx306_curclass, rx306_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx306_cur
    length rx306_eos, rx306_tgt
    eq $I19, 1, rx306_restart950
    gt rx306_pos, rx306_eos, rx306_fail951
    repr_get_attr_int $I11, self, rx306_curclass, "$!from"
    ne $I11, -1, rxscan307_done957
    goto rxscan307_scan956
  rxscan307_loop955:
    inc rx306_pos
    gt rx306_pos, rx306_eos, rx306_fail951
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!from", rx306_pos
  rxscan307_scan956:
    nqp_rxmark rx306_bstack, rxscan307_loop955, rx306_pos, 0
  rxscan307_done957:
    nqp_rxmark rx306_bstack, rxcap308_fail959, rx306_pos, 0
    add $I11, rx306_pos, 6
    gt $I11, rx306_eos, rx306_fail951
    substr $S10, rx306_tgt, rx306_pos, 6
    ne $S10, ucs4:"unless", rx306_fail951
    add rx306_pos, 6
    nqp_rxpeek $I19, rx306_bstack, rxcap308_fail959
    inc $I19
    set $I11, rx306_bstack[$I19]
    $P11 = rx306_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx306_pos)
    rx306_cstack = rx306_cur."!cursor_capture"($P11, "sym")
    goto rxcap308_done958
  rxcap308_fail959:
    goto rx306_fail951
  rxcap308_done958:
    ge rx306_pos, rx306_eos, rx306_fail951
    is_cclass $I11, .CCLASS_WHITESPACE, rx306_tgt, rx306_pos
    unless $I11, rx306_fail951
    add rx306_pos, 1
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."ws"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail951
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail951
    nqp_rxmark rx306_bstack, rxsubrule310_pass961, -1, 0
  rxsubrule310_pass961:
    rx306_cstack = rx306_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."ws"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail951
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
  alt312_0964:
    nqp_rxmark rx306_bstack, alt312_1977, rx306_pos, 0
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."ws"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail951
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
    .const 'Sub' $P5001 = 'cuid_63_1347804164.33' 
    capture_lex $P5001
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    ge $I11, 0, rx306_fail951
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."ws"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail951
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
    goto alt312_end963
  alt312_1977:
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."ws"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail951
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."panic"("unless does not take \"else\", please rewrite using \"if\"")
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail951
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."ws"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail951
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
  alt312_end963:
    repr_bind_attr_int rx306_cur, rx306_curclass, "$!pos", rx306_pos
    $P11 = rx306_cur."ws"()
    repr_get_attr_int $I11, $P11, rx306_curclass, "$!pos"
    lt $I11, 0, rx306_fail951
    repr_get_attr_int rx306_pos, $P11, rx306_curclass, "$!pos"
    rx306_cur."!cursor_pass"(rx306_pos, "statement_control:sym<unless>", 'backtrack'=>1)
    .return (rx306_cur)
  rx306_restart950:
    repr_get_attr_obj rx306_cstack, rx306_cur, rx306_curclass, "$!cstack"
  rx306_fail951:
    unless rx306_bstack, rx306_done949
    pop $I19, rx306_bstack
    if_null rx306_cstack, rx306_cstack_done954
    unless rx306_cstack, rx306_cstack_done954
    dec $I19
    set $P11, rx306_cstack[$I19]
  rx306_cstack_done954:
    pop rx306_rep, rx306_bstack
    pop rx306_pos, rx306_bstack
    pop $I19, rx306_bstack
    lt rx306_pos, -1, rx306_done949
    lt rx306_pos, 0, rx306_fail951
    eq $I19, 0, rx306_fail951
    nqp_islist $I20, rx306_cstack
    unless $I20, rx306_jump952
    elements $I18, rx306_bstack
    le $I18, 0, rx306_cut953
    dec $I18
    set $I18, rx306_bstack[$I18]
  rx306_cut953:
    assign rx306_cstack, $I18
  rx306_jump952:
    jump $I19
  rx306_done949:
    rx306_cur."!cursor_fail"()
    .return (rx306_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_64_1347804164.33_caps" :subid("cuid_memo_61_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["xblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_64_1347804164.33_nfa" :subid("cuid_memo_62_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 117
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 110
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 108
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 101
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 115
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 115
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 4
    push $P5027, $P5028
    box $P5029, 32
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_63_1347804164.33") :anon :lex :outer("cuid_64_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx314_tgt
    .local int rx314_pos
    .local int rx314_off
    .local int rx314_eos
    .local int rx314_rep
    .local pmc rx314_cur
    .local pmc rx314_curclass
    .local pmc rx314_bstack
    .local pmc rx314_cstack
    (rx314_cur, rx314_tgt, rx314_pos, rx314_curclass, rx314_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx314_cur
    length rx314_eos, rx314_tgt
    eq $I19, 1, rx314_restart968
    gt rx314_pos, rx314_eos, rx314_fail969
    repr_get_attr_int $I11, self, rx314_curclass, "$!from"
    ne $I11, -1, rxscan315_done975
    goto rxscan315_scan974
  rxscan315_loop973:
    inc rx314_pos
    gt rx314_pos, rx314_eos, rx314_fail969
    repr_bind_attr_int rx314_cur, rx314_curclass, "$!from", rx314_pos
  rxscan315_scan974:
    nqp_rxmark rx314_bstack, rxscan315_loop973, rx314_pos, 0
  rxscan315_done975:
    add $I11, rx314_pos, 4
    gt $I11, rx314_eos, rx314_fail969
    substr $S10, rx314_tgt, rx314_pos, 4
    ne $S10, ucs4:"else", rx314_fail969
    add rx314_pos, 4
    rx314_cur."!cursor_pass"(rx314_pos, 'backtrack'=>1)
    .return (rx314_cur)
  rx314_restart968:
    repr_get_attr_obj rx314_cstack, rx314_cur, rx314_curclass, "$!cstack"
  rx314_fail969:
    unless rx314_bstack, rx314_done967
    pop $I19, rx314_bstack
    if_null rx314_cstack, rx314_cstack_done972
    unless rx314_cstack, rx314_cstack_done972
    dec $I19
    set $P11, rx314_cstack[$I19]
  rx314_cstack_done972:
    pop rx314_rep, rx314_bstack
    pop rx314_pos, rx314_bstack
    pop $I19, rx314_bstack
    lt rx314_pos, -1, rx314_done967
    lt rx314_pos, 0, rx314_fail969
    eq $I19, 0, rx314_fail969
    nqp_islist $I20, rx314_cstack
    unless $I20, rx314_jump970
    elements $I18, rx314_bstack
    le $I18, 0, rx314_cut971
    dec $I18
    set $I18, rx314_bstack[$I18]
  rx314_cut971:
    assign rx314_cstack, $I18
  rx314_jump970:
    jump $I19
  rx314_done967:
    rx314_cur."!cursor_fail"()
    .return (rx314_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_63_1347804164.33_caps" :subid("cuid_memo_63_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_63_1347804164.33_nfa" :subid("cuid_memo_64_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 101
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 108
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 115
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 101
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_65_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 819
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx321_tgt
    .local int rx321_pos
    .local int rx321_off
    .local int rx321_eos
    .local int rx321_rep
    .local pmc rx321_cur
    .local pmc rx321_curclass
    .local pmc rx321_bstack
    .local pmc rx321_cstack
    (rx321_cur, rx321_tgt, rx321_pos, rx321_curclass, rx321_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx321_cur
    length rx321_eos, rx321_tgt
    eq $I19, 1, rx321_restart984
    gt rx321_pos, rx321_eos, rx321_fail985
    repr_get_attr_int $I11, self, rx321_curclass, "$!from"
    ne $I11, -1, rxscan322_done991
    goto rxscan322_scan990
  rxscan322_loop989:
    inc rx321_pos
    gt rx321_pos, rx321_eos, rx321_fail985
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!from", rx321_pos
  rxscan322_scan990:
    nqp_rxmark rx321_bstack, rxscan322_loop989, rx321_pos, 0
  rxscan322_done991:
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!pos", rx321_pos
    store_lex unicode:"$\x{a2}", rx321_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx321_bstack, rxcap323_fail993, rx321_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt324_0995
    nqp_push_label $P11, alt324_1996
    nqp_rxmark rx321_bstack, alt324_end994, -1, 0
    rx321_cur."!alt"(rx321_pos, "alt_nfa__12_1347804165.928", $P11)
    goto rx321_fail985
  alt324_0995:
    add $I11, rx321_pos, 5
    gt $I11, rx321_eos, rx321_fail985
    substr $S10, rx321_tgt, rx321_pos, 5
    ne $S10, ucs4:"while", rx321_fail985
    add rx321_pos, 5
    goto alt324_end994
  alt324_1996:
    add $I11, rx321_pos, 5
    gt $I11, rx321_eos, rx321_fail985
    substr $S10, rx321_tgt, rx321_pos, 5
    ne $S10, ucs4:"until", rx321_fail985
    add rx321_pos, 5
    goto alt324_end994
  alt324_end994:
    nqp_rxcommit rx321_bstack, alt324_end994
    nqp_rxpeek $I19, rx321_bstack, rxcap323_fail993
    inc $I19
    set $I11, rx321_bstack[$I19]
    $P11 = rx321_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx321_pos)
    rx321_cstack = rx321_cur."!cursor_capture"($P11, "sym")
    goto rxcap323_done992
  rxcap323_fail993:
    goto rx321_fail985
  rxcap323_done992:
    ge rx321_pos, rx321_eos, rx321_fail985
    is_cclass $I11, .CCLASS_WHITESPACE, rx321_tgt, rx321_pos
    unless $I11, rx321_fail985
    add rx321_pos, 1
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!pos", rx321_pos
    $P11 = rx321_cur."ws"()
    repr_get_attr_int $I11, $P11, rx321_curclass, "$!pos"
    lt $I11, 0, rx321_fail985
    repr_get_attr_int rx321_pos, $P11, rx321_curclass, "$!pos"
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!pos", rx321_pos
    $P11 = rx321_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx321_curclass, "$!pos"
    lt $I11, 0, rx321_fail985
    nqp_rxmark rx321_bstack, rxsubrule326_pass998, -1, 0
  rxsubrule326_pass998:
    rx321_cstack = rx321_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx321_pos, $P11, rx321_curclass, "$!pos"
    repr_bind_attr_int rx321_cur, rx321_curclass, "$!pos", rx321_pos
    $P11 = rx321_cur."ws"()
    repr_get_attr_int $I11, $P11, rx321_curclass, "$!pos"
    lt $I11, 0, rx321_fail985
    repr_get_attr_int rx321_pos, $P11, rx321_curclass, "$!pos"
    rx321_cur."!cursor_pass"(rx321_pos, "statement_control:sym<while>", 'backtrack'=>1)
    .return (rx321_cur)
  rx321_restart984:
    repr_get_attr_obj rx321_cstack, rx321_cur, rx321_curclass, "$!cstack"
  rx321_fail985:
    unless rx321_bstack, rx321_done983
    pop $I19, rx321_bstack
    if_null rx321_cstack, rx321_cstack_done988
    unless rx321_cstack, rx321_cstack_done988
    dec $I19
    set $P11, rx321_cstack[$I19]
  rx321_cstack_done988:
    pop rx321_rep, rx321_bstack
    pop rx321_pos, rx321_bstack
    pop $I19, rx321_bstack
    lt rx321_pos, -1, rx321_done983
    lt rx321_pos, 0, rx321_fail985
    eq $I19, 0, rx321_fail985
    nqp_islist $I20, rx321_cstack
    unless $I20, rx321_jump986
    elements $I18, rx321_bstack
    le $I18, 0, rx321_cut987
    dec $I18
    set $I18, rx321_bstack[$I18]
  rx321_cut987:
    assign rx321_cstack, $I18
  rx321_jump986:
    jump $I19
  rx321_done983:
    rx321_cur."!cursor_fail"()
    .return (rx321_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_65_1347804164.33_caps" :subid("cuid_memo_65_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["xblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_65_1347804164.33_nfa" :subid("cuid_memo_66_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 119
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 2
    push $P5007, $P5011
    box $P5012, 117
    push $P5007, $P5012
    box $P5013, 8
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 104
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 105
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    push $P5001, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 2
    push $P5022, $P5023
    box $P5024, 108
    push $P5022, $P5024
    box $P5025, 6
    push $P5022, $P5025
    push $P5001, $P5022
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 101
    push $P5026, $P5028
    box $P5029, 7
    push $P5026, $P5029
    push $P5001, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 4
    push $P5030, $P5031
    box $P5032, 32
    push $P5030, $P5032
    box $P5033, 12
    push $P5030, $P5033
    push $P5001, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 110
    push $P5034, $P5036
    box $P5037, 9
    push $P5034, $P5037
    push $P5001, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 116
    push $P5038, $P5040
    box $P5041, 10
    push $P5038, $P5041
    push $P5001, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 105
    push $P5042, $P5044
    box $P5045, 11
    push $P5042, $P5045
    push $P5001, $P5042
    new $P5046, 'ResizablePMCArray'
    box $P5047, 2
    push $P5046, $P5047
    box $P5048, 108
    push $P5046, $P5048
    box $P5049, 7
    push $P5046, $P5049
    push $P5001, $P5046
    new $P5050, 'ResizablePMCArray'
    box $P5051, 0
    push $P5050, $P5051
    box $P5052, 0
    push $P5050, $P5052
    box $P5053, 0
    push $P5050, $P5053
    push $P5001, $P5050
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_65_1347804164.33_alt_nfa__12_1347804165.928" :subid("cuid_memo_67_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 119
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 104
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 105
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 108
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 101
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 117
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 110
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 116
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 105
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 108
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_66_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 825
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx328_tgt
    .local int rx328_pos
    .local int rx328_off
    .local int rx328_eos
    .local int rx328_rep
    .local pmc rx328_cur
    .local pmc rx328_curclass
    .local pmc rx328_bstack
    .local pmc rx328_cstack
    (rx328_cur, rx328_tgt, rx328_pos, rx328_curclass, rx328_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx328_cur
    length rx328_eos, rx328_tgt
    eq $I19, 1, rx328_restart1002
    gt rx328_pos, rx328_eos, rx328_fail1003
    repr_get_attr_int $I11, self, rx328_curclass, "$!from"
    ne $I11, -1, rxscan329_done1009
    goto rxscan329_scan1008
  rxscan329_loop1007:
    inc rx328_pos
    gt rx328_pos, rx328_eos, rx328_fail1003
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!from", rx328_pos
  rxscan329_scan1008:
    nqp_rxmark rx328_bstack, rxscan329_loop1007, rx328_pos, 0
  rxscan329_done1009:
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    store_lex unicode:"$\x{a2}", rx328_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx328_bstack, rxcap330_fail1011, rx328_pos, 0
    add $I11, rx328_pos, 6
    gt $I11, rx328_eos, rx328_fail1003
    substr $S10, rx328_tgt, rx328_pos, 6
    ne $S10, ucs4:"repeat", rx328_fail1003
    add rx328_pos, 6
    nqp_rxpeek $I19, rx328_bstack, rxcap330_fail1011
    inc $I19
    set $I11, rx328_bstack[$I19]
    $P11 = rx328_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx328_pos)
    rx328_cstack = rx328_cur."!cursor_capture"($P11, "sym")
    goto rxcap330_done1010
  rxcap330_fail1011:
    goto rx328_fail1003
  rxcap330_done1010:
    ge rx328_pos, rx328_eos, rx328_fail1003
    is_cclass $I11, .CCLASS_WHITESPACE, rx328_tgt, rx328_pos
    unless $I11, rx328_fail1003
    add rx328_pos, 1
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1003
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt332_01014
    nqp_push_label $P11, alt332_11024
    nqp_rxmark rx328_bstack, alt332_end1013, -1, 0
    rx328_cur."!alt"(rx328_pos, "alt_nfa__13_1347804165.951", $P11)
    goto rx328_fail1003
  alt332_01014:
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1003
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    nqp_rxmark rx328_bstack, rxcap334_fail1017, rx328_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt335_01019
    nqp_push_label $P11, alt335_11020
    nqp_rxmark rx328_bstack, alt335_end1018, -1, 0
    rx328_cur."!alt"(rx328_pos, "alt_nfa__14_1347804165.951", $P11)
    goto rx328_fail1003
  alt335_01019:
    add $I11, rx328_pos, 5
    gt $I11, rx328_eos, rx328_fail1003
    substr $S10, rx328_tgt, rx328_pos, 5
    ne $S10, ucs4:"while", rx328_fail1003
    add rx328_pos, 5
    goto alt335_end1018
  alt335_11020:
    add $I11, rx328_pos, 5
    gt $I11, rx328_eos, rx328_fail1003
    substr $S10, rx328_tgt, rx328_pos, 5
    ne $S10, ucs4:"until", rx328_fail1003
    add rx328_pos, 5
    goto alt335_end1018
  alt335_end1018:
    nqp_rxcommit rx328_bstack, alt335_end1018
    nqp_rxpeek $I19, rx328_bstack, rxcap334_fail1017
    inc $I19
    set $I11, rx328_bstack[$I19]
    $P11 = rx328_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx328_pos)
    rx328_cstack = rx328_cur."!cursor_capture"($P11, "wu")
    goto rxcap334_done1016
  rxcap334_fail1017:
    goto rx328_fail1003
  rxcap334_done1016:
    ge rx328_pos, rx328_eos, rx328_fail1003
    is_cclass $I11, .CCLASS_WHITESPACE, rx328_tgt, rx328_pos
    unless $I11, rx328_fail1003
    add rx328_pos, 1
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1003
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1003
    nqp_rxmark rx328_bstack, rxsubrule337_pass1022, -1, 0
  rxsubrule337_pass1022:
    rx328_cstack = rx328_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1003
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    goto alt332_end1013
  alt332_11024:
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1003
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1003
    nqp_rxmark rx328_bstack, rxsubrule340_pass1026, -1, 0
  rxsubrule340_pass1026:
    rx328_cstack = rx328_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1003
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    nqp_rxmark rx328_bstack, rxcap342_fail1029, rx328_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt343_01031
    nqp_push_label $P11, alt343_11032
    nqp_rxmark rx328_bstack, alt343_end1030, -1, 0
    rx328_cur."!alt"(rx328_pos, "alt_nfa__15_1347804165.952", $P11)
    goto rx328_fail1003
  alt343_01031:
    add $I11, rx328_pos, 5
    gt $I11, rx328_eos, rx328_fail1003
    substr $S10, rx328_tgt, rx328_pos, 5
    ne $S10, ucs4:"while", rx328_fail1003
    add rx328_pos, 5
    goto alt343_end1030
  alt343_11032:
    add $I11, rx328_pos, 5
    gt $I11, rx328_eos, rx328_fail1003
    substr $S10, rx328_tgt, rx328_pos, 5
    ne $S10, ucs4:"until", rx328_fail1003
    add rx328_pos, 5
    goto alt343_end1030
  alt343_end1030:
    nqp_rxcommit rx328_bstack, alt343_end1030
    nqp_rxpeek $I19, rx328_bstack, rxcap342_fail1029
    inc $I19
    set $I11, rx328_bstack[$I19]
    $P11 = rx328_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx328_pos)
    rx328_cstack = rx328_cur."!cursor_capture"($P11, "wu")
    goto rxcap342_done1028
  rxcap342_fail1029:
    goto rx328_fail1003
  rxcap342_done1028:
    ge rx328_pos, rx328_eos, rx328_fail1003
    is_cclass $I11, .CCLASS_WHITESPACE, rx328_tgt, rx328_pos
    unless $I11, rx328_fail1003
    add rx328_pos, 1
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1003
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1003
    nqp_rxmark rx328_bstack, rxsubrule345_pass1034, -1, 0
  rxsubrule345_pass1034:
    rx328_cstack = rx328_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1003
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    goto alt332_end1013
  alt332_end1013:
    nqp_rxcommit rx328_bstack, alt332_end1013
    repr_bind_attr_int rx328_cur, rx328_curclass, "$!pos", rx328_pos
    $P11 = rx328_cur."ws"()
    repr_get_attr_int $I11, $P11, rx328_curclass, "$!pos"
    lt $I11, 0, rx328_fail1003
    repr_get_attr_int rx328_pos, $P11, rx328_curclass, "$!pos"
    rx328_cur."!cursor_pass"(rx328_pos, "statement_control:sym<repeat>", 'backtrack'=>1)
    .return (rx328_cur)
  rx328_restart1002:
    repr_get_attr_obj rx328_cstack, rx328_cur, rx328_curclass, "$!cstack"
  rx328_fail1003:
    unless rx328_bstack, rx328_done1001
    pop $I19, rx328_bstack
    if_null rx328_cstack, rx328_cstack_done1006
    unless rx328_cstack, rx328_cstack_done1006
    dec $I19
    set $P11, rx328_cstack[$I19]
  rx328_cstack_done1006:
    pop rx328_rep, rx328_bstack
    pop rx328_pos, rx328_bstack
    pop $I19, rx328_bstack
    lt rx328_pos, -1, rx328_done1001
    lt rx328_pos, 0, rx328_fail1003
    eq $I19, 0, rx328_fail1003
    nqp_islist $I20, rx328_cstack
    unless $I20, rx328_jump1004
    elements $I18, rx328_bstack
    le $I18, 0, rx328_cut1005
    dec $I18
    set $I18, rx328_bstack[$I18]
  rx328_cut1005:
    assign rx328_cstack, $I18
  rx328_jump1004:
    jump $I19
  rx328_done1001:
    rx328_cur."!cursor_fail"()
    .return (rx328_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_66_1347804164.33_caps" :subid("cuid_memo_68_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["wu"], $P5003
    box $P5004, 0
    set $P5001["xblock"], $P5004
    box $P5005, 0
    set $P5001["pblock"], $P5005
    box $P5006, 0
    set $P5001["EXPR"], $P5006
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_66_1347804164.33_nfa" :subid("cuid_memo_69_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 114
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 101
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 112
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 101
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 97
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 116
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 4
    push $P5031, $P5032
    box $P5033, 32
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 0
    push $P5035, $P5036
    box $P5037, 0
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_66_1347804164.33_alt_nfa__14_1347804165.951" :subid("cuid_memo_70_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 119
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 104
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 105
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 108
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 101
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 117
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 110
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 116
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 105
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 108
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_66_1347804164.33_alt_nfa__15_1347804165.952" :subid("cuid_memo_71_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 119
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 104
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 105
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 108
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 101
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 117
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 110
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 116
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 105
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 108
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_66_1347804164.33_alt_nfa__13_1347804165.951" :subid("cuid_memo_72_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_67_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 834
    .param pmc _lex_param_0 
    .lex "$*CONTROL_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx348_tgt
    .local int rx348_pos
    .local int rx348_off
    .local int rx348_eos
    .local int rx348_rep
    .local pmc rx348_cur
    .local pmc rx348_curclass
    .local pmc rx348_bstack
    .local pmc rx348_cstack
    (rx348_cur, rx348_tgt, rx348_pos, rx348_curclass, rx348_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx348_cur
    length rx348_eos, rx348_tgt
    eq $I19, 1, rx348_restart1039
    gt rx348_pos, rx348_eos, rx348_fail1040
    repr_get_attr_int $I11, self, rx348_curclass, "$!from"
    ne $I11, -1, rxscan349_done1046
    goto rxscan349_scan1045
  rxscan349_loop1044:
    inc rx348_pos
    gt rx348_pos, rx348_eos, rx348_fail1040
    repr_bind_attr_int rx348_cur, rx348_curclass, "$!from", rx348_pos
  rxscan349_scan1045:
    nqp_rxmark rx348_bstack, rxscan349_loop1044, rx348_pos, 0
  rxscan349_done1046:
    repr_bind_attr_int rx348_cur, rx348_curclass, "$!pos", rx348_pos
    store_lex unicode:"$\x{a2}", rx348_cur
    box $P5002, 0
    set $P101, $P5002
    nqp_rxmark rx348_bstack, rxcap350_fail1048, rx348_pos, 0
    add $I11, rx348_pos, 3
    gt $I11, rx348_eos, rx348_fail1040
    substr $S10, rx348_tgt, rx348_pos, 3
    ne $S10, ucs4:"for", rx348_fail1040
    add rx348_pos, 3
    nqp_rxpeek $I19, rx348_bstack, rxcap350_fail1048
    inc $I19
    set $I11, rx348_bstack[$I19]
    $P11 = rx348_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx348_pos)
    rx348_cstack = rx348_cur."!cursor_capture"($P11, "sym")
    goto rxcap350_done1047
  rxcap350_fail1048:
    goto rx348_fail1040
  rxcap350_done1047:
    ge rx348_pos, rx348_eos, rx348_fail1040
    is_cclass $I11, .CCLASS_WHITESPACE, rx348_tgt, rx348_pos
    unless $I11, rx348_fail1040
    add rx348_pos, 1
    repr_bind_attr_int rx348_cur, rx348_curclass, "$!pos", rx348_pos
    $P11 = rx348_cur."ws"()
    repr_get_attr_int $I11, $P11, rx348_curclass, "$!pos"
    lt $I11, 0, rx348_fail1040
    repr_get_attr_int rx348_pos, $P11, rx348_curclass, "$!pos"
    repr_bind_attr_int rx348_cur, rx348_curclass, "$!pos", rx348_pos
    $P11 = rx348_cur."xblock"()
    repr_get_attr_int $I11, $P11, rx348_curclass, "$!pos"
    lt $I11, 0, rx348_fail1040
    nqp_rxmark rx348_bstack, rxsubrule352_pass1050, -1, 0
  rxsubrule352_pass1050:
    rx348_cstack = rx348_cur."!cursor_capture"($P11, "xblock")
    repr_get_attr_int rx348_pos, $P11, rx348_curclass, "$!pos"
    repr_bind_attr_int rx348_cur, rx348_curclass, "$!pos", rx348_pos
    $P11 = rx348_cur."ws"()
    repr_get_attr_int $I11, $P11, rx348_curclass, "$!pos"
    lt $I11, 0, rx348_fail1040
    repr_get_attr_int rx348_pos, $P11, rx348_curclass, "$!pos"
    rx348_cur."!cursor_pass"(rx348_pos, "statement_control:sym<for>", 'backtrack'=>1)
    .return (rx348_cur)
  rx348_restart1039:
    repr_get_attr_obj rx348_cstack, rx348_cur, rx348_curclass, "$!cstack"
  rx348_fail1040:
    unless rx348_bstack, rx348_done1038
    pop $I19, rx348_bstack
    if_null rx348_cstack, rx348_cstack_done1043
    unless rx348_cstack, rx348_cstack_done1043
    dec $I19
    set $P11, rx348_cstack[$I19]
  rx348_cstack_done1043:
    pop rx348_rep, rx348_bstack
    pop rx348_pos, rx348_bstack
    pop $I19, rx348_bstack
    lt rx348_pos, -1, rx348_done1038
    lt rx348_pos, 0, rx348_fail1040
    eq $I19, 0, rx348_fail1040
    nqp_islist $I20, rx348_cstack
    unless $I20, rx348_jump1041
    elements $I18, rx348_bstack
    le $I18, 0, rx348_cut1042
    dec $I18
    set $I18, rx348_bstack[$I18]
  rx348_cut1042:
    assign rx348_cstack, $I18
  rx348_jump1041:
    jump $I19
  rx348_done1038:
    rx348_cur."!cursor_fail"()
    .return (rx348_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1347804164.33_caps" :subid("cuid_memo_73_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["xblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_67_1347804164.33_nfa" :subid("cuid_memo_74_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 102
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 111
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 114
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 4
    push $P5019, $P5020
    box $P5021, 32
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_68_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 840
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx354_tgt
    .local int rx354_pos
    .local int rx354_off
    .local int rx354_eos
    .local int rx354_rep
    .local pmc rx354_cur
    .local pmc rx354_curclass
    .local pmc rx354_bstack
    .local pmc rx354_cstack
    (rx354_cur, rx354_tgt, rx354_pos, rx354_curclass, rx354_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx354_cur
    length rx354_eos, rx354_tgt
    eq $I19, 1, rx354_restart1054
    gt rx354_pos, rx354_eos, rx354_fail1055
    repr_get_attr_int $I11, self, rx354_curclass, "$!from"
    ne $I11, -1, rxscan355_done1061
    goto rxscan355_scan1060
  rxscan355_loop1059:
    inc rx354_pos
    gt rx354_pos, rx354_eos, rx354_fail1055
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!from", rx354_pos
  rxscan355_scan1060:
    nqp_rxmark rx354_bstack, rxscan355_loop1059, rx354_pos, 0
  rxscan355_done1061:
    nqp_rxmark rx354_bstack, rxcap356_fail1063, rx354_pos, 0
    add $I11, rx354_pos, 5
    gt $I11, rx354_eos, rx354_fail1055
    substr $S10, rx354_tgt, rx354_pos, 5
    ne $S10, ucs4:"CATCH", rx354_fail1055
    add rx354_pos, 5
    nqp_rxpeek $I19, rx354_bstack, rxcap356_fail1063
    inc $I19
    set $I11, rx354_bstack[$I19]
    $P11 = rx354_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx354_pos)
    rx354_cstack = rx354_cur."!cursor_capture"($P11, "sym")
    goto rxcap356_done1062
  rxcap356_fail1063:
    goto rx354_fail1055
  rxcap356_done1062:
    ge rx354_pos, rx354_eos, rx354_fail1055
    is_cclass $I11, .CCLASS_WHITESPACE, rx354_tgt, rx354_pos
    unless $I11, rx354_fail1055
    add rx354_pos, 1
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!pos", rx354_pos
    $P11 = rx354_cur."ws"()
    repr_get_attr_int $I11, $P11, rx354_curclass, "$!pos"
    lt $I11, 0, rx354_fail1055
    repr_get_attr_int rx354_pos, $P11, rx354_curclass, "$!pos"
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!pos", rx354_pos
    $P11 = rx354_cur."block"()
    repr_get_attr_int $I11, $P11, rx354_curclass, "$!pos"
    lt $I11, 0, rx354_fail1055
    nqp_rxmark rx354_bstack, rxsubrule358_pass1065, -1, 0
  rxsubrule358_pass1065:
    rx354_cstack = rx354_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx354_pos, $P11, rx354_curclass, "$!pos"
    repr_bind_attr_int rx354_cur, rx354_curclass, "$!pos", rx354_pos
    $P11 = rx354_cur."ws"()
    repr_get_attr_int $I11, $P11, rx354_curclass, "$!pos"
    lt $I11, 0, rx354_fail1055
    repr_get_attr_int rx354_pos, $P11, rx354_curclass, "$!pos"
    rx354_cur."!cursor_pass"(rx354_pos, "statement_control:sym<CATCH>", 'backtrack'=>1)
    .return (rx354_cur)
  rx354_restart1054:
    repr_get_attr_obj rx354_cstack, rx354_cur, rx354_curclass, "$!cstack"
  rx354_fail1055:
    unless rx354_bstack, rx354_done1053
    pop $I19, rx354_bstack
    if_null rx354_cstack, rx354_cstack_done1058
    unless rx354_cstack, rx354_cstack_done1058
    dec $I19
    set $P11, rx354_cstack[$I19]
  rx354_cstack_done1058:
    pop rx354_rep, rx354_bstack
    pop rx354_pos, rx354_bstack
    pop $I19, rx354_bstack
    lt rx354_pos, -1, rx354_done1053
    lt rx354_pos, 0, rx354_fail1055
    eq $I19, 0, rx354_fail1055
    nqp_islist $I20, rx354_cstack
    unless $I20, rx354_jump1056
    elements $I18, rx354_bstack
    le $I18, 0, rx354_cut1057
    dec $I18
    set $I18, rx354_bstack[$I18]
  rx354_cut1057:
    assign rx354_cstack, $I18
  rx354_jump1056:
    jump $I19
  rx354_done1053:
    rx354_cur."!cursor_fail"()
    .return (rx354_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_68_1347804164.33_caps" :subid("cuid_memo_75_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["block"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_68_1347804164.33_nfa" :subid("cuid_memo_76_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 67
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 65
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 84
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 67
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 72
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 4
    push $P5023, $P5024
    box $P5025, 32
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 0
    push $P5027, $P5028
    box $P5029, 0
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_69_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 845
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx360_tgt
    .local int rx360_pos
    .local int rx360_off
    .local int rx360_eos
    .local int rx360_rep
    .local pmc rx360_cur
    .local pmc rx360_curclass
    .local pmc rx360_bstack
    .local pmc rx360_cstack
    (rx360_cur, rx360_tgt, rx360_pos, rx360_curclass, rx360_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx360_cur
    length rx360_eos, rx360_tgt
    eq $I19, 1, rx360_restart1069
    gt rx360_pos, rx360_eos, rx360_fail1070
    repr_get_attr_int $I11, self, rx360_curclass, "$!from"
    ne $I11, -1, rxscan361_done1076
    goto rxscan361_scan1075
  rxscan361_loop1074:
    inc rx360_pos
    gt rx360_pos, rx360_eos, rx360_fail1070
    repr_bind_attr_int rx360_cur, rx360_curclass, "$!from", rx360_pos
  rxscan361_scan1075:
    nqp_rxmark rx360_bstack, rxscan361_loop1074, rx360_pos, 0
  rxscan361_done1076:
    nqp_rxmark rx360_bstack, rxcap362_fail1078, rx360_pos, 0
    add $I11, rx360_pos, 7
    gt $I11, rx360_eos, rx360_fail1070
    substr $S10, rx360_tgt, rx360_pos, 7
    ne $S10, ucs4:"CONTROL", rx360_fail1070
    add rx360_pos, 7
    nqp_rxpeek $I19, rx360_bstack, rxcap362_fail1078
    inc $I19
    set $I11, rx360_bstack[$I19]
    $P11 = rx360_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx360_pos)
    rx360_cstack = rx360_cur."!cursor_capture"($P11, "sym")
    goto rxcap362_done1077
  rxcap362_fail1078:
    goto rx360_fail1070
  rxcap362_done1077:
    ge rx360_pos, rx360_eos, rx360_fail1070
    is_cclass $I11, .CCLASS_WHITESPACE, rx360_tgt, rx360_pos
    unless $I11, rx360_fail1070
    add rx360_pos, 1
    repr_bind_attr_int rx360_cur, rx360_curclass, "$!pos", rx360_pos
    $P11 = rx360_cur."ws"()
    repr_get_attr_int $I11, $P11, rx360_curclass, "$!pos"
    lt $I11, 0, rx360_fail1070
    repr_get_attr_int rx360_pos, $P11, rx360_curclass, "$!pos"
    repr_bind_attr_int rx360_cur, rx360_curclass, "$!pos", rx360_pos
    $P11 = rx360_cur."block"()
    repr_get_attr_int $I11, $P11, rx360_curclass, "$!pos"
    lt $I11, 0, rx360_fail1070
    nqp_rxmark rx360_bstack, rxsubrule364_pass1080, -1, 0
  rxsubrule364_pass1080:
    rx360_cstack = rx360_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx360_pos, $P11, rx360_curclass, "$!pos"
    repr_bind_attr_int rx360_cur, rx360_curclass, "$!pos", rx360_pos
    $P11 = rx360_cur."ws"()
    repr_get_attr_int $I11, $P11, rx360_curclass, "$!pos"
    lt $I11, 0, rx360_fail1070
    repr_get_attr_int rx360_pos, $P11, rx360_curclass, "$!pos"
    rx360_cur."!cursor_pass"(rx360_pos, "statement_control:sym<CONTROL>", 'backtrack'=>1)
    .return (rx360_cur)
  rx360_restart1069:
    repr_get_attr_obj rx360_cstack, rx360_cur, rx360_curclass, "$!cstack"
  rx360_fail1070:
    unless rx360_bstack, rx360_done1068
    pop $I19, rx360_bstack
    if_null rx360_cstack, rx360_cstack_done1073
    unless rx360_cstack, rx360_cstack_done1073
    dec $I19
    set $P11, rx360_cstack[$I19]
  rx360_cstack_done1073:
    pop rx360_rep, rx360_bstack
    pop rx360_pos, rx360_bstack
    pop $I19, rx360_bstack
    lt rx360_pos, -1, rx360_done1068
    lt rx360_pos, 0, rx360_fail1070
    eq $I19, 0, rx360_fail1070
    nqp_islist $I20, rx360_cstack
    unless $I20, rx360_jump1071
    elements $I18, rx360_bstack
    le $I18, 0, rx360_cut1072
    dec $I18
    set $I18, rx360_bstack[$I18]
  rx360_cut1072:
    assign rx360_cstack, $I18
  rx360_jump1071:
    jump $I19
  rx360_done1068:
    rx360_cur."!cursor_fail"()
    .return (rx360_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_69_1347804164.33_caps" :subid("cuid_memo_77_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["block"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_69_1347804164.33_nfa" :subid("cuid_memo_78_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 67
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 79
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 78
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 84
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 82
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 79
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 76
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 4
    push $P5031, $P5032
    box $P5033, 32
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 0
    push $P5035, $P5036
    box $P5037, 0
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix" :subid("cuid_70_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 850
    .param pmc self 
    $P5001 = self."!protoregex"("statement_prefix")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_71_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 851
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx366_tgt
    .local int rx366_pos
    .local int rx366_off
    .local int rx366_eos
    .local int rx366_rep
    .local pmc rx366_cur
    .local pmc rx366_curclass
    .local pmc rx366_bstack
    .local pmc rx366_cstack
    (rx366_cur, rx366_tgt, rx366_pos, rx366_curclass, rx366_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx366_cur
    length rx366_eos, rx366_tgt
    eq $I19, 1, rx366_restart1084
    gt rx366_pos, rx366_eos, rx366_fail1085
    repr_get_attr_int $I11, self, rx366_curclass, "$!from"
    ne $I11, -1, rxscan367_done1091
    goto rxscan367_scan1090
  rxscan367_loop1089:
    inc rx366_pos
    gt rx366_pos, rx366_eos, rx366_fail1085
    repr_bind_attr_int rx366_cur, rx366_curclass, "$!from", rx366_pos
  rxscan367_scan1090:
    nqp_rxmark rx366_bstack, rxscan367_loop1089, rx366_pos, 0
  rxscan367_done1091:
    nqp_rxmark rx366_bstack, rxcap368_fail1093, rx366_pos, 0
    add $I11, rx366_pos, 5
    gt $I11, rx366_eos, rx366_fail1085
    substr $S10, rx366_tgt, rx366_pos, 5
    ne $S10, ucs4:"BEGIN", rx366_fail1085
    add rx366_pos, 5
    nqp_rxpeek $I19, rx366_bstack, rxcap368_fail1093
    inc $I19
    set $I11, rx366_bstack[$I19]
    $P11 = rx366_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx366_pos)
    rx366_cstack = rx366_cur."!cursor_capture"($P11, "sym")
    goto rxcap368_done1092
  rxcap368_fail1093:
    goto rx366_fail1085
  rxcap368_done1092:
    repr_bind_attr_int rx366_cur, rx366_curclass, "$!pos", rx366_pos
    $P11 = rx366_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx366_curclass, "$!pos"
    lt $I11, 0, rx366_fail1085
    nqp_rxmark rx366_bstack, rxsubrule369_pass1094, -1, 0
  rxsubrule369_pass1094:
    rx366_cstack = rx366_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx366_pos, $P11, rx366_curclass, "$!pos"
    rx366_cur."!cursor_pass"(rx366_pos, "statement_prefix:sym<BEGIN>", 'backtrack'=>1)
    .return (rx366_cur)
  rx366_restart1084:
    repr_get_attr_obj rx366_cstack, rx366_cur, rx366_curclass, "$!cstack"
  rx366_fail1085:
    unless rx366_bstack, rx366_done1083
    pop $I19, rx366_bstack
    if_null rx366_cstack, rx366_cstack_done1088
    unless rx366_cstack, rx366_cstack_done1088
    dec $I19
    set $P11, rx366_cstack[$I19]
  rx366_cstack_done1088:
    pop rx366_rep, rx366_bstack
    pop rx366_pos, rx366_bstack
    pop $I19, rx366_bstack
    lt rx366_pos, -1, rx366_done1083
    lt rx366_pos, 0, rx366_fail1085
    eq $I19, 0, rx366_fail1085
    nqp_islist $I20, rx366_cstack
    unless $I20, rx366_jump1086
    elements $I18, rx366_bstack
    le $I18, 0, rx366_cut1087
    dec $I18
    set $I18, rx366_bstack[$I18]
  rx366_cut1087:
    assign rx366_cstack, $I18
  rx366_jump1086:
    jump $I19
  rx366_done1083:
    rx366_cur."!cursor_fail"()
    .return (rx366_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_71_1347804164.33_caps" :subid("cuid_memo_79_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["blorst"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_71_1347804164.33_nfa" :subid("cuid_memo_80_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 66
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 69
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 71
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 73
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 78
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "blorst"
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_72_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 852
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx370_tgt
    .local int rx370_pos
    .local int rx370_off
    .local int rx370_eos
    .local int rx370_rep
    .local pmc rx370_cur
    .local pmc rx370_curclass
    .local pmc rx370_bstack
    .local pmc rx370_cstack
    (rx370_cur, rx370_tgt, rx370_pos, rx370_curclass, rx370_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx370_cur
    length rx370_eos, rx370_tgt
    eq $I19, 1, rx370_restart1097
    gt rx370_pos, rx370_eos, rx370_fail1098
    repr_get_attr_int $I11, self, rx370_curclass, "$!from"
    ne $I11, -1, rxscan371_done1104
    goto rxscan371_scan1103
  rxscan371_loop1102:
    inc rx370_pos
    gt rx370_pos, rx370_eos, rx370_fail1098
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!from", rx370_pos
  rxscan371_scan1103:
    nqp_rxmark rx370_bstack, rxscan371_loop1102, rx370_pos, 0
  rxscan371_done1104:
    nqp_rxmark rx370_bstack, rxcap372_fail1106, rx370_pos, 0
    add $I11, rx370_pos, 4
    gt $I11, rx370_eos, rx370_fail1098
    substr $S10, rx370_tgt, rx370_pos, 4
    ne $S10, ucs4:"INIT", rx370_fail1098
    add rx370_pos, 4
    nqp_rxpeek $I19, rx370_bstack, rxcap372_fail1106
    inc $I19
    set $I11, rx370_bstack[$I19]
    $P11 = rx370_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx370_pos)
    rx370_cstack = rx370_cur."!cursor_capture"($P11, "sym")
    goto rxcap372_done1105
  rxcap372_fail1106:
    goto rx370_fail1098
  rxcap372_done1105:
    repr_bind_attr_int rx370_cur, rx370_curclass, "$!pos", rx370_pos
    $P11 = rx370_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx370_curclass, "$!pos"
    lt $I11, 0, rx370_fail1098
    nqp_rxmark rx370_bstack, rxsubrule373_pass1107, -1, 0
  rxsubrule373_pass1107:
    rx370_cstack = rx370_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx370_pos, $P11, rx370_curclass, "$!pos"
    rx370_cur."!cursor_pass"(rx370_pos, "statement_prefix:sym<INIT>", 'backtrack'=>1)
    .return (rx370_cur)
  rx370_restart1097:
    repr_get_attr_obj rx370_cstack, rx370_cur, rx370_curclass, "$!cstack"
  rx370_fail1098:
    unless rx370_bstack, rx370_done1096
    pop $I19, rx370_bstack
    if_null rx370_cstack, rx370_cstack_done1101
    unless rx370_cstack, rx370_cstack_done1101
    dec $I19
    set $P11, rx370_cstack[$I19]
  rx370_cstack_done1101:
    pop rx370_rep, rx370_bstack
    pop rx370_pos, rx370_bstack
    pop $I19, rx370_bstack
    lt rx370_pos, -1, rx370_done1096
    lt rx370_pos, 0, rx370_fail1098
    eq $I19, 0, rx370_fail1098
    nqp_islist $I20, rx370_cstack
    unless $I20, rx370_jump1099
    elements $I18, rx370_bstack
    le $I18, 0, rx370_cut1100
    dec $I18
    set $I18, rx370_bstack[$I18]
  rx370_cut1100:
    assign rx370_cstack, $I18
  rx370_jump1099:
    jump $I19
  rx370_done1096:
    rx370_cur."!cursor_fail"()
    .return (rx370_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_72_1347804164.33_caps" :subid("cuid_memo_81_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["blorst"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_72_1347804164.33_nfa" :subid("cuid_memo_82_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 73
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 78
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 73
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 84
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "blorst"
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_73_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 854
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx374_tgt
    .local int rx374_pos
    .local int rx374_off
    .local int rx374_eos
    .local int rx374_rep
    .local pmc rx374_cur
    .local pmc rx374_curclass
    .local pmc rx374_bstack
    .local pmc rx374_cstack
    (rx374_cur, rx374_tgt, rx374_pos, rx374_curclass, rx374_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx374_cur
    length rx374_eos, rx374_tgt
    eq $I19, 1, rx374_restart1110
    gt rx374_pos, rx374_eos, rx374_fail1111
    repr_get_attr_int $I11, self, rx374_curclass, "$!from"
    ne $I11, -1, rxscan375_done1117
    goto rxscan375_scan1116
  rxscan375_loop1115:
    inc rx374_pos
    gt rx374_pos, rx374_eos, rx374_fail1111
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!from", rx374_pos
  rxscan375_scan1116:
    nqp_rxmark rx374_bstack, rxscan375_loop1115, rx374_pos, 0
  rxscan375_done1117:
    nqp_rxmark rx374_bstack, rxcap376_fail1119, rx374_pos, 0
    add $I11, rx374_pos, 3
    gt $I11, rx374_eos, rx374_fail1111
    substr $S10, rx374_tgt, rx374_pos, 3
    ne $S10, ucs4:"try", rx374_fail1111
    add rx374_pos, 3
    nqp_rxpeek $I19, rx374_bstack, rxcap376_fail1119
    inc $I19
    set $I11, rx374_bstack[$I19]
    $P11 = rx374_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx374_pos)
    rx374_cstack = rx374_cur."!cursor_capture"($P11, "sym")
    goto rxcap376_done1118
  rxcap376_fail1119:
    goto rx374_fail1111
  rxcap376_done1118:
    repr_bind_attr_int rx374_cur, rx374_curclass, "$!pos", rx374_pos
    $P11 = rx374_cur."blorst"()
    repr_get_attr_int $I11, $P11, rx374_curclass, "$!pos"
    lt $I11, 0, rx374_fail1111
    nqp_rxmark rx374_bstack, rxsubrule377_pass1120, -1, 0
  rxsubrule377_pass1120:
    rx374_cstack = rx374_cur."!cursor_capture"($P11, "blorst")
    repr_get_attr_int rx374_pos, $P11, rx374_curclass, "$!pos"
    rx374_cur."!cursor_pass"(rx374_pos, "statement_prefix:sym<try>", 'backtrack'=>1)
    .return (rx374_cur)
  rx374_restart1110:
    repr_get_attr_obj rx374_cstack, rx374_cur, rx374_curclass, "$!cstack"
  rx374_fail1111:
    unless rx374_bstack, rx374_done1109
    pop $I19, rx374_bstack
    if_null rx374_cstack, rx374_cstack_done1114
    unless rx374_cstack, rx374_cstack_done1114
    dec $I19
    set $P11, rx374_cstack[$I19]
  rx374_cstack_done1114:
    pop rx374_rep, rx374_bstack
    pop rx374_pos, rx374_bstack
    pop $I19, rx374_bstack
    lt rx374_pos, -1, rx374_done1109
    lt rx374_pos, 0, rx374_fail1111
    eq $I19, 0, rx374_fail1111
    nqp_islist $I20, rx374_cstack
    unless $I20, rx374_jump1112
    elements $I18, rx374_bstack
    le $I18, 0, rx374_cut1113
    dec $I18
    set $I18, rx374_bstack[$I18]
  rx374_cut1113:
    assign rx374_cstack, $I18
  rx374_jump1112:
    jump $I19
  rx374_done1109:
    rx374_cur."!cursor_fail"()
    .return (rx374_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_73_1347804164.33_caps" :subid("cuid_memo_83_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["blorst"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_73_1347804164.33_nfa" :subid("cuid_memo_84_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 116
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 114
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 121
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "blorst"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_74_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 859
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx378_tgt
    .local int rx378_pos
    .local int rx378_off
    .local int rx378_eos
    .local int rx378_rep
    .local pmc rx378_cur
    .local pmc rx378_curclass
    .local pmc rx378_bstack
    .local pmc rx378_cstack
    (rx378_cur, rx378_tgt, rx378_pos, rx378_curclass, rx378_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx378_cur
    length rx378_eos, rx378_tgt
    eq $I19, 1, rx378_restart1123
    gt rx378_pos, rx378_eos, rx378_fail1124
    repr_get_attr_int $I11, self, rx378_curclass, "$!from"
    ne $I11, -1, rxscan379_done1130
    goto rxscan379_scan1129
  rxscan379_loop1128:
    inc rx378_pos
    gt rx378_pos, rx378_eos, rx378_fail1124
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!from", rx378_pos
  rxscan379_scan1129:
    nqp_rxmark rx378_bstack, rxscan379_loop1128, rx378_pos, 0
  rxscan379_done1130:
    ge rx378_pos, rx378_eos, rx378_fail1124
    is_cclass $I11, .CCLASS_WHITESPACE, rx378_tgt, rx378_pos
    unless $I11, rx378_fail1124
    add rx378_pos, 1
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!pos", rx378_pos
    $P11 = rx378_cur."ws"()
    repr_get_attr_int $I11, $P11, rx378_curclass, "$!pos"
    lt $I11, 0, rx378_fail1124
    repr_get_attr_int rx378_pos, $P11, rx378_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt381_01133
    nqp_push_label $P11, alt381_11135
    nqp_rxmark rx378_bstack, alt381_end1132, -1, 0
    rx378_cur."!alt"(rx378_pos, "alt_nfa__16_1347804166.007", $P11)
    goto rx378_fail1124
  alt381_01133:
    ge rx378_pos, rx378_eos, rx378_fail1124
    substr $S11, rx378_tgt, rx378_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx378_fail1124
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!pos", rx378_pos
    $P11 = rx378_cur."block"()
    repr_get_attr_int $I11, $P11, rx378_curclass, "$!pos"
    lt $I11, 0, rx378_fail1124
    nqp_rxmark rx378_bstack, rxsubrule382_pass1134, -1, 0
  rxsubrule382_pass1134:
    rx378_cstack = rx378_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx378_pos, $P11, rx378_curclass, "$!pos"
    goto alt381_end1132
  alt381_11135:
    repr_bind_attr_int rx378_cur, rx378_curclass, "$!pos", rx378_pos
    $P11 = rx378_cur."statement"()
    repr_get_attr_int $I11, $P11, rx378_curclass, "$!pos"
    lt $I11, 0, rx378_fail1124
    nqp_rxmark rx378_bstack, rxsubrule383_pass1136, -1, 0
  rxsubrule383_pass1136:
    rx378_cstack = rx378_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx378_pos, $P11, rx378_curclass, "$!pos"
    goto alt381_end1132
  alt381_end1132:
    nqp_rxcommit rx378_bstack, alt381_end1132
    rx378_cur."!cursor_pass"(rx378_pos, "blorst", 'backtrack'=>1)
    .return (rx378_cur)
  rx378_restart1123:
    repr_get_attr_obj rx378_cstack, rx378_cur, rx378_curclass, "$!cstack"
  rx378_fail1124:
    unless rx378_bstack, rx378_done1122
    pop $I19, rx378_bstack
    if_null rx378_cstack, rx378_cstack_done1127
    unless rx378_cstack, rx378_cstack_done1127
    dec $I19
    set $P11, rx378_cstack[$I19]
  rx378_cstack_done1127:
    pop rx378_rep, rx378_bstack
    pop rx378_pos, rx378_bstack
    pop $I19, rx378_bstack
    lt rx378_pos, -1, rx378_done1122
    lt rx378_pos, 0, rx378_fail1124
    eq $I19, 0, rx378_fail1124
    nqp_islist $I20, rx378_cstack
    unless $I20, rx378_jump1125
    elements $I18, rx378_bstack
    le $I18, 0, rx378_cut1126
    dec $I18
    set $I18, rx378_bstack[$I18]
  rx378_cut1126:
    assign rx378_cstack, $I18
  rx378_jump1125:
    jump $I19
  rx378_done1122:
    rx378_cur."!cursor_fail"()
    .return (rx378_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_74_1347804164.33_caps" :subid("cuid_memo_85_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["block"], $P5002
    box $P5003, 0
    set $P5001["statement"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_74_1347804164.33_nfa" :subid("cuid_memo_86_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 4
    push $P5003, $P5004
    box $P5005, 32
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 6
    push $P5011, $P5012
    box $P5013, "{"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    box $P5015, 8
    push $P5011, $P5015
    box $P5016, "statement"
    push $P5011, $P5016
    box $P5017, 0
    push $P5011, $P5017
    push $P5001, $P5011
    new $P5018, 'ResizablePMCArray'
    box $P5019, 0
    push $P5018, $P5019
    box $P5020, 0
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_74_1347804164.33_alt_nfa__16_1347804166.007" :subid("cuid_memo_87_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 6
    push $P5004, $P5005
    box $P5006, "{"
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "statement"
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5012, $P5014
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond" :subid("cuid_75_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 865
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_cond")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_76_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 867
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx384_tgt
    .local int rx384_pos
    .local int rx384_off
    .local int rx384_eos
    .local int rx384_rep
    .local pmc rx384_cur
    .local pmc rx384_curclass
    .local pmc rx384_bstack
    .local pmc rx384_cstack
    (rx384_cur, rx384_tgt, rx384_pos, rx384_curclass, rx384_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx384_cur
    length rx384_eos, rx384_tgt
    eq $I19, 1, rx384_restart1139
    gt rx384_pos, rx384_eos, rx384_fail1140
    repr_get_attr_int $I11, self, rx384_curclass, "$!from"
    ne $I11, -1, rxscan385_done1146
    goto rxscan385_scan1145
  rxscan385_loop1144:
    inc rx384_pos
    gt rx384_pos, rx384_eos, rx384_fail1140
    repr_bind_attr_int rx384_cur, rx384_curclass, "$!from", rx384_pos
  rxscan385_scan1145:
    nqp_rxmark rx384_bstack, rxscan385_loop1144, rx384_pos, 0
  rxscan385_done1146:
    nqp_rxmark rx384_bstack, rxcap386_fail1148, rx384_pos, 0
    add $I11, rx384_pos, 2
    gt $I11, rx384_eos, rx384_fail1140
    substr $S10, rx384_tgt, rx384_pos, 2
    ne $S10, ucs4:"if", rx384_fail1140
    add rx384_pos, 2
    nqp_rxpeek $I19, rx384_bstack, rxcap386_fail1148
    inc $I19
    set $I11, rx384_bstack[$I19]
    $P11 = rx384_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx384_pos)
    rx384_cstack = rx384_cur."!cursor_capture"($P11, "sym")
    goto rxcap386_done1147
  rxcap386_fail1148:
    goto rx384_fail1140
  rxcap386_done1147:
    repr_bind_attr_int rx384_cur, rx384_curclass, "$!pos", rx384_pos
    $P11 = rx384_cur."ws"()
    repr_get_attr_int $I11, $P11, rx384_curclass, "$!pos"
    lt $I11, 0, rx384_fail1140
    repr_get_attr_int rx384_pos, $P11, rx384_curclass, "$!pos"
    repr_bind_attr_int rx384_cur, rx384_curclass, "$!pos", rx384_pos
    $P11 = rx384_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx384_curclass, "$!pos"
    lt $I11, 0, rx384_fail1140
    nqp_rxmark rx384_bstack, rxsubrule388_pass1150, -1, 0
  rxsubrule388_pass1150:
    rx384_cstack = rx384_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx384_pos, $P11, rx384_curclass, "$!pos"
    repr_bind_attr_int rx384_cur, rx384_curclass, "$!pos", rx384_pos
    $P11 = rx384_cur."ws"()
    repr_get_attr_int $I11, $P11, rx384_curclass, "$!pos"
    lt $I11, 0, rx384_fail1140
    repr_get_attr_int rx384_pos, $P11, rx384_curclass, "$!pos"
    rx384_cur."!cursor_pass"(rx384_pos, "statement_mod_cond:sym<if>", 'backtrack'=>1)
    .return (rx384_cur)
  rx384_restart1139:
    repr_get_attr_obj rx384_cstack, rx384_cur, rx384_curclass, "$!cstack"
  rx384_fail1140:
    unless rx384_bstack, rx384_done1138
    pop $I19, rx384_bstack
    if_null rx384_cstack, rx384_cstack_done1143
    unless rx384_cstack, rx384_cstack_done1143
    dec $I19
    set $P11, rx384_cstack[$I19]
  rx384_cstack_done1143:
    pop rx384_rep, rx384_bstack
    pop rx384_pos, rx384_bstack
    pop $I19, rx384_bstack
    lt rx384_pos, -1, rx384_done1138
    lt rx384_pos, 0, rx384_fail1140
    eq $I19, 0, rx384_fail1140
    nqp_islist $I20, rx384_cstack
    unless $I20, rx384_jump1141
    elements $I18, rx384_bstack
    le $I18, 0, rx384_cut1142
    dec $I18
    set $I18, rx384_bstack[$I18]
  rx384_cut1142:
    assign rx384_cstack, $I18
  rx384_jump1141:
    jump $I19
  rx384_done1138:
    rx384_cur."!cursor_fail"()
    .return (rx384_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_76_1347804164.33_caps" :subid("cuid_memo_88_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_76_1347804164.33_nfa" :subid("cuid_memo_89_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 105
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 102
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_77_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 868
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx390_tgt
    .local int rx390_pos
    .local int rx390_off
    .local int rx390_eos
    .local int rx390_rep
    .local pmc rx390_cur
    .local pmc rx390_curclass
    .local pmc rx390_bstack
    .local pmc rx390_cstack
    (rx390_cur, rx390_tgt, rx390_pos, rx390_curclass, rx390_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx390_cur
    length rx390_eos, rx390_tgt
    eq $I19, 1, rx390_restart1154
    gt rx390_pos, rx390_eos, rx390_fail1155
    repr_get_attr_int $I11, self, rx390_curclass, "$!from"
    ne $I11, -1, rxscan391_done1161
    goto rxscan391_scan1160
  rxscan391_loop1159:
    inc rx390_pos
    gt rx390_pos, rx390_eos, rx390_fail1155
    repr_bind_attr_int rx390_cur, rx390_curclass, "$!from", rx390_pos
  rxscan391_scan1160:
    nqp_rxmark rx390_bstack, rxscan391_loop1159, rx390_pos, 0
  rxscan391_done1161:
    nqp_rxmark rx390_bstack, rxcap392_fail1163, rx390_pos, 0
    add $I11, rx390_pos, 6
    gt $I11, rx390_eos, rx390_fail1155
    substr $S10, rx390_tgt, rx390_pos, 6
    ne $S10, ucs4:"unless", rx390_fail1155
    add rx390_pos, 6
    nqp_rxpeek $I19, rx390_bstack, rxcap392_fail1163
    inc $I19
    set $I11, rx390_bstack[$I19]
    $P11 = rx390_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx390_pos)
    rx390_cstack = rx390_cur."!cursor_capture"($P11, "sym")
    goto rxcap392_done1162
  rxcap392_fail1163:
    goto rx390_fail1155
  rxcap392_done1162:
    repr_bind_attr_int rx390_cur, rx390_curclass, "$!pos", rx390_pos
    $P11 = rx390_cur."ws"()
    repr_get_attr_int $I11, $P11, rx390_curclass, "$!pos"
    lt $I11, 0, rx390_fail1155
    repr_get_attr_int rx390_pos, $P11, rx390_curclass, "$!pos"
    repr_bind_attr_int rx390_cur, rx390_curclass, "$!pos", rx390_pos
    $P11 = rx390_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx390_curclass, "$!pos"
    lt $I11, 0, rx390_fail1155
    nqp_rxmark rx390_bstack, rxsubrule394_pass1165, -1, 0
  rxsubrule394_pass1165:
    rx390_cstack = rx390_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx390_pos, $P11, rx390_curclass, "$!pos"
    repr_bind_attr_int rx390_cur, rx390_curclass, "$!pos", rx390_pos
    $P11 = rx390_cur."ws"()
    repr_get_attr_int $I11, $P11, rx390_curclass, "$!pos"
    lt $I11, 0, rx390_fail1155
    repr_get_attr_int rx390_pos, $P11, rx390_curclass, "$!pos"
    rx390_cur."!cursor_pass"(rx390_pos, "statement_mod_cond:sym<unless>", 'backtrack'=>1)
    .return (rx390_cur)
  rx390_restart1154:
    repr_get_attr_obj rx390_cstack, rx390_cur, rx390_curclass, "$!cstack"
  rx390_fail1155:
    unless rx390_bstack, rx390_done1153
    pop $I19, rx390_bstack
    if_null rx390_cstack, rx390_cstack_done1158
    unless rx390_cstack, rx390_cstack_done1158
    dec $I19
    set $P11, rx390_cstack[$I19]
  rx390_cstack_done1158:
    pop rx390_rep, rx390_bstack
    pop rx390_pos, rx390_bstack
    pop $I19, rx390_bstack
    lt rx390_pos, -1, rx390_done1153
    lt rx390_pos, 0, rx390_fail1155
    eq $I19, 0, rx390_fail1155
    nqp_islist $I20, rx390_cstack
    unless $I20, rx390_jump1156
    elements $I18, rx390_bstack
    le $I18, 0, rx390_cut1157
    dec $I18
    set $I18, rx390_bstack[$I18]
  rx390_cut1157:
    assign rx390_cstack, $I18
  rx390_jump1156:
    jump $I19
  rx390_done1153:
    rx390_cur."!cursor_fail"()
    .return (rx390_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_77_1347804164.33_caps" :subid("cuid_memo_90_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_77_1347804164.33_nfa" :subid("cuid_memo_91_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 117
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 110
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 108
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 101
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 115
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 115
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 0
    push $P5027, $P5028
    box $P5029, 0
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop" :subid("cuid_78_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 870
    .param pmc self 
    $P5001 = self."!protoregex"("statement_mod_loop")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_79_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 872
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx396_tgt
    .local int rx396_pos
    .local int rx396_off
    .local int rx396_eos
    .local int rx396_rep
    .local pmc rx396_cur
    .local pmc rx396_curclass
    .local pmc rx396_bstack
    .local pmc rx396_cstack
    (rx396_cur, rx396_tgt, rx396_pos, rx396_curclass, rx396_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx396_cur
    length rx396_eos, rx396_tgt
    eq $I19, 1, rx396_restart1169
    gt rx396_pos, rx396_eos, rx396_fail1170
    repr_get_attr_int $I11, self, rx396_curclass, "$!from"
    ne $I11, -1, rxscan397_done1176
    goto rxscan397_scan1175
  rxscan397_loop1174:
    inc rx396_pos
    gt rx396_pos, rx396_eos, rx396_fail1170
    repr_bind_attr_int rx396_cur, rx396_curclass, "$!from", rx396_pos
  rxscan397_scan1175:
    nqp_rxmark rx396_bstack, rxscan397_loop1174, rx396_pos, 0
  rxscan397_done1176:
    nqp_rxmark rx396_bstack, rxcap398_fail1178, rx396_pos, 0
    add $I11, rx396_pos, 5
    gt $I11, rx396_eos, rx396_fail1170
    substr $S10, rx396_tgt, rx396_pos, 5
    ne $S10, ucs4:"while", rx396_fail1170
    add rx396_pos, 5
    nqp_rxpeek $I19, rx396_bstack, rxcap398_fail1178
    inc $I19
    set $I11, rx396_bstack[$I19]
    $P11 = rx396_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx396_pos)
    rx396_cstack = rx396_cur."!cursor_capture"($P11, "sym")
    goto rxcap398_done1177
  rxcap398_fail1178:
    goto rx396_fail1170
  rxcap398_done1177:
    repr_bind_attr_int rx396_cur, rx396_curclass, "$!pos", rx396_pos
    $P11 = rx396_cur."ws"()
    repr_get_attr_int $I11, $P11, rx396_curclass, "$!pos"
    lt $I11, 0, rx396_fail1170
    repr_get_attr_int rx396_pos, $P11, rx396_curclass, "$!pos"
    repr_bind_attr_int rx396_cur, rx396_curclass, "$!pos", rx396_pos
    $P11 = rx396_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx396_curclass, "$!pos"
    lt $I11, 0, rx396_fail1170
    nqp_rxmark rx396_bstack, rxsubrule400_pass1180, -1, 0
  rxsubrule400_pass1180:
    rx396_cstack = rx396_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx396_pos, $P11, rx396_curclass, "$!pos"
    repr_bind_attr_int rx396_cur, rx396_curclass, "$!pos", rx396_pos
    $P11 = rx396_cur."ws"()
    repr_get_attr_int $I11, $P11, rx396_curclass, "$!pos"
    lt $I11, 0, rx396_fail1170
    repr_get_attr_int rx396_pos, $P11, rx396_curclass, "$!pos"
    rx396_cur."!cursor_pass"(rx396_pos, "statement_mod_loop:sym<while>", 'backtrack'=>1)
    .return (rx396_cur)
  rx396_restart1169:
    repr_get_attr_obj rx396_cstack, rx396_cur, rx396_curclass, "$!cstack"
  rx396_fail1170:
    unless rx396_bstack, rx396_done1168
    pop $I19, rx396_bstack
    if_null rx396_cstack, rx396_cstack_done1173
    unless rx396_cstack, rx396_cstack_done1173
    dec $I19
    set $P11, rx396_cstack[$I19]
  rx396_cstack_done1173:
    pop rx396_rep, rx396_bstack
    pop rx396_pos, rx396_bstack
    pop $I19, rx396_bstack
    lt rx396_pos, -1, rx396_done1168
    lt rx396_pos, 0, rx396_fail1170
    eq $I19, 0, rx396_fail1170
    nqp_islist $I20, rx396_cstack
    unless $I20, rx396_jump1171
    elements $I18, rx396_bstack
    le $I18, 0, rx396_cut1172
    dec $I18
    set $I18, rx396_bstack[$I18]
  rx396_cut1172:
    assign rx396_cstack, $I18
  rx396_jump1171:
    jump $I19
  rx396_done1168:
    rx396_cur."!cursor_fail"()
    .return (rx396_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_79_1347804164.33_caps" :subid("cuid_memo_92_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_79_1347804164.33_nfa" :subid("cuid_memo_93_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 119
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 104
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 105
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 108
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 101
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_80_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 873
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx402_tgt
    .local int rx402_pos
    .local int rx402_off
    .local int rx402_eos
    .local int rx402_rep
    .local pmc rx402_cur
    .local pmc rx402_curclass
    .local pmc rx402_bstack
    .local pmc rx402_cstack
    (rx402_cur, rx402_tgt, rx402_pos, rx402_curclass, rx402_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx402_cur
    length rx402_eos, rx402_tgt
    eq $I19, 1, rx402_restart1184
    gt rx402_pos, rx402_eos, rx402_fail1185
    repr_get_attr_int $I11, self, rx402_curclass, "$!from"
    ne $I11, -1, rxscan403_done1191
    goto rxscan403_scan1190
  rxscan403_loop1189:
    inc rx402_pos
    gt rx402_pos, rx402_eos, rx402_fail1185
    repr_bind_attr_int rx402_cur, rx402_curclass, "$!from", rx402_pos
  rxscan403_scan1190:
    nqp_rxmark rx402_bstack, rxscan403_loop1189, rx402_pos, 0
  rxscan403_done1191:
    nqp_rxmark rx402_bstack, rxcap404_fail1193, rx402_pos, 0
    add $I11, rx402_pos, 5
    gt $I11, rx402_eos, rx402_fail1185
    substr $S10, rx402_tgt, rx402_pos, 5
    ne $S10, ucs4:"until", rx402_fail1185
    add rx402_pos, 5
    nqp_rxpeek $I19, rx402_bstack, rxcap404_fail1193
    inc $I19
    set $I11, rx402_bstack[$I19]
    $P11 = rx402_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx402_pos)
    rx402_cstack = rx402_cur."!cursor_capture"($P11, "sym")
    goto rxcap404_done1192
  rxcap404_fail1193:
    goto rx402_fail1185
  rxcap404_done1192:
    repr_bind_attr_int rx402_cur, rx402_curclass, "$!pos", rx402_pos
    $P11 = rx402_cur."ws"()
    repr_get_attr_int $I11, $P11, rx402_curclass, "$!pos"
    lt $I11, 0, rx402_fail1185
    repr_get_attr_int rx402_pos, $P11, rx402_curclass, "$!pos"
    repr_bind_attr_int rx402_cur, rx402_curclass, "$!pos", rx402_pos
    $P11 = rx402_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx402_curclass, "$!pos"
    lt $I11, 0, rx402_fail1185
    nqp_rxmark rx402_bstack, rxsubrule406_pass1195, -1, 0
  rxsubrule406_pass1195:
    rx402_cstack = rx402_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx402_pos, $P11, rx402_curclass, "$!pos"
    repr_bind_attr_int rx402_cur, rx402_curclass, "$!pos", rx402_pos
    $P11 = rx402_cur."ws"()
    repr_get_attr_int $I11, $P11, rx402_curclass, "$!pos"
    lt $I11, 0, rx402_fail1185
    repr_get_attr_int rx402_pos, $P11, rx402_curclass, "$!pos"
    rx402_cur."!cursor_pass"(rx402_pos, "statement_mod_loop:sym<until>", 'backtrack'=>1)
    .return (rx402_cur)
  rx402_restart1184:
    repr_get_attr_obj rx402_cstack, rx402_cur, rx402_curclass, "$!cstack"
  rx402_fail1185:
    unless rx402_bstack, rx402_done1183
    pop $I19, rx402_bstack
    if_null rx402_cstack, rx402_cstack_done1188
    unless rx402_cstack, rx402_cstack_done1188
    dec $I19
    set $P11, rx402_cstack[$I19]
  rx402_cstack_done1188:
    pop rx402_rep, rx402_bstack
    pop rx402_pos, rx402_bstack
    pop $I19, rx402_bstack
    lt rx402_pos, -1, rx402_done1183
    lt rx402_pos, 0, rx402_fail1185
    eq $I19, 0, rx402_fail1185
    nqp_islist $I20, rx402_cstack
    unless $I20, rx402_jump1186
    elements $I18, rx402_bstack
    le $I18, 0, rx402_cut1187
    dec $I18
    set $I18, rx402_bstack[$I18]
  rx402_cut1187:
    assign rx402_cstack, $I18
  rx402_jump1186:
    jump $I19
  rx402_done1183:
    rx402_cur."!cursor_fail"()
    .return (rx402_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_80_1347804164.33_caps" :subid("cuid_memo_94_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_80_1347804164.33_nfa" :subid("cuid_memo_95_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 117
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 110
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 116
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 105
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 108
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 0
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<for>" :subid("cuid_81_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 874
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx408_tgt
    .local int rx408_pos
    .local int rx408_off
    .local int rx408_eos
    .local int rx408_rep
    .local pmc rx408_cur
    .local pmc rx408_curclass
    .local pmc rx408_bstack
    .local pmc rx408_cstack
    (rx408_cur, rx408_tgt, rx408_pos, rx408_curclass, rx408_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx408_cur
    length rx408_eos, rx408_tgt
    eq $I19, 1, rx408_restart1199
    gt rx408_pos, rx408_eos, rx408_fail1200
    repr_get_attr_int $I11, self, rx408_curclass, "$!from"
    ne $I11, -1, rxscan409_done1206
    goto rxscan409_scan1205
  rxscan409_loop1204:
    inc rx408_pos
    gt rx408_pos, rx408_eos, rx408_fail1200
    repr_bind_attr_int rx408_cur, rx408_curclass, "$!from", rx408_pos
  rxscan409_scan1205:
    nqp_rxmark rx408_bstack, rxscan409_loop1204, rx408_pos, 0
  rxscan409_done1206:
    nqp_rxmark rx408_bstack, rxcap410_fail1208, rx408_pos, 0
    add $I11, rx408_pos, 3
    gt $I11, rx408_eos, rx408_fail1200
    substr $S10, rx408_tgt, rx408_pos, 3
    ne $S10, ucs4:"for", rx408_fail1200
    add rx408_pos, 3
    nqp_rxpeek $I19, rx408_bstack, rxcap410_fail1208
    inc $I19
    set $I11, rx408_bstack[$I19]
    $P11 = rx408_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx408_pos)
    rx408_cstack = rx408_cur."!cursor_capture"($P11, "sym")
    goto rxcap410_done1207
  rxcap410_fail1208:
    goto rx408_fail1200
  rxcap410_done1207:
    repr_bind_attr_int rx408_cur, rx408_curclass, "$!pos", rx408_pos
    $P11 = rx408_cur."ws"()
    repr_get_attr_int $I11, $P11, rx408_curclass, "$!pos"
    lt $I11, 0, rx408_fail1200
    repr_get_attr_int rx408_pos, $P11, rx408_curclass, "$!pos"
    repr_bind_attr_int rx408_cur, rx408_curclass, "$!pos", rx408_pos
    $P11 = rx408_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx408_curclass, "$!pos"
    lt $I11, 0, rx408_fail1200
    nqp_rxmark rx408_bstack, rxsubrule412_pass1210, -1, 0
  rxsubrule412_pass1210:
    rx408_cstack = rx408_cur."!cursor_capture"($P11, "cond")
    repr_get_attr_int rx408_pos, $P11, rx408_curclass, "$!pos"
    repr_bind_attr_int rx408_cur, rx408_curclass, "$!pos", rx408_pos
    $P11 = rx408_cur."ws"()
    repr_get_attr_int $I11, $P11, rx408_curclass, "$!pos"
    lt $I11, 0, rx408_fail1200
    repr_get_attr_int rx408_pos, $P11, rx408_curclass, "$!pos"
    rx408_cur."!cursor_pass"(rx408_pos, "statement_mod_loop:sym<for>", 'backtrack'=>1)
    .return (rx408_cur)
  rx408_restart1199:
    repr_get_attr_obj rx408_cstack, rx408_cur, rx408_curclass, "$!cstack"
  rx408_fail1200:
    unless rx408_bstack, rx408_done1198
    pop $I19, rx408_bstack
    if_null rx408_cstack, rx408_cstack_done1203
    unless rx408_cstack, rx408_cstack_done1203
    dec $I19
    set $P11, rx408_cstack[$I19]
  rx408_cstack_done1203:
    pop rx408_rep, rx408_bstack
    pop rx408_pos, rx408_bstack
    pop $I19, rx408_bstack
    lt rx408_pos, -1, rx408_done1198
    lt rx408_pos, 0, rx408_fail1200
    eq $I19, 0, rx408_fail1200
    nqp_islist $I20, rx408_cstack
    unless $I20, rx408_jump1201
    elements $I18, rx408_bstack
    le $I18, 0, rx408_cut1202
    dec $I18
    set $I18, rx408_bstack[$I18]
  rx408_cut1202:
    assign rx408_cstack, $I18
  rx408_jump1201:
    jump $I19
  rx408_done1198:
    rx408_cur."!cursor_fail"()
    .return (rx408_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_81_1347804164.33_caps" :subid("cuid_memo_96_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["cond"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_81_1347804164.33_nfa" :subid("cuid_memo_97_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 102
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 111
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_82_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 878
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx414_tgt
    .local int rx414_pos
    .local int rx414_off
    .local int rx414_eos
    .local int rx414_rep
    .local pmc rx414_cur
    .local pmc rx414_curclass
    .local pmc rx414_bstack
    .local pmc rx414_cstack
    (rx414_cur, rx414_tgt, rx414_pos, rx414_curclass, rx414_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx414_cur
    length rx414_eos, rx414_tgt
    eq $I19, 1, rx414_restart1214
    gt rx414_pos, rx414_eos, rx414_fail1215
    repr_get_attr_int $I11, self, rx414_curclass, "$!from"
    ne $I11, -1, rxscan415_done1221
    goto rxscan415_scan1220
  rxscan415_loop1219:
    inc rx414_pos
    gt rx414_pos, rx414_eos, rx414_fail1215
    repr_bind_attr_int rx414_cur, rx414_curclass, "$!from", rx414_pos
  rxscan415_scan1220:
    nqp_rxmark rx414_bstack, rxscan415_loop1219, rx414_pos, 0
  rxscan415_done1221:
    repr_bind_attr_int rx414_cur, rx414_curclass, "$!pos", rx414_pos
    $P11 = rx414_cur."fatarrow"()
    repr_get_attr_int $I11, $P11, rx414_curclass, "$!pos"
    lt $I11, 0, rx414_fail1215
    nqp_rxmark rx414_bstack, rxsubrule416_pass1222, -1, 0
  rxsubrule416_pass1222:
    rx414_cstack = rx414_cur."!cursor_capture"($P11, "fatarrow")
    repr_get_attr_int rx414_pos, $P11, rx414_curclass, "$!pos"
    rx414_cur."!cursor_pass"(rx414_pos, "term:sym<fatarrow>", 'backtrack'=>1)
    .return (rx414_cur)
  rx414_restart1214:
    repr_get_attr_obj rx414_cstack, rx414_cur, rx414_curclass, "$!cstack"
  rx414_fail1215:
    unless rx414_bstack, rx414_done1213
    pop $I19, rx414_bstack
    if_null rx414_cstack, rx414_cstack_done1218
    unless rx414_cstack, rx414_cstack_done1218
    dec $I19
    set $P11, rx414_cstack[$I19]
  rx414_cstack_done1218:
    pop rx414_rep, rx414_bstack
    pop rx414_pos, rx414_bstack
    pop $I19, rx414_bstack
    lt rx414_pos, -1, rx414_done1213
    lt rx414_pos, 0, rx414_fail1215
    eq $I19, 0, rx414_fail1215
    nqp_islist $I20, rx414_cstack
    unless $I20, rx414_jump1216
    elements $I18, rx414_bstack
    le $I18, 0, rx414_cut1217
    dec $I18
    set $I18, rx414_bstack[$I18]
  rx414_cut1217:
    assign rx414_cstack, $I18
  rx414_jump1216:
    jump $I19
  rx414_done1213:
    rx414_cur."!cursor_fail"()
    .return (rx414_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_82_1347804164.33_caps" :subid("cuid_memo_98_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["fatarrow"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_82_1347804164.33_nfa" :subid("cuid_memo_99_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "fatarrow"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_83_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 879
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx417_tgt
    .local int rx417_pos
    .local int rx417_off
    .local int rx417_eos
    .local int rx417_rep
    .local pmc rx417_cur
    .local pmc rx417_curclass
    .local pmc rx417_bstack
    .local pmc rx417_cstack
    (rx417_cur, rx417_tgt, rx417_pos, rx417_curclass, rx417_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx417_cur
    length rx417_eos, rx417_tgt
    eq $I19, 1, rx417_restart1225
    gt rx417_pos, rx417_eos, rx417_fail1226
    repr_get_attr_int $I11, self, rx417_curclass, "$!from"
    ne $I11, -1, rxscan418_done1232
    goto rxscan418_scan1231
  rxscan418_loop1230:
    inc rx417_pos
    gt rx417_pos, rx417_eos, rx417_fail1226
    repr_bind_attr_int rx417_cur, rx417_curclass, "$!from", rx417_pos
  rxscan418_scan1231:
    nqp_rxmark rx417_bstack, rxscan418_loop1230, rx417_pos, 0
  rxscan418_done1232:
    repr_bind_attr_int rx417_cur, rx417_curclass, "$!pos", rx417_pos
    $P11 = rx417_cur."colonpair"()
    repr_get_attr_int $I11, $P11, rx417_curclass, "$!pos"
    lt $I11, 0, rx417_fail1226
    nqp_rxmark rx417_bstack, rxsubrule419_pass1233, -1, 0
  rxsubrule419_pass1233:
    rx417_cstack = rx417_cur."!cursor_capture"($P11, "colonpair")
    repr_get_attr_int rx417_pos, $P11, rx417_curclass, "$!pos"
    rx417_cur."!cursor_pass"(rx417_pos, "term:sym<colonpair>", 'backtrack'=>1)
    .return (rx417_cur)
  rx417_restart1225:
    repr_get_attr_obj rx417_cstack, rx417_cur, rx417_curclass, "$!cstack"
  rx417_fail1226:
    unless rx417_bstack, rx417_done1224
    pop $I19, rx417_bstack
    if_null rx417_cstack, rx417_cstack_done1229
    unless rx417_cstack, rx417_cstack_done1229
    dec $I19
    set $P11, rx417_cstack[$I19]
  rx417_cstack_done1229:
    pop rx417_rep, rx417_bstack
    pop rx417_pos, rx417_bstack
    pop $I19, rx417_bstack
    lt rx417_pos, -1, rx417_done1224
    lt rx417_pos, 0, rx417_fail1226
    eq $I19, 0, rx417_fail1226
    nqp_islist $I20, rx417_cstack
    unless $I20, rx417_jump1227
    elements $I18, rx417_bstack
    le $I18, 0, rx417_cut1228
    dec $I18
    set $I18, rx417_bstack[$I18]
  rx417_cut1228:
    assign rx417_cstack, $I18
  rx417_jump1227:
    jump $I19
  rx417_done1224:
    rx417_cur."!cursor_fail"()
    .return (rx417_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_83_1347804164.33_caps" :subid("cuid_memo_100_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["colonpair"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_83_1347804164.33_nfa" :subid("cuid_memo_101_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "colonpair"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_84_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 880
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx420_tgt
    .local int rx420_pos
    .local int rx420_off
    .local int rx420_eos
    .local int rx420_rep
    .local pmc rx420_cur
    .local pmc rx420_curclass
    .local pmc rx420_bstack
    .local pmc rx420_cstack
    (rx420_cur, rx420_tgt, rx420_pos, rx420_curclass, rx420_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx420_cur
    length rx420_eos, rx420_tgt
    eq $I19, 1, rx420_restart1236
    gt rx420_pos, rx420_eos, rx420_fail1237
    repr_get_attr_int $I11, self, rx420_curclass, "$!from"
    ne $I11, -1, rxscan421_done1243
    goto rxscan421_scan1242
  rxscan421_loop1241:
    inc rx420_pos
    gt rx420_pos, rx420_eos, rx420_fail1237
    repr_bind_attr_int rx420_cur, rx420_curclass, "$!from", rx420_pos
  rxscan421_scan1242:
    nqp_rxmark rx420_bstack, rxscan421_loop1241, rx420_pos, 0
  rxscan421_done1243:
    repr_bind_attr_int rx420_cur, rx420_curclass, "$!pos", rx420_pos
    $P11 = rx420_cur."variable"()
    repr_get_attr_int $I11, $P11, rx420_curclass, "$!pos"
    lt $I11, 0, rx420_fail1237
    nqp_rxmark rx420_bstack, rxsubrule422_pass1244, -1, 0
  rxsubrule422_pass1244:
    rx420_cstack = rx420_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx420_pos, $P11, rx420_curclass, "$!pos"
    rx420_cur."!cursor_pass"(rx420_pos, "term:sym<variable>", 'backtrack'=>1)
    .return (rx420_cur)
  rx420_restart1236:
    repr_get_attr_obj rx420_cstack, rx420_cur, rx420_curclass, "$!cstack"
  rx420_fail1237:
    unless rx420_bstack, rx420_done1235
    pop $I19, rx420_bstack
    if_null rx420_cstack, rx420_cstack_done1240
    unless rx420_cstack, rx420_cstack_done1240
    dec $I19
    set $P11, rx420_cstack[$I19]
  rx420_cstack_done1240:
    pop rx420_rep, rx420_bstack
    pop rx420_pos, rx420_bstack
    pop $I19, rx420_bstack
    lt rx420_pos, -1, rx420_done1235
    lt rx420_pos, 0, rx420_fail1237
    eq $I19, 0, rx420_fail1237
    nqp_islist $I20, rx420_cstack
    unless $I20, rx420_jump1238
    elements $I18, rx420_bstack
    le $I18, 0, rx420_cut1239
    dec $I18
    set $I18, rx420_bstack[$I18]
  rx420_cut1239:
    assign rx420_cstack, $I18
  rx420_jump1238:
    jump $I19
  rx420_done1235:
    rx420_cur."!cursor_fail"()
    .return (rx420_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_84_1347804164.33_caps" :subid("cuid_memo_102_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["variable"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_84_1347804164.33_nfa" :subid("cuid_memo_103_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "variable"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_85_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 881
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx423_tgt
    .local int rx423_pos
    .local int rx423_off
    .local int rx423_eos
    .local int rx423_rep
    .local pmc rx423_cur
    .local pmc rx423_curclass
    .local pmc rx423_bstack
    .local pmc rx423_cstack
    (rx423_cur, rx423_tgt, rx423_pos, rx423_curclass, rx423_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx423_cur
    length rx423_eos, rx423_tgt
    eq $I19, 1, rx423_restart1247
    gt rx423_pos, rx423_eos, rx423_fail1248
    repr_get_attr_int $I11, self, rx423_curclass, "$!from"
    ne $I11, -1, rxscan424_done1254
    goto rxscan424_scan1253
  rxscan424_loop1252:
    inc rx423_pos
    gt rx423_pos, rx423_eos, rx423_fail1248
    repr_bind_attr_int rx423_cur, rx423_curclass, "$!from", rx423_pos
  rxscan424_scan1253:
    nqp_rxmark rx423_bstack, rxscan424_loop1252, rx423_pos, 0
  rxscan424_done1254:
    repr_bind_attr_int rx423_cur, rx423_curclass, "$!pos", rx423_pos
    $P11 = rx423_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx423_curclass, "$!pos"
    lt $I11, 0, rx423_fail1248
    nqp_rxmark rx423_bstack, rxsubrule425_pass1255, -1, 0
  rxsubrule425_pass1255:
    rx423_cstack = rx423_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx423_pos, $P11, rx423_curclass, "$!pos"
    rx423_cur."!cursor_pass"(rx423_pos, "term:sym<package_declarator>", 'backtrack'=>1)
    .return (rx423_cur)
  rx423_restart1247:
    repr_get_attr_obj rx423_cstack, rx423_cur, rx423_curclass, "$!cstack"
  rx423_fail1248:
    unless rx423_bstack, rx423_done1246
    pop $I19, rx423_bstack
    if_null rx423_cstack, rx423_cstack_done1251
    unless rx423_cstack, rx423_cstack_done1251
    dec $I19
    set $P11, rx423_cstack[$I19]
  rx423_cstack_done1251:
    pop rx423_rep, rx423_bstack
    pop rx423_pos, rx423_bstack
    pop $I19, rx423_bstack
    lt rx423_pos, -1, rx423_done1246
    lt rx423_pos, 0, rx423_fail1248
    eq $I19, 0, rx423_fail1248
    nqp_islist $I20, rx423_cstack
    unless $I20, rx423_jump1249
    elements $I18, rx423_bstack
    le $I18, 0, rx423_cut1250
    dec $I18
    set $I18, rx423_bstack[$I18]
  rx423_cut1250:
    assign rx423_cstack, $I18
  rx423_jump1249:
    jump $I19
  rx423_done1246:
    rx423_cur."!cursor_fail"()
    .return (rx423_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_85_1347804164.33_caps" :subid("cuid_memo_104_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["package_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_85_1347804164.33_nfa" :subid("cuid_memo_105_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "package_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_86_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 882
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx426_tgt
    .local int rx426_pos
    .local int rx426_off
    .local int rx426_eos
    .local int rx426_rep
    .local pmc rx426_cur
    .local pmc rx426_curclass
    .local pmc rx426_bstack
    .local pmc rx426_cstack
    (rx426_cur, rx426_tgt, rx426_pos, rx426_curclass, rx426_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx426_cur
    length rx426_eos, rx426_tgt
    eq $I19, 1, rx426_restart1258
    gt rx426_pos, rx426_eos, rx426_fail1259
    repr_get_attr_int $I11, self, rx426_curclass, "$!from"
    ne $I11, -1, rxscan427_done1265
    goto rxscan427_scan1264
  rxscan427_loop1263:
    inc rx426_pos
    gt rx426_pos, rx426_eos, rx426_fail1259
    repr_bind_attr_int rx426_cur, rx426_curclass, "$!from", rx426_pos
  rxscan427_scan1264:
    nqp_rxmark rx426_bstack, rxscan427_loop1263, rx426_pos, 0
  rxscan427_done1265:
    repr_bind_attr_int rx426_cur, rx426_curclass, "$!pos", rx426_pos
    $P11 = rx426_cur."scope_declarator"()
    repr_get_attr_int $I11, $P11, rx426_curclass, "$!pos"
    lt $I11, 0, rx426_fail1259
    nqp_rxmark rx426_bstack, rxsubrule428_pass1266, -1, 0
  rxsubrule428_pass1266:
    rx426_cstack = rx426_cur."!cursor_capture"($P11, "scope_declarator")
    repr_get_attr_int rx426_pos, $P11, rx426_curclass, "$!pos"
    rx426_cur."!cursor_pass"(rx426_pos, "term:sym<scope_declarator>", 'backtrack'=>1)
    .return (rx426_cur)
  rx426_restart1258:
    repr_get_attr_obj rx426_cstack, rx426_cur, rx426_curclass, "$!cstack"
  rx426_fail1259:
    unless rx426_bstack, rx426_done1257
    pop $I19, rx426_bstack
    if_null rx426_cstack, rx426_cstack_done1262
    unless rx426_cstack, rx426_cstack_done1262
    dec $I19
    set $P11, rx426_cstack[$I19]
  rx426_cstack_done1262:
    pop rx426_rep, rx426_bstack
    pop rx426_pos, rx426_bstack
    pop $I19, rx426_bstack
    lt rx426_pos, -1, rx426_done1257
    lt rx426_pos, 0, rx426_fail1259
    eq $I19, 0, rx426_fail1259
    nqp_islist $I20, rx426_cstack
    unless $I20, rx426_jump1260
    elements $I18, rx426_bstack
    le $I18, 0, rx426_cut1261
    dec $I18
    set $I18, rx426_bstack[$I18]
  rx426_cut1261:
    assign rx426_cstack, $I18
  rx426_jump1260:
    jump $I19
  rx426_done1257:
    rx426_cur."!cursor_fail"()
    .return (rx426_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_86_1347804164.33_caps" :subid("cuid_memo_106_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["scope_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_86_1347804164.33_nfa" :subid("cuid_memo_107_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "scope_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_87_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 883
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx429_tgt
    .local int rx429_pos
    .local int rx429_off
    .local int rx429_eos
    .local int rx429_rep
    .local pmc rx429_cur
    .local pmc rx429_curclass
    .local pmc rx429_bstack
    .local pmc rx429_cstack
    (rx429_cur, rx429_tgt, rx429_pos, rx429_curclass, rx429_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx429_cur
    length rx429_eos, rx429_tgt
    eq $I19, 1, rx429_restart1269
    gt rx429_pos, rx429_eos, rx429_fail1270
    repr_get_attr_int $I11, self, rx429_curclass, "$!from"
    ne $I11, -1, rxscan430_done1276
    goto rxscan430_scan1275
  rxscan430_loop1274:
    inc rx429_pos
    gt rx429_pos, rx429_eos, rx429_fail1270
    repr_bind_attr_int rx429_cur, rx429_curclass, "$!from", rx429_pos
  rxscan430_scan1275:
    nqp_rxmark rx429_bstack, rxscan430_loop1274, rx429_pos, 0
  rxscan430_done1276:
    repr_bind_attr_int rx429_cur, rx429_curclass, "$!pos", rx429_pos
    $P11 = rx429_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx429_curclass, "$!pos"
    lt $I11, 0, rx429_fail1270
    nqp_rxmark rx429_bstack, rxsubrule431_pass1277, -1, 0
  rxsubrule431_pass1277:
    rx429_cstack = rx429_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx429_pos, $P11, rx429_curclass, "$!pos"
    rx429_cur."!cursor_pass"(rx429_pos, "term:sym<routine_declarator>", 'backtrack'=>1)
    .return (rx429_cur)
  rx429_restart1269:
    repr_get_attr_obj rx429_cstack, rx429_cur, rx429_curclass, "$!cstack"
  rx429_fail1270:
    unless rx429_bstack, rx429_done1268
    pop $I19, rx429_bstack
    if_null rx429_cstack, rx429_cstack_done1273
    unless rx429_cstack, rx429_cstack_done1273
    dec $I19
    set $P11, rx429_cstack[$I19]
  rx429_cstack_done1273:
    pop rx429_rep, rx429_bstack
    pop rx429_pos, rx429_bstack
    pop $I19, rx429_bstack
    lt rx429_pos, -1, rx429_done1268
    lt rx429_pos, 0, rx429_fail1270
    eq $I19, 0, rx429_fail1270
    nqp_islist $I20, rx429_cstack
    unless $I20, rx429_jump1271
    elements $I18, rx429_bstack
    le $I18, 0, rx429_cut1272
    dec $I18
    set $I18, rx429_bstack[$I18]
  rx429_cut1272:
    assign rx429_cstack, $I18
  rx429_jump1271:
    jump $I19
  rx429_done1268:
    rx429_cur."!cursor_fail"()
    .return (rx429_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_87_1347804164.33_caps" :subid("cuid_memo_108_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["routine_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_87_1347804164.33_nfa" :subid("cuid_memo_109_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "routine_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_90_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 884
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_88_1347804164.33' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_89_1347804164.33' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx432_tgt
    .local int rx432_pos
    .local int rx432_off
    .local int rx432_eos
    .local int rx432_rep
    .local pmc rx432_cur
    .local pmc rx432_curclass
    .local pmc rx432_bstack
    .local pmc rx432_cstack
    (rx432_cur, rx432_tgt, rx432_pos, rx432_curclass, rx432_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx432_cur
    length rx432_eos, rx432_tgt
    eq $I19, 1, rx432_restart1280
    gt rx432_pos, rx432_eos, rx432_fail1281
    repr_get_attr_int $I11, self, rx432_curclass, "$!from"
    ne $I11, -1, rxscan433_done1287
    goto rxscan433_scan1286
  rxscan433_loop1285:
    inc rx432_pos
    gt rx432_pos, rx432_eos, rx432_fail1281
    repr_bind_attr_int rx432_cur, rx432_curclass, "$!from", rx432_pos
  rxscan433_scan1286:
    nqp_rxmark rx432_bstack, rxscan433_loop1285, rx432_pos, 0
  rxscan433_done1287:
    .const 'Sub' $P5001 = 'cuid_88_1347804164.33' 
    capture_lex $P5001
    repr_bind_attr_int rx432_cur, rx432_curclass, "$!pos", rx432_pos
    $P11 = rx432_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx432_curclass, "$!pos"
    lt $I11, 0, rx432_fail1281
    .const 'Sub' $P5002 = 'cuid_89_1347804164.33' 
    capture_lex $P5002
    repr_bind_attr_int rx432_cur, rx432_curclass, "$!pos", rx432_pos
    $P11 = rx432_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx432_curclass, "$!pos"
    ge $I11, 0, rx432_fail1281
    repr_bind_attr_int rx432_cur, rx432_curclass, "$!pos", rx432_pos
    $P11 = rx432_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx432_curclass, "$!pos"
    lt $I11, 0, rx432_fail1281
    nqp_rxmark rx432_bstack, rxsubrule441_pass1317, -1, 0
  rxsubrule441_pass1317:
    rx432_cstack = rx432_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx432_pos, $P11, rx432_curclass, "$!pos"
    rx432_cur."!cursor_pass"(rx432_pos, "term:sym<multi_declarator>", 'backtrack'=>1)
    .return (rx432_cur)
  rx432_restart1280:
    repr_get_attr_obj rx432_cstack, rx432_cur, rx432_curclass, "$!cstack"
  rx432_fail1281:
    unless rx432_bstack, rx432_done1279
    pop $I19, rx432_bstack
    if_null rx432_cstack, rx432_cstack_done1284
    unless rx432_cstack, rx432_cstack_done1284
    dec $I19
    set $P11, rx432_cstack[$I19]
  rx432_cstack_done1284:
    pop rx432_rep, rx432_bstack
    pop rx432_pos, rx432_bstack
    pop $I19, rx432_bstack
    lt rx432_pos, -1, rx432_done1279
    lt rx432_pos, 0, rx432_fail1281
    eq $I19, 0, rx432_fail1281
    nqp_islist $I20, rx432_cstack
    unless $I20, rx432_jump1282
    elements $I18, rx432_bstack
    le $I18, 0, rx432_cut1283
    dec $I18
    set $I18, rx432_bstack[$I18]
  rx432_cut1283:
    assign rx432_cstack, $I18
  rx432_jump1282:
    jump $I19
  rx432_done1279:
    rx432_cur."!cursor_fail"()
    .return (rx432_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_90_1347804164.33_caps" :subid("cuid_memo_110_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["multi_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_90_1347804164.33_nfa" :subid("cuid_memo_111_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 3
    push $P5003, $P5006
    box $P5007, 2
    push $P5003, $P5007
    box $P5008, 112
    push $P5003, $P5008
    box $P5009, 7
    push $P5003, $P5009
    box $P5010, 2
    push $P5003, $P5010
    box $P5011, 111
    push $P5003, $P5011
    box $P5012, 11
    push $P5003, $P5012
    push $P5001, $P5003
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    push $P5001, $P5013
    new $P5017, 'ResizablePMCArray'
    box $P5018, 2
    push $P5017, $P5018
    box $P5019, 117
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    push $P5001, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 108
    push $P5021, $P5023
    box $P5024, 5
    push $P5021, $P5024
    push $P5001, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 2
    push $P5025, $P5026
    box $P5027, 116
    push $P5025, $P5027
    box $P5028, 6
    push $P5025, $P5028
    push $P5001, $P5025
    new $P5029, 'ResizablePMCArray'
    box $P5030, 2
    push $P5029, $P5030
    box $P5031, 105
    push $P5029, $P5031
    box $P5032, 2
    push $P5029, $P5032
    push $P5001, $P5029
    new $P5033, 'ResizablePMCArray'
    box $P5034, 2
    push $P5033, $P5034
    box $P5035, 114
    push $P5033, $P5035
    box $P5036, 8
    push $P5033, $P5036
    push $P5001, $P5033
    new $P5037, 'ResizablePMCArray'
    box $P5038, 2
    push $P5037, $P5038
    box $P5039, 111
    push $P5037, $P5039
    box $P5040, 9
    push $P5037, $P5040
    push $P5001, $P5037
    new $P5041, 'ResizablePMCArray'
    box $P5042, 2
    push $P5041, $P5042
    box $P5043, 116
    push $P5041, $P5043
    box $P5044, 10
    push $P5041, $P5044
    push $P5001, $P5041
    new $P5045, 'ResizablePMCArray'
    box $P5046, 2
    push $P5045, $P5046
    box $P5047, 111
    push $P5045, $P5047
    box $P5048, 2
    push $P5045, $P5048
    push $P5001, $P5045
    new $P5049, 'ResizablePMCArray'
    box $P5050, 2
    push $P5049, $P5050
    box $P5051, 110
    push $P5049, $P5051
    box $P5052, 12
    push $P5049, $P5052
    push $P5001, $P5049
    new $P5053, 'ResizablePMCArray'
    box $P5054, 2
    push $P5053, $P5054
    box $P5055, 108
    push $P5053, $P5055
    box $P5056, 13
    push $P5053, $P5056
    push $P5001, $P5053
    new $P5057, 'ResizablePMCArray'
    box $P5058, 2
    push $P5057, $P5058
    box $P5059, 121
    push $P5057, $P5059
    box $P5060, 2
    push $P5057, $P5060
    push $P5001, $P5057
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_88_1347804164.33") :anon :lex :outer("cuid_90_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx434_tgt
    .local int rx434_pos
    .local int rx434_off
    .local int rx434_eos
    .local int rx434_rep
    .local pmc rx434_cur
    .local pmc rx434_curclass
    .local pmc rx434_bstack
    .local pmc rx434_cstack
    (rx434_cur, rx434_tgt, rx434_pos, rx434_curclass, rx434_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx434_cur
    length rx434_eos, rx434_tgt
    eq $I19, 1, rx434_restart1290
    gt rx434_pos, rx434_eos, rx434_fail1291
    repr_get_attr_int $I11, self, rx434_curclass, "$!from"
    ne $I11, -1, rxscan435_done1297
    goto rxscan435_scan1296
  rxscan435_loop1295:
    inc rx434_pos
    gt rx434_pos, rx434_eos, rx434_fail1291
    repr_bind_attr_int rx434_cur, rx434_curclass, "$!from", rx434_pos
  rxscan435_scan1296:
    nqp_rxmark rx434_bstack, rxscan435_loop1295, rx434_pos, 0
  rxscan435_done1297:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt436_01299
    nqp_push_label $P11, alt436_11300
    nqp_push_label $P11, alt436_21301
    nqp_rxmark rx434_bstack, alt436_end1298, -1, 0
    rx434_cur."!alt"(rx434_pos, "alt_nfa__17_1347804166.076", $P11)
    goto rx434_fail1291
  alt436_01299:
    add $I11, rx434_pos, 5
    gt $I11, rx434_eos, rx434_fail1291
    substr $S10, rx434_tgt, rx434_pos, 5
    ne $S10, ucs4:"multi", rx434_fail1291
    add rx434_pos, 5
    goto alt436_end1298
  alt436_11300:
    add $I11, rx434_pos, 5
    gt $I11, rx434_eos, rx434_fail1291
    substr $S10, rx434_tgt, rx434_pos, 5
    ne $S10, ucs4:"proto", rx434_fail1291
    add rx434_pos, 5
    goto alt436_end1298
  alt436_21301:
    add $I11, rx434_pos, 4
    gt $I11, rx434_eos, rx434_fail1291
    substr $S10, rx434_tgt, rx434_pos, 4
    ne $S10, ucs4:"only", rx434_fail1291
    add rx434_pos, 4
    goto alt436_end1298
  alt436_end1298:
    rx434_cur."!cursor_pass"(rx434_pos, 'backtrack'=>1)
    .return (rx434_cur)
  rx434_restart1290:
    repr_get_attr_obj rx434_cstack, rx434_cur, rx434_curclass, "$!cstack"
  rx434_fail1291:
    unless rx434_bstack, rx434_done1289
    pop $I19, rx434_bstack
    if_null rx434_cstack, rx434_cstack_done1294
    unless rx434_cstack, rx434_cstack_done1294
    dec $I19
    set $P11, rx434_cstack[$I19]
  rx434_cstack_done1294:
    pop rx434_rep, rx434_bstack
    pop rx434_pos, rx434_bstack
    pop $I19, rx434_bstack
    lt rx434_pos, -1, rx434_done1289
    lt rx434_pos, 0, rx434_fail1291
    eq $I19, 0, rx434_fail1291
    nqp_islist $I20, rx434_cstack
    unless $I20, rx434_jump1292
    elements $I18, rx434_bstack
    le $I18, 0, rx434_cut1293
    dec $I18
    set $I18, rx434_bstack[$I18]
  rx434_cut1293:
    assign rx434_cstack, $I18
  rx434_jump1292:
    jump $I19
  rx434_done1289:
    rx434_cur."!cursor_fail"()
    .return (rx434_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_88_1347804164.33_caps" :subid("cuid_memo_112_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_88_1347804164.33_nfa" :subid("cuid_memo_113_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 2
    push $P5003, $P5007
    box $P5008, 112
    push $P5003, $P5008
    box $P5009, 6
    push $P5003, $P5009
    box $P5010, 2
    push $P5003, $P5010
    box $P5011, 111
    push $P5003, $P5011
    box $P5012, 10
    push $P5003, $P5012
    push $P5001, $P5003
    new $P5013, 'ResizablePMCArray'
    box $P5014, 2
    push $P5013, $P5014
    box $P5015, 117
    push $P5013, $P5015
    box $P5016, 3
    push $P5013, $P5016
    push $P5001, $P5013
    new $P5017, 'ResizablePMCArray'
    box $P5018, 2
    push $P5017, $P5018
    box $P5019, 108
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    push $P5001, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 116
    push $P5021, $P5023
    box $P5024, 5
    push $P5021, $P5024
    push $P5001, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 2
    push $P5025, $P5026
    box $P5027, 105
    push $P5025, $P5027
    box $P5028, 0
    push $P5025, $P5028
    push $P5001, $P5025
    new $P5029, 'ResizablePMCArray'
    box $P5030, 2
    push $P5029, $P5030
    box $P5031, 114
    push $P5029, $P5031
    box $P5032, 7
    push $P5029, $P5032
    push $P5001, $P5029
    new $P5033, 'ResizablePMCArray'
    box $P5034, 2
    push $P5033, $P5034
    box $P5035, 111
    push $P5033, $P5035
    box $P5036, 8
    push $P5033, $P5036
    push $P5001, $P5033
    new $P5037, 'ResizablePMCArray'
    box $P5038, 2
    push $P5037, $P5038
    box $P5039, 116
    push $P5037, $P5039
    box $P5040, 9
    push $P5037, $P5040
    push $P5001, $P5037
    new $P5041, 'ResizablePMCArray'
    box $P5042, 2
    push $P5041, $P5042
    box $P5043, 111
    push $P5041, $P5043
    box $P5044, 0
    push $P5041, $P5044
    push $P5001, $P5041
    new $P5045, 'ResizablePMCArray'
    box $P5046, 2
    push $P5045, $P5046
    box $P5047, 110
    push $P5045, $P5047
    box $P5048, 11
    push $P5045, $P5048
    push $P5001, $P5045
    new $P5049, 'ResizablePMCArray'
    box $P5050, 2
    push $P5049, $P5050
    box $P5051, 108
    push $P5049, $P5051
    box $P5052, 12
    push $P5049, $P5052
    push $P5001, $P5049
    new $P5053, 'ResizablePMCArray'
    box $P5054, 2
    push $P5053, $P5054
    box $P5055, 121
    push $P5053, $P5055
    box $P5056, 0
    push $P5053, $P5056
    push $P5001, $P5053
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_88_1347804164.33_alt_nfa__17_1347804166.076" :subid("cuid_memo_114_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 109
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 117
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 108
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 116
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 105
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 112
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 114
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 111
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 116
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 111
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 2
    push $P5048, $P5049
    box $P5050, 111
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 2
    push $P5052, $P5053
    box $P5054, 110
    push $P5052, $P5054
    box $P5055, 3
    push $P5052, $P5055
    push $P5046, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 2
    push $P5056, $P5057
    box $P5058, 108
    push $P5056, $P5058
    box $P5059, 4
    push $P5056, $P5059
    push $P5046, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 2
    push $P5060, $P5061
    box $P5062, 121
    push $P5060, $P5062
    box $P5063, 0
    push $P5060, $P5063
    push $P5046, $P5060
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_89_1347804164.33") :anon :lex :outer("cuid_90_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx437_tgt
    .local int rx437_pos
    .local int rx437_off
    .local int rx437_eos
    .local int rx437_rep
    .local pmc rx437_cur
    .local pmc rx437_curclass
    .local pmc rx437_bstack
    .local pmc rx437_cstack
    (rx437_cur, rx437_tgt, rx437_pos, rx437_curclass, rx437_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx437_cur
    length rx437_eos, rx437_tgt
    eq $I19, 1, rx437_restart1304
    gt rx437_pos, rx437_eos, rx437_fail1305
    repr_get_attr_int $I11, self, rx437_curclass, "$!from"
    ne $I11, -1, rxscan438_done1311
    goto rxscan438_scan1310
  rxscan438_loop1309:
    inc rx437_pos
    gt rx437_pos, rx437_eos, rx437_fail1305
    repr_bind_attr_int rx437_cur, rx437_curclass, "$!from", rx437_pos
  rxscan438_scan1310:
    nqp_rxmark rx437_bstack, rxscan438_loop1309, rx437_pos, 0
  rxscan438_done1311:
    add $I11, rx437_pos, 5
    gt $I11, rx437_eos, rx437_fail1305
    substr $S10, rx437_tgt, rx437_pos, 5
    ne $S10, ucs4:"proto", rx437_fail1305
    add rx437_pos, 5
    repr_bind_attr_int rx437_cur, rx437_curclass, "$!pos", rx437_pos
    $P11 = rx437_cur."ws"()
    repr_get_attr_int $I11, $P11, rx437_curclass, "$!pos"
    lt $I11, 0, rx437_fail1305
    repr_get_attr_int rx437_pos, $P11, rx437_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt440_01314
    nqp_push_label $P11, alt440_11315
    nqp_push_label $P11, alt440_21316
    nqp_rxmark rx437_bstack, alt440_end1313, -1, 0
    rx437_cur."!alt"(rx437_pos, "alt_nfa__18_1347804166.086", $P11)
    goto rx437_fail1305
  alt440_01314:
    add $I11, rx437_pos, 5
    gt $I11, rx437_eos, rx437_fail1305
    substr $S10, rx437_tgt, rx437_pos, 5
    ne $S10, ucs4:"regex", rx437_fail1305
    add rx437_pos, 5
    goto alt440_end1313
  alt440_11315:
    add $I11, rx437_pos, 5
    gt $I11, rx437_eos, rx437_fail1305
    substr $S10, rx437_tgt, rx437_pos, 5
    ne $S10, ucs4:"token", rx437_fail1305
    add rx437_pos, 5
    goto alt440_end1313
  alt440_21316:
    add $I11, rx437_pos, 4
    gt $I11, rx437_eos, rx437_fail1305
    substr $S10, rx437_tgt, rx437_pos, 4
    ne $S10, ucs4:"rule", rx437_fail1305
    add rx437_pos, 4
    goto alt440_end1313
  alt440_end1313:
    nqp_rxcommit rx437_bstack, alt440_end1313
    rx437_cur."!cursor_pass"(rx437_pos, 'backtrack'=>1)
    .return (rx437_cur)
  rx437_restart1304:
    repr_get_attr_obj rx437_cstack, rx437_cur, rx437_curclass, "$!cstack"
  rx437_fail1305:
    unless rx437_bstack, rx437_done1303
    pop $I19, rx437_bstack
    if_null rx437_cstack, rx437_cstack_done1308
    unless rx437_cstack, rx437_cstack_done1308
    dec $I19
    set $P11, rx437_cstack[$I19]
  rx437_cstack_done1308:
    pop rx437_rep, rx437_bstack
    pop rx437_pos, rx437_bstack
    pop $I19, rx437_bstack
    lt rx437_pos, -1, rx437_done1303
    lt rx437_pos, 0, rx437_fail1305
    eq $I19, 0, rx437_fail1305
    nqp_islist $I20, rx437_cstack
    unless $I20, rx437_jump1306
    elements $I18, rx437_bstack
    le $I18, 0, rx437_cut1307
    dec $I18
    set $I18, rx437_bstack[$I18]
  rx437_cut1307:
    assign rx437_cstack, $I18
  rx437_jump1306:
    jump $I19
  rx437_done1303:
    rx437_cur."!cursor_fail"()
    .return (rx437_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_89_1347804164.33_caps" :subid("cuid_memo_115_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_89_1347804164.33_nfa" :subid("cuid_memo_116_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 112
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 114
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 111
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 116
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 111
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "ws"
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 114
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    box $P5031, 2
    push $P5027, $P5031
    box $P5032, 116
    push $P5027, $P5032
    box $P5033, 12
    push $P5027, $P5033
    box $P5034, 2
    push $P5027, $P5034
    box $P5035, 114
    push $P5027, $P5035
    box $P5036, 16
    push $P5027, $P5036
    push $P5001, $P5027
    new $P5037, 'ResizablePMCArray'
    box $P5038, 2
    push $P5037, $P5038
    box $P5039, 101
    push $P5037, $P5039
    box $P5040, 9
    push $P5037, $P5040
    push $P5001, $P5037
    new $P5041, 'ResizablePMCArray'
    box $P5042, 2
    push $P5041, $P5042
    box $P5043, 103
    push $P5041, $P5043
    box $P5044, 10
    push $P5041, $P5044
    push $P5001, $P5041
    new $P5045, 'ResizablePMCArray'
    box $P5046, 2
    push $P5045, $P5046
    box $P5047, 101
    push $P5045, $P5047
    box $P5048, 11
    push $P5045, $P5048
    push $P5001, $P5045
    new $P5049, 'ResizablePMCArray'
    box $P5050, 2
    push $P5049, $P5050
    box $P5051, 120
    push $P5049, $P5051
    box $P5052, 0
    push $P5049, $P5052
    push $P5001, $P5049
    new $P5053, 'ResizablePMCArray'
    box $P5054, 2
    push $P5053, $P5054
    box $P5055, 111
    push $P5053, $P5055
    box $P5056, 13
    push $P5053, $P5056
    push $P5001, $P5053
    new $P5057, 'ResizablePMCArray'
    box $P5058, 2
    push $P5057, $P5058
    box $P5059, 107
    push $P5057, $P5059
    box $P5060, 14
    push $P5057, $P5060
    push $P5001, $P5057
    new $P5061, 'ResizablePMCArray'
    box $P5062, 2
    push $P5061, $P5062
    box $P5063, 101
    push $P5061, $P5063
    box $P5064, 15
    push $P5061, $P5064
    push $P5001, $P5061
    new $P5065, 'ResizablePMCArray'
    box $P5066, 2
    push $P5065, $P5066
    box $P5067, 110
    push $P5065, $P5067
    box $P5068, 0
    push $P5065, $P5068
    push $P5001, $P5065
    new $P5069, 'ResizablePMCArray'
    box $P5070, 2
    push $P5069, $P5070
    box $P5071, 117
    push $P5069, $P5071
    box $P5072, 17
    push $P5069, $P5072
    push $P5001, $P5069
    new $P5073, 'ResizablePMCArray'
    box $P5074, 2
    push $P5073, $P5074
    box $P5075, 108
    push $P5073, $P5075
    box $P5076, 18
    push $P5073, $P5076
    push $P5001, $P5073
    new $P5077, 'ResizablePMCArray'
    box $P5078, 2
    push $P5077, $P5078
    box $P5079, 101
    push $P5077, $P5079
    box $P5080, 0
    push $P5077, $P5080
    push $P5001, $P5077
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_89_1347804164.33_alt_nfa__18_1347804166.086" :subid("cuid_memo_117_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 114
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 101
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 103
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 101
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 120
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 116
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 111
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 107
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 101
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 110
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 2
    push $P5048, $P5049
    box $P5050, 114
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 2
    push $P5052, $P5053
    box $P5054, 117
    push $P5052, $P5054
    box $P5055, 3
    push $P5052, $P5055
    push $P5046, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 2
    push $P5056, $P5057
    box $P5058, 108
    push $P5056, $P5058
    box $P5059, 4
    push $P5056, $P5059
    push $P5046, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 2
    push $P5060, $P5061
    box $P5062, 101
    push $P5060, $P5062
    box $P5063, 0
    push $P5060, $P5063
    push $P5046, $P5060
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_91_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 889
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx442_tgt
    .local int rx442_pos
    .local int rx442_off
    .local int rx442_eos
    .local int rx442_rep
    .local pmc rx442_cur
    .local pmc rx442_curclass
    .local pmc rx442_bstack
    .local pmc rx442_cstack
    (rx442_cur, rx442_tgt, rx442_pos, rx442_curclass, rx442_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx442_cur
    length rx442_eos, rx442_tgt
    eq $I19, 1, rx442_restart1320
    gt rx442_pos, rx442_eos, rx442_fail1321
    repr_get_attr_int $I11, self, rx442_curclass, "$!from"
    ne $I11, -1, rxscan443_done1327
    goto rxscan443_scan1326
  rxscan443_loop1325:
    inc rx442_pos
    gt rx442_pos, rx442_eos, rx442_fail1321
    repr_bind_attr_int rx442_cur, rx442_curclass, "$!from", rx442_pos
  rxscan443_scan1326:
    nqp_rxmark rx442_bstack, rxscan443_loop1325, rx442_pos, 0
  rxscan443_done1327:
    repr_bind_attr_int rx442_cur, rx442_curclass, "$!pos", rx442_pos
    $P11 = rx442_cur."regex_declarator"()
    repr_get_attr_int $I11, $P11, rx442_curclass, "$!pos"
    lt $I11, 0, rx442_fail1321
    nqp_rxmark rx442_bstack, rxsubrule444_pass1328, -1, 0
  rxsubrule444_pass1328:
    rx442_cstack = rx442_cur."!cursor_capture"($P11, "regex_declarator")
    repr_get_attr_int rx442_pos, $P11, rx442_curclass, "$!pos"
    rx442_cur."!cursor_pass"(rx442_pos, "term:sym<regex_declarator>", 'backtrack'=>1)
    .return (rx442_cur)
  rx442_restart1320:
    repr_get_attr_obj rx442_cstack, rx442_cur, rx442_curclass, "$!cstack"
  rx442_fail1321:
    unless rx442_bstack, rx442_done1319
    pop $I19, rx442_bstack
    if_null rx442_cstack, rx442_cstack_done1324
    unless rx442_cstack, rx442_cstack_done1324
    dec $I19
    set $P11, rx442_cstack[$I19]
  rx442_cstack_done1324:
    pop rx442_rep, rx442_bstack
    pop rx442_pos, rx442_bstack
    pop $I19, rx442_bstack
    lt rx442_pos, -1, rx442_done1319
    lt rx442_pos, 0, rx442_fail1321
    eq $I19, 0, rx442_fail1321
    nqp_islist $I20, rx442_cstack
    unless $I20, rx442_jump1322
    elements $I18, rx442_bstack
    le $I18, 0, rx442_cut1323
    dec $I18
    set $I18, rx442_bstack[$I18]
  rx442_cut1323:
    assign rx442_cstack, $I18
  rx442_jump1322:
    jump $I19
  rx442_done1319:
    rx442_cur."!cursor_fail"()
    .return (rx442_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_91_1347804164.33_caps" :subid("cuid_memo_118_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["regex_declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_91_1347804164.33_nfa" :subid("cuid_memo_119_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "regex_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_92_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 890
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx445_tgt
    .local int rx445_pos
    .local int rx445_off
    .local int rx445_eos
    .local int rx445_rep
    .local pmc rx445_cur
    .local pmc rx445_curclass
    .local pmc rx445_bstack
    .local pmc rx445_cstack
    (rx445_cur, rx445_tgt, rx445_pos, rx445_curclass, rx445_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx445_cur
    length rx445_eos, rx445_tgt
    eq $I19, 1, rx445_restart1331
    gt rx445_pos, rx445_eos, rx445_fail1332
    repr_get_attr_int $I11, self, rx445_curclass, "$!from"
    ne $I11, -1, rxscan446_done1338
    goto rxscan446_scan1337
  rxscan446_loop1336:
    inc rx445_pos
    gt rx445_pos, rx445_eos, rx445_fail1332
    repr_bind_attr_int rx445_cur, rx445_curclass, "$!from", rx445_pos
  rxscan446_scan1337:
    nqp_rxmark rx445_bstack, rxscan446_loop1336, rx445_pos, 0
  rxscan446_done1338:
    repr_bind_attr_int rx445_cur, rx445_curclass, "$!pos", rx445_pos
    $P11 = rx445_cur."statement_prefix"()
    repr_get_attr_int $I11, $P11, rx445_curclass, "$!pos"
    lt $I11, 0, rx445_fail1332
    nqp_rxmark rx445_bstack, rxsubrule447_pass1339, -1, 0
  rxsubrule447_pass1339:
    rx445_cstack = rx445_cur."!cursor_capture"($P11, "statement_prefix")
    repr_get_attr_int rx445_pos, $P11, rx445_curclass, "$!pos"
    rx445_cur."!cursor_pass"(rx445_pos, "term:sym<statement_prefix>", 'backtrack'=>1)
    .return (rx445_cur)
  rx445_restart1331:
    repr_get_attr_obj rx445_cstack, rx445_cur, rx445_curclass, "$!cstack"
  rx445_fail1332:
    unless rx445_bstack, rx445_done1330
    pop $I19, rx445_bstack
    if_null rx445_cstack, rx445_cstack_done1335
    unless rx445_cstack, rx445_cstack_done1335
    dec $I19
    set $P11, rx445_cstack[$I19]
  rx445_cstack_done1335:
    pop rx445_rep, rx445_bstack
    pop rx445_pos, rx445_bstack
    pop $I19, rx445_bstack
    lt rx445_pos, -1, rx445_done1330
    lt rx445_pos, 0, rx445_fail1332
    eq $I19, 0, rx445_fail1332
    nqp_islist $I20, rx445_cstack
    unless $I20, rx445_jump1333
    elements $I18, rx445_bstack
    le $I18, 0, rx445_cut1334
    dec $I18
    set $I18, rx445_bstack[$I18]
  rx445_cut1334:
    assign rx445_cstack, $I18
  rx445_jump1333:
    jump $I19
  rx445_done1330:
    rx445_cur."!cursor_fail"()
    .return (rx445_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_92_1347804164.33_caps" :subid("cuid_memo_120_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statement_prefix"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_92_1347804164.33_nfa" :subid("cuid_memo_121_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "statement_prefix"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_93_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 891
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx448_tgt
    .local int rx448_pos
    .local int rx448_off
    .local int rx448_eos
    .local int rx448_rep
    .local pmc rx448_cur
    .local pmc rx448_curclass
    .local pmc rx448_bstack
    .local pmc rx448_cstack
    (rx448_cur, rx448_tgt, rx448_pos, rx448_curclass, rx448_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx448_cur
    length rx448_eos, rx448_tgt
    eq $I19, 1, rx448_restart1342
    gt rx448_pos, rx448_eos, rx448_fail1343
    repr_get_attr_int $I11, self, rx448_curclass, "$!from"
    ne $I11, -1, rxscan449_done1349
    goto rxscan449_scan1348
  rxscan449_loop1347:
    inc rx448_pos
    gt rx448_pos, rx448_eos, rx448_fail1343
    repr_bind_attr_int rx448_cur, rx448_curclass, "$!from", rx448_pos
  rxscan449_scan1348:
    nqp_rxmark rx448_bstack, rxscan449_loop1347, rx448_pos, 0
  rxscan449_done1349:
    repr_bind_attr_int rx448_cur, rx448_curclass, "$!pos", rx448_pos
    $P11 = rx448_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx448_curclass, "$!pos"
    lt $I11, 0, rx448_fail1343
    repr_bind_attr_int rx448_cur, rx448_curclass, "$!pos", rx448_pos
    $P11 = rx448_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx448_curclass, "$!pos"
    lt $I11, 0, rx448_fail1343
    nqp_rxmark rx448_bstack, rxsubrule450_pass1350, -1, 0
  rxsubrule450_pass1350:
    rx448_cstack = rx448_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx448_pos, $P11, rx448_curclass, "$!pos"
    rx448_cur."!cursor_pass"(rx448_pos, "term:sym<lambda>", 'backtrack'=>1)
    .return (rx448_cur)
  rx448_restart1342:
    repr_get_attr_obj rx448_cstack, rx448_cur, rx448_curclass, "$!cstack"
  rx448_fail1343:
    unless rx448_bstack, rx448_done1341
    pop $I19, rx448_bstack
    if_null rx448_cstack, rx448_cstack_done1346
    unless rx448_cstack, rx448_cstack_done1346
    dec $I19
    set $P11, rx448_cstack[$I19]
  rx448_cstack_done1346:
    pop rx448_rep, rx448_bstack
    pop rx448_pos, rx448_bstack
    pop $I19, rx448_bstack
    lt rx448_pos, -1, rx448_done1341
    lt rx448_pos, 0, rx448_fail1343
    eq $I19, 0, rx448_fail1343
    nqp_islist $I20, rx448_cstack
    unless $I20, rx448_jump1344
    elements $I18, rx448_bstack
    le $I18, 0, rx448_cut1345
    dec $I18
    set $I18, rx448_bstack[$I18]
  rx448_cut1345:
    assign rx448_cstack, $I18
  rx448_jump1344:
    jump $I19
  rx448_done1341:
    rx448_cur."!cursor_fail"()
    .return (rx448_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_93_1347804164.33_caps" :subid("cuid_memo_122_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["pblock"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_93_1347804164.33_nfa" :subid("cuid_memo_123_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "lambda"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_94_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 893
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx451_tgt
    .local int rx451_pos
    .local int rx451_off
    .local int rx451_eos
    .local int rx451_rep
    .local pmc rx451_cur
    .local pmc rx451_curclass
    .local pmc rx451_bstack
    .local pmc rx451_cstack
    (rx451_cur, rx451_tgt, rx451_pos, rx451_curclass, rx451_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx451_cur
    length rx451_eos, rx451_tgt
    eq $I19, 1, rx451_restart1353
    gt rx451_pos, rx451_eos, rx451_fail1354
    repr_get_attr_int $I11, self, rx451_curclass, "$!from"
    ne $I11, -1, rxscan452_done1360
    goto rxscan452_scan1359
  rxscan452_loop1358:
    inc rx451_pos
    gt rx451_pos, rx451_eos, rx451_fail1354
    repr_bind_attr_int rx451_cur, rx451_curclass, "$!from", rx451_pos
  rxscan452_scan1359:
    nqp_rxmark rx451_bstack, rxscan452_loop1358, rx451_pos, 0
  rxscan452_done1360:
    repr_bind_attr_int rx451_cur, rx451_curclass, "$!pos", rx451_pos
    $P11 = rx451_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx451_curclass, "$!pos"
    lt $I11, 0, rx451_fail1354
    nqp_rxmark rx451_bstack, rxsubrule453_pass1361, -1, 0
  rxsubrule453_pass1361:
    rx451_cstack = rx451_cur."!cursor_capture"($P11, "key")
    repr_get_attr_int rx451_pos, $P11, rx451_curclass, "$!pos"
    nqp_rxmark rx451_bstack, rxquantr454_done1363, rx451_pos, 0
  rxquantr454_loop1362:
    ge rx451_pos, rx451_eos, rx451_fail1354
    substr $S11, rx451_tgt, rx451_pos, 1
    index $I11, ucs4:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000", $S11
    lt $I11, 0, rx451_fail1354
    inc rx451_pos
    nqp_rxpeek $I19, rx451_bstack, rxquantr454_done1363
    inc $I19
    inc $I19
    set rx451_rep, rx451_bstack[$I19]
    nqp_rxcommit rx451_bstack, rxquantr454_done1363
    inc rx451_rep
    nqp_rxmark rx451_bstack, rxquantr454_done1363, rx451_pos, rx451_rep
    goto rxquantr454_loop1362
  rxquantr454_done1363:
    add $I11, rx451_pos, 2
    gt $I11, rx451_eos, rx451_fail1354
    substr $S10, rx451_tgt, rx451_pos, 2
    ne $S10, ucs4:"=>", rx451_fail1354
    add rx451_pos, 2
    repr_bind_attr_int rx451_cur, rx451_curclass, "$!pos", rx451_pos
    $P11 = rx451_cur."ws"()
    repr_get_attr_int $I11, $P11, rx451_curclass, "$!pos"
    lt $I11, 0, rx451_fail1354
    repr_get_attr_int rx451_pos, $P11, rx451_curclass, "$!pos"
    repr_bind_attr_int rx451_cur, rx451_curclass, "$!pos", rx451_pos
    $P11 = rx451_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx451_curclass, "$!pos"
    lt $I11, 0, rx451_fail1354
    nqp_rxmark rx451_bstack, rxsubrule456_pass1365, -1, 0
  rxsubrule456_pass1365:
    rx451_cstack = rx451_cur."!cursor_capture"($P11, "val")
    repr_get_attr_int rx451_pos, $P11, rx451_curclass, "$!pos"
    rx451_cur."!cursor_pass"(rx451_pos, "fatarrow", 'backtrack'=>1)
    .return (rx451_cur)
  rx451_restart1353:
    repr_get_attr_obj rx451_cstack, rx451_cur, rx451_curclass, "$!cstack"
  rx451_fail1354:
    unless rx451_bstack, rx451_done1352
    pop $I19, rx451_bstack
    if_null rx451_cstack, rx451_cstack_done1357
    unless rx451_cstack, rx451_cstack_done1357
    dec $I19
    set $P11, rx451_cstack[$I19]
  rx451_cstack_done1357:
    pop rx451_rep, rx451_bstack
    pop rx451_pos, rx451_bstack
    pop $I19, rx451_bstack
    lt rx451_pos, -1, rx451_done1352
    lt rx451_pos, 0, rx451_fail1354
    eq $I19, 0, rx451_fail1354
    nqp_islist $I20, rx451_cstack
    unless $I20, rx451_jump1355
    elements $I18, rx451_bstack
    le $I18, 0, rx451_cut1356
    dec $I18
    set $I18, rx451_bstack[$I18]
  rx451_cut1356:
    assign rx451_cstack, $I18
  rx451_jump1355:
    jump $I19
  rx451_done1352:
    rx451_cur."!cursor_fail"()
    .return (rx451_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_94_1347804164.33_caps" :subid("cuid_memo_124_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["key"], $P5002
    box $P5003, 0
    set $P5001["val"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_94_1347804164.33_nfa" :subid("cuid_memo_125_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "identifier"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 6
    push $P5007, $P5008
    box $P5009, utf8:"\t \x{a0}\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"
    push $P5007, $P5009
    box $P5010, 2
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 3
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 61
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 62
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    push $P5001, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 8
    push $P5022, $P5023
    box $P5024, "ws"
    push $P5022, $P5024
    box $P5025, 6
    push $P5022, $P5025
    push $P5001, $P5022
    new $P5026, 'ResizablePMCArray'
    box $P5027, 8
    push $P5026, $P5027
    box $P5028, "EXPR"
    push $P5026, $P5028
    box $P5029, 0
    push $P5026, $P5029
    push $P5001, $P5026
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_95_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 897
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx457_tgt
    .local int rx457_pos
    .local int rx457_off
    .local int rx457_eos
    .local int rx457_rep
    .local pmc rx457_cur
    .local pmc rx457_curclass
    .local pmc rx457_bstack
    .local pmc rx457_cstack
    (rx457_cur, rx457_tgt, rx457_pos, rx457_curclass, rx457_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx457_cur
    length rx457_eos, rx457_tgt
    eq $I19, 1, rx457_restart1368
    gt rx457_pos, rx457_eos, rx457_fail1369
    repr_get_attr_int $I11, self, rx457_curclass, "$!from"
    ne $I11, -1, rxscan458_done1375
    goto rxscan458_scan1374
  rxscan458_loop1373:
    inc rx457_pos
    gt rx457_pos, rx457_eos, rx457_fail1369
    repr_bind_attr_int rx457_cur, rx457_curclass, "$!from", rx457_pos
  rxscan458_scan1374:
    nqp_rxmark rx457_bstack, rxscan458_loop1373, rx457_pos, 0
  rxscan458_done1375:
    add $I11, rx457_pos, 1
    gt $I11, rx457_eos, rx457_fail1369
    substr $S10, rx457_tgt, rx457_pos, 1
    ne $S10, ucs4:":", rx457_fail1369
    add rx457_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt459_01377
    nqp_push_label $P11, alt459_11381
    nqp_push_label $P11, alt459_21387
    nqp_push_label $P11, alt459_31389
    nqp_rxmark rx457_bstack, alt459_end1376, -1, 0
    rx457_cur."!alt"(rx457_pos, "alt_nfa__19_1347804166.128", $P11)
    goto rx457_fail1369
  alt459_01377:
    nqp_rxmark rx457_bstack, rxcap460_fail1379, rx457_pos, 0
    add $I11, rx457_pos, 1
    gt $I11, rx457_eos, rx457_fail1369
    substr $S10, rx457_tgt, rx457_pos, 1
    ne $S10, ucs4:"!", rx457_fail1369
    add rx457_pos, 1
    nqp_rxpeek $I19, rx457_bstack, rxcap460_fail1379
    inc $I19
    set $I11, rx457_bstack[$I19]
    $P11 = rx457_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx457_pos)
    rx457_cstack = rx457_cur."!cursor_capture"($P11, "not")
    goto rxcap460_done1378
  rxcap460_fail1379:
    goto rx457_fail1369
  rxcap460_done1378:
    repr_bind_attr_int rx457_cur, rx457_curclass, "$!pos", rx457_pos
    $P11 = rx457_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx457_curclass, "$!pos"
    lt $I11, 0, rx457_fail1369
    nqp_rxmark rx457_bstack, rxsubrule461_pass1380, -1, 0
  rxsubrule461_pass1380:
    rx457_cstack = rx457_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx457_pos, $P11, rx457_curclass, "$!pos"
    goto alt459_end1376
  alt459_11381:
    repr_bind_attr_int rx457_cur, rx457_curclass, "$!pos", rx457_pos
    $P11 = rx457_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx457_curclass, "$!pos"
    lt $I11, 0, rx457_fail1369
    nqp_rxmark rx457_bstack, rxsubrule462_pass1382, -1, 0
  rxsubrule462_pass1382:
    rx457_cstack = rx457_cur."!cursor_capture"($P11, "identifier")
    repr_get_attr_int rx457_pos, $P11, rx457_curclass, "$!pos"
    nqp_rxmark rx457_bstack, rxquantr463_done1384, rx457_pos, 0
  rxquantr463_loop1383:
    repr_bind_attr_int rx457_cur, rx457_curclass, "$!pos", rx457_pos
    $P11 = rx457_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx457_curclass, "$!pos"
    lt $I11, 0, rx457_fail1369
    goto rxsubrule464_pass1385
  rxsubrule464_back1386:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx457_curclass, "$!pos"
    lt $I11, 0, rx457_fail1369
  rxsubrule464_pass1385:
    rx457_cstack = rx457_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule464_back1386
    push rx457_bstack, $I11
    push rx457_bstack, 0
    push rx457_bstack, rx457_pos
    elements $I11, rx457_cstack
    push rx457_bstack, $I11
    repr_get_attr_int rx457_pos, $P11, rx457_curclass, "$!pos"
    nqp_rxpeek $I19, rx457_bstack, rxquantr463_done1384
    inc $I19
    inc $I19
    set rx457_rep, rx457_bstack[$I19]
    nqp_rxcommit rx457_bstack, rxquantr463_done1384
    inc rx457_rep
  rxquantr463_done1384:
    goto alt459_end1376
  alt459_21387:
    repr_bind_attr_int rx457_cur, rx457_curclass, "$!pos", rx457_pos
    $P11 = rx457_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx457_curclass, "$!pos"
    lt $I11, 0, rx457_fail1369
    nqp_rxmark rx457_bstack, rxsubrule465_pass1388, -1, 0
  rxsubrule465_pass1388:
    rx457_cstack = rx457_cur."!cursor_capture"($P11, "circumfix")
    repr_get_attr_int rx457_pos, $P11, rx457_curclass, "$!pos"
    goto alt459_end1376
  alt459_31389:
    repr_bind_attr_int rx457_cur, rx457_curclass, "$!pos", rx457_pos
    $P11 = rx457_cur."variable"()
    repr_get_attr_int $I11, $P11, rx457_curclass, "$!pos"
    lt $I11, 0, rx457_fail1369
    nqp_rxmark rx457_bstack, rxsubrule466_pass1390, -1, 0
  rxsubrule466_pass1390:
    rx457_cstack = rx457_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx457_pos, $P11, rx457_curclass, "$!pos"
    goto alt459_end1376
  alt459_end1376:
    nqp_rxcommit rx457_bstack, alt459_end1376
    rx457_cur."!cursor_pass"(rx457_pos, "colonpair", 'backtrack'=>1)
    .return (rx457_cur)
  rx457_restart1368:
    repr_get_attr_obj rx457_cstack, rx457_cur, rx457_curclass, "$!cstack"
  rx457_fail1369:
    unless rx457_bstack, rx457_done1367
    pop $I19, rx457_bstack
    if_null rx457_cstack, rx457_cstack_done1372
    unless rx457_cstack, rx457_cstack_done1372
    dec $I19
    set $P11, rx457_cstack[$I19]
  rx457_cstack_done1372:
    pop rx457_rep, rx457_bstack
    pop rx457_pos, rx457_bstack
    pop $I19, rx457_bstack
    lt rx457_pos, -1, rx457_done1367
    lt rx457_pos, 0, rx457_fail1369
    eq $I19, 0, rx457_fail1369
    nqp_islist $I20, rx457_cstack
    unless $I20, rx457_jump1370
    elements $I18, rx457_bstack
    le $I18, 0, rx457_cut1371
    dec $I18
    set $I18, rx457_bstack[$I18]
  rx457_cut1371:
    assign rx457_cstack, $I18
  rx457_jump1370:
    jump $I19
  rx457_done1367:
    rx457_cur."!cursor_fail"()
    .return (rx457_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_95_1347804164.33_caps" :subid("cuid_memo_126_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["not"], $P5002
    box $P5003, 0
    set $P5001["identifier"], $P5003
    box $P5004, 2
    set $P5001["circumfix"], $P5004
    box $P5005, 0
    set $P5001["variable"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_95_1347804164.33_nfa" :subid("cuid_memo_127_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 33
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 8
    push $P5007, $P5011
    box $P5012, "identifier"
    push $P5007, $P5012
    box $P5013, 4
    push $P5007, $P5013
    box $P5014, 8
    push $P5007, $P5014
    box $P5015, "circumfix"
    push $P5007, $P5015
    box $P5016, 0
    push $P5007, $P5016
    box $P5017, 8
    push $P5007, $P5017
    box $P5018, "variable"
    push $P5007, $P5018
    box $P5019, 0
    push $P5007, $P5019
    push $P5001, $P5007
    new $P5020, 'ResizablePMCArray'
    box $P5021, 8
    push $P5020, $P5021
    box $P5022, "identifier"
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5001, $P5020
    new $P5024, 'ResizablePMCArray'
    box $P5025, 8
    push $P5024, $P5025
    box $P5026, "circumfix"
    push $P5024, $P5026
    box $P5027, 0
    push $P5024, $P5027
    box $P5028, 1
    push $P5024, $P5028
    box $P5029, 0
    push $P5024, $P5029
    box $P5030, 0
    push $P5024, $P5030
    push $P5001, $P5024
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_95_1347804164.33_alt_nfa__19_1347804166.128" :subid("cuid_memo_128_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 33
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 8
    push $P5008, $P5009
    box $P5010, "identifier"
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "identifier"
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    push $P5012, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 8
    push $P5018, $P5019
    box $P5020, "circumfix"
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    box $P5022, 1
    push $P5018, $P5022
    box $P5023, 0
    push $P5018, $P5023
    box $P5024, 0
    push $P5018, $P5024
    push $P5012, $P5018
    push $P5001, $P5012
    new $P5025, 'ResizablePMCArray'
    new $P5026, 'ResizablePMCArray'
    push $P5025, $P5026
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "circumfix"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5025, $P5027
    push $P5001, $P5025
    new $P5031, 'ResizablePMCArray'
    new $P5032, 'ResizablePMCArray'
    push $P5031, $P5032
    new $P5033, 'ResizablePMCArray'
    box $P5034, 8
    push $P5033, $P5034
    box $P5035, "variable"
    push $P5033, $P5035
    box $P5036, 0
    push $P5033, $P5036
    push $P5031, $P5033
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_96_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 907
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx467_tgt
    .local int rx467_pos
    .local int rx467_off
    .local int rx467_eos
    .local int rx467_rep
    .local pmc rx467_cur
    .local pmc rx467_curclass
    .local pmc rx467_bstack
    .local pmc rx467_cstack
    (rx467_cur, rx467_tgt, rx467_pos, rx467_curclass, rx467_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx467_cur
    length rx467_eos, rx467_tgt
    eq $I19, 1, rx467_restart1393
    gt rx467_pos, rx467_eos, rx467_fail1394
    repr_get_attr_int $I11, self, rx467_curclass, "$!from"
    ne $I11, -1, rxscan468_done1400
    goto rxscan468_scan1399
  rxscan468_loop1398:
    inc rx467_pos
    gt rx467_pos, rx467_eos, rx467_fail1394
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!from", rx467_pos
  rxscan468_scan1399:
    nqp_rxmark rx467_bstack, rxscan468_loop1398, rx467_pos, 0
  rxscan468_done1400:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt469_01402
    nqp_push_label $P11, alt469_11409
    nqp_push_label $P11, alt469_21412
    nqp_rxmark rx467_bstack, alt469_end1401, -1, 0
    rx467_cur."!alt"(rx467_pos, "alt_nfa__20_1347804166.144", $P11)
    goto rx467_fail1394
  alt469_01402:
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!pos", rx467_pos
    $P11 = rx467_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx467_curclass, "$!pos"
    lt $I11, 0, rx467_fail1394
    nqp_rxmark rx467_bstack, rxsubrule470_pass1403, -1, 0
  rxsubrule470_pass1403:
    rx467_cstack = rx467_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx467_pos, $P11, rx467_curclass, "$!pos"
    nqp_rxmark rx467_bstack, rxquantr471_done1405, rx467_pos, 0
  rxquantr471_loop1404:
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!pos", rx467_pos
    $P11 = rx467_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx467_curclass, "$!pos"
    lt $I11, 0, rx467_fail1394
    goto rxsubrule472_pass1406
  rxsubrule472_back1407:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx467_curclass, "$!pos"
    lt $I11, 0, rx467_fail1394
  rxsubrule472_pass1406:
    rx467_cstack = rx467_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule472_back1407
    push rx467_bstack, $I11
    push rx467_bstack, 0
    push rx467_bstack, rx467_pos
    elements $I11, rx467_cstack
    push rx467_bstack, $I11
    repr_get_attr_int rx467_pos, $P11, rx467_curclass, "$!pos"
    nqp_rxpeek $I19, rx467_bstack, rxquantr471_done1405
    inc $I19
    inc $I19
    set rx467_rep, rx467_bstack[$I19]
    nqp_rxcommit rx467_bstack, rxquantr471_done1405
    inc rx467_rep
  rxquantr471_done1405:
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!pos", rx467_pos
    $P11 = rx467_cur."name"()
    repr_get_attr_int $I11, $P11, rx467_curclass, "$!pos"
    lt $I11, 0, rx467_fail1394
    nqp_rxmark rx467_bstack, rxsubrule473_pass1408, -1, 0
  rxsubrule473_pass1408:
    rx467_cstack = rx467_cur."!cursor_capture"($P11, "desigilname")
    repr_get_attr_int rx467_pos, $P11, rx467_curclass, "$!pos"
    goto alt469_end1401
  alt469_11409:
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!pos", rx467_pos
    $P11 = rx467_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx467_curclass, "$!pos"
    lt $I11, 0, rx467_fail1394
    nqp_rxmark rx467_bstack, rxsubrule474_pass1410, -1, 0
  rxsubrule474_pass1410:
    rx467_cstack = rx467_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx467_pos, $P11, rx467_curclass, "$!pos"
    ge rx467_pos, rx467_eos, rx467_fail1394
    substr $S11, rx467_tgt, rx467_pos, 1
    index $I11, ucs4:"<[", $S11
    lt $I11, 0, rx467_fail1394
    repr_bind_attr_int rx467_cur, rx467_curclass, "$!pos", rx467_pos
    $P11 = rx467_cur."postcircumfix"()
    repr_get_attr_int $I11, $P11, rx467_curclass, "$!pos"
    lt $I11, 0, rx467_fail1394
    nqp_rxmark rx467_bstack, rxsubrule475_pass1411, -1, 0
  rxsubrule475_pass1411:
    rx467_cstack = rx467_cur."!cursor_capture"($P11, "postcircumfix")
    repr_get_attr_int rx467_pos, $P11, rx467_curclass, "$!pos"
    goto alt469_end1401
  alt469_21412:
    nqp_rxmark rx467_bstack, rxcap476_fail1414, rx467_pos, 0
    add $I11, rx467_pos, 1
    gt $I11, rx467_eos, rx467_fail1394
    substr $S10, rx467_tgt, rx467_pos, 1
    ne $S10, ucs4:"$", rx467_fail1394
    add rx467_pos, 1
    nqp_rxpeek $I19, rx467_bstack, rxcap476_fail1414
    inc $I19
    set $I11, rx467_bstack[$I19]
    $P11 = rx467_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx467_pos)
    rx467_cstack = rx467_cur."!cursor_capture"($P11, "sigil")
    goto rxcap476_done1413
  rxcap476_fail1414:
    goto rx467_fail1394
  rxcap476_done1413:
    nqp_rxmark rx467_bstack, rxcap477_fail1416, rx467_pos, 0
    ge rx467_pos, rx467_eos, rx467_fail1394
    substr $S11, rx467_tgt, rx467_pos, 1
    index $I11, ucs4:"/_!", $S11
    lt $I11, 0, rx467_fail1394
    inc rx467_pos
    nqp_rxpeek $I19, rx467_bstack, rxcap477_fail1416
    inc $I19
    set $I11, rx467_bstack[$I19]
    $P11 = rx467_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx467_pos)
    rx467_cstack = rx467_cur."!cursor_capture"($P11, "desigilname")
    goto rxcap477_done1415
  rxcap477_fail1416:
    goto rx467_fail1394
  rxcap477_done1415:
    goto alt469_end1401
  alt469_end1401:
    rx467_cur."!cursor_pass"(rx467_pos, "variable", 'backtrack'=>1)
    .return (rx467_cur)
  rx467_restart1393:
    repr_get_attr_obj rx467_cstack, rx467_cur, rx467_curclass, "$!cstack"
  rx467_fail1394:
    unless rx467_bstack, rx467_done1392
    pop $I19, rx467_bstack
    if_null rx467_cstack, rx467_cstack_done1397
    unless rx467_cstack, rx467_cstack_done1397
    dec $I19
    set $P11, rx467_cstack[$I19]
  rx467_cstack_done1397:
    pop rx467_rep, rx467_bstack
    pop rx467_pos, rx467_bstack
    pop $I19, rx467_bstack
    lt rx467_pos, -1, rx467_done1392
    lt rx467_pos, 0, rx467_fail1394
    eq $I19, 0, rx467_fail1394
    nqp_islist $I20, rx467_cstack
    unless $I20, rx467_jump1395
    elements $I18, rx467_bstack
    le $I18, 0, rx467_cut1396
    dec $I18
    set $I18, rx467_bstack[$I18]
  rx467_cut1396:
    assign rx467_cstack, $I18
  rx467_jump1395:
    jump $I19
  rx467_done1392:
    rx467_cur."!cursor_fail"()
    .return (rx467_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_96_1347804164.33_caps" :subid("cuid_memo_129_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sigil"], $P5002
    box $P5003, 2
    set $P5001["twigil"], $P5003
    box $P5004, 0
    set $P5001["desigilname"], $P5004
    box $P5005, 0
    set $P5001["postcircumfix"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_96_1347804164.33_nfa" :subid("cuid_memo_130_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "sigil"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 8
    push $P5003, $P5007
    box $P5008, "sigil"
    push $P5003, $P5008
    box $P5009, 4
    push $P5003, $P5009
    box $P5010, 2
    push $P5003, $P5010
    box $P5011, 36
    push $P5003, $P5011
    box $P5012, 6
    push $P5003, $P5012
    push $P5001, $P5003
    new $P5013, 'ResizablePMCArray'
    box $P5014, 8
    push $P5013, $P5014
    box $P5015, "twigil"
    push $P5013, $P5015
    box $P5016, 3
    push $P5013, $P5016
    box $P5017, 1
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 3
    push $P5013, $P5019
    push $P5001, $P5013
    new $P5020, 'ResizablePMCArray'
    box $P5021, 8
    push $P5020, $P5021
    box $P5022, "name"
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5001, $P5020
    new $P5024, 'ResizablePMCArray'
    box $P5025, 6
    push $P5024, $P5025
    box $P5026, "<["
    push $P5024, $P5026
    box $P5027, 5
    push $P5024, $P5027
    push $P5001, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 0
    push $P5028, $P5029
    box $P5030, 0
    push $P5028, $P5030
    box $P5031, 0
    push $P5028, $P5031
    push $P5001, $P5028
    new $P5032, 'ResizablePMCArray'
    box $P5033, 6
    push $P5032, $P5033
    box $P5034, "/_!"
    push $P5032, $P5034
    box $P5035, 0
    push $P5032, $P5035
    push $P5001, $P5032
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_96_1347804164.33_alt_nfa__20_1347804166.144" :subid("cuid_memo_131_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "sigil"
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 8
    push $P5008, $P5009
    box $P5010, "twigil"
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    box $P5012, 1
    push $P5008, $P5012
    box $P5013, 0
    push $P5008, $P5013
    box $P5014, 3
    push $P5008, $P5014
    push $P5002, $P5008
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "name"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5002, $P5015
    push $P5001, $P5002
    new $P5019, 'ResizablePMCArray'
    new $P5020, 'ResizablePMCArray'
    push $P5019, $P5020
    new $P5021, 'ResizablePMCArray'
    box $P5022, 8
    push $P5021, $P5022
    box $P5023, "sigil"
    push $P5021, $P5023
    box $P5024, 2
    push $P5021, $P5024
    push $P5019, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 6
    push $P5025, $P5026
    box $P5027, "<["
    push $P5025, $P5027
    box $P5028, 3
    push $P5025, $P5028
    push $P5019, $P5025
    new $P5029, 'ResizablePMCArray'
    box $P5030, 0
    push $P5029, $P5030
    box $P5031, 0
    push $P5029, $P5031
    box $P5032, 0
    push $P5029, $P5032
    push $P5019, $P5029
    push $P5001, $P5019
    new $P5033, 'ResizablePMCArray'
    new $P5034, 'ResizablePMCArray'
    push $P5033, $P5034
    new $P5035, 'ResizablePMCArray'
    box $P5036, 2
    push $P5035, $P5036
    box $P5037, 36
    push $P5035, $P5037
    box $P5038, 2
    push $P5035, $P5038
    push $P5033, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 6
    push $P5039, $P5040
    box $P5041, "/_!"
    push $P5039, $P5041
    box $P5042, 0
    push $P5039, $P5042
    push $P5033, $P5039
    push $P5001, $P5033
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "sigil" :subid("cuid_97_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 913
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx478_tgt
    .local int rx478_pos
    .local int rx478_off
    .local int rx478_eos
    .local int rx478_rep
    .local pmc rx478_cur
    .local pmc rx478_curclass
    .local pmc rx478_bstack
    .local pmc rx478_cstack
    (rx478_cur, rx478_tgt, rx478_pos, rx478_curclass, rx478_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx478_cur
    length rx478_eos, rx478_tgt
    eq $I19, 1, rx478_restart1419
    gt rx478_pos, rx478_eos, rx478_fail1420
    repr_get_attr_int $I11, self, rx478_curclass, "$!from"
    ne $I11, -1, rxscan479_done1426
    goto rxscan479_scan1425
  rxscan479_loop1424:
    inc rx478_pos
    gt rx478_pos, rx478_eos, rx478_fail1420
    repr_bind_attr_int rx478_cur, rx478_curclass, "$!from", rx478_pos
  rxscan479_scan1425:
    nqp_rxmark rx478_bstack, rxscan479_loop1424, rx478_pos, 0
  rxscan479_done1426:
    ge rx478_pos, rx478_eos, rx478_fail1420
    substr $S11, rx478_tgt, rx478_pos, 1
    index $I11, ucs4:"$@%&", $S11
    lt $I11, 0, rx478_fail1420
    inc rx478_pos
    rx478_cur."!cursor_pass"(rx478_pos, "sigil", 'backtrack'=>1)
    .return (rx478_cur)
  rx478_restart1419:
    repr_get_attr_obj rx478_cstack, rx478_cur, rx478_curclass, "$!cstack"
  rx478_fail1420:
    unless rx478_bstack, rx478_done1418
    pop $I19, rx478_bstack
    if_null rx478_cstack, rx478_cstack_done1423
    unless rx478_cstack, rx478_cstack_done1423
    dec $I19
    set $P11, rx478_cstack[$I19]
  rx478_cstack_done1423:
    pop rx478_rep, rx478_bstack
    pop rx478_pos, rx478_bstack
    pop $I19, rx478_bstack
    lt rx478_pos, -1, rx478_done1418
    lt rx478_pos, 0, rx478_fail1420
    eq $I19, 0, rx478_fail1420
    nqp_islist $I20, rx478_cstack
    unless $I20, rx478_jump1421
    elements $I18, rx478_bstack
    le $I18, 0, rx478_cut1422
    dec $I18
    set $I18, rx478_bstack[$I18]
  rx478_cut1422:
    assign rx478_cstack, $I18
  rx478_jump1421:
    jump $I19
  rx478_done1418:
    rx478_cur."!cursor_fail"()
    .return (rx478_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_97_1347804164.33_caps" :subid("cuid_memo_132_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_97_1347804164.33_nfa" :subid("cuid_memo_133_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$@%&"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "twigil" :subid("cuid_98_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 915
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx480_tgt
    .local int rx480_pos
    .local int rx480_off
    .local int rx480_eos
    .local int rx480_rep
    .local pmc rx480_cur
    .local pmc rx480_curclass
    .local pmc rx480_bstack
    .local pmc rx480_cstack
    (rx480_cur, rx480_tgt, rx480_pos, rx480_curclass, rx480_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx480_cur
    length rx480_eos, rx480_tgt
    eq $I19, 1, rx480_restart1429
    gt rx480_pos, rx480_eos, rx480_fail1430
    repr_get_attr_int $I11, self, rx480_curclass, "$!from"
    ne $I11, -1, rxscan481_done1436
    goto rxscan481_scan1435
  rxscan481_loop1434:
    inc rx480_pos
    gt rx480_pos, rx480_eos, rx480_fail1430
    repr_bind_attr_int rx480_cur, rx480_curclass, "$!from", rx480_pos
  rxscan481_scan1435:
    nqp_rxmark rx480_bstack, rxscan481_loop1434, rx480_pos, 0
  rxscan481_done1436:
    ge rx480_pos, rx480_eos, rx480_fail1430
    substr $S11, rx480_tgt, rx480_pos, 1
    index $I11, ucs4:"*!?", $S11
    lt $I11, 0, rx480_fail1430
    inc rx480_pos
    rx480_cur."!cursor_pass"(rx480_pos, "twigil", 'backtrack'=>1)
    .return (rx480_cur)
  rx480_restart1429:
    repr_get_attr_obj rx480_cstack, rx480_cur, rx480_curclass, "$!cstack"
  rx480_fail1430:
    unless rx480_bstack, rx480_done1428
    pop $I19, rx480_bstack
    if_null rx480_cstack, rx480_cstack_done1433
    unless rx480_cstack, rx480_cstack_done1433
    dec $I19
    set $P11, rx480_cstack[$I19]
  rx480_cstack_done1433:
    pop rx480_rep, rx480_bstack
    pop rx480_pos, rx480_bstack
    pop $I19, rx480_bstack
    lt rx480_pos, -1, rx480_done1428
    lt rx480_pos, 0, rx480_fail1430
    eq $I19, 0, rx480_fail1430
    nqp_islist $I20, rx480_cstack
    unless $I20, rx480_jump1431
    elements $I18, rx480_bstack
    le $I18, 0, rx480_cut1432
    dec $I18
    set $I18, rx480_bstack[$I18]
  rx480_cut1432:
    assign rx480_cstack, $I18
  rx480_jump1431:
    jump $I19
  rx480_done1428:
    rx480_cur."!cursor_fail"()
    .return (rx480_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_98_1347804164.33_caps" :subid("cuid_memo_134_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_98_1347804164.33_nfa" :subid("cuid_memo_135_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "*!?"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator" :subid("cuid_99_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 917
    .param pmc self 
    $P5001 = self."!protoregex"("package_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_100_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 918
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx482_tgt
    .local int rx482_pos
    .local int rx482_off
    .local int rx482_eos
    .local int rx482_rep
    .local pmc rx482_cur
    .local pmc rx482_curclass
    .local pmc rx482_bstack
    .local pmc rx482_cstack
    (rx482_cur, rx482_tgt, rx482_pos, rx482_curclass, rx482_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx482_cur
    length rx482_eos, rx482_tgt
    eq $I19, 1, rx482_restart1439
    gt rx482_pos, rx482_eos, rx482_fail1440
    repr_get_attr_int $I11, self, rx482_curclass, "$!from"
    ne $I11, -1, rxscan483_done1446
    goto rxscan483_scan1445
  rxscan483_loop1444:
    inc rx482_pos
    gt rx482_pos, rx482_eos, rx482_fail1440
    repr_bind_attr_int rx482_cur, rx482_curclass, "$!from", rx482_pos
  rxscan483_scan1445:
    nqp_rxmark rx482_bstack, rxscan483_loop1444, rx482_pos, 0
  rxscan483_done1446:
    repr_bind_attr_int rx482_cur, rx482_curclass, "$!pos", rx482_pos
    store_lex unicode:"$\x{a2}", rx482_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1447
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1448
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5007
  fallback1448:
    unless_null $P5004, vivi_4841449
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4841449:
    set $P5003, $P5004
  fallback1447:
    set $P101, $P5003
    repr_bind_attr_int rx482_cur, rx482_curclass, "$!pos", rx482_pos
    store_lex unicode:"$\x{a2}", rx482_cur
    box $P5009, "module"
    set $P102, $P5009
    nqp_rxmark rx482_bstack, rxcap485_fail1451, rx482_pos, 0
    add $I11, rx482_pos, 6
    gt $I11, rx482_eos, rx482_fail1440
    substr $S10, rx482_tgt, rx482_pos, 6
    ne $S10, ucs4:"module", rx482_fail1440
    add rx482_pos, 6
    nqp_rxpeek $I19, rx482_bstack, rxcap485_fail1451
    inc $I19
    set $I11, rx482_bstack[$I19]
    $P11 = rx482_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx482_pos)
    rx482_cstack = rx482_cur."!cursor_capture"($P11, "sym")
    goto rxcap485_done1450
  rxcap485_fail1451:
    goto rx482_fail1440
  rxcap485_done1450:
    repr_bind_attr_int rx482_cur, rx482_curclass, "$!pos", rx482_pos
    $P11 = rx482_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx482_curclass, "$!pos"
    lt $I11, 0, rx482_fail1440
    nqp_rxmark rx482_bstack, rxsubrule486_pass1452, -1, 0
  rxsubrule486_pass1452:
    rx482_cstack = rx482_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx482_pos, $P11, rx482_curclass, "$!pos"
    rx482_cur."!cursor_pass"(rx482_pos, "package_declarator:sym<module>", 'backtrack'=>1)
    .return (rx482_cur)
  rx482_restart1439:
    repr_get_attr_obj rx482_cstack, rx482_cur, rx482_curclass, "$!cstack"
  rx482_fail1440:
    unless rx482_bstack, rx482_done1438
    pop $I19, rx482_bstack
    if_null rx482_cstack, rx482_cstack_done1443
    unless rx482_cstack, rx482_cstack_done1443
    dec $I19
    set $P11, rx482_cstack[$I19]
  rx482_cstack_done1443:
    pop rx482_rep, rx482_bstack
    pop rx482_pos, rx482_bstack
    pop $I19, rx482_bstack
    lt rx482_pos, -1, rx482_done1438
    lt rx482_pos, 0, rx482_fail1440
    eq $I19, 0, rx482_fail1440
    nqp_islist $I20, rx482_cstack
    unless $I20, rx482_jump1441
    elements $I18, rx482_bstack
    le $I18, 0, rx482_cut1442
    dec $I18
    set $I18, rx482_bstack[$I18]
  rx482_cut1442:
    assign rx482_cstack, $I18
  rx482_jump1441:
    jump $I19
  rx482_done1438:
    rx482_cur."!cursor_fail"()
    .return (rx482_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_100_1347804164.33_caps" :subid("cuid_memo_136_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_100_1347804164.33_nfa" :subid("cuid_memo_137_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 109
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 111
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 100
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 117
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 108
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 101
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 8
    push $P5035, $P5036
    box $P5037, "package_def"
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_101_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 923
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx487_tgt
    .local int rx487_pos
    .local int rx487_off
    .local int rx487_eos
    .local int rx487_rep
    .local pmc rx487_cur
    .local pmc rx487_curclass
    .local pmc rx487_bstack
    .local pmc rx487_cstack
    (rx487_cur, rx487_tgt, rx487_pos, rx487_curclass, rx487_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx487_cur
    length rx487_eos, rx487_tgt
    eq $I19, 1, rx487_restart1455
    gt rx487_pos, rx487_eos, rx487_fail1456
    repr_get_attr_int $I11, self, rx487_curclass, "$!from"
    ne $I11, -1, rxscan488_done1462
    goto rxscan488_scan1461
  rxscan488_loop1460:
    inc rx487_pos
    gt rx487_pos, rx487_eos, rx487_fail1456
    repr_bind_attr_int rx487_cur, rx487_curclass, "$!from", rx487_pos
  rxscan488_scan1461:
    nqp_rxmark rx487_bstack, rxscan488_loop1460, rx487_pos, 0
  rxscan488_done1462:
    repr_bind_attr_int rx487_cur, rx487_curclass, "$!pos", rx487_pos
    store_lex unicode:"$\x{a2}", rx487_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1463
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1464
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5007
  fallback1464:
    unless_null $P5004, vivi_4891465
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4891465:
    set $P5003, $P5004
  fallback1463:
    set $P101, $P5003
    repr_bind_attr_int rx487_cur, rx487_curclass, "$!pos", rx487_pos
    store_lex unicode:"$\x{a2}", rx487_cur
    box $P5009, "knowhow"
    set $P102, $P5009
    nqp_rxmark rx487_bstack, rxcap490_fail1467, rx487_pos, 0
    add $I11, rx487_pos, 7
    gt $I11, rx487_eos, rx487_fail1456
    substr $S10, rx487_tgt, rx487_pos, 7
    ne $S10, ucs4:"knowhow", rx487_fail1456
    add rx487_pos, 7
    nqp_rxpeek $I19, rx487_bstack, rxcap490_fail1467
    inc $I19
    set $I11, rx487_bstack[$I19]
    $P11 = rx487_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx487_pos)
    rx487_cstack = rx487_cur."!cursor_capture"($P11, "sym")
    goto rxcap490_done1466
  rxcap490_fail1467:
    goto rx487_fail1456
  rxcap490_done1466:
    repr_bind_attr_int rx487_cur, rx487_curclass, "$!pos", rx487_pos
    $P11 = rx487_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx487_curclass, "$!pos"
    lt $I11, 0, rx487_fail1456
    nqp_rxmark rx487_bstack, rxsubrule491_pass1468, -1, 0
  rxsubrule491_pass1468:
    rx487_cstack = rx487_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx487_pos, $P11, rx487_curclass, "$!pos"
    rx487_cur."!cursor_pass"(rx487_pos, "package_declarator:sym<knowhow>", 'backtrack'=>1)
    .return (rx487_cur)
  rx487_restart1455:
    repr_get_attr_obj rx487_cstack, rx487_cur, rx487_curclass, "$!cstack"
  rx487_fail1456:
    unless rx487_bstack, rx487_done1454
    pop $I19, rx487_bstack
    if_null rx487_cstack, rx487_cstack_done1459
    unless rx487_cstack, rx487_cstack_done1459
    dec $I19
    set $P11, rx487_cstack[$I19]
  rx487_cstack_done1459:
    pop rx487_rep, rx487_bstack
    pop rx487_pos, rx487_bstack
    pop $I19, rx487_bstack
    lt rx487_pos, -1, rx487_done1454
    lt rx487_pos, 0, rx487_fail1456
    eq $I19, 0, rx487_fail1456
    nqp_islist $I20, rx487_cstack
    unless $I20, rx487_jump1457
    elements $I18, rx487_bstack
    le $I18, 0, rx487_cut1458
    dec $I18
    set $I18, rx487_bstack[$I18]
  rx487_cut1458:
    assign rx487_cstack, $I18
  rx487_jump1457:
    jump $I19
  rx487_done1454:
    rx487_cur."!cursor_fail"()
    .return (rx487_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_101_1347804164.33_caps" :subid("cuid_memo_138_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_101_1347804164.33_nfa" :subid("cuid_memo_139_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 107
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 110
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 111
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 119
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 104
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 111
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 2
    push $P5035, $P5036
    box $P5037, 119
    push $P5035, $P5037
    box $P5038, 10
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 8
    push $P5039, $P5040
    box $P5041, "package_def"
    push $P5039, $P5041
    box $P5042, 0
    push $P5039, $P5042
    push $P5001, $P5039
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_102_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 928
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx492_tgt
    .local int rx492_pos
    .local int rx492_off
    .local int rx492_eos
    .local int rx492_rep
    .local pmc rx492_cur
    .local pmc rx492_curclass
    .local pmc rx492_bstack
    .local pmc rx492_cstack
    (rx492_cur, rx492_tgt, rx492_pos, rx492_curclass, rx492_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx492_cur
    length rx492_eos, rx492_tgt
    eq $I19, 1, rx492_restart1471
    gt rx492_pos, rx492_eos, rx492_fail1472
    repr_get_attr_int $I11, self, rx492_curclass, "$!from"
    ne $I11, -1, rxscan493_done1478
    goto rxscan493_scan1477
  rxscan493_loop1476:
    inc rx492_pos
    gt rx492_pos, rx492_eos, rx492_fail1472
    repr_bind_attr_int rx492_cur, rx492_curclass, "$!from", rx492_pos
  rxscan493_scan1477:
    nqp_rxmark rx492_bstack, rxscan493_loop1476, rx492_pos, 0
  rxscan493_done1478:
    repr_bind_attr_int rx492_cur, rx492_curclass, "$!pos", rx492_pos
    store_lex unicode:"$\x{a2}", rx492_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1479
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1480
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5007
  fallback1480:
    unless_null $P5004, vivi_4941481
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4941481:
    set $P5003, $P5004
  fallback1479:
    set $P101, $P5003
    repr_bind_attr_int rx492_cur, rx492_curclass, "$!pos", rx492_pos
    store_lex unicode:"$\x{a2}", rx492_cur
    box $P5009, "class"
    set $P102, $P5009
    nqp_rxmark rx492_bstack, rxcap495_fail1483, rx492_pos, 0
    add $I11, rx492_pos, 5
    gt $I11, rx492_eos, rx492_fail1472
    substr $S10, rx492_tgt, rx492_pos, 5
    ne $S10, ucs4:"class", rx492_fail1472
    add rx492_pos, 5
    nqp_rxpeek $I19, rx492_bstack, rxcap495_fail1483
    inc $I19
    set $I11, rx492_bstack[$I19]
    $P11 = rx492_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx492_pos)
    rx492_cstack = rx492_cur."!cursor_capture"($P11, "sym")
    goto rxcap495_done1482
  rxcap495_fail1483:
    goto rx492_fail1472
  rxcap495_done1482:
    repr_bind_attr_int rx492_cur, rx492_curclass, "$!pos", rx492_pos
    $P11 = rx492_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx492_curclass, "$!pos"
    lt $I11, 0, rx492_fail1472
    nqp_rxmark rx492_bstack, rxsubrule496_pass1484, -1, 0
  rxsubrule496_pass1484:
    rx492_cstack = rx492_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx492_pos, $P11, rx492_curclass, "$!pos"
    rx492_cur."!cursor_pass"(rx492_pos, "package_declarator:sym<class>", 'backtrack'=>1)
    .return (rx492_cur)
  rx492_restart1471:
    repr_get_attr_obj rx492_cstack, rx492_cur, rx492_curclass, "$!cstack"
  rx492_fail1472:
    unless rx492_bstack, rx492_done1470
    pop $I19, rx492_bstack
    if_null rx492_cstack, rx492_cstack_done1475
    unless rx492_cstack, rx492_cstack_done1475
    dec $I19
    set $P11, rx492_cstack[$I19]
  rx492_cstack_done1475:
    pop rx492_rep, rx492_bstack
    pop rx492_pos, rx492_bstack
    pop $I19, rx492_bstack
    lt rx492_pos, -1, rx492_done1470
    lt rx492_pos, 0, rx492_fail1472
    eq $I19, 0, rx492_fail1472
    nqp_islist $I20, rx492_cstack
    unless $I20, rx492_jump1473
    elements $I18, rx492_bstack
    le $I18, 0, rx492_cut1474
    dec $I18
    set $I18, rx492_bstack[$I18]
  rx492_cut1474:
    assign rx492_cstack, $I18
  rx492_jump1473:
    jump $I19
  rx492_done1470:
    rx492_cur."!cursor_fail"()
    .return (rx492_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_102_1347804164.33_caps" :subid("cuid_memo_140_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_102_1347804164.33_nfa" :subid("cuid_memo_141_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 99
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 108
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 97
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 115
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 115
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 8
    push $P5031, $P5032
    box $P5033, "package_def"
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_103_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 933
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx497_tgt
    .local int rx497_pos
    .local int rx497_off
    .local int rx497_eos
    .local int rx497_rep
    .local pmc rx497_cur
    .local pmc rx497_curclass
    .local pmc rx497_bstack
    .local pmc rx497_cstack
    (rx497_cur, rx497_tgt, rx497_pos, rx497_curclass, rx497_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx497_cur
    length rx497_eos, rx497_tgt
    eq $I19, 1, rx497_restart1487
    gt rx497_pos, rx497_eos, rx497_fail1488
    repr_get_attr_int $I11, self, rx497_curclass, "$!from"
    ne $I11, -1, rxscan498_done1494
    goto rxscan498_scan1493
  rxscan498_loop1492:
    inc rx497_pos
    gt rx497_pos, rx497_eos, rx497_fail1488
    repr_bind_attr_int rx497_cur, rx497_curclass, "$!from", rx497_pos
  rxscan498_scan1493:
    nqp_rxmark rx497_bstack, rxscan498_loop1492, rx497_pos, 0
  rxscan498_done1494:
    repr_bind_attr_int rx497_cur, rx497_curclass, "$!pos", rx497_pos
    store_lex unicode:"$\x{a2}", rx497_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1495
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1496
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5007
  fallback1496:
    unless_null $P5004, vivi_4991497
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_4991497:
    set $P5003, $P5004
  fallback1495:
    set $P101, $P5003
    repr_bind_attr_int rx497_cur, rx497_curclass, "$!pos", rx497_pos
    store_lex unicode:"$\x{a2}", rx497_cur
    box $P5009, "grammar"
    set $P102, $P5009
    nqp_rxmark rx497_bstack, rxcap500_fail1499, rx497_pos, 0
    add $I11, rx497_pos, 7
    gt $I11, rx497_eos, rx497_fail1488
    substr $S10, rx497_tgt, rx497_pos, 7
    ne $S10, ucs4:"grammar", rx497_fail1488
    add rx497_pos, 7
    nqp_rxpeek $I19, rx497_bstack, rxcap500_fail1499
    inc $I19
    set $I11, rx497_bstack[$I19]
    $P11 = rx497_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx497_pos)
    rx497_cstack = rx497_cur."!cursor_capture"($P11, "sym")
    goto rxcap500_done1498
  rxcap500_fail1499:
    goto rx497_fail1488
  rxcap500_done1498:
    repr_bind_attr_int rx497_cur, rx497_curclass, "$!pos", rx497_pos
    $P11 = rx497_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx497_curclass, "$!pos"
    lt $I11, 0, rx497_fail1488
    nqp_rxmark rx497_bstack, rxsubrule501_pass1500, -1, 0
  rxsubrule501_pass1500:
    rx497_cstack = rx497_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx497_pos, $P11, rx497_curclass, "$!pos"
    rx497_cur."!cursor_pass"(rx497_pos, "package_declarator:sym<grammar>", 'backtrack'=>1)
    .return (rx497_cur)
  rx497_restart1487:
    repr_get_attr_obj rx497_cstack, rx497_cur, rx497_curclass, "$!cstack"
  rx497_fail1488:
    unless rx497_bstack, rx497_done1486
    pop $I19, rx497_bstack
    if_null rx497_cstack, rx497_cstack_done1491
    unless rx497_cstack, rx497_cstack_done1491
    dec $I19
    set $P11, rx497_cstack[$I19]
  rx497_cstack_done1491:
    pop rx497_rep, rx497_bstack
    pop rx497_pos, rx497_bstack
    pop $I19, rx497_bstack
    lt rx497_pos, -1, rx497_done1486
    lt rx497_pos, 0, rx497_fail1488
    eq $I19, 0, rx497_fail1488
    nqp_islist $I20, rx497_cstack
    unless $I20, rx497_jump1489
    elements $I18, rx497_bstack
    le $I18, 0, rx497_cut1490
    dec $I18
    set $I18, rx497_bstack[$I18]
  rx497_cut1490:
    assign rx497_cstack, $I18
  rx497_jump1489:
    jump $I19
  rx497_done1486:
    rx497_cur."!cursor_fail"()
    .return (rx497_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_103_1347804164.33_caps" :subid("cuid_memo_142_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_103_1347804164.33_nfa" :subid("cuid_memo_143_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 103
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 114
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 97
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 109
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 109
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 97
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 2
    push $P5035, $P5036
    box $P5037, 114
    push $P5035, $P5037
    box $P5038, 10
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 8
    push $P5039, $P5040
    box $P5041, "package_def"
    push $P5039, $P5041
    box $P5042, 0
    push $P5039, $P5042
    push $P5001, $P5039
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_104_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 938
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx502_tgt
    .local int rx502_pos
    .local int rx502_off
    .local int rx502_eos
    .local int rx502_rep
    .local pmc rx502_cur
    .local pmc rx502_curclass
    .local pmc rx502_bstack
    .local pmc rx502_cstack
    (rx502_cur, rx502_tgt, rx502_pos, rx502_curclass, rx502_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx502_cur
    length rx502_eos, rx502_tgt
    eq $I19, 1, rx502_restart1503
    gt rx502_pos, rx502_eos, rx502_fail1504
    repr_get_attr_int $I11, self, rx502_curclass, "$!from"
    ne $I11, -1, rxscan503_done1510
    goto rxscan503_scan1509
  rxscan503_loop1508:
    inc rx502_pos
    gt rx502_pos, rx502_eos, rx502_fail1504
    repr_bind_attr_int rx502_cur, rx502_curclass, "$!from", rx502_pos
  rxscan503_scan1509:
    nqp_rxmark rx502_bstack, rxscan503_loop1508, rx502_pos, 0
  rxscan503_done1510:
    repr_bind_attr_int rx502_cur, rx502_curclass, "$!pos", rx502_pos
    store_lex unicode:"$\x{a2}", rx502_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1511
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1512
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5007
  fallback1512:
    unless_null $P5004, vivi_5041513
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5041513:
    set $P5003, $P5004
  fallback1511:
    set $P101, $P5003
    repr_bind_attr_int rx502_cur, rx502_curclass, "$!pos", rx502_pos
    store_lex unicode:"$\x{a2}", rx502_cur
    box $P5009, "role"
    set $P102, $P5009
    nqp_rxmark rx502_bstack, rxcap505_fail1515, rx502_pos, 0
    add $I11, rx502_pos, 4
    gt $I11, rx502_eos, rx502_fail1504
    substr $S10, rx502_tgt, rx502_pos, 4
    ne $S10, ucs4:"role", rx502_fail1504
    add rx502_pos, 4
    nqp_rxpeek $I19, rx502_bstack, rxcap505_fail1515
    inc $I19
    set $I11, rx502_bstack[$I19]
    $P11 = rx502_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx502_pos)
    rx502_cstack = rx502_cur."!cursor_capture"($P11, "sym")
    goto rxcap505_done1514
  rxcap505_fail1515:
    goto rx502_fail1504
  rxcap505_done1514:
    repr_bind_attr_int rx502_cur, rx502_curclass, "$!pos", rx502_pos
    $P11 = rx502_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx502_curclass, "$!pos"
    lt $I11, 0, rx502_fail1504
    nqp_rxmark rx502_bstack, rxsubrule506_pass1516, -1, 0
  rxsubrule506_pass1516:
    rx502_cstack = rx502_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx502_pos, $P11, rx502_curclass, "$!pos"
    rx502_cur."!cursor_pass"(rx502_pos, "package_declarator:sym<role>", 'backtrack'=>1)
    .return (rx502_cur)
  rx502_restart1503:
    repr_get_attr_obj rx502_cstack, rx502_cur, rx502_curclass, "$!cstack"
  rx502_fail1504:
    unless rx502_bstack, rx502_done1502
    pop $I19, rx502_bstack
    if_null rx502_cstack, rx502_cstack_done1507
    unless rx502_cstack, rx502_cstack_done1507
    dec $I19
    set $P11, rx502_cstack[$I19]
  rx502_cstack_done1507:
    pop rx502_rep, rx502_bstack
    pop rx502_pos, rx502_bstack
    pop $I19, rx502_bstack
    lt rx502_pos, -1, rx502_done1502
    lt rx502_pos, 0, rx502_fail1504
    eq $I19, 0, rx502_fail1504
    nqp_islist $I20, rx502_cstack
    unless $I20, rx502_jump1505
    elements $I18, rx502_bstack
    le $I18, 0, rx502_cut1506
    dec $I18
    set $I18, rx502_bstack[$I18]
  rx502_cut1506:
    assign rx502_cstack, $I18
  rx502_jump1505:
    jump $I19
  rx502_done1502:
    rx502_cur."!cursor_fail"()
    .return (rx502_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_104_1347804164.33_caps" :subid("cuid_memo_144_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_104_1347804164.33_nfa" :subid("cuid_memo_145_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 111
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 108
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 101
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "package_def"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_105_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 943
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx507_tgt
    .local int rx507_pos
    .local int rx507_off
    .local int rx507_eos
    .local int rx507_rep
    .local pmc rx507_cur
    .local pmc rx507_curclass
    .local pmc rx507_bstack
    .local pmc rx507_cstack
    (rx507_cur, rx507_tgt, rx507_pos, rx507_curclass, rx507_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx507_cur
    length rx507_eos, rx507_tgt
    eq $I19, 1, rx507_restart1519
    gt rx507_pos, rx507_eos, rx507_fail1520
    repr_get_attr_int $I11, self, rx507_curclass, "$!from"
    ne $I11, -1, rxscan508_done1526
    goto rxscan508_scan1525
  rxscan508_loop1524:
    inc rx507_pos
    gt rx507_pos, rx507_eos, rx507_fail1520
    repr_bind_attr_int rx507_cur, rx507_curclass, "$!from", rx507_pos
  rxscan508_scan1525:
    nqp_rxmark rx507_bstack, rxscan508_loop1524, rx507_pos, 0
  rxscan508_done1526:
    repr_bind_attr_int rx507_cur, rx507_curclass, "$!pos", rx507_pos
    store_lex unicode:"$\x{a2}", rx507_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1527
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1528
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5007
  fallback1528:
    unless_null $P5004, vivi_5091529
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5091529:
    set $P5003, $P5004
  fallback1527:
    set $P101, $P5003
    repr_bind_attr_int rx507_cur, rx507_curclass, "$!pos", rx507_pos
    store_lex unicode:"$\x{a2}", rx507_cur
    box $P5009, "native"
    set $P102, $P5009
    nqp_rxmark rx507_bstack, rxcap510_fail1531, rx507_pos, 0
    add $I11, rx507_pos, 6
    gt $I11, rx507_eos, rx507_fail1520
    substr $S10, rx507_tgt, rx507_pos, 6
    ne $S10, ucs4:"native", rx507_fail1520
    add rx507_pos, 6
    nqp_rxpeek $I19, rx507_bstack, rxcap510_fail1531
    inc $I19
    set $I11, rx507_bstack[$I19]
    $P11 = rx507_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx507_pos)
    rx507_cstack = rx507_cur."!cursor_capture"($P11, "sym")
    goto rxcap510_done1530
  rxcap510_fail1531:
    goto rx507_fail1520
  rxcap510_done1530:
    repr_bind_attr_int rx507_cur, rx507_curclass, "$!pos", rx507_pos
    $P11 = rx507_cur."package_def"()
    repr_get_attr_int $I11, $P11, rx507_curclass, "$!pos"
    lt $I11, 0, rx507_fail1520
    nqp_rxmark rx507_bstack, rxsubrule511_pass1532, -1, 0
  rxsubrule511_pass1532:
    rx507_cstack = rx507_cur."!cursor_capture"($P11, "package_def")
    repr_get_attr_int rx507_pos, $P11, rx507_curclass, "$!pos"
    rx507_cur."!cursor_pass"(rx507_pos, "package_declarator:sym<native>", 'backtrack'=>1)
    .return (rx507_cur)
  rx507_restart1519:
    repr_get_attr_obj rx507_cstack, rx507_cur, rx507_curclass, "$!cstack"
  rx507_fail1520:
    unless rx507_bstack, rx507_done1518
    pop $I19, rx507_bstack
    if_null rx507_cstack, rx507_cstack_done1523
    unless rx507_cstack, rx507_cstack_done1523
    dec $I19
    set $P11, rx507_cstack[$I19]
  rx507_cstack_done1523:
    pop rx507_rep, rx507_bstack
    pop rx507_pos, rx507_bstack
    pop $I19, rx507_bstack
    lt rx507_pos, -1, rx507_done1518
    lt rx507_pos, 0, rx507_fail1520
    eq $I19, 0, rx507_fail1520
    nqp_islist $I20, rx507_cstack
    unless $I20, rx507_jump1521
    elements $I18, rx507_bstack
    le $I18, 0, rx507_cut1522
    dec $I18
    set $I18, rx507_bstack[$I18]
  rx507_cut1522:
    assign rx507_cstack, $I18
  rx507_jump1521:
    jump $I19
  rx507_done1518:
    rx507_cur."!cursor_fail"()
    .return (rx507_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_105_1347804164.33_caps" :subid("cuid_memo_146_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["package_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_105_1347804164.33_nfa" :subid("cuid_memo_147_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 110
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 97
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 116
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 105
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 118
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 101
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 8
    push $P5035, $P5036
    box $P5037, "package_def"
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_106_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 948
    .param pmc _lex_param_0 
    .lex "$*OUTERPACKAGE", $P101 
    .lex "$*PKGDECL", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx512_tgt
    .local int rx512_pos
    .local int rx512_off
    .local int rx512_eos
    .local int rx512_rep
    .local pmc rx512_cur
    .local pmc rx512_curclass
    .local pmc rx512_bstack
    .local pmc rx512_cstack
    (rx512_cur, rx512_tgt, rx512_pos, rx512_curclass, rx512_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx512_cur
    length rx512_eos, rx512_tgt
    eq $I19, 1, rx512_restart1535
    gt rx512_pos, rx512_eos, rx512_fail1536
    repr_get_attr_int $I11, self, rx512_curclass, "$!from"
    ne $I11, -1, rxscan513_done1542
    goto rxscan513_scan1541
  rxscan513_loop1540:
    inc rx512_pos
    gt rx512_pos, rx512_eos, rx512_fail1536
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!from", rx512_pos
  rxscan513_scan1541:
    nqp_rxmark rx512_bstack, rxscan513_loop1540, rx512_pos, 0
  rxscan513_done1542:
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    store_lex unicode:"$\x{a2}", rx512_cur
    find_dynamic_lex $P5003, "$*PACKAGE"
    unless_null $P5003, fallback1543
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$PACKAGE"]
    unless_null $P5004, fallback1544
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5007
  fallback1544:
    unless_null $P5004, vivi_5141545
    die "Contextual $*PACKAGE not found"
    box $P5008, "Contextual $*PACKAGE not found"
    set $P5004, $P5008
  vivi_5141545:
    set $P5003, $P5004
  fallback1543:
    set $P101, $P5003
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    store_lex unicode:"$\x{a2}", rx512_cur
    box $P5009, "stub"
    set $P102, $P5009
    nqp_rxmark rx512_bstack, rxcap515_fail1547, rx512_pos, 0
    add $I11, rx512_pos, 4
    gt $I11, rx512_eos, rx512_fail1536
    substr $S10, rx512_tgt, rx512_pos, 4
    ne $S10, ucs4:"stub", rx512_fail1536
    add rx512_pos, 4
    nqp_rxpeek $I19, rx512_bstack, rxcap515_fail1547
    inc $I19
    set $I11, rx512_bstack[$I19]
    $P11 = rx512_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx512_pos)
    rx512_cstack = rx512_cur."!cursor_capture"($P11, "sym")
    goto rxcap515_done1546
  rxcap515_fail1547:
    goto rx512_fail1536
  rxcap515_done1546:
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."ws"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1536
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."name"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1536
    nqp_rxmark rx512_bstack, rxsubrule517_pass1549, -1, 0
  rxsubrule517_pass1549:
    rx512_cstack = rx512_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."ws"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1536
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    add $I11, rx512_pos, 9
    gt $I11, rx512_eos, rx512_fail1536
    substr $S10, rx512_tgt, rx512_pos, 9
    ne $S10, ucs4:"metaclass", rx512_fail1536
    add rx512_pos, 9
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."ws"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1536
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."name"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1536
    nqp_rxmark rx512_bstack, rxsubrule520_pass1552, -1, 0
  rxsubrule520_pass1552:
    rx512_cstack = rx512_cur."!cursor_capture"($P11, "metaclass")
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."ws"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1536
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    add $I11, rx512_pos, 1
    gt $I11, rx512_eos, rx512_fail1536
    substr $S10, rx512_tgt, rx512_pos, 1
    ne $S10, ucs4:"{", rx512_fail1536
    add rx512_pos, 1
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."ws"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1536
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    add $I11, rx512_pos, 3
    gt $I11, rx512_eos, rx512_fail1536
    substr $S10, rx512_tgt, rx512_pos, 3
    ne $S10, ucs4:"...", rx512_fail1536
    add rx512_pos, 3
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."ws"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1536
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    add $I11, rx512_pos, 1
    gt $I11, rx512_eos, rx512_fail1536
    substr $S10, rx512_tgt, rx512_pos, 1
    ne $S10, ucs4:"}", rx512_fail1536
    add rx512_pos, 1
    repr_bind_attr_int rx512_cur, rx512_curclass, "$!pos", rx512_pos
    $P11 = rx512_cur."ws"()
    repr_get_attr_int $I11, $P11, rx512_curclass, "$!pos"
    lt $I11, 0, rx512_fail1536
    repr_get_attr_int rx512_pos, $P11, rx512_curclass, "$!pos"
    rx512_cur."!cursor_pass"(rx512_pos, "package_declarator:sym<stub>", 'backtrack'=>1)
    .return (rx512_cur)
  rx512_restart1535:
    repr_get_attr_obj rx512_cstack, rx512_cur, rx512_curclass, "$!cstack"
  rx512_fail1536:
    unless rx512_bstack, rx512_done1534
    pop $I19, rx512_bstack
    if_null rx512_cstack, rx512_cstack_done1539
    unless rx512_cstack, rx512_cstack_done1539
    dec $I19
    set $P11, rx512_cstack[$I19]
  rx512_cstack_done1539:
    pop rx512_rep, rx512_bstack
    pop rx512_pos, rx512_bstack
    pop $I19, rx512_bstack
    lt rx512_pos, -1, rx512_done1534
    lt rx512_pos, 0, rx512_fail1536
    eq $I19, 0, rx512_fail1536
    nqp_islist $I20, rx512_cstack
    unless $I20, rx512_jump1537
    elements $I18, rx512_bstack
    le $I18, 0, rx512_cut1538
    dec $I18
    set $I18, rx512_bstack[$I18]
  rx512_cut1538:
    assign rx512_cstack, $I18
  rx512_jump1537:
    jump $I19
  rx512_done1534:
    rx512_cur."!cursor_fail"()
    .return (rx512_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_106_1347804164.33_caps" :subid("cuid_memo_148_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["name"], $P5003
    box $P5004, 0
    set $P5001["metaclass"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_106_1347804164.33_nfa" :subid("cuid_memo_149_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 115
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 116
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 117
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 98
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 0
    push $P5027, $P5028
    box $P5029, 0
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_107_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 956
    .param pmc _lex_param_0 
    .const 'Sub' $P5010 = 'cuid_389_1347804164.33' 
    capture_lex $P5010 
    .lex "$*PACKAGE", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx525_tgt
    .local int rx525_pos
    .local int rx525_off
    .local int rx525_eos
    .local int rx525_rep
    .local pmc rx525_cur
    .local pmc rx525_curclass
    .local pmc rx525_bstack
    .local pmc rx525_cstack
    (rx525_cur, rx525_tgt, rx525_pos, rx525_curclass, rx525_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx525_cur
    length rx525_eos, rx525_tgt
    eq $I19, 1, rx525_restart1559
    gt rx525_pos, rx525_eos, rx525_fail1560
    repr_get_attr_int $I11, self, rx525_curclass, "$!from"
    ne $I11, -1, rxscan526_done1566
    goto rxscan526_scan1565
  rxscan526_loop1564:
    inc rx525_pos
    gt rx525_pos, rx525_eos, rx525_fail1560
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!from", rx525_pos
  rxscan526_scan1565:
    nqp_rxmark rx525_bstack, rxscan526_loop1564, rx525_pos, 0
  rxscan526_done1566:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    store_lex unicode:"$\x{a2}", rx525_cur
    unless_null $P101, fallback1568
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$PACKAGE"]
    unless_null $P5002, fallback1569
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5005
  fallback1569:
    unless_null $P5002, vivi_5281570
    die "Contextual $*PACKAGE not found"
    box $P5006, "Contextual $*PACKAGE not found"
    set $P5002, $P5006
  vivi_5281570:
    set $P101, $P5002
  fallback1568:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."name"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    nqp_rxmark rx525_bstack, rxsubrule530_pass1572, -1, 0
  rxsubrule530_pass1572:
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxmark rx525_bstack, rxquantr532_done1575, rx525_pos, 0
  rxquantr532_loop1574:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    add $I11, rx525_pos, 2
    gt $I11, rx525_eos, rx525_fail1560
    substr $S10, rx525_tgt, rx525_pos, 2
    ne $S10, ucs4:"is", rx525_fail1560
    add rx525_pos, 2
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    add $I11, rx525_pos, 5
    gt $I11, rx525_eos, rx525_fail1560
    substr $S10, rx525_tgt, rx525_pos, 5
    ne $S10, ucs4:"repr(", rx525_fail1560
    add rx525_pos, 5
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    nqp_rxmark rx525_bstack, rxsubrule536_pass1579, -1, 0
  rxsubrule536_pass1579:
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "repr")
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    add $I11, rx525_pos, 1
    gt $I11, rx525_eos, rx525_fail1560
    substr $S10, rx525_tgt, rx525_pos, 1
    ne $S10, ucs4:")", rx525_fail1560
    add rx525_pos, 1
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxpeek $I19, rx525_bstack, rxquantr532_done1575
    inc $I19
    inc $I19
    set rx525_rep, rx525_bstack[$I19]
    nqp_rxcommit rx525_bstack, rxquantr532_done1575
    inc rx525_rep
  rxquantr532_done1575:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    store_lex unicode:"$\x{a2}", rx525_cur
    $P5007 = $P102."MATCH"()
    set $P103, $P5007
    .const 'Sub' $P5008 = 'cuid_389_1347804164.33' 
    capture_lex $P5008
    $P5009 = $P5008()
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxmark rx525_bstack, rxquantr563_done1675, rx525_pos, 0
  rxquantr563_loop1674:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxmark rx525_bstack, rxcap565_fail1678, rx525_pos, 0
    add $I11, rx525_pos, 9
    gt $I11, rx525_eos, rx525_fail1560
    substr $S10, rx525_tgt, rx525_pos, 9
    ne $S10, ucs4:"is export", rx525_fail1560
    add rx525_pos, 9
    nqp_rxpeek $I19, rx525_bstack, rxcap565_fail1678
    inc $I19
    set $I11, rx525_bstack[$I19]
    $P11 = rx525_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx525_pos)
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "export")
    goto rxcap565_done1677
  rxcap565_fail1678:
    goto rx525_fail1560
  rxcap565_done1677:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxpeek $I19, rx525_bstack, rxquantr563_done1675
    inc $I19
    inc $I19
    set rx525_rep, rx525_bstack[$I19]
    nqp_rxcommit rx525_bstack, rxquantr563_done1675
    inc rx525_rep
  rxquantr563_done1675:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxmark rx525_bstack, rxquantr568_done1682, rx525_pos, 0
  rxquantr568_loop1681:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    add $I11, rx525_pos, 2
    gt $I11, rx525_eos, rx525_fail1560
    substr $S10, rx525_tgt, rx525_pos, 2
    ne $S10, ucs4:"is", rx525_fail1560
    add rx525_pos, 2
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."name"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    nqp_rxmark rx525_bstack, rxsubrule571_pass1685, -1, 0
  rxsubrule571_pass1685:
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "parent")
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxpeek $I19, rx525_bstack, rxquantr568_done1682
    inc $I19
    inc $I19
    set rx525_rep, rx525_bstack[$I19]
    nqp_rxcommit rx525_bstack, rxquantr568_done1682
    inc rx525_rep
  rxquantr568_done1682:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxmark rx525_bstack, rxquantr574_done1689, rx525_pos, 0
  rxquantr574_loop1688:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    add $I11, rx525_pos, 4
    gt $I11, rx525_eos, rx525_fail1560
    substr $S10, rx525_tgt, rx525_pos, 4
    ne $S10, ucs4:"does", rx525_fail1560
    add rx525_pos, 4
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."name"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    nqp_rxmark rx525_bstack, rxsubrule577_pass1692, -1, 0
  rxsubrule577_pass1692:
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "role")
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    nqp_rxpeek $I19, rx525_bstack, rxquantr574_done1689
    inc $I19
    inc $I19
    set rx525_rep, rx525_bstack[$I19]
    nqp_rxcommit rx525_bstack, rxquantr574_done1689
    inc rx525_rep
    nqp_rxmark rx525_bstack, rxquantr574_done1689, rx525_pos, rx525_rep
    goto rxquantr574_loop1688
  rxquantr574_done1689:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
  alt580_01696:
    nqp_rxmark rx525_bstack, alt580_11701, rx525_pos, 0
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    add $I11, rx525_pos, 1
    gt $I11, rx525_eos, rx525_fail1560
    substr $S10, rx525_tgt, rx525_pos, 1
    ne $S10, ucs4:";", rx525_fail1560
    add rx525_pos, 1
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."comp_unit"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    nqp_rxmark rx525_bstack, rxsubrule583_pass1699, -1, 0
  rxsubrule583_pass1699:
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "comp_unit")
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    goto alt580_end1695
  alt580_11701:
    nqp_rxmark rx525_bstack, alt580_21706, rx525_pos, 0
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    ge rx525_pos, rx525_eos, rx525_fail1560
    substr $S11, rx525_tgt, rx525_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx525_fail1560
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."block"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    nqp_rxmark rx525_bstack, rxsubrule587_pass1704, -1, 0
  rxsubrule587_pass1704:
    rx525_cstack = rx525_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    goto alt580_end1695
  alt580_21706:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."panic"("Malformed package declaration")
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
  alt580_end1695:
    repr_bind_attr_int rx525_cur, rx525_curclass, "$!pos", rx525_pos
    $P11 = rx525_cur."ws"()
    repr_get_attr_int $I11, $P11, rx525_curclass, "$!pos"
    lt $I11, 0, rx525_fail1560
    repr_get_attr_int rx525_pos, $P11, rx525_curclass, "$!pos"
    rx525_cur."!cursor_pass"(rx525_pos, "package_def", 'backtrack'=>1)
    .return (rx525_cur)
  rx525_restart1559:
    repr_get_attr_obj rx525_cstack, rx525_cur, rx525_curclass, "$!cstack"
  rx525_fail1560:
    unless rx525_bstack, rx525_done1558
    pop $I19, rx525_bstack
    if_null rx525_cstack, rx525_cstack_done1563
    unless rx525_cstack, rx525_cstack_done1563
    dec $I19
    set $P11, rx525_cstack[$I19]
  rx525_cstack_done1563:
    pop rx525_rep, rx525_bstack
    pop rx525_pos, rx525_bstack
    pop $I19, rx525_bstack
    lt rx525_pos, -1, rx525_done1558
    lt rx525_pos, 0, rx525_fail1560
    eq $I19, 0, rx525_fail1560
    nqp_islist $I20, rx525_cstack
    unless $I20, rx525_jump1561
    elements $I18, rx525_bstack
    le $I18, 0, rx525_cut1562
    dec $I18
    set $I18, rx525_bstack[$I18]
  rx525_cut1562:
    assign rx525_cstack, $I18
  rx525_jump1561:
    jump $I19
  rx525_done1558:
    rx525_cur."!cursor_fail"()
    .return (rx525_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_107_1347804164.33_caps" :subid("cuid_memo_150_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["name"], $P5002
    box $P5003, 2
    set $P5001["repr"], $P5003
    box $P5004, 2
    set $P5001["export"], $P5004
    box $P5005, 2
    set $P5001["parent"], $P5005
    box $P5006, 2
    set $P5001["role"], $P5006
    box $P5007, 0
    set $P5001["comp_unit"], $P5007
    box $P5008, 0
    set $P5001["block"], $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_389_1347804164.33") :anon :lex :outer("cuid_107_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 962
    .lex "%args", $P101 
    new $P5001, 'Hash'
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback1583
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5004
  fallback1583:
    set $P5002, $P5003["name"]
    unless_null $P5002, fallback1584
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5005
  fallback1584:
    set $S5001, $P5002
    box $P5006, $S5001
    set $P101["name"], $P5006
    find_lex $P5008, "$/"
    unless_null $P5008, fallback1587
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5009
  fallback1587:
    set $P5007, $P5008["repr"]
    unless_null $P5007, fallback1588
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5010
  fallback1588:
    set $P5024, $P5007
    unless $P5007 goto if540_end1586 
.annotate 'line', 967
    find_lex $P5016, "$/"
    unless_null $P5016, fallback1589
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5016, $P5017
  fallback1589:
    set $P5015, $P5016["repr"]
    unless_null $P5015, fallback1590
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5015, $P5018
  fallback1590:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback1591
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5014, $P5019
  fallback1591:
    set $P5013, $P5014["quote_delimited"]
    unless_null $P5013, fallback1592
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5013, $P5020
  fallback1592:
    set $P5012, $P5013["quote_atom"]
    unless_null $P5012, fallback1593
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5012, $P5021
  fallback1593:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback1594
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5022
  fallback1594:
    set $S5002, $P5011
    box $P5023, $S5002
    set $P101["repr"], $P5023
    set $P5024, $P5023
  if540_end1586:
.annotate 'line', 970
    find_dynamic_lex $P5025, "$*W"
    unless_null $P5025, fallback1595
    nqp_get_sc_object $P5028, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$W"]
    unless_null $P5026, fallback1596
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5026, $P5029
  fallback1596:
    unless_null $P5026, vivi_5411597
    die "Contextual $*W not found"
    box $P5030, "Contextual $*W not found"
    set $P5026, $P5030
  vivi_5411597:
    set $P5025, $P5026
  fallback1595:
    find_dynamic_lex $P5032, "%*HOW"
    unless_null $P5032, fallback1598
    nqp_get_sc_object $P5035, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["%HOW"]
    unless_null $P5033, fallback1599
    nqp_get_sc_object $P5037, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5036, $P5037
    new $P5038, 'Hash'
    set $P5036["%HOW"], $P5038
    set $P5033, $P5038
  fallback1599:
    unless_null $P5033, vivi_5421600
    die "Contextual %*HOW not found"
    box $P5039, "Contextual %*HOW not found"
    set $P5033, $P5039
  vivi_5421600:
    set $P5032, $P5033
  fallback1598:
    find_dynamic_lex $P5040, "$*PKGDECL"
    unless_null $P5040, fallback1601
    nqp_get_sc_object $P5043, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5042, $P5043
    set $P5041, $P5042["$PKGDECL"]
    unless_null $P5041, fallback1602
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5041, $P5044
  fallback1602:
    unless_null $P5041, vivi_5431603
    die "Contextual $*PKGDECL not found"
    box $P5045, "Contextual $*PKGDECL not found"
    set $P5041, $P5045
  vivi_5431603:
    set $P5040, $P5041
  fallback1601:
    set $S5003, $P5040
    set $P5031, $P5032[$S5003]
    unless_null $P5031, fallback1604
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5031, $P5046
  fallback1604:
    $P5047 = $P5025."pkg_create_mo"($P5031, $P101 :flat :named)
    store_dynamic_lex "$*PACKAGE", $P5047
    find_dynamic_lex $P5048, "$*SCOPE"
    unless_null $P5048, fallback1609
    nqp_get_sc_object $P5051, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5050, $P5051
    set $P5049, $P5050["$SCOPE"]
    unless_null $P5049, fallback1610
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5049, $P5052
  fallback1610:
    unless_null $P5049, vivi_5461611
    die "Contextual $*SCOPE not found"
    box $P5053, "Contextual $*SCOPE not found"
    set $P5049, $P5053
  vivi_5461611:
    set $P5048, $P5049
  fallback1609:
    set $S5004, $P5048
    iseq $I5001, $S5004, "our"
    set $I5003, $I5001
    if $I5001 goto unless545_end1608 
    find_dynamic_lex $P5054, "$*SCOPE"
    unless_null $P5054, fallback1612
    nqp_get_sc_object $P5057, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["$SCOPE"]
    unless_null $P5055, fallback1613
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5055, $P5058
  fallback1613:
    unless_null $P5055, vivi_5471614
    die "Contextual $*SCOPE not found"
    box $P5059, "Contextual $*SCOPE not found"
    set $P5055, $P5059
  vivi_5471614:
    set $P5054, $P5055
  fallback1612:
    set $S5005, $P5054
    iseq $I5002, $S5005, ""
    set $I5003, $I5002
  unless545_end1608:
    unless $I5003 goto if544_else1605 
.annotate 'line', 973
.annotate 'line', 974
    find_dynamic_lex $P5060, "$*W"
    unless_null $P5060, fallback1615
    nqp_get_sc_object $P5063, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5062, $P5063
    set $P5061, $P5062["$W"]
    unless_null $P5061, fallback1616
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5061, $P5064
  fallback1616:
    unless_null $P5061, vivi_5481617
    die "Contextual $*W not found"
    box $P5065, "Contextual $*W not found"
    set $P5061, $P5065
  vivi_5481617:
    set $P5060, $P5061
  fallback1615:
    find_dynamic_lex $P5066, "$*OUTERPACKAGE"
    unless_null $P5066, fallback1618
    nqp_get_sc_object $P5069, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["$OUTERPACKAGE"]
    unless_null $P5067, fallback1619
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5067, $P5070
  fallback1619:
    unless_null $P5067, vivi_5491620
    die "Contextual $*OUTERPACKAGE not found"
    box $P5071, "Contextual $*OUTERPACKAGE not found"
    set $P5067, $P5071
  vivi_5491620:
    set $P5066, $P5067
  fallback1618:
    find_lex $P5074, "$/"
    unless_null $P5074, fallback1621
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5074, $P5075
  fallback1621:
    set $P5073, $P5074["name"]
    unless_null $P5073, fallback1622
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5073, $P5076
  fallback1622:
    set $P5072, $P5073["identifier"]
    unless_null $P5072, fallback1623
    nqp_get_sc_object $P5077, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5072, $P5077
  fallback1623:
    find_dynamic_lex $P5078, "$*PACKAGE"
    unless_null $P5078, fallback1624
    nqp_get_sc_object $P5081, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5080, $P5081
    set $P5079, $P5080["$PACKAGE"]
    unless_null $P5079, fallback1625
    nqp_get_sc_object $P5082, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5079, $P5082
  fallback1625:
    unless_null $P5079, vivi_5501626
    die "Contextual $*PACKAGE not found"
    box $P5083, "Contextual $*PACKAGE not found"
    set $P5079, $P5083
  vivi_5501626:
    set $P5078, $P5079
  fallback1624:
    $P5084 = $P5060."install_package_symbol"($P5066, $P5072, $P5078)
    find_lex $P5087, "$/"
    unless_null $P5087, fallback1629
    nqp_get_sc_object $P5088, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5087, $P5088
  fallback1629:
    set $P5086, $P5087["name"]
    unless_null $P5086, fallback1630
    nqp_get_sc_object $P5089, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5086, $P5089
  fallback1630:
    set $P5085, $P5086["identifier"]
    unless_null $P5085, fallback1631
    nqp_get_sc_object $P5090, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5085, $P5090
  fallback1631:
    set $N5001, $P5085
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5120, $I5004
    set $P5119, $P5120
    unless $I5004 goto if551_end1628 
.annotate 'line', 975
.annotate 'line', 976
    find_dynamic_lex $P5091, "$*W"
    unless_null $P5091, fallback1632
    nqp_get_sc_object $P5094, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5093, $P5094
    set $P5092, $P5093["$W"]
    unless_null $P5092, fallback1633
    nqp_get_sc_object $P5095, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5092, $P5095
  fallback1633:
    unless_null $P5092, vivi_5521634
    die "Contextual $*W not found"
    box $P5096, "Contextual $*W not found"
    set $P5092, $P5096
  vivi_5521634:
    set $P5091, $P5092
  fallback1632:
    find_dynamic_lex $P5097, "$*W"
    unless_null $P5097, fallback1635
    nqp_get_sc_object $P5100, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5099, $P5100
    set $P5098, $P5099["$W"]
    unless_null $P5098, fallback1636
    nqp_get_sc_object $P5101, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5098, $P5101
  fallback1636:
    unless_null $P5098, vivi_5531637
    die "Contextual $*W not found"
    box $P5102, "Contextual $*W not found"
    set $P5098, $P5102
  vivi_5531637:
    set $P5097, $P5098
  fallback1635:
    $P5103 = $P5097."cur_lexpad"()
    find_lex $P5107, "$/"
    unless_null $P5107, fallback1638
    nqp_get_sc_object $P5108, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5107, $P5108
  fallback1638:
    set $P5106, $P5107["name"]
    unless_null $P5106, fallback1639
    nqp_get_sc_object $P5109, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5106, $P5109
  fallback1639:
    set $P5105, $P5106["identifier"]
    unless_null $P5105, fallback1640
    nqp_get_sc_object $P5110, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5105, $P5110
  fallback1640:
    set $P5104, $P5105[0]
    unless_null $P5104, fallback1641
    nqp_get_sc_object $P5111, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5104, $P5111
  fallback1641:
    find_dynamic_lex $P5112, "$*PACKAGE"
    unless_null $P5112, fallback1642
    nqp_get_sc_object $P5115, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5114, $P5115
    set $P5113, $P5114["$PACKAGE"]
    unless_null $P5113, fallback1643
    nqp_get_sc_object $P5116, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5113, $P5116
  fallback1643:
    unless_null $P5113, vivi_5541644
    die "Contextual $*PACKAGE not found"
    box $P5117, "Contextual $*PACKAGE not found"
    set $P5113, $P5117
  vivi_5541644:
    set $P5112, $P5113
  fallback1642:
    $P5118 = $P5091."install_lexical_symbol"($P5103, $P5104, $P5112)
    set $P5119, $P5118
  if551_end1628:
    set $P5179, $P5119
    goto if544_end1606
  if544_else1605:
    find_dynamic_lex $P5121, "$*SCOPE"
    unless_null $P5121, fallback1647
    nqp_get_sc_object $P5124, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5123, $P5124
    set $P5122, $P5123["$SCOPE"]
    unless_null $P5122, fallback1648
    nqp_get_sc_object $P5125, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5122, $P5125
  fallback1648:
    unless_null $P5122, vivi_5561649
    die "Contextual $*SCOPE not found"
    box $P5126, "Contextual $*SCOPE not found"
    set $P5122, $P5126
  vivi_5561649:
    set $P5121, $P5122
  fallback1647:
    set $S5006, $P5121
    iseq $I5005, $S5006, "my"
    unless $I5005 goto if555_else1645 
.annotate 'line', 979
    find_lex $P5129, "$/"
    unless_null $P5129, fallback1652
    nqp_get_sc_object $P5130, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5129, $P5130
  fallback1652:
    set $P5128, $P5129["name"]
    unless_null $P5128, fallback1653
    nqp_get_sc_object $P5131, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5128, $P5131
  fallback1653:
    set $P5127, $P5128["identifier"]
    unless_null $P5127, fallback1654
    nqp_get_sc_object $P5132, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5127, $P5132
  fallback1654:
    set $N5003, $P5127
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    box $P5140, $I5006
    set $P5139, $P5140
    unless $I5006 goto if557_end1651 
.annotate 'line', 980
.annotate 'line', 981
    find_lex $P5134, "$/"
    unless_null $P5134, fallback1655
    nqp_get_sc_object $P5135, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5134, $P5135
  fallback1655:
    set $P5133, $P5134["name"]
    unless_null $P5133, fallback1656
    nqp_get_sc_object $P5136, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5133, $P5136
  fallback1656:
    $P5137 = $P5133."CURSOR"()
    $P5138 = $P5137."panic"("A my scoped package cannot have a multi-part name yet")
    set $P5139, $P5138
  if557_end1651:
.annotate 'line', 983
    find_dynamic_lex $P5141, "$*W"
    unless_null $P5141, fallback1657
    nqp_get_sc_object $P5144, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5143, $P5144
    set $P5142, $P5143["$W"]
    unless_null $P5142, fallback1658
    nqp_get_sc_object $P5145, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5142, $P5145
  fallback1658:
    unless_null $P5142, vivi_5581659
    die "Contextual $*W not found"
    box $P5146, "Contextual $*W not found"
    set $P5142, $P5146
  vivi_5581659:
    set $P5141, $P5142
  fallback1657:
    find_dynamic_lex $P5147, "$*W"
    unless_null $P5147, fallback1660
    nqp_get_sc_object $P5150, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5149, $P5150
    set $P5148, $P5149["$W"]
    unless_null $P5148, fallback1661
    nqp_get_sc_object $P5151, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5148, $P5151
  fallback1661:
    unless_null $P5148, vivi_5591662
    die "Contextual $*W not found"
    box $P5152, "Contextual $*W not found"
    set $P5148, $P5152
  vivi_5591662:
    set $P5147, $P5148
  fallback1660:
    $P5153 = $P5147."cur_lexpad"()
    find_lex $P5157, "$/"
    unless_null $P5157, fallback1663
    nqp_get_sc_object $P5158, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5157, $P5158
  fallback1663:
    set $P5156, $P5157["name"]
    unless_null $P5156, fallback1664
    nqp_get_sc_object $P5159, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5156, $P5159
  fallback1664:
    set $P5155, $P5156["identifier"]
    unless_null $P5155, fallback1665
    nqp_get_sc_object $P5160, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5155, $P5160
  fallback1665:
    set $P5154, $P5155[0]
    unless_null $P5154, fallback1666
    nqp_get_sc_object $P5161, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5154, $P5161
  fallback1666:
    find_dynamic_lex $P5162, "$*PACKAGE"
    unless_null $P5162, fallback1667
    nqp_get_sc_object $P5165, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5164, $P5165
    set $P5163, $P5164["$PACKAGE"]
    unless_null $P5163, fallback1668
    nqp_get_sc_object $P5166, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5163, $P5166
  fallback1668:
    unless_null $P5163, vivi_5601669
    die "Contextual $*PACKAGE not found"
    box $P5167, "Contextual $*PACKAGE not found"
    set $P5163, $P5167
  vivi_5601669:
    set $P5162, $P5163
  fallback1667:
    $P5168 = $P5141."install_lexical_symbol"($P5153, $P5154, $P5162)
    set $P5178, $P5168
    goto if555_end1646
  if555_else1645:
.annotate 'line', 985
.annotate 'line', 986
    find_lex $P5169, "$/"
    $P5170 = $P5169."CURSOR"()
    find_dynamic_lex $P5171, "$*SCOPE"
    unless_null $P5171, fallback1670
    nqp_get_sc_object $P5174, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5173, $P5174
    set $P5172, $P5173["$SCOPE"]
    unless_null $P5172, fallback1671
    nqp_get_sc_object $P5175, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5172, $P5175
  fallback1671:
    unless_null $P5172, vivi_5611672
    die "Contextual $*SCOPE not found"
    box $P5176, "Contextual $*SCOPE not found"
    set $P5172, $P5176
  vivi_5611672:
    set $P5171, $P5172
  fallback1670:
    set $S5008, $P5171
    concat $S5007, $S5008, " scoped packages are not supported"
    $P5177 = $P5170."panic"($S5007)
    set $P5178, $P5177
  if555_end1646:
    set $P5179, $P5178
  if544_end1606:
    .return ($P5179) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator" :subid("cuid_108_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1000
    .param pmc self 
    $P5001 = self."!protoregex"("scope_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_109_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1001
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx593_tgt
    .local int rx593_pos
    .local int rx593_off
    .local int rx593_eos
    .local int rx593_rep
    .local pmc rx593_cur
    .local pmc rx593_curclass
    .local pmc rx593_bstack
    .local pmc rx593_cstack
    (rx593_cur, rx593_tgt, rx593_pos, rx593_curclass, rx593_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx593_cur
    length rx593_eos, rx593_tgt
    eq $I19, 1, rx593_restart1713
    gt rx593_pos, rx593_eos, rx593_fail1714
    repr_get_attr_int $I11, self, rx593_curclass, "$!from"
    ne $I11, -1, rxscan594_done1720
    goto rxscan594_scan1719
  rxscan594_loop1718:
    inc rx593_pos
    gt rx593_pos, rx593_eos, rx593_fail1714
    repr_bind_attr_int rx593_cur, rx593_curclass, "$!from", rx593_pos
  rxscan594_scan1719:
    nqp_rxmark rx593_bstack, rxscan594_loop1718, rx593_pos, 0
  rxscan594_done1720:
    nqp_rxmark rx593_bstack, rxcap595_fail1722, rx593_pos, 0
    add $I11, rx593_pos, 2
    gt $I11, rx593_eos, rx593_fail1714
    substr $S10, rx593_tgt, rx593_pos, 2
    ne $S10, ucs4:"my", rx593_fail1714
    add rx593_pos, 2
    nqp_rxpeek $I19, rx593_bstack, rxcap595_fail1722
    inc $I19
    set $I11, rx593_bstack[$I19]
    $P11 = rx593_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx593_pos)
    rx593_cstack = rx593_cur."!cursor_capture"($P11, "sym")
    goto rxcap595_done1721
  rxcap595_fail1722:
    goto rx593_fail1714
  rxcap595_done1721:
    repr_bind_attr_int rx593_cur, rx593_curclass, "$!pos", rx593_pos
    $P11 = rx593_cur."scoped"("my")
    repr_get_attr_int $I11, $P11, rx593_curclass, "$!pos"
    lt $I11, 0, rx593_fail1714
    nqp_rxmark rx593_bstack, rxsubrule596_pass1723, -1, 0
  rxsubrule596_pass1723:
    rx593_cstack = rx593_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx593_pos, $P11, rx593_curclass, "$!pos"
    rx593_cur."!cursor_pass"(rx593_pos, "scope_declarator:sym<my>", 'backtrack'=>1)
    .return (rx593_cur)
  rx593_restart1713:
    repr_get_attr_obj rx593_cstack, rx593_cur, rx593_curclass, "$!cstack"
  rx593_fail1714:
    unless rx593_bstack, rx593_done1712
    pop $I19, rx593_bstack
    if_null rx593_cstack, rx593_cstack_done1717
    unless rx593_cstack, rx593_cstack_done1717
    dec $I19
    set $P11, rx593_cstack[$I19]
  rx593_cstack_done1717:
    pop rx593_rep, rx593_bstack
    pop rx593_pos, rx593_bstack
    pop $I19, rx593_bstack
    lt rx593_pos, -1, rx593_done1712
    lt rx593_pos, 0, rx593_fail1714
    eq $I19, 0, rx593_fail1714
    nqp_islist $I20, rx593_cstack
    unless $I20, rx593_jump1715
    elements $I18, rx593_bstack
    le $I18, 0, rx593_cut1716
    dec $I18
    set $I18, rx593_bstack[$I18]
  rx593_cut1716:
    assign rx593_cstack, $I18
  rx593_jump1715:
    jump $I19
  rx593_done1712:
    rx593_cur."!cursor_fail"()
    .return (rx593_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_109_1347804164.33_caps" :subid("cuid_memo_151_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["scoped"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_109_1347804164.33_nfa" :subid("cuid_memo_152_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 121
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "scoped"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_110_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1002
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx597_tgt
    .local int rx597_pos
    .local int rx597_off
    .local int rx597_eos
    .local int rx597_rep
    .local pmc rx597_cur
    .local pmc rx597_curclass
    .local pmc rx597_bstack
    .local pmc rx597_cstack
    (rx597_cur, rx597_tgt, rx597_pos, rx597_curclass, rx597_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx597_cur
    length rx597_eos, rx597_tgt
    eq $I19, 1, rx597_restart1726
    gt rx597_pos, rx597_eos, rx597_fail1727
    repr_get_attr_int $I11, self, rx597_curclass, "$!from"
    ne $I11, -1, rxscan598_done1733
    goto rxscan598_scan1732
  rxscan598_loop1731:
    inc rx597_pos
    gt rx597_pos, rx597_eos, rx597_fail1727
    repr_bind_attr_int rx597_cur, rx597_curclass, "$!from", rx597_pos
  rxscan598_scan1732:
    nqp_rxmark rx597_bstack, rxscan598_loop1731, rx597_pos, 0
  rxscan598_done1733:
    nqp_rxmark rx597_bstack, rxcap599_fail1735, rx597_pos, 0
    add $I11, rx597_pos, 3
    gt $I11, rx597_eos, rx597_fail1727
    substr $S10, rx597_tgt, rx597_pos, 3
    ne $S10, ucs4:"our", rx597_fail1727
    add rx597_pos, 3
    nqp_rxpeek $I19, rx597_bstack, rxcap599_fail1735
    inc $I19
    set $I11, rx597_bstack[$I19]
    $P11 = rx597_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx597_pos)
    rx597_cstack = rx597_cur."!cursor_capture"($P11, "sym")
    goto rxcap599_done1734
  rxcap599_fail1735:
    goto rx597_fail1727
  rxcap599_done1734:
    repr_bind_attr_int rx597_cur, rx597_curclass, "$!pos", rx597_pos
    $P11 = rx597_cur."scoped"("our")
    repr_get_attr_int $I11, $P11, rx597_curclass, "$!pos"
    lt $I11, 0, rx597_fail1727
    nqp_rxmark rx597_bstack, rxsubrule600_pass1736, -1, 0
  rxsubrule600_pass1736:
    rx597_cstack = rx597_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx597_pos, $P11, rx597_curclass, "$!pos"
    rx597_cur."!cursor_pass"(rx597_pos, "scope_declarator:sym<our>", 'backtrack'=>1)
    .return (rx597_cur)
  rx597_restart1726:
    repr_get_attr_obj rx597_cstack, rx597_cur, rx597_curclass, "$!cstack"
  rx597_fail1727:
    unless rx597_bstack, rx597_done1725
    pop $I19, rx597_bstack
    if_null rx597_cstack, rx597_cstack_done1730
    unless rx597_cstack, rx597_cstack_done1730
    dec $I19
    set $P11, rx597_cstack[$I19]
  rx597_cstack_done1730:
    pop rx597_rep, rx597_bstack
    pop rx597_pos, rx597_bstack
    pop $I19, rx597_bstack
    lt rx597_pos, -1, rx597_done1725
    lt rx597_pos, 0, rx597_fail1727
    eq $I19, 0, rx597_fail1727
    nqp_islist $I20, rx597_cstack
    unless $I20, rx597_jump1728
    elements $I18, rx597_bstack
    le $I18, 0, rx597_cut1729
    dec $I18
    set $I18, rx597_bstack[$I18]
  rx597_cut1729:
    assign rx597_cstack, $I18
  rx597_jump1728:
    jump $I19
  rx597_done1725:
    rx597_cur."!cursor_fail"()
    .return (rx597_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_110_1347804164.33_caps" :subid("cuid_memo_153_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["scoped"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_110_1347804164.33_nfa" :subid("cuid_memo_154_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 111
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 117
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "scoped"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_111_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1003
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx601_tgt
    .local int rx601_pos
    .local int rx601_off
    .local int rx601_eos
    .local int rx601_rep
    .local pmc rx601_cur
    .local pmc rx601_curclass
    .local pmc rx601_bstack
    .local pmc rx601_cstack
    (rx601_cur, rx601_tgt, rx601_pos, rx601_curclass, rx601_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx601_cur
    length rx601_eos, rx601_tgt
    eq $I19, 1, rx601_restart1739
    gt rx601_pos, rx601_eos, rx601_fail1740
    repr_get_attr_int $I11, self, rx601_curclass, "$!from"
    ne $I11, -1, rxscan602_done1746
    goto rxscan602_scan1745
  rxscan602_loop1744:
    inc rx601_pos
    gt rx601_pos, rx601_eos, rx601_fail1740
    repr_bind_attr_int rx601_cur, rx601_curclass, "$!from", rx601_pos
  rxscan602_scan1745:
    nqp_rxmark rx601_bstack, rxscan602_loop1744, rx601_pos, 0
  rxscan602_done1746:
    nqp_rxmark rx601_bstack, rxcap603_fail1748, rx601_pos, 0
    add $I11, rx601_pos, 3
    gt $I11, rx601_eos, rx601_fail1740
    substr $S10, rx601_tgt, rx601_pos, 3
    ne $S10, ucs4:"has", rx601_fail1740
    add rx601_pos, 3
    nqp_rxpeek $I19, rx601_bstack, rxcap603_fail1748
    inc $I19
    set $I11, rx601_bstack[$I19]
    $P11 = rx601_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx601_pos)
    rx601_cstack = rx601_cur."!cursor_capture"($P11, "sym")
    goto rxcap603_done1747
  rxcap603_fail1748:
    goto rx601_fail1740
  rxcap603_done1747:
    repr_bind_attr_int rx601_cur, rx601_curclass, "$!pos", rx601_pos
    $P11 = rx601_cur."scoped"("has")
    repr_get_attr_int $I11, $P11, rx601_curclass, "$!pos"
    lt $I11, 0, rx601_fail1740
    nqp_rxmark rx601_bstack, rxsubrule604_pass1749, -1, 0
  rxsubrule604_pass1749:
    rx601_cstack = rx601_cur."!cursor_capture"($P11, "scoped")
    repr_get_attr_int rx601_pos, $P11, rx601_curclass, "$!pos"
    rx601_cur."!cursor_pass"(rx601_pos, "scope_declarator:sym<has>", 'backtrack'=>1)
    .return (rx601_cur)
  rx601_restart1739:
    repr_get_attr_obj rx601_cstack, rx601_cur, rx601_curclass, "$!cstack"
  rx601_fail1740:
    unless rx601_bstack, rx601_done1738
    pop $I19, rx601_bstack
    if_null rx601_cstack, rx601_cstack_done1743
    unless rx601_cstack, rx601_cstack_done1743
    dec $I19
    set $P11, rx601_cstack[$I19]
  rx601_cstack_done1743:
    pop rx601_rep, rx601_bstack
    pop rx601_pos, rx601_bstack
    pop $I19, rx601_bstack
    lt rx601_pos, -1, rx601_done1738
    lt rx601_pos, 0, rx601_fail1740
    eq $I19, 0, rx601_fail1740
    nqp_islist $I20, rx601_cstack
    unless $I20, rx601_jump1741
    elements $I18, rx601_bstack
    le $I18, 0, rx601_cut1742
    dec $I18
    set $I18, rx601_bstack[$I18]
  rx601_cut1742:
    assign rx601_cstack, $I18
  rx601_jump1741:
    jump $I19
  rx601_done1738:
    rx601_cur."!cursor_fail"()
    .return (rx601_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_111_1347804164.33_caps" :subid("cuid_memo_155_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["scoped"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_111_1347804164.33_nfa" :subid("cuid_memo_156_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 104
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 97
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 115
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "scoped"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_112_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1005
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .lex "$*SCOPE", _lex_param_1 
    .local pmc self 
    set self, _lex_param_0
    .local string rx605_tgt
    .local int rx605_pos
    .local int rx605_off
    .local int rx605_eos
    .local int rx605_rep
    .local pmc rx605_cur
    .local pmc rx605_curclass
    .local pmc rx605_bstack
    .local pmc rx605_cstack
    (rx605_cur, rx605_tgt, rx605_pos, rx605_curclass, rx605_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx605_cur
    length rx605_eos, rx605_tgt
    eq $I19, 1, rx605_restart1752
    gt rx605_pos, rx605_eos, rx605_fail1753
    repr_get_attr_int $I11, self, rx605_curclass, "$!from"
    ne $I11, -1, rxscan606_done1759
    goto rxscan606_scan1758
  rxscan606_loop1757:
    inc rx605_pos
    gt rx605_pos, rx605_eos, rx605_fail1753
    repr_bind_attr_int rx605_cur, rx605_curclass, "$!from", rx605_pos
  rxscan606_scan1758:
    nqp_rxmark rx605_bstack, rxscan606_loop1757, rx605_pos, 0
  rxscan606_done1759:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt607_01761
    nqp_push_label $P11, alt607_11765
    nqp_push_label $P11, alt607_21769
    nqp_rxmark rx605_bstack, alt607_end1760, -1, 0
    rx605_cur."!alt"(rx605_pos, "alt_nfa__21_1347804166.371", $P11)
    goto rx605_fail1753
  alt607_01761:
    repr_bind_attr_int rx605_cur, rx605_curclass, "$!pos", rx605_pos
    $P11 = rx605_cur."ws"()
    repr_get_attr_int $I11, $P11, rx605_curclass, "$!pos"
    lt $I11, 0, rx605_fail1753
    repr_get_attr_int rx605_pos, $P11, rx605_curclass, "$!pos"
    repr_bind_attr_int rx605_cur, rx605_curclass, "$!pos", rx605_pos
    $P11 = rx605_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx605_curclass, "$!pos"
    lt $I11, 0, rx605_fail1753
    nqp_rxmark rx605_bstack, rxsubrule609_pass1763, -1, 0
  rxsubrule609_pass1763:
    rx605_cstack = rx605_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx605_pos, $P11, rx605_curclass, "$!pos"
    repr_bind_attr_int rx605_cur, rx605_curclass, "$!pos", rx605_pos
    $P11 = rx605_cur."ws"()
    repr_get_attr_int $I11, $P11, rx605_curclass, "$!pos"
    lt $I11, 0, rx605_fail1753
    repr_get_attr_int rx605_pos, $P11, rx605_curclass, "$!pos"
    goto alt607_end1760
  alt607_11765:
    repr_bind_attr_int rx605_cur, rx605_curclass, "$!pos", rx605_pos
    $P11 = rx605_cur."ws"()
    repr_get_attr_int $I11, $P11, rx605_curclass, "$!pos"
    lt $I11, 0, rx605_fail1753
    repr_get_attr_int rx605_pos, $P11, rx605_curclass, "$!pos"
    repr_bind_attr_int rx605_cur, rx605_curclass, "$!pos", rx605_pos
    $P11 = rx605_cur."multi_declarator"()
    repr_get_attr_int $I11, $P11, rx605_curclass, "$!pos"
    lt $I11, 0, rx605_fail1753
    nqp_rxmark rx605_bstack, rxsubrule612_pass1767, -1, 0
  rxsubrule612_pass1767:
    rx605_cstack = rx605_cur."!cursor_capture"($P11, "multi_declarator")
    repr_get_attr_int rx605_pos, $P11, rx605_curclass, "$!pos"
    repr_bind_attr_int rx605_cur, rx605_curclass, "$!pos", rx605_pos
    $P11 = rx605_cur."ws"()
    repr_get_attr_int $I11, $P11, rx605_curclass, "$!pos"
    lt $I11, 0, rx605_fail1753
    repr_get_attr_int rx605_pos, $P11, rx605_curclass, "$!pos"
    goto alt607_end1760
  alt607_21769:
    repr_bind_attr_int rx605_cur, rx605_curclass, "$!pos", rx605_pos
    $P11 = rx605_cur."ws"()
    repr_get_attr_int $I11, $P11, rx605_curclass, "$!pos"
    lt $I11, 0, rx605_fail1753
    repr_get_attr_int rx605_pos, $P11, rx605_curclass, "$!pos"
    repr_bind_attr_int rx605_cur, rx605_curclass, "$!pos", rx605_pos
    $P11 = rx605_cur."package_declarator"()
    repr_get_attr_int $I11, $P11, rx605_curclass, "$!pos"
    lt $I11, 0, rx605_fail1753
    nqp_rxmark rx605_bstack, rxsubrule615_pass1771, -1, 0
  rxsubrule615_pass1771:
    rx605_cstack = rx605_cur."!cursor_capture"($P11, "package_declarator")
    repr_get_attr_int rx605_pos, $P11, rx605_curclass, "$!pos"
    repr_bind_attr_int rx605_cur, rx605_curclass, "$!pos", rx605_pos
    $P11 = rx605_cur."ws"()
    repr_get_attr_int $I11, $P11, rx605_curclass, "$!pos"
    lt $I11, 0, rx605_fail1753
    repr_get_attr_int rx605_pos, $P11, rx605_curclass, "$!pos"
    goto alt607_end1760
  alt607_end1760:
    rx605_cur."!cursor_pass"(rx605_pos, "scoped", 'backtrack'=>1)
    .return (rx605_cur)
  rx605_restart1752:
    repr_get_attr_obj rx605_cstack, rx605_cur, rx605_curclass, "$!cstack"
  rx605_fail1753:
    unless rx605_bstack, rx605_done1751
    pop $I19, rx605_bstack
    if_null rx605_cstack, rx605_cstack_done1756
    unless rx605_cstack, rx605_cstack_done1756
    dec $I19
    set $P11, rx605_cstack[$I19]
  rx605_cstack_done1756:
    pop rx605_rep, rx605_bstack
    pop rx605_pos, rx605_bstack
    pop $I19, rx605_bstack
    lt rx605_pos, -1, rx605_done1751
    lt rx605_pos, 0, rx605_fail1753
    eq $I19, 0, rx605_fail1753
    nqp_islist $I20, rx605_cstack
    unless $I20, rx605_jump1754
    elements $I18, rx605_bstack
    le $I18, 0, rx605_cut1755
    dec $I18
    set $I18, rx605_bstack[$I18]
  rx605_cut1755:
    assign rx605_cstack, $I18
  rx605_jump1754:
    jump $I19
  rx605_done1751:
    rx605_cur."!cursor_fail"()
    .return (rx605_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_112_1347804164.33_caps" :subid("cuid_memo_157_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["declarator"], $P5002
    box $P5003, 0
    set $P5001["multi_declarator"], $P5003
    box $P5004, 0
    set $P5001["package_declarator"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_112_1347804164.33_alt_nfa__21_1347804166.371" :subid("cuid_memo_158_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    new $P5020, 'ResizablePMCArray'
    new $P5021, 'ResizablePMCArray'
    push $P5020, $P5021
    new $P5022, 'ResizablePMCArray'
    box $P5023, 0
    push $P5022, $P5023
    box $P5024, 0
    push $P5022, $P5024
    box $P5025, 0
    push $P5022, $P5025
    box $P5026, 0
    push $P5022, $P5026
    box $P5027, 0
    push $P5022, $P5027
    box $P5028, 0
    push $P5022, $P5028
    push $P5020, $P5022
    push $P5001, $P5020
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_113_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1011
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_390_1347804164.33' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx617_tgt
    .local int rx617_pos
    .local int rx617_off
    .local int rx617_eos
    .local int rx617_rep
    .local pmc rx617_cur
    .local pmc rx617_curclass
    .local pmc rx617_bstack
    .local pmc rx617_cstack
    (rx617_cur, rx617_tgt, rx617_pos, rx617_curclass, rx617_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx617_cur
    length rx617_eos, rx617_tgt
    eq $I19, 1, rx617_restart1775
    gt rx617_pos, rx617_eos, rx617_fail1776
    repr_get_attr_int $I11, self, rx617_curclass, "$!from"
    ne $I11, -1, rxscan618_done1782
    goto rxscan618_scan1781
  rxscan618_loop1780:
    inc rx617_pos
    gt rx617_pos, rx617_eos, rx617_fail1776
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!from", rx617_pos
  rxscan618_scan1781:
    nqp_rxmark rx617_bstack, rxscan618_loop1780, rx617_pos, 0
  rxscan618_done1782:
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    $P11 = rx617_cur."name"()
    repr_get_attr_int $I11, $P11, rx617_curclass, "$!pos"
    lt $I11, 0, rx617_fail1776
    nqp_rxmark rx617_bstack, rxsubrule619_pass1783, -1, 0
  rxsubrule619_pass1783:
    rx617_cstack = rx617_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx617_pos, $P11, rx617_curclass, "$!pos"
    repr_bind_attr_int rx617_cur, rx617_curclass, "$!pos", rx617_pos
    store_lex unicode:"$\x{a2}", rx617_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_390_1347804164.33' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx617_fail1776
    rx617_cur."!cursor_pass"(rx617_pos, "typename", 'backtrack'=>1)
    .return (rx617_cur)
  rx617_restart1775:
    repr_get_attr_obj rx617_cstack, rx617_cur, rx617_curclass, "$!cstack"
  rx617_fail1776:
    unless rx617_bstack, rx617_done1774
    pop $I19, rx617_bstack
    if_null rx617_cstack, rx617_cstack_done1779
    unless rx617_cstack, rx617_cstack_done1779
    dec $I19
    set $P11, rx617_cstack[$I19]
  rx617_cstack_done1779:
    pop rx617_rep, rx617_bstack
    pop rx617_pos, rx617_bstack
    pop $I19, rx617_bstack
    lt rx617_pos, -1, rx617_done1774
    lt rx617_pos, 0, rx617_fail1776
    eq $I19, 0, rx617_fail1776
    nqp_islist $I20, rx617_cstack
    unless $I20, rx617_jump1777
    elements $I18, rx617_bstack
    le $I18, 0, rx617_cut1778
    dec $I18
    set $I18, rx617_bstack[$I18]
  rx617_cut1778:
    assign rx617_cstack, $I18
  rx617_jump1777:
    jump $I19
  rx617_done1774:
    rx617_cur."!cursor_fail"()
    .return (rx617_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_113_1347804164.33_caps" :subid("cuid_memo_159_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["name"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_113_1347804164.33_nfa" :subid("cuid_memo_160_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "name"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_390_1347804164.33") :anon :lex :outer("cuid_113_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1013

    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback1784
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback1785
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5005
  fallback1785:
    unless_null $P5002, vivi_6201786
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_6201786:
    set $P5001, $P5002
  fallback1784:
    find_lex $P5007, "$/"
    find_lex $P5010, "$/"
    unless_null $P5010, fallback1787
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5011
  fallback1787:
    set $P5009, $P5010["name"]
    unless_null $P5009, fallback1788
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5012
  fallback1788:
    set $P5008, $P5009["identifier"]
    unless_null $P5008, fallback1789
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5013
  fallback1789:
    $P5014 = $P5001."known_sym"($P5007, $P5008)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_114_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1016
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx621_tgt
    .local int rx621_pos
    .local int rx621_off
    .local int rx621_eos
    .local int rx621_rep
    .local pmc rx621_cur
    .local pmc rx621_curclass
    .local pmc rx621_bstack
    .local pmc rx621_cstack
    (rx621_cur, rx621_tgt, rx621_pos, rx621_curclass, rx621_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx621_cur
    length rx621_eos, rx621_tgt
    eq $I19, 1, rx621_restart1792
    gt rx621_pos, rx621_eos, rx621_fail1793
    repr_get_attr_int $I11, self, rx621_curclass, "$!from"
    ne $I11, -1, rxscan622_done1799
    goto rxscan622_scan1798
  rxscan622_loop1797:
    inc rx621_pos
    gt rx621_pos, rx621_eos, rx621_fail1793
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!from", rx621_pos
  rxscan622_scan1798:
    nqp_rxmark rx621_bstack, rxscan622_loop1797, rx621_pos, 0
  rxscan622_done1799:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt623_01801
    nqp_push_label $P11, alt623_11803
    nqp_rxmark rx621_bstack, alt623_end1800, -1, 0
    rx621_cur."!alt"(rx621_pos, "alt_nfa__22_1347804166.386", $P11)
    goto rx621_fail1793
  alt623_01801:
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!pos", rx621_pos
    $P11 = rx621_cur."variable_declarator"()
    repr_get_attr_int $I11, $P11, rx621_curclass, "$!pos"
    lt $I11, 0, rx621_fail1793
    nqp_rxmark rx621_bstack, rxsubrule624_pass1802, -1, 0
  rxsubrule624_pass1802:
    rx621_cstack = rx621_cur."!cursor_capture"($P11, "variable_declarator")
    repr_get_attr_int rx621_pos, $P11, rx621_curclass, "$!pos"
    goto alt623_end1800
  alt623_11803:
    repr_bind_attr_int rx621_cur, rx621_curclass, "$!pos", rx621_pos
    $P11 = rx621_cur."routine_declarator"()
    repr_get_attr_int $I11, $P11, rx621_curclass, "$!pos"
    lt $I11, 0, rx621_fail1793
    nqp_rxmark rx621_bstack, rxsubrule625_pass1804, -1, 0
  rxsubrule625_pass1804:
    rx621_cstack = rx621_cur."!cursor_capture"($P11, "routine_declarator")
    repr_get_attr_int rx621_pos, $P11, rx621_curclass, "$!pos"
    goto alt623_end1800
  alt623_end1800:
    rx621_cur."!cursor_pass"(rx621_pos, "declarator", 'backtrack'=>1)
    .return (rx621_cur)
  rx621_restart1792:
    repr_get_attr_obj rx621_cstack, rx621_cur, rx621_curclass, "$!cstack"
  rx621_fail1793:
    unless rx621_bstack, rx621_done1791
    pop $I19, rx621_bstack
    if_null rx621_cstack, rx621_cstack_done1796
    unless rx621_cstack, rx621_cstack_done1796
    dec $I19
    set $P11, rx621_cstack[$I19]
  rx621_cstack_done1796:
    pop rx621_rep, rx621_bstack
    pop rx621_pos, rx621_bstack
    pop $I19, rx621_bstack
    lt rx621_pos, -1, rx621_done1791
    lt rx621_pos, 0, rx621_fail1793
    eq $I19, 0, rx621_fail1793
    nqp_islist $I20, rx621_cstack
    unless $I20, rx621_jump1794
    elements $I18, rx621_bstack
    le $I18, 0, rx621_cut1795
    dec $I18
    set $I18, rx621_bstack[$I18]
  rx621_cut1795:
    assign rx621_cstack, $I18
  rx621_jump1794:
    jump $I19
  rx621_done1791:
    rx621_cur."!cursor_fail"()
    .return (rx621_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_114_1347804164.33_caps" :subid("cuid_memo_161_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["variable_declarator"], $P5002
    box $P5003, 0
    set $P5001["routine_declarator"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_114_1347804164.33_nfa" :subid("cuid_memo_162_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "variable_declarator"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    box $P5007, 8
    push $P5003, $P5007
    box $P5008, "routine_declarator"
    push $P5003, $P5008
    box $P5009, 0
    push $P5003, $P5009
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_114_1347804164.33_alt_nfa__22_1347804166.386" :subid("cuid_memo_163_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "variable_declarator"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "routine_declarator"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_115_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1021
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_391_1347804164.33' 
    capture_lex $P5006 
    .lex "$*IN_DECL", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx626_tgt
    .local int rx626_pos
    .local int rx626_off
    .local int rx626_eos
    .local int rx626_rep
    .local pmc rx626_cur
    .local pmc rx626_curclass
    .local pmc rx626_bstack
    .local pmc rx626_cstack
    (rx626_cur, rx626_tgt, rx626_pos, rx626_curclass, rx626_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx626_cur
    length rx626_eos, rx626_tgt
    eq $I19, 1, rx626_restart1807
    gt rx626_pos, rx626_eos, rx626_fail1808
    repr_get_attr_int $I11, self, rx626_curclass, "$!from"
    ne $I11, -1, rxscan627_done1814
    goto rxscan627_scan1813
  rxscan627_loop1812:
    inc rx626_pos
    gt rx626_pos, rx626_eos, rx626_fail1808
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!from", rx626_pos
  rxscan627_scan1813:
    nqp_rxmark rx626_bstack, rxscan627_loop1812, rx626_pos, 0
  rxscan627_done1814:
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!pos", rx626_pos
    $P11 = rx626_cur."ws"()
    repr_get_attr_int $I11, $P11, rx626_curclass, "$!pos"
    lt $I11, 0, rx626_fail1808
    repr_get_attr_int rx626_pos, $P11, rx626_curclass, "$!pos"
    nqp_rxmark rx626_bstack, rxquantr629_done1817, rx626_pos, 0
  rxquantr629_loop1816:
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!pos", rx626_pos
    $P11 = rx626_cur."typename"()
    repr_get_attr_int $I11, $P11, rx626_curclass, "$!pos"
    lt $I11, 0, rx626_fail1808
    goto rxsubrule630_pass1818
  rxsubrule630_back1819:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx626_curclass, "$!pos"
    lt $I11, 0, rx626_fail1808
  rxsubrule630_pass1818:
    rx626_cstack = rx626_cur."!cursor_capture"($P11, "typename")
    set_addr $I11, rxsubrule630_back1819
    push rx626_bstack, $I11
    push rx626_bstack, 0
    push rx626_bstack, rx626_pos
    elements $I11, rx626_cstack
    push rx626_bstack, $I11
    repr_get_attr_int rx626_pos, $P11, rx626_curclass, "$!pos"
    nqp_rxpeek $I19, rx626_bstack, rxquantr629_done1817
    inc $I19
    inc $I19
    set rx626_rep, rx626_bstack[$I19]
    nqp_rxcommit rx626_bstack, rxquantr629_done1817
    inc rx626_rep
  rxquantr629_done1817:
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!pos", rx626_pos
    $P11 = rx626_cur."ws"()
    repr_get_attr_int $I11, $P11, rx626_curclass, "$!pos"
    lt $I11, 0, rx626_fail1808
    repr_get_attr_int rx626_pos, $P11, rx626_curclass, "$!pos"
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!pos", rx626_pos
    store_lex unicode:"$\x{a2}", rx626_cur
    box $P5002, "variable"
    set $P101, $P5002
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!pos", rx626_pos
    $P11 = rx626_cur."ws"()
    repr_get_attr_int $I11, $P11, rx626_curclass, "$!pos"
    lt $I11, 0, rx626_fail1808
    repr_get_attr_int rx626_pos, $P11, rx626_curclass, "$!pos"
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!pos", rx626_pos
    $P11 = rx626_cur."variable"()
    repr_get_attr_int $I11, $P11, rx626_curclass, "$!pos"
    lt $I11, 0, rx626_fail1808
    nqp_rxmark rx626_bstack, rxsubrule633_pass1822, -1, 0
  rxsubrule633_pass1822:
    rx626_cstack = rx626_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx626_pos, $P11, rx626_curclass, "$!pos"
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!pos", rx626_pos
    $P11 = rx626_cur."ws"()
    repr_get_attr_int $I11, $P11, rx626_curclass, "$!pos"
    lt $I11, 0, rx626_fail1808
    repr_get_attr_int rx626_pos, $P11, rx626_curclass, "$!pos"
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!pos", rx626_pos
    store_lex unicode:"$\x{a2}", rx626_cur
    $P5003 = $P102."MATCH"()
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_391_1347804164.33' 
    capture_lex $P5004
    $P5005 = $P5004()
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!pos", rx626_pos
    $P11 = rx626_cur."ws"()
    repr_get_attr_int $I11, $P11, rx626_curclass, "$!pos"
    lt $I11, 0, rx626_fail1808
    repr_get_attr_int rx626_pos, $P11, rx626_curclass, "$!pos"
    nqp_rxmark rx626_bstack, rxquantr636_done1826, rx626_pos, 0
  rxquantr636_loop1825:
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!pos", rx626_pos
    $P11 = rx626_cur."trait"()
    repr_get_attr_int $I11, $P11, rx626_curclass, "$!pos"
    lt $I11, 0, rx626_fail1808
    goto rxsubrule637_pass1827
  rxsubrule637_back1828:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx626_curclass, "$!pos"
    lt $I11, 0, rx626_fail1808
  rxsubrule637_pass1827:
    rx626_cstack = rx626_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule637_back1828
    push rx626_bstack, $I11
    push rx626_bstack, 0
    push rx626_bstack, rx626_pos
    elements $I11, rx626_cstack
    push rx626_bstack, $I11
    repr_get_attr_int rx626_pos, $P11, rx626_curclass, "$!pos"
    nqp_rxpeek $I19, rx626_bstack, rxquantr636_done1826
    inc $I19
    inc $I19
    set rx626_rep, rx626_bstack[$I19]
    nqp_rxcommit rx626_bstack, rxquantr636_done1826
    inc rx626_rep
    nqp_rxmark rx626_bstack, rxquantr636_done1826, rx626_pos, rx626_rep
    goto rxquantr636_loop1825
  rxquantr636_done1826:
    repr_bind_attr_int rx626_cur, rx626_curclass, "$!pos", rx626_pos
    $P11 = rx626_cur."ws"()
    repr_get_attr_int $I11, $P11, rx626_curclass, "$!pos"
    lt $I11, 0, rx626_fail1808
    repr_get_attr_int rx626_pos, $P11, rx626_curclass, "$!pos"
    rx626_cur."!cursor_pass"(rx626_pos, "variable_declarator", 'backtrack'=>1)
    .return (rx626_cur)
  rx626_restart1807:
    repr_get_attr_obj rx626_cstack, rx626_cur, rx626_curclass, "$!cstack"
  rx626_fail1808:
    unless rx626_bstack, rx626_done1806
    pop $I19, rx626_bstack
    if_null rx626_cstack, rx626_cstack_done1811
    unless rx626_cstack, rx626_cstack_done1811
    dec $I19
    set $P11, rx626_cstack[$I19]
  rx626_cstack_done1811:
    pop rx626_rep, rx626_bstack
    pop rx626_pos, rx626_bstack
    pop $I19, rx626_bstack
    lt rx626_pos, -1, rx626_done1806
    lt rx626_pos, 0, rx626_fail1808
    eq $I19, 0, rx626_fail1808
    nqp_islist $I20, rx626_cstack
    unless $I20, rx626_jump1809
    elements $I18, rx626_bstack
    le $I18, 0, rx626_cut1810
    dec $I18
    set $I18, rx626_bstack[$I18]
  rx626_cut1810:
    assign rx626_cstack, $I18
  rx626_jump1809:
    jump $I19
  rx626_done1806:
    rx626_cur."!cursor_fail"()
    .return (rx626_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_115_1347804164.33_caps" :subid("cuid_memo_164_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["typename"], $P5002
    box $P5003, 0
    set $P5001["variable"], $P5003
    box $P5004, 2
    set $P5001["trait"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_391_1347804164.33") :anon :lex :outer("cuid_115_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1025

    box $P5001, 0
    store_dynamic_lex "$*IN_DECL", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator" :subid("cuid_116_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1029
    .param pmc self 
    $P5001 = self."!protoregex"("routine_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_117_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1030
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx639_tgt
    .local int rx639_pos
    .local int rx639_off
    .local int rx639_eos
    .local int rx639_rep
    .local pmc rx639_cur
    .local pmc rx639_curclass
    .local pmc rx639_bstack
    .local pmc rx639_cstack
    (rx639_cur, rx639_tgt, rx639_pos, rx639_curclass, rx639_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx639_cur
    length rx639_eos, rx639_tgt
    eq $I19, 1, rx639_restart1832
    gt rx639_pos, rx639_eos, rx639_fail1833
    repr_get_attr_int $I11, self, rx639_curclass, "$!from"
    ne $I11, -1, rxscan640_done1839
    goto rxscan640_scan1838
  rxscan640_loop1837:
    inc rx639_pos
    gt rx639_pos, rx639_eos, rx639_fail1833
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!from", rx639_pos
  rxscan640_scan1838:
    nqp_rxmark rx639_bstack, rxscan640_loop1837, rx639_pos, 0
  rxscan640_done1839:
    nqp_rxmark rx639_bstack, rxcap641_fail1841, rx639_pos, 0
    add $I11, rx639_pos, 3
    gt $I11, rx639_eos, rx639_fail1833
    substr $S10, rx639_tgt, rx639_pos, 3
    ne $S10, ucs4:"sub", rx639_fail1833
    add rx639_pos, 3
    nqp_rxpeek $I19, rx639_bstack, rxcap641_fail1841
    inc $I19
    set $I11, rx639_bstack[$I19]
    $P11 = rx639_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx639_pos)
    rx639_cstack = rx639_cur."!cursor_capture"($P11, "sym")
    goto rxcap641_done1840
  rxcap641_fail1841:
    goto rx639_fail1833
  rxcap641_done1840:
    repr_bind_attr_int rx639_cur, rx639_curclass, "$!pos", rx639_pos
    $P11 = rx639_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx639_curclass, "$!pos"
    lt $I11, 0, rx639_fail1833
    nqp_rxmark rx639_bstack, rxsubrule642_pass1842, -1, 0
  rxsubrule642_pass1842:
    rx639_cstack = rx639_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx639_pos, $P11, rx639_curclass, "$!pos"
    rx639_cur."!cursor_pass"(rx639_pos, "routine_declarator:sym<sub>", 'backtrack'=>1)
    .return (rx639_cur)
  rx639_restart1832:
    repr_get_attr_obj rx639_cstack, rx639_cur, rx639_curclass, "$!cstack"
  rx639_fail1833:
    unless rx639_bstack, rx639_done1831
    pop $I19, rx639_bstack
    if_null rx639_cstack, rx639_cstack_done1836
    unless rx639_cstack, rx639_cstack_done1836
    dec $I19
    set $P11, rx639_cstack[$I19]
  rx639_cstack_done1836:
    pop rx639_rep, rx639_bstack
    pop rx639_pos, rx639_bstack
    pop $I19, rx639_bstack
    lt rx639_pos, -1, rx639_done1831
    lt rx639_pos, 0, rx639_fail1833
    eq $I19, 0, rx639_fail1833
    nqp_islist $I20, rx639_cstack
    unless $I20, rx639_jump1834
    elements $I18, rx639_bstack
    le $I18, 0, rx639_cut1835
    dec $I18
    set $I18, rx639_bstack[$I18]
  rx639_cut1835:
    assign rx639_cstack, $I18
  rx639_jump1834:
    jump $I19
  rx639_done1831:
    rx639_cur."!cursor_fail"()
    .return (rx639_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_117_1347804164.33_caps" :subid("cuid_memo_165_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["routine_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_117_1347804164.33_nfa" :subid("cuid_memo_166_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 115
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 117
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 98
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "routine_def"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_118_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1031
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx643_tgt
    .local int rx643_pos
    .local int rx643_off
    .local int rx643_eos
    .local int rx643_rep
    .local pmc rx643_cur
    .local pmc rx643_curclass
    .local pmc rx643_bstack
    .local pmc rx643_cstack
    (rx643_cur, rx643_tgt, rx643_pos, rx643_curclass, rx643_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx643_cur
    length rx643_eos, rx643_tgt
    eq $I19, 1, rx643_restart1845
    gt rx643_pos, rx643_eos, rx643_fail1846
    repr_get_attr_int $I11, self, rx643_curclass, "$!from"
    ne $I11, -1, rxscan644_done1852
    goto rxscan644_scan1851
  rxscan644_loop1850:
    inc rx643_pos
    gt rx643_pos, rx643_eos, rx643_fail1846
    repr_bind_attr_int rx643_cur, rx643_curclass, "$!from", rx643_pos
  rxscan644_scan1851:
    nqp_rxmark rx643_bstack, rxscan644_loop1850, rx643_pos, 0
  rxscan644_done1852:
    nqp_rxmark rx643_bstack, rxcap645_fail1854, rx643_pos, 0
    add $I11, rx643_pos, 6
    gt $I11, rx643_eos, rx643_fail1846
    substr $S10, rx643_tgt, rx643_pos, 6
    ne $S10, ucs4:"method", rx643_fail1846
    add rx643_pos, 6
    nqp_rxpeek $I19, rx643_bstack, rxcap645_fail1854
    inc $I19
    set $I11, rx643_bstack[$I19]
    $P11 = rx643_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx643_pos)
    rx643_cstack = rx643_cur."!cursor_capture"($P11, "sym")
    goto rxcap645_done1853
  rxcap645_fail1854:
    goto rx643_fail1846
  rxcap645_done1853:
    repr_bind_attr_int rx643_cur, rx643_curclass, "$!pos", rx643_pos
    $P11 = rx643_cur."method_def"()
    repr_get_attr_int $I11, $P11, rx643_curclass, "$!pos"
    lt $I11, 0, rx643_fail1846
    nqp_rxmark rx643_bstack, rxsubrule646_pass1855, -1, 0
  rxsubrule646_pass1855:
    rx643_cstack = rx643_cur."!cursor_capture"($P11, "method_def")
    repr_get_attr_int rx643_pos, $P11, rx643_curclass, "$!pos"
    rx643_cur."!cursor_pass"(rx643_pos, "routine_declarator:sym<method>", 'backtrack'=>1)
    .return (rx643_cur)
  rx643_restart1845:
    repr_get_attr_obj rx643_cstack, rx643_cur, rx643_curclass, "$!cstack"
  rx643_fail1846:
    unless rx643_bstack, rx643_done1844
    pop $I19, rx643_bstack
    if_null rx643_cstack, rx643_cstack_done1849
    unless rx643_cstack, rx643_cstack_done1849
    dec $I19
    set $P11, rx643_cstack[$I19]
  rx643_cstack_done1849:
    pop rx643_rep, rx643_bstack
    pop rx643_pos, rx643_bstack
    pop $I19, rx643_bstack
    lt rx643_pos, -1, rx643_done1844
    lt rx643_pos, 0, rx643_fail1846
    eq $I19, 0, rx643_fail1846
    nqp_islist $I20, rx643_cstack
    unless $I20, rx643_jump1847
    elements $I18, rx643_bstack
    le $I18, 0, rx643_cut1848
    dec $I18
    set $I18, rx643_bstack[$I18]
  rx643_cut1848:
    assign rx643_cstack, $I18
  rx643_jump1847:
    jump $I19
  rx643_done1844:
    rx643_cur."!cursor_fail"()
    .return (rx643_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_118_1347804164.33_caps" :subid("cuid_memo_167_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["method_def"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_118_1347804164.33_nfa" :subid("cuid_memo_168_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 116
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 104
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 111
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 100
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "method_def"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_119_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1033
    .param pmc _lex_param_0 
    .lex "$*RETURN_USED", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx647_tgt
    .local int rx647_pos
    .local int rx647_off
    .local int rx647_eos
    .local int rx647_rep
    .local pmc rx647_cur
    .local pmc rx647_curclass
    .local pmc rx647_bstack
    .local pmc rx647_cstack
    (rx647_cur, rx647_tgt, rx647_pos, rx647_curclass, rx647_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx647_cur
    length rx647_eos, rx647_tgt
    eq $I19, 1, rx647_restart1858
    gt rx647_pos, rx647_eos, rx647_fail1859
    repr_get_attr_int $I11, self, rx647_curclass, "$!from"
    ne $I11, -1, rxscan648_done1865
    goto rxscan648_scan1864
  rxscan648_loop1863:
    inc rx647_pos
    gt rx647_pos, rx647_eos, rx647_fail1859
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!from", rx647_pos
  rxscan648_scan1864:
    nqp_rxmark rx647_bstack, rxscan648_loop1863, rx647_pos, 0
  rxscan648_done1865:
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    store_lex unicode:"$\x{a2}", rx647_cur
    box $P5002, 0
    set $P101, $P5002
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    nqp_rxmark rx647_bstack, rxquantr651_done1869, rx647_pos, 0
  rxquantr651_loop1868:
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    nqp_rxmark rx647_bstack, rxcap653_fail1872, rx647_pos, 0
    nqp_rxmark rx647_bstack, rxquantr654_done1874, rx647_pos, 0
  rxquantr654_loop1873:
    add $I11, rx647_pos, 1
    gt $I11, rx647_eos, rx647_fail1859
    substr $S10, rx647_tgt, rx647_pos, 1
    ne $S10, ucs4:"&", rx647_fail1859
    add rx647_pos, 1
    nqp_rxpeek $I19, rx647_bstack, rxquantr654_done1874
    inc $I19
    inc $I19
    set rx647_rep, rx647_bstack[$I19]
    nqp_rxcommit rx647_bstack, rxquantr654_done1874
    inc rx647_rep
  rxquantr654_done1874:
    nqp_rxpeek $I19, rx647_bstack, rxcap653_fail1872
    inc $I19
    set $I11, rx647_bstack[$I19]
    $P11 = rx647_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx647_pos)
    rx647_cstack = rx647_cur."!cursor_capture"($P11, "sigil")
    goto rxcap653_done1871
  rxcap653_fail1872:
    goto rx647_fail1859
  rxcap653_done1871:
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    nqp_rxmark rx647_bstack, rxsubrule655_pass1875, -1, 0
  rxsubrule655_pass1875:
    rx647_cstack = rx647_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    nqp_rxpeek $I19, rx647_bstack, rxquantr651_done1869
    inc $I19
    inc $I19
    set rx647_rep, rx647_bstack[$I19]
    nqp_rxcommit rx647_bstack, rxquantr651_done1869
    inc rx647_rep
  rxquantr651_done1869:
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
  alt660_01881:
    nqp_rxmark rx647_bstack, alt660_11887, rx647_pos, 0
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    add $I11, rx647_pos, 1
    gt $I11, rx647_eos, rx647_fail1859
    substr $S10, rx647_tgt, rx647_pos, 1
    ne $S10, ucs4:"(", rx647_fail1859
    add rx647_pos, 1
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."signature"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    nqp_rxmark rx647_bstack, rxsubrule663_pass1884, -1, 0
  rxsubrule663_pass1884:
    rx647_cstack = rx647_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    add $I11, rx647_pos, 1
    gt $I11, rx647_eos, rx647_fail1859
    substr $S10, rx647_tgt, rx647_pos, 1
    ne $S10, ucs4:")", rx647_fail1859
    add rx647_pos, 1
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    goto alt660_end1880
  alt660_11887:
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
  alt660_end1880:
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    nqp_rxmark rx647_bstack, rxquantr670_done1893, rx647_pos, 0
  rxquantr670_loop1892:
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."trait"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    goto rxsubrule671_pass1894
  rxsubrule671_back1895:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
  rxsubrule671_pass1894:
    rx647_cstack = rx647_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule671_back1895
    push rx647_bstack, $I11
    push rx647_bstack, 0
    push rx647_bstack, rx647_pos
    elements $I11, rx647_cstack
    push rx647_bstack, $I11
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    nqp_rxpeek $I19, rx647_bstack, rxquantr670_done1893
    inc $I19
    inc $I19
    set rx647_rep, rx647_bstack[$I19]
    nqp_rxcommit rx647_bstack, rxquantr670_done1893
    inc rx647_rep
    nqp_rxmark rx647_bstack, rxquantr670_done1893, rx647_pos, rx647_rep
    goto rxquantr670_loop1892
  rxquantr670_done1893:
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt673_01898
    nqp_push_label $P11, alt673_11902
    nqp_rxmark rx647_bstack, alt673_end1897, -1, 0
    rx647_cur."!alt"(rx647_pos, "alt_nfa__23_1347804166.54", $P11)
    goto rx647_fail1859
  alt673_01898:
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    nqp_rxmark rx647_bstack, rxsubrule675_pass1900, -1, 0
  rxsubrule675_pass1900:
    rx647_cstack = rx647_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    goto alt673_end1897
  alt673_11902:
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    nqp_rxmark rx647_bstack, rxsubrule678_pass1904, -1, 0
  rxsubrule678_pass1904:
    rx647_cstack = rx647_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    goto alt673_end1897
  alt673_end1897:
    nqp_rxcommit rx647_bstack, alt673_end1897
    repr_bind_attr_int rx647_cur, rx647_curclass, "$!pos", rx647_pos
    $P11 = rx647_cur."ws"()
    repr_get_attr_int $I11, $P11, rx647_curclass, "$!pos"
    lt $I11, 0, rx647_fail1859
    repr_get_attr_int rx647_pos, $P11, rx647_curclass, "$!pos"
    rx647_cur."!cursor_pass"(rx647_pos, "routine_def", 'backtrack'=>1)
    .return (rx647_cur)
  rx647_restart1858:
    repr_get_attr_obj rx647_cstack, rx647_cur, rx647_curclass, "$!cstack"
  rx647_fail1859:
    unless rx647_bstack, rx647_done1857
    pop $I19, rx647_bstack
    if_null rx647_cstack, rx647_cstack_done1862
    unless rx647_cstack, rx647_cstack_done1862
    dec $I19
    set $P11, rx647_cstack[$I19]
  rx647_cstack_done1862:
    pop rx647_rep, rx647_bstack
    pop rx647_pos, rx647_bstack
    pop $I19, rx647_bstack
    lt rx647_pos, -1, rx647_done1857
    lt rx647_pos, 0, rx647_fail1859
    eq $I19, 0, rx647_fail1859
    nqp_islist $I20, rx647_cstack
    unless $I20, rx647_jump1860
    elements $I18, rx647_bstack
    le $I18, 0, rx647_cut1861
    dec $I18
    set $I18, rx647_bstack[$I18]
  rx647_cut1861:
    assign rx647_cstack, $I18
  rx647_jump1860:
    jump $I19
  rx647_done1857:
    rx647_cur."!cursor_fail"()
    .return (rx647_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_119_1347804164.33_caps" :subid("cuid_memo_169_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["sigil"], $P5002
    box $P5003, 2
    set $P5001["deflongname"], $P5003
    box $P5004, 0
    set $P5001["signature"], $P5004
    box $P5005, 2
    set $P5001["trait"], $P5005
    box $P5006, 0
    set $P5001["onlystar"], $P5006
    box $P5007, 0
    set $P5001["blockoid"], $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_119_1347804164.33_alt_nfa__23_1347804166.54" :subid("cuid_memo_170_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_120_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1046
    .param pmc _lex_param_0 
    .const 'Sub' $P5008 = 'cuid_392_1347804164.33' 
    capture_lex $P5008 
    .lex "$*RETURN_USED", $P101 
    .lex "$*INVOCANT_OK", $P102 
    .lex utf8:"$\x{a2}", $P103 
    .lex "$/", $P104 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    set self, _lex_param_0
    .local string rx681_tgt
    .local int rx681_pos
    .local int rx681_off
    .local int rx681_eos
    .local int rx681_rep
    .local pmc rx681_cur
    .local pmc rx681_curclass
    .local pmc rx681_bstack
    .local pmc rx681_cstack
    (rx681_cur, rx681_tgt, rx681_pos, rx681_curclass, rx681_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx681_cur
    length rx681_eos, rx681_tgt
    eq $I19, 1, rx681_restart1909
    gt rx681_pos, rx681_eos, rx681_fail1910
    repr_get_attr_int $I11, self, rx681_curclass, "$!from"
    ne $I11, -1, rxscan682_done1916
    goto rxscan682_scan1915
  rxscan682_loop1914:
    inc rx681_pos
    gt rx681_pos, rx681_eos, rx681_fail1910
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!from", rx681_pos
  rxscan682_scan1915:
    nqp_rxmark rx681_bstack, rxscan682_loop1914, rx681_pos, 0
  rxscan682_done1916:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    store_lex unicode:"$\x{a2}", rx681_cur
    box $P5003, 0
    set $P101, $P5003
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    store_lex unicode:"$\x{a2}", rx681_cur
    box $P5004, 1
    set $P102, $P5004
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxmark rx681_bstack, rxcap686_fail1921, rx681_pos, 0
    nqp_rxmark rx681_bstack, rxquantr687_done1923, rx681_pos, 0
  rxquantr687_loop1922:
    add $I11, rx681_pos, 1
    gt $I11, rx681_eos, rx681_fail1910
    substr $S10, rx681_tgt, rx681_pos, 1
    ne $S10, ucs4:"!", rx681_fail1910
    add rx681_pos, 1
    nqp_rxpeek $I19, rx681_bstack, rxquantr687_done1923
    inc $I19
    inc $I19
    set rx681_rep, rx681_bstack[$I19]
    nqp_rxcommit rx681_bstack, rxquantr687_done1923
    inc rx681_rep
  rxquantr687_done1923:
    nqp_rxpeek $I19, rx681_bstack, rxcap686_fail1921
    inc $I19
    set $I11, rx681_bstack[$I19]
    $P11 = rx681_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx681_pos)
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "private")
    goto rxcap686_done1920
  rxcap686_fail1921:
    goto rx681_fail1910
  rxcap686_done1920:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxmark rx681_bstack, rxquantr689_done1926, rx681_pos, 0
  rxquantr689_loop1925:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    goto rxsubrule690_pass1927
  rxsubrule690_back1928:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
  rxsubrule690_pass1927:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "deflongname")
    set_addr $I11, rxsubrule690_back1928
    push rx681_bstack, $I11
    push rx681_bstack, 0
    push rx681_bstack, rx681_pos
    elements $I11, rx681_cstack
    push rx681_bstack, $I11
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxpeek $I19, rx681_bstack, rxquantr689_done1926
    inc $I19
    inc $I19
    set rx681_rep, rx681_bstack[$I19]
    nqp_rxcommit rx681_bstack, rxquantr689_done1926
    inc rx681_rep
  rxquantr689_done1926:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
  alt694_01933:
    nqp_rxmark rx681_bstack, alt694_11939, rx681_pos, 0
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    add $I11, rx681_pos, 1
    gt $I11, rx681_eos, rx681_fail1910
    substr $S10, rx681_tgt, rx681_pos, 1
    ne $S10, ucs4:"(", rx681_fail1910
    add rx681_pos, 1
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."signature"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    nqp_rxmark rx681_bstack, rxsubrule697_pass1936, -1, 0
  rxsubrule697_pass1936:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    add $I11, rx681_pos, 1
    gt $I11, rx681_eos, rx681_fail1910
    substr $S10, rx681_tgt, rx681_pos, 1
    ne $S10, ucs4:")", rx681_fail1910
    add rx681_pos, 1
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    goto alt694_end1932
  alt694_11939:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."panic"("Routine declaration requires a signature")
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
  alt694_end1932:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    store_lex unicode:"$\x{a2}", rx681_cur
    $P5005 = $P103."MATCH"()
    set $P104, $P5005
    .const 'Sub' $P5006 = 'cuid_392_1347804164.33' 
    capture_lex $P5006
    $P5007 = $P5006()
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxmark rx681_bstack, rxquantr705_done1946, rx681_pos, 0
  rxquantr705_loop1945:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."trait"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    goto rxsubrule706_pass1947
  rxsubrule706_back1948:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
  rxsubrule706_pass1947:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "trait")
    set_addr $I11, rxsubrule706_back1948
    push rx681_bstack, $I11
    push rx681_bstack, 0
    push rx681_bstack, rx681_pos
    elements $I11, rx681_cstack
    push rx681_bstack, $I11
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    nqp_rxpeek $I19, rx681_bstack, rxquantr705_done1946
    inc $I19
    inc $I19
    set rx681_rep, rx681_bstack[$I19]
    nqp_rxcommit rx681_bstack, rxquantr705_done1946
    inc rx681_rep
    nqp_rxmark rx681_bstack, rxquantr705_done1946, rx681_pos, rx681_rep
    goto rxquantr705_loop1945
  rxquantr705_done1946:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt708_01951
    nqp_push_label $P11, alt708_11955
    nqp_rxmark rx681_bstack, alt708_end1950, -1, 0
    rx681_cur."!alt"(rx681_pos, "alt_nfa__24_1347804166.57", $P11)
    goto rx681_fail1910
  alt708_01951:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."onlystar"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    nqp_rxmark rx681_bstack, rxsubrule710_pass1953, -1, 0
  rxsubrule710_pass1953:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "onlystar")
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    goto alt708_end1950
  alt708_11955:
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."blockoid"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    nqp_rxmark rx681_bstack, rxsubrule713_pass1957, -1, 0
  rxsubrule713_pass1957:
    rx681_cstack = rx681_cur."!cursor_capture"($P11, "blockoid")
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    goto alt708_end1950
  alt708_end1950:
    nqp_rxcommit rx681_bstack, alt708_end1950
    repr_bind_attr_int rx681_cur, rx681_curclass, "$!pos", rx681_pos
    $P11 = rx681_cur."ws"()
    repr_get_attr_int $I11, $P11, rx681_curclass, "$!pos"
    lt $I11, 0, rx681_fail1910
    repr_get_attr_int rx681_pos, $P11, rx681_curclass, "$!pos"
    rx681_cur."!cursor_pass"(rx681_pos, "method_def", 'backtrack'=>1)
    .return (rx681_cur)
  rx681_restart1909:
    repr_get_attr_obj rx681_cstack, rx681_cur, rx681_curclass, "$!cstack"
  rx681_fail1910:
    unless rx681_bstack, rx681_done1908
    pop $I19, rx681_bstack
    if_null rx681_cstack, rx681_cstack_done1913
    unless rx681_cstack, rx681_cstack_done1913
    dec $I19
    set $P11, rx681_cstack[$I19]
  rx681_cstack_done1913:
    pop rx681_rep, rx681_bstack
    pop rx681_pos, rx681_bstack
    pop $I19, rx681_bstack
    lt rx681_pos, -1, rx681_done1908
    lt rx681_pos, 0, rx681_fail1910
    eq $I19, 0, rx681_fail1910
    nqp_islist $I20, rx681_cstack
    unless $I20, rx681_jump1911
    elements $I18, rx681_bstack
    le $I18, 0, rx681_cut1912
    dec $I18
    set $I18, rx681_bstack[$I18]
  rx681_cut1912:
    assign rx681_cstack, $I18
  rx681_jump1911:
    jump $I19
  rx681_done1908:
    rx681_cur."!cursor_fail"()
    .return (rx681_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_120_1347804164.33_caps" :subid("cuid_memo_171_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["private"], $P5002
    box $P5003, 2
    set $P5001["deflongname"], $P5003
    box $P5004, 0
    set $P5001["signature"], $P5004
    box $P5005, 2
    set $P5001["trait"], $P5005
    box $P5006, 0
    set $P5001["onlystar"], $P5006
    box $P5007, 0
    set $P5001["blockoid"], $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_120_1347804164.33_alt_nfa__24_1347804166.57" :subid("cuid_memo_172_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 0
    push $P5004, $P5005
    box $P5006, 0
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    box $P5008, 0
    push $P5004, $P5008
    box $P5009, 0
    push $P5004, $P5009
    box $P5010, 0
    push $P5004, $P5010
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5011, 'ResizablePMCArray'
    new $P5012, 'ResizablePMCArray'
    push $P5011, $P5012
    new $P5013, 'ResizablePMCArray'
    box $P5014, 0
    push $P5013, $P5014
    box $P5015, 0
    push $P5013, $P5015
    box $P5016, 0
    push $P5013, $P5016
    box $P5017, 0
    push $P5013, $P5017
    box $P5018, 0
    push $P5013, $P5018
    box $P5019, 0
    push $P5013, $P5019
    push $P5011, $P5013
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_392_1347804164.33") :anon :lex :outer("cuid_120_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1054

    box $P5001, 0
    store_dynamic_lex "$*INVOCANT_OK", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "onlystar" :subid("cuid_121_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1062
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_393_1347804164.33' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx716_tgt
    .local int rx716_pos
    .local int rx716_off
    .local int rx716_eos
    .local int rx716_rep
    .local pmc rx716_cur
    .local pmc rx716_curclass
    .local pmc rx716_bstack
    .local pmc rx716_cstack
    (rx716_cur, rx716_tgt, rx716_pos, rx716_curclass, rx716_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx716_cur
    length rx716_eos, rx716_tgt
    eq $I19, 1, rx716_restart1962
    gt rx716_pos, rx716_eos, rx716_fail1963
    repr_get_attr_int $I11, self, rx716_curclass, "$!from"
    ne $I11, -1, rxscan717_done1969
    goto rxscan717_scan1968
  rxscan717_loop1967:
    inc rx716_pos
    gt rx716_pos, rx716_eos, rx716_fail1963
    repr_bind_attr_int rx716_cur, rx716_curclass, "$!from", rx716_pos
  rxscan717_scan1968:
    nqp_rxmark rx716_bstack, rxscan717_loop1967, rx716_pos, 0
  rxscan717_done1969:
    repr_bind_attr_int rx716_cur, rx716_curclass, "$!pos", rx716_pos
    store_lex unicode:"$\x{a2}", rx716_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_393_1347804164.33' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx716_fail1963
    add $I11, rx716_pos, 1
    gt $I11, rx716_eos, rx716_fail1963
    substr $S10, rx716_tgt, rx716_pos, 1
    ne $S10, ucs4:"{", rx716_fail1963
    add rx716_pos, 1
    repr_bind_attr_int rx716_cur, rx716_curclass, "$!pos", rx716_pos
    $P11 = rx716_cur."ws"()
    repr_get_attr_int $I11, $P11, rx716_curclass, "$!pos"
    lt $I11, 0, rx716_fail1963
    repr_get_attr_int rx716_pos, $P11, rx716_curclass, "$!pos"
    add $I11, rx716_pos, 1
    gt $I11, rx716_eos, rx716_fail1963
    substr $S10, rx716_tgt, rx716_pos, 1
    ne $S10, ucs4:"*", rx716_fail1963
    add rx716_pos, 1
    repr_bind_attr_int rx716_cur, rx716_curclass, "$!pos", rx716_pos
    $P11 = rx716_cur."ws"()
    repr_get_attr_int $I11, $P11, rx716_curclass, "$!pos"
    lt $I11, 0, rx716_fail1963
    repr_get_attr_int rx716_pos, $P11, rx716_curclass, "$!pos"
    add $I11, rx716_pos, 1
    gt $I11, rx716_eos, rx716_fail1963
    substr $S10, rx716_tgt, rx716_pos, 1
    ne $S10, ucs4:"}", rx716_fail1963
    add rx716_pos, 1
    repr_bind_attr_int rx716_cur, rx716_curclass, "$!pos", rx716_pos
    $P11 = rx716_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx716_curclass, "$!pos"
    lt $I11, 0, rx716_fail1963
    repr_bind_attr_int rx716_cur, rx716_curclass, "$!pos", rx716_pos
    $P11 = rx716_cur."finishpad"()
    repr_get_attr_int $I11, $P11, rx716_curclass, "$!pos"
    lt $I11, 0, rx716_fail1963
    repr_get_attr_int rx716_pos, $P11, rx716_curclass, "$!pos"
    rx716_cur."!cursor_pass"(rx716_pos, "onlystar", 'backtrack'=>1)
    .return (rx716_cur)
  rx716_restart1962:
    repr_get_attr_obj rx716_cstack, rx716_cur, rx716_curclass, "$!cstack"
  rx716_fail1963:
    unless rx716_bstack, rx716_done1961
    pop $I19, rx716_bstack
    if_null rx716_cstack, rx716_cstack_done1966
    unless rx716_cstack, rx716_cstack_done1966
    dec $I19
    set $P11, rx716_cstack[$I19]
  rx716_cstack_done1966:
    pop rx716_rep, rx716_bstack
    pop rx716_pos, rx716_bstack
    pop $I19, rx716_bstack
    lt rx716_pos, -1, rx716_done1961
    lt rx716_pos, 0, rx716_fail1963
    eq $I19, 0, rx716_fail1963
    nqp_islist $I20, rx716_cstack
    unless $I20, rx716_jump1964
    elements $I18, rx716_bstack
    le $I18, 0, rx716_cut1965
    dec $I18
    set $I18, rx716_bstack[$I18]
  rx716_cut1965:
    assign rx716_cstack, $I18
  rx716_jump1964:
    jump $I19
  rx716_done1961:
    rx716_cur."!cursor_fail"()
    .return (rx716_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_121_1347804164.33_caps" :subid("cuid_memo_173_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_121_1347804164.33_nfa" :subid("cuid_memo_174_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 123
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "ws"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 42
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "ws"
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 125
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "ENDSTMT"
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_393_1347804164.33") :anon :lex :outer("cuid_121_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1063

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback1970
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback1971
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5005
  fallback1971:
    unless_null $P5002, vivi_7181972
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_7181972:
    set $P5001, $P5002
  fallback1970:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator" :subid("cuid_122_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1069
    .param pmc self 
    $P5001 = self."!protoregex"("multi_declarator")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_123_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1070
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx722_tgt
    .local int rx722_pos
    .local int rx722_off
    .local int rx722_eos
    .local int rx722_rep
    .local pmc rx722_cur
    .local pmc rx722_curclass
    .local pmc rx722_bstack
    .local pmc rx722_cstack
    (rx722_cur, rx722_tgt, rx722_pos, rx722_curclass, rx722_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx722_cur
    length rx722_eos, rx722_tgt
    eq $I19, 1, rx722_restart1978
    gt rx722_pos, rx722_eos, rx722_fail1979
    repr_get_attr_int $I11, self, rx722_curclass, "$!from"
    ne $I11, -1, rxscan723_done1985
    goto rxscan723_scan1984
  rxscan723_loop1983:
    inc rx722_pos
    gt rx722_pos, rx722_eos, rx722_fail1979
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!from", rx722_pos
  rxscan723_scan1984:
    nqp_rxmark rx722_bstack, rxscan723_loop1983, rx722_pos, 0
  rxscan723_done1985:
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    store_lex unicode:"$\x{a2}", rx722_cur
    box $P5002, "multi"
    set $P101, $P5002
    nqp_rxmark rx722_bstack, rxcap724_fail1987, rx722_pos, 0
    add $I11, rx722_pos, 5
    gt $I11, rx722_eos, rx722_fail1979
    substr $S10, rx722_tgt, rx722_pos, 5
    ne $S10, ucs4:"multi", rx722_fail1979
    add rx722_pos, 5
    nqp_rxpeek $I19, rx722_bstack, rxcap724_fail1987
    inc $I19
    set $I11, rx722_bstack[$I19]
    $P11 = rx722_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx722_pos)
    rx722_cstack = rx722_cur."!cursor_capture"($P11, "sym")
    goto rxcap724_done1986
  rxcap724_fail1987:
    goto rx722_fail1979
  rxcap724_done1986:
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."ws"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1979
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
  alt726_01990:
    nqp_rxmark rx722_bstack, alt726_11992, rx722_pos, 0
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1979
    nqp_rxmark rx722_bstack, rxsubrule727_pass1991, -1, 0
  rxsubrule727_pass1991:
    rx722_cstack = rx722_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    goto alt726_end1989
  alt726_11992:
    nqp_rxmark rx722_bstack, alt726_21994, rx722_pos, 0
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1979
    nqp_rxmark rx722_bstack, rxsubrule728_pass1993, -1, 0
  rxsubrule728_pass1993:
    rx722_cstack = rx722_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
    goto alt726_end1989
  alt726_21994:
    repr_bind_attr_int rx722_cur, rx722_curclass, "$!pos", rx722_pos
    $P11 = rx722_cur."panic"("Malformed multi")
    repr_get_attr_int $I11, $P11, rx722_curclass, "$!pos"
    lt $I11, 0, rx722_fail1979
    repr_get_attr_int rx722_pos, $P11, rx722_curclass, "$!pos"
  alt726_end1989:
    rx722_cur."!cursor_pass"(rx722_pos, "multi_declarator:sym<multi>", 'backtrack'=>1)
    .return (rx722_cur)
  rx722_restart1978:
    repr_get_attr_obj rx722_cstack, rx722_cur, rx722_curclass, "$!cstack"
  rx722_fail1979:
    unless rx722_bstack, rx722_done1977
    pop $I19, rx722_bstack
    if_null rx722_cstack, rx722_cstack_done1982
    unless rx722_cstack, rx722_cstack_done1982
    dec $I19
    set $P11, rx722_cstack[$I19]
  rx722_cstack_done1982:
    pop rx722_rep, rx722_bstack
    pop rx722_pos, rx722_bstack
    pop $I19, rx722_bstack
    lt rx722_pos, -1, rx722_done1977
    lt rx722_pos, 0, rx722_fail1979
    eq $I19, 0, rx722_fail1979
    nqp_islist $I20, rx722_cstack
    unless $I20, rx722_jump1980
    elements $I18, rx722_bstack
    le $I18, 0, rx722_cut1981
    dec $I18
    set $I18, rx722_bstack[$I18]
  rx722_cut1981:
    assign rx722_cstack, $I18
  rx722_jump1980:
    jump $I19
  rx722_done1977:
    rx722_cur."!cursor_fail"()
    .return (rx722_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_123_1347804164.33_caps" :subid("cuid_memo_175_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["declarator"], $P5003
    box $P5004, 0
    set $P5001["routine_def"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_123_1347804164.33_nfa" :subid("cuid_memo_176_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 109
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 117
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 108
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 116
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 105
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "ws"
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_124_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1075
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx730_tgt
    .local int rx730_pos
    .local int rx730_off
    .local int rx730_eos
    .local int rx730_rep
    .local pmc rx730_cur
    .local pmc rx730_curclass
    .local pmc rx730_bstack
    .local pmc rx730_cstack
    (rx730_cur, rx730_tgt, rx730_pos, rx730_curclass, rx730_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx730_cur
    length rx730_eos, rx730_tgt
    eq $I19, 1, rx730_restart1998
    gt rx730_pos, rx730_eos, rx730_fail1999
    repr_get_attr_int $I11, self, rx730_curclass, "$!from"
    ne $I11, -1, rxscan731_done2005
    goto rxscan731_scan2004
  rxscan731_loop2003:
    inc rx730_pos
    gt rx730_pos, rx730_eos, rx730_fail1999
    repr_bind_attr_int rx730_cur, rx730_curclass, "$!from", rx730_pos
  rxscan731_scan2004:
    nqp_rxmark rx730_bstack, rxscan731_loop2003, rx730_pos, 0
  rxscan731_done2005:
    repr_bind_attr_int rx730_cur, rx730_curclass, "$!pos", rx730_pos
    store_lex unicode:"$\x{a2}", rx730_cur
    box $P5002, "proto"
    set $P101, $P5002
    nqp_rxmark rx730_bstack, rxcap732_fail2007, rx730_pos, 0
    add $I11, rx730_pos, 5
    gt $I11, rx730_eos, rx730_fail1999
    substr $S10, rx730_tgt, rx730_pos, 5
    ne $S10, ucs4:"proto", rx730_fail1999
    add rx730_pos, 5
    nqp_rxpeek $I19, rx730_bstack, rxcap732_fail2007
    inc $I19
    set $I11, rx730_bstack[$I19]
    $P11 = rx730_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx730_pos)
    rx730_cstack = rx730_cur."!cursor_capture"($P11, "sym")
    goto rxcap732_done2006
  rxcap732_fail2007:
    goto rx730_fail1999
  rxcap732_done2006:
    repr_bind_attr_int rx730_cur, rx730_curclass, "$!pos", rx730_pos
    $P11 = rx730_cur."ws"()
    repr_get_attr_int $I11, $P11, rx730_curclass, "$!pos"
    lt $I11, 0, rx730_fail1999
    repr_get_attr_int rx730_pos, $P11, rx730_curclass, "$!pos"
  alt734_02010:
    nqp_rxmark rx730_bstack, alt734_12012, rx730_pos, 0
    repr_bind_attr_int rx730_cur, rx730_curclass, "$!pos", rx730_pos
    $P11 = rx730_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx730_curclass, "$!pos"
    lt $I11, 0, rx730_fail1999
    nqp_rxmark rx730_bstack, rxsubrule735_pass2011, -1, 0
  rxsubrule735_pass2011:
    rx730_cstack = rx730_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx730_pos, $P11, rx730_curclass, "$!pos"
    goto alt734_end2009
  alt734_12012:
    nqp_rxmark rx730_bstack, alt734_22014, rx730_pos, 0
    repr_bind_attr_int rx730_cur, rx730_curclass, "$!pos", rx730_pos
    $P11 = rx730_cur."routine_def"()
    repr_get_attr_int $I11, $P11, rx730_curclass, "$!pos"
    lt $I11, 0, rx730_fail1999
    nqp_rxmark rx730_bstack, rxsubrule736_pass2013, -1, 0
  rxsubrule736_pass2013:
    rx730_cstack = rx730_cur."!cursor_capture"($P11, "routine_def")
    repr_get_attr_int rx730_pos, $P11, rx730_curclass, "$!pos"
    goto alt734_end2009
  alt734_22014:
    repr_bind_attr_int rx730_cur, rx730_curclass, "$!pos", rx730_pos
    $P11 = rx730_cur."panic"("Malformed proto")
    repr_get_attr_int $I11, $P11, rx730_curclass, "$!pos"
    lt $I11, 0, rx730_fail1999
    repr_get_attr_int rx730_pos, $P11, rx730_curclass, "$!pos"
  alt734_end2009:
    rx730_cur."!cursor_pass"(rx730_pos, "multi_declarator:sym<proto>", 'backtrack'=>1)
    .return (rx730_cur)
  rx730_restart1998:
    repr_get_attr_obj rx730_cstack, rx730_cur, rx730_curclass, "$!cstack"
  rx730_fail1999:
    unless rx730_bstack, rx730_done1997
    pop $I19, rx730_bstack
    if_null rx730_cstack, rx730_cstack_done2002
    unless rx730_cstack, rx730_cstack_done2002
    dec $I19
    set $P11, rx730_cstack[$I19]
  rx730_cstack_done2002:
    pop rx730_rep, rx730_bstack
    pop rx730_pos, rx730_bstack
    pop $I19, rx730_bstack
    lt rx730_pos, -1, rx730_done1997
    lt rx730_pos, 0, rx730_fail1999
    eq $I19, 0, rx730_fail1999
    nqp_islist $I20, rx730_cstack
    unless $I20, rx730_jump2000
    elements $I18, rx730_bstack
    le $I18, 0, rx730_cut2001
    dec $I18
    set $I18, rx730_bstack[$I18]
  rx730_cut2001:
    assign rx730_cstack, $I18
  rx730_jump2000:
    jump $I19
  rx730_done1997:
    rx730_cur."!cursor_fail"()
    .return (rx730_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_124_1347804164.33_caps" :subid("cuid_memo_177_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["declarator"], $P5003
    box $P5004, 0
    set $P5001["routine_def"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_124_1347804164.33_nfa" :subid("cuid_memo_178_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 112
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 111
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 116
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 111
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "ws"
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 0
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 0
    push $P5031, $P5034
    push $P5001, $P5031
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_125_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1080
    .param pmc _lex_param_0 
    .lex "$*MULTINESS", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx738_tgt
    .local int rx738_pos
    .local int rx738_off
    .local int rx738_eos
    .local int rx738_rep
    .local pmc rx738_cur
    .local pmc rx738_curclass
    .local pmc rx738_bstack
    .local pmc rx738_cstack
    (rx738_cur, rx738_tgt, rx738_pos, rx738_curclass, rx738_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx738_cur
    length rx738_eos, rx738_tgt
    eq $I19, 1, rx738_restart2018
    gt rx738_pos, rx738_eos, rx738_fail2019
    repr_get_attr_int $I11, self, rx738_curclass, "$!from"
    ne $I11, -1, rxscan739_done2025
    goto rxscan739_scan2024
  rxscan739_loop2023:
    inc rx738_pos
    gt rx738_pos, rx738_eos, rx738_fail2019
    repr_bind_attr_int rx738_cur, rx738_curclass, "$!from", rx738_pos
  rxscan739_scan2024:
    nqp_rxmark rx738_bstack, rxscan739_loop2023, rx738_pos, 0
  rxscan739_done2025:
    repr_bind_attr_int rx738_cur, rx738_curclass, "$!pos", rx738_pos
    store_lex unicode:"$\x{a2}", rx738_cur
    box $P5002, ""
    set $P101, $P5002
    repr_bind_attr_int rx738_cur, rx738_curclass, "$!pos", rx738_pos
    $P11 = rx738_cur."declarator"()
    repr_get_attr_int $I11, $P11, rx738_curclass, "$!pos"
    lt $I11, 0, rx738_fail2019
    nqp_rxmark rx738_bstack, rxsubrule740_pass2026, -1, 0
  rxsubrule740_pass2026:
    rx738_cstack = rx738_cur."!cursor_capture"($P11, "declarator")
    repr_get_attr_int rx738_pos, $P11, rx738_curclass, "$!pos"
    rx738_cur."!cursor_pass"(rx738_pos, "multi_declarator:sym<null>", 'backtrack'=>1)
    .return (rx738_cur)
  rx738_restart2018:
    repr_get_attr_obj rx738_cstack, rx738_cur, rx738_curclass, "$!cstack"
  rx738_fail2019:
    unless rx738_bstack, rx738_done2017
    pop $I19, rx738_bstack
    if_null rx738_cstack, rx738_cstack_done2022
    unless rx738_cstack, rx738_cstack_done2022
    dec $I19
    set $P11, rx738_cstack[$I19]
  rx738_cstack_done2022:
    pop rx738_rep, rx738_bstack
    pop rx738_pos, rx738_bstack
    pop $I19, rx738_bstack
    lt rx738_pos, -1, rx738_done2017
    lt rx738_pos, 0, rx738_fail2019
    eq $I19, 0, rx738_fail2019
    nqp_islist $I20, rx738_cstack
    unless $I20, rx738_jump2020
    elements $I18, rx738_bstack
    le $I18, 0, rx738_cut2021
    dec $I18
    set $I18, rx738_bstack[$I18]
  rx738_cut2021:
    assign rx738_cstack, $I18
  rx738_jump2020:
    jump $I19
  rx738_done2017:
    rx738_cur."!cursor_fail"()
    .return (rx738_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_125_1347804164.33_caps" :subid("cuid_memo_179_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["declarator"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_125_1347804164.33_nfa" :subid("cuid_memo_180_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "declarator"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_127_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1085
    .param pmc _lex_param_0 
    .const 'Sub' $P5005 = 'cuid_394_1347804164.33' 
    capture_lex $P5005 
    .const 'Sub' $P5005 = 'cuid_126_1347804164.33' 
    capture_lex $P5005 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx741_tgt
    .local int rx741_pos
    .local int rx741_off
    .local int rx741_eos
    .local int rx741_rep
    .local pmc rx741_cur
    .local pmc rx741_curclass
    .local pmc rx741_bstack
    .local pmc rx741_cstack
    (rx741_cur, rx741_tgt, rx741_pos, rx741_curclass, rx741_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx741_cur
    length rx741_eos, rx741_tgt
    eq $I19, 1, rx741_restart2029
    gt rx741_pos, rx741_eos, rx741_fail2030
    repr_get_attr_int $I11, self, rx741_curclass, "$!from"
    ne $I11, -1, rxscan742_done2036
    goto rxscan742_scan2035
  rxscan742_loop2034:
    inc rx741_pos
    gt rx741_pos, rx741_eos, rx741_fail2030
    repr_bind_attr_int rx741_cur, rx741_curclass, "$!from", rx741_pos
  rxscan742_scan2035:
    nqp_rxmark rx741_bstack, rxscan742_loop2034, rx741_pos, 0
  rxscan742_done2036:
    nqp_rxmark rx741_bstack, rxquantr743_done2038, rx741_pos, 0
  rxquantr743_loop2037:
    repr_bind_attr_int rx741_cur, rx741_curclass, "$!pos", rx741_pos
    store_lex unicode:"$\x{a2}", rx741_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_394_1347804164.33' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx741_fail2030
    repr_bind_attr_int rx741_cur, rx741_curclass, "$!pos", rx741_pos
    $P11 = rx741_cur."ws"()
    repr_get_attr_int $I11, $P11, rx741_curclass, "$!pos"
    lt $I11, 0, rx741_fail2030
    repr_get_attr_int rx741_pos, $P11, rx741_curclass, "$!pos"
    repr_bind_attr_int rx741_cur, rx741_curclass, "$!pos", rx741_pos
    $P11 = rx741_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx741_curclass, "$!pos"
    lt $I11, 0, rx741_fail2030
    nqp_rxmark rx741_bstack, rxsubrule746_pass2043, -1, 0
  rxsubrule746_pass2043:
    rx741_cstack = rx741_cur."!cursor_capture"($P11, "invocant")
    repr_get_attr_int rx741_pos, $P11, rx741_curclass, "$!pos"
    repr_bind_attr_int rx741_cur, rx741_curclass, "$!pos", rx741_pos
    $P11 = rx741_cur."ws"()
    repr_get_attr_int $I11, $P11, rx741_curclass, "$!pos"
    lt $I11, 0, rx741_fail2030
    repr_get_attr_int rx741_pos, $P11, rx741_curclass, "$!pos"
    add $I11, rx741_pos, 1
    gt $I11, rx741_eos, rx741_fail2030
    substr $S10, rx741_tgt, rx741_pos, 1
    ne $S10, ucs4:":", rx741_fail2030
    add rx741_pos, 1
    nqp_rxpeek $I19, rx741_bstack, rxquantr743_done2038
    inc $I19
    inc $I19
    set rx741_rep, rx741_bstack[$I19]
    nqp_rxcommit rx741_bstack, rxquantr743_done2038
    inc rx741_rep
  rxquantr743_done2038:
    nqp_rxmark rx741_bstack, rxquantr748_done2046, rx741_pos, 0
  rxquantr748_loop2045:
    nqp_rxmark rx741_bstack, rxquantr749_done2048, rx741_pos, 0
  rxquantr749_loop2047:
    repr_bind_attr_int rx741_cur, rx741_curclass, "$!pos", rx741_pos
    $P11 = rx741_cur."ws"()
    repr_get_attr_int $I11, $P11, rx741_curclass, "$!pos"
    lt $I11, 0, rx741_fail2030
    repr_get_attr_int rx741_pos, $P11, rx741_curclass, "$!pos"
    repr_bind_attr_int rx741_cur, rx741_curclass, "$!pos", rx741_pos
    $P11 = rx741_cur."parameter"()
    repr_get_attr_int $I11, $P11, rx741_curclass, "$!pos"
    lt $I11, 0, rx741_fail2030
    nqp_rxmark rx741_bstack, rxsubrule751_pass2050, -1, 0
  rxsubrule751_pass2050:
    rx741_cstack = rx741_cur."!cursor_capture"($P11, "parameter")
    repr_get_attr_int rx741_pos, $P11, rx741_curclass, "$!pos"
    repr_bind_attr_int rx741_cur, rx741_curclass, "$!pos", rx741_pos
    $P11 = rx741_cur."ws"()
    repr_get_attr_int $I11, $P11, rx741_curclass, "$!pos"
    lt $I11, 0, rx741_fail2030
    repr_get_attr_int rx741_pos, $P11, rx741_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt753_02053
    nqp_push_label $P11, alt753_12054
    nqp_rxmark rx741_bstack, alt753_end2052, -1, 0
    rx741_cur."!alt"(rx741_pos, "alt_nfa__26_1347804166.644", $P11)
    goto rx741_fail2030
  alt753_02053:
    add $I11, rx741_pos, 1
    gt $I11, rx741_eos, rx741_fail2030
    substr $S10, rx741_tgt, rx741_pos, 1
    ne $S10, ucs4:",", rx741_fail2030
    add rx741_pos, 1
    goto alt753_end2052
  alt753_12054:
    .const 'Sub' $P5004 = 'cuid_126_1347804164.33' 
    capture_lex $P5004
    repr_bind_attr_int rx741_cur, rx741_curclass, "$!pos", rx741_pos
    $P11 = rx741_cur."before"($P5004)
    repr_get_attr_int $I11, $P11, rx741_curclass, "$!pos"
    lt $I11, 0, rx741_fail2030
    nqp_rxmark rx741_bstack, rxsubrule758_pass2070, -1, 0
  rxsubrule758_pass2070:
    rx741_cstack = rx741_cur."!cursor_capture"($P11, "before")
    repr_get_attr_int rx741_pos, $P11, rx741_curclass, "$!pos"
    goto alt753_end2052
  alt753_end2052:
    nqp_rxcommit rx741_bstack, alt753_end2052
    nqp_rxpeek $I19, rx741_bstack, rxquantr749_done2048
    inc $I19
    inc $I19
    set rx741_rep, rx741_bstack[$I19]
    nqp_rxcommit rx741_bstack, rxquantr749_done2048
    inc rx741_rep
    nqp_rxmark rx741_bstack, rxquantr749_done2048, rx741_pos, rx741_rep
    goto rxquantr749_loop2047
  rxquantr749_done2048:
    nqp_rxpeek $I19, rx741_bstack, rxquantr748_done2046
    inc $I19
    inc $I19
    set rx741_rep, rx741_bstack[$I19]
    nqp_rxcommit rx741_bstack, rxquantr748_done2046
    inc rx741_rep
  rxquantr748_done2046:
    rx741_cur."!cursor_pass"(rx741_pos, "signature", 'backtrack'=>1)
    .return (rx741_cur)
  rx741_restart2029:
    repr_get_attr_obj rx741_cstack, rx741_cur, rx741_curclass, "$!cstack"
  rx741_fail2030:
    unless rx741_bstack, rx741_done2028
    pop $I19, rx741_bstack
    if_null rx741_cstack, rx741_cstack_done2033
    unless rx741_cstack, rx741_cstack_done2033
    dec $I19
    set $P11, rx741_cstack[$I19]
  rx741_cstack_done2033:
    pop rx741_rep, rx741_bstack
    pop rx741_pos, rx741_bstack
    pop $I19, rx741_bstack
    lt rx741_pos, -1, rx741_done2028
    lt rx741_pos, 0, rx741_fail2030
    eq $I19, 0, rx741_fail2030
    nqp_islist $I20, rx741_cstack
    unless $I20, rx741_jump2031
    elements $I18, rx741_bstack
    le $I18, 0, rx741_cut2032
    dec $I18
    set $I18, rx741_bstack[$I18]
  rx741_cut2032:
    assign rx741_cstack, $I18
  rx741_jump2031:
    jump $I19
  rx741_done2028:
    rx741_cur."!cursor_fail"()
    .return (rx741_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_127_1347804164.33_caps" :subid("cuid_memo_181_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["invocant"], $P5002
    box $P5003, 2
    set $P5001["parameter"], $P5003
    box $P5004, 2
    set $P5001["before"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_127_1347804164.33_nfa" :subid("cuid_memo_182_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 1
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 6
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "ws"
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    push $P5001, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "parameter"
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 8
    push $P5018, $P5019
    box $P5020, "ws"
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    push $P5001, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 2
    push $P5022, $P5023
    box $P5024, 58
    push $P5022, $P5024
    box $P5025, 6
    push $P5022, $P5025
    push $P5001, $P5022
    new $P5026, 'ResizablePMCArray'
    box $P5027, 8
    push $P5026, $P5027
    box $P5028, "ws"
    push $P5026, $P5028
    box $P5029, 7
    push $P5026, $P5029
    box $P5030, 1
    push $P5026, $P5030
    box $P5031, 0
    push $P5026, $P5031
    box $P5032, 0
    push $P5026, $P5032
    box $P5033, 1
    push $P5026, $P5033
    box $P5034, 0
    push $P5026, $P5034
    box $P5035, 0
    push $P5026, $P5035
    push $P5001, $P5026
    new $P5036, 'ResizablePMCArray'
    box $P5037, 8
    push $P5036, $P5037
    box $P5038, "parameter"
    push $P5036, $P5038
    box $P5039, 8
    push $P5036, $P5039
    push $P5001, $P5036
    new $P5040, 'ResizablePMCArray'
    box $P5041, 8
    push $P5040, $P5041
    box $P5042, "ws"
    push $P5040, $P5042
    box $P5043, 9
    push $P5040, $P5043
    push $P5001, $P5040
    new $P5044, 'ResizablePMCArray'
    box $P5045, 2
    push $P5044, $P5045
    box $P5046, 44
    push $P5044, $P5046
    box $P5047, 6
    push $P5044, $P5047
    box $P5048, 4
    push $P5044, $P5048
    box $P5049, 32
    push $P5044, $P5049
    box $P5050, 9
    push $P5044, $P5050
    box $P5051, 1
    push $P5044, $P5051
    box $P5052, 0
    push $P5044, $P5052
    box $P5053, 11
    push $P5044, $P5053
    push $P5001, $P5044
    new $P5054, 'ResizablePMCArray'
    box $P5055, 0
    push $P5054, $P5055
    box $P5056, 0
    push $P5054, $P5056
    box $P5057, 0
    push $P5054, $P5057
    push $P5001, $P5054
    new $P5058, 'ResizablePMCArray'
    box $P5059, 2
    push $P5058, $P5059
    box $P5060, 41
    push $P5058, $P5060
    box $P5061, 10
    push $P5058, $P5061
    box $P5062, 2
    push $P5058, $P5062
    box $P5063, 123
    push $P5058, $P5063
    box $P5064, 10
    push $P5058, $P5064
    push $P5001, $P5058
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_127_1347804164.33_alt_nfa__26_1347804166.644" :subid("cuid_memo_183_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 44
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 4
    push $P5010, $P5011
    box $P5012, 32
    push $P5010, $P5012
    box $P5013, 1
    push $P5010, $P5013
    box $P5014, 1
    push $P5010, $P5014
    box $P5015, 0
    push $P5010, $P5015
    box $P5016, 3
    push $P5010, $P5016
    push $P5008, $P5010
    new $P5017, 'ResizablePMCArray'
    box $P5018, 0
    push $P5017, $P5018
    box $P5019, 0
    push $P5017, $P5019
    box $P5020, 0
    push $P5017, $P5020
    push $P5008, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 41
    push $P5021, $P5023
    box $P5024, 2
    push $P5021, $P5024
    box $P5025, 2
    push $P5021, $P5025
    box $P5026, 123
    push $P5021, $P5026
    box $P5027, 2
    push $P5021, $P5027
    push $P5008, $P5021
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_394_1347804164.33") :anon :lex :outer("cuid_127_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1086

    find_dynamic_lex $P5001, "$*INVOCANT_OK"
    unless_null $P5001, fallback2039
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$INVOCANT_OK"]
    unless_null $P5002, fallback2040
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5005
  fallback2040:
    unless_null $P5002, vivi_7442041
    die "Contextual $*INVOCANT_OK not found"
    box $P5006, "Contextual $*INVOCANT_OK not found"
    set $P5002, $P5006
  vivi_7442041:
    set $P5001, $P5002
  fallback2039:
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_126_1347804164.33") :anon :lex :outer("cuid_127_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx754_tgt
    .local int rx754_pos
    .local int rx754_off
    .local int rx754_eos
    .local int rx754_rep
    .local pmc rx754_cur
    .local pmc rx754_curclass
    .local pmc rx754_bstack
    .local pmc rx754_cstack
    (rx754_cur, rx754_tgt, rx754_pos, rx754_curclass, rx754_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx754_cur
    length rx754_eos, rx754_tgt
    eq $I19, 1, rx754_restart2057
    gt rx754_pos, rx754_eos, rx754_fail2058
    repr_get_attr_int $I11, self, rx754_curclass, "$!from"
    ne $I11, -1, rxscan755_done2064
    goto rxscan755_scan2063
  rxscan755_loop2062:
    inc rx754_pos
    gt rx754_pos, rx754_eos, rx754_fail2058
    repr_bind_attr_int rx754_cur, rx754_curclass, "$!from", rx754_pos
  rxscan755_scan2063:
    nqp_rxmark rx754_bstack, rxscan755_loop2062, rx754_pos, 0
  rxscan755_done2064:
    nqp_rxmark rx754_bstack, rxquantr756_done2066, rx754_pos, 0
  rxquantr756_loop2065:
    ge rx754_pos, rx754_eos, rx754_fail2058
    is_cclass $I11, .CCLASS_WHITESPACE, rx754_tgt, rx754_pos
    unless $I11, rx754_fail2058
    add rx754_pos, 1
    nqp_rxpeek $I19, rx754_bstack, rxquantr756_done2066
    inc $I19
    inc $I19
    set rx754_rep, rx754_bstack[$I19]
    nqp_rxcommit rx754_bstack, rxquantr756_done2066
    inc rx754_rep
    nqp_rxmark rx754_bstack, rxquantr756_done2066, rx754_pos, rx754_rep
    goto rxquantr756_loop2065
  rxquantr756_done2066:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt757_02068
    nqp_push_label $P11, alt757_12069
    nqp_rxmark rx754_bstack, alt757_end2067, -1, 0
    rx754_cur."!alt"(rx754_pos, "alt_nfa__25_1347804166.638", $P11)
    goto rx754_fail2058
  alt757_02068:
    add $I11, rx754_pos, 1
    gt $I11, rx754_eos, rx754_fail2058
    substr $S10, rx754_tgt, rx754_pos, 1
    ne $S10, ucs4:")", rx754_fail2058
    add rx754_pos, 1
    goto alt757_end2067
  alt757_12069:
    add $I11, rx754_pos, 1
    gt $I11, rx754_eos, rx754_fail2058
    substr $S10, rx754_tgt, rx754_pos, 1
    ne $S10, ucs4:"{", rx754_fail2058
    add rx754_pos, 1
    goto alt757_end2067
  alt757_end2067:
    nqp_rxcommit rx754_bstack, alt757_end2067
    rx754_cur."!cursor_pass"(rx754_pos, 'backtrack'=>1)
    .return (rx754_cur)
  rx754_restart2057:
    repr_get_attr_obj rx754_cstack, rx754_cur, rx754_curclass, "$!cstack"
  rx754_fail2058:
    unless rx754_bstack, rx754_done2056
    pop $I19, rx754_bstack
    if_null rx754_cstack, rx754_cstack_done2061
    unless rx754_cstack, rx754_cstack_done2061
    dec $I19
    set $P11, rx754_cstack[$I19]
  rx754_cstack_done2061:
    pop rx754_rep, rx754_bstack
    pop rx754_pos, rx754_bstack
    pop $I19, rx754_bstack
    lt rx754_pos, -1, rx754_done2056
    lt rx754_pos, 0, rx754_fail2058
    eq $I19, 0, rx754_fail2058
    nqp_islist $I20, rx754_cstack
    unless $I20, rx754_jump2059
    elements $I18, rx754_bstack
    le $I18, 0, rx754_cut2060
    dec $I18
    set $I18, rx754_bstack[$I18]
  rx754_cut2060:
    assign rx754_cstack, $I18
  rx754_jump2059:
    jump $I19
  rx754_done2056:
    rx754_cur."!cursor_fail"()
    .return (rx754_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_126_1347804164.33_caps" :subid("cuid_memo_184_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_126_1347804164.33_nfa" :subid("cuid_memo_185_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 4
    push $P5003, $P5004
    box $P5005, 32
    push $P5003, $P5005
    box $P5006, 1
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 41
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    box $P5014, 2
    push $P5010, $P5014
    box $P5015, 123
    push $P5010, $P5015
    box $P5016, 0
    push $P5010, $P5016
    push $P5001, $P5010
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_126_1347804164.33_alt_nfa__25_1347804166.638" :subid("cuid_memo_186_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 41
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 123
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_128_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1090
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx759_tgt
    .local int rx759_pos
    .local int rx759_off
    .local int rx759_eos
    .local int rx759_rep
    .local pmc rx759_cur
    .local pmc rx759_curclass
    .local pmc rx759_bstack
    .local pmc rx759_cstack
    (rx759_cur, rx759_tgt, rx759_pos, rx759_curclass, rx759_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx759_cur
    length rx759_eos, rx759_tgt
    eq $I19, 1, rx759_restart2073
    gt rx759_pos, rx759_eos, rx759_fail2074
    repr_get_attr_int $I11, self, rx759_curclass, "$!from"
    ne $I11, -1, rxscan760_done2080
    goto rxscan760_scan2079
  rxscan760_loop2078:
    inc rx759_pos
    gt rx759_pos, rx759_eos, rx759_fail2074
    repr_bind_attr_int rx759_cur, rx759_curclass, "$!from", rx759_pos
  rxscan760_scan2079:
    nqp_rxmark rx759_bstack, rxscan760_loop2078, rx759_pos, 0
  rxscan760_done2080:
    nqp_rxmark rx759_bstack, rxquantr761_done2082, rx759_pos, 0
  rxquantr761_loop2081:
    repr_bind_attr_int rx759_cur, rx759_curclass, "$!pos", rx759_pos
    $P11 = rx759_cur."typename"()
    repr_get_attr_int $I11, $P11, rx759_curclass, "$!pos"
    lt $I11, 0, rx759_fail2074
    nqp_rxmark rx759_bstack, rxsubrule762_pass2083, -1, 0
  rxsubrule762_pass2083:
    rx759_cstack = rx759_cur."!cursor_capture"($P11, "typename")
    repr_get_attr_int rx759_pos, $P11, rx759_curclass, "$!pos"
    nqp_rxmark rx759_bstack, rxquantr763_done2085, rx759_pos, 0
  rxquantr763_loop2084:
    add $I11, rx759_pos, 1
    gt $I11, rx759_eos, rx759_fail2074
    substr $S10, rx759_tgt, rx759_pos, 1
    ne $S10, ucs4:":", rx759_fail2074
    add rx759_pos, 1
    nqp_rxmark rx759_bstack, rxcap764_fail2087, rx759_pos, 0
    ge rx759_pos, rx759_eos, rx759_fail2074
    substr $S11, rx759_tgt, rx759_pos, 1
    index $I11, ucs4:"_DU", $S11
    lt $I11, 0, rx759_fail2074
    inc rx759_pos
    nqp_rxpeek $I19, rx759_bstack, rxcap764_fail2087
    inc $I19
    set $I11, rx759_bstack[$I19]
    $P11 = rx759_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx759_pos)
    rx759_cstack = rx759_cur."!cursor_capture"($P11, "definedness")
    goto rxcap764_done2086
  rxcap764_fail2087:
    goto rx759_fail2074
  rxcap764_done2086:
    nqp_rxpeek $I19, rx759_bstack, rxquantr763_done2085
    inc $I19
    inc $I19
    set rx759_rep, rx759_bstack[$I19]
    nqp_rxcommit rx759_bstack, rxquantr763_done2085
    inc rx759_rep
  rxquantr763_done2085:
    repr_bind_attr_int rx759_cur, rx759_curclass, "$!pos", rx759_pos
    $P11 = rx759_cur."ws"()
    repr_get_attr_int $I11, $P11, rx759_curclass, "$!pos"
    lt $I11, 0, rx759_fail2074
    repr_get_attr_int rx759_pos, $P11, rx759_curclass, "$!pos"
    nqp_rxpeek $I19, rx759_bstack, rxquantr761_done2082
    inc $I19
    inc $I19
    set rx759_rep, rx759_bstack[$I19]
    nqp_rxcommit rx759_bstack, rxquantr761_done2082
    inc rx759_rep
    nqp_rxmark rx759_bstack, rxquantr761_done2082, rx759_pos, rx759_rep
    goto rxquantr761_loop2081
  rxquantr761_done2082:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt766_02090
    nqp_push_label $P11, alt766_12094
    nqp_rxmark rx759_bstack, alt766_end2089, -1, 0
    rx759_cur."!alt"(rx759_pos, "alt_nfa__27_1347804166.669", $P11)
    goto rx759_fail2074
  alt766_02090:
    nqp_rxmark rx759_bstack, rxcap767_fail2092, rx759_pos, 0
    add $I11, rx759_pos, 1
    gt $I11, rx759_eos, rx759_fail2074
    substr $S10, rx759_tgt, rx759_pos, 1
    ne $S10, ucs4:"*", rx759_fail2074
    add rx759_pos, 1
    nqp_rxpeek $I19, rx759_bstack, rxcap767_fail2092
    inc $I19
    set $I11, rx759_bstack[$I19]
    $P11 = rx759_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx759_pos)
    rx759_cstack = rx759_cur."!cursor_capture"($P11, "quant")
    goto rxcap767_done2091
  rxcap767_fail2092:
    goto rx759_fail2074
  rxcap767_done2091:
    repr_bind_attr_int rx759_cur, rx759_curclass, "$!pos", rx759_pos
    $P11 = rx759_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx759_curclass, "$!pos"
    lt $I11, 0, rx759_fail2074
    nqp_rxmark rx759_bstack, rxsubrule768_pass2093, -1, 0
  rxsubrule768_pass2093:
    rx759_cstack = rx759_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx759_pos, $P11, rx759_curclass, "$!pos"
    goto alt766_end2089
  alt766_12094:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt769_02096
    nqp_push_label $P11, alt769_12098
    nqp_rxmark rx759_bstack, alt769_end2095, -1, 0
    rx759_cur."!alt"(rx759_pos, "alt_nfa__28_1347804166.669", $P11)
    goto rx759_fail2074
  alt769_02096:
    repr_bind_attr_int rx759_cur, rx759_curclass, "$!pos", rx759_pos
    $P11 = rx759_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx759_curclass, "$!pos"
    lt $I11, 0, rx759_fail2074
    nqp_rxmark rx759_bstack, rxsubrule770_pass2097, -1, 0
  rxsubrule770_pass2097:
    rx759_cstack = rx759_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx759_pos, $P11, rx759_curclass, "$!pos"
    goto alt769_end2095
  alt769_12098:
    repr_bind_attr_int rx759_cur, rx759_curclass, "$!pos", rx759_pos
    $P11 = rx759_cur."named_param"()
    repr_get_attr_int $I11, $P11, rx759_curclass, "$!pos"
    lt $I11, 0, rx759_fail2074
    nqp_rxmark rx759_bstack, rxsubrule771_pass2099, -1, 0
  rxsubrule771_pass2099:
    rx759_cstack = rx759_cur."!cursor_capture"($P11, "named_param")
    repr_get_attr_int rx759_pos, $P11, rx759_curclass, "$!pos"
    goto alt769_end2095
  alt769_end2095:
    nqp_rxcommit rx759_bstack, alt769_end2095
    nqp_rxmark rx759_bstack, rxcap772_fail2101, rx759_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt773_02103
    nqp_push_label $P11, alt773_12104
    nqp_push_label $P11, alt773_22105
    nqp_rxmark rx759_bstack, alt773_end2102, -1, 0
    rx759_cur."!alt"(rx759_pos, "alt_nfa__29_1347804166.669", $P11)
    goto rx759_fail2074
  alt773_02103:
    add $I11, rx759_pos, 1
    gt $I11, rx759_eos, rx759_fail2074
    substr $S10, rx759_tgt, rx759_pos, 1
    ne $S10, ucs4:"?", rx759_fail2074
    add rx759_pos, 1
    goto alt773_end2102
  alt773_12104:
    add $I11, rx759_pos, 1
    gt $I11, rx759_eos, rx759_fail2074
    substr $S10, rx759_tgt, rx759_pos, 1
    ne $S10, ucs4:"!", rx759_fail2074
    add rx759_pos, 1
    goto alt773_end2102
  alt773_22105:
    goto alt773_end2102
  alt773_end2102:
    nqp_rxcommit rx759_bstack, alt773_end2102
    nqp_rxpeek $I19, rx759_bstack, rxcap772_fail2101
    inc $I19
    set $I11, rx759_bstack[$I19]
    $P11 = rx759_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx759_pos)
    rx759_cstack = rx759_cur."!cursor_capture"($P11, "quant")
    goto rxcap772_done2100
  rxcap772_fail2101:
    goto rx759_fail2074
  rxcap772_done2100:
    goto alt766_end2089
  alt766_end2089:
    nqp_rxcommit rx759_bstack, alt766_end2089
    nqp_rxmark rx759_bstack, rxquantr775_done2108, rx759_pos, 0
  rxquantr775_loop2107:
    repr_bind_attr_int rx759_cur, rx759_curclass, "$!pos", rx759_pos
    $P11 = rx759_cur."default_value"()
    repr_get_attr_int $I11, $P11, rx759_curclass, "$!pos"
    lt $I11, 0, rx759_fail2074
    goto rxsubrule776_pass2109
  rxsubrule776_back2110:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx759_curclass, "$!pos"
    lt $I11, 0, rx759_fail2074
  rxsubrule776_pass2109:
    rx759_cstack = rx759_cur."!cursor_capture"($P11, "default_value")
    set_addr $I11, rxsubrule776_back2110
    push rx759_bstack, $I11
    push rx759_bstack, 0
    push rx759_bstack, rx759_pos
    elements $I11, rx759_cstack
    push rx759_bstack, $I11
    repr_get_attr_int rx759_pos, $P11, rx759_curclass, "$!pos"
    nqp_rxpeek $I19, rx759_bstack, rxquantr775_done2108
    inc $I19
    inc $I19
    set rx759_rep, rx759_bstack[$I19]
    nqp_rxcommit rx759_bstack, rxquantr775_done2108
    inc rx759_rep
  rxquantr775_done2108:
    rx759_cur."!cursor_pass"(rx759_pos, "parameter", 'backtrack'=>1)
    .return (rx759_cur)
  rx759_restart2073:
    repr_get_attr_obj rx759_cstack, rx759_cur, rx759_curclass, "$!cstack"
  rx759_fail2074:
    unless rx759_bstack, rx759_done2072
    pop $I19, rx759_bstack
    if_null rx759_cstack, rx759_cstack_done2077
    unless rx759_cstack, rx759_cstack_done2077
    dec $I19
    set $P11, rx759_cstack[$I19]
  rx759_cstack_done2077:
    pop rx759_rep, rx759_bstack
    pop rx759_pos, rx759_bstack
    pop $I19, rx759_bstack
    lt rx759_pos, -1, rx759_done2072
    lt rx759_pos, 0, rx759_fail2074
    eq $I19, 0, rx759_fail2074
    nqp_islist $I20, rx759_cstack
    unless $I20, rx759_jump2075
    elements $I18, rx759_bstack
    le $I18, 0, rx759_cut2076
    dec $I18
    set $I18, rx759_bstack[$I18]
  rx759_cut2076:
    assign rx759_cstack, $I18
  rx759_jump2075:
    jump $I19
  rx759_done2072:
    rx759_cur."!cursor_fail"()
    .return (rx759_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_128_1347804164.33_caps" :subid("cuid_memo_187_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["typename"], $P5002
    box $P5003, 2
    set $P5001["definedness"], $P5003
    box $P5004, 0
    set $P5001["quant"], $P5004
    box $P5005, 0
    set $P5001["param_var"], $P5005
    box $P5006, 0
    set $P5001["named_param"], $P5006
    box $P5007, 2
    set $P5001["default_value"], $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_128_1347804164.33_nfa" :subid("cuid_memo_188_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "typename"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 5
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 58
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    box $P5014, 1
    push $P5010, $P5014
    box $P5015, 0
    push $P5010, $P5015
    box $P5016, 4
    push $P5010, $P5016
    push $P5001, $P5010
    new $P5017, 'ResizablePMCArray'
    box $P5018, 6
    push $P5017, $P5018
    box $P5019, "_DU"
    push $P5017, $P5019
    box $P5020, 4
    push $P5017, $P5020
    push $P5001, $P5017
    new $P5021, 'ResizablePMCArray'
    box $P5022, 8
    push $P5021, $P5022
    box $P5023, "ws"
    push $P5021, $P5023
    box $P5024, 1
    push $P5021, $P5024
    push $P5001, $P5021
    new $P5025, 'ResizablePMCArray'
    box $P5026, 2
    push $P5025, $P5026
    box $P5027, 42
    push $P5025, $P5027
    box $P5028, 6
    push $P5025, $P5028
    box $P5029, 8
    push $P5025, $P5029
    box $P5030, "param_var"
    push $P5025, $P5030
    box $P5031, 8
    push $P5025, $P5031
    box $P5032, 8
    push $P5025, $P5032
    box $P5033, "named_param"
    push $P5025, $P5033
    box $P5034, 8
    push $P5025, $P5034
    push $P5001, $P5025
    new $P5035, 'ResizablePMCArray'
    box $P5036, 8
    push $P5035, $P5036
    box $P5037, "param_var"
    push $P5035, $P5037
    box $P5038, 7
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 8
    push $P5039, $P5040
    box $P5041, "default_value"
    push $P5039, $P5041
    box $P5042, 0
    push $P5039, $P5042
    box $P5043, 1
    push $P5039, $P5043
    box $P5044, 0
    push $P5039, $P5044
    box $P5045, 0
    push $P5039, $P5045
    push $P5001, $P5039
    new $P5046, 'ResizablePMCArray'
    box $P5047, 2
    push $P5046, $P5047
    box $P5048, 63
    push $P5046, $P5048
    box $P5049, 7
    push $P5046, $P5049
    box $P5050, 2
    push $P5046, $P5050
    box $P5051, 33
    push $P5046, $P5051
    box $P5052, 7
    push $P5046, $P5052
    box $P5053, 1
    push $P5046, $P5053
    box $P5054, 0
    push $P5046, $P5054
    box $P5055, 7
    push $P5046, $P5055
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_128_1347804164.33_alt_nfa__28_1347804166.669" :subid("cuid_memo_189_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "param_var"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "named_param"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_128_1347804164.33_alt_nfa__29_1347804166.669" :subid("cuid_memo_190_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 63
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 33
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    new $P5014, 'ResizablePMCArray'
    new $P5015, 'ResizablePMCArray'
    push $P5014, $P5015
    new $P5016, 'ResizablePMCArray'
    box $P5017, 1
    push $P5016, $P5017
    box $P5018, 0
    push $P5016, $P5018
    box $P5019, 0
    push $P5016, $P5019
    push $P5014, $P5016
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_128_1347804164.33_alt_nfa__27_1347804166.669" :subid("cuid_memo_191_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 42
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 8
    push $P5008, $P5009
    box $P5010, "param_var"
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "param_var"
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    box $P5018, 8
    push $P5014, $P5018
    box $P5019, "named_param"
    push $P5014, $P5019
    box $P5020, 2
    push $P5014, $P5020
    push $P5012, $P5014
    new $P5021, 'ResizablePMCArray'
    box $P5022, 2
    push $P5021, $P5022
    box $P5023, 63
    push $P5021, $P5023
    box $P5024, 0
    push $P5021, $P5024
    box $P5025, 2
    push $P5021, $P5025
    box $P5026, 33
    push $P5021, $P5026
    box $P5027, 0
    push $P5021, $P5027
    box $P5028, 1
    push $P5021, $P5028
    box $P5029, 0
    push $P5021, $P5029
    box $P5030, 0
    push $P5021, $P5030
    push $P5012, $P5021
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_129_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1099
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx777_tgt
    .local int rx777_pos
    .local int rx777_off
    .local int rx777_eos
    .local int rx777_rep
    .local pmc rx777_cur
    .local pmc rx777_curclass
    .local pmc rx777_bstack
    .local pmc rx777_cstack
    (rx777_cur, rx777_tgt, rx777_pos, rx777_curclass, rx777_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx777_cur
    length rx777_eos, rx777_tgt
    eq $I19, 1, rx777_restart2113
    gt rx777_pos, rx777_eos, rx777_fail2114
    repr_get_attr_int $I11, self, rx777_curclass, "$!from"
    ne $I11, -1, rxscan778_done2120
    goto rxscan778_scan2119
  rxscan778_loop2118:
    inc rx777_pos
    gt rx777_pos, rx777_eos, rx777_fail2114
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!from", rx777_pos
  rxscan778_scan2119:
    nqp_rxmark rx777_bstack, rxscan778_loop2118, rx777_pos, 0
  rxscan778_done2120:
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!pos", rx777_pos
    $P11 = rx777_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail2114
    nqp_rxmark rx777_bstack, rxsubrule779_pass2121, -1, 0
  rxsubrule779_pass2121:
    rx777_cstack = rx777_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx777_pos, $P11, rx777_curclass, "$!pos"
    nqp_rxmark rx777_bstack, rxquantr780_done2123, rx777_pos, 0
  rxquantr780_loop2122:
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!pos", rx777_pos
    $P11 = rx777_cur."twigil"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail2114
    goto rxsubrule781_pass2124
  rxsubrule781_back2125:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail2114
  rxsubrule781_pass2124:
    rx777_cstack = rx777_cur."!cursor_capture"($P11, "twigil")
    set_addr $I11, rxsubrule781_back2125
    push rx777_bstack, $I11
    push rx777_bstack, 0
    push rx777_bstack, rx777_pos
    elements $I11, rx777_cstack
    push rx777_bstack, $I11
    repr_get_attr_int rx777_pos, $P11, rx777_curclass, "$!pos"
    nqp_rxpeek $I19, rx777_bstack, rxquantr780_done2123
    inc $I19
    inc $I19
    set rx777_rep, rx777_bstack[$I19]
    nqp_rxcommit rx777_bstack, rxquantr780_done2123
    inc rx777_rep
  rxquantr780_done2123:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt782_02127
    nqp_push_label $P11, alt782_12129
    nqp_rxmark rx777_bstack, alt782_end2126, -1, 0
    rx777_cur."!alt"(rx777_pos, "alt_nfa__30_1347804166.681", $P11)
    goto rx777_fail2114
  alt782_02127:
    repr_bind_attr_int rx777_cur, rx777_curclass, "$!pos", rx777_pos
    $P11 = rx777_cur."ident"()
    repr_get_attr_int $I11, $P11, rx777_curclass, "$!pos"
    lt $I11, 0, rx777_fail2114
    nqp_rxmark rx777_bstack, rxsubrule783_pass2128, -1, 0
  rxsubrule783_pass2128:
    rx777_cstack = rx777_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx777_pos, $P11, rx777_curclass, "$!pos"
    goto alt782_end2126
  alt782_12129:
    nqp_rxmark rx777_bstack, rxcap784_fail2131, rx777_pos, 0
    ge rx777_pos, rx777_eos, rx777_fail2114
    substr $S11, rx777_tgt, rx777_pos, 1
    index $I11, ucs4:"/!", $S11
    lt $I11, 0, rx777_fail2114
    inc rx777_pos
    nqp_rxpeek $I19, rx777_bstack, rxcap784_fail2131
    inc $I19
    set $I11, rx777_bstack[$I19]
    $P11 = rx777_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx777_pos)
    rx777_cstack = rx777_cur."!cursor_capture"($P11, "name")
    goto rxcap784_done2130
  rxcap784_fail2131:
    goto rx777_fail2114
  rxcap784_done2130:
    goto alt782_end2126
  alt782_end2126:
    nqp_rxcommit rx777_bstack, alt782_end2126
    rx777_cur."!cursor_pass"(rx777_pos, "param_var", 'backtrack'=>1)
    .return (rx777_cur)
  rx777_restart2113:
    repr_get_attr_obj rx777_cstack, rx777_cur, rx777_curclass, "$!cstack"
  rx777_fail2114:
    unless rx777_bstack, rx777_done2112
    pop $I19, rx777_bstack
    if_null rx777_cstack, rx777_cstack_done2117
    unless rx777_cstack, rx777_cstack_done2117
    dec $I19
    set $P11, rx777_cstack[$I19]
  rx777_cstack_done2117:
    pop rx777_rep, rx777_bstack
    pop rx777_pos, rx777_bstack
    pop $I19, rx777_bstack
    lt rx777_pos, -1, rx777_done2112
    lt rx777_pos, 0, rx777_fail2114
    eq $I19, 0, rx777_fail2114
    nqp_islist $I20, rx777_cstack
    unless $I20, rx777_jump2115
    elements $I18, rx777_bstack
    le $I18, 0, rx777_cut2116
    dec $I18
    set $I18, rx777_bstack[$I18]
  rx777_cut2116:
    assign rx777_cstack, $I18
  rx777_jump2115:
    jump $I19
  rx777_done2112:
    rx777_cur."!cursor_fail"()
    .return (rx777_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1347804164.33_caps" :subid("cuid_memo_192_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sigil"], $P5002
    box $P5003, 2
    set $P5001["twigil"], $P5003
    box $P5004, 0
    set $P5001["name"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1347804164.33_nfa" :subid("cuid_memo_193_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "sigil"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "twigil"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 3
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 8
    push $P5014, $P5015
    box $P5016, "ident"
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    box $P5018, 6
    push $P5014, $P5018
    box $P5019, "/!"
    push $P5014, $P5019
    box $P5020, 0
    push $P5014, $P5020
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_129_1347804164.33_alt_nfa__30_1347804166.681" :subid("cuid_memo_194_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "ident"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 6
    push $P5010, $P5011
    box $P5012, "/!"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_130_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1104
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx785_tgt
    .local int rx785_pos
    .local int rx785_off
    .local int rx785_eos
    .local int rx785_rep
    .local pmc rx785_cur
    .local pmc rx785_curclass
    .local pmc rx785_bstack
    .local pmc rx785_cstack
    (rx785_cur, rx785_tgt, rx785_pos, rx785_curclass, rx785_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx785_cur
    length rx785_eos, rx785_tgt
    eq $I19, 1, rx785_restart2134
    gt rx785_pos, rx785_eos, rx785_fail2135
    repr_get_attr_int $I11, self, rx785_curclass, "$!from"
    ne $I11, -1, rxscan786_done2141
    goto rxscan786_scan2140
  rxscan786_loop2139:
    inc rx785_pos
    gt rx785_pos, rx785_eos, rx785_fail2135
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!from", rx785_pos
  rxscan786_scan2140:
    nqp_rxmark rx785_bstack, rxscan786_loop2139, rx785_pos, 0
  rxscan786_done2141:
    add $I11, rx785_pos, 1
    gt $I11, rx785_eos, rx785_fail2135
    substr $S10, rx785_tgt, rx785_pos, 1
    ne $S10, ucs4:":", rx785_fail2135
    add rx785_pos, 1
    repr_bind_attr_int rx785_cur, rx785_curclass, "$!pos", rx785_pos
    $P11 = rx785_cur."param_var"()
    repr_get_attr_int $I11, $P11, rx785_curclass, "$!pos"
    lt $I11, 0, rx785_fail2135
    nqp_rxmark rx785_bstack, rxsubrule787_pass2142, -1, 0
  rxsubrule787_pass2142:
    rx785_cstack = rx785_cur."!cursor_capture"($P11, "param_var")
    repr_get_attr_int rx785_pos, $P11, rx785_curclass, "$!pos"
    rx785_cur."!cursor_pass"(rx785_pos, "named_param", 'backtrack'=>1)
    .return (rx785_cur)
  rx785_restart2134:
    repr_get_attr_obj rx785_cstack, rx785_cur, rx785_curclass, "$!cstack"
  rx785_fail2135:
    unless rx785_bstack, rx785_done2133
    pop $I19, rx785_bstack
    if_null rx785_cstack, rx785_cstack_done2138
    unless rx785_cstack, rx785_cstack_done2138
    dec $I19
    set $P11, rx785_cstack[$I19]
  rx785_cstack_done2138:
    pop rx785_rep, rx785_bstack
    pop rx785_pos, rx785_bstack
    pop $I19, rx785_bstack
    lt rx785_pos, -1, rx785_done2133
    lt rx785_pos, 0, rx785_fail2135
    eq $I19, 0, rx785_fail2135
    nqp_islist $I20, rx785_cstack
    unless $I20, rx785_jump2136
    elements $I18, rx785_bstack
    le $I18, 0, rx785_cut2137
    dec $I18
    set $I18, rx785_bstack[$I18]
  rx785_cut2137:
    assign rx785_cstack, $I18
  rx785_jump2136:
    jump $I19
  rx785_done2133:
    rx785_cur."!cursor_fail"()
    .return (rx785_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_130_1347804164.33_caps" :subid("cuid_memo_195_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["param_var"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_130_1347804164.33_nfa" :subid("cuid_memo_196_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "param_var"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "default_value" :subid("cuid_131_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1108
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx788_tgt
    .local int rx788_pos
    .local int rx788_off
    .local int rx788_eos
    .local int rx788_rep
    .local pmc rx788_cur
    .local pmc rx788_curclass
    .local pmc rx788_bstack
    .local pmc rx788_cstack
    (rx788_cur, rx788_tgt, rx788_pos, rx788_curclass, rx788_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx788_cur
    length rx788_eos, rx788_tgt
    eq $I19, 1, rx788_restart2145
    gt rx788_pos, rx788_eos, rx788_fail2146
    repr_get_attr_int $I11, self, rx788_curclass, "$!from"
    ne $I11, -1, rxscan789_done2152
    goto rxscan789_scan2151
  rxscan789_loop2150:
    inc rx788_pos
    gt rx788_pos, rx788_eos, rx788_fail2146
    repr_bind_attr_int rx788_cur, rx788_curclass, "$!from", rx788_pos
  rxscan789_scan2151:
    nqp_rxmark rx788_bstack, rxscan789_loop2150, rx788_pos, 0
  rxscan789_done2152:
    repr_bind_attr_int rx788_cur, rx788_curclass, "$!pos", rx788_pos
    $P11 = rx788_cur."ws"()
    repr_get_attr_int $I11, $P11, rx788_curclass, "$!pos"
    lt $I11, 0, rx788_fail2146
    repr_get_attr_int rx788_pos, $P11, rx788_curclass, "$!pos"
    add $I11, rx788_pos, 1
    gt $I11, rx788_eos, rx788_fail2146
    substr $S10, rx788_tgt, rx788_pos, 1
    ne $S10, ucs4:"=", rx788_fail2146
    add rx788_pos, 1
    repr_bind_attr_int rx788_cur, rx788_curclass, "$!pos", rx788_pos
    $P11 = rx788_cur."ws"()
    repr_get_attr_int $I11, $P11, rx788_curclass, "$!pos"
    lt $I11, 0, rx788_fail2146
    repr_get_attr_int rx788_pos, $P11, rx788_curclass, "$!pos"
    repr_bind_attr_int rx788_cur, rx788_curclass, "$!pos", rx788_pos
    $P11 = rx788_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx788_curclass, "$!pos"
    lt $I11, 0, rx788_fail2146
    nqp_rxmark rx788_bstack, rxsubrule792_pass2155, -1, 0
  rxsubrule792_pass2155:
    rx788_cstack = rx788_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx788_pos, $P11, rx788_curclass, "$!pos"
    repr_bind_attr_int rx788_cur, rx788_curclass, "$!pos", rx788_pos
    $P11 = rx788_cur."ws"()
    repr_get_attr_int $I11, $P11, rx788_curclass, "$!pos"
    lt $I11, 0, rx788_fail2146
    repr_get_attr_int rx788_pos, $P11, rx788_curclass, "$!pos"
    rx788_cur."!cursor_pass"(rx788_pos, "default_value", 'backtrack'=>1)
    .return (rx788_cur)
  rx788_restart2145:
    repr_get_attr_obj rx788_cstack, rx788_cur, rx788_curclass, "$!cstack"
  rx788_fail2146:
    unless rx788_bstack, rx788_done2144
    pop $I19, rx788_bstack
    if_null rx788_cstack, rx788_cstack_done2149
    unless rx788_cstack, rx788_cstack_done2149
    dec $I19
    set $P11, rx788_cstack[$I19]
  rx788_cstack_done2149:
    pop rx788_rep, rx788_bstack
    pop rx788_pos, rx788_bstack
    pop $I19, rx788_bstack
    lt rx788_pos, -1, rx788_done2144
    lt rx788_pos, 0, rx788_fail2146
    eq $I19, 0, rx788_fail2146
    nqp_islist $I20, rx788_cstack
    unless $I20, rx788_jump2147
    elements $I18, rx788_bstack
    le $I18, 0, rx788_cut2148
    dec $I18
    set $I18, rx788_bstack[$I18]
  rx788_cut2148:
    assign rx788_cstack, $I18
  rx788_jump2147:
    jump $I19
  rx788_done2144:
    rx788_cur."!cursor_fail"()
    .return (rx788_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_131_1347804164.33_caps" :subid("cuid_memo_197_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_132_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1110
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx794_tgt
    .local int rx794_pos
    .local int rx794_off
    .local int rx794_eos
    .local int rx794_rep
    .local pmc rx794_cur
    .local pmc rx794_curclass
    .local pmc rx794_bstack
    .local pmc rx794_cstack
    (rx794_cur, rx794_tgt, rx794_pos, rx794_curclass, rx794_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx794_cur
    length rx794_eos, rx794_tgt
    eq $I19, 1, rx794_restart2159
    gt rx794_pos, rx794_eos, rx794_fail2160
    repr_get_attr_int $I11, self, rx794_curclass, "$!from"
    ne $I11, -1, rxscan795_done2166
    goto rxscan795_scan2165
  rxscan795_loop2164:
    inc rx794_pos
    gt rx794_pos, rx794_eos, rx794_fail2160
    repr_bind_attr_int rx794_cur, rx794_curclass, "$!from", rx794_pos
  rxscan795_scan2165:
    nqp_rxmark rx794_bstack, rxscan795_loop2164, rx794_pos, 0
  rxscan795_done2166:
    repr_bind_attr_int rx794_cur, rx794_curclass, "$!pos", rx794_pos
    $P11 = rx794_cur."ws"()
    repr_get_attr_int $I11, $P11, rx794_curclass, "$!pos"
    lt $I11, 0, rx794_fail2160
    repr_get_attr_int rx794_pos, $P11, rx794_curclass, "$!pos"
    repr_bind_attr_int rx794_cur, rx794_curclass, "$!pos", rx794_pos
    $P11 = rx794_cur."trait_mod"()
    repr_get_attr_int $I11, $P11, rx794_curclass, "$!pos"
    lt $I11, 0, rx794_fail2160
    nqp_rxmark rx794_bstack, rxsubrule797_pass2168, -1, 0
  rxsubrule797_pass2168:
    rx794_cstack = rx794_cur."!cursor_capture"($P11, "trait_mod")
    repr_get_attr_int rx794_pos, $P11, rx794_curclass, "$!pos"
    repr_bind_attr_int rx794_cur, rx794_curclass, "$!pos", rx794_pos
    $P11 = rx794_cur."ws"()
    repr_get_attr_int $I11, $P11, rx794_curclass, "$!pos"
    lt $I11, 0, rx794_fail2160
    repr_get_attr_int rx794_pos, $P11, rx794_curclass, "$!pos"
    rx794_cur."!cursor_pass"(rx794_pos, "trait", 'backtrack'=>1)
    .return (rx794_cur)
  rx794_restart2159:
    repr_get_attr_obj rx794_cstack, rx794_cur, rx794_curclass, "$!cstack"
  rx794_fail2160:
    unless rx794_bstack, rx794_done2158
    pop $I19, rx794_bstack
    if_null rx794_cstack, rx794_cstack_done2163
    unless rx794_cstack, rx794_cstack_done2163
    dec $I19
    set $P11, rx794_cstack[$I19]
  rx794_cstack_done2163:
    pop rx794_rep, rx794_bstack
    pop rx794_pos, rx794_bstack
    pop $I19, rx794_bstack
    lt rx794_pos, -1, rx794_done2158
    lt rx794_pos, 0, rx794_fail2160
    eq $I19, 0, rx794_fail2160
    nqp_islist $I20, rx794_cstack
    unless $I20, rx794_jump2161
    elements $I18, rx794_bstack
    le $I18, 0, rx794_cut2162
    dec $I18
    set $I18, rx794_bstack[$I18]
  rx794_cut2162:
    assign rx794_cstack, $I18
  rx794_jump2161:
    jump $I19
  rx794_done2158:
    rx794_cur."!cursor_fail"()
    .return (rx794_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_132_1347804164.33_caps" :subid("cuid_memo_198_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["trait_mod"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod" :subid("cuid_133_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1112
    .param pmc self 
    $P5001 = self."!protoregex"("trait_mod")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_134_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1113
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx799_tgt
    .local int rx799_pos
    .local int rx799_off
    .local int rx799_eos
    .local int rx799_rep
    .local pmc rx799_cur
    .local pmc rx799_curclass
    .local pmc rx799_bstack
    .local pmc rx799_cstack
    (rx799_cur, rx799_tgt, rx799_pos, rx799_curclass, rx799_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx799_cur
    length rx799_eos, rx799_tgt
    eq $I19, 1, rx799_restart2172
    gt rx799_pos, rx799_eos, rx799_fail2173
    repr_get_attr_int $I11, self, rx799_curclass, "$!from"
    ne $I11, -1, rxscan800_done2179
    goto rxscan800_scan2178
  rxscan800_loop2177:
    inc rx799_pos
    gt rx799_pos, rx799_eos, rx799_fail2173
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!from", rx799_pos
  rxscan800_scan2178:
    nqp_rxmark rx799_bstack, rxscan800_loop2177, rx799_pos, 0
  rxscan800_done2179:
    nqp_rxmark rx799_bstack, rxcap801_fail2181, rx799_pos, 0
    add $I11, rx799_pos, 2
    gt $I11, rx799_eos, rx799_fail2173
    substr $S10, rx799_tgt, rx799_pos, 2
    ne $S10, ucs4:"is", rx799_fail2173
    add rx799_pos, 2
    nqp_rxpeek $I19, rx799_bstack, rxcap801_fail2181
    inc $I19
    set $I11, rx799_bstack[$I19]
    $P11 = rx799_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx799_pos)
    rx799_cstack = rx799_cur."!cursor_capture"($P11, "sym")
    goto rxcap801_done2180
  rxcap801_fail2181:
    goto rx799_fail2173
  rxcap801_done2180:
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!pos", rx799_pos
    $P11 = rx799_cur."ws"()
    repr_get_attr_int $I11, $P11, rx799_curclass, "$!pos"
    lt $I11, 0, rx799_fail2173
    repr_get_attr_int rx799_pos, $P11, rx799_curclass, "$!pos"
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!pos", rx799_pos
    $P11 = rx799_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx799_curclass, "$!pos"
    lt $I11, 0, rx799_fail2173
    nqp_rxmark rx799_bstack, rxsubrule803_pass2183, -1, 0
  rxsubrule803_pass2183:
    rx799_cstack = rx799_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx799_pos, $P11, rx799_curclass, "$!pos"
    nqp_rxmark rx799_bstack, rxquantr804_done2185, rx799_pos, 0
  rxquantr804_loop2184:
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!pos", rx799_pos
    $P11 = rx799_cur."circumfix"()
    repr_get_attr_int $I11, $P11, rx799_curclass, "$!pos"
    lt $I11, 0, rx799_fail2173
    goto rxsubrule805_pass2186
  rxsubrule805_back2187:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx799_curclass, "$!pos"
    lt $I11, 0, rx799_fail2173
  rxsubrule805_pass2186:
    rx799_cstack = rx799_cur."!cursor_capture"($P11, "circumfix")
    set_addr $I11, rxsubrule805_back2187
    push rx799_bstack, $I11
    push rx799_bstack, 0
    push rx799_bstack, rx799_pos
    elements $I11, rx799_cstack
    push rx799_bstack, $I11
    repr_get_attr_int rx799_pos, $P11, rx799_curclass, "$!pos"
    nqp_rxpeek $I19, rx799_bstack, rxquantr804_done2185
    inc $I19
    inc $I19
    set rx799_rep, rx799_bstack[$I19]
    nqp_rxcommit rx799_bstack, rxquantr804_done2185
    inc rx799_rep
  rxquantr804_done2185:
    repr_bind_attr_int rx799_cur, rx799_curclass, "$!pos", rx799_pos
    $P11 = rx799_cur."ws"()
    repr_get_attr_int $I11, $P11, rx799_curclass, "$!pos"
    lt $I11, 0, rx799_fail2173
    repr_get_attr_int rx799_pos, $P11, rx799_curclass, "$!pos"
    rx799_cur."!cursor_pass"(rx799_pos, "trait_mod:sym<is>", 'backtrack'=>1)
    .return (rx799_cur)
  rx799_restart2172:
    repr_get_attr_obj rx799_cstack, rx799_cur, rx799_curclass, "$!cstack"
  rx799_fail2173:
    unless rx799_bstack, rx799_done2171
    pop $I19, rx799_bstack
    if_null rx799_cstack, rx799_cstack_done2176
    unless rx799_cstack, rx799_cstack_done2176
    dec $I19
    set $P11, rx799_cstack[$I19]
  rx799_cstack_done2176:
    pop rx799_rep, rx799_bstack
    pop rx799_pos, rx799_bstack
    pop $I19, rx799_bstack
    lt rx799_pos, -1, rx799_done2171
    lt rx799_pos, 0, rx799_fail2173
    eq $I19, 0, rx799_fail2173
    nqp_islist $I20, rx799_cstack
    unless $I20, rx799_jump2174
    elements $I18, rx799_bstack
    le $I18, 0, rx799_cut2175
    dec $I18
    set $I18, rx799_bstack[$I18]
  rx799_cut2175:
    assign rx799_cstack, $I18
  rx799_jump2174:
    jump $I19
  rx799_done2171:
    rx799_cur."!cursor_fail"()
    .return (rx799_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_134_1347804164.33_caps" :subid("cuid_memo_199_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["longname"], $P5003
    box $P5004, 2
    set $P5001["circumfix"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_134_1347804164.33_nfa" :subid("cuid_memo_200_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 105
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 115
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_135_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1115
    .param pmc _lex_param_0 
    .const 'Sub' $P5012 = 'cuid_395_1347804164.33' 
    capture_lex $P5012 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx807_tgt
    .local int rx807_pos
    .local int rx807_off
    .local int rx807_eos
    .local int rx807_rep
    .local pmc rx807_cur
    .local pmc rx807_curclass
    .local pmc rx807_bstack
    .local pmc rx807_cstack
    (rx807_cur, rx807_tgt, rx807_pos, rx807_curclass, rx807_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx807_cur
    length rx807_eos, rx807_tgt
    eq $I19, 1, rx807_restart2191
    gt rx807_pos, rx807_eos, rx807_fail2192
    repr_get_attr_int $I11, self, rx807_curclass, "$!from"
    ne $I11, -1, rxscan808_done2198
    goto rxscan808_scan2197
  rxscan808_loop2196:
    inc rx807_pos
    gt rx807_pos, rx807_eos, rx807_fail2192
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!from", rx807_pos
  rxscan808_scan2197:
    nqp_rxmark rx807_bstack, rxscan808_loop2196, rx807_pos, 0
  rxscan808_done2198:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt809_02200
    nqp_push_label $P11, alt809_12230
    nqp_rxmark rx807_bstack, alt809_end2199, -1, 0
    rx807_cur."!alt"(rx807_pos, "alt_nfa__31_1347804166.771", $P11)
    goto rx807_fail2192
  alt809_02200:
    nqp_rxmark rx807_bstack, rxcap810_fail2202, rx807_pos, 0
    add $I11, rx807_pos, 5
    gt $I11, rx807_eos, rx807_fail2192
    substr $S10, rx807_tgt, rx807_pos, 5
    ne $S10, ucs4:"proto", rx807_fail2192
    add rx807_pos, 5
    nqp_rxpeek $I19, rx807_bstack, rxcap810_fail2202
    inc $I19
    set $I11, rx807_bstack[$I19]
    $P11 = rx807_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx807_pos)
    rx807_cstack = rx807_cur."!cursor_capture"($P11, "proto")
    goto rxcap810_done2201
  rxcap810_fail2202:
    goto rx807_fail2192
  rxcap810_done2201:
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt812_02205
    nqp_push_label $P11, alt812_12206
    nqp_push_label $P11, alt812_22207
    nqp_rxmark rx807_bstack, alt812_end2204, -1, 0
    rx807_cur."!alt"(rx807_pos, "alt_nfa__32_1347804166.771", $P11)
    goto rx807_fail2192
  alt812_02205:
    add $I11, rx807_pos, 5
    gt $I11, rx807_eos, rx807_fail2192
    substr $S10, rx807_tgt, rx807_pos, 5
    ne $S10, ucs4:"regex", rx807_fail2192
    add rx807_pos, 5
    goto alt812_end2204
  alt812_12206:
    add $I11, rx807_pos, 5
    gt $I11, rx807_eos, rx807_fail2192
    substr $S10, rx807_tgt, rx807_pos, 5
    ne $S10, ucs4:"token", rx807_fail2192
    add rx807_pos, 5
    goto alt812_end2204
  alt812_22207:
    add $I11, rx807_pos, 4
    gt $I11, rx807_eos, rx807_fail2192
    substr $S10, rx807_tgt, rx807_pos, 4
    ne $S10, ucs4:"rule", rx807_fail2192
    add rx807_pos, 4
    goto alt812_end2204
  alt812_end2204:
    nqp_rxcommit rx807_bstack, alt812_end2204
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    nqp_rxmark rx807_bstack, rxsubrule814_pass2209, -1, 0
  rxsubrule814_pass2209:
    rx807_cstack = rx807_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
  alt816_02212:
    nqp_rxmark rx807_bstack, alt816_12215, rx807_pos, 0
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    add $I11, rx807_pos, 3
    gt $I11, rx807_eos, rx807_fail2192
    substr $S10, rx807_tgt, rx807_pos, 3
    ne $S10, ucs4:"{*}", rx807_fail2192
    add rx807_pos, 3
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    goto alt816_end2211
  alt816_12215:
    nqp_rxmark rx807_bstack, alt816_22220, rx807_pos, 0
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    add $I11, rx807_pos, 1
    gt $I11, rx807_eos, rx807_fail2192
    substr $S10, rx807_tgt, rx807_pos, 1
    ne $S10, ucs4:"{", rx807_fail2192
    add rx807_pos, 1
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    add $I11, rx807_pos, 5
    gt $I11, rx807_eos, rx807_fail2192
    substr $S10, rx807_tgt, rx807_pos, 5
    ne $S10, ucs4:"<...>", rx807_fail2192
    add rx807_pos, 5
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    add $I11, rx807_pos, 1
    gt $I11, rx807_eos, rx807_fail2192
    substr $S10, rx807_tgt, rx807_pos, 1
    ne $S10, ucs4:"}", rx807_fail2192
    add rx807_pos, 1
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    goto alt816_end2211
  alt816_22220:
    nqp_rxmark rx807_bstack, alt816_32225, rx807_pos, 0
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    add $I11, rx807_pos, 1
    gt $I11, rx807_eos, rx807_fail2192
    substr $S10, rx807_tgt, rx807_pos, 1
    ne $S10, ucs4:"{", rx807_fail2192
    add rx807_pos, 1
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    add $I11, rx807_pos, 3
    gt $I11, rx807_eos, rx807_fail2192
    substr $S10, rx807_tgt, rx807_pos, 3
    ne $S10, ucs4:"<*>", rx807_fail2192
    add rx807_pos, 3
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    add $I11, rx807_pos, 1
    gt $I11, rx807_eos, rx807_fail2192
    substr $S10, rx807_tgt, rx807_pos, 1
    ne $S10, ucs4:"}", rx807_fail2192
    add rx807_pos, 1
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    goto alt816_end2211
  alt816_32225:
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."panic"("Proto regex body must be \\{*\\} (or <*> or <...>, which are deprecated)")
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
  alt816_end2211:
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    goto alt809_end2199
  alt809_12230:
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    nqp_rxmark rx807_bstack, rxcap832_fail2233, rx807_pos, 0
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt833_02235
    nqp_push_label $P11, alt833_12236
    nqp_push_label $P11, alt833_22237
    nqp_rxmark rx807_bstack, alt833_end2234, -1, 0
    rx807_cur."!alt"(rx807_pos, "alt_nfa__33_1347804166.773", $P11)
    goto rx807_fail2192
  alt833_02235:
    add $I11, rx807_pos, 5
    gt $I11, rx807_eos, rx807_fail2192
    substr $S10, rx807_tgt, rx807_pos, 5
    ne $S10, ucs4:"regex", rx807_fail2192
    add rx807_pos, 5
    goto alt833_end2234
  alt833_12236:
    add $I11, rx807_pos, 5
    gt $I11, rx807_eos, rx807_fail2192
    substr $S10, rx807_tgt, rx807_pos, 5
    ne $S10, ucs4:"token", rx807_fail2192
    add rx807_pos, 5
    goto alt833_end2234
  alt833_22237:
    add $I11, rx807_pos, 4
    gt $I11, rx807_eos, rx807_fail2192
    substr $S10, rx807_tgt, rx807_pos, 4
    ne $S10, ucs4:"rule", rx807_fail2192
    add rx807_pos, 4
    goto alt833_end2234
  alt833_end2234:
    nqp_rxcommit rx807_bstack, alt833_end2234
    nqp_rxpeek $I19, rx807_bstack, rxcap832_fail2233
    inc $I19
    set $I11, rx807_bstack[$I19]
    $P11 = rx807_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx807_pos)
    rx807_cstack = rx807_cur."!cursor_capture"($P11, "sym")
    goto rxcap832_done2232
  rxcap832_fail2233:
    goto rx807_fail2192
  rxcap832_done2232:
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    nqp_rxmark rx807_bstack, rxsubrule836_pass2240, -1, 0
  rxsubrule836_pass2240:
    rx807_cstack = rx807_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    nqp_rxmark rx807_bstack, rxquantr840_done2245, rx807_pos, 0
  rxquantr840_loop2244:
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    add $I11, rx807_pos, 1
    gt $I11, rx807_eos, rx807_fail2192
    substr $S10, rx807_tgt, rx807_pos, 1
    ne $S10, ucs4:"(", rx807_fail2192
    add rx807_pos, 1
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."signature"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    nqp_rxmark rx807_bstack, rxsubrule843_pass2248, -1, 0
  rxsubrule843_pass2248:
    rx807_cstack = rx807_cur."!cursor_capture"($P11, "signature")
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    add $I11, rx807_pos, 1
    gt $I11, rx807_eos, rx807_fail2192
    substr $S10, rx807_tgt, rx807_pos, 1
    ne $S10, ucs4:")", rx807_fail2192
    add rx807_pos, 1
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    nqp_rxpeek $I19, rx807_bstack, rxquantr840_done2245
    inc $I19
    inc $I19
    set rx807_rep, rx807_bstack[$I19]
    nqp_rxcommit rx807_bstack, rxquantr840_done2245
    inc rx807_rep
  rxquantr840_done2245:
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    store_lex unicode:"$\x{a2}", rx807_cur
    unless_null $P101, fallback2252
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2253
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2253:
    unless_null $P5002, vivi_8472254
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_8472254:
    set $P101, $P5002
  fallback2252:
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    store_lex unicode:"$\x{a2}", rx807_cur
    $P5009 = $P102."MATCH"()
    set $P103, $P5009
    .const 'Sub' $P5010 = 'cuid_395_1347804164.33' 
    capture_lex $P5010
    $P5011 = $P5010()
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    add $I11, rx807_pos, 1
    gt $I11, rx807_eos, rx807_fail2192
    substr $S10, rx807_tgt, rx807_pos, 1
    ne $S10, ucs4:"{", rx807_fail2192
    add rx807_pos, 1
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    nqp_rxmark rx807_bstack, rxsubrule854_pass2276, -1, 0
  rxsubrule854_pass2276:
    rx807_cstack = rx807_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    add $I11, rx807_pos, 1
    gt $I11, rx807_eos, rx807_fail2192
    substr $S10, rx807_tgt, rx807_pos, 1
    ne $S10, ucs4:"}", rx807_fail2192
    add rx807_pos, 1
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_bind_attr_int rx807_cur, rx807_curclass, "$!pos", rx807_pos
    $P11 = rx807_cur."ws"()
    repr_get_attr_int $I11, $P11, rx807_curclass, "$!pos"
    lt $I11, 0, rx807_fail2192
    repr_get_attr_int rx807_pos, $P11, rx807_curclass, "$!pos"
    goto alt809_end2199
  alt809_end2199:
    nqp_rxcommit rx807_bstack, alt809_end2199
    rx807_cur."!cursor_pass"(rx807_pos, "regex_declarator", 'backtrack'=>1)
    .return (rx807_cur)
  rx807_restart2191:
    repr_get_attr_obj rx807_cstack, rx807_cur, rx807_curclass, "$!cstack"
  rx807_fail2192:
    unless rx807_bstack, rx807_done2190
    pop $I19, rx807_bstack
    if_null rx807_cstack, rx807_cstack_done2195
    unless rx807_cstack, rx807_cstack_done2195
    dec $I19
    set $P11, rx807_cstack[$I19]
  rx807_cstack_done2195:
    pop rx807_rep, rx807_bstack
    pop rx807_pos, rx807_bstack
    pop $I19, rx807_bstack
    lt rx807_pos, -1, rx807_done2190
    lt rx807_pos, 0, rx807_fail2192
    eq $I19, 0, rx807_fail2192
    nqp_islist $I20, rx807_cstack
    unless $I20, rx807_jump2193
    elements $I18, rx807_bstack
    le $I18, 0, rx807_cut2194
    dec $I18
    set $I18, rx807_bstack[$I18]
  rx807_cut2194:
    assign rx807_cstack, $I18
  rx807_jump2193:
    jump $I19
  rx807_done2190:
    rx807_cur."!cursor_fail"()
    .return (rx807_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_135_1347804164.33_caps" :subid("cuid_memo_201_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["proto"], $P5002
    box $P5003, 0
    set $P5001["deflongname"], $P5003
    box $P5004, 0
    set $P5001["sym"], $P5004
    box $P5005, 2
    set $P5001["signature"], $P5005
    box $P5006, 0
    set $P5001["p6regex"], $P5006
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_135_1347804164.33_nfa" :subid("cuid_memo_202_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 112
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    box $P5007, 0
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 0
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 2
    push $P5010, $P5011
    box $P5012, 114
    push $P5010, $P5012
    box $P5013, 3
    push $P5010, $P5013
    push $P5001, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 111
    push $P5014, $P5016
    box $P5017, 4
    push $P5014, $P5017
    push $P5001, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 116
    push $P5018, $P5020
    box $P5021, 5
    push $P5018, $P5021
    push $P5001, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 2
    push $P5022, $P5023
    box $P5024, 111
    push $P5022, $P5024
    box $P5025, 6
    push $P5022, $P5025
    push $P5001, $P5022
    new $P5026, 'ResizablePMCArray'
    box $P5027, 0
    push $P5026, $P5027
    box $P5028, 0
    push $P5026, $P5028
    box $P5029, 0
    push $P5026, $P5029
    push $P5001, $P5026
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_135_1347804164.33_alt_nfa__32_1347804166.771" :subid("cuid_memo_203_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 114
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 101
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 103
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 101
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 120
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 116
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 111
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 107
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 101
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 110
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 2
    push $P5048, $P5049
    box $P5050, 114
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 2
    push $P5052, $P5053
    box $P5054, 117
    push $P5052, $P5054
    box $P5055, 3
    push $P5052, $P5055
    push $P5046, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 2
    push $P5056, $P5057
    box $P5058, 108
    push $P5056, $P5058
    box $P5059, 4
    push $P5056, $P5059
    push $P5046, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 2
    push $P5060, $P5061
    box $P5062, 101
    push $P5060, $P5062
    box $P5063, 0
    push $P5060, $P5063
    push $P5046, $P5060
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_135_1347804164.33_alt_nfa__33_1347804166.773" :subid("cuid_memo_204_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 114
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 101
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 103
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 101
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 120
    push $P5020, $P5022
    box $P5023, 0
    push $P5020, $P5023
    push $P5002, $P5020
    push $P5001, $P5002
    new $P5024, 'ResizablePMCArray'
    new $P5025, 'ResizablePMCArray'
    push $P5024, $P5025
    new $P5026, 'ResizablePMCArray'
    box $P5027, 2
    push $P5026, $P5027
    box $P5028, 116
    push $P5026, $P5028
    box $P5029, 2
    push $P5026, $P5029
    push $P5024, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 2
    push $P5030, $P5031
    box $P5032, 111
    push $P5030, $P5032
    box $P5033, 3
    push $P5030, $P5033
    push $P5024, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 107
    push $P5034, $P5036
    box $P5037, 4
    push $P5034, $P5037
    push $P5024, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 2
    push $P5038, $P5039
    box $P5040, 101
    push $P5038, $P5040
    box $P5041, 5
    push $P5038, $P5041
    push $P5024, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 110
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5024, $P5042
    push $P5001, $P5024
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 2
    push $P5048, $P5049
    box $P5050, 114
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 2
    push $P5052, $P5053
    box $P5054, 117
    push $P5052, $P5054
    box $P5055, 3
    push $P5052, $P5055
    push $P5046, $P5052
    new $P5056, 'ResizablePMCArray'
    box $P5057, 2
    push $P5056, $P5057
    box $P5058, 108
    push $P5056, $P5058
    box $P5059, 4
    push $P5056, $P5059
    push $P5046, $P5056
    new $P5060, 'ResizablePMCArray'
    box $P5061, 2
    push $P5060, $P5061
    box $P5062, 101
    push $P5060, $P5062
    box $P5063, 0
    push $P5060, $P5063
    push $P5046, $P5060
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_135_1347804164.33_alt_nfa__31_1347804166.771" :subid("cuid_memo_205_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 112
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 2
    push $P5008, $P5009
    box $P5010, 114
    push $P5008, $P5010
    box $P5011, 3
    push $P5008, $P5011
    push $P5002, $P5008
    new $P5012, 'ResizablePMCArray'
    box $P5013, 2
    push $P5012, $P5013
    box $P5014, 111
    push $P5012, $P5014
    box $P5015, 4
    push $P5012, $P5015
    push $P5002, $P5012
    new $P5016, 'ResizablePMCArray'
    box $P5017, 2
    push $P5016, $P5017
    box $P5018, 116
    push $P5016, $P5018
    box $P5019, 5
    push $P5016, $P5019
    push $P5002, $P5016
    new $P5020, 'ResizablePMCArray'
    box $P5021, 2
    push $P5020, $P5021
    box $P5022, 111
    push $P5020, $P5022
    box $P5023, 6
    push $P5020, $P5023
    push $P5002, $P5020
    new $P5024, 'ResizablePMCArray'
    box $P5025, 0
    push $P5024, $P5025
    box $P5026, 0
    push $P5024, $P5026
    box $P5027, 0
    push $P5024, $P5027
    push $P5002, $P5024
    push $P5001, $P5002
    new $P5028, 'ResizablePMCArray'
    new $P5029, 'ResizablePMCArray'
    push $P5028, $P5029
    new $P5030, 'ResizablePMCArray'
    box $P5031, 0
    push $P5030, $P5031
    box $P5032, 0
    push $P5030, $P5032
    box $P5033, 0
    push $P5030, $P5033
    box $P5034, 0
    push $P5030, $P5034
    box $P5035, 0
    push $P5030, $P5035
    box $P5036, 0
    push $P5030, $P5036
    push $P5028, $P5030
    push $P5001, $P5028
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_395_1347804164.33") :anon :lex :outer("cuid_135_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1130

    find_dynamic_lex $P5001, "%*RX"
    unless_null $P5001, fallback2256
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2257
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2257:
    unless_null $P5002, vivi_8492258
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_8492258:
    set $P5001, $P5002
  fallback2256:
    find_lex $P5010, "$/"
    unless_null $P5010, fallback2259
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5011
  fallback2259:
    set $P5009, $P5010["sym"]
    unless_null $P5009, fallback2260
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5012
  fallback2260:
    set $S5001, $P5009
    iseq $I5001, $S5001, "rule"
    box $P5013, $I5001
    set $P5001["s"], $P5013
    find_dynamic_lex $P5014, "%*RX"
    unless_null $P5014, fallback2261
    nqp_get_sc_object $P5017, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["%RX"]
    unless_null $P5015, fallback2262
    nqp_get_sc_object $P5019, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%RX"], $P5020
    set $P5015, $P5020
  fallback2262:
    unless_null $P5015, vivi_8502263
    die "Contextual %*RX not found"
    box $P5021, "Contextual %*RX not found"
    set $P5015, $P5021
  vivi_8502263:
    set $P5014, $P5015
  fallback2261:
    find_lex $P5023, "$/"
    unless_null $P5023, fallback2266
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5023, $P5024
  fallback2266:
    set $P5022, $P5023["sym"]
    unless_null $P5022, fallback2267
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5022, $P5025
  fallback2267:
    set $S5002, $P5022
    iseq $I5002, $S5002, "token"
    set $I5004, $I5002
    if $I5002 goto unless851_end2265 
    find_lex $P5027, "$/"
    unless_null $P5027, fallback2268
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5027, $P5028
  fallback2268:
    set $P5026, $P5027["sym"]
    unless_null $P5026, fallback2269
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5026, $P5029
  fallback2269:
    set $S5003, $P5026
    iseq $I5003, $S5003, "rule"
    set $I5004, $I5003
  unless851_end2265:
    box $P5030, $I5004
    set $P5014["r"], $P5030
    find_dynamic_lex $P5031, "%*RX"
    unless_null $P5031, fallback2270
    nqp_get_sc_object $P5034, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["%RX"]
    unless_null $P5032, fallback2271
    nqp_get_sc_object $P5036, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5035, $P5036
    new $P5037, 'Hash'
    set $P5035["%RX"], $P5037
    set $P5032, $P5037
  fallback2271:
    unless_null $P5032, vivi_8522272
    die "Contextual %*RX not found"
    box $P5038, "Contextual %*RX not found"
    set $P5032, $P5038
  vivi_8522272:
    set $P5031, $P5032
  fallback2270:
.annotate 'line', 1133
    find_lex $P5040, "$/"
    unless_null $P5040, fallback2273
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5040, $P5041
  fallback2273:
    set $P5039, $P5040["deflongname"]
    unless_null $P5039, fallback2274
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5039, $P5042
  fallback2274:
    $P5043 = $P5039."ast"()
    set $P5031["name"], $P5043
    .return ($P5043) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_136_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1139
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx856_tgt
    .local int rx856_pos
    .local int rx856_off
    .local int rx856_eos
    .local int rx856_rep
    .local pmc rx856_cur
    .local pmc rx856_curclass
    .local pmc rx856_bstack
    .local pmc rx856_cstack
    (rx856_cur, rx856_tgt, rx856_pos, rx856_curclass, rx856_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx856_cur
    length rx856_eos, rx856_tgt
    eq $I19, 1, rx856_restart2280
    gt rx856_pos, rx856_eos, rx856_fail2281
    repr_get_attr_int $I11, self, rx856_curclass, "$!from"
    ne $I11, -1, rxscan857_done2287
    goto rxscan857_scan2286
  rxscan857_loop2285:
    inc rx856_pos
    gt rx856_pos, rx856_eos, rx856_fail2281
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!from", rx856_pos
  rxscan857_scan2286:
    nqp_rxmark rx856_bstack, rxscan857_loop2285, rx856_pos, 0
  rxscan857_done2287:
    add $I11, rx856_pos, 1
    gt $I11, rx856_eos, rx856_fail2281
    substr $S10, rx856_tgt, rx856_pos, 1
    ne $S10, ucs4:".", rx856_fail2281
    add rx856_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt858_02289
    nqp_push_label $P11, alt858_12291
    nqp_rxmark rx856_bstack, alt858_end2288, -1, 0
    rx856_cur."!alt"(rx856_pos, "alt_nfa__34_1347804166.8", $P11)
    goto rx856_fail2281
  alt858_02289:
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2281
    nqp_rxmark rx856_bstack, rxsubrule859_pass2290, -1, 0
  rxsubrule859_pass2290:
    rx856_cstack = rx856_cur."!cursor_capture"($P11, "longname=deflongname")
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    goto alt858_end2288
  alt858_12291:
    ge rx856_pos, rx856_eos, rx856_fail2281
    substr $S11, rx856_tgt, rx856_pos, 1
    index $I11, ucs4:"'\"", $S11
    lt $I11, 0, rx856_fail2281
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."quote"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2281
    nqp_rxmark rx856_bstack, rxsubrule860_pass2292, -1, 0
  rxsubrule860_pass2292:
    rx856_cstack = rx856_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
  alt861_02294:
    nqp_rxmark rx856_bstack, alt861_12295, rx856_pos, 0
    ge rx856_pos, rx856_eos, rx856_fail2281
    substr $S11, rx856_tgt, rx856_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx856_fail2281
    goto alt861_end2293
  alt861_12295:
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."panic"("Quoted method name requires parenthesized arguments")
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2281
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
  alt861_end2293:
    goto alt858_end2288
  alt858_end2288:
    nqp_rxcommit rx856_bstack, alt858_end2288
    nqp_rxmark rx856_bstack, rxquantr863_done2298, rx856_pos, 0
  rxquantr863_loop2297:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt864_02300
    nqp_push_label $P11, alt864_12302
    nqp_rxmark rx856_bstack, alt864_end2299, -1, 0
    rx856_cur."!alt"(rx856_pos, "alt_nfa__35_1347804166.8", $P11)
    goto rx856_fail2281
  alt864_02300:
    ge rx856_pos, rx856_eos, rx856_fail2281
    substr $S11, rx856_tgt, rx856_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx856_fail2281
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."args"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2281
    nqp_rxmark rx856_bstack, rxsubrule865_pass2301, -1, 0
  rxsubrule865_pass2301:
    rx856_cstack = rx856_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    goto alt864_end2299
  alt864_12302:
    add $I11, rx856_pos, 1
    gt $I11, rx856_eos, rx856_fail2281
    substr $S10, rx856_tgt, rx856_pos, 1
    ne $S10, ucs4:":", rx856_fail2281
    add rx856_pos, 1
    ge rx856_pos, rx856_eos, rx856_fail2281
    is_cclass $I11, .CCLASS_WHITESPACE, rx856_tgt, rx856_pos
    unless $I11, rx856_fail2281
    add rx856_pos, 1
    repr_bind_attr_int rx856_cur, rx856_curclass, "$!pos", rx856_pos
    $P11 = rx856_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx856_curclass, "$!pos"
    lt $I11, 0, rx856_fail2281
    nqp_rxmark rx856_bstack, rxsubrule866_pass2303, -1, 0
  rxsubrule866_pass2303:
    rx856_cstack = rx856_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx856_pos, $P11, rx856_curclass, "$!pos"
    goto alt864_end2299
  alt864_end2299:
    nqp_rxpeek $I19, rx856_bstack, rxquantr863_done2298
    inc $I19
    inc $I19
    set rx856_rep, rx856_bstack[$I19]
    nqp_rxcommit rx856_bstack, rxquantr863_done2298
    inc rx856_rep
  rxquantr863_done2298:
    rx856_cur."!cursor_pass"(rx856_pos, "dotty", 'backtrack'=>1)
    .return (rx856_cur)
  rx856_restart2280:
    repr_get_attr_obj rx856_cstack, rx856_cur, rx856_curclass, "$!cstack"
  rx856_fail2281:
    unless rx856_bstack, rx856_done2279
    pop $I19, rx856_bstack
    if_null rx856_cstack, rx856_cstack_done2284
    unless rx856_cstack, rx856_cstack_done2284
    dec $I19
    set $P11, rx856_cstack[$I19]
  rx856_cstack_done2284:
    pop rx856_rep, rx856_bstack
    pop rx856_pos, rx856_bstack
    pop $I19, rx856_bstack
    lt rx856_pos, -1, rx856_done2279
    lt rx856_pos, 0, rx856_fail2281
    eq $I19, 0, rx856_fail2281
    nqp_islist $I20, rx856_cstack
    unless $I20, rx856_jump2282
    elements $I18, rx856_bstack
    le $I18, 0, rx856_cut2283
    dec $I18
    set $I18, rx856_bstack[$I18]
  rx856_cut2283:
    assign rx856_cstack, $I18
  rx856_jump2282:
    jump $I19
  rx856_done2279:
    rx856_cur."!cursor_fail"()
    .return (rx856_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1347804164.33_caps" :subid("cuid_memo_206_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["longname"], $P5002
    box $P5003, 0
    set $P5001["deflongname"], $P5003
    box $P5004, 0
    set $P5001["quote"], $P5004
    box $P5005, 2
    set $P5001["args"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1347804164.33_nfa" :subid("cuid_memo_207_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 46
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "deflongname"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 6
    push $P5007, $P5011
    box $P5012, "'\""
    push $P5007, $P5012
    box $P5013, 4
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 6
    push $P5014, $P5015
    box $P5016, "("
    push $P5014, $P5016
    box $P5017, 5
    push $P5014, $P5017
    box $P5018, 2
    push $P5014, $P5018
    box $P5019, 58
    push $P5014, $P5019
    box $P5020, 6
    push $P5014, $P5020
    box $P5021, 1
    push $P5014, $P5021
    box $P5022, 0
    push $P5014, $P5022
    box $P5023, 0
    push $P5014, $P5023
    push $P5001, $P5014
    new $P5024, 'ResizablePMCArray'
    box $P5025, 0
    push $P5024, $P5025
    box $P5026, 0
    push $P5024, $P5026
    box $P5027, 0
    push $P5024, $P5027
    push $P5001, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 0
    push $P5028, $P5029
    box $P5030, 0
    push $P5028, $P5030
    box $P5031, 0
    push $P5028, $P5031
    push $P5001, $P5028
    new $P5032, 'ResizablePMCArray'
    box $P5033, 4
    push $P5032, $P5033
    box $P5034, 32
    push $P5032, $P5034
    box $P5035, 7
    push $P5032, $P5035
    push $P5001, $P5032
    new $P5036, 'ResizablePMCArray'
    box $P5037, 8
    push $P5036, $P5037
    box $P5038, "arglist"
    push $P5036, $P5038
    box $P5039, 0
    push $P5036, $P5039
    push $P5001, $P5036
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1347804164.33_alt_nfa__34_1347804166.8" :subid("cuid_memo_208_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "deflongname"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 6
    push $P5010, $P5011
    box $P5012, "'\""
    push $P5010, $P5012
    box $P5013, 2
    push $P5010, $P5013
    push $P5008, $P5010
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5008, $P5014
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_136_1347804164.33_alt_nfa__35_1347804166.8" :subid("cuid_memo_209_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 6
    push $P5004, $P5005
    box $P5006, "("
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 58
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    push $P5012, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 4
    push $P5018, $P5019
    box $P5020, 32
    push $P5018, $P5020
    box $P5021, 3
    push $P5018, $P5021
    push $P5012, $P5018
    new $P5022, 'ResizablePMCArray'
    box $P5023, 8
    push $P5022, $P5023
    box $P5024, "arglist"
    push $P5022, $P5024
    box $P5025, 0
    push $P5022, $P5025
    push $P5012, $P5022
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_137_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1152
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx867_tgt
    .local int rx867_pos
    .local int rx867_off
    .local int rx867_eos
    .local int rx867_rep
    .local pmc rx867_cur
    .local pmc rx867_curclass
    .local pmc rx867_bstack
    .local pmc rx867_cstack
    (rx867_cur, rx867_tgt, rx867_pos, rx867_curclass, rx867_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx867_cur
    length rx867_eos, rx867_tgt
    eq $I19, 1, rx867_restart2306
    gt rx867_pos, rx867_eos, rx867_fail2307
    repr_get_attr_int $I11, self, rx867_curclass, "$!from"
    ne $I11, -1, rxscan868_done2313
    goto rxscan868_scan2312
  rxscan868_loop2311:
    inc rx867_pos
    gt rx867_pos, rx867_eos, rx867_fail2307
    repr_bind_attr_int rx867_cur, rx867_curclass, "$!from", rx867_pos
  rxscan868_scan2312:
    nqp_rxmark rx867_bstack, rxscan868_loop2311, rx867_pos, 0
  rxscan868_done2313:
    nqp_rxmark rx867_bstack, rxcap869_fail2315, rx867_pos, 0
    add $I11, rx867_pos, 4
    gt $I11, rx867_eos, rx867_fail2307
    substr $S10, rx867_tgt, rx867_pos, 4
    ne $S10, ucs4:"self", rx867_fail2307
    add rx867_pos, 4
    nqp_rxpeek $I19, rx867_bstack, rxcap869_fail2315
    inc $I19
    set $I11, rx867_bstack[$I19]
    $P11 = rx867_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx867_pos)
    rx867_cstack = rx867_cur."!cursor_capture"($P11, "sym")
    goto rxcap869_done2314
  rxcap869_fail2315:
    goto rx867_fail2307
  rxcap869_done2314:
    le rx867_pos, 0, rx867_fail2307
    is_cclass $I11, .CCLASS_WORD, rx867_tgt, rx867_pos
    if $I11, rx867_fail2307
    sub $I11, rx867_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx867_tgt, $I11
    unless $I11, rx867_fail2307
    rx867_cur."!cursor_pass"(rx867_pos, "term:sym<self>", 'backtrack'=>1)
    .return (rx867_cur)
  rx867_restart2306:
    repr_get_attr_obj rx867_cstack, rx867_cur, rx867_curclass, "$!cstack"
  rx867_fail2307:
    unless rx867_bstack, rx867_done2305
    pop $I19, rx867_bstack
    if_null rx867_cstack, rx867_cstack_done2310
    unless rx867_cstack, rx867_cstack_done2310
    dec $I19
    set $P11, rx867_cstack[$I19]
  rx867_cstack_done2310:
    pop rx867_rep, rx867_bstack
    pop rx867_pos, rx867_bstack
    pop $I19, rx867_bstack
    lt rx867_pos, -1, rx867_done2305
    lt rx867_pos, 0, rx867_fail2307
    eq $I19, 0, rx867_fail2307
    nqp_islist $I20, rx867_cstack
    unless $I20, rx867_jump2308
    elements $I18, rx867_bstack
    le $I18, 0, rx867_cut2309
    dec $I18
    set $I18, rx867_bstack[$I18]
  rx867_cut2309:
    assign rx867_cstack, $I18
  rx867_jump2308:
    jump $I19
  rx867_done2305:
    rx867_cur."!cursor_fail"()
    .return (rx867_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_137_1347804164.33_caps" :subid("cuid_memo_210_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_137_1347804164.33_nfa" :subid("cuid_memo_211_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 115
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 108
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 102
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 1
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_138_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1154
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx871_tgt
    .local int rx871_pos
    .local int rx871_off
    .local int rx871_eos
    .local int rx871_rep
    .local pmc rx871_cur
    .local pmc rx871_curclass
    .local pmc rx871_bstack
    .local pmc rx871_cstack
    (rx871_cur, rx871_tgt, rx871_pos, rx871_curclass, rx871_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx871_cur
    length rx871_eos, rx871_tgt
    eq $I19, 1, rx871_restart2319
    gt rx871_pos, rx871_eos, rx871_fail2320
    repr_get_attr_int $I11, self, rx871_curclass, "$!from"
    ne $I11, -1, rxscan872_done2326
    goto rxscan872_scan2325
  rxscan872_loop2324:
    inc rx871_pos
    gt rx871_pos, rx871_eos, rx871_fail2320
    repr_bind_attr_int rx871_cur, rx871_curclass, "$!from", rx871_pos
  rxscan872_scan2325:
    nqp_rxmark rx871_bstack, rxscan872_loop2324, rx871_pos, 0
  rxscan872_done2326:
    repr_bind_attr_int rx871_cur, rx871_curclass, "$!pos", rx871_pos
    $P11 = rx871_cur."deflongname"()
    repr_get_attr_int $I11, $P11, rx871_curclass, "$!pos"
    lt $I11, 0, rx871_fail2320
    nqp_rxmark rx871_bstack, rxsubrule873_pass2327, -1, 0
  rxsubrule873_pass2327:
    rx871_cstack = rx871_cur."!cursor_capture"($P11, "deflongname")
    repr_get_attr_int rx871_pos, $P11, rx871_curclass, "$!pos"
    ge rx871_pos, rx871_eos, rx871_fail2320
    substr $S11, rx871_tgt, rx871_pos, 1
    index $I11, ucs4:"(", $S11
    lt $I11, 0, rx871_fail2320
    repr_bind_attr_int rx871_cur, rx871_curclass, "$!pos", rx871_pos
    $P11 = rx871_cur."args"()
    repr_get_attr_int $I11, $P11, rx871_curclass, "$!pos"
    lt $I11, 0, rx871_fail2320
    nqp_rxmark rx871_bstack, rxsubrule874_pass2328, -1, 0
  rxsubrule874_pass2328:
    rx871_cstack = rx871_cur."!cursor_capture"($P11, "args")
    repr_get_attr_int rx871_pos, $P11, rx871_curclass, "$!pos"
    rx871_cur."!cursor_pass"(rx871_pos, "term:sym<identifier>", 'backtrack'=>1)
    .return (rx871_cur)
  rx871_restart2319:
    repr_get_attr_obj rx871_cstack, rx871_cur, rx871_curclass, "$!cstack"
  rx871_fail2320:
    unless rx871_bstack, rx871_done2318
    pop $I19, rx871_bstack
    if_null rx871_cstack, rx871_cstack_done2323
    unless rx871_cstack, rx871_cstack_done2323
    dec $I19
    set $P11, rx871_cstack[$I19]
  rx871_cstack_done2323:
    pop rx871_rep, rx871_bstack
    pop rx871_pos, rx871_bstack
    pop $I19, rx871_bstack
    lt rx871_pos, -1, rx871_done2318
    lt rx871_pos, 0, rx871_fail2320
    eq $I19, 0, rx871_fail2320
    nqp_islist $I20, rx871_cstack
    unless $I20, rx871_jump2321
    elements $I18, rx871_bstack
    le $I18, 0, rx871_cut2322
    dec $I18
    set $I18, rx871_bstack[$I18]
  rx871_cut2322:
    assign rx871_cstack, $I18
  rx871_jump2321:
    jump $I19
  rx871_done2318:
    rx871_cur."!cursor_fail"()
    .return (rx871_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_138_1347804164.33_caps" :subid("cuid_memo_212_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["deflongname"], $P5002
    box $P5003, 0
    set $P5001["args"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_138_1347804164.33_nfa" :subid("cuid_memo_213_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "deflongname"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 6
    push $P5007, $P5008
    box $P5009, "("
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_139_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1158
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx875_tgt
    .local int rx875_pos
    .local int rx875_off
    .local int rx875_eos
    .local int rx875_rep
    .local pmc rx875_cur
    .local pmc rx875_curclass
    .local pmc rx875_bstack
    .local pmc rx875_cstack
    (rx875_cur, rx875_tgt, rx875_pos, rx875_curclass, rx875_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx875_cur
    length rx875_eos, rx875_tgt
    eq $I19, 1, rx875_restart2331
    gt rx875_pos, rx875_eos, rx875_fail2332
    repr_get_attr_int $I11, self, rx875_curclass, "$!from"
    ne $I11, -1, rxscan876_done2338
    goto rxscan876_scan2337
  rxscan876_loop2336:
    inc rx875_pos
    gt rx875_pos, rx875_eos, rx875_fail2332
    repr_bind_attr_int rx875_cur, rx875_curclass, "$!from", rx875_pos
  rxscan876_scan2337:
    nqp_rxmark rx875_bstack, rxscan876_loop2336, rx875_pos, 0
  rxscan876_done2338:
    repr_bind_attr_int rx875_cur, rx875_curclass, "$!pos", rx875_pos
    $P11 = rx875_cur."name"()
    repr_get_attr_int $I11, $P11, rx875_curclass, "$!pos"
    lt $I11, 0, rx875_fail2332
    nqp_rxmark rx875_bstack, rxsubrule877_pass2339, -1, 0
  rxsubrule877_pass2339:
    rx875_cstack = rx875_cur."!cursor_capture"($P11, "name")
    repr_get_attr_int rx875_pos, $P11, rx875_curclass, "$!pos"
    nqp_rxmark rx875_bstack, rxquantr878_done2341, rx875_pos, 0
  rxquantr878_loop2340:
    repr_bind_attr_int rx875_cur, rx875_curclass, "$!pos", rx875_pos
    $P11 = rx875_cur."args"()
    repr_get_attr_int $I11, $P11, rx875_curclass, "$!pos"
    lt $I11, 0, rx875_fail2332
    goto rxsubrule879_pass2342
  rxsubrule879_back2343:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx875_curclass, "$!pos"
    lt $I11, 0, rx875_fail2332
  rxsubrule879_pass2342:
    rx875_cstack = rx875_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule879_back2343
    push rx875_bstack, $I11
    push rx875_bstack, 0
    push rx875_bstack, rx875_pos
    elements $I11, rx875_cstack
    push rx875_bstack, $I11
    repr_get_attr_int rx875_pos, $P11, rx875_curclass, "$!pos"
    nqp_rxpeek $I19, rx875_bstack, rxquantr878_done2341
    inc $I19
    inc $I19
    set rx875_rep, rx875_bstack[$I19]
    nqp_rxcommit rx875_bstack, rxquantr878_done2341
    inc rx875_rep
  rxquantr878_done2341:
    rx875_cur."!cursor_pass"(rx875_pos, "term:sym<name>", 'backtrack'=>1)
    .return (rx875_cur)
  rx875_restart2331:
    repr_get_attr_obj rx875_cstack, rx875_cur, rx875_curclass, "$!cstack"
  rx875_fail2332:
    unless rx875_bstack, rx875_done2330
    pop $I19, rx875_bstack
    if_null rx875_cstack, rx875_cstack_done2335
    unless rx875_cstack, rx875_cstack_done2335
    dec $I19
    set $P11, rx875_cstack[$I19]
  rx875_cstack_done2335:
    pop rx875_rep, rx875_bstack
    pop rx875_pos, rx875_bstack
    pop $I19, rx875_bstack
    lt rx875_pos, -1, rx875_done2330
    lt rx875_pos, 0, rx875_fail2332
    eq $I19, 0, rx875_fail2332
    nqp_islist $I20, rx875_cstack
    unless $I20, rx875_jump2333
    elements $I18, rx875_bstack
    le $I18, 0, rx875_cut2334
    dec $I18
    set $I18, rx875_bstack[$I18]
  rx875_cut2334:
    assign rx875_cstack, $I18
  rx875_jump2333:
    jump $I19
  rx875_done2330:
    rx875_cur."!cursor_fail"()
    .return (rx875_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_139_1347804164.33_caps" :subid("cuid_memo_214_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["name"], $P5002
    box $P5003, 2
    set $P5001["args"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_139_1347804164.33_nfa" :subid("cuid_memo_215_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "name"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "args"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_140_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1162
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx880_tgt
    .local int rx880_pos
    .local int rx880_off
    .local int rx880_eos
    .local int rx880_rep
    .local pmc rx880_cur
    .local pmc rx880_curclass
    .local pmc rx880_bstack
    .local pmc rx880_cstack
    (rx880_cur, rx880_tgt, rx880_pos, rx880_curclass, rx880_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx880_cur
    length rx880_eos, rx880_tgt
    eq $I19, 1, rx880_restart2346
    gt rx880_pos, rx880_eos, rx880_fail2347
    repr_get_attr_int $I11, self, rx880_curclass, "$!from"
    ne $I11, -1, rxscan881_done2353
    goto rxscan881_scan2352
  rxscan881_loop2351:
    inc rx880_pos
    gt rx880_pos, rx880_eos, rx880_fail2347
    repr_bind_attr_int rx880_cur, rx880_curclass, "$!from", rx880_pos
  rxscan881_scan2352:
    nqp_rxmark rx880_bstack, rxscan881_loop2351, rx880_pos, 0
  rxscan881_done2353:
    add $I11, rx880_pos, 5
    gt $I11, rx880_eos, rx880_fail2347
    substr $S10, rx880_tgt, rx880_pos, 5
    ne $S10, ucs4:"pir::", rx880_fail2347
    add rx880_pos, 5
    nqp_rxmark rx880_bstack, rxcap882_fail2355, rx880_pos, 0
    nqp_rxmark rx880_bstack, rxquantr883_done2357, -1, 0
  rxquantr883_loop2356:
    ge rx880_pos, rx880_eos, rx880_fail2347
    is_cclass $I11, .CCLASS_WORD, rx880_tgt, rx880_pos
    unless $I11, rx880_fail2347
    add rx880_pos, 1
    nqp_rxpeek $I19, rx880_bstack, rxquantr883_done2357
    inc $I19
    inc $I19
    set rx880_rep, rx880_bstack[$I19]
    nqp_rxcommit rx880_bstack, rxquantr883_done2357
    inc rx880_rep
    nqp_rxmark rx880_bstack, rxquantr883_done2357, rx880_pos, rx880_rep
    goto rxquantr883_loop2356
  rxquantr883_done2357:
    nqp_rxpeek $I19, rx880_bstack, rxcap882_fail2355
    inc $I19
    set $I11, rx880_bstack[$I19]
    $P11 = rx880_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx880_pos)
    rx880_cstack = rx880_cur."!cursor_capture"($P11, "op")
    goto rxcap882_done2354
  rxcap882_fail2355:
    goto rx880_fail2347
  rxcap882_done2354:
    nqp_rxmark rx880_bstack, rxquantr884_done2359, rx880_pos, 0
  rxquantr884_loop2358:
    repr_bind_attr_int rx880_cur, rx880_curclass, "$!pos", rx880_pos
    $P11 = rx880_cur."args"()
    repr_get_attr_int $I11, $P11, rx880_curclass, "$!pos"
    lt $I11, 0, rx880_fail2347
    goto rxsubrule885_pass2360
  rxsubrule885_back2361:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx880_curclass, "$!pos"
    lt $I11, 0, rx880_fail2347
  rxsubrule885_pass2360:
    rx880_cstack = rx880_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule885_back2361
    push rx880_bstack, $I11
    push rx880_bstack, 0
    push rx880_bstack, rx880_pos
    elements $I11, rx880_cstack
    push rx880_bstack, $I11
    repr_get_attr_int rx880_pos, $P11, rx880_curclass, "$!pos"
    nqp_rxpeek $I19, rx880_bstack, rxquantr884_done2359
    inc $I19
    inc $I19
    set rx880_rep, rx880_bstack[$I19]
    nqp_rxcommit rx880_bstack, rxquantr884_done2359
    inc rx880_rep
  rxquantr884_done2359:
    rx880_cur."!cursor_pass"(rx880_pos, "term:sym<pir::op>", 'backtrack'=>1)
    .return (rx880_cur)
  rx880_restart2346:
    repr_get_attr_obj rx880_cstack, rx880_cur, rx880_curclass, "$!cstack"
  rx880_fail2347:
    unless rx880_bstack, rx880_done2345
    pop $I19, rx880_bstack
    if_null rx880_cstack, rx880_cstack_done2350
    unless rx880_cstack, rx880_cstack_done2350
    dec $I19
    set $P11, rx880_cstack[$I19]
  rx880_cstack_done2350:
    pop rx880_rep, rx880_bstack
    pop rx880_pos, rx880_bstack
    pop $I19, rx880_bstack
    lt rx880_pos, -1, rx880_done2345
    lt rx880_pos, 0, rx880_fail2347
    eq $I19, 0, rx880_fail2347
    nqp_islist $I20, rx880_cstack
    unless $I20, rx880_jump2348
    elements $I18, rx880_bstack
    le $I18, 0, rx880_cut2349
    dec $I18
    set $I18, rx880_bstack[$I18]
  rx880_cut2349:
    assign rx880_cstack, $I18
  rx880_jump2348:
    jump $I19
  rx880_done2345:
    rx880_cur."!cursor_fail"()
    .return (rx880_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_140_1347804164.33_caps" :subid("cuid_memo_216_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["op"], $P5002
    box $P5003, 2
    set $P5001["args"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_140_1347804164.33_nfa" :subid("cuid_memo_217_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 112
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 105
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 58
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 58
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 1
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 4
    push $P5027, $P5028
    box $P5029, 8192
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 1
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 7
    push $P5031, $P5034
    box $P5035, 1
    push $P5031, $P5035
    box $P5036, 0
    push $P5031, $P5036
    box $P5037, 9
    push $P5031, $P5037
    box $P5038, 8
    push $P5031, $P5038
    box $P5039, "args"
    push $P5031, $P5039
    box $P5040, 0
    push $P5031, $P5040
    box $P5041, 1
    push $P5031, $P5041
    box $P5042, 0
    push $P5031, $P5042
    box $P5043, 0
    push $P5031, $P5043
    push $P5001, $P5031
    new $P5044, 'ResizablePMCArray'
    push $P5001, $P5044
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_141_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1166
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx886_tgt
    .local int rx886_pos
    .local int rx886_off
    .local int rx886_eos
    .local int rx886_rep
    .local pmc rx886_cur
    .local pmc rx886_curclass
    .local pmc rx886_bstack
    .local pmc rx886_cstack
    (rx886_cur, rx886_tgt, rx886_pos, rx886_curclass, rx886_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx886_cur
    length rx886_eos, rx886_tgt
    eq $I19, 1, rx886_restart2364
    gt rx886_pos, rx886_eos, rx886_fail2365
    repr_get_attr_int $I11, self, rx886_curclass, "$!from"
    ne $I11, -1, rxscan887_done2371
    goto rxscan887_scan2370
  rxscan887_loop2369:
    inc rx886_pos
    gt rx886_pos, rx886_eos, rx886_fail2365
    repr_bind_attr_int rx886_cur, rx886_curclass, "$!from", rx886_pos
  rxscan887_scan2370:
    nqp_rxmark rx886_bstack, rxscan887_loop2369, rx886_pos, 0
  rxscan887_done2371:
    add $I11, rx886_pos, 12
    gt $I11, rx886_eos, rx886_fail2365
    substr $S10, rx886_tgt, rx886_pos, 12
    ne $S10, ucs4:"pir::const::", rx886_fail2365
    add rx886_pos, 12
    nqp_rxmark rx886_bstack, rxcap888_fail2373, rx886_pos, 0
    nqp_rxmark rx886_bstack, rxquantr889_done2375, -1, 0
  rxquantr889_loop2374:
    ge rx886_pos, rx886_eos, rx886_fail2365
    is_cclass $I11, .CCLASS_WORD, rx886_tgt, rx886_pos
    unless $I11, rx886_fail2365
    add rx886_pos, 1
    nqp_rxpeek $I19, rx886_bstack, rxquantr889_done2375
    inc $I19
    inc $I19
    set rx886_rep, rx886_bstack[$I19]
    nqp_rxcommit rx886_bstack, rxquantr889_done2375
    inc rx886_rep
    nqp_rxmark rx886_bstack, rxquantr889_done2375, rx886_pos, rx886_rep
    goto rxquantr889_loop2374
  rxquantr889_done2375:
    nqp_rxpeek $I19, rx886_bstack, rxcap888_fail2373
    inc $I19
    set $I11, rx886_bstack[$I19]
    $P11 = rx886_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx886_pos)
    rx886_cstack = rx886_cur."!cursor_capture"($P11, "const")
    goto rxcap888_done2372
  rxcap888_fail2373:
    goto rx886_fail2365
  rxcap888_done2372:
    rx886_cur."!cursor_pass"(rx886_pos, "term:sym<pir::const>", 'backtrack'=>1)
    .return (rx886_cur)
  rx886_restart2364:
    repr_get_attr_obj rx886_cstack, rx886_cur, rx886_curclass, "$!cstack"
  rx886_fail2365:
    unless rx886_bstack, rx886_done2363
    pop $I19, rx886_bstack
    if_null rx886_cstack, rx886_cstack_done2368
    unless rx886_cstack, rx886_cstack_done2368
    dec $I19
    set $P11, rx886_cstack[$I19]
  rx886_cstack_done2368:
    pop rx886_rep, rx886_bstack
    pop rx886_pos, rx886_bstack
    pop $I19, rx886_bstack
    lt rx886_pos, -1, rx886_done2363
    lt rx886_pos, 0, rx886_fail2365
    eq $I19, 0, rx886_fail2365
    nqp_islist $I20, rx886_cstack
    unless $I20, rx886_jump2366
    elements $I18, rx886_bstack
    le $I18, 0, rx886_cut2367
    dec $I18
    set $I18, rx886_bstack[$I18]
  rx886_cut2367:
    assign rx886_cstack, $I18
  rx886_jump2366:
    jump $I19
  rx886_done2363:
    rx886_cur."!cursor_fail"()
    .return (rx886_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_141_1347804164.33_caps" :subid("cuid_memo_218_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["const"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_141_1347804164.33_nfa" :subid("cuid_memo_219_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 112
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 105
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 114
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 58
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 58
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 99
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 2
    push $P5027, $P5028
    box $P5029, 111
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 2
    push $P5031, $P5032
    box $P5033, 110
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 2
    push $P5035, $P5036
    box $P5037, 115
    push $P5035, $P5037
    box $P5038, 10
    push $P5035, $P5038
    push $P5001, $P5035
    new $P5039, 'ResizablePMCArray'
    box $P5040, 2
    push $P5039, $P5040
    box $P5041, 116
    push $P5039, $P5041
    box $P5042, 11
    push $P5039, $P5042
    push $P5001, $P5039
    new $P5043, 'ResizablePMCArray'
    box $P5044, 2
    push $P5043, $P5044
    box $P5045, 58
    push $P5043, $P5045
    box $P5046, 12
    push $P5043, $P5046
    push $P5001, $P5043
    new $P5047, 'ResizablePMCArray'
    box $P5048, 2
    push $P5047, $P5048
    box $P5049, 58
    push $P5047, $P5049
    box $P5050, 13
    push $P5047, $P5050
    push $P5001, $P5047
    new $P5051, 'ResizablePMCArray'
    box $P5052, 1
    push $P5051, $P5052
    box $P5053, 0
    push $P5051, $P5053
    box $P5054, 14
    push $P5051, $P5054
    push $P5001, $P5051
    new $P5055, 'ResizablePMCArray'
    box $P5056, 4
    push $P5055, $P5056
    box $P5057, 8192
    push $P5055, $P5057
    box $P5058, 15
    push $P5055, $P5058
    push $P5001, $P5055
    new $P5059, 'ResizablePMCArray'
    box $P5060, 1
    push $P5059, $P5060
    box $P5061, 0
    push $P5059, $P5061
    box $P5062, 14
    push $P5059, $P5062
    box $P5063, 1
    push $P5059, $P5063
    box $P5064, 0
    push $P5059, $P5064
    box $P5065, 0
    push $P5059, $P5065
    push $P5001, $P5059
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_142_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1170
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx890_tgt
    .local int rx890_pos
    .local int rx890_off
    .local int rx890_eos
    .local int rx890_rep
    .local pmc rx890_cur
    .local pmc rx890_curclass
    .local pmc rx890_bstack
    .local pmc rx890_cstack
    (rx890_cur, rx890_tgt, rx890_pos, rx890_curclass, rx890_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx890_cur
    length rx890_eos, rx890_tgt
    eq $I19, 1, rx890_restart2378
    gt rx890_pos, rx890_eos, rx890_fail2379
    repr_get_attr_int $I11, self, rx890_curclass, "$!from"
    ne $I11, -1, rxscan891_done2385
    goto rxscan891_scan2384
  rxscan891_loop2383:
    inc rx890_pos
    gt rx890_pos, rx890_eos, rx890_fail2379
    repr_bind_attr_int rx890_cur, rx890_curclass, "$!from", rx890_pos
  rxscan891_scan2384:
    nqp_rxmark rx890_bstack, rxscan891_loop2383, rx890_pos, 0
  rxscan891_done2385:
    add $I11, rx890_pos, 5
    gt $I11, rx890_eos, rx890_fail2379
    substr $S10, rx890_tgt, rx890_pos, 5
    ne $S10, ucs4:"nqp::", rx890_fail2379
    add rx890_pos, 5
    nqp_rxmark rx890_bstack, rxcap892_fail2387, rx890_pos, 0
    nqp_rxmark rx890_bstack, rxquantr893_done2389, -1, 0
  rxquantr893_loop2388:
    ge rx890_pos, rx890_eos, rx890_fail2379
    is_cclass $I11, .CCLASS_WORD, rx890_tgt, rx890_pos
    unless $I11, rx890_fail2379
    add rx890_pos, 1
    nqp_rxpeek $I19, rx890_bstack, rxquantr893_done2389
    inc $I19
    inc $I19
    set rx890_rep, rx890_bstack[$I19]
    nqp_rxcommit rx890_bstack, rxquantr893_done2389
    inc rx890_rep
    nqp_rxmark rx890_bstack, rxquantr893_done2389, rx890_pos, rx890_rep
    goto rxquantr893_loop2388
  rxquantr893_done2389:
    nqp_rxpeek $I19, rx890_bstack, rxcap892_fail2387
    inc $I19
    set $I11, rx890_bstack[$I19]
    $P11 = rx890_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx890_pos)
    rx890_cstack = rx890_cur."!cursor_capture"($P11, "op")
    goto rxcap892_done2386
  rxcap892_fail2387:
    goto rx890_fail2379
  rxcap892_done2386:
    nqp_rxmark rx890_bstack, rxquantr894_done2391, rx890_pos, 0
  rxquantr894_loop2390:
    repr_bind_attr_int rx890_cur, rx890_curclass, "$!pos", rx890_pos
    $P11 = rx890_cur."args"()
    repr_get_attr_int $I11, $P11, rx890_curclass, "$!pos"
    lt $I11, 0, rx890_fail2379
    goto rxsubrule895_pass2392
  rxsubrule895_back2393:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx890_curclass, "$!pos"
    lt $I11, 0, rx890_fail2379
  rxsubrule895_pass2392:
    rx890_cstack = rx890_cur."!cursor_capture"($P11, "args")
    set_addr $I11, rxsubrule895_back2393
    push rx890_bstack, $I11
    push rx890_bstack, 0
    push rx890_bstack, rx890_pos
    elements $I11, rx890_cstack
    push rx890_bstack, $I11
    repr_get_attr_int rx890_pos, $P11, rx890_curclass, "$!pos"
    nqp_rxpeek $I19, rx890_bstack, rxquantr894_done2391
    inc $I19
    inc $I19
    set rx890_rep, rx890_bstack[$I19]
    nqp_rxcommit rx890_bstack, rxquantr894_done2391
    inc rx890_rep
  rxquantr894_done2391:
    rx890_cur."!cursor_pass"(rx890_pos, "term:sym<nqp::op>", 'backtrack'=>1)
    .return (rx890_cur)
  rx890_restart2378:
    repr_get_attr_obj rx890_cstack, rx890_cur, rx890_curclass, "$!cstack"
  rx890_fail2379:
    unless rx890_bstack, rx890_done2377
    pop $I19, rx890_bstack
    if_null rx890_cstack, rx890_cstack_done2382
    unless rx890_cstack, rx890_cstack_done2382
    dec $I19
    set $P11, rx890_cstack[$I19]
  rx890_cstack_done2382:
    pop rx890_rep, rx890_bstack
    pop rx890_pos, rx890_bstack
    pop $I19, rx890_bstack
    lt rx890_pos, -1, rx890_done2377
    lt rx890_pos, 0, rx890_fail2379
    eq $I19, 0, rx890_fail2379
    nqp_islist $I20, rx890_cstack
    unless $I20, rx890_jump2380
    elements $I18, rx890_bstack
    le $I18, 0, rx890_cut2381
    dec $I18
    set $I18, rx890_bstack[$I18]
  rx890_cut2381:
    assign rx890_cstack, $I18
  rx890_jump2380:
    jump $I19
  rx890_done2377:
    rx890_cur."!cursor_fail"()
    .return (rx890_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_142_1347804164.33_caps" :subid("cuid_memo_220_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["op"], $P5002
    box $P5003, 2
    set $P5001["args"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_142_1347804164.33_nfa" :subid("cuid_memo_221_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 110
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 113
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 112
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 58
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 58
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 1
    push $P5023, $P5024
    box $P5025, 0
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 4
    push $P5027, $P5028
    box $P5029, 8192
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 1
    push $P5031, $P5032
    box $P5033, 0
    push $P5031, $P5033
    box $P5034, 7
    push $P5031, $P5034
    box $P5035, 1
    push $P5031, $P5035
    box $P5036, 0
    push $P5031, $P5036
    box $P5037, 9
    push $P5031, $P5037
    box $P5038, 8
    push $P5031, $P5038
    box $P5039, "args"
    push $P5031, $P5039
    box $P5040, 0
    push $P5031, $P5040
    box $P5041, 1
    push $P5031, $P5041
    box $P5042, 0
    push $P5031, $P5042
    box $P5043, 0
    push $P5031, $P5043
    push $P5001, $P5031
    new $P5044, 'ResizablePMCArray'
    push $P5001, $P5044
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_143_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1174
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_396_1347804164.33' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx896_tgt
    .local int rx896_pos
    .local int rx896_off
    .local int rx896_eos
    .local int rx896_rep
    .local pmc rx896_cur
    .local pmc rx896_curclass
    .local pmc rx896_bstack
    .local pmc rx896_cstack
    (rx896_cur, rx896_tgt, rx896_pos, rx896_curclass, rx896_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx896_cur
    length rx896_eos, rx896_tgt
    eq $I19, 1, rx896_restart2396
    gt rx896_pos, rx896_eos, rx896_fail2397
    repr_get_attr_int $I11, self, rx896_curclass, "$!from"
    ne $I11, -1, rxscan897_done2403
    goto rxscan897_scan2402
  rxscan897_loop2401:
    inc rx896_pos
    gt rx896_pos, rx896_eos, rx896_fail2397
    repr_bind_attr_int rx896_cur, rx896_curclass, "$!from", rx896_pos
  rxscan897_scan2402:
    nqp_rxmark rx896_bstack, rxscan897_loop2401, rx896_pos, 0
  rxscan897_done2403:
    add $I11, rx896_pos, 3
    gt $I11, rx896_eos, rx896_fail2397
    substr $S10, rx896_tgt, rx896_pos, 3
    ne $S10, ucs4:"{*}", rx896_fail2397
    add rx896_pos, 3
    repr_bind_attr_int rx896_cur, rx896_curclass, "$!pos", rx896_pos
    $P11 = rx896_cur."ENDSTMT"()
    repr_get_attr_int $I11, $P11, rx896_curclass, "$!pos"
    lt $I11, 0, rx896_fail2397
  alt898_02405:
    nqp_rxmark rx896_bstack, alt898_12409, rx896_pos, 0
    repr_bind_attr_int rx896_cur, rx896_curclass, "$!pos", rx896_pos
    store_lex unicode:"$\x{a2}", rx896_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_396_1347804164.33' 
    capture_lex $P5002
    $P5003 = $P5002()
    unless $P5003, rx896_fail2397
    goto alt898_end2404
  alt898_12409:
    repr_bind_attr_int rx896_cur, rx896_curclass, "$!pos", rx896_pos
    $P11 = rx896_cur."panic"("{*} may only appear in proto")
    repr_get_attr_int $I11, $P11, rx896_curclass, "$!pos"
    lt $I11, 0, rx896_fail2397
    repr_get_attr_int rx896_pos, $P11, rx896_curclass, "$!pos"
  alt898_end2404:
    rx896_cur."!cursor_pass"(rx896_pos, "term:sym<onlystar>", 'backtrack'=>1)
    .return (rx896_cur)
  rx896_restart2396:
    repr_get_attr_obj rx896_cstack, rx896_cur, rx896_curclass, "$!cstack"
  rx896_fail2397:
    unless rx896_bstack, rx896_done2395
    pop $I19, rx896_bstack
    if_null rx896_cstack, rx896_cstack_done2400
    unless rx896_cstack, rx896_cstack_done2400
    dec $I19
    set $P11, rx896_cstack[$I19]
  rx896_cstack_done2400:
    pop rx896_rep, rx896_bstack
    pop rx896_pos, rx896_bstack
    pop $I19, rx896_bstack
    lt rx896_pos, -1, rx896_done2395
    lt rx896_pos, 0, rx896_fail2397
    eq $I19, 0, rx896_fail2397
    nqp_islist $I20, rx896_cstack
    unless $I20, rx896_jump2398
    elements $I18, rx896_bstack
    le $I18, 0, rx896_cut2399
    dec $I18
    set $I18, rx896_bstack[$I18]
  rx896_cut2399:
    assign rx896_cstack, $I18
  rx896_jump2398:
    jump $I19
  rx896_done2395:
    rx896_cur."!cursor_fail"()
    .return (rx896_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_143_1347804164.33_caps" :subid("cuid_memo_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_143_1347804164.33_nfa" :subid("cuid_memo_223_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 42
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 125
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "ENDSTMT"
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_396_1347804164.33") :anon :lex :outer("cuid_143_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1176

    find_dynamic_lex $P5001, "$*MULTINESS"
    unless_null $P5001, fallback2406
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$MULTINESS"]
    unless_null $P5002, fallback2407
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5005
  fallback2407:
    unless_null $P5002, vivi_8992408
    die "Contextual $*MULTINESS not found"
    box $P5006, "Contextual $*MULTINESS not found"
    set $P5002, $P5006
  vivi_8992408:
    set $P5001, $P5002
  fallback2406:
    set $S5001, $P5001
    iseq $I5001, $S5001, "proto"
    .return ($I5001) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_144_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1179
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx901_tgt
    .local int rx901_pos
    .local int rx901_off
    .local int rx901_eos
    .local int rx901_rep
    .local pmc rx901_cur
    .local pmc rx901_curclass
    .local pmc rx901_bstack
    .local pmc rx901_cstack
    (rx901_cur, rx901_tgt, rx901_pos, rx901_curclass, rx901_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx901_cur
    length rx901_eos, rx901_tgt
    eq $I19, 1, rx901_restart2413
    gt rx901_pos, rx901_eos, rx901_fail2414
    repr_get_attr_int $I11, self, rx901_curclass, "$!from"
    ne $I11, -1, rxscan902_done2420
    goto rxscan902_scan2419
  rxscan902_loop2418:
    inc rx901_pos
    gt rx901_pos, rx901_eos, rx901_fail2414
    repr_bind_attr_int rx901_cur, rx901_curclass, "$!from", rx901_pos
  rxscan902_scan2419:
    nqp_rxmark rx901_bstack, rxscan902_loop2418, rx901_pos, 0
  rxscan902_done2420:
    add $I11, rx901_pos, 1
    gt $I11, rx901_eos, rx901_fail2414
    substr $S10, rx901_tgt, rx901_pos, 1
    ne $S10, ucs4:"(", rx901_fail2414
    add rx901_pos, 1
    repr_bind_attr_int rx901_cur, rx901_curclass, "$!pos", rx901_pos
    $P11 = rx901_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx901_curclass, "$!pos"
    lt $I11, 0, rx901_fail2414
    nqp_rxmark rx901_bstack, rxsubrule903_pass2421, -1, 0
  rxsubrule903_pass2421:
    rx901_cstack = rx901_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx901_pos, $P11, rx901_curclass, "$!pos"
    add $I11, rx901_pos, 1
    gt $I11, rx901_eos, rx901_fail2414
    substr $S10, rx901_tgt, rx901_pos, 1
    ne $S10, ucs4:")", rx901_fail2414
    add rx901_pos, 1
    rx901_cur."!cursor_pass"(rx901_pos, "args", 'backtrack'=>1)
    .return (rx901_cur)
  rx901_restart2413:
    repr_get_attr_obj rx901_cstack, rx901_cur, rx901_curclass, "$!cstack"
  rx901_fail2414:
    unless rx901_bstack, rx901_done2412
    pop $I19, rx901_bstack
    if_null rx901_cstack, rx901_cstack_done2417
    unless rx901_cstack, rx901_cstack_done2417
    dec $I19
    set $P11, rx901_cstack[$I19]
  rx901_cstack_done2417:
    pop rx901_rep, rx901_bstack
    pop rx901_pos, rx901_bstack
    pop $I19, rx901_bstack
    lt rx901_pos, -1, rx901_done2412
    lt rx901_pos, 0, rx901_fail2414
    eq $I19, 0, rx901_fail2414
    nqp_islist $I20, rx901_cstack
    unless $I20, rx901_jump2415
    elements $I18, rx901_bstack
    le $I18, 0, rx901_cut2416
    dec $I18
    set $I18, rx901_bstack[$I18]
  rx901_cut2416:
    assign rx901_cstack, $I18
  rx901_jump2415:
    jump $I19
  rx901_done2412:
    rx901_cur."!cursor_fail"()
    .return (rx901_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_144_1347804164.33_caps" :subid("cuid_memo_224_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["arglist"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_144_1347804164.33_nfa" :subid("cuid_memo_225_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 40
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "arglist"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 41
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_145_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1183
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx904_tgt
    .local int rx904_pos
    .local int rx904_off
    .local int rx904_eos
    .local int rx904_rep
    .local pmc rx904_cur
    .local pmc rx904_curclass
    .local pmc rx904_bstack
    .local pmc rx904_cstack
    (rx904_cur, rx904_tgt, rx904_pos, rx904_curclass, rx904_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx904_cur
    length rx904_eos, rx904_tgt
    eq $I19, 1, rx904_restart2424
    gt rx904_pos, rx904_eos, rx904_fail2425
    repr_get_attr_int $I11, self, rx904_curclass, "$!from"
    ne $I11, -1, rxscan905_done2431
    goto rxscan905_scan2430
  rxscan905_loop2429:
    inc rx904_pos
    gt rx904_pos, rx904_eos, rx904_fail2425
    repr_bind_attr_int rx904_cur, rx904_curclass, "$!from", rx904_pos
  rxscan905_scan2430:
    nqp_rxmark rx904_bstack, rxscan905_loop2429, rx904_pos, 0
  rxscan905_done2431:
    repr_bind_attr_int rx904_cur, rx904_curclass, "$!pos", rx904_pos
    $P11 = rx904_cur."ws"()
    repr_get_attr_int $I11, $P11, rx904_curclass, "$!pos"
    lt $I11, 0, rx904_fail2425
    repr_get_attr_int rx904_pos, $P11, rx904_curclass, "$!pos"
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt907_02434
    nqp_push_label $P11, alt907_12436
    nqp_rxmark rx904_bstack, alt907_end2433, -1, 0
    rx904_cur."!alt"(rx904_pos, "alt_nfa__36_1347804166.876", $P11)
    goto rx904_fail2425
  alt907_02434:
    repr_bind_attr_int rx904_cur, rx904_curclass, "$!pos", rx904_pos
    $P11 = rx904_cur."EXPR"("f=")
    repr_get_attr_int $I11, $P11, rx904_curclass, "$!pos"
    lt $I11, 0, rx904_fail2425
    nqp_rxmark rx904_bstack, rxsubrule908_pass2435, -1, 0
  rxsubrule908_pass2435:
    rx904_cstack = rx904_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx904_pos, $P11, rx904_curclass, "$!pos"
    goto alt907_end2433
  alt907_12436:
    goto alt907_end2433
  alt907_end2433:
    nqp_rxcommit rx904_bstack, alt907_end2433
    rx904_cur."!cursor_pass"(rx904_pos, "arglist", 'backtrack'=>1)
    .return (rx904_cur)
  rx904_restart2424:
    repr_get_attr_obj rx904_cstack, rx904_cur, rx904_curclass, "$!cstack"
  rx904_fail2425:
    unless rx904_bstack, rx904_done2423
    pop $I19, rx904_bstack
    if_null rx904_cstack, rx904_cstack_done2428
    unless rx904_cstack, rx904_cstack_done2428
    dec $I19
    set $P11, rx904_cstack[$I19]
  rx904_cstack_done2428:
    pop rx904_rep, rx904_bstack
    pop rx904_pos, rx904_bstack
    pop $I19, rx904_bstack
    lt rx904_pos, -1, rx904_done2423
    lt rx904_pos, 0, rx904_fail2425
    eq $I19, 0, rx904_fail2425
    nqp_islist $I20, rx904_cstack
    unless $I20, rx904_jump2426
    elements $I18, rx904_bstack
    le $I18, 0, rx904_cut2427
    dec $I18
    set $I18, rx904_bstack[$I18]
  rx904_cut2427:
    assign rx904_cstack, $I18
  rx904_jump2426:
    jump $I19
  rx904_done2423:
    rx904_cur."!cursor_fail"()
    .return (rx904_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_145_1347804164.33_caps" :subid("cuid_memo_226_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_145_1347804164.33_nfa" :subid("cuid_memo_227_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "ws"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "EXPR"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    box $P5011, 1
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_145_1347804164.33_alt_nfa__36_1347804166.876" :subid("cuid_memo_228_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "EXPR"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 1
    push $P5010, $P5011
    box $P5012, 0
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_146_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1192
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx910_tgt
    .local int rx910_pos
    .local int rx910_off
    .local int rx910_eos
    .local int rx910_rep
    .local pmc rx910_cur
    .local pmc rx910_curclass
    .local pmc rx910_bstack
    .local pmc rx910_cstack
    (rx910_cur, rx910_tgt, rx910_pos, rx910_curclass, rx910_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx910_cur
    length rx910_eos, rx910_tgt
    eq $I19, 1, rx910_restart2440
    gt rx910_pos, rx910_eos, rx910_fail2441
    repr_get_attr_int $I11, self, rx910_curclass, "$!from"
    ne $I11, -1, rxscan911_done2447
    goto rxscan911_scan2446
  rxscan911_loop2445:
    inc rx910_pos
    gt rx910_pos, rx910_eos, rx910_fail2441
    repr_bind_attr_int rx910_cur, rx910_curclass, "$!from", rx910_pos
  rxscan911_scan2446:
    nqp_rxmark rx910_bstack, rxscan911_loop2445, rx910_pos, 0
  rxscan911_done2447:
    repr_bind_attr_int rx910_cur, rx910_curclass, "$!pos", rx910_pos
    $P11 = rx910_cur."value"()
    repr_get_attr_int $I11, $P11, rx910_curclass, "$!pos"
    lt $I11, 0, rx910_fail2441
    nqp_rxmark rx910_bstack, rxsubrule912_pass2448, -1, 0
  rxsubrule912_pass2448:
    rx910_cstack = rx910_cur."!cursor_capture"($P11, "value")
    repr_get_attr_int rx910_pos, $P11, rx910_curclass, "$!pos"
    rx910_cur."!cursor_pass"(rx910_pos, "term:sym<value>", 'backtrack'=>1)
    .return (rx910_cur)
  rx910_restart2440:
    repr_get_attr_obj rx910_cstack, rx910_cur, rx910_curclass, "$!cstack"
  rx910_fail2441:
    unless rx910_bstack, rx910_done2439
    pop $I19, rx910_bstack
    if_null rx910_cstack, rx910_cstack_done2444
    unless rx910_cstack, rx910_cstack_done2444
    dec $I19
    set $P11, rx910_cstack[$I19]
  rx910_cstack_done2444:
    pop rx910_rep, rx910_bstack
    pop rx910_pos, rx910_bstack
    pop $I19, rx910_bstack
    lt rx910_pos, -1, rx910_done2439
    lt rx910_pos, 0, rx910_fail2441
    eq $I19, 0, rx910_fail2441
    nqp_islist $I20, rx910_cstack
    unless $I20, rx910_jump2442
    elements $I18, rx910_bstack
    le $I18, 0, rx910_cut2443
    dec $I18
    set $I18, rx910_bstack[$I18]
  rx910_cut2443:
    assign rx910_cstack, $I18
  rx910_jump2442:
    jump $I19
  rx910_done2439:
    rx910_cur."!cursor_fail"()
    .return (rx910_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_146_1347804164.33_caps" :subid("cuid_memo_229_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["value"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_146_1347804164.33_nfa" :subid("cuid_memo_230_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "value"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_147_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1194
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx913_tgt
    .local int rx913_pos
    .local int rx913_off
    .local int rx913_eos
    .local int rx913_rep
    .local pmc rx913_cur
    .local pmc rx913_curclass
    .local pmc rx913_bstack
    .local pmc rx913_cstack
    (rx913_cur, rx913_tgt, rx913_pos, rx913_curclass, rx913_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx913_cur
    length rx913_eos, rx913_tgt
    eq $I19, 1, rx913_restart2451
    gt rx913_pos, rx913_eos, rx913_fail2452
    repr_get_attr_int $I11, self, rx913_curclass, "$!from"
    ne $I11, -1, rxscan914_done2458
    goto rxscan914_scan2457
  rxscan914_loop2456:
    inc rx913_pos
    gt rx913_pos, rx913_eos, rx913_fail2452
    repr_bind_attr_int rx913_cur, rx913_curclass, "$!from", rx913_pos
  rxscan914_scan2457:
    nqp_rxmark rx913_bstack, rxscan914_loop2456, rx913_pos, 0
  rxscan914_done2458:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt915_02460
    nqp_push_label $P11, alt915_12462
    nqp_rxmark rx913_bstack, alt915_end2459, -1, 0
    rx913_cur."!alt"(rx913_pos, "alt_nfa__37_1347804166.885", $P11)
    goto rx913_fail2452
  alt915_02460:
    repr_bind_attr_int rx913_cur, rx913_curclass, "$!pos", rx913_pos
    $P11 = rx913_cur."quote"()
    repr_get_attr_int $I11, $P11, rx913_curclass, "$!pos"
    lt $I11, 0, rx913_fail2452
    nqp_rxmark rx913_bstack, rxsubrule916_pass2461, -1, 0
  rxsubrule916_pass2461:
    rx913_cstack = rx913_cur."!cursor_capture"($P11, "quote")
    repr_get_attr_int rx913_pos, $P11, rx913_curclass, "$!pos"
    goto alt915_end2459
  alt915_12462:
    repr_bind_attr_int rx913_cur, rx913_curclass, "$!pos", rx913_pos
    $P11 = rx913_cur."number"()
    repr_get_attr_int $I11, $P11, rx913_curclass, "$!pos"
    lt $I11, 0, rx913_fail2452
    nqp_rxmark rx913_bstack, rxsubrule917_pass2463, -1, 0
  rxsubrule917_pass2463:
    rx913_cstack = rx913_cur."!cursor_capture"($P11, "number")
    repr_get_attr_int rx913_pos, $P11, rx913_curclass, "$!pos"
    goto alt915_end2459
  alt915_end2459:
    rx913_cur."!cursor_pass"(rx913_pos, "value", 'backtrack'=>1)
    .return (rx913_cur)
  rx913_restart2451:
    repr_get_attr_obj rx913_cstack, rx913_cur, rx913_curclass, "$!cstack"
  rx913_fail2452:
    unless rx913_bstack, rx913_done2450
    pop $I19, rx913_bstack
    if_null rx913_cstack, rx913_cstack_done2455
    unless rx913_cstack, rx913_cstack_done2455
    dec $I19
    set $P11, rx913_cstack[$I19]
  rx913_cstack_done2455:
    pop rx913_rep, rx913_bstack
    pop rx913_pos, rx913_bstack
    pop $I19, rx913_bstack
    lt rx913_pos, -1, rx913_done2450
    lt rx913_pos, 0, rx913_fail2452
    eq $I19, 0, rx913_fail2452
    nqp_islist $I20, rx913_cstack
    unless $I20, rx913_jump2453
    elements $I18, rx913_bstack
    le $I18, 0, rx913_cut2454
    dec $I18
    set $I18, rx913_bstack[$I18]
  rx913_cut2454:
    assign rx913_cstack, $I18
  rx913_jump2453:
    jump $I19
  rx913_done2450:
    rx913_cur."!cursor_fail"()
    .return (rx913_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_147_1347804164.33_caps" :subid("cuid_memo_231_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote"], $P5002
    box $P5003, 0
    set $P5001["number"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_147_1347804164.33_nfa" :subid("cuid_memo_232_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "quote"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    box $P5007, 8
    push $P5003, $P5007
    box $P5008, "number"
    push $P5003, $P5008
    box $P5009, 0
    push $P5003, $P5009
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_147_1347804164.33_alt_nfa__37_1347804166.885" :subid("cuid_memo_233_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "quote"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "number"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_148_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1199
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx918_tgt
    .local int rx918_pos
    .local int rx918_off
    .local int rx918_eos
    .local int rx918_rep
    .local pmc rx918_cur
    .local pmc rx918_curclass
    .local pmc rx918_bstack
    .local pmc rx918_cstack
    (rx918_cur, rx918_tgt, rx918_pos, rx918_curclass, rx918_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx918_cur
    length rx918_eos, rx918_tgt
    eq $I19, 1, rx918_restart2466
    gt rx918_pos, rx918_eos, rx918_fail2467
    repr_get_attr_int $I11, self, rx918_curclass, "$!from"
    ne $I11, -1, rxscan919_done2473
    goto rxscan919_scan2472
  rxscan919_loop2471:
    inc rx918_pos
    gt rx918_pos, rx918_eos, rx918_fail2467
    repr_bind_attr_int rx918_cur, rx918_curclass, "$!from", rx918_pos
  rxscan919_scan2472:
    nqp_rxmark rx918_bstack, rxscan919_loop2471, rx918_pos, 0
  rxscan919_done2473:
    nqp_rxmark rx918_bstack, rxcap920_fail2475, rx918_pos, 0
    nqp_rxmark rx918_bstack, rxquantr921_done2477, rx918_pos, 0
  rxquantr921_loop2476:
  alt922_02479:
    nqp_rxmark rx918_bstack, alt922_12480, rx918_pos, 0
    add $I11, rx918_pos, 1
    gt $I11, rx918_eos, rx918_fail2467
    substr $S10, rx918_tgt, rx918_pos, 1
    ne $S10, ucs4:"-", rx918_fail2467
    add rx918_pos, 1
    goto alt922_end2478
  alt922_12480:
    ge rx918_pos, rx918_eos, rx918_fail2467
    substr $S11, rx918_tgt, rx918_pos, 1
    index $I11, ucs4:"+", $S11
    lt $I11, 0, rx918_fail2467
    inc rx918_pos
  alt922_end2478:
    nqp_rxpeek $I19, rx918_bstack, rxquantr921_done2477
    inc $I19
    inc $I19
    set rx918_rep, rx918_bstack[$I19]
    nqp_rxcommit rx918_bstack, rxquantr921_done2477
    inc rx918_rep
  rxquantr921_done2477:
    nqp_rxpeek $I19, rx918_bstack, rxcap920_fail2475
    inc $I19
    set $I11, rx918_bstack[$I19]
    $P11 = rx918_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx918_pos)
    rx918_cstack = rx918_cur."!cursor_capture"($P11, "sign")
    goto rxcap920_done2474
  rxcap920_fail2475:
    goto rx918_fail2467
  rxcap920_done2474:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt923_02482
    nqp_push_label $P11, alt923_12484
    nqp_rxmark rx918_bstack, alt923_end2481, -1, 0
    rx918_cur."!alt"(rx918_pos, "alt_nfa__38_1347804166.895", $P11)
    goto rx918_fail2467
  alt923_02482:
    repr_bind_attr_int rx918_cur, rx918_curclass, "$!pos", rx918_pos
    $P11 = rx918_cur."dec_number"()
    repr_get_attr_int $I11, $P11, rx918_curclass, "$!pos"
    lt $I11, 0, rx918_fail2467
    nqp_rxmark rx918_bstack, rxsubrule924_pass2483, -1, 0
  rxsubrule924_pass2483:
    rx918_cstack = rx918_cur."!cursor_capture"($P11, "dec_number")
    repr_get_attr_int rx918_pos, $P11, rx918_curclass, "$!pos"
    goto alt923_end2481
  alt923_12484:
    repr_bind_attr_int rx918_cur, rx918_curclass, "$!pos", rx918_pos
    $P11 = rx918_cur."integer"()
    repr_get_attr_int $I11, $P11, rx918_curclass, "$!pos"
    lt $I11, 0, rx918_fail2467
    nqp_rxmark rx918_bstack, rxsubrule925_pass2485, -1, 0
  rxsubrule925_pass2485:
    rx918_cstack = rx918_cur."!cursor_capture"($P11, "integer")
    repr_get_attr_int rx918_pos, $P11, rx918_curclass, "$!pos"
    goto alt923_end2481
  alt923_end2481:
    nqp_rxcommit rx918_bstack, alt923_end2481
    rx918_cur."!cursor_pass"(rx918_pos, "number", 'backtrack'=>1)
    .return (rx918_cur)
  rx918_restart2466:
    repr_get_attr_obj rx918_cstack, rx918_cur, rx918_curclass, "$!cstack"
  rx918_fail2467:
    unless rx918_bstack, rx918_done2465
    pop $I19, rx918_bstack
    if_null rx918_cstack, rx918_cstack_done2470
    unless rx918_cstack, rx918_cstack_done2470
    dec $I19
    set $P11, rx918_cstack[$I19]
  rx918_cstack_done2470:
    pop rx918_rep, rx918_bstack
    pop rx918_pos, rx918_bstack
    pop $I19, rx918_bstack
    lt rx918_pos, -1, rx918_done2465
    lt rx918_pos, 0, rx918_fail2467
    eq $I19, 0, rx918_fail2467
    nqp_islist $I20, rx918_cstack
    unless $I20, rx918_jump2468
    elements $I18, rx918_bstack
    le $I18, 0, rx918_cut2469
    dec $I18
    set $I18, rx918_bstack[$I18]
  rx918_cut2469:
    assign rx918_cstack, $I18
  rx918_jump2468:
    jump $I19
  rx918_done2465:
    rx918_cur."!cursor_fail"()
    .return (rx918_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_148_1347804164.33_caps" :subid("cuid_memo_234_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sign"], $P5002
    box $P5003, 0
    set $P5001["dec_number"], $P5003
    box $P5004, 0
    set $P5001["integer"], $P5004
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_148_1347804164.33_nfa" :subid("cuid_memo_235_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 0
    push $P5003, $P5004
    box $P5005, 0
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    box $P5007, 1
    push $P5003, $P5007
    box $P5008, 0
    push $P5003, $P5008
    box $P5009, 2
    push $P5003, $P5009
    push $P5001, $P5003
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "dec_number"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    box $P5014, 8
    push $P5010, $P5014
    box $P5015, "integer"
    push $P5010, $P5015
    box $P5016, 0
    push $P5010, $P5016
    push $P5001, $P5010
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_148_1347804164.33_alt_nfa__38_1347804166.895" :subid("cuid_memo_236_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 8
    push $P5004, $P5005
    box $P5006, "dec_number"
    push $P5004, $P5006
    box $P5007, 0
    push $P5004, $P5007
    push $P5002, $P5004
    push $P5001, $P5002
    new $P5008, 'ResizablePMCArray'
    new $P5009, 'ResizablePMCArray'
    push $P5008, $P5009
    new $P5010, 'ResizablePMCArray'
    box $P5011, 8
    push $P5010, $P5011
    box $P5012, "integer"
    push $P5010, $P5012
    box $P5013, 0
    push $P5010, $P5013
    push $P5008, $P5010
    push $P5001, $P5008
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote" :subid("cuid_149_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1204
    .param pmc self 
    $P5001 = self."!protoregex"("quote")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_150_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1205
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx926_tgt
    .local int rx926_pos
    .local int rx926_off
    .local int rx926_eos
    .local int rx926_rep
    .local pmc rx926_cur
    .local pmc rx926_curclass
    .local pmc rx926_bstack
    .local pmc rx926_cstack
    (rx926_cur, rx926_tgt, rx926_pos, rx926_curclass, rx926_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx926_cur
    length rx926_eos, rx926_tgt
    eq $I19, 1, rx926_restart2488
    gt rx926_pos, rx926_eos, rx926_fail2489
    repr_get_attr_int $I11, self, rx926_curclass, "$!from"
    ne $I11, -1, rxscan927_done2495
    goto rxscan927_scan2494
  rxscan927_loop2493:
    inc rx926_pos
    gt rx926_pos, rx926_eos, rx926_fail2489
    repr_bind_attr_int rx926_cur, rx926_curclass, "$!from", rx926_pos
  rxscan927_scan2494:
    nqp_rxmark rx926_bstack, rxscan927_loop2493, rx926_pos, 0
  rxscan927_done2495:
    ge rx926_pos, rx926_eos, rx926_fail2489
    substr $S11, rx926_tgt, rx926_pos, 1
    index $I11, ucs4:"'", $S11
    lt $I11, 0, rx926_fail2489
    repr_bind_attr_int rx926_cur, rx926_curclass, "$!pos", rx926_pos
    $P11 = rx926_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx926_curclass, "$!pos"
    lt $I11, 0, rx926_fail2489
    nqp_rxmark rx926_bstack, rxsubrule928_pass2496, -1, 0
  rxsubrule928_pass2496:
    rx926_cstack = rx926_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx926_pos, $P11, rx926_curclass, "$!pos"
    rx926_cur."!cursor_pass"(rx926_pos, "quote:sym<apos>", 'backtrack'=>1)
    .return (rx926_cur)
  rx926_restart2488:
    repr_get_attr_obj rx926_cstack, rx926_cur, rx926_curclass, "$!cstack"
  rx926_fail2489:
    unless rx926_bstack, rx926_done2487
    pop $I19, rx926_bstack
    if_null rx926_cstack, rx926_cstack_done2492
    unless rx926_cstack, rx926_cstack_done2492
    dec $I19
    set $P11, rx926_cstack[$I19]
  rx926_cstack_done2492:
    pop rx926_rep, rx926_bstack
    pop rx926_pos, rx926_bstack
    pop $I19, rx926_bstack
    lt rx926_pos, -1, rx926_done2487
    lt rx926_pos, 0, rx926_fail2489
    eq $I19, 0, rx926_fail2489
    nqp_islist $I20, rx926_cstack
    unless $I20, rx926_jump2490
    elements $I18, rx926_bstack
    le $I18, 0, rx926_cut2491
    dec $I18
    set $I18, rx926_bstack[$I18]
  rx926_cut2491:
    assign rx926_cstack, $I18
  rx926_jump2490:
    jump $I19
  rx926_done2487:
    rx926_cur."!cursor_fail"()
    .return (rx926_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_150_1347804164.33_caps" :subid("cuid_memo_237_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_150_1347804164.33_nfa" :subid("cuid_memo_238_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "'"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_151_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1206
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx929_tgt
    .local int rx929_pos
    .local int rx929_off
    .local int rx929_eos
    .local int rx929_rep
    .local pmc rx929_cur
    .local pmc rx929_curclass
    .local pmc rx929_bstack
    .local pmc rx929_cstack
    (rx929_cur, rx929_tgt, rx929_pos, rx929_curclass, rx929_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx929_cur
    length rx929_eos, rx929_tgt
    eq $I19, 1, rx929_restart2499
    gt rx929_pos, rx929_eos, rx929_fail2500
    repr_get_attr_int $I11, self, rx929_curclass, "$!from"
    ne $I11, -1, rxscan930_done2506
    goto rxscan930_scan2505
  rxscan930_loop2504:
    inc rx929_pos
    gt rx929_pos, rx929_eos, rx929_fail2500
    repr_bind_attr_int rx929_cur, rx929_curclass, "$!from", rx929_pos
  rxscan930_scan2505:
    nqp_rxmark rx929_bstack, rxscan930_loop2504, rx929_pos, 0
  rxscan930_done2506:
    ge rx929_pos, rx929_eos, rx929_fail2500
    substr $S11, rx929_tgt, rx929_pos, 1
    index $I11, ucs4:"\"", $S11
    lt $I11, 0, rx929_fail2500
    repr_bind_attr_int rx929_cur, rx929_curclass, "$!pos", rx929_pos
    $P11 = rx929_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx929_curclass, "$!pos"
    lt $I11, 0, rx929_fail2500
    nqp_rxmark rx929_bstack, rxsubrule931_pass2507, -1, 0
  rxsubrule931_pass2507:
    rx929_cstack = rx929_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx929_pos, $P11, rx929_curclass, "$!pos"
    rx929_cur."!cursor_pass"(rx929_pos, "quote:sym<dblq>", 'backtrack'=>1)
    .return (rx929_cur)
  rx929_restart2499:
    repr_get_attr_obj rx929_cstack, rx929_cur, rx929_curclass, "$!cstack"
  rx929_fail2500:
    unless rx929_bstack, rx929_done2498
    pop $I19, rx929_bstack
    if_null rx929_cstack, rx929_cstack_done2503
    unless rx929_cstack, rx929_cstack_done2503
    dec $I19
    set $P11, rx929_cstack[$I19]
  rx929_cstack_done2503:
    pop rx929_rep, rx929_bstack
    pop rx929_pos, rx929_bstack
    pop $I19, rx929_bstack
    lt rx929_pos, -1, rx929_done2498
    lt rx929_pos, 0, rx929_fail2500
    eq $I19, 0, rx929_fail2500
    nqp_islist $I20, rx929_cstack
    unless $I20, rx929_jump2501
    elements $I18, rx929_bstack
    le $I18, 0, rx929_cut2502
    dec $I18
    set $I18, rx929_bstack[$I18]
  rx929_cut2502:
    assign rx929_cstack, $I18
  rx929_jump2501:
    jump $I19
  rx929_done2498:
    rx929_cur."!cursor_fail"()
    .return (rx929_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_151_1347804164.33_caps" :subid("cuid_memo_239_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_151_1347804164.33_nfa" :subid("cuid_memo_240_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "\""
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_152_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1207
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx932_tgt
    .local int rx932_pos
    .local int rx932_off
    .local int rx932_eos
    .local int rx932_rep
    .local pmc rx932_cur
    .local pmc rx932_curclass
    .local pmc rx932_bstack
    .local pmc rx932_cstack
    (rx932_cur, rx932_tgt, rx932_pos, rx932_curclass, rx932_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx932_cur
    length rx932_eos, rx932_tgt
    eq $I19, 1, rx932_restart2510
    gt rx932_pos, rx932_eos, rx932_fail2511
    repr_get_attr_int $I11, self, rx932_curclass, "$!from"
    ne $I11, -1, rxscan933_done2517
    goto rxscan933_scan2516
  rxscan933_loop2515:
    inc rx932_pos
    gt rx932_pos, rx932_eos, rx932_fail2511
    repr_bind_attr_int rx932_cur, rx932_curclass, "$!from", rx932_pos
  rxscan933_scan2516:
    nqp_rxmark rx932_bstack, rxscan933_loop2515, rx932_pos, 0
  rxscan933_done2517:
    nqp_rxmark rx932_bstack, rxcap934_fail2519, rx932_pos, 0
    add $I11, rx932_pos, 1
    gt $I11, rx932_eos, rx932_fail2511
    substr $S10, rx932_tgt, rx932_pos, 1
    ne $S10, ucs4:"q", rx932_fail2511
    add rx932_pos, 1
    nqp_rxpeek $I19, rx932_bstack, rxcap934_fail2519
    inc $I19
    set $I11, rx932_bstack[$I19]
    $P11 = rx932_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx932_pos)
    rx932_cstack = rx932_cur."!cursor_capture"($P11, "sym")
    goto rxcap934_done2518
  rxcap934_fail2519:
    goto rx932_fail2511
  rxcap934_done2518:
    le rx932_pos, 0, rx932_fail2511
    is_cclass $I11, .CCLASS_WORD, rx932_tgt, rx932_pos
    if $I11, rx932_fail2511
    sub $I11, rx932_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx932_tgt, $I11
    unless $I11, rx932_fail2511
    ge rx932_pos, rx932_eos, rx932_fail2511
    substr $S11, rx932_tgt, rx932_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx932_fail2511
    repr_bind_attr_int rx932_cur, rx932_curclass, "$!pos", rx932_pos
    $P11 = rx932_cur."ws"()
    repr_get_attr_int $I11, $P11, rx932_curclass, "$!pos"
    lt $I11, 0, rx932_fail2511
    repr_get_attr_int rx932_pos, $P11, rx932_curclass, "$!pos"
    repr_bind_attr_int rx932_cur, rx932_curclass, "$!pos", rx932_pos
    $P11 = rx932_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx932_curclass, "$!pos"
    lt $I11, 0, rx932_fail2511
    nqp_rxmark rx932_bstack, rxsubrule937_pass2522, -1, 0
  rxsubrule937_pass2522:
    rx932_cstack = rx932_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx932_pos, $P11, rx932_curclass, "$!pos"
    rx932_cur."!cursor_pass"(rx932_pos, "quote:sym<q>", 'backtrack'=>1)
    .return (rx932_cur)
  rx932_restart2510:
    repr_get_attr_obj rx932_cstack, rx932_cur, rx932_curclass, "$!cstack"
  rx932_fail2511:
    unless rx932_bstack, rx932_done2509
    pop $I19, rx932_bstack
    if_null rx932_cstack, rx932_cstack_done2514
    unless rx932_cstack, rx932_cstack_done2514
    dec $I19
    set $P11, rx932_cstack[$I19]
  rx932_cstack_done2514:
    pop rx932_rep, rx932_bstack
    pop rx932_pos, rx932_bstack
    pop $I19, rx932_bstack
    lt rx932_pos, -1, rx932_done2509
    lt rx932_pos, 0, rx932_fail2511
    eq $I19, 0, rx932_fail2511
    nqp_islist $I20, rx932_cstack
    unless $I20, rx932_jump2512
    elements $I18, rx932_bstack
    le $I18, 0, rx932_cut2513
    dec $I18
    set $I18, rx932_bstack[$I18]
  rx932_cut2513:
    assign rx932_cstack, $I18
  rx932_jump2512:
    jump $I19
  rx932_done2509:
    rx932_cur."!cursor_fail"()
    .return (rx932_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_152_1347804164.33_caps" :subid("cuid_memo_241_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["quote_EXPR"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_152_1347804164.33_nfa" :subid("cuid_memo_242_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 113
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 7
    push $P5011, $P5012
    box $P5013, "("
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_153_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1208
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx938_tgt
    .local int rx938_pos
    .local int rx938_off
    .local int rx938_eos
    .local int rx938_rep
    .local pmc rx938_cur
    .local pmc rx938_curclass
    .local pmc rx938_bstack
    .local pmc rx938_cstack
    (rx938_cur, rx938_tgt, rx938_pos, rx938_curclass, rx938_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx938_cur
    length rx938_eos, rx938_tgt
    eq $I19, 1, rx938_restart2525
    gt rx938_pos, rx938_eos, rx938_fail2526
    repr_get_attr_int $I11, self, rx938_curclass, "$!from"
    ne $I11, -1, rxscan939_done2532
    goto rxscan939_scan2531
  rxscan939_loop2530:
    inc rx938_pos
    gt rx938_pos, rx938_eos, rx938_fail2526
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!from", rx938_pos
  rxscan939_scan2531:
    nqp_rxmark rx938_bstack, rxscan939_loop2530, rx938_pos, 0
  rxscan939_done2532:
    nqp_rxmark rx938_bstack, rxcap940_fail2534, rx938_pos, 0
    add $I11, rx938_pos, 2
    gt $I11, rx938_eos, rx938_fail2526
    substr $S10, rx938_tgt, rx938_pos, 2
    ne $S10, ucs4:"qq", rx938_fail2526
    add rx938_pos, 2
    nqp_rxpeek $I19, rx938_bstack, rxcap940_fail2534
    inc $I19
    set $I11, rx938_bstack[$I19]
    $P11 = rx938_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx938_pos)
    rx938_cstack = rx938_cur."!cursor_capture"($P11, "sym")
    goto rxcap940_done2533
  rxcap940_fail2534:
    goto rx938_fail2526
  rxcap940_done2533:
    le rx938_pos, 0, rx938_fail2526
    is_cclass $I11, .CCLASS_WORD, rx938_tgt, rx938_pos
    if $I11, rx938_fail2526
    sub $I11, rx938_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx938_tgt, $I11
    unless $I11, rx938_fail2526
    ge rx938_pos, rx938_eos, rx938_fail2526
    substr $S11, rx938_tgt, rx938_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx938_fail2526
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!pos", rx938_pos
    $P11 = rx938_cur."ws"()
    repr_get_attr_int $I11, $P11, rx938_curclass, "$!pos"
    lt $I11, 0, rx938_fail2526
    repr_get_attr_int rx938_pos, $P11, rx938_curclass, "$!pos"
    repr_bind_attr_int rx938_cur, rx938_curclass, "$!pos", rx938_pos
    $P11 = rx938_cur."quote_EXPR"(":qq")
    repr_get_attr_int $I11, $P11, rx938_curclass, "$!pos"
    lt $I11, 0, rx938_fail2526
    nqp_rxmark rx938_bstack, rxsubrule943_pass2537, -1, 0
  rxsubrule943_pass2537:
    rx938_cstack = rx938_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx938_pos, $P11, rx938_curclass, "$!pos"
    rx938_cur."!cursor_pass"(rx938_pos, "quote:sym<qq>", 'backtrack'=>1)
    .return (rx938_cur)
  rx938_restart2525:
    repr_get_attr_obj rx938_cstack, rx938_cur, rx938_curclass, "$!cstack"
  rx938_fail2526:
    unless rx938_bstack, rx938_done2524
    pop $I19, rx938_bstack
    if_null rx938_cstack, rx938_cstack_done2529
    unless rx938_cstack, rx938_cstack_done2529
    dec $I19
    set $P11, rx938_cstack[$I19]
  rx938_cstack_done2529:
    pop rx938_rep, rx938_bstack
    pop rx938_pos, rx938_bstack
    pop $I19, rx938_bstack
    lt rx938_pos, -1, rx938_done2524
    lt rx938_pos, 0, rx938_fail2526
    eq $I19, 0, rx938_fail2526
    nqp_islist $I20, rx938_cstack
    unless $I20, rx938_jump2527
    elements $I18, rx938_bstack
    le $I18, 0, rx938_cut2528
    dec $I18
    set $I18, rx938_bstack[$I18]
  rx938_cut2528:
    assign rx938_cstack, $I18
  rx938_jump2527:
    jump $I19
  rx938_done2524:
    rx938_cur."!cursor_fail"()
    .return (rx938_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_153_1347804164.33_caps" :subid("cuid_memo_243_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["quote_EXPR"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_153_1347804164.33_nfa" :subid("cuid_memo_244_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 113
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 113
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 1
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 7
    push $P5015, $P5016
    box $P5017, "("
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_154_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1209
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx944_tgt
    .local int rx944_pos
    .local int rx944_off
    .local int rx944_eos
    .local int rx944_rep
    .local pmc rx944_cur
    .local pmc rx944_curclass
    .local pmc rx944_bstack
    .local pmc rx944_cstack
    (rx944_cur, rx944_tgt, rx944_pos, rx944_curclass, rx944_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx944_cur
    length rx944_eos, rx944_tgt
    eq $I19, 1, rx944_restart2540
    gt rx944_pos, rx944_eos, rx944_fail2541
    repr_get_attr_int $I11, self, rx944_curclass, "$!from"
    ne $I11, -1, rxscan945_done2547
    goto rxscan945_scan2546
  rxscan945_loop2545:
    inc rx944_pos
    gt rx944_pos, rx944_eos, rx944_fail2541
    repr_bind_attr_int rx944_cur, rx944_curclass, "$!from", rx944_pos
  rxscan945_scan2546:
    nqp_rxmark rx944_bstack, rxscan945_loop2545, rx944_pos, 0
  rxscan945_done2547:
    nqp_rxmark rx944_bstack, rxcap946_fail2549, rx944_pos, 0
    add $I11, rx944_pos, 1
    gt $I11, rx944_eos, rx944_fail2541
    substr $S10, rx944_tgt, rx944_pos, 1
    ne $S10, ucs4:"Q", rx944_fail2541
    add rx944_pos, 1
    nqp_rxpeek $I19, rx944_bstack, rxcap946_fail2549
    inc $I19
    set $I11, rx944_bstack[$I19]
    $P11 = rx944_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx944_pos)
    rx944_cstack = rx944_cur."!cursor_capture"($P11, "sym")
    goto rxcap946_done2548
  rxcap946_fail2549:
    goto rx944_fail2541
  rxcap946_done2548:
    le rx944_pos, 0, rx944_fail2541
    is_cclass $I11, .CCLASS_WORD, rx944_tgt, rx944_pos
    if $I11, rx944_fail2541
    sub $I11, rx944_pos, 1
    is_cclass $I11, .CCLASS_WORD, rx944_tgt, $I11
    unless $I11, rx944_fail2541
    ge rx944_pos, rx944_eos, rx944_fail2541
    substr $S11, rx944_tgt, rx944_pos, 1
    index $I11, ucs4:"(", $S11
    ge $I11, 0, rx944_fail2541
    repr_bind_attr_int rx944_cur, rx944_curclass, "$!pos", rx944_pos
    $P11 = rx944_cur."ws"()
    repr_get_attr_int $I11, $P11, rx944_curclass, "$!pos"
    lt $I11, 0, rx944_fail2541
    repr_get_attr_int rx944_pos, $P11, rx944_curclass, "$!pos"
    repr_bind_attr_int rx944_cur, rx944_curclass, "$!pos", rx944_pos
    $P11 = rx944_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx944_curclass, "$!pos"
    lt $I11, 0, rx944_fail2541
    nqp_rxmark rx944_bstack, rxsubrule949_pass2552, -1, 0
  rxsubrule949_pass2552:
    rx944_cstack = rx944_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx944_pos, $P11, rx944_curclass, "$!pos"
    rx944_cur."!cursor_pass"(rx944_pos, "quote:sym<Q>", 'backtrack'=>1)
    .return (rx944_cur)
  rx944_restart2540:
    repr_get_attr_obj rx944_cstack, rx944_cur, rx944_curclass, "$!cstack"
  rx944_fail2541:
    unless rx944_bstack, rx944_done2539
    pop $I19, rx944_bstack
    if_null rx944_cstack, rx944_cstack_done2544
    unless rx944_cstack, rx944_cstack_done2544
    dec $I19
    set $P11, rx944_cstack[$I19]
  rx944_cstack_done2544:
    pop rx944_rep, rx944_bstack
    pop rx944_pos, rx944_bstack
    pop $I19, rx944_bstack
    lt rx944_pos, -1, rx944_done2539
    lt rx944_pos, 0, rx944_fail2541
    eq $I19, 0, rx944_fail2541
    nqp_islist $I20, rx944_cstack
    unless $I20, rx944_jump2542
    elements $I18, rx944_bstack
    le $I18, 0, rx944_cut2543
    dec $I18
    set $I18, rx944_bstack[$I18]
  rx944_cut2543:
    assign rx944_cstack, $I18
  rx944_jump2542:
    jump $I19
  rx944_done2539:
    rx944_cur."!cursor_fail"()
    .return (rx944_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_154_1347804164.33_caps" :subid("cuid_memo_245_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["quote_EXPR"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_154_1347804164.33_nfa" :subid("cuid_memo_246_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 81
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 1
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 7
    push $P5011, $P5012
    box $P5013, "("
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_155_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1210
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx950_tgt
    .local int rx950_pos
    .local int rx950_off
    .local int rx950_eos
    .local int rx950_rep
    .local pmc rx950_cur
    .local pmc rx950_curclass
    .local pmc rx950_bstack
    .local pmc rx950_cstack
    (rx950_cur, rx950_tgt, rx950_pos, rx950_curclass, rx950_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx950_cur
    length rx950_eos, rx950_tgt
    eq $I19, 1, rx950_restart2555
    gt rx950_pos, rx950_eos, rx950_fail2556
    repr_get_attr_int $I11, self, rx950_curclass, "$!from"
    ne $I11, -1, rxscan951_done2562
    goto rxscan951_scan2561
  rxscan951_loop2560:
    inc rx950_pos
    gt rx950_pos, rx950_eos, rx950_fail2556
    repr_bind_attr_int rx950_cur, rx950_curclass, "$!from", rx950_pos
  rxscan951_scan2561:
    nqp_rxmark rx950_bstack, rxscan951_loop2560, rx950_pos, 0
  rxscan951_done2562:
    nqp_rxmark rx950_bstack, rxcap952_fail2564, rx950_pos, 0
    add $I11, rx950_pos, 5
    gt $I11, rx950_eos, rx950_fail2556
    substr $S10, rx950_tgt, rx950_pos, 5
    ne $S10, ucs4:"Q:PIR", rx950_fail2556
    add rx950_pos, 5
    nqp_rxpeek $I19, rx950_bstack, rxcap952_fail2564
    inc $I19
    set $I11, rx950_bstack[$I19]
    $P11 = rx950_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx950_pos)
    rx950_cstack = rx950_cur."!cursor_capture"($P11, "sym")
    goto rxcap952_done2563
  rxcap952_fail2564:
    goto rx950_fail2556
  rxcap952_done2563:
    repr_bind_attr_int rx950_cur, rx950_curclass, "$!pos", rx950_pos
    $P11 = rx950_cur."ws"()
    repr_get_attr_int $I11, $P11, rx950_curclass, "$!pos"
    lt $I11, 0, rx950_fail2556
    repr_get_attr_int rx950_pos, $P11, rx950_curclass, "$!pos"
    repr_bind_attr_int rx950_cur, rx950_curclass, "$!pos", rx950_pos
    $P11 = rx950_cur."quote_EXPR"()
    repr_get_attr_int $I11, $P11, rx950_curclass, "$!pos"
    lt $I11, 0, rx950_fail2556
    nqp_rxmark rx950_bstack, rxsubrule954_pass2566, -1, 0
  rxsubrule954_pass2566:
    rx950_cstack = rx950_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx950_pos, $P11, rx950_curclass, "$!pos"
    rx950_cur."!cursor_pass"(rx950_pos, "quote:sym<Q:PIR>", 'backtrack'=>1)
    .return (rx950_cur)
  rx950_restart2555:
    repr_get_attr_obj rx950_cstack, rx950_cur, rx950_curclass, "$!cstack"
  rx950_fail2556:
    unless rx950_bstack, rx950_done2554
    pop $I19, rx950_bstack
    if_null rx950_cstack, rx950_cstack_done2559
    unless rx950_cstack, rx950_cstack_done2559
    dec $I19
    set $P11, rx950_cstack[$I19]
  rx950_cstack_done2559:
    pop rx950_rep, rx950_bstack
    pop rx950_pos, rx950_bstack
    pop $I19, rx950_bstack
    lt rx950_pos, -1, rx950_done2554
    lt rx950_pos, 0, rx950_fail2556
    eq $I19, 0, rx950_fail2556
    nqp_islist $I20, rx950_cstack
    unless $I20, rx950_jump2557
    elements $I18, rx950_bstack
    le $I18, 0, rx950_cut2558
    dec $I18
    set $I18, rx950_bstack[$I18]
  rx950_cut2558:
    assign rx950_cstack, $I18
  rx950_jump2557:
    jump $I19
  rx950_done2554:
    rx950_cur."!cursor_fail"()
    .return (rx950_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_155_1347804164.33_caps" :subid("cuid_memo_247_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["quote_EXPR"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_155_1347804164.33_nfa" :subid("cuid_memo_248_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 81
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 58
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 80
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 73
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 82
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "ws"
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "quote_EXPR"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_156_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1211
    .param pmc _lex_param_0 
    .lex "%*RX", $P101 
    .lex utf8:"$\x{a2}", $P102 
    .lex "$/", $P103 
    .lex "self", _lex_param_0 
    .local pmc self 
    new $P5001, 'Hash'
    set $P101, $P5001
    set self, _lex_param_0
    .local string rx955_tgt
    .local int rx955_pos
    .local int rx955_off
    .local int rx955_eos
    .local int rx955_rep
    .local pmc rx955_cur
    .local pmc rx955_curclass
    .local pmc rx955_bstack
    .local pmc rx955_cstack
    (rx955_cur, rx955_tgt, rx955_pos, rx955_curclass, rx955_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx955_cur
    length rx955_eos, rx955_tgt
    eq $I19, 1, rx955_restart2569
    gt rx955_pos, rx955_eos, rx955_fail2570
    repr_get_attr_int $I11, self, rx955_curclass, "$!from"
    ne $I11, -1, rxscan956_done2576
    goto rxscan956_scan2575
  rxscan956_loop2574:
    inc rx955_pos
    gt rx955_pos, rx955_eos, rx955_fail2570
    repr_bind_attr_int rx955_cur, rx955_curclass, "$!from", rx955_pos
  rxscan956_scan2575:
    nqp_rxmark rx955_bstack, rxscan956_loop2574, rx955_pos, 0
  rxscan956_done2576:
    add $I11, rx955_pos, 1
    gt $I11, rx955_eos, rx955_fail2570
    substr $S10, rx955_tgt, rx955_pos, 1
    ne $S10, ucs4:"/", rx955_fail2570
    add rx955_pos, 1
    repr_bind_attr_int rx955_cur, rx955_curclass, "$!pos", rx955_pos
    $P11 = rx955_cur."newpad"()
    repr_get_attr_int $I11, $P11, rx955_curclass, "$!pos"
    lt $I11, 0, rx955_fail2570
    repr_get_attr_int rx955_pos, $P11, rx955_curclass, "$!pos"
    repr_bind_attr_int rx955_cur, rx955_curclass, "$!pos", rx955_pos
    store_lex unicode:"$\x{a2}", rx955_cur
    unless_null $P101, fallback2578
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%RX"]
    unless_null $P5002, fallback2579
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%RX"], $P5007
    set $P5002, $P5007
  fallback2579:
    unless_null $P5002, vivi_9582580
    die "Contextual %*RX not found"
    box $P5008, "Contextual %*RX not found"
    set $P5002, $P5008
  vivi_9582580:
    set $P101, $P5002
  fallback2578:
    repr_bind_attr_int rx955_cur, rx955_curclass, "$!pos", rx955_pos
    $P11 = rx955_cur."LANG"("Regex", "nibbler")
    repr_get_attr_int $I11, $P11, rx955_curclass, "$!pos"
    lt $I11, 0, rx955_fail2570
    nqp_rxmark rx955_bstack, rxsubrule959_pass2581, -1, 0
  rxsubrule959_pass2581:
    rx955_cstack = rx955_cur."!cursor_capture"($P11, "p6regex")
    repr_get_attr_int rx955_pos, $P11, rx955_curclass, "$!pos"
    add $I11, rx955_pos, 1
    gt $I11, rx955_eos, rx955_fail2570
    substr $S10, rx955_tgt, rx955_pos, 1
    ne $S10, ucs4:"/", rx955_fail2570
    add rx955_pos, 1
    rx955_cur."!cursor_pass"(rx955_pos, "quote:sym</ />", 'backtrack'=>1)
    .return (rx955_cur)
  rx955_restart2569:
    repr_get_attr_obj rx955_cstack, rx955_cur, rx955_curclass, "$!cstack"
  rx955_fail2570:
    unless rx955_bstack, rx955_done2568
    pop $I19, rx955_bstack
    if_null rx955_cstack, rx955_cstack_done2573
    unless rx955_cstack, rx955_cstack_done2573
    dec $I19
    set $P11, rx955_cstack[$I19]
  rx955_cstack_done2573:
    pop rx955_rep, rx955_bstack
    pop rx955_pos, rx955_bstack
    pop $I19, rx955_bstack
    lt rx955_pos, -1, rx955_done2568
    lt rx955_pos, 0, rx955_fail2570
    eq $I19, 0, rx955_fail2570
    nqp_islist $I20, rx955_cstack
    unless $I20, rx955_jump2571
    elements $I18, rx955_bstack
    le $I18, 0, rx955_cut2572
    dec $I18
    set $I18, rx955_bstack[$I18]
  rx955_cut2572:
    assign rx955_cstack, $I18
  rx955_jump2571:
    jump $I19
  rx955_done2568:
    rx955_cur."!cursor_fail"()
    .return (rx955_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_156_1347804164.33_caps" :subid("cuid_memo_249_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["p6regex"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_156_1347804164.33_nfa" :subid("cuid_memo_250_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 47
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "newpad"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 1
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "LANG"
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 47
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_157_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1219
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx960_tgt
    .local int rx960_pos
    .local int rx960_off
    .local int rx960_eos
    .local int rx960_rep
    .local pmc rx960_cur
    .local pmc rx960_curclass
    .local pmc rx960_bstack
    .local pmc rx960_cstack
    (rx960_cur, rx960_tgt, rx960_pos, rx960_curclass, rx960_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx960_cur
    length rx960_eos, rx960_tgt
    eq $I19, 1, rx960_restart2584
    gt rx960_pos, rx960_eos, rx960_fail2585
    repr_get_attr_int $I11, self, rx960_curclass, "$!from"
    ne $I11, -1, rxscan961_done2591
    goto rxscan961_scan2590
  rxscan961_loop2589:
    inc rx960_pos
    gt rx960_pos, rx960_eos, rx960_fail2585
    repr_bind_attr_int rx960_cur, rx960_curclass, "$!from", rx960_pos
  rxscan961_scan2590:
    nqp_rxmark rx960_bstack, rxscan961_loop2589, rx960_pos, 0
  rxscan961_done2591:
    ge rx960_pos, rx960_eos, rx960_fail2585
    substr $S11, rx960_tgt, rx960_pos, 1
    index $I11, ucs4:"$", $S11
    lt $I11, 0, rx960_fail2585
    repr_bind_attr_int rx960_cur, rx960_curclass, "$!pos", rx960_pos
    $P11 = rx960_cur."quotemod_check"("s")
    repr_get_attr_int $I11, $P11, rx960_curclass, "$!pos"
    lt $I11, 0, rx960_fail2585
    repr_bind_attr_int rx960_cur, rx960_curclass, "$!pos", rx960_pos
    $P11 = rx960_cur."variable"()
    repr_get_attr_int $I11, $P11, rx960_curclass, "$!pos"
    lt $I11, 0, rx960_fail2585
    nqp_rxmark rx960_bstack, rxsubrule962_pass2592, -1, 0
  rxsubrule962_pass2592:
    rx960_cstack = rx960_cur."!cursor_capture"($P11, "variable")
    repr_get_attr_int rx960_pos, $P11, rx960_curclass, "$!pos"
    rx960_cur."!cursor_pass"(rx960_pos, "quote_escape:sym<$>", 'backtrack'=>1)
    .return (rx960_cur)
  rx960_restart2584:
    repr_get_attr_obj rx960_cstack, rx960_cur, rx960_curclass, "$!cstack"
  rx960_fail2585:
    unless rx960_bstack, rx960_done2583
    pop $I19, rx960_bstack
    if_null rx960_cstack, rx960_cstack_done2588
    unless rx960_cstack, rx960_cstack_done2588
    dec $I19
    set $P11, rx960_cstack[$I19]
  rx960_cstack_done2588:
    pop rx960_rep, rx960_bstack
    pop rx960_pos, rx960_bstack
    pop $I19, rx960_bstack
    lt rx960_pos, -1, rx960_done2583
    lt rx960_pos, 0, rx960_fail2585
    eq $I19, 0, rx960_fail2585
    nqp_islist $I20, rx960_cstack
    unless $I20, rx960_jump2586
    elements $I18, rx960_bstack
    le $I18, 0, rx960_cut2587
    dec $I18
    set $I18, rx960_bstack[$I18]
  rx960_cut2587:
    assign rx960_cstack, $I18
  rx960_jump2586:
    jump $I19
  rx960_done2583:
    rx960_cur."!cursor_fail"()
    .return (rx960_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_157_1347804164.33_caps" :subid("cuid_memo_251_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["variable"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_157_1347804164.33_nfa" :subid("cuid_memo_252_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_158_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1220
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx963_tgt
    .local int rx963_pos
    .local int rx963_off
    .local int rx963_eos
    .local int rx963_rep
    .local pmc rx963_cur
    .local pmc rx963_curclass
    .local pmc rx963_bstack
    .local pmc rx963_cstack
    (rx963_cur, rx963_tgt, rx963_pos, rx963_curclass, rx963_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx963_cur
    length rx963_eos, rx963_tgt
    eq $I19, 1, rx963_restart2595
    gt rx963_pos, rx963_eos, rx963_fail2596
    repr_get_attr_int $I11, self, rx963_curclass, "$!from"
    ne $I11, -1, rxscan964_done2602
    goto rxscan964_scan2601
  rxscan964_loop2600:
    inc rx963_pos
    gt rx963_pos, rx963_eos, rx963_fail2596
    repr_bind_attr_int rx963_cur, rx963_curclass, "$!from", rx963_pos
  rxscan964_scan2601:
    nqp_rxmark rx963_bstack, rxscan964_loop2600, rx963_pos, 0
  rxscan964_done2602:
    ge rx963_pos, rx963_eos, rx963_fail2596
    substr $S11, rx963_tgt, rx963_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx963_fail2596
    repr_bind_attr_int rx963_cur, rx963_curclass, "$!pos", rx963_pos
    $P11 = rx963_cur."quotemod_check"("c")
    repr_get_attr_int $I11, $P11, rx963_curclass, "$!pos"
    lt $I11, 0, rx963_fail2596
    repr_bind_attr_int rx963_cur, rx963_curclass, "$!pos", rx963_pos
    $P11 = rx963_cur."block"()
    repr_get_attr_int $I11, $P11, rx963_curclass, "$!pos"
    lt $I11, 0, rx963_fail2596
    nqp_rxmark rx963_bstack, rxsubrule965_pass2603, -1, 0
  rxsubrule965_pass2603:
    rx963_cstack = rx963_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx963_pos, $P11, rx963_curclass, "$!pos"
    rx963_cur."!cursor_pass"(rx963_pos, "quote_escape:sym<{ }>", 'backtrack'=>1)
    .return (rx963_cur)
  rx963_restart2595:
    repr_get_attr_obj rx963_cstack, rx963_cur, rx963_curclass, "$!cstack"
  rx963_fail2596:
    unless rx963_bstack, rx963_done2594
    pop $I19, rx963_bstack
    if_null rx963_cstack, rx963_cstack_done2599
    unless rx963_cstack, rx963_cstack_done2599
    dec $I19
    set $P11, rx963_cstack[$I19]
  rx963_cstack_done2599:
    pop rx963_rep, rx963_bstack
    pop rx963_pos, rx963_bstack
    pop $I19, rx963_bstack
    lt rx963_pos, -1, rx963_done2594
    lt rx963_pos, 0, rx963_fail2596
    eq $I19, 0, rx963_fail2596
    nqp_islist $I20, rx963_cstack
    unless $I20, rx963_jump2597
    elements $I18, rx963_bstack
    le $I18, 0, rx963_cut2598
    dec $I18
    set $I18, rx963_bstack[$I18]
  rx963_cut2598:
    assign rx963_cstack, $I18
  rx963_jump2597:
    jump $I19
  rx963_done2594:
    rx963_cur."!cursor_fail"()
    .return (rx963_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_158_1347804164.33_caps" :subid("cuid_memo_253_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["block"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_158_1347804164.33_nfa" :subid("cuid_memo_254_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "{"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_159_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1221
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx966_tgt
    .local int rx966_pos
    .local int rx966_off
    .local int rx966_eos
    .local int rx966_rep
    .local pmc rx966_cur
    .local pmc rx966_curclass
    .local pmc rx966_bstack
    .local pmc rx966_cstack
    (rx966_cur, rx966_tgt, rx966_pos, rx966_curclass, rx966_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx966_cur
    length rx966_eos, rx966_tgt
    eq $I19, 1, rx966_restart2606
    gt rx966_pos, rx966_eos, rx966_fail2607
    repr_get_attr_int $I11, self, rx966_curclass, "$!from"
    ne $I11, -1, rxscan967_done2613
    goto rxscan967_scan2612
  rxscan967_loop2611:
    inc rx966_pos
    gt rx966_pos, rx966_eos, rx966_fail2607
    repr_bind_attr_int rx966_cur, rx966_curclass, "$!from", rx966_pos
  rxscan967_scan2612:
    nqp_rxmark rx966_bstack, rxscan967_loop2611, rx966_pos, 0
  rxscan967_done2613:
    add $I11, rx966_pos, 2
    gt $I11, rx966_eos, rx966_fail2607
    substr $S10, rx966_tgt, rx966_pos, 2
    ne $S10, ucs4:"\\e", rx966_fail2607
    add rx966_pos, 2
    repr_bind_attr_int rx966_cur, rx966_curclass, "$!pos", rx966_pos
    $P11 = rx966_cur."quotemod_check"("b")
    repr_get_attr_int $I11, $P11, rx966_curclass, "$!pos"
    lt $I11, 0, rx966_fail2607
    rx966_cur."!cursor_pass"(rx966_pos, "quote_escape:sym<esc>", 'backtrack'=>1)
    .return (rx966_cur)
  rx966_restart2606:
    repr_get_attr_obj rx966_cstack, rx966_cur, rx966_curclass, "$!cstack"
  rx966_fail2607:
    unless rx966_bstack, rx966_done2605
    pop $I19, rx966_bstack
    if_null rx966_cstack, rx966_cstack_done2610
    unless rx966_cstack, rx966_cstack_done2610
    dec $I19
    set $P11, rx966_cstack[$I19]
  rx966_cstack_done2610:
    pop rx966_rep, rx966_bstack
    pop rx966_pos, rx966_bstack
    pop $I19, rx966_bstack
    lt rx966_pos, -1, rx966_done2605
    lt rx966_pos, 0, rx966_fail2607
    eq $I19, 0, rx966_fail2607
    nqp_islist $I20, rx966_cstack
    unless $I20, rx966_jump2608
    elements $I18, rx966_bstack
    le $I18, 0, rx966_cut2609
    dec $I18
    set $I18, rx966_bstack[$I18]
  rx966_cut2609:
    assign rx966_cstack, $I18
  rx966_jump2608:
    jump $I19
  rx966_done2605:
    rx966_cur."!cursor_fail"()
    .return (rx966_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_159_1347804164.33_caps" :subid("cuid_memo_255_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_159_1347804164.33_nfa" :subid("cuid_memo_256_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 92
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "quotemod_check"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_160_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1223
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx968_tgt
    .local int rx968_pos
    .local int rx968_off
    .local int rx968_eos
    .local int rx968_rep
    .local pmc rx968_cur
    .local pmc rx968_curclass
    .local pmc rx968_bstack
    .local pmc rx968_cstack
    (rx968_cur, rx968_tgt, rx968_pos, rx968_curclass, rx968_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx968_cur
    length rx968_eos, rx968_tgt
    eq $I19, 1, rx968_restart2616
    gt rx968_pos, rx968_eos, rx968_fail2617
    repr_get_attr_int $I11, self, rx968_curclass, "$!from"
    ne $I11, -1, rxscan969_done2623
    goto rxscan969_scan2622
  rxscan969_loop2621:
    inc rx968_pos
    gt rx968_pos, rx968_eos, rx968_fail2617
    repr_bind_attr_int rx968_cur, rx968_curclass, "$!from", rx968_pos
  rxscan969_scan2622:
    nqp_rxmark rx968_bstack, rxscan969_loop2621, rx968_pos, 0
  rxscan969_done2623:
    add $I11, rx968_pos, 1
    gt $I11, rx968_eos, rx968_fail2617
    substr $S10, rx968_tgt, rx968_pos, 1
    ne $S10, ucs4:"(", rx968_fail2617
    add rx968_pos, 1
    repr_bind_attr_int rx968_cur, rx968_curclass, "$!pos", rx968_pos
    $P11 = rx968_cur."ws"()
    repr_get_attr_int $I11, $P11, rx968_curclass, "$!pos"
    lt $I11, 0, rx968_fail2617
    repr_get_attr_int rx968_pos, $P11, rx968_curclass, "$!pos"
    nqp_rxmark rx968_bstack, rxquantr971_done2626, rx968_pos, 0
  rxquantr971_loop2625:
    repr_bind_attr_int rx968_cur, rx968_curclass, "$!pos", rx968_pos
    $P11 = rx968_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx968_curclass, "$!pos"
    lt $I11, 0, rx968_fail2617
    goto rxsubrule972_pass2627
  rxsubrule972_back2628:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx968_curclass, "$!pos"
    lt $I11, 0, rx968_fail2617
  rxsubrule972_pass2627:
    rx968_cstack = rx968_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule972_back2628
    push rx968_bstack, $I11
    push rx968_bstack, 0
    push rx968_bstack, rx968_pos
    elements $I11, rx968_cstack
    push rx968_bstack, $I11
    repr_get_attr_int rx968_pos, $P11, rx968_curclass, "$!pos"
    nqp_rxpeek $I19, rx968_bstack, rxquantr971_done2626
    inc $I19
    inc $I19
    set rx968_rep, rx968_bstack[$I19]
    nqp_rxcommit rx968_bstack, rxquantr971_done2626
    inc rx968_rep
  rxquantr971_done2626:
    add $I11, rx968_pos, 1
    gt $I11, rx968_eos, rx968_fail2617
    substr $S10, rx968_tgt, rx968_pos, 1
    ne $S10, ucs4:")", rx968_fail2617
    add rx968_pos, 1
    rx968_cur."!cursor_pass"(rx968_pos, "circumfix:sym<( )>", 'backtrack'=>1)
    .return (rx968_cur)
  rx968_restart2616:
    repr_get_attr_obj rx968_cstack, rx968_cur, rx968_curclass, "$!cstack"
  rx968_fail2617:
    unless rx968_bstack, rx968_done2615
    pop $I19, rx968_bstack
    if_null rx968_cstack, rx968_cstack_done2620
    unless rx968_cstack, rx968_cstack_done2620
    dec $I19
    set $P11, rx968_cstack[$I19]
  rx968_cstack_done2620:
    pop rx968_rep, rx968_bstack
    pop rx968_pos, rx968_bstack
    pop $I19, rx968_bstack
    lt rx968_pos, -1, rx968_done2615
    lt rx968_pos, 0, rx968_fail2617
    eq $I19, 0, rx968_fail2617
    nqp_islist $I20, rx968_cstack
    unless $I20, rx968_jump2618
    elements $I18, rx968_bstack
    le $I18, 0, rx968_cut2619
    dec $I18
    set $I18, rx968_bstack[$I18]
  rx968_cut2619:
    assign rx968_cstack, $I18
  rx968_jump2618:
    jump $I19
  rx968_done2615:
    rx968_cur."!cursor_fail"()
    .return (rx968_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_160_1347804164.33_caps" :subid("cuid_memo_257_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_160_1347804164.33_nfa" :subid("cuid_memo_258_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 40
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "EXPR"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    box $P5015, 1
    push $P5011, $P5015
    box $P5016, 0
    push $P5011, $P5016
    box $P5017, 4
    push $P5011, $P5017
    push $P5001, $P5011
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 41
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_161_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1224
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx973_tgt
    .local int rx973_pos
    .local int rx973_off
    .local int rx973_eos
    .local int rx973_rep
    .local pmc rx973_cur
    .local pmc rx973_curclass
    .local pmc rx973_bstack
    .local pmc rx973_cstack
    (rx973_cur, rx973_tgt, rx973_pos, rx973_curclass, rx973_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx973_cur
    length rx973_eos, rx973_tgt
    eq $I19, 1, rx973_restart2631
    gt rx973_pos, rx973_eos, rx973_fail2632
    repr_get_attr_int $I11, self, rx973_curclass, "$!from"
    ne $I11, -1, rxscan974_done2638
    goto rxscan974_scan2637
  rxscan974_loop2636:
    inc rx973_pos
    gt rx973_pos, rx973_eos, rx973_fail2632
    repr_bind_attr_int rx973_cur, rx973_curclass, "$!from", rx973_pos
  rxscan974_scan2637:
    nqp_rxmark rx973_bstack, rxscan974_loop2636, rx973_pos, 0
  rxscan974_done2638:
    add $I11, rx973_pos, 1
    gt $I11, rx973_eos, rx973_fail2632
    substr $S10, rx973_tgt, rx973_pos, 1
    ne $S10, ucs4:"[", rx973_fail2632
    add rx973_pos, 1
    repr_bind_attr_int rx973_cur, rx973_curclass, "$!pos", rx973_pos
    $P11 = rx973_cur."ws"()
    repr_get_attr_int $I11, $P11, rx973_curclass, "$!pos"
    lt $I11, 0, rx973_fail2632
    repr_get_attr_int rx973_pos, $P11, rx973_curclass, "$!pos"
    nqp_rxmark rx973_bstack, rxquantr976_done2641, rx973_pos, 0
  rxquantr976_loop2640:
    repr_bind_attr_int rx973_cur, rx973_curclass, "$!pos", rx973_pos
    $P11 = rx973_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx973_curclass, "$!pos"
    lt $I11, 0, rx973_fail2632
    goto rxsubrule977_pass2642
  rxsubrule977_back2643:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx973_curclass, "$!pos"
    lt $I11, 0, rx973_fail2632
  rxsubrule977_pass2642:
    rx973_cstack = rx973_cur."!cursor_capture"($P11, "EXPR")
    set_addr $I11, rxsubrule977_back2643
    push rx973_bstack, $I11
    push rx973_bstack, 0
    push rx973_bstack, rx973_pos
    elements $I11, rx973_cstack
    push rx973_bstack, $I11
    repr_get_attr_int rx973_pos, $P11, rx973_curclass, "$!pos"
    nqp_rxpeek $I19, rx973_bstack, rxquantr976_done2641
    inc $I19
    inc $I19
    set rx973_rep, rx973_bstack[$I19]
    nqp_rxcommit rx973_bstack, rxquantr976_done2641
    inc rx973_rep
  rxquantr976_done2641:
    add $I11, rx973_pos, 1
    gt $I11, rx973_eos, rx973_fail2632
    substr $S10, rx973_tgt, rx973_pos, 1
    ne $S10, ucs4:"]", rx973_fail2632
    add rx973_pos, 1
    rx973_cur."!cursor_pass"(rx973_pos, "circumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx973_cur)
  rx973_restart2631:
    repr_get_attr_obj rx973_cstack, rx973_cur, rx973_curclass, "$!cstack"
  rx973_fail2632:
    unless rx973_bstack, rx973_done2630
    pop $I19, rx973_bstack
    if_null rx973_cstack, rx973_cstack_done2635
    unless rx973_cstack, rx973_cstack_done2635
    dec $I19
    set $P11, rx973_cstack[$I19]
  rx973_cstack_done2635:
    pop rx973_rep, rx973_bstack
    pop rx973_pos, rx973_bstack
    pop $I19, rx973_bstack
    lt rx973_pos, -1, rx973_done2630
    lt rx973_pos, 0, rx973_fail2632
    eq $I19, 0, rx973_fail2632
    nqp_islist $I20, rx973_cstack
    unless $I20, rx973_jump2633
    elements $I18, rx973_bstack
    le $I18, 0, rx973_cut2634
    dec $I18
    set $I18, rx973_bstack[$I18]
  rx973_cut2634:
    assign rx973_cstack, $I18
  rx973_jump2633:
    jump $I19
  rx973_done2630:
    rx973_cur."!cursor_fail"()
    .return (rx973_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_161_1347804164.33_caps" :subid("cuid_memo_259_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 2
    set $P5001["EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_161_1347804164.33_nfa" :subid("cuid_memo_260_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 91
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "EXPR"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    box $P5015, 1
    push $P5011, $P5015
    box $P5016, 0
    push $P5011, $P5016
    box $P5017, 4
    push $P5011, $P5017
    push $P5001, $P5011
    new $P5018, 'ResizablePMCArray'
    box $P5019, 2
    push $P5018, $P5019
    box $P5020, 93
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_162_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1225
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx978_tgt
    .local int rx978_pos
    .local int rx978_off
    .local int rx978_eos
    .local int rx978_rep
    .local pmc rx978_cur
    .local pmc rx978_curclass
    .local pmc rx978_bstack
    .local pmc rx978_cstack
    (rx978_cur, rx978_tgt, rx978_pos, rx978_curclass, rx978_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx978_cur
    length rx978_eos, rx978_tgt
    eq $I19, 1, rx978_restart2646
    gt rx978_pos, rx978_eos, rx978_fail2647
    repr_get_attr_int $I11, self, rx978_curclass, "$!from"
    ne $I11, -1, rxscan979_done2653
    goto rxscan979_scan2652
  rxscan979_loop2651:
    inc rx978_pos
    gt rx978_pos, rx978_eos, rx978_fail2647
    repr_bind_attr_int rx978_cur, rx978_curclass, "$!from", rx978_pos
  rxscan979_scan2652:
    nqp_rxmark rx978_bstack, rxscan979_loop2651, rx978_pos, 0
  rxscan979_done2653:
    ge rx978_pos, rx978_eos, rx978_fail2647
    substr $S11, rx978_tgt, rx978_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx978_fail2647
    repr_bind_attr_int rx978_cur, rx978_curclass, "$!pos", rx978_pos
    $P11 = rx978_cur."quote_EXPR"(":q", ":w")
    repr_get_attr_int $I11, $P11, rx978_curclass, "$!pos"
    lt $I11, 0, rx978_fail2647
    nqp_rxmark rx978_bstack, rxsubrule980_pass2654, -1, 0
  rxsubrule980_pass2654:
    rx978_cstack = rx978_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx978_pos, $P11, rx978_curclass, "$!pos"
    rx978_cur."!cursor_pass"(rx978_pos, "circumfix:sym<ang>", 'backtrack'=>1)
    .return (rx978_cur)
  rx978_restart2646:
    repr_get_attr_obj rx978_cstack, rx978_cur, rx978_curclass, "$!cstack"
  rx978_fail2647:
    unless rx978_bstack, rx978_done2645
    pop $I19, rx978_bstack
    if_null rx978_cstack, rx978_cstack_done2650
    unless rx978_cstack, rx978_cstack_done2650
    dec $I19
    set $P11, rx978_cstack[$I19]
  rx978_cstack_done2650:
    pop rx978_rep, rx978_bstack
    pop rx978_pos, rx978_bstack
    pop $I19, rx978_bstack
    lt rx978_pos, -1, rx978_done2645
    lt rx978_pos, 0, rx978_fail2647
    eq $I19, 0, rx978_fail2647
    nqp_islist $I20, rx978_cstack
    unless $I20, rx978_jump2648
    elements $I18, rx978_bstack
    le $I18, 0, rx978_cut2649
    dec $I18
    set $I18, rx978_bstack[$I18]
  rx978_cut2649:
    assign rx978_cstack, $I18
  rx978_jump2648:
    jump $I19
  rx978_done2645:
    rx978_cur."!cursor_fail"()
    .return (rx978_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_162_1347804164.33_caps" :subid("cuid_memo_261_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_162_1347804164.33_nfa" :subid("cuid_memo_262_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "<"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_163_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1226
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx981_tgt
    .local int rx981_pos
    .local int rx981_off
    .local int rx981_eos
    .local int rx981_rep
    .local pmc rx981_cur
    .local pmc rx981_curclass
    .local pmc rx981_bstack
    .local pmc rx981_cstack
    (rx981_cur, rx981_tgt, rx981_pos, rx981_curclass, rx981_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx981_cur
    length rx981_eos, rx981_tgt
    eq $I19, 1, rx981_restart2657
    gt rx981_pos, rx981_eos, rx981_fail2658
    repr_get_attr_int $I11, self, rx981_curclass, "$!from"
    ne $I11, -1, rxscan982_done2664
    goto rxscan982_scan2663
  rxscan982_loop2662:
    inc rx981_pos
    gt rx981_pos, rx981_eos, rx981_fail2658
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!from", rx981_pos
  rxscan982_scan2663:
    nqp_rxmark rx981_bstack, rxscan982_loop2662, rx981_pos, 0
  rxscan982_done2664:
    ge rx981_pos, rx981_eos, rx981_fail2658
    substr $S11, rx981_tgt, rx981_pos, 1
    index $I11, ucs4:"\x{ab}", $S11
    lt $I11, 0, rx981_fail2658
    repr_bind_attr_int rx981_cur, rx981_curclass, "$!pos", rx981_pos
    $P11 = rx981_cur."quote_EXPR"(":qq", ":w")
    repr_get_attr_int $I11, $P11, rx981_curclass, "$!pos"
    lt $I11, 0, rx981_fail2658
    nqp_rxmark rx981_bstack, rxsubrule983_pass2665, -1, 0
  rxsubrule983_pass2665:
    rx981_cstack = rx981_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx981_pos, $P11, rx981_curclass, "$!pos"
    rx981_cur."!cursor_pass"(rx981_pos, utf8:"circumfix:sym<\x{ab} \x{bb}>", 'backtrack'=>1)
    .return (rx981_cur)
  rx981_restart2657:
    repr_get_attr_obj rx981_cstack, rx981_cur, rx981_curclass, "$!cstack"
  rx981_fail2658:
    unless rx981_bstack, rx981_done2656
    pop $I19, rx981_bstack
    if_null rx981_cstack, rx981_cstack_done2661
    unless rx981_cstack, rx981_cstack_done2661
    dec $I19
    set $P11, rx981_cstack[$I19]
  rx981_cstack_done2661:
    pop rx981_rep, rx981_bstack
    pop rx981_pos, rx981_bstack
    pop $I19, rx981_bstack
    lt rx981_pos, -1, rx981_done2656
    lt rx981_pos, 0, rx981_fail2658
    eq $I19, 0, rx981_fail2658
    nqp_islist $I20, rx981_cstack
    unless $I20, rx981_jump2659
    elements $I18, rx981_bstack
    le $I18, 0, rx981_cut2660
    dec $I18
    set $I18, rx981_bstack[$I18]
  rx981_cut2660:
    assign rx981_cstack, $I18
  rx981_jump2659:
    jump $I19
  rx981_done2656:
    rx981_cur."!cursor_fail"()
    .return (rx981_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_163_1347804164.33_caps" :subid("cuid_memo_263_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_163_1347804164.33_nfa" :subid("cuid_memo_264_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, utf8:"\x{ab}"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_164_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1227
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx984_tgt
    .local int rx984_pos
    .local int rx984_off
    .local int rx984_eos
    .local int rx984_rep
    .local pmc rx984_cur
    .local pmc rx984_curclass
    .local pmc rx984_bstack
    .local pmc rx984_cstack
    (rx984_cur, rx984_tgt, rx984_pos, rx984_curclass, rx984_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx984_cur
    length rx984_eos, rx984_tgt
    eq $I19, 1, rx984_restart2668
    gt rx984_pos, rx984_eos, rx984_fail2669
    repr_get_attr_int $I11, self, rx984_curclass, "$!from"
    ne $I11, -1, rxscan985_done2675
    goto rxscan985_scan2674
  rxscan985_loop2673:
    inc rx984_pos
    gt rx984_pos, rx984_eos, rx984_fail2669
    repr_bind_attr_int rx984_cur, rx984_curclass, "$!from", rx984_pos
  rxscan985_scan2674:
    nqp_rxmark rx984_bstack, rxscan985_loop2673, rx984_pos, 0
  rxscan985_done2675:
    ge rx984_pos, rx984_eos, rx984_fail2669
    substr $S11, rx984_tgt, rx984_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx984_fail2669
    repr_bind_attr_int rx984_cur, rx984_curclass, "$!pos", rx984_pos
    $P11 = rx984_cur."pblock"()
    repr_get_attr_int $I11, $P11, rx984_curclass, "$!pos"
    lt $I11, 0, rx984_fail2669
    nqp_rxmark rx984_bstack, rxsubrule986_pass2676, -1, 0
  rxsubrule986_pass2676:
    rx984_cstack = rx984_cur."!cursor_capture"($P11, "pblock")
    repr_get_attr_int rx984_pos, $P11, rx984_curclass, "$!pos"
    rx984_cur."!cursor_pass"(rx984_pos, "circumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx984_cur)
  rx984_restart2668:
    repr_get_attr_obj rx984_cstack, rx984_cur, rx984_curclass, "$!cstack"
  rx984_fail2669:
    unless rx984_bstack, rx984_done2667
    pop $I19, rx984_bstack
    if_null rx984_cstack, rx984_cstack_done2672
    unless rx984_cstack, rx984_cstack_done2672
    dec $I19
    set $P11, rx984_cstack[$I19]
  rx984_cstack_done2672:
    pop rx984_rep, rx984_bstack
    pop rx984_pos, rx984_bstack
    pop $I19, rx984_bstack
    lt rx984_pos, -1, rx984_done2667
    lt rx984_pos, 0, rx984_fail2669
    eq $I19, 0, rx984_fail2669
    nqp_islist $I20, rx984_cstack
    unless $I20, rx984_jump2670
    elements $I18, rx984_bstack
    le $I18, 0, rx984_cut2671
    dec $I18
    set $I18, rx984_bstack[$I18]
  rx984_cut2671:
    assign rx984_cstack, $I18
  rx984_jump2670:
    jump $I19
  rx984_done2667:
    rx984_cur."!cursor_fail"()
    .return (rx984_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_164_1347804164.33_caps" :subid("cuid_memo_265_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["pblock"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_164_1347804164.33_nfa" :subid("cuid_memo_266_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "{"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<sigil>" :subid("cuid_165_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1228
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx987_tgt
    .local int rx987_pos
    .local int rx987_off
    .local int rx987_eos
    .local int rx987_rep
    .local pmc rx987_cur
    .local pmc rx987_curclass
    .local pmc rx987_bstack
    .local pmc rx987_cstack
    (rx987_cur, rx987_tgt, rx987_pos, rx987_curclass, rx987_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx987_cur
    length rx987_eos, rx987_tgt
    eq $I19, 1, rx987_restart2679
    gt rx987_pos, rx987_eos, rx987_fail2680
    repr_get_attr_int $I11, self, rx987_curclass, "$!from"
    ne $I11, -1, rxscan988_done2686
    goto rxscan988_scan2685
  rxscan988_loop2684:
    inc rx987_pos
    gt rx987_pos, rx987_eos, rx987_fail2680
    repr_bind_attr_int rx987_cur, rx987_curclass, "$!from", rx987_pos
  rxscan988_scan2685:
    nqp_rxmark rx987_bstack, rxscan988_loop2684, rx987_pos, 0
  rxscan988_done2686:
    repr_bind_attr_int rx987_cur, rx987_curclass, "$!pos", rx987_pos
    $P11 = rx987_cur."sigil"()
    repr_get_attr_int $I11, $P11, rx987_curclass, "$!pos"
    lt $I11, 0, rx987_fail2680
    nqp_rxmark rx987_bstack, rxsubrule989_pass2687, -1, 0
  rxsubrule989_pass2687:
    rx987_cstack = rx987_cur."!cursor_capture"($P11, "sigil")
    repr_get_attr_int rx987_pos, $P11, rx987_curclass, "$!pos"
    add $I11, rx987_pos, 1
    gt $I11, rx987_eos, rx987_fail2680
    substr $S10, rx987_tgt, rx987_pos, 1
    ne $S10, ucs4:"(", rx987_fail2680
    add rx987_pos, 1
    repr_bind_attr_int rx987_cur, rx987_curclass, "$!pos", rx987_pos
    $P11 = rx987_cur."semilist"()
    repr_get_attr_int $I11, $P11, rx987_curclass, "$!pos"
    lt $I11, 0, rx987_fail2680
    nqp_rxmark rx987_bstack, rxsubrule990_pass2688, -1, 0
  rxsubrule990_pass2688:
    rx987_cstack = rx987_cur."!cursor_capture"($P11, "semilist")
    repr_get_attr_int rx987_pos, $P11, rx987_curclass, "$!pos"
  alt991_02690:
    nqp_rxmark rx987_bstack, alt991_12691, rx987_pos, 0
    add $I11, rx987_pos, 1
    gt $I11, rx987_eos, rx987_fail2680
    substr $S10, rx987_tgt, rx987_pos, 1
    ne $S10, ucs4:")", rx987_fail2680
    add rx987_pos, 1
    goto alt991_end2689
  alt991_12691:
    repr_bind_attr_int rx987_cur, rx987_curclass, "$!pos", rx987_pos
    $P11 = rx987_cur."FAILGOAL"("')'")
    repr_get_attr_int $I11, $P11, rx987_curclass, "$!pos"
    lt $I11, 0, rx987_fail2680
    goto rxsubrule992_pass2692
  rxsubrule992_back2693:
    $P11 = $P11."!cursor_next"()
    repr_get_attr_int $I11, $P11, rx987_curclass, "$!pos"
    lt $I11, 0, rx987_fail2680
  rxsubrule992_pass2692:
    rx987_cstack = rx987_cur."!cursor_push_cstack"($P11)
    set_addr $I11, rxsubrule992_back2693
    push rx987_bstack, $I11
    push rx987_bstack, 0
    push rx987_bstack, rx987_pos
    elements $I11, rx987_cstack
    push rx987_bstack, $I11
    repr_get_attr_int rx987_pos, $P11, rx987_curclass, "$!pos"
  alt991_end2689:
    rx987_cur."!cursor_pass"(rx987_pos, "circumfix:sym<sigil>", 'backtrack'=>1)
    .return (rx987_cur)
  rx987_restart2679:
    repr_get_attr_obj rx987_cstack, rx987_cur, rx987_curclass, "$!cstack"
  rx987_fail2680:
    unless rx987_bstack, rx987_done2678
    pop $I19, rx987_bstack
    if_null rx987_cstack, rx987_cstack_done2683
    unless rx987_cstack, rx987_cstack_done2683
    dec $I19
    set $P11, rx987_cstack[$I19]
  rx987_cstack_done2683:
    pop rx987_rep, rx987_bstack
    pop rx987_pos, rx987_bstack
    pop $I19, rx987_bstack
    lt rx987_pos, -1, rx987_done2678
    lt rx987_pos, 0, rx987_fail2680
    eq $I19, 0, rx987_fail2680
    nqp_islist $I20, rx987_cstack
    unless $I20, rx987_jump2681
    elements $I18, rx987_bstack
    le $I18, 0, rx987_cut2682
    dec $I18
    set $I18, rx987_bstack[$I18]
  rx987_cut2682:
    assign rx987_cstack, $I18
  rx987_jump2681:
    jump $I19
  rx987_done2678:
    rx987_cur."!cursor_fail"()
    .return (rx987_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_165_1347804164.33_caps" :subid("cuid_memo_267_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sigil"], $P5002
    box $P5003, 0
    set $P5001["semilist"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_165_1347804164.33_nfa" :subid("cuid_memo_268_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "sigil"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 40
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "semilist"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 0
    push $P5015, $P5016
    box $P5017, 0
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_166_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1230
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx993_tgt
    .local int rx993_pos
    .local int rx993_off
    .local int rx993_eos
    .local int rx993_rep
    .local pmc rx993_cur
    .local pmc rx993_curclass
    .local pmc rx993_bstack
    .local pmc rx993_cstack
    (rx993_cur, rx993_tgt, rx993_pos, rx993_curclass, rx993_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx993_cur
    length rx993_eos, rx993_tgt
    eq $I19, 1, rx993_restart2696
    gt rx993_pos, rx993_eos, rx993_fail2697
    repr_get_attr_int $I11, self, rx993_curclass, "$!from"
    ne $I11, -1, rxscan994_done2703
    goto rxscan994_scan2702
  rxscan994_loop2701:
    inc rx993_pos
    gt rx993_pos, rx993_eos, rx993_fail2697
    repr_bind_attr_int rx993_cur, rx993_curclass, "$!from", rx993_pos
  rxscan994_scan2702:
    nqp_rxmark rx993_bstack, rxscan994_loop2701, rx993_pos, 0
  rxscan994_done2703:
    repr_bind_attr_int rx993_cur, rx993_curclass, "$!pos", rx993_pos
    $P11 = rx993_cur."ws"()
    repr_get_attr_int $I11, $P11, rx993_curclass, "$!pos"
    lt $I11, 0, rx993_fail2697
    repr_get_attr_int rx993_pos, $P11, rx993_curclass, "$!pos"
    repr_bind_attr_int rx993_cur, rx993_curclass, "$!pos", rx993_pos
    $P11 = rx993_cur."statement"()
    repr_get_attr_int $I11, $P11, rx993_curclass, "$!pos"
    lt $I11, 0, rx993_fail2697
    nqp_rxmark rx993_bstack, rxsubrule996_pass2705, -1, 0
  rxsubrule996_pass2705:
    rx993_cstack = rx993_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx993_pos, $P11, rx993_curclass, "$!pos"
    repr_bind_attr_int rx993_cur, rx993_curclass, "$!pos", rx993_pos
    $P11 = rx993_cur."ws"()
    repr_get_attr_int $I11, $P11, rx993_curclass, "$!pos"
    lt $I11, 0, rx993_fail2697
    repr_get_attr_int rx993_pos, $P11, rx993_curclass, "$!pos"
    rx993_cur."!cursor_pass"(rx993_pos, "semilist", 'backtrack'=>1)
    .return (rx993_cur)
  rx993_restart2696:
    repr_get_attr_obj rx993_cstack, rx993_cur, rx993_curclass, "$!cstack"
  rx993_fail2697:
    unless rx993_bstack, rx993_done2695
    pop $I19, rx993_bstack
    if_null rx993_cstack, rx993_cstack_done2700
    unless rx993_cstack, rx993_cstack_done2700
    dec $I19
    set $P11, rx993_cstack[$I19]
  rx993_cstack_done2700:
    pop rx993_rep, rx993_bstack
    pop rx993_pos, rx993_bstack
    pop $I19, rx993_bstack
    lt rx993_pos, -1, rx993_done2695
    lt rx993_pos, 0, rx993_fail2697
    eq $I19, 0, rx993_fail2697
    nqp_islist $I20, rx993_cstack
    unless $I20, rx993_jump2698
    elements $I18, rx993_bstack
    le $I18, 0, rx993_cut2699
    dec $I18
    set $I18, rx993_bstack[$I18]
  rx993_cut2699:
    assign rx993_cstack, $I18
  rx993_jump2698:
    jump $I19
  rx993_done2695:
    rx993_cur."!cursor_fail"()
    .return (rx993_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_166_1347804164.33_caps" :subid("cuid_memo_269_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statement"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infixish" :subid("cuid_167_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1253
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx998_tgt
    .local int rx998_pos
    .local int rx998_off
    .local int rx998_eos
    .local int rx998_rep
    .local pmc rx998_cur
    .local pmc rx998_curclass
    .local pmc rx998_bstack
    .local pmc rx998_cstack
    (rx998_cur, rx998_tgt, rx998_pos, rx998_curclass, rx998_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx998_cur
    length rx998_eos, rx998_tgt
    eq $I19, 1, rx998_restart2709
    gt rx998_pos, rx998_eos, rx998_fail2710
    repr_get_attr_int $I11, self, rx998_curclass, "$!from"
    ne $I11, -1, rxscan999_done2716
    goto rxscan999_scan2715
  rxscan999_loop2714:
    inc rx998_pos
    gt rx998_pos, rx998_eos, rx998_fail2710
    repr_bind_attr_int rx998_cur, rx998_curclass, "$!from", rx998_pos
  rxscan999_scan2715:
    nqp_rxmark rx998_bstack, rxscan999_loop2714, rx998_pos, 0
  rxscan999_done2716:
    repr_bind_attr_int rx998_cur, rx998_curclass, "$!pos", rx998_pos
    $P11 = rx998_cur."infixstopper"()
    repr_get_attr_int $I11, $P11, rx998_curclass, "$!pos"
    ge $I11, 0, rx998_fail2710
    repr_bind_attr_int rx998_cur, rx998_curclass, "$!pos", rx998_pos
    $P11 = rx998_cur."infix"()
    repr_get_attr_int $I11, $P11, rx998_curclass, "$!pos"
    lt $I11, 0, rx998_fail2710
    nqp_rxmark rx998_bstack, rxsubrule1000_pass2717, -1, 0
  rxsubrule1000_pass2717:
    rx998_cstack = rx998_cur."!cursor_capture"($P11, "OPER=infix")
    repr_get_attr_int rx998_pos, $P11, rx998_curclass, "$!pos"
    rx998_cur."!cursor_pass"(rx998_pos, "infixish", 'backtrack'=>1)
    .return (rx998_cur)
  rx998_restart2709:
    repr_get_attr_obj rx998_cstack, rx998_cur, rx998_curclass, "$!cstack"
  rx998_fail2710:
    unless rx998_bstack, rx998_done2708
    pop $I19, rx998_bstack
    if_null rx998_cstack, rx998_cstack_done2713
    unless rx998_cstack, rx998_cstack_done2713
    dec $I19
    set $P11, rx998_cstack[$I19]
  rx998_cstack_done2713:
    pop rx998_rep, rx998_bstack
    pop rx998_pos, rx998_bstack
    pop $I19, rx998_bstack
    lt rx998_pos, -1, rx998_done2708
    lt rx998_pos, 0, rx998_fail2710
    eq $I19, 0, rx998_fail2710
    nqp_islist $I20, rx998_cstack
    unless $I20, rx998_jump2711
    elements $I18, rx998_bstack
    le $I18, 0, rx998_cut2712
    dec $I18
    set $I18, rx998_bstack[$I18]
  rx998_cut2712:
    assign rx998_cstack, $I18
  rx998_jump2711:
    jump $I19
  rx998_done2708:
    rx998_cur."!cursor_fail"()
    .return (rx998_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_167_1347804164.33_caps" :subid("cuid_memo_270_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["OPER"], $P5002
    box $P5003, 0
    set $P5001["infix"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infixstopper" :subid("cuid_168_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1254
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1001_tgt
    .local int rx1001_pos
    .local int rx1001_off
    .local int rx1001_eos
    .local int rx1001_rep
    .local pmc rx1001_cur
    .local pmc rx1001_curclass
    .local pmc rx1001_bstack
    .local pmc rx1001_cstack
    (rx1001_cur, rx1001_tgt, rx1001_pos, rx1001_curclass, rx1001_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1001_cur
    length rx1001_eos, rx1001_tgt
    eq $I19, 1, rx1001_restart2720
    gt rx1001_pos, rx1001_eos, rx1001_fail2721
    repr_get_attr_int $I11, self, rx1001_curclass, "$!from"
    ne $I11, -1, rxscan1002_done2727
    goto rxscan1002_scan2726
  rxscan1002_loop2725:
    inc rx1001_pos
    gt rx1001_pos, rx1001_eos, rx1001_fail2721
    repr_bind_attr_int rx1001_cur, rx1001_curclass, "$!from", rx1001_pos
  rxscan1002_scan2726:
    nqp_rxmark rx1001_bstack, rxscan1002_loop2725, rx1001_pos, 0
  rxscan1002_done2727:
    repr_bind_attr_int rx1001_cur, rx1001_curclass, "$!pos", rx1001_pos
    $P11 = rx1001_cur."lambda"()
    repr_get_attr_int $I11, $P11, rx1001_curclass, "$!pos"
    lt $I11, 0, rx1001_fail2721
    rx1001_cur."!cursor_pass"(rx1001_pos, "infixstopper", 'backtrack'=>1)
    .return (rx1001_cur)
  rx1001_restart2720:
    repr_get_attr_obj rx1001_cstack, rx1001_cur, rx1001_curclass, "$!cstack"
  rx1001_fail2721:
    unless rx1001_bstack, rx1001_done2719
    pop $I19, rx1001_bstack
    if_null rx1001_cstack, rx1001_cstack_done2724
    unless rx1001_cstack, rx1001_cstack_done2724
    dec $I19
    set $P11, rx1001_cstack[$I19]
  rx1001_cstack_done2724:
    pop rx1001_rep, rx1001_bstack
    pop rx1001_pos, rx1001_bstack
    pop $I19, rx1001_bstack
    lt rx1001_pos, -1, rx1001_done2719
    lt rx1001_pos, 0, rx1001_fail2721
    eq $I19, 0, rx1001_fail2721
    nqp_islist $I20, rx1001_cstack
    unless $I20, rx1001_jump2722
    elements $I18, rx1001_bstack
    le $I18, 0, rx1001_cut2723
    dec $I18
    set $I18, rx1001_bstack[$I18]
  rx1001_cut2723:
    assign rx1001_cstack, $I18
  rx1001_jump2722:
    jump $I19
  rx1001_done2719:
    rx1001_cur."!cursor_fail"()
    .return (rx1001_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_168_1347804164.33_caps" :subid("cuid_memo_271_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_168_1347804164.33_nfa" :subid("cuid_memo_272_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "lambda"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_169_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1256
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1003_tgt
    .local int rx1003_pos
    .local int rx1003_off
    .local int rx1003_eos
    .local int rx1003_rep
    .local pmc rx1003_cur
    .local pmc rx1003_curclass
    .local pmc rx1003_bstack
    .local pmc rx1003_cstack
    (rx1003_cur, rx1003_tgt, rx1003_pos, rx1003_curclass, rx1003_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1003_cur
    length rx1003_eos, rx1003_tgt
    eq $I19, 1, rx1003_restart2730
    gt rx1003_pos, rx1003_eos, rx1003_fail2731
    repr_get_attr_int $I11, self, rx1003_curclass, "$!from"
    ne $I11, -1, rxscan1004_done2737
    goto rxscan1004_scan2736
  rxscan1004_loop2735:
    inc rx1003_pos
    gt rx1003_pos, rx1003_eos, rx1003_fail2731
    repr_bind_attr_int rx1003_cur, rx1003_curclass, "$!from", rx1003_pos
  rxscan1004_scan2736:
    nqp_rxmark rx1003_bstack, rxscan1004_loop2735, rx1003_pos, 0
  rxscan1004_done2737:
    add $I11, rx1003_pos, 1
    gt $I11, rx1003_eos, rx1003_fail2731
    substr $S10, rx1003_tgt, rx1003_pos, 1
    ne $S10, ucs4:"[", rx1003_fail2731
    add rx1003_pos, 1
    repr_bind_attr_int rx1003_cur, rx1003_curclass, "$!pos", rx1003_pos
    $P11 = rx1003_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1003_curclass, "$!pos"
    lt $I11, 0, rx1003_fail2731
    repr_get_attr_int rx1003_pos, $P11, rx1003_curclass, "$!pos"
    repr_bind_attr_int rx1003_cur, rx1003_curclass, "$!pos", rx1003_pos
    $P11 = rx1003_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1003_curclass, "$!pos"
    lt $I11, 0, rx1003_fail2731
    nqp_rxmark rx1003_bstack, rxsubrule1006_pass2739, -1, 0
  rxsubrule1006_pass2739:
    rx1003_cstack = rx1003_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1003_pos, $P11, rx1003_curclass, "$!pos"
    add $I11, rx1003_pos, 1
    gt $I11, rx1003_eos, rx1003_fail2731
    substr $S10, rx1003_tgt, rx1003_pos, 1
    ne $S10, ucs4:"]", rx1003_fail2731
    add rx1003_pos, 1
    repr_bind_attr_int rx1003_cur, rx1003_curclass, "$!pos", rx1003_pos
    $P11 = rx1003_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1003_curclass, "$!pos"
    lt $I11, 0, rx1003_fail2731
    nqp_rxmark rx1003_bstack, rxsubrule1007_pass2740, -1, 0
  rxsubrule1007_pass2740:
    rx1003_cstack = rx1003_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1003_pos, $P11, rx1003_curclass, "$!pos"
    rx1003_cur."!cursor_pass"(rx1003_pos, "postcircumfix:sym<[ ]>", 'backtrack'=>1)
    .return (rx1003_cur)
  rx1003_restart2730:
    repr_get_attr_obj rx1003_cstack, rx1003_cur, rx1003_curclass, "$!cstack"
  rx1003_fail2731:
    unless rx1003_bstack, rx1003_done2729
    pop $I19, rx1003_bstack
    if_null rx1003_cstack, rx1003_cstack_done2734
    unless rx1003_cstack, rx1003_cstack_done2734
    dec $I19
    set $P11, rx1003_cstack[$I19]
  rx1003_cstack_done2734:
    pop rx1003_rep, rx1003_bstack
    pop rx1003_pos, rx1003_bstack
    pop $I19, rx1003_bstack
    lt rx1003_pos, -1, rx1003_done2729
    lt rx1003_pos, 0, rx1003_fail2731
    eq $I19, 0, rx1003_fail2731
    nqp_islist $I20, rx1003_cstack
    unless $I20, rx1003_jump2732
    elements $I18, rx1003_bstack
    le $I18, 0, rx1003_cut2733
    dec $I18
    set $I18, rx1003_bstack[$I18]
  rx1003_cut2733:
    assign rx1003_cstack, $I18
  rx1003_jump2732:
    jump $I19
  rx1003_done2729:
    rx1003_cur."!cursor_fail"()
    .return (rx1003_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_169_1347804164.33_caps" :subid("cuid_memo_273_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_169_1347804164.33_nfa" :subid("cuid_memo_274_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 91
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "EXPR"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 93
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "O"
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_170_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1261
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1008_tgt
    .local int rx1008_pos
    .local int rx1008_off
    .local int rx1008_eos
    .local int rx1008_rep
    .local pmc rx1008_cur
    .local pmc rx1008_curclass
    .local pmc rx1008_bstack
    .local pmc rx1008_cstack
    (rx1008_cur, rx1008_tgt, rx1008_pos, rx1008_curclass, rx1008_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1008_cur
    length rx1008_eos, rx1008_tgt
    eq $I19, 1, rx1008_restart2743
    gt rx1008_pos, rx1008_eos, rx1008_fail2744
    repr_get_attr_int $I11, self, rx1008_curclass, "$!from"
    ne $I11, -1, rxscan1009_done2750
    goto rxscan1009_scan2749
  rxscan1009_loop2748:
    inc rx1008_pos
    gt rx1008_pos, rx1008_eos, rx1008_fail2744
    repr_bind_attr_int rx1008_cur, rx1008_curclass, "$!from", rx1008_pos
  rxscan1009_scan2749:
    nqp_rxmark rx1008_bstack, rxscan1009_loop2748, rx1008_pos, 0
  rxscan1009_done2750:
    add $I11, rx1008_pos, 1
    gt $I11, rx1008_eos, rx1008_fail2744
    substr $S10, rx1008_tgt, rx1008_pos, 1
    ne $S10, ucs4:"{", rx1008_fail2744
    add rx1008_pos, 1
    repr_bind_attr_int rx1008_cur, rx1008_curclass, "$!pos", rx1008_pos
    $P11 = rx1008_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1008_curclass, "$!pos"
    lt $I11, 0, rx1008_fail2744
    repr_get_attr_int rx1008_pos, $P11, rx1008_curclass, "$!pos"
    repr_bind_attr_int rx1008_cur, rx1008_curclass, "$!pos", rx1008_pos
    $P11 = rx1008_cur."EXPR"()
    repr_get_attr_int $I11, $P11, rx1008_curclass, "$!pos"
    lt $I11, 0, rx1008_fail2744
    nqp_rxmark rx1008_bstack, rxsubrule1011_pass2752, -1, 0
  rxsubrule1011_pass2752:
    rx1008_cstack = rx1008_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1008_pos, $P11, rx1008_curclass, "$!pos"
    add $I11, rx1008_pos, 1
    gt $I11, rx1008_eos, rx1008_fail2744
    substr $S10, rx1008_tgt, rx1008_pos, 1
    ne $S10, ucs4:"}", rx1008_fail2744
    add rx1008_pos, 1
    repr_bind_attr_int rx1008_cur, rx1008_curclass, "$!pos", rx1008_pos
    $P11 = rx1008_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1008_curclass, "$!pos"
    lt $I11, 0, rx1008_fail2744
    nqp_rxmark rx1008_bstack, rxsubrule1012_pass2753, -1, 0
  rxsubrule1012_pass2753:
    rx1008_cstack = rx1008_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1008_pos, $P11, rx1008_curclass, "$!pos"
    rx1008_cur."!cursor_pass"(rx1008_pos, "postcircumfix:sym<{ }>", 'backtrack'=>1)
    .return (rx1008_cur)
  rx1008_restart2743:
    repr_get_attr_obj rx1008_cstack, rx1008_cur, rx1008_curclass, "$!cstack"
  rx1008_fail2744:
    unless rx1008_bstack, rx1008_done2742
    pop $I19, rx1008_bstack
    if_null rx1008_cstack, rx1008_cstack_done2747
    unless rx1008_cstack, rx1008_cstack_done2747
    dec $I19
    set $P11, rx1008_cstack[$I19]
  rx1008_cstack_done2747:
    pop rx1008_rep, rx1008_bstack
    pop rx1008_pos, rx1008_bstack
    pop $I19, rx1008_bstack
    lt rx1008_pos, -1, rx1008_done2742
    lt rx1008_pos, 0, rx1008_fail2744
    eq $I19, 0, rx1008_fail2744
    nqp_islist $I20, rx1008_cstack
    unless $I20, rx1008_jump2745
    elements $I18, rx1008_bstack
    le $I18, 0, rx1008_cut2746
    dec $I18
    set $I18, rx1008_bstack[$I18]
  rx1008_cut2746:
    assign rx1008_cstack, $I18
  rx1008_jump2745:
    jump $I19
  rx1008_done2742:
    rx1008_cur."!cursor_fail"()
    .return (rx1008_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_170_1347804164.33_caps" :subid("cuid_memo_275_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_170_1347804164.33_nfa" :subid("cuid_memo_276_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "EXPR"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 125
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "O"
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_171_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1266
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1013_tgt
    .local int rx1013_pos
    .local int rx1013_off
    .local int rx1013_eos
    .local int rx1013_rep
    .local pmc rx1013_cur
    .local pmc rx1013_curclass
    .local pmc rx1013_bstack
    .local pmc rx1013_cstack
    (rx1013_cur, rx1013_tgt, rx1013_pos, rx1013_curclass, rx1013_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1013_cur
    length rx1013_eos, rx1013_tgt
    eq $I19, 1, rx1013_restart2756
    gt rx1013_pos, rx1013_eos, rx1013_fail2757
    repr_get_attr_int $I11, self, rx1013_curclass, "$!from"
    ne $I11, -1, rxscan1014_done2763
    goto rxscan1014_scan2762
  rxscan1014_loop2761:
    inc rx1013_pos
    gt rx1013_pos, rx1013_eos, rx1013_fail2757
    repr_bind_attr_int rx1013_cur, rx1013_curclass, "$!from", rx1013_pos
  rxscan1014_scan2762:
    nqp_rxmark rx1013_bstack, rxscan1014_loop2761, rx1013_pos, 0
  rxscan1014_done2763:
    ge rx1013_pos, rx1013_eos, rx1013_fail2757
    substr $S11, rx1013_tgt, rx1013_pos, 1
    index $I11, ucs4:"<", $S11
    lt $I11, 0, rx1013_fail2757
    repr_bind_attr_int rx1013_cur, rx1013_curclass, "$!pos", rx1013_pos
    $P11 = rx1013_cur."quote_EXPR"(":q")
    repr_get_attr_int $I11, $P11, rx1013_curclass, "$!pos"
    lt $I11, 0, rx1013_fail2757
    nqp_rxmark rx1013_bstack, rxsubrule1015_pass2764, -1, 0
  rxsubrule1015_pass2764:
    rx1013_cstack = rx1013_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1013_pos, $P11, rx1013_curclass, "$!pos"
    repr_bind_attr_int rx1013_cur, rx1013_curclass, "$!pos", rx1013_pos
    $P11 = rx1013_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1013_curclass, "$!pos"
    lt $I11, 0, rx1013_fail2757
    nqp_rxmark rx1013_bstack, rxsubrule1016_pass2765, -1, 0
  rxsubrule1016_pass2765:
    rx1013_cstack = rx1013_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1013_pos, $P11, rx1013_curclass, "$!pos"
    rx1013_cur."!cursor_pass"(rx1013_pos, "postcircumfix:sym<ang>", 'backtrack'=>1)
    .return (rx1013_cur)
  rx1013_restart2756:
    repr_get_attr_obj rx1013_cstack, rx1013_cur, rx1013_curclass, "$!cstack"
  rx1013_fail2757:
    unless rx1013_bstack, rx1013_done2755
    pop $I19, rx1013_bstack
    if_null rx1013_cstack, rx1013_cstack_done2760
    unless rx1013_cstack, rx1013_cstack_done2760
    dec $I19
    set $P11, rx1013_cstack[$I19]
  rx1013_cstack_done2760:
    pop rx1013_rep, rx1013_bstack
    pop rx1013_pos, rx1013_bstack
    pop $I19, rx1013_bstack
    lt rx1013_pos, -1, rx1013_done2755
    lt rx1013_pos, 0, rx1013_fail2757
    eq $I19, 0, rx1013_fail2757
    nqp_islist $I20, rx1013_cstack
    unless $I20, rx1013_jump2758
    elements $I18, rx1013_bstack
    le $I18, 0, rx1013_cut2759
    dec $I18
    set $I18, rx1013_bstack[$I18]
  rx1013_cut2759:
    assign rx1013_cstack, $I18
  rx1013_jump2758:
    jump $I19
  rx1013_done2755:
    rx1013_cur."!cursor_fail"()
    .return (rx1013_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_171_1347804164.33_caps" :subid("cuid_memo_277_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_171_1347804164.33_nfa" :subid("cuid_memo_278_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "<"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_172_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1271
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1017_tgt
    .local int rx1017_pos
    .local int rx1017_off
    .local int rx1017_eos
    .local int rx1017_rep
    .local pmc rx1017_cur
    .local pmc rx1017_curclass
    .local pmc rx1017_bstack
    .local pmc rx1017_cstack
    (rx1017_cur, rx1017_tgt, rx1017_pos, rx1017_curclass, rx1017_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1017_cur
    length rx1017_eos, rx1017_tgt
    eq $I19, 1, rx1017_restart2768
    gt rx1017_pos, rx1017_eos, rx1017_fail2769
    repr_get_attr_int $I11, self, rx1017_curclass, "$!from"
    ne $I11, -1, rxscan1018_done2775
    goto rxscan1018_scan2774
  rxscan1018_loop2773:
    inc rx1017_pos
    gt rx1017_pos, rx1017_eos, rx1017_fail2769
    repr_bind_attr_int rx1017_cur, rx1017_curclass, "$!from", rx1017_pos
  rxscan1018_scan2774:
    nqp_rxmark rx1017_bstack, rxscan1018_loop2773, rx1017_pos, 0
  rxscan1018_done2775:
    add $I11, rx1017_pos, 1
    gt $I11, rx1017_eos, rx1017_fail2769
    substr $S10, rx1017_tgt, rx1017_pos, 1
    ne $S10, ucs4:"(", rx1017_fail2769
    add rx1017_pos, 1
    repr_bind_attr_int rx1017_cur, rx1017_curclass, "$!pos", rx1017_pos
    $P11 = rx1017_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1017_curclass, "$!pos"
    lt $I11, 0, rx1017_fail2769
    repr_get_attr_int rx1017_pos, $P11, rx1017_curclass, "$!pos"
    repr_bind_attr_int rx1017_cur, rx1017_curclass, "$!pos", rx1017_pos
    $P11 = rx1017_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1017_curclass, "$!pos"
    lt $I11, 0, rx1017_fail2769
    nqp_rxmark rx1017_bstack, rxsubrule1020_pass2777, -1, 0
  rxsubrule1020_pass2777:
    rx1017_cstack = rx1017_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1017_pos, $P11, rx1017_curclass, "$!pos"
    add $I11, rx1017_pos, 1
    gt $I11, rx1017_eos, rx1017_fail2769
    substr $S10, rx1017_tgt, rx1017_pos, 1
    ne $S10, ucs4:")", rx1017_fail2769
    add rx1017_pos, 1
    repr_bind_attr_int rx1017_cur, rx1017_curclass, "$!pos", rx1017_pos
    $P11 = rx1017_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1017_curclass, "$!pos"
    lt $I11, 0, rx1017_fail2769
    nqp_rxmark rx1017_bstack, rxsubrule1021_pass2778, -1, 0
  rxsubrule1021_pass2778:
    rx1017_cstack = rx1017_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1017_pos, $P11, rx1017_curclass, "$!pos"
    rx1017_cur."!cursor_pass"(rx1017_pos, "postcircumfix:sym<( )>", 'backtrack'=>1)
    .return (rx1017_cur)
  rx1017_restart2768:
    repr_get_attr_obj rx1017_cstack, rx1017_cur, rx1017_curclass, "$!cstack"
  rx1017_fail2769:
    unless rx1017_bstack, rx1017_done2767
    pop $I19, rx1017_bstack
    if_null rx1017_cstack, rx1017_cstack_done2772
    unless rx1017_cstack, rx1017_cstack_done2772
    dec $I19
    set $P11, rx1017_cstack[$I19]
  rx1017_cstack_done2772:
    pop rx1017_rep, rx1017_bstack
    pop rx1017_pos, rx1017_bstack
    pop $I19, rx1017_bstack
    lt rx1017_pos, -1, rx1017_done2767
    lt rx1017_pos, 0, rx1017_fail2769
    eq $I19, 0, rx1017_fail2769
    nqp_islist $I20, rx1017_cstack
    unless $I20, rx1017_jump2770
    elements $I18, rx1017_bstack
    le $I18, 0, rx1017_cut2771
    dec $I18
    set $I18, rx1017_bstack[$I18]
  rx1017_cut2771:
    assign rx1017_cstack, $I18
  rx1017_jump2770:
    jump $I19
  rx1017_done2767:
    rx1017_cur."!cursor_fail"()
    .return (rx1017_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_172_1347804164.33_caps" :subid("cuid_memo_279_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["arglist"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_172_1347804164.33_nfa" :subid("cuid_memo_280_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 40
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "ws"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "arglist"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 41
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 8
    push $P5019, $P5020
    box $P5021, "O"
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_173_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1276
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1022_tgt
    .local int rx1022_pos
    .local int rx1022_off
    .local int rx1022_eos
    .local int rx1022_rep
    .local pmc rx1022_cur
    .local pmc rx1022_curclass
    .local pmc rx1022_bstack
    .local pmc rx1022_cstack
    (rx1022_cur, rx1022_tgt, rx1022_pos, rx1022_curclass, rx1022_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1022_cur
    length rx1022_eos, rx1022_tgt
    eq $I19, 1, rx1022_restart2781
    gt rx1022_pos, rx1022_eos, rx1022_fail2782
    repr_get_attr_int $I11, self, rx1022_curclass, "$!from"
    ne $I11, -1, rxscan1023_done2788
    goto rxscan1023_scan2787
  rxscan1023_loop2786:
    inc rx1022_pos
    gt rx1022_pos, rx1022_eos, rx1022_fail2782
    repr_bind_attr_int rx1022_cur, rx1022_curclass, "$!from", rx1022_pos
  rxscan1023_scan2787:
    nqp_rxmark rx1022_bstack, rxscan1023_loop2786, rx1022_pos, 0
  rxscan1023_done2788:
    repr_bind_attr_int rx1022_cur, rx1022_curclass, "$!pos", rx1022_pos
    $P11 = rx1022_cur."dotty"()
    repr_get_attr_int $I11, $P11, rx1022_curclass, "$!pos"
    lt $I11, 0, rx1022_fail2782
    nqp_rxmark rx1022_bstack, rxsubrule1024_pass2789, -1, 0
  rxsubrule1024_pass2789:
    rx1022_cstack = rx1022_cur."!cursor_capture"($P11, "dotty")
    repr_get_attr_int rx1022_pos, $P11, rx1022_curclass, "$!pos"
    repr_bind_attr_int rx1022_cur, rx1022_curclass, "$!pos", rx1022_pos
    $P11 = rx1022_cur."O"("%methodop")
    repr_get_attr_int $I11, $P11, rx1022_curclass, "$!pos"
    lt $I11, 0, rx1022_fail2782
    nqp_rxmark rx1022_bstack, rxsubrule1025_pass2790, -1, 0
  rxsubrule1025_pass2790:
    rx1022_cstack = rx1022_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1022_pos, $P11, rx1022_curclass, "$!pos"
    rx1022_cur."!cursor_pass"(rx1022_pos, "postfix:sym<.>", 'backtrack'=>1)
    .return (rx1022_cur)
  rx1022_restart2781:
    repr_get_attr_obj rx1022_cstack, rx1022_cur, rx1022_curclass, "$!cstack"
  rx1022_fail2782:
    unless rx1022_bstack, rx1022_done2780
    pop $I19, rx1022_bstack
    if_null rx1022_cstack, rx1022_cstack_done2785
    unless rx1022_cstack, rx1022_cstack_done2785
    dec $I19
    set $P11, rx1022_cstack[$I19]
  rx1022_cstack_done2785:
    pop rx1022_rep, rx1022_bstack
    pop rx1022_pos, rx1022_bstack
    pop $I19, rx1022_bstack
    lt rx1022_pos, -1, rx1022_done2780
    lt rx1022_pos, 0, rx1022_fail2782
    eq $I19, 0, rx1022_fail2782
    nqp_islist $I20, rx1022_cstack
    unless $I20, rx1022_jump2783
    elements $I18, rx1022_bstack
    le $I18, 0, rx1022_cut2784
    dec $I18
    set $I18, rx1022_bstack[$I18]
  rx1022_cut2784:
    assign rx1022_cstack, $I18
  rx1022_jump2783:
    jump $I19
  rx1022_done2780:
    rx1022_cur."!cursor_fail"()
    .return (rx1022_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_173_1347804164.33_caps" :subid("cuid_memo_281_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["dotty"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_173_1347804164.33_nfa" :subid("cuid_memo_282_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "dotty"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<++>" :subid("cuid_174_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1278
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1026_tgt
    .local int rx1026_pos
    .local int rx1026_off
    .local int rx1026_eos
    .local int rx1026_rep
    .local pmc rx1026_cur
    .local pmc rx1026_curclass
    .local pmc rx1026_bstack
    .local pmc rx1026_cstack
    (rx1026_cur, rx1026_tgt, rx1026_pos, rx1026_curclass, rx1026_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1026_cur
    length rx1026_eos, rx1026_tgt
    eq $I19, 1, rx1026_restart2793
    gt rx1026_pos, rx1026_eos, rx1026_fail2794
    repr_get_attr_int $I11, self, rx1026_curclass, "$!from"
    ne $I11, -1, rxscan1027_done2800
    goto rxscan1027_scan2799
  rxscan1027_loop2798:
    inc rx1026_pos
    gt rx1026_pos, rx1026_eos, rx1026_fail2794
    repr_bind_attr_int rx1026_cur, rx1026_curclass, "$!from", rx1026_pos
  rxscan1027_scan2799:
    nqp_rxmark rx1026_bstack, rxscan1027_loop2798, rx1026_pos, 0
  rxscan1027_done2800:
    nqp_rxmark rx1026_bstack, rxcap1028_fail2802, rx1026_pos, 0
    add $I11, rx1026_pos, 2
    gt $I11, rx1026_eos, rx1026_fail2794
    substr $S10, rx1026_tgt, rx1026_pos, 2
    ne $S10, ucs4:"++", rx1026_fail2794
    add rx1026_pos, 2
    nqp_rxpeek $I19, rx1026_bstack, rxcap1028_fail2802
    inc $I19
    set $I11, rx1026_bstack[$I19]
    $P11 = rx1026_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1026_pos)
    rx1026_cstack = rx1026_cur."!cursor_capture"($P11, "sym")
    goto rxcap1028_done2801
  rxcap1028_fail2802:
    goto rx1026_fail2794
  rxcap1028_done2801:
    repr_bind_attr_int rx1026_cur, rx1026_curclass, "$!pos", rx1026_pos
    $P11 = rx1026_cur."O"("%autoincrement, :op<preinc>")
    repr_get_attr_int $I11, $P11, rx1026_curclass, "$!pos"
    lt $I11, 0, rx1026_fail2794
    nqp_rxmark rx1026_bstack, rxsubrule1029_pass2803, -1, 0
  rxsubrule1029_pass2803:
    rx1026_cstack = rx1026_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1026_pos, $P11, rx1026_curclass, "$!pos"
    rx1026_cur."!cursor_pass"(rx1026_pos, "prefix:sym<++>", 'backtrack'=>1)
    .return (rx1026_cur)
  rx1026_restart2793:
    repr_get_attr_obj rx1026_cstack, rx1026_cur, rx1026_curclass, "$!cstack"
  rx1026_fail2794:
    unless rx1026_bstack, rx1026_done2792
    pop $I19, rx1026_bstack
    if_null rx1026_cstack, rx1026_cstack_done2797
    unless rx1026_cstack, rx1026_cstack_done2797
    dec $I19
    set $P11, rx1026_cstack[$I19]
  rx1026_cstack_done2797:
    pop rx1026_rep, rx1026_bstack
    pop rx1026_pos, rx1026_bstack
    pop $I19, rx1026_bstack
    lt rx1026_pos, -1, rx1026_done2792
    lt rx1026_pos, 0, rx1026_fail2794
    eq $I19, 0, rx1026_fail2794
    nqp_islist $I20, rx1026_cstack
    unless $I20, rx1026_jump2795
    elements $I18, rx1026_bstack
    le $I18, 0, rx1026_cut2796
    dec $I18
    set $I18, rx1026_bstack[$I18]
  rx1026_cut2796:
    assign rx1026_cstack, $I18
  rx1026_jump2795:
    jump $I19
  rx1026_done2792:
    rx1026_cur."!cursor_fail"()
    .return (rx1026_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_174_1347804164.33_caps" :subid("cuid_memo_283_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_174_1347804164.33_nfa" :subid("cuid_memo_284_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 43
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<-->" :subid("cuid_175_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1279
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1030_tgt
    .local int rx1030_pos
    .local int rx1030_off
    .local int rx1030_eos
    .local int rx1030_rep
    .local pmc rx1030_cur
    .local pmc rx1030_curclass
    .local pmc rx1030_bstack
    .local pmc rx1030_cstack
    (rx1030_cur, rx1030_tgt, rx1030_pos, rx1030_curclass, rx1030_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1030_cur
    length rx1030_eos, rx1030_tgt
    eq $I19, 1, rx1030_restart2806
    gt rx1030_pos, rx1030_eos, rx1030_fail2807
    repr_get_attr_int $I11, self, rx1030_curclass, "$!from"
    ne $I11, -1, rxscan1031_done2813
    goto rxscan1031_scan2812
  rxscan1031_loop2811:
    inc rx1030_pos
    gt rx1030_pos, rx1030_eos, rx1030_fail2807
    repr_bind_attr_int rx1030_cur, rx1030_curclass, "$!from", rx1030_pos
  rxscan1031_scan2812:
    nqp_rxmark rx1030_bstack, rxscan1031_loop2811, rx1030_pos, 0
  rxscan1031_done2813:
    nqp_rxmark rx1030_bstack, rxcap1032_fail2815, rx1030_pos, 0
    add $I11, rx1030_pos, 2
    gt $I11, rx1030_eos, rx1030_fail2807
    substr $S10, rx1030_tgt, rx1030_pos, 2
    ne $S10, ucs4:"--", rx1030_fail2807
    add rx1030_pos, 2
    nqp_rxpeek $I19, rx1030_bstack, rxcap1032_fail2815
    inc $I19
    set $I11, rx1030_bstack[$I19]
    $P11 = rx1030_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1030_pos)
    rx1030_cstack = rx1030_cur."!cursor_capture"($P11, "sym")
    goto rxcap1032_done2814
  rxcap1032_fail2815:
    goto rx1030_fail2807
  rxcap1032_done2814:
    repr_bind_attr_int rx1030_cur, rx1030_curclass, "$!pos", rx1030_pos
    $P11 = rx1030_cur."O"("%autoincrement, :op<predec>")
    repr_get_attr_int $I11, $P11, rx1030_curclass, "$!pos"
    lt $I11, 0, rx1030_fail2807
    nqp_rxmark rx1030_bstack, rxsubrule1033_pass2816, -1, 0
  rxsubrule1033_pass2816:
    rx1030_cstack = rx1030_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1030_pos, $P11, rx1030_curclass, "$!pos"
    rx1030_cur."!cursor_pass"(rx1030_pos, "prefix:sym<-->", 'backtrack'=>1)
    .return (rx1030_cur)
  rx1030_restart2806:
    repr_get_attr_obj rx1030_cstack, rx1030_cur, rx1030_curclass, "$!cstack"
  rx1030_fail2807:
    unless rx1030_bstack, rx1030_done2805
    pop $I19, rx1030_bstack
    if_null rx1030_cstack, rx1030_cstack_done2810
    unless rx1030_cstack, rx1030_cstack_done2810
    dec $I19
    set $P11, rx1030_cstack[$I19]
  rx1030_cstack_done2810:
    pop rx1030_rep, rx1030_bstack
    pop rx1030_pos, rx1030_bstack
    pop $I19, rx1030_bstack
    lt rx1030_pos, -1, rx1030_done2805
    lt rx1030_pos, 0, rx1030_fail2807
    eq $I19, 0, rx1030_fail2807
    nqp_islist $I20, rx1030_cstack
    unless $I20, rx1030_jump2808
    elements $I18, rx1030_bstack
    le $I18, 0, rx1030_cut2809
    dec $I18
    set $I18, rx1030_bstack[$I18]
  rx1030_cut2809:
    assign rx1030_cstack, $I18
  rx1030_jump2808:
    jump $I19
  rx1030_done2805:
    rx1030_cur."!cursor_fail"()
    .return (rx1030_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_175_1347804164.33_caps" :subid("cuid_memo_285_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_175_1347804164.33_nfa" :subid("cuid_memo_286_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 45
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<++>" :subid("cuid_176_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1281
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1034_tgt
    .local int rx1034_pos
    .local int rx1034_off
    .local int rx1034_eos
    .local int rx1034_rep
    .local pmc rx1034_cur
    .local pmc rx1034_curclass
    .local pmc rx1034_bstack
    .local pmc rx1034_cstack
    (rx1034_cur, rx1034_tgt, rx1034_pos, rx1034_curclass, rx1034_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1034_cur
    length rx1034_eos, rx1034_tgt
    eq $I19, 1, rx1034_restart2819
    gt rx1034_pos, rx1034_eos, rx1034_fail2820
    repr_get_attr_int $I11, self, rx1034_curclass, "$!from"
    ne $I11, -1, rxscan1035_done2826
    goto rxscan1035_scan2825
  rxscan1035_loop2824:
    inc rx1034_pos
    gt rx1034_pos, rx1034_eos, rx1034_fail2820
    repr_bind_attr_int rx1034_cur, rx1034_curclass, "$!from", rx1034_pos
  rxscan1035_scan2825:
    nqp_rxmark rx1034_bstack, rxscan1035_loop2824, rx1034_pos, 0
  rxscan1035_done2826:
    nqp_rxmark rx1034_bstack, rxcap1036_fail2828, rx1034_pos, 0
    add $I11, rx1034_pos, 2
    gt $I11, rx1034_eos, rx1034_fail2820
    substr $S10, rx1034_tgt, rx1034_pos, 2
    ne $S10, ucs4:"++", rx1034_fail2820
    add rx1034_pos, 2
    nqp_rxpeek $I19, rx1034_bstack, rxcap1036_fail2828
    inc $I19
    set $I11, rx1034_bstack[$I19]
    $P11 = rx1034_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1034_pos)
    rx1034_cstack = rx1034_cur."!cursor_capture"($P11, "sym")
    goto rxcap1036_done2827
  rxcap1036_fail2828:
    goto rx1034_fail2820
  rxcap1036_done2827:
    repr_bind_attr_int rx1034_cur, rx1034_curclass, "$!pos", rx1034_pos
    $P11 = rx1034_cur."O"("%autoincrement, :op<postinc>")
    repr_get_attr_int $I11, $P11, rx1034_curclass, "$!pos"
    lt $I11, 0, rx1034_fail2820
    nqp_rxmark rx1034_bstack, rxsubrule1037_pass2829, -1, 0
  rxsubrule1037_pass2829:
    rx1034_cstack = rx1034_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1034_pos, $P11, rx1034_curclass, "$!pos"
    rx1034_cur."!cursor_pass"(rx1034_pos, "postfix:sym<++>", 'backtrack'=>1)
    .return (rx1034_cur)
  rx1034_restart2819:
    repr_get_attr_obj rx1034_cstack, rx1034_cur, rx1034_curclass, "$!cstack"
  rx1034_fail2820:
    unless rx1034_bstack, rx1034_done2818
    pop $I19, rx1034_bstack
    if_null rx1034_cstack, rx1034_cstack_done2823
    unless rx1034_cstack, rx1034_cstack_done2823
    dec $I19
    set $P11, rx1034_cstack[$I19]
  rx1034_cstack_done2823:
    pop rx1034_rep, rx1034_bstack
    pop rx1034_pos, rx1034_bstack
    pop $I19, rx1034_bstack
    lt rx1034_pos, -1, rx1034_done2818
    lt rx1034_pos, 0, rx1034_fail2820
    eq $I19, 0, rx1034_fail2820
    nqp_islist $I20, rx1034_cstack
    unless $I20, rx1034_jump2821
    elements $I18, rx1034_bstack
    le $I18, 0, rx1034_cut2822
    dec $I18
    set $I18, rx1034_bstack[$I18]
  rx1034_cut2822:
    assign rx1034_cstack, $I18
  rx1034_jump2821:
    jump $I19
  rx1034_done2818:
    rx1034_cur."!cursor_fail"()
    .return (rx1034_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_176_1347804164.33_caps" :subid("cuid_memo_287_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_176_1347804164.33_nfa" :subid("cuid_memo_288_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 43
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<-->" :subid("cuid_177_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1282
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1038_tgt
    .local int rx1038_pos
    .local int rx1038_off
    .local int rx1038_eos
    .local int rx1038_rep
    .local pmc rx1038_cur
    .local pmc rx1038_curclass
    .local pmc rx1038_bstack
    .local pmc rx1038_cstack
    (rx1038_cur, rx1038_tgt, rx1038_pos, rx1038_curclass, rx1038_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1038_cur
    length rx1038_eos, rx1038_tgt
    eq $I19, 1, rx1038_restart2832
    gt rx1038_pos, rx1038_eos, rx1038_fail2833
    repr_get_attr_int $I11, self, rx1038_curclass, "$!from"
    ne $I11, -1, rxscan1039_done2839
    goto rxscan1039_scan2838
  rxscan1039_loop2837:
    inc rx1038_pos
    gt rx1038_pos, rx1038_eos, rx1038_fail2833
    repr_bind_attr_int rx1038_cur, rx1038_curclass, "$!from", rx1038_pos
  rxscan1039_scan2838:
    nqp_rxmark rx1038_bstack, rxscan1039_loop2837, rx1038_pos, 0
  rxscan1039_done2839:
    nqp_rxmark rx1038_bstack, rxcap1040_fail2841, rx1038_pos, 0
    add $I11, rx1038_pos, 2
    gt $I11, rx1038_eos, rx1038_fail2833
    substr $S10, rx1038_tgt, rx1038_pos, 2
    ne $S10, ucs4:"--", rx1038_fail2833
    add rx1038_pos, 2
    nqp_rxpeek $I19, rx1038_bstack, rxcap1040_fail2841
    inc $I19
    set $I11, rx1038_bstack[$I19]
    $P11 = rx1038_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1038_pos)
    rx1038_cstack = rx1038_cur."!cursor_capture"($P11, "sym")
    goto rxcap1040_done2840
  rxcap1040_fail2841:
    goto rx1038_fail2833
  rxcap1040_done2840:
    repr_bind_attr_int rx1038_cur, rx1038_curclass, "$!pos", rx1038_pos
    $P11 = rx1038_cur."O"("%autoincrement, :op<postdec>")
    repr_get_attr_int $I11, $P11, rx1038_curclass, "$!pos"
    lt $I11, 0, rx1038_fail2833
    nqp_rxmark rx1038_bstack, rxsubrule1041_pass2842, -1, 0
  rxsubrule1041_pass2842:
    rx1038_cstack = rx1038_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1038_pos, $P11, rx1038_curclass, "$!pos"
    rx1038_cur."!cursor_pass"(rx1038_pos, "postfix:sym<-->", 'backtrack'=>1)
    .return (rx1038_cur)
  rx1038_restart2832:
    repr_get_attr_obj rx1038_cstack, rx1038_cur, rx1038_curclass, "$!cstack"
  rx1038_fail2833:
    unless rx1038_bstack, rx1038_done2831
    pop $I19, rx1038_bstack
    if_null rx1038_cstack, rx1038_cstack_done2836
    unless rx1038_cstack, rx1038_cstack_done2836
    dec $I19
    set $P11, rx1038_cstack[$I19]
  rx1038_cstack_done2836:
    pop rx1038_rep, rx1038_bstack
    pop rx1038_pos, rx1038_bstack
    pop $I19, rx1038_bstack
    lt rx1038_pos, -1, rx1038_done2831
    lt rx1038_pos, 0, rx1038_fail2833
    eq $I19, 0, rx1038_fail2833
    nqp_islist $I20, rx1038_cstack
    unless $I20, rx1038_jump2834
    elements $I18, rx1038_bstack
    le $I18, 0, rx1038_cut2835
    dec $I18
    set $I18, rx1038_bstack[$I18]
  rx1038_cut2835:
    assign rx1038_cstack, $I18
  rx1038_jump2834:
    jump $I19
  rx1038_done2831:
    rx1038_cur."!cursor_fail"()
    .return (rx1038_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_177_1347804164.33_caps" :subid("cuid_memo_289_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_177_1347804164.33_nfa" :subid("cuid_memo_290_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 45
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<**>" :subid("cuid_178_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1284
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1042_tgt
    .local int rx1042_pos
    .local int rx1042_off
    .local int rx1042_eos
    .local int rx1042_rep
    .local pmc rx1042_cur
    .local pmc rx1042_curclass
    .local pmc rx1042_bstack
    .local pmc rx1042_cstack
    (rx1042_cur, rx1042_tgt, rx1042_pos, rx1042_curclass, rx1042_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1042_cur
    length rx1042_eos, rx1042_tgt
    eq $I19, 1, rx1042_restart2845
    gt rx1042_pos, rx1042_eos, rx1042_fail2846
    repr_get_attr_int $I11, self, rx1042_curclass, "$!from"
    ne $I11, -1, rxscan1043_done2852
    goto rxscan1043_scan2851
  rxscan1043_loop2850:
    inc rx1042_pos
    gt rx1042_pos, rx1042_eos, rx1042_fail2846
    repr_bind_attr_int rx1042_cur, rx1042_curclass, "$!from", rx1042_pos
  rxscan1043_scan2851:
    nqp_rxmark rx1042_bstack, rxscan1043_loop2850, rx1042_pos, 0
  rxscan1043_done2852:
    nqp_rxmark rx1042_bstack, rxcap1044_fail2854, rx1042_pos, 0
    add $I11, rx1042_pos, 2
    gt $I11, rx1042_eos, rx1042_fail2846
    substr $S10, rx1042_tgt, rx1042_pos, 2
    ne $S10, ucs4:"**", rx1042_fail2846
    add rx1042_pos, 2
    nqp_rxpeek $I19, rx1042_bstack, rxcap1044_fail2854
    inc $I19
    set $I11, rx1042_bstack[$I19]
    $P11 = rx1042_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1042_pos)
    rx1042_cstack = rx1042_cur."!cursor_capture"($P11, "sym")
    goto rxcap1044_done2853
  rxcap1044_fail2854:
    goto rx1042_fail2846
  rxcap1044_done2853:
    repr_bind_attr_int rx1042_cur, rx1042_curclass, "$!pos", rx1042_pos
    $P11 = rx1042_cur."O"("%exponentiation, :op<pow_n>")
    repr_get_attr_int $I11, $P11, rx1042_curclass, "$!pos"
    lt $I11, 0, rx1042_fail2846
    nqp_rxmark rx1042_bstack, rxsubrule1045_pass2855, -1, 0
  rxsubrule1045_pass2855:
    rx1042_cstack = rx1042_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1042_pos, $P11, rx1042_curclass, "$!pos"
    rx1042_cur."!cursor_pass"(rx1042_pos, "infix:sym<**>", 'backtrack'=>1)
    .return (rx1042_cur)
  rx1042_restart2845:
    repr_get_attr_obj rx1042_cstack, rx1042_cur, rx1042_curclass, "$!cstack"
  rx1042_fail2846:
    unless rx1042_bstack, rx1042_done2844
    pop $I19, rx1042_bstack
    if_null rx1042_cstack, rx1042_cstack_done2849
    unless rx1042_cstack, rx1042_cstack_done2849
    dec $I19
    set $P11, rx1042_cstack[$I19]
  rx1042_cstack_done2849:
    pop rx1042_rep, rx1042_bstack
    pop rx1042_pos, rx1042_bstack
    pop $I19, rx1042_bstack
    lt rx1042_pos, -1, rx1042_done2844
    lt rx1042_pos, 0, rx1042_fail2846
    eq $I19, 0, rx1042_fail2846
    nqp_islist $I20, rx1042_cstack
    unless $I20, rx1042_jump2847
    elements $I18, rx1042_bstack
    le $I18, 0, rx1042_cut2848
    dec $I18
    set $I18, rx1042_bstack[$I18]
  rx1042_cut2848:
    assign rx1042_cstack, $I18
  rx1042_jump2847:
    jump $I19
  rx1042_done2844:
    rx1042_cur."!cursor_fail"()
    .return (rx1042_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_178_1347804164.33_caps" :subid("cuid_memo_291_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_178_1347804164.33_nfa" :subid("cuid_memo_292_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 42
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 42
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<+>" :subid("cuid_179_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1286
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1046_tgt
    .local int rx1046_pos
    .local int rx1046_off
    .local int rx1046_eos
    .local int rx1046_rep
    .local pmc rx1046_cur
    .local pmc rx1046_curclass
    .local pmc rx1046_bstack
    .local pmc rx1046_cstack
    (rx1046_cur, rx1046_tgt, rx1046_pos, rx1046_curclass, rx1046_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1046_cur
    length rx1046_eos, rx1046_tgt
    eq $I19, 1, rx1046_restart2858
    gt rx1046_pos, rx1046_eos, rx1046_fail2859
    repr_get_attr_int $I11, self, rx1046_curclass, "$!from"
    ne $I11, -1, rxscan1047_done2865
    goto rxscan1047_scan2864
  rxscan1047_loop2863:
    inc rx1046_pos
    gt rx1046_pos, rx1046_eos, rx1046_fail2859
    repr_bind_attr_int rx1046_cur, rx1046_curclass, "$!from", rx1046_pos
  rxscan1047_scan2864:
    nqp_rxmark rx1046_bstack, rxscan1047_loop2863, rx1046_pos, 0
  rxscan1047_done2865:
    nqp_rxmark rx1046_bstack, rxcap1048_fail2867, rx1046_pos, 0
    add $I11, rx1046_pos, 1
    gt $I11, rx1046_eos, rx1046_fail2859
    substr $S10, rx1046_tgt, rx1046_pos, 1
    ne $S10, ucs4:"+", rx1046_fail2859
    add rx1046_pos, 1
    nqp_rxpeek $I19, rx1046_bstack, rxcap1048_fail2867
    inc $I19
    set $I11, rx1046_bstack[$I19]
    $P11 = rx1046_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1046_pos)
    rx1046_cstack = rx1046_cur."!cursor_capture"($P11, "sym")
    goto rxcap1048_done2866
  rxcap1048_fail2867:
    goto rx1046_fail2859
  rxcap1048_done2866:
    repr_bind_attr_int rx1046_cur, rx1046_curclass, "$!pos", rx1046_pos
    $P11 = rx1046_cur."O"("%symbolic_unary, :op<numify>")
    repr_get_attr_int $I11, $P11, rx1046_curclass, "$!pos"
    lt $I11, 0, rx1046_fail2859
    nqp_rxmark rx1046_bstack, rxsubrule1049_pass2868, -1, 0
  rxsubrule1049_pass2868:
    rx1046_cstack = rx1046_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1046_pos, $P11, rx1046_curclass, "$!pos"
    rx1046_cur."!cursor_pass"(rx1046_pos, "prefix:sym<+>", 'backtrack'=>1)
    .return (rx1046_cur)
  rx1046_restart2858:
    repr_get_attr_obj rx1046_cstack, rx1046_cur, rx1046_curclass, "$!cstack"
  rx1046_fail2859:
    unless rx1046_bstack, rx1046_done2857
    pop $I19, rx1046_bstack
    if_null rx1046_cstack, rx1046_cstack_done2862
    unless rx1046_cstack, rx1046_cstack_done2862
    dec $I19
    set $P11, rx1046_cstack[$I19]
  rx1046_cstack_done2862:
    pop rx1046_rep, rx1046_bstack
    pop rx1046_pos, rx1046_bstack
    pop $I19, rx1046_bstack
    lt rx1046_pos, -1, rx1046_done2857
    lt rx1046_pos, 0, rx1046_fail2859
    eq $I19, 0, rx1046_fail2859
    nqp_islist $I20, rx1046_cstack
    unless $I20, rx1046_jump2860
    elements $I18, rx1046_bstack
    le $I18, 0, rx1046_cut2861
    dec $I18
    set $I18, rx1046_bstack[$I18]
  rx1046_cut2861:
    assign rx1046_cstack, $I18
  rx1046_jump2860:
    jump $I19
  rx1046_done2857:
    rx1046_cur."!cursor_fail"()
    .return (rx1046_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_179_1347804164.33_caps" :subid("cuid_memo_293_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_179_1347804164.33_nfa" :subid("cuid_memo_294_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<~>" :subid("cuid_180_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1287
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1050_tgt
    .local int rx1050_pos
    .local int rx1050_off
    .local int rx1050_eos
    .local int rx1050_rep
    .local pmc rx1050_cur
    .local pmc rx1050_curclass
    .local pmc rx1050_bstack
    .local pmc rx1050_cstack
    (rx1050_cur, rx1050_tgt, rx1050_pos, rx1050_curclass, rx1050_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1050_cur
    length rx1050_eos, rx1050_tgt
    eq $I19, 1, rx1050_restart2871
    gt rx1050_pos, rx1050_eos, rx1050_fail2872
    repr_get_attr_int $I11, self, rx1050_curclass, "$!from"
    ne $I11, -1, rxscan1051_done2878
    goto rxscan1051_scan2877
  rxscan1051_loop2876:
    inc rx1050_pos
    gt rx1050_pos, rx1050_eos, rx1050_fail2872
    repr_bind_attr_int rx1050_cur, rx1050_curclass, "$!from", rx1050_pos
  rxscan1051_scan2877:
    nqp_rxmark rx1050_bstack, rxscan1051_loop2876, rx1050_pos, 0
  rxscan1051_done2878:
    nqp_rxmark rx1050_bstack, rxcap1052_fail2880, rx1050_pos, 0
    add $I11, rx1050_pos, 1
    gt $I11, rx1050_eos, rx1050_fail2872
    substr $S10, rx1050_tgt, rx1050_pos, 1
    ne $S10, ucs4:"~", rx1050_fail2872
    add rx1050_pos, 1
    nqp_rxpeek $I19, rx1050_bstack, rxcap1052_fail2880
    inc $I19
    set $I11, rx1050_bstack[$I19]
    $P11 = rx1050_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1050_pos)
    rx1050_cstack = rx1050_cur."!cursor_capture"($P11, "sym")
    goto rxcap1052_done2879
  rxcap1052_fail2880:
    goto rx1050_fail2872
  rxcap1052_done2879:
    repr_bind_attr_int rx1050_cur, rx1050_curclass, "$!pos", rx1050_pos
    $P11 = rx1050_cur."O"("%symbolic_unary, :op<stringify>")
    repr_get_attr_int $I11, $P11, rx1050_curclass, "$!pos"
    lt $I11, 0, rx1050_fail2872
    nqp_rxmark rx1050_bstack, rxsubrule1053_pass2881, -1, 0
  rxsubrule1053_pass2881:
    rx1050_cstack = rx1050_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1050_pos, $P11, rx1050_curclass, "$!pos"
    rx1050_cur."!cursor_pass"(rx1050_pos, "prefix:sym<~>", 'backtrack'=>1)
    .return (rx1050_cur)
  rx1050_restart2871:
    repr_get_attr_obj rx1050_cstack, rx1050_cur, rx1050_curclass, "$!cstack"
  rx1050_fail2872:
    unless rx1050_bstack, rx1050_done2870
    pop $I19, rx1050_bstack
    if_null rx1050_cstack, rx1050_cstack_done2875
    unless rx1050_cstack, rx1050_cstack_done2875
    dec $I19
    set $P11, rx1050_cstack[$I19]
  rx1050_cstack_done2875:
    pop rx1050_rep, rx1050_bstack
    pop rx1050_pos, rx1050_bstack
    pop $I19, rx1050_bstack
    lt rx1050_pos, -1, rx1050_done2870
    lt rx1050_pos, 0, rx1050_fail2872
    eq $I19, 0, rx1050_fail2872
    nqp_islist $I20, rx1050_cstack
    unless $I20, rx1050_jump2873
    elements $I18, rx1050_bstack
    le $I18, 0, rx1050_cut2874
    dec $I18
    set $I18, rx1050_bstack[$I18]
  rx1050_cut2874:
    assign rx1050_cstack, $I18
  rx1050_jump2873:
    jump $I19
  rx1050_done2870:
    rx1050_cur."!cursor_fail"()
    .return (rx1050_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_180_1347804164.33_caps" :subid("cuid_memo_295_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_180_1347804164.33_nfa" :subid("cuid_memo_296_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 126
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<->" :subid("cuid_181_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1288
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1054_tgt
    .local int rx1054_pos
    .local int rx1054_off
    .local int rx1054_eos
    .local int rx1054_rep
    .local pmc rx1054_cur
    .local pmc rx1054_curclass
    .local pmc rx1054_bstack
    .local pmc rx1054_cstack
    (rx1054_cur, rx1054_tgt, rx1054_pos, rx1054_curclass, rx1054_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1054_cur
    length rx1054_eos, rx1054_tgt
    eq $I19, 1, rx1054_restart2884
    gt rx1054_pos, rx1054_eos, rx1054_fail2885
    repr_get_attr_int $I11, self, rx1054_curclass, "$!from"
    ne $I11, -1, rxscan1055_done2891
    goto rxscan1055_scan2890
  rxscan1055_loop2889:
    inc rx1054_pos
    gt rx1054_pos, rx1054_eos, rx1054_fail2885
    repr_bind_attr_int rx1054_cur, rx1054_curclass, "$!from", rx1054_pos
  rxscan1055_scan2890:
    nqp_rxmark rx1054_bstack, rxscan1055_loop2889, rx1054_pos, 0
  rxscan1055_done2891:
    nqp_rxmark rx1054_bstack, rxcap1056_fail2893, rx1054_pos, 0
    add $I11, rx1054_pos, 1
    gt $I11, rx1054_eos, rx1054_fail2885
    substr $S10, rx1054_tgt, rx1054_pos, 1
    ne $S10, ucs4:"-", rx1054_fail2885
    add rx1054_pos, 1
    nqp_rxpeek $I19, rx1054_bstack, rxcap1056_fail2893
    inc $I19
    set $I11, rx1054_bstack[$I19]
    $P11 = rx1054_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1054_pos)
    rx1054_cstack = rx1054_cur."!cursor_capture"($P11, "sym")
    goto rxcap1056_done2892
  rxcap1056_fail2893:
    goto rx1054_fail2885
  rxcap1056_done2892:
    ge rx1054_pos, rx1054_eos, rx1054_fail2885
    substr $S11, rx1054_tgt, rx1054_pos, 1
    index $I11, ucs4:">", $S11
    ge $I11, 0, rx1054_fail2885
    repr_bind_attr_int rx1054_cur, rx1054_curclass, "$!pos", rx1054_pos
    $P11 = rx1054_cur."number"()
    repr_get_attr_int $I11, $P11, rx1054_curclass, "$!pos"
    ge $I11, 0, rx1054_fail2885
    repr_bind_attr_int rx1054_cur, rx1054_curclass, "$!pos", rx1054_pos
    $P11 = rx1054_cur."O"("%symbolic_unary, :op<neg_n>")
    repr_get_attr_int $I11, $P11, rx1054_curclass, "$!pos"
    lt $I11, 0, rx1054_fail2885
    nqp_rxmark rx1054_bstack, rxsubrule1057_pass2894, -1, 0
  rxsubrule1057_pass2894:
    rx1054_cstack = rx1054_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1054_pos, $P11, rx1054_curclass, "$!pos"
    rx1054_cur."!cursor_pass"(rx1054_pos, "prefix:sym<->", 'backtrack'=>1)
    .return (rx1054_cur)
  rx1054_restart2884:
    repr_get_attr_obj rx1054_cstack, rx1054_cur, rx1054_curclass, "$!cstack"
  rx1054_fail2885:
    unless rx1054_bstack, rx1054_done2883
    pop $I19, rx1054_bstack
    if_null rx1054_cstack, rx1054_cstack_done2888
    unless rx1054_cstack, rx1054_cstack_done2888
    dec $I19
    set $P11, rx1054_cstack[$I19]
  rx1054_cstack_done2888:
    pop rx1054_rep, rx1054_bstack
    pop rx1054_pos, rx1054_bstack
    pop $I19, rx1054_bstack
    lt rx1054_pos, -1, rx1054_done2883
    lt rx1054_pos, 0, rx1054_fail2885
    eq $I19, 0, rx1054_fail2885
    nqp_islist $I20, rx1054_cstack
    unless $I20, rx1054_jump2886
    elements $I18, rx1054_bstack
    le $I18, 0, rx1054_cut2887
    dec $I18
    set $I18, rx1054_bstack[$I18]
  rx1054_cut2887:
    assign rx1054_cstack, $I18
  rx1054_jump2886:
    jump $I19
  rx1054_done2883:
    rx1054_cur."!cursor_fail"()
    .return (rx1054_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_181_1347804164.33_caps" :subid("cuid_memo_297_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_181_1347804164.33_nfa" :subid("cuid_memo_298_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 7
    push $P5007, $P5008
    box $P5009, ">"
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<?>" :subid("cuid_182_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1289
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1058_tgt
    .local int rx1058_pos
    .local int rx1058_off
    .local int rx1058_eos
    .local int rx1058_rep
    .local pmc rx1058_cur
    .local pmc rx1058_curclass
    .local pmc rx1058_bstack
    .local pmc rx1058_cstack
    (rx1058_cur, rx1058_tgt, rx1058_pos, rx1058_curclass, rx1058_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1058_cur
    length rx1058_eos, rx1058_tgt
    eq $I19, 1, rx1058_restart2897
    gt rx1058_pos, rx1058_eos, rx1058_fail2898
    repr_get_attr_int $I11, self, rx1058_curclass, "$!from"
    ne $I11, -1, rxscan1059_done2904
    goto rxscan1059_scan2903
  rxscan1059_loop2902:
    inc rx1058_pos
    gt rx1058_pos, rx1058_eos, rx1058_fail2898
    repr_bind_attr_int rx1058_cur, rx1058_curclass, "$!from", rx1058_pos
  rxscan1059_scan2903:
    nqp_rxmark rx1058_bstack, rxscan1059_loop2902, rx1058_pos, 0
  rxscan1059_done2904:
    nqp_rxmark rx1058_bstack, rxcap1060_fail2906, rx1058_pos, 0
    add $I11, rx1058_pos, 1
    gt $I11, rx1058_eos, rx1058_fail2898
    substr $S10, rx1058_tgt, rx1058_pos, 1
    ne $S10, ucs4:"?", rx1058_fail2898
    add rx1058_pos, 1
    nqp_rxpeek $I19, rx1058_bstack, rxcap1060_fail2906
    inc $I19
    set $I11, rx1058_bstack[$I19]
    $P11 = rx1058_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1058_pos)
    rx1058_cstack = rx1058_cur."!cursor_capture"($P11, "sym")
    goto rxcap1060_done2905
  rxcap1060_fail2906:
    goto rx1058_fail2898
  rxcap1060_done2905:
    repr_bind_attr_int rx1058_cur, rx1058_curclass, "$!pos", rx1058_pos
    $P11 = rx1058_cur."O"("%symbolic_unary, :op<istrue>")
    repr_get_attr_int $I11, $P11, rx1058_curclass, "$!pos"
    lt $I11, 0, rx1058_fail2898
    nqp_rxmark rx1058_bstack, rxsubrule1061_pass2907, -1, 0
  rxsubrule1061_pass2907:
    rx1058_cstack = rx1058_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1058_pos, $P11, rx1058_curclass, "$!pos"
    rx1058_cur."!cursor_pass"(rx1058_pos, "prefix:sym<?>", 'backtrack'=>1)
    .return (rx1058_cur)
  rx1058_restart2897:
    repr_get_attr_obj rx1058_cstack, rx1058_cur, rx1058_curclass, "$!cstack"
  rx1058_fail2898:
    unless rx1058_bstack, rx1058_done2896
    pop $I19, rx1058_bstack
    if_null rx1058_cstack, rx1058_cstack_done2901
    unless rx1058_cstack, rx1058_cstack_done2901
    dec $I19
    set $P11, rx1058_cstack[$I19]
  rx1058_cstack_done2901:
    pop rx1058_rep, rx1058_bstack
    pop rx1058_pos, rx1058_bstack
    pop $I19, rx1058_bstack
    lt rx1058_pos, -1, rx1058_done2896
    lt rx1058_pos, 0, rx1058_fail2898
    eq $I19, 0, rx1058_fail2898
    nqp_islist $I20, rx1058_cstack
    unless $I20, rx1058_jump2899
    elements $I18, rx1058_bstack
    le $I18, 0, rx1058_cut2900
    dec $I18
    set $I18, rx1058_bstack[$I18]
  rx1058_cut2900:
    assign rx1058_cstack, $I18
  rx1058_jump2899:
    jump $I19
  rx1058_done2896:
    rx1058_cur."!cursor_fail"()
    .return (rx1058_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_182_1347804164.33_caps" :subid("cuid_memo_299_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_182_1347804164.33_nfa" :subid("cuid_memo_300_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 63
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<!>" :subid("cuid_183_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1290
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1062_tgt
    .local int rx1062_pos
    .local int rx1062_off
    .local int rx1062_eos
    .local int rx1062_rep
    .local pmc rx1062_cur
    .local pmc rx1062_curclass
    .local pmc rx1062_bstack
    .local pmc rx1062_cstack
    (rx1062_cur, rx1062_tgt, rx1062_pos, rx1062_curclass, rx1062_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1062_cur
    length rx1062_eos, rx1062_tgt
    eq $I19, 1, rx1062_restart2910
    gt rx1062_pos, rx1062_eos, rx1062_fail2911
    repr_get_attr_int $I11, self, rx1062_curclass, "$!from"
    ne $I11, -1, rxscan1063_done2917
    goto rxscan1063_scan2916
  rxscan1063_loop2915:
    inc rx1062_pos
    gt rx1062_pos, rx1062_eos, rx1062_fail2911
    repr_bind_attr_int rx1062_cur, rx1062_curclass, "$!from", rx1062_pos
  rxscan1063_scan2916:
    nqp_rxmark rx1062_bstack, rxscan1063_loop2915, rx1062_pos, 0
  rxscan1063_done2917:
    nqp_rxmark rx1062_bstack, rxcap1064_fail2919, rx1062_pos, 0
    add $I11, rx1062_pos, 1
    gt $I11, rx1062_eos, rx1062_fail2911
    substr $S10, rx1062_tgt, rx1062_pos, 1
    ne $S10, ucs4:"!", rx1062_fail2911
    add rx1062_pos, 1
    nqp_rxpeek $I19, rx1062_bstack, rxcap1064_fail2919
    inc $I19
    set $I11, rx1062_bstack[$I19]
    $P11 = rx1062_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1062_pos)
    rx1062_cstack = rx1062_cur."!cursor_capture"($P11, "sym")
    goto rxcap1064_done2918
  rxcap1064_fail2919:
    goto rx1062_fail2911
  rxcap1064_done2918:
    repr_bind_attr_int rx1062_cur, rx1062_curclass, "$!pos", rx1062_pos
    $P11 = rx1062_cur."O"("%symbolic_unary, :op<isfalse>")
    repr_get_attr_int $I11, $P11, rx1062_curclass, "$!pos"
    lt $I11, 0, rx1062_fail2911
    nqp_rxmark rx1062_bstack, rxsubrule1065_pass2920, -1, 0
  rxsubrule1065_pass2920:
    rx1062_cstack = rx1062_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1062_pos, $P11, rx1062_curclass, "$!pos"
    rx1062_cur."!cursor_pass"(rx1062_pos, "prefix:sym<!>", 'backtrack'=>1)
    .return (rx1062_cur)
  rx1062_restart2910:
    repr_get_attr_obj rx1062_cstack, rx1062_cur, rx1062_curclass, "$!cstack"
  rx1062_fail2911:
    unless rx1062_bstack, rx1062_done2909
    pop $I19, rx1062_bstack
    if_null rx1062_cstack, rx1062_cstack_done2914
    unless rx1062_cstack, rx1062_cstack_done2914
    dec $I19
    set $P11, rx1062_cstack[$I19]
  rx1062_cstack_done2914:
    pop rx1062_rep, rx1062_bstack
    pop rx1062_pos, rx1062_bstack
    pop $I19, rx1062_bstack
    lt rx1062_pos, -1, rx1062_done2909
    lt rx1062_pos, 0, rx1062_fail2911
    eq $I19, 0, rx1062_fail2911
    nqp_islist $I20, rx1062_cstack
    unless $I20, rx1062_jump2912
    elements $I18, rx1062_bstack
    le $I18, 0, rx1062_cut2913
    dec $I18
    set $I18, rx1062_bstack[$I18]
  rx1062_cut2913:
    assign rx1062_cstack, $I18
  rx1062_jump2912:
    jump $I19
  rx1062_done2909:
    rx1062_cur."!cursor_fail"()
    .return (rx1062_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_183_1347804164.33_caps" :subid("cuid_memo_301_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_183_1347804164.33_nfa" :subid("cuid_memo_302_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 33
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<|>" :subid("cuid_184_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1291
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1066_tgt
    .local int rx1066_pos
    .local int rx1066_off
    .local int rx1066_eos
    .local int rx1066_rep
    .local pmc rx1066_cur
    .local pmc rx1066_curclass
    .local pmc rx1066_bstack
    .local pmc rx1066_cstack
    (rx1066_cur, rx1066_tgt, rx1066_pos, rx1066_curclass, rx1066_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1066_cur
    length rx1066_eos, rx1066_tgt
    eq $I19, 1, rx1066_restart2923
    gt rx1066_pos, rx1066_eos, rx1066_fail2924
    repr_get_attr_int $I11, self, rx1066_curclass, "$!from"
    ne $I11, -1, rxscan1067_done2930
    goto rxscan1067_scan2929
  rxscan1067_loop2928:
    inc rx1066_pos
    gt rx1066_pos, rx1066_eos, rx1066_fail2924
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!from", rx1066_pos
  rxscan1067_scan2929:
    nqp_rxmark rx1066_bstack, rxscan1067_loop2928, rx1066_pos, 0
  rxscan1067_done2930:
    nqp_rxmark rx1066_bstack, rxcap1068_fail2932, rx1066_pos, 0
    add $I11, rx1066_pos, 1
    gt $I11, rx1066_eos, rx1066_fail2924
    substr $S10, rx1066_tgt, rx1066_pos, 1
    ne $S10, ucs4:"|", rx1066_fail2924
    add rx1066_pos, 1
    nqp_rxpeek $I19, rx1066_bstack, rxcap1068_fail2932
    inc $I19
    set $I11, rx1066_bstack[$I19]
    $P11 = rx1066_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1066_pos)
    rx1066_cstack = rx1066_cur."!cursor_capture"($P11, "sym")
    goto rxcap1068_done2931
  rxcap1068_fail2932:
    goto rx1066_fail2924
  rxcap1068_done2931:
    repr_bind_attr_int rx1066_cur, rx1066_curclass, "$!pos", rx1066_pos
    $P11 = rx1066_cur."O"("%symbolic_unary")
    repr_get_attr_int $I11, $P11, rx1066_curclass, "$!pos"
    lt $I11, 0, rx1066_fail2924
    nqp_rxmark rx1066_bstack, rxsubrule1069_pass2933, -1, 0
  rxsubrule1069_pass2933:
    rx1066_cstack = rx1066_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1066_pos, $P11, rx1066_curclass, "$!pos"
    rx1066_cur."!cursor_pass"(rx1066_pos, "prefix:sym<|>", 'backtrack'=>1)
    .return (rx1066_cur)
  rx1066_restart2923:
    repr_get_attr_obj rx1066_cstack, rx1066_cur, rx1066_curclass, "$!cstack"
  rx1066_fail2924:
    unless rx1066_bstack, rx1066_done2922
    pop $I19, rx1066_bstack
    if_null rx1066_cstack, rx1066_cstack_done2927
    unless rx1066_cstack, rx1066_cstack_done2927
    dec $I19
    set $P11, rx1066_cstack[$I19]
  rx1066_cstack_done2927:
    pop rx1066_rep, rx1066_bstack
    pop rx1066_pos, rx1066_bstack
    pop $I19, rx1066_bstack
    lt rx1066_pos, -1, rx1066_done2922
    lt rx1066_pos, 0, rx1066_fail2924
    eq $I19, 0, rx1066_fail2924
    nqp_islist $I20, rx1066_cstack
    unless $I20, rx1066_jump2925
    elements $I18, rx1066_bstack
    le $I18, 0, rx1066_cut2926
    dec $I18
    set $I18, rx1066_bstack[$I18]
  rx1066_cut2926:
    assign rx1066_cstack, $I18
  rx1066_jump2925:
    jump $I19
  rx1066_done2922:
    rx1066_cur."!cursor_fail"()
    .return (rx1066_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_184_1347804164.33_caps" :subid("cuid_memo_303_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_184_1347804164.33_nfa" :subid("cuid_memo_304_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 124
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<*>" :subid("cuid_185_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1293
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1070_tgt
    .local int rx1070_pos
    .local int rx1070_off
    .local int rx1070_eos
    .local int rx1070_rep
    .local pmc rx1070_cur
    .local pmc rx1070_curclass
    .local pmc rx1070_bstack
    .local pmc rx1070_cstack
    (rx1070_cur, rx1070_tgt, rx1070_pos, rx1070_curclass, rx1070_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1070_cur
    length rx1070_eos, rx1070_tgt
    eq $I19, 1, rx1070_restart2936
    gt rx1070_pos, rx1070_eos, rx1070_fail2937
    repr_get_attr_int $I11, self, rx1070_curclass, "$!from"
    ne $I11, -1, rxscan1071_done2943
    goto rxscan1071_scan2942
  rxscan1071_loop2941:
    inc rx1070_pos
    gt rx1070_pos, rx1070_eos, rx1070_fail2937
    repr_bind_attr_int rx1070_cur, rx1070_curclass, "$!from", rx1070_pos
  rxscan1071_scan2942:
    nqp_rxmark rx1070_bstack, rxscan1071_loop2941, rx1070_pos, 0
  rxscan1071_done2943:
    nqp_rxmark rx1070_bstack, rxcap1072_fail2945, rx1070_pos, 0
    add $I11, rx1070_pos, 1
    gt $I11, rx1070_eos, rx1070_fail2937
    substr $S10, rx1070_tgt, rx1070_pos, 1
    ne $S10, ucs4:"*", rx1070_fail2937
    add rx1070_pos, 1
    nqp_rxpeek $I19, rx1070_bstack, rxcap1072_fail2945
    inc $I19
    set $I11, rx1070_bstack[$I19]
    $P11 = rx1070_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1070_pos)
    rx1070_cstack = rx1070_cur."!cursor_capture"($P11, "sym")
    goto rxcap1072_done2944
  rxcap1072_fail2945:
    goto rx1070_fail2937
  rxcap1072_done2944:
    repr_bind_attr_int rx1070_cur, rx1070_curclass, "$!pos", rx1070_pos
    $P11 = rx1070_cur."O"("%multiplicative, :op<mul_n>")
    repr_get_attr_int $I11, $P11, rx1070_curclass, "$!pos"
    lt $I11, 0, rx1070_fail2937
    nqp_rxmark rx1070_bstack, rxsubrule1073_pass2946, -1, 0
  rxsubrule1073_pass2946:
    rx1070_cstack = rx1070_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1070_pos, $P11, rx1070_curclass, "$!pos"
    rx1070_cur."!cursor_pass"(rx1070_pos, "infix:sym<*>", 'backtrack'=>1)
    .return (rx1070_cur)
  rx1070_restart2936:
    repr_get_attr_obj rx1070_cstack, rx1070_cur, rx1070_curclass, "$!cstack"
  rx1070_fail2937:
    unless rx1070_bstack, rx1070_done2935
    pop $I19, rx1070_bstack
    if_null rx1070_cstack, rx1070_cstack_done2940
    unless rx1070_cstack, rx1070_cstack_done2940
    dec $I19
    set $P11, rx1070_cstack[$I19]
  rx1070_cstack_done2940:
    pop rx1070_rep, rx1070_bstack
    pop rx1070_pos, rx1070_bstack
    pop $I19, rx1070_bstack
    lt rx1070_pos, -1, rx1070_done2935
    lt rx1070_pos, 0, rx1070_fail2937
    eq $I19, 0, rx1070_fail2937
    nqp_islist $I20, rx1070_cstack
    unless $I20, rx1070_jump2938
    elements $I18, rx1070_bstack
    le $I18, 0, rx1070_cut2939
    dec $I18
    set $I18, rx1070_bstack[$I18]
  rx1070_cut2939:
    assign rx1070_cstack, $I18
  rx1070_jump2938:
    jump $I19
  rx1070_done2935:
    rx1070_cur."!cursor_fail"()
    .return (rx1070_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_185_1347804164.33_caps" :subid("cuid_memo_305_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_185_1347804164.33_nfa" :subid("cuid_memo_306_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 42
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym</>" :subid("cuid_186_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1294
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1074_tgt
    .local int rx1074_pos
    .local int rx1074_off
    .local int rx1074_eos
    .local int rx1074_rep
    .local pmc rx1074_cur
    .local pmc rx1074_curclass
    .local pmc rx1074_bstack
    .local pmc rx1074_cstack
    (rx1074_cur, rx1074_tgt, rx1074_pos, rx1074_curclass, rx1074_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1074_cur
    length rx1074_eos, rx1074_tgt
    eq $I19, 1, rx1074_restart2949
    gt rx1074_pos, rx1074_eos, rx1074_fail2950
    repr_get_attr_int $I11, self, rx1074_curclass, "$!from"
    ne $I11, -1, rxscan1075_done2956
    goto rxscan1075_scan2955
  rxscan1075_loop2954:
    inc rx1074_pos
    gt rx1074_pos, rx1074_eos, rx1074_fail2950
    repr_bind_attr_int rx1074_cur, rx1074_curclass, "$!from", rx1074_pos
  rxscan1075_scan2955:
    nqp_rxmark rx1074_bstack, rxscan1075_loop2954, rx1074_pos, 0
  rxscan1075_done2956:
    nqp_rxmark rx1074_bstack, rxcap1076_fail2958, rx1074_pos, 0
    add $I11, rx1074_pos, 1
    gt $I11, rx1074_eos, rx1074_fail2950
    substr $S10, rx1074_tgt, rx1074_pos, 1
    ne $S10, ucs4:"/", rx1074_fail2950
    add rx1074_pos, 1
    nqp_rxpeek $I19, rx1074_bstack, rxcap1076_fail2958
    inc $I19
    set $I11, rx1074_bstack[$I19]
    $P11 = rx1074_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1074_pos)
    rx1074_cstack = rx1074_cur."!cursor_capture"($P11, "sym")
    goto rxcap1076_done2957
  rxcap1076_fail2958:
    goto rx1074_fail2950
  rxcap1076_done2957:
    repr_bind_attr_int rx1074_cur, rx1074_curclass, "$!pos", rx1074_pos
    $P11 = rx1074_cur."O"("%multiplicative, :op<div_n>")
    repr_get_attr_int $I11, $P11, rx1074_curclass, "$!pos"
    lt $I11, 0, rx1074_fail2950
    nqp_rxmark rx1074_bstack, rxsubrule1077_pass2959, -1, 0
  rxsubrule1077_pass2959:
    rx1074_cstack = rx1074_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1074_pos, $P11, rx1074_curclass, "$!pos"
    rx1074_cur."!cursor_pass"(rx1074_pos, "infix:sym</>", 'backtrack'=>1)
    .return (rx1074_cur)
  rx1074_restart2949:
    repr_get_attr_obj rx1074_cstack, rx1074_cur, rx1074_curclass, "$!cstack"
  rx1074_fail2950:
    unless rx1074_bstack, rx1074_done2948
    pop $I19, rx1074_bstack
    if_null rx1074_cstack, rx1074_cstack_done2953
    unless rx1074_cstack, rx1074_cstack_done2953
    dec $I19
    set $P11, rx1074_cstack[$I19]
  rx1074_cstack_done2953:
    pop rx1074_rep, rx1074_bstack
    pop rx1074_pos, rx1074_bstack
    pop $I19, rx1074_bstack
    lt rx1074_pos, -1, rx1074_done2948
    lt rx1074_pos, 0, rx1074_fail2950
    eq $I19, 0, rx1074_fail2950
    nqp_islist $I20, rx1074_cstack
    unless $I20, rx1074_jump2951
    elements $I18, rx1074_bstack
    le $I18, 0, rx1074_cut2952
    dec $I18
    set $I18, rx1074_bstack[$I18]
  rx1074_cut2952:
    assign rx1074_cstack, $I18
  rx1074_jump2951:
    jump $I19
  rx1074_done2948:
    rx1074_cur."!cursor_fail"()
    .return (rx1074_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_186_1347804164.33_caps" :subid("cuid_memo_307_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_186_1347804164.33_nfa" :subid("cuid_memo_308_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 47
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<%>" :subid("cuid_187_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1295
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1078_tgt
    .local int rx1078_pos
    .local int rx1078_off
    .local int rx1078_eos
    .local int rx1078_rep
    .local pmc rx1078_cur
    .local pmc rx1078_curclass
    .local pmc rx1078_bstack
    .local pmc rx1078_cstack
    (rx1078_cur, rx1078_tgt, rx1078_pos, rx1078_curclass, rx1078_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1078_cur
    length rx1078_eos, rx1078_tgt
    eq $I19, 1, rx1078_restart2962
    gt rx1078_pos, rx1078_eos, rx1078_fail2963
    repr_get_attr_int $I11, self, rx1078_curclass, "$!from"
    ne $I11, -1, rxscan1079_done2969
    goto rxscan1079_scan2968
  rxscan1079_loop2967:
    inc rx1078_pos
    gt rx1078_pos, rx1078_eos, rx1078_fail2963
    repr_bind_attr_int rx1078_cur, rx1078_curclass, "$!from", rx1078_pos
  rxscan1079_scan2968:
    nqp_rxmark rx1078_bstack, rxscan1079_loop2967, rx1078_pos, 0
  rxscan1079_done2969:
    nqp_rxmark rx1078_bstack, rxcap1080_fail2971, rx1078_pos, 0
    add $I11, rx1078_pos, 1
    gt $I11, rx1078_eos, rx1078_fail2963
    substr $S10, rx1078_tgt, rx1078_pos, 1
    ne $S10, ucs4:"%", rx1078_fail2963
    add rx1078_pos, 1
    nqp_rxpeek $I19, rx1078_bstack, rxcap1080_fail2971
    inc $I19
    set $I11, rx1078_bstack[$I19]
    $P11 = rx1078_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1078_pos)
    rx1078_cstack = rx1078_cur."!cursor_capture"($P11, "sym")
    goto rxcap1080_done2970
  rxcap1080_fail2971:
    goto rx1078_fail2963
  rxcap1080_done2970:
    repr_bind_attr_int rx1078_cur, rx1078_curclass, "$!pos", rx1078_pos
    $P11 = rx1078_cur."O"("%multiplicative, :op<mod_n>")
    repr_get_attr_int $I11, $P11, rx1078_curclass, "$!pos"
    lt $I11, 0, rx1078_fail2963
    nqp_rxmark rx1078_bstack, rxsubrule1081_pass2972, -1, 0
  rxsubrule1081_pass2972:
    rx1078_cstack = rx1078_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1078_pos, $P11, rx1078_curclass, "$!pos"
    rx1078_cur."!cursor_pass"(rx1078_pos, "infix:sym<%>", 'backtrack'=>1)
    .return (rx1078_cur)
  rx1078_restart2962:
    repr_get_attr_obj rx1078_cstack, rx1078_cur, rx1078_curclass, "$!cstack"
  rx1078_fail2963:
    unless rx1078_bstack, rx1078_done2961
    pop $I19, rx1078_bstack
    if_null rx1078_cstack, rx1078_cstack_done2966
    unless rx1078_cstack, rx1078_cstack_done2966
    dec $I19
    set $P11, rx1078_cstack[$I19]
  rx1078_cstack_done2966:
    pop rx1078_rep, rx1078_bstack
    pop rx1078_pos, rx1078_bstack
    pop $I19, rx1078_bstack
    lt rx1078_pos, -1, rx1078_done2961
    lt rx1078_pos, 0, rx1078_fail2963
    eq $I19, 0, rx1078_fail2963
    nqp_islist $I20, rx1078_cstack
    unless $I20, rx1078_jump2964
    elements $I18, rx1078_bstack
    le $I18, 0, rx1078_cut2965
    dec $I18
    set $I18, rx1078_bstack[$I18]
  rx1078_cut2965:
    assign rx1078_cstack, $I18
  rx1078_jump2964:
    jump $I19
  rx1078_done2961:
    rx1078_cur."!cursor_fail"()
    .return (rx1078_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_187_1347804164.33_caps" :subid("cuid_memo_309_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_187_1347804164.33_nfa" :subid("cuid_memo_310_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 37
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+&>" :subid("cuid_188_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1296
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1082_tgt
    .local int rx1082_pos
    .local int rx1082_off
    .local int rx1082_eos
    .local int rx1082_rep
    .local pmc rx1082_cur
    .local pmc rx1082_curclass
    .local pmc rx1082_bstack
    .local pmc rx1082_cstack
    (rx1082_cur, rx1082_tgt, rx1082_pos, rx1082_curclass, rx1082_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1082_cur
    length rx1082_eos, rx1082_tgt
    eq $I19, 1, rx1082_restart2975
    gt rx1082_pos, rx1082_eos, rx1082_fail2976
    repr_get_attr_int $I11, self, rx1082_curclass, "$!from"
    ne $I11, -1, rxscan1083_done2982
    goto rxscan1083_scan2981
  rxscan1083_loop2980:
    inc rx1082_pos
    gt rx1082_pos, rx1082_eos, rx1082_fail2976
    repr_bind_attr_int rx1082_cur, rx1082_curclass, "$!from", rx1082_pos
  rxscan1083_scan2981:
    nqp_rxmark rx1082_bstack, rxscan1083_loop2980, rx1082_pos, 0
  rxscan1083_done2982:
    nqp_rxmark rx1082_bstack, rxcap1084_fail2984, rx1082_pos, 0
    add $I11, rx1082_pos, 2
    gt $I11, rx1082_eos, rx1082_fail2976
    substr $S10, rx1082_tgt, rx1082_pos, 2
    ne $S10, ucs4:"+&", rx1082_fail2976
    add rx1082_pos, 2
    nqp_rxpeek $I19, rx1082_bstack, rxcap1084_fail2984
    inc $I19
    set $I11, rx1082_bstack[$I19]
    $P11 = rx1082_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1082_pos)
    rx1082_cstack = rx1082_cur."!cursor_capture"($P11, "sym")
    goto rxcap1084_done2983
  rxcap1084_fail2984:
    goto rx1082_fail2976
  rxcap1084_done2983:
    repr_bind_attr_int rx1082_cur, rx1082_curclass, "$!pos", rx1082_pos
    $P11 = rx1082_cur."O"("%multiplicative, :op<bitand_i>")
    repr_get_attr_int $I11, $P11, rx1082_curclass, "$!pos"
    lt $I11, 0, rx1082_fail2976
    nqp_rxmark rx1082_bstack, rxsubrule1085_pass2985, -1, 0
  rxsubrule1085_pass2985:
    rx1082_cstack = rx1082_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1082_pos, $P11, rx1082_curclass, "$!pos"
    rx1082_cur."!cursor_pass"(rx1082_pos, "infix:sym<+&>", 'backtrack'=>1)
    .return (rx1082_cur)
  rx1082_restart2975:
    repr_get_attr_obj rx1082_cstack, rx1082_cur, rx1082_curclass, "$!cstack"
  rx1082_fail2976:
    unless rx1082_bstack, rx1082_done2974
    pop $I19, rx1082_bstack
    if_null rx1082_cstack, rx1082_cstack_done2979
    unless rx1082_cstack, rx1082_cstack_done2979
    dec $I19
    set $P11, rx1082_cstack[$I19]
  rx1082_cstack_done2979:
    pop rx1082_rep, rx1082_bstack
    pop rx1082_pos, rx1082_bstack
    pop $I19, rx1082_bstack
    lt rx1082_pos, -1, rx1082_done2974
    lt rx1082_pos, 0, rx1082_fail2976
    eq $I19, 0, rx1082_fail2976
    nqp_islist $I20, rx1082_cstack
    unless $I20, rx1082_jump2977
    elements $I18, rx1082_bstack
    le $I18, 0, rx1082_cut2978
    dec $I18
    set $I18, rx1082_bstack[$I18]
  rx1082_cut2978:
    assign rx1082_cstack, $I18
  rx1082_jump2977:
    jump $I19
  rx1082_done2974:
    rx1082_cur."!cursor_fail"()
    .return (rx1082_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_188_1347804164.33_caps" :subid("cuid_memo_311_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_188_1347804164.33_nfa" :subid("cuid_memo_312_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 38
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+>" :subid("cuid_189_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1298
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1086_tgt
    .local int rx1086_pos
    .local int rx1086_off
    .local int rx1086_eos
    .local int rx1086_rep
    .local pmc rx1086_cur
    .local pmc rx1086_curclass
    .local pmc rx1086_bstack
    .local pmc rx1086_cstack
    (rx1086_cur, rx1086_tgt, rx1086_pos, rx1086_curclass, rx1086_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1086_cur
    length rx1086_eos, rx1086_tgt
    eq $I19, 1, rx1086_restart2988
    gt rx1086_pos, rx1086_eos, rx1086_fail2989
    repr_get_attr_int $I11, self, rx1086_curclass, "$!from"
    ne $I11, -1, rxscan1087_done2995
    goto rxscan1087_scan2994
  rxscan1087_loop2993:
    inc rx1086_pos
    gt rx1086_pos, rx1086_eos, rx1086_fail2989
    repr_bind_attr_int rx1086_cur, rx1086_curclass, "$!from", rx1086_pos
  rxscan1087_scan2994:
    nqp_rxmark rx1086_bstack, rxscan1087_loop2993, rx1086_pos, 0
  rxscan1087_done2995:
    nqp_rxmark rx1086_bstack, rxcap1088_fail2997, rx1086_pos, 0
    add $I11, rx1086_pos, 1
    gt $I11, rx1086_eos, rx1086_fail2989
    substr $S10, rx1086_tgt, rx1086_pos, 1
    ne $S10, ucs4:"+", rx1086_fail2989
    add rx1086_pos, 1
    nqp_rxpeek $I19, rx1086_bstack, rxcap1088_fail2997
    inc $I19
    set $I11, rx1086_bstack[$I19]
    $P11 = rx1086_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1086_pos)
    rx1086_cstack = rx1086_cur."!cursor_capture"($P11, "sym")
    goto rxcap1088_done2996
  rxcap1088_fail2997:
    goto rx1086_fail2989
  rxcap1088_done2996:
    repr_bind_attr_int rx1086_cur, rx1086_curclass, "$!pos", rx1086_pos
    $P11 = rx1086_cur."O"("%additive, :op<add_n>")
    repr_get_attr_int $I11, $P11, rx1086_curclass, "$!pos"
    lt $I11, 0, rx1086_fail2989
    nqp_rxmark rx1086_bstack, rxsubrule1089_pass2998, -1, 0
  rxsubrule1089_pass2998:
    rx1086_cstack = rx1086_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1086_pos, $P11, rx1086_curclass, "$!pos"
    rx1086_cur."!cursor_pass"(rx1086_pos, "infix:sym<+>", 'backtrack'=>1)
    .return (rx1086_cur)
  rx1086_restart2988:
    repr_get_attr_obj rx1086_cstack, rx1086_cur, rx1086_curclass, "$!cstack"
  rx1086_fail2989:
    unless rx1086_bstack, rx1086_done2987
    pop $I19, rx1086_bstack
    if_null rx1086_cstack, rx1086_cstack_done2992
    unless rx1086_cstack, rx1086_cstack_done2992
    dec $I19
    set $P11, rx1086_cstack[$I19]
  rx1086_cstack_done2992:
    pop rx1086_rep, rx1086_bstack
    pop rx1086_pos, rx1086_bstack
    pop $I19, rx1086_bstack
    lt rx1086_pos, -1, rx1086_done2987
    lt rx1086_pos, 0, rx1086_fail2989
    eq $I19, 0, rx1086_fail2989
    nqp_islist $I20, rx1086_cstack
    unless $I20, rx1086_jump2990
    elements $I18, rx1086_bstack
    le $I18, 0, rx1086_cut2991
    dec $I18
    set $I18, rx1086_bstack[$I18]
  rx1086_cut2991:
    assign rx1086_cstack, $I18
  rx1086_jump2990:
    jump $I19
  rx1086_done2987:
    rx1086_cur."!cursor_fail"()
    .return (rx1086_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_189_1347804164.33_caps" :subid("cuid_memo_313_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_189_1347804164.33_nfa" :subid("cuid_memo_314_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<->" :subid("cuid_190_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1299
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1090_tgt
    .local int rx1090_pos
    .local int rx1090_off
    .local int rx1090_eos
    .local int rx1090_rep
    .local pmc rx1090_cur
    .local pmc rx1090_curclass
    .local pmc rx1090_bstack
    .local pmc rx1090_cstack
    (rx1090_cur, rx1090_tgt, rx1090_pos, rx1090_curclass, rx1090_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1090_cur
    length rx1090_eos, rx1090_tgt
    eq $I19, 1, rx1090_restart3001
    gt rx1090_pos, rx1090_eos, rx1090_fail3002
    repr_get_attr_int $I11, self, rx1090_curclass, "$!from"
    ne $I11, -1, rxscan1091_done3008
    goto rxscan1091_scan3007
  rxscan1091_loop3006:
    inc rx1090_pos
    gt rx1090_pos, rx1090_eos, rx1090_fail3002
    repr_bind_attr_int rx1090_cur, rx1090_curclass, "$!from", rx1090_pos
  rxscan1091_scan3007:
    nqp_rxmark rx1090_bstack, rxscan1091_loop3006, rx1090_pos, 0
  rxscan1091_done3008:
    nqp_rxmark rx1090_bstack, rxcap1092_fail3010, rx1090_pos, 0
    add $I11, rx1090_pos, 1
    gt $I11, rx1090_eos, rx1090_fail3002
    substr $S10, rx1090_tgt, rx1090_pos, 1
    ne $S10, ucs4:"-", rx1090_fail3002
    add rx1090_pos, 1
    nqp_rxpeek $I19, rx1090_bstack, rxcap1092_fail3010
    inc $I19
    set $I11, rx1090_bstack[$I19]
    $P11 = rx1090_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1090_pos)
    rx1090_cstack = rx1090_cur."!cursor_capture"($P11, "sym")
    goto rxcap1092_done3009
  rxcap1092_fail3010:
    goto rx1090_fail3002
  rxcap1092_done3009:
    repr_bind_attr_int rx1090_cur, rx1090_curclass, "$!pos", rx1090_pos
    $P11 = rx1090_cur."O"("%additive, :op<sub_n>")
    repr_get_attr_int $I11, $P11, rx1090_curclass, "$!pos"
    lt $I11, 0, rx1090_fail3002
    nqp_rxmark rx1090_bstack, rxsubrule1093_pass3011, -1, 0
  rxsubrule1093_pass3011:
    rx1090_cstack = rx1090_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1090_pos, $P11, rx1090_curclass, "$!pos"
    rx1090_cur."!cursor_pass"(rx1090_pos, "infix:sym<->", 'backtrack'=>1)
    .return (rx1090_cur)
  rx1090_restart3001:
    repr_get_attr_obj rx1090_cstack, rx1090_cur, rx1090_curclass, "$!cstack"
  rx1090_fail3002:
    unless rx1090_bstack, rx1090_done3000
    pop $I19, rx1090_bstack
    if_null rx1090_cstack, rx1090_cstack_done3005
    unless rx1090_cstack, rx1090_cstack_done3005
    dec $I19
    set $P11, rx1090_cstack[$I19]
  rx1090_cstack_done3005:
    pop rx1090_rep, rx1090_bstack
    pop rx1090_pos, rx1090_bstack
    pop $I19, rx1090_bstack
    lt rx1090_pos, -1, rx1090_done3000
    lt rx1090_pos, 0, rx1090_fail3002
    eq $I19, 0, rx1090_fail3002
    nqp_islist $I20, rx1090_cstack
    unless $I20, rx1090_jump3003
    elements $I18, rx1090_bstack
    le $I18, 0, rx1090_cut3004
    dec $I18
    set $I18, rx1090_bstack[$I18]
  rx1090_cut3004:
    assign rx1090_cstack, $I18
  rx1090_jump3003:
    jump $I19
  rx1090_done3000:
    rx1090_cur."!cursor_fail"()
    .return (rx1090_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_190_1347804164.33_caps" :subid("cuid_memo_315_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_190_1347804164.33_nfa" :subid("cuid_memo_316_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 45
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+|>" :subid("cuid_191_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1300
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1094_tgt
    .local int rx1094_pos
    .local int rx1094_off
    .local int rx1094_eos
    .local int rx1094_rep
    .local pmc rx1094_cur
    .local pmc rx1094_curclass
    .local pmc rx1094_bstack
    .local pmc rx1094_cstack
    (rx1094_cur, rx1094_tgt, rx1094_pos, rx1094_curclass, rx1094_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1094_cur
    length rx1094_eos, rx1094_tgt
    eq $I19, 1, rx1094_restart3014
    gt rx1094_pos, rx1094_eos, rx1094_fail3015
    repr_get_attr_int $I11, self, rx1094_curclass, "$!from"
    ne $I11, -1, rxscan1095_done3021
    goto rxscan1095_scan3020
  rxscan1095_loop3019:
    inc rx1094_pos
    gt rx1094_pos, rx1094_eos, rx1094_fail3015
    repr_bind_attr_int rx1094_cur, rx1094_curclass, "$!from", rx1094_pos
  rxscan1095_scan3020:
    nqp_rxmark rx1094_bstack, rxscan1095_loop3019, rx1094_pos, 0
  rxscan1095_done3021:
    nqp_rxmark rx1094_bstack, rxcap1096_fail3023, rx1094_pos, 0
    add $I11, rx1094_pos, 2
    gt $I11, rx1094_eos, rx1094_fail3015
    substr $S10, rx1094_tgt, rx1094_pos, 2
    ne $S10, ucs4:"+|", rx1094_fail3015
    add rx1094_pos, 2
    nqp_rxpeek $I19, rx1094_bstack, rxcap1096_fail3023
    inc $I19
    set $I11, rx1094_bstack[$I19]
    $P11 = rx1094_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1094_pos)
    rx1094_cstack = rx1094_cur."!cursor_capture"($P11, "sym")
    goto rxcap1096_done3022
  rxcap1096_fail3023:
    goto rx1094_fail3015
  rxcap1096_done3022:
    repr_bind_attr_int rx1094_cur, rx1094_curclass, "$!pos", rx1094_pos
    $P11 = rx1094_cur."O"("%additive, :op<bitor_i>")
    repr_get_attr_int $I11, $P11, rx1094_curclass, "$!pos"
    lt $I11, 0, rx1094_fail3015
    nqp_rxmark rx1094_bstack, rxsubrule1097_pass3024, -1, 0
  rxsubrule1097_pass3024:
    rx1094_cstack = rx1094_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1094_pos, $P11, rx1094_curclass, "$!pos"
    rx1094_cur."!cursor_pass"(rx1094_pos, "infix:sym<+|>", 'backtrack'=>1)
    .return (rx1094_cur)
  rx1094_restart3014:
    repr_get_attr_obj rx1094_cstack, rx1094_cur, rx1094_curclass, "$!cstack"
  rx1094_fail3015:
    unless rx1094_bstack, rx1094_done3013
    pop $I19, rx1094_bstack
    if_null rx1094_cstack, rx1094_cstack_done3018
    unless rx1094_cstack, rx1094_cstack_done3018
    dec $I19
    set $P11, rx1094_cstack[$I19]
  rx1094_cstack_done3018:
    pop rx1094_rep, rx1094_bstack
    pop rx1094_pos, rx1094_bstack
    pop $I19, rx1094_bstack
    lt rx1094_pos, -1, rx1094_done3013
    lt rx1094_pos, 0, rx1094_fail3015
    eq $I19, 0, rx1094_fail3015
    nqp_islist $I20, rx1094_cstack
    unless $I20, rx1094_jump3016
    elements $I18, rx1094_bstack
    le $I18, 0, rx1094_cut3017
    dec $I18
    set $I18, rx1094_bstack[$I18]
  rx1094_cut3017:
    assign rx1094_cstack, $I18
  rx1094_jump3016:
    jump $I19
  rx1094_done3013:
    rx1094_cur."!cursor_fail"()
    .return (rx1094_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_191_1347804164.33_caps" :subid("cuid_memo_317_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_191_1347804164.33_nfa" :subid("cuid_memo_318_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 124
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<+^>" :subid("cuid_192_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1301
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1098_tgt
    .local int rx1098_pos
    .local int rx1098_off
    .local int rx1098_eos
    .local int rx1098_rep
    .local pmc rx1098_cur
    .local pmc rx1098_curclass
    .local pmc rx1098_bstack
    .local pmc rx1098_cstack
    (rx1098_cur, rx1098_tgt, rx1098_pos, rx1098_curclass, rx1098_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1098_cur
    length rx1098_eos, rx1098_tgt
    eq $I19, 1, rx1098_restart3027
    gt rx1098_pos, rx1098_eos, rx1098_fail3028
    repr_get_attr_int $I11, self, rx1098_curclass, "$!from"
    ne $I11, -1, rxscan1099_done3034
    goto rxscan1099_scan3033
  rxscan1099_loop3032:
    inc rx1098_pos
    gt rx1098_pos, rx1098_eos, rx1098_fail3028
    repr_bind_attr_int rx1098_cur, rx1098_curclass, "$!from", rx1098_pos
  rxscan1099_scan3033:
    nqp_rxmark rx1098_bstack, rxscan1099_loop3032, rx1098_pos, 0
  rxscan1099_done3034:
    nqp_rxmark rx1098_bstack, rxcap1100_fail3036, rx1098_pos, 0
    add $I11, rx1098_pos, 2
    gt $I11, rx1098_eos, rx1098_fail3028
    substr $S10, rx1098_tgt, rx1098_pos, 2
    ne $S10, ucs4:"+^", rx1098_fail3028
    add rx1098_pos, 2
    nqp_rxpeek $I19, rx1098_bstack, rxcap1100_fail3036
    inc $I19
    set $I11, rx1098_bstack[$I19]
    $P11 = rx1098_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1098_pos)
    rx1098_cstack = rx1098_cur."!cursor_capture"($P11, "sym")
    goto rxcap1100_done3035
  rxcap1100_fail3036:
    goto rx1098_fail3028
  rxcap1100_done3035:
    repr_bind_attr_int rx1098_cur, rx1098_curclass, "$!pos", rx1098_pos
    $P11 = rx1098_cur."O"("%additive, :op<bitxor_i>")
    repr_get_attr_int $I11, $P11, rx1098_curclass, "$!pos"
    lt $I11, 0, rx1098_fail3028
    nqp_rxmark rx1098_bstack, rxsubrule1101_pass3037, -1, 0
  rxsubrule1101_pass3037:
    rx1098_cstack = rx1098_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1098_pos, $P11, rx1098_curclass, "$!pos"
    rx1098_cur."!cursor_pass"(rx1098_pos, "infix:sym<+^>", 'backtrack'=>1)
    .return (rx1098_cur)
  rx1098_restart3027:
    repr_get_attr_obj rx1098_cstack, rx1098_cur, rx1098_curclass, "$!cstack"
  rx1098_fail3028:
    unless rx1098_bstack, rx1098_done3026
    pop $I19, rx1098_bstack
    if_null rx1098_cstack, rx1098_cstack_done3031
    unless rx1098_cstack, rx1098_cstack_done3031
    dec $I19
    set $P11, rx1098_cstack[$I19]
  rx1098_cstack_done3031:
    pop rx1098_rep, rx1098_bstack
    pop rx1098_pos, rx1098_bstack
    pop $I19, rx1098_bstack
    lt rx1098_pos, -1, rx1098_done3026
    lt rx1098_pos, 0, rx1098_fail3028
    eq $I19, 0, rx1098_fail3028
    nqp_islist $I20, rx1098_cstack
    unless $I20, rx1098_jump3029
    elements $I18, rx1098_bstack
    le $I18, 0, rx1098_cut3030
    dec $I18
    set $I18, rx1098_bstack[$I18]
  rx1098_cut3030:
    assign rx1098_cstack, $I18
  rx1098_jump3029:
    jump $I19
  rx1098_done3026:
    rx1098_cur."!cursor_fail"()
    .return (rx1098_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_192_1347804164.33_caps" :subid("cuid_memo_319_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_192_1347804164.33_nfa" :subid("cuid_memo_320_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 43
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 94
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~>" :subid("cuid_193_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1303
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1102_tgt
    .local int rx1102_pos
    .local int rx1102_off
    .local int rx1102_eos
    .local int rx1102_rep
    .local pmc rx1102_cur
    .local pmc rx1102_curclass
    .local pmc rx1102_bstack
    .local pmc rx1102_cstack
    (rx1102_cur, rx1102_tgt, rx1102_pos, rx1102_curclass, rx1102_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1102_cur
    length rx1102_eos, rx1102_tgt
    eq $I19, 1, rx1102_restart3040
    gt rx1102_pos, rx1102_eos, rx1102_fail3041
    repr_get_attr_int $I11, self, rx1102_curclass, "$!from"
    ne $I11, -1, rxscan1103_done3047
    goto rxscan1103_scan3046
  rxscan1103_loop3045:
    inc rx1102_pos
    gt rx1102_pos, rx1102_eos, rx1102_fail3041
    repr_bind_attr_int rx1102_cur, rx1102_curclass, "$!from", rx1102_pos
  rxscan1103_scan3046:
    nqp_rxmark rx1102_bstack, rxscan1103_loop3045, rx1102_pos, 0
  rxscan1103_done3047:
    nqp_rxmark rx1102_bstack, rxcap1104_fail3049, rx1102_pos, 0
    add $I11, rx1102_pos, 1
    gt $I11, rx1102_eos, rx1102_fail3041
    substr $S10, rx1102_tgt, rx1102_pos, 1
    ne $S10, ucs4:"~", rx1102_fail3041
    add rx1102_pos, 1
    nqp_rxpeek $I19, rx1102_bstack, rxcap1104_fail3049
    inc $I19
    set $I11, rx1102_bstack[$I19]
    $P11 = rx1102_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1102_pos)
    rx1102_cstack = rx1102_cur."!cursor_capture"($P11, "sym")
    goto rxcap1104_done3048
  rxcap1104_fail3049:
    goto rx1102_fail3041
  rxcap1104_done3048:
    repr_bind_attr_int rx1102_cur, rx1102_curclass, "$!pos", rx1102_pos
    $P11 = rx1102_cur."O"("%concatenation , :op<concat>")
    repr_get_attr_int $I11, $P11, rx1102_curclass, "$!pos"
    lt $I11, 0, rx1102_fail3041
    nqp_rxmark rx1102_bstack, rxsubrule1105_pass3050, -1, 0
  rxsubrule1105_pass3050:
    rx1102_cstack = rx1102_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1102_pos, $P11, rx1102_curclass, "$!pos"
    rx1102_cur."!cursor_pass"(rx1102_pos, "infix:sym<~>", 'backtrack'=>1)
    .return (rx1102_cur)
  rx1102_restart3040:
    repr_get_attr_obj rx1102_cstack, rx1102_cur, rx1102_curclass, "$!cstack"
  rx1102_fail3041:
    unless rx1102_bstack, rx1102_done3039
    pop $I19, rx1102_bstack
    if_null rx1102_cstack, rx1102_cstack_done3044
    unless rx1102_cstack, rx1102_cstack_done3044
    dec $I19
    set $P11, rx1102_cstack[$I19]
  rx1102_cstack_done3044:
    pop rx1102_rep, rx1102_bstack
    pop rx1102_pos, rx1102_bstack
    pop $I19, rx1102_bstack
    lt rx1102_pos, -1, rx1102_done3039
    lt rx1102_pos, 0, rx1102_fail3041
    eq $I19, 0, rx1102_fail3041
    nqp_islist $I20, rx1102_cstack
    unless $I20, rx1102_jump3042
    elements $I18, rx1102_bstack
    le $I18, 0, rx1102_cut3043
    dec $I18
    set $I18, rx1102_bstack[$I18]
  rx1102_cut3043:
    assign rx1102_cstack, $I18
  rx1102_jump3042:
    jump $I19
  rx1102_done3039:
    rx1102_cur."!cursor_fail"()
    .return (rx1102_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_193_1347804164.33_caps" :subid("cuid_memo_321_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_193_1347804164.33_nfa" :subid("cuid_memo_322_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 126
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<==>" :subid("cuid_194_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1305
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1106_tgt
    .local int rx1106_pos
    .local int rx1106_off
    .local int rx1106_eos
    .local int rx1106_rep
    .local pmc rx1106_cur
    .local pmc rx1106_curclass
    .local pmc rx1106_bstack
    .local pmc rx1106_cstack
    (rx1106_cur, rx1106_tgt, rx1106_pos, rx1106_curclass, rx1106_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1106_cur
    length rx1106_eos, rx1106_tgt
    eq $I19, 1, rx1106_restart3053
    gt rx1106_pos, rx1106_eos, rx1106_fail3054
    repr_get_attr_int $I11, self, rx1106_curclass, "$!from"
    ne $I11, -1, rxscan1107_done3060
    goto rxscan1107_scan3059
  rxscan1107_loop3058:
    inc rx1106_pos
    gt rx1106_pos, rx1106_eos, rx1106_fail3054
    repr_bind_attr_int rx1106_cur, rx1106_curclass, "$!from", rx1106_pos
  rxscan1107_scan3059:
    nqp_rxmark rx1106_bstack, rxscan1107_loop3058, rx1106_pos, 0
  rxscan1107_done3060:
    nqp_rxmark rx1106_bstack, rxcap1108_fail3062, rx1106_pos, 0
    add $I11, rx1106_pos, 2
    gt $I11, rx1106_eos, rx1106_fail3054
    substr $S10, rx1106_tgt, rx1106_pos, 2
    ne $S10, ucs4:"==", rx1106_fail3054
    add rx1106_pos, 2
    nqp_rxpeek $I19, rx1106_bstack, rxcap1108_fail3062
    inc $I19
    set $I11, rx1106_bstack[$I19]
    $P11 = rx1106_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1106_pos)
    rx1106_cstack = rx1106_cur."!cursor_capture"($P11, "sym")
    goto rxcap1108_done3061
  rxcap1108_fail3062:
    goto rx1106_fail3054
  rxcap1108_done3061:
    repr_bind_attr_int rx1106_cur, rx1106_curclass, "$!pos", rx1106_pos
    $P11 = rx1106_cur."O"("%relational, :op<iseq_n>")
    repr_get_attr_int $I11, $P11, rx1106_curclass, "$!pos"
    lt $I11, 0, rx1106_fail3054
    nqp_rxmark rx1106_bstack, rxsubrule1109_pass3063, -1, 0
  rxsubrule1109_pass3063:
    rx1106_cstack = rx1106_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1106_pos, $P11, rx1106_curclass, "$!pos"
    rx1106_cur."!cursor_pass"(rx1106_pos, "infix:sym<==>", 'backtrack'=>1)
    .return (rx1106_cur)
  rx1106_restart3053:
    repr_get_attr_obj rx1106_cstack, rx1106_cur, rx1106_curclass, "$!cstack"
  rx1106_fail3054:
    unless rx1106_bstack, rx1106_done3052
    pop $I19, rx1106_bstack
    if_null rx1106_cstack, rx1106_cstack_done3057
    unless rx1106_cstack, rx1106_cstack_done3057
    dec $I19
    set $P11, rx1106_cstack[$I19]
  rx1106_cstack_done3057:
    pop rx1106_rep, rx1106_bstack
    pop rx1106_pos, rx1106_bstack
    pop $I19, rx1106_bstack
    lt rx1106_pos, -1, rx1106_done3052
    lt rx1106_pos, 0, rx1106_fail3054
    eq $I19, 0, rx1106_fail3054
    nqp_islist $I20, rx1106_cstack
    unless $I20, rx1106_jump3055
    elements $I18, rx1106_bstack
    le $I18, 0, rx1106_cut3056
    dec $I18
    set $I18, rx1106_bstack[$I18]
  rx1106_cut3056:
    assign rx1106_cstack, $I18
  rx1106_jump3055:
    jump $I19
  rx1106_done3052:
    rx1106_cur."!cursor_fail"()
    .return (rx1106_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_194_1347804164.33_caps" :subid("cuid_memo_323_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_194_1347804164.33_nfa" :subid("cuid_memo_324_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 61
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<!=>" :subid("cuid_195_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1306
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1110_tgt
    .local int rx1110_pos
    .local int rx1110_off
    .local int rx1110_eos
    .local int rx1110_rep
    .local pmc rx1110_cur
    .local pmc rx1110_curclass
    .local pmc rx1110_bstack
    .local pmc rx1110_cstack
    (rx1110_cur, rx1110_tgt, rx1110_pos, rx1110_curclass, rx1110_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1110_cur
    length rx1110_eos, rx1110_tgt
    eq $I19, 1, rx1110_restart3066
    gt rx1110_pos, rx1110_eos, rx1110_fail3067
    repr_get_attr_int $I11, self, rx1110_curclass, "$!from"
    ne $I11, -1, rxscan1111_done3073
    goto rxscan1111_scan3072
  rxscan1111_loop3071:
    inc rx1110_pos
    gt rx1110_pos, rx1110_eos, rx1110_fail3067
    repr_bind_attr_int rx1110_cur, rx1110_curclass, "$!from", rx1110_pos
  rxscan1111_scan3072:
    nqp_rxmark rx1110_bstack, rxscan1111_loop3071, rx1110_pos, 0
  rxscan1111_done3073:
    nqp_rxmark rx1110_bstack, rxcap1112_fail3075, rx1110_pos, 0
    add $I11, rx1110_pos, 2
    gt $I11, rx1110_eos, rx1110_fail3067
    substr $S10, rx1110_tgt, rx1110_pos, 2
    ne $S10, ucs4:"!=", rx1110_fail3067
    add rx1110_pos, 2
    nqp_rxpeek $I19, rx1110_bstack, rxcap1112_fail3075
    inc $I19
    set $I11, rx1110_bstack[$I19]
    $P11 = rx1110_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1110_pos)
    rx1110_cstack = rx1110_cur."!cursor_capture"($P11, "sym")
    goto rxcap1112_done3074
  rxcap1112_fail3075:
    goto rx1110_fail3067
  rxcap1112_done3074:
    repr_bind_attr_int rx1110_cur, rx1110_curclass, "$!pos", rx1110_pos
    $P11 = rx1110_cur."O"("%relational, :op<isne_n>")
    repr_get_attr_int $I11, $P11, rx1110_curclass, "$!pos"
    lt $I11, 0, rx1110_fail3067
    nqp_rxmark rx1110_bstack, rxsubrule1113_pass3076, -1, 0
  rxsubrule1113_pass3076:
    rx1110_cstack = rx1110_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1110_pos, $P11, rx1110_curclass, "$!pos"
    rx1110_cur."!cursor_pass"(rx1110_pos, "infix:sym<!=>", 'backtrack'=>1)
    .return (rx1110_cur)
  rx1110_restart3066:
    repr_get_attr_obj rx1110_cstack, rx1110_cur, rx1110_curclass, "$!cstack"
  rx1110_fail3067:
    unless rx1110_bstack, rx1110_done3065
    pop $I19, rx1110_bstack
    if_null rx1110_cstack, rx1110_cstack_done3070
    unless rx1110_cstack, rx1110_cstack_done3070
    dec $I19
    set $P11, rx1110_cstack[$I19]
  rx1110_cstack_done3070:
    pop rx1110_rep, rx1110_bstack
    pop rx1110_pos, rx1110_bstack
    pop $I19, rx1110_bstack
    lt rx1110_pos, -1, rx1110_done3065
    lt rx1110_pos, 0, rx1110_fail3067
    eq $I19, 0, rx1110_fail3067
    nqp_islist $I20, rx1110_cstack
    unless $I20, rx1110_jump3068
    elements $I18, rx1110_bstack
    le $I18, 0, rx1110_cut3069
    dec $I18
    set $I18, rx1110_bstack[$I18]
  rx1110_cut3069:
    assign rx1110_cstack, $I18
  rx1110_jump3068:
    jump $I19
  rx1110_done3065:
    rx1110_cur."!cursor_fail"()
    .return (rx1110_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_195_1347804164.33_caps" :subid("cuid_memo_325_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_195_1347804164.33_nfa" :subid("cuid_memo_326_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 33
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<=>" :subid("cuid_196_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1307
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1114_tgt
    .local int rx1114_pos
    .local int rx1114_off
    .local int rx1114_eos
    .local int rx1114_rep
    .local pmc rx1114_cur
    .local pmc rx1114_curclass
    .local pmc rx1114_bstack
    .local pmc rx1114_cstack
    (rx1114_cur, rx1114_tgt, rx1114_pos, rx1114_curclass, rx1114_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1114_cur
    length rx1114_eos, rx1114_tgt
    eq $I19, 1, rx1114_restart3079
    gt rx1114_pos, rx1114_eos, rx1114_fail3080
    repr_get_attr_int $I11, self, rx1114_curclass, "$!from"
    ne $I11, -1, rxscan1115_done3086
    goto rxscan1115_scan3085
  rxscan1115_loop3084:
    inc rx1114_pos
    gt rx1114_pos, rx1114_eos, rx1114_fail3080
    repr_bind_attr_int rx1114_cur, rx1114_curclass, "$!from", rx1114_pos
  rxscan1115_scan3085:
    nqp_rxmark rx1114_bstack, rxscan1115_loop3084, rx1114_pos, 0
  rxscan1115_done3086:
    nqp_rxmark rx1114_bstack, rxcap1116_fail3088, rx1114_pos, 0
    add $I11, rx1114_pos, 2
    gt $I11, rx1114_eos, rx1114_fail3080
    substr $S10, rx1114_tgt, rx1114_pos, 2
    ne $S10, ucs4:"<=", rx1114_fail3080
    add rx1114_pos, 2
    nqp_rxpeek $I19, rx1114_bstack, rxcap1116_fail3088
    inc $I19
    set $I11, rx1114_bstack[$I19]
    $P11 = rx1114_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1114_pos)
    rx1114_cstack = rx1114_cur."!cursor_capture"($P11, "sym")
    goto rxcap1116_done3087
  rxcap1116_fail3088:
    goto rx1114_fail3080
  rxcap1116_done3087:
    repr_bind_attr_int rx1114_cur, rx1114_curclass, "$!pos", rx1114_pos
    $P11 = rx1114_cur."O"("%relational, :op<isle_n>")
    repr_get_attr_int $I11, $P11, rx1114_curclass, "$!pos"
    lt $I11, 0, rx1114_fail3080
    nqp_rxmark rx1114_bstack, rxsubrule1117_pass3089, -1, 0
  rxsubrule1117_pass3089:
    rx1114_cstack = rx1114_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1114_pos, $P11, rx1114_curclass, "$!pos"
    rx1114_cur."!cursor_pass"(rx1114_pos, "infix:sym<<=>", 'backtrack'=>1)
    .return (rx1114_cur)
  rx1114_restart3079:
    repr_get_attr_obj rx1114_cstack, rx1114_cur, rx1114_curclass, "$!cstack"
  rx1114_fail3080:
    unless rx1114_bstack, rx1114_done3078
    pop $I19, rx1114_bstack
    if_null rx1114_cstack, rx1114_cstack_done3083
    unless rx1114_cstack, rx1114_cstack_done3083
    dec $I19
    set $P11, rx1114_cstack[$I19]
  rx1114_cstack_done3083:
    pop rx1114_rep, rx1114_bstack
    pop rx1114_pos, rx1114_bstack
    pop $I19, rx1114_bstack
    lt rx1114_pos, -1, rx1114_done3078
    lt rx1114_pos, 0, rx1114_fail3080
    eq $I19, 0, rx1114_fail3080
    nqp_islist $I20, rx1114_cstack
    unless $I20, rx1114_jump3081
    elements $I18, rx1114_bstack
    le $I18, 0, rx1114_cut3082
    dec $I18
    set $I18, rx1114_bstack[$I18]
  rx1114_cut3082:
    assign rx1114_cstack, $I18
  rx1114_jump3081:
    jump $I19
  rx1114_done3078:
    rx1114_cur."!cursor_fail"()
    .return (rx1114_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_196_1347804164.33_caps" :subid("cuid_memo_327_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_196_1347804164.33_nfa" :subid("cuid_memo_328_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 60
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>=>" :subid("cuid_197_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1308
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1118_tgt
    .local int rx1118_pos
    .local int rx1118_off
    .local int rx1118_eos
    .local int rx1118_rep
    .local pmc rx1118_cur
    .local pmc rx1118_curclass
    .local pmc rx1118_bstack
    .local pmc rx1118_cstack
    (rx1118_cur, rx1118_tgt, rx1118_pos, rx1118_curclass, rx1118_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1118_cur
    length rx1118_eos, rx1118_tgt
    eq $I19, 1, rx1118_restart3092
    gt rx1118_pos, rx1118_eos, rx1118_fail3093
    repr_get_attr_int $I11, self, rx1118_curclass, "$!from"
    ne $I11, -1, rxscan1119_done3099
    goto rxscan1119_scan3098
  rxscan1119_loop3097:
    inc rx1118_pos
    gt rx1118_pos, rx1118_eos, rx1118_fail3093
    repr_bind_attr_int rx1118_cur, rx1118_curclass, "$!from", rx1118_pos
  rxscan1119_scan3098:
    nqp_rxmark rx1118_bstack, rxscan1119_loop3097, rx1118_pos, 0
  rxscan1119_done3099:
    nqp_rxmark rx1118_bstack, rxcap1120_fail3101, rx1118_pos, 0
    add $I11, rx1118_pos, 2
    gt $I11, rx1118_eos, rx1118_fail3093
    substr $S10, rx1118_tgt, rx1118_pos, 2
    ne $S10, ucs4:">=", rx1118_fail3093
    add rx1118_pos, 2
    nqp_rxpeek $I19, rx1118_bstack, rxcap1120_fail3101
    inc $I19
    set $I11, rx1118_bstack[$I19]
    $P11 = rx1118_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1118_pos)
    rx1118_cstack = rx1118_cur."!cursor_capture"($P11, "sym")
    goto rxcap1120_done3100
  rxcap1120_fail3101:
    goto rx1118_fail3093
  rxcap1120_done3100:
    repr_bind_attr_int rx1118_cur, rx1118_curclass, "$!pos", rx1118_pos
    $P11 = rx1118_cur."O"("%relational, :op<isge_n>")
    repr_get_attr_int $I11, $P11, rx1118_curclass, "$!pos"
    lt $I11, 0, rx1118_fail3093
    nqp_rxmark rx1118_bstack, rxsubrule1121_pass3102, -1, 0
  rxsubrule1121_pass3102:
    rx1118_cstack = rx1118_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1118_pos, $P11, rx1118_curclass, "$!pos"
    rx1118_cur."!cursor_pass"(rx1118_pos, "infix:sym<>=>", 'backtrack'=>1)
    .return (rx1118_cur)
  rx1118_restart3092:
    repr_get_attr_obj rx1118_cstack, rx1118_cur, rx1118_curclass, "$!cstack"
  rx1118_fail3093:
    unless rx1118_bstack, rx1118_done3091
    pop $I19, rx1118_bstack
    if_null rx1118_cstack, rx1118_cstack_done3096
    unless rx1118_cstack, rx1118_cstack_done3096
    dec $I19
    set $P11, rx1118_cstack[$I19]
  rx1118_cstack_done3096:
    pop rx1118_rep, rx1118_bstack
    pop rx1118_pos, rx1118_bstack
    pop $I19, rx1118_bstack
    lt rx1118_pos, -1, rx1118_done3091
    lt rx1118_pos, 0, rx1118_fail3093
    eq $I19, 0, rx1118_fail3093
    nqp_islist $I20, rx1118_cstack
    unless $I20, rx1118_jump3094
    elements $I18, rx1118_bstack
    le $I18, 0, rx1118_cut3095
    dec $I18
    set $I18, rx1118_bstack[$I18]
  rx1118_cut3095:
    assign rx1118_cstack, $I18
  rx1118_jump3094:
    jump $I19
  rx1118_done3091:
    rx1118_cur."!cursor_fail"()
    .return (rx1118_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_197_1347804164.33_caps" :subid("cuid_memo_329_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_197_1347804164.33_nfa" :subid("cuid_memo_330_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<<>" :subid("cuid_198_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1309
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1122_tgt
    .local int rx1122_pos
    .local int rx1122_off
    .local int rx1122_eos
    .local int rx1122_rep
    .local pmc rx1122_cur
    .local pmc rx1122_curclass
    .local pmc rx1122_bstack
    .local pmc rx1122_cstack
    (rx1122_cur, rx1122_tgt, rx1122_pos, rx1122_curclass, rx1122_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1122_cur
    length rx1122_eos, rx1122_tgt
    eq $I19, 1, rx1122_restart3105
    gt rx1122_pos, rx1122_eos, rx1122_fail3106
    repr_get_attr_int $I11, self, rx1122_curclass, "$!from"
    ne $I11, -1, rxscan1123_done3112
    goto rxscan1123_scan3111
  rxscan1123_loop3110:
    inc rx1122_pos
    gt rx1122_pos, rx1122_eos, rx1122_fail3106
    repr_bind_attr_int rx1122_cur, rx1122_curclass, "$!from", rx1122_pos
  rxscan1123_scan3111:
    nqp_rxmark rx1122_bstack, rxscan1123_loop3110, rx1122_pos, 0
  rxscan1123_done3112:
    nqp_rxmark rx1122_bstack, rxcap1124_fail3114, rx1122_pos, 0
    add $I11, rx1122_pos, 1
    gt $I11, rx1122_eos, rx1122_fail3106
    substr $S10, rx1122_tgt, rx1122_pos, 1
    ne $S10, ucs4:"<", rx1122_fail3106
    add rx1122_pos, 1
    nqp_rxpeek $I19, rx1122_bstack, rxcap1124_fail3114
    inc $I19
    set $I11, rx1122_bstack[$I19]
    $P11 = rx1122_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1122_pos)
    rx1122_cstack = rx1122_cur."!cursor_capture"($P11, "sym")
    goto rxcap1124_done3113
  rxcap1124_fail3114:
    goto rx1122_fail3106
  rxcap1124_done3113:
    repr_bind_attr_int rx1122_cur, rx1122_curclass, "$!pos", rx1122_pos
    $P11 = rx1122_cur."O"("%relational, :op<islt_n>")
    repr_get_attr_int $I11, $P11, rx1122_curclass, "$!pos"
    lt $I11, 0, rx1122_fail3106
    nqp_rxmark rx1122_bstack, rxsubrule1125_pass3115, -1, 0
  rxsubrule1125_pass3115:
    rx1122_cstack = rx1122_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1122_pos, $P11, rx1122_curclass, "$!pos"
    rx1122_cur."!cursor_pass"(rx1122_pos, "infix:sym<<>", 'backtrack'=>1)
    .return (rx1122_cur)
  rx1122_restart3105:
    repr_get_attr_obj rx1122_cstack, rx1122_cur, rx1122_curclass, "$!cstack"
  rx1122_fail3106:
    unless rx1122_bstack, rx1122_done3104
    pop $I19, rx1122_bstack
    if_null rx1122_cstack, rx1122_cstack_done3109
    unless rx1122_cstack, rx1122_cstack_done3109
    dec $I19
    set $P11, rx1122_cstack[$I19]
  rx1122_cstack_done3109:
    pop rx1122_rep, rx1122_bstack
    pop rx1122_pos, rx1122_bstack
    pop $I19, rx1122_bstack
    lt rx1122_pos, -1, rx1122_done3104
    lt rx1122_pos, 0, rx1122_fail3106
    eq $I19, 0, rx1122_fail3106
    nqp_islist $I20, rx1122_cstack
    unless $I20, rx1122_jump3107
    elements $I18, rx1122_bstack
    le $I18, 0, rx1122_cut3108
    dec $I18
    set $I18, rx1122_bstack[$I18]
  rx1122_cut3108:
    assign rx1122_cstack, $I18
  rx1122_jump3107:
    jump $I19
  rx1122_done3104:
    rx1122_cur."!cursor_fail"()
    .return (rx1122_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_198_1347804164.33_caps" :subid("cuid_memo_331_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_198_1347804164.33_nfa" :subid("cuid_memo_332_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 60
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<>>" :subid("cuid_199_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1310
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1126_tgt
    .local int rx1126_pos
    .local int rx1126_off
    .local int rx1126_eos
    .local int rx1126_rep
    .local pmc rx1126_cur
    .local pmc rx1126_curclass
    .local pmc rx1126_bstack
    .local pmc rx1126_cstack
    (rx1126_cur, rx1126_tgt, rx1126_pos, rx1126_curclass, rx1126_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1126_cur
    length rx1126_eos, rx1126_tgt
    eq $I19, 1, rx1126_restart3118
    gt rx1126_pos, rx1126_eos, rx1126_fail3119
    repr_get_attr_int $I11, self, rx1126_curclass, "$!from"
    ne $I11, -1, rxscan1127_done3125
    goto rxscan1127_scan3124
  rxscan1127_loop3123:
    inc rx1126_pos
    gt rx1126_pos, rx1126_eos, rx1126_fail3119
    repr_bind_attr_int rx1126_cur, rx1126_curclass, "$!from", rx1126_pos
  rxscan1127_scan3124:
    nqp_rxmark rx1126_bstack, rxscan1127_loop3123, rx1126_pos, 0
  rxscan1127_done3125:
    nqp_rxmark rx1126_bstack, rxcap1128_fail3127, rx1126_pos, 0
    add $I11, rx1126_pos, 1
    gt $I11, rx1126_eos, rx1126_fail3119
    substr $S10, rx1126_tgt, rx1126_pos, 1
    ne $S10, ucs4:">", rx1126_fail3119
    add rx1126_pos, 1
    nqp_rxpeek $I19, rx1126_bstack, rxcap1128_fail3127
    inc $I19
    set $I11, rx1126_bstack[$I19]
    $P11 = rx1126_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1126_pos)
    rx1126_cstack = rx1126_cur."!cursor_capture"($P11, "sym")
    goto rxcap1128_done3126
  rxcap1128_fail3127:
    goto rx1126_fail3119
  rxcap1128_done3126:
    repr_bind_attr_int rx1126_cur, rx1126_curclass, "$!pos", rx1126_pos
    $P11 = rx1126_cur."O"("%relational, :op<isgt_n>")
    repr_get_attr_int $I11, $P11, rx1126_curclass, "$!pos"
    lt $I11, 0, rx1126_fail3119
    nqp_rxmark rx1126_bstack, rxsubrule1129_pass3128, -1, 0
  rxsubrule1129_pass3128:
    rx1126_cstack = rx1126_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1126_pos, $P11, rx1126_curclass, "$!pos"
    rx1126_cur."!cursor_pass"(rx1126_pos, "infix:sym<>>", 'backtrack'=>1)
    .return (rx1126_cur)
  rx1126_restart3118:
    repr_get_attr_obj rx1126_cstack, rx1126_cur, rx1126_curclass, "$!cstack"
  rx1126_fail3119:
    unless rx1126_bstack, rx1126_done3117
    pop $I19, rx1126_bstack
    if_null rx1126_cstack, rx1126_cstack_done3122
    unless rx1126_cstack, rx1126_cstack_done3122
    dec $I19
    set $P11, rx1126_cstack[$I19]
  rx1126_cstack_done3122:
    pop rx1126_rep, rx1126_bstack
    pop rx1126_pos, rx1126_bstack
    pop $I19, rx1126_bstack
    lt rx1126_pos, -1, rx1126_done3117
    lt rx1126_pos, 0, rx1126_fail3119
    eq $I19, 0, rx1126_fail3119
    nqp_islist $I20, rx1126_cstack
    unless $I20, rx1126_jump3120
    elements $I18, rx1126_bstack
    le $I18, 0, rx1126_cut3121
    dec $I18
    set $I18, rx1126_bstack[$I18]
  rx1126_cut3121:
    assign rx1126_cstack, $I18
  rx1126_jump3120:
    jump $I19
  rx1126_done3117:
    rx1126_cur."!cursor_fail"()
    .return (rx1126_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_199_1347804164.33_caps" :subid("cuid_memo_333_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_199_1347804164.33_nfa" :subid("cuid_memo_334_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<eq>" :subid("cuid_200_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1311
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1130_tgt
    .local int rx1130_pos
    .local int rx1130_off
    .local int rx1130_eos
    .local int rx1130_rep
    .local pmc rx1130_cur
    .local pmc rx1130_curclass
    .local pmc rx1130_bstack
    .local pmc rx1130_cstack
    (rx1130_cur, rx1130_tgt, rx1130_pos, rx1130_curclass, rx1130_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1130_cur
    length rx1130_eos, rx1130_tgt
    eq $I19, 1, rx1130_restart3131
    gt rx1130_pos, rx1130_eos, rx1130_fail3132
    repr_get_attr_int $I11, self, rx1130_curclass, "$!from"
    ne $I11, -1, rxscan1131_done3138
    goto rxscan1131_scan3137
  rxscan1131_loop3136:
    inc rx1130_pos
    gt rx1130_pos, rx1130_eos, rx1130_fail3132
    repr_bind_attr_int rx1130_cur, rx1130_curclass, "$!from", rx1130_pos
  rxscan1131_scan3137:
    nqp_rxmark rx1130_bstack, rxscan1131_loop3136, rx1130_pos, 0
  rxscan1131_done3138:
    nqp_rxmark rx1130_bstack, rxcap1132_fail3140, rx1130_pos, 0
    add $I11, rx1130_pos, 2
    gt $I11, rx1130_eos, rx1130_fail3132
    substr $S10, rx1130_tgt, rx1130_pos, 2
    ne $S10, ucs4:"eq", rx1130_fail3132
    add rx1130_pos, 2
    nqp_rxpeek $I19, rx1130_bstack, rxcap1132_fail3140
    inc $I19
    set $I11, rx1130_bstack[$I19]
    $P11 = rx1130_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1130_pos)
    rx1130_cstack = rx1130_cur."!cursor_capture"($P11, "sym")
    goto rxcap1132_done3139
  rxcap1132_fail3140:
    goto rx1130_fail3132
  rxcap1132_done3139:
    repr_bind_attr_int rx1130_cur, rx1130_curclass, "$!pos", rx1130_pos
    $P11 = rx1130_cur."O"("%relational, :op<iseq_s>")
    repr_get_attr_int $I11, $P11, rx1130_curclass, "$!pos"
    lt $I11, 0, rx1130_fail3132
    nqp_rxmark rx1130_bstack, rxsubrule1133_pass3141, -1, 0
  rxsubrule1133_pass3141:
    rx1130_cstack = rx1130_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1130_pos, $P11, rx1130_curclass, "$!pos"
    rx1130_cur."!cursor_pass"(rx1130_pos, "infix:sym<eq>", 'backtrack'=>1)
    .return (rx1130_cur)
  rx1130_restart3131:
    repr_get_attr_obj rx1130_cstack, rx1130_cur, rx1130_curclass, "$!cstack"
  rx1130_fail3132:
    unless rx1130_bstack, rx1130_done3130
    pop $I19, rx1130_bstack
    if_null rx1130_cstack, rx1130_cstack_done3135
    unless rx1130_cstack, rx1130_cstack_done3135
    dec $I19
    set $P11, rx1130_cstack[$I19]
  rx1130_cstack_done3135:
    pop rx1130_rep, rx1130_bstack
    pop rx1130_pos, rx1130_bstack
    pop $I19, rx1130_bstack
    lt rx1130_pos, -1, rx1130_done3130
    lt rx1130_pos, 0, rx1130_fail3132
    eq $I19, 0, rx1130_fail3132
    nqp_islist $I20, rx1130_cstack
    unless $I20, rx1130_jump3133
    elements $I18, rx1130_bstack
    le $I18, 0, rx1130_cut3134
    dec $I18
    set $I18, rx1130_bstack[$I18]
  rx1130_cut3134:
    assign rx1130_cstack, $I18
  rx1130_jump3133:
    jump $I19
  rx1130_done3130:
    rx1130_cur."!cursor_fail"()
    .return (rx1130_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_200_1347804164.33_caps" :subid("cuid_memo_335_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_200_1347804164.33_nfa" :subid("cuid_memo_336_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 101
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 113
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ne>" :subid("cuid_201_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1312
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1134_tgt
    .local int rx1134_pos
    .local int rx1134_off
    .local int rx1134_eos
    .local int rx1134_rep
    .local pmc rx1134_cur
    .local pmc rx1134_curclass
    .local pmc rx1134_bstack
    .local pmc rx1134_cstack
    (rx1134_cur, rx1134_tgt, rx1134_pos, rx1134_curclass, rx1134_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1134_cur
    length rx1134_eos, rx1134_tgt
    eq $I19, 1, rx1134_restart3144
    gt rx1134_pos, rx1134_eos, rx1134_fail3145
    repr_get_attr_int $I11, self, rx1134_curclass, "$!from"
    ne $I11, -1, rxscan1135_done3151
    goto rxscan1135_scan3150
  rxscan1135_loop3149:
    inc rx1134_pos
    gt rx1134_pos, rx1134_eos, rx1134_fail3145
    repr_bind_attr_int rx1134_cur, rx1134_curclass, "$!from", rx1134_pos
  rxscan1135_scan3150:
    nqp_rxmark rx1134_bstack, rxscan1135_loop3149, rx1134_pos, 0
  rxscan1135_done3151:
    nqp_rxmark rx1134_bstack, rxcap1136_fail3153, rx1134_pos, 0
    add $I11, rx1134_pos, 2
    gt $I11, rx1134_eos, rx1134_fail3145
    substr $S10, rx1134_tgt, rx1134_pos, 2
    ne $S10, ucs4:"ne", rx1134_fail3145
    add rx1134_pos, 2
    nqp_rxpeek $I19, rx1134_bstack, rxcap1136_fail3153
    inc $I19
    set $I11, rx1134_bstack[$I19]
    $P11 = rx1134_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1134_pos)
    rx1134_cstack = rx1134_cur."!cursor_capture"($P11, "sym")
    goto rxcap1136_done3152
  rxcap1136_fail3153:
    goto rx1134_fail3145
  rxcap1136_done3152:
    repr_bind_attr_int rx1134_cur, rx1134_curclass, "$!pos", rx1134_pos
    $P11 = rx1134_cur."O"("%relational, :op<isne_s>")
    repr_get_attr_int $I11, $P11, rx1134_curclass, "$!pos"
    lt $I11, 0, rx1134_fail3145
    nqp_rxmark rx1134_bstack, rxsubrule1137_pass3154, -1, 0
  rxsubrule1137_pass3154:
    rx1134_cstack = rx1134_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1134_pos, $P11, rx1134_curclass, "$!pos"
    rx1134_cur."!cursor_pass"(rx1134_pos, "infix:sym<ne>", 'backtrack'=>1)
    .return (rx1134_cur)
  rx1134_restart3144:
    repr_get_attr_obj rx1134_cstack, rx1134_cur, rx1134_curclass, "$!cstack"
  rx1134_fail3145:
    unless rx1134_bstack, rx1134_done3143
    pop $I19, rx1134_bstack
    if_null rx1134_cstack, rx1134_cstack_done3148
    unless rx1134_cstack, rx1134_cstack_done3148
    dec $I19
    set $P11, rx1134_cstack[$I19]
  rx1134_cstack_done3148:
    pop rx1134_rep, rx1134_bstack
    pop rx1134_pos, rx1134_bstack
    pop $I19, rx1134_bstack
    lt rx1134_pos, -1, rx1134_done3143
    lt rx1134_pos, 0, rx1134_fail3145
    eq $I19, 0, rx1134_fail3145
    nqp_islist $I20, rx1134_cstack
    unless $I20, rx1134_jump3146
    elements $I18, rx1134_bstack
    le $I18, 0, rx1134_cut3147
    dec $I18
    set $I18, rx1134_bstack[$I18]
  rx1134_cut3147:
    assign rx1134_cstack, $I18
  rx1134_jump3146:
    jump $I19
  rx1134_done3143:
    rx1134_cur."!cursor_fail"()
    .return (rx1134_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_201_1347804164.33_caps" :subid("cuid_memo_337_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_201_1347804164.33_nfa" :subid("cuid_memo_338_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 110
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<le>" :subid("cuid_202_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1313
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1138_tgt
    .local int rx1138_pos
    .local int rx1138_off
    .local int rx1138_eos
    .local int rx1138_rep
    .local pmc rx1138_cur
    .local pmc rx1138_curclass
    .local pmc rx1138_bstack
    .local pmc rx1138_cstack
    (rx1138_cur, rx1138_tgt, rx1138_pos, rx1138_curclass, rx1138_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1138_cur
    length rx1138_eos, rx1138_tgt
    eq $I19, 1, rx1138_restart3157
    gt rx1138_pos, rx1138_eos, rx1138_fail3158
    repr_get_attr_int $I11, self, rx1138_curclass, "$!from"
    ne $I11, -1, rxscan1139_done3164
    goto rxscan1139_scan3163
  rxscan1139_loop3162:
    inc rx1138_pos
    gt rx1138_pos, rx1138_eos, rx1138_fail3158
    repr_bind_attr_int rx1138_cur, rx1138_curclass, "$!from", rx1138_pos
  rxscan1139_scan3163:
    nqp_rxmark rx1138_bstack, rxscan1139_loop3162, rx1138_pos, 0
  rxscan1139_done3164:
    nqp_rxmark rx1138_bstack, rxcap1140_fail3166, rx1138_pos, 0
    add $I11, rx1138_pos, 2
    gt $I11, rx1138_eos, rx1138_fail3158
    substr $S10, rx1138_tgt, rx1138_pos, 2
    ne $S10, ucs4:"le", rx1138_fail3158
    add rx1138_pos, 2
    nqp_rxpeek $I19, rx1138_bstack, rxcap1140_fail3166
    inc $I19
    set $I11, rx1138_bstack[$I19]
    $P11 = rx1138_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1138_pos)
    rx1138_cstack = rx1138_cur."!cursor_capture"($P11, "sym")
    goto rxcap1140_done3165
  rxcap1140_fail3166:
    goto rx1138_fail3158
  rxcap1140_done3165:
    repr_bind_attr_int rx1138_cur, rx1138_curclass, "$!pos", rx1138_pos
    $P11 = rx1138_cur."O"("%relational, :op<isle_s>")
    repr_get_attr_int $I11, $P11, rx1138_curclass, "$!pos"
    lt $I11, 0, rx1138_fail3158
    nqp_rxmark rx1138_bstack, rxsubrule1141_pass3167, -1, 0
  rxsubrule1141_pass3167:
    rx1138_cstack = rx1138_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1138_pos, $P11, rx1138_curclass, "$!pos"
    rx1138_cur."!cursor_pass"(rx1138_pos, "infix:sym<le>", 'backtrack'=>1)
    .return (rx1138_cur)
  rx1138_restart3157:
    repr_get_attr_obj rx1138_cstack, rx1138_cur, rx1138_curclass, "$!cstack"
  rx1138_fail3158:
    unless rx1138_bstack, rx1138_done3156
    pop $I19, rx1138_bstack
    if_null rx1138_cstack, rx1138_cstack_done3161
    unless rx1138_cstack, rx1138_cstack_done3161
    dec $I19
    set $P11, rx1138_cstack[$I19]
  rx1138_cstack_done3161:
    pop rx1138_rep, rx1138_bstack
    pop rx1138_pos, rx1138_bstack
    pop $I19, rx1138_bstack
    lt rx1138_pos, -1, rx1138_done3156
    lt rx1138_pos, 0, rx1138_fail3158
    eq $I19, 0, rx1138_fail3158
    nqp_islist $I20, rx1138_cstack
    unless $I20, rx1138_jump3159
    elements $I18, rx1138_bstack
    le $I18, 0, rx1138_cut3160
    dec $I18
    set $I18, rx1138_bstack[$I18]
  rx1138_cut3160:
    assign rx1138_cstack, $I18
  rx1138_jump3159:
    jump $I19
  rx1138_done3156:
    rx1138_cur."!cursor_fail"()
    .return (rx1138_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_202_1347804164.33_caps" :subid("cuid_memo_339_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_202_1347804164.33_nfa" :subid("cuid_memo_340_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 108
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<ge>" :subid("cuid_203_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1314
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1142_tgt
    .local int rx1142_pos
    .local int rx1142_off
    .local int rx1142_eos
    .local int rx1142_rep
    .local pmc rx1142_cur
    .local pmc rx1142_curclass
    .local pmc rx1142_bstack
    .local pmc rx1142_cstack
    (rx1142_cur, rx1142_tgt, rx1142_pos, rx1142_curclass, rx1142_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1142_cur
    length rx1142_eos, rx1142_tgt
    eq $I19, 1, rx1142_restart3170
    gt rx1142_pos, rx1142_eos, rx1142_fail3171
    repr_get_attr_int $I11, self, rx1142_curclass, "$!from"
    ne $I11, -1, rxscan1143_done3177
    goto rxscan1143_scan3176
  rxscan1143_loop3175:
    inc rx1142_pos
    gt rx1142_pos, rx1142_eos, rx1142_fail3171
    repr_bind_attr_int rx1142_cur, rx1142_curclass, "$!from", rx1142_pos
  rxscan1143_scan3176:
    nqp_rxmark rx1142_bstack, rxscan1143_loop3175, rx1142_pos, 0
  rxscan1143_done3177:
    nqp_rxmark rx1142_bstack, rxcap1144_fail3179, rx1142_pos, 0
    add $I11, rx1142_pos, 2
    gt $I11, rx1142_eos, rx1142_fail3171
    substr $S10, rx1142_tgt, rx1142_pos, 2
    ne $S10, ucs4:"ge", rx1142_fail3171
    add rx1142_pos, 2
    nqp_rxpeek $I19, rx1142_bstack, rxcap1144_fail3179
    inc $I19
    set $I11, rx1142_bstack[$I19]
    $P11 = rx1142_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1142_pos)
    rx1142_cstack = rx1142_cur."!cursor_capture"($P11, "sym")
    goto rxcap1144_done3178
  rxcap1144_fail3179:
    goto rx1142_fail3171
  rxcap1144_done3178:
    repr_bind_attr_int rx1142_cur, rx1142_curclass, "$!pos", rx1142_pos
    $P11 = rx1142_cur."O"("%relational, :op<isge_s>")
    repr_get_attr_int $I11, $P11, rx1142_curclass, "$!pos"
    lt $I11, 0, rx1142_fail3171
    nqp_rxmark rx1142_bstack, rxsubrule1145_pass3180, -1, 0
  rxsubrule1145_pass3180:
    rx1142_cstack = rx1142_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1142_pos, $P11, rx1142_curclass, "$!pos"
    rx1142_cur."!cursor_pass"(rx1142_pos, "infix:sym<ge>", 'backtrack'=>1)
    .return (rx1142_cur)
  rx1142_restart3170:
    repr_get_attr_obj rx1142_cstack, rx1142_cur, rx1142_curclass, "$!cstack"
  rx1142_fail3171:
    unless rx1142_bstack, rx1142_done3169
    pop $I19, rx1142_bstack
    if_null rx1142_cstack, rx1142_cstack_done3174
    unless rx1142_cstack, rx1142_cstack_done3174
    dec $I19
    set $P11, rx1142_cstack[$I19]
  rx1142_cstack_done3174:
    pop rx1142_rep, rx1142_bstack
    pop rx1142_pos, rx1142_bstack
    pop $I19, rx1142_bstack
    lt rx1142_pos, -1, rx1142_done3169
    lt rx1142_pos, 0, rx1142_fail3171
    eq $I19, 0, rx1142_fail3171
    nqp_islist $I20, rx1142_cstack
    unless $I20, rx1142_jump3172
    elements $I18, rx1142_bstack
    le $I18, 0, rx1142_cut3173
    dec $I18
    set $I18, rx1142_bstack[$I18]
  rx1142_cut3173:
    assign rx1142_cstack, $I18
  rx1142_jump3172:
    jump $I19
  rx1142_done3169:
    rx1142_cur."!cursor_fail"()
    .return (rx1142_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_203_1347804164.33_caps" :subid("cuid_memo_341_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_203_1347804164.33_nfa" :subid("cuid_memo_342_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 103
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<lt>" :subid("cuid_204_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1315
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1146_tgt
    .local int rx1146_pos
    .local int rx1146_off
    .local int rx1146_eos
    .local int rx1146_rep
    .local pmc rx1146_cur
    .local pmc rx1146_curclass
    .local pmc rx1146_bstack
    .local pmc rx1146_cstack
    (rx1146_cur, rx1146_tgt, rx1146_pos, rx1146_curclass, rx1146_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1146_cur
    length rx1146_eos, rx1146_tgt
    eq $I19, 1, rx1146_restart3183
    gt rx1146_pos, rx1146_eos, rx1146_fail3184
    repr_get_attr_int $I11, self, rx1146_curclass, "$!from"
    ne $I11, -1, rxscan1147_done3190
    goto rxscan1147_scan3189
  rxscan1147_loop3188:
    inc rx1146_pos
    gt rx1146_pos, rx1146_eos, rx1146_fail3184
    repr_bind_attr_int rx1146_cur, rx1146_curclass, "$!from", rx1146_pos
  rxscan1147_scan3189:
    nqp_rxmark rx1146_bstack, rxscan1147_loop3188, rx1146_pos, 0
  rxscan1147_done3190:
    nqp_rxmark rx1146_bstack, rxcap1148_fail3192, rx1146_pos, 0
    add $I11, rx1146_pos, 2
    gt $I11, rx1146_eos, rx1146_fail3184
    substr $S10, rx1146_tgt, rx1146_pos, 2
    ne $S10, ucs4:"lt", rx1146_fail3184
    add rx1146_pos, 2
    nqp_rxpeek $I19, rx1146_bstack, rxcap1148_fail3192
    inc $I19
    set $I11, rx1146_bstack[$I19]
    $P11 = rx1146_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1146_pos)
    rx1146_cstack = rx1146_cur."!cursor_capture"($P11, "sym")
    goto rxcap1148_done3191
  rxcap1148_fail3192:
    goto rx1146_fail3184
  rxcap1148_done3191:
    repr_bind_attr_int rx1146_cur, rx1146_curclass, "$!pos", rx1146_pos
    $P11 = rx1146_cur."O"("%relational, :op<islt_s>")
    repr_get_attr_int $I11, $P11, rx1146_curclass, "$!pos"
    lt $I11, 0, rx1146_fail3184
    nqp_rxmark rx1146_bstack, rxsubrule1149_pass3193, -1, 0
  rxsubrule1149_pass3193:
    rx1146_cstack = rx1146_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1146_pos, $P11, rx1146_curclass, "$!pos"
    rx1146_cur."!cursor_pass"(rx1146_pos, "infix:sym<lt>", 'backtrack'=>1)
    .return (rx1146_cur)
  rx1146_restart3183:
    repr_get_attr_obj rx1146_cstack, rx1146_cur, rx1146_curclass, "$!cstack"
  rx1146_fail3184:
    unless rx1146_bstack, rx1146_done3182
    pop $I19, rx1146_bstack
    if_null rx1146_cstack, rx1146_cstack_done3187
    unless rx1146_cstack, rx1146_cstack_done3187
    dec $I19
    set $P11, rx1146_cstack[$I19]
  rx1146_cstack_done3187:
    pop rx1146_rep, rx1146_bstack
    pop rx1146_pos, rx1146_bstack
    pop $I19, rx1146_bstack
    lt rx1146_pos, -1, rx1146_done3182
    lt rx1146_pos, 0, rx1146_fail3184
    eq $I19, 0, rx1146_fail3184
    nqp_islist $I20, rx1146_cstack
    unless $I20, rx1146_jump3185
    elements $I18, rx1146_bstack
    le $I18, 0, rx1146_cut3186
    dec $I18
    set $I18, rx1146_bstack[$I18]
  rx1146_cut3186:
    assign rx1146_cstack, $I18
  rx1146_jump3185:
    jump $I19
  rx1146_done3182:
    rx1146_cur."!cursor_fail"()
    .return (rx1146_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_204_1347804164.33_caps" :subid("cuid_memo_343_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_204_1347804164.33_nfa" :subid("cuid_memo_344_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 108
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 116
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<gt>" :subid("cuid_205_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1316
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1150_tgt
    .local int rx1150_pos
    .local int rx1150_off
    .local int rx1150_eos
    .local int rx1150_rep
    .local pmc rx1150_cur
    .local pmc rx1150_curclass
    .local pmc rx1150_bstack
    .local pmc rx1150_cstack
    (rx1150_cur, rx1150_tgt, rx1150_pos, rx1150_curclass, rx1150_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1150_cur
    length rx1150_eos, rx1150_tgt
    eq $I19, 1, rx1150_restart3196
    gt rx1150_pos, rx1150_eos, rx1150_fail3197
    repr_get_attr_int $I11, self, rx1150_curclass, "$!from"
    ne $I11, -1, rxscan1151_done3203
    goto rxscan1151_scan3202
  rxscan1151_loop3201:
    inc rx1150_pos
    gt rx1150_pos, rx1150_eos, rx1150_fail3197
    repr_bind_attr_int rx1150_cur, rx1150_curclass, "$!from", rx1150_pos
  rxscan1151_scan3202:
    nqp_rxmark rx1150_bstack, rxscan1151_loop3201, rx1150_pos, 0
  rxscan1151_done3203:
    nqp_rxmark rx1150_bstack, rxcap1152_fail3205, rx1150_pos, 0
    add $I11, rx1150_pos, 2
    gt $I11, rx1150_eos, rx1150_fail3197
    substr $S10, rx1150_tgt, rx1150_pos, 2
    ne $S10, ucs4:"gt", rx1150_fail3197
    add rx1150_pos, 2
    nqp_rxpeek $I19, rx1150_bstack, rxcap1152_fail3205
    inc $I19
    set $I11, rx1150_bstack[$I19]
    $P11 = rx1150_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1150_pos)
    rx1150_cstack = rx1150_cur."!cursor_capture"($P11, "sym")
    goto rxcap1152_done3204
  rxcap1152_fail3205:
    goto rx1150_fail3197
  rxcap1152_done3204:
    repr_bind_attr_int rx1150_cur, rx1150_curclass, "$!pos", rx1150_pos
    $P11 = rx1150_cur."O"("%relational, :op<isgt_s>")
    repr_get_attr_int $I11, $P11, rx1150_curclass, "$!pos"
    lt $I11, 0, rx1150_fail3197
    nqp_rxmark rx1150_bstack, rxsubrule1153_pass3206, -1, 0
  rxsubrule1153_pass3206:
    rx1150_cstack = rx1150_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1150_pos, $P11, rx1150_curclass, "$!pos"
    rx1150_cur."!cursor_pass"(rx1150_pos, "infix:sym<gt>", 'backtrack'=>1)
    .return (rx1150_cur)
  rx1150_restart3196:
    repr_get_attr_obj rx1150_cstack, rx1150_cur, rx1150_curclass, "$!cstack"
  rx1150_fail3197:
    unless rx1150_bstack, rx1150_done3195
    pop $I19, rx1150_bstack
    if_null rx1150_cstack, rx1150_cstack_done3200
    unless rx1150_cstack, rx1150_cstack_done3200
    dec $I19
    set $P11, rx1150_cstack[$I19]
  rx1150_cstack_done3200:
    pop rx1150_rep, rx1150_bstack
    pop rx1150_pos, rx1150_bstack
    pop $I19, rx1150_bstack
    lt rx1150_pos, -1, rx1150_done3195
    lt rx1150_pos, 0, rx1150_fail3197
    eq $I19, 0, rx1150_fail3197
    nqp_islist $I20, rx1150_cstack
    unless $I20, rx1150_jump3198
    elements $I18, rx1150_bstack
    le $I18, 0, rx1150_cut3199
    dec $I18
    set $I18, rx1150_bstack[$I18]
  rx1150_cut3199:
    assign rx1150_cstack, $I18
  rx1150_jump3198:
    jump $I19
  rx1150_done3195:
    rx1150_cur."!cursor_fail"()
    .return (rx1150_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_205_1347804164.33_caps" :subid("cuid_memo_345_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_205_1347804164.33_nfa" :subid("cuid_memo_346_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 103
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 116
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=:=>" :subid("cuid_206_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1317
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1154_tgt
    .local int rx1154_pos
    .local int rx1154_off
    .local int rx1154_eos
    .local int rx1154_rep
    .local pmc rx1154_cur
    .local pmc rx1154_curclass
    .local pmc rx1154_bstack
    .local pmc rx1154_cstack
    (rx1154_cur, rx1154_tgt, rx1154_pos, rx1154_curclass, rx1154_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1154_cur
    length rx1154_eos, rx1154_tgt
    eq $I19, 1, rx1154_restart3209
    gt rx1154_pos, rx1154_eos, rx1154_fail3210
    repr_get_attr_int $I11, self, rx1154_curclass, "$!from"
    ne $I11, -1, rxscan1155_done3216
    goto rxscan1155_scan3215
  rxscan1155_loop3214:
    inc rx1154_pos
    gt rx1154_pos, rx1154_eos, rx1154_fail3210
    repr_bind_attr_int rx1154_cur, rx1154_curclass, "$!from", rx1154_pos
  rxscan1155_scan3215:
    nqp_rxmark rx1154_bstack, rxscan1155_loop3214, rx1154_pos, 0
  rxscan1155_done3216:
    nqp_rxmark rx1154_bstack, rxcap1156_fail3218, rx1154_pos, 0
    add $I11, rx1154_pos, 3
    gt $I11, rx1154_eos, rx1154_fail3210
    substr $S10, rx1154_tgt, rx1154_pos, 3
    ne $S10, ucs4:"=:=", rx1154_fail3210
    add rx1154_pos, 3
    nqp_rxpeek $I19, rx1154_bstack, rxcap1156_fail3218
    inc $I19
    set $I11, rx1154_bstack[$I19]
    $P11 = rx1154_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1154_pos)
    rx1154_cstack = rx1154_cur."!cursor_capture"($P11, "sym")
    goto rxcap1156_done3217
  rxcap1156_fail3218:
    goto rx1154_fail3210
  rxcap1156_done3217:
    repr_bind_attr_int rx1154_cur, rx1154_curclass, "$!pos", rx1154_pos
    $P11 = rx1154_cur."O"("%relational, :op<eqaddr>")
    repr_get_attr_int $I11, $P11, rx1154_curclass, "$!pos"
    lt $I11, 0, rx1154_fail3210
    nqp_rxmark rx1154_bstack, rxsubrule1157_pass3219, -1, 0
  rxsubrule1157_pass3219:
    rx1154_cstack = rx1154_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1154_pos, $P11, rx1154_curclass, "$!pos"
    rx1154_cur."!cursor_pass"(rx1154_pos, "infix:sym<=:=>", 'backtrack'=>1)
    .return (rx1154_cur)
  rx1154_restart3209:
    repr_get_attr_obj rx1154_cstack, rx1154_cur, rx1154_curclass, "$!cstack"
  rx1154_fail3210:
    unless rx1154_bstack, rx1154_done3208
    pop $I19, rx1154_bstack
    if_null rx1154_cstack, rx1154_cstack_done3213
    unless rx1154_cstack, rx1154_cstack_done3213
    dec $I19
    set $P11, rx1154_cstack[$I19]
  rx1154_cstack_done3213:
    pop rx1154_rep, rx1154_bstack
    pop rx1154_pos, rx1154_bstack
    pop $I19, rx1154_bstack
    lt rx1154_pos, -1, rx1154_done3208
    lt rx1154_pos, 0, rx1154_fail3210
    eq $I19, 0, rx1154_fail3210
    nqp_islist $I20, rx1154_cstack
    unless $I20, rx1154_jump3211
    elements $I18, rx1154_bstack
    le $I18, 0, rx1154_cut3212
    dec $I18
    set $I18, rx1154_bstack[$I18]
  rx1154_cut3212:
    assign rx1154_cstack, $I18
  rx1154_jump3211:
    jump $I19
  rx1154_done3208:
    rx1154_cur."!cursor_fail"()
    .return (rx1154_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_206_1347804164.33_caps" :subid("cuid_memo_347_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_206_1347804164.33_nfa" :subid("cuid_memo_348_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 61
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 58
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 61
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "O"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_207_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1318
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1158_tgt
    .local int rx1158_pos
    .local int rx1158_off
    .local int rx1158_eos
    .local int rx1158_rep
    .local pmc rx1158_cur
    .local pmc rx1158_curclass
    .local pmc rx1158_bstack
    .local pmc rx1158_cstack
    (rx1158_cur, rx1158_tgt, rx1158_pos, rx1158_curclass, rx1158_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1158_cur
    length rx1158_eos, rx1158_tgt
    eq $I19, 1, rx1158_restart3222
    gt rx1158_pos, rx1158_eos, rx1158_fail3223
    repr_get_attr_int $I11, self, rx1158_curclass, "$!from"
    ne $I11, -1, rxscan1159_done3229
    goto rxscan1159_scan3228
  rxscan1159_loop3227:
    inc rx1158_pos
    gt rx1158_pos, rx1158_eos, rx1158_fail3223
    repr_bind_attr_int rx1158_cur, rx1158_curclass, "$!from", rx1158_pos
  rxscan1159_scan3228:
    nqp_rxmark rx1158_bstack, rxscan1159_loop3227, rx1158_pos, 0
  rxscan1159_done3229:
    nqp_rxmark rx1158_bstack, rxcap1160_fail3231, rx1158_pos, 0
    add $I11, rx1158_pos, 2
    gt $I11, rx1158_eos, rx1158_fail3223
    substr $S10, rx1158_tgt, rx1158_pos, 2
    ne $S10, ucs4:"~~", rx1158_fail3223
    add rx1158_pos, 2
    nqp_rxpeek $I19, rx1158_bstack, rxcap1160_fail3231
    inc $I19
    set $I11, rx1158_bstack[$I19]
    $P11 = rx1158_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1158_pos)
    rx1158_cstack = rx1158_cur."!cursor_capture"($P11, "sym")
    goto rxcap1160_done3230
  rxcap1160_fail3231:
    goto rx1158_fail3223
  rxcap1160_done3230:
    repr_bind_attr_int rx1158_cur, rx1158_curclass, "$!pos", rx1158_pos
    $P11 = rx1158_cur."O"("%relational, :reducecheck<smartmatch>")
    repr_get_attr_int $I11, $P11, rx1158_curclass, "$!pos"
    lt $I11, 0, rx1158_fail3223
    nqp_rxmark rx1158_bstack, rxsubrule1161_pass3232, -1, 0
  rxsubrule1161_pass3232:
    rx1158_cstack = rx1158_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1158_pos, $P11, rx1158_curclass, "$!pos"
    rx1158_cur."!cursor_pass"(rx1158_pos, "infix:sym<~~>", 'backtrack'=>1)
    .return (rx1158_cur)
  rx1158_restart3222:
    repr_get_attr_obj rx1158_cstack, rx1158_cur, rx1158_curclass, "$!cstack"
  rx1158_fail3223:
    unless rx1158_bstack, rx1158_done3221
    pop $I19, rx1158_bstack
    if_null rx1158_cstack, rx1158_cstack_done3226
    unless rx1158_cstack, rx1158_cstack_done3226
    dec $I19
    set $P11, rx1158_cstack[$I19]
  rx1158_cstack_done3226:
    pop rx1158_rep, rx1158_bstack
    pop rx1158_pos, rx1158_bstack
    pop $I19, rx1158_bstack
    lt rx1158_pos, -1, rx1158_done3221
    lt rx1158_pos, 0, rx1158_fail3223
    eq $I19, 0, rx1158_fail3223
    nqp_islist $I20, rx1158_cstack
    unless $I20, rx1158_jump3224
    elements $I18, rx1158_bstack
    le $I18, 0, rx1158_cut3225
    dec $I18
    set $I18, rx1158_bstack[$I18]
  rx1158_cut3225:
    assign rx1158_cstack, $I18
  rx1158_jump3224:
    jump $I19
  rx1158_done3221:
    rx1158_cur."!cursor_fail"()
    .return (rx1158_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_207_1347804164.33_caps" :subid("cuid_memo_349_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_207_1347804164.33_nfa" :subid("cuid_memo_350_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 126
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 126
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<&&>" :subid("cuid_208_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1320
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1162_tgt
    .local int rx1162_pos
    .local int rx1162_off
    .local int rx1162_eos
    .local int rx1162_rep
    .local pmc rx1162_cur
    .local pmc rx1162_curclass
    .local pmc rx1162_bstack
    .local pmc rx1162_cstack
    (rx1162_cur, rx1162_tgt, rx1162_pos, rx1162_curclass, rx1162_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1162_cur
    length rx1162_eos, rx1162_tgt
    eq $I19, 1, rx1162_restart3235
    gt rx1162_pos, rx1162_eos, rx1162_fail3236
    repr_get_attr_int $I11, self, rx1162_curclass, "$!from"
    ne $I11, -1, rxscan1163_done3242
    goto rxscan1163_scan3241
  rxscan1163_loop3240:
    inc rx1162_pos
    gt rx1162_pos, rx1162_eos, rx1162_fail3236
    repr_bind_attr_int rx1162_cur, rx1162_curclass, "$!from", rx1162_pos
  rxscan1163_scan3241:
    nqp_rxmark rx1162_bstack, rxscan1163_loop3240, rx1162_pos, 0
  rxscan1163_done3242:
    nqp_rxmark rx1162_bstack, rxcap1164_fail3244, rx1162_pos, 0
    add $I11, rx1162_pos, 2
    gt $I11, rx1162_eos, rx1162_fail3236
    substr $S10, rx1162_tgt, rx1162_pos, 2
    ne $S10, ucs4:"&&", rx1162_fail3236
    add rx1162_pos, 2
    nqp_rxpeek $I19, rx1162_bstack, rxcap1164_fail3244
    inc $I19
    set $I11, rx1162_bstack[$I19]
    $P11 = rx1162_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1162_pos)
    rx1162_cstack = rx1162_cur."!cursor_capture"($P11, "sym")
    goto rxcap1164_done3243
  rxcap1164_fail3244:
    goto rx1162_fail3236
  rxcap1164_done3243:
    repr_bind_attr_int rx1162_cur, rx1162_curclass, "$!pos", rx1162_pos
    $P11 = rx1162_cur."O"("%tight_and, :op<if>")
    repr_get_attr_int $I11, $P11, rx1162_curclass, "$!pos"
    lt $I11, 0, rx1162_fail3236
    nqp_rxmark rx1162_bstack, rxsubrule1165_pass3245, -1, 0
  rxsubrule1165_pass3245:
    rx1162_cstack = rx1162_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1162_pos, $P11, rx1162_curclass, "$!pos"
    rx1162_cur."!cursor_pass"(rx1162_pos, "infix:sym<&&>", 'backtrack'=>1)
    .return (rx1162_cur)
  rx1162_restart3235:
    repr_get_attr_obj rx1162_cstack, rx1162_cur, rx1162_curclass, "$!cstack"
  rx1162_fail3236:
    unless rx1162_bstack, rx1162_done3234
    pop $I19, rx1162_bstack
    if_null rx1162_cstack, rx1162_cstack_done3239
    unless rx1162_cstack, rx1162_cstack_done3239
    dec $I19
    set $P11, rx1162_cstack[$I19]
  rx1162_cstack_done3239:
    pop rx1162_rep, rx1162_bstack
    pop rx1162_pos, rx1162_bstack
    pop $I19, rx1162_bstack
    lt rx1162_pos, -1, rx1162_done3234
    lt rx1162_pos, 0, rx1162_fail3236
    eq $I19, 0, rx1162_fail3236
    nqp_islist $I20, rx1162_cstack
    unless $I20, rx1162_jump3237
    elements $I18, rx1162_bstack
    le $I18, 0, rx1162_cut3238
    dec $I18
    set $I18, rx1162_bstack[$I18]
  rx1162_cut3238:
    assign rx1162_cstack, $I18
  rx1162_jump3237:
    jump $I19
  rx1162_done3234:
    rx1162_cur."!cursor_fail"()
    .return (rx1162_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_208_1347804164.33_caps" :subid("cuid_memo_351_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_208_1347804164.33_nfa" :subid("cuid_memo_352_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 38
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 38
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<||>" :subid("cuid_209_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1322
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1166_tgt
    .local int rx1166_pos
    .local int rx1166_off
    .local int rx1166_eos
    .local int rx1166_rep
    .local pmc rx1166_cur
    .local pmc rx1166_curclass
    .local pmc rx1166_bstack
    .local pmc rx1166_cstack
    (rx1166_cur, rx1166_tgt, rx1166_pos, rx1166_curclass, rx1166_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1166_cur
    length rx1166_eos, rx1166_tgt
    eq $I19, 1, rx1166_restart3248
    gt rx1166_pos, rx1166_eos, rx1166_fail3249
    repr_get_attr_int $I11, self, rx1166_curclass, "$!from"
    ne $I11, -1, rxscan1167_done3255
    goto rxscan1167_scan3254
  rxscan1167_loop3253:
    inc rx1166_pos
    gt rx1166_pos, rx1166_eos, rx1166_fail3249
    repr_bind_attr_int rx1166_cur, rx1166_curclass, "$!from", rx1166_pos
  rxscan1167_scan3254:
    nqp_rxmark rx1166_bstack, rxscan1167_loop3253, rx1166_pos, 0
  rxscan1167_done3255:
    nqp_rxmark rx1166_bstack, rxcap1168_fail3257, rx1166_pos, 0
    add $I11, rx1166_pos, 2
    gt $I11, rx1166_eos, rx1166_fail3249
    substr $S10, rx1166_tgt, rx1166_pos, 2
    ne $S10, ucs4:"||", rx1166_fail3249
    add rx1166_pos, 2
    nqp_rxpeek $I19, rx1166_bstack, rxcap1168_fail3257
    inc $I19
    set $I11, rx1166_bstack[$I19]
    $P11 = rx1166_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1166_pos)
    rx1166_cstack = rx1166_cur."!cursor_capture"($P11, "sym")
    goto rxcap1168_done3256
  rxcap1168_fail3257:
    goto rx1166_fail3249
  rxcap1168_done3256:
    repr_bind_attr_int rx1166_cur, rx1166_curclass, "$!pos", rx1166_pos
    $P11 = rx1166_cur."O"("%tight_or, :op<unless>")
    repr_get_attr_int $I11, $P11, rx1166_curclass, "$!pos"
    lt $I11, 0, rx1166_fail3249
    nqp_rxmark rx1166_bstack, rxsubrule1169_pass3258, -1, 0
  rxsubrule1169_pass3258:
    rx1166_cstack = rx1166_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1166_pos, $P11, rx1166_curclass, "$!pos"
    rx1166_cur."!cursor_pass"(rx1166_pos, "infix:sym<||>", 'backtrack'=>1)
    .return (rx1166_cur)
  rx1166_restart3248:
    repr_get_attr_obj rx1166_cstack, rx1166_cur, rx1166_curclass, "$!cstack"
  rx1166_fail3249:
    unless rx1166_bstack, rx1166_done3247
    pop $I19, rx1166_bstack
    if_null rx1166_cstack, rx1166_cstack_done3252
    unless rx1166_cstack, rx1166_cstack_done3252
    dec $I19
    set $P11, rx1166_cstack[$I19]
  rx1166_cstack_done3252:
    pop rx1166_rep, rx1166_bstack
    pop rx1166_pos, rx1166_bstack
    pop $I19, rx1166_bstack
    lt rx1166_pos, -1, rx1166_done3247
    lt rx1166_pos, 0, rx1166_fail3249
    eq $I19, 0, rx1166_fail3249
    nqp_islist $I20, rx1166_cstack
    unless $I20, rx1166_jump3250
    elements $I18, rx1166_bstack
    le $I18, 0, rx1166_cut3251
    dec $I18
    set $I18, rx1166_bstack[$I18]
  rx1166_cut3251:
    assign rx1166_cstack, $I18
  rx1166_jump3250:
    jump $I19
  rx1166_done3247:
    rx1166_cur."!cursor_fail"()
    .return (rx1166_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_209_1347804164.33_caps" :subid("cuid_memo_353_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_209_1347804164.33_nfa" :subid("cuid_memo_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 124
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 124
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<//>" :subid("cuid_210_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1323
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1170_tgt
    .local int rx1170_pos
    .local int rx1170_off
    .local int rx1170_eos
    .local int rx1170_rep
    .local pmc rx1170_cur
    .local pmc rx1170_curclass
    .local pmc rx1170_bstack
    .local pmc rx1170_cstack
    (rx1170_cur, rx1170_tgt, rx1170_pos, rx1170_curclass, rx1170_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1170_cur
    length rx1170_eos, rx1170_tgt
    eq $I19, 1, rx1170_restart3261
    gt rx1170_pos, rx1170_eos, rx1170_fail3262
    repr_get_attr_int $I11, self, rx1170_curclass, "$!from"
    ne $I11, -1, rxscan1171_done3268
    goto rxscan1171_scan3267
  rxscan1171_loop3266:
    inc rx1170_pos
    gt rx1170_pos, rx1170_eos, rx1170_fail3262
    repr_bind_attr_int rx1170_cur, rx1170_curclass, "$!from", rx1170_pos
  rxscan1171_scan3267:
    nqp_rxmark rx1170_bstack, rxscan1171_loop3266, rx1170_pos, 0
  rxscan1171_done3268:
    nqp_rxmark rx1170_bstack, rxcap1172_fail3270, rx1170_pos, 0
    add $I11, rx1170_pos, 2
    gt $I11, rx1170_eos, rx1170_fail3262
    substr $S10, rx1170_tgt, rx1170_pos, 2
    ne $S10, ucs4:"//", rx1170_fail3262
    add rx1170_pos, 2
    nqp_rxpeek $I19, rx1170_bstack, rxcap1172_fail3270
    inc $I19
    set $I11, rx1170_bstack[$I19]
    $P11 = rx1170_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1170_pos)
    rx1170_cstack = rx1170_cur."!cursor_capture"($P11, "sym")
    goto rxcap1172_done3269
  rxcap1172_fail3270:
    goto rx1170_fail3262
  rxcap1172_done3269:
    repr_bind_attr_int rx1170_cur, rx1170_curclass, "$!pos", rx1170_pos
    $P11 = rx1170_cur."O"("%tight_or, :op<defor>")
    repr_get_attr_int $I11, $P11, rx1170_curclass, "$!pos"
    lt $I11, 0, rx1170_fail3262
    nqp_rxmark rx1170_bstack, rxsubrule1173_pass3271, -1, 0
  rxsubrule1173_pass3271:
    rx1170_cstack = rx1170_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1170_pos, $P11, rx1170_curclass, "$!pos"
    rx1170_cur."!cursor_pass"(rx1170_pos, "infix:sym<//>", 'backtrack'=>1)
    .return (rx1170_cur)
  rx1170_restart3261:
    repr_get_attr_obj rx1170_cstack, rx1170_cur, rx1170_curclass, "$!cstack"
  rx1170_fail3262:
    unless rx1170_bstack, rx1170_done3260
    pop $I19, rx1170_bstack
    if_null rx1170_cstack, rx1170_cstack_done3265
    unless rx1170_cstack, rx1170_cstack_done3265
    dec $I19
    set $P11, rx1170_cstack[$I19]
  rx1170_cstack_done3265:
    pop rx1170_rep, rx1170_bstack
    pop rx1170_pos, rx1170_bstack
    pop $I19, rx1170_bstack
    lt rx1170_pos, -1, rx1170_done3260
    lt rx1170_pos, 0, rx1170_fail3262
    eq $I19, 0, rx1170_fail3262
    nqp_islist $I20, rx1170_cstack
    unless $I20, rx1170_jump3263
    elements $I18, rx1170_bstack
    le $I18, 0, rx1170_cut3264
    dec $I18
    set $I18, rx1170_bstack[$I18]
  rx1170_cut3264:
    assign rx1170_cstack, $I18
  rx1170_jump3263:
    jump $I19
  rx1170_done3260:
    rx1170_cur."!cursor_fail"()
    .return (rx1170_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_210_1347804164.33_caps" :subid("cuid_memo_355_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_210_1347804164.33_nfa" :subid("cuid_memo_356_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 47
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 47
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<?? !!>" :subid("cuid_211_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1325
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1174_tgt
    .local int rx1174_pos
    .local int rx1174_off
    .local int rx1174_eos
    .local int rx1174_rep
    .local pmc rx1174_cur
    .local pmc rx1174_curclass
    .local pmc rx1174_bstack
    .local pmc rx1174_cstack
    (rx1174_cur, rx1174_tgt, rx1174_pos, rx1174_curclass, rx1174_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1174_cur
    length rx1174_eos, rx1174_tgt
    eq $I19, 1, rx1174_restart3274
    gt rx1174_pos, rx1174_eos, rx1174_fail3275
    repr_get_attr_int $I11, self, rx1174_curclass, "$!from"
    ne $I11, -1, rxscan1175_done3281
    goto rxscan1175_scan3280
  rxscan1175_loop3279:
    inc rx1174_pos
    gt rx1174_pos, rx1174_eos, rx1174_fail3275
    repr_bind_attr_int rx1174_cur, rx1174_curclass, "$!from", rx1174_pos
  rxscan1175_scan3280:
    nqp_rxmark rx1174_bstack, rxscan1175_loop3279, rx1174_pos, 0
  rxscan1175_done3281:
    add $I11, rx1174_pos, 2
    gt $I11, rx1174_eos, rx1174_fail3275
    substr $S10, rx1174_tgt, rx1174_pos, 2
    ne $S10, ucs4:"??", rx1174_fail3275
    add rx1174_pos, 2
    repr_bind_attr_int rx1174_cur, rx1174_curclass, "$!pos", rx1174_pos
    $P11 = rx1174_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1174_curclass, "$!pos"
    lt $I11, 0, rx1174_fail3275
    repr_get_attr_int rx1174_pos, $P11, rx1174_curclass, "$!pos"
    repr_bind_attr_int rx1174_cur, rx1174_curclass, "$!pos", rx1174_pos
    $P11 = rx1174_cur."EXPR"("i=")
    repr_get_attr_int $I11, $P11, rx1174_curclass, "$!pos"
    lt $I11, 0, rx1174_fail3275
    nqp_rxmark rx1174_bstack, rxsubrule1177_pass3283, -1, 0
  rxsubrule1177_pass3283:
    rx1174_cstack = rx1174_cur."!cursor_capture"($P11, "EXPR")
    repr_get_attr_int rx1174_pos, $P11, rx1174_curclass, "$!pos"
    add $I11, rx1174_pos, 2
    gt $I11, rx1174_eos, rx1174_fail3275
    substr $S10, rx1174_tgt, rx1174_pos, 2
    ne $S10, ucs4:"!!", rx1174_fail3275
    add rx1174_pos, 2
    repr_bind_attr_int rx1174_cur, rx1174_curclass, "$!pos", rx1174_pos
    $P11 = rx1174_cur."O"("%conditional, :reducecheck<ternary>, :op<if>")
    repr_get_attr_int $I11, $P11, rx1174_curclass, "$!pos"
    lt $I11, 0, rx1174_fail3275
    nqp_rxmark rx1174_bstack, rxsubrule1178_pass3284, -1, 0
  rxsubrule1178_pass3284:
    rx1174_cstack = rx1174_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1174_pos, $P11, rx1174_curclass, "$!pos"
    rx1174_cur."!cursor_pass"(rx1174_pos, "infix:sym<?? !!>", 'backtrack'=>1)
    .return (rx1174_cur)
  rx1174_restart3274:
    repr_get_attr_obj rx1174_cstack, rx1174_cur, rx1174_curclass, "$!cstack"
  rx1174_fail3275:
    unless rx1174_bstack, rx1174_done3273
    pop $I19, rx1174_bstack
    if_null rx1174_cstack, rx1174_cstack_done3278
    unless rx1174_cstack, rx1174_cstack_done3278
    dec $I19
    set $P11, rx1174_cstack[$I19]
  rx1174_cstack_done3278:
    pop rx1174_rep, rx1174_bstack
    pop rx1174_pos, rx1174_bstack
    pop $I19, rx1174_bstack
    lt rx1174_pos, -1, rx1174_done3273
    lt rx1174_pos, 0, rx1174_fail3275
    eq $I19, 0, rx1174_fail3275
    nqp_islist $I20, rx1174_cstack
    unless $I20, rx1174_jump3276
    elements $I18, rx1174_bstack
    le $I18, 0, rx1174_cut3277
    dec $I18
    set $I18, rx1174_bstack[$I18]
  rx1174_cut3277:
    assign rx1174_cstack, $I18
  rx1174_jump3276:
    jump $I19
  rx1174_done3273:
    rx1174_cur."!cursor_fail"()
    .return (rx1174_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_211_1347804164.33_caps" :subid("cuid_memo_357_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["EXPR"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_211_1347804164.33_nfa" :subid("cuid_memo_358_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 63
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 63
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "ws"
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "EXPR"
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 33
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 33
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 8
    push $P5027, $P5028
    box $P5029, "O"
    push $P5027, $P5029
    box $P5030, 0
    push $P5027, $P5030
    push $P5001, $P5027
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<=>" :subid("cuid_212_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1333
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1179_tgt
    .local int rx1179_pos
    .local int rx1179_off
    .local int rx1179_eos
    .local int rx1179_rep
    .local pmc rx1179_cur
    .local pmc rx1179_curclass
    .local pmc rx1179_bstack
    .local pmc rx1179_cstack
    (rx1179_cur, rx1179_tgt, rx1179_pos, rx1179_curclass, rx1179_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1179_cur
    length rx1179_eos, rx1179_tgt
    eq $I19, 1, rx1179_restart3287
    gt rx1179_pos, rx1179_eos, rx1179_fail3288
    repr_get_attr_int $I11, self, rx1179_curclass, "$!from"
    ne $I11, -1, rxscan1180_done3294
    goto rxscan1180_scan3293
  rxscan1180_loop3292:
    inc rx1179_pos
    gt rx1179_pos, rx1179_eos, rx1179_fail3288
    repr_bind_attr_int rx1179_cur, rx1179_curclass, "$!from", rx1179_pos
  rxscan1180_scan3293:
    nqp_rxmark rx1179_bstack, rxscan1180_loop3292, rx1179_pos, 0
  rxscan1180_done3294:
    nqp_rxmark rx1179_bstack, rxcap1181_fail3296, rx1179_pos, 0
    add $I11, rx1179_pos, 1
    gt $I11, rx1179_eos, rx1179_fail3288
    substr $S10, rx1179_tgt, rx1179_pos, 1
    ne $S10, ucs4:"=", rx1179_fail3288
    add rx1179_pos, 1
    nqp_rxpeek $I19, rx1179_bstack, rxcap1181_fail3296
    inc $I19
    set $I11, rx1179_bstack[$I19]
    $P11 = rx1179_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1179_pos)
    rx1179_cstack = rx1179_cur."!cursor_capture"($P11, "sym")
    goto rxcap1181_done3295
  rxcap1181_fail3296:
    goto rx1179_fail3288
  rxcap1181_done3295:
    repr_bind_attr_int rx1179_cur, rx1179_curclass, "$!pos", rx1179_pos
    $P11 = rx1179_cur."panic"("Assignment (\"=\") not supported in NQP, use \":=\" instead")
    repr_get_attr_int $I11, $P11, rx1179_curclass, "$!pos"
    lt $I11, 0, rx1179_fail3288
    repr_get_attr_int rx1179_pos, $P11, rx1179_curclass, "$!pos"
    rx1179_cur."!cursor_pass"(rx1179_pos, "infix:sym<=>", 'backtrack'=>1)
    .return (rx1179_cur)
  rx1179_restart3287:
    repr_get_attr_obj rx1179_cstack, rx1179_cur, rx1179_curclass, "$!cstack"
  rx1179_fail3288:
    unless rx1179_bstack, rx1179_done3286
    pop $I19, rx1179_bstack
    if_null rx1179_cstack, rx1179_cstack_done3291
    unless rx1179_cstack, rx1179_cstack_done3291
    dec $I19
    set $P11, rx1179_cstack[$I19]
  rx1179_cstack_done3291:
    pop rx1179_rep, rx1179_bstack
    pop rx1179_pos, rx1179_bstack
    pop $I19, rx1179_bstack
    lt rx1179_pos, -1, rx1179_done3286
    lt rx1179_pos, 0, rx1179_fail3288
    eq $I19, 0, rx1179_fail3288
    nqp_islist $I20, rx1179_cstack
    unless $I20, rx1179_jump3289
    elements $I18, rx1179_bstack
    le $I18, 0, rx1179_cut3290
    dec $I18
    set $I18, rx1179_bstack[$I18]
  rx1179_cut3290:
    assign rx1179_cstack, $I18
  rx1179_jump3289:
    jump $I19
  rx1179_done3286:
    rx1179_cur."!cursor_fail"()
    .return (rx1179_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_212_1347804164.33_caps" :subid("cuid_memo_359_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_212_1347804164.33_nfa" :subid("cuid_memo_360_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 61
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "panic"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<:=>" :subid("cuid_213_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1336
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1183_tgt
    .local int rx1183_pos
    .local int rx1183_off
    .local int rx1183_eos
    .local int rx1183_rep
    .local pmc rx1183_cur
    .local pmc rx1183_curclass
    .local pmc rx1183_bstack
    .local pmc rx1183_cstack
    (rx1183_cur, rx1183_tgt, rx1183_pos, rx1183_curclass, rx1183_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1183_cur
    length rx1183_eos, rx1183_tgt
    eq $I19, 1, rx1183_restart3300
    gt rx1183_pos, rx1183_eos, rx1183_fail3301
    repr_get_attr_int $I11, self, rx1183_curclass, "$!from"
    ne $I11, -1, rxscan1184_done3307
    goto rxscan1184_scan3306
  rxscan1184_loop3305:
    inc rx1183_pos
    gt rx1183_pos, rx1183_eos, rx1183_fail3301
    repr_bind_attr_int rx1183_cur, rx1183_curclass, "$!from", rx1183_pos
  rxscan1184_scan3306:
    nqp_rxmark rx1183_bstack, rxscan1184_loop3305, rx1183_pos, 0
  rxscan1184_done3307:
    nqp_rxmark rx1183_bstack, rxcap1185_fail3309, rx1183_pos, 0
    add $I11, rx1183_pos, 2
    gt $I11, rx1183_eos, rx1183_fail3301
    substr $S10, rx1183_tgt, rx1183_pos, 2
    ne $S10, ucs4:":=", rx1183_fail3301
    add rx1183_pos, 2
    nqp_rxpeek $I19, rx1183_bstack, rxcap1185_fail3309
    inc $I19
    set $I11, rx1183_bstack[$I19]
    $P11 = rx1183_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1183_pos)
    rx1183_cstack = rx1183_cur."!cursor_capture"($P11, "sym")
    goto rxcap1185_done3308
  rxcap1185_fail3309:
    goto rx1183_fail3301
  rxcap1185_done3308:
    repr_bind_attr_int rx1183_cur, rx1183_curclass, "$!pos", rx1183_pos
    $P11 = rx1183_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1183_curclass, "$!pos"
    lt $I11, 0, rx1183_fail3301
    nqp_rxmark rx1183_bstack, rxsubrule1186_pass3310, -1, 0
  rxsubrule1186_pass3310:
    rx1183_cstack = rx1183_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1183_pos, $P11, rx1183_curclass, "$!pos"
    rx1183_cur."!cursor_pass"(rx1183_pos, "infix:sym<:=>", 'backtrack'=>1)
    .return (rx1183_cur)
  rx1183_restart3300:
    repr_get_attr_obj rx1183_cstack, rx1183_cur, rx1183_curclass, "$!cstack"
  rx1183_fail3301:
    unless rx1183_bstack, rx1183_done3299
    pop $I19, rx1183_bstack
    if_null rx1183_cstack, rx1183_cstack_done3304
    unless rx1183_cstack, rx1183_cstack_done3304
    dec $I19
    set $P11, rx1183_cstack[$I19]
  rx1183_cstack_done3304:
    pop rx1183_rep, rx1183_bstack
    pop rx1183_pos, rx1183_bstack
    pop $I19, rx1183_bstack
    lt rx1183_pos, -1, rx1183_done3299
    lt rx1183_pos, 0, rx1183_fail3301
    eq $I19, 0, rx1183_fail3301
    nqp_islist $I20, rx1183_cstack
    unless $I20, rx1183_jump3302
    elements $I18, rx1183_bstack
    le $I18, 0, rx1183_cut3303
    dec $I18
    set $I18, rx1183_bstack[$I18]
  rx1183_cut3303:
    assign rx1183_cstack, $I18
  rx1183_jump3302:
    jump $I19
  rx1183_done3299:
    rx1183_cur."!cursor_fail"()
    .return (rx1183_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_213_1347804164.33_caps" :subid("cuid_memo_361_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_213_1347804164.33_nfa" :subid("cuid_memo_362_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 61
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 8
    push $P5011, $P5012
    box $P5013, "O"
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<::=>" :subid("cuid_214_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1337
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1187_tgt
    .local int rx1187_pos
    .local int rx1187_off
    .local int rx1187_eos
    .local int rx1187_rep
    .local pmc rx1187_cur
    .local pmc rx1187_curclass
    .local pmc rx1187_bstack
    .local pmc rx1187_cstack
    (rx1187_cur, rx1187_tgt, rx1187_pos, rx1187_curclass, rx1187_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1187_cur
    length rx1187_eos, rx1187_tgt
    eq $I19, 1, rx1187_restart3313
    gt rx1187_pos, rx1187_eos, rx1187_fail3314
    repr_get_attr_int $I11, self, rx1187_curclass, "$!from"
    ne $I11, -1, rxscan1188_done3320
    goto rxscan1188_scan3319
  rxscan1188_loop3318:
    inc rx1187_pos
    gt rx1187_pos, rx1187_eos, rx1187_fail3314
    repr_bind_attr_int rx1187_cur, rx1187_curclass, "$!from", rx1187_pos
  rxscan1188_scan3319:
    nqp_rxmark rx1187_bstack, rxscan1188_loop3318, rx1187_pos, 0
  rxscan1188_done3320:
    nqp_rxmark rx1187_bstack, rxcap1189_fail3322, rx1187_pos, 0
    add $I11, rx1187_pos, 3
    gt $I11, rx1187_eos, rx1187_fail3314
    substr $S10, rx1187_tgt, rx1187_pos, 3
    ne $S10, ucs4:"::=", rx1187_fail3314
    add rx1187_pos, 3
    nqp_rxpeek $I19, rx1187_bstack, rxcap1189_fail3322
    inc $I19
    set $I11, rx1187_bstack[$I19]
    $P11 = rx1187_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1187_pos)
    rx1187_cstack = rx1187_cur."!cursor_capture"($P11, "sym")
    goto rxcap1189_done3321
  rxcap1189_fail3322:
    goto rx1187_fail3314
  rxcap1189_done3321:
    repr_bind_attr_int rx1187_cur, rx1187_curclass, "$!pos", rx1187_pos
    $P11 = rx1187_cur."O"("%assignment, :op<bind>")
    repr_get_attr_int $I11, $P11, rx1187_curclass, "$!pos"
    lt $I11, 0, rx1187_fail3314
    nqp_rxmark rx1187_bstack, rxsubrule1190_pass3323, -1, 0
  rxsubrule1190_pass3323:
    rx1187_cstack = rx1187_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1187_pos, $P11, rx1187_curclass, "$!pos"
    rx1187_cur."!cursor_pass"(rx1187_pos, "infix:sym<::=>", 'backtrack'=>1)
    .return (rx1187_cur)
  rx1187_restart3313:
    repr_get_attr_obj rx1187_cstack, rx1187_cur, rx1187_curclass, "$!cstack"
  rx1187_fail3314:
    unless rx1187_bstack, rx1187_done3312
    pop $I19, rx1187_bstack
    if_null rx1187_cstack, rx1187_cstack_done3317
    unless rx1187_cstack, rx1187_cstack_done3317
    dec $I19
    set $P11, rx1187_cstack[$I19]
  rx1187_cstack_done3317:
    pop rx1187_rep, rx1187_bstack
    pop rx1187_pos, rx1187_bstack
    pop $I19, rx1187_bstack
    lt rx1187_pos, -1, rx1187_done3312
    lt rx1187_pos, 0, rx1187_fail3314
    eq $I19, 0, rx1187_fail3314
    nqp_islist $I20, rx1187_cstack
    unless $I20, rx1187_jump3315
    elements $I18, rx1187_bstack
    le $I18, 0, rx1187_cut3316
    dec $I18
    set $I18, rx1187_bstack[$I18]
  rx1187_cut3316:
    assign rx1187_cstack, $I18
  rx1187_jump3315:
    jump $I19
  rx1187_done3312:
    rx1187_cur."!cursor_fail"()
    .return (rx1187_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_214_1347804164.33_caps" :subid("cuid_memo_363_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_214_1347804164.33_nfa" :subid("cuid_memo_364_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 58
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 61
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 8
    push $P5015, $P5016
    box $P5017, "O"
    push $P5015, $P5017
    box $P5018, 0
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<,>" :subid("cuid_215_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1339
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1191_tgt
    .local int rx1191_pos
    .local int rx1191_off
    .local int rx1191_eos
    .local int rx1191_rep
    .local pmc rx1191_cur
    .local pmc rx1191_curclass
    .local pmc rx1191_bstack
    .local pmc rx1191_cstack
    (rx1191_cur, rx1191_tgt, rx1191_pos, rx1191_curclass, rx1191_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1191_cur
    length rx1191_eos, rx1191_tgt
    eq $I19, 1, rx1191_restart3326
    gt rx1191_pos, rx1191_eos, rx1191_fail3327
    repr_get_attr_int $I11, self, rx1191_curclass, "$!from"
    ne $I11, -1, rxscan1192_done3333
    goto rxscan1192_scan3332
  rxscan1192_loop3331:
    inc rx1191_pos
    gt rx1191_pos, rx1191_eos, rx1191_fail3327
    repr_bind_attr_int rx1191_cur, rx1191_curclass, "$!from", rx1191_pos
  rxscan1192_scan3332:
    nqp_rxmark rx1191_bstack, rxscan1192_loop3331, rx1191_pos, 0
  rxscan1192_done3333:
    nqp_rxmark rx1191_bstack, rxcap1193_fail3335, rx1191_pos, 0
    add $I11, rx1191_pos, 1
    gt $I11, rx1191_eos, rx1191_fail3327
    substr $S10, rx1191_tgt, rx1191_pos, 1
    ne $S10, ucs4:",", rx1191_fail3327
    add rx1191_pos, 1
    nqp_rxpeek $I19, rx1191_bstack, rxcap1193_fail3335
    inc $I19
    set $I11, rx1191_bstack[$I19]
    $P11 = rx1191_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1191_pos)
    rx1191_cstack = rx1191_cur."!cursor_capture"($P11, "sym")
    goto rxcap1193_done3334
  rxcap1193_fail3335:
    goto rx1191_fail3327
  rxcap1193_done3334:
    repr_bind_attr_int rx1191_cur, rx1191_curclass, "$!pos", rx1191_pos
    $P11 = rx1191_cur."O"("%comma, :op<list>")
    repr_get_attr_int $I11, $P11, rx1191_curclass, "$!pos"
    lt $I11, 0, rx1191_fail3327
    nqp_rxmark rx1191_bstack, rxsubrule1194_pass3336, -1, 0
  rxsubrule1194_pass3336:
    rx1191_cstack = rx1191_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1191_pos, $P11, rx1191_curclass, "$!pos"
    rx1191_cur."!cursor_pass"(rx1191_pos, "infix:sym<,>", 'backtrack'=>1)
    .return (rx1191_cur)
  rx1191_restart3326:
    repr_get_attr_obj rx1191_cstack, rx1191_cur, rx1191_curclass, "$!cstack"
  rx1191_fail3327:
    unless rx1191_bstack, rx1191_done3325
    pop $I19, rx1191_bstack
    if_null rx1191_cstack, rx1191_cstack_done3330
    unless rx1191_cstack, rx1191_cstack_done3330
    dec $I19
    set $P11, rx1191_cstack[$I19]
  rx1191_cstack_done3330:
    pop rx1191_rep, rx1191_bstack
    pop rx1191_pos, rx1191_bstack
    pop $I19, rx1191_bstack
    lt rx1191_pos, -1, rx1191_done3325
    lt rx1191_pos, 0, rx1191_fail3327
    eq $I19, 0, rx1191_fail3327
    nqp_islist $I20, rx1191_cstack
    unless $I20, rx1191_jump3328
    elements $I18, rx1191_bstack
    le $I18, 0, rx1191_cut3329
    dec $I18
    set $I18, rx1191_bstack[$I18]
  rx1191_cut3329:
    assign rx1191_cstack, $I18
  rx1191_jump3328:
    jump $I19
  rx1191_done3325:
    rx1191_cur."!cursor_fail"()
    .return (rx1191_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_215_1347804164.33_caps" :subid("cuid_memo_365_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_215_1347804164.33_nfa" :subid("cuid_memo_366_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 44
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 8
    push $P5007, $P5008
    box $P5009, "O"
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_216_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1341
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_397_1347804164.33' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1195_tgt
    .local int rx1195_pos
    .local int rx1195_off
    .local int rx1195_eos
    .local int rx1195_rep
    .local pmc rx1195_cur
    .local pmc rx1195_curclass
    .local pmc rx1195_bstack
    .local pmc rx1195_cstack
    (rx1195_cur, rx1195_tgt, rx1195_pos, rx1195_curclass, rx1195_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1195_cur
    length rx1195_eos, rx1195_tgt
    eq $I19, 1, rx1195_restart3339
    gt rx1195_pos, rx1195_eos, rx1195_fail3340
    repr_get_attr_int $I11, self, rx1195_curclass, "$!from"
    ne $I11, -1, rxscan1196_done3346
    goto rxscan1196_scan3345
  rxscan1196_loop3344:
    inc rx1195_pos
    gt rx1195_pos, rx1195_eos, rx1195_fail3340
    repr_bind_attr_int rx1195_cur, rx1195_curclass, "$!from", rx1195_pos
  rxscan1196_scan3345:
    nqp_rxmark rx1195_bstack, rxscan1196_loop3344, rx1195_pos, 0
  rxscan1196_done3346:
    nqp_rxmark rx1195_bstack, rxcap1197_fail3348, rx1195_pos, 0
    add $I11, rx1195_pos, 6
    gt $I11, rx1195_eos, rx1195_fail3340
    substr $S10, rx1195_tgt, rx1195_pos, 6
    ne $S10, ucs4:"return", rx1195_fail3340
    add rx1195_pos, 6
    nqp_rxpeek $I19, rx1195_bstack, rxcap1197_fail3348
    inc $I19
    set $I11, rx1195_bstack[$I19]
    $P11 = rx1195_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1195_pos)
    rx1195_cstack = rx1195_cur."!cursor_capture"($P11, "sym")
    goto rxcap1197_done3347
  rxcap1197_fail3348:
    goto rx1195_fail3340
  rxcap1197_done3347:
    ge rx1195_pos, rx1195_eos, rx1195_fail3340
    is_cclass $I11, .CCLASS_WHITESPACE, rx1195_tgt, rx1195_pos
    unless $I11, rx1195_fail3340
    add rx1195_pos, 1
    repr_bind_attr_int rx1195_cur, rx1195_curclass, "$!pos", rx1195_pos
    $P11 = rx1195_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1195_curclass, "$!pos"
    lt $I11, 0, rx1195_fail3340
    nqp_rxmark rx1195_bstack, rxsubrule1198_pass3349, -1, 0
  rxsubrule1198_pass3349:
    rx1195_cstack = rx1195_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1195_pos, $P11, rx1195_curclass, "$!pos"
    repr_bind_attr_int rx1195_cur, rx1195_curclass, "$!pos", rx1195_pos
    store_lex unicode:"$\x{a2}", rx1195_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_397_1347804164.33' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1195_cur."!cursor_pass"(rx1195_pos, "prefix:sym<return>", 'backtrack'=>1)
    .return (rx1195_cur)
  rx1195_restart3339:
    repr_get_attr_obj rx1195_cstack, rx1195_cur, rx1195_curclass, "$!cstack"
  rx1195_fail3340:
    unless rx1195_bstack, rx1195_done3338
    pop $I19, rx1195_bstack
    if_null rx1195_cstack, rx1195_cstack_done3343
    unless rx1195_cstack, rx1195_cstack_done3343
    dec $I19
    set $P11, rx1195_cstack[$I19]
  rx1195_cstack_done3343:
    pop rx1195_rep, rx1195_bstack
    pop rx1195_pos, rx1195_bstack
    pop $I19, rx1195_bstack
    lt rx1195_pos, -1, rx1195_done3338
    lt rx1195_pos, 0, rx1195_fail3340
    eq $I19, 0, rx1195_fail3340
    nqp_islist $I20, rx1195_cstack
    unless $I20, rx1195_jump3341
    elements $I18, rx1195_bstack
    le $I18, 0, rx1195_cut3342
    dec $I18
    set $I18, rx1195_bstack[$I18]
  rx1195_cut3342:
    assign rx1195_cstack, $I18
  rx1195_jump3341:
    jump $I19
  rx1195_done3338:
    rx1195_cur."!cursor_fail"()
    .return (rx1195_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_216_1347804164.33_caps" :subid("cuid_memo_367_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_216_1347804164.33_nfa" :subid("cuid_memo_368_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 114
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 116
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 117
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 2
    push $P5019, $P5020
    box $P5021, 114
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 2
    push $P5023, $P5024
    box $P5025, 110
    push $P5023, $P5025
    box $P5026, 7
    push $P5023, $P5026
    push $P5001, $P5023
    new $P5027, 'ResizablePMCArray'
    box $P5028, 4
    push $P5027, $P5028
    box $P5029, 32
    push $P5027, $P5029
    box $P5030, 8
    push $P5027, $P5030
    push $P5001, $P5027
    new $P5031, 'ResizablePMCArray'
    box $P5032, 8
    push $P5031, $P5032
    box $P5033, "O"
    push $P5031, $P5033
    box $P5034, 9
    push $P5031, $P5034
    push $P5001, $P5031
    new $P5035, 'ResizablePMCArray'
    box $P5036, 0
    push $P5035, $P5036
    box $P5037, 0
    push $P5035, $P5037
    box $P5038, 0
    push $P5035, $P5038
    push $P5001, $P5035
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_397_1347804164.33") :anon :lex :outer("cuid_216_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1341

    box $P5001, 1
    store_dynamic_lex "$*RETURN_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_217_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1342
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1199_tgt
    .local int rx1199_pos
    .local int rx1199_off
    .local int rx1199_eos
    .local int rx1199_rep
    .local pmc rx1199_cur
    .local pmc rx1199_curclass
    .local pmc rx1199_bstack
    .local pmc rx1199_cstack
    (rx1199_cur, rx1199_tgt, rx1199_pos, rx1199_curclass, rx1199_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1199_cur
    length rx1199_eos, rx1199_tgt
    eq $I19, 1, rx1199_restart3352
    gt rx1199_pos, rx1199_eos, rx1199_fail3353
    repr_get_attr_int $I11, self, rx1199_curclass, "$!from"
    ne $I11, -1, rxscan1200_done3359
    goto rxscan1200_scan3358
  rxscan1200_loop3357:
    inc rx1199_pos
    gt rx1199_pos, rx1199_eos, rx1199_fail3353
    repr_bind_attr_int rx1199_cur, rx1199_curclass, "$!from", rx1199_pos
  rxscan1200_scan3358:
    nqp_rxmark rx1199_bstack, rxscan1200_loop3357, rx1199_pos, 0
  rxscan1200_done3359:
    nqp_rxmark rx1199_bstack, rxcap1201_fail3361, rx1199_pos, 0
    add $I11, rx1199_pos, 4
    gt $I11, rx1199_eos, rx1199_fail3353
    substr $S10, rx1199_tgt, rx1199_pos, 4
    ne $S10, ucs4:"make", rx1199_fail3353
    add rx1199_pos, 4
    nqp_rxpeek $I19, rx1199_bstack, rxcap1201_fail3361
    inc $I19
    set $I11, rx1199_bstack[$I19]
    $P11 = rx1199_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1199_pos)
    rx1199_cstack = rx1199_cur."!cursor_capture"($P11, "sym")
    goto rxcap1201_done3360
  rxcap1201_fail3361:
    goto rx1199_fail3353
  rxcap1201_done3360:
    ge rx1199_pos, rx1199_eos, rx1199_fail3353
    is_cclass $I11, .CCLASS_WHITESPACE, rx1199_tgt, rx1199_pos
    unless $I11, rx1199_fail3353
    add rx1199_pos, 1
    repr_bind_attr_int rx1199_cur, rx1199_curclass, "$!pos", rx1199_pos
    $P11 = rx1199_cur."O"("%list_prefix")
    repr_get_attr_int $I11, $P11, rx1199_curclass, "$!pos"
    lt $I11, 0, rx1199_fail3353
    nqp_rxmark rx1199_bstack, rxsubrule1202_pass3362, -1, 0
  rxsubrule1202_pass3362:
    rx1199_cstack = rx1199_cur."!cursor_capture"($P11, "O")
    repr_get_attr_int rx1199_pos, $P11, rx1199_curclass, "$!pos"
    rx1199_cur."!cursor_pass"(rx1199_pos, "prefix:sym<make>", 'backtrack'=>1)
    .return (rx1199_cur)
  rx1199_restart3352:
    repr_get_attr_obj rx1199_cstack, rx1199_cur, rx1199_curclass, "$!cstack"
  rx1199_fail3353:
    unless rx1199_bstack, rx1199_done3351
    pop $I19, rx1199_bstack
    if_null rx1199_cstack, rx1199_cstack_done3356
    unless rx1199_cstack, rx1199_cstack_done3356
    dec $I19
    set $P11, rx1199_cstack[$I19]
  rx1199_cstack_done3356:
    pop rx1199_rep, rx1199_bstack
    pop rx1199_pos, rx1199_bstack
    pop $I19, rx1199_bstack
    lt rx1199_pos, -1, rx1199_done3351
    lt rx1199_pos, 0, rx1199_fail3353
    eq $I19, 0, rx1199_fail3353
    nqp_islist $I20, rx1199_cstack
    unless $I20, rx1199_jump3354
    elements $I18, rx1199_bstack
    le $I18, 0, rx1199_cut3355
    dec $I18
    set $I18, rx1199_bstack[$I18]
  rx1199_cut3355:
    assign rx1199_cstack, $I18
  rx1199_jump3354:
    jump $I19
  rx1199_done3351:
    rx1199_cur."!cursor_fail"()
    .return (rx1199_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_217_1347804164.33_caps" :subid("cuid_memo_369_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    box $P5003, 0
    set $P5001["O"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_217_1347804164.33_nfa" :subid("cuid_memo_370_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 97
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 107
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 101
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 4
    push $P5019, $P5020
    box $P5021, 32
    push $P5019, $P5021
    box $P5022, 6
    push $P5019, $P5022
    push $P5001, $P5019
    new $P5023, 'ResizablePMCArray'
    box $P5024, 8
    push $P5023, $P5024
    box $P5025, "O"
    push $P5023, $P5025
    box $P5026, 0
    push $P5023, $P5026
    push $P5001, $P5023
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_218_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1343
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_398_1347804164.33' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1203_tgt
    .local int rx1203_pos
    .local int rx1203_off
    .local int rx1203_eos
    .local int rx1203_rep
    .local pmc rx1203_cur
    .local pmc rx1203_curclass
    .local pmc rx1203_bstack
    .local pmc rx1203_cstack
    (rx1203_cur, rx1203_tgt, rx1203_pos, rx1203_curclass, rx1203_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1203_cur
    length rx1203_eos, rx1203_tgt
    eq $I19, 1, rx1203_restart3365
    gt rx1203_pos, rx1203_eos, rx1203_fail3366
    repr_get_attr_int $I11, self, rx1203_curclass, "$!from"
    ne $I11, -1, rxscan1204_done3372
    goto rxscan1204_scan3371
  rxscan1204_loop3370:
    inc rx1203_pos
    gt rx1203_pos, rx1203_eos, rx1203_fail3366
    repr_bind_attr_int rx1203_cur, rx1203_curclass, "$!from", rx1203_pos
  rxscan1204_scan3371:
    nqp_rxmark rx1203_bstack, rxscan1204_loop3370, rx1203_pos, 0
  rxscan1204_done3372:
    nqp_rxmark rx1203_bstack, rxcap1205_fail3374, rx1203_pos, 0
    add $I11, rx1203_pos, 4
    gt $I11, rx1203_eos, rx1203_fail3366
    substr $S10, rx1203_tgt, rx1203_pos, 4
    ne $S10, ucs4:"last", rx1203_fail3366
    add rx1203_pos, 4
    nqp_rxpeek $I19, rx1203_bstack, rxcap1205_fail3374
    inc $I19
    set $I11, rx1203_bstack[$I19]
    $P11 = rx1203_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1203_pos)
    rx1203_cstack = rx1203_cur."!cursor_capture"($P11, "sym")
    goto rxcap1205_done3373
  rxcap1205_fail3374:
    goto rx1203_fail3366
  rxcap1205_done3373:
    repr_bind_attr_int rx1203_cur, rx1203_curclass, "$!pos", rx1203_pos
    store_lex unicode:"$\x{a2}", rx1203_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_398_1347804164.33' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1203_cur."!cursor_pass"(rx1203_pos, "term:sym<last>", 'backtrack'=>1)
    .return (rx1203_cur)
  rx1203_restart3365:
    repr_get_attr_obj rx1203_cstack, rx1203_cur, rx1203_curclass, "$!cstack"
  rx1203_fail3366:
    unless rx1203_bstack, rx1203_done3364
    pop $I19, rx1203_bstack
    if_null rx1203_cstack, rx1203_cstack_done3369
    unless rx1203_cstack, rx1203_cstack_done3369
    dec $I19
    set $P11, rx1203_cstack[$I19]
  rx1203_cstack_done3369:
    pop rx1203_rep, rx1203_bstack
    pop rx1203_pos, rx1203_bstack
    pop $I19, rx1203_bstack
    lt rx1203_pos, -1, rx1203_done3364
    lt rx1203_pos, 0, rx1203_fail3366
    eq $I19, 0, rx1203_fail3366
    nqp_islist $I20, rx1203_cstack
    unless $I20, rx1203_jump3367
    elements $I18, rx1203_bstack
    le $I18, 0, rx1203_cut3368
    dec $I18
    set $I18, rx1203_bstack[$I18]
  rx1203_cut3368:
    assign rx1203_cstack, $I18
  rx1203_jump3367:
    jump $I19
  rx1203_done3364:
    rx1203_cur."!cursor_fail"()
    .return (rx1203_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_218_1347804164.33_caps" :subid("cuid_memo_371_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_218_1347804164.33_nfa" :subid("cuid_memo_372_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 108
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 97
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 115
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 116
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_398_1347804164.33") :anon :lex :outer("cuid_218_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1343

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_219_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1344
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_399_1347804164.33' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1206_tgt
    .local int rx1206_pos
    .local int rx1206_off
    .local int rx1206_eos
    .local int rx1206_rep
    .local pmc rx1206_cur
    .local pmc rx1206_curclass
    .local pmc rx1206_bstack
    .local pmc rx1206_cstack
    (rx1206_cur, rx1206_tgt, rx1206_pos, rx1206_curclass, rx1206_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1206_cur
    length rx1206_eos, rx1206_tgt
    eq $I19, 1, rx1206_restart3377
    gt rx1206_pos, rx1206_eos, rx1206_fail3378
    repr_get_attr_int $I11, self, rx1206_curclass, "$!from"
    ne $I11, -1, rxscan1207_done3384
    goto rxscan1207_scan3383
  rxscan1207_loop3382:
    inc rx1206_pos
    gt rx1206_pos, rx1206_eos, rx1206_fail3378
    repr_bind_attr_int rx1206_cur, rx1206_curclass, "$!from", rx1206_pos
  rxscan1207_scan3383:
    nqp_rxmark rx1206_bstack, rxscan1207_loop3382, rx1206_pos, 0
  rxscan1207_done3384:
    nqp_rxmark rx1206_bstack, rxcap1208_fail3386, rx1206_pos, 0
    add $I11, rx1206_pos, 4
    gt $I11, rx1206_eos, rx1206_fail3378
    substr $S10, rx1206_tgt, rx1206_pos, 4
    ne $S10, ucs4:"next", rx1206_fail3378
    add rx1206_pos, 4
    nqp_rxpeek $I19, rx1206_bstack, rxcap1208_fail3386
    inc $I19
    set $I11, rx1206_bstack[$I19]
    $P11 = rx1206_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1206_pos)
    rx1206_cstack = rx1206_cur."!cursor_capture"($P11, "sym")
    goto rxcap1208_done3385
  rxcap1208_fail3386:
    goto rx1206_fail3378
  rxcap1208_done3385:
    repr_bind_attr_int rx1206_cur, rx1206_curclass, "$!pos", rx1206_pos
    store_lex unicode:"$\x{a2}", rx1206_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_399_1347804164.33' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1206_cur."!cursor_pass"(rx1206_pos, "term:sym<next>", 'backtrack'=>1)
    .return (rx1206_cur)
  rx1206_restart3377:
    repr_get_attr_obj rx1206_cstack, rx1206_cur, rx1206_curclass, "$!cstack"
  rx1206_fail3378:
    unless rx1206_bstack, rx1206_done3376
    pop $I19, rx1206_bstack
    if_null rx1206_cstack, rx1206_cstack_done3381
    unless rx1206_cstack, rx1206_cstack_done3381
    dec $I19
    set $P11, rx1206_cstack[$I19]
  rx1206_cstack_done3381:
    pop rx1206_rep, rx1206_bstack
    pop rx1206_pos, rx1206_bstack
    pop $I19, rx1206_bstack
    lt rx1206_pos, -1, rx1206_done3376
    lt rx1206_pos, 0, rx1206_fail3378
    eq $I19, 0, rx1206_fail3378
    nqp_islist $I20, rx1206_cstack
    unless $I20, rx1206_jump3379
    elements $I18, rx1206_bstack
    le $I18, 0, rx1206_cut3380
    dec $I18
    set $I18, rx1206_bstack[$I18]
  rx1206_cut3380:
    assign rx1206_cstack, $I18
  rx1206_jump3379:
    jump $I19
  rx1206_done3376:
    rx1206_cur."!cursor_fail"()
    .return (rx1206_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_219_1347804164.33_caps" :subid("cuid_memo_373_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_219_1347804164.33_nfa" :subid("cuid_memo_374_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 110
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 120
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 116
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_399_1347804164.33") :anon :lex :outer("cuid_219_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1344

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_220_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1345
    .param pmc _lex_param_0 
    .const 'Sub' $P5004 = 'cuid_400_1347804164.33' 
    capture_lex $P5004 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1209_tgt
    .local int rx1209_pos
    .local int rx1209_off
    .local int rx1209_eos
    .local int rx1209_rep
    .local pmc rx1209_cur
    .local pmc rx1209_curclass
    .local pmc rx1209_bstack
    .local pmc rx1209_cstack
    (rx1209_cur, rx1209_tgt, rx1209_pos, rx1209_curclass, rx1209_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1209_cur
    length rx1209_eos, rx1209_tgt
    eq $I19, 1, rx1209_restart3389
    gt rx1209_pos, rx1209_eos, rx1209_fail3390
    repr_get_attr_int $I11, self, rx1209_curclass, "$!from"
    ne $I11, -1, rxscan1210_done3396
    goto rxscan1210_scan3395
  rxscan1210_loop3394:
    inc rx1209_pos
    gt rx1209_pos, rx1209_eos, rx1209_fail3390
    repr_bind_attr_int rx1209_cur, rx1209_curclass, "$!from", rx1209_pos
  rxscan1210_scan3395:
    nqp_rxmark rx1209_bstack, rxscan1210_loop3394, rx1209_pos, 0
  rxscan1210_done3396:
    nqp_rxmark rx1209_bstack, rxcap1211_fail3398, rx1209_pos, 0
    add $I11, rx1209_pos, 4
    gt $I11, rx1209_eos, rx1209_fail3390
    substr $S10, rx1209_tgt, rx1209_pos, 4
    ne $S10, ucs4:"redo", rx1209_fail3390
    add rx1209_pos, 4
    nqp_rxpeek $I19, rx1209_bstack, rxcap1211_fail3398
    inc $I19
    set $I11, rx1209_bstack[$I19]
    $P11 = rx1209_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1209_pos)
    rx1209_cstack = rx1209_cur."!cursor_capture"($P11, "sym")
    goto rxcap1211_done3397
  rxcap1211_fail3398:
    goto rx1209_fail3390
  rxcap1211_done3397:
    repr_bind_attr_int rx1209_cur, rx1209_curclass, "$!pos", rx1209_pos
    store_lex unicode:"$\x{a2}", rx1209_cur
    $P5001 = $P101."MATCH"()
    set $P102, $P5001
    .const 'Sub' $P5002 = 'cuid_400_1347804164.33' 
    capture_lex $P5002
    $P5003 = $P5002()
    rx1209_cur."!cursor_pass"(rx1209_pos, "term:sym<redo>", 'backtrack'=>1)
    .return (rx1209_cur)
  rx1209_restart3389:
    repr_get_attr_obj rx1209_cstack, rx1209_cur, rx1209_curclass, "$!cstack"
  rx1209_fail3390:
    unless rx1209_bstack, rx1209_done3388
    pop $I19, rx1209_bstack
    if_null rx1209_cstack, rx1209_cstack_done3393
    unless rx1209_cstack, rx1209_cstack_done3393
    dec $I19
    set $P11, rx1209_cstack[$I19]
  rx1209_cstack_done3393:
    pop rx1209_rep, rx1209_bstack
    pop rx1209_pos, rx1209_bstack
    pop $I19, rx1209_bstack
    lt rx1209_pos, -1, rx1209_done3388
    lt rx1209_pos, 0, rx1209_fail3390
    eq $I19, 0, rx1209_fail3390
    nqp_islist $I20, rx1209_cstack
    unless $I20, rx1209_jump3391
    elements $I18, rx1209_bstack
    le $I18, 0, rx1209_cut3392
    dec $I18
    set $I18, rx1209_bstack[$I18]
  rx1209_cut3392:
    assign rx1209_cstack, $I18
  rx1209_jump3391:
    jump $I19
  rx1209_done3388:
    rx1209_cur."!cursor_fail"()
    .return (rx1209_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_220_1347804164.33_caps" :subid("cuid_memo_375_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["sym"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_220_1347804164.33_nfa" :subid("cuid_memo_376_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 114
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 101
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 2
    push $P5011, $P5012
    box $P5013, 100
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 111
    push $P5015, $P5017
    box $P5018, 5
    push $P5015, $P5018
    push $P5001, $P5015
    new $P5019, 'ResizablePMCArray'
    box $P5020, 0
    push $P5019, $P5020
    box $P5021, 0
    push $P5019, $P5021
    box $P5022, 0
    push $P5019, $P5022
    push $P5001, $P5019
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_400_1347804164.33") :anon :lex :outer("cuid_220_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1345

    box $P5001, 1
    store_dynamic_lex "$*CONTROL_USED", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "smartmatch" :subid("cuid_221_1347804164.33") :anon :lex :outer("cuid_222_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1347
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$t", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3399
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5003
  fallback3399:
    set $P101, $P5002
    set $P5004, _lex_param_1[1]
    unless_null $P5004, fallback3400
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5005
  fallback3400:
    set _lex_param_1[0], $P5004
    set _lex_param_1[1], $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_242_1347804164.33") :anon :lex :outer("cuid_1_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1353
    .const 'Sub' $P5012 = 'cuid_224_1347804164.33' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_225_1347804164.33' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_227_1347804164.33' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_228_1347804164.33' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_231_1347804164.33' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_234_1347804164.33' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_236_1347804164.33' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_238_1347804164.33' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_239_1347804164.33' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_240_1347804164.33' 
    capture_lex $P5012 
    .const 'Sub' $P5012 = 'cuid_241_1347804164.33' 
    capture_lex $P5012 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_224_1347804164.33' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_225_1347804164.33' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_227_1347804164.33' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_228_1347804164.33' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_231_1347804164.33' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_234_1347804164.33' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_236_1347804164.33' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_238_1347804164.33' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_239_1347804164.33' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_240_1347804164.33' 
    capture_lex $P5010
    .const 'Sub' $P5011 = 'cuid_241_1347804164.33' 
    capture_lex $P5011
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_224_1347804164.33") :anon :lex :outer("cuid_242_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1354
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_223_1347804164.33' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1212_tgt
    .local int rx1212_pos
    .local int rx1212_off
    .local int rx1212_eos
    .local int rx1212_rep
    .local pmc rx1212_cur
    .local pmc rx1212_curclass
    .local pmc rx1212_bstack
    .local pmc rx1212_cstack
    (rx1212_cur, rx1212_tgt, rx1212_pos, rx1212_curclass, rx1212_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1212_cur
    length rx1212_eos, rx1212_tgt
    eq $I19, 1, rx1212_restart3403
    gt rx1212_pos, rx1212_eos, rx1212_fail3404
    repr_get_attr_int $I11, self, rx1212_curclass, "$!from"
    ne $I11, -1, rxscan1213_done3410
    goto rxscan1213_scan3409
  rxscan1213_loop3408:
    inc rx1212_pos
    gt rx1212_pos, rx1212_eos, rx1212_fail3404
    repr_bind_attr_int rx1212_cur, rx1212_curclass, "$!from", rx1212_pos
  rxscan1213_scan3409:
    nqp_rxmark rx1212_bstack, rxscan1213_loop3408, rx1212_pos, 0
  rxscan1213_done3410:
    add $I11, rx1212_pos, 1
    gt $I11, rx1212_eos, rx1212_fail3404
    substr $S10, rx1212_tgt, rx1212_pos, 1
    ne $S10, ucs4:":", rx1212_fail3404
    add rx1212_pos, 1
    .const 'Sub' $P5001 = 'cuid_223_1347804164.33' 
    capture_lex $P5001
    repr_bind_attr_int rx1212_cur, rx1212_curclass, "$!pos", rx1212_pos
    $P11 = rx1212_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1212_curclass, "$!pos"
    lt $I11, 0, rx1212_fail3404
    repr_bind_attr_int rx1212_cur, rx1212_curclass, "$!pos", rx1212_pos
    $P11 = rx1212_cur."LANG"("MAIN", "statement")
    repr_get_attr_int $I11, $P11, rx1212_curclass, "$!pos"
    lt $I11, 0, rx1212_fail3404
    nqp_rxmark rx1212_bstack, rxsubrule1216_pass3421, -1, 0
  rxsubrule1216_pass3421:
    rx1212_cstack = rx1212_cur."!cursor_capture"($P11, "statement")
    repr_get_attr_int rx1212_pos, $P11, rx1212_curclass, "$!pos"
    repr_bind_attr_int rx1212_cur, rx1212_curclass, "$!pos", rx1212_pos
    $P11 = rx1212_cur."ws"()
    repr_get_attr_int $I11, $P11, rx1212_curclass, "$!pos"
    lt $I11, 0, rx1212_fail3404
    repr_get_attr_int rx1212_pos, $P11, rx1212_curclass, "$!pos"
    add $I11, rx1212_pos, 1
    gt $I11, rx1212_eos, rx1212_fail3404
    substr $S10, rx1212_tgt, rx1212_pos, 1
    ne $S10, ucs4:";", rx1212_fail3404
    add rx1212_pos, 1
    rx1212_cur."!cursor_pass"(rx1212_pos, "metachar:sym<:my>", 'backtrack'=>1)
    .return (rx1212_cur)
  rx1212_restart3403:
    repr_get_attr_obj rx1212_cstack, rx1212_cur, rx1212_curclass, "$!cstack"
  rx1212_fail3404:
    unless rx1212_bstack, rx1212_done3402
    pop $I19, rx1212_bstack
    if_null rx1212_cstack, rx1212_cstack_done3407
    unless rx1212_cstack, rx1212_cstack_done3407
    dec $I19
    set $P11, rx1212_cstack[$I19]
  rx1212_cstack_done3407:
    pop rx1212_rep, rx1212_bstack
    pop rx1212_pos, rx1212_bstack
    pop $I19, rx1212_bstack
    lt rx1212_pos, -1, rx1212_done3402
    lt rx1212_pos, 0, rx1212_fail3404
    eq $I19, 0, rx1212_fail3404
    nqp_islist $I20, rx1212_cstack
    unless $I20, rx1212_jump3405
    elements $I18, rx1212_bstack
    le $I18, 0, rx1212_cut3406
    dec $I18
    set $I18, rx1212_bstack[$I18]
  rx1212_cut3406:
    assign rx1212_cstack, $I18
  rx1212_jump3405:
    jump $I19
  rx1212_done3402:
    rx1212_cur."!cursor_fail"()
    .return (rx1212_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_224_1347804164.33_caps" :subid("cuid_memo_377_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["statement"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_224_1347804164.33_nfa" :subid("cuid_memo_378_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 58
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 109
    push $P5007, $P5009
    box $P5010, 4
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    new $P5015, 'ResizablePMCArray'
    box $P5016, 2
    push $P5015, $P5016
    box $P5017, 121
    push $P5015, $P5017
    box $P5018, 3
    push $P5015, $P5018
    push $P5001, $P5015
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_223_1347804164.33") :anon :lex :outer("cuid_224_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1214_tgt
    .local int rx1214_pos
    .local int rx1214_off
    .local int rx1214_eos
    .local int rx1214_rep
    .local pmc rx1214_cur
    .local pmc rx1214_curclass
    .local pmc rx1214_bstack
    .local pmc rx1214_cstack
    (rx1214_cur, rx1214_tgt, rx1214_pos, rx1214_curclass, rx1214_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1214_cur
    length rx1214_eos, rx1214_tgt
    eq $I19, 1, rx1214_restart3413
    gt rx1214_pos, rx1214_eos, rx1214_fail3414
    repr_get_attr_int $I11, self, rx1214_curclass, "$!from"
    ne $I11, -1, rxscan1215_done3420
    goto rxscan1215_scan3419
  rxscan1215_loop3418:
    inc rx1214_pos
    gt rx1214_pos, rx1214_eos, rx1214_fail3414
    repr_bind_attr_int rx1214_cur, rx1214_curclass, "$!from", rx1214_pos
  rxscan1215_scan3419:
    nqp_rxmark rx1214_bstack, rxscan1215_loop3418, rx1214_pos, 0
  rxscan1215_done3420:
    add $I11, rx1214_pos, 2
    gt $I11, rx1214_eos, rx1214_fail3414
    substr $S10, rx1214_tgt, rx1214_pos, 2
    ne $S10, ucs4:"my", rx1214_fail3414
    add rx1214_pos, 2
    rx1214_cur."!cursor_pass"(rx1214_pos, 'backtrack'=>1)
    .return (rx1214_cur)
  rx1214_restart3413:
    repr_get_attr_obj rx1214_cstack, rx1214_cur, rx1214_curclass, "$!cstack"
  rx1214_fail3414:
    unless rx1214_bstack, rx1214_done3412
    pop $I19, rx1214_bstack
    if_null rx1214_cstack, rx1214_cstack_done3417
    unless rx1214_cstack, rx1214_cstack_done3417
    dec $I19
    set $P11, rx1214_cstack[$I19]
  rx1214_cstack_done3417:
    pop rx1214_rep, rx1214_bstack
    pop rx1214_pos, rx1214_bstack
    pop $I19, rx1214_bstack
    lt rx1214_pos, -1, rx1214_done3412
    lt rx1214_pos, 0, rx1214_fail3414
    eq $I19, 0, rx1214_fail3414
    nqp_islist $I20, rx1214_cstack
    unless $I20, rx1214_jump3415
    elements $I18, rx1214_bstack
    le $I18, 0, rx1214_cut3416
    dec $I18
    set $I18, rx1214_bstack[$I18]
  rx1214_cut3416:
    assign rx1214_cstack, $I18
  rx1214_jump3415:
    jump $I19
  rx1214_done3412:
    rx1214_cur."!cursor_fail"()
    .return (rx1214_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_223_1347804164.33_caps" :subid("cuid_memo_379_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_223_1347804164.33_nfa" :subid("cuid_memo_380_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 109
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 121
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_225_1347804164.33") :anon :lex :outer("cuid_242_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1358
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1218_tgt
    .local int rx1218_pos
    .local int rx1218_off
    .local int rx1218_eos
    .local int rx1218_rep
    .local pmc rx1218_cur
    .local pmc rx1218_curclass
    .local pmc rx1218_bstack
    .local pmc rx1218_cstack
    (rx1218_cur, rx1218_tgt, rx1218_pos, rx1218_curclass, rx1218_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1218_cur
    length rx1218_eos, rx1218_tgt
    eq $I19, 1, rx1218_restart3425
    gt rx1218_pos, rx1218_eos, rx1218_fail3426
    repr_get_attr_int $I11, self, rx1218_curclass, "$!from"
    ne $I11, -1, rxscan1219_done3432
    goto rxscan1219_scan3431
  rxscan1219_loop3430:
    inc rx1218_pos
    gt rx1218_pos, rx1218_eos, rx1218_fail3426
    repr_bind_attr_int rx1218_cur, rx1218_curclass, "$!from", rx1218_pos
  rxscan1219_scan3431:
    nqp_rxmark rx1218_bstack, rxscan1219_loop3430, rx1218_pos, 0
  rxscan1219_done3432:
    ge rx1218_pos, rx1218_eos, rx1218_fail3426
    substr $S11, rx1218_tgt, rx1218_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1218_fail3426
    repr_bind_attr_int rx1218_cur, rx1218_curclass, "$!pos", rx1218_pos
    $P11 = rx1218_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1218_curclass, "$!pos"
    lt $I11, 0, rx1218_fail3426
    nqp_rxmark rx1218_bstack, rxsubrule1220_pass3433, -1, 0
  rxsubrule1220_pass3433:
    rx1218_cstack = rx1218_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1218_pos, $P11, rx1218_curclass, "$!pos"
    rx1218_cur."!cursor_pass"(rx1218_pos, "metachar:sym<{ }>", 'backtrack'=>1)
    .return (rx1218_cur)
  rx1218_restart3425:
    repr_get_attr_obj rx1218_cstack, rx1218_cur, rx1218_curclass, "$!cstack"
  rx1218_fail3426:
    unless rx1218_bstack, rx1218_done3424
    pop $I19, rx1218_bstack
    if_null rx1218_cstack, rx1218_cstack_done3429
    unless rx1218_cstack, rx1218_cstack_done3429
    dec $I19
    set $P11, rx1218_cstack[$I19]
  rx1218_cstack_done3429:
    pop rx1218_rep, rx1218_bstack
    pop rx1218_pos, rx1218_bstack
    pop $I19, rx1218_bstack
    lt rx1218_pos, -1, rx1218_done3424
    lt rx1218_pos, 0, rx1218_fail3426
    eq $I19, 0, rx1218_fail3426
    nqp_islist $I20, rx1218_cstack
    unless $I20, rx1218_jump3427
    elements $I18, rx1218_bstack
    le $I18, 0, rx1218_cut3428
    dec $I18
    set $I18, rx1218_bstack[$I18]
  rx1218_cut3428:
    assign rx1218_cstack, $I18
  rx1218_jump3427:
    jump $I19
  rx1218_done3424:
    rx1218_cur."!cursor_fail"()
    .return (rx1218_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_225_1347804164.33_caps" :subid("cuid_memo_381_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["codeblock"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_225_1347804164.33_nfa" :subid("cuid_memo_382_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "{"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_227_1347804164.33") :anon :lex :outer("cuid_242_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1362
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_226_1347804164.33' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1221_tgt
    .local int rx1221_pos
    .local int rx1221_off
    .local int rx1221_eos
    .local int rx1221_rep
    .local pmc rx1221_cur
    .local pmc rx1221_curclass
    .local pmc rx1221_bstack
    .local pmc rx1221_cstack
    (rx1221_cur, rx1221_tgt, rx1221_pos, rx1221_curclass, rx1221_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1221_cur
    length rx1221_eos, rx1221_tgt
    eq $I19, 1, rx1221_restart3436
    gt rx1221_pos, rx1221_eos, rx1221_fail3437
    repr_get_attr_int $I11, self, rx1221_curclass, "$!from"
    ne $I11, -1, rxscan1222_done3443
    goto rxscan1222_scan3442
  rxscan1222_loop3441:
    inc rx1221_pos
    gt rx1221_pos, rx1221_eos, rx1221_fail3437
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!from", rx1221_pos
  rxscan1222_scan3442:
    nqp_rxmark rx1221_bstack, rxscan1222_loop3441, rx1221_pos, 0
  rxscan1222_done3443:
    .const 'Sub' $P5001 = 'cuid_226_1347804164.33' 
    capture_lex $P5001
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!pos", rx1221_pos
    $P11 = rx1221_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1221_curclass, "$!pos"
    lt $I11, 0, rx1221_fail3437
    repr_bind_attr_int rx1221_cur, rx1221_curclass, "$!pos", rx1221_pos
    $P11 = rx1221_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1221_curclass, "$!pos"
    lt $I11, 0, rx1221_fail3437
    nqp_rxmark rx1221_bstack, rxsubrule1226_pass3457, -1, 0
  rxsubrule1226_pass3457:
    rx1221_cstack = rx1221_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1221_pos, $P11, rx1221_curclass, "$!pos"
    rx1221_cur."!cursor_pass"(rx1221_pos, "metachar:sym<nqpvar>", 'backtrack'=>1)
    .return (rx1221_cur)
  rx1221_restart3436:
    repr_get_attr_obj rx1221_cstack, rx1221_cur, rx1221_curclass, "$!cstack"
  rx1221_fail3437:
    unless rx1221_bstack, rx1221_done3435
    pop $I19, rx1221_bstack
    if_null rx1221_cstack, rx1221_cstack_done3440
    unless rx1221_cstack, rx1221_cstack_done3440
    dec $I19
    set $P11, rx1221_cstack[$I19]
  rx1221_cstack_done3440:
    pop rx1221_rep, rx1221_bstack
    pop rx1221_pos, rx1221_bstack
    pop $I19, rx1221_bstack
    lt rx1221_pos, -1, rx1221_done3435
    lt rx1221_pos, 0, rx1221_fail3437
    eq $I19, 0, rx1221_fail3437
    nqp_islist $I20, rx1221_cstack
    unless $I20, rx1221_jump3438
    elements $I18, rx1221_bstack
    le $I18, 0, rx1221_cut3439
    dec $I18
    set $I18, rx1221_bstack[$I18]
  rx1221_cut3439:
    assign rx1221_cstack, $I18
  rx1221_jump3438:
    jump $I19
  rx1221_done3435:
    rx1221_cur."!cursor_fail"()
    .return (rx1221_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_227_1347804164.33_caps" :subid("cuid_memo_383_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["var"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_227_1347804164.33_nfa" :subid("cuid_memo_384_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$@&"
    push $P5003, $P5005
    box $P5006, 3
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 5
    push $P5011, $P5012
    box $P5013, 8192
    push $P5011, $P5013
    box $P5014, 4
    push $P5011, $P5014
    box $P5015, 4
    push $P5011, $P5015
    box $P5016, 8192
    push $P5011, $P5016
    box $P5017, 2
    push $P5011, $P5017
    push $P5001, $P5011
    new $P5018, 'ResizablePMCArray'
    box $P5019, 4
    push $P5018, $P5019
    box $P5020, 8192
    push $P5018, $P5020
    box $P5021, 2
    push $P5018, $P5021
    push $P5001, $P5018
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_226_1347804164.33") :anon :lex :outer("cuid_227_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1223_tgt
    .local int rx1223_pos
    .local int rx1223_off
    .local int rx1223_eos
    .local int rx1223_rep
    .local pmc rx1223_cur
    .local pmc rx1223_curclass
    .local pmc rx1223_bstack
    .local pmc rx1223_cstack
    (rx1223_cur, rx1223_tgt, rx1223_pos, rx1223_curclass, rx1223_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1223_cur
    length rx1223_eos, rx1223_tgt
    eq $I19, 1, rx1223_restart3446
    gt rx1223_pos, rx1223_eos, rx1223_fail3447
    repr_get_attr_int $I11, self, rx1223_curclass, "$!from"
    ne $I11, -1, rxscan1224_done3453
    goto rxscan1224_scan3452
  rxscan1224_loop3451:
    inc rx1223_pos
    gt rx1223_pos, rx1223_eos, rx1223_fail3447
    repr_bind_attr_int rx1223_cur, rx1223_curclass, "$!from", rx1223_pos
  rxscan1224_scan3452:
    nqp_rxmark rx1223_bstack, rxscan1224_loop3451, rx1223_pos, 0
  rxscan1224_done3453:
    ge rx1223_pos, rx1223_eos, rx1223_fail3447
    substr $S11, rx1223_tgt, rx1223_pos, 1
    index $I11, ucs4:"$@&", $S11
    lt $I11, 0, rx1223_fail3447
    inc rx1223_pos
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1225_03455
    nqp_push_label $P11, alt1225_13456
    nqp_rxmark rx1223_bstack, alt1225_end3454, -1, 0
    rx1223_cur."!alt"(rx1223_pos, "alt_nfa__39_1347804167.641", $P11)
    goto rx1223_fail3447
  alt1225_03455:
    ge rx1223_pos, rx1223_eos, rx1223_fail3447
    is_cclass $I11, .CCLASS_WORD, rx1223_tgt, rx1223_pos
    if $I11, rx1223_fail3447
    add rx1223_pos, 1
    ge rx1223_pos, rx1223_eos, rx1223_fail3447
    is_cclass $I11, .CCLASS_WORD, rx1223_tgt, rx1223_pos
    unless $I11, rx1223_fail3447
    add rx1223_pos, 1
    goto alt1225_end3454
  alt1225_13456:
    ge rx1223_pos, rx1223_eos, rx1223_fail3447
    is_cclass $I11, .CCLASS_WORD, rx1223_tgt, rx1223_pos
    unless $I11, rx1223_fail3447
    add rx1223_pos, 1
    goto alt1225_end3454
  alt1225_end3454:
    nqp_rxcommit rx1223_bstack, alt1225_end3454
    rx1223_cur."!cursor_pass"(rx1223_pos, 'backtrack'=>1)
    .return (rx1223_cur)
  rx1223_restart3446:
    repr_get_attr_obj rx1223_cstack, rx1223_cur, rx1223_curclass, "$!cstack"
  rx1223_fail3447:
    unless rx1223_bstack, rx1223_done3445
    pop $I19, rx1223_bstack
    if_null rx1223_cstack, rx1223_cstack_done3450
    unless rx1223_cstack, rx1223_cstack_done3450
    dec $I19
    set $P11, rx1223_cstack[$I19]
  rx1223_cstack_done3450:
    pop rx1223_rep, rx1223_bstack
    pop rx1223_pos, rx1223_bstack
    pop $I19, rx1223_bstack
    lt rx1223_pos, -1, rx1223_done3445
    lt rx1223_pos, 0, rx1223_fail3447
    eq $I19, 0, rx1223_fail3447
    nqp_islist $I20, rx1223_cstack
    unless $I20, rx1223_jump3448
    elements $I18, rx1223_bstack
    le $I18, 0, rx1223_cut3449
    dec $I18
    set $I18, rx1223_bstack[$I18]
  rx1223_cut3449:
    assign rx1223_cstack, $I18
  rx1223_jump3448:
    jump $I19
  rx1223_done3445:
    rx1223_cur."!cursor_fail"()
    .return (rx1223_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_226_1347804164.33_caps" :subid("cuid_memo_385_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_226_1347804164.33_nfa" :subid("cuid_memo_386_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$@&"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 5
    push $P5007, $P5008
    box $P5009, 8192
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 4
    push $P5007, $P5011
    box $P5012, 8192
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 4
    push $P5014, $P5015
    box $P5016, 8192
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_226_1347804164.33_alt_nfa__39_1347804167.641" :subid("cuid_memo_387_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 5
    push $P5004, $P5005
    box $P5006, 8192
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 4
    push $P5008, $P5009
    box $P5010, 8192
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 4
    push $P5014, $P5015
    box $P5016, 8192
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5012, $P5014
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_228_1347804164.33") :anon :lex :outer("cuid_242_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1366
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1227_tgt
    .local int rx1227_pos
    .local int rx1227_off
    .local int rx1227_eos
    .local int rx1227_rep
    .local pmc rx1227_cur
    .local pmc rx1227_curclass
    .local pmc rx1227_bstack
    .local pmc rx1227_cstack
    (rx1227_cur, rx1227_tgt, rx1227_pos, rx1227_curclass, rx1227_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1227_cur
    length rx1227_eos, rx1227_tgt
    eq $I19, 1, rx1227_restart3460
    gt rx1227_pos, rx1227_eos, rx1227_fail3461
    repr_get_attr_int $I11, self, rx1227_curclass, "$!from"
    ne $I11, -1, rxscan1228_done3467
    goto rxscan1228_scan3466
  rxscan1228_loop3465:
    inc rx1227_pos
    gt rx1227_pos, rx1227_eos, rx1227_fail3461
    repr_bind_attr_int rx1227_cur, rx1227_curclass, "$!from", rx1227_pos
  rxscan1228_scan3466:
    nqp_rxmark rx1227_bstack, rxscan1228_loop3465, rx1227_pos, 0
  rxscan1228_done3467:
    ge rx1227_pos, rx1227_eos, rx1227_fail3461
    substr $S11, rx1227_tgt, rx1227_pos, 1
    index $I11, ucs4:"{", $S11
    lt $I11, 0, rx1227_fail3461
    repr_bind_attr_int rx1227_cur, rx1227_curclass, "$!pos", rx1227_pos
    $P11 = rx1227_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1227_curclass, "$!pos"
    lt $I11, 0, rx1227_fail3461
    nqp_rxmark rx1227_bstack, rxsubrule1229_pass3468, -1, 0
  rxsubrule1229_pass3468:
    rx1227_cstack = rx1227_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1227_pos, $P11, rx1227_curclass, "$!pos"
    rx1227_cur."!cursor_pass"(rx1227_pos, "assertion:sym<{ }>", 'backtrack'=>1)
    .return (rx1227_cur)
  rx1227_restart3460:
    repr_get_attr_obj rx1227_cstack, rx1227_cur, rx1227_curclass, "$!cstack"
  rx1227_fail3461:
    unless rx1227_bstack, rx1227_done3459
    pop $I19, rx1227_bstack
    if_null rx1227_cstack, rx1227_cstack_done3464
    unless rx1227_cstack, rx1227_cstack_done3464
    dec $I19
    set $P11, rx1227_cstack[$I19]
  rx1227_cstack_done3464:
    pop rx1227_rep, rx1227_bstack
    pop rx1227_pos, rx1227_bstack
    pop $I19, rx1227_bstack
    lt rx1227_pos, -1, rx1227_done3459
    lt rx1227_pos, 0, rx1227_fail3461
    eq $I19, 0, rx1227_fail3461
    nqp_islist $I20, rx1227_cstack
    unless $I20, rx1227_jump3462
    elements $I18, rx1227_bstack
    le $I18, 0, rx1227_cut3463
    dec $I18
    set $I18, rx1227_bstack[$I18]
  rx1227_cut3463:
    assign rx1227_cstack, $I18
  rx1227_jump3462:
    jump $I19
  rx1227_done3459:
    rx1227_cur."!cursor_fail"()
    .return (rx1227_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_228_1347804164.33_caps" :subid("cuid_memo_388_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["codeblock"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_228_1347804164.33_nfa" :subid("cuid_memo_389_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "{"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?>" :subid("cuid_231_1347804164.33") :anon :lex :outer("cuid_242_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1370
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_229_1347804164.33' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_230_1347804164.33' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1230_tgt
    .local int rx1230_pos
    .local int rx1230_off
    .local int rx1230_eos
    .local int rx1230_rep
    .local pmc rx1230_cur
    .local pmc rx1230_curclass
    .local pmc rx1230_bstack
    .local pmc rx1230_cstack
    (rx1230_cur, rx1230_tgt, rx1230_pos, rx1230_curclass, rx1230_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1230_cur
    length rx1230_eos, rx1230_tgt
    eq $I19, 1, rx1230_restart3471
    gt rx1230_pos, rx1230_eos, rx1230_fail3472
    repr_get_attr_int $I11, self, rx1230_curclass, "$!from"
    ne $I11, -1, rxscan1231_done3478
    goto rxscan1231_scan3477
  rxscan1231_loop3476:
    inc rx1230_pos
    gt rx1230_pos, rx1230_eos, rx1230_fail3472
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!from", rx1230_pos
  rxscan1231_scan3477:
    nqp_rxmark rx1230_bstack, rxscan1231_loop3476, rx1230_pos, 0
  rxscan1231_done3478:
    add $I11, rx1230_pos, 1
    gt $I11, rx1230_eos, rx1230_fail3472
    substr $S10, rx1230_tgt, rx1230_pos, 1
    ne $S10, ucs4:"?", rx1230_fail3472
    add rx1230_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1232_03480
    nqp_push_label $P11, alt1232_13491
    nqp_rxmark rx1230_bstack, alt1232_end3479, -1, 0
    rx1230_cur."!alt"(rx1230_pos, "alt_nfa__40_1347804167.665", $P11)
    goto rx1230_fail3472
  alt1232_03480:
    .const 'Sub' $P5001 = 'cuid_229_1347804164.33' 
    capture_lex $P5001
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3472
    goto alt1232_end3479
  alt1232_13491:
    .const 'Sub' $P5002 = 'cuid_230_1347804164.33' 
    capture_lex $P5002
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    ge $I11, 0, rx1230_fail3472
    repr_bind_attr_int rx1230_cur, rx1230_curclass, "$!pos", rx1230_pos
    $P11 = rx1230_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1230_curclass, "$!pos"
    lt $I11, 0, rx1230_fail3472
    nqp_rxmark rx1230_bstack, rxsubrule1237_pass3502, -1, 0
  rxsubrule1237_pass3502:
    rx1230_cstack = rx1230_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1230_pos, $P11, rx1230_curclass, "$!pos"
    goto alt1232_end3479
  alt1232_end3479:
    nqp_rxcommit rx1230_bstack, alt1232_end3479
    rx1230_cur."!cursor_pass"(rx1230_pos, "assertion:sym<?>", 'backtrack'=>1)
    .return (rx1230_cur)
  rx1230_restart3471:
    repr_get_attr_obj rx1230_cstack, rx1230_cur, rx1230_curclass, "$!cstack"
  rx1230_fail3472:
    unless rx1230_bstack, rx1230_done3470
    pop $I19, rx1230_bstack
    if_null rx1230_cstack, rx1230_cstack_done3475
    unless rx1230_cstack, rx1230_cstack_done3475
    dec $I19
    set $P11, rx1230_cstack[$I19]
  rx1230_cstack_done3475:
    pop rx1230_rep, rx1230_bstack
    pop rx1230_pos, rx1230_bstack
    pop $I19, rx1230_bstack
    lt rx1230_pos, -1, rx1230_done3470
    lt rx1230_pos, 0, rx1230_fail3472
    eq $I19, 0, rx1230_fail3472
    nqp_islist $I20, rx1230_cstack
    unless $I20, rx1230_jump3473
    elements $I18, rx1230_bstack
    le $I18, 0, rx1230_cut3474
    dec $I18
    set $I18, rx1230_bstack[$I18]
  rx1230_cut3474:
    assign rx1230_cstack, $I18
  rx1230_jump3473:
    jump $I19
  rx1230_done3470:
    rx1230_cur."!cursor_fail"()
    .return (rx1230_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_231_1347804164.33_caps" :subid("cuid_memo_390_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["assertion"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_231_1347804164.33_nfa" :subid("cuid_memo_391_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 63
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 62
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 0
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_231_1347804164.33_alt_nfa__40_1347804167.665" :subid("cuid_memo_392_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 62
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    box $P5018, 0
    push $P5014, $P5018
    box $P5019, 0
    push $P5014, $P5019
    box $P5020, 0
    push $P5014, $P5020
    push $P5012, $P5014
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_229_1347804164.33") :anon :lex :outer("cuid_231_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1233_tgt
    .local int rx1233_pos
    .local int rx1233_off
    .local int rx1233_eos
    .local int rx1233_rep
    .local pmc rx1233_cur
    .local pmc rx1233_curclass
    .local pmc rx1233_bstack
    .local pmc rx1233_cstack
    (rx1233_cur, rx1233_tgt, rx1233_pos, rx1233_curclass, rx1233_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1233_cur
    length rx1233_eos, rx1233_tgt
    eq $I19, 1, rx1233_restart3483
    gt rx1233_pos, rx1233_eos, rx1233_fail3484
    repr_get_attr_int $I11, self, rx1233_curclass, "$!from"
    ne $I11, -1, rxscan1234_done3490
    goto rxscan1234_scan3489
  rxscan1234_loop3488:
    inc rx1233_pos
    gt rx1233_pos, rx1233_eos, rx1233_fail3484
    repr_bind_attr_int rx1233_cur, rx1233_curclass, "$!from", rx1233_pos
  rxscan1234_scan3489:
    nqp_rxmark rx1233_bstack, rxscan1234_loop3488, rx1233_pos, 0
  rxscan1234_done3490:
    add $I11, rx1233_pos, 1
    gt $I11, rx1233_eos, rx1233_fail3484
    substr $S10, rx1233_tgt, rx1233_pos, 1
    ne $S10, ucs4:">", rx1233_fail3484
    add rx1233_pos, 1
    rx1233_cur."!cursor_pass"(rx1233_pos, 'backtrack'=>1)
    .return (rx1233_cur)
  rx1233_restart3483:
    repr_get_attr_obj rx1233_cstack, rx1233_cur, rx1233_curclass, "$!cstack"
  rx1233_fail3484:
    unless rx1233_bstack, rx1233_done3482
    pop $I19, rx1233_bstack
    if_null rx1233_cstack, rx1233_cstack_done3487
    unless rx1233_cstack, rx1233_cstack_done3487
    dec $I19
    set $P11, rx1233_cstack[$I19]
  rx1233_cstack_done3487:
    pop rx1233_rep, rx1233_bstack
    pop rx1233_pos, rx1233_bstack
    pop $I19, rx1233_bstack
    lt rx1233_pos, -1, rx1233_done3482
    lt rx1233_pos, 0, rx1233_fail3484
    eq $I19, 0, rx1233_fail3484
    nqp_islist $I20, rx1233_cstack
    unless $I20, rx1233_jump3485
    elements $I18, rx1233_bstack
    le $I18, 0, rx1233_cut3486
    dec $I18
    set $I18, rx1233_bstack[$I18]
  rx1233_cut3486:
    assign rx1233_cstack, $I18
  rx1233_jump3485:
    jump $I19
  rx1233_done3482:
    rx1233_cur."!cursor_fail"()
    .return (rx1233_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_229_1347804164.33_caps" :subid("cuid_memo_393_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_229_1347804164.33_nfa" :subid("cuid_memo_394_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_230_1347804164.33") :anon :lex :outer("cuid_231_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1235_tgt
    .local int rx1235_pos
    .local int rx1235_off
    .local int rx1235_eos
    .local int rx1235_rep
    .local pmc rx1235_cur
    .local pmc rx1235_curclass
    .local pmc rx1235_bstack
    .local pmc rx1235_cstack
    (rx1235_cur, rx1235_tgt, rx1235_pos, rx1235_curclass, rx1235_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1235_cur
    length rx1235_eos, rx1235_tgt
    eq $I19, 1, rx1235_restart3494
    gt rx1235_pos, rx1235_eos, rx1235_fail3495
    repr_get_attr_int $I11, self, rx1235_curclass, "$!from"
    ne $I11, -1, rxscan1236_done3501
    goto rxscan1236_scan3500
  rxscan1236_loop3499:
    inc rx1235_pos
    gt rx1235_pos, rx1235_eos, rx1235_fail3495
    repr_bind_attr_int rx1235_cur, rx1235_curclass, "$!from", rx1235_pos
  rxscan1236_scan3500:
    nqp_rxmark rx1235_bstack, rxscan1236_loop3499, rx1235_pos, 0
  rxscan1236_done3501:
    add $I11, rx1235_pos, 1
    gt $I11, rx1235_eos, rx1235_fail3495
    substr $S10, rx1235_tgt, rx1235_pos, 1
    ne $S10, ucs4:"{", rx1235_fail3495
    add rx1235_pos, 1
    rx1235_cur."!cursor_pass"(rx1235_pos, 'backtrack'=>1)
    .return (rx1235_cur)
  rx1235_restart3494:
    repr_get_attr_obj rx1235_cstack, rx1235_cur, rx1235_curclass, "$!cstack"
  rx1235_fail3495:
    unless rx1235_bstack, rx1235_done3493
    pop $I19, rx1235_bstack
    if_null rx1235_cstack, rx1235_cstack_done3498
    unless rx1235_cstack, rx1235_cstack_done3498
    dec $I19
    set $P11, rx1235_cstack[$I19]
  rx1235_cstack_done3498:
    pop rx1235_rep, rx1235_bstack
    pop rx1235_pos, rx1235_bstack
    pop $I19, rx1235_bstack
    lt rx1235_pos, -1, rx1235_done3493
    lt rx1235_pos, 0, rx1235_fail3495
    eq $I19, 0, rx1235_fail3495
    nqp_islist $I20, rx1235_cstack
    unless $I20, rx1235_jump3496
    elements $I18, rx1235_bstack
    le $I18, 0, rx1235_cut3497
    dec $I18
    set $I18, rx1235_bstack[$I18]
  rx1235_cut3497:
    assign rx1235_cstack, $I18
  rx1235_jump3496:
    jump $I19
  rx1235_done3493:
    rx1235_cur."!cursor_fail"()
    .return (rx1235_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_230_1347804164.33_caps" :subid("cuid_memo_395_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_230_1347804164.33_nfa" :subid("cuid_memo_396_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<!>" :subid("cuid_234_1347804164.33") :anon :lex :outer("cuid_242_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1371
    .param pmc _lex_param_0 
    .const 'Sub' $P5003 = 'cuid_232_1347804164.33' 
    capture_lex $P5003 
    .const 'Sub' $P5003 = 'cuid_233_1347804164.33' 
    capture_lex $P5003 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1238_tgt
    .local int rx1238_pos
    .local int rx1238_off
    .local int rx1238_eos
    .local int rx1238_rep
    .local pmc rx1238_cur
    .local pmc rx1238_curclass
    .local pmc rx1238_bstack
    .local pmc rx1238_cstack
    (rx1238_cur, rx1238_tgt, rx1238_pos, rx1238_curclass, rx1238_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1238_cur
    length rx1238_eos, rx1238_tgt
    eq $I19, 1, rx1238_restart3505
    gt rx1238_pos, rx1238_eos, rx1238_fail3506
    repr_get_attr_int $I11, self, rx1238_curclass, "$!from"
    ne $I11, -1, rxscan1239_done3512
    goto rxscan1239_scan3511
  rxscan1239_loop3510:
    inc rx1238_pos
    gt rx1238_pos, rx1238_eos, rx1238_fail3506
    repr_bind_attr_int rx1238_cur, rx1238_curclass, "$!from", rx1238_pos
  rxscan1239_scan3511:
    nqp_rxmark rx1238_bstack, rxscan1239_loop3510, rx1238_pos, 0
  rxscan1239_done3512:
    add $I11, rx1238_pos, 1
    gt $I11, rx1238_eos, rx1238_fail3506
    substr $S10, rx1238_tgt, rx1238_pos, 1
    ne $S10, ucs4:"!", rx1238_fail3506
    add rx1238_pos, 1
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1240_03514
    nqp_push_label $P11, alt1240_13525
    nqp_rxmark rx1238_bstack, alt1240_end3513, -1, 0
    rx1238_cur."!alt"(rx1238_pos, "alt_nfa__41_1347804167.678", $P11)
    goto rx1238_fail3506
  alt1240_03514:
    .const 'Sub' $P5001 = 'cuid_232_1347804164.33' 
    capture_lex $P5001
    repr_bind_attr_int rx1238_cur, rx1238_curclass, "$!pos", rx1238_pos
    $P11 = rx1238_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1238_curclass, "$!pos"
    lt $I11, 0, rx1238_fail3506
    goto alt1240_end3513
  alt1240_13525:
    .const 'Sub' $P5002 = 'cuid_233_1347804164.33' 
    capture_lex $P5002
    repr_bind_attr_int rx1238_cur, rx1238_curclass, "$!pos", rx1238_pos
    $P11 = rx1238_cur."before"($P5002)
    repr_get_attr_int $I11, $P11, rx1238_curclass, "$!pos"
    ge $I11, 0, rx1238_fail3506
    repr_bind_attr_int rx1238_cur, rx1238_curclass, "$!pos", rx1238_pos
    $P11 = rx1238_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1238_curclass, "$!pos"
    lt $I11, 0, rx1238_fail3506
    nqp_rxmark rx1238_bstack, rxsubrule1245_pass3536, -1, 0
  rxsubrule1245_pass3536:
    rx1238_cstack = rx1238_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1238_pos, $P11, rx1238_curclass, "$!pos"
    goto alt1240_end3513
  alt1240_end3513:
    nqp_rxcommit rx1238_bstack, alt1240_end3513
    rx1238_cur."!cursor_pass"(rx1238_pos, "assertion:sym<!>", 'backtrack'=>1)
    .return (rx1238_cur)
  rx1238_restart3505:
    repr_get_attr_obj rx1238_cstack, rx1238_cur, rx1238_curclass, "$!cstack"
  rx1238_fail3506:
    unless rx1238_bstack, rx1238_done3504
    pop $I19, rx1238_bstack
    if_null rx1238_cstack, rx1238_cstack_done3509
    unless rx1238_cstack, rx1238_cstack_done3509
    dec $I19
    set $P11, rx1238_cstack[$I19]
  rx1238_cstack_done3509:
    pop rx1238_rep, rx1238_bstack
    pop rx1238_pos, rx1238_bstack
    pop $I19, rx1238_bstack
    lt rx1238_pos, -1, rx1238_done3504
    lt rx1238_pos, 0, rx1238_fail3506
    eq $I19, 0, rx1238_fail3506
    nqp_islist $I20, rx1238_cstack
    unless $I20, rx1238_jump3507
    elements $I18, rx1238_bstack
    le $I18, 0, rx1238_cut3508
    dec $I18
    set $I18, rx1238_bstack[$I18]
  rx1238_cut3508:
    assign rx1238_cstack, $I18
  rx1238_jump3507:
    jump $I19
  rx1238_done3504:
    rx1238_cur."!cursor_fail"()
    .return (rx1238_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_234_1347804164.33_caps" :subid("cuid_memo_397_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["assertion"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_234_1347804164.33_nfa" :subid("cuid_memo_398_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 33
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 62
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 0
    push $P5007, $P5011
    box $P5012, 0
    push $P5007, $P5012
    box $P5013, 0
    push $P5007, $P5013
    push $P5001, $P5007
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    push $P5001, $P5014
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_234_1347804164.33_alt_nfa__41_1347804167.678" :subid("cuid_memo_399_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 62
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 0
    push $P5014, $P5015
    box $P5016, 0
    push $P5014, $P5016
    box $P5017, 0
    push $P5014, $P5017
    box $P5018, 0
    push $P5014, $P5018
    box $P5019, 0
    push $P5014, $P5019
    box $P5020, 0
    push $P5014, $P5020
    push $P5012, $P5014
    push $P5001, $P5012
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_232_1347804164.33") :anon :lex :outer("cuid_234_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1241_tgt
    .local int rx1241_pos
    .local int rx1241_off
    .local int rx1241_eos
    .local int rx1241_rep
    .local pmc rx1241_cur
    .local pmc rx1241_curclass
    .local pmc rx1241_bstack
    .local pmc rx1241_cstack
    (rx1241_cur, rx1241_tgt, rx1241_pos, rx1241_curclass, rx1241_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1241_cur
    length rx1241_eos, rx1241_tgt
    eq $I19, 1, rx1241_restart3517
    gt rx1241_pos, rx1241_eos, rx1241_fail3518
    repr_get_attr_int $I11, self, rx1241_curclass, "$!from"
    ne $I11, -1, rxscan1242_done3524
    goto rxscan1242_scan3523
  rxscan1242_loop3522:
    inc rx1241_pos
    gt rx1241_pos, rx1241_eos, rx1241_fail3518
    repr_bind_attr_int rx1241_cur, rx1241_curclass, "$!from", rx1241_pos
  rxscan1242_scan3523:
    nqp_rxmark rx1241_bstack, rxscan1242_loop3522, rx1241_pos, 0
  rxscan1242_done3524:
    add $I11, rx1241_pos, 1
    gt $I11, rx1241_eos, rx1241_fail3518
    substr $S10, rx1241_tgt, rx1241_pos, 1
    ne $S10, ucs4:">", rx1241_fail3518
    add rx1241_pos, 1
    rx1241_cur."!cursor_pass"(rx1241_pos, 'backtrack'=>1)
    .return (rx1241_cur)
  rx1241_restart3517:
    repr_get_attr_obj rx1241_cstack, rx1241_cur, rx1241_curclass, "$!cstack"
  rx1241_fail3518:
    unless rx1241_bstack, rx1241_done3516
    pop $I19, rx1241_bstack
    if_null rx1241_cstack, rx1241_cstack_done3521
    unless rx1241_cstack, rx1241_cstack_done3521
    dec $I19
    set $P11, rx1241_cstack[$I19]
  rx1241_cstack_done3521:
    pop rx1241_rep, rx1241_bstack
    pop rx1241_pos, rx1241_bstack
    pop $I19, rx1241_bstack
    lt rx1241_pos, -1, rx1241_done3516
    lt rx1241_pos, 0, rx1241_fail3518
    eq $I19, 0, rx1241_fail3518
    nqp_islist $I20, rx1241_cstack
    unless $I20, rx1241_jump3519
    elements $I18, rx1241_bstack
    le $I18, 0, rx1241_cut3520
    dec $I18
    set $I18, rx1241_bstack[$I18]
  rx1241_cut3520:
    assign rx1241_cstack, $I18
  rx1241_jump3519:
    jump $I19
  rx1241_done3516:
    rx1241_cur."!cursor_fail"()
    .return (rx1241_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_232_1347804164.33_caps" :subid("cuid_memo_400_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_232_1347804164.33_nfa" :subid("cuid_memo_401_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_233_1347804164.33") :anon :lex :outer("cuid_234_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1243_tgt
    .local int rx1243_pos
    .local int rx1243_off
    .local int rx1243_eos
    .local int rx1243_rep
    .local pmc rx1243_cur
    .local pmc rx1243_curclass
    .local pmc rx1243_bstack
    .local pmc rx1243_cstack
    (rx1243_cur, rx1243_tgt, rx1243_pos, rx1243_curclass, rx1243_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1243_cur
    length rx1243_eos, rx1243_tgt
    eq $I19, 1, rx1243_restart3528
    gt rx1243_pos, rx1243_eos, rx1243_fail3529
    repr_get_attr_int $I11, self, rx1243_curclass, "$!from"
    ne $I11, -1, rxscan1244_done3535
    goto rxscan1244_scan3534
  rxscan1244_loop3533:
    inc rx1243_pos
    gt rx1243_pos, rx1243_eos, rx1243_fail3529
    repr_bind_attr_int rx1243_cur, rx1243_curclass, "$!from", rx1243_pos
  rxscan1244_scan3534:
    nqp_rxmark rx1243_bstack, rxscan1244_loop3533, rx1243_pos, 0
  rxscan1244_done3535:
    add $I11, rx1243_pos, 1
    gt $I11, rx1243_eos, rx1243_fail3529
    substr $S10, rx1243_tgt, rx1243_pos, 1
    ne $S10, ucs4:"{", rx1243_fail3529
    add rx1243_pos, 1
    rx1243_cur."!cursor_pass"(rx1243_pos, 'backtrack'=>1)
    .return (rx1243_cur)
  rx1243_restart3528:
    repr_get_attr_obj rx1243_cstack, rx1243_cur, rx1243_curclass, "$!cstack"
  rx1243_fail3529:
    unless rx1243_bstack, rx1243_done3527
    pop $I19, rx1243_bstack
    if_null rx1243_cstack, rx1243_cstack_done3532
    unless rx1243_cstack, rx1243_cstack_done3532
    dec $I19
    set $P11, rx1243_cstack[$I19]
  rx1243_cstack_done3532:
    pop rx1243_rep, rx1243_bstack
    pop rx1243_pos, rx1243_bstack
    pop $I19, rx1243_bstack
    lt rx1243_pos, -1, rx1243_done3527
    lt rx1243_pos, 0, rx1243_fail3529
    eq $I19, 0, rx1243_fail3529
    nqp_islist $I20, rx1243_cstack
    unless $I20, rx1243_jump3530
    elements $I18, rx1243_bstack
    le $I18, 0, rx1243_cut3531
    dec $I18
    set $I18, rx1243_bstack[$I18]
  rx1243_cut3531:
    assign rx1243_cstack, $I18
  rx1243_jump3530:
    jump $I19
  rx1243_done3527:
    rx1243_cur."!cursor_fail"()
    .return (rx1243_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_233_1347804164.33_caps" :subid("cuid_memo_402_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_233_1347804164.33_nfa" :subid("cuid_memo_403_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_236_1347804164.33") :anon :lex :outer("cuid_242_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1373
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_235_1347804164.33' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1246_tgt
    .local int rx1246_pos
    .local int rx1246_off
    .local int rx1246_eos
    .local int rx1246_rep
    .local pmc rx1246_cur
    .local pmc rx1246_curclass
    .local pmc rx1246_bstack
    .local pmc rx1246_cstack
    (rx1246_cur, rx1246_tgt, rx1246_pos, rx1246_curclass, rx1246_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1246_cur
    length rx1246_eos, rx1246_tgt
    eq $I19, 1, rx1246_restart3539
    gt rx1246_pos, rx1246_eos, rx1246_fail3540
    repr_get_attr_int $I11, self, rx1246_curclass, "$!from"
    ne $I11, -1, rxscan1247_done3546
    goto rxscan1247_scan3545
  rxscan1247_loop3544:
    inc rx1246_pos
    gt rx1246_pos, rx1246_eos, rx1246_fail3540
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!from", rx1246_pos
  rxscan1247_scan3545:
    nqp_rxmark rx1246_bstack, rxscan1247_loop3544, rx1246_pos, 0
  rxscan1247_done3546:
    nqp_rxmark rx1246_bstack, rxcap1248_fail3548, rx1246_pos, 0
    ge rx1246_pos, rx1246_eos, rx1246_fail3540
    substr $S11, rx1246_tgt, rx1246_pos, 1
    index $I11, ucs4:"?!", $S11
    lt $I11, 0, rx1246_fail3540
    inc rx1246_pos
    .const 'Sub' $P5001 = 'cuid_235_1347804164.33' 
    capture_lex $P5001
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!pos", rx1246_pos
    $P11 = rx1246_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1246_curclass, "$!pos"
    lt $I11, 0, rx1246_fail3540
    nqp_rxpeek $I19, rx1246_bstack, rxcap1248_fail3548
    inc $I19
    set $I11, rx1246_bstack[$I19]
    $P11 = rx1246_cur."!cursor_start_subcapture"($I11)
    $P11."!cursor_pass"(rx1246_pos)
    rx1246_cstack = rx1246_cur."!cursor_capture"($P11, "zw")
    goto rxcap1248_done3547
  rxcap1248_fail3548:
    goto rx1246_fail3540
  rxcap1248_done3547:
    repr_bind_attr_int rx1246_cur, rx1246_curclass, "$!pos", rx1246_pos
    $P11 = rx1246_cur."codeblock"()
    repr_get_attr_int $I11, $P11, rx1246_curclass, "$!pos"
    lt $I11, 0, rx1246_fail3540
    nqp_rxmark rx1246_bstack, rxsubrule1251_pass3559, -1, 0
  rxsubrule1251_pass3559:
    rx1246_cstack = rx1246_cur."!cursor_capture"($P11, "codeblock")
    repr_get_attr_int rx1246_pos, $P11, rx1246_curclass, "$!pos"
    rx1246_cur."!cursor_pass"(rx1246_pos, "assertion:sym<?{ }>", 'backtrack'=>1)
    .return (rx1246_cur)
  rx1246_restart3539:
    repr_get_attr_obj rx1246_cstack, rx1246_cur, rx1246_curclass, "$!cstack"
  rx1246_fail3540:
    unless rx1246_bstack, rx1246_done3538
    pop $I19, rx1246_bstack
    if_null rx1246_cstack, rx1246_cstack_done3543
    unless rx1246_cstack, rx1246_cstack_done3543
    dec $I19
    set $P11, rx1246_cstack[$I19]
  rx1246_cstack_done3543:
    pop rx1246_rep, rx1246_bstack
    pop rx1246_pos, rx1246_bstack
    pop $I19, rx1246_bstack
    lt rx1246_pos, -1, rx1246_done3538
    lt rx1246_pos, 0, rx1246_fail3540
    eq $I19, 0, rx1246_fail3540
    nqp_islist $I20, rx1246_cstack
    unless $I20, rx1246_jump3541
    elements $I18, rx1246_bstack
    le $I18, 0, rx1246_cut3542
    dec $I18
    set $I18, rx1246_bstack[$I18]
  rx1246_cut3542:
    assign rx1246_cstack, $I18
  rx1246_jump3541:
    jump $I19
  rx1246_done3538:
    rx1246_cur."!cursor_fail"()
    .return (rx1246_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_236_1347804164.33_caps" :subid("cuid_memo_404_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["zw"], $P5002
    box $P5003, 0
    set $P5001["codeblock"], $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_236_1347804164.33_nfa" :subid("cuid_memo_405_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "?!"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 123
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    push $P5001, $P5007
    new $P5011, 'ResizablePMCArray'
    box $P5012, 0
    push $P5011, $P5012
    box $P5013, 0
    push $P5011, $P5013
    box $P5014, 0
    push $P5011, $P5014
    push $P5001, $P5011
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_235_1347804164.33") :anon :lex :outer("cuid_236_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1249_tgt
    .local int rx1249_pos
    .local int rx1249_off
    .local int rx1249_eos
    .local int rx1249_rep
    .local pmc rx1249_cur
    .local pmc rx1249_curclass
    .local pmc rx1249_bstack
    .local pmc rx1249_cstack
    (rx1249_cur, rx1249_tgt, rx1249_pos, rx1249_curclass, rx1249_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1249_cur
    length rx1249_eos, rx1249_tgt
    eq $I19, 1, rx1249_restart3551
    gt rx1249_pos, rx1249_eos, rx1249_fail3552
    repr_get_attr_int $I11, self, rx1249_curclass, "$!from"
    ne $I11, -1, rxscan1250_done3558
    goto rxscan1250_scan3557
  rxscan1250_loop3556:
    inc rx1249_pos
    gt rx1249_pos, rx1249_eos, rx1249_fail3552
    repr_bind_attr_int rx1249_cur, rx1249_curclass, "$!from", rx1249_pos
  rxscan1250_scan3557:
    nqp_rxmark rx1249_bstack, rxscan1250_loop3556, rx1249_pos, 0
  rxscan1250_done3558:
    add $I11, rx1249_pos, 1
    gt $I11, rx1249_eos, rx1249_fail3552
    substr $S10, rx1249_tgt, rx1249_pos, 1
    ne $S10, ucs4:"{", rx1249_fail3552
    add rx1249_pos, 1
    rx1249_cur."!cursor_pass"(rx1249_pos, 'backtrack'=>1)
    .return (rx1249_cur)
  rx1249_restart3551:
    repr_get_attr_obj rx1249_cstack, rx1249_cur, rx1249_curclass, "$!cstack"
  rx1249_fail3552:
    unless rx1249_bstack, rx1249_done3550
    pop $I19, rx1249_bstack
    if_null rx1249_cstack, rx1249_cstack_done3555
    unless rx1249_cstack, rx1249_cstack_done3555
    dec $I19
    set $P11, rx1249_cstack[$I19]
  rx1249_cstack_done3555:
    pop rx1249_rep, rx1249_bstack
    pop rx1249_pos, rx1249_bstack
    pop $I19, rx1249_bstack
    lt rx1249_pos, -1, rx1249_done3550
    lt rx1249_pos, 0, rx1249_fail3552
    eq $I19, 0, rx1249_fail3552
    nqp_islist $I20, rx1249_cstack
    unless $I20, rx1249_jump3553
    elements $I18, rx1249_bstack
    le $I18, 0, rx1249_cut3554
    dec $I18
    set $I18, rx1249_bstack[$I18]
  rx1249_cut3554:
    assign rx1249_cstack, $I18
  rx1249_jump3553:
    jump $I19
  rx1249_done3550:
    rx1249_cur."!cursor_fail"()
    .return (rx1249_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_235_1347804164.33_caps" :subid("cuid_memo_406_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_235_1347804164.33_nfa" :subid("cuid_memo_407_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 123
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_238_1347804164.33") :anon :lex :outer("cuid_242_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1377
    .param pmc _lex_param_0 
    .const 'Sub' $P5002 = 'cuid_237_1347804164.33' 
    capture_lex $P5002 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1252_tgt
    .local int rx1252_pos
    .local int rx1252_off
    .local int rx1252_eos
    .local int rx1252_rep
    .local pmc rx1252_cur
    .local pmc rx1252_curclass
    .local pmc rx1252_bstack
    .local pmc rx1252_cstack
    (rx1252_cur, rx1252_tgt, rx1252_pos, rx1252_curclass, rx1252_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1252_cur
    length rx1252_eos, rx1252_tgt
    eq $I19, 1, rx1252_restart3562
    gt rx1252_pos, rx1252_eos, rx1252_fail3563
    repr_get_attr_int $I11, self, rx1252_curclass, "$!from"
    ne $I11, -1, rxscan1253_done3569
    goto rxscan1253_scan3568
  rxscan1253_loop3567:
    inc rx1252_pos
    gt rx1252_pos, rx1252_eos, rx1252_fail3563
    repr_bind_attr_int rx1252_cur, rx1252_curclass, "$!from", rx1252_pos
  rxscan1253_scan3568:
    nqp_rxmark rx1252_bstack, rxscan1253_loop3567, rx1252_pos, 0
  rxscan1253_done3569:
    repr_bind_attr_int rx1252_cur, rx1252_curclass, "$!pos", rx1252_pos
    $P11 = rx1252_cur."identifier"()
    repr_get_attr_int $I11, $P11, rx1252_curclass, "$!pos"
    lt $I11, 0, rx1252_fail3563
    nqp_rxmark rx1252_bstack, rxsubrule1254_pass3570, -1, 0
  rxsubrule1254_pass3570:
    rx1252_cstack = rx1252_cur."!cursor_capture"($P11, "longname")
    repr_get_attr_int rx1252_pos, $P11, rx1252_curclass, "$!pos"
    nqp_rxmark rx1252_bstack, rxquantr1255_done3572, rx1252_pos, 0
  rxquantr1255_loop3571:
    new $P11, "ResizableIntegerArray"
    nqp_push_label $P11, alt1256_03574
    nqp_push_label $P11, alt1256_13585
    nqp_push_label $P11, alt1256_23587
    nqp_push_label $P11, alt1256_33589
    nqp_push_label $P11, alt1256_43591
    nqp_rxmark rx1252_bstack, alt1256_end3573, -1, 0
    rx1252_cur."!alt"(rx1252_pos, "alt_nfa__42_1347804167.709", $P11)
    goto rx1252_fail3563
  alt1256_03574:
    .const 'Sub' $P5001 = 'cuid_237_1347804164.33' 
    capture_lex $P5001
    repr_bind_attr_int rx1252_cur, rx1252_curclass, "$!pos", rx1252_pos
    $P11 = rx1252_cur."before"($P5001)
    repr_get_attr_int $I11, $P11, rx1252_curclass, "$!pos"
    lt $I11, 0, rx1252_fail3563
    goto alt1256_end3573
  alt1256_13585:
    add $I11, rx1252_pos, 1
    gt $I11, rx1252_eos, rx1252_fail3563
    substr $S10, rx1252_tgt, rx1252_pos, 1
    ne $S10, ucs4:"=", rx1252_fail3563
    add rx1252_pos, 1
    repr_bind_attr_int rx1252_cur, rx1252_curclass, "$!pos", rx1252_pos
    $P11 = rx1252_cur."assertion"()
    repr_get_attr_int $I11, $P11, rx1252_curclass, "$!pos"
    lt $I11, 0, rx1252_fail3563
    nqp_rxmark rx1252_bstack, rxsubrule1259_pass3586, -1, 0
  rxsubrule1259_pass3586:
    rx1252_cstack = rx1252_cur."!cursor_capture"($P11, "assertion")
    repr_get_attr_int rx1252_pos, $P11, rx1252_curclass, "$!pos"
    goto alt1256_end3573
  alt1256_23587:
    add $I11, rx1252_pos, 1
    gt $I11, rx1252_eos, rx1252_fail3563
    substr $S10, rx1252_tgt, rx1252_pos, 1
    ne $S10, ucs4:":", rx1252_fail3563
    add rx1252_pos, 1
    repr_bind_attr_int rx1252_cur, rx1252_curclass, "$!pos", rx1252_pos
    $P11 = rx1252_cur."arglist"()
    repr_get_attr_int $I11, $P11, rx1252_curclass, "$!pos"
    lt $I11, 0, rx1252_fail3563
    nqp_rxmark rx1252_bstack, rxsubrule1260_pass3588, -1, 0
  rxsubrule1260_pass3588:
    rx1252_cstack = rx1252_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1252_pos, $P11, rx1252_curclass, "$!pos"
    goto alt1256_end3573
  alt1256_33589:
    add $I11, rx1252_pos, 1
    gt $I11, rx1252_eos, rx1252_fail3563
    substr $S10, rx1252_tgt, rx1252_pos, 1
    ne $S10, ucs4:"(", rx1252_fail3563
    add rx1252_pos, 1
    repr_bind_attr_int rx1252_cur, rx1252_curclass, "$!pos", rx1252_pos
    $P11 = rx1252_cur."LANG"("MAIN", "arglist")
    repr_get_attr_int $I11, $P11, rx1252_curclass, "$!pos"
    lt $I11, 0, rx1252_fail3563
    nqp_rxmark rx1252_bstack, rxsubrule1261_pass3590, -1, 0
  rxsubrule1261_pass3590:
    rx1252_cstack = rx1252_cur."!cursor_capture"($P11, "arglist")
    repr_get_attr_int rx1252_pos, $P11, rx1252_curclass, "$!pos"
    add $I11, rx1252_pos, 1
    gt $I11, rx1252_eos, rx1252_fail3563
    substr $S10, rx1252_tgt, rx1252_pos, 1
    ne $S10, ucs4:")", rx1252_fail3563
    add rx1252_pos, 1
    goto alt1256_end3573
  alt1256_43591:
    repr_bind_attr_int rx1252_cur, rx1252_curclass, "$!pos", rx1252_pos
    $P11 = rx1252_cur."normspace"()
    repr_get_attr_int $I11, $P11, rx1252_curclass, "$!pos"
    lt $I11, 0, rx1252_fail3563
    repr_get_attr_int rx1252_pos, $P11, rx1252_curclass, "$!pos"
    repr_bind_attr_int rx1252_cur, rx1252_curclass, "$!pos", rx1252_pos
    $P11 = rx1252_cur."nibbler"()
    repr_get_attr_int $I11, $P11, rx1252_curclass, "$!pos"
    lt $I11, 0, rx1252_fail3563
    nqp_rxmark rx1252_bstack, rxsubrule1263_pass3593, -1, 0
  rxsubrule1263_pass3593:
    rx1252_cstack = rx1252_cur."!cursor_capture"($P11, "nibbler")
    repr_get_attr_int rx1252_pos, $P11, rx1252_curclass, "$!pos"
    goto alt1256_end3573
  alt1256_end3573:
    nqp_rxpeek $I19, rx1252_bstack, rxquantr1255_done3572
    inc $I19
    inc $I19
    set rx1252_rep, rx1252_bstack[$I19]
    nqp_rxcommit rx1252_bstack, rxquantr1255_done3572
    inc rx1252_rep
  rxquantr1255_done3572:
    rx1252_cur."!cursor_pass"(rx1252_pos, "assertion:sym<name>", 'backtrack'=>1)
    .return (rx1252_cur)
  rx1252_restart3562:
    repr_get_attr_obj rx1252_cstack, rx1252_cur, rx1252_curclass, "$!cstack"
  rx1252_fail3563:
    unless rx1252_bstack, rx1252_done3561
    pop $I19, rx1252_bstack
    if_null rx1252_cstack, rx1252_cstack_done3566
    unless rx1252_cstack, rx1252_cstack_done3566
    dec $I19
    set $P11, rx1252_cstack[$I19]
  rx1252_cstack_done3566:
    pop rx1252_rep, rx1252_bstack
    pop rx1252_pos, rx1252_bstack
    pop $I19, rx1252_bstack
    lt rx1252_pos, -1, rx1252_done3561
    lt rx1252_pos, 0, rx1252_fail3563
    eq $I19, 0, rx1252_fail3563
    nqp_islist $I20, rx1252_cstack
    unless $I20, rx1252_jump3564
    elements $I18, rx1252_bstack
    le $I18, 0, rx1252_cut3565
    dec $I18
    set $I18, rx1252_bstack[$I18]
  rx1252_cut3565:
    assign rx1252_cstack, $I18
  rx1252_jump3564:
    jump $I19
  rx1252_done3561:
    rx1252_cur."!cursor_fail"()
    .return (rx1252_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_238_1347804164.33_caps" :subid("cuid_memo_408_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["longname"], $P5002
    box $P5003, 2
    set $P5001["assertion"], $P5003
    box $P5004, 2
    set $P5001["arglist"], $P5004
    box $P5005, 2
    set $P5001["nibbler"], $P5005
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_238_1347804164.33_nfa" :subid("cuid_memo_409_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "identifier"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 2
    push $P5007, $P5008
    box $P5009, 62
    push $P5007, $P5009
    box $P5010, 3
    push $P5007, $P5010
    box $P5011, 2
    push $P5007, $P5011
    box $P5012, 61
    push $P5007, $P5012
    box $P5013, 4
    push $P5007, $P5013
    box $P5014, 2
    push $P5007, $P5014
    box $P5015, 58
    push $P5007, $P5015
    box $P5016, 5
    push $P5007, $P5016
    box $P5017, 2
    push $P5007, $P5017
    box $P5018, 40
    push $P5007, $P5018
    box $P5019, 6
    push $P5007, $P5019
    box $P5020, 8
    push $P5007, $P5020
    box $P5021, "normspace"
    push $P5007, $P5021
    box $P5022, 8
    push $P5007, $P5022
    box $P5023, 1
    push $P5007, $P5023
    box $P5024, 0
    push $P5007, $P5024
    box $P5025, 0
    push $P5007, $P5025
    push $P5001, $P5007
    new $P5026, 'ResizablePMCArray'
    box $P5027, 0
    push $P5026, $P5027
    box $P5028, 0
    push $P5026, $P5028
    box $P5029, 0
    push $P5026, $P5029
    push $P5001, $P5026
    new $P5030, 'ResizablePMCArray'
    box $P5031, 8
    push $P5030, $P5031
    box $P5032, "assertion"
    push $P5030, $P5032
    box $P5033, 0
    push $P5030, $P5033
    push $P5001, $P5030
    new $P5034, 'ResizablePMCArray'
    box $P5035, 8
    push $P5034, $P5035
    box $P5036, "arglist"
    push $P5034, $P5036
    box $P5037, 0
    push $P5034, $P5037
    push $P5001, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 8
    push $P5038, $P5039
    box $P5040, "LANG"
    push $P5038, $P5040
    box $P5041, 7
    push $P5038, $P5041
    push $P5001, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 41
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5001, $P5042
    new $P5046, 'ResizablePMCArray'
    box $P5047, 8
    push $P5046, $P5047
    box $P5048, "nibbler"
    push $P5046, $P5048
    box $P5049, 0
    push $P5046, $P5049
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_238_1347804164.33_alt_nfa__42_1347804167.709" :subid("cuid_memo_410_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    new $P5003, 'ResizablePMCArray'
    push $P5002, $P5003
    new $P5004, 'ResizablePMCArray'
    box $P5005, 2
    push $P5004, $P5005
    box $P5006, 62
    push $P5004, $P5006
    box $P5007, 2
    push $P5004, $P5007
    push $P5002, $P5004
    new $P5008, 'ResizablePMCArray'
    box $P5009, 0
    push $P5008, $P5009
    box $P5010, 0
    push $P5008, $P5010
    box $P5011, 0
    push $P5008, $P5011
    push $P5002, $P5008
    push $P5001, $P5002
    new $P5012, 'ResizablePMCArray'
    new $P5013, 'ResizablePMCArray'
    push $P5012, $P5013
    new $P5014, 'ResizablePMCArray'
    box $P5015, 2
    push $P5014, $P5015
    box $P5016, 61
    push $P5014, $P5016
    box $P5017, 2
    push $P5014, $P5017
    push $P5012, $P5014
    new $P5018, 'ResizablePMCArray'
    box $P5019, 8
    push $P5018, $P5019
    box $P5020, "assertion"
    push $P5018, $P5020
    box $P5021, 0
    push $P5018, $P5021
    push $P5012, $P5018
    push $P5001, $P5012
    new $P5022, 'ResizablePMCArray'
    new $P5023, 'ResizablePMCArray'
    push $P5022, $P5023
    new $P5024, 'ResizablePMCArray'
    box $P5025, 2
    push $P5024, $P5025
    box $P5026, 58
    push $P5024, $P5026
    box $P5027, 2
    push $P5024, $P5027
    push $P5022, $P5024
    new $P5028, 'ResizablePMCArray'
    box $P5029, 8
    push $P5028, $P5029
    box $P5030, "arglist"
    push $P5028, $P5030
    box $P5031, 0
    push $P5028, $P5031
    push $P5022, $P5028
    push $P5001, $P5022
    new $P5032, 'ResizablePMCArray'
    new $P5033, 'ResizablePMCArray'
    push $P5032, $P5033
    new $P5034, 'ResizablePMCArray'
    box $P5035, 2
    push $P5034, $P5035
    box $P5036, 40
    push $P5034, $P5036
    box $P5037, 2
    push $P5034, $P5037
    push $P5032, $P5034
    new $P5038, 'ResizablePMCArray'
    box $P5039, 8
    push $P5038, $P5039
    box $P5040, "LANG"
    push $P5038, $P5040
    box $P5041, 3
    push $P5038, $P5041
    push $P5032, $P5038
    new $P5042, 'ResizablePMCArray'
    box $P5043, 2
    push $P5042, $P5043
    box $P5044, 41
    push $P5042, $P5044
    box $P5045, 0
    push $P5042, $P5045
    push $P5032, $P5042
    push $P5001, $P5032
    new $P5046, 'ResizablePMCArray'
    new $P5047, 'ResizablePMCArray'
    push $P5046, $P5047
    new $P5048, 'ResizablePMCArray'
    box $P5049, 8
    push $P5048, $P5049
    box $P5050, "normspace"
    push $P5048, $P5050
    box $P5051, 2
    push $P5048, $P5051
    push $P5046, $P5048
    new $P5052, 'ResizablePMCArray'
    box $P5053, 8
    push $P5052, $P5053
    box $P5054, "nibbler"
    push $P5052, $P5054
    box $P5055, 0
    push $P5052, $P5055
    push $P5046, $P5052
    push $P5001, $P5046
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_237_1347804164.33") :anon :lex :outer("cuid_238_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .param pmc self 
    .lex utf8:"$\x{a2}", $P101 
    .local string rx1257_tgt
    .local int rx1257_pos
    .local int rx1257_off
    .local int rx1257_eos
    .local int rx1257_rep
    .local pmc rx1257_cur
    .local pmc rx1257_curclass
    .local pmc rx1257_bstack
    .local pmc rx1257_cstack
    (rx1257_cur, rx1257_tgt, rx1257_pos, rx1257_curclass, rx1257_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1257_cur
    length rx1257_eos, rx1257_tgt
    eq $I19, 1, rx1257_restart3577
    gt rx1257_pos, rx1257_eos, rx1257_fail3578
    repr_get_attr_int $I11, self, rx1257_curclass, "$!from"
    ne $I11, -1, rxscan1258_done3584
    goto rxscan1258_scan3583
  rxscan1258_loop3582:
    inc rx1257_pos
    gt rx1257_pos, rx1257_eos, rx1257_fail3578
    repr_bind_attr_int rx1257_cur, rx1257_curclass, "$!from", rx1257_pos
  rxscan1258_scan3583:
    nqp_rxmark rx1257_bstack, rxscan1258_loop3582, rx1257_pos, 0
  rxscan1258_done3584:
    add $I11, rx1257_pos, 1
    gt $I11, rx1257_eos, rx1257_fail3578
    substr $S10, rx1257_tgt, rx1257_pos, 1
    ne $S10, ucs4:">", rx1257_fail3578
    add rx1257_pos, 1
    rx1257_cur."!cursor_pass"(rx1257_pos, 'backtrack'=>1)
    .return (rx1257_cur)
  rx1257_restart3577:
    repr_get_attr_obj rx1257_cstack, rx1257_cur, rx1257_curclass, "$!cstack"
  rx1257_fail3578:
    unless rx1257_bstack, rx1257_done3576
    pop $I19, rx1257_bstack
    if_null rx1257_cstack, rx1257_cstack_done3581
    unless rx1257_cstack, rx1257_cstack_done3581
    dec $I19
    set $P11, rx1257_cstack[$I19]
  rx1257_cstack_done3581:
    pop rx1257_rep, rx1257_bstack
    pop rx1257_pos, rx1257_bstack
    pop $I19, rx1257_bstack
    lt rx1257_pos, -1, rx1257_done3576
    lt rx1257_pos, 0, rx1257_fail3578
    eq $I19, 0, rx1257_fail3578
    nqp_islist $I20, rx1257_cstack
    unless $I20, rx1257_jump3579
    elements $I18, rx1257_bstack
    le $I18, 0, rx1257_cut3580
    dec $I18
    set $I18, rx1257_bstack[$I18]
  rx1257_cut3580:
    assign rx1257_cstack, $I18
  rx1257_jump3579:
    jump $I19
  rx1257_done3576:
    rx1257_cur."!cursor_fail"()
    .return (rx1257_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_237_1347804164.33_caps" :subid("cuid_memo_411_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_237_1347804164.33_nfa" :subid("cuid_memo_412_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 2
    push $P5003, $P5004
    box $P5005, 62
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_239_1347804164.33") :anon :lex :outer("cuid_242_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1388
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1264_tgt
    .local int rx1264_pos
    .local int rx1264_off
    .local int rx1264_eos
    .local int rx1264_rep
    .local pmc rx1264_cur
    .local pmc rx1264_curclass
    .local pmc rx1264_bstack
    .local pmc rx1264_cstack
    (rx1264_cur, rx1264_tgt, rx1264_pos, rx1264_curclass, rx1264_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1264_cur
    length rx1264_eos, rx1264_tgt
    eq $I19, 1, rx1264_restart3596
    gt rx1264_pos, rx1264_eos, rx1264_fail3597
    repr_get_attr_int $I11, self, rx1264_curclass, "$!from"
    ne $I11, -1, rxscan1265_done3603
    goto rxscan1265_scan3602
  rxscan1265_loop3601:
    inc rx1264_pos
    gt rx1264_pos, rx1264_eos, rx1264_fail3597
    repr_bind_attr_int rx1264_cur, rx1264_curclass, "$!from", rx1264_pos
  rxscan1265_scan3602:
    nqp_rxmark rx1264_bstack, rxscan1265_loop3601, rx1264_pos, 0
  rxscan1265_done3603:
    ge rx1264_pos, rx1264_eos, rx1264_fail3597
    substr $S11, rx1264_tgt, rx1264_pos, 1
    index $I11, ucs4:"$@", $S11
    lt $I11, 0, rx1264_fail3597
    repr_bind_attr_int rx1264_cur, rx1264_curclass, "$!pos", rx1264_pos
    $P11 = rx1264_cur."LANG"("MAIN", "variable")
    repr_get_attr_int $I11, $P11, rx1264_curclass, "$!pos"
    lt $I11, 0, rx1264_fail3597
    nqp_rxmark rx1264_bstack, rxsubrule1266_pass3604, -1, 0
  rxsubrule1266_pass3604:
    rx1264_cstack = rx1264_cur."!cursor_capture"($P11, "var")
    repr_get_attr_int rx1264_pos, $P11, rx1264_curclass, "$!pos"
    rx1264_cur."!cursor_pass"(rx1264_pos, "assertion:sym<var>", 'backtrack'=>1)
    .return (rx1264_cur)
  rx1264_restart3596:
    repr_get_attr_obj rx1264_cstack, rx1264_cur, rx1264_curclass, "$!cstack"
  rx1264_fail3597:
    unless rx1264_bstack, rx1264_done3595
    pop $I19, rx1264_bstack
    if_null rx1264_cstack, rx1264_cstack_done3600
    unless rx1264_cstack, rx1264_cstack_done3600
    dec $I19
    set $P11, rx1264_cstack[$I19]
  rx1264_cstack_done3600:
    pop rx1264_rep, rx1264_bstack
    pop rx1264_pos, rx1264_bstack
    pop $I19, rx1264_bstack
    lt rx1264_pos, -1, rx1264_done3595
    lt rx1264_pos, 0, rx1264_fail3597
    eq $I19, 0, rx1264_fail3597
    nqp_islist $I20, rx1264_cstack
    unless $I20, rx1264_jump3598
    elements $I18, rx1264_bstack
    le $I18, 0, rx1264_cut3599
    dec $I18
    set $I18, rx1264_bstack[$I18]
  rx1264_cut3599:
    assign rx1264_cstack, $I18
  rx1264_jump3598:
    jump $I19
  rx1264_done3595:
    rx1264_cur."!cursor_fail"()
    .return (rx1264_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_239_1347804164.33_caps" :subid("cuid_memo_413_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["var"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_239_1347804164.33_nfa" :subid("cuid_memo_414_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 6
    push $P5003, $P5004
    box $P5005, "$@"
    push $P5003, $P5005
    box $P5006, 2
    push $P5003, $P5006
    push $P5001, $P5003
    new $P5007, 'ResizablePMCArray'
    box $P5008, 0
    push $P5007, $P5008
    box $P5009, 0
    push $P5007, $P5009
    box $P5010, 0
    push $P5007, $P5010
    push $P5001, $P5007
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_240_1347804164.33") :anon :lex :outer("cuid_242_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1392
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1267_tgt
    .local int rx1267_pos
    .local int rx1267_off
    .local int rx1267_eos
    .local int rx1267_rep
    .local pmc rx1267_cur
    .local pmc rx1267_curclass
    .local pmc rx1267_bstack
    .local pmc rx1267_cstack
    (rx1267_cur, rx1267_tgt, rx1267_pos, rx1267_curclass, rx1267_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1267_cur
    length rx1267_eos, rx1267_tgt
    eq $I19, 1, rx1267_restart3607
    gt rx1267_pos, rx1267_eos, rx1267_fail3608
    repr_get_attr_int $I11, self, rx1267_curclass, "$!from"
    ne $I11, -1, rxscan1268_done3614
    goto rxscan1268_scan3613
  rxscan1268_loop3612:
    inc rx1267_pos
    gt rx1267_pos, rx1267_eos, rx1267_fail3608
    repr_bind_attr_int rx1267_cur, rx1267_curclass, "$!from", rx1267_pos
  rxscan1268_scan3613:
    nqp_rxmark rx1267_bstack, rxscan1268_loop3612, rx1267_pos, 0
  rxscan1268_done3614:
    repr_bind_attr_int rx1267_cur, rx1267_curclass, "$!pos", rx1267_pos
    $P11 = rx1267_cur."LANG"("MAIN", "pblock")
    repr_get_attr_int $I11, $P11, rx1267_curclass, "$!pos"
    lt $I11, 0, rx1267_fail3608
    nqp_rxmark rx1267_bstack, rxsubrule1269_pass3615, -1, 0
  rxsubrule1269_pass3615:
    rx1267_cstack = rx1267_cur."!cursor_capture"($P11, "block")
    repr_get_attr_int rx1267_pos, $P11, rx1267_curclass, "$!pos"
    rx1267_cur."!cursor_pass"(rx1267_pos, "codeblock", 'backtrack'=>1)
    .return (rx1267_cur)
  rx1267_restart3607:
    repr_get_attr_obj rx1267_cstack, rx1267_cur, rx1267_curclass, "$!cstack"
  rx1267_fail3608:
    unless rx1267_bstack, rx1267_done3606
    pop $I19, rx1267_bstack
    if_null rx1267_cstack, rx1267_cstack_done3611
    unless rx1267_cstack, rx1267_cstack_done3611
    dec $I19
    set $P11, rx1267_cstack[$I19]
  rx1267_cstack_done3611:
    pop rx1267_rep, rx1267_bstack
    pop rx1267_pos, rx1267_bstack
    pop $I19, rx1267_bstack
    lt rx1267_pos, -1, rx1267_done3606
    lt rx1267_pos, 0, rx1267_fail3608
    eq $I19, 0, rx1267_fail3608
    nqp_islist $I20, rx1267_cstack
    unless $I20, rx1267_jump3609
    elements $I18, rx1267_bstack
    le $I18, 0, rx1267_cut3610
    dec $I18
    set $I18, rx1267_bstack[$I18]
  rx1267_cut3610:
    assign rx1267_cstack, $I18
  rx1267_jump3609:
    jump $I19
  rx1267_done3606:
    rx1267_cur."!cursor_fail"()
    .return (rx1267_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_240_1347804164.33_caps" :subid("cuid_memo_415_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["block"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_240_1347804164.33_nfa" :subid("cuid_memo_416_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "LANG"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_241_1347804164.33") :anon :lex :outer("cuid_242_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1396
    .param pmc _lex_param_0 
    .lex utf8:"$\x{a2}", $P101 
    .lex "$/", $P102 
    .lex "self", _lex_param_0 
    .local pmc self 
    set self, _lex_param_0
    .local string rx1270_tgt
    .local int rx1270_pos
    .local int rx1270_off
    .local int rx1270_eos
    .local int rx1270_rep
    .local pmc rx1270_cur
    .local pmc rx1270_curclass
    .local pmc rx1270_bstack
    .local pmc rx1270_cstack
    (rx1270_cur, rx1270_tgt, rx1270_pos, rx1270_curclass, rx1270_bstack, $I19) = self."!cursor_start"()
    store_lex unicode:"$\x{a2}", rx1270_cur
    length rx1270_eos, rx1270_tgt
    eq $I19, 1, rx1270_restart3618
    gt rx1270_pos, rx1270_eos, rx1270_fail3619
    repr_get_attr_int $I11, self, rx1270_curclass, "$!from"
    ne $I11, -1, rxscan1271_done3625
    goto rxscan1271_scan3624
  rxscan1271_loop3623:
    inc rx1270_pos
    gt rx1270_pos, rx1270_eos, rx1270_fail3619
    repr_bind_attr_int rx1270_cur, rx1270_curclass, "$!from", rx1270_pos
  rxscan1271_scan3624:
    nqp_rxmark rx1270_bstack, rxscan1271_loop3623, rx1270_pos, 0
  rxscan1271_done3625:
    repr_bind_attr_int rx1270_cur, rx1270_curclass, "$!pos", rx1270_pos
    $P11 = rx1270_cur."LANG"("MAIN", "quote_EXPR")
    repr_get_attr_int $I11, $P11, rx1270_curclass, "$!pos"
    lt $I11, 0, rx1270_fail3619
    nqp_rxmark rx1270_bstack, rxsubrule1272_pass3626, -1, 0
  rxsubrule1272_pass3626:
    rx1270_cstack = rx1270_cur."!cursor_capture"($P11, "quote_EXPR")
    repr_get_attr_int rx1270_pos, $P11, rx1270_curclass, "$!pos"
    rx1270_cur."!cursor_pass"(rx1270_pos, "arg", 'backtrack'=>1)
    .return (rx1270_cur)
  rx1270_restart3618:
    repr_get_attr_obj rx1270_cstack, rx1270_cur, rx1270_curclass, "$!cstack"
  rx1270_fail3619:
    unless rx1270_bstack, rx1270_done3617
    pop $I19, rx1270_bstack
    if_null rx1270_cstack, rx1270_cstack_done3622
    unless rx1270_cstack, rx1270_cstack_done3622
    dec $I19
    set $P11, rx1270_cstack[$I19]
  rx1270_cstack_done3622:
    pop rx1270_rep, rx1270_bstack
    pop rx1270_pos, rx1270_bstack
    pop $I19, rx1270_bstack
    lt rx1270_pos, -1, rx1270_done3617
    lt rx1270_pos, 0, rx1270_fail3619
    eq $I19, 0, rx1270_fail3619
    nqp_islist $I20, rx1270_cstack
    unless $I20, rx1270_jump3620
    elements $I18, rx1270_bstack
    le $I18, 0, rx1270_cut3621
    dec $I18
    set $I18, rx1270_bstack[$I18]
  rx1270_cut3621:
    assign rx1270_cstack, $I18
  rx1270_jump3620:
    jump $I19
  rx1270_done3617:
    rx1270_cur."!cursor_fail"()
    .return (rx1270_cur) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_241_1347804164.33_caps" :subid("cuid_memo_417_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'Hash'
    box $P5002, 0
    set $P5001["quote_EXPR"], $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace ["Sub"]
.sub "cuid_241_1347804164.33_nfa" :subid("cuid_memo_418_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    new $P5002, 'ResizablePMCArray'
    push $P5001, $P5002
    new $P5003, 'ResizablePMCArray'
    box $P5004, 8
    push $P5003, $P5004
    box $P5005, "LANG"
    push $P5003, $P5005
    box $P5006, 0
    push $P5003, $P5006
    push $P5001, $P5003
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_401_1347804164.33") :anon :lex :outer("cuid_1_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1407
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3628
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5003
  fallback3628:
    set $P101, $P5002
    nqp_get_sc_object $P5007, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3631
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5008
  fallback3631:
    type_check $I5001, $P101, $P5004
    box $P5011, $I5001
    set $P5010, $P5011
    if $I5001 goto unless1273_end3630 
.annotate 'line', 1409
    box $P5009, "Pre-increment can only work on a variable"
    die $P5009
    set $P5010, $P5009
  unless1273_end3630:
.annotate 'line', 1412
    nqp_get_sc_object $P5015, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback3632
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5012, $P5016
  fallback3632:
.annotate 'line', 1415
    nqp_get_sc_object $P5020, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback3633
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5017, $P5021
  fallback3633:
.annotate 'line', 1418
    nqp_get_sc_object $P5025, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["IVal"]
    unless_null $P5022, fallback3634
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5022, $P5026
  fallback3634:
    $P5027 = $P5022."new"(1 :named("value"))
    $P5028 = $P5017."new"($P101, $P5027, "add_n" :named("op"))
    $P5029 = $P5012."new"($P101, $P5028, "bind" :named("op"))
    $P5030 = _lex_param_0."as_post"($P5029)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_402_1347804164.33") :anon :lex :outer("cuid_1_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1422
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    set $P5002, _lex_param_1[0]
    unless_null $P5002, fallback3635
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5003
  fallback3635:
    set $P101, $P5002
    nqp_get_sc_object $P5007, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback3638
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5008
  fallback3638:
    type_check $I5001, $P101, $P5004
    box $P5011, $I5001
    set $P5010, $P5011
    if $I5001 goto unless1274_end3637 
.annotate 'line', 1424
    box $P5009, "Pre-decrement can only work on a variable"
    die $P5009
    set $P5010, $P5009
  unless1274_end3637:
.annotate 'line', 1427
    nqp_get_sc_object $P5015, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback3639
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5012, $P5016
  fallback3639:
.annotate 'line', 1430
    nqp_get_sc_object $P5020, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback3640
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5017, $P5021
  fallback3640:
.annotate 'line', 1433
    nqp_get_sc_object $P5025, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["IVal"]
    unless_null $P5022, fallback3641
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5022, $P5026
  fallback3641:
    $P5027 = $P5022."new"(1 :named("value"))
    $P5028 = $P5017."new"($P101, $P5027, "sub_n" :named("op"))
    $P5029 = $P5012."new"($P101, $P5028, "bind" :named("op"))
    $P5030 = _lex_param_0."as_post"($P5029)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_403_1347804164.33") :anon :lex :outer("cuid_1_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1437
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3642
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5004
  fallback3642:
    set $P101, $P5003
.annotate 'line', 1439
    nqp_get_sc_object $P5008, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3643
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5005, $P5009
  fallback3643:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    nqp_get_sc_object $P5014, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3646
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5015
  fallback3646:
    type_check $I5001, $P101, $P5011
    box $P5018, $I5001
    set $P5017, $P5018
    if $I5001 goto unless1275_end3645 
.annotate 'line', 1440
    box $P5016, "Post-increment can only work on a variable"
    die $P5016
    set $P5017, $P5016
  unless1275_end3645:
.annotate 'line', 1443
    nqp_get_sc_object $P5022, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["Stmt"]
    unless_null $P5019, fallback3647
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5019, $P5023
  fallback3647:
.annotate 'line', 1445
    nqp_get_sc_object $P5027, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback3648
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5024, $P5028
  fallback3648:
.annotate 'line', 1447
    nqp_get_sc_object $P5032, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Var"]
    unless_null $P5029, fallback3649
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5029, $P5033
  fallback3649:
    $P5034 = $P5029."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"))
    $P5035 = $P5024."new"($P5034, $P101, "bind" :named("op"))
.annotate 'line', 1450
    nqp_get_sc_object $P5039, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback3650
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5036, $P5040
  fallback3650:
.annotate 'line', 1453
    nqp_get_sc_object $P5044, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Op"]
    unless_null $P5041, fallback3651
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5041, $P5045
  fallback3651:
.annotate 'line', 1455
    nqp_get_sc_object $P5049, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["Var"]
    unless_null $P5046, fallback3652
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5046, $P5050
  fallback3652:
    $P5051 = $P5046."new"($P102 :named("name"), "local" :named("scope"))
.annotate 'line', 1456
    nqp_get_sc_object $P5055, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["IVal"]
    unless_null $P5052, fallback3653
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5052, $P5056
  fallback3653:
    $P5057 = $P5052."new"(1 :named("value"))
    $P5058 = $P5041."new"($P5051, $P5057, "add_n" :named("op"))
    $P5059 = $P5036."new"($P101, $P5058, "bind" :named("op"))
    $P5060 = $P5019."new"($P5035, $P5059, 0 :named("resultchild"))
    $P5061 = _lex_param_0."as_post"($P5060)
    .return ($P5061) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_404_1347804164.33") :anon :lex :outer("cuid_1_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1461
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$var", $P101 
    .lex "$tmp", $P102 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    set $P5003, _lex_param_1[0]
    unless_null $P5003, fallback3654
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5004
  fallback3654:
    set $P101, $P5003
.annotate 'line', 1463
    nqp_get_sc_object $P5008, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5007, $P5008, "QAST"
    get_who $P5006, $P5007
    set $P5005, $P5006["Op"]
    unless_null $P5005, fallback3655
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5005, $P5009
  fallback3655:
    $P5010 = $P5005."unique"("tmp")
    set $P102, $P5010
    nqp_get_sc_object $P5014, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Var"]
    unless_null $P5011, fallback3658
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5015
  fallback3658:
    type_check $I5001, $P101, $P5011
    box $P5018, $I5001
    set $P5017, $P5018
    if $I5001 goto unless1276_end3657 
.annotate 'line', 1464
    box $P5016, "Post-decrement can only work on a variable"
    die $P5016
    set $P5017, $P5016
  unless1276_end3657:
.annotate 'line', 1467
    nqp_get_sc_object $P5022, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5021, $P5022, "QAST"
    get_who $P5020, $P5021
    set $P5019, $P5020["Stmt"]
    unless_null $P5019, fallback3659
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5019, $P5023
  fallback3659:
.annotate 'line', 1469
    nqp_get_sc_object $P5027, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback3660
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5024, $P5028
  fallback3660:
.annotate 'line', 1471
    nqp_get_sc_object $P5032, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Var"]
    unless_null $P5029, fallback3661
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5029, $P5033
  fallback3661:
    $P5034 = $P5029."new"($P102 :named("name"), "local" :named("scope"), "var" :named("decl"))
    $P5035 = $P5024."new"($P5034, $P101, "bind" :named("op"))
.annotate 'line', 1474
    nqp_get_sc_object $P5039, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Op"]
    unless_null $P5036, fallback3662
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5036, $P5040
  fallback3662:
.annotate 'line', 1477
    nqp_get_sc_object $P5044, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Op"]
    unless_null $P5041, fallback3663
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5041, $P5045
  fallback3663:
.annotate 'line', 1479
    nqp_get_sc_object $P5049, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["Var"]
    unless_null $P5046, fallback3664
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5046, $P5050
  fallback3664:
    $P5051 = $P5046."new"($P102 :named("name"), "local" :named("scope"))
.annotate 'line', 1480
    nqp_get_sc_object $P5055, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["IVal"]
    unless_null $P5052, fallback3665
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5052, $P5056
  fallback3665:
    $P5057 = $P5052."new"(1 :named("value"))
    $P5058 = $P5041."new"($P5051, $P5057, "sub_n" :named("op"))
    $P5059 = $P5036."new"($P101, $P5058, "bind" :named("op"))
    $P5060 = $P5019."new"($P5035, $P5059, 0 :named("resultchild"))
    $P5061 = _lex_param_0."as_post"($P5060)
    .return ($P5061) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_405_1347804164.33") :anon :lex :outer("cuid_1_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1485
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1486
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3666
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5002
  fallback3666:
    $P5003 = _lex_param_0."as_post"($P5001, "n" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_406_1347804164.33") :anon :lex :outer("cuid_1_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1489
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1490
    set $P5001, _lex_param_1[0]
    unless_null $P5001, fallback3667
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5002
  fallback3667:
    $P5003 = _lex_param_0."as_post"($P5001, "s" :named("want"))
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_407_1347804164.33") :anon :lex :outer("cuid_1_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1493
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$qastcomp", _lex_param_0 
    .lex "$op", _lex_param_1 
.annotate 'line', 1494
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3668
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback3668:
.annotate 'line', 1496
    nqp_get_sc_object $P5009, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Op"]
    unless_null $P5006, fallback3669
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5010
  fallback3669:
    set $P5011, _lex_param_1[0]
    unless_null $P5011, fallback3670
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5012
  fallback3670:
    $P5013 = $P5006."new"($P5011, "where" :named("op"))
.annotate 'line', 1497
    nqp_get_sc_object $P5017, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5016, $P5017, "QAST"
    get_who $P5015, $P5016
    set $P5014, $P5015["Op"]
    unless_null $P5014, fallback3671
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5014, $P5018
  fallback3671:
    set $P5019, _lex_param_1[1]
    unless_null $P5019, fallback3672
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5019, $P5020
  fallback3672:
    $P5021 = $P5014."new"($P5019, "where" :named("op"))
    $P5022 = $P5001."new"($P5013, $P5021, "iseq_i" :named("op"))
    $P5023 = _lex_param_0."as_post"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_354_1347804164.33") :anon :lex :outer("cuid_1_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1502
    .const 'Sub' $P5123 = 'cuid_408_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_411_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_414_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_415_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_418_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_420_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_421_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_422_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_424_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_425_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_430_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_243_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_244_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_245_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_246_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_247_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_248_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_249_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_250_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_251_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_252_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_253_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_254_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_255_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_256_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_257_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_258_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_259_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_260_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_261_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_262_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_263_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_264_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_265_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_266_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_267_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_268_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_269_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_270_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_271_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_272_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_273_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_274_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_275_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_276_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_277_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_278_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_279_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_280_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_281_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_282_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_283_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_284_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_285_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_286_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_287_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_288_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_289_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_290_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_291_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_292_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_293_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_294_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_295_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_296_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_297_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_298_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_299_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_300_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_301_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_302_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_303_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_304_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_305_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_306_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_307_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_308_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_309_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_310_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_311_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_312_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_313_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_314_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_315_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_316_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_317_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_318_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_319_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_320_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_321_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_322_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_323_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_324_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_325_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_326_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_327_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_328_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_329_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_330_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_331_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_332_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_333_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_334_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_335_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_336_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_337_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_338_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_339_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_340_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_341_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_342_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_343_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_344_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_345_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_346_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_347_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_348_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_349_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_350_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_351_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_352_1347804164.33' 
    capture_lex $P5123 
    .const 'Sub' $P5123 = 'cuid_353_1347804164.33' 
    capture_lex $P5123 
    .lex "&xblock_immediate", $P101 
    .lex "&block_immediate", $P102 
    .lex "&default_for", $P103 
    .lex "&default_value_for_prim", $P104 
    .lex "&colonpair_str", $P105 
    .lex "&import_HOW_exports", $P106 
    .lex "&set_block_handler", $P107 
    .lex "&only_star_block", $P108 
    .lex "&attach_multi_signature", $P109 
    .lex "&wrap_return_handler", $P110 
    .lex "&lexical_package_lookup", $P111 
    .lex "$?PACKAGE", $P112 
    .lex "$?CLASS", $P113 
    .const 'Sub' $P5001 = 'cuid_408_1347804164.33' 
    capture_lex $P5001
    set $P101, $P5001
    .const 'Sub' $P5002 = 'cuid_411_1347804164.33' 
    capture_lex $P5002
    set $P102, $P5002
    .const 'Sub' $P5003 = 'cuid_414_1347804164.33' 
    capture_lex $P5003
    set $P103, $P5003
    .const 'Sub' $P5004 = 'cuid_415_1347804164.33' 
    capture_lex $P5004
    set $P104, $P5004
    .const 'Sub' $P5005 = 'cuid_418_1347804164.33' 
    capture_lex $P5005
    set $P105, $P5005
    .const 'Sub' $P5006 = 'cuid_420_1347804164.33' 
    capture_lex $P5006
    set $P106, $P5006
    .const 'Sub' $P5007 = 'cuid_421_1347804164.33' 
    capture_lex $P5007
    set $P107, $P5007
    .const 'Sub' $P5008 = 'cuid_422_1347804164.33' 
    capture_lex $P5008
    set $P108, $P5008
    .const 'Sub' $P5009 = 'cuid_424_1347804164.33' 
    capture_lex $P5009
    set $P109, $P5009
    .const 'Sub' $P5010 = 'cuid_425_1347804164.33' 
    capture_lex $P5010
    set $P110, $P5010
    .const 'Sub' $P5011 = 'cuid_430_1347804164.33' 
    capture_lex $P5011
    set $P111, $P5011
    .const 'Sub' $P5012 = 'cuid_243_1347804164.33' 
    capture_lex $P5012
    .const 'Sub' $P5013 = 'cuid_244_1347804164.33' 
    capture_lex $P5013
    .const 'Sub' $P5014 = 'cuid_245_1347804164.33' 
    capture_lex $P5014
    .const 'Sub' $P5015 = 'cuid_246_1347804164.33' 
    capture_lex $P5015
    .const 'Sub' $P5016 = 'cuid_247_1347804164.33' 
    capture_lex $P5016
    .const 'Sub' $P5017 = 'cuid_248_1347804164.33' 
    capture_lex $P5017
    .const 'Sub' $P5018 = 'cuid_249_1347804164.33' 
    capture_lex $P5018
    .const 'Sub' $P5019 = 'cuid_250_1347804164.33' 
    capture_lex $P5019
    .const 'Sub' $P5020 = 'cuid_251_1347804164.33' 
    capture_lex $P5020
    .const 'Sub' $P5021 = 'cuid_252_1347804164.33' 
    capture_lex $P5021
    .const 'Sub' $P5022 = 'cuid_253_1347804164.33' 
    capture_lex $P5022
    .const 'Sub' $P5023 = 'cuid_254_1347804164.33' 
    capture_lex $P5023
    .const 'Sub' $P5024 = 'cuid_255_1347804164.33' 
    capture_lex $P5024
    .const 'Sub' $P5025 = 'cuid_256_1347804164.33' 
    capture_lex $P5025
    .const 'Sub' $P5026 = 'cuid_257_1347804164.33' 
    capture_lex $P5026
    .const 'Sub' $P5027 = 'cuid_258_1347804164.33' 
    capture_lex $P5027
    .const 'Sub' $P5028 = 'cuid_259_1347804164.33' 
    capture_lex $P5028
    .const 'Sub' $P5029 = 'cuid_260_1347804164.33' 
    capture_lex $P5029
    .const 'Sub' $P5030 = 'cuid_261_1347804164.33' 
    capture_lex $P5030
    .const 'Sub' $P5031 = 'cuid_262_1347804164.33' 
    capture_lex $P5031
    .const 'Sub' $P5032 = 'cuid_263_1347804164.33' 
    capture_lex $P5032
    .const 'Sub' $P5033 = 'cuid_264_1347804164.33' 
    capture_lex $P5033
    .const 'Sub' $P5034 = 'cuid_265_1347804164.33' 
    capture_lex $P5034
    .const 'Sub' $P5035 = 'cuid_266_1347804164.33' 
    capture_lex $P5035
    .const 'Sub' $P5036 = 'cuid_267_1347804164.33' 
    capture_lex $P5036
    .const 'Sub' $P5037 = 'cuid_268_1347804164.33' 
    capture_lex $P5037
    .const 'Sub' $P5038 = 'cuid_269_1347804164.33' 
    capture_lex $P5038
    .const 'Sub' $P5039 = 'cuid_270_1347804164.33' 
    capture_lex $P5039
    .const 'Sub' $P5040 = 'cuid_271_1347804164.33' 
    capture_lex $P5040
    .const 'Sub' $P5041 = 'cuid_272_1347804164.33' 
    capture_lex $P5041
    .const 'Sub' $P5042 = 'cuid_273_1347804164.33' 
    capture_lex $P5042
    .const 'Sub' $P5043 = 'cuid_274_1347804164.33' 
    capture_lex $P5043
    .const 'Sub' $P5044 = 'cuid_275_1347804164.33' 
    capture_lex $P5044
    .const 'Sub' $P5045 = 'cuid_276_1347804164.33' 
    capture_lex $P5045
    .const 'Sub' $P5046 = 'cuid_277_1347804164.33' 
    capture_lex $P5046
    .const 'Sub' $P5047 = 'cuid_278_1347804164.33' 
    capture_lex $P5047
    .const 'Sub' $P5048 = 'cuid_279_1347804164.33' 
    capture_lex $P5048
    .const 'Sub' $P5049 = 'cuid_280_1347804164.33' 
    capture_lex $P5049
    .const 'Sub' $P5050 = 'cuid_281_1347804164.33' 
    capture_lex $P5050
    .const 'Sub' $P5051 = 'cuid_282_1347804164.33' 
    capture_lex $P5051
    .const 'Sub' $P5052 = 'cuid_283_1347804164.33' 
    capture_lex $P5052
    .const 'Sub' $P5053 = 'cuid_284_1347804164.33' 
    capture_lex $P5053
    .const 'Sub' $P5054 = 'cuid_285_1347804164.33' 
    capture_lex $P5054
    .const 'Sub' $P5055 = 'cuid_286_1347804164.33' 
    capture_lex $P5055
    .const 'Sub' $P5056 = 'cuid_287_1347804164.33' 
    capture_lex $P5056
    .const 'Sub' $P5057 = 'cuid_288_1347804164.33' 
    capture_lex $P5057
    .const 'Sub' $P5058 = 'cuid_289_1347804164.33' 
    capture_lex $P5058
    .const 'Sub' $P5059 = 'cuid_290_1347804164.33' 
    capture_lex $P5059
    .const 'Sub' $P5060 = 'cuid_291_1347804164.33' 
    capture_lex $P5060
    .const 'Sub' $P5061 = 'cuid_292_1347804164.33' 
    capture_lex $P5061
    .const 'Sub' $P5062 = 'cuid_293_1347804164.33' 
    capture_lex $P5062
    .const 'Sub' $P5063 = 'cuid_294_1347804164.33' 
    capture_lex $P5063
    .const 'Sub' $P5064 = 'cuid_295_1347804164.33' 
    capture_lex $P5064
    .const 'Sub' $P5065 = 'cuid_296_1347804164.33' 
    capture_lex $P5065
    .const 'Sub' $P5066 = 'cuid_297_1347804164.33' 
    capture_lex $P5066
    .const 'Sub' $P5067 = 'cuid_298_1347804164.33' 
    capture_lex $P5067
    .const 'Sub' $P5068 = 'cuid_299_1347804164.33' 
    capture_lex $P5068
    .const 'Sub' $P5069 = 'cuid_300_1347804164.33' 
    capture_lex $P5069
    .const 'Sub' $P5070 = 'cuid_301_1347804164.33' 
    capture_lex $P5070
    .const 'Sub' $P5071 = 'cuid_302_1347804164.33' 
    capture_lex $P5071
    .const 'Sub' $P5072 = 'cuid_303_1347804164.33' 
    capture_lex $P5072
    .const 'Sub' $P5073 = 'cuid_304_1347804164.33' 
    capture_lex $P5073
    .const 'Sub' $P5074 = 'cuid_305_1347804164.33' 
    capture_lex $P5074
    .const 'Sub' $P5075 = 'cuid_306_1347804164.33' 
    capture_lex $P5075
    .const 'Sub' $P5076 = 'cuid_307_1347804164.33' 
    capture_lex $P5076
    .const 'Sub' $P5077 = 'cuid_308_1347804164.33' 
    capture_lex $P5077
    .const 'Sub' $P5078 = 'cuid_309_1347804164.33' 
    capture_lex $P5078
    .const 'Sub' $P5079 = 'cuid_310_1347804164.33' 
    capture_lex $P5079
    .const 'Sub' $P5080 = 'cuid_311_1347804164.33' 
    capture_lex $P5080
    .const 'Sub' $P5081 = 'cuid_312_1347804164.33' 
    capture_lex $P5081
    .const 'Sub' $P5082 = 'cuid_313_1347804164.33' 
    capture_lex $P5082
    .const 'Sub' $P5083 = 'cuid_314_1347804164.33' 
    capture_lex $P5083
    .const 'Sub' $P5084 = 'cuid_315_1347804164.33' 
    capture_lex $P5084
    .const 'Sub' $P5085 = 'cuid_316_1347804164.33' 
    capture_lex $P5085
    .const 'Sub' $P5086 = 'cuid_317_1347804164.33' 
    capture_lex $P5086
    .const 'Sub' $P5087 = 'cuid_318_1347804164.33' 
    capture_lex $P5087
    .const 'Sub' $P5088 = 'cuid_319_1347804164.33' 
    capture_lex $P5088
    .const 'Sub' $P5089 = 'cuid_320_1347804164.33' 
    capture_lex $P5089
    .const 'Sub' $P5090 = 'cuid_321_1347804164.33' 
    capture_lex $P5090
    .const 'Sub' $P5091 = 'cuid_322_1347804164.33' 
    capture_lex $P5091
    .const 'Sub' $P5092 = 'cuid_323_1347804164.33' 
    capture_lex $P5092
    .const 'Sub' $P5093 = 'cuid_324_1347804164.33' 
    capture_lex $P5093
    .const 'Sub' $P5094 = 'cuid_325_1347804164.33' 
    capture_lex $P5094
    .const 'Sub' $P5095 = 'cuid_326_1347804164.33' 
    capture_lex $P5095
    .const 'Sub' $P5096 = 'cuid_327_1347804164.33' 
    capture_lex $P5096
    .const 'Sub' $P5097 = 'cuid_328_1347804164.33' 
    capture_lex $P5097
    .const 'Sub' $P5098 = 'cuid_329_1347804164.33' 
    capture_lex $P5098
    .const 'Sub' $P5099 = 'cuid_330_1347804164.33' 
    capture_lex $P5099
    .const 'Sub' $P5100 = 'cuid_331_1347804164.33' 
    capture_lex $P5100
    .const 'Sub' $P5101 = 'cuid_332_1347804164.33' 
    capture_lex $P5101
    .const 'Sub' $P5102 = 'cuid_333_1347804164.33' 
    capture_lex $P5102
    .const 'Sub' $P5103 = 'cuid_334_1347804164.33' 
    capture_lex $P5103
    .const 'Sub' $P5104 = 'cuid_335_1347804164.33' 
    capture_lex $P5104
    .const 'Sub' $P5105 = 'cuid_336_1347804164.33' 
    capture_lex $P5105
    .const 'Sub' $P5106 = 'cuid_337_1347804164.33' 
    capture_lex $P5106
    .const 'Sub' $P5107 = 'cuid_338_1347804164.33' 
    capture_lex $P5107
    .const 'Sub' $P5108 = 'cuid_339_1347804164.33' 
    capture_lex $P5108
    .const 'Sub' $P5109 = 'cuid_340_1347804164.33' 
    capture_lex $P5109
    .const 'Sub' $P5110 = 'cuid_341_1347804164.33' 
    capture_lex $P5110
    .const 'Sub' $P5111 = 'cuid_342_1347804164.33' 
    capture_lex $P5111
    .const 'Sub' $P5112 = 'cuid_343_1347804164.33' 
    capture_lex $P5112
    .const 'Sub' $P5113 = 'cuid_344_1347804164.33' 
    capture_lex $P5113
    .const 'Sub' $P5114 = 'cuid_345_1347804164.33' 
    capture_lex $P5114
    .const 'Sub' $P5115 = 'cuid_346_1347804164.33' 
    capture_lex $P5115
    .const 'Sub' $P5116 = 'cuid_347_1347804164.33' 
    capture_lex $P5116
    .const 'Sub' $P5117 = 'cuid_348_1347804164.33' 
    capture_lex $P5117
    .const 'Sub' $P5118 = 'cuid_349_1347804164.33' 
    capture_lex $P5118
    .const 'Sub' $P5119 = 'cuid_350_1347804164.33' 
    capture_lex $P5119
    .const 'Sub' $P5120 = 'cuid_351_1347804164.33' 
    capture_lex $P5120
    .const 'Sub' $P5121 = 'cuid_352_1347804164.33' 
    capture_lex $P5121
    .const 'Sub' $P5122 = 'cuid_353_1347804164.33' 
    capture_lex $P5122
    .return ($P111) 
.end
.HLL "nqp"
.namespace []
.sub "xblock_immediate" :subid("cuid_408_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1503
    .param pmc _lex_param_0 
    .lex "$xblock", _lex_param_0 
.annotate 'line', 1504
    set $P5001, _lex_param_0[1]
    unless_null $P5001, fallback3673
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5002
  fallback3673:
    $P5003 = "&block_immediate"($P5001)
    set _lex_param_0[1], $P5003
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "block_immediate" :subid("cuid_411_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1508
    .param pmc _lex_param_0 
    .const 'Sub' $P5006 = 'cuid_410_1347804164.33' 
    capture_lex $P5006 
    .lex "$block", _lex_param_0 
.annotate 'line', 1509
    $P5001 = _lex_param_0."blocktype"("immediate")
.annotate 'line', 1510
    $P5002 = _lex_param_0."symtable"()
    set $P5005, $P5002
    if $P5002 goto unless1277_end3675 
    .const 'Sub' $P5003 = 'cuid_410_1347804164.33' 
    capture_lex $P5003
    $P5004 = $P5003()
    set $P5005, $P5004
  unless1277_end3675:
    .return (_lex_param_0) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_410_1347804164.33") :anon :lex :outer("cuid_411_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1510
    .const 'Sub' $P5017 = 'cuid_409_1347804164.33' 
    capture_lex $P5017 
    .lex "$stmts", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 1511
    nqp_get_sc_object $P5005, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback3676
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5006
  fallback3676:
    find_lex $P5007, "$block"
    $P5008 = $P5007."node"()
    $P5009 = $P5002."new"($P5008 :named("node"))
    set $P101, $P5009
.annotate 'line', 1512
    find_lex $P5013, "$block"
    $P5014 = $P5013."list"()
    set $P5010, $P5014
    iter $P5012, $P5014
  for_next3677:
    unless $P5012, for_done3679
    shift $P5016, $P5012
  for_redo3678:
    .const 'Sub' $P5015 = 'cuid_409_1347804164.33' 
    capture_lex $P5015
    $P5010 = $P5015($P5016)
    goto for_next3677
  for_done3679:
    store_lex "$block", $P101
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_409_1347804164.33") :anon :lex :outer("cuid_410_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1512
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$stmts"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "default_for" :subid("cuid_414_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1518
    .param pmc _lex_param_0 
    .const 'Sub' $P5017 = 'cuid_413_1347804164.33' 
    capture_lex $P5017 
    .lex "$sigil", _lex_param_0 
    set $S5001, _lex_param_0
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1278_else3680 
.annotate 'line', 1519
.annotate 'line', 1520
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3682
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback3682:
    $P5006 = $P5001."new"("list" :named("op"))
    set $P5016, $P5006
    goto if1278_end3681
  if1278_else3680:
    set $S5002, _lex_param_0
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1279_else3683 
.annotate 'line', 1522
.annotate 'line', 1523
    nqp_get_sc_object $P5010, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback3685
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5011
  fallback3685:
    $P5012 = $P5007."new"("hash" :named("op"))
    set $P5015, $P5012
    goto if1279_end3684
  if1279_else3683:
    .const 'Sub' $P5013 = 'cuid_413_1347804164.33' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  if1279_end3684:
    set $P5016, $P5015
  if1278_end3681:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_413_1347804164.33") :anon :lex :outer("cuid_414_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1525
    .const 'Sub' $P5022 = 'cuid_412_1347804164.33' 
    capture_lex $P5022 
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_12843694
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 1527
    new $P5018, 'ExceptionHandler'
    set_label $P5018, catch_handler_12823691
    $P5018.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5018
.annotate 'line', 1528
    nqp_get_sc_object $P5005, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["WVal"]
    unless_null $P5002, fallback3686
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5006
  fallback3686:
    find_dynamic_lex $P5007, "$*W"
    unless_null $P5007, fallback3687
    nqp_get_sc_object $P5010, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$W"]
    unless_null $P5008, fallback3688
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5011
  fallback3688:
    unless_null $P5008, vivi_12803689
    die "Contextual $*W not found"
    box $P5012, "Contextual $*W not found"
    set $P5008, $P5012
  vivi_12803689:
    set $P5007, $P5008
  fallback3687:
    new $P5013, 'ResizablePMCArray'
    box $P5014, "NQPMu"
    push $P5013, $P5014
    $P5015 = $P5007."find_sym"($P5013)
    $P5016 = $P5002."new"($P5015 :named("value"))
    set $P101, $P5016
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5019, $P5017
    pop_eh 
    goto skip_handler_12813690
  catch_handler_12823691:
    .get_results ($P5018) 
    .const 'Sub' $P10001 = 'cuid_412_1347804164.33' 
    capture_lex $P10001
    $P10002 = $P10001($P5018)
    set $I10001, 1
    set $P5018["handled"], $I10001
    nqp_get_sc_object $P10003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    finalize $P5018
    pop_upto_eh $P5018
    pop_eh 
    set $P5019, $P10003
    goto skip_handler_12813690
  skip_handler_12813690:
    set $P5021, $P5019
    pop_eh 
    goto skip_handler_12833693
  catch_handler_12843694:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_12833693
  skip_handler_12833693:
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_412_1347804164.33") :anon :lex :outer("cuid_413_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1529
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3692
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback3692:
    $P5006 = $P5001."new"("null" :named("op"))
    store_lex "$default", $P5006
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "default_value_for_prim" :subid("cuid_415_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1535
    .param pmc _lex_param_0 
    .lex "$prim", _lex_param_0 
    set $N5001, _lex_param_0
    set $N5002, 1
    iseq $I5001, $N5001, $N5002
    unless $I5001 goto if1285_else3695 
.annotate 'line', 1536
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["IVal"]
    unless_null $P5001, fallback3697
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback3697:
    $P5006 = $P5001."new"(0 :named("value"))
    set $P5020, $P5006
    goto if1285_end3696
  if1285_else3695:
    set $N5003, _lex_param_0
    set $N5004, 2
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1286_else3698 
.annotate 'line', 1537
    nqp_get_sc_object $P5010, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["NVal"]
    unless_null $P5007, fallback3700
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5011
  fallback3700:
    $P5012 = $P5007."new"(0.0 :named("value"))
    set $P5019, $P5012
    goto if1286_end3699
  if1286_else3698:
.annotate 'line', 1538
    nqp_get_sc_object $P5016, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["SVal"]
    unless_null $P5013, fallback3701
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5013, $P5017
  fallback3701:
    $P5018 = $P5013."new"("" :named("value"))
    set $P5019, $P5018
  if1286_end3699:
    set $P5020, $P5019
  if1285_end3696:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair_str" :subid("cuid_418_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1551
    .param pmc _lex_param_0 
    .const 'Sub' $P5010 = 'cuid_417_1347804164.33' 
    capture_lex $P5010 
    .lex "$ast", _lex_param_0 
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3704
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback3704:
    type_check $I5001, _lex_param_0, $P5001
    unless $I5001 goto if1287_else3702 
    .const 'Sub' $P5006 = 'cuid_417_1347804164.33' 
    capture_lex $P5006
    $P5007 = $P5006()
    set $P5009, $P5007
    goto if1287_end3703
  if1287_else3702:
.annotate 'line', 1556
.annotate 'line', 1557
    $P5008 = _lex_param_0."value"()
    set $P5009, $P5008
  if1287_end3703:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_417_1347804164.33") :anon :lex :outer("cuid_418_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1552
    .const 'Sub' $P5009 = 'cuid_416_1347804164.33' 
    capture_lex $P5009 
    .lex "@parts", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 1554
    find_lex $P5005, "$ast"
    $P5006 = $P5005."list"()
    set $P5002, $P5006
    iter $P5004, $P5006
  for_next3705:
    unless $P5004, for_done3707
    shift $P5008, $P5004
  for_redo3706:
    .const 'Sub' $P5007 = 'cuid_416_1347804164.33' 
    capture_lex $P5007
    $P5002 = $P5007($P5008)
    goto for_next3705
  for_done3707:
    join $S5001, " ", $P101
    .return ($S5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_416_1347804164.33") :anon :lex :outer("cuid_417_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1554
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "@parts"
    $P5002 = _lex_param_0."value"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "import_HOW_exports" :subid("cuid_420_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1751
    .param pmc _lex_param_0 
    .const 'Sub' $P5011 = 'cuid_419_1347804164.33' 
    capture_lex $P5011 
    .lex "$UNIT", _lex_param_0 
    exists $I5001, _lex_param_0["EXPORTHOW"]
    box $P5010, $I5001
    set $P5009, $P5010
    unless $I5001 goto if1288_end3709 
.annotate 'line', 1753
    set $P5005, _lex_param_0["EXPORTHOW"]
    unless_null $P5005, fallback3710
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5005, $P5006
  fallback3710:
    get_who $P5004, $P5005
    set $P5001, $P5004
    iter $P5003, $P5004
  for_next3714:
    unless $P5003, for_done3716
    shift $P5008, $P5003
  for_redo3715:
    .const 'Sub' $P5007 = 'cuid_419_1347804164.33' 
    capture_lex $P5007
    $P5001 = $P5007($P5008)
    goto for_next3714
  for_done3716:
    set $P5009, $P5001
  if1288_end3709:
    .return ($P5009) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_419_1347804164.33") :anon :lex :outer("cuid_420_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1754
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_dynamic_lex $P5001, "%*HOW"
    unless_null $P5001, fallback3711
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HOW"]
    unless_null $P5002, fallback3712
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HOW"], $P5007
    set $P5002, $P5007
  fallback3712:
    unless_null $P5002, vivi_12893713
    die "Contextual %*HOW not found"
    box $P5008, "Contextual %*HOW not found"
    set $P5002, $P5008
  vivi_12893713:
    set $P5001, $P5002
  fallback3711:
.annotate 'line', 1755
    $P5009 = _lex_param_0."key"()
    set $S5001, $P5009
    $P5010 = _lex_param_0."value"()
    set $P5001[$S5001], $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "set_block_handler" :subid("cuid_421_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1850
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 
    .lex "$/", _lex_param_0 
    .lex "$block", _lex_param_1 
    .lex "$type", _lex_param_2 
    find_dynamic_lex $P5001, "%*HANDLERS"
    unless_null $P5001, fallback3719
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["%HANDLERS"]
    unless_null $P5002, fallback3720
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    new $P5007, 'Hash'
    set $P5005["%HANDLERS"], $P5007
    set $P5002, $P5007
  fallback3720:
    unless_null $P5002, vivi_12913721
    die "Contextual %*HANDLERS not found"
    box $P5008, "Contextual %*HANDLERS not found"
    set $P5002, $P5008
  vivi_12913721:
    set $P5001, $P5002
  fallback3719:
    set $S5001, _lex_param_2
    exists $I5001, $P5001[$S5001]
    box $P5011, $I5001
    set $P5010, $P5011
    unless $I5001 goto if1290_end3718 
.annotate 'line', 1851
    set $S5004, _lex_param_2
    concat $S5003, "Duplicate ", $S5004
    concat $S5002, $S5003, " handler in block"
    box $P5009, $S5002
    die $P5009
    set $P5010, $P5009
  if1290_end3718:
.annotate 'line', 1854
    $P5012 = _lex_param_1."arity"()
    set $P5042, $P5012
    if $P5012 goto unless1292_end3723 
.annotate 'line', 1855
.annotate 'line', 1856
    nqp_get_sc_object $P5016, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Op"]
    unless_null $P5013, fallback3724
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5013, $P5017
  fallback3724:
.annotate 'line', 1857
    nqp_get_sc_object $P5021, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["Var"]
    unless_null $P5018, fallback3725
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5018, $P5022
  fallback3725:
    $P5023 = $P5018."new"("lexical" :named("scope"), "$!" :named("name"), "var" :named("decl"))
.annotate 'line', 1858
    nqp_get_sc_object $P5027, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Var"]
    unless_null $P5024, fallback3726
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5024, $P5028
  fallback3726:
    $P5029 = $P5024."new"("lexical" :named("scope"), "$_" :named("name"))
    $P5030 = $P5013."new"($P5023, $P5029, "bind" :named("op"))
    $P5031 = _lex_param_1."unshift"($P5030)
.annotate 'line', 1861
    nqp_get_sc_object $P5035, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback3727
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5032, $P5036
  fallback3727:
    $P5037 = $P5032."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5038 = _lex_param_1."unshift"($P5037)
.annotate 'line', 1862
    $P5039 = _lex_param_1."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1863
    $P5040 = _lex_param_1."symbol"("$!", "lexical" :named("scope"))
.annotate 'line', 1864
    $P5041 = _lex_param_1."arity"(1)
    set $P5042, $P5041
  unless1292_end3723:
.annotate 'line', 1866
    $P5043 = _lex_param_1."blocktype"("declaration")
    find_dynamic_lex $P5044, "%*HANDLERS"
    unless_null $P5044, fallback3728
    nqp_get_sc_object $P5047, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5046, $P5047
    set $P5045, $P5046["%HANDLERS"]
    unless_null $P5045, fallback3729
    nqp_get_sc_object $P5049, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5048, $P5049
    new $P5050, 'Hash'
    set $P5048["%HANDLERS"], $P5050
    set $P5045, $P5050
  fallback3729:
    unless_null $P5045, vivi_12933730
    die "Contextual %*HANDLERS not found"
    box $P5051, "Contextual %*HANDLERS not found"
    set $P5045, $P5051
  vivi_12933730:
    set $P5044, $P5045
  fallback3728:
    set $S5005, _lex_param_2
.annotate 'line', 1867
    nqp_get_sc_object $P5055, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["Stmts"]
    unless_null $P5052, fallback3731
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5052, $P5056
  fallback3731:
.annotate 'line', 1868
    nqp_get_sc_object $P5060, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5059, $P5060, "QAST"
    get_who $P5058, $P5059
    set $P5057, $P5058["Op"]
    unless_null $P5057, fallback3732
    nqp_get_sc_object $P5061, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5057, $P5061
  fallback3732:
.annotate 'line', 1870
    nqp_get_sc_object $P5065, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5064, $P5065, "QAST"
    get_who $P5063, $P5064
    set $P5062, $P5063["Op"]
    unless_null $P5062, fallback3733
    nqp_get_sc_object $P5066, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5062, $P5066
  fallback3733:
    $P5067 = $P5062."new"("exception" :named("op"))
    $P5068 = $P5057."new"(_lex_param_1, $P5067, "call" :named("op"))
.annotate 'line', 1872
    nqp_get_sc_object $P5072, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5071, $P5072, "QAST"
    get_who $P5070, $P5071
    set $P5069, $P5070["Op"]
    unless_null $P5069, fallback3734
    nqp_get_sc_object $P5073, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5069, $P5073
  fallback3734:
.annotate 'line', 1874
    nqp_get_sc_object $P5077, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5076, $P5077, "QAST"
    get_who $P5075, $P5076
    set $P5074, $P5075["Op"]
    unless_null $P5074, fallback3735
    nqp_get_sc_object $P5078, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5074, $P5078
  fallback3735:
    $P5079 = $P5074."new"("exception" :named("op"))
.annotate 'line', 1875
    nqp_get_sc_object $P5083, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5082, $P5083, "QAST"
    get_who $P5081, $P5082
    set $P5080, $P5081["SVal"]
    unless_null $P5080, fallback3736
    nqp_get_sc_object $P5084, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5080, $P5084
  fallback3736:
    $P5085 = $P5080."new"("handled" :named("value"))
.annotate 'line', 1876
    nqp_get_sc_object $P5089, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5088, $P5089, "QAST"
    get_who $P5087, $P5088
    set $P5086, $P5087["IVal"]
    unless_null $P5086, fallback3737
    nqp_get_sc_object $P5090, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5086, $P5090
  fallback3737:
    $P5091 = $P5086."new"(1 :named("value"))
    $P5092 = $P5069."new"($P5079, $P5085, $P5091, "bindkey_i" :named("op"))
.annotate 'line', 1878
    $P5093 = "&default_for"("$")
    $P5094 = $P5052."new"($P5068, $P5092, $P5093)
    set $P5044[$S5005], $P5094
    .return ($P5094) 
.end
.HLL "nqp"
.namespace []
.sub "only_star_block" :subid("cuid_422_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2436
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 2437
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback3738
    nqp_get_sc_object $P5005, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback3739
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5006
  fallback3739:
    unless_null $P5003, vivi_12943740
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_12943740:
    set $P5002, $P5003
  fallback3738:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
.annotate 'line', 2438
    nqp_get_sc_object $P5012, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback3741
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5013
  fallback3741:
    $P5014 = $P5009."new"("nqpmultidispatch" :named("op"))
    $P5015 = $P101."push"($P5014)
    .return ($P101) 
.end
.HLL "nqp"
.namespace []
.sub "attach_multi_signature" :subid("cuid_424_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2442
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5020 = 'cuid_423_1347804164.33' 
    capture_lex $P5020 
    .lex "$types", $P101 
    .lex "$definednesses", $P102 
    .lex "$code_obj", _lex_param_0 
    .lex "$routine", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    new $P5003, 'ResizablePMCArray'
    set $P101, $P5003
    new $P5004, 'ResizablePMCArray'
    set $P102, $P5004
    set $P5008, _lex_param_1[0]
    unless_null $P5008, fallback3742
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5009
  fallback3742:
    $P5010 = $P5008."list"()
    set $P5005, $P5010
    iter $P5007, $P5010
  for_next3756:
    unless $P5007, for_done3758
    shift $P5012, $P5007
  for_redo3757:
    .const 'Sub' $P5011 = 'cuid_423_1347804164.33' 
    capture_lex $P5011
    $P5005 = $P5011($P5012)
    goto for_next3756
  for_done3758:
.annotate 'line', 2454
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback3759
    nqp_get_sc_object $P5016, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback3760
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5014, $P5017
  fallback3760:
    unless_null $P5014, vivi_13003761
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_13003761:
    set $P5013, $P5014
  fallback3759:
    $P5019 = $P5013."set_routine_signature"(_lex_param_0, $P101, $P102)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_423_1347804164.33") :anon :lex :outer("cuid_424_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2445
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3747
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback3747:
    type_check $I5001, _lex_param_0, $P5001
    set $I5003, $I5001
    unless $I5001 goto if1296_end3746 
.annotate 'line', 2446
    $P5006 = _lex_param_0."decl"()
    set $S5001, $P5006
    iseq $I5002, $S5001, "param"
    set $I5003, $I5002
  if1296_end3746:
    box $P5021, $I5003
    set $P5020, $P5021
    unless $I5003 goto if1295_end3744 
.annotate 'line', 2447
    find_lex $P5007, "$types"
    $P5008 = _lex_param_0."returns"()
    get_id $I5005, $P5008
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    get_id $I5006, $P5009
    iseq $I5004, $I5005, $I5006
    unless $I5004 goto if1297_else3748 
    null $P5010
    set $P5012, $P5010
    goto if1297_end3749
  if1297_else3748:
.annotate 'line', 2449
    $P5011 = _lex_param_0."returns"()
    set $P5012, $P5011
  if1297_end3749:
    $P5013 = $P5007."push"($P5012)
.annotate 'line', 2450
    find_lex $P5014, "$definednesses"
    set $P5015, _lex_param_0["definedness"]
    unless_null $P5015, fallback3752
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5015, $P5016
  fallback3752:
    set $S5002, $P5015
    iseq $I5007, $S5002, "D"
    unless $I5007 goto if1298_else3750 
    set $I5010, 1
    goto if1298_end3751
  if1298_else3750:
    set $P5017, _lex_param_0["definedness"]
    unless_null $P5017, fallback3755
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5017, $P5018
  fallback3755:
    set $S5003, $P5017
    iseq $I5008, $S5003, "U"
    unless $I5008 goto if1299_else3753 
    set $I5009, 2
    goto if1299_end3754
  if1299_else3753:
    set $I5009, 0
  if1299_end3754:
    set $I5010, $I5009
  if1298_end3751:
    $P5019 = $P5014."push"($I5010)
    set $P5020, $P5019
  if1295_end3744:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "wrap_return_handler" :subid("cuid_425_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2457
    .param pmc _lex_param_0 
    .lex "$past", _lex_param_0 
.annotate 'line', 2458
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3762
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback3762:
    $P5006 = $P5001."new"(_lex_param_0, "lexotic" :named("op"), "RETURN" :named("name"))
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "lexical_package_lookup" :subid("cuid_430_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2906
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5076 = 'cuid_428_1347804164.33' 
    capture_lex $P5076 
    .lex "$final_name", $P101 
    .lex "$lookup", $P102 
    .lex "@name", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    root_new $P103, ['parrot';'Continuation']
    set_label $P103, lexotic_3763
    .lex "RETURN", $P103
    set $N5001, _lex_param_0
    set $N5002, 0
    iseq $I5001, $N5001, $N5002
    box $P5006, $I5001
    set $P5005, $P5006
    unless $I5001 goto if1301_end3766 
.annotate 'line', 2908
    $P5003 = _lex_param_1."CURSOR"()
    $P5004 = $P5003."panic"("Cannot compile empty name")
    set $P5005, $P5004
  if1301_end3766:
.annotate 'line', 2912
    $P5007 = _lex_param_0."pop"()
    set $P101, $P5007
.annotate 'line', 2913
    nqp_get_sc_object $P5011, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["VarWithFallback"]
    unless_null $P5008, fallback3767
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5012
  fallback3767:
.annotate 'line', 2915
    nqp_get_sc_object $P5016, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["SVal"]
    unless_null $P5013, fallback3768
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5013, $P5017
  fallback3768:
    set $S5001, $P101
    $P5018 = $P5013."new"($S5001 :named("value"))
    $P5019 = $P5008."new"($P5018, "associative" :named("scope"))
    set $P102, $P5019
    set $N5003, _lex_param_0
    set $N5004, 0
    iseq $I5002, $N5003, $N5004
    unless $I5002 goto if1302_else3769 
.annotate 'line', 2920
.annotate 'line', 2921
    nqp_get_sc_object $P5023, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback3771
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5020, $P5024
  fallback3771:
.annotate 'line', 2923
    nqp_get_sc_object $P5028, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Var"]
    unless_null $P5025, fallback3772
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5025, $P5029
  fallback3772:
    $P5030 = $P5025."new"("$?PACKAGE" :named("name"), "lexical" :named("scope"))
    $P5031 = $P5020."new"($P5030, "who" :named("op"))
    $P5032 = $P102."unshift"($P5031)
.annotate 'line', 2925
    nqp_get_sc_object $P5036, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Op"]
    unless_null $P5033, fallback3773
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5033, $P5037
  fallback3773:
.annotate 'line', 2927
    nqp_get_sc_object $P5041, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Op"]
    unless_null $P5038, fallback3774
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5038, $P5042
  fallback3774:
.annotate 'line', 2929
    nqp_get_sc_object $P5046, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Op"]
    unless_null $P5043, fallback3775
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5043, $P5047
  fallback3775:
.annotate 'line', 2931
    nqp_get_sc_object $P5051, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["WVal"]
    unless_null $P5048, fallback3776
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5048, $P5052
  fallback3776:
    find_dynamic_lex $P5053, "$*GLOBALish"
    unless_null $P5053, fallback3777
    nqp_get_sc_object $P5056, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$GLOBALish"]
    unless_null $P5054, fallback3778
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5054, $P5057
  fallback3778:
    unless_null $P5054, vivi_13033779
    die "Contextual $*GLOBALish not found"
    box $P5058, "Contextual $*GLOBALish not found"
    set $P5054, $P5058
  vivi_13033779:
    set $P5053, $P5054
  fallback3777:
    $P5059 = $P5048."new"($P5053 :named("value"))
    $P5060 = $P5043."new"($P5059, "who" :named("op"))
.annotate 'line', 2933
    nqp_get_sc_object $P5064, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5063, $P5064, "QAST"
    get_who $P5062, $P5063
    set $P5061, $P5062["SVal"]
    unless_null $P5061, fallback3780
    nqp_get_sc_object $P5065, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5061, $P5065
  fallback3780:
    set $S5002, $P101
    $P5066 = $P5061."new"($S5002 :named("value"))
    $P5067 = $P5038."new"($P5060, $P5066, "atkey" :named("op"))
.annotate 'line', 2935
    set $S5004, $P101
    substr $S5003, $S5004, 0, 1
    $P5068 = "&default_for"($S5003)
    $P5069 = $P5033."new"($P5067, $P5068, "ifnull" :named("op"))
    $P5070 = $P102."fallback"($P5069)
    set $P5073, $P5070
    goto if1302_end3770
  if1302_else3769:
    .const 'Sub' $P5071 = 'cuid_428_1347804164.33' 
    capture_lex $P5071
    $P5072 = $P5071()
    set $P5073, $P5072
  if1302_end3770:
    find_lex $P5074, "RETURN"
    $P5075 = $P5074($P102)
    goto lexotic_3764
  lexotic_3763:
    .get_results ($P5075)
  lexotic_3764:
    .return ($P5075) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_428_1347804164.33") :anon :lex :outer("cuid_430_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2941
    .const 'Sub' $P5070 = 'cuid_427_1347804164.33' 
    capture_lex $P5070 
    .const 'Sub' $P5070 = 'cuid_429_1347804164.33' 
    capture_lex $P5070 
    .lex "$path", $P101 
    .lex "$sigil", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
.annotate 'line', 2943
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback3783
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback3784
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5007
  fallback3784:
    unless_null $P5004, vivi_13053785
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_13053785:
    set $P5003, $P5004
  fallback3783:
    find_lex $P5010, "@name"
    set $P5009, $P5010[0]
    unless_null $P5009, fallback3786
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5011
  fallback3786:
    $P5012 = $P5003."is_lexical"($P5009)
    unless $P5012 goto if1304_else3781 
    .const 'Sub' $P5013 = 'cuid_427_1347804164.33' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5027, $P5014
    goto if1304_end3782
  if1304_else3781:
.annotate 'line', 2952
.annotate 'line', 2953
    nqp_get_sc_object $P5018, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["WVal"]
    unless_null $P5015, fallback3794
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5015, $P5019
  fallback3794:
    find_dynamic_lex $P5020, "$*GLOBALish"
    unless_null $P5020, fallback3795
    nqp_get_sc_object $P5023, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5022, $P5023
    set $P5021, $P5022["$GLOBALish"]
    unless_null $P5021, fallback3796
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5021, $P5024
  fallback3796:
    unless_null $P5021, vivi_13093797
    die "Contextual $*GLOBALish not found"
    box $P5025, "Contextual $*GLOBALish not found"
    set $P5021, $P5025
  vivi_13093797:
    set $P5020, $P5021
  fallback3795:
    $P5026 = $P5015."new"($P5020 :named("value"))
    set $P101, $P5026
    set $P5027, $P101
  if1304_end3782:
    find_lex $P5029, "@name"
    set $P5028, $P5029[0]
    unless_null $P5028, fallback3800
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5028, $P5030
  fallback3800:
    set $S5001, $P5028
    iseq $I5001, $S5001, "GLOBAL"
    box $P5034, $I5001
    set $P5033, $P5034
    unless $I5001 goto if1310_end3799 
.annotate 'line', 2955
.annotate 'line', 2956
    find_lex $P5031, "@name"
    $P5032 = $P5031."shift"()
    set $P5033, $P5032
  if1310_end3799:
    find_lex $P5038, "@name"
    set $P5035, $P5038
    iter $P5037, $P5038
  for_next3803:
    unless $P5037, for_done3805
    shift $P5040, $P5037
  for_redo3804:
    .const 'Sub' $P5039 = 'cuid_429_1347804164.33' 
    capture_lex $P5039
    $P5035 = $P5039($P5040)
    goto for_next3803
  for_done3805:
.annotate 'line', 2963
    find_lex $P5041, "$lookup"
    nqp_get_sc_object $P5045, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Op"]
    unless_null $P5042, fallback3806
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5042, $P5046
  fallback3806:
    $P5047 = $P5042."new"($P101, "who" :named("op"))
    $P5048 = $P5041."unshift"($P5047)
    find_lex $P5049, "$final_name"
    set $S5003, $P5049
    substr $S5002, $S5003, 0, 1
    box $P5050, $S5002
    set $P102, $P5050
    set $S5004, $P102
    iseq $I5002, $S5004, "@"
    set $I5004, $I5002
    if $I5002 goto unless1312_end3810 
    set $S5005, $P102
    iseq $I5003, $S5005, "%"
    set $I5004, $I5003
  unless1312_end3810:
    unless $I5004 goto if1311_else3807 
.annotate 'line', 2965
.annotate 'line', 2966
    find_lex $P5051, "$lookup"
    nqp_get_sc_object $P5055, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["Op"]
    unless_null $P5052, fallback3811
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5052, $P5056
  fallback3811:
    find_lex $P5058, "$lookup"
    set $P5057, $P5058[0]
    unless_null $P5057, fallback3812
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5057, $P5059
  fallback3812:
    find_lex $P5061, "$lookup"
    set $P5060, $P5061[1]
    unless_null $P5060, fallback3813
    nqp_get_sc_object $P5062, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5060, $P5062
  fallback3813:
.annotate 'line', 2970
    $P5063 = "&default_for"($P102)
    $P5064 = $P5052."new"($P5057, $P5060, $P5063, "bindkey" :named("op"))
    $P5065 = $P5051."fallback"($P5064)
    set $P5069, $P5065
    goto if1311_end3808
  if1311_else3807:
.annotate 'line', 2973
.annotate 'line', 2974
    find_lex $P5066, "$lookup"
    $P5067 = "&default_for"($P102)
    $P5068 = $P5066."fallback"($P5067)
    set $P5069, $P5068
  if1311_end3808:
    .return ($P5069) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_427_1347804164.33") :anon :lex :outer("cuid_428_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2944
    .const 'Sub' $P5021 = 'cuid_426_1347804164.33' 
    capture_lex $P5021 
    .lex "$first", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    new $P5019, 'ExceptionHandler'
    set_label $P5019, catch_handler_13083792
    $P5019.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5019
.annotate 'line', 2945
    find_lex $P5002, "@name"
    $P5003 = $P5002."shift"()
    set $P101, $P5003
.annotate 'line', 2946
    nqp_get_sc_object $P5007, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["WVal"]
    unless_null $P5004, fallback3787
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5008
  fallback3787:
    find_dynamic_lex $P5009, "$*W"
    unless_null $P5009, fallback3788
    nqp_get_sc_object $P5012, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$W"]
    unless_null $P5010, fallback3789
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5013
  fallback3789:
    unless_null $P5010, vivi_13063790
    die "Contextual $*W not found"
    box $P5014, "Contextual $*W not found"
    set $P5010, $P5014
  vivi_13063790:
    set $P5009, $P5010
  fallback3788:
    new $P5015, 'ResizablePMCArray'
    push $P5015, $P101
    $P5016 = $P5009."find_sym"($P5015)
    $P5017 = $P5004."new"($P5016 :named("value"))
    store_lex "$path", $P5017
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5020, $P5018
    pop_eh 
    goto skip_handler_13073791
  catch_handler_13083792:
    .get_results ($P5019) 
    .const 'Sub' $P10001 = 'cuid_426_1347804164.33' 
    capture_lex $P10001
    $P10002 = $P10001($P5019)
    set $I10001, 1
    set $P5019["handled"], $I10001
    nqp_get_sc_object $P10003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    finalize $P5019
    pop_upto_eh $P5019
    pop_eh 
    set $P5020, $P10003
    goto skip_handler_13073791
  skip_handler_13073791:
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_426_1347804164.33") :anon :lex :outer("cuid_427_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2947
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 2948
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback3793
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback3793:
    find_lex $P5006, "$first"
    $P5007 = $P5001."new"($P5006 :named("name"), "lexical" :named("scope"))
    store_lex "$path", $P5007
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_429_1347804164.33") :anon :lex :outer("cuid_428_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2958
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2959
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback3801
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback3801:
    find_lex $P5006, "$path"
.annotate 'line', 2961
    nqp_get_sc_object $P5010, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["SVal"]
    unless_null $P5007, fallback3802
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5011
  fallback3802:
    set $S5001, _lex_param_0
    $P5012 = $P5007."new"($S5001 :named("value"))
    $P5013 = $P5001."new"($P5006, $P5012, "nqp_get_package_through_who PPs" :named("pirop"))
    store_lex "$path", $P5013
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "TOP" :subid("cuid_243_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1541
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback3814
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback3814:
    set $P5001, _lex_param_1["comp_unit"]
    unless_null $P5001, fallback3815
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback3815:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "deflongname" :subid("cuid_244_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1543
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1544
    unless_null _lex_param_1, fallback3818
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback3818:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback3819
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback3819:
    unless $P5001 goto if1313_else3816 
    unless_null _lex_param_1, fallback3820
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5005
  fallback3820:
    set $P5004, _lex_param_1["identifier"]
    unless_null $P5004, fallback3821
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5006
  fallback3821:
    set $S5006, $P5004
    concat $S5005, $S5006, ":"
.annotate 'line', 1545
    unless_null _lex_param_1, fallback3822
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5009
  fallback3822:
    set $P5008, _lex_param_1["colonpair"]
    unless_null $P5008, fallback3823
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5010
  fallback3823:
    set $P5007, $P5008[0]
    unless_null $P5007, fallback3824
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5011
  fallback3824:
    $P5012 = $P5007."ast"()
    $P5013 = $P5012."named"()
    set $S5007, $P5013
    concat $S5004, $S5005, $S5007
    concat $S5003, $S5004, "<"
.annotate 'line', 1546
    unless_null _lex_param_1, fallback3825
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5016
  fallback3825:
    set $P5015, _lex_param_1["colonpair"]
    unless_null $P5015, fallback3826
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5015, $P5017
  fallback3826:
    set $P5014, $P5015[0]
    unless_null $P5014, fallback3827
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5014, $P5018
  fallback3827:
    $P5019 = $P5014."ast"()
    $P5020 = "&colonpair_str"($P5019)
    set $S5008, $P5020
    concat $S5002, $S5003, $S5008
    concat $S5001, $S5002, ">"
    set $S5010, $S5001
    goto if1313_end3817
  if1313_else3816:
    set $S5009, _lex_param_1
    set $S5010, $S5009
  if1313_end3817:
    $P5021 = _lex_param_1."!make"($S5010)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "comp_unit" :subid("cuid_245_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1561
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$mainline", $P101 
    .lex "$unit", $P102 
    .lex "$main_tasks", $P103 
    .lex "$compunit", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P104, $P5004
.annotate 'line', 1562
    unless_null _lex_param_1, fallback3828
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5006
  fallback3828:
    set $P5005, _lex_param_1["statementlist"]
    unless_null $P5005, fallback3829
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5005, $P5007
  fallback3829:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
.annotate 'line', 1563
    find_dynamic_lex $P5009, "$*W"
    unless_null $P5009, fallback3830
    nqp_get_sc_object $P5012, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5011, $P5012
    set $P5010, $P5011["$W"]
    unless_null $P5010, fallback3831
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5013
  fallback3831:
    unless_null $P5010, vivi_13143832
    die "Contextual $*W not found"
    box $P5014, "Contextual $*W not found"
    set $P5010, $P5014
  vivi_13143832:
    set $P5009, $P5010
  fallback3830:
    $P5015 = $P5009."pop_lexpad"()
    set $P102, $P5015
    find_dynamic_lex $P5016, "$*HAS_YOU_ARE_HERE"
    unless_null $P5016, fallback3835
    nqp_get_sc_object $P5019, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$HAS_YOU_ARE_HERE"]
    unless_null $P5017, fallback3836
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5017, $P5020
  fallback3836:
    unless_null $P5017, vivi_13163837
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5021, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5017, $P5021
  vivi_13163837:
    set $P5016, $P5017
  fallback3835:
    set $P5025, $P5016
    if $P5016 goto unless1315_end3834 
.annotate 'line', 1568
.annotate 'line', 1569
    nqp_decontainerize $P5022, _lex_param_0
    $P5023 = $P5022."CTXSAVE"()
    $P5024 = $P102."push"($P5023)
    set $P5025, $P5024
  unless1315_end3834:
.annotate 'line', 1576
    nqp_get_sc_object $P5029, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback3838
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5026, $P5030
  fallback3838:
    $P5031 = $P5026."new"("lexical" :named("scope"), "@ARGS" :named("name"), "param" :named("decl"), 1 :named("slurpy"))
    $P5032 = $P102."unshift"($P5031)
.annotate 'line', 1577
    nqp_get_sc_object $P5036, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Stmts"]
    unless_null $P5033, fallback3839
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5033, $P5037
  fallback3839:
.annotate 'line', 1578
    nqp_get_sc_object $P5041, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["VM"]
    unless_null $P5038, fallback3840
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5038, $P5042
  fallback3840:
.annotate 'line', 1580
    nqp_get_sc_object $P5046, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["SVal"]
    unless_null $P5043, fallback3841
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5043, $P5047
  fallback3841:
    $P5048 = $P5043."new"("ModuleLoader.pbc" :named("value"))
    $P5049 = $P5038."new"($P5048, "load_bytecode vs" :named("pirop"))
.annotate 'line', 1582
    nqp_get_sc_object $P5053, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5052, $P5053, "QAST"
    get_who $P5051, $P5052
    set $P5050, $P5051["Op"]
    unless_null $P5050, fallback3842
    nqp_get_sc_object $P5054, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5050, $P5054
  fallback3842:
.annotate 'line', 1584
    nqp_get_sc_object $P5058, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5057, $P5058, "QAST"
    get_who $P5056, $P5057
    set $P5055, $P5056["VM"]
    unless_null $P5055, fallback3843
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5055, $P5059
  fallback3843:
.annotate 'line', 1586
    nqp_get_sc_object $P5063, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5062, $P5063, "QAST"
    get_who $P5061, $P5062
    set $P5060, $P5061["SVal"]
    unless_null $P5060, fallback3844
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5060, $P5064
  fallback3844:
    $P5065 = $P5060."new"("ModuleLoader" :named("value"))
    $P5066 = $P5055."new"($P5065, "get_hll_global Ps" :named("pirop"))
.annotate 'line', 1588
    nqp_get_sc_object $P5070, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5069, $P5070, "QAST"
    get_who $P5068, $P5069
    set $P5067, $P5068["Op"]
    unless_null $P5067, fallback3845
    nqp_get_sc_object $P5071, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5067, $P5071
  fallback3845:
.annotate 'line', 1590
    nqp_get_sc_object $P5075, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5074, $P5075, "QAST"
    get_who $P5073, $P5074
    set $P5072, $P5073["VM"]
    unless_null $P5072, fallback3846
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5072, $P5076
  fallback3846:
    $P5077 = $P5072."new"("getinterp P" :named("pirop"))
.annotate 'line', 1591
    nqp_get_sc_object $P5081, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5080, $P5081, "QAST"
    get_who $P5079, $P5080
    set $P5078, $P5079["SVal"]
    unless_null $P5078, fallback3847
    nqp_get_sc_object $P5082, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5078, $P5082
  fallback3847:
    $P5083 = $P5078."new"("context" :named("value"))
    $P5084 = $P5067."new"($P5077, $P5083, "atkey" :named("op"))
    $P5085 = $P5050."new"($P5066, $P5084, "callmethod" :named("op"), "set_mainline_module" :named("name"))
    $P5086 = $P5033."new"($P5049, $P5085)
    set $P103, $P5086
    find_dynamic_lex $P5087, "$*MAIN_SUB"
    unless_null $P5087, fallback3850
    nqp_get_sc_object $P5090, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5089, $P5090
    set $P5088, $P5089["$MAIN_SUB"]
    unless_null $P5088, fallback3851
    nqp_get_sc_object $P5091, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5088, $P5091
  fallback3851:
    unless_null $P5088, vivi_13183852
    die "Contextual $*MAIN_SUB not found"
    box $P5092, "Contextual $*MAIN_SUB not found"
    set $P5088, $P5092
  vivi_13183852:
    set $P5087, $P5088
  fallback3850:
    set $P5118, $P5087
    unless $P5087 goto if1317_end3849 
.annotate 'line', 1595
.annotate 'line', 1596
    nqp_get_sc_object $P5096, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5095, $P5096, "QAST"
    get_who $P5094, $P5095
    set $P5093, $P5094["Op"]
    unless_null $P5093, fallback3853
    nqp_get_sc_object $P5097, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5093, $P5097
  fallback3853:
.annotate 'line', 1597
    nqp_get_sc_object $P5101, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5100, $P5101, "QAST"
    get_who $P5099, $P5100
    set $P5098, $P5099["BVal"]
    unless_null $P5098, fallback3854
    nqp_get_sc_object $P5102, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5098, $P5102
  fallback3854:
    find_dynamic_lex $P5103, "$*MAIN_SUB"
    unless_null $P5103, fallback3855
    nqp_get_sc_object $P5106, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5105, $P5106
    set $P5104, $P5105["$MAIN_SUB"]
    unless_null $P5104, fallback3856
    nqp_get_sc_object $P5107, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5104, $P5107
  fallback3856:
    unless_null $P5104, vivi_13193857
    die "Contextual $*MAIN_SUB not found"
    box $P5108, "Contextual $*MAIN_SUB not found"
    set $P5104, $P5108
  vivi_13193857:
    set $P5103, $P5104
  fallback3855:
    $P5109 = $P5098."new"($P5103 :named("value"))
.annotate 'line', 1598
    nqp_get_sc_object $P5113, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5112, $P5113, "QAST"
    get_who $P5111, $P5112
    set $P5110, $P5111["Var"]
    unless_null $P5110, fallback3858
    nqp_get_sc_object $P5114, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5110, $P5114
  fallback3858:
    $P5115 = $P5110."new"("lexical" :named("scope"), "@ARGS" :named("name"), 1 :named("flat"))
    $P5116 = $P5093."new"($P5109, $P5115, "call" :named("op"))
    $P5117 = $P103."push"($P5116)
    set $P5118, $P5117
  if1317_end3849:
.annotate 'line', 1601
    nqp_get_sc_object $P5122, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5121, $P5122, "QAST"
    get_who $P5120, $P5121
    set $P5119, $P5120["Op"]
    unless_null $P5119, fallback3859
    nqp_get_sc_object $P5123, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5119, $P5123
  fallback3859:
.annotate 'line', 1603
    nqp_get_sc_object $P5127, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5126, $P5127, "QAST"
    get_who $P5125, $P5126
    set $P5124, $P5125["Var"]
    unless_null $P5124, fallback3860
    nqp_get_sc_object $P5128, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5124, $P5128
  fallback3860:
    $P5129 = $P5124."new"("lexical" :named("scope"), "@ARGS" :named("name"))
    $P5130 = $P5119."new"($P5129, $P103, "if" :named("op"))
    $P5131 = $P101."push"($P5130)
.annotate 'line', 1608
    $P5132 = $P102."push"($P101)
.annotate 'line', 1611
    find_dynamic_lex $P5133, "$*W"
    unless_null $P5133, fallback3861
    nqp_get_sc_object $P5136, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5135, $P5136
    set $P5134, $P5135["$W"]
    unless_null $P5134, fallback3862
    nqp_get_sc_object $P5137, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5134, $P5137
  fallback3862:
    unless_null $P5134, vivi_13203863
    die "Contextual $*W not found"
    box $P5138, "Contextual $*W not found"
    set $P5134, $P5138
  vivi_13203863:
    set $P5133, $P5134
  fallback3861:
    $P5139 = $P5133."libs"()
    $P5140 = $P102."push"($P5139)
.annotate 'line', 1614
    nqp_get_sc_object $P5144, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5143, $P5144, "QAST"
    get_who $P5142, $P5143
    set $P5141, $P5142["CompUnit"]
    unless_null $P5141, fallback3864
    nqp_get_sc_object $P5145, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5141, $P5145
  fallback3864:
.annotate 'line', 1618
    find_dynamic_lex $P5146, "$*W"
    unless_null $P5146, fallback3865
    nqp_get_sc_object $P5149, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5148, $P5149
    set $P5147, $P5148["$W"]
    unless_null $P5147, fallback3866
    nqp_get_sc_object $P5150, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5147, $P5150
  fallback3866:
    unless_null $P5147, vivi_13213867
    die "Contextual $*W not found"
    box $P5151, "Contextual $*W not found"
    set $P5147, $P5151
  vivi_13213867:
    set $P5146, $P5147
  fallback3865:
    $P5152 = $P5146."sc"()
.annotate 'line', 1619
    find_dynamic_lex $P5153, "$*W"
    unless_null $P5153, fallback3868
    nqp_get_sc_object $P5156, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5155, $P5156
    set $P5154, $P5155["$W"]
    unless_null $P5154, fallback3869
    nqp_get_sc_object $P5157, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5154, $P5157
  fallback3869:
    unless_null $P5154, vivi_13223870
    die "Contextual $*W not found"
    box $P5158, "Contextual $*W not found"
    set $P5154, $P5158
  vivi_13223870:
    set $P5153, $P5154
  fallback3868:
    $P5159 = $P5153."code_ref_blocks"()
.annotate 'line', 1620
    find_dynamic_lex $P5160, "$*W"
    unless_null $P5160, fallback3871
    nqp_get_sc_object $P5163, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5162, $P5163
    set $P5161, $P5162["$W"]
    unless_null $P5161, fallback3872
    nqp_get_sc_object $P5164, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5161, $P5164
  fallback3872:
    unless_null $P5161, vivi_13233873
    die "Contextual $*W not found"
    box $P5165, "Contextual $*W not found"
    set $P5161, $P5165
  vivi_13233873:
    set $P5160, $P5161
  fallback3871:
    $P5166 = $P5160."is_precompilation_mode"()
.annotate 'line', 1621
    find_dynamic_lex $P5167, "$*W"
    unless_null $P5167, fallback3874
    nqp_get_sc_object $P5170, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5169, $P5170
    set $P5168, $P5169["$W"]
    unless_null $P5168, fallback3875
    nqp_get_sc_object $P5171, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5168, $P5171
  fallback3875:
    unless_null $P5168, vivi_13243876
    die "Contextual $*W not found"
    box $P5172, "Contextual $*W not found"
    set $P5168, $P5172
  vivi_13243876:
    set $P5167, $P5168
  fallback3874:
    $P5173 = $P5167."load_dependency_tasks"()
.annotate 'line', 1622
    find_dynamic_lex $P5174, "$*W"
    unless_null $P5174, fallback3877
    nqp_get_sc_object $P5177, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5176, $P5177
    set $P5175, $P5176["$W"]
    unless_null $P5175, fallback3878
    nqp_get_sc_object $P5178, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5175, $P5178
  fallback3878:
    unless_null $P5175, vivi_13253879
    die "Contextual $*W not found"
    box $P5179, "Contextual $*W not found"
    set $P5175, $P5179
  vivi_13253879:
    set $P5174, $P5175
  fallback3877:
    $P5180 = $P5174."fixup_tasks"()
.annotate 'line', 1627
    nqp_get_sc_object $P5184, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5183, $P5184, "QAST"
    get_who $P5182, $P5183
    set $P5181, $P5182["Op"]
    unless_null $P5181, fallback3880
    nqp_get_sc_object $P5185, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5181, $P5185
  fallback3880:
.annotate 'line', 1629
    nqp_get_sc_object $P5189, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5188, $P5189, "QAST"
    get_who $P5187, $P5188
    set $P5186, $P5187["BVal"]
    unless_null $P5186, fallback3881
    nqp_get_sc_object $P5190, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5186, $P5190
  fallback3881:
    $P5191 = $P5186."new"($P102 :named("value"))
    $P5192 = $P5181."new"($P5191, "call" :named("op"))
    $P5193 = $P5141."new"($P102, "nqp" :named("hll"), $P5152 :named("sc"), $P5159 :named("code_ref_blocks"), $P5166 :named("compilation_mode"), $P5173 :named("pre_deserialize"), $P5180 :named("post_deserialize"), $P5192 :named("load"))
    set $P104, $P5193
.annotate 'line', 1637
    $P5194 = _lex_param_1."!make"($P104)
    .return ($P5194) 
.end
.HLL "nqp"
.namespace []
.sub "statementlist" :subid("cuid_246_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1640
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5023 = 'cuid_431_1347804164.33' 
    capture_lex $P5023 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 1641
    nqp_get_sc_object $P5005, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Stmts"]
    unless_null $P5002, fallback3882
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5006
  fallback3882:
    $P5007 = $P5002."new"(_lex_param_1 :named("node"))
    set $P101, $P5007
    unless_null _lex_param_1, fallback3885
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5009
  fallback3885:
    set $P5008, _lex_param_1["statement"]
    unless_null $P5008, fallback3886
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5010
  fallback3886:
    unless $P5008 goto if1326_else3883 
.annotate 'line', 1642
    unless_null _lex_param_1, fallback3887
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5015
  fallback3887:
    set $P5014, _lex_param_1["statement"]
    unless_null $P5014, fallback3888
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5014, $P5016
  fallback3888:
    set $P5011, $P5014
    iter $P5013, $P5014
  for_next3901:
    unless $P5013, for_done3903
    shift $P5018, $P5013
  for_redo3902:
    .const 'Sub' $P5017 = 'cuid_431_1347804164.33' 
    capture_lex $P5017
    $P5011 = $P5017($P5018)
    goto for_next3901
  for_done3903:
    set $P5021, $P5011
    goto if1326_end3884
  if1326_else3883:
.annotate 'line', 1651
.annotate 'line', 1652
    $P5019 = "&default_for"("$")
    $P5020 = $P101."push"($P5019)
    set $P5021, $P5020
  if1326_end3884:
.annotate 'line', 1654
    $P5022 = _lex_param_1."!make"($P101)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_431_1347804164.33") :anon :lex :outer("cuid_246_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1643
    .param pmc _lex_param_0 
    .lex "$ast", $P101 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 1644
    $P5002 = _lex_param_0."ast"()
    set $P101, $P5002
    set $P5003, $P101["sink"]
    unless_null $P5003, fallback3891
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5004
  fallback3891:
    defined $I5001, $P5003
    box $P5008, $I5001
    set $P5007, $P5008
    unless $I5001 goto if1327_end3890 
    set $P5005, $P101["sink"]
    unless_null $P5005, fallback3892
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5005, $P5006
  fallback3892:
    set $P101, $P5005
    set $P5007, $P101
  if1327_end3890:
    set $P5009, $P101["bareblock"]
    unless_null $P5009, fallback3895
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5010
  fallback3895:
    set $P5014, $P5009
    unless $P5009 goto if1328_end3894 
.annotate 'line', 1646
    set $P5011, $P101[0]
    unless_null $P5011, fallback3896
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5012
  fallback3896:
    $P5013 = "&block_immediate"($P5011)
    set $P101, $P5013
    set $P5014, $P101
  if1328_end3894:
    nqp_get_sc_object $P5018, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Node"]
    unless_null $P5015, fallback3899
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5015, $P5019
  fallback3899:
    type_check $I5002, $P101, $P5015
    box $P5027, $I5002
    set $P5026, $P5027
    unless $I5002 goto if1329_end3898 
.annotate 'line', 1647
    nqp_get_sc_object $P5023, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Stmts"]
    unless_null $P5020, fallback3900
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5020, $P5024
  fallback3900:
    $P5025 = $P5020."new"($P101)
    set $P101, $P5025
    set $P5026, $P101
  if1329_end3898:
.annotate 'line', 1648
    find_lex $P5028, "$past"
    $P5029 = $P5028."push"($P101)
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "statement" :subid("cuid_247_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1657
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_3 :opt_flag 
    .const 'Sub' $P5019 = 'cuid_432_1347804164.33' 
    capture_lex $P5019 
    if haz_param_3, default3940
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_2, $P5018
  default3940:
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback3906
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5003
  fallback3906:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback3907
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5004
  fallback3907:
    unless $P5002 goto if1330_else3904 
    .const 'Sub' $P5005 = 'cuid_432_1347804164.33' 
    capture_lex $P5005
    $P5006 = $P5005()
    set $P5016, $P5006
    goto if1330_end3905
  if1330_else3904:
    unless_null _lex_param_1, fallback3936
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5008
  fallback3936:
    set $P5007, _lex_param_1["statement_control"]
    unless_null $P5007, fallback3937
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5009
  fallback3937:
    unless $P5007 goto if1334_else3934 
.annotate 'line', 1680
    unless_null _lex_param_1, fallback3938
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5011
  fallback3938:
    set $P5010, _lex_param_1["statement_control"]
    unless_null $P5010, fallback3939
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5012
  fallback3939:
    $P5013 = $P5010."ast"()
    set $P101, $P5013
    set $P5015, $P101
    goto if1334_end3935
  if1334_else3934:
.annotate 'line', 1681
    box $P5014, 0
    set $P101, $P5014
    set $P5015, $P101
  if1334_end3935:
    set $P5016, $P5015
  if1330_end3905:
.annotate 'line', 1682
    $P5017 = _lex_param_1."!make"($P101)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_432_1347804164.33") :anon :lex :outer("cuid_247_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1659
    .lex "$mc", $P101 
    .lex "$ml", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    find_lex $P5005, "$/"
    unless_null $P5005, fallback3908
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5005, $P5006
  fallback3908:
    set $P5004, $P5005["statement_mod_cond"]
    unless_null $P5004, fallback3909
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5007
  fallback3909:
    set $P5003, $P5004[0]
    unless_null $P5003, fallback3910
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5008
  fallback3910:
    set $P101, $P5003
    find_lex $P5011, "$/"
    unless_null $P5011, fallback3911
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5012
  fallback3911:
    set $P5010, $P5011["statement_mod_loop"]
    unless_null $P5010, fallback3912
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5013
  fallback3912:
    set $P5009, $P5010[0]
    unless_null $P5009, fallback3913
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5014
  fallback3913:
    set $P102, $P5009
.annotate 'line', 1662
    find_lex $P5016, "$/"
    unless_null $P5016, fallback3914
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5016, $P5017
  fallback3914:
    set $P5015, $P5016["EXPR"]
    unless_null $P5015, fallback3915
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5015, $P5018
  fallback3915:
    $P5019 = $P5015."ast"()
    store_lex "$past", $P5019
    set $P5033, $P101
    unless $P101 goto if1331_end3917 
.annotate 'line', 1663
.annotate 'line', 1664
    nqp_get_sc_object $P5023, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback3918
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5020, $P5024
  fallback3918:
    set $P5025, $P101["cond"]
    unless_null $P5025, fallback3919
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5025, $P5026
  fallback3919:
    $P5027 = $P5025."ast"()
    find_lex $P5028, "$past"
    set $P5029, $P101["sym"]
    unless_null $P5029, fallback3920
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5029, $P5030
  fallback3920:
    set $S5001, $P5029
    find_lex $P5031, "$/"
    $P5032 = $P5020."new"($P5027, $P5028, $S5001 :named("op"), $P5031 :named("node"))
    store_lex "$past", $P5032
    set $P5033, $P5032
  if1331_end3917:
    set $P5080, $P102
    unless $P102 goto if1332_end3922 
.annotate 'line', 1666
    set $P5034, $P102["sym"]
    unless_null $P5034, fallback3925
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5034, $P5035
  fallback3925:
    set $S5002, $P5034
    iseq $I5001, $S5002, "for"
    unless $I5001 goto if1333_else3923 
.annotate 'line', 1667
.annotate 'line', 1668
    nqp_get_sc_object $P5039, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5038, $P5039, "QAST"
    get_who $P5037, $P5038
    set $P5036, $P5037["Block"]
    unless_null $P5036, fallback3926
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5036, $P5040
  fallback3926:
.annotate 'line', 1669
    nqp_get_sc_object $P5044, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5043, $P5044, "QAST"
    get_who $P5042, $P5043
    set $P5041, $P5042["Var"]
    unless_null $P5041, fallback3927
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5041, $P5045
  fallback3927:
    $P5046 = $P5041."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    find_lex $P5047, "$past"
    $P5048 = $P5036."new"($P5046, $P5047, "immediate" :named("blocktype"))
    store_lex "$past", $P5048
.annotate 'line', 1671
    find_lex $P5049, "$past"
    $P5050 = $P5049."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1672
    find_lex $P5051, "$past"
    $P5052 = $P5051."arity"(1)
.annotate 'line', 1673
    nqp_get_sc_object $P5056, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["Op"]
    unless_null $P5053, fallback3928
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5053, $P5057
  fallback3928:
    set $P5058, $P102["cond"]
    unless_null $P5058, fallback3929
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5058, $P5059
  fallback3929:
    $P5060 = $P5058."ast"()
    find_lex $P5061, "$past"
    set $P5062, $P102["sym"]
    unless_null $P5062, fallback3930
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5062, $P5063
  fallback3930:
    set $S5003, $P5062
    find_lex $P5064, "$/"
    $P5065 = $P5053."new"($P5060, $P5061, $S5003 :named("op"), $P5064 :named("node"))
    store_lex "$past", $P5065
    set $P5079, $P5065
    goto if1333_end3924
  if1333_else3923:
.annotate 'line', 1675
.annotate 'line', 1676
    nqp_get_sc_object $P5069, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5068, $P5069, "QAST"
    get_who $P5067, $P5068
    set $P5066, $P5067["Op"]
    unless_null $P5066, fallback3931
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5066, $P5070
  fallback3931:
    set $P5071, $P102["cond"]
    unless_null $P5071, fallback3932
    nqp_get_sc_object $P5072, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5071, $P5072
  fallback3932:
    $P5073 = $P5071."ast"()
    find_lex $P5074, "$past"
    set $P5075, $P102["sym"]
    unless_null $P5075, fallback3933
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5075, $P5076
  fallback3933:
    set $S5004, $P5075
    find_lex $P5077, "$/"
    $P5078 = $P5066."new"($P5073, $P5074, $S5004 :named("op"), $P5077 :named("node"))
    store_lex "$past", $P5078
    set $P5079, $P5078
  if1333_end3924:
    set $P5080, $P5079
  if1332_end3922:
    .return ($P5080) 
.end
.HLL "nqp"
.namespace []
.sub "xblock" :subid("cuid_248_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1685
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1686
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback3941
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback3941:
    unless_null _lex_param_1, fallback3942
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5007
  fallback3942:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback3943
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5008
  fallback3943:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback3944
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5011
  fallback3944:
    set $P5010, _lex_param_1["pblock"]
    unless_null $P5010, fallback3945
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5012
  fallback3945:
    $P5013 = $P5010."ast"()
    $P5014 = $P5001."new"($P5009, $P5013, "if" :named("op"), _lex_param_1 :named("node"))
    $P5015 = _lex_param_1."!make"($P5014)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "pblock" :subid("cuid_249_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1689
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1690
    unless_null _lex_param_1, fallback3946
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback3946:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback3947
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback3947:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "block" :subid("cuid_250_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1693
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1694
    unless_null _lex_param_1, fallback3948
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback3948:
    set $P5001, _lex_param_1["blockoid"]
    unless_null $P5001, fallback3949
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback3949:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "blockoid" :subid("cuid_251_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1697
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5030 = 'cuid_434_1347804164.33' 
    capture_lex $P5030 
    .lex "$BLOCK", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 1698
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback3950
    nqp_get_sc_object $P5005, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback3951
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5006
  fallback3951:
    unless_null $P5003, vivi_13353952
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13353952:
    set $P5002, $P5003
  fallback3950:
    $P5008 = $P5002."pop_lexpad"()
    set $P101, $P5008
    unless_null _lex_param_1, fallback3955
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5010
  fallback3955:
    set $P5009, _lex_param_1["statementlist"]
    unless_null $P5009, fallback3956
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5011
  fallback3956:
    unless $P5009 goto if1336_else3953 
    .const 'Sub' $P5012 = 'cuid_434_1347804164.33' 
    capture_lex $P5012
    $P5013 = $P5012()
    set $P5029, $P5013
    goto if1336_end3954
  if1336_else3953:
.annotate 'line', 1713
    find_dynamic_lex $P5014, "$*HAS_YOU_ARE_HERE"
    unless_null $P5014, fallback3981
    nqp_get_sc_object $P5017, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["$HAS_YOU_ARE_HERE"]
    unless_null $P5015, fallback3982
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5015, $P5018
  fallback3982:
    unless_null $P5015, vivi_13443983
    die "Contextual $*HAS_YOU_ARE_HERE not found"
    box $P5019, "Contextual $*HAS_YOU_ARE_HERE not found"
    set $P5015, $P5019
  vivi_13443983:
    set $P5014, $P5015
  fallback3981:
    set $P5022, $P5014
    unless $P5014 goto if1343_end3980 
.annotate 'line', 1714
.annotate 'line', 1715
    $P5020 = _lex_param_1."CURSOR"()
    $P5021 = $P5020."panic"("{YOU_ARE_HERE} may only appear once in a setting")
    set $P5022, $P5021
  if1343_end3980:
    box $P5023, 1
    store_dynamic_lex "$*HAS_YOU_ARE_HERE", $P5023
.annotate 'line', 1718
    unless_null _lex_param_1, fallback3984
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5025
  fallback3984:
    set $P5024, _lex_param_1["you_are_here"]
    unless_null $P5024, fallback3985
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5024, $P5026
  fallback3985:
    $P5027 = $P5024."ast"()
    $P5028 = _lex_param_1."!make"($P5027)
    set $P5029, $P5028
  if1336_end3954:
    .return ($P5029) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_434_1347804164.33") :anon :lex :outer("cuid_251_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1699
    .const 'Sub' $P5061 = 'cuid_433_1347804164.33' 
    capture_lex $P5061 
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 1700
    find_lex $P5003, "$/"
    unless_null $P5003, fallback3957
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5004
  fallback3957:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback3958
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5005
  fallback3958:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    find_dynamic_lex $P5007, "%*HANDLERS"
    unless_null $P5007, fallback3961
    nqp_get_sc_object $P5010, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["%HANDLERS"]
    unless_null $P5008, fallback3962
    nqp_get_sc_object $P5012, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5011, $P5012
    new $P5013, 'Hash'
    set $P5011["%HANDLERS"], $P5013
    set $P5008, $P5013
  fallback3962:
    unless_null $P5008, vivi_13383963
    die "Contextual %*HANDLERS not found"
    box $P5014, "Contextual %*HANDLERS not found"
    set $P5008, $P5014
  vivi_13383963:
    set $P5007, $P5008
  fallback3961:
    set $P5034, $P5007
    unless $P5007 goto if1337_end3960 
.annotate 'line', 1701
.annotate 'line', 1702
    nqp_get_sc_object $P5018, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5017, $P5018, "QAST"
    get_who $P5016, $P5017
    set $P5015, $P5016["Op"]
    unless_null $P5015, fallback3964
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5015, $P5019
  fallback3964:
    $P5020 = $P5015."new"($P101, "handle" :named("op"))
    set $P101, $P5020
    find_dynamic_lex $P5024, "%*HANDLERS"
    unless_null $P5024, fallback3965
    nqp_get_sc_object $P5027, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["%HANDLERS"]
    unless_null $P5025, fallback3966
    nqp_get_sc_object $P5029, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5028, $P5029
    new $P5030, 'Hash'
    set $P5028["%HANDLERS"], $P5030
    set $P5025, $P5030
  fallback3966:
    unless_null $P5025, vivi_13393967
    die "Contextual %*HANDLERS not found"
    box $P5031, "Contextual %*HANDLERS not found"
    set $P5025, $P5031
  vivi_13393967:
    set $P5024, $P5025
  fallback3965:
    set $P5021, $P5024
    iter $P5023, $P5024
  for_next3968:
    unless $P5023, for_done3970
    shift $P5033, $P5023
  for_redo3969:
    .const 'Sub' $P5032 = 'cuid_433_1347804164.33' 
    capture_lex $P5032
    $P5021 = $P5032($P5033)
    goto for_next3968
  for_done3970:
    set $P5034, $P5021
  if1337_end3960:
.annotate 'line', 1708
    find_lex $P5035, "$BLOCK"
    $P5036 = $P5035."push"($P101)
.annotate 'line', 1709
    find_lex $P5037, "$BLOCK"
    find_lex $P5038, "$/"
    $P5039 = $P5037."node"($P5038)
    find_dynamic_lex $P5040, "%*HANDLERS"
    unless_null $P5040, fallback3973
    nqp_get_sc_object $P5043, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5042, $P5043
    set $P5041, $P5042["%HANDLERS"]
    unless_null $P5041, fallback3974
    nqp_get_sc_object $P5045, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5044, $P5045
    new $P5046, 'Hash'
    set $P5044["%HANDLERS"], $P5046
    set $P5041, $P5046
  fallback3974:
    unless_null $P5041, vivi_13413975
    die "Contextual %*HANDLERS not found"
    box $P5047, "Contextual %*HANDLERS not found"
    set $P5041, $P5047
  vivi_13413975:
    set $P5040, $P5041
  fallback3973:
    set $P5057, $P5040
    unless $P5040 goto if1340_end3972 
    find_lex $P5048, "$BLOCK"
    find_dynamic_lex $P5049, "%*HANDLERS"
    unless_null $P5049, fallback3976
    nqp_get_sc_object $P5052, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5051, $P5052
    set $P5050, $P5051["%HANDLERS"]
    unless_null $P5050, fallback3977
    nqp_get_sc_object $P5054, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5053, $P5054
    new $P5055, 'Hash'
    set $P5053["%HANDLERS"], $P5055
    set $P5050, $P5055
  fallback3977:
    unless_null $P5050, vivi_13423978
    die "Contextual %*HANDLERS not found"
    box $P5056, "Contextual %*HANDLERS not found"
    set $P5050, $P5056
  vivi_13423978:
    set $P5049, $P5050
  fallback3976:
    set $P5048["handlers"], $P5049
    set $P5057, $P5049
  if1340_end3972:
.annotate 'line', 1711
    find_dynamic_lex $P5058, "$/"
    find_lex $P5059, "$BLOCK"
    $P5060 = $P5058."!make"($P5059)
    .return ($P5060) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_433_1347804164.33") :anon :lex :outer("cuid_434_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1703
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 1704
    find_lex $P5001, "$past"
    $P5002 = _lex_param_0."key"()
    $P5003 = $P5001."push"($P5002)
.annotate 'line', 1705
    find_lex $P5004, "$past"
    $P5005 = _lex_param_0."value"()
    $P5006 = $P5004."push"($P5005)
    .return ($P5006) 
.end
.HLL "nqp"
.namespace []
.sub "newpad" :subid("cuid_252_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1722
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1723
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback3986
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback3987
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5005
  fallback3987:
    unless_null $P5002, vivi_13453988
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_13453988:
    set $P5001, $P5002
  fallback3986:
    $P5007 = $P5001."push_lexpad"(_lex_param_1)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "outerctx" :subid("cuid_253_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1726
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5026 = 'cuid_435_1347804164.33' 
    capture_lex $P5026 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    find_dynamic_lex $P5003, "%*COMPILING"
    unless_null $P5003, fallback3991
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%COMPILING"]
    unless_null $P5004, fallback3992
    nqp_get_sc_object $P5008, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%COMPILING"], $P5009
    set $P5004, $P5009
  fallback3992:
    unless_null $P5004, vivi_13473993
    die "Contextual %*COMPILING not found"
    box $P5010, "Contextual %*COMPILING not found"
    set $P5004, $P5010
  vivi_13473993:
    set $P5003, $P5004
  fallback3991:
    set $P5002, $P5003["%?OPTIONS"]
    unless_null $P5002, fallback3994
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5011
  fallback3994:
    set $P5001, $P5002["outer_ctx"]
    unless_null $P5001, fallback3995
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5012
  fallback3995:
    defined $I5001, $P5001
    box $P5016, $I5001
    set $P5015, $P5016
    if $I5001 goto unless1346_end3990 
    .const 'Sub' $P5013 = 'cuid_435_1347804164.33' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  unless1346_end3990:
.annotate 'line', 1748
    nqp_decontainerize $P5017, _lex_param_0
    find_dynamic_lex $P5018, "$*W"
    unless_null $P5018, fallback4051
    nqp_get_sc_object $P5021, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$W"]
    unless_null $P5019, fallback4052
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5019, $P5022
  fallback4052:
    unless_null $P5019, vivi_13644053
    die "Contextual $*W not found"
    box $P5023, "Contextual $*W not found"
    set $P5019, $P5023
  vivi_13644053:
    set $P5018, $P5019
  fallback4051:
    $P5024 = $P5018."cur_lexpad"()
    $P5025 = $P5017."SET_BLOCK_OUTER_CTX"($P5024)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_435_1347804164.33") :anon :lex :outer("cuid_253_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1727
    .lex "$SETTING", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 1730
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback3996
    nqp_get_sc_object $P5005, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback3997
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5006
  fallback3997:
    unless_null $P5003, vivi_13483998
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13483998:
    set $P5002, $P5003
  fallback3996:
    find_dynamic_lex $P5011, "%*COMPILING"
    unless_null $P5011, fallback4000
    nqp_get_sc_object $P5014, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["%COMPILING"]
    unless_null $P5012, fallback4001
    nqp_get_sc_object $P5016, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5015, $P5016
    new $P5017, 'Hash'
    set $P5015["%COMPILING"], $P5017
    set $P5012, $P5017
  fallback4001:
    unless_null $P5012, vivi_13494002
    die "Contextual %*COMPILING not found"
    box $P5018, "Contextual %*COMPILING not found"
    set $P5012, $P5018
  vivi_13494002:
    set $P5011, $P5012
  fallback4000:
    set $P5010, $P5011["%?OPTIONS"]
    unless_null $P5010, fallback4003
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5019
  fallback4003:
    set $P5009, $P5010["setting"]
    unless_null $P5009, fallback4004
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5020
  fallback4004:
    set $P5008, $P5009
    defined $I5001, $P5008
    if $I5001, defor3999
    box $P5021, "NQPCORE"
    set $P5008, $P5021
  defor3999:
    $P5022 = $P5002."load_setting"($P5008)
    set $P101, $P5022
    find_dynamic_lex $P5025, "%*COMPILING"
    unless_null $P5025, fallback4007
    nqp_get_sc_object $P5028, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["%COMPILING"]
    unless_null $P5026, fallback4008
    nqp_get_sc_object $P5030, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5029, $P5030
    new $P5031, 'Hash'
    set $P5029["%COMPILING"], $P5031
    set $P5026, $P5031
  fallback4008:
    unless_null $P5026, vivi_13514009
    die "Contextual %*COMPILING not found"
    box $P5032, "Contextual %*COMPILING not found"
    set $P5026, $P5032
  vivi_13514009:
    set $P5025, $P5026
  fallback4007:
    set $P5024, $P5025["%?OPTIONS"]
    unless_null $P5024, fallback4010
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5024, $P5033
  fallback4010:
    set $P5023, $P5024["setting"]
    unless_null $P5023, fallback4011
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5023, $P5034
  fallback4011:
    set $S5001, $P5023
    iseq $I5002, $S5001, "NULL"
    box $P5115, $I5002
    set $P5114, $P5115
    if $I5002 goto unless1350_end4006 
.annotate 'line', 1735
.annotate 'line', 1736
    $P5035 = "&import_HOW_exports"($P101)
    find_dynamic_lex $P5038, "%*COMPILING"
    unless_null $P5038, fallback4014
    nqp_get_sc_object $P5041, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5040, $P5041
    set $P5039, $P5040["%COMPILING"]
    unless_null $P5039, fallback4015
    nqp_get_sc_object $P5043, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5042, $P5043
    new $P5044, 'Hash'
    set $P5042["%COMPILING"], $P5044
    set $P5039, $P5044
  fallback4015:
    unless_null $P5039, vivi_13534016
    die "Contextual %*COMPILING not found"
    box $P5045, "Contextual %*COMPILING not found"
    set $P5039, $P5045
  vivi_13534016:
    set $P5038, $P5039
  fallback4014:
    set $P5037, $P5038["%?OPTIONS"]
    unless_null $P5037, fallback4017
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5037, $P5046
  fallback4017:
    set $P5036, $P5037["old-regex-lib"]
    unless_null $P5036, fallback4018
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5036, $P5047
  fallback4018:
    set $P5061, $P5036
    unless $P5036 goto if1352_end4013 
.annotate 'line', 1737
.annotate 'line', 1738
    find_dynamic_lex $P5048, "$*W"
    unless_null $P5048, fallback4019
    nqp_get_sc_object $P5051, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5050, $P5051
    set $P5049, $P5050["$W"]
    unless_null $P5049, fallback4020
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5049, $P5052
  fallback4020:
    unless_null $P5049, vivi_13544021
    die "Contextual $*W not found"
    box $P5053, "Contextual $*W not found"
    set $P5049, $P5053
  vivi_13544021:
    set $P5048, $P5049
  fallback4019:
    find_dynamic_lex $P5054, "$*GLOBALish"
    unless_null $P5054, fallback4022
    nqp_get_sc_object $P5057, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5056, $P5057
    set $P5055, $P5056["$GLOBALish"]
    unless_null $P5055, fallback4023
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5055, $P5058
  fallback4023:
    unless_null $P5055, vivi_13554024
    die "Contextual $*GLOBALish not found"
    box $P5059, "Contextual $*GLOBALish not found"
    set $P5055, $P5059
  vivi_13554024:
    set $P5054, $P5055
  fallback4022:
    $P5060 = $P5048."load_module"("NQPRegex", $P5054)
    set $P5061, $P5060
  if1352_end4013:
    find_dynamic_lex $P5064, "%*COMPILING"
    unless_null $P5064, fallback4027
    nqp_get_sc_object $P5067, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5066, $P5067
    set $P5065, $P5066["%COMPILING"]
    unless_null $P5065, fallback4028
    nqp_get_sc_object $P5069, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5068, $P5069
    new $P5070, 'Hash'
    set $P5068["%COMPILING"], $P5070
    set $P5065, $P5070
  fallback4028:
    unless_null $P5065, vivi_13574029
    die "Contextual %*COMPILING not found"
    box $P5071, "Contextual %*COMPILING not found"
    set $P5065, $P5071
  vivi_13574029:
    set $P5064, $P5065
  fallback4027:
    set $P5063, $P5064["%?OPTIONS"]
    unless_null $P5063, fallback4030
    nqp_get_sc_object $P5072, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5063, $P5072
  fallback4030:
    set $P5062, $P5063["no-regex-lib"]
    unless_null $P5062, fallback4031
    nqp_get_sc_object $P5073, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5062, $P5073
  fallback4031:
    set $P5113, $P5062
    if $P5062 goto unless1356_end4026 
.annotate 'line', 1740
.annotate 'line', 1741
    find_dynamic_lex $P5074, "$*W"
    unless_null $P5074, fallback4032
    nqp_get_sc_object $P5077, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5076, $P5077
    set $P5075, $P5076["$W"]
    unless_null $P5075, fallback4033
    nqp_get_sc_object $P5078, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5075, $P5078
  fallback4033:
    unless_null $P5075, vivi_13584034
    die "Contextual $*W not found"
    box $P5079, "Contextual $*W not found"
    set $P5075, $P5079
  vivi_13584034:
    set $P5074, $P5075
  fallback4032:
    find_dynamic_lex $P5080, "$*GLOBALish"
    unless_null $P5080, fallback4035
    nqp_get_sc_object $P5083, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5082, $P5083
    set $P5081, $P5082["$GLOBALish"]
    unless_null $P5081, fallback4036
    nqp_get_sc_object $P5084, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5081, $P5084
  fallback4036:
    unless_null $P5081, vivi_13594037
    die "Contextual $*GLOBALish not found"
    box $P5085, "Contextual $*GLOBALish not found"
    set $P5081, $P5085
  vivi_13594037:
    set $P5080, $P5081
  fallback4035:
    $P5086 = $P5074."load_module"("QRegex", $P5080)
    find_dynamic_lex $P5089, "%*COMPILING"
    unless_null $P5089, fallback4040
    nqp_get_sc_object $P5092, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5091, $P5092
    set $P5090, $P5091["%COMPILING"]
    unless_null $P5090, fallback4041
    nqp_get_sc_object $P5094, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5093, $P5094
    new $P5095, 'Hash'
    set $P5093["%COMPILING"], $P5095
    set $P5090, $P5095
  fallback4041:
    unless_null $P5090, vivi_13614042
    die "Contextual %*COMPILING not found"
    box $P5096, "Contextual %*COMPILING not found"
    set $P5090, $P5096
  vivi_13614042:
    set $P5089, $P5090
  fallback4040:
    set $P5088, $P5089["%?OPTIONS"]
    unless_null $P5088, fallback4043
    nqp_get_sc_object $P5097, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5088, $P5097
  fallback4043:
    set $P5087, $P5088["old-regex-lib"]
    unless_null $P5087, fallback4044
    nqp_get_sc_object $P5098, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5087, $P5098
  fallback4044:
    set $P5112, $P5087
    if $P5087 goto unless1360_end4039 
.annotate 'line', 1742
.annotate 'line', 1743
    find_dynamic_lex $P5099, "$*W"
    unless_null $P5099, fallback4045
    nqp_get_sc_object $P5102, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5101, $P5102
    set $P5100, $P5101["$W"]
    unless_null $P5100, fallback4046
    nqp_get_sc_object $P5103, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5100, $P5103
  fallback4046:
    unless_null $P5100, vivi_13624047
    die "Contextual $*W not found"
    box $P5104, "Contextual $*W not found"
    set $P5100, $P5104
  vivi_13624047:
    set $P5099, $P5100
  fallback4045:
    find_dynamic_lex $P5105, "$*GLOBALish"
    unless_null $P5105, fallback4048
    nqp_get_sc_object $P5108, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5107, $P5108
    set $P5106, $P5107["$GLOBALish"]
    unless_null $P5106, fallback4049
    nqp_get_sc_object $P5109, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5106, $P5109
  fallback4049:
    unless_null $P5106, vivi_13634050
    die "Contextual $*GLOBALish not found"
    box $P5110, "Contextual $*GLOBALish not found"
    set $P5106, $P5110
  vivi_13634050:
    set $P5105, $P5106
  fallback4048:
    $P5111 = $P5099."load_module"("NQPP6QRegex", $P5105)
    set $P5112, $P5111
  unless1360_end4039:
    set $P5113, $P5112
  unless1356_end4026:
    set $P5114, $P5113
  unless1350_end4006:
    .return ($P5114) 
.end
.HLL "nqp"
.namespace []
.sub "you_are_here" :subid("cuid_254_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1760
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1761
    nqp_decontainerize $P5001, _lex_param_0
    $P5002 = $P5001."CTXSAVE"()
    $P5003 = _lex_param_1."!make"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<use>" :subid("cuid_255_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1766
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$module", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 1767
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4054
    nqp_get_sc_object $P5005, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4055
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5006
  fallback4055:
    unless_null $P5003, vivi_13654056
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_13654056:
    set $P5002, $P5003
  fallback4054:
    unless_null _lex_param_1, fallback4057
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5009
  fallback4057:
    set $P5008, _lex_param_1["name"]
    unless_null $P5008, fallback4058
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5010
  fallback4058:
    set $S5001, $P5008
    find_dynamic_lex $P5011, "$*GLOBALish"
    unless_null $P5011, fallback4059
    nqp_get_sc_object $P5014, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$GLOBALish"]
    unless_null $P5012, fallback4060
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5012, $P5015
  fallback4060:
    unless_null $P5012, vivi_13664061
    die "Contextual $*GLOBALish not found"
    box $P5016, "Contextual $*GLOBALish not found"
    set $P5012, $P5016
  vivi_13664061:
    set $P5011, $P5012
  fallback4059:
    $P5017 = $P5002."load_module"($S5001, $P5011)
    set $P101, $P5017
    defined $I5001, $P101
    box $P5020, $I5001
    set $P5019, $P5020
    unless $I5001 goto if1367_end4063 
.annotate 'line', 1768
.annotate 'line', 1769
    $P5018 = "&import_HOW_exports"($P101)
    set $P5019, $P5018
  if1367_end4063:
.annotate 'line', 1771
    nqp_get_sc_object $P5024, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Stmts"]
    unless_null $P5021, fallback4064
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5021, $P5025
  fallback4064:
    $P5026 = $P5021."new"()
    $P5027 = _lex_param_1."!make"($P5026)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<if>" :subid("cuid_256_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1774
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5031 = 'cuid_436_1347804164.33' 
    capture_lex $P5031 
    .lex "$count", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback4065
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5004
  fallback4065:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4066
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5005
  fallback4066:
    set $N5002, $P5003
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5006, $N5001
    set $P101, $P5006
.annotate 'line', 1776
    unless_null _lex_param_1, fallback4067
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5009
  fallback4067:
    set $P5008, _lex_param_1["xblock"]
    unless_null $P5008, fallback4068
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5010
  fallback4068:
    set $I5001, $P101
    set $P5007, $P5008[$I5001]
    unless_null $P5007, fallback4069
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5011
  fallback4069:
    $P5012 = $P5007."ast"()
    $P5013 = "&xblock_immediate"($P5012)
    set $P102, $P5013
    unless_null _lex_param_1, fallback4072
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5015
  fallback4072:
    set $P5014, _lex_param_1["else"]
    unless_null $P5014, fallback4073
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5014, $P5016
  fallback4073:
    set $P5025, $P5014
    unless $P5014 goto if1368_end4071 
.annotate 'line', 1777
.annotate 'line', 1778
    unless_null _lex_param_1, fallback4074
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5019
  fallback4074:
    set $P5018, _lex_param_1["else"]
    unless_null $P5018, fallback4075
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5018, $P5020
  fallback4075:
    set $P5017, $P5018[0]
    unless_null $P5017, fallback4076
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5017, $P5021
  fallback4076:
    $P5022 = $P5017."ast"()
    $P5023 = "&block_immediate"($P5022)
    $P5024 = $P102."push"($P5023)
    set $P5025, $P5024
  if1368_end4071:
  while1369_test4077:
    set $N5004, $P101
    set $N5005, 0
    isgt $I5002, $N5004, $N5005
    box $P5029, $I5002
    set $P5028, $P5029
    unless $I5002 goto while1369_done4081 
  while1369_redo4079:
    .const 'Sub' $P5026 = 'cuid_436_1347804164.33' 
    capture_lex $P5026
    $P5027 = $P5026()
    set $P5028, $P5027
    goto while1369_test4077 
  while1369_done4081:
.annotate 'line', 1787
    $P5030 = _lex_param_1."!make"($P102)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_436_1347804164.33") :anon :lex :outer("cuid_256_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1781
    .lex "$else", $P101 
    .local pmc tmp_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    find_lex $P5002, "$count"
    set tmp_1, $P5002
    set $N5002, tmp_1
    set $N5003, 1
    sub $N5001, $N5002, $N5003
    box $P5003, $N5001
    store_lex "$count", $P5003
    find_lex $P5002, "$past"
    set $P101, $P5002
.annotate 'line', 1784
    find_lex $P5005, "$/"
    unless_null $P5005, fallback4082
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5005, $P5006
  fallback4082:
    set $P5004, $P5005["xblock"]
    unless_null $P5004, fallback4083
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5007
  fallback4083:
    find_lex $P5008, "$count"
    set $I5001, $P5008
    set $P5003, $P5004[$I5001]
    unless_null $P5003, fallback4084
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5009
  fallback4084:
    $P5010 = $P5003."ast"()
    $P5011 = "&xblock_immediate"($P5010)
    store_lex "$past", $P5011
.annotate 'line', 1785
    find_lex $P5012, "$past"
    $P5013 = $P5012."push"($P101)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<unless>" :subid("cuid_257_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1790
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 1791
    unless_null _lex_param_1, fallback4085
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5003
  fallback4085:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4086
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5004
  fallback4086:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1792
    $P5007 = $P101."op"("unless")
.annotate 'line', 1793
    $P5008 = _lex_param_1."!make"($P101)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<while>" :subid("cuid_258_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1796
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 1797
    unless_null _lex_param_1, fallback4087
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5003
  fallback4087:
    set $P5002, _lex_param_1["xblock"]
    unless_null $P5002, fallback4088
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5004
  fallback4088:
    $P5005 = $P5002."ast"()
    $P5006 = "&xblock_immediate"($P5005)
    set $P101, $P5006
.annotate 'line', 1798
    unless_null _lex_param_1, fallback4089
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5008
  fallback4089:
    set $P5007, _lex_param_1["sym"]
    unless_null $P5007, fallback4090
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5009
  fallback4090:
    set $S5001, $P5007
    $P5010 = $P101."op"($S5001)
    find_dynamic_lex $P5011, "$*CONTROL_USED"
    unless_null $P5011, fallback4093
    nqp_get_sc_object $P5014, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$CONTROL_USED"]
    unless_null $P5012, fallback4094
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5012, $P5015
  fallback4094:
    unless_null $P5012, vivi_13714095
    die "Contextual $*CONTROL_USED not found"
    box $P5016, "Contextual $*CONTROL_USED not found"
    set $P5012, $P5016
  vivi_13714095:
    set $P5011, $P5012
  fallback4093:
    set $P5024, $P5011
    if $P5011 goto unless1370_end4092 
.annotate 'line', 1799
.annotate 'line', 1800
    nqp_get_sc_object $P5020, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["IVal"]
    unless_null $P5017, fallback4096
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5017, $P5021
  fallback4096:
    $P5022 = $P5017."new"(1 :named("value"), "nohandler" :named("named"))
    $P5023 = $P101."push"($P5022)
    set $P5024, $P5023
  unless1370_end4092:
.annotate 'line', 1802
    $P5025 = _lex_param_1."!make"($P101)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<repeat>" :subid("cuid_259_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1805
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback4097
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5004
  fallback4097:
    set $P5003, _lex_param_1["wu"]
    unless_null $P5003, fallback4098
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5005
  fallback4098:
    set $S5002, $P5003
    concat $S5001, "repeat_", $S5002
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback4101
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5008
  fallback4101:
    set $P5007, _lex_param_1["xblock"]
    unless_null $P5007, fallback4102
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5009
  fallback4102:
    unless $P5007 goto if1372_else4099 
.annotate 'line', 1808
.annotate 'line', 1809
    unless_null _lex_param_1, fallback4103
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5011
  fallback4103:
    set $P5010, _lex_param_1["xblock"]
    unless_null $P5010, fallback4104
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5012
  fallback4104:
    $P5013 = $P5010."ast"()
    $P5014 = "&xblock_immediate"($P5013)
    set $P102, $P5014
.annotate 'line', 1810
    $P5015 = $P102."op"($P101)
    set $P5031, $P5015
    goto if1372_end4100
  if1372_else4099:
.annotate 'line', 1812
.annotate 'line', 1813
    nqp_get_sc_object $P5019, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Op"]
    unless_null $P5016, fallback4105
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5016, $P5020
  fallback4105:
    unless_null _lex_param_1, fallback4106
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5022
  fallback4106:
    set $P5021, _lex_param_1["EXPR"]
    unless_null $P5021, fallback4107
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5021, $P5023
  fallback4107:
    $P5024 = $P5021."ast"()
    unless_null _lex_param_1, fallback4108
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5026
  fallback4108:
    set $P5025, _lex_param_1["pblock"]
    unless_null $P5025, fallback4109
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5025, $P5027
  fallback4109:
    $P5028 = $P5025."ast"()
    $P5029 = "&block_immediate"($P5028)
    $P5030 = $P5016."new"($P5024, $P5029, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P102, $P5030
    set $P5031, $P102
  if1372_end4100:
    find_dynamic_lex $P5032, "$*CONTROL_USED"
    unless_null $P5032, fallback4112
    nqp_get_sc_object $P5035, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["$CONTROL_USED"]
    unless_null $P5033, fallback4113
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5033, $P5036
  fallback4113:
    unless_null $P5033, vivi_13744114
    die "Contextual $*CONTROL_USED not found"
    box $P5037, "Contextual $*CONTROL_USED not found"
    set $P5033, $P5037
  vivi_13744114:
    set $P5032, $P5033
  fallback4112:
    set $P5045, $P5032
    if $P5032 goto unless1373_end4111 
.annotate 'line', 1816
.annotate 'line', 1817
    nqp_get_sc_object $P5041, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["IVal"]
    unless_null $P5038, fallback4115
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5038, $P5042
  fallback4115:
    $P5043 = $P5038."new"(1 :named("value"), "nohandler" :named("named"))
    $P5044 = $P102."push"($P5043)
    set $P5045, $P5044
  unless1373_end4111:
.annotate 'line', 1819
    $P5046 = _lex_param_1."!make"($P102)
    .return ($P5046) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<for>" :subid("cuid_260_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1822
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
.annotate 'line', 1823
    unless_null _lex_param_1, fallback4116
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5004
  fallback4116:
    set $P5003, _lex_param_1["xblock"]
    unless_null $P5003, fallback4117
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5005
  fallback4117:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 1824
    $P5007 = $P101."op"("for")
    set $P5008, $P101[1]
    unless_null $P5008, fallback4118
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5009
  fallback4118:
    set $P102, $P5008
.annotate 'line', 1826
    $P5010 = $P102."arity"()
    set $P5022, $P5010
    if $P5010 goto unless1375_end4120 
.annotate 'line', 1827
    set $P5011, $P102[0]
    unless_null $P5011, fallback4121
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5012
  fallback4121:
    nqp_get_sc_object $P5016, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback4122
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5013, $P5017
  fallback4122:
    $P5018 = $P5013."new"("$_" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5019 = $P5011."push"($P5018)
.annotate 'line', 1828
    $P5020 = $P102."symbol"("$_", "lexical" :named("scope"))
.annotate 'line', 1829
    $P5021 = $P102."arity"(1)
    set $P5022, $P5021
  unless1375_end4120:
.annotate 'line', 1831
    $P5023 = $P102."blocktype"("immediate")
    find_dynamic_lex $P5024, "$*CONTROL_USED"
    unless_null $P5024, fallback4125
    nqp_get_sc_object $P5027, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["$CONTROL_USED"]
    unless_null $P5025, fallback4126
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5025, $P5028
  fallback4126:
    unless_null $P5025, vivi_13774127
    die "Contextual $*CONTROL_USED not found"
    box $P5029, "Contextual $*CONTROL_USED not found"
    set $P5025, $P5029
  vivi_13774127:
    set $P5024, $P5025
  fallback4125:
    set $P5037, $P5024
    if $P5024 goto unless1376_end4124 
.annotate 'line', 1832
.annotate 'line', 1833
    nqp_get_sc_object $P5033, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["IVal"]
    unless_null $P5030, fallback4128
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5030, $P5034
  fallback4128:
    $P5035 = $P5030."new"(1 :named("value"), "nohandler" :named("named"))
    $P5036 = $P101."push"($P5035)
    set $P5037, $P5036
  unless1376_end4124:
.annotate 'line', 1835
    $P5038 = _lex_param_1."!make"($P101)
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CATCH>" :subid("cuid_261_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1838
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 1839
    unless_null _lex_param_1, fallback4129
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5003
  fallback4129:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4130
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5004
  fallback4130:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1840
    $P5006 = "&set_block_handler"(_lex_param_1, $P101, "CATCH")
.annotate 'line', 1841
    $P5007 = "&default_for"("$")
    $P5008 = _lex_param_1."!make"($P5007)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "statement_control:sym<CONTROL>" :subid("cuid_262_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1844
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 1845
    unless_null _lex_param_1, fallback4131
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5003
  fallback4131:
    set $P5002, _lex_param_1["block"]
    unless_null $P5002, fallback4132
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5004
  fallback4132:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1846
    $P5006 = "&set_block_handler"(_lex_param_1, $P101, "CONTROL")
.annotate 'line', 1847
    $P5007 = "&default_for"("$")
    $P5008 = _lex_param_1."!make"($P5007)
    .return ($P5008) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<BEGIN>" :subid("cuid_263_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1881
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1882
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4133
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4134
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5005
  fallback4134:
    unless_null $P5002, vivi_13784135
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_13784135:
    set $P5001, $P5002
  fallback4133:
    unless_null _lex_param_1, fallback4136
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5008
  fallback4136:
    set $P5007, _lex_param_1["blorst"]
    unless_null $P5007, fallback4137
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5009
  fallback4137:
    $P5010 = $P5007."ast"()
    $P5011 = $P5001."run_begin_block"($P5010)
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<INIT>" :subid("cuid_264_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1885
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1886
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4138
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4139
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5005
  fallback4139:
    unless_null $P5002, vivi_13794140
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_13794140:
    set $P5001, $P5002
  fallback4138:
    $P5007 = $P5001."cur_lexpad"()
    unless_null _lex_param_1, fallback4141
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5009
  fallback4141:
    set $P5008, _lex_param_1["blorst"]
    unless_null $P5008, fallback4142
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5010
  fallback4142:
    $P5011 = $P5008."ast"()
    $P5012 = $P5007."push"($P5011)
.annotate 'line', 1887
    nqp_get_sc_object $P5016, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Stmts"]
    unless_null $P5013, fallback4143
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5013, $P5017
  fallback4143:
    $P5018 = $P5013."new"()
    $P5019 = _lex_param_1."!make"($P5018)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "statement_prefix:sym<try>" :subid("cuid_265_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1890
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    root_new $P102, ['parrot';'Continuation']
    set_label $P102, lexotic_4144
    .lex "RETURN", $P102
.annotate 'line', 1891
    unless_null _lex_param_1, fallback4146
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5003
  fallback4146:
    set $P5002, _lex_param_1["blorst"]
    unless_null $P5002, fallback4147
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5004
  fallback4147:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
    nqp_get_sc_object $P5009, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Block"]
    unless_null $P5006, fallback4150
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5010
  fallback4150:
    type_check $I5001, $P101, $P5006
    box $P5023, $I5001
    set $P5022, $P5023
    unless $I5001 goto if1380_end4149 
.annotate 'line', 1892
    set $P5011, $P101["handlers"]
    unless_null $P5011, fallback4155
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5012
  fallback4155:
    set $P5015, $P5011
    unless $P5011 goto if1382_end4154 
    set $P5013, $P101["handlers"]
    unless_null $P5013, fallback4156
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5013, $P5014
  fallback4156:
    exists $I5002, $P5013["CATCH"]
    box $P5016, $I5002
    set $P5015, $P5016
  if1382_end4154:
    unless $P5015 goto if1381_else4151 
.annotate 'line', 1893
.annotate 'line', 1894
    $P5017 = _lex_param_1."!make"($P101)
    find_lex $P5018, "RETURN"
    $P5019 = $P5018(1)
    set $P5021, $P5019
    goto if1381_end4152
  if1381_else4151:
.annotate 'line', 1897
.annotate 'line', 1898
    $P5020 = $P101."blocktype"("immediate")
    set $P5021, $P5020
  if1381_end4152:
    set $P5022, $P5021
  if1380_end4149:
.annotate 'line', 1901
    nqp_get_sc_object $P5027, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback4157
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5024, $P5028
  fallback4157:
.annotate 'line', 1905
    nqp_get_sc_object $P5032, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Stmts"]
    unless_null $P5029, fallback4158
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5029, $P5033
  fallback4158:
.annotate 'line', 1906
    nqp_get_sc_object $P5037, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["Op"]
    unless_null $P5034, fallback4159
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5034, $P5038
  fallback4159:
.annotate 'line', 1908
    nqp_get_sc_object $P5042, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5041, $P5042, "QAST"
    get_who $P5040, $P5041
    set $P5039, $P5040["Op"]
    unless_null $P5039, fallback4160
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5039, $P5043
  fallback4160:
    $P5044 = $P5039."new"("exception" :named("op"))
.annotate 'line', 1909
    nqp_get_sc_object $P5048, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["SVal"]
    unless_null $P5045, fallback4161
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5045, $P5049
  fallback4161:
    $P5050 = $P5045."new"("handled" :named("value"))
.annotate 'line', 1910
    nqp_get_sc_object $P5054, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5053, $P5054, "QAST"
    get_who $P5052, $P5053
    set $P5051, $P5052["IVal"]
    unless_null $P5051, fallback4162
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5051, $P5055
  fallback4162:
    $P5056 = $P5051."new"(1 :named("value"))
    $P5057 = $P5034."new"($P5044, $P5050, $P5056, "bindkey_i" :named("op"))
.annotate 'line', 1912
    $P5058 = "&default_for"("$")
    $P5059 = $P5029."new"($P5057, $P5058)
    $P5060 = $P5024."new"($P101, "CATCH", $P5059, "handle" :named("op"))
    $P5061 = _lex_param_1."!make"($P5060)
    goto lexotic_4145
  lexotic_4144:
    .get_results ($P5061)
  lexotic_4145:
    .return ($P5061) 
.end
.HLL "nqp"
.namespace []
.sub "blorst" :subid("cuid_266_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1916
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1917
    unless_null _lex_param_1, fallback4165
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4165:
    set $P5001, _lex_param_1["block"]
    unless_null $P5001, fallback4166
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4166:
    unless $P5001 goto if1383_else4163 
.annotate 'line', 1918
    unless_null _lex_param_1, fallback4167
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5005
  fallback4167:
    set $P5004, _lex_param_1["block"]
    unless_null $P5004, fallback4168
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5006
  fallback4168:
    $P5007 = $P5004."ast"()
    $P5008 = "&block_immediate"($P5007)
    set $P5013, $P5008
    goto if1383_end4164
  if1383_else4163:
.annotate 'line', 1919
    unless_null _lex_param_1, fallback4169
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5010
  fallback4169:
    set $P5009, _lex_param_1["statement"]
    unless_null $P5009, fallback4170
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5011
  fallback4170:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1383_end4164:
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<if>" :subid("cuid_267_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1924
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4171
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4171:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4172
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4172:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_cond:sym<unless>" :subid("cuid_268_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1925
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4173
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4173:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4174
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4174:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<while>" :subid("cuid_269_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1927
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4175
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4175:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4176
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4176:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "statement_mod_loop:sym<until>" :subid("cuid_270_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1928
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4177
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4177:
    set $P5001, _lex_param_1["cond"]
    unless_null $P5001, fallback4178
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4178:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<fatarrow>" :subid("cuid_271_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1932
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4179
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4179:
    set $P5001, _lex_param_1["fatarrow"]
    unless_null $P5001, fallback4180
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4180:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<colonpair>" :subid("cuid_272_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1933
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4181
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4181:
    set $P5001, _lex_param_1["colonpair"]
    unless_null $P5001, fallback4182
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4182:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<variable>" :subid("cuid_273_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1934
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4183
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4183:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4184
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4184:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<package_declarator>" :subid("cuid_274_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1935
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4185
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4185:
    set $P5001, _lex_param_1["package_declarator"]
    unless_null $P5001, fallback4186
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4186:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<scope_declarator>" :subid("cuid_275_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1936
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4187
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4187:
    set $P5001, _lex_param_1["scope_declarator"]
    unless_null $P5001, fallback4188
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4188:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<routine_declarator>" :subid("cuid_276_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1937
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4189
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4189:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4190
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4190:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<regex_declarator>" :subid("cuid_277_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1938
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4191
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4191:
    set $P5001, _lex_param_1["regex_declarator"]
    unless_null $P5001, fallback4192
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4192:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<statement_prefix>" :subid("cuid_278_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1939
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4193
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4193:
    set $P5001, _lex_param_1["statement_prefix"]
    unless_null $P5001, fallback4194
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4194:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<lambda>" :subid("cuid_279_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1940
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 1941
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback4195
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback4195:
    unless_null _lex_param_1, fallback4196
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5007
  fallback4196:
    set $P5006, _lex_param_1["pblock"]
    unless_null $P5006, fallback4197
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5008
  fallback4197:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "takeclosure" :named("op"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "fatarrow" :subid("cuid_280_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1944
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 1945
    unless_null _lex_param_1, fallback4198
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5003
  fallback4198:
    set $P5002, _lex_param_1["val"]
    unless_null $P5002, fallback4199
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5004
  fallback4199:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 1946
    unless_null _lex_param_1, fallback4200
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5007
  fallback4200:
    set $P5006, _lex_param_1["key"]
    unless_null $P5006, fallback4201
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5008
  fallback4201:
    $P5009 = $P5006."Str"()
    $P5010 = $P101."named"($P5009)
.annotate 'line', 1947
    $P5011 = _lex_param_1."!make"($P101)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "colonpair" :subid("cuid_281_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1950
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5022 = 'cuid_437_1347804164.33' 
    capture_lex $P5022 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4204
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4204:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback4205
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4205:
    unless $P5001 goto if1384_else4202 
.annotate 'line', 1951
.annotate 'line', 1952
    unless_null _lex_param_1, fallback4206
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5005
  fallback4206:
    set $P5004, _lex_param_1["variable"]
    unless_null $P5004, fallback4207
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5006
  fallback4207:
    $P5007 = $P5004."ast"()
    unless_null _lex_param_1, fallback4208
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5010
  fallback4208:
    set $P5009, _lex_param_1["variable"]
    unless_null $P5009, fallback4209
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5011
  fallback4209:
    set $P5008, $P5009["desigilname"]
    unless_null $P5008, fallback4210
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5012
  fallback4210:
    set $S5001, $P5008
    $P5013 = $P5007."named"($S5001)
.annotate 'line', 1953
    unless_null _lex_param_1, fallback4211
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5015
  fallback4211:
    set $P5014, _lex_param_1["variable"]
    unless_null $P5014, fallback4212
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5014, $P5016
  fallback4212:
    $P5017 = $P5014."ast"()
    $P5018 = _lex_param_1."!make"($P5017)
    set $P5021, $P5018
    goto if1384_end4203
  if1384_else4202:
    .const 'Sub' $P5019 = 'cuid_437_1347804164.33' 
    capture_lex $P5019
    $P5020 = $P5019()
    set $P5021, $P5020
  if1384_end4203:
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_437_1347804164.33") :anon :lex :outer("cuid_281_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1954
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    find_lex $P5003, "$/"
    unless_null $P5003, fallback4215
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5004
  fallback4215:
    set $P5002, $P5003["circumfix"]
    unless_null $P5002, fallback4216
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5005
  fallback4216:
    unless $P5002 goto if1385_else4213 
.annotate 'line', 1956
    find_lex $P5008, "$/"
    unless_null $P5008, fallback4217
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5009
  fallback4217:
    set $P5007, $P5008["circumfix"]
    unless_null $P5007, fallback4218
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5010
  fallback4218:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback4219
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5011
  fallback4219:
    $P5012 = $P5006."ast"()
    set $P5023, $P5012
    goto if1385_end4214
  if1385_else4213:
.annotate 'line', 1957
    nqp_get_sc_object $P5016, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["IVal"]
    unless_null $P5013, fallback4220
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5013, $P5017
  fallback4220:
    find_lex $P5019, "$/"
    unless_null $P5019, fallback4221
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5019, $P5020
  fallback4221:
    set $P5018, $P5019["not"]
    unless_null $P5018, fallback4222
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5018, $P5021
  fallback4222:
    isfalse $I5001, $P5018
    $P5022 = $P5013."new"($I5001 :named("value"))
    set $P5023, $P5022
  if1385_end4214:
    set $P101, $P5023
.annotate 'line', 1958
    find_lex $P5025, "$/"
    unless_null $P5025, fallback4223
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5025, $P5026
  fallback4223:
    set $P5024, $P5025["identifier"]
    unless_null $P5024, fallback4224
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5024, $P5027
  fallback4224:
    set $S5001, $P5024
    $P5028 = $P101."named"($S5001)
.annotate 'line', 1959
    find_dynamic_lex $P5029, "$/"
    $P5030 = $P5029."!make"($P101)
    .return ($P5030) 
.end
.HLL "nqp"
.namespace []
.sub "variable" :subid("cuid_282_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1963
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5021 = 'cuid_439_1347804164.33' 
    capture_lex $P5021 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback4227
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5003
  fallback4227:
    set $P5002, _lex_param_1["postcircumfix"]
    unless_null $P5002, fallback4228
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5004
  fallback4228:
    unless $P5002 goto if1386_else4225 
.annotate 'line', 1965
.annotate 'line', 1966
    unless_null _lex_param_1, fallback4229
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5006
  fallback4229:
    set $P5005, _lex_param_1["postcircumfix"]
    unless_null $P5005, fallback4230
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5005, $P5007
  fallback4230:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
.annotate 'line', 1967
    nqp_get_sc_object $P5012, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["VarWithFallback"]
    unless_null $P5009, fallback4231
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5013
  fallback4231:
.annotate 'line', 1968
    $P5014 = "&default_for"("$")
    $P5015 = $P5009."new"("$/" :named("name"), "lexical" :named("scope"), $P5014 :named("fallback"))
    $P5016 = $P101."unshift"($P5015)
    set $P5019, $P5016
    goto if1386_end4226
  if1386_else4225:
    .const 'Sub' $P5017 = 'cuid_439_1347804164.33' 
    capture_lex $P5017
    $P5018 = $P5017()
    set $P5019, $P5018
  if1386_end4226:
.annotate 'line', 2036
    $P5020 = _lex_param_1."!make"($P101)
    .return ($P5020) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_439_1347804164.33") :anon :lex :outer("cuid_282_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1971
    .const 'Sub' $P5064 = 'cuid_438_1347804164.33' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_442_1347804164.33' 
    capture_lex $P5064 
    .lex "@name", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
.annotate 'line', 1972
    nqp_get_sc_object $P5005, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5004, $P5005, "NQP"
    get_who $P5003, $P5004
    set $P5002, $P5003["Compiler"]
    unless_null $P5002, fallback4232
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5006
  fallback4232:
    find_lex $P5007, "$/"
    set $S5001, $P5007
    $P5008 = $P5002."parse_name"($S5001)
    set $P101, $P5008
    set $N5001, $P101
    set $N5002, 1
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1387_else4233 
.annotate 'line', 1973
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4237
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5011
  fallback4237:
    set $P5009, $P5010["twigil"]
    unless_null $P5009, fallback4238
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5012
  fallback4238:
    set $P5016, $P5009
    unless $P5009 goto if1388_end4236 
.annotate 'line', 1974
.annotate 'line', 1975
    find_lex $P5013, "$/"
    $P5014 = $P5013."CURSOR"()
    $P5015 = $P5014."panic"("Twigil not allowed on multi-part name")
    set $P5016, $P5015
  if1388_end4236:
.annotate 'line', 1977
    find_lex $P5017, "$/"
    $P5018 = "&lexical_package_lookup"($P101, $P5017)
    store_lex "$past", $P5018
    set $P5063, $P5018
    goto if1387_end4234
  if1387_else4233:
    find_lex $P5021, "$/"
    unless_null $P5021, fallback4241
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5021, $P5022
  fallback4241:
    set $P5020, $P5021["twigil"]
    unless_null $P5020, fallback4242
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5020, $P5023
  fallback4242:
    set $P5019, $P5020[0]
    unless_null $P5019, fallback4243
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5019, $P5024
  fallback4243:
    set $S5002, $P5019
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1389_else4239 
    .const 'Sub' $P5025 = 'cuid_438_1347804164.33' 
    capture_lex $P5025
    $P5026 = $P5025()
    set $P5062, $P5026
    goto if1389_end4240
  if1389_else4239:
    find_lex $P5029, "$/"
    unless_null $P5029, fallback4254
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5029, $P5030
  fallback4254:
    set $P5028, $P5029["twigil"]
    unless_null $P5028, fallback4255
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5028, $P5031
  fallback4255:
    set $P5027, $P5028[0]
    unless_null $P5027, fallback4256
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5027, $P5032
  fallback4256:
    set $S5003, $P5027
    iseq $I5003, $S5003, "!"
    unless $I5003 goto if1390_else4252 
    .const 'Sub' $P5033 = 'cuid_442_1347804164.33' 
    capture_lex $P5033
    $P5034 = $P5033()
    set $P5061, $P5034
    goto if1390_end4253
  if1390_else4252:
.annotate 'line', 2028
    find_dynamic_lex $P5035, "$*W"
    unless_null $P5035, fallback4296
    nqp_get_sc_object $P5038, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5037, $P5038
    set $P5036, $P5037["$W"]
    unless_null $P5036, fallback4297
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5036, $P5039
  fallback4297:
    unless_null $P5036, vivi_14034298
    die "Contextual $*W not found"
    box $P5040, "Contextual $*W not found"
    set $P5036, $P5040
  vivi_14034298:
    set $P5035, $P5036
  fallback4296:
    set $P5041, $P101[0]
    unless_null $P5041, fallback4299
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5041, $P5042
  fallback4299:
    set $S5004, $P5041
    $P5043 = $P5035."is_package"($S5004)
    unless $P5043 goto if1402_else4294 
.annotate 'line', 2029
    find_lex $P5044, "$/"
    $P5045 = "&lexical_package_lookup"($P101, $P5044)
    store_lex "$past", $P5045
.annotate 'line', 2030
    find_lex $P5046, "$past"
    find_lex $P5048, "$/"
    unless_null $P5048, fallback4300
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5048, $P5049
  fallback4300:
    set $P5047, $P5048["sigil"]
    unless_null $P5047, fallback4301
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5047, $P5050
  fallback4301:
    $P5051 = "&default_for"($P5047)
    $P5052 = $P5046."fallback"($P5051)
    set $P5060, $P5052
    goto if1402_end4295
  if1402_else4294:
.annotate 'line', 2032
.annotate 'line', 2033
    nqp_get_sc_object $P5056, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5055, $P5056, "QAST"
    get_who $P5054, $P5055
    set $P5053, $P5054["Var"]
    unless_null $P5053, fallback4302
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5053, $P5057
  fallback4302:
    $P5058 = $P101."pop"()
    set $S5005, $P5058
    $P5059 = $P5053."new"($S5005 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5059
    set $P5060, $P5059
  if1402_end4295:
    set $P5061, $P5060
  if1390_end4253:
    set $P5062, $P5061
  if1389_end4240:
    set $P5063, $P5062
  if1387_end4234:
    .return ($P5063) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_438_1347804164.33") :anon :lex :outer("cuid_439_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1979
    .lex "$global_fallback", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 1980
    nqp_get_sc_object $P5005, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback4244
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5006
  fallback4244:
.annotate 'line', 1982
    new $P5007, 'ResizablePMCArray'
    box $P5008, "GLOBAL"
    push $P5007, $P5008
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4245
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5011
  fallback4245:
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4246
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5012
  fallback4246:
    set $S5002, $P5009
    find_lex $P5014, "$/"
    unless_null $P5014, fallback4247
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5014, $P5015
  fallback4247:
    set $P5013, $P5014["desigilname"]
    unless_null $P5013, fallback4248
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5013, $P5016
  fallback4248:
    set $S5003, $P5013
    concat $S5001, $S5002, $S5003
    box $P5017, $S5001
    push $P5007, $P5017
    find_lex $P5018, "$/"
    $P5019 = "&lexical_package_lookup"($P5007, $P5018)
.annotate 'line', 1983
    nqp_get_sc_object $P5023, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback4249
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5020, $P5024
  fallback4249:
.annotate 'line', 1985
    nqp_get_sc_object $P5028, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["SVal"]
    unless_null $P5025, fallback4250
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5025, $P5029
  fallback4250:
    find_lex $P5030, "$/"
    set $S5006, $P5030
    concat $S5005, "Contextual ", $S5006
    concat $S5004, $S5005, " not found"
    $P5031 = $P5025."new"($S5004 :named("value"))
    $P5032 = $P5020."new"($P5031, "die_s" :named("op"))
    $P5033 = $P5002."new"($P5019, $P5032, "ifnull" :named("op"))
    set $P101, $P5033
.annotate 'line', 1987
    nqp_get_sc_object $P5037, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5036, $P5037, "QAST"
    get_who $P5035, $P5036
    set $P5034, $P5035["VarWithFallback"]
    unless_null $P5034, fallback4251
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5034, $P5038
  fallback4251:
.annotate 'line', 1988
    find_lex $P5039, "@name"
    $P5040 = $P5039."pop"()
    set $S5007, $P5040
    $P5041 = $P5034."new"($S5007 :named("name"), "contextual" :named("scope"), $P101 :named("fallback"))
    store_lex "$past", $P5041
    .return ($P5041) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_442_1347804164.33") :anon :lex :outer("cuid_439_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 1992
    .const 'Sub' $P5065 = 'cuid_441_1347804164.33' 
    capture_lex $P5065 
    .lex "$name", $P101 
    .lex "$ch", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
.annotate 'line', 1993
    find_lex $P5003, "@name"
    $P5004 = $P5003."pop"()
    set $S5001, $P5004
    box $P5005, $S5001
    set $P101, $P5005
    find_dynamic_lex $P5006, "$*PKGDECL"
    unless_null $P5006, fallback4259
    nqp_get_sc_object $P5009, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$PKGDECL"]
    unless_null $P5007, fallback4260
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5010
  fallback4260:
    unless_null $P5007, vivi_13924261
    die "Contextual $*PKGDECL not found"
    box $P5011, "Contextual $*PKGDECL not found"
    set $P5007, $P5011
  vivi_13924261:
    set $P5006, $P5007
  fallback4259:
    set $S5002, $P5006
    iseq $I5001, $S5002, "role"
    unless $I5001 goto if1391_else4257 
.annotate 'line', 1995
.annotate 'line', 1996
    nqp_get_sc_object $P5015, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback4262
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5012, $P5016
  fallback4262:
    $P5017 = $P5012."new"("$?CLASS" :named("name"), "lexical" :named("scope"))
    set $P102, $P5017
.annotate 'line', 1997
    find_dynamic_lex $P5018, "$*PACKAGE"
    unless_null $P5018, fallback4263
    nqp_get_sc_object $P5021, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$PACKAGE"]
    unless_null $P5019, fallback4264
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5019, $P5022
  fallback4264:
    unless_null $P5019, vivi_13934265
    die "Contextual $*PACKAGE not found"
    box $P5023, "Contextual $*PACKAGE not found"
    set $P5019, $P5023
  vivi_13934265:
    set $P5018, $P5019
  fallback4263:
    $P5024 = $P102."set_compile_time_value"($P5018)
    set $P5037, $P5024
    goto if1391_end4258
  if1391_else4257:
.annotate 'line', 1999
.annotate 'line', 2000
    nqp_get_sc_object $P5028, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["WVal"]
    unless_null $P5025, fallback4266
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5025, $P5029
  fallback4266:
    find_dynamic_lex $P5030, "$*PACKAGE"
    unless_null $P5030, fallback4267
    nqp_get_sc_object $P5033, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5032, $P5033
    set $P5031, $P5032["$PACKAGE"]
    unless_null $P5031, fallback4268
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5031, $P5034
  fallback4268:
    unless_null $P5031, vivi_13944269
    die "Contextual $*PACKAGE not found"
    box $P5035, "Contextual $*PACKAGE not found"
    set $P5031, $P5035
  vivi_13944269:
    set $P5030, $P5031
  fallback4267:
    $P5036 = $P5025."new"($P5030 :named("value"))
    set $P102, $P5036
    set $P5037, $P102
  if1391_end4258:
.annotate 'line', 2002
    nqp_get_sc_object $P5041, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Var"]
    unless_null $P5038, fallback4270
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5038, $P5042
  fallback4270:
.annotate 'line', 2004
    nqp_get_sc_object $P5046, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["VM"]
    unless_null $P5043, fallback4271
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5043, $P5047
  fallback4271:
.annotate 'line', 2005
    nqp_get_sc_object $P5051, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Var"]
    unless_null $P5048, fallback4272
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5048, $P5052
  fallback4272:
    $P5053 = $P5048."new"("self" :named("name"), "lexical" :named("scope"))
    $P5054 = $P5043."new"($P5053, "nqp_decontainerize PP" :named("pirop"))
    $P5055 = $P5038."new"($P5054, $P102, $P101 :named("name"), "attribute" :named("scope"))
    store_lex "$past", $P5055
    find_dynamic_lex $P5056, "$*IN_DECL"
    unless_null $P5056, fallback4275
    nqp_get_sc_object $P5059, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5058, $P5059
    set $P5057, $P5058["$IN_DECL"]
    unless_null $P5057, fallback4276
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5057, $P5060
  fallback4276:
    unless_null $P5057, vivi_13964277
    die "Contextual $*IN_DECL not found"
    box $P5061, "Contextual $*IN_DECL not found"
    set $P5057, $P5061
  vivi_13964277:
    set $P5056, $P5057
  fallback4275:
    set $P5064, $P5056
    if $P5056 goto unless1395_end4274 
    .const 'Sub' $P5062 = 'cuid_441_1347804164.33' 
    capture_lex $P5062
    $P5063 = $P5062()
    set $P5064, $P5063
  unless1395_end4274:
    .return ($P5064) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_441_1347804164.33") :anon :lex :outer("cuid_442_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2010
    .const 'Sub' $P5032 = 'cuid_440_1347804164.33' 
    capture_lex $P5032 
    .lex "$attr", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 2012
    find_dynamic_lex $P5006, "$*PACKAGE"
    unless_null $P5006, fallback4278
    nqp_get_sc_object $P5009, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5008, $P5009
    set $P5007, $P5008["$PACKAGE"]
    unless_null $P5007, fallback4279
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5010
  fallback4279:
    unless_null $P5007, vivi_13974280
    die "Contextual $*PACKAGE not found"
    box $P5011, "Contextual $*PACKAGE not found"
    set $P5007, $P5011
  vivi_13974280:
    set $P5006, $P5007
  fallback4278:
    get_how $P5005, $P5006
    find_dynamic_lex $P5012, "$*PACKAGE"
    unless_null $P5012, fallback4281
    nqp_get_sc_object $P5015, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$PACKAGE"]
    unless_null $P5013, fallback4282
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5013, $P5016
  fallback4282:
    unless_null $P5013, vivi_13984283
    die "Contextual $*PACKAGE not found"
    box $P5017, "Contextual $*PACKAGE not found"
    set $P5013, $P5017
  vivi_13984283:
    set $P5012, $P5013
  fallback4281:
    $P5018 = $P5005."attributes"($P5012, 1 :named("local"))
    set $P5002, $P5018
    iter $P5004, $P5018
    new $P5020, 'ExceptionHandler', [.CONTROL_LOOP_NEXT;.CONTROL_LOOP_REDO;.CONTROL_LOOP_LAST]
    set_label $P5020, for_handlers4286
    push_eh $P5020
  for_next4287:
    unless $P5004, for_done4289
    shift $P5021, $P5004
  for_redo4288:
    .const 'Sub' $P5019 = 'cuid_440_1347804164.33' 
    capture_lex $P5019
    $P5002 = $P5019($P5021)
    goto for_next4287
  for_handlers4286:
    .get_results ($P5020)
    pop_upto_eh $P5020
    getattribute $P5020, $P5020, 'type'
    eq $P5020, .CONTROL_LOOP_NEXT, for_next4287
    eq $P5020, .CONTROL_LOOP_REDO, for_redo4288
  for_done4289:
    pop_eh 
    defined $I5001, $P101
    unless $I5001 goto if1400_else4290 
.annotate 'line', 2018
    can $I5002, $P101, "type"
    box $P5026, $I5002
    set $P5025, $P5026
    unless $I5002 goto if1401_end4293 
.annotate 'line', 2019
.annotate 'line', 2020
    find_lex $P5022, "$past"
    $P5023 = $P101."type"()
    $P5024 = $P5022."returns"($P5023)
    set $P5025, $P5024
  if1401_end4293:
    set $P5031, $P5025
    goto if1400_end4291
  if1400_else4290:
.annotate 'line', 2023
.annotate 'line', 2024
    find_lex $P5027, "$/"
    $P5028 = $P5027."CURSOR"()
    find_lex $P5029, "$name"
    set $S5003, $P5029
    concat $S5002, "Attribute '", $S5003
    concat $S5001, $S5002, "' not declared"
    $P5030 = $P5028."panic"($S5001)
    set $P5031, $P5030
  if1400_end4291:
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_440_1347804164.33") :anon :lex :outer("cuid_441_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2012
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2013
    $P5001 = _lex_param_0."name"()
    set $S5001, $P5001
    find_lex $P5002, "$name"
    set $S5002, $P5002
    iseq $I5001, $S5001, $S5002
    set $I5002, $I5001
    unless $I5001 goto if1399_end4285 
    store_lex "$attr", _lex_param_0
    die 0, .CONTROL_LOOP_LAST
    set $I5002, 0
  if1399_end4285:
    .return ($I5002) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<module>" :subid("cuid_283_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2039
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4303
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4303:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4304
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4304:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<knowhow>" :subid("cuid_284_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2040
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4305
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4305:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4306
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4306:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<class>" :subid("cuid_285_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2041
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4307
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4307:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4308
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4308:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<grammar>" :subid("cuid_286_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2042
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4309
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4309:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4310
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4310:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<role>" :subid("cuid_287_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2043
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4311
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4311:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4312
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4312:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<native>" :subid("cuid_288_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2044
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4313
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4313:
    set $P5001, _lex_param_1["package_def"]
    unless_null $P5001, fallback4314
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4314:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "package_declarator:sym<stub>" :subid("cuid_289_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2046
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$HOW", $P101 
    .lex "$PACKAGE", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
.annotate 'line', 2049
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4315
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4316
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5007
  fallback4316:
    unless_null $P5004, vivi_14044317
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_14044317:
    set $P5003, $P5004
  fallback4315:
    unless_null _lex_param_1, fallback4318
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5011
  fallback4318:
    set $P5010, _lex_param_1["metaclass"]
    unless_null $P5010, fallback4319
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5012
  fallback4319:
    set $P5009, $P5010["identifier"]
    unless_null $P5009, fallback4320
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5013
  fallback4320:
    $P5014 = $P5003."find_sym"($P5009)
    set $P101, $P5014
.annotate 'line', 2050
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback4321
    nqp_get_sc_object $P5018, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback4322
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5016, $P5019
  fallback4322:
    unless_null $P5016, vivi_14054323
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_14054323:
    set $P5015, $P5016
  fallback4321:
    unless_null _lex_param_1, fallback4324
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5022
  fallback4324:
    set $P5021, _lex_param_1["name"]
    unless_null $P5021, fallback4325
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5021, $P5023
  fallback4325:
    set $S5001, $P5021
    $P5024 = $P5015."pkg_create_mo"($P101, $S5001 :named("name"))
    set $P102, $P5024
    find_dynamic_lex $P5025, "$*SCOPE"
    unless_null $P5025, fallback4330
    nqp_get_sc_object $P5028, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$SCOPE"]
    unless_null $P5026, fallback4331
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5026, $P5029
  fallback4331:
    unless_null $P5026, vivi_14084332
    die "Contextual $*SCOPE not found"
    box $P5030, "Contextual $*SCOPE not found"
    set $P5026, $P5030
  vivi_14084332:
    set $P5025, $P5026
  fallback4330:
    set $S5002, $P5025
    iseq $I5001, $S5002, "our"
    set $I5003, $I5001
    if $I5001 goto unless1407_end4329 
    find_dynamic_lex $P5031, "$*SCOPE"
    unless_null $P5031, fallback4333
    nqp_get_sc_object $P5034, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5033, $P5034
    set $P5032, $P5033["$SCOPE"]
    unless_null $P5032, fallback4334
    nqp_get_sc_object $P5035, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5032, $P5035
  fallback4334:
    unless_null $P5032, vivi_14094335
    die "Contextual $*SCOPE not found"
    box $P5036, "Contextual $*SCOPE not found"
    set $P5032, $P5036
  vivi_14094335:
    set $P5031, $P5032
  fallback4333:
    set $S5003, $P5031
    iseq $I5002, $S5003, ""
    set $I5003, $I5002
  unless1407_end4329:
    unless $I5003 goto if1406_else4326 
.annotate 'line', 2053
.annotate 'line', 2054
    find_dynamic_lex $P5037, "$*W"
    unless_null $P5037, fallback4336
    nqp_get_sc_object $P5040, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5039, $P5040
    set $P5038, $P5039["$W"]
    unless_null $P5038, fallback4337
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5038, $P5041
  fallback4337:
    unless_null $P5038, vivi_14104338
    die "Contextual $*W not found"
    box $P5042, "Contextual $*W not found"
    set $P5038, $P5042
  vivi_14104338:
    set $P5037, $P5038
  fallback4336:
    find_dynamic_lex $P5043, "$*OUTERPACKAGE"
    unless_null $P5043, fallback4339
    nqp_get_sc_object $P5046, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5045, $P5046
    set $P5044, $P5045["$OUTERPACKAGE"]
    unless_null $P5044, fallback4340
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5044, $P5047
  fallback4340:
    unless_null $P5044, vivi_14114341
    die "Contextual $*OUTERPACKAGE not found"
    box $P5048, "Contextual $*OUTERPACKAGE not found"
    set $P5044, $P5048
  vivi_14114341:
    set $P5043, $P5044
  fallback4339:
    unless_null _lex_param_1, fallback4342
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5051
  fallback4342:
    set $P5050, _lex_param_1["name"]
    unless_null $P5050, fallback4343
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5050, $P5052
  fallback4343:
    set $P5049, $P5050["identifier"]
    unless_null $P5049, fallback4344
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5049, $P5053
  fallback4344:
    $P5054 = $P5037."install_package_symbol"($P5043, $P5049, $P102)
    unless_null _lex_param_1, fallback4347
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5057
  fallback4347:
    set $P5056, _lex_param_1["name"]
    unless_null $P5056, fallback4348
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5056, $P5058
  fallback4348:
    set $P5055, $P5056["identifier"]
    unless_null $P5055, fallback4349
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5055, $P5059
  fallback4349:
    set $N5001, $P5055
    set $N5002, 1
    iseq $I5004, $N5001, $N5002
    box $P5082, $I5004
    set $P5081, $P5082
    unless $I5004 goto if1412_end4346 
.annotate 'line', 2055
.annotate 'line', 2056
    find_dynamic_lex $P5060, "$*W"
    unless_null $P5060, fallback4350
    nqp_get_sc_object $P5063, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5062, $P5063
    set $P5061, $P5062["$W"]
    unless_null $P5061, fallback4351
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5061, $P5064
  fallback4351:
    unless_null $P5061, vivi_14134352
    die "Contextual $*W not found"
    box $P5065, "Contextual $*W not found"
    set $P5061, $P5065
  vivi_14134352:
    set $P5060, $P5061
  fallback4350:
    find_dynamic_lex $P5066, "$*W"
    unless_null $P5066, fallback4353
    nqp_get_sc_object $P5069, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["$W"]
    unless_null $P5067, fallback4354
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5067, $P5070
  fallback4354:
    unless_null $P5067, vivi_14144355
    die "Contextual $*W not found"
    box $P5071, "Contextual $*W not found"
    set $P5067, $P5071
  vivi_14144355:
    set $P5066, $P5067
  fallback4353:
    $P5072 = $P5066."cur_lexpad"()
    unless_null _lex_param_1, fallback4356
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5076
  fallback4356:
    set $P5075, _lex_param_1["name"]
    unless_null $P5075, fallback4357
    nqp_get_sc_object $P5077, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5075, $P5077
  fallback4357:
    set $P5074, $P5075["identifier"]
    unless_null $P5074, fallback4358
    nqp_get_sc_object $P5078, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5074, $P5078
  fallback4358:
    set $P5073, $P5074[0]
    unless_null $P5073, fallback4359
    nqp_get_sc_object $P5079, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5073, $P5079
  fallback4359:
    $P5080 = $P5060."install_lexical_symbol"($P5072, $P5073, $P102)
    set $P5081, $P5080
  if1412_end4346:
    set $P5131, $P5081
    goto if1406_end4327
  if1406_else4326:
    find_dynamic_lex $P5083, "$*SCOPE"
    unless_null $P5083, fallback4362
    nqp_get_sc_object $P5086, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5085, $P5086
    set $P5084, $P5085["$SCOPE"]
    unless_null $P5084, fallback4363
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5084, $P5087
  fallback4363:
    unless_null $P5084, vivi_14164364
    die "Contextual $*SCOPE not found"
    box $P5088, "Contextual $*SCOPE not found"
    set $P5084, $P5088
  vivi_14164364:
    set $P5083, $P5084
  fallback4362:
    set $S5004, $P5083
    iseq $I5005, $S5004, "my"
    unless $I5005 goto if1415_else4360 
.annotate 'line', 2059
    unless_null _lex_param_1, fallback4367
    nqp_get_sc_object $P5091, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5091
  fallback4367:
    set $P5090, _lex_param_1["name"]
    unless_null $P5090, fallback4368
    nqp_get_sc_object $P5092, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5090, $P5092
  fallback4368:
    set $P5089, $P5090["identifier"]
    unless_null $P5089, fallback4369
    nqp_get_sc_object $P5093, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5089, $P5093
  fallback4369:
    set $N5003, $P5089
    set $N5004, 1
    isne $I5006, $N5003, $N5004
    box $P5100, $I5006
    set $P5099, $P5100
    unless $I5006 goto if1417_end4366 
.annotate 'line', 2060
.annotate 'line', 2061
    unless_null _lex_param_1, fallback4370
    nqp_get_sc_object $P5095, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5095
  fallback4370:
    set $P5094, _lex_param_1["name"]
    unless_null $P5094, fallback4371
    nqp_get_sc_object $P5096, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5094, $P5096
  fallback4371:
    $P5097 = $P5094."CURSOR"()
    $P5098 = $P5097."panic"("A my scoped package cannot have a multi-part name yet")
    set $P5099, $P5098
  if1417_end4366:
.annotate 'line', 2063
    find_dynamic_lex $P5101, "$*W"
    unless_null $P5101, fallback4372
    nqp_get_sc_object $P5104, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5103, $P5104
    set $P5102, $P5103["$W"]
    unless_null $P5102, fallback4373
    nqp_get_sc_object $P5105, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5102, $P5105
  fallback4373:
    unless_null $P5102, vivi_14184374
    die "Contextual $*W not found"
    box $P5106, "Contextual $*W not found"
    set $P5102, $P5106
  vivi_14184374:
    set $P5101, $P5102
  fallback4372:
    find_dynamic_lex $P5107, "$*W"
    unless_null $P5107, fallback4375
    nqp_get_sc_object $P5110, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5109, $P5110
    set $P5108, $P5109["$W"]
    unless_null $P5108, fallback4376
    nqp_get_sc_object $P5111, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5108, $P5111
  fallback4376:
    unless_null $P5108, vivi_14194377
    die "Contextual $*W not found"
    box $P5112, "Contextual $*W not found"
    set $P5108, $P5112
  vivi_14194377:
    set $P5107, $P5108
  fallback4375:
    $P5113 = $P5107."cur_lexpad"()
    unless_null _lex_param_1, fallback4378
    nqp_get_sc_object $P5117, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5117
  fallback4378:
    set $P5116, _lex_param_1["name"]
    unless_null $P5116, fallback4379
    nqp_get_sc_object $P5118, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5116, $P5118
  fallback4379:
    set $P5115, $P5116["identifier"]
    unless_null $P5115, fallback4380
    nqp_get_sc_object $P5119, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5115, $P5119
  fallback4380:
    set $P5114, $P5115[0]
    unless_null $P5114, fallback4381
    nqp_get_sc_object $P5120, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5114, $P5120
  fallback4381:
    $P5121 = $P5101."install_lexical_symbol"($P5113, $P5114, $P102)
    set $P5130, $P5121
    goto if1415_end4361
  if1415_else4360:
.annotate 'line', 2065
.annotate 'line', 2066
    $P5122 = _lex_param_1."CURSOR"()
    find_dynamic_lex $P5123, "$*SCOPE"
    unless_null $P5123, fallback4382
    nqp_get_sc_object $P5126, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5125, $P5126
    set $P5124, $P5125["$SCOPE"]
    unless_null $P5124, fallback4383
    nqp_get_sc_object $P5127, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5124, $P5127
  fallback4383:
    unless_null $P5124, vivi_14204384
    die "Contextual $*SCOPE not found"
    box $P5128, "Contextual $*SCOPE not found"
    set $P5124, $P5128
  vivi_14204384:
    set $P5123, $P5124
  fallback4382:
    set $S5006, $P5123
    concat $S5005, $S5006, " scoped packages are not supported"
    $P5129 = $P5122."panic"($S5005)
    set $P5130, $P5129
  if1415_end4361:
    set $P5131, $P5130
  if1406_end4327:
.annotate 'line', 2069
    nqp_get_sc_object $P5135, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5134, $P5135, "QAST"
    get_who $P5133, $P5134
    set $P5132, $P5133["Stmts"]
    unless_null $P5132, fallback4385
    nqp_get_sc_object $P5136, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5132, $P5136
  fallback4385:
    $P5137 = $P5132."new"()
    $P5138 = _lex_param_1."!make"($P5137)
    .return ($P5138) 
.end
.HLL "nqp"
.namespace []
.sub "package_def" :subid("cuid_290_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2072
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5176 = 'cuid_443_1347804164.33' 
    capture_lex $P5176 
    .const 'Sub' $P5176 = 'cuid_444_1347804164.33' 
    capture_lex $P5176 
    .const 'Sub' $P5176 = 'cuid_445_1347804164.33' 
    capture_lex $P5176 
    .lex "@ns", $P101 
    .lex "$name", $P102 
    .lex "$how", $P103 
    .lex "$past", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P104, $P5004
    unless_null _lex_param_1, fallback4386
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5008
  fallback4386:
    set $P5007, _lex_param_1["name"]
    unless_null $P5007, fallback4387
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5009
  fallback4387:
    set $P5006, $P5007["identifier"]
    unless_null $P5006, fallback4388
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5010
  fallback4388:
    clone $P5005, $P5006
    set $P101, $P5005
.annotate 'line', 2075
    $P5011 = $P101."pop"()
    set $S5001, $P5011
    box $P5012, $S5001
    set $P102, $P5012
    find_dynamic_lex $P5014, "%*HOW"
    unless_null $P5014, fallback4389
    nqp_get_sc_object $P5017, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["%HOW"]
    unless_null $P5015, fallback4390
    nqp_get_sc_object $P5019, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5018, $P5019
    new $P5020, 'Hash'
    set $P5018["%HOW"], $P5020
    set $P5015, $P5020
  fallback4390:
    unless_null $P5015, vivi_14214391
    die "Contextual %*HOW not found"
    box $P5021, "Contextual %*HOW not found"
    set $P5015, $P5021
  vivi_14214391:
    set $P5014, $P5015
  fallback4389:
    find_dynamic_lex $P5022, "$*PKGDECL"
    unless_null $P5022, fallback4392
    nqp_get_sc_object $P5025, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PKGDECL"]
    unless_null $P5023, fallback4393
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5023, $P5026
  fallback4393:
    unless_null $P5023, vivi_14224394
    die "Contextual $*PKGDECL not found"
    box $P5027, "Contextual $*PKGDECL not found"
    set $P5023, $P5027
  vivi_14224394:
    set $P5022, $P5023
  fallback4392:
    set $S5002, $P5022
    set $P5013, $P5014[$S5002]
    unless_null $P5013, fallback4395
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5013, $P5028
  fallback4395:
    set $P103, $P5013
    unless_null _lex_param_1, fallback4398
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5030
  fallback4398:
    set $P5029, _lex_param_1["block"]
    unless_null $P5029, fallback4399
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5029, $P5031
  fallback4399:
    unless $P5029 goto if1423_else4396 
.annotate 'line', 2079
    unless_null _lex_param_1, fallback4400
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5033
  fallback4400:
    set $P5032, _lex_param_1["block"]
    unless_null $P5032, fallback4401
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5032, $P5034
  fallback4401:
    $P5035 = $P5032."ast"()
    set $P5040, $P5035
    goto if1423_end4397
  if1423_else4396:
    unless_null _lex_param_1, fallback4402
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5037
  fallback4402:
    set $P5036, _lex_param_1["comp_unit"]
    unless_null $P5036, fallback4403
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5036, $P5038
  fallback4403:
    $P5039 = $P5036."ast"()
    set $P5040, $P5039
  if1423_end4397:
    set $P104, $P5040
    can $I5001, $P103, "parametric"
    box $P5043, $I5001
    set $P5042, $P5043
    unless $I5001 goto if1425_end4407 
.annotate 'line', 2085
    $P5041 = $P103."parametric"($P103)
    set $P5042, $P5041
  if1425_end4407:
    unless $P5042 goto if1424_else4404 
.annotate 'line', 2086
    $P5044 = $P104."blocktype"("declaration")
.annotate 'line', 2087
    nqp_get_sc_object $P5048, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["Var"]
    unless_null $P5045, fallback4408
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5045, $P5049
  fallback4408:
    $P5050 = $P5045."new"("$?CLASS" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5051 = $P104."unshift"($P5050)
.annotate 'line', 2089
    $P5052 = $P104."symbol"("$?CLASS", "lexical" :named("scope"))
.annotate 'line', 2090
    find_dynamic_lex $P5053, "$*W"
    unless_null $P5053, fallback4409
    nqp_get_sc_object $P5056, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5055, $P5056
    set $P5054, $P5055["$W"]
    unless_null $P5054, fallback4410
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5054, $P5057
  fallback4410:
    unless_null $P5054, vivi_14264411
    die "Contextual $*W not found"
    box $P5058, "Contextual $*W not found"
    set $P5054, $P5058
  vivi_14264411:
    set $P5053, $P5054
  fallback4409:
    find_dynamic_lex $P5059, "$*PACKAGE"
    unless_null $P5059, fallback4412
    nqp_get_sc_object $P5062, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5061, $P5062
    set $P5060, $P5061["$PACKAGE"]
    unless_null $P5060, fallback4413
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5060, $P5063
  fallback4413:
    unless_null $P5060, vivi_14274414
    die "Contextual $*PACKAGE not found"
    box $P5064, "Contextual $*PACKAGE not found"
    set $P5060, $P5064
  vivi_14274414:
    set $P5059, $P5060
  fallback4412:
    $P5065 = $P5053."pkg_set_body_block"($P5059, $P104)
.annotate 'line', 2091
    find_dynamic_lex $P5066, "$*W"
    unless_null $P5066, fallback4415
    nqp_get_sc_object $P5069, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5068, $P5069
    set $P5067, $P5068["$W"]
    unless_null $P5067, fallback4416
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5067, $P5070
  fallback4416:
    unless_null $P5067, vivi_14284417
    die "Contextual $*W not found"
    box $P5071, "Contextual $*W not found"
    set $P5067, $P5071
  vivi_14284417:
    set $P5066, $P5067
  fallback4415:
    find_dynamic_lex $P5072, "$*PACKAGE"
    unless_null $P5072, fallback4418
    nqp_get_sc_object $P5075, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5074, $P5075
    set $P5073, $P5074["$PACKAGE"]
    unless_null $P5073, fallback4419
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5073, $P5076
  fallback4419:
    unless_null $P5073, vivi_14294420
    die "Contextual $*PACKAGE not found"
    box $P5077, "Contextual $*PACKAGE not found"
    set $P5073, $P5077
  vivi_14294420:
    set $P5072, $P5073
  fallback4418:
    $P5078 = $P5066."install_lexical_symbol"($P104, "$?PACKAGE", $P5072)
.annotate 'line', 2092
    find_dynamic_lex $P5079, "$*W"
    unless_null $P5079, fallback4421
    nqp_get_sc_object $P5082, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5081, $P5082
    set $P5080, $P5081["$W"]
    unless_null $P5080, fallback4422
    nqp_get_sc_object $P5083, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5080, $P5083
  fallback4422:
    unless_null $P5080, vivi_14304423
    die "Contextual $*W not found"
    box $P5084, "Contextual $*W not found"
    set $P5080, $P5084
  vivi_14304423:
    set $P5079, $P5080
  fallback4421:
    find_dynamic_lex $P5085, "$*PACKAGE"
    unless_null $P5085, fallback4424
    nqp_get_sc_object $P5088, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5087, $P5088
    set $P5086, $P5087["$PACKAGE"]
    unless_null $P5086, fallback4425
    nqp_get_sc_object $P5089, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5086, $P5089
  fallback4425:
    unless_null $P5086, vivi_14314426
    die "Contextual $*PACKAGE not found"
    box $P5090, "Contextual $*PACKAGE not found"
    set $P5086, $P5090
  vivi_14314426:
    set $P5085, $P5086
  fallback4424:
    $P5091 = $P5079."install_lexical_symbol"($P104, "$?ROLE", $P5085)
    set $P5119, $P5091
    goto if1424_end4405
  if1424_else4404:
.annotate 'line', 2094
.annotate 'line', 2095
    $P5092 = $P104."blocktype"("immediate")
.annotate 'line', 2096
    find_dynamic_lex $P5093, "$*W"
    unless_null $P5093, fallback4427
    nqp_get_sc_object $P5096, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5095, $P5096
    set $P5094, $P5095["$W"]
    unless_null $P5094, fallback4428
    nqp_get_sc_object $P5097, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5094, $P5097
  fallback4428:
    unless_null $P5094, vivi_14324429
    die "Contextual $*W not found"
    box $P5098, "Contextual $*W not found"
    set $P5094, $P5098
  vivi_14324429:
    set $P5093, $P5094
  fallback4427:
    find_dynamic_lex $P5099, "$*PACKAGE"
    unless_null $P5099, fallback4430
    nqp_get_sc_object $P5102, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5101, $P5102
    set $P5100, $P5101["$PACKAGE"]
    unless_null $P5100, fallback4431
    nqp_get_sc_object $P5103, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5100, $P5103
  fallback4431:
    unless_null $P5100, vivi_14334432
    die "Contextual $*PACKAGE not found"
    box $P5104, "Contextual $*PACKAGE not found"
    set $P5100, $P5104
  vivi_14334432:
    set $P5099, $P5100
  fallback4430:
    $P5105 = $P5093."install_lexical_symbol"($P104, "$?PACKAGE", $P5099)
.annotate 'line', 2097
    find_dynamic_lex $P5106, "$*W"
    unless_null $P5106, fallback4433
    nqp_get_sc_object $P5109, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5108, $P5109
    set $P5107, $P5108["$W"]
    unless_null $P5107, fallback4434
    nqp_get_sc_object $P5110, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5107, $P5110
  fallback4434:
    unless_null $P5107, vivi_14344435
    die "Contextual $*W not found"
    box $P5111, "Contextual $*W not found"
    set $P5107, $P5111
  vivi_14344435:
    set $P5106, $P5107
  fallback4433:
    find_dynamic_lex $P5112, "$*PACKAGE"
    unless_null $P5112, fallback4436
    nqp_get_sc_object $P5115, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5114, $P5115
    set $P5113, $P5114["$PACKAGE"]
    unless_null $P5113, fallback4437
    nqp_get_sc_object $P5116, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5113, $P5116
  fallback4437:
    unless_null $P5113, vivi_14354438
    die "Contextual $*PACKAGE not found"
    box $P5117, "Contextual $*PACKAGE not found"
    set $P5113, $P5117
  vivi_14354438:
    set $P5112, $P5113
  fallback4436:
    $P5118 = $P5106."install_lexical_symbol"($P104, "$?CLASS", $P5112)
    set $P5119, $P5118
  if1424_end4405:
    unless_null _lex_param_1, fallback4441
    nqp_get_sc_object $P5121, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5121
  fallback4441:
    set $P5120, _lex_param_1["parent"]
    unless_null $P5120, fallback4442
    nqp_get_sc_object $P5122, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5120, $P5122
  fallback4442:
    unless $P5120 goto if1436_else4439 
    .const 'Sub' $P5123 = 'cuid_443_1347804164.33' 
    capture_lex $P5123
    $P5124 = $P5123()
    set $P5129, $P5124
    goto if1436_end4440
  if1436_else4439:
    can $I5002, $P103, "set_default_parent"
    box $P5128, $I5002
    set $P5127, $P5128
    unless $I5002 goto if1443_end4464 
    .const 'Sub' $P5125 = 'cuid_444_1347804164.33' 
    capture_lex $P5125
    $P5126 = $P5125()
    set $P5127, $P5126
  if1443_end4464:
    set $P5129, $P5127
  if1436_end4440:
    unless_null _lex_param_1, fallback4481
    nqp_get_sc_object $P5131, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5131
  fallback4481:
    set $P5130, _lex_param_1["role"]
    unless_null $P5130, fallback4482
    nqp_get_sc_object $P5132, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5130, $P5132
  fallback4482:
    set $P5141, $P5130
    unless $P5130 goto if1449_end4480 
.annotate 'line', 2122
    unless_null _lex_param_1, fallback4483
    nqp_get_sc_object $P5137, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5137
  fallback4483:
    set $P5136, _lex_param_1["role"]
    unless_null $P5136, fallback4484
    nqp_get_sc_object $P5138, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5136, $P5138
  fallback4484:
    set $P5133, $P5136
    iter $P5135, $P5136
  for_next4499:
    unless $P5135, for_done4501
    shift $P5140, $P5135
  for_redo4500:
    .const 'Sub' $P5139 = 'cuid_445_1347804164.33' 
    capture_lex $P5139
    $P5133 = $P5139($P5140)
    goto for_next4499
  for_done4501:
    set $P5141, $P5133
  if1449_end4480:
.annotate 'line', 2140
    find_dynamic_lex $P5142, "$*W"
    unless_null $P5142, fallback4502
    nqp_get_sc_object $P5145, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5144, $P5145
    set $P5143, $P5144["$W"]
    unless_null $P5143, fallback4503
    nqp_get_sc_object $P5146, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5143, $P5146
  fallback4503:
    unless_null $P5143, vivi_14564504
    die "Contextual $*W not found"
    box $P5147, "Contextual $*W not found"
    set $P5143, $P5147
  vivi_14564504:
    set $P5142, $P5143
  fallback4502:
    find_dynamic_lex $P5148, "$*PACKAGE"
    unless_null $P5148, fallback4505
    nqp_get_sc_object $P5151, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5150, $P5151
    set $P5149, $P5150["$PACKAGE"]
    unless_null $P5149, fallback4506
    nqp_get_sc_object $P5152, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5149, $P5152
  fallback4506:
    unless_null $P5149, vivi_14574507
    die "Contextual $*PACKAGE not found"
    box $P5153, "Contextual $*PACKAGE not found"
    set $P5149, $P5153
  vivi_14574507:
    set $P5148, $P5149
  fallback4505:
    $P5154 = $P5142."pkg_compose"($P5148)
    unless_null _lex_param_1, fallback4510
    nqp_get_sc_object $P5156, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5156
  fallback4510:
    set $P5155, _lex_param_1["export"]
    unless_null $P5155, fallback4511
    nqp_get_sc_object $P5157, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5155, $P5157
  fallback4511:
    set $P5174, $P5155
    unless $P5155 goto if1458_end4509 
.annotate 'line', 2143
    find_dynamic_lex $P5161, "$*EXPORT"
    unless_null $P5161, fallback4512
    nqp_get_sc_object $P5164, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5163, $P5164
    set $P5162, $P5163["$EXPORT"]
    unless_null $P5162, fallback4513
    nqp_get_sc_object $P5165, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5162, $P5165
  fallback4513:
    unless_null $P5162, vivi_14594514
    die "Contextual $*EXPORT not found"
    box $P5166, "Contextual $*EXPORT not found"
    set $P5162, $P5166
  vivi_14594514:
    set $P5161, $P5162
  fallback4512:
    get_who $P5160, $P5161
    set $P5159, $P5160["DEFAULT"]
    unless_null $P5159, fallback4515
    nqp_get_sc_object $P5167, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5159, $P5167
  fallback4515:
    get_who $P5158, $P5159
    set $S5003, $P102
    find_dynamic_lex $P5168, "$*PACKAGE"
    unless_null $P5168, fallback4516
    nqp_get_sc_object $P5171, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5170, $P5171
    set $P5169, $P5170["$PACKAGE"]
    unless_null $P5169, fallback4517
    nqp_get_sc_object $P5172, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5169, $P5172
  fallback4517:
    unless_null $P5169, vivi_14604518
    die "Contextual $*PACKAGE not found"
    box $P5173, "Contextual $*PACKAGE not found"
    set $P5169, $P5173
  vivi_14604518:
    set $P5168, $P5169
  fallback4516:
    set $P5158[$S5003], $P5168
    set $P5174, $P5168
  if1458_end4509:
.annotate 'line', 2147
    $P5175 = _lex_param_1."!make"($P104)
    .return ($P5175) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_443_1347804164.33") :anon :lex :outer("cuid_290_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2101
    .lex "$parent", $P101 
    .lex "$parent_found", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    new $P5020, 'ExceptionHandler'
    set_label $P5020, catch_handler_14394451
    $P5020.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5020
.annotate 'line', 2104
.annotate 'line', 2105
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4443
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4444
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5007
  fallback4444:
    unless_null $P5004, vivi_14374445
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_14374445:
    set $P5003, $P5004
  fallback4443:
    find_lex $P5013, "$/"
    unless_null $P5013, fallback4446
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5013, $P5014
  fallback4446:
    set $P5012, $P5013["parent"]
    unless_null $P5012, fallback4447
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5012, $P5015
  fallback4447:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback4448
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5016
  fallback4448:
    set $P5010, $P5011["identifier"]
    unless_null $P5010, fallback4449
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5017
  fallback4449:
    clone $P5009, $P5010
    $P5018 = $P5003."find_sym"($P5009)
    set $P101, $P5018
    box $P5019, 1
    set $P102, $P5019
    set $P5021, $P102
    pop_eh 
    goto skip_handler_14384450
  catch_handler_14394451:
    .get_results ($P5020) 
    set $I10001, 1
    set $P5020["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    finalize $P5020
    pop_upto_eh $P5020
    pop_eh 
    set $P5021, $P10001
    goto skip_handler_14384450
  skip_handler_14384450:
    unless $P102 goto if1440_else4452 
.annotate 'line', 2108
.annotate 'line', 2109
    find_dynamic_lex $P5022, "$*W"
    unless_null $P5022, fallback4454
    nqp_get_sc_object $P5025, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$W"]
    unless_null $P5023, fallback4455
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5023, $P5026
  fallback4455:
    unless_null $P5023, vivi_14414456
    die "Contextual $*W not found"
    box $P5027, "Contextual $*W not found"
    set $P5023, $P5027
  vivi_14414456:
    set $P5022, $P5023
  fallback4454:
    find_dynamic_lex $P5028, "$*PACKAGE"
    unless_null $P5028, fallback4457
    nqp_get_sc_object $P5031, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["$PACKAGE"]
    unless_null $P5029, fallback4458
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5029, $P5032
  fallback4458:
    unless_null $P5029, vivi_14424459
    die "Contextual $*PACKAGE not found"
    box $P5033, "Contextual $*PACKAGE not found"
    set $P5029, $P5033
  vivi_14424459:
    set $P5028, $P5029
  fallback4457:
    $P5034 = $P5022."pkg_add_parent_or_role"($P5028, "add_parent", $P101)
    set $P5044, $P5034
    goto if1440_end4453
  if1440_else4452:
.annotate 'line', 2111
.annotate 'line', 2112
    find_lex $P5035, "$/"
    $P5036 = $P5035."CURSOR"()
    find_lex $P5039, "$/"
    unless_null $P5039, fallback4460
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5039, $P5040
  fallback4460:
    set $P5038, $P5039["parent"]
    unless_null $P5038, fallback4461
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5038, $P5041
  fallback4461:
    set $P5037, $P5038[0]
    unless_null $P5037, fallback4462
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5037, $P5042
  fallback4462:
    set $S5003, $P5037
    concat $S5002, "Could not find parent class '", $S5003
    concat $S5001, $S5002, "'"
    $P5043 = $P5036."panic"($S5001)
    set $P5044, $P5043
  if1440_end4453:
    .return ($P5044) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_444_1347804164.33") :anon :lex :outer("cuid_290_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2115
    .lex "$default", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    find_dynamic_lex $P5002, "$*PKGDECL"
    unless_null $P5002, fallback4467
    nqp_get_sc_object $P5005, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$PKGDECL"]
    unless_null $P5003, fallback4468
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5006
  fallback4468:
    unless_null $P5003, vivi_14454469
    die "Contextual $*PKGDECL not found"
    box $P5007, "Contextual $*PKGDECL not found"
    set $P5003, $P5007
  vivi_14454469:
    set $P5002, $P5003
  fallback4467:
    set $S5001, $P5002
    iseq $I5001, $S5001, "grammar"
    unless $I5001 goto if1444_else4465 
    new $P5008, 'ResizablePMCArray'
    box $P5009, "NQPCursor"
    push $P5008, $P5009
    set $P5012, $P5008
    goto if1444_end4466
  if1444_else4465:
    new $P5010, 'ResizablePMCArray'
    box $P5011, "NQPMu"
    push $P5010, $P5011
    set $P5012, $P5010
  if1444_end4466:
    set $P101, $P5012
.annotate 'line', 2117
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback4470
    nqp_get_sc_object $P5016, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback4471
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5014, $P5017
  fallback4471:
    unless_null $P5014, vivi_14464472
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_14464472:
    set $P5013, $P5014
  fallback4470:
    find_dynamic_lex $P5019, "$*PACKAGE"
    unless_null $P5019, fallback4473
    nqp_get_sc_object $P5022, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$PACKAGE"]
    unless_null $P5020, fallback4474
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5020, $P5023
  fallback4474:
    unless_null $P5020, vivi_14474475
    die "Contextual $*PACKAGE not found"
    box $P5024, "Contextual $*PACKAGE not found"
    set $P5020, $P5024
  vivi_14474475:
    set $P5019, $P5020
  fallback4473:
.annotate 'line', 2118
    find_dynamic_lex $P5025, "$*W"
    unless_null $P5025, fallback4476
    nqp_get_sc_object $P5028, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5027, $P5028
    set $P5026, $P5027["$W"]
    unless_null $P5026, fallback4477
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5026, $P5029
  fallback4477:
    unless_null $P5026, vivi_14484478
    die "Contextual $*W not found"
    box $P5030, "Contextual $*W not found"
    set $P5026, $P5030
  vivi_14484478:
    set $P5025, $P5026
  fallback4476:
    $P5031 = $P5025."find_sym"($P101)
    $P5032 = $P5013."pkg_add_parent_or_role"($P5019, "set_default_parent", $P5031)
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_445_1347804164.33") :anon :lex :outer("cuid_290_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2123
    .param pmc _lex_param_0 
    .lex "$role", $P101 
    .lex "$role_found", $P102 
    .lex "$_", _lex_param_0 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    new $P5014, 'ExceptionHandler'
    set_label $P5014, catch_handler_14524490
    $P5014.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5014
.annotate 'line', 2126
.annotate 'line', 2127
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4485
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4486
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5007
  fallback4486:
    unless_null $P5004, vivi_14504487
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_14504487:
    set $P5003, $P5004
  fallback4485:
    set $P5010, _lex_param_0["identifier"]
    unless_null $P5010, fallback4488
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5011
  fallback4488:
    clone $P5009, $P5010
    $P5012 = $P5003."find_sym"($P5009)
    set $P101, $P5012
    box $P5013, 1
    set $P102, $P5013
    set $P5015, $P102
    pop_eh 
    goto skip_handler_14514489
  catch_handler_14524490:
    .get_results ($P5014) 
    set $I10001, 1
    set $P5014["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    finalize $P5014
    pop_upto_eh $P5014
    pop_eh 
    set $P5015, $P10001
    goto skip_handler_14514489
  skip_handler_14514489:
    unless $P102 goto if1453_else4491 
.annotate 'line', 2130
.annotate 'line', 2131
    find_dynamic_lex $P5016, "$*W"
    unless_null $P5016, fallback4493
    nqp_get_sc_object $P5019, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5018, $P5019
    set $P5017, $P5018["$W"]
    unless_null $P5017, fallback4494
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5017, $P5020
  fallback4494:
    unless_null $P5017, vivi_14544495
    die "Contextual $*W not found"
    box $P5021, "Contextual $*W not found"
    set $P5017, $P5021
  vivi_14544495:
    set $P5016, $P5017
  fallback4493:
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback4496
    nqp_get_sc_object $P5025, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback4497
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5023, $P5026
  fallback4497:
    unless_null $P5023, vivi_14554498
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_14554498:
    set $P5022, $P5023
  fallback4496:
    $P5028 = $P5016."pkg_add_parent_or_role"($P5022, "add_role", $P101)
    set $P5032, $P5028
    goto if1453_end4492
  if1453_else4491:
.annotate 'line', 2133
.annotate 'line', 2134
    find_lex $P5029, "$/"
    $P5030 = $P5029."CURSOR"()
    set $S5003, _lex_param_0
    concat $S5002, "Could not find role '", $S5003
    concat $S5001, $S5002, "'"
    $P5031 = $P5030."panic"($S5001)
    set $P5032, $P5031
  if1453_end4492:
    .return ($P5032) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<my>" :subid("cuid_291_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2150
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4519
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4519:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4520
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4520:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<our>" :subid("cuid_292_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2151
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4521
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4521:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4522
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4522:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scope_declarator:sym<has>" :subid("cuid_293_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2152
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4523
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4523:
    set $P5001, _lex_param_1["scoped"]
    unless_null $P5001, fallback4524
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4524:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "scoped" :subid("cuid_294_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2154
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2155
    unless_null _lex_param_1, fallback4527
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4527:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4528
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4528:
    unless $P5001 goto if1461_else4525 
    unless_null _lex_param_1, fallback4529
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5005
  fallback4529:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4530
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5006
  fallback4530:
    $P5007 = $P5004."ast"()
    set $P5020, $P5007
    goto if1461_end4526
  if1461_else4525:
    unless_null _lex_param_1, fallback4533
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5009
  fallback4533:
    set $P5008, _lex_param_1["multi_declarator"]
    unless_null $P5008, fallback4534
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5010
  fallback4534:
    unless $P5008 goto if1462_else4531 
.annotate 'line', 2156
    unless_null _lex_param_1, fallback4535
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5012
  fallback4535:
    set $P5011, _lex_param_1["multi_declarator"]
    unless_null $P5011, fallback4536
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5013
  fallback4536:
    $P5014 = $P5011."ast"()
    set $P5019, $P5014
    goto if1462_end4532
  if1462_else4531:
.annotate 'line', 2157
    unless_null _lex_param_1, fallback4537
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5016
  fallback4537:
    set $P5015, _lex_param_1["package_declarator"]
    unless_null $P5015, fallback4538
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5015, $P5017
  fallback4538:
    $P5018 = $P5015."ast"()
    set $P5019, $P5018
  if1462_end4532:
    set $P5020, $P5019
  if1461_end4526:
    $P5021 = _lex_param_1."!make"($P5020)
    .return ($P5021) 
.end
.HLL "nqp"
.namespace []
.sub "declarator" :subid("cuid_295_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2160
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2161
    unless_null _lex_param_1, fallback4541
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4541:
    set $P5001, _lex_param_1["routine_declarator"]
    unless_null $P5001, fallback4542
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4542:
    unless $P5001 goto if1463_else4539 
.annotate 'line', 2162
    unless_null _lex_param_1, fallback4543
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5005
  fallback4543:
    set $P5004, _lex_param_1["routine_declarator"]
    unless_null $P5004, fallback4544
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5006
  fallback4544:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1463_end4540
  if1463_else4539:
.annotate 'line', 2163
    unless_null _lex_param_1, fallback4545
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5009
  fallback4545:
    set $P5008, _lex_param_1["variable_declarator"]
    unless_null $P5008, fallback4546
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5010
  fallback4546:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1463_end4540:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<multi>" :subid("cuid_296_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2166
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4549
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4549:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4550
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4550:
    unless $P5001 goto if1464_else4547 
    unless_null _lex_param_1, fallback4551
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5005
  fallback4551:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4552
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5006
  fallback4552:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1464_end4548
  if1464_else4547:
    unless_null _lex_param_1, fallback4553
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5009
  fallback4553:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4554
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5010
  fallback4554:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1464_end4548:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<proto>" :subid("cuid_297_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2167
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4557
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4557:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4558
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4558:
    unless $P5001 goto if1465_else4555 
    unless_null _lex_param_1, fallback4559
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5005
  fallback4559:
    set $P5004, _lex_param_1["declarator"]
    unless_null $P5004, fallback4560
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5006
  fallback4560:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1465_end4556
  if1465_else4555:
    unless_null _lex_param_1, fallback4561
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5009
  fallback4561:
    set $P5008, _lex_param_1["routine_def"]
    unless_null $P5008, fallback4562
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5010
  fallback4562:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1465_end4556:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "multi_declarator:sym<null>" :subid("cuid_298_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2168
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4563
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4563:
    set $P5001, _lex_param_1["declarator"]
    unless_null $P5001, fallback4564
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4564:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "variable_declarator" :subid("cuid_299_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2171
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5071 = 'cuid_446_1347804164.33' 
    capture_lex $P5071 
    .const 'Sub' $P5071 = 'cuid_448_1347804164.33' 
    capture_lex $P5071 
    .const 'Sub' $P5071 = 'cuid_449_1347804164.33' 
    capture_lex $P5071 
    .lex "$past", $P101 
    .lex "$sigil", $P102 
    .lex "$name", $P103 
    .lex "$BLOCK", $P104 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P104, $P5004
.annotate 'line', 2172
    unless_null _lex_param_1, fallback4565
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5006
  fallback4565:
    set $P5005, _lex_param_1["variable"]
    unless_null $P5005, fallback4566
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5005, $P5007
  fallback4566:
    $P5008 = $P5005."ast"()
    set $P101, $P5008
    unless_null _lex_param_1, fallback4567
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5011
  fallback4567:
    set $P5010, _lex_param_1["variable"]
    unless_null $P5010, fallback4568
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5012
  fallback4568:
    set $P5009, $P5010["sigil"]
    unless_null $P5009, fallback4569
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5013
  fallback4569:
    set $P102, $P5009
.annotate 'line', 2174
    $P5014 = $P101."name"()
    set $P103, $P5014
.annotate 'line', 2175
    find_dynamic_lex $P5015, "$*W"
    unless_null $P5015, fallback4570
    nqp_get_sc_object $P5018, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["$W"]
    unless_null $P5016, fallback4571
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5016, $P5019
  fallback4571:
    unless_null $P5016, vivi_14664572
    die "Contextual $*W not found"
    box $P5020, "Contextual $*W not found"
    set $P5016, $P5020
  vivi_14664572:
    set $P5015, $P5016
  fallback4570:
    $P5021 = $P5015."cur_lexpad"()
    set $P104, $P5021
    set $P5023, $P103
    unless $P103 goto if1468_end4576 
.annotate 'line', 2176
    $P5022 = $P104."symbol"($P103)
    set $P5023, $P5022
  if1468_end4576:
    set $P5026, $P5023
    unless $P5023 goto if1467_end4574 
.annotate 'line', 2177
    $P5024 = _lex_param_1."CURSOR"()
    $P5025 = $P5024."panic"("Redeclaration of symbol ", $P103)
    set $P5026, $P5025
  if1467_end4574:
    find_dynamic_lex $P5027, "$*SCOPE"
    unless_null $P5027, fallback4579
    nqp_get_sc_object $P5030, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5029, $P5030
    set $P5028, $P5029["$SCOPE"]
    unless_null $P5028, fallback4580
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5028, $P5031
  fallback4580:
    unless_null $P5028, vivi_14704581
    die "Contextual $*SCOPE not found"
    box $P5032, "Contextual $*SCOPE not found"
    set $P5028, $P5032
  vivi_14704581:
    set $P5027, $P5028
  fallback4579:
    set $S5001, $P5027
    iseq $I5001, $S5001, "has"
    unless $I5001 goto if1469_else4577 
    .const 'Sub' $P5033 = 'cuid_446_1347804164.33' 
    capture_lex $P5033
    $P5034 = $P5033()
    set $P5057, $P5034
    goto if1469_end4578
  if1469_else4577:
    find_dynamic_lex $P5035, "$*SCOPE"
    unless_null $P5035, fallback4633
    nqp_get_sc_object $P5038, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5037, $P5038
    set $P5036, $P5037["$SCOPE"]
    unless_null $P5036, fallback4634
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5036, $P5039
  fallback4634:
    unless_null $P5036, vivi_14884635
    die "Contextual $*SCOPE not found"
    box $P5040, "Contextual $*SCOPE not found"
    set $P5036, $P5040
  vivi_14884635:
    set $P5035, $P5036
  fallback4633:
    set $S5002, $P5035
    iseq $I5002, $S5002, "our"
    unless $I5002 goto if1487_else4631 
.annotate 'line', 2207
    unless_null _lex_param_1, fallback4638
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5042
  fallback4638:
    set $P5041, _lex_param_1["typename"]
    unless_null $P5041, fallback4639
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5041, $P5043
  fallback4639:
    set $P5046, $P5041
    unless $P5041 goto if1489_end4637 
.annotate 'line', 2211
.annotate 'line', 2212
    $P5044 = _lex_param_1."CURSOR"()
    $P5045 = $P5044."panic"("Cannot put types on our-scoped variables")
    set $P5046, $P5045
  if1489_end4637:
    unless_null _lex_param_1, fallback4640
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5048
  fallback4640:
    set $P5047, _lex_param_1["variable"]
    unless_null $P5047, fallback4641
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5047, $P5049
  fallback4641:
    set $S5003, $P5047
    box $P5050, $S5003
    set $P103, $P5050
.annotate 'line', 2215
    new $P5051, 'ResizablePMCArray'
    push $P5051, $P103
    $P5052 = "&lexical_package_lookup"($P5051, _lex_param_1)
    set $P101, $P5052
.annotate 'line', 2216
    $P5053 = $P104."symbol"($P103, "package" :named("scope"))
    set $P5056, $P5053
    goto if1487_end4632
  if1487_else4631:
    .const 'Sub' $P5054 = 'cuid_448_1347804164.33' 
    capture_lex $P5054
    $P5055 = $P5054()
    set $P5056, $P5055
  if1487_end4632:
    set $P5057, $P5056
  if1469_end4578:
    unless_null _lex_param_1, fallback4661
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5059
  fallback4661:
    set $P5058, _lex_param_1["trait"]
    unless_null $P5058, fallback4662
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5058, $P5060
  fallback4662:
    set $P5069, $P5058
    unless $P5058 goto if1494_end4660 
.annotate 'line', 2245
    unless_null _lex_param_1, fallback4663
    nqp_get_sc_object $P5065, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5065
  fallback4663:
    set $P5064, _lex_param_1["trait"]
    unless_null $P5064, fallback4664
    nqp_get_sc_object $P5066, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5064, $P5066
  fallback4664:
    set $P5061, $P5064
    iter $P5063, $P5064
  for_next4665:
    unless $P5063, for_done4667
    shift $P5068, $P5063
  for_redo4666:
    .const 'Sub' $P5067 = 'cuid_449_1347804164.33' 
    capture_lex $P5067
    $P5061 = $P5067($P5068)
    goto for_next4665
  for_done4667:
    set $P5069, $P5061
  if1494_end4660:
.annotate 'line', 2249
    $P5070 = _lex_param_1."!make"($P101)
    .return ($P5070) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_446_1347804164.33") :anon :lex :outer("cuid_299_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2179
    .lex "%lit_args", $P101 
    .lex "%obj_args", $P102 
    new $P5001, 'Hash'
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    find_dynamic_lex $P5003, "%*HOW"
    unless_null $P5003, fallback4584
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["%HOW"]
    unless_null $P5004, fallback4585
    nqp_get_sc_object $P5008, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5007, $P5008
    new $P5009, 'Hash'
    set $P5007["%HOW"], $P5009
    set $P5004, $P5009
  fallback4585:
    unless_null $P5004, vivi_14724586
    die "Contextual %*HOW not found"
    box $P5010, "Contextual %*HOW not found"
    set $P5004, $P5010
  vivi_14724586:
    set $P5003, $P5004
  fallback4584:
    find_dynamic_lex $P5011, "$*PKGDECL"
    unless_null $P5011, fallback4587
    nqp_get_sc_object $P5014, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5013, $P5014
    set $P5012, $P5013["$PKGDECL"]
    unless_null $P5012, fallback4588
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5012, $P5015
  fallback4588:
    unless_null $P5012, vivi_14734589
    die "Contextual $*PKGDECL not found"
    box $P5016, "Contextual $*PKGDECL not found"
    set $P5012, $P5016
  vivi_14734589:
    set $P5011, $P5012
  fallback4587:
    set $S5002, $P5011
    concat $S5001, $S5002, "-attr"
    exists $I5001, $P5003[$S5001]
    box $P5027, $I5001
    set $P5026, $P5027
    if $I5001 goto unless1471_end4583 
.annotate 'line', 2181
.annotate 'line', 2182
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    find_dynamic_lex $P5019, "$*PKGDECL"
    unless_null $P5019, fallback4590
    nqp_get_sc_object $P5022, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$PKGDECL"]
    unless_null $P5020, fallback4591
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5020, $P5023
  fallback4591:
    unless_null $P5020, vivi_14744592
    die "Contextual $*PKGDECL not found"
    box $P5024, "Contextual $*PKGDECL not found"
    set $P5020, $P5024
  vivi_14744592:
    set $P5019, $P5020
  fallback4590:
    set $S5004, $P5019
    concat $S5003, $S5004, " packages do not support attributes"
    $P5025 = $P5018."panic"($S5003)
    set $P5026, $P5025
  unless1471_end4583:
    find_lex $P5028, "$name"
    set $P101["name"], $P5028
    find_lex $P5030, "$/"
    unless_null $P5030, fallback4595
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5030, $P5031
  fallback4595:
    set $P5029, $P5030["typename"]
    unless_null $P5029, fallback4596
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5029, $P5032
  fallback4596:
    set $P5048, $P5029
    unless $P5029 goto if1475_end4594 
.annotate 'line', 2189
.annotate 'line', 2190
    find_dynamic_lex $P5033, "$*W"
    unless_null $P5033, fallback4597
    nqp_get_sc_object $P5036, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5035, $P5036
    set $P5034, $P5035["$W"]
    unless_null $P5034, fallback4598
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5034, $P5037
  fallback4598:
    unless_null $P5034, vivi_14764599
    die "Contextual $*W not found"
    box $P5038, "Contextual $*W not found"
    set $P5034, $P5038
  vivi_14764599:
    set $P5033, $P5034
  fallback4597:
    new $P5039, 'ResizablePMCArray'
    find_lex $P5042, "$/"
    unless_null $P5042, fallback4600
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5042, $P5043
  fallback4600:
    set $P5041, $P5042["typename"]
    unless_null $P5041, fallback4601
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5041, $P5044
  fallback4601:
    set $P5040, $P5041[0]
    unless_null $P5040, fallback4602
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5040, $P5045
  fallback4602:
    set $S5005, $P5040
    box $P5046, $S5005
    push $P5039, $P5046
    $P5047 = $P5033."find_sym"($P5039)
    set $P102["type"], $P5047
    set $P5048, $P5047
  if1475_end4594:
    find_lex $P5049, "$sigil"
    set $S5006, $P5049
    iseq $I5002, $S5006, "$"
    set $I5004, $I5002
    if $I5002 goto unless1478_end4606 
    find_lex $P5050, "$sigil"
    set $S5007, $P5050
    iseq $I5003, $S5007, "&"
    set $I5004, $I5003
  unless1478_end4606:
    box $P5070, $I5004
    set $P5069, $P5070
    unless $I5004 goto if1477_end4604 
.annotate 'line', 2192
    find_lex $P5052, "$/"
    unless_null $P5052, fallback4609
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5052, $P5053
  fallback4609:
    set $P5051, $P5052["typename"]
    unless_null $P5051, fallback4610
    nqp_get_sc_object $P5054, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5051, $P5054
  fallback4610:
    unless $P5051 goto if1479_else4607 
.annotate 'line', 2193
    set $P5055, $P102["type"]
    unless_null $P5055, fallback4611
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5055, $P5056
  fallback4611:
    set $P102["default"], $P5055
    set $P5068, $P5055
    goto if1479_end4608
  if1479_else4607:
.annotate 'line', 2196
    new $P5066, 'ExceptionHandler'
    set_label $P5066, catch_handler_14824616
    $P5066.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5066
.annotate 'line', 2197
    find_dynamic_lex $P5057, "$*W"
    unless_null $P5057, fallback4612
    nqp_get_sc_object $P5060, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["$W"]
    unless_null $P5058, fallback4613
    nqp_get_sc_object $P5061, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5058, $P5061
  fallback4613:
    unless_null $P5058, vivi_14804614
    die "Contextual $*W not found"
    box $P5062, "Contextual $*W not found"
    set $P5058, $P5062
  vivi_14804614:
    set $P5057, $P5058
  fallback4612:
    new $P5063, 'ResizablePMCArray'
    box $P5064, "NQPMu"
    push $P5063, $P5064
    $P5065 = $P5057."find_sym"($P5063)
    set $P102["default"], $P5065
    set $P5067, $P5065
    pop_eh 
    goto skip_handler_14814615
  catch_handler_14824616:
    .get_results ($P5066) 
    set $I10001, 1
    set $P5066["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    finalize $P5066
    pop_upto_eh $P5066
    pop_eh 
    set $P5067, $P10001
    goto skip_handler_14814615
  skip_handler_14814615:
    set $P5068, $P5067
  if1479_end4608:
    set $P5069, $P5068
  if1477_end4604:
.annotate 'line', 2202
    find_dynamic_lex $P5071, "$*W"
    unless_null $P5071, fallback4617
    nqp_get_sc_object $P5074, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5073, $P5074
    set $P5072, $P5073["$W"]
    unless_null $P5072, fallback4618
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5072, $P5075
  fallback4618:
    unless_null $P5072, vivi_14834619
    die "Contextual $*W not found"
    box $P5076, "Contextual $*W not found"
    set $P5072, $P5076
  vivi_14834619:
    set $P5071, $P5072
  fallback4617:
    find_dynamic_lex $P5077, "$*PACKAGE"
    unless_null $P5077, fallback4620
    nqp_get_sc_object $P5080, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5079, $P5080
    set $P5078, $P5079["$PACKAGE"]
    unless_null $P5078, fallback4621
    nqp_get_sc_object $P5081, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5078, $P5081
  fallback4621:
    unless_null $P5078, vivi_14844622
    die "Contextual $*PACKAGE not found"
    box $P5082, "Contextual $*PACKAGE not found"
    set $P5078, $P5082
  vivi_14844622:
    set $P5077, $P5078
  fallback4620:
    find_dynamic_lex $P5084, "%*HOW"
    unless_null $P5084, fallback4623
    nqp_get_sc_object $P5087, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5086, $P5087
    set $P5085, $P5086["%HOW"]
    unless_null $P5085, fallback4624
    nqp_get_sc_object $P5089, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5088, $P5089
    new $P5090, 'Hash'
    set $P5088["%HOW"], $P5090
    set $P5085, $P5090
  fallback4624:
    unless_null $P5085, vivi_14854625
    die "Contextual %*HOW not found"
    box $P5091, "Contextual %*HOW not found"
    set $P5085, $P5091
  vivi_14854625:
    set $P5084, $P5085
  fallback4623:
    find_dynamic_lex $P5092, "$*PKGDECL"
    unless_null $P5092, fallback4626
    nqp_get_sc_object $P5095, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5094, $P5095
    set $P5093, $P5094["$PKGDECL"]
    unless_null $P5093, fallback4627
    nqp_get_sc_object $P5096, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5093, $P5096
  fallback4627:
    unless_null $P5093, vivi_14864628
    die "Contextual $*PKGDECL not found"
    box $P5097, "Contextual $*PKGDECL not found"
    set $P5093, $P5097
  vivi_14864628:
    set $P5092, $P5093
  fallback4626:
    set $S5009, $P5092
    concat $S5008, $S5009, "-attr"
    set $P5083, $P5084[$S5008]
    unless_null $P5083, fallback4629
    nqp_get_sc_object $P5098, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5083, $P5098
  fallback4629:
    $P5099 = $P5071."pkg_add_attribute"($P5077, $P5083, $P101, $P102)
.annotate 'line', 2205
    nqp_get_sc_object $P5103, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5102, $P5103, "QAST"
    get_who $P5101, $P5102
    set $P5100, $P5101["Stmts"]
    unless_null $P5100, fallback4630
    nqp_get_sc_object $P5104, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5100, $P5104
  fallback4630:
    $P5105 = $P5100."new"()
    store_lex "$past", $P5105
    .return ($P5105) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_448_1347804164.33") :anon :lex :outer("cuid_299_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2218
    .const 'Sub' $P5058 = 'cuid_447_1347804164.33' 
    capture_lex $P5058 
    .lex "$type", $P101 
    .lex "$default", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4644
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5005
  fallback4644:
    set $P5003, $P5004["typename"]
    unless_null $P5003, fallback4645
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5006
  fallback4645:
    unless $P5003 goto if1490_else4642 
.annotate 'line', 2221
    find_lex $P5007, "$sigil"
    set $S5001, $P5007
    iseq $I5001, $S5001, "$"
    box $P5012, $I5001
    set $P5011, $P5012
    if $I5001 goto unless1491_end4647 
.annotate 'line', 2222
.annotate 'line', 2223
    find_lex $P5008, "$/"
    $P5009 = $P5008."CURSOR"()
    $P5010 = $P5009."panic"("Only typed scalars are currently supported in NQP")
    set $P5011, $P5010
  unless1491_end4647:
.annotate 'line', 2225
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback4648
    nqp_get_sc_object $P5016, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback4649
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5014, $P5017
  fallback4649:
    unless_null $P5014, vivi_14924650
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_14924650:
    set $P5013, $P5014
  fallback4648:
    new $P5019, 'ResizablePMCArray'
    find_lex $P5022, "$/"
    unless_null $P5022, fallback4651
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5022, $P5023
  fallback4651:
    set $P5021, $P5022["typename"]
    unless_null $P5021, fallback4652
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5021, $P5024
  fallback4652:
    set $P5020, $P5021[0]
    unless_null $P5020, fallback4653
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5020, $P5025
  fallback4653:
    set $S5002, $P5020
    box $P5026, $S5002
    push $P5019, $P5026
    $P5027 = $P5013."find_sym"($P5019)
    set $P101, $P5027
    repr_get_primitive_type_spec $I5002, $P101
    unless $I5002 goto if1493_else4654 
    .const 'Sub' $P5028 = 'cuid_447_1347804164.33' 
    capture_lex $P5028
    $P5029 = $P5028($I5002)
    set $P5033, $P5029
    goto if1493_end4655
  if1493_else4654:
.annotate 'line', 2229
.annotate 'line', 2230
    find_lex $P5030, "$/"
    $P5031 = $P5030."CURSOR"()
    $P5032 = $P5031."panic"("Only native types are currently supported/checked")
    set $P5033, $P5032
  if1493_end4655:
    set $P5036, $P5033
    goto if1490_end4643
  if1490_else4642:
.annotate 'line', 2233
.annotate 'line', 2234
    find_lex $P5034, "$sigil"
    $P5035 = "&default_for"($P5034)
    set $P102, $P5035
    set $P5036, $P102
  if1490_end4643:
.annotate 'line', 2236
    find_lex $P5038, "$BLOCK"
    set $P5037, $P5038[0]
    unless_null $P5037, fallback4656
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5037, $P5039
  fallback4656:
    nqp_get_sc_object $P5043, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5042, $P5043, "QAST"
    get_who $P5041, $P5042
    set $P5040, $P5041["Op"]
    unless_null $P5040, fallback4657
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5040, $P5044
  fallback4657:
    find_lex $P5045, "$/"
.annotate 'line', 2238
    nqp_get_sc_object $P5049, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5048, $P5049, "QAST"
    get_who $P5047, $P5048
    set $P5046, $P5047["Var"]
    unless_null $P5046, fallback4658
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5046, $P5050
  fallback4658:
    find_lex $P5051, "$name"
    $P5052 = $P5046."new"($P5051 :named("name"), "lexical" :named("scope"), "var" :named("decl"), $P101 :named("returns"))
    $P5053 = $P5040."new"($P5052, $P102, "bind" :named("op"), $P5045 :named("node"))
    $P5054 = $P5037."push"($P5053)
.annotate 'line', 2241
    find_lex $P5055, "$BLOCK"
    find_lex $P5056, "$name"
    $P5057 = $P5055."symbol"($P5056, "lexical" :named("scope"), $P101 :named("type"))
    .return ($P5057) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_447_1347804164.33") :anon :lex :outer("cuid_448_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2226
    .param pmc _lex_param_0 
    .lex "$prim_spec", _lex_param_0 
.annotate 'line', 2227
    $P5001 = "&default_value_for_prim"(_lex_param_0)
    store_lex "$default", $P5001
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_449_1347804164.33") :anon :lex :outer("cuid_299_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2246
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<sub>" :subid("cuid_300_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2252
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4668
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4668:
    set $P5001, _lex_param_1["routine_def"]
    unless_null $P5001, fallback4669
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4669:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_declarator:sym<method>" :subid("cuid_301_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2253
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback4670
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4670:
    set $P5001, _lex_param_1["method_def"]
    unless_null $P5001, fallback4671
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4671:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "routine_def" :subid("cuid_302_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2255
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5064 = 'cuid_453_1347804164.33' 
    capture_lex $P5064 
    .const 'Sub' $P5064 = 'cuid_456_1347804164.33' 
    capture_lex $P5064 
    .lex "$past", $P101 
    .lex "$block", $P102 
    .lex "$lexpast", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P103, $P5003
    unless_null _lex_param_1, fallback4674
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5005
  fallback4674:
    set $P5004, _lex_param_1["onlystar"]
    unless_null $P5004, fallback4675
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5006
  fallback4675:
    unless $P5004 goto if1495_else4672 
.annotate 'line', 2259
.annotate 'line', 2260
    $P5007 = "&only_star_block"()
    set $P101, $P5007
    set $P5023, $P101
    goto if1495_end4673
  if1495_else4672:
.annotate 'line', 2262
.annotate 'line', 2263
    unless_null _lex_param_1, fallback4676
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5009
  fallback4676:
    set $P5008, _lex_param_1["blockoid"]
    unless_null $P5008, fallback4677
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5010
  fallback4677:
    $P5011 = $P5008."ast"()
    set $P101, $P5011
.annotate 'line', 2264
    $P5012 = $P101."blocktype"("declaration")
    find_dynamic_lex $P5013, "$*RETURN_USED"
    unless_null $P5013, fallback4680
    nqp_get_sc_object $P5016, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$RETURN_USED"]
    unless_null $P5014, fallback4681
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5014, $P5017
  fallback4681:
    unless_null $P5014, vivi_14974682
    die "Contextual $*RETURN_USED not found"
    box $P5018, "Contextual $*RETURN_USED not found"
    set $P5014, $P5018
  vivi_14974682:
    set $P5013, $P5014
  fallback4680:
    set $P5022, $P5013
    unless $P5013 goto if1496_end4679 
.annotate 'line', 2265
.annotate 'line', 2266
    set $P5019, $P101[1]
    unless_null $P5019, fallback4683
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5019, $P5020
  fallback4683:
    $P5021 = "&wrap_return_handler"($P5019)
    set $P101[1], $P5021
    set $P5022, $P5021
  if1496_end4679:
    set $P5023, $P5022
  if1495_end4673:
    set $P102, $P101
    unless_null _lex_param_1, fallback4686
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5025
  fallback4686:
    set $P5024, _lex_param_1["deflongname"]
    unless_null $P5024, fallback4687
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5024, $P5026
  fallback4687:
    unless $P5024 goto if1498_else4684 
    .const 'Sub' $P5027 = 'cuid_453_1347804164.33' 
    capture_lex $P5027
    $P5028 = $P5027()
    set $P5044, $P5028
    goto if1498_end4685
  if1498_else4684:
.annotate 'line', 2363
.annotate 'line', 2364
    find_dynamic_lex $P5029, "$*W"
    unless_null $P5029, fallback4799
    nqp_get_sc_object $P5032, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["$W"]
    unless_null $P5030, fallback4800
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5030, $P5033
  fallback4800:
    unless_null $P5030, vivi_15334801
    die "Contextual $*W not found"
    box $P5034, "Contextual $*W not found"
    set $P5030, $P5034
  vivi_15334801:
    set $P5029, $P5030
  fallback4799:
    $P5035 = $P5029."is_precompilation_mode"()
    set $P5043, $P5035
    unless $P5035 goto if1532_end4798 
.annotate 'line', 2365
    find_dynamic_lex $P5036, "$*W"
    unless_null $P5036, fallback4802
    nqp_get_sc_object $P5039, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5038, $P5039
    set $P5037, $P5038["$W"]
    unless_null $P5037, fallback4803
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5037, $P5040
  fallback4803:
    unless_null $P5037, vivi_15344804
    die "Contextual $*W not found"
    box $P5041, "Contextual $*W not found"
    set $P5037, $P5041
  vivi_15344804:
    set $P5036, $P5037
  fallback4802:
    $P5042 = $P5036."create_code"($P101, "<anon>", 0)
    set $P5043, $P5042
  if1532_end4798:
    set $P5044, $P5043
  if1498_end4685:
.annotate 'line', 2369
    nqp_get_sc_object $P5048, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5047, $P5048, "QAST"
    get_who $P5046, $P5047
    set $P5045, $P5046["Op"]
    unless_null $P5045, fallback4805
    nqp_get_sc_object $P5049, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5045, $P5049
  fallback4805:
    $P5050 = $P5045."new"($P101, "takeclosure" :named("op"))
    set $P103, $P5050
    set $P103["sink"], $P101
    set $P103["block_past"], $P102
.annotate 'line', 2372
    $P5051 = _lex_param_1."!make"($P103)
    unless_null _lex_param_1, fallback4808
    nqp_get_sc_object $P5053, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5053
  fallback4808:
    set $P5052, _lex_param_1["trait"]
    unless_null $P5052, fallback4809
    nqp_get_sc_object $P5054, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5052, $P5054
  fallback4809:
    set $P5063, $P5052
    unless $P5052 goto if1535_end4807 
.annotate 'line', 2375
    unless_null _lex_param_1, fallback4810
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5059
  fallback4810:
    set $P5058, _lex_param_1["trait"]
    unless_null $P5058, fallback4811
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5058, $P5060
  fallback4811:
    set $P5055, $P5058
    iter $P5057, $P5058
  for_next4812:
    unless $P5057, for_done4814
    shift $P5062, $P5057
  for_redo4813:
    .const 'Sub' $P5061 = 'cuid_456_1347804164.33' 
    capture_lex $P5061
    $P5055 = $P5061($P5062)
    goto for_next4812
  for_done4814:
    set $P5063, $P5055
  if1535_end4807:
    .return ($P5063) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_453_1347804164.33") :anon :lex :outer("cuid_302_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2271
    .const 'Sub' $P5081 = 'cuid_452_1347804164.33' 
    capture_lex $P5081 
    .const 'Sub' $P5081 = 'cuid_454_1347804164.33' 
    capture_lex $P5081 
    .const 'Sub' $P5081 = 'cuid_455_1347804164.33' 
    capture_lex $P5081 
    .lex "$name", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4688
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5005
  fallback4688:
    set $P5003, $P5004["sigil"]
    unless_null $P5003, fallback4689
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5006
  fallback4689:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback4690
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5007
  fallback4690:
    set $S5002, $P5002
.annotate 'line', 2272
    find_lex $P5010, "$/"
    unless_null $P5010, fallback4691
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5011
  fallback4691:
    set $P5009, $P5010["deflongname"]
    unless_null $P5009, fallback4692
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5012
  fallback4692:
    set $P5008, $P5009[0]
    unless_null $P5008, fallback4693
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5013
  fallback4693:
    $P5014 = $P5008."ast"()
    set $S5003, $P5014
    concat $S5001, $S5002, $S5003
    box $P5015, $S5001
    set $P101, $P5015
.annotate 'line', 2273
    find_lex $P5016, "$past"
    $P5017 = $P5016."name"($P101)
    find_dynamic_lex $P5018, "$*SCOPE"
    unless_null $P5018, fallback4700
    nqp_get_sc_object $P5021, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$SCOPE"]
    unless_null $P5019, fallback4701
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5019, $P5022
  fallback4701:
    unless_null $P5019, vivi_15024702
    die "Contextual $*SCOPE not found"
    box $P5023, "Contextual $*SCOPE not found"
    set $P5019, $P5023
  vivi_15024702:
    set $P5018, $P5019
  fallback4700:
    set $S5004, $P5018
    iseq $I5001, $S5004, ""
    set $I5003, $I5001
    if $I5001 goto unless1501_end4699 
    find_dynamic_lex $P5024, "$*SCOPE"
    unless_null $P5024, fallback4703
    nqp_get_sc_object $P5027, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5026, $P5027
    set $P5025, $P5026["$SCOPE"]
    unless_null $P5025, fallback4704
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5025, $P5028
  fallback4704:
    unless_null $P5025, vivi_15034705
    die "Contextual $*SCOPE not found"
    box $P5029, "Contextual $*SCOPE not found"
    set $P5025, $P5029
  vivi_15034705:
    set $P5024, $P5025
  fallback4703:
    set $S5005, $P5024
    iseq $I5002, $S5005, "my"
    set $I5003, $I5002
  unless1501_end4699:
    set $I5005, $I5003
    if $I5003 goto unless1500_end4697 
    find_dynamic_lex $P5030, "$*SCOPE"
    unless_null $P5030, fallback4706
    nqp_get_sc_object $P5033, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5032, $P5033
    set $P5031, $P5032["$SCOPE"]
    unless_null $P5031, fallback4707
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5031, $P5034
  fallback4707:
    unless_null $P5031, vivi_15044708
    die "Contextual $*SCOPE not found"
    box $P5035, "Contextual $*SCOPE not found"
    set $P5031, $P5035
  vivi_15044708:
    set $P5030, $P5031
  fallback4706:
    set $S5006, $P5030
    iseq $I5004, $S5006, "our"
    set $I5005, $I5004
  unless1500_end4697:
    unless $I5005 goto if1499_else4694 
.annotate 'line', 2274
    find_dynamic_lex $P5036, "$*MULTINESS"
    unless_null $P5036, fallback4711
    nqp_get_sc_object $P5039, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5038, $P5039
    set $P5037, $P5038["$MULTINESS"]
    unless_null $P5037, fallback4712
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5037, $P5040
  fallback4712:
    unless_null $P5037, vivi_15064713
    die "Contextual $*MULTINESS not found"
    box $P5041, "Contextual $*MULTINESS not found"
    set $P5037, $P5041
  vivi_15064713:
    set $P5036, $P5037
  fallback4711:
    set $S5007, $P5036
    iseq $I5006, $S5007, "multi"
    unless $I5006 goto if1505_else4709 
    .const 'Sub' $P5042 = 'cuid_452_1347804164.33' 
    capture_lex $P5042
    $P5043 = $P5042()
    set $P5055, $P5043
    goto if1505_end4710
  if1505_else4709:
    find_dynamic_lex $P5044, "$*MULTINESS"
    unless_null $P5044, fallback4749
    nqp_get_sc_object $P5047, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5046, $P5047
    set $P5045, $P5046["$MULTINESS"]
    unless_null $P5045, fallback4750
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5045, $P5048
  fallback4750:
    unless_null $P5045, vivi_15184751
    die "Contextual $*MULTINESS not found"
    box $P5049, "Contextual $*MULTINESS not found"
    set $P5045, $P5049
  vivi_15184751:
    set $P5044, $P5045
  fallback4749:
    set $S5008, $P5044
    iseq $I5007, $S5008, "proto"
    unless $I5007 goto if1517_else4747 
    .const 'Sub' $P5050 = 'cuid_454_1347804164.33' 
    capture_lex $P5050
    $P5051 = $P5050()
    set $P5054, $P5051
    goto if1517_end4748
  if1517_else4747:
    .const 'Sub' $P5052 = 'cuid_455_1347804164.33' 
    capture_lex $P5052
    $P5053 = $P5052()
    set $P5054, $P5053
  if1517_end4748:
    set $P5055, $P5054
  if1505_end4710:
.annotate 'line', 2352
    nqp_get_sc_object $P5059, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5058, $P5059, "QAST"
    get_who $P5057, $P5058
    set $P5056, $P5057["Var"]
    unless_null $P5056, fallback4786
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5056, $P5060
  fallback4786:
    set $S5010, $P101
    concat $S5009, "&", $S5010
    $P5061 = $P5056."new"($S5009 :named("name"), "lexical" :named("scope"))
    store_lex "$past", $P5061
    set $P5071, $P5061
    goto if1499_end4695
  if1499_else4694:
.annotate 'line', 2354
.annotate 'line', 2355
    find_lex $P5062, "$/"
    $P5063 = $P5062."CURSOR"()
    find_dynamic_lex $P5064, "$*SCOPE"
    unless_null $P5064, fallback4787
    nqp_get_sc_object $P5067, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5066, $P5067
    set $P5065, $P5066["$SCOPE"]
    unless_null $P5065, fallback4788
    nqp_get_sc_object $P5068, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5065, $P5068
  fallback4788:
    unless_null $P5065, vivi_15284789
    die "Contextual $*SCOPE not found"
    box $P5069, "Contextual $*SCOPE not found"
    set $P5065, $P5069
  vivi_15284789:
    set $P5064, $P5065
  fallback4787:
    set $S5012, $P5064
    concat $S5011, $S5012, " scoped routines are not supported yet"
    $P5070 = $P5063."panic"($S5011)
    set $P5071, $P5070
  if1499_end4695:
    set $S5013, $P101
    iseq $I5008, $S5013, "MAIN"
    set $I5010, $I5008
    unless $I5008 goto if1530_end4793 
    find_dynamic_lex $P5072, "$*MULTINESS"
    unless_null $P5072, fallback4794
    nqp_get_sc_object $P5075, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5074, $P5075
    set $P5073, $P5074["$MULTINESS"]
    unless_null $P5073, fallback4795
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5073, $P5076
  fallback4795:
    unless_null $P5073, vivi_15314796
    die "Contextual $*MULTINESS not found"
    box $P5077, "Contextual $*MULTINESS not found"
    set $P5073, $P5077
  vivi_15314796:
    set $P5072, $P5073
  fallback4794:
    set $S5014, $P5072
    isne $I5009, $S5014, "multi"
    set $I5010, $I5009
  if1530_end4793:
    box $P5080, $I5010
    set $P5079, $P5080
    unless $I5010 goto if1529_end4791 
.annotate 'line', 2359
    find_lex $P5078, "$block"
    store_dynamic_lex "$*MAIN_SUB", $P5078
    set $P5079, $P5078
  if1529_end4791:
    .return ($P5079) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_452_1347804164.33") :anon :lex :outer("cuid_453_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2275
    .const 'Sub' $P5053 = 'cuid_451_1347804164.33' 
    capture_lex $P5053 
    .lex "$proto", $P101 
    .lex "%sym", $P102 
    .lex "$code", $P103 
    .lex "$BLOCK", $P104 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    new $P5002, 'Hash'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P104, $P5004
    find_dynamic_lex $P5005, "$*SCOPE"
    unless_null $P5005, fallback4716
    nqp_get_sc_object $P5008, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$SCOPE"]
    unless_null $P5006, fallback4717
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5009
  fallback4717:
    unless_null $P5006, vivi_15084718
    die "Contextual $*SCOPE not found"
    box $P5010, "Contextual $*SCOPE not found"
    set $P5006, $P5010
  vivi_15084718:
    set $P5005, $P5006
  fallback4716:
    set $S5001, $P5005
    iseq $I5001, $S5001, "our"
    box $P5013, $I5001
    set $P5012, $P5013
    unless $I5001 goto if1507_end4715 
.annotate 'line', 2277
    box $P5011, "a multi can not be our-scoped"
    die $P5011
    set $P5012, $P5011
  if1507_end4715:
.annotate 'line', 2279
    find_dynamic_lex $P5014, "$*W"
    unless_null $P5014, fallback4719
    nqp_get_sc_object $P5017, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["$W"]
    unless_null $P5015, fallback4720
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5015, $P5018
  fallback4720:
    unless_null $P5015, vivi_15094721
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5015, $P5019
  vivi_15094721:
    set $P5014, $P5015
  fallback4719:
    $P5020 = $P5014."cur_lexpad"()
    find_lex $P5021, "$name"
    set $S5003, $P5021
    concat $S5002, "&", $S5003
    $P5022 = $P5020."symbol"($S5002)
    set $P102, $P5022
    set $P5023, $P102["proto"]
    unless_null $P5023, fallback4724
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5023, $P5024
  fallback4724:
    unless $P5023 goto if1510_else4722 
.annotate 'line', 2280
    set $P5025, $P102["value"]
    unless_null $P5025, fallback4725
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5025, $P5026
  fallback4725:
    set $P101, $P5025
    set $P5029, $P101
    goto if1510_end4723
  if1510_else4722:
    .const 'Sub' $P5027 = 'cuid_451_1347804164.33' 
    capture_lex $P5027
    $P5028 = $P5027()
    set $P5029, $P5028
  if1510_end4723:
.annotate 'line', 2309
    find_dynamic_lex $P5030, "$*W"
    unless_null $P5030, fallback4740
    nqp_get_sc_object $P5033, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5032, $P5033
    set $P5031, $P5032["$W"]
    unless_null $P5031, fallback4741
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5031, $P5034
  fallback4741:
    unless_null $P5031, vivi_15154742
    die "Contextual $*W not found"
    box $P5035, "Contextual $*W not found"
    set $P5031, $P5035
  vivi_15154742:
    set $P5030, $P5031
  fallback4740:
    find_lex $P5036, "$past"
    find_lex $P5037, "$name"
    $P5038 = $P5030."create_code"($P5036, $P5037, 0)
    set $P103, $P5038
.annotate 'line', 2310
    find_lex $P5039, "$past"
    $P5040 = "&attach_multi_signature"($P103, $P5039)
.annotate 'line', 2313
    $P5041 = $P101."add_dispatchee"($P103)
.annotate 'line', 2316
    find_dynamic_lex $P5042, "$*W"
    unless_null $P5042, fallback4743
    nqp_get_sc_object $P5045, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5044, $P5045
    set $P5043, $P5044["$W"]
    unless_null $P5043, fallback4744
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5043, $P5046
  fallback4744:
    unless_null $P5043, vivi_15164745
    die "Contextual $*W not found"
    box $P5047, "Contextual $*W not found"
    set $P5043, $P5047
  vivi_15164745:
    set $P5042, $P5043
  fallback4743:
    $P5048 = $P5042."cur_lexpad"()
    set $P104, $P5048
.annotate 'line', 2317
    set $P5049, $P104[0]
    unless_null $P5049, fallback4746
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5049, $P5050
  fallback4746:
    find_lex $P5051, "$past"
    $P5052 = $P5049."push"($P5051)
    .return ($P5052) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_451_1347804164.33") :anon :lex :outer("cuid_452_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2285
    .const 'Sub' $P5019 = 'cuid_450_1347804164.33' 
    capture_lex $P5019 
    .lex "$found_proto", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 2288
    find_dynamic_lex $P5005, "$*W"
    unless_null $P5005, fallback4726
    nqp_get_sc_object $P5008, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5007, $P5008
    set $P5006, $P5007["$W"]
    unless_null $P5006, fallback4727
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5009
  fallback4727:
    unless_null $P5006, vivi_15114728
    die "Contextual $*W not found"
    box $P5010, "Contextual $*W not found"
    set $P5006, $P5010
  vivi_15114728:
    set $P5005, $P5006
  fallback4726:
    $P5011 = $P5005."get_legacy_block_list"()
    set $P5002, $P5011
    iter $P5004, $P5011
  for_next4735:
    unless $P5004, for_done4737
    shift $P5013, $P5004
  for_redo4736:
    .const 'Sub' $P5012 = 'cuid_450_1347804164.33' 
    capture_lex $P5012
    $P5002 = $P5012($P5013)
    goto for_next4735
  for_done4737:
    set $P5017, $P101
    if $P101 goto unless1514_end4739 
.annotate 'line', 2300
.annotate 'line', 2301
    find_lex $P5014, "$/"
    $P5015 = $P5014."CURSOR"()
    $P5016 = $P5015."panic"("Sorry, no proto sub in scope, and auto-generation of protos is not yet implemented.")
    set $P5017, $P5016
  unless1514_end4739:
    box $P5018, "Dispatcher derivation NYI"
    die $P5018
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_450_1347804164.33") :anon :lex :outer("cuid_451_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2288
    .param pmc _lex_param_0 
    .lex "%sym", $P101 
    .lex "$_", _lex_param_0 
    new $P5001, 'Hash'
    set $P101, $P5001
.annotate 'line', 2289
    find_lex $P5002, "$name"
    set $S5002, $P5002
    concat $S5001, "&", $S5002
    $P5003 = _lex_param_0."symbol"($S5001)
    set $P101, $P5003
    set $P5004, $P101["proto"]
    unless_null $P5004, fallback4731
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5005
  fallback4731:
    unless $P5004 goto if1512_else4729 
.annotate 'line', 2290
    set $P5006, $P101["value"]
    unless_null $P5006, fallback4732
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5007
  fallback4732:
    store_lex "$proto", $P5006
    box $P5008, 1
    store_lex "$found_proto", $P5008
    set $P5013, $P5008
    goto if1512_end4730
  if1512_else4729:
    set $P5012, $P101
    unless $P101 goto if1513_end4734 
.annotate 'line', 2294
.annotate 'line', 2295
    find_lex $P5009, "$/"
    $P5010 = $P5009."CURSOR"()
    $P5011 = $P5010."panic"("Cannot declare a multi when an only is already in scope.")
    set $P5012, $P5011
  if1513_end4734:
    set $P5013, $P5012
  if1512_end4730:
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_454_1347804164.33") :anon :lex :outer("cuid_453_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2319
    .lex "$code", $P101 
    .lex "$BLOCK", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    find_dynamic_lex $P5003, "$*SCOPE"
    unless_null $P5003, fallback4754
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$SCOPE"]
    unless_null $P5004, fallback4755
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5007
  fallback4755:
    unless_null $P5004, vivi_15204756
    die "Contextual $*SCOPE not found"
    box $P5008, "Contextual $*SCOPE not found"
    set $P5004, $P5008
  vivi_15204756:
    set $P5003, $P5004
  fallback4754:
    set $S5001, $P5003
    iseq $I5001, $S5001, "our"
    box $P5011, $I5001
    set $P5010, $P5011
    unless $I5001 goto if1519_end4753 
.annotate 'line', 2323
    box $P5009, "our-scoped protos not yet implemented"
    die $P5009
    set $P5010, $P5009
  if1519_end4753:
.annotate 'line', 2324
    find_dynamic_lex $P5012, "$*W"
    unless_null $P5012, fallback4757
    nqp_get_sc_object $P5015, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$W"]
    unless_null $P5013, fallback4758
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5013, $P5016
  fallback4758:
    unless_null $P5013, vivi_15214759
    die "Contextual $*W not found"
    box $P5017, "Contextual $*W not found"
    set $P5013, $P5017
  vivi_15214759:
    set $P5012, $P5013
  fallback4757:
    find_lex $P5018, "$past"
    find_lex $P5019, "$name"
    $P5020 = $P5012."create_code"($P5018, $P5019, 1)
    set $P101, $P5020
.annotate 'line', 2325
    find_dynamic_lex $P5021, "$*W"
    unless_null $P5021, fallback4760
    nqp_get_sc_object $P5024, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5023, $P5024
    set $P5022, $P5023["$W"]
    unless_null $P5022, fallback4761
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5022, $P5025
  fallback4761:
    unless_null $P5022, vivi_15224762
    die "Contextual $*W not found"
    box $P5026, "Contextual $*W not found"
    set $P5022, $P5026
  vivi_15224762:
    set $P5021, $P5022
  fallback4760:
    $P5027 = $P5021."cur_lexpad"()
    set $P102, $P5027
.annotate 'line', 2326
    set $P5028, $P102[0]
    unless_null $P5028, fallback4763
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5028, $P5029
  fallback4763:
    nqp_get_sc_object $P5033, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["Op"]
    unless_null $P5030, fallback4764
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5030, $P5034
  fallback4764:
.annotate 'line', 2328
    nqp_get_sc_object $P5038, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5037, $P5038, "QAST"
    get_who $P5036, $P5037
    set $P5035, $P5036["Var"]
    unless_null $P5035, fallback4765
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5035, $P5039
  fallback4765:
    find_lex $P5040, "$name"
    set $S5003, $P5040
    concat $S5002, "&", $S5003
    $P5041 = $P5035."new"($S5002 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5042, "$past"
    $P5043 = $P5030."new"($P5041, $P5042, "bind" :named("op"))
    $P5044 = $P5028."push"($P5043)
.annotate 'line', 2331
    find_lex $P5045, "$name"
    set $S5005, $P5045
    concat $S5004, "&", $S5005
    $P5046 = $P102."symbol"($S5004, "lexical" :named("scope"), 1 :named("proto"), $P101 :named("value"))
    .return ($P5046) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_455_1347804164.33") :anon :lex :outer("cuid_453_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2333
    .lex "$BLOCK", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 2334
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4766
    nqp_get_sc_object $P5005, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4767
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5006
  fallback4767:
    unless_null $P5003, vivi_15234768
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_15234768:
    set $P5002, $P5003
  fallback4766:
    $P5008 = $P5002."cur_lexpad"()
    set $P101, $P5008
.annotate 'line', 2335
    set $P5009, $P101[0]
    unless_null $P5009, fallback4769
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5010
  fallback4769:
    nqp_get_sc_object $P5014, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback4770
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5015
  fallback4770:
.annotate 'line', 2337
    nqp_get_sc_object $P5019, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Var"]
    unless_null $P5016, fallback4771
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5016, $P5020
  fallback4771:
    find_lex $P5021, "$name"
    set $S5002, $P5021
    concat $S5001, "&", $S5002
    $P5022 = $P5016."new"($S5001 :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    find_lex $P5023, "$past"
    $P5024 = $P5011."new"($P5022, $P5023, "bind" :named("op"))
    $P5025 = $P5009."push"($P5024)
.annotate 'line', 2340
    find_lex $P5026, "$name"
    set $S5004, $P5026
    concat $S5003, "&", $S5004
    $P5027 = $P101."symbol"($S5003, "lexical" :named("scope"))
    find_dynamic_lex $P5028, "$*SCOPE"
    unless_null $P5028, fallback4774
    nqp_get_sc_object $P5031, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["$SCOPE"]
    unless_null $P5029, fallback4775
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5029, $P5032
  fallback4775:
    unless_null $P5029, vivi_15254776
    die "Contextual $*SCOPE not found"
    box $P5033, "Contextual $*SCOPE not found"
    set $P5029, $P5033
  vivi_15254776:
    set $P5028, $P5029
  fallback4774:
    set $S5005, $P5028
    iseq $I5001, $S5005, "our"
    box $P5070, $I5001
    set $P5069, $P5070
    unless $I5001 goto if1524_end4773 
.annotate 'line', 2341
.annotate 'line', 2344
    find_dynamic_lex $P5034, "$*W"
    unless_null $P5034, fallback4777
    nqp_get_sc_object $P5037, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5036, $P5037
    set $P5035, $P5036["$W"]
    unless_null $P5035, fallback4778
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5035, $P5038
  fallback4778:
    unless_null $P5035, vivi_15264779
    die "Contextual $*W not found"
    box $P5039, "Contextual $*W not found"
    set $P5035, $P5039
  vivi_15264779:
    set $P5034, $P5035
  fallback4777:
    find_dynamic_lex $P5040, "$*PACKAGE"
    unless_null $P5040, fallback4780
    nqp_get_sc_object $P5043, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5042, $P5043
    set $P5041, $P5042["$PACKAGE"]
    unless_null $P5041, fallback4781
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5041, $P5044
  fallback4781:
    unless_null $P5041, vivi_15274782
    die "Contextual $*PACKAGE not found"
    box $P5045, "Contextual $*PACKAGE not found"
    set $P5041, $P5045
  vivi_15274782:
    set $P5040, $P5041
  fallback4780:
    find_lex $P5046, "$name"
    find_lex $P5047, "$past"
    $P5048 = $P5034."install_package_routine"($P5040, $P5046, $P5047)
.annotate 'line', 2345
    set $P5049, $P101[0]
    unless_null $P5049, fallback4783
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5049, $P5050
  fallback4783:
    nqp_get_sc_object $P5054, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5053, $P5054, "QAST"
    get_who $P5052, $P5053
    set $P5051, $P5052["Op"]
    unless_null $P5051, fallback4784
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5051, $P5055
  fallback4784:
.annotate 'line', 2347
    new $P5056, 'ResizablePMCArray'
    find_lex $P5057, "$name"
    push $P5056, $P5057
    find_lex $P5058, "$/"
    $P5059 = "&lexical_package_lookup"($P5056, $P5058)
.annotate 'line', 2348
    nqp_get_sc_object $P5063, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5062, $P5063, "QAST"
    get_who $P5061, $P5062
    set $P5060, $P5061["Var"]
    unless_null $P5060, fallback4785
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5060, $P5064
  fallback4785:
    find_lex $P5065, "$name"
    set $S5007, $P5065
    concat $S5006, "&", $S5007
    $P5066 = $P5060."new"($S5006 :named("name"), "lexical" :named("scope"))
    $P5067 = $P5051."new"($P5059, $P5066, "bind" :named("op"))
    $P5068 = $P5049."push"($P5067)
    set $P5069, $P5068
  if1524_end4773:
    .return ($P5069) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_456_1347804164.33") :anon :lex :outer("cuid_302_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2376
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "method_def" :subid("cuid_303_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2381
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5069 = 'cuid_457_1347804164.33' 
    capture_lex $P5069 
    .const 'Sub' $P5069 = 'cuid_458_1347804164.33' 
    capture_lex $P5069 
    .lex "$past", $P101 
    .lex "$lexpast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback4817
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5004
  fallback4817:
    set $P5003, _lex_param_1["onlystar"]
    unless_null $P5003, fallback4818
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5005
  fallback4818:
    unless $P5003 goto if1536_else4815 
.annotate 'line', 2385
.annotate 'line', 2386
    $P5006 = "&only_star_block"()
    set $P101, $P5006
    set $P5022, $P101
    goto if1536_end4816
  if1536_else4815:
.annotate 'line', 2388
.annotate 'line', 2389
    unless_null _lex_param_1, fallback4819
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5008
  fallback4819:
    set $P5007, _lex_param_1["blockoid"]
    unless_null $P5007, fallback4820
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5009
  fallback4820:
    $P5010 = $P5007."ast"()
    set $P101, $P5010
.annotate 'line', 2390
    $P5011 = $P101."blocktype"("declaration")
    find_dynamic_lex $P5012, "$*RETURN_USED"
    unless_null $P5012, fallback4823
    nqp_get_sc_object $P5015, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5014, $P5015
    set $P5013, $P5014["$RETURN_USED"]
    unless_null $P5013, fallback4824
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5013, $P5016
  fallback4824:
    unless_null $P5013, vivi_15384825
    die "Contextual $*RETURN_USED not found"
    box $P5017, "Contextual $*RETURN_USED not found"
    set $P5013, $P5017
  vivi_15384825:
    set $P5012, $P5013
  fallback4823:
    set $P5021, $P5012
    unless $P5012 goto if1537_end4822 
.annotate 'line', 2391
.annotate 'line', 2392
    set $P5018, $P101[1]
    unless_null $P5018, fallback4826
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5018, $P5019
  fallback4826:
    $P5020 = "&wrap_return_handler"($P5018)
    set $P101[1], $P5020
    set $P5021, $P5020
  if1537_end4822:
    set $P5022, $P5021
  if1536_end4816:
    set $P5023, $P101["signature_has_invocant"]
    unless_null $P5023, fallback4829
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5023, $P5024
  fallback4829:
    set $P5040, $P5023
    if $P5023 goto unless1539_end4828 
.annotate 'line', 2397
.annotate 'line', 2398
    set $P5025, $P101[0]
    unless_null $P5025, fallback4830
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5025, $P5026
  fallback4830:
    nqp_get_sc_object $P5030, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback4831
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5027, $P5031
  fallback4831:
    find_dynamic_lex $P5032, "$*PACKAGE"
    unless_null $P5032, fallback4832
    nqp_get_sc_object $P5035, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5034, $P5035
    set $P5033, $P5034["$PACKAGE"]
    unless_null $P5033, fallback4833
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5033, $P5036
  fallback4833:
    unless_null $P5033, vivi_15404834
    die "Contextual $*PACKAGE not found"
    box $P5037, "Contextual $*PACKAGE not found"
    set $P5033, $P5037
  vivi_15404834:
    set $P5032, $P5033
  fallback4832:
    $P5038 = $P5027."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"), $P5032 :named("returns"))
    $P5039 = $P5025."unshift"($P5038)
    set $P5040, $P5039
  unless1539_end4828:
.annotate 'line', 2403
    $P5041 = $P101."symbol"("self", "lexical" :named("scope"))
    unless_null _lex_param_1, fallback4837
    nqp_get_sc_object $P5043, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5043
  fallback4837:
    set $P5042, _lex_param_1["deflongname"]
    unless_null $P5042, fallback4838
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5042, $P5044
  fallback4838:
    set $P5047, $P5042
    unless $P5042 goto if1541_end4836 
    .const 'Sub' $P5045 = 'cuid_457_1347804164.33' 
    capture_lex $P5045
    $P5046 = $P5045()
    set $P5047, $P5046
  if1541_end4836:
.annotate 'line', 2426
    nqp_get_sc_object $P5051, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5050, $P5051, "QAST"
    get_who $P5049, $P5050
    set $P5048, $P5049["Op"]
    unless_null $P5048, fallback4877
    nqp_get_sc_object $P5052, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5048, $P5052
  fallback4877:
    $P5053 = $P5048."new"($P101, "takeclosure" :named("op"))
    set $P102, $P5053
    set $P102["sink"], $P101
    set $P102["block_past"], $P101
    set $P5054, $P101["code_obj"]
    unless_null $P5054, fallback4878
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5054, $P5055
  fallback4878:
    set $P102["code_obj"], $P5054
.annotate 'line', 2430
    $P5056 = _lex_param_1."!make"($P102)
    unless_null _lex_param_1, fallback4881
    nqp_get_sc_object $P5058, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5058
  fallback4881:
    set $P5057, _lex_param_1["trait"]
    unless_null $P5057, fallback4882
    nqp_get_sc_object $P5059, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5057, $P5059
  fallback4882:
    set $P5068, $P5057
    unless $P5057 goto if1554_end4880 
.annotate 'line', 2431
    unless_null _lex_param_1, fallback4883
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5064
  fallback4883:
    set $P5063, _lex_param_1["trait"]
    unless_null $P5063, fallback4884
    nqp_get_sc_object $P5065, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5063, $P5065
  fallback4884:
    set $P5060, $P5063
    iter $P5062, $P5063
  for_next4885:
    unless $P5062, for_done4887
    shift $P5067, $P5062
  for_redo4886:
    .const 'Sub' $P5066 = 'cuid_458_1347804164.33' 
    capture_lex $P5066
    $P5060 = $P5066($P5067)
    goto for_next4885
  for_done4887:
    set $P5068, $P5060
  if1554_end4880:
    .return ($P5068) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_457_1347804164.33") :anon :lex :outer("cuid_303_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2406
    .lex "$name", $P101 
    .lex "$meta_meth", $P102 
    .lex "$is_dispatcher", $P103 
    .lex "$code", $P104 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P104, $P5004
    find_lex $P5006, "$/"
    unless_null $P5006, fallback4839
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5007
  fallback4839:
    set $P5005, $P5006["private"]
    unless_null $P5005, fallback4840
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5005, $P5008
  fallback4840:
    set $S5002, $P5005
.annotate 'line', 2408
    find_lex $P5011, "$/"
    unless_null $P5011, fallback4841
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5012
  fallback4841:
    set $P5010, $P5011["deflongname"]
    unless_null $P5010, fallback4842
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5013
  fallback4842:
    set $P5009, $P5010[0]
    unless_null $P5009, fallback4843
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5014
  fallback4843:
    $P5015 = $P5009."ast"()
    set $S5003, $P5015
    concat $S5001, $S5002, $S5003
    box $P5016, $S5001
    set $P101, $P5016
.annotate 'line', 2409
    find_lex $P5017, "$past"
    $P5018 = $P5017."name"($P101)
    find_dynamic_lex $P5019, "$*MULTINESS"
    unless_null $P5019, fallback4846
    nqp_get_sc_object $P5022, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5021, $P5022
    set $P5020, $P5021["$MULTINESS"]
    unless_null $P5020, fallback4847
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5020, $P5023
  fallback4847:
    unless_null $P5020, vivi_15434848
    die "Contextual $*MULTINESS not found"
    box $P5024, "Contextual $*MULTINESS not found"
    set $P5020, $P5024
  vivi_15434848:
    set $P5019, $P5020
  fallback4846:
    set $S5004, $P5019
    iseq $I5001, $S5004, "multi"
    unless $I5001 goto if1542_else4844 
    set $S5005, "add_multi_method"
    goto if1542_end4845
  if1542_else4844:
    set $S5005, "add_method"
  if1542_end4845:
    box $P5025, $S5005
    set $P102, $P5025
    find_dynamic_lex $P5026, "$*MULTINESS"
    unless_null $P5026, fallback4849
    nqp_get_sc_object $P5029, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5028, $P5029
    set $P5027, $P5028["$MULTINESS"]
    unless_null $P5027, fallback4850
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5027, $P5030
  fallback4850:
    unless_null $P5027, vivi_15444851
    die "Contextual $*MULTINESS not found"
    box $P5031, "Contextual $*MULTINESS not found"
    set $P5027, $P5031
  vivi_15444851:
    set $P5026, $P5027
  fallback4849:
    set $S5006, $P5026
    iseq $I5002, $S5006, "proto"
    box $P5032, $I5002
    set $P103, $P5032
.annotate 'line', 2414
    find_dynamic_lex $P5033, "$*W"
    unless_null $P5033, fallback4852
    nqp_get_sc_object $P5036, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5035, $P5036
    set $P5034, $P5035["$W"]
    unless_null $P5034, fallback4853
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5034, $P5037
  fallback4853:
    unless_null $P5034, vivi_15454854
    die "Contextual $*W not found"
    box $P5038, "Contextual $*W not found"
    set $P5034, $P5038
  vivi_15454854:
    set $P5033, $P5034
  fallback4852:
    find_lex $P5039, "$past"
    $P5040 = $P5033."create_code"($P5039, $P101, $P103)
    set $P104, $P5040
    find_dynamic_lex $P5041, "$*MULTINESS"
    unless_null $P5041, fallback4857
    nqp_get_sc_object $P5044, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5043, $P5044
    set $P5042, $P5043["$MULTINESS"]
    unless_null $P5042, fallback4858
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5042, $P5045
  fallback4858:
    unless_null $P5042, vivi_15474859
    die "Contextual $*MULTINESS not found"
    box $P5046, "Contextual $*MULTINESS not found"
    set $P5042, $P5046
  vivi_15474859:
    set $P5041, $P5042
  fallback4857:
    set $S5007, $P5041
    iseq $I5003, $S5007, "multi"
    box $P5050, $I5003
    set $P5049, $P5050
    unless $I5003 goto if1546_end4856 
.annotate 'line', 2415
    find_lex $P5047, "$past"
    $P5048 = "&attach_multi_signature"($P104, $P5047)
    set $P5049, $P5048
  if1546_end4856:
.annotate 'line', 2416
    find_dynamic_lex $P5051, "$*W"
    unless_null $P5051, fallback4860
    nqp_get_sc_object $P5054, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5053, $P5054
    set $P5052, $P5053["$W"]
    unless_null $P5052, fallback4861
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5052, $P5055
  fallback4861:
    unless_null $P5052, vivi_15484862
    die "Contextual $*W not found"
    box $P5056, "Contextual $*W not found"
    set $P5052, $P5056
  vivi_15484862:
    set $P5051, $P5052
  fallback4860:
    find_dynamic_lex $P5057, "$*PACKAGE"
    unless_null $P5057, fallback4863
    nqp_get_sc_object $P5060, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5059, $P5060
    set $P5058, $P5059["$PACKAGE"]
    unless_null $P5058, fallback4864
    nqp_get_sc_object $P5061, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5058, $P5061
  fallback4864:
    unless_null $P5058, vivi_15494865
    die "Contextual $*PACKAGE not found"
    box $P5062, "Contextual $*PACKAGE not found"
    set $P5058, $P5062
  vivi_15494865:
    set $P5057, $P5058
  fallback4863:
    $P5063 = $P5051."pkg_add_method"($P5057, $P102, $P101, $P104)
    find_lex $P5064, "$past"
    set $P5064["code_obj"], $P104
    find_dynamic_lex $P5065, "$*SCOPE"
    unless_null $P5065, fallback4868
    nqp_get_sc_object $P5068, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5067, $P5068
    set $P5066, $P5067["$SCOPE"]
    unless_null $P5066, fallback4869
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5066, $P5069
  fallback4869:
    unless_null $P5066, vivi_15514870
    die "Contextual $*SCOPE not found"
    box $P5070, "Contextual $*SCOPE not found"
    set $P5066, $P5070
  vivi_15514870:
    set $P5065, $P5066
  fallback4868:
    set $S5008, $P5065
    iseq $I5004, $S5008, "our"
    box $P5086, $I5004
    set $P5085, $P5086
    unless $I5004 goto if1550_end4867 
.annotate 'line', 2420
.annotate 'line', 2421
    find_dynamic_lex $P5071, "$*W"
    unless_null $P5071, fallback4871
    nqp_get_sc_object $P5074, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5073, $P5074
    set $P5072, $P5073["$W"]
    unless_null $P5072, fallback4872
    nqp_get_sc_object $P5075, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5072, $P5075
  fallback4872:
    unless_null $P5072, vivi_15524873
    die "Contextual $*W not found"
    box $P5076, "Contextual $*W not found"
    set $P5072, $P5076
  vivi_15524873:
    set $P5071, $P5072
  fallback4871:
    find_dynamic_lex $P5077, "$*PACKAGE"
    unless_null $P5077, fallback4874
    nqp_get_sc_object $P5080, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5079, $P5080
    set $P5078, $P5079["$PACKAGE"]
    unless_null $P5078, fallback4875
    nqp_get_sc_object $P5081, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5078, $P5081
  fallback4875:
    unless_null $P5078, vivi_15534876
    die "Contextual $*PACKAGE not found"
    box $P5082, "Contextual $*PACKAGE not found"
    set $P5078, $P5082
  vivi_15534876:
    set $P5077, $P5078
  fallback4874:
    find_lex $P5083, "$past"
    $P5084 = $P5071."install_package_routine"($P5077, $P101, $P5083)
    set $P5085, $P5084
  if1550_end4867:
    .return ($P5085) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_458_1347804164.33") :anon :lex :outer("cuid_303_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2432
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$/"
    $P5001 = _lex_param_0."ast"()
    $P5003 = $P5001($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "signature" :subid("cuid_304_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2464
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5026 = 'cuid_459_1347804164.33' 
    capture_lex $P5026 
    .const 'Sub' $P5026 = 'cuid_460_1347804164.33' 
    capture_lex $P5026 
    .lex "$BLOCK", $P101 
    .lex "$BLOCKINIT", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
.annotate 'line', 2465
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback4888
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback4889
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5007
  fallback4889:
    unless_null $P5004, vivi_15554890
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15554890:
    set $P5003, $P5004
  fallback4888:
    $P5009 = $P5003."cur_lexpad"()
    set $P101, $P5009
    set $P5010, $P101[0]
    unless_null $P5010, fallback4891
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5011
  fallback4891:
    set $P102, $P5010
    unless_null _lex_param_1, fallback4894
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5013
  fallback4894:
    set $P5012, _lex_param_1["invocant"]
    unless_null $P5012, fallback4895
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5012, $P5014
  fallback4895:
    set $P5017, $P5012
    unless $P5012 goto if1556_end4893 
    .const 'Sub' $P5015 = 'cuid_459_1347804164.33' 
    capture_lex $P5015
    $P5016 = $P5015()
    set $P5017, $P5016
  if1556_end4893:
    unless_null _lex_param_1, fallback4902
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5022
  fallback4902:
    set $P5021, _lex_param_1["parameter"]
    unless_null $P5021, fallback4903
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5021, $P5023
  fallback4903:
    set $P5018, $P5021
    iter $P5020, $P5021
  for_next4904:
    unless $P5020, for_done4906
    shift $P5025, $P5020
  for_redo4905:
    .const 'Sub' $P5024 = 'cuid_460_1347804164.33' 
    capture_lex $P5024
    $P5018 = $P5024($P5025)
    goto for_next4904
  for_done4906:
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_459_1347804164.33") :anon :lex :outer("cuid_304_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2467
    .lex "$inv", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 2468
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4896
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5005
  fallback4896:
    set $P5003, $P5004["invocant"]
    unless_null $P5003, fallback4897
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5006
  fallback4897:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback4898
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5007
  fallback4898:
    $P5008 = $P5002."ast"()
    set $P101, $P5008
.annotate 'line', 2469
    find_lex $P5009, "$BLOCKINIT"
    $P5010 = $P5009."push"($P101)
.annotate 'line', 2470
    find_lex $P5011, "$BLOCKINIT"
    nqp_get_sc_object $P5015, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Op"]
    unless_null $P5012, fallback4899
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5012, $P5016
  fallback4899:
.annotate 'line', 2472
    nqp_get_sc_object $P5020, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Var"]
    unless_null $P5017, fallback4900
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5017, $P5021
  fallback4900:
    $P5022 = $P5017."new"("self" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
.annotate 'line', 2473
    nqp_get_sc_object $P5026, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["Var"]
    unless_null $P5023, fallback4901
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5023, $P5027
  fallback4901:
    $P5028 = $P101."name"()
    $P5029 = $P5023."new"("lexical" :named("scope"), $P5028 :named("name"))
    $P5030 = $P5012."new"($P5022, $P5029, "bind" :named("op"))
    $P5031 = $P5011."push"($P5030)
    find_lex $P5032, "$BLOCK"
    box $P5033, 1
    set $P5032["signature_has_invocant"], $P5033
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_460_1347804164.33") :anon :lex :outer("cuid_304_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2477
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$BLOCKINIT"
    $P5002 = _lex_param_0."ast"()
    $P5003 = $P5001."push"($P5002)
    .return ($P5003) 
.end
.HLL "nqp"
.namespace []
.sub "parameter" :subid("cuid_305_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2480
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5102 = 'cuid_462_1347804164.33' 
    capture_lex $P5102 
    .lex "$quant", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback4907
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5004
  fallback4907:
    set $P5003, _lex_param_1["quant"]
    unless_null $P5003, fallback4908
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5005
  fallback4908:
    set $P101, $P5003
    unless_null _lex_param_1, fallback4911
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5007
  fallback4911:
    set $P5006, _lex_param_1["named_param"]
    unless_null $P5006, fallback4912
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5008
  fallback4912:
    unless $P5006 goto if1557_else4909 
.annotate 'line', 2483
.annotate 'line', 2484
    unless_null _lex_param_1, fallback4913
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5010
  fallback4913:
    set $P5009, _lex_param_1["named_param"]
    unless_null $P5009, fallback4914
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5011
  fallback4914:
    $P5012 = $P5009."ast"()
    set $P102, $P5012
    set $S5001, $P101
    isne $I5001, $S5001, "!"
    box $P5023, $I5001
    set $P5022, $P5023
    unless $I5001 goto if1558_end4916 
.annotate 'line', 2485
.annotate 'line', 2486
    unless_null _lex_param_1, fallback4917
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5016
  fallback4917:
    set $P5015, _lex_param_1["named_param"]
    unless_null $P5015, fallback4918
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5015, $P5017
  fallback4918:
    set $P5014, $P5015["param_var"]
    unless_null $P5014, fallback4919
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5014, $P5018
  fallback4919:
    set $P5013, $P5014["sigil"]
    unless_null $P5013, fallback4920
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5013, $P5019
  fallback4920:
    $P5020 = "&default_for"($P5013)
    $P5021 = $P102."default"($P5020)
    set $P5022, $P5021
  if1558_end4916:
    set $P5045, $P5022
    goto if1557_end4910
  if1557_else4909:
.annotate 'line', 2489
.annotate 'line', 2490
    unless_null _lex_param_1, fallback4921
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5025
  fallback4921:
    set $P5024, _lex_param_1["param_var"]
    unless_null $P5024, fallback4922
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5024, $P5026
  fallback4922:
    $P5027 = $P5024."ast"()
    set $P102, $P5027
    set $S5002, $P101
    iseq $I5002, $S5002, "*"
    unless $I5002 goto if1559_else4923 
.annotate 'line', 2491
.annotate 'line', 2492
    $P5028 = $P102."slurpy"(1)
.annotate 'line', 2493
    unless_null _lex_param_1, fallback4925
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5031
  fallback4925:
    set $P5030, _lex_param_1["param_var"]
    unless_null $P5030, fallback4926
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5030, $P5032
  fallback4926:
    set $P5029, $P5030["sigil"]
    unless_null $P5029, fallback4927
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5029, $P5033
  fallback4927:
    set $S5003, $P5029
    iseq $I5003, $S5003, "%"
    $P5034 = $P102."named"($I5003)
    set $P5044, $P5034
    goto if1559_end4924
  if1559_else4923:
    set $S5004, $P101
    iseq $I5004, $S5004, "?"
    box $P5043, $I5004
    set $P5042, $P5043
    unless $I5004 goto if1560_end4929 
.annotate 'line', 2495
.annotate 'line', 2496
    unless_null _lex_param_1, fallback4930
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5037
  fallback4930:
    set $P5036, _lex_param_1["param_var"]
    unless_null $P5036, fallback4931
    nqp_get_sc_object $P5038, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5036, $P5038
  fallback4931:
    set $P5035, $P5036["sigil"]
    unless_null $P5035, fallback4932
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5035, $P5039
  fallback4932:
    $P5040 = "&default_for"($P5035)
    $P5041 = $P102."default"($P5040)
    set $P5042, $P5041
  if1560_end4929:
    set $P5044, $P5042
  if1559_end4924:
    set $P5045, $P5044
  if1557_end4910:
    unless_null _lex_param_1, fallback4935
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5047
  fallback4935:
    set $P5046, _lex_param_1["default_value"]
    unless_null $P5046, fallback4936
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5046, $P5048
  fallback4936:
    set $P5066, $P5046
    unless $P5046 goto if1561_end4934 
.annotate 'line', 2499
    set $S5005, $P101
    iseq $I5005, $S5005, "*"
    box $P5052, $I5005
    set $P5051, $P5052
    unless $I5005 goto if1562_end4938 
.annotate 'line', 2500
.annotate 'line', 2501
    $P5049 = _lex_param_1."CURSOR"()
    $P5050 = $P5049."panic"("Can't put default on slurpy parameter")
    set $P5051, $P5050
  if1562_end4938:
    set $S5006, $P101
    iseq $I5006, $S5006, "!"
    box $P5056, $I5006
    set $P5055, $P5056
    unless $I5006 goto if1563_end4940 
.annotate 'line', 2503
.annotate 'line', 2504
    $P5053 = _lex_param_1."CURSOR"()
    $P5054 = $P5053."panic"("Can't put default on required parameter")
    set $P5055, $P5054
  if1563_end4940:
.annotate 'line', 2506
    unless_null _lex_param_1, fallback4941
    nqp_get_sc_object $P5060, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5060
  fallback4941:
    set $P5059, _lex_param_1["default_value"]
    unless_null $P5059, fallback4942
    nqp_get_sc_object $P5061, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5059, $P5061
  fallback4942:
    set $P5058, $P5059[0]
    unless_null $P5058, fallback4943
    nqp_get_sc_object $P5062, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5058, $P5062
  fallback4943:
    set $P5057, $P5058["EXPR"]
    unless_null $P5057, fallback4944
    nqp_get_sc_object $P5063, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5057, $P5063
  fallback4944:
    $P5064 = $P5057."ast"()
    $P5065 = $P102."default"($P5064)
    set $P5066, $P5065
  if1561_end4934:
.annotate 'line', 2508
    $P5067 = $P102."default"()
    set $P5084, $P5067
    if $P5067 goto unless1564_end4946 
    find_dynamic_lex $P5068, "$*W"
    unless_null $P5068, fallback4947
    nqp_get_sc_object $P5071, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5070, $P5071
    set $P5069, $P5070["$W"]
    unless_null $P5069, fallback4948
    nqp_get_sc_object $P5072, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5069, $P5072
  fallback4948:
    unless_null $P5069, vivi_15654949
    die "Contextual $*W not found"
    box $P5073, "Contextual $*W not found"
    set $P5069, $P5073
  vivi_15654949:
    set $P5068, $P5069
  fallback4947:
    $P5074 = $P5068."cur_lexpad"()
    find_dynamic_lex $P5075, "$*W"
    unless_null $P5075, fallback4950
    nqp_get_sc_object $P5078, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5077, $P5078
    set $P5076, $P5077["$W"]
    unless_null $P5076, fallback4951
    nqp_get_sc_object $P5079, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5076, $P5079
  fallback4951:
    unless_null $P5076, vivi_15664952
    die "Contextual $*W not found"
    box $P5080, "Contextual $*W not found"
    set $P5076, $P5080
  vivi_15664952:
    set $P5075, $P5076
  fallback4950:
    $P5081 = $P5075."cur_lexpad"()
    $P5082 = $P5081."arity"()
    set $N5002, $P5082
    set $N5003, 1
    add $N5001, $N5002, $N5003
    $P5083 = $P5074."arity"($N5001)
    set $P5084, $P5083
  unless1564_end4946:
    unless_null _lex_param_1, fallback4955
    nqp_get_sc_object $P5086, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5086
  fallback4955:
    set $P5085, _lex_param_1["typename"]
    unless_null $P5085, fallback4956
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5085, $P5087
  fallback4956:
    set $P5090, $P5085
    unless $P5085 goto if1567_end4954 
    .const 'Sub' $P5088 = 'cuid_462_1347804164.33' 
    capture_lex $P5088
    $P5089 = $P5088()
    set $P5090, $P5089
  if1567_end4954:
    unless_null _lex_param_1, fallback4973
    nqp_get_sc_object $P5092, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5092
  fallback4973:
    set $P5091, _lex_param_1["definedness"]
    unless_null $P5091, fallback4974
    nqp_get_sc_object $P5093, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5091, $P5093
  fallback4974:
    set $P5100, $P5091
    unless $P5091 goto if1572_end4972 
.annotate 'line', 2523
    unless_null _lex_param_1, fallback4975
    nqp_get_sc_object $P5096, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5096
  fallback4975:
    set $P5095, _lex_param_1["definedness"]
    unless_null $P5095, fallback4976
    nqp_get_sc_object $P5097, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5095, $P5097
  fallback4976:
    set $P5094, $P5095[0]
    unless_null $P5094, fallback4977
    nqp_get_sc_object $P5098, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5094, $P5098
  fallback4977:
    set $S5007, $P5094
    box $P5099, $S5007
    set $P102["definedness"], $P5099
    set $P5100, $P5099
  if1572_end4972:
.annotate 'line', 2527
    $P5101 = _lex_param_1."!make"($P102)
    .return ($P5101) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_462_1347804164.33") :anon :lex :outer("cuid_305_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2511
    .const 'Sub' $P5016 = 'cuid_461_1347804164.33' 
    capture_lex $P5016 
    .lex "$type", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 2512
    find_lex $P5004, "$/"
    unless_null $P5004, fallback4957
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5005
  fallback4957:
    set $P5003, $P5004["typename"]
    unless_null $P5003, fallback4958
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5006
  fallback4958:
    set $P5002, $P5003[0]
    unless_null $P5002, fallback4959
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5007
  fallback4959:
    $P5008 = $P5002."ast"()
    $P5009 = $P5008."value"()
    set $P101, $P5009
.annotate 'line', 2513
    find_lex $P5010, "$past"
    $P5011 = $P5010."returns"($P101)
    repr_get_primitive_type_spec $I5001, $P101
    box $P5015, $I5001
    set $P5014, $P5015
    unless $I5001 goto if1568_end4961 
    .const 'Sub' $P5012 = 'cuid_461_1347804164.33' 
    capture_lex $P5012
    $P5013 = $P5012($P5015)
    set $P5014, $P5013
  if1568_end4961:
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_461_1347804164.33") :anon :lex :outer("cuid_462_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2514
    .param pmc _lex_param_0 
    .lex "$prim", _lex_param_0 
.annotate 'line', 2515
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback4962
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback4963
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5005
  fallback4963:
    unless_null $P5002, vivi_15694964
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_15694964:
    set $P5001, $P5002
  fallback4962:
    $P5007 = $P5001."cur_lexpad"()
    find_lex $P5008, "$past"
    $P5009 = $P5008."name"()
    find_lex $P5010, "$type"
    $P5011 = $P5007."symbol"($P5009, $P5010 :named("type"))
.annotate 'line', 2516
    find_lex $P5012, "$past"
    $P5013 = $P5012."default"()
    set $P5018, $P5013
    unless $P5013 goto if1571_end4968 
    find_lex $P5015, "$/"
    unless_null $P5015, fallback4969
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5015, $P5016
  fallback4969:
    set $P5014, $P5015["default_value"]
    unless_null $P5014, fallback4970
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5014, $P5017
  fallback4970:
    isfalse $I5001, $P5014
    box $P5019, $I5001
    set $P5018, $P5019
  if1571_end4968:
    set $P5023, $P5018
    unless $P5018 goto if1570_end4966 
.annotate 'line', 2517
    find_lex $P5020, "$past"
    $P5021 = "&default_value_for_prim"(_lex_param_0)
    $P5022 = $P5020."default"($P5021)
    set $P5023, $P5022
  if1570_end4966:
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "param_var" :subid("cuid_306_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2530
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    set $S5001, _lex_param_1
    box $P5003, $S5001
    set $P101, $P5003
.annotate 'line', 2532
    nqp_get_sc_object $P5007, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Var"]
    unless_null $P5004, fallback4978
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5008
  fallback4978:
    $P5009 = $P5004."new"($P101 :named("name"), "lexical" :named("scope"), "param" :named("decl"), _lex_param_1 :named("node"))
    set $P102, $P5009
.annotate 'line', 2534
    find_dynamic_lex $P5010, "$*W"
    unless_null $P5010, fallback4979
    nqp_get_sc_object $P5013, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5012, $P5013
    set $P5011, $P5012["$W"]
    unless_null $P5011, fallback4980
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5014
  fallback4980:
    unless_null $P5011, vivi_15734981
    die "Contextual $*W not found"
    box $P5015, "Contextual $*W not found"
    set $P5011, $P5015
  vivi_15734981:
    set $P5010, $P5011
  fallback4979:
    $P5016 = $P5010."cur_lexpad"()
    $P5017 = $P5016."symbol"($P101, "lexical" :named("scope"))
.annotate 'line', 2535
    $P5018 = _lex_param_1."!make"($P102)
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "named_param" :subid("cuid_307_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2538
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 2539
    unless_null _lex_param_1, fallback4982
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5003
  fallback4982:
    set $P5002, _lex_param_1["param_var"]
    unless_null $P5002, fallback4983
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5004
  fallback4983:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2540
    unless_null _lex_param_1, fallback4984
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5008
  fallback4984:
    set $P5007, _lex_param_1["param_var"]
    unless_null $P5007, fallback4985
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5009
  fallback4985:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback4986
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5010
  fallback4986:
    set $S5001, $P5006
    $P5011 = $P101."named"($S5001)
.annotate 'line', 2541
    $P5012 = _lex_param_1."!make"($P101)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "typename" :subid("cuid_308_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2544
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5017 = 'cuid_463_1347804164.33' 
    capture_lex $P5017 
    .lex "@name", $P101 
    .lex "$found", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
.annotate 'line', 2548
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5005, $P5006, "HLL"
    get_who $P5004, $P5005
    set $P5003, $P5004["Compiler"]
    unless_null $P5003, fallback4987
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5007
  fallback4987:
    set $S5001, _lex_param_1
    $P5008 = $P5003."parse_name"($S5001)
    set $P101, $P5008
    box $P5009, 0
    set $P102, $P5009
    new $P5012, 'ExceptionHandler'
    set_label $P5012, catch_handler_15764993
    $P5012.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5012
    .const 'Sub' $P5010 = 'cuid_463_1347804164.33' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5013, $P5011
    pop_eh 
    goto skip_handler_15754992
  catch_handler_15764993:
    .get_results ($P5012) 
    set $I10001, 1
    set $P5012["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    finalize $P5012
    pop_upto_eh $P5012
    pop_eh 
    set $P5013, $P10001
    goto skip_handler_15754992
  skip_handler_15754992:
    set $P5016, $P102
    if $P102 goto unless1577_end4995 
.annotate 'line', 2555
.annotate 'line', 2556
    $P5014 = _lex_param_1."CURSOR"()
    set $S5004, _lex_param_1
    concat $S5003, "Use of undeclared type '", $S5004
    concat $S5002, $S5003, "'"
    $P5015 = $P5014."panic"($S5002)
    set $P5016, $P5015
  unless1577_end4995:
    .return ($P5016) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_463_1347804164.33") :anon :lex :outer("cuid_308_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2550
    .lex "$sym", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 2551
    find_dynamic_lex $P5002, "$*W"
    unless_null $P5002, fallback4988
    nqp_get_sc_object $P5005, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5004, $P5005
    set $P5003, $P5004["$W"]
    unless_null $P5003, fallback4989
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5006
  fallback4989:
    unless_null $P5003, vivi_15744990
    die "Contextual $*W not found"
    box $P5007, "Contextual $*W not found"
    set $P5003, $P5007
  vivi_15744990:
    set $P5002, $P5003
  fallback4988:
    find_lex $P5008, "@name"
    $P5009 = $P5002."find_sym"($P5008)
    set $P101, $P5009
.annotate 'line', 2552
    find_dynamic_lex $P5010, "$/"
    nqp_get_sc_object $P5014, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["WVal"]
    unless_null $P5011, fallback4991
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5015
  fallback4991:
    $P5016 = $P5011."new"($P101 :named("value"))
    $P5017 = $P5010."!make"($P5016)
    box $P5018, 1
    store_lex "$found", $P5018
    .return ($P5018) 
.end
.HLL "nqp"
.namespace []
.sub "trait" :subid("cuid_309_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2560
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2561
    unless_null _lex_param_1, fallback4996
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback4996:
    set $P5001, _lex_param_1["trait_mod"]
    unless_null $P5001, fallback4997
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback4997:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "trait_mod:sym<is>" :subid("cuid_310_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2564
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5018 = 'cuid_465_1347804164.33' 
    capture_lex $P5018 
    .const 'Sub' $P5018 = 'cuid_467_1347804164.33' 
    capture_lex $P5018 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5000
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback5000:
    set $P5001, _lex_param_1["longname"]
    unless_null $P5001, fallback5001
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback5001:
    set $S5001, $P5001
    iseq $I5001, $S5001, "parrot_vtable"
    unless $I5001 goto if1578_else4998 
    .const 'Sub' $P5004 = 'cuid_465_1347804164.33' 
    capture_lex $P5004
    $P5005 = $P5004()
    set $P5017, $P5005
    goto if1578_end4999
  if1578_else4998:
    unless_null _lex_param_1, fallback5025
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5007
  fallback5025:
    set $P5006, _lex_param_1["longname"]
    unless_null $P5006, fallback5026
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5008
  fallback5026:
    set $S5002, $P5006
    iseq $I5002, $S5002, "parrot_vtable_handler"
    unless $I5002 goto if1584_else5023 
    .const 'Sub' $P5009 = 'cuid_467_1347804164.33' 
    capture_lex $P5009
    $P5010 = $P5009()
    set $P5016, $P5010
    goto if1584_end5024
  if1584_else5023:
.annotate 'line', 2590
.annotate 'line', 2591
    $P5011 = _lex_param_1."CURSOR"()
    unless_null _lex_param_1, fallback5040
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5013
  fallback5040:
    set $P5012, _lex_param_1["longname"]
    unless_null $P5012, fallback5041
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5012, $P5014
  fallback5041:
    set $S5005, $P5012
    concat $S5004, "Trait '", $S5005
    concat $S5003, $S5004, "' not implemented"
    $P5015 = $P5011."panic"($S5003)
    set $P5016, $P5015
  if1584_end5024:
    set $P5017, $P5016
  if1578_end4999:
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_465_1347804164.33") :anon :lex :outer("cuid_310_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2565
    .const 'Sub' $P5040 = 'cuid_464_1347804164.33' 
    capture_lex $P5040 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    .lex "$is_dispatcher", $P104 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P103, $P5003
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P104, $P5004
.annotate 'line', 2567
    find_lex $P5007, "$/"
    unless_null $P5007, fallback5002
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5008
  fallback5002:
    set $P5006, $P5007["circumfix"]
    unless_null $P5006, fallback5003
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5009
  fallback5003:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5004
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5005, $P5010
  fallback5004:
    $P5011 = $P5005."ast"()
    set $P101, $P5011
.annotate 'line', 2569
    nqp_get_sc_object $P5015, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["SVal"]
    unless_null $P5012, fallback5007
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5012, $P5016
  fallback5007:
    $P5017 = $P5012."ACCEPTS"($P101)
    set $P5021, $P5017
    if $P5017 goto unless1579_end5006 
.annotate 'line', 2568
    find_lex $P5018, "$/"
    $P5019 = $P5018."CURSOR"()
    $P5020 = $P5019."panic"("Trait 'parrot_vtable' requires constant scalar argument")
    set $P5021, $P5020
  unless1579_end5006:
.annotate 'line', 2570
    $P5022 = $P101."value"()
    set $P102, $P5022
    find_dynamic_lex $P5023, "$*PACKAGE"
    unless_null $P5023, fallback5008
    nqp_get_sc_object $P5026, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5025, $P5026
    set $P5024, $P5025["$PACKAGE"]
    unless_null $P5024, fallback5009
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5024, $P5027
  fallback5009:
    unless_null $P5024, vivi_15805010
    die "Contextual $*PACKAGE not found"
    box $P5028, "Contextual $*PACKAGE not found"
    set $P5024, $P5028
  vivi_15805010:
    set $P5023, $P5024
  fallback5008:
    set $P103, $P5023
    find_dynamic_lex $P5029, "$*SCOPE"
    unless_null $P5029, fallback5011
    nqp_get_sc_object $P5032, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5031, $P5032
    set $P5030, $P5031["$SCOPE"]
    unless_null $P5030, fallback5012
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5030, $P5033
  fallback5012:
    unless_null $P5030, vivi_15815013
    die "Contextual $*SCOPE not found"
    box $P5034, "Contextual $*SCOPE not found"
    set $P5030, $P5034
  vivi_15815013:
    set $P5029, $P5030
  fallback5011:
    set $S5001, $P5029
    iseq $I5001, $S5001, "proto"
    box $P5035, $I5001
    set $P104, $P5035
.annotate 'line', 2573
    find_dynamic_lex $P5036, "$/"
    .const 'Sub' $P5038 = 'cuid_464_1347804164.33' 
    capture_lex $P5038
    newclosure $P5037, $P5038
    $P5039 = $P5036."!make"($P5037)
    .return ($P5039) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_464_1347804164.33") :anon :lex :outer("cuid_465_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2573
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2574
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5014
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5015
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5005
  fallback5015:
    unless_null $P5002, vivi_15825016
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_15825016:
    set $P5001, $P5002
  fallback5014:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
.annotate 'line', 2575
    $P5011 = _lex_param_0."ast"()
    set $P5010, $P5011["code_obj"]
    unless_null $P5010, fallback5018
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5012
  fallback5018:
    set $P5009, $P5010
    defined $I5001, $P5009
    if $I5001, defor5017
.annotate 'line', 2576
    find_dynamic_lex $P5013, "$*W"
    unless_null $P5013, fallback5019
    nqp_get_sc_object $P5016, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5015, $P5016
    set $P5014, $P5015["$W"]
    unless_null $P5014, fallback5020
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5014, $P5017
  fallback5020:
    unless_null $P5014, vivi_15835021
    die "Contextual $*W not found"
    box $P5018, "Contextual $*W not found"
    set $P5014, $P5018
  vivi_15835021:
    set $P5013, $P5014
  fallback5019:
    $P5020 = _lex_param_0."ast"()
    set $P5019, $P5020["block_past"]
    unless_null $P5019, fallback5022
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5019, $P5021
  fallback5022:
    find_lex $P5022, "$name"
    find_lex $P5023, "$is_dispatcher"
    $P5024 = $P5013."create_code"($P5019, $P5022, $P5023)
    set $P5009, $P5024
  defor5017:
    $P5025 = $P5001."pkg_add_method"($P5007, "add_parrot_vtable_mapping", $P5008, $P5009)
    .return ($P5025) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_467_1347804164.33") :anon :lex :outer("cuid_310_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2579
    .const 'Sub' $P5032 = 'cuid_466_1347804164.33' 
    capture_lex $P5032 
    .lex "$cpast", $P101 
    .lex "$name", $P102 
    .lex "$package", $P103 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P103, $P5003
.annotate 'line', 2581
    find_lex $P5006, "$/"
    unless_null $P5006, fallback5027
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5007
  fallback5027:
    set $P5005, $P5006["circumfix"]
    unless_null $P5005, fallback5028
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5005, $P5008
  fallback5028:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback5029
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5009
  fallback5029:
    $P5010 = $P5004."ast"()
    set $P101, $P5010
.annotate 'line', 2583
    nqp_get_sc_object $P5014, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5032
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5015
  fallback5032:
    $P5016 = $P5011."ACCEPTS"($P101)
    set $P5020, $P5016
    if $P5016 goto unless1585_end5031 
.annotate 'line', 2582
    find_lex $P5017, "$/"
    $P5018 = $P5017."CURSOR"()
    $P5019 = $P5018."panic"("Trait 'parrot_vtable_handler' requires constant scalar argument")
    set $P5020, $P5019
  unless1585_end5031:
.annotate 'line', 2584
    $P5021 = $P101."value"()
    set $P102, $P5021
    find_dynamic_lex $P5022, "$*PACKAGE"
    unless_null $P5022, fallback5033
    nqp_get_sc_object $P5025, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5024, $P5025
    set $P5023, $P5024["$PACKAGE"]
    unless_null $P5023, fallback5034
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5023, $P5026
  fallback5034:
    unless_null $P5023, vivi_15865035
    die "Contextual $*PACKAGE not found"
    box $P5027, "Contextual $*PACKAGE not found"
    set $P5023, $P5027
  vivi_15865035:
    set $P5022, $P5023
  fallback5033:
    set $P103, $P5022
.annotate 'line', 2586
    find_dynamic_lex $P5028, "$/"
    .const 'Sub' $P5030 = 'cuid_466_1347804164.33' 
    capture_lex $P5030
    newclosure $P5029, $P5030
    $P5031 = $P5028."!make"($P5029)
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_466_1347804164.33") :anon :lex :outer("cuid_467_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2586
    .param pmc _lex_param_0 
    .lex "$match", _lex_param_0 
.annotate 'line', 2587
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5036
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5037
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5005
  fallback5037:
    unless_null $P5002, vivi_15875038
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_15875038:
    set $P5001, $P5002
  fallback5036:
    find_lex $P5007, "$package"
    find_lex $P5008, "$name"
    set $P5009, _lex_param_0["variable"]
    unless_null $P5009, fallback5039
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5010
  fallback5039:
    set $S5001, $P5009
    $P5011 = $P5001."pkg_add_parrot_vtable_handler_mapping"($P5007, $P5008, $S5001)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "regex_declarator" :subid("cuid_311_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2595
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .param pmc _lex_param_2 :optional 
    .param int haz_param_4 :opt_flag 
    .const 'Sub' $P5052 = 'cuid_468_1347804164.33' 
    capture_lex $P5052 
    .const 'Sub' $P5052 = 'cuid_469_1347804164.33' 
    capture_lex $P5052 
    if haz_param_4, default5101
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_2, $P5051
  default5101:
    .lex "$name", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .lex "$key", _lex_param_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
.annotate 'line', 2596
    unless_null _lex_param_1, fallback5042
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5004
  fallback5042:
    set $P5003, _lex_param_1["deflongname"]
    unless_null $P5003, fallback5043
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5005
  fallback5043:
    $P5006 = $P5003."ast"()
    set $S5001, $P5006
    box $P5007, $S5001
    set $P101, $P5007
    unless_null _lex_param_1, fallback5046
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5009
  fallback5046:
    set $P5008, _lex_param_1["proto"]
    unless_null $P5008, fallback5047
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5010
  fallback5047:
    unless $P5008 goto if1588_else5044 
.annotate 'line', 2598
.annotate 'line', 2600
    nqp_get_sc_object $P5014, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Stmts"]
    unless_null $P5011, fallback5048
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5015
  fallback5048:
.annotate 'line', 2601
    nqp_get_sc_object $P5019, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5018, $P5019, "QAST"
    get_who $P5017, $P5018
    set $P5016, $P5017["Block"]
    unless_null $P5016, fallback5049
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5016, $P5020
  fallback5049:
.annotate 'line', 2603
    nqp_get_sc_object $P5024, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5050
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5021, $P5025
  fallback5050:
.annotate 'line', 2604
    nqp_get_sc_object $P5029, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5051
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5026, $P5030
  fallback5051:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "param" :named("decl"))
.annotate 'line', 2605
    nqp_get_sc_object $P5035, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["SVal"]
    unless_null $P5032, fallback5052
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5032, $P5036
  fallback5052:
    $P5037 = $P5032."new"($P101 :named("value"))
    $P5038 = $P5021."new"($P5031, $P5037, "!protoregex" :named("name"), "callmethod" :named("op"))
    $P5039 = $P5016."new"($P5038, $P101 :named("name"), "declaration" :named("blocktype"), _lex_param_1 :named("node"))
    $P5040 = $P5011."new"($P5039)
    set $P102, $P5040
    $P5044 = $P102."list"()
    set $P5041, $P5044
    iter $P5043, $P5044
  for_next5062:
    unless $P5043, for_done5064
    shift $P5046, $P5043
  for_redo5063:
    .const 'Sub' $P5045 = 'cuid_468_1347804164.33' 
    capture_lex $P5045
    $P5041 = $P5045($P5046)
    goto for_next5062
  for_done5064:
    set $P5049, $P5041
    goto if1588_end5045
  if1588_else5044:
    .const 'Sub' $P5047 = 'cuid_469_1347804164.33' 
    capture_lex $P5047
    $P5048 = $P5047()
    set $P5049, $P5048
  if1588_end5045:
.annotate 'line', 2643
    $P5050 = _lex_param_1."!make"($P102)
    .return ($P5050) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_468_1347804164.33") :anon :lex :outer("cuid_311_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2613
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
.annotate 'line', 2614
    find_dynamic_lex $P5001, "$*W"
    unless_null $P5001, fallback5053
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5003, $P5004
    set $P5002, $P5003["$W"]
    unless_null $P5002, fallback5054
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5005
  fallback5054:
    unless_null $P5002, vivi_15895055
    die "Contextual $*W not found"
    box $P5006, "Contextual $*W not found"
    set $P5002, $P5006
  vivi_15895055:
    set $P5001, $P5002
  fallback5053:
    find_dynamic_lex $P5007, "$*PACKAGE"
    unless_null $P5007, fallback5056
    nqp_get_sc_object $P5010, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5009, $P5010
    set $P5008, $P5009["$PACKAGE"]
    unless_null $P5008, fallback5057
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5011
  fallback5057:
    unless_null $P5008, vivi_15905058
    die "Contextual $*PACKAGE not found"
    box $P5012, "Contextual $*PACKAGE not found"
    set $P5008, $P5012
  vivi_15905058:
    set $P5007, $P5008
  fallback5056:
    $P5013 = _lex_param_0."name"()
    find_dynamic_lex $P5014, "$*W"
    unless_null $P5014, fallback5059
    nqp_get_sc_object $P5017, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5016, $P5017
    set $P5015, $P5016["$W"]
    unless_null $P5015, fallback5060
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5015, $P5018
  fallback5060:
    unless_null $P5015, vivi_15915061
    die "Contextual $*W not found"
    box $P5019, "Contextual $*W not found"
    set $P5015, $P5019
  vivi_15915061:
    set $P5014, $P5015
  fallback5059:
    $P5020 = _lex_param_0."name"()
    $P5021 = $P5014."create_code"(_lex_param_0, $P5020, 0)
    $P5022 = $P5001."pkg_add_method"($P5007, "add_method", $P5013, $P5021)
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_469_1347804164.33") :anon :lex :outer("cuid_311_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2617
    .lex "$block", $P101 
    .lex "$regex", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
.annotate 'line', 2618
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback5065
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback5066
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5007
  fallback5066:
    unless_null $P5004, vivi_15925067
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_15925067:
    set $P5003, $P5004
  fallback5065:
    $P5009 = $P5003."pop_lexpad"()
    set $P101, $P5009
.annotate 'line', 2619
    set $P5010, $P101[0]
    unless_null $P5010, fallback5068
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5011
  fallback5068:
    nqp_get_sc_object $P5015, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5014, $P5015, "QAST"
    get_who $P5013, $P5014
    set $P5012, $P5013["Var"]
    unless_null $P5012, fallback5069
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5012, $P5016
  fallback5069:
    $P5017 = $P5012."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5018 = $P5010."unshift"($P5017)
.annotate 'line', 2620
    set $P5019, $P101[0]
    unless_null $P5019, fallback5070
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5019, $P5020
  fallback5070:
    nqp_get_sc_object $P5024, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5071
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5021, $P5025
  fallback5071:
.annotate 'line', 2622
    nqp_get_sc_object $P5029, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5028, $P5029, "QAST"
    get_who $P5027, $P5028
    set $P5026, $P5027["Var"]
    unless_null $P5026, fallback5072
    nqp_get_sc_object $P5030, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5026, $P5030
  fallback5072:
    $P5031 = $P5026."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2623
    nqp_get_sc_object $P5035, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5034, $P5035, "QAST"
    get_who $P5033, $P5034
    set $P5032, $P5033["Var"]
    unless_null $P5032, fallback5073
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5032, $P5036
  fallback5073:
    $P5037 = $P5032."new"("self" :named("name"), "lexical" :named("scope"))
    $P5038 = $P5021."new"($P5031, $P5037, "bind" :named("op"))
    $P5039 = $P5019."push"($P5038)
.annotate 'line', 2624
    set $P5040, $P101[0]
    unless_null $P5040, fallback5074
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5040, $P5041
  fallback5074:
    nqp_get_sc_object $P5045, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5044, $P5045, "QAST"
    get_who $P5043, $P5044
    set $P5042, $P5043["Var"]
    unless_null $P5042, fallback5075
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5042, $P5046
  fallback5075:
    $P5047 = $P5042."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5048 = $P5040."push"($P5047)
.annotate 'line', 2625
    set $P5049, $P101[0]
    unless_null $P5049, fallback5076
    nqp_get_sc_object $P5050, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5049, $P5050
  fallback5076:
    nqp_get_sc_object $P5054, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5053, $P5054, "QAST"
    get_who $P5052, $P5053
    set $P5051, $P5052["Var"]
    unless_null $P5051, fallback5077
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5051, $P5055
  fallback5077:
    $P5056 = $P5051."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5057 = $P5049."push"($P5056)
.annotate 'line', 2626
    $P5058 = $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2627
    $P5059 = $P101."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2628
    find_lex $P5068, "$/"
    unless_null $P5068, fallback5079
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5068, $P5069
  fallback5079:
    set $P5067, $P5068["p6regex"]
    unless_null $P5067, fallback5080
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5067, $P5070
  fallback5080:
    $P5071 = $P5067."ast"()
    nqp_get_sc_object $P5065, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5064, $P5065, "QRegex"
    nqp_get_package_through_who $P5063, $P5064, "P6Regex"
    nqp_get_package_through_who $P5062, $P5063, "Actions"
    get_who $P5061, $P5062
    set $P5060, $P5061["qbuildsub"]
    unless_null $P5060, fallback5078
    nqp_get_sc_object $P5066, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5060, $P5066
  fallback5078:
    $P5072 = $P5060($P5071, $P101)
    set $P102, $P5072
.annotate 'line', 2629
    find_lex $P5073, "$name"
    $P5074 = $P102."name"($P5073)
    find_dynamic_lex $P5075, "$*PKGDECL"
    unless_null $P5075, fallback5085
    nqp_get_sc_object $P5078, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5077, $P5078
    set $P5076, $P5077["$PKGDECL"]
    unless_null $P5076, fallback5086
    nqp_get_sc_object $P5079, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5076, $P5079
  fallback5086:
    unless_null $P5076, vivi_15955087
    die "Contextual $*PKGDECL not found"
    box $P5080, "Contextual $*PKGDECL not found"
    set $P5076, $P5080
  vivi_15955087:
    set $P5075, $P5076
  fallback5085:
    set $P5088, $P5075
    unless $P5075 goto if1594_end5084 
    find_dynamic_lex $P5082, "$*PACKAGE"
    unless_null $P5082, fallback5088
    nqp_get_sc_object $P5085, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5084, $P5085
    set $P5083, $P5084["$PACKAGE"]
    unless_null $P5083, fallback5089
    nqp_get_sc_object $P5086, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5083, $P5086
  fallback5089:
    unless_null $P5083, vivi_15965090
    die "Contextual $*PACKAGE not found"
    box $P5087, "Contextual $*PACKAGE not found"
    set $P5083, $P5087
  vivi_15965090:
    set $P5082, $P5083
  fallback5088:
    get_how $P5081, $P5082
    can $I5001, $P5081, "add_method"
    box $P5089, $I5001
    set $P5088, $P5089
  if1594_end5084:
    set $P5112, $P5088
    unless $P5088 goto if1593_end5082 
.annotate 'line', 2631
.annotate 'line', 2633
    find_dynamic_lex $P5090, "$*W"
    unless_null $P5090, fallback5091
    nqp_get_sc_object $P5093, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5092, $P5093
    set $P5091, $P5092["$W"]
    unless_null $P5091, fallback5092
    nqp_get_sc_object $P5094, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5091, $P5094
  fallback5092:
    unless_null $P5091, vivi_15975093
    die "Contextual $*W not found"
    box $P5095, "Contextual $*W not found"
    set $P5091, $P5095
  vivi_15975093:
    set $P5090, $P5091
  fallback5091:
    find_dynamic_lex $P5096, "$*PACKAGE"
    unless_null $P5096, fallback5094
    nqp_get_sc_object $P5099, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5098, $P5099
    set $P5097, $P5098["$PACKAGE"]
    unless_null $P5097, fallback5095
    nqp_get_sc_object $P5100, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5097, $P5100
  fallback5095:
    unless_null $P5097, vivi_15985096
    die "Contextual $*PACKAGE not found"
    box $P5101, "Contextual $*PACKAGE not found"
    set $P5097, $P5101
  vivi_15985096:
    set $P5096, $P5097
  fallback5094:
    find_lex $P5102, "$name"
    find_dynamic_lex $P5103, "$*W"
    unless_null $P5103, fallback5097
    nqp_get_sc_object $P5106, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5105, $P5106
    set $P5104, $P5105["$W"]
    unless_null $P5104, fallback5098
    nqp_get_sc_object $P5107, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5104, $P5107
  fallback5098:
    unless_null $P5104, vivi_15995099
    die "Contextual $*W not found"
    box $P5108, "Contextual $*W not found"
    set $P5104, $P5108
  vivi_15995099:
    set $P5103, $P5104
  fallback5097:
    find_lex $P5109, "$name"
    $P5110 = $P5103."create_code"($P102, $P5109, 0)
    $P5111 = $P5090."pkg_add_method"($P5096, "add_method", $P5102, $P5110)
    set $P5112, $P5111
  if1593_end5082:
.annotate 'line', 2637
    nqp_get_sc_object $P5116, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5115, $P5116, "QAST"
    get_who $P5114, $P5115
    set $P5113, $P5114["Op"]
    unless_null $P5113, fallback5100
    nqp_get_sc_object $P5117, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5113, $P5117
  fallback5100:
.annotate 'line', 2639
    new $P5118, 'ResizablePMCArray'
    box $P5119, "NQPRegexMethod"
    push $P5118, $P5119
    find_lex $P5120, "$/"
    $P5121 = "&lexical_package_lookup"($P5118, $P5120)
    $P5122 = $P5113."new"($P5121, $P102, "callmethod" :named("op"), "new" :named("name"))
    store_lex "$past", $P5122
    find_lex $P5123, "$past"
    set $P5123["sink"], $P102
    .return ($P102) 
.end
.HLL "nqp"
.namespace []
.sub "dotty" :subid("cuid_312_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2647
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback5104
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5003
  fallback5104:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5105
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5004
  fallback5105:
    unless $P5002 goto if1600_else5102 
.annotate 'line', 2648
    unless_null _lex_param_1, fallback5106
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5007
  fallback5106:
    set $P5006, _lex_param_1["args"]
    unless_null $P5006, fallback5107
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5008
  fallback5107:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5108
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5005, $P5009
  fallback5108:
    $P5010 = $P5005."ast"()
    set $P5017, $P5010
    goto if1600_end5103
  if1600_else5102:
    nqp_get_sc_object $P5014, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5109
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5015
  fallback5109:
    $P5016 = $P5011."new"(_lex_param_1 :named("node"))
    set $P5017, $P5016
  if1600_end5103:
    set $P101, $P5017
    unless_null _lex_param_1, fallback5112
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5019
  fallback5112:
    set $P5018, _lex_param_1["quote"]
    unless_null $P5018, fallback5113
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5018, $P5020
  fallback5113:
    unless $P5018 goto if1601_else5110 
.annotate 'line', 2649
.annotate 'line', 2650
    unless_null _lex_param_1, fallback5114
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5022
  fallback5114:
    set $P5021, _lex_param_1["quote"]
    unless_null $P5021, fallback5115
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5021, $P5023
  fallback5115:
    $P5024 = $P5021."ast"()
    $P5025 = $P101."unshift"($P5024)
.annotate 'line', 2651
    $P5026 = $P101."op"("callmethod")
    set $P5052, $P5026
    goto if1601_end5111
  if1601_else5110:
    unless_null _lex_param_1, fallback5118
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5028
  fallback5118:
    set $P5027, _lex_param_1["longname"]
    unless_null $P5027, fallback5119
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5027, $P5029
  fallback5119:
    set $S5001, $P5027
    iseq $I5001, $S5001, "HOW"
    unless $I5001 goto if1602_else5116 
.annotate 'line', 2653
.annotate 'line', 2654
    $P5030 = $P101."op"("how")
    set $P5051, $P5030
    goto if1602_end5117
  if1602_else5116:
    unless_null _lex_param_1, fallback5122
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5032
  fallback5122:
    set $P5031, _lex_param_1["longname"]
    unless_null $P5031, fallback5123
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5031, $P5033
  fallback5123:
    set $S5002, $P5031
    iseq $I5002, $S5002, "WHAT"
    unless $I5002 goto if1603_else5120 
.annotate 'line', 2656
.annotate 'line', 2657
    $P5034 = $P101."op"("what")
    set $P5050, $P5034
    goto if1603_end5121
  if1603_else5120:
    unless_null _lex_param_1, fallback5126
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5036
  fallback5126:
    set $P5035, _lex_param_1["longname"]
    unless_null $P5035, fallback5127
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5035, $P5037
  fallback5127:
    set $S5003, $P5035
    iseq $I5003, $S5003, "WHO"
    unless $I5003 goto if1604_else5124 
.annotate 'line', 2659
.annotate 'line', 2660
    $P5038 = $P101."op"("who")
    set $P5049, $P5038
    goto if1604_end5125
  if1604_else5124:
    unless_null _lex_param_1, fallback5130
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5040
  fallback5130:
    set $P5039, _lex_param_1["longname"]
    unless_null $P5039, fallback5131
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5039, $P5041
  fallback5131:
    set $S5004, $P5039
    iseq $I5004, $S5004, "REPR"
    unless $I5004 goto if1605_else5128 
.annotate 'line', 2662
.annotate 'line', 2663
    $P5042 = $P101."op"("reprname")
    set $P5048, $P5042
    goto if1605_end5129
  if1605_else5128:
.annotate 'line', 2665
.annotate 'line', 2666
    unless_null _lex_param_1, fallback5132
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5044
  fallback5132:
    set $P5043, _lex_param_1["longname"]
    unless_null $P5043, fallback5133
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5043, $P5045
  fallback5133:
    set $S5005, $P5043
    $P5046 = $P101."name"($S5005)
.annotate 'line', 2667
    $P5047 = $P101."op"("callmethod")
    set $P5048, $P5047
  if1605_end5129:
    set $P5049, $P5048
  if1604_end5125:
    set $P5050, $P5049
  if1603_end5121:
    set $P5051, $P5050
  if1602_end5117:
    set $P5052, $P5051
  if1601_end5111:
.annotate 'line', 2669
    $P5053 = _lex_param_1."!make"($P101)
    .return ($P5053) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<self>" :subid("cuid_313_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2674
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2675
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5134
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback5134:
.annotate 'line', 2676
    nqp_get_sc_object $P5009, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5135
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5010
  fallback5135:
    $P5011 = $P5006."new"("self" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "nqp_decontainerize PP" :named("pirop"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<identifier>" :subid("cuid_314_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2679
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 2680
    unless_null _lex_param_1, fallback5136
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5003
  fallback5136:
    set $P5002, _lex_param_1["args"]
    unless_null $P5002, fallback5137
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5004
  fallback5137:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2681
    unless_null _lex_param_1, fallback5138
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5007
  fallback5138:
    set $P5006, _lex_param_1["deflongname"]
    unless_null $P5006, fallback5139
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5008
  fallback5139:
    set $S5002, $P5006
    concat $S5001, "&", $S5002
    $P5009 = $P101."name"($S5001)
.annotate 'line', 2682
    $P5010 = _lex_param_1."!make"($P101)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<name>" :subid("cuid_315_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2685
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5051 = 'cuid_470_1347804164.33' 
    capture_lex $P5051 
    .const 'Sub' $P5051 = 'cuid_471_1347804164.33' 
    capture_lex $P5051 
    .lex "$var", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
.annotate 'line', 2688
    find_dynamic_lex $P5003, "$*W"
    unless_null $P5003, fallback5142
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5005, $P5006
    set $P5004, $P5005["$W"]
    unless_null $P5004, fallback5143
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5007
  fallback5143:
    unless_null $P5004, vivi_16075144
    die "Contextual $*W not found"
    box $P5008, "Contextual $*W not found"
    set $P5004, $P5008
  vivi_16075144:
    set $P5003, $P5004
  fallback5142:
    unless_null _lex_param_1, fallback5145
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5010
  fallback5145:
    set $P5009, _lex_param_1["name"]
    unless_null $P5009, fallback5146
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5011
  fallback5146:
    set $S5001, $P5009
    $P5012 = $P5003."is_lexical"($S5001)
    unless $P5012 goto if1606_else5140 
    new $P5034, 'ExceptionHandler'
    set_label $P5034, catch_handler_16125159
    $P5034.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5034
.annotate 'line', 2689
    new $P5032, 'ExceptionHandler'
    set_label $P5032, catch_handler_16105154
    $P5032.'handle_types_except'(.CONTROL_ALL)
    push_eh $P5032
.annotate 'line', 2690
    nqp_get_sc_object $P5016, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["WVal"]
    unless_null $P5013, fallback5147
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5013, $P5017
  fallback5147:
    find_dynamic_lex $P5018, "$*W"
    unless_null $P5018, fallback5148
    nqp_get_sc_object $P5021, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5020, $P5021
    set $P5019, $P5020["$W"]
    unless_null $P5019, fallback5149
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5019, $P5022
  fallback5149:
    unless_null $P5019, vivi_16085150
    die "Contextual $*W not found"
    box $P5023, "Contextual $*W not found"
    set $P5019, $P5023
  vivi_16085150:
    set $P5018, $P5019
  fallback5148:
    new $P5024, 'ResizablePMCArray'
    unless_null _lex_param_1, fallback5151
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5026
  fallback5151:
    set $P5025, _lex_param_1["name"]
    unless_null $P5025, fallback5152
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5025, $P5027
  fallback5152:
    set $S5002, $P5025
    box $P5028, $S5002
    push $P5024, $P5028
    $P5029 = $P5018."find_sym"($P5024)
    $P5030 = $P5013."new"($P5029 :named("value"))
    set $P101, $P5030
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5033, $P5031
    pop_eh 
    goto skip_handler_16095153
  catch_handler_16105154:
    .get_results ($P5032) 
    .const 'Sub' $P10001 = 'cuid_470_1347804164.33' 
    capture_lex $P10001
    $P10002 = $P10001($P5032)
    set $I10001, 1
    set $P5032["handled"], $I10001
    nqp_get_sc_object $P10003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    finalize $P5032
    pop_upto_eh $P5032
    pop_eh 
    set $P5033, $P10003
    goto skip_handler_16095153
  skip_handler_16095153:
    set $P5035, $P5033
    pop_eh 
    goto skip_handler_16115158
  catch_handler_16125159:
    .get_results ($P5034) 
    set $I10001, 1
    set $P5034["handled"], $I10001
    nqp_get_sc_object $P10001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    finalize $P5034
    pop_upto_eh $P5034
    pop_eh 
    set $P5035, $P10001
    goto skip_handler_16115158
  skip_handler_16115158:
    set $P5038, $P5035
    goto if1606_end5141
  if1606_else5140:
    .const 'Sub' $P5036 = 'cuid_471_1347804164.33' 
    capture_lex $P5036
    $P5037 = $P5036()
    set $P5038, $P5037
  if1606_end5141:
    set $P102, $P101
    unless_null _lex_param_1, fallback5165
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5040
  fallback5165:
    set $P5039, _lex_param_1["args"]
    unless_null $P5039, fallback5166
    nqp_get_sc_object $P5041, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5039, $P5041
  fallback5166:
    set $P5049, $P5039
    unless $P5039 goto if1613_end5164 
.annotate 'line', 2703
.annotate 'line', 2704
    unless_null _lex_param_1, fallback5167
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5044
  fallback5167:
    set $P5043, _lex_param_1["args"]
    unless_null $P5043, fallback5168
    nqp_get_sc_object $P5045, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5043, $P5045
  fallback5168:
    set $P5042, $P5043[0]
    unless_null $P5042, fallback5169
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5042, $P5046
  fallback5169:
    $P5047 = $P5042."ast"()
    set $P102, $P5047
.annotate 'line', 2705
    $P5048 = $P102."unshift"($P101)
    set $P5049, $P5048
  if1613_end5164:
.annotate 'line', 2707
    $P5050 = _lex_param_1."!make"($P102)
    .return ($P5050) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_470_1347804164.33") :anon :lex :outer("cuid_315_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2691
    .param pmc _lex_param_0 
    .lex "$!", $P101 
    .lex "$_", _lex_param_0 
    set $P101, _lex_param_0
.annotate 'line', 2692
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Var"]
    unless_null $P5001, fallback5155
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback5155:
    find_lex $P5007, "$/"
    unless_null $P5007, fallback5156
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5008
  fallback5156:
    set $P5006, $P5007["name"]
    unless_null $P5006, fallback5157
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5009
  fallback5157:
    set $S5001, $P5006
    $P5010 = $P5001."new"($S5001 :named("name"), "lexical" :named("scope"))
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_471_1347804164.33") :anon :lex :outer("cuid_315_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2696
    .lex "@ns", $P101 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    find_lex $P5005, "$/"
    unless_null $P5005, fallback5160
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5005, $P5006
  fallback5160:
    set $P5004, $P5005["name"]
    unless_null $P5004, fallback5161
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5007
  fallback5161:
    set $P5003, $P5004["identifier"]
    unless_null $P5003, fallback5162
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5008
  fallback5162:
    clone $P5002, $P5003
    set $P101, $P5002
.annotate 'line', 2698
    find_lex $P5009, "$/"
    $P5010 = "&lexical_package_lookup"($P101, $P5009)
    store_lex "$var", $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::op>" :subid("cuid_316_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2710
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "@args", $P101 
    .lex "$pirop", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    new $P5001, 'ResizablePMCArray'
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback5172
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5004
  fallback5172:
    set $P5003, _lex_param_1["args"]
    unless_null $P5003, fallback5173
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5005
  fallback5173:
    unless $P5003 goto if1614_else5170 
.annotate 'line', 2711
    unless_null _lex_param_1, fallback5174
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5008
  fallback5174:
    set $P5007, _lex_param_1["args"]
    unless_null $P5007, fallback5175
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5009
  fallback5175:
    set $P5006, $P5007[0]
    unless_null $P5006, fallback5176
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5010
  fallback5176:
    $P5011 = $P5006."ast"()
    $P5012 = $P5011."list"()
    set $P5014, $P5012
    goto if1614_end5171
  if1614_else5170:
    new $P5013, 'ResizablePMCArray'
    set $P5014, $P5013
  if1614_end5171:
    set $P101, $P5014
    unless_null _lex_param_1, fallback5177
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5016
  fallback5177:
    set $P5015, _lex_param_1["op"]
    unless_null $P5015, fallback5178
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5015, $P5017
  fallback5178:
    set $S5001, $P5015
    box $P5018, $S5001
    set $P102, $P5018
    set $S5003, $P102
    split $P5019, "__", $S5003
    join $S5002, " ", $P5019
    box $P5020, $S5002
    set $P102, $P5020
.annotate 'line', 2714
    nqp_get_sc_object $P5024, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["VM"]
    unless_null $P5021, fallback5179
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5021, $P5025
  fallback5179:
    $P5026 = $P5021."new"($P101 :flat, $P102 :named("pirop"), _lex_param_1 :named("node"))
    $P5027 = _lex_param_1."!make"($P5026)
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<pir::const>" :subid("cuid_317_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2717
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2718
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5180
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback5180:
    unless_null _lex_param_1, fallback5181
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5007
  fallback5181:
    set $P5006, _lex_param_1["const"]
    unless_null $P5006, fallback5182
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5008
  fallback5182:
    set $S5001, $P5006
    $P5009 = $P5001."new"($S5001 :named("pirconst"))
    $P5010 = _lex_param_1."!make"($P5009)
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<nqp::op>" :subid("cuid_318_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2721
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$op", $P101 
    .lex "@args", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    new $P5002, 'ResizablePMCArray'
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P103, $P5003
    unless_null _lex_param_1, fallback5183
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5005
  fallback5183:
    set $P5004, _lex_param_1["op"]
    unless_null $P5004, fallback5184
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5006
  fallback5184:
    set $S5001, $P5004
    box $P5007, $S5001
    set $P101, $P5007
    unless_null _lex_param_1, fallback5187
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5009
  fallback5187:
    set $P5008, _lex_param_1["args"]
    unless_null $P5008, fallback5188
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5010
  fallback5188:
    unless $P5008 goto if1615_else5185 
.annotate 'line', 2723
    unless_null _lex_param_1, fallback5189
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5013
  fallback5189:
    set $P5012, _lex_param_1["args"]
    unless_null $P5012, fallback5190
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5012, $P5014
  fallback5190:
    set $P5011, $P5012[0]
    unless_null $P5011, fallback5191
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5015
  fallback5191:
    $P5016 = $P5011."ast"()
    $P5017 = $P5016."list"()
    set $P5019, $P5017
    goto if1615_end5186
  if1615_else5185:
    new $P5018, 'ResizablePMCArray'
    set $P5019, $P5018
  if1615_end5186:
    set $P102, $P5019
.annotate 'line', 2724
    nqp_get_sc_object $P5023, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Op"]
    unless_null $P5020, fallback5192
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5020, $P5024
  fallback5192:
    $P5025 = $P5020."new"($P102 :flat, $P101 :named("op"), _lex_param_1 :named("node"))
    set $P103, $P5025
.annotate 'line', 2725
    $P5026 = _lex_param_1."!make"($P103)
    .return ($P5026) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<onlystar>" :subid("cuid_319_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2728
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2729
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5193
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback5193:
    $P5006 = $P5001."new"("nqpmultidispatch" :named("op"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "args" :subid("cuid_320_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2732
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5194
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback5194:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5195
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback5195:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "arglist" :subid("cuid_321_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2734
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5056 = 'cuid_473_1347804164.33' 
    capture_lex $P5056 
    .lex "$past", $P101 
    .lex "$i", $P102 
    .lex "$n", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    .local pmc tmp_2 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P103, $P5003
.annotate 'line', 2735
    nqp_get_sc_object $P5007, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5006, $P5007, "QAST"
    get_who $P5005, $P5006
    set $P5004, $P5005["Op"]
    unless_null $P5004, fallback5196
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5008
  fallback5196:
    $P5009 = $P5004."new"("call" :named("op"), _lex_param_1 :named("node"))
    set $P101, $P5009
    unless_null _lex_param_1, fallback5199
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5011
  fallback5199:
    set $P5010, _lex_param_1["EXPR"]
    unless_null $P5010, fallback5200
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5012
  fallback5200:
    set $P5015, $P5010
    unless $P5010 goto if1616_end5198 
    .const 'Sub' $P5013 = 'cuid_473_1347804164.33' 
    capture_lex $P5013
    $P5014 = $P5013()
    set $P5015, $P5014
  if1616_end5198:
    box $P5016, 0
    set $P102, $P5016
.annotate 'line', 2744
    $P5017 = $P101."list"()
    set $N5001, $P5017
    box $P5018, $N5001
    set $P103, $P5018
  while1620_test5213:
    set $N5002, $P102
    set $N5003, $P103
    islt $I5001, $N5002, $N5003
    box $P5054, $I5001
    set $P5053, $P5054
    unless $I5001 goto while1620_done5217 
  while1620_redo5215:
.annotate 'line', 2745
    set $I5003, $P102
    set $P5019, $P101[$I5003]
    unless_null $P5019, fallback5222
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5019, $P5020
  fallback5222:
    nqp_get_sc_object $P5024, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Op"]
    unless_null $P5021, fallback5223
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5021, $P5025
  fallback5223:
    type_check $I5002, $P5019, $P5021
    set $I5006, $I5002
    unless $I5002 goto if1622_end5221 
.annotate 'line', 2746
    set $I5005, $P102
    set $P5026, $P101[$I5005]
    unless_null $P5026, fallback5224
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5026, $P5027
  fallback5224:
    $P5028 = $P5026."name"()
    set $S5001, $P5028
    iseq $I5004, $S5001, "&prefix:<|>"
    set $I5006, $I5004
  if1622_end5221:
    box $P5052, $I5006
    set $P5051, $P5052
    unless $I5006 goto if1621_end5219 
    set $I5007, $P102
    set $I5008, $P102
    set $P5030, $P101[$I5008]
    unless_null $P5030, fallback5225
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5030, $P5031
  fallback5225:
    set $P5029, $P5030[0]
    unless_null $P5029, fallback5226
    nqp_get_sc_object $P5032, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5029, $P5032
  fallback5226:
    set $P101[$I5007], $P5029
.annotate 'line', 2748
    set $I5009, $P102
    set $P5033, $P101[$I5009]
    unless_null $P5033, fallback5227
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5033, $P5034
  fallback5227:
    $P5035 = $P5033."flat"(1)
    set $I5011, $P102
    set $P5036, $P101[$I5011]
    unless_null $P5036, fallback5232
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5036, $P5037
  fallback5232:
    nqp_get_sc_object $P5041, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Var"]
    unless_null $P5038, fallback5233
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5038, $P5042
  fallback5233:
    type_check $I5010, $P5036, $P5038
    set $I5014, $I5010
    unless $I5010 goto if1624_end5231 
.annotate 'line', 2750
    set $I5013, $P102
    set $P5043, $P101[$I5013]
    unless_null $P5043, fallback5234
    nqp_get_sc_object $P5044, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5043, $P5044
  fallback5234:
    $P5045 = $P5043."name"()
    set $S5003, $P5045
    substr $S5002, $S5003, 0, 1
    iseq $I5012, $S5002, "%"
    set $I5014, $I5012
  if1624_end5231:
    box $P5050, $I5014
    set $P5049, $P5050
    unless $I5014 goto if1623_end5229 
.annotate 'line', 2749
    set $I5015, $P102
    set $P5046, $P101[$I5015]
    unless_null $P5046, fallback5235
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5046, $P5047
  fallback5235:
    $P5048 = $P5046."named"(1)
    set $P5049, $P5048
  if1623_end5229:
    set $P5051, $P5049
  if1621_end5219:
    set tmp_2, $P102
    set $N5005, tmp_2
    set $N5006, 1
    add $N5004, $N5005, $N5006
    box $P5053, $N5004
    set $P102, $P5053
    set $P5053, tmp_2
    goto while1620_test5213 
  while1620_done5217:
.annotate 'line', 2754
    $P5055 = _lex_param_1."!make"($P101)
    .return ($P5055) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_473_1347804164.33") :anon :lex :outer("cuid_321_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2736
    .const 'Sub' $P5023 = 'cuid_472_1347804164.33' 
    capture_lex $P5023 
    .lex "$expr", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 2737
    find_lex $P5003, "$/"
    unless_null $P5003, fallback5201
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5004
  fallback5201:
    set $P5002, $P5003["EXPR"]
    unless_null $P5002, fallback5202
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5005
  fallback5202:
    $P5006 = $P5002."ast"()
    set $P101, $P5006
    nqp_get_sc_object $P5010, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5009, $P5010, "QAST"
    get_who $P5008, $P5009
    set $P5007, $P5008["Op"]
    unless_null $P5007, fallback5209
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5011
  fallback5209:
    type_check $I5001, $P101, $P5007
    set $I5003, $I5001
    unless $I5001 goto if1619_end5208 
.annotate 'line', 2738
    $P5012 = $P101."name"()
    set $S5001, $P5012
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1619_end5208:
    set $I5005, $I5003
    unless $I5003 goto if1618_end5206 
    $P5013 = $P101."named"()
    isfalse $I5004, $P5013
    set $I5005, $I5004
  if1618_end5206:
    unless $I5005 goto if1617_else5203 
.annotate 'line', 2739
    $P5017 = $P101."list"()
    set $P5014, $P5017
    iter $P5016, $P5017
  for_next5210:
    unless $P5016, for_done5212
    shift $P5019, $P5016
  for_redo5211:
    .const 'Sub' $P5018 = 'cuid_472_1347804164.33' 
    capture_lex $P5018
    $P5014 = $P5018($P5019)
    goto for_next5210
  for_done5212:
    set $P5022, $P5014
    goto if1617_end5204
  if1617_else5203:
.annotate 'line', 2741
    find_lex $P5020, "$past"
    $P5021 = $P5020."push"($P101)
    set $P5022, $P5021
  if1617_end5204:
    .return ($P5022) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_472_1347804164.33") :anon :lex :outer("cuid_473_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2739
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5001, "$past"
    $P5002 = $P5001."push"(_lex_param_0)
    .return ($P5002) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<multi_declarator>" :subid("cuid_322_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2757
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5236
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback5236:
    set $P5001, _lex_param_1["multi_declarator"]
    unless_null $P5001, fallback5237
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback5237:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<value>" :subid("cuid_323_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2759
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5238
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback5238:
    set $P5001, _lex_param_1["value"]
    unless_null $P5001, fallback5239
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback5239:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<( )>" :subid("cuid_324_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2761
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2762
    unless_null _lex_param_1, fallback5242
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback5242:
    set $P5001, _lex_param_1["EXPR"]
    unless_null $P5001, fallback5243
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback5243:
    unless $P5001 goto if1625_else5240 
.annotate 'line', 2763
    unless_null _lex_param_1, fallback5244
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5006
  fallback5244:
    set $P5005, _lex_param_1["EXPR"]
    unless_null $P5005, fallback5245
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5005, $P5007
  fallback5245:
    set $P5004, $P5005[0]
    unless_null $P5004, fallback5246
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5008
  fallback5246:
    $P5009 = $P5004."ast"()
    set $P5016, $P5009
    goto if1625_end5241
  if1625_else5240:
.annotate 'line', 2764
    nqp_get_sc_object $P5013, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5012, $P5013, "QAST"
    get_who $P5011, $P5012
    set $P5010, $P5011["Op"]
    unless_null $P5010, fallback5247
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5014
  fallback5247:
    $P5015 = $P5010."new"("list" :named("op"), _lex_param_1 :named("node"))
    set $P5016, $P5015
  if1625_end5241:
    $P5017 = _lex_param_1."!make"($P5016)
    .return ($P5017) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<[ ]>" :subid("cuid_325_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2767
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback5250
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5003
  fallback5250:
    set $P5002, _lex_param_1["EXPR"]
    unless_null $P5002, fallback5251
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5004
  fallback5251:
    unless $P5002 goto if1626_else5248 
.annotate 'line', 2769
.annotate 'line', 2770
    unless_null _lex_param_1, fallback5252
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5007
  fallback5252:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5253
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5008
  fallback5253:
    set $P5005, $P5006[0]
    unless_null $P5005, fallback5254
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5005, $P5009
  fallback5254:
    $P5010 = $P5005."ast"()
    set $P101, $P5010
    nqp_get_sc_object $P5014, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["Op"]
    unless_null $P5011, fallback5259
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5015
  fallback5259:
    type_check $I5001, $P101, $P5011
    set $I5003, $I5001
    unless $I5001 goto if1628_end5258 
.annotate 'line', 2771
    $P5016 = $P101."name"()
    set $S5001, $P5016
    iseq $I5002, $S5001, "&infix:<,>"
    set $I5003, $I5002
  if1628_end5258:
    box $P5024, $I5003
    set $P5023, $P5024
    if $I5003 goto unless1627_end5256 
.annotate 'line', 2772
    nqp_get_sc_object $P5020, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5019, $P5020, "QAST"
    get_who $P5018, $P5019
    set $P5017, $P5018["Op"]
    unless_null $P5017, fallback5260
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5017, $P5021
  fallback5260:
    $P5022 = $P5017."new"($P101, "list" :named("op"))
    set $P101, $P5022
    set $P5023, $P101
  unless1627_end5256:
    set $P5031, $P5023
    goto if1626_end5249
  if1626_else5248:
.annotate 'line', 2775
.annotate 'line', 2776
    nqp_get_sc_object $P5028, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Op"]
    unless_null $P5025, fallback5261
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5025, $P5029
  fallback5261:
    $P5030 = $P5025."new"("list" :named("op"))
    set $P101, $P5030
    set $P5031, $P101
  if1626_end5249:
.annotate 'line', 2778
    $P5032 = $P101."name"("&circumfix:<[ ]>")
.annotate 'line', 2779
    $P5033 = _lex_param_1."!make"($P101)
    .return ($P5033) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<ang>" :subid("cuid_326_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2782
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5262
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback5262:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5263
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback5263:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub utf8:"circumfix:sym<\x{ab} \x{bb}>" :subid("cuid_327_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2783
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5264
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback5264:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5265
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback5265:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<{ }>" :subid("cuid_328_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2785
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5028 = 'cuid_474_1347804164.33' 
    capture_lex $P5028 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5268
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5005
  fallback5268:
    set $P5004, _lex_param_1["pblock"]
    unless_null $P5004, fallback5269
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5006
  fallback5269:
    set $P5003, $P5004["blockoid"]
    unless_null $P5003, fallback5270
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5007
  fallback5270:
    set $P5002, $P5003["statementlist"]
    unless_null $P5002, fallback5271
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5008
  fallback5271:
    set $P5001, $P5002["statement"]
    unless_null $P5001, fallback5272
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5009
  fallback5272:
    set $N5001, $P5001
    set $N5002, 0
    isgt $I5001, $N5001, $N5002
    unless $I5001 goto if1629_else5266 
    .const 'Sub' $P5010 = 'cuid_474_1347804164.33' 
    capture_lex $P5010
    $P5011 = $P5010()
    set $P5027, $P5011
    goto if1629_end5267
  if1629_else5266:
    unless_null _lex_param_1, fallback5278
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5015
  fallback5278:
    set $P5014, _lex_param_1["pblock"]
    unless_null $P5014, fallback5279
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5014, $P5016
  fallback5279:
    set $P5013, $P5014["blockoid"]
    unless_null $P5013, fallback5280
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5013, $P5017
  fallback5280:
    set $P5012, $P5013["you_are_here"]
    unless_null $P5012, fallback5281
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5012, $P5018
  fallback5281:
    unless $P5012 goto if1630_else5276 
.annotate 'line', 2791
.annotate 'line', 2792
    unless_null _lex_param_1, fallback5282
    nqp_get_sc_object $P5020, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5020
  fallback5282:
    set $P5019, _lex_param_1["pblock"]
    unless_null $P5019, fallback5283
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5019, $P5021
  fallback5283:
    $P5022 = $P5019."ast"()
    $P5023 = _lex_param_1."!make"($P5022)
    set $P5026, $P5023
    goto if1630_end5277
  if1630_else5276:
.annotate 'line', 2794
.annotate 'line', 2795
    $P5024 = "&default_for"("%")
    $P5025 = _lex_param_1."!make"($P5024)
    set $P5026, $P5025
  if1630_end5277:
    set $P5027, $P5026
  if1629_end5267:
    .return ($P5027) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_474_1347804164.33") :anon :lex :outer("cuid_328_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2786
    .lex "$past", $P101 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 2787
    nqp_get_sc_object $P5005, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5004, $P5005, "QAST"
    get_who $P5003, $P5004
    set $P5002, $P5003["Op"]
    unless_null $P5002, fallback5273
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5006
  fallback5273:
    find_lex $P5008, "$/"
    unless_null $P5008, fallback5274
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5009
  fallback5274:
    set $P5007, $P5008["pblock"]
    unless_null $P5007, fallback5275
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5010
  fallback5275:
    $P5011 = $P5007."ast"()
    $P5012 = $P5002."new"($P5011, "takeclosure" :named("op"))
    set $P101, $P5012
    box $P5013, 1
    set $P101["bareblock"], $P5013
.annotate 'line', 2789
    find_dynamic_lex $P5014, "$/"
    $P5015 = $P5014."!make"($P101)
    .return ($P5015) 
.end
.HLL "nqp"
.namespace []
.sub "circumfix:sym<sigil>" :subid("cuid_329_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2799
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$name", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback5286
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5003
  fallback5286:
    set $P5002, _lex_param_1["sigil"]
    unless_null $P5002, fallback5287
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5004
  fallback5287:
    set $S5001, $P5002
    iseq $I5001, $S5001, "@"
    unless $I5001 goto if1631_else5284 
    set $S5004, "list"
    goto if1631_end5285
  if1631_else5284:
    unless_null _lex_param_1, fallback5290
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5006
  fallback5290:
    set $P5005, _lex_param_1["sigil"]
    unless_null $P5005, fallback5291
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5005, $P5007
  fallback5291:
    set $S5002, $P5005
    iseq $I5002, $S5002, "%"
    unless $I5002 goto if1632_else5288 
    set $S5003, "hash"
    goto if1632_end5289
  if1632_else5288:
    set $S5003, "item"
  if1632_end5289:
    set $S5004, $S5003
  if1631_end5285:
    box $P5008, $S5004
    set $P101, $P5008
.annotate 'line', 2803
    nqp_get_sc_object $P5012, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5011, $P5012, "QAST"
    get_who $P5010, $P5011
    set $P5009, $P5010["Op"]
    unless_null $P5009, fallback5292
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5013
  fallback5292:
    unless_null _lex_param_1, fallback5293
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5015
  fallback5293:
    set $P5014, _lex_param_1["semilist"]
    unless_null $P5014, fallback5294
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5014, $P5016
  fallback5294:
    $P5017 = $P5014."ast"()
    $P5018 = $P5009."new"($P5017, "callmethod" :named("op"), $P101 :named("name"))
    $P5019 = _lex_param_1."!make"($P5018)
    .return ($P5019) 
.end
.HLL "nqp"
.namespace []
.sub "semilist" :subid("cuid_330_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2806
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5295
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback5295:
    set $P5001, _lex_param_1["statement"]
    unless_null $P5001, fallback5296
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback5296:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<[ ]>" :subid("cuid_331_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2808
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2809
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5297
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback5297:
    unless_null _lex_param_1, fallback5298
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5007
  fallback5298:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5299
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5008
  fallback5299:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "positional" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<{ }>" :subid("cuid_332_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2812
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2813
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5300
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback5300:
    unless_null _lex_param_1, fallback5301
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5007
  fallback5301:
    set $P5006, _lex_param_1["EXPR"]
    unless_null $P5006, fallback5302
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5008
  fallback5302:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<ang>" :subid("cuid_333_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2816
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2817
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VarWithFallback"]
    unless_null $P5001, fallback5303
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback5303:
    unless_null _lex_param_1, fallback5304
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5007
  fallback5304:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5305
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5008
  fallback5305:
    $P5009 = $P5006."ast"()
    $P5010 = "&default_for"("$")
    $P5011 = $P5001."new"($P5009, "associative" :named("scope"), $P5010 :named("fallback"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "postcircumfix:sym<( )>" :subid("cuid_334_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2820
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2821
    unless_null _lex_param_1, fallback5306
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback5306:
    set $P5001, _lex_param_1["arglist"]
    unless_null $P5001, fallback5307
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback5307:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "value" :subid("cuid_335_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2824
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2825
    unless_null _lex_param_1, fallback5310
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback5310:
    set $P5001, _lex_param_1["quote"]
    unless_null $P5001, fallback5311
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback5311:
    unless $P5001 goto if1633_else5308 
    unless_null _lex_param_1, fallback5312
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5005
  fallback5312:
    set $P5004, _lex_param_1["quote"]
    unless_null $P5004, fallback5313
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5004, $P5006
  fallback5313:
    $P5007 = $P5004."ast"()
    set $P5012, $P5007
    goto if1633_end5309
  if1633_else5308:
    unless_null _lex_param_1, fallback5314
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5009
  fallback5314:
    set $P5008, _lex_param_1["number"]
    unless_null $P5008, fallback5315
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5010
  fallback5315:
    $P5011 = $P5008."ast"()
    set $P5012, $P5011
  if1633_end5309:
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "number" :subid("cuid_336_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2828
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$value", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    unless_null _lex_param_1, fallback5318
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5003
  fallback5318:
    set $P5002, _lex_param_1["dec_number"]
    unless_null $P5002, fallback5319
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5004
  fallback5319:
    unless $P5002 goto if1634_else5316 
.annotate 'line', 2829
    unless_null _lex_param_1, fallback5320
    nqp_get_sc_object $P5006, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5006
  fallback5320:
    set $P5005, _lex_param_1["dec_number"]
    unless_null $P5005, fallback5321
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5005, $P5007
  fallback5321:
    $P5008 = $P5005."ast"()
    set $P5013, $P5008
    goto if1634_end5317
  if1634_else5316:
    unless_null _lex_param_1, fallback5322
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5010
  fallback5322:
    set $P5009, _lex_param_1["integer"]
    unless_null $P5009, fallback5323
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5009, $P5011
  fallback5323:
    $P5012 = $P5009."ast"()
    set $P5013, $P5012
  if1634_end5317:
    set $P101, $P5013
    unless_null _lex_param_1, fallback5326
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5015
  fallback5326:
    set $P5014, _lex_param_1["sign"]
    unless_null $P5014, fallback5327
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5014, $P5016
  fallback5327:
    set $S5001, $P5014
    iseq $I5001, $S5001, "-"
    box $P5019, $I5001
    set $P5018, $P5019
    unless $I5001 goto if1635_end5325 
.annotate 'line', 2830
    set $N5002, $P101
    neg $N5001, $N5002
    box $P5017, $N5001
    set $P101, $P5017
    set $P5018, $P101
  if1635_end5325:
.annotate 'line', 2831
    unless_null _lex_param_1, fallback5330
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5021
  fallback5330:
    set $P5020, _lex_param_1["dec_number"]
    unless_null $P5020, fallback5331
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5020, $P5022
  fallback5331:
    unless $P5020 goto if1636_else5328 
.annotate 'line', 2832
    nqp_get_sc_object $P5026, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5025, $P5026, "QAST"
    get_who $P5024, $P5025
    set $P5023, $P5024["NVal"]
    unless_null $P5023, fallback5332
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5023, $P5027
  fallback5332:
    $P5028 = $P5023."new"($P101 :named("value"))
    set $P5035, $P5028
    goto if1636_end5329
  if1636_else5328:
.annotate 'line', 2833
    nqp_get_sc_object $P5032, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["IVal"]
    unless_null $P5029, fallback5333
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5029, $P5033
  fallback5333:
    $P5034 = $P5029."new"($P101 :named("value"))
    set $P5035, $P5034
  if1636_end5329:
    $P5036 = _lex_param_1."!make"($P5035)
    .return ($P5036) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<apos>" :subid("cuid_337_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2836
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5334
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback5334:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5335
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback5335:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<dblq>" :subid("cuid_338_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2837
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5336
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback5336:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5337
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback5337:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<qq>" :subid("cuid_339_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2838
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5338
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback5338:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5339
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback5339:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<q>" :subid("cuid_340_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2839
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5340
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback5340:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5341
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback5341:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q>" :subid("cuid_341_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2840
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5342
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback5342:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5343
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback5343:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym<Q:PIR>" :subid("cuid_342_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2841
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2842
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["VM"]
    unless_null $P5001, fallback5344
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback5344:
    unless_null _lex_param_1, fallback5345
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5007
  fallback5345:
    set $P5006, _lex_param_1["quote_EXPR"]
    unless_null $P5006, fallback5346
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5008
  fallback5346:
    $P5009 = $P5006."ast"()
    $P5010 = $P5009."value"()
    $P5011 = $P5001."new"($P5010 :named("pir"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote:sym</ />" :subid("cuid_343_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2845
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$regex", $P102 
    .lex "$past", $P103 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P103, $P5003
.annotate 'line', 2846
    find_dynamic_lex $P5004, "$*W"
    unless_null $P5004, fallback5347
    nqp_get_sc_object $P5007, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["$W"]
    unless_null $P5005, fallback5348
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5005, $P5008
  fallback5348:
    unless_null $P5005, vivi_16375349
    die "Contextual $*W not found"
    box $P5009, "Contextual $*W not found"
    set $P5005, $P5009
  vivi_16375349:
    set $P5004, $P5005
  fallback5347:
    $P5010 = $P5004."pop_lexpad"()
    set $P101, $P5010
.annotate 'line', 2847
    set $P5011, $P101[0]
    unless_null $P5011, fallback5350
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5012
  fallback5350:
    nqp_get_sc_object $P5016, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Var"]
    unless_null $P5013, fallback5351
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5013, $P5017
  fallback5351:
    $P5018 = $P5013."new"("self" :named("name"), "lexical" :named("scope"), "param" :named("decl"))
    $P5019 = $P5011."push"($P5018)
.annotate 'line', 2848
    set $P5020, $P101[0]
    unless_null $P5020, fallback5352
    nqp_get_sc_object $P5021, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5020, $P5021
  fallback5352:
    nqp_get_sc_object $P5025, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5024, $P5025, "QAST"
    get_who $P5023, $P5024
    set $P5022, $P5023["Op"]
    unless_null $P5022, fallback5353
    nqp_get_sc_object $P5026, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5022, $P5026
  fallback5353:
.annotate 'line', 2850
    nqp_get_sc_object $P5030, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5029, $P5030, "QAST"
    get_who $P5028, $P5029
    set $P5027, $P5028["Var"]
    unless_null $P5027, fallback5354
    nqp_get_sc_object $P5031, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5027, $P5031
  fallback5354:
    $P5032 = $P5027."new"("self" :named("name"), "local" :named("scope"), "var" :named("decl"))
.annotate 'line', 2851
    nqp_get_sc_object $P5036, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5035, $P5036, "QAST"
    get_who $P5034, $P5035
    set $P5033, $P5034["Var"]
    unless_null $P5033, fallback5355
    nqp_get_sc_object $P5037, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5033, $P5037
  fallback5355:
    $P5038 = $P5033."new"("self" :named("name"), "lexical" :named("scope"))
    $P5039 = $P5022."new"($P5032, $P5038, "bind" :named("op"))
    $P5040 = $P5020."push"($P5039)
.annotate 'line', 2852
    set $P5041, $P101[0]
    unless_null $P5041, fallback5356
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5041, $P5042
  fallback5356:
    nqp_get_sc_object $P5046, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5045, $P5046, "QAST"
    get_who $P5044, $P5045
    set $P5043, $P5044["Var"]
    unless_null $P5043, fallback5357
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5043, $P5047
  fallback5357:
    $P5048 = $P5043."new"(utf8:"$\x{a2}" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5049 = $P5041."push"($P5048)
.annotate 'line', 2853
    set $P5050, $P101[0]
    unless_null $P5050, fallback5358
    nqp_get_sc_object $P5051, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5050, $P5051
  fallback5358:
    nqp_get_sc_object $P5055, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5054, $P5055, "QAST"
    get_who $P5053, $P5054
    set $P5052, $P5053["Var"]
    unless_null $P5052, fallback5359
    nqp_get_sc_object $P5056, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5052, $P5056
  fallback5359:
    $P5057 = $P5052."new"("$/" :named("name"), "lexical" :named("scope"), "var" :named("decl"))
    $P5058 = $P5050."push"($P5057)
.annotate 'line', 2854
    $P5059 = $P101."symbol"(utf8:"$\x{a2}", "lexical" :named("scope"))
.annotate 'line', 2855
    $P5060 = $P101."symbol"("$/", "lexical" :named("scope"))
.annotate 'line', 2857
    unless_null _lex_param_1, fallback5361
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5069
  fallback5361:
    set $P5068, _lex_param_1["p6regex"]
    unless_null $P5068, fallback5362
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5068, $P5070
  fallback5362:
    $P5071 = $P5068."ast"()
    nqp_get_sc_object $P5066, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5065, $P5066, "QRegex"
    nqp_get_package_through_who $P5064, $P5065, "P6Regex"
    nqp_get_package_through_who $P5063, $P5064, "Actions"
    get_who $P5062, $P5063
    set $P5061, $P5062["qbuildsub"]
    unless_null $P5061, fallback5360
    nqp_get_sc_object $P5067, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5061, $P5067
  fallback5360:
    $P5072 = $P5061($P5071, $P101)
    set $P102, $P5072
.annotate 'line', 2858
    nqp_get_sc_object $P5076, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5075, $P5076, "QAST"
    get_who $P5074, $P5075
    set $P5073, $P5074["Op"]
    unless_null $P5073, fallback5363
    nqp_get_sc_object $P5077, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5073, $P5077
  fallback5363:
.annotate 'line', 2860
    new $P5078, 'ResizablePMCArray'
    box $P5079, "NQPRegex"
    push $P5078, $P5079
    $P5080 = "&lexical_package_lookup"($P5078, _lex_param_1)
    $P5081 = $P5073."new"($P5080, $P102, "callmethod" :named("op"), "new" :named("name"))
    set $P103, $P5081
    set $P103["sink"], $P102
.annotate 'line', 2865
    $P5082 = _lex_param_1."!make"($P103)
    .return ($P5082) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<$>" :subid("cuid_344_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2868
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5364
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback5364:
    set $P5001, _lex_param_1["variable"]
    unless_null $P5001, fallback5365
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback5365:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<{ }>" :subid("cuid_345_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2869
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2870
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5366
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback5366:
.annotate 'line', 2871
    unless_null _lex_param_1, fallback5367
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5007
  fallback5367:
    set $P5006, _lex_param_1["block"]
    unless_null $P5006, fallback5368
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5008
  fallback5368:
    $P5009 = $P5006."ast"()
    $P5010 = "&block_immediate"($P5009)
    $P5011 = $P5001."new"($P5010, "stringify" :named("op"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "quote_escape:sym<esc>" :subid("cuid_346_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2874
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    $P5001 = _lex_param_1."!make"("\e")
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "postfix:sym<.>" :subid("cuid_347_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2878
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    unless_null _lex_param_1, fallback5369
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback5369:
    set $P5001, _lex_param_1["dotty"]
    unless_null $P5001, fallback5370
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback5370:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<return>" :subid("cuid_348_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2880
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2881
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5371
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback5371:
.annotate 'line', 2883
    nqp_get_sc_object $P5009, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5372
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5010
  fallback5372:
    $P5011 = $P5006."new"("RETURN" :named("name"), "lexical" :named("scope"))
    $P5012 = $P5001."new"($P5011, "call" :named("op"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "prefix:sym<make>" :subid("cuid_349_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2887
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2888
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5373
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback5373:
.annotate 'line', 2889
    nqp_get_sc_object $P5009, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Var"]
    unless_null $P5006, fallback5374
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5010
  fallback5374:
    $P5011 = $P5006."new"("$/" :named("name"), "contextual" :named("scope"))
    $P5012 = $P5001."new"($P5011, "callmethod" :named("op"), "!make" :named("name"), _lex_param_1 :named("node"))
    $P5013 = _lex_param_1."!make"($P5012)
    .return ($P5013) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<next>" :subid("cuid_350_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2896
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5375
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback5375:
    $P5006 = $P5001."new"("control" :named("op"), "next" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<last>" :subid("cuid_351_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2897
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5376
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback5376:
    $P5006 = $P5001."new"("control" :named("op"), "last" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "term:sym<redo>" :subid("cuid_352_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2898
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5377
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback5377:
    $P5006 = $P5001."new"("control" :named("op"), "redo" :named("name"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "infix:sym<~~>" :subid("cuid_353_1347804164.33") :anon :lex :outer("cuid_354_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2900
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2901
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Op"]
    unless_null $P5001, fallback5378
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback5378:
    $P5006 = $P5001."new"("callmethod" :named("op"), "ACCEPTS" :named("name"), _lex_param_1 :named("node"))
    $P5007 = _lex_param_1."!make"($P5006)
    .return ($P5007) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_365_1347804164.33") :anon :lex :outer("cuid_1_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2982
    .const 'Sub' $P5011 = 'cuid_355_1347804164.33' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_356_1347804164.33' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_357_1347804164.33' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_358_1347804164.33' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_359_1347804164.33' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_360_1347804164.33' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_361_1347804164.33' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_362_1347804164.33' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_363_1347804164.33' 
    capture_lex $P5011 
    .const 'Sub' $P5011 = 'cuid_364_1347804164.33' 
    capture_lex $P5011 
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    .const 'Sub' $P5001 = 'cuid_355_1347804164.33' 
    capture_lex $P5001
    .const 'Sub' $P5002 = 'cuid_356_1347804164.33' 
    capture_lex $P5002
    .const 'Sub' $P5003 = 'cuid_357_1347804164.33' 
    capture_lex $P5003
    .const 'Sub' $P5004 = 'cuid_358_1347804164.33' 
    capture_lex $P5004
    .const 'Sub' $P5005 = 'cuid_359_1347804164.33' 
    capture_lex $P5005
    .const 'Sub' $P5006 = 'cuid_360_1347804164.33' 
    capture_lex $P5006
    .const 'Sub' $P5007 = 'cuid_361_1347804164.33' 
    capture_lex $P5007
    .const 'Sub' $P5008 = 'cuid_362_1347804164.33' 
    capture_lex $P5008
    .const 'Sub' $P5009 = 'cuid_363_1347804164.33' 
    capture_lex $P5009
    .const 'Sub' $P5010 = 'cuid_364_1347804164.33' 
    capture_lex $P5010
    .return ($P5010) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<:my>" :subid("cuid_355_1347804164.33") :anon :lex :outer("cuid_365_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2984
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$past", $P101 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
.annotate 'line', 2985
    unless_null _lex_param_1, fallback5379
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5003
  fallback5379:
    set $P5002, _lex_param_1["statement"]
    unless_null $P5002, fallback5380
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5002, $P5004
  fallback5380:
    $P5005 = $P5002."ast"()
    set $P101, $P5005
.annotate 'line', 2986
    nqp_get_sc_object $P5009, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Regex"]
    unless_null $P5006, fallback5381
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5010
  fallback5381:
    $P5011 = $P5006."new"($P101, "qastnode" :named("rxtype"), "declarative" :named("subtype"), _lex_param_1 :named("node"))
    $P5012 = _lex_param_1."!make"($P5011)
    .return ($P5012) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<{ }>" :subid("cuid_356_1347804164.33") :anon :lex :outer("cuid_365_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2990
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2991
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5382
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback5382:
    unless_null _lex_param_1, fallback5383
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5007
  fallback5383:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5384
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5008
  fallback5384:
    $P5009 = $P5006."ast"()
    $P5010 = $P5001."new"($P5009, "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5011 = _lex_param_1."!make"($P5010)
    .return ($P5011) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<nqpvar>" :subid("cuid_357_1347804164.33") :anon :lex :outer("cuid_365_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 2995
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 2996
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5385
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback5385:
    nqp_get_sc_object $P5009, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5386
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5010
  fallback5386:
.annotate 'line', 2997
    nqp_get_sc_object $P5014, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5387
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5015
  fallback5387:
    $P5016 = $P5011."new"("!INTERPOLATE" :named("value"))
.annotate 'line', 2998
    unless_null _lex_param_1, fallback5388
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5018
  fallback5388:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5389
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5017, $P5019
  fallback5389:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<{ }>" :subid("cuid_358_1347804164.33") :anon :lex :outer("cuid_365_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3002
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3003
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5390
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback5390:
    nqp_get_sc_object $P5009, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5391
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5010
  fallback5391:
.annotate 'line', 3004
    nqp_get_sc_object $P5014, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5392
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5015
  fallback5392:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3005
    unless_null _lex_param_1, fallback5393
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5018
  fallback5393:
    set $P5017, _lex_param_1["codeblock"]
    unless_null $P5017, fallback5394
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5017, $P5019
  fallback5394:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<?{ }>" :subid("cuid_359_1347804164.33") :anon :lex :outer("cuid_365_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3009
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3010
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5395
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback5395:
    unless_null _lex_param_1, fallback5396
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5007
  fallback5396:
    set $P5006, _lex_param_1["codeblock"]
    unless_null $P5006, fallback5397
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5008
  fallback5397:
    $P5009 = $P5006."ast"()
    unless_null _lex_param_1, fallback5398
    nqp_get_sc_object $P5011, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5011
  fallback5398:
    set $P5010, _lex_param_1["zw"]
    unless_null $P5010, fallback5399
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5012
  fallback5399:
    set $S5001, $P5010
    iseq $I5001, $S5001, "!"
    $P5013 = $P5001."new"($P5009, "zerowidth" :named("subtype"), $I5001 :named("negate"), "qastnode" :named("rxtype"), _lex_param_1 :named("node"))
    $P5014 = _lex_param_1."!make"($P5013)
    .return ($P5014) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<var>" :subid("cuid_360_1347804164.33") :anon :lex :outer("cuid_365_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3015
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3016
    nqp_get_sc_object $P5004, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5003, $P5004, "QAST"
    get_who $P5002, $P5003
    set $P5001, $P5002["Regex"]
    unless_null $P5001, fallback5400
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5005
  fallback5400:
    nqp_get_sc_object $P5009, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5008, $P5009, "QAST"
    get_who $P5007, $P5008
    set $P5006, $P5007["Node"]
    unless_null $P5006, fallback5401
    nqp_get_sc_object $P5010, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5006, $P5010
  fallback5401:
.annotate 'line', 3017
    nqp_get_sc_object $P5014, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5013, $P5014, "QAST"
    get_who $P5012, $P5013
    set $P5011, $P5012["SVal"]
    unless_null $P5011, fallback5402
    nqp_get_sc_object $P5015, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5015
  fallback5402:
    $P5016 = $P5011."new"("!INTERPOLATE_REGEX" :named("value"))
.annotate 'line', 3018
    unless_null _lex_param_1, fallback5403
    nqp_get_sc_object $P5018, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5018
  fallback5403:
    set $P5017, _lex_param_1["var"]
    unless_null $P5017, fallback5404
    nqp_get_sc_object $P5019, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5017, $P5019
  fallback5404:
    $P5020 = $P5017."ast"()
    $P5021 = $P5006."new"($P5016, $P5020)
    $P5022 = $P5001."new"($P5021, "subrule" :named("rxtype"), "method" :named("subtype"), _lex_param_1 :named("node"))
    $P5023 = _lex_param_1."!make"($P5022)
    .return ($P5023) 
.end
.HLL "nqp"
.namespace []
.sub "codeblock" :subid("cuid_361_1347804164.33") :anon :lex :outer("cuid_365_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3022
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$block", $P101 
    .lex "$past", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
.annotate 'line', 3023
    unless_null _lex_param_1, fallback5405
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5004
  fallback5405:
    set $P5003, _lex_param_1["block"]
    unless_null $P5003, fallback5406
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5005
  fallback5406:
    $P5006 = $P5003."ast"()
    set $P101, $P5006
.annotate 'line', 3024
    $P5007 = $P101."blocktype"("immediate")
.annotate 'line', 3026
    nqp_get_sc_object $P5011, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5010, $P5011, "QAST"
    get_who $P5009, $P5010
    set $P5008, $P5009["Stmts"]
    unless_null $P5008, fallback5407
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5012
  fallback5407:
.annotate 'line', 3027
    nqp_get_sc_object $P5016, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5015, $P5016, "QAST"
    get_who $P5014, $P5015
    set $P5013, $P5014["Op"]
    unless_null $P5013, fallback5408
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5013, $P5017
  fallback5408:
.annotate 'line', 3029
    nqp_get_sc_object $P5021, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5020, $P5021, "QAST"
    get_who $P5019, $P5020
    set $P5018, $P5019["Var"]
    unless_null $P5018, fallback5409
    nqp_get_sc_object $P5022, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5018, $P5022
  fallback5409:
    $P5023 = $P5018."new"("$/" :named("name"), "contextual" :named("scope"))
.annotate 'line', 3030
    nqp_get_sc_object $P5027, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5026, $P5027, "QAST"
    get_who $P5025, $P5026
    set $P5024, $P5025["Op"]
    unless_null $P5024, fallback5410
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5024, $P5028
  fallback5410:
.annotate 'line', 3031
    nqp_get_sc_object $P5032, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5031, $P5032, "QAST"
    get_who $P5030, $P5031
    set $P5029, $P5030["Var"]
    unless_null $P5029, fallback5411
    nqp_get_sc_object $P5033, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5029, $P5033
  fallback5411:
    $P5034 = $P5029."new"(utf8:"$\x{a2}" :named("name"), "contextual" :named("scope"))
    $P5035 = $P5024."new"($P5034, "MATCH" :named("name"), "callmethod" :named("op"))
    $P5036 = $P5013."new"($P5023, $P5035, "bind" :named("op"))
    $P5037 = $P5008."new"($P5036, $P101)
    set $P102, $P5037
.annotate 'line', 3038
    $P5038 = _lex_param_1."!make"($P102)
    .return ($P5038) 
.end
.HLL "nqp"
.namespace []
.sub "metachar:sym<( )>" :subid("cuid_362_1347804164.33") :anon :lex :outer("cuid_365_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3042
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "$subpast", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
.annotate 'line', 3043
    nqp_get_sc_object $P5006, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5005, $P5006, "QAST"
    get_who $P5004, $P5005
    set $P5003, $P5004["Node"]
    unless_null $P5003, fallback5412
    nqp_get_sc_object $P5007, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5007
  fallback5412:
.annotate 'line', 3044
    unless_null _lex_param_1, fallback5414
    nqp_get_sc_object $P5016, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5016
  fallback5414:
    set $P5015, _lex_param_1["nibbler"]
    unless_null $P5015, fallback5415
    nqp_get_sc_object $P5017, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5015, $P5017
  fallback5415:
    $P5018 = $P5015."ast"()
    nqp_get_sc_object $P5013, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5012, $P5013, "QRegex"
    nqp_get_package_through_who $P5011, $P5012, "P6Regex"
    nqp_get_package_through_who $P5010, $P5011, "Actions"
    get_who $P5009, $P5010
    set $P5008, $P5009["qbuildsub"]
    unless_null $P5008, fallback5413
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5008, $P5014
  fallback5413:
    $P5019 = $P5008($P5018, 1 :named("anon"), 1 :named("addself"))
    $P5020 = $P5003."new"($P5019)
    set $P101, $P5020
.annotate 'line', 3045
    nqp_get_sc_object $P5024, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5023, $P5024, "QAST"
    get_who $P5022, $P5023
    set $P5021, $P5022["Regex"]
    unless_null $P5021, fallback5416
    nqp_get_sc_object $P5025, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5021, $P5025
  fallback5416:
    unless_null _lex_param_1, fallback5417
    nqp_get_sc_object $P5027, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5027
  fallback5417:
    set $P5026, _lex_param_1["nibbler"]
    unless_null $P5026, fallback5418
    nqp_get_sc_object $P5028, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5026, $P5028
  fallback5418:
    $P5029 = $P5026."ast"()
    $P5030 = $P5021."new"($P101, $P5029, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"))
    set $P102, $P5030
.annotate 'line', 3047
    $P5031 = _lex_param_1."!make"($P102)
    .return ($P5031) 
.end
.HLL "nqp"
.namespace []
.sub "assertion:sym<name>" :subid("cuid_363_1347804164.33") :anon :lex :outer("cuid_365_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3050
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .const 'Sub' $P5098 = 'cuid_475_1347804164.33' 
    capture_lex $P5098 
    .const 'Sub' $P5098 = 'cuid_476_1347804164.33' 
    capture_lex $P5098 
    .lex "$name", $P101 
    .lex "$qast", $P102 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    unless_null _lex_param_1, fallback5419
    nqp_get_sc_object $P5004, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5004
  fallback5419:
    set $P5003, _lex_param_1["longname"]
    unless_null $P5003, fallback5420
    nqp_get_sc_object $P5005, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5005
  fallback5420:
    set $S5001, $P5003
    box $P5006, $S5001
    set $P101, $P5006
    unless_null _lex_param_1, fallback5423
    nqp_get_sc_object $P5008, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5008
  fallback5423:
    set $P5007, _lex_param_1["assertion"]
    unless_null $P5007, fallback5424
    nqp_get_sc_object $P5009, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5007, $P5009
  fallback5424:
    unless $P5007 goto if1638_else5421 
.annotate 'line', 3053
.annotate 'line', 3054
    unless_null _lex_param_1, fallback5425
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5012
  fallback5425:
    set $P5011, _lex_param_1["assertion"]
    unless_null $P5011, fallback5426
    nqp_get_sc_object $P5013, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5011, $P5013
  fallback5426:
    set $P5010, $P5011[0]
    unless_null $P5010, fallback5427
    nqp_get_sc_object $P5014, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5010, $P5014
  fallback5427:
    $P5015 = $P5010."ast"()
    set $P102, $P5015
.annotate 'line', 3055
    nqp_decontainerize $P5016, _lex_param_0
    $P5017 = $P5016."subrule_alias"($P102, $P101)
    set $P5096, $P5017
    goto if1638_end5422
  if1638_else5421:
    set $S5002, $P101
    iseq $I5001, $S5002, "sym"
    unless $I5001 goto if1639_else5428 
    .const 'Sub' $P5018 = 'cuid_475_1347804164.33' 
    capture_lex $P5018
    $P5019 = $P5018()
    set $P5095, $P5019
    goto if1639_end5429
  if1639_else5428:
.annotate 'line', 3065
.annotate 'line', 3066
    nqp_get_sc_object $P5023, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5022, $P5023, "QAST"
    get_who $P5021, $P5022
    set $P5020, $P5021["Regex"]
    unless_null $P5020, fallback5446
    nqp_get_sc_object $P5024, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5020, $P5024
  fallback5446:
.annotate 'line', 3068
    nqp_get_sc_object $P5028, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5027, $P5028, "QAST"
    get_who $P5026, $P5027
    set $P5025, $P5026["Node"]
    unless_null $P5025, fallback5447
    nqp_get_sc_object $P5029, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5025, $P5029
  fallback5447:
    nqp_get_sc_object $P5033, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5032, $P5033, "QAST"
    get_who $P5031, $P5032
    set $P5030, $P5031["SVal"]
    unless_null $P5030, fallback5448
    nqp_get_sc_object $P5034, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5030, $P5034
  fallback5448:
    $P5035 = $P5030."new"($P101 :named("value"))
    $P5036 = $P5025."new"($P5035)
    $P5037 = $P5020."new"($P5036, "subrule" :named("rxtype"), "capture" :named("subtype"), _lex_param_1 :named("node"), $P101 :named("name"))
    set $P102, $P5037
    unless_null _lex_param_1, fallback5451
    nqp_get_sc_object $P5039, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5039
  fallback5451:
    set $P5038, _lex_param_1["arglist"]
    unless_null $P5038, fallback5452
    nqp_get_sc_object $P5040, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5038, $P5040
  fallback5452:
    unless $P5038 goto if1644_else5449 
.annotate 'line', 3069
.annotate 'line', 3070
    unless_null _lex_param_1, fallback5453
    nqp_get_sc_object $P5046, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5046
  fallback5453:
    set $P5045, _lex_param_1["arglist"]
    unless_null $P5045, fallback5454
    nqp_get_sc_object $P5047, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5045, $P5047
  fallback5454:
    set $P5044, $P5045[0]
    unless_null $P5044, fallback5455
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5044, $P5048
  fallback5455:
    $P5049 = $P5044."ast"()
    $P5050 = $P5049."list"()
    set $P5041, $P5050
    iter $P5043, $P5050
  for_next5457:
    unless $P5043, for_done5459
    shift $P5052, $P5043
  for_redo5458:
    .const 'Sub' $P5051 = 'cuid_476_1347804164.33' 
    capture_lex $P5051
    $P5041 = $P5051($P5052)
    goto for_next5457
  for_done5459:
    set $P5094, $P5041
    goto if1644_end5450
  if1644_else5449:
    unless_null _lex_param_1, fallback5462
    nqp_get_sc_object $P5054, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5054
  fallback5462:
    set $P5053, _lex_param_1["nibbler"]
    unless_null $P5053, fallback5463
    nqp_get_sc_object $P5055, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5053, $P5055
  fallback5463:
    set $P5093, $P5053
    unless $P5053 goto if1645_end5461 
.annotate 'line', 3072
    set $S5003, $P101
    iseq $I5002, $S5003, "after"
    unless $I5002 goto if1646_else5464 
.annotate 'line', 3074
    set $P5056, $P102[0]
    unless_null $P5056, fallback5466
    nqp_get_sc_object $P5057, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5056, $P5057
  fallback5466:
    nqp_decontainerize $P5065, _lex_param_0
    unless_null _lex_param_1, fallback5468
    nqp_get_sc_object $P5068, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5068
  fallback5468:
    set $P5067, _lex_param_1["nibbler"]
    unless_null $P5067, fallback5469
    nqp_get_sc_object $P5069, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5067, $P5069
  fallback5469:
    set $P5066, $P5067[0]
    unless_null $P5066, fallback5470
    nqp_get_sc_object $P5070, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5066, $P5070
  fallback5470:
    $P5071 = $P5066."ast"()
    $P5072 = $P5065."flip_ast"($P5071)
    nqp_get_sc_object $P5063, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5062, $P5063, "QRegex"
    nqp_get_package_through_who $P5061, $P5062, "P6Regex"
    nqp_get_package_through_who $P5060, $P5061, "Actions"
    get_who $P5059, $P5060
    set $P5058, $P5059["qbuildsub"]
    unless_null $P5058, fallback5467
    nqp_get_sc_object $P5064, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5058, $P5064
  fallback5467:
    $P5073 = $P5058($P5072, 1 :named("anon"), 1 :named("addself"))
    $P5074 = $P5056."push"($P5073)
    set $P5092, $P5074
    goto if1646_end5465
  if1646_else5464:
.annotate 'line', 3075
    set $P5075, $P102[0]
    unless_null $P5075, fallback5471
    nqp_get_sc_object $P5076, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5075, $P5076
  fallback5471:
    unless_null _lex_param_1, fallback5473
    nqp_get_sc_object $P5086, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5086
  fallback5473:
    set $P5085, _lex_param_1["nibbler"]
    unless_null $P5085, fallback5474
    nqp_get_sc_object $P5087, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5085, $P5087
  fallback5474:
    set $P5084, $P5085[0]
    unless_null $P5084, fallback5475
    nqp_get_sc_object $P5088, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5084, $P5088
  fallback5475:
    $P5089 = $P5084."ast"()
    nqp_get_sc_object $P5082, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5081, $P5082, "QRegex"
    nqp_get_package_through_who $P5080, $P5081, "P6Regex"
    nqp_get_package_through_who $P5079, $P5080, "Actions"
    get_who $P5078, $P5079
    set $P5077, $P5078["qbuildsub"]
    unless_null $P5077, fallback5472
    nqp_get_sc_object $P5083, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5077, $P5083
  fallback5472:
    $P5090 = $P5077($P5089, 1 :named("anon"), 1 :named("addself"))
    $P5091 = $P5075."push"($P5090)
    set $P5092, $P5091
  if1646_end5465:
    set $P5093, $P5092
  if1645_end5461:
    set $P5094, $P5093
  if1644_end5450:
    set $P5095, $P5094
  if1639_end5429:
    set $P5096, $P5095
  if1638_end5422:
.annotate 'line', 3078
    $P5097 = _lex_param_1."!make"($P102)
    .return ($P5097) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_475_1347804164.33") :anon :lex :outer("cuid_363_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3057
    .lex "$loc", $P101 
    .lex "$rxname", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P101, $P5001
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P102, $P5002
    find_dynamic_lex $P5004, "%*RX"
    unless_null $P5004, fallback5430
    nqp_get_sc_object $P5007, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5006, $P5007
    set $P5005, $P5006["%RX"]
    unless_null $P5005, fallback5431
    nqp_get_sc_object $P5009, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5008, $P5009
    new $P5010, 'Hash'
    set $P5008["%RX"], $P5010
    set $P5005, $P5010
  fallback5431:
    unless_null $P5005, vivi_16405432
    die "Contextual %*RX not found"
    box $P5011, "Contextual %*RX not found"
    set $P5005, $P5011
  vivi_16405432:
    set $P5004, $P5005
  fallback5430:
    set $P5003, $P5004["name"]
    unless_null $P5003, fallback5433
    nqp_get_sc_object $P5012, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5003, $P5012
  fallback5433:
    set $S5001, $P5003
    index $I5001, $S5001, ":sym<", 0
    box $P5013, $I5001
    set $P101, $P5013
    set $N5001, $P101
    set $N5002, 0
    islt $I5002, $N5001, $N5002
    box $P5026, $I5002
    set $P5025, $P5026
    unless $I5002 goto if1641_end5435 
    find_dynamic_lex $P5015, "%*RX"
    unless_null $P5015, fallback5436
    nqp_get_sc_object $P5018, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5017, $P5018
    set $P5016, $P5017["%RX"]
    unless_null $P5016, fallback5437
    nqp_get_sc_object $P5020, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5019, $P5020
    new $P5021, 'Hash'
    set $P5019["%RX"], $P5021
    set $P5016, $P5021
  fallback5437:
    unless_null $P5016, vivi_16425438
    die "Contextual %*RX not found"
    box $P5022, "Contextual %*RX not found"
    set $P5016, $P5022
  vivi_16425438:
    set $P5015, $P5016
  fallback5436:
    set $P5014, $P5015["name"]
    unless_null $P5014, fallback5439
    nqp_get_sc_object $P5023, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5014, $P5023
  fallback5439:
    set $S5002, $P5014
    index $I5003, $S5002, utf8:":sym\x{ab}", 0
    box $P5024, $I5003
    set $P101, $P5024
    set $P5025, $P101
  if1641_end5435:
    find_dynamic_lex $P5028, "%*RX"
    unless_null $P5028, fallback5440
    nqp_get_sc_object $P5031, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5030, $P5031
    set $P5029, $P5030["%RX"]
    unless_null $P5029, fallback5441
    nqp_get_sc_object $P5033, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    get_who $P5032, $P5033
    new $P5034, 'Hash'
    set $P5032["%RX"], $P5034
    set $P5029, $P5034
  fallback5441:
    unless_null $P5029, vivi_16435442
    die "Contextual %*RX not found"
    box $P5035, "Contextual %*RX not found"
    set $P5029, $P5035
  vivi_16435442:
    set $P5028, $P5029
  fallback5440:
    set $P5027, $P5028["name"]
    unless_null $P5027, fallback5443
    nqp_get_sc_object $P5036, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5027, $P5036
  fallback5443:
    set $S5005, $P5027
    set $N5004, $P101
    set $N5005, 5
    add $N5003, $N5004, $N5005
    set $I5004, $N5003
    substr $S5004, $S5005, $I5004
    chopn $S5003, $S5004, 1
    box $P5037, $S5003
    set $P102, $P5037
.annotate 'line', 3062
    nqp_get_sc_object $P5041, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5040, $P5041, "QAST"
    get_who $P5039, $P5040
    set $P5038, $P5039["Regex"]
    unless_null $P5038, fallback5444
    nqp_get_sc_object $P5042, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5038, $P5042
  fallback5444:
    find_lex $P5043, "$/"
.annotate 'line', 3063
    nqp_get_sc_object $P5047, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    nqp_get_package_through_who $P5046, $P5047, "QAST"
    get_who $P5045, $P5046
    set $P5044, $P5045["Regex"]
    unless_null $P5044, fallback5445
    nqp_get_sc_object $P5048, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5044, $P5048
  fallback5445:
    find_lex $P5049, "$/"
    $P5050 = $P5044."new"($P102, "literal" :named("rxtype"), $P5049 :named("node"))
    $P5051 = $P5038."new"($P5050, "sym" :named("name"), "subcapture" :named("rxtype"), $P5043 :named("node"))
    store_lex "$qast", $P5051
    .return ($P5051) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_476_1347804164.33") :anon :lex :outer("cuid_363_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3070
    .param pmc _lex_param_0 
    .lex "$_", _lex_param_0 
    find_lex $P5002, "$qast"
    set $P5001, $P5002[0]
    unless_null $P5001, fallback5456
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback5456:
    $P5004 = $P5001."push"(_lex_param_0)
    .return ($P5004) 
.end
.HLL "nqp"
.namespace []
.sub "arg" :subid("cuid_364_1347804164.33") :anon :lex :outer("cuid_365_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3081
    .param pmc _lex_param_0 
    .param pmc _lex_param_1 
    .lex "self", _lex_param_0 
    .lex "$/", _lex_param_1 
.annotate 'line', 3082
    unless_null _lex_param_1, fallback5476
    nqp_get_sc_object $P5002, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set _lex_param_1, $P5002
  fallback5476:
    set $P5001, _lex_param_1["quote_EXPR"]
    unless_null $P5001, fallback5477
    nqp_get_sc_object $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    set $P5001, $P5003
  fallback5477:
    $P5004 = $P5001."ast"()
    $P5005 = _lex_param_1."!make"($P5004)
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_366_1347804164.33") :anon :lex :outer("cuid_1_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
.annotate 'line', 3087
    .lex "$?PACKAGE", $P101 
    .lex "$?CLASS", $P102 
    nqp_get_sc_object $P5001, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939", 7
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_478_1347804164.33") :load :init
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = 'cuid_477_1347804164.33' 
    capture_lex $P5001 
    .local pmc cur_sc 
    nqp_dynop_setup 
    nqp_bigint_setup 
    getinterp $P5001
    get_class $P5002, "LexPad"
    get_class $P5003, "NQPLexPad"
    $P5004 = $P5001."hll_map"($P5002, $P5003)
    load_bytecode "ModuleLoader.pbc"
    .const 'Sub' $P5001 = "cuid_1_1347804164.33" 
    get_hll_global $P5002, "ModuleLoader"
    $P5003 = $P5002."load_setting"("NQPCORE")
    $P5004 = $P5001."set_outer_ctx"($P5003)
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5002 = $P5001."load_module"("QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5002 = $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5002 = $P5001."load_module"("NQPP6QRegex")
    load_bytecode "ModuleLoader.pbc"
    get_hll_global $P5001, "ModuleLoader"
    $P5002 = $P5001."load_module"("QAST")
    nqp_create_sc $P5001, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346"
    set cur_sc, $P5001
    $P5002 = cur_sc."set_description"("src\\stage2\\gen\\NQP.pm")
    new $P5003, 'ResizableStringArray'
    null $S5001
    push $P5003, $S5001
    push $P5003, "P6opaque"
    push $P5003, "QAST"
    push $P5003, "QRegex"
    push $P5003, "NQPCursorRole"
    push $P5003, "9B1FF812C0CCC4381C163922C45606220ADF053B-1347804141.474"
    push $P5003, "src\\stage2\\QRegex.nqp"
    push $P5003, "NQPMatch"
    push $P5003, "NQPCursor"
    push $P5003, "NQPRegexMethod"
    push $P5003, "NQPRegex"
    push $P5003, "HLL"
    push $P5003, "PIRT"
    push $P5003, "NQP"
    push $P5003, "DEFAULT"
    push $P5003, "CREATE"
    push $P5003, "1DCC61F2B3C9F696581992363C3E43733F596AA9-1347804138.939"
    push $P5003, "src\\stage2\\NQPCORE.setting"
    push $P5003, "bless"
    push $P5003, "BUILDALL"
    push $P5003, "new"
    push $P5003, "Str"
    push $P5003, "Numeric"
    push $P5003, "Int"
    push $P5003, "at_pos"
    push $P5003, "at_key"
    push $P5003, "defined"
    push $P5003, "ACCEPTS"
    push $P5003, "isa"
    push $P5003, "__dump"
    push $P5003, "BUILD"
    push $P5003, "slot_for_object"
    push $P5003, "0CFDE924CE6043A335172F6CBA992E3B34BC4C96-1347804144.653"
    push $P5003, "src\\stage2\\gen\\NQPHLL.pm"
    push $P5003, "add_object"
    push $P5003, "add_root_code_ref"
    push $P5003, "update_root_code_ref"
    push $P5003, "is_precompilation_mode"
    push $P5003, "add_load_dependency_task"
    push $P5003, "add_fixup_task"
    push $P5003, "sc"
    push $P5003, "handle"
    push $P5003, "code_ref_blocks"
    push $P5003, "load_dependency_tasks"
    push $P5003, "fixup_tasks"
    push $P5003, "push_lexpad"
    push $P5003, "pop_lexpad"
    push $P5003, "cur_lexpad"
    push $P5003, "get_legacy_block_list"
    push $P5003, "load_setting"
    push $P5003, "load_module"
    push $P5003, "install_package_symbol"
    push $P5003, "install_lexical_symbol"
    push $P5003, "install_package_routine"
    push $P5003, "create_code"
    push $P5003, "pkg_create_mo"
    push $P5003, "pkg_add_attribute"
    push $P5003, "pkg_add_method"
    push $P5003, "set_routine_signature"
    push $P5003, "pkg_set_body_block"
    push $P5003, "pkg_add_parent_or_role"
    push $P5003, "pkg_add_parrot_vtable_handler_mapping"
    push $P5003, "pkg_compose"
    push $P5003, "run_begin_block"
    push $P5003, "libs"
    push $P5003, "add_initializations"
    push $P5003, "is_lexical"
    push $P5003, "is_package"
    push $P5003, "is_scope"
    push $P5003, "known_sym"
    push $P5003, "find_sym"
    push $P5003, "$!sc"
    push $P5003, "$!handle"
    push $P5003, "$!precomp_mode"
    push $P5003, "$!num_code_refs"
    push $P5003, "$!code_ref_blocks"
    push $P5003, "@!load_dependency_tasks"
    push $P5003, "@!fixup_tasks"
    push $P5003, "%!addr_to_slot"
    push $P5003, "@!BLOCKS"
    push $P5003, "%!code_objects_to_fix_up"
    push $P5003, "%!code_object_fixup_list"
    push $P5003, "%!code_stub_sc_idx"
    push $P5003, "MATCH"
    push $P5003, "Bool"
    push $P5003, "parse"
    push $P5003, "!INTERPOLATE"
    push $P5003, "!INTERPOLATE_REGEX"
    push $P5003, "target"
    push $P5003, "from"
    push $P5003, "pos"
    push $P5003, "CAPHASH"
    push $P5003, "!cursor_init"
    push $P5003, "!cursor_start"
    push $P5003, "!cursor_start_subcapture"
    push $P5003, "!cursor_capture"
    push $P5003, "!cursor_push_cstack"
    push $P5003, "!cursor_pass"
    push $P5003, "!cursor_fail"
    push $P5003, "!cursor_next"
    push $P5003, "!cursor_more"
    push $P5003, "!reduce"
    push $P5003, "!reduce_with_match"
    push $P5003, "!protoregex"
    push $P5003, "!protoregex_nfa"
    push $P5003, "!protoregex_table"
    push $P5003, "!alt"
    push $P5003, "!alt_nfa"
    push $P5003, "!BACKREF"
    push $P5003, "!LITERAL"
    push $P5003, "at"
    push $P5003, "before"
    push $P5003, "after"
    push $P5003, "ws"
    push $P5003, "ww"
    push $P5003, "wb"
    push $P5003, "ident"
    push $P5003, "alpha"
    push $P5003, "alnum"
    push $P5003, "upper"
    push $P5003, "lower"
    push $P5003, "digit"
    push $P5003, "xdigit"
    push $P5003, "space"
    push $P5003, "blank"
    push $P5003, "cntrl"
    push $P5003, "punct"
    push $P5003, "FAILGOAL"
    push $P5003, "termish"
    push $P5003, "term"
    push $P5003, "infix"
    push $P5003, "prefix"
    push $P5003, "postfix"
    push $P5003, "circumfix"
    push $P5003, "postcircumfix"
    push $P5003, "term:sym<circumfix>"
    push $P5003, "infixish"
    push $P5003, "prefixish"
    push $P5003, "postfixish"
    push $P5003, "nullterm"
    push $P5003, "nullterm_alt"
    push $P5003, "nulltermish"
    push $P5003, "quote_delimited"
    push $P5003, "quote_atom"
    push $P5003, "decint"
    push $P5003, "decints"
    push $P5003, "hexint"
    push $P5003, "hexints"
    push $P5003, "octint"
    push $P5003, "octints"
    push $P5003, "binint"
    push $P5003, "binints"
    push $P5003, "integer"
    push $P5003, "dec_number"
    push $P5003, "escale"
    push $P5003, "quote_escape"
    push $P5003, "quote_escape:sym<backslash>"
    push $P5003, "quote_escape:sym<stopper>"
    push $P5003, "quote_escape:sym<bs>"
    push $P5003, "quote_escape:sym<nl>"
    push $P5003, "quote_escape:sym<cr>"
    push $P5003, "quote_escape:sym<tab>"
    push $P5003, "quote_escape:sym<ff>"
    push $P5003, "quote_escape:sym<esc>"
    push $P5003, "quote_escape:sym<hex>"
    push $P5003, "quote_escape:sym<oct>"
    push $P5003, "quote_escape:sym<chr>"
    push $P5003, "quote_escape:sym<0>"
    push $P5003, "quote_escape:sym<misc>"
    push $P5003, "charname"
    push $P5003, "charnames"
    push $P5003, "charspec"
    push $P5003, "O"
    push $P5003, "panic"
    push $P5003, "peek_delimiters"
    push $P5003, "quote_EXPR"
    push $P5003, "quotemod_check"
    push $P5003, "starter"
    push $P5003, "stopper"
    push $P5003, "split_words"
    push $P5003, "EXPR"
    push $P5003, "EXPR_reduce"
    push $P5003, "ternary"
    push $P5003, "MARKER"
    push $P5003, "MARKED"
    push $P5003, "LANG"
    push $P5003, "TOP"
    push $P5003, "identifier"
    push $P5003, "name"
    push $P5003, "deflongname"
    push $P5003, "ENDSTMT"
    push $P5003, "unv"
    push $P5003, "pod_comment"
    push $P5003, "comp_unit"
    push $P5003, "statementlist"
    push $P5003, "statement"
    push $P5003, "eat_terminator"
    push $P5003, "xblock"
    push $P5003, "pblock"
    push $P5003, "lambda"
    push $P5003, "block"
    push $P5003, "blockoid"
    push $P5003, "newpad"
    push $P5003, "outerctx"
    push $P5003, "finishpad"
    push $P5003, "you_are_here"
    push $P5003, "terminator"
    push $P5003, "terminator:sym<;>"
    push $P5003, "terminator:sym<}>"
    push $P5003, "statement_control"
    push $P5003, "statement_control:sym<use>"
    push $P5003, "statement_control:sym<if>"
    push $P5003, "statement_control:sym<unless>"
    push $P5003, "statement_control:sym<while>"
    push $P5003, "statement_control:sym<repeat>"
    push $P5003, "statement_control:sym<for>"
    push $P5003, "statement_control:sym<CATCH>"
    push $P5003, "statement_control:sym<CONTROL>"
    push $P5003, "statement_prefix"
    push $P5003, "statement_prefix:sym<BEGIN>"
    push $P5003, "statement_prefix:sym<INIT>"
    push $P5003, "statement_prefix:sym<try>"
    push $P5003, "blorst"
    push $P5003, "statement_mod_cond"
    push $P5003, "statement_mod_cond:sym<if>"
    push $P5003, "statement_mod_cond:sym<unless>"
    push $P5003, "statement_mod_loop"
    push $P5003, "statement_mod_loop:sym<while>"
    push $P5003, "statement_mod_loop:sym<until>"
    push $P5003, "statement_mod_loop:sym<for>"
    push $P5003, "term:sym<fatarrow>"
    push $P5003, "term:sym<colonpair>"
    push $P5003, "term:sym<variable>"
    push $P5003, "term:sym<package_declarator>"
    push $P5003, "term:sym<scope_declarator>"
    push $P5003, "term:sym<routine_declarator>"
    push $P5003, "term:sym<multi_declarator>"
    push $P5003, "term:sym<regex_declarator>"
    push $P5003, "term:sym<statement_prefix>"
    push $P5003, "term:sym<lambda>"
    push $P5003, "fatarrow"
    push $P5003, "colonpair"
    push $P5003, "variable"
    push $P5003, "sigil"
    push $P5003, "twigil"
    push $P5003, "package_declarator"
    push $P5003, "package_declarator:sym<module>"
    push $P5003, "package_declarator:sym<knowhow>"
    push $P5003, "package_declarator:sym<class>"
    push $P5003, "package_declarator:sym<grammar>"
    push $P5003, "package_declarator:sym<role>"
    push $P5003, "package_declarator:sym<native>"
    push $P5003, "package_declarator:sym<stub>"
    push $P5003, "package_def"
    push $P5003, "scope_declarator"
    push $P5003, "scope_declarator:sym<my>"
    push $P5003, "scope_declarator:sym<our>"
    push $P5003, "scope_declarator:sym<has>"
    push $P5003, "scoped"
    push $P5003, "typename"
    push $P5003, "declarator"
    push $P5003, "variable_declarator"
    push $P5003, "routine_declarator"
    push $P5003, "routine_declarator:sym<sub>"
    push $P5003, "routine_declarator:sym<method>"
    push $P5003, "routine_def"
    push $P5003, "method_def"
    push $P5003, "onlystar"
    push $P5003, "multi_declarator"
    push $P5003, "multi_declarator:sym<multi>"
    push $P5003, "multi_declarator:sym<proto>"
    push $P5003, "multi_declarator:sym<null>"
    push $P5003, "signature"
    push $P5003, "parameter"
    push $P5003, "param_var"
    push $P5003, "named_param"
    push $P5003, "default_value"
    push $P5003, "trait"
    push $P5003, "trait_mod"
    push $P5003, "trait_mod:sym<is>"
    push $P5003, "regex_declarator"
    push $P5003, "dotty"
    push $P5003, "term:sym<self>"
    push $P5003, "term:sym<identifier>"
    push $P5003, "term:sym<name>"
    push $P5003, "term:sym<pir::op>"
    push $P5003, "term:sym<pir::const>"
    push $P5003, "term:sym<nqp::op>"
    push $P5003, "term:sym<onlystar>"
    push $P5003, "args"
    push $P5003, "arglist"
    push $P5003, "term:sym<value>"
    push $P5003, "value"
    push $P5003, "number"
    push $P5003, "quote"
    push $P5003, "quote:sym<apos>"
    push $P5003, "quote:sym<dblq>"
    push $P5003, "quote:sym<q>"
    push $P5003, "quote:sym<qq>"
    push $P5003, "quote:sym<Q>"
    push $P5003, "quote:sym<Q:PIR>"
    push $P5003, "quote:sym</ />"
    push $P5003, "quote_escape:sym<$>"
    push $P5003, "quote_escape:sym<{ }>"
    push $P5003, "circumfix:sym<( )>"
    push $P5003, "circumfix:sym<[ ]>"
    push $P5003, "circumfix:sym<ang>"
    push $P5003, utf8:"circumfix:sym<\x{ab} \x{bb}>"
    push $P5003, "circumfix:sym<{ }>"
    push $P5003, "circumfix:sym<sigil>"
    push $P5003, "semilist"
    push $P5003, "infixstopper"
    push $P5003, "postcircumfix:sym<[ ]>"
    push $P5003, "postcircumfix:sym<{ }>"
    push $P5003, "postcircumfix:sym<ang>"
    push $P5003, "postcircumfix:sym<( )>"
    push $P5003, "postfix:sym<.>"
    push $P5003, "prefix:sym<++>"
    push $P5003, "prefix:sym<-->"
    push $P5003, "postfix:sym<++>"
    push $P5003, "postfix:sym<-->"
    push $P5003, "infix:sym<**>"
    push $P5003, "prefix:sym<+>"
    push $P5003, "prefix:sym<~>"
    push $P5003, "prefix:sym<->"
    push $P5003, "prefix:sym<?>"
    push $P5003, "prefix:sym<!>"
    push $P5003, "prefix:sym<|>"
    push $P5003, "infix:sym<*>"
    push $P5003, "infix:sym</>"
    push $P5003, "infix:sym<%>"
    push $P5003, "infix:sym<+&>"
    push $P5003, "infix:sym<+>"
    push $P5003, "infix:sym<->"
    push $P5003, "infix:sym<+|>"
    push $P5003, "infix:sym<+^>"
    push $P5003, "infix:sym<~>"
    push $P5003, "infix:sym<==>"
    push $P5003, "infix:sym<!=>"
    push $P5003, "infix:sym<<=>"
    push $P5003, "infix:sym<>=>"
    push $P5003, "infix:sym<<>"
    push $P5003, "infix:sym<>>"
    push $P5003, "infix:sym<eq>"
    push $P5003, "infix:sym<ne>"
    push $P5003, "infix:sym<le>"
    push $P5003, "infix:sym<ge>"
    push $P5003, "infix:sym<lt>"
    push $P5003, "infix:sym<gt>"
    push $P5003, "infix:sym<=:=>"
    push $P5003, "infix:sym<~~>"
    push $P5003, "infix:sym<&&>"
    push $P5003, "infix:sym<||>"
    push $P5003, "infix:sym<//>"
    push $P5003, "infix:sym<?? !!>"
    push $P5003, "infix:sym<=>"
    push $P5003, "infix:sym<:=>"
    push $P5003, "infix:sym<::=>"
    push $P5003, "infix:sym<,>"
    push $P5003, "prefix:sym<return>"
    push $P5003, "prefix:sym<make>"
    push $P5003, "term:sym<last>"
    push $P5003, "term:sym<next>"
    push $P5003, "term:sym<redo>"
    push $P5003, "smartmatch"
    push $P5003, "$!orig"
    push $P5003, "$!target"
    push $P5003, "$!from"
    push $P5003, "$!pos"
    push $P5003, "$!match"
    push $P5003, "$!name"
    push $P5003, "$!bstack"
    push $P5003, "$!cstack"
    push $P5003, "$!regexsub"
    push $P5003, "$!restart"
    push $P5003, "59F7465B80A147A3928525E3AD2A07D9205C57E4-1347804160.521"
    push $P5003, "src\\stage2\\gen\\NQPP6QRegex.pm"
    push $P5003, "obs"
    push $P5003, "normspace"
    push $P5003, "arg"
    push $P5003, "nibbler"
    push $P5003, "termaltseq"
    push $P5003, "termconjseq"
    push $P5003, "termalt"
    push $P5003, "termconj"
    push $P5003, "quantified_atom"
    push $P5003, "separator"
    push $P5003, "atom"
    push $P5003, "quantifier"
    push $P5003, "quantifier:sym<*>"
    push $P5003, "quantifier:sym<+>"
    push $P5003, "quantifier:sym<?>"
    push $P5003, "quantifier:sym<{N,M}>"
    push $P5003, "quantifier:sym<**>"
    push $P5003, "backmod"
    push $P5003, "metachar"
    push $P5003, "metachar:sym<ws>"
    push $P5003, "metachar:sym<[ ]>"
    push $P5003, "metachar:sym<( )>"
    push $P5003, "metachar:sym<'>"
    push $P5003, "metachar:sym<\">"
    push $P5003, "metachar:sym<.>"
    push $P5003, "metachar:sym<^>"
    push $P5003, "metachar:sym<^^>"
    push $P5003, "metachar:sym<$>"
    push $P5003, "metachar:sym<$$>"
    push $P5003, "metachar:sym<:::>"
    push $P5003, "metachar:sym<::>"
    push $P5003, "metachar:sym<lwb>"
    push $P5003, "metachar:sym<rwb>"
    push $P5003, "metachar:sym<from>"
    push $P5003, "metachar:sym<to>"
    push $P5003, "metachar:sym<bs>"
    push $P5003, "metachar:sym<mod>"
    push $P5003, "metachar:sym<quantifier>"
    push $P5003, "metachar:sym<~>"
    push $P5003, "metachar:sym<{*}>"
    push $P5003, "metachar:sym<assert>"
    push $P5003, "metachar:sym<var>"
    push $P5003, "metachar:sym<PIR>"
    push $P5003, "backslash"
    push $P5003, "backslash:sym<s>"
    push $P5003, "backslash:sym<b>"
    push $P5003, "backslash:sym<e>"
    push $P5003, "backslash:sym<f>"
    push $P5003, "backslash:sym<h>"
    push $P5003, "backslash:sym<r>"
    push $P5003, "backslash:sym<t>"
    push $P5003, "backslash:sym<v>"
    push $P5003, "backslash:sym<o>"
    push $P5003, "backslash:sym<x>"
    push $P5003, "backslash:sym<c>"
    push $P5003, "backslash:sym<A>"
    push $P5003, "backslash:sym<z>"
    push $P5003, "backslash:sym<Z>"
    push $P5003, "backslash:sym<Q>"
    push $P5003, "backslash:sym<unrec>"
    push $P5003, "backslash:sym<misc>"
    push $P5003, "assertion"
    push $P5003, "assertion:sym<?>"
    push $P5003, "assertion:sym<!>"
    push $P5003, "assertion:sym<|>"
    push $P5003, "assertion:sym<method>"
    push $P5003, "assertion:sym<name>"
    push $P5003, "assertion:sym<[>"
    push $P5003, "cclass_elem"
    push $P5003, "mod_internal"
    push $P5003, "mod_ident"
    push $P5003, "mod_ident:sym<ignorecase>"
    push $P5003, "mod_ident:sym<ratchet>"
    push $P5003, "mod_ident:sym<sigspace>"
    push $P5003, "metachar:sym<:my>"
    push $P5003, "metachar:sym<{ }>"
    push $P5003, "metachar:sym<nqpvar>"
    push $P5003, "assertion:sym<{ }>"
    push $P5003, "assertion:sym<?{ }>"
    push $P5003, "assertion:sym<var>"
    push $P5003, "codeblock"
    push $P5003, "ints_to_string"
    push $P5003, "CTXSAVE"
    push $P5003, "SET_BLOCK_OUTER_CTX"
    push $P5003, "subrule_alias"
    push $P5003, "flip_ast"
    push $P5003, "language"
    push $P5003, "compiler"
    push $P5003, "config"
    push $P5003, "autoprint"
    push $P5003, "interactive"
    push $P5003, "eval"
    push $P5003, "ctxsave"
    push $P5003, "stages"
    push $P5003, "parsegrammar"
    push $P5003, "parseactions"
    push $P5003, "interactive_banner"
    push $P5003, "interactive_prompt"
    push $P5003, "compiler_progname"
    push $P5003, "commandline_options"
    push $P5003, "command_line"
    push $P5003, "command_eval"
    push $P5003, "process_args"
    push $P5003, "evalfiles"
    push $P5003, "compile"
    push $P5003, "start"
    push $P5003, "past"
    push $P5003, "post"
    push $P5003, "pirbegin"
    push $P5003, "pir"
    push $P5003, "evalpmc"
    push $P5003, "dumper"
    push $P5003, "usage"
    push $P5003, "version"
    push $P5003, "show-config"
    push $P5003, "verbose-config"
    push $P5003, "vmstat"
    push $P5003, "nqpevent"
    push $P5003, "removestage"
    push $P5003, "addstage"
    push $P5003, "parse_name"
    push $P5003, "lineof"
    push $P5003, "user-progname"
    push $P5003, "cli-options"
    push $P5003, "cli-arguments"
    push $P5003, "@!stages"
    push $P5003, "$!parsegrammar"
    push $P5003, "$!parseactions"
    push $P5003, "@!cmdoptions"
    push $P5003, "$!usage"
    push $P5003, "$!compiler_progname"
    push $P5003, "$!language"
    push $P5003, "%!config"
    push $P5003, "$!user_progname"
    push $P5003, "@!cli-arguments"
    push $P5003, "%!cli-options"
    push $P5003, "__6MODEL_CORE__"
    push $P5003, "GLOBALish"
    push $P5003, "EXPORT"
    push $P5003, "569A1B419F724EEF275BC7729D702142D988A435-1347804135.739"
    push $P5003, "src\\stage2\\gen\\nqp-mo.pm"
    push $P5003, "NQP::World"
    push $P5003, "NQP::Grammar"
    push $P5003, "orig"
    push $P5003, "match"
    push $P5003, "bstack"
    push $P5003, "cstack"
    push $P5003, "regexsub"
    push $P5003, "restart"
    push $P5003, "NQP::Regex"
    push $P5003, "NQP::Actions"
    push $P5003, "NQP::RegexActions"
    push $P5003, "NQP::Compiler"
    push $P5003, "CompileTimeValue"
    push $P5003, "5999FA70DED24A5080F4680C3CF5A9B13CAD7450-1347804139.915"
    push $P5003, "src\\stage2\\QASTNode.nqp"
    push $P5003, "SpecialArg"
    push $P5003, "Node"
    push $P5003, "Regex"
    push $P5003, "IVal"
    push $P5003, "NVal"
    push $P5003, "SVal"
    push $P5003, "BVal"
    push $P5003, "WVal"
    push $P5003, "Want"
    push $P5003, "Var"
    push $P5003, "VarWithFallback"
    push $P5003, "Op"
    push $P5003, "VM"
    push $P5003, "Stmts"
    push $P5003, "Stmt"
    push $P5003, "Block"
    push $P5003, "BlockMemo"
    push $P5003, "Unquote"
    push $P5003, "CompUnit"
    push $P5003, "InlinePlaceholder"
    push $P5003, "Operations"
    push $P5003, "4454B4C8CDB4DF59AECFB0356C4D8728B53E4241-1347804149.338"
    push $P5003, "src\\stage2\\QAST.nqp"
    push $P5003, "Compiler"
    push $P5003, "NFA"
    push $P5003, "P6Regex"
    push $P5003, "Grammar"
    push $P5003, "Actions"
    push $P5003, "CommandLine"
    push $P5003, "World"
    push $P5003, "CallResult"
    push $P5003, "Sub"
    push $P5003, "Ops"
    push $P5003, "Label"
    push $P5003, "RegexActions"
    .const 'Sub' $P5004 = 'cuid_477_1347804164.33' 
    capture_lex $P5004
    $P5005 = $P5004()
    nqp_deserialize_sc "", cur_sc, $P5003, $P5005
    .const "LexInfo" $P5001 = "cuid_1_1347804164.33"
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    $P5003 = $P5001."set_static_lexpad_value"("GLOBALish", $P5002)
    .const "LexInfo" $P5004 = "cuid_1_1347804164.33"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_1_1347804164.33"
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 0
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_1_1347804164.33"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_1_1347804164.33"
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 1
    $P5003 = $P5001."set_static_lexpad_value"("EXPORT", $P5002)
    .const "LexInfo" $P5004 = "cuid_1_1347804164.33"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_2_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 4
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_3_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 5
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_4_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 6
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_5_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 7
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_6_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 8
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_7_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 9
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_8_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 10
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_9_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 11
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_10_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 12
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_11_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 13
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_12_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 14
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_13_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 15
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_14_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 16
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_15_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 17
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_16_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 18
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_17_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 19
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_18_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 20
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_19_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 21
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_20_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 22
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_21_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 23
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_22_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 24
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_23_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 25
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_24_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 26
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_25_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 27
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_26_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 28
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_27_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 29
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_28_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 30
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_29_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 31
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_30_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 32
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_31_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 33
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_32_1347804164.33"
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_32_1347804164.33"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_32_1347804164.33"
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 3
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_32_1347804164.33"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_33_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 35
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_34_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 36
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_35_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 37
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_36_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 38
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_37_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 39
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_38_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 40
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_40_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 41
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_42_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 42
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_43_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 43
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_44_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 44
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_46_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 45
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_47_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 46
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_48_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 47
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_49_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 48
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_50_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 49
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_51_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 50
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_52_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 51
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_53_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 52
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_54_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 53
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_55_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 54
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_56_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 55
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_57_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 56
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_58_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 57
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_59_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 58
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_60_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 59
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_61_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 60
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_62_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 61
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_64_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 62
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_65_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 63
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_66_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 64
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_67_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 65
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_68_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 66
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_69_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 67
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_70_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 68
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_71_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 69
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_72_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 70
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_73_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 71
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_74_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 72
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_75_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 73
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_76_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 74
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_77_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 75
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_78_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 76
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_79_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 77
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_80_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 78
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_81_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 79
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_82_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 80
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_83_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 81
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_84_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 82
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_85_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 83
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_86_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 84
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_87_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 85
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_90_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 86
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_91_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 87
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_92_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 88
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_93_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 89
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_94_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 90
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_95_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 91
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_96_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 92
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_97_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 93
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_98_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 94
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_99_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 95
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_100_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 96
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_101_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 97
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_102_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 98
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_103_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 99
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_104_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 100
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_105_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 101
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_106_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 102
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_107_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 103
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_108_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 104
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_109_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 105
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_110_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 106
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_111_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 107
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_112_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 108
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_113_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 109
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_114_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 110
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_115_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 111
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_116_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 112
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_117_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 113
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_118_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 114
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_119_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 115
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_120_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 116
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_121_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 117
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_122_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 118
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_123_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 119
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_124_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 120
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_125_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 121
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_127_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 122
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_128_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 123
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_129_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 124
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_130_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 125
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_131_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 126
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_132_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 127
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_133_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 128
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_134_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 129
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_135_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 130
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_136_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 131
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_137_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 132
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_138_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 133
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_139_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 134
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_140_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 135
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_141_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 136
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_142_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 137
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_143_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 138
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_144_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 139
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_145_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 140
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_146_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 141
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_147_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 142
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_148_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 143
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_149_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 144
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_150_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 145
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_151_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 146
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_152_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 147
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_153_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 148
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_154_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 149
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_155_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 150
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_156_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 151
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_157_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 152
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_158_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 153
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_159_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 154
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_160_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 155
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_161_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 156
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_162_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 157
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_163_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 158
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_164_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 159
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_165_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 160
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_166_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 161
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_167_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 162
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_168_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 163
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_169_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 164
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_170_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 165
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_171_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 166
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_172_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 167
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_173_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 168
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_174_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 169
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_175_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 170
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_176_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 171
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_177_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 172
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_178_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 173
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_179_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 174
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_180_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 175
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_181_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 176
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_182_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 177
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_183_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 178
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_184_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 179
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_185_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 180
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_186_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 181
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_187_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 182
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_188_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 183
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_189_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 184
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_190_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 185
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_191_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 186
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_192_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 187
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_193_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 188
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_194_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 189
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_195_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 190
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_196_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 191
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_197_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 192
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_198_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 193
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_199_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 194
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_200_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 195
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_201_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 196
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_202_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 197
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_203_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 198
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_204_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 199
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_205_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 200
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_206_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 201
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_207_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 202
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_208_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 203
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_209_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 204
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_210_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 205
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_211_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 206
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_212_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 207
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_213_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 208
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_214_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 209
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_215_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 210
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_216_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 211
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_217_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 212
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_218_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 213
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_219_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 214
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_220_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 215
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_221_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 216
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_222_1347804164.33"
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 34
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_222_1347804164.33"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_222_1347804164.33"
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 34
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_222_1347804164.33"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_224_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 218
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_225_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 219
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_227_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 220
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_228_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 221
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_231_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 222
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_234_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 223
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_236_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 224
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_238_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 225
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_239_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 226
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_240_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 227
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_241_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 228
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_242_1347804164.33"
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 217
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_242_1347804164.33"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_242_1347804164.33"
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 217
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_242_1347804164.33"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_243_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 230
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_244_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 231
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_245_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 232
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_246_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 233
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_247_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 234
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_248_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 235
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_249_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 236
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_250_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 237
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_251_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 238
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_252_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 239
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_253_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 240
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_254_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 241
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_255_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 242
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_256_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 243
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_257_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 244
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_258_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 245
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_259_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 246
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_260_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 247
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_261_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 248
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_262_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 249
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_263_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 250
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_264_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 251
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_265_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 252
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_266_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 253
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_267_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 254
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_268_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 255
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_269_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 256
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_270_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 257
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_271_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 258
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_272_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 259
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_273_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 260
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_274_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 261
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_275_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 262
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_276_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 263
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_277_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 264
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_278_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 265
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_279_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 266
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_280_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 267
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_281_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 268
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_282_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 269
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_283_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 270
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_284_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 271
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_285_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 272
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_286_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 273
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_287_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 274
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_288_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 275
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_289_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 276
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_290_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 277
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_291_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 278
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_292_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 279
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_293_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 280
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_294_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 281
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_295_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 282
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_296_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 283
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_297_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 284
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_298_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 285
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_299_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 286
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_300_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 287
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_301_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 288
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_302_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 289
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_303_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 290
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_304_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 291
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_305_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 292
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_306_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 293
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_307_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 294
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_308_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 295
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_309_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 296
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_310_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 297
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_311_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 298
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_312_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 299
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_313_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 300
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_314_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 301
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_315_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 302
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_316_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 303
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_317_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 304
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_318_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 305
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_319_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 306
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_320_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 307
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_321_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 308
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_322_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 309
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_323_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 310
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_324_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 311
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_325_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 312
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_326_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 313
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_327_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 314
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_328_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 315
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_329_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 316
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_330_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 317
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_331_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 318
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_332_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 319
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_333_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 320
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_334_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 321
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_335_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 322
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_336_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 323
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_337_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 324
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_338_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 325
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_339_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 326
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_340_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 327
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_341_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 328
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_342_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 329
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_343_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 330
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_344_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 331
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_345_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 332
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_346_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 333
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_347_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 334
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_348_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 335
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_349_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 336
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_350_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 337
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_351_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 338
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_352_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 339
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_353_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 340
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_354_1347804164.33"
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 229
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_354_1347804164.33"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_354_1347804164.33"
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 229
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_354_1347804164.33"
    $P5005 = $P5004."finish_static_lexpad"()
    .const 'Sub' $P5001 = "cuid_355_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 342
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_356_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 343
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_357_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 344
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_358_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 345
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_359_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 346
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_360_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 347
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_361_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 348
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_362_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 349
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_363_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 350
    set_sub_code_object $P5001, $P5002
    .const 'Sub' $P5001 = "cuid_364_1347804164.33" 
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 351
    set_sub_code_object $P5001, $P5002
    .const "LexInfo" $P5001 = "cuid_365_1347804164.33"
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 341
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_365_1347804164.33"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_365_1347804164.33"
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 341
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_365_1347804164.33"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_366_1347804164.33"
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 352
    $P5003 = $P5001."set_static_lexpad_value"("$?PACKAGE", $P5002)
    .const "LexInfo" $P5004 = "cuid_366_1347804164.33"
    $P5005 = $P5004."finish_static_lexpad"()
    .const "LexInfo" $P5001 = "cuid_366_1347804164.33"
    nqp_get_sc_object $P5002, "99C1BA288BF915893755C664EACF9C8929FA4E26-1347804164.346", 352
    $P5003 = $P5001."set_static_lexpad_value"("$?CLASS", $P5002)
    .const "LexInfo" $P5004 = "cuid_366_1347804164.33"
    $P5005 = $P5004."finish_static_lexpad"()
    .return ($P5005) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_477_1347804164.33") :anon :lex :outer("cuid_478_1347804164.33")
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    new $P5001, 'ResizablePMCArray'
    .const 'Sub' $P5002 = "cuid_2_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_3_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_4_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_5_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_6_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_7_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_8_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_9_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_10_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_11_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_12_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_13_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_14_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_15_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_16_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_17_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_18_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_19_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_20_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_21_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_22_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_23_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_24_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_25_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_26_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_27_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_28_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_29_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_30_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_31_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_33_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_34_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_35_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_36_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_37_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_38_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_40_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_42_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_43_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_44_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_46_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_47_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_48_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_49_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_50_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_51_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_52_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_53_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_54_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_55_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_56_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_57_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_58_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_59_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_60_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_61_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_62_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_64_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_65_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_66_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_67_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_68_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_69_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_70_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_71_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_72_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_73_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_74_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_75_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_76_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_77_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_78_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_79_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_80_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_81_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_82_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_83_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_84_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_85_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_86_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_87_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_90_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_91_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_92_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_93_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_94_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_95_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_96_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_97_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_98_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_99_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_100_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_101_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_102_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_103_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_104_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_105_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_106_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_107_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_108_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_109_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_110_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_111_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_112_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_113_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_114_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_115_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_116_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_117_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_118_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_119_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_120_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_121_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_122_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_123_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_124_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_125_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_127_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_128_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_129_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_130_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_131_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_132_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_133_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_134_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_135_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_136_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_137_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_138_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_139_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_140_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_141_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_142_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_143_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_144_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_145_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_146_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_147_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_148_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_149_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_150_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_151_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_152_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_153_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_154_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_155_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_156_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_157_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_158_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_159_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_160_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_161_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_162_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_163_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_164_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_165_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_166_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_167_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_168_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_169_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_170_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_171_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_172_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_173_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_174_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_175_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_176_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_177_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_178_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_179_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_180_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_181_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_182_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_183_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_184_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_185_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_186_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_187_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_188_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_189_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_190_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_191_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_192_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_193_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_194_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_195_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_196_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_197_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_198_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_199_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_200_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_201_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_202_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_203_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_204_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_205_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_206_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_207_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_208_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_209_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_210_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_211_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_212_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_213_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_214_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_215_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_216_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_217_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_218_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_219_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_220_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_221_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_224_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_225_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_227_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_228_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_231_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_234_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_236_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_238_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_239_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_240_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_241_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_243_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_244_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_245_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_246_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_247_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_248_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_249_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_250_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_251_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_252_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_253_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_254_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_255_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_256_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_257_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_258_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_259_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_260_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_261_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_262_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_263_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_264_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_265_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_266_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_267_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_268_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_269_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_270_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_271_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_272_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_273_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_274_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_275_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_276_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_277_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_278_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_279_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_280_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_281_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_282_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_283_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_284_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_285_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_286_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_287_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_288_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_289_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_290_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_291_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_292_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_293_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_294_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_295_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_296_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_297_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_298_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_299_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_300_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_301_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_302_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_303_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_304_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_305_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_306_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_307_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_308_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_309_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_310_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_311_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_312_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_313_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_314_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_315_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_316_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_317_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_318_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_319_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_320_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_321_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_322_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_323_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_324_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_325_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_326_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_327_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_328_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_329_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_330_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_331_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_332_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_333_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_334_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_335_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_336_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_337_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_338_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_339_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_340_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_341_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_342_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_343_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_344_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_345_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_346_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_347_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_348_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_349_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_350_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_351_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_352_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_353_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_355_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_356_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_357_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_358_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_359_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_360_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_361_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_362_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_363_1347804164.33" 
    push $P5001, $P5002
    .const 'Sub' $P5002 = "cuid_364_1347804164.33" 
    push $P5001, $P5002
    .return ($P5001) 
.end
.HLL "nqp"
.namespace []
.sub "" :subid("cuid_479_1347804164.33") :load
.annotate 'file', "src\\stage2\\gen\\NQP.pm"
    .const 'Sub' $P5001 = "cuid_1_1347804164.33" 
    $P5002 = $P5001()
    .return ($P5002) 
.end